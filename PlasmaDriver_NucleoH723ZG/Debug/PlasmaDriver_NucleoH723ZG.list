
PlasmaDriver_NucleoH723ZG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011264  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a00  08011534  08011534  00021534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011f34  08011f34  00021f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011f3c  08011f3c  00021f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011f40  08011f40  00021f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  24000000  08011f44  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000098  08011fdc  00030098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000f8  0801203c  000300f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ee4  24000158  0801209c  00030158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400103c  0801209c  0003103c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030158  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030186  2**0
                  CONTENTS, READONLY
 13 .debug_info   000237c5  00000000  00000000  000301c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003947  00000000  00000000  0005398e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ab8  00000000  00000000  000572d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014ea  00000000  00000000  00058d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000373e7  00000000  00000000  0005a27a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022abc  00000000  00000000  00091661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0016c475  00000000  00000000  000b411d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007a90  00000000  00000000  00220594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00228024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000158 	.word	0x24000158
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801151c 	.word	0x0801151c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400015c 	.word	0x2400015c
 800030c:	0801151c 	.word	0x0801151c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b970 	b.w	80006b8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9e08      	ldr	r6, [sp, #32]
 80003f6:	460d      	mov	r5, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	460f      	mov	r7, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4694      	mov	ip, r2
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0xe2>
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	b143      	cbz	r3, 800041e <__udivmoddi4+0x2e>
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	f1c3 0220 	rsb	r2, r3, #32
 8000414:	409f      	lsls	r7, r3
 8000416:	fa20 f202 	lsr.w	r2, r0, r2
 800041a:	4317      	orrs	r7, r2
 800041c:	409c      	lsls	r4, r3
 800041e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000422:	fa1f f58c 	uxth.w	r5, ip
 8000426:	fbb7 f1fe 	udiv	r1, r7, lr
 800042a:	0c22      	lsrs	r2, r4, #16
 800042c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000430:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000434:	fb01 f005 	mul.w	r0, r1, r5
 8000438:	4290      	cmp	r0, r2
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x62>
 800043c:	eb1c 0202 	adds.w	r2, ip, r2
 8000440:	f101 37ff 	add.w	r7, r1, #4294967295
 8000444:	f080 811c 	bcs.w	8000680 <__udivmoddi4+0x290>
 8000448:	4290      	cmp	r0, r2
 800044a:	f240 8119 	bls.w	8000680 <__udivmoddi4+0x290>
 800044e:	3902      	subs	r1, #2
 8000450:	4462      	add	r2, ip
 8000452:	1a12      	subs	r2, r2, r0
 8000454:	b2a4      	uxth	r4, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000462:	fb00 f505 	mul.w	r5, r0, r5
 8000466:	42a5      	cmp	r5, r4
 8000468:	d90a      	bls.n	8000480 <__udivmoddi4+0x90>
 800046a:	eb1c 0404 	adds.w	r4, ip, r4
 800046e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000472:	f080 8107 	bcs.w	8000684 <__udivmoddi4+0x294>
 8000476:	42a5      	cmp	r5, r4
 8000478:	f240 8104 	bls.w	8000684 <__udivmoddi4+0x294>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000484:	1b64      	subs	r4, r4, r5
 8000486:	2100      	movs	r1, #0
 8000488:	b11e      	cbz	r6, 8000492 <__udivmoddi4+0xa2>
 800048a:	40dc      	lsrs	r4, r3
 800048c:	2300      	movs	r3, #0
 800048e:	e9c6 4300 	strd	r4, r3, [r6]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0xbc>
 800049a:	2e00      	cmp	r6, #0
 800049c:	f000 80ed 	beq.w	800067a <__udivmoddi4+0x28a>
 80004a0:	2100      	movs	r1, #0
 80004a2:	e9c6 0500 	strd	r0, r5, [r6]
 80004a6:	4608      	mov	r0, r1
 80004a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ac:	fab3 f183 	clz	r1, r3
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d149      	bne.n	8000548 <__udivmoddi4+0x158>
 80004b4:	42ab      	cmp	r3, r5
 80004b6:	d302      	bcc.n	80004be <__udivmoddi4+0xce>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	f200 80f8 	bhi.w	80006ae <__udivmoddi4+0x2be>
 80004be:	1a84      	subs	r4, r0, r2
 80004c0:	eb65 0203 	sbc.w	r2, r5, r3
 80004c4:	2001      	movs	r0, #1
 80004c6:	4617      	mov	r7, r2
 80004c8:	2e00      	cmp	r6, #0
 80004ca:	d0e2      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	e9c6 4700 	strd	r4, r7, [r6]
 80004d0:	e7df      	b.n	8000492 <__udivmoddi4+0xa2>
 80004d2:	b902      	cbnz	r2, 80004d6 <__udivmoddi4+0xe6>
 80004d4:	deff      	udf	#255	; 0xff
 80004d6:	fab2 f382 	clz	r3, r2
 80004da:	2b00      	cmp	r3, #0
 80004dc:	f040 8090 	bne.w	8000600 <__udivmoddi4+0x210>
 80004e0:	1a8a      	subs	r2, r1, r2
 80004e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e6:	fa1f fe8c 	uxth.w	lr, ip
 80004ea:	2101      	movs	r1, #1
 80004ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80004f0:	fb07 2015 	mls	r0, r7, r5, r2
 80004f4:	0c22      	lsrs	r2, r4, #16
 80004f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004fa:	fb0e f005 	mul.w	r0, lr, r5
 80004fe:	4290      	cmp	r0, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x124>
 8000502:	eb1c 0202 	adds.w	r2, ip, r2
 8000506:	f105 38ff 	add.w	r8, r5, #4294967295
 800050a:	d202      	bcs.n	8000512 <__udivmoddi4+0x122>
 800050c:	4290      	cmp	r0, r2
 800050e:	f200 80cb 	bhi.w	80006a8 <__udivmoddi4+0x2b8>
 8000512:	4645      	mov	r5, r8
 8000514:	1a12      	subs	r2, r2, r0
 8000516:	b2a4      	uxth	r4, r4
 8000518:	fbb2 f0f7 	udiv	r0, r2, r7
 800051c:	fb07 2210 	mls	r2, r7, r0, r2
 8000520:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000524:	fb0e fe00 	mul.w	lr, lr, r0
 8000528:	45a6      	cmp	lr, r4
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x14e>
 800052c:	eb1c 0404 	adds.w	r4, ip, r4
 8000530:	f100 32ff 	add.w	r2, r0, #4294967295
 8000534:	d202      	bcs.n	800053c <__udivmoddi4+0x14c>
 8000536:	45a6      	cmp	lr, r4
 8000538:	f200 80bb 	bhi.w	80006b2 <__udivmoddi4+0x2c2>
 800053c:	4610      	mov	r0, r2
 800053e:	eba4 040e 	sub.w	r4, r4, lr
 8000542:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000546:	e79f      	b.n	8000488 <__udivmoddi4+0x98>
 8000548:	f1c1 0720 	rsb	r7, r1, #32
 800054c:	408b      	lsls	r3, r1
 800054e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000552:	ea4c 0c03 	orr.w	ip, ip, r3
 8000556:	fa05 f401 	lsl.w	r4, r5, r1
 800055a:	fa20 f307 	lsr.w	r3, r0, r7
 800055e:	40fd      	lsrs	r5, r7
 8000560:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000564:	4323      	orrs	r3, r4
 8000566:	fbb5 f8f9 	udiv	r8, r5, r9
 800056a:	fa1f fe8c 	uxth.w	lr, ip
 800056e:	fb09 5518 	mls	r5, r9, r8, r5
 8000572:	0c1c      	lsrs	r4, r3, #16
 8000574:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000578:	fb08 f50e 	mul.w	r5, r8, lr
 800057c:	42a5      	cmp	r5, r4
 800057e:	fa02 f201 	lsl.w	r2, r2, r1
 8000582:	fa00 f001 	lsl.w	r0, r0, r1
 8000586:	d90b      	bls.n	80005a0 <__udivmoddi4+0x1b0>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000590:	f080 8088 	bcs.w	80006a4 <__udivmoddi4+0x2b4>
 8000594:	42a5      	cmp	r5, r4
 8000596:	f240 8085 	bls.w	80006a4 <__udivmoddi4+0x2b4>
 800059a:	f1a8 0802 	sub.w	r8, r8, #2
 800059e:	4464      	add	r4, ip
 80005a0:	1b64      	subs	r4, r4, r5
 80005a2:	b29d      	uxth	r5, r3
 80005a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80005a8:	fb09 4413 	mls	r4, r9, r3, r4
 80005ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005b4:	45a6      	cmp	lr, r4
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x1da>
 80005b8:	eb1c 0404 	adds.w	r4, ip, r4
 80005bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80005c0:	d26c      	bcs.n	800069c <__udivmoddi4+0x2ac>
 80005c2:	45a6      	cmp	lr, r4
 80005c4:	d96a      	bls.n	800069c <__udivmoddi4+0x2ac>
 80005c6:	3b02      	subs	r3, #2
 80005c8:	4464      	add	r4, ip
 80005ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ce:	fba3 9502 	umull	r9, r5, r3, r2
 80005d2:	eba4 040e 	sub.w	r4, r4, lr
 80005d6:	42ac      	cmp	r4, r5
 80005d8:	46c8      	mov	r8, r9
 80005da:	46ae      	mov	lr, r5
 80005dc:	d356      	bcc.n	800068c <__udivmoddi4+0x29c>
 80005de:	d053      	beq.n	8000688 <__udivmoddi4+0x298>
 80005e0:	b156      	cbz	r6, 80005f8 <__udivmoddi4+0x208>
 80005e2:	ebb0 0208 	subs.w	r2, r0, r8
 80005e6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ea:	fa04 f707 	lsl.w	r7, r4, r7
 80005ee:	40ca      	lsrs	r2, r1
 80005f0:	40cc      	lsrs	r4, r1
 80005f2:	4317      	orrs	r7, r2
 80005f4:	e9c6 7400 	strd	r7, r4, [r6]
 80005f8:	4618      	mov	r0, r3
 80005fa:	2100      	movs	r1, #0
 80005fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000600:	f1c3 0120 	rsb	r1, r3, #32
 8000604:	fa02 fc03 	lsl.w	ip, r2, r3
 8000608:	fa20 f201 	lsr.w	r2, r0, r1
 800060c:	fa25 f101 	lsr.w	r1, r5, r1
 8000610:	409d      	lsls	r5, r3
 8000612:	432a      	orrs	r2, r5
 8000614:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000618:	fa1f fe8c 	uxth.w	lr, ip
 800061c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000620:	fb07 1510 	mls	r5, r7, r0, r1
 8000624:	0c11      	lsrs	r1, r2, #16
 8000626:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800062a:	fb00 f50e 	mul.w	r5, r0, lr
 800062e:	428d      	cmp	r5, r1
 8000630:	fa04 f403 	lsl.w	r4, r4, r3
 8000634:	d908      	bls.n	8000648 <__udivmoddi4+0x258>
 8000636:	eb1c 0101 	adds.w	r1, ip, r1
 800063a:	f100 38ff 	add.w	r8, r0, #4294967295
 800063e:	d22f      	bcs.n	80006a0 <__udivmoddi4+0x2b0>
 8000640:	428d      	cmp	r5, r1
 8000642:	d92d      	bls.n	80006a0 <__udivmoddi4+0x2b0>
 8000644:	3802      	subs	r0, #2
 8000646:	4461      	add	r1, ip
 8000648:	1b49      	subs	r1, r1, r5
 800064a:	b292      	uxth	r2, r2
 800064c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000650:	fb07 1115 	mls	r1, r7, r5, r1
 8000654:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000658:	fb05 f10e 	mul.w	r1, r5, lr
 800065c:	4291      	cmp	r1, r2
 800065e:	d908      	bls.n	8000672 <__udivmoddi4+0x282>
 8000660:	eb1c 0202 	adds.w	r2, ip, r2
 8000664:	f105 38ff 	add.w	r8, r5, #4294967295
 8000668:	d216      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 800066a:	4291      	cmp	r1, r2
 800066c:	d914      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800066e:	3d02      	subs	r5, #2
 8000670:	4462      	add	r2, ip
 8000672:	1a52      	subs	r2, r2, r1
 8000674:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000678:	e738      	b.n	80004ec <__udivmoddi4+0xfc>
 800067a:	4631      	mov	r1, r6
 800067c:	4630      	mov	r0, r6
 800067e:	e708      	b.n	8000492 <__udivmoddi4+0xa2>
 8000680:	4639      	mov	r1, r7
 8000682:	e6e6      	b.n	8000452 <__udivmoddi4+0x62>
 8000684:	4610      	mov	r0, r2
 8000686:	e6fb      	b.n	8000480 <__udivmoddi4+0x90>
 8000688:	4548      	cmp	r0, r9
 800068a:	d2a9      	bcs.n	80005e0 <__udivmoddi4+0x1f0>
 800068c:	ebb9 0802 	subs.w	r8, r9, r2
 8000690:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000694:	3b01      	subs	r3, #1
 8000696:	e7a3      	b.n	80005e0 <__udivmoddi4+0x1f0>
 8000698:	4645      	mov	r5, r8
 800069a:	e7ea      	b.n	8000672 <__udivmoddi4+0x282>
 800069c:	462b      	mov	r3, r5
 800069e:	e794      	b.n	80005ca <__udivmoddi4+0x1da>
 80006a0:	4640      	mov	r0, r8
 80006a2:	e7d1      	b.n	8000648 <__udivmoddi4+0x258>
 80006a4:	46d0      	mov	r8, sl
 80006a6:	e77b      	b.n	80005a0 <__udivmoddi4+0x1b0>
 80006a8:	3d02      	subs	r5, #2
 80006aa:	4462      	add	r2, ip
 80006ac:	e732      	b.n	8000514 <__udivmoddi4+0x124>
 80006ae:	4608      	mov	r0, r1
 80006b0:	e70a      	b.n	80004c8 <__udivmoddi4+0xd8>
 80006b2:	4464      	add	r4, ip
 80006b4:	3802      	subs	r0, #2
 80006b6:	e742      	b.n	800053e <__udivmoddi4+0x14e>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <writeConfigFlash>:
// Prototypes
void measureVoltagesTemperaturesADC3(void);

// Write configuration to flash
static uint32_t writeConfigFlash(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
	uint32_t faultySector;	//Contains error code for faulty sector
	uint32_t error_code = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]

	// Unlock Flash
	HAL_FLASH_Unlock();
 80006c6:	f009 fbed 	bl	8009ea4 <HAL_FLASH_Unlock>

	// Erase flash sector 7
	if (HAL_FLASHEx_Erase(&sFlashErase, &faultySector) == HAL_OK)
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	4619      	mov	r1, r3
 80006ce:	4815      	ldr	r0, [pc, #84]	; (8000724 <writeConfigFlash+0x68>)
 80006d0:	f009 fc84 	bl	8009fdc <HAL_FLASHEx_Erase>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d119      	bne.n	800070e <writeConfigFlash+0x52>
	{
		for (uint32_t offset = 0; offset < sizeof(sFlashConfig); offset += FLASH_WORD)
 80006da:	2300      	movs	r3, #0
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	e012      	b.n	8000706 <writeConfigFlash+0x4a>
		{
			// Program one flash word (8*4 bytes)
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, FLASH_SECTOR7_START_ADDR + offset, ((uint32_t) &sFlashConfig) + offset) != HAL_OK)
 80006e0:	68ba      	ldr	r2, [r7, #8]
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <writeConfigFlash+0x6c>)
 80006e4:	4413      	add	r3, r2
 80006e6:	4911      	ldr	r1, [pc, #68]	; (800072c <writeConfigFlash+0x70>)
 80006e8:	68ba      	ldr	r2, [r7, #8]
 80006ea:	440a      	add	r2, r1
 80006ec:	4619      	mov	r1, r3
 80006ee:	2001      	movs	r0, #1
 80006f0:	f009 fb6a 	bl	8009dc8 <HAL_FLASH_Program>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d002      	beq.n	8000700 <writeConfigFlash+0x44>
			{
				// Error during flash write
				error_code = HAL_FLASH_GetError();
 80006fa:	f009 fc0d 	bl	8009f18 <HAL_FLASH_GetError>
 80006fe:	60f8      	str	r0, [r7, #12]
		for (uint32_t offset = 0; offset < sizeof(sFlashConfig); offset += FLASH_WORD)
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	3320      	adds	r3, #32
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d0e9      	beq.n	80006e0 <writeConfigFlash+0x24>
 800070c:	e002      	b.n	8000714 <writeConfigFlash+0x58>
			}
		}
	}
	else
	{
		error_code = HAL_FLASH_GetError();
 800070e:	f009 fc03 	bl	8009f18 <HAL_FLASH_GetError>
 8000712:	60f8      	str	r0, [r7, #12]
	}

	  // Lock Flash
	  HAL_FLASH_Lock();
 8000714:	f009 fbe8 	bl	8009ee8 <HAL_FLASH_Lock>

	  return error_code;
 8000718:	68fb      	ldr	r3, [r7, #12]
}
 800071a:	4618      	mov	r0, r3
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	24000024 	.word	0x24000024
 8000728:	080e0000 	.word	0x080e0000
 800072c:	240008c4 	.word	0x240008c4

08000730 <readConfigFlash>:

// Read configuration from flash
static void readConfigFlash(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <readConfigFlash+0x18>)
 8000736:	781a      	ldrb	r2, [r3, #0]
	// Read configuration from flash
	memcpy(&sFlashConfig, (void *) FLASH_SECTOR7_START_ADDR, sizeof(sFlashConfig));
 8000738:	4b04      	ldr	r3, [pc, #16]	; (800074c <readConfigFlash+0x1c>)
 800073a:	701a      	strb	r2, [r3, #0]
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	080e0000 	.word	0x080e0000
 800074c:	240008c4 	.word	0x240008c4

08000750 <printCR>:

// Print CR
static void printCR(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, (uint8_t *) "\n\r", 2, 1000);
 8000754:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000758:	2202      	movs	r2, #2
 800075a:	4903      	ldr	r1, [pc, #12]	; (8000768 <printCR+0x18>)
 800075c:	4803      	ldr	r0, [pc, #12]	; (800076c <printCR+0x1c>)
 800075e:	f00e fe54 	bl	800f40a <HAL_UART_Transmit>
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	08011534 	.word	0x08011534
 800076c:	24000cb4 	.word	0x24000cb4

08000770 <printString>:

// Print string on UART3
static void printString(char *str)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) str, strlen(str), 1000);
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f7ff fdc9 	bl	8000310 <strlen>
 800077e:	4603      	mov	r3, r0
 8000780:	b29a      	uxth	r2, r3
 8000782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000786:	6879      	ldr	r1, [r7, #4]
 8000788:	4803      	ldr	r0, [pc, #12]	; (8000798 <printString+0x28>)
 800078a:	f00e fe3e 	bl	800f40a <HAL_UART_Transmit>
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	24000cb4 	.word	0x24000cb4

0800079c <printConfigFlash>:

// Print configuration on UART3
static void printConfigFlash(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	printString("\n\rCurrent configuration:");
 80007a0:	480e      	ldr	r0, [pc, #56]	; (80007dc <printConfigFlash+0x40>)
 80007a2:	f7ff ffe5 	bl	8000770 <printString>
	printString("\n\r  Mode = ");
 80007a6:	480e      	ldr	r0, [pc, #56]	; (80007e0 <printConfigFlash+0x44>)
 80007a8:	f7ff ffe2 	bl	8000770 <printString>
	if (sFlashConfig.mode == TEST_MODE)
 80007ac:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <printConfigFlash+0x48>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d103      	bne.n	80007bc <printConfigFlash+0x20>
		printString("TEST");
 80007b4:	480c      	ldr	r0, [pc, #48]	; (80007e8 <printConfigFlash+0x4c>)
 80007b6:	f7ff ffdb 	bl	8000770 <printString>
 80007ba:	e00a      	b.n	80007d2 <printConfigFlash+0x36>
	else if (sFlashConfig.mode == RUN_MODE)
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <printConfigFlash+0x48>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d103      	bne.n	80007cc <printConfigFlash+0x30>
		printString("RUN");
 80007c4:	4809      	ldr	r0, [pc, #36]	; (80007ec <printConfigFlash+0x50>)
 80007c6:	f7ff ffd3 	bl	8000770 <printString>
 80007ca:	e002      	b.n	80007d2 <printConfigFlash+0x36>
	else
		printString("UNKNOWN");
 80007cc:	4808      	ldr	r0, [pc, #32]	; (80007f0 <printConfigFlash+0x54>)
 80007ce:	f7ff ffcf 	bl	8000770 <printString>
	printCR();
 80007d2:	f7ff ffbd 	bl	8000750 <printCR>
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	08011538 	.word	0x08011538
 80007e0:	08011554 	.word	0x08011554
 80007e4:	240008c4 	.word	0x240008c4
 80007e8:	08011560 	.word	0x08011560
 80007ec:	08011568 	.word	0x08011568
 80007f0:	0801156c 	.word	0x0801156c

080007f4 <printNumber>:

// Print 16bit unsigned integer on UART3
static void printNumber(const char *text, uint16_t number, uint8_t CR)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b09e      	sub	sp, #120	; 0x78
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	460b      	mov	r3, r1
 80007fe:	807b      	strh	r3, [r7, #2]
 8000800:	4613      	mov	r3, r2
 8000802:	707b      	strb	r3, [r7, #1]
	char s_output[100];
	char s_number[7];
	strcpy(s_output, text);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	6879      	ldr	r1, [r7, #4]
 800080a:	4618      	mov	r0, r3
 800080c:	f010 fa2e 	bl	8010c6c <strcpy>
	itoa(number, s_number, 10);
 8000810:	887b      	ldrh	r3, [r7, #2]
 8000812:	f107 010c 	add.w	r1, r7, #12
 8000816:	220a      	movs	r2, #10
 8000818:	4618      	mov	r0, r3
 800081a:	f010 f8f3 	bl	8010a04 <itoa>
	strcat(s_output, s_number);
 800081e:	f107 020c 	add.w	r2, r7, #12
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4611      	mov	r1, r2
 8000828:	4618      	mov	r0, r3
 800082a:	f010 f9e3 	bl	8010bf4 <strcat>
	if (CR)
 800082e:	787b      	ldrb	r3, [r7, #1]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d00e      	beq.n	8000852 <printNumber+0x5e>
	{
		strcat(s_output, "\n\r");
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fd69 	bl	8000310 <strlen>
 800083e:	4603      	mov	r3, r0
 8000840:	461a      	mov	r2, r3
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4413      	add	r3, r2
 8000848:	4a0b      	ldr	r2, [pc, #44]	; (8000878 <printNumber+0x84>)
 800084a:	8811      	ldrh	r1, [r2, #0]
 800084c:	7892      	ldrb	r2, [r2, #2]
 800084e:	8019      	strh	r1, [r3, #0]
 8000850:	709a      	strb	r2, [r3, #2]
	}
	HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fd5a 	bl	8000310 <strlen>
 800085c:	4603      	mov	r3, r0
 800085e:	b29a      	uxth	r2, r3
 8000860:	f107 0114 	add.w	r1, r7, #20
 8000864:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <printNumber+0x88>)
 800086a:	f00e fdce 	bl	800f40a <HAL_UART_Transmit>
}
 800086e:	bf00      	nop
 8000870:	3778      	adds	r7, #120	; 0x78
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	08011534 	.word	0x08011534
 800087c:	24000cb4 	.word	0x24000cb4

08000880 <printHALErrorStatus>:

// Print HAL error status on UART3
static void	printHALErrorStatus(HAL_StatusTypeDef HALresp, const char *text)
{
 8000880:	b5b0      	push	{r4, r5, r7, lr}
 8000882:	b09c      	sub	sp, #112	; 0x70
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	6039      	str	r1, [r7, #0]
 800088a:	71fb      	strb	r3, [r7, #7]
	char s_output[100];

	switch (HALresp)
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	2b03      	cmp	r3, #3
 8000890:	d828      	bhi.n	80008e4 <printHALErrorStatus+0x64>
 8000892:	a201      	add	r2, pc, #4	; (adr r2, 8000898 <printHALErrorStatus+0x18>)
 8000894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000898:	080008e5 	.word	0x080008e5
 800089c:	080008a9 	.word	0x080008a9
 80008a0:	080008bd 	.word	0x080008bd
 80008a4:	080008d1 	.word	0x080008d1
	{
		case HAL_ERROR:
			strcpy(s_output, "** HAL ERROR **: ");
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	4a15      	ldr	r2, [pc, #84]	; (8000904 <printHALErrorStatus+0x84>)
 80008ae:	461c      	mov	r4, r3
 80008b0:	4615      	mov	r5, r2
 80008b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008b6:	682b      	ldr	r3, [r5, #0]
 80008b8:	8023      	strh	r3, [r4, #0]
		break;
 80008ba:	e013      	b.n	80008e4 <printHALErrorStatus+0x64>

		case HAL_BUSY:
			strcpy(s_output, "** HAL BUSY **: ");
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	4a11      	ldr	r2, [pc, #68]	; (8000908 <printHALErrorStatus+0x88>)
 80008c2:	461c      	mov	r4, r3
 80008c4:	4615      	mov	r5, r2
 80008c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ca:	682b      	ldr	r3, [r5, #0]
 80008cc:	7023      	strb	r3, [r4, #0]
		break;
 80008ce:	e009      	b.n	80008e4 <printHALErrorStatus+0x64>

		case HAL_TIMEOUT:
			strcpy(s_output, "** HAL TIMEOUT **: ");
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	4a0d      	ldr	r2, [pc, #52]	; (800090c <printHALErrorStatus+0x8c>)
 80008d6:	461c      	mov	r4, r3
 80008d8:	4615      	mov	r5, r2
 80008da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008de:	682b      	ldr	r3, [r5, #0]
 80008e0:	6023      	str	r3, [r4, #0]
		break;
 80008e2:	bf00      	nop

		case HAL_OK:
		break;
	}
	strcat(s_output, text);
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	6839      	ldr	r1, [r7, #0]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f010 f982 	bl	8010bf4 <strcat>
	printString(s_output);
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff ff3b 	bl	8000770 <printString>
}
 80008fa:	bf00      	nop
 80008fc:	3770      	adds	r7, #112	; 0x70
 80008fe:	46bd      	mov	sp, r7
 8000900:	bdb0      	pop	{r4, r5, r7, pc}
 8000902:	bf00      	nop
 8000904:	08011574 	.word	0x08011574
 8000908:	08011588 	.word	0x08011588
 800090c:	0801159c 	.word	0x0801159c

08000910 <stopHbridge>:

void stopHbridge(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]

	//Stop TIMER 1 PWM & interrupts
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);  //This will stop channel PWM1
 8000924:	2100      	movs	r1, #0
 8000926:	480f      	ldr	r0, [pc, #60]	; (8000964 <stopHbridge+0x54>)
 8000928:	f00d fb1a 	bl	800df60 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); //This will stop channel PWM1N
 800092c:	2100      	movs	r1, #0
 800092e:	480d      	ldr	r0, [pc, #52]	; (8000964 <stopHbridge+0x54>)
 8000930:	f00e fb5c 	bl	800efec <HAL_TIMEx_PWMN_Stop>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, TIM1_CH1N_Pin|TIM1_CH1_Pin, GPIO_PIN_SET);
 8000934:	2201      	movs	r2, #1
 8000936:	f44f 7140 	mov.w	r1, #768	; 0x300
 800093a:	480b      	ldr	r0, [pc, #44]	; (8000968 <stopHbridge+0x58>)
 800093c:	f009 fde2 	bl	800a504 <HAL_GPIO_WritePin>
	/*Configure GPIO pins : LED_GREEN_Pin LINE_DRIVER1_ENABLE_Pin LINE_DRIVER2_ENABLE_Pin LED_RED_Pin */
	GPIO_InitStruct.Pin = TIM1_CH1N_Pin|TIM1_CH1_Pin;
 8000940:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000944:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	4619      	mov	r1, r3
 8000956:	4804      	ldr	r0, [pc, #16]	; (8000968 <stopHbridge+0x58>)
 8000958:	f009 fc14 	bl	800a184 <HAL_GPIO_Init>

}
 800095c:	bf00      	nop
 800095e:	3718      	adds	r7, #24
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	24000d48 	.word	0x24000d48
 8000968:	58021000 	.word	0x58021000

0800096c <printHbridgeData>:

// Print H-bridge data on UART3
static void printHbridgeData(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b09c      	sub	sp, #112	; 0x70
 8000970:	af02      	add	r7, sp, #8
	char s_output[100];
	sprintf(s_output, "\n\rH-bridge 1=On 0=Off: %u, Frequency: %u (Hz), Dead time: %u (%%)\n\r", sHbridge.on, sHbridge.frequency, sHbridge.deadtime);
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <printHbridgeData+0x44>)
 8000974:	881b      	ldrh	r3, [r3, #0]
 8000976:	461a      	mov	r2, r3
 8000978:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <printHbridgeData+0x44>)
 800097a:	885b      	ldrh	r3, [r3, #2]
 800097c:	4619      	mov	r1, r3
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <printHbridgeData+0x44>)
 8000980:	889b      	ldrh	r3, [r3, #4]
 8000982:	1d38      	adds	r0, r7, #4
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	460b      	mov	r3, r1
 8000988:	490a      	ldr	r1, [pc, #40]	; (80009b4 <printHbridgeData+0x48>)
 800098a:	f010 f90b 	bl	8010ba4 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fcbd 	bl	8000310 <strlen>
 8000996:	4603      	mov	r3, r0
 8000998:	b29a      	uxth	r2, r3
 800099a:	1d39      	adds	r1, r7, #4
 800099c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a0:	4805      	ldr	r0, [pc, #20]	; (80009b8 <printHbridgeData+0x4c>)
 80009a2:	f00e fd32 	bl	800f40a <HAL_UART_Transmit>
}
 80009a6:	bf00      	nop
 80009a8:	3768      	adds	r7, #104	; 0x68
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	2400001c 	.word	0x2400001c
 80009b4:	080115b0 	.word	0x080115b0
 80009b8:	24000cb4 	.word	0x24000cb4
 80009bc:	00000000 	.word	0x00000000

080009c0 <programHbridge>:

// Program TIMER 1 controlling the H-bridge
static void programHbridge(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b0a6      	sub	sp, #152	; 0x98
 80009c4:	af00      	add	r7, sp, #0
	uint8_t DT, DTG;
	float tDTS = 1E6/((float) TIMER_BASE_CLOCK);  //Minimum step in usec
 80009c6:	4b96      	ldr	r3, [pc, #600]	; (8000c20 <programHbridge+0x260>)
 80009c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	// TIMER 1 has already been initialized using HAL.
	// Program the H-bridge TIMER 1 - Clock TIMER_BASE_CLOCK

	// Calculate the period and duty cycle based on the frequency requested.
	timARR_f = ((float) TIMER_BASE_CLOCK) / ((float) sHbridge.frequency);
 80009cc:	4b95      	ldr	r3, [pc, #596]	; (8000c24 <programHbridge+0x264>)
 80009ce:	885b      	ldrh	r3, [r3, #2]
 80009d0:	ee07 3a90 	vmov	s15, r3
 80009d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009d8:	eddf 6a93 	vldr	s13, [pc, #588]	; 8000c28 <programHbridge+0x268>
 80009dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009e0:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	timARR = (uint32_t) (timARR_f + 0.5);							// Set period counter
 80009e4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80009e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009ec:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80009f0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80009f4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80009f8:	ee17 3a90 	vmov	r3, s15
 80009fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	timCCR1 = timARR / 2;  											// 50% duty cycle
 8000a00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000a04:	085b      	lsrs	r3, r3, #1
 8000a06:	67fb      	str	r3, [r7, #124]	; 0x7c

	// Print out the set frequency
	if (debug == 1)
 8000a08:	4b88      	ldr	r3, [pc, #544]	; (8000c2c <programHbridge+0x26c>)
 8000a0a:	881b      	ldrh	r3, [r3, #0]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d111      	bne.n	8000a34 <programHbridge+0x74>
	{
		value_int = ((uint32_t) TIMER_BASE_CLOCK) / timARR;
 8000a10:	4a87      	ldr	r2, [pc, #540]	; (8000c30 <programHbridge+0x270>)
 8000a12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1a:	67bb      	str	r3, [r7, #120]	; 0x78
		sprintf(s_output, "\n\rSet frequency (Hz): %lu\n\r", value_int);
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000a22:	4984      	ldr	r1, [pc, #528]	; (8000c34 <programHbridge+0x274>)
 8000a24:	4618      	mov	r0, r3
 8000a26:	f010 f8bd 	bl	8010ba4 <siprintf>
		printString(s_output);
 8000a2a:	f107 030c 	add.w	r3, r7, #12
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff fe9e 	bl	8000770 <printString>
	//  DTG[7:5] = 10x => DT = (64 + DTG[5:0]) x tDTG with tDTG =2xtDTS.	 max (64 + 63)*2*tDTS  	: 3.7236 usec - 7.3890 usec
	//  DTG[7:5] = 110 => DT = (32 + DTG[4:0]) x tDTG with tDTG =8xtDTS.     max (32 + 31)*8*tDTS   : 7.4472 usec - 14.662 usec
	//  DTG[7:5] = 111 => DT = (32 + DTG[4:0]) x tDTG with tDTG = 16 x tDTS. max (32 + 31)*16*tDTS 	: 14.895 usec - 29.324 usec

	// Calculate dead time in usec
	req_dtime_us = (((float) sHbridge.deadtime))*(10000./(float) sHbridge.frequency);
 8000a34:	4b7b      	ldr	r3, [pc, #492]	; (8000c24 <programHbridge+0x264>)
 8000a36:	889b      	ldrh	r3, [r3, #4]
 8000a38:	ee07 3a90 	vmov	s15, r3
 8000a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a40:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000a44:	4b77      	ldr	r3, [pc, #476]	; (8000c24 <programHbridge+0x264>)
 8000a46:	885b      	ldrh	r3, [r3, #2]
 8000a48:	ee07 3a90 	vmov	s15, r3
 8000a4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a50:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000a54:	ed9f 4b70 	vldr	d4, [pc, #448]	; 8000c18 <programHbridge+0x258>
 8000a58:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000a5c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000a60:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a64:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		printString(s_output);
	}
*/

	// Minimum allowed dead time is 1 usec.
	if (req_dtime_us < 1.0)
 8000a68:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8000a6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000a70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a78:	d503      	bpl.n	8000a82 <programHbridge+0xc2>
		req_dtime_us = 1.0;
 8000a7a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000a7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	if (req_dtime_us <= 127*tDTS) //3.6946
 8000a82:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8000a86:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8000c38 <programHbridge+0x278>
 8000a8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a8e:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8000a92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a9a:	d81e      	bhi.n	8000ada <programHbridge+0x11a>
	{
		DT = (uint8_t) (req_dtime_us/tDTS + 0.5);
 8000a9c:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8000aa0:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8000aa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000aa8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000aac:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8000ab0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ab4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ab8:	edc7 7a01 	vstr	s15, [r7, #4]
 8000abc:	793b      	ldrb	r3, [r7, #4]
 8000abe:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		if (DT > 127)
 8000ac2:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	da02      	bge.n	8000ad0 <programHbridge+0x110>
			DT = 127;
 8000aca:	237f      	movs	r3, #127	; 0x7f
 8000acc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		DTG = DT;
 8000ad0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000ad4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8000ad8:	e0bd      	b.n	8000c56 <programHbridge+0x296>
	}
	else if (req_dtime_us <= 127*2*tDTS) //7.3890
 8000ada:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8000ade:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8000c3c <programHbridge+0x27c>
 8000ae2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ae6:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8000aea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000af2:	d825      	bhi.n	8000b40 <programHbridge+0x180>
	{
		DT = (uint8_t) ((req_dtime_us/(2*tDTS)) - 64 + 0.5);
 8000af4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8000af8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000afc:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8000b00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b04:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8000c40 <programHbridge+0x280>
 8000b08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b0c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b10:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8000b14:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b18:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b1c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000b20:	793b      	ldrb	r3, [r7, #4]
 8000b22:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		if (DT > 63)
 8000b26:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000b2a:	2b3f      	cmp	r3, #63	; 0x3f
 8000b2c:	d902      	bls.n	8000b34 <programHbridge+0x174>
			DT = 63;
 8000b2e:	233f      	movs	r3, #63	; 0x3f
 8000b30:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		DTG = DT + 0x80;
 8000b34:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000b38:	3b80      	subs	r3, #128	; 0x80
 8000b3a:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8000b3e:	e08a      	b.n	8000c56 <programHbridge+0x296>
	}
	else if (req_dtime_us <= 63*8*tDTS) //14.662
 8000b40:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8000b44:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8000c44 <programHbridge+0x284>
 8000b48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b4c:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8000b50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b58:	d827      	bhi.n	8000baa <programHbridge+0x1ea>
	{
		DT = (uint8_t) ((req_dtime_us/(8*tDTS)) - 32 + 0.5);
 8000b5a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8000b5e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8000b62:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b66:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8000b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b6e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8000c48 <programHbridge+0x288>
 8000b72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b76:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b7a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8000b7e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b82:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b86:	edc7 7a01 	vstr	s15, [r7, #4]
 8000b8a:	793b      	ldrb	r3, [r7, #4]
 8000b8c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		if (DT > 31)
 8000b90:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000b94:	2b1f      	cmp	r3, #31
 8000b96:	d902      	bls.n	8000b9e <programHbridge+0x1de>
			DT = 31;
 8000b98:	231f      	movs	r3, #31
 8000b9a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		DTG = DT + 0xC0;
 8000b9e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000ba2:	3b40      	subs	r3, #64	; 0x40
 8000ba4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8000ba8:	e055      	b.n	8000c56 <programHbridge+0x296>
	}
	else if (req_dtime_us <= 63*16*tDTS) //29.324
 8000baa:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8000bae:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8000c4c <programHbridge+0x28c>
 8000bb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bb6:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8000bba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bc2:	d845      	bhi.n	8000c50 <programHbridge+0x290>
	{
		DT = (uint8_t) ((req_dtime_us/(16*tDTS)) - 32 + 0.5);
 8000bc4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8000bc8:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8000bcc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000bd0:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8000bd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bd8:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000c48 <programHbridge+0x288>
 8000bdc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000be0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000be4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8000be8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000bec:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000bf0:	edc7 7a01 	vstr	s15, [r7, #4]
 8000bf4:	793b      	ldrb	r3, [r7, #4]
 8000bf6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		if (DT > 31)
 8000bfa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000bfe:	2b1f      	cmp	r3, #31
 8000c00:	d902      	bls.n	8000c08 <programHbridge+0x248>
			DT = 31;
 8000c02:	231f      	movs	r3, #31
 8000c04:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		DTG = DT + 0xE0;
 8000c08:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000c0c:	3b20      	subs	r3, #32
 8000c0e:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8000c12:	e020      	b.n	8000c56 <programHbridge+0x296>
 8000c14:	f3af 8000 	nop.w
 8000c18:	00000000 	.word	0x00000000
 8000c1c:	40c38800 	.word	0x40c38800
 8000c20:	3cee500f 	.word	0x3cee500f
 8000c24:	2400001c 	.word	0x2400001c
 8000c28:	4c032156 	.word	0x4c032156
 8000c2c:	24000000 	.word	0x24000000
 8000c30:	020c8558 	.word	0x020c8558
 8000c34:	080115f4 	.word	0x080115f4
 8000c38:	42fe0000 	.word	0x42fe0000
 8000c3c:	437e0000 	.word	0x437e0000
 8000c40:	42800000 	.word	0x42800000
 8000c44:	43fc0000 	.word	0x43fc0000
 8000c48:	42000000 	.word	0x42000000
 8000c4c:	447c0000 	.word	0x447c0000
	}
	else
		DTG = 255;
 8000c50:	23ff      	movs	r3, #255	; 0xff
 8000c52:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

	uint32_t temp = TIM1->BDTR & 0xFFFFFF00;		//Mask out DTG
 8000c56:	4b54      	ldr	r3, [pc, #336]	; (8000da8 <programHbridge+0x3e8>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000c5e:	677b      	str	r3, [r7, #116]	; 0x74
	timBDTR = temp | DTG;							//Add new DTG
 8000c60:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8000c64:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000c66:	4313      	orrs	r3, r2
 8000c68:	673b      	str	r3, [r7, #112]	; 0x70

	//Change timer1 settings
	htim1.Init.Period = timARR;   // Updating internal structure for timer
 8000c6a:	4a50      	ldr	r2, [pc, #320]	; (8000dac <programHbridge+0x3ec>)
 8000c6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000c70:	60d3      	str	r3, [r2, #12]
	TIM1->ARR = timARR;			  // Update period
 8000c72:	4a4d      	ldr	r2, [pc, #308]	; (8000da8 <programHbridge+0x3e8>)
 8000c74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000c78:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM1->CCR1 = timCCR1;		  // Update duty cycle
 8000c7a:	4a4b      	ldr	r2, [pc, #300]	; (8000da8 <programHbridge+0x3e8>)
 8000c7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c7e:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->BDTR = timBDTR;	      // Update dead time
 8000c80:	4a49      	ldr	r2, [pc, #292]	; (8000da8 <programHbridge+0x3e8>)
 8000c82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000c84:	6453      	str	r3, [r2, #68]	; 0x44

	if (debug == 1) {
 8000c86:	4b4a      	ldr	r3, [pc, #296]	; (8000db0 <programHbridge+0x3f0>)
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d16c      	bne.n	8000d68 <programHbridge+0x3a8>
		//sprintf(s_output, "ARR %lu CCR1 %lu BDTR %lu", timARR, timCCR1, timBDTR & 0xFF);
		//printString(s_output);

		float calcDT = 0;
 8000c8e:	f04f 0300 	mov.w	r3, #0
 8000c92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		//  DTG[7:5] = 0xx => DT = DTG[7:0] x tDTG with tDTG = tDTS.			 max 127*tDTS   		: 0.0000 usec - 3.6946 usec
		if ((DTG & 0x80) == 0) {
 8000c96:	f997 3096 	ldrsb.w	r3, [r7, #150]	; 0x96
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	db0b      	blt.n	8000cb6 <programHbridge+0x2f6>
			calcDT = DTG*tDTS;
 8000c9e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8000ca2:	ee07 3a90 	vmov	s15, r3
 8000ca6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000caa:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8000cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cb2:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		}
		//  DTG[7:5] = 10x => DT = (64 + DTG[5:0]) x tDTG with tDTG =2xtDTS.	 max (64 + 63)*2*tDTS  	: 3.7236 usec - 7.3890 usec
		if ((DTG & 0xC0) == 0x80) {
 8000cb6:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8000cba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000cbe:	2b80      	cmp	r3, #128	; 0x80
 8000cc0:	d10f      	bne.n	8000ce2 <programHbridge+0x322>
			calcDT = (64 + (DTG & 0x3F))*2*tDTS;
 8000cc2:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8000cc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000cca:	3340      	adds	r3, #64	; 0x40
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	ee07 3a90 	vmov	s15, r3
 8000cd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cd6:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8000cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cde:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		}
		//  DTG[7:5] = 110 => DT = (32 + DTG[4:0]) x tDTG with tDTG =8xtDTS.     max (32 + 31)*8*tDTS   : 7.4472 usec - 14.662 usec
		if ((DTG & 0xE0) == 0xC0) {
 8000ce2:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8000ce6:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8000cea:	2bc0      	cmp	r3, #192	; 0xc0
 8000cec:	d10f      	bne.n	8000d0e <programHbridge+0x34e>
			calcDT = (32 + (DTG & 0x1F))*8*tDTS;
 8000cee:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8000cf2:	f003 031f 	and.w	r3, r3, #31
 8000cf6:	3320      	adds	r3, #32
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	ee07 3a90 	vmov	s15, r3
 8000cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d02:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8000d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d0a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		}
		//  DTG[7:5] = 111 => DT = (32 + DTG[4:0]) x tDTG with tDTG = 16 x tDTS. max (32 + 31)*16*tDTS 	: 14.895 usec - 29.324 usec
		if ((DTG & 0xE0) == 0xE0) {
 8000d0e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8000d12:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8000d16:	2be0      	cmp	r3, #224	; 0xe0
 8000d18:	d10f      	bne.n	8000d3a <programHbridge+0x37a>
			calcDT = (32 + (DTG & 0x1F))*16*tDTS;
 8000d1a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8000d1e:	f003 031f 	and.w	r3, r3, #31
 8000d22:	3320      	adds	r3, #32
 8000d24:	011b      	lsls	r3, r3, #4
 8000d26:	ee07 3a90 	vmov	s15, r3
 8000d2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d2e:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8000d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d36:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		}
		value_int = (uint32_t) 1000*calcDT;
 8000d3a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8000d3e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000db4 <programHbridge+0x3f4>
 8000d42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d4a:	ee17 3a90 	vmov	r3, s15
 8000d4e:	67bb      	str	r3, [r7, #120]	; 0x78
		sprintf(s_output, "\n\rSet dead time: %lu (ns)\n\r", value_int);
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000d56:	4918      	ldr	r1, [pc, #96]	; (8000db8 <programHbridge+0x3f8>)
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f00f ff23 	bl	8010ba4 <siprintf>
		printString(s_output);
 8000d5e:	f107 030c 	add.w	r3, r7, #12
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fd04 	bl	8000770 <printString>
	}

	//Start driving the H-bridge
	if (sHbridge.on && (TIM_CHANNEL_STATE_GET(&htim1, TIM_CHANNEL_1) == HAL_TIM_CHANNEL_STATE_READY))
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <programHbridge+0x3fc>)
 8000d6a:	881b      	ldrh	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d010      	beq.n	8000d92 <programHbridge+0x3d2>
 8000d70:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <programHbridge+0x3ec>)
 8000d72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d10a      	bne.n	8000d92 <programHbridge+0x3d2>
	{
		HAL_TIM_MspPostInit(&htim1);	//Setup GPIO for timer alternate function
 8000d7c:	480b      	ldr	r0, [pc, #44]	; (8000dac <programHbridge+0x3ec>)
 8000d7e:	f002 ff3b 	bl	8003bf8 <HAL_TIM_MspPostInit>
		//Start TIMER 1 PWM & interrupts
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  //This will start channel PWM1
 8000d82:	2100      	movs	r1, #0
 8000d84:	4809      	ldr	r0, [pc, #36]	; (8000dac <programHbridge+0x3ec>)
 8000d86:	f00c ffcf 	bl	800dd28 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); //This will start channel PWM1N
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4807      	ldr	r0, [pc, #28]	; (8000dac <programHbridge+0x3ec>)
 8000d8e:	f00e f85d 	bl	800ee4c <HAL_TIMEx_PWMN_Start>
//	    __HAL_TIM_MOE_ENABLE(&htim1);
	}

	//Stop driving the H-bridge
	if (!sHbridge.on)
 8000d92:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <programHbridge+0x3fc>)
 8000d94:	881b      	ldrh	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d101      	bne.n	8000d9e <programHbridge+0x3de>
	{
		stopHbridge();
 8000d9a:	f7ff fdb9 	bl	8000910 <stopHbridge>
	}

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);

}
 8000d9e:	bf00      	nop
 8000da0:	3798      	adds	r7, #152	; 0x98
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40010000 	.word	0x40010000
 8000dac:	24000d48 	.word	0x24000d48
 8000db0:	24000000 	.word	0x24000000
 8000db4:	447a0000 	.word	0x447a0000
 8000db8:	08011610 	.word	0x08011610
 8000dbc:	2400001c 	.word	0x2400001c

08000dc0 <convertADC12data>:
#define ADC1_VplaL1			4	//Plasma voltage L1
#define ADC2_VplaL2			5	//Plasma voltage L2

//Convert ADC1 & ADC2 data to voltages and current
float convertADC12data(uint32_t item, char **text)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
	float result = 0;
 8000dca:	f04f 0300 	mov.w	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]
	float V;

	switch (item % (2*ADC12_NO_CHANNELS)) {
 8000dd0:	6879      	ldr	r1, [r7, #4]
 8000dd2:	4b9b      	ldr	r3, [pc, #620]	; (8001040 <convertADC12data+0x280>)
 8000dd4:	fba3 2301 	umull	r2, r3, r3, r1
 8000dd8:	089a      	lsrs	r2, r3, #2
 8000dda:	4613      	mov	r3, r2
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	4413      	add	r3, r2
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	1aca      	subs	r2, r1, r3
 8000de4:	2a05      	cmp	r2, #5
 8000de6:	f200 80fb 	bhi.w	8000fe0 <convertADC12data+0x220>
 8000dea:	a301      	add	r3, pc, #4	; (adr r3, 8000df0 <convertADC12data+0x30>)
 8000dec:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8000df0:	08000e09 	.word	0x08000e09
 8000df4:	08000e2d 	.word	0x08000e2d
 8000df8:	08000e91 	.word	0x08000e91
 8000dfc:	08000ecd 	.word	0x08000ecd
 8000e00:	08000f07 	.word	0x08000f07
 8000e04:	08000f69 	.word	0x08000f69
		case ADC1_TIM1_CH1:
			result = sADC.adc12_data[item];
 8000e08:	4a8e      	ldr	r2, [pc, #568]	; (8001044 <convertADC12data+0x284>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e10:	ee07 3a90 	vmov	s15, r3
 8000e14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e18:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f000 80d3 	beq.w	8000fca <convertADC12data+0x20a>
				*text ="ADC1_TIM1_CH1";
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	4a88      	ldr	r2, [pc, #544]	; (8001048 <convertADC12data+0x288>)
 8000e28:	601a      	str	r2, [r3, #0]
			break;
 8000e2a:	e0ce      	b.n	8000fca <convertADC12data+0x20a>

		case ADC2_Is:
			V = 3.3*(((float) sADC.adc12_data[item])/65536.0);
 8000e2c:	4a85      	ldr	r2, [pc, #532]	; (8001044 <convertADC12data+0x284>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e34:	ee07 3a90 	vmov	s15, r3
 8000e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e3c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e40:	ed9f 5b6d 	vldr	d5, [pc, #436]	; 8000ff8 <convertADC12data+0x238>
 8000e44:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e48:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8001000 <convertADC12data+0x240>
 8000e4c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e50:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e54:	edc7 7a02 	vstr	s15, [r7, #8]
			result =  2000*(V - 1.585714)/3.594286;
 8000e58:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e60:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8001008 <convertADC12data+0x248>
 8000e64:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e68:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8001010 <convertADC12data+0x250>
 8000e6c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000e70:	ed9f 5b69 	vldr	d5, [pc, #420]	; 8001018 <convertADC12data+0x258>
 8000e74:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e78:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e7c:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f000 80a3 	beq.w	8000fce <convertADC12data+0x20e>
				*text ="ADC2_Is(mA)";
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	4a70      	ldr	r2, [pc, #448]	; (800104c <convertADC12data+0x28c>)
 8000e8c:	601a      	str	r2, [r3, #0]
			break;
 8000e8e:	e09e      	b.n	8000fce <convertADC12data+0x20e>

		case ADC1_VbriS1:
			result =  1000*((12.0+2000.0)/12.0)*3.3*(((float) sADC.adc12_data[item])/65536.0);
 8000e90:	4a6c      	ldr	r2, [pc, #432]	; (8001044 <convertADC12data+0x284>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e98:	ee07 3a90 	vmov	s15, r3
 8000e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ea0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000ea4:	ed9f 5b54 	vldr	d5, [pc, #336]	; 8000ff8 <convertADC12data+0x238>
 8000ea8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000eac:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8001020 <convertADC12data+0x260>
 8000eb0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000eb4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000eb8:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f000 8087 	beq.w	8000fd2 <convertADC12data+0x212>
				*text ="ADC1_VbriS1(mV)";
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	4a62      	ldr	r2, [pc, #392]	; (8001050 <convertADC12data+0x290>)
 8000ec8:	601a      	str	r2, [r3, #0]
			break;
 8000eca:	e082      	b.n	8000fd2 <convertADC12data+0x212>

		case ADC2_VbriS2:
			result =  1000*((12.0+2000.0)/12.0)*3.3*(((float) sADC.adc12_data[item])/65536.0);
 8000ecc:	4a5d      	ldr	r2, [pc, #372]	; (8001044 <convertADC12data+0x284>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ed4:	ee07 3a90 	vmov	s15, r3
 8000ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000edc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000ee0:	ed9f 5b45 	vldr	d5, [pc, #276]	; 8000ff8 <convertADC12data+0x238>
 8000ee4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ee8:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8001020 <convertADC12data+0x260>
 8000eec:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ef0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ef4:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d06b      	beq.n	8000fd6 <convertADC12data+0x216>
				*text ="ADC2_VbriS2(mV)";
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	4a54      	ldr	r2, [pc, #336]	; (8001054 <convertADC12data+0x294>)
 8000f02:	601a      	str	r2, [r3, #0]
			break;
 8000f04:	e067      	b.n	8000fd6 <convertADC12data+0x216>

		case ADC1_VplaL1:
			V = 3.3*(((float) sADC.adc12_data[item])/65536.0);
 8000f06:	4a4f      	ldr	r2, [pc, #316]	; (8001044 <convertADC12data+0x284>)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f0e:	ee07 3a90 	vmov	s15, r3
 8000f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f16:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000f1a:	ed9f 5b37 	vldr	d5, [pc, #220]	; 8000ff8 <convertADC12data+0x238>
 8000f1e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f22:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8001000 <convertADC12data+0x240>
 8000f26:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f2a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f2e:	edc7 7a02 	vstr	s15, [r7, #8]
			result =  1E6*(V-1.648348)/0.999;
 8000f32:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f36:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f3a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8001028 <convertADC12data+0x268>
 8000f3e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f42:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8001030 <convertADC12data+0x270>
 8000f46:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f4a:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 8001038 <convertADC12data+0x278>
 8000f4e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f52:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f56:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d03c      	beq.n	8000fda <convertADC12data+0x21a>
				*text ="ADC1_VplaL1(mV)";
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	4a3d      	ldr	r2, [pc, #244]	; (8001058 <convertADC12data+0x298>)
 8000f64:	601a      	str	r2, [r3, #0]
			break;
 8000f66:	e038      	b.n	8000fda <convertADC12data+0x21a>

		case ADC2_VplaL2:
			V = 3.3*(((float) sADC.adc12_data[item])/65536.0);
 8000f68:	4a36      	ldr	r2, [pc, #216]	; (8001044 <convertADC12data+0x284>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f70:	ee07 3a90 	vmov	s15, r3
 8000f74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f78:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000f7c:	ed9f 5b1e 	vldr	d5, [pc, #120]	; 8000ff8 <convertADC12data+0x238>
 8000f80:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f84:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8001000 <convertADC12data+0x240>
 8000f88:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f8c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f90:	edc7 7a02 	vstr	s15, [r7, #8]
			result =  1E6*(V-1.648348)/0.999;
 8000f94:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f9c:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8001028 <convertADC12data+0x268>
 8000fa0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000fa4:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8001030 <convertADC12data+0x270>
 8000fa8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000fac:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8001038 <convertADC12data+0x278>
 8000fb0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fb4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fb8:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d00d      	beq.n	8000fde <convertADC12data+0x21e>
				*text ="ADC2_VplaL2(mV)";
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	4a25      	ldr	r2, [pc, #148]	; (800105c <convertADC12data+0x29c>)
 8000fc6:	601a      	str	r2, [r3, #0]
			break;
 8000fc8:	e009      	b.n	8000fde <convertADC12data+0x21e>
			break;
 8000fca:	bf00      	nop
 8000fcc:	e008      	b.n	8000fe0 <convertADC12data+0x220>
			break;
 8000fce:	bf00      	nop
 8000fd0:	e006      	b.n	8000fe0 <convertADC12data+0x220>
			break;
 8000fd2:	bf00      	nop
 8000fd4:	e004      	b.n	8000fe0 <convertADC12data+0x220>
			break;
 8000fd6:	bf00      	nop
 8000fd8:	e002      	b.n	8000fe0 <convertADC12data+0x220>
			break;
 8000fda:	bf00      	nop
 8000fdc:	e000      	b.n	8000fe0 <convertADC12data+0x220>
			break;
 8000fde:	bf00      	nop
	}

	return(result);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	ee07 3a90 	vmov	s15, r3
}
 8000fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	f3af 8000 	nop.w
 8000ff8:	00000000 	.word	0x00000000
 8000ffc:	40f00000 	.word	0x40f00000
 8001000:	66666666 	.word	0x66666666
 8001004:	400a6666 	.word	0x400a6666
 8001008:	a4acf313 	.word	0xa4acf313
 800100c:	3ff95f15 	.word	0x3ff95f15
 8001010:	00000000 	.word	0x00000000
 8001014:	409f4000 	.word	0x409f4000
 8001018:	04b3c3e7 	.word	0x04b3c3e7
 800101c:	400cc119 	.word	0x400cc119
 8001020:	ffffffff 	.word	0xffffffff
 8001024:	4120e2a7 	.word	0x4120e2a7
 8001028:	2706d506 	.word	0x2706d506
 800102c:	3ffa5fa2 	.word	0x3ffa5fa2
 8001030:	00000000 	.word	0x00000000
 8001034:	412e8480 	.word	0x412e8480
 8001038:	d916872b 	.word	0xd916872b
 800103c:	3feff7ce 	.word	0x3feff7ce
 8001040:	aaaaaaab 	.word	0xaaaaaaab
 8001044:	240001b0 	.word	0x240001b0
 8001048:	0801162c 	.word	0x0801162c
 800104c:	0801163c 	.word	0x0801163c
 8001050:	08011648 	.word	0x08011648
 8001054:	08011658 	.word	0x08011658
 8001058:	08011668 	.word	0x08011668
 800105c:	08011678 	.word	0x08011678

08001060 <printADC12data>:

//Print measured ADC1 and ADC2 data on UART3
void printADC12data(void)
{
 8001060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001062:	b0f7      	sub	sp, #476	; 0x1dc
 8001064:	af10      	add	r7, sp, #64	; 0x40
	char *p_text[2*ADC12_NO_CHANNELS];
	float result[2*ADC12_NO_CHANNELS];

	if (debug == 1)
 8001066:	4ba0      	ldr	r3, [pc, #640]	; (80012e8 <printADC12data+0x288>)
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	2b01      	cmp	r3, #1
 800106c:	f040 8136 	bne.w	80012dc <printADC12data+0x27c>
	{
		printCR();
 8001070:	f7ff fb6e 	bl	8000750 <printCR>
		printNumber("No data: ", sADC.nADC12Read, 1);
 8001074:	4b9d      	ldr	r3, [pc, #628]	; (80012ec <printADC12data+0x28c>)
 8001076:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
 800107a:	b29b      	uxth	r3, r3
 800107c:	2201      	movs	r2, #1
 800107e:	4619      	mov	r1, r3
 8001080:	489b      	ldr	r0, [pc, #620]	; (80012f0 <printADC12data+0x290>)
 8001082:	f7ff fbb7 	bl	80007f4 <printNumber>
		for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i++)
 8001086:	2300      	movs	r3, #0
 8001088:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 800108c:	e119      	b.n	80012c2 <printADC12data+0x262>
		{
			int ii = i % (2*ADC12_NO_CHANNELS);
 800108e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001092:	4b98      	ldr	r3, [pc, #608]	; (80012f4 <printADC12data+0x294>)
 8001094:	fb83 3102 	smull	r3, r1, r3, r2
 8001098:	17d3      	asrs	r3, r2, #31
 800109a:	1ac9      	subs	r1, r1, r3
 800109c:	460b      	mov	r3, r1
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	440b      	add	r3, r1
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
			result[ii] = convertADC12data(i, &p_text[ii]);
 80010aa:	f8d7 0194 	ldr.w	r0, [r7, #404]	; 0x194
 80010ae:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 80010b2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	4619      	mov	r1, r3
 80010bc:	f7ff fe80 	bl	8000dc0 <convertADC12data>
 80010c0:	eef0 7a40 	vmov.f32	s15, s0
 80010c4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80010ce:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80010d2:	4413      	add	r3, r2
 80010d4:	3b38      	subs	r3, #56	; 0x38
 80010d6:	edc3 7a00 	vstr	s15, [r3]
			char text[300];
			if (ii == 5)
 80010da:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80010de:	2b05      	cmp	r3, #5
 80010e0:	f040 80ea 	bne.w	80012b8 <printADC12data+0x258>
			{
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80010e4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80010e8:	4a82      	ldr	r2, [pc, #520]	; (80012f4 <printADC12data+0x294>)
 80010ea:	fb82 1203 	smull	r1, r2, r2, r3
 80010ee:	17db      	asrs	r3, r3, #31
 80010f0:	eba2 0c03 	sub.w	ip, r2, r3
						p_text[ii-5],                     sADC.adc12_data[i-5],
 80010f4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80010f8:	3b05      	subs	r3, #5
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001100:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001104:	4413      	add	r3, r2
 8001106:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800110a:	62fb      	str	r3, [r7, #44]	; 0x2c
						p_text[ii-5],                     sADC.adc12_data[i-5],
 800110c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001110:	3b05      	subs	r3, #5
 8001112:	4a76      	ldr	r2, [pc, #472]	; (80012ec <printADC12data+0x28c>)
 8001114:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001118:	62bb      	str	r3, [r7, #40]	; 0x28
						p_text[ii-4], (int) result[ii-4], sADC.adc12_data[i-4],
 800111a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800111e:	3b04      	subs	r3, #4
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8001126:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800112a:	18d3      	adds	r3, r2, r3
 800112c:	f853 5c20 	ldr.w	r5, [r3, #-32]
						p_text[ii-4], (int) result[ii-4], sADC.adc12_data[i-4],
 8001130:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001134:	3b04      	subs	r3, #4
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 800113c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001140:	18d3      	adds	r3, r2, r3
 8001142:	3b38      	subs	r3, #56	; 0x38
 8001144:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001148:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800114c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
						p_text[ii-4], (int) result[ii-4], sADC.adc12_data[i-4],
 8001150:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001154:	3b04      	subs	r3, #4
 8001156:	4a65      	ldr	r2, [pc, #404]	; (80012ec <printADC12data+0x28c>)
 8001158:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800115c:	623b      	str	r3, [r7, #32]
						p_text[ii-3], (int) result[ii-3], sADC.adc12_data[i-3],
 800115e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001162:	3b03      	subs	r3, #3
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 800116a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800116e:	18d3      	adds	r3, r2, r3
 8001170:	f853 6c20 	ldr.w	r6, [r3, #-32]
						p_text[ii-3], (int) result[ii-3], sADC.adc12_data[i-3],
 8001174:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001178:	3b03      	subs	r3, #3
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8001180:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001184:	18d3      	adds	r3, r2, r3
 8001186:	3b38      	subs	r3, #56	; 0x38
 8001188:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800118c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001190:	edc7 7a07 	vstr	s15, [r7, #28]
						p_text[ii-3], (int) result[ii-3], sADC.adc12_data[i-3],
 8001194:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001198:	3b03      	subs	r3, #3
 800119a:	4a54      	ldr	r2, [pc, #336]	; (80012ec <printADC12data+0x28c>)
 800119c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011a0:	61bb      	str	r3, [r7, #24]
						p_text[ii-2], (int) result[ii-2], sADC.adc12_data[i-2],
 80011a2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80011a6:	3b02      	subs	r3, #2
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 80011ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011b2:	18d3      	adds	r3, r2, r3
 80011b4:	f853 2c20 	ldr.w	r2, [r3, #-32]
 80011b8:	617a      	str	r2, [r7, #20]
						p_text[ii-2], (int) result[ii-2], sADC.adc12_data[i-2],
 80011ba:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80011be:	3b02      	subs	r3, #2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 80011c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011ca:	18cb      	adds	r3, r1, r3
 80011cc:	3b38      	subs	r3, #56	; 0x38
 80011ce:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011d6:	edc7 7a04 	vstr	s15, [r7, #16]
						p_text[ii-2], (int) result[ii-2], sADC.adc12_data[i-2],
 80011da:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80011de:	3b02      	subs	r3, #2
 80011e0:	4a42      	ldr	r2, [pc, #264]	; (80012ec <printADC12data+0x28c>)
 80011e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011e6:	60fb      	str	r3, [r7, #12]
						p_text[ii-1], (int) result[ii-1], sADC.adc12_data[i-1],
 80011e8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80011ec:	3b01      	subs	r3, #1
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 80011f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011f8:	18cb      	adds	r3, r1, r3
 80011fa:	f853 1c20 	ldr.w	r1, [r3, #-32]
 80011fe:	60b9      	str	r1, [r7, #8]
						p_text[ii-1], (int) result[ii-1], sADC.adc12_data[i-1],
 8001200:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001204:	3b01      	subs	r3, #1
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	f503 70b4 	add.w	r0, r3, #360	; 0x168
 800120c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001210:	18c3      	adds	r3, r0, r3
 8001212:	3b38      	subs	r3, #56	; 0x38
 8001214:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001218:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800121c:	edc7 7a01 	vstr	s15, [r7, #4]
						p_text[ii-1], (int) result[ii-1], sADC.adc12_data[i-1],
 8001220:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001224:	1e5a      	subs	r2, r3, #1
 8001226:	4b31      	ldr	r3, [pc, #196]	; (80012ec <printADC12data+0x28c>)
 8001228:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800122c:	603b      	str	r3, [r7, #0]
 800122e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	f503 70b4 	add.w	r0, r3, #360	; 0x168
 8001238:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800123c:	18c3      	adds	r3, r0, r3
 800123e:	f853 1c20 	ldr.w	r1, [r3, #-32]
						p_text[ii],   (int) result[ii],   sADC.adc12_data[i]);
 8001242:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	f503 70b4 	add.w	r0, r3, #360	; 0x168
 800124c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001250:	18c3      	adds	r3, r0, r3
 8001252:	3b38      	subs	r3, #56	; 0x38
 8001254:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001258:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800125c:	ee17 4a90 	vmov	r4, s15
						p_text[ii],   (int) result[ii],   sADC.adc12_data[i]);
 8001260:	4a22      	ldr	r2, [pc, #136]	; (80012ec <printADC12data+0x28c>)
 8001262:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001266:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800126a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800126e:	930f      	str	r3, [sp, #60]	; 0x3c
 8001270:	940e      	str	r4, [sp, #56]	; 0x38
 8001272:	910d      	str	r1, [sp, #52]	; 0x34
 8001274:	683c      	ldr	r4, [r7, #0]
 8001276:	940c      	str	r4, [sp, #48]	; 0x30
 8001278:	687c      	ldr	r4, [r7, #4]
 800127a:	940b      	str	r4, [sp, #44]	; 0x2c
 800127c:	68b9      	ldr	r1, [r7, #8]
 800127e:	910a      	str	r1, [sp, #40]	; 0x28
 8001280:	68f9      	ldr	r1, [r7, #12]
 8001282:	9109      	str	r1, [sp, #36]	; 0x24
 8001284:	6939      	ldr	r1, [r7, #16]
 8001286:	9108      	str	r1, [sp, #32]
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	9207      	str	r2, [sp, #28]
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	9206      	str	r2, [sp, #24]
 8001290:	69fa      	ldr	r2, [r7, #28]
 8001292:	9205      	str	r2, [sp, #20]
 8001294:	9604      	str	r6, [sp, #16]
 8001296:	6a3a      	ldr	r2, [r7, #32]
 8001298:	9203      	str	r2, [sp, #12]
 800129a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800129c:	9202      	str	r2, [sp, #8]
 800129e:	9501      	str	r5, [sp, #4]
 80012a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012a2:	9200      	str	r2, [sp, #0]
 80012a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a6:	4662      	mov	r2, ip
 80012a8:	4913      	ldr	r1, [pc, #76]	; (80012f8 <printADC12data+0x298>)
 80012aa:	f00f fc7b 	bl	8010ba4 <siprintf>
				printString(text);
 80012ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fa5c 	bl	8000770 <printString>
		for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i++)
 80012b8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80012bc:	3301      	adds	r3, #1
 80012be:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <printADC12data+0x28c>)
 80012c4:	f8d3 2708 	ldr.w	r2, [r3, #1800]	; 0x708
 80012c8:	4613      	mov	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	461a      	mov	r2, r3
 80012d2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80012d6:	429a      	cmp	r2, r3
 80012d8:	f63f aed9 	bhi.w	800108e <printADC12data+0x2e>
			}
		}
	}
}
 80012dc:	bf00      	nop
 80012de:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012e6:	bf00      	nop
 80012e8:	24000000 	.word	0x24000000
 80012ec:	240001b0 	.word	0x240001b0
 80012f0:	08011688 	.word	0x08011688
 80012f4:	2aaaaaab 	.word	0x2aaaaaab
 80012f8:	08011694 	.word	0x08011694

080012fc <freqCorrection>:

//Calculate frequency correction
//Returns 1 if a valid frequency correction is calculated, otherwise 0
uint8_t freqCorrection(int16_t *freqCorr)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08e      	sub	sp, #56	; 0x38
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	int start_index=0;
 8001304:	2300      	movs	r3, #0
 8001306:	637b      	str	r3, [r7, #52]	; 0x34
	int stop_index=0;
 8001308:	2300      	movs	r3, #0
 800130a:	633b      	str	r3, [r7, #48]	; 0x30
	int number_of_lows=0;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
	int lowDetected = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	62fb      	str	r3, [r7, #44]	; 0x2c
	int highDetected = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
	float min = 100000;
 8001318:	4b54      	ldr	r3, [pc, #336]	; (800146c <freqCorrection+0x170>)
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
	float max = -100000;
 800131c:	4b54      	ldr	r3, [pc, #336]	; (8001470 <freqCorrection+0x174>)
 800131e:	623b      	str	r3, [r7, #32]
	float norm = 0;
 8001320:	f04f 0300 	mov.w	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]

	//Find when MOSFET branch is on (start and stop time)
	//Find minimum and maximum value of bridge current
	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 8001326:	2300      	movs	r3, #0
 8001328:	61bb      	str	r3, [r7, #24]
 800132a:	e041      	b.n	80013b0 <freqCorrection+0xb4>
	{
		// Find minimum of bridge current
		float data = convertADC12data(i+ADC2_Is, NULL);
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	3301      	adds	r3, #1
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fd44 	bl	8000dc0 <convertADC12data>
 8001338:	ed87 0a02 	vstr	s0, [r7, #8]
		if (data < min)
 800133c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001340:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001344:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134c:	d501      	bpl.n	8001352 <freqCorrection+0x56>
			min = data;
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
		// Find maximum
		if (data > max)
 8001352:	ed97 7a02 	vldr	s14, [r7, #8]
 8001356:	edd7 7a08 	vldr	s15, [r7, #32]
 800135a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800135e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001362:	dd01      	ble.n	8001368 <freqCorrection+0x6c>
			max = data;
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	623b      	str	r3, [r7, #32]
		// Check for low
		if (!lowDetected && sADC.adc12_data[i+ADC1_TIM1_CH1] < 500)
 8001368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800136a:	2b00      	cmp	r3, #0
 800136c:	d10a      	bne.n	8001384 <freqCorrection+0x88>
 800136e:	4a41      	ldr	r2, [pc, #260]	; (8001474 <freqCorrection+0x178>)
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001376:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800137a:	d203      	bcs.n	8001384 <freqCorrection+0x88>
		{
			//First low detected
			start_index = i; 		// Store index of first low detected
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	637b      	str	r3, [r7, #52]	; 0x34
			lowDetected = 1;
 8001380:	2301      	movs	r3, #1
 8001382:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		//Check for high
		if (!highDetected && lowDetected && sADC.adc12_data[i+ADC1_TIM1_CH1] > 65000)
 8001384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10f      	bne.n	80013aa <freqCorrection+0xae>
 800138a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138c:	2b00      	cmp	r3, #0
 800138e:	d00c      	beq.n	80013aa <freqCorrection+0xae>
 8001390:	4a38      	ldr	r2, [pc, #224]	; (8001474 <freqCorrection+0x178>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001398:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 800139c:	4293      	cmp	r3, r2
 800139e:	d904      	bls.n	80013aa <freqCorrection+0xae>
		{
			//High after first low detected
			stop_index = i-6;		// Store index of last low
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	3b06      	subs	r3, #6
 80013a4:	633b      	str	r3, [r7, #48]	; 0x30
			highDetected = 1;
 80013a6:	2301      	movs	r3, #1
 80013a8:	62bb      	str	r3, [r7, #40]	; 0x28
	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	3306      	adds	r3, #6
 80013ae:	61bb      	str	r3, [r7, #24]
 80013b0:	4b30      	ldr	r3, [pc, #192]	; (8001474 <freqCorrection+0x178>)
 80013b2:	f8d3 2708 	ldr.w	r2, [r3, #1800]	; 0x708
 80013b6:	4613      	mov	r3, r2
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4413      	add	r3, r2
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	461a      	mov	r2, r3
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d8b2      	bhi.n	800132c <freqCorrection+0x30>
		}
	}

	// Check maximum and minimum difference
	norm = max - min;
 80013c6:	ed97 7a08 	vldr	s14, [r7, #32]
 80013ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d2:	edc7 7a07 	vstr	s15, [r7, #28]
	if (norm < 10)
 80013d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80013da:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80013de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e6:	d501      	bpl.n	80013ec <freqCorrection+0xf0>
		norm = max;
 80013e8:	6a3b      	ldr	r3, [r7, #32]
 80013ea:	61fb      	str	r3, [r7, #28]

	number_of_lows = (stop_index - start_index)/6 + 1;
 80013ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	4a21      	ldr	r2, [pc, #132]	; (8001478 <freqCorrection+0x17c>)
 80013f4:	fb82 1203 	smull	r1, r2, r2, r3
 80013f8:	17db      	asrs	r3, r3, #31
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	3301      	adds	r3, #1
 80013fe:	617b      	str	r3, [r7, #20]
	if (lowDetected && highDetected && (number_of_lows >= 5))
 8001400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001402:	2b00      	cmp	r3, #0
 8001404:	d02c      	beq.n	8001460 <freqCorrection+0x164>
 8001406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001408:	2b00      	cmp	r3, #0
 800140a:	d029      	beq.n	8001460 <freqCorrection+0x164>
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	2b04      	cmp	r3, #4
 8001410:	dd26      	ble.n	8001460 <freqCorrection+0x164>
	{
		float upper = convertADC12data(start_index+ADC2_Is+6, NULL);
 8001412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001414:	3307      	adds	r3, #7
 8001416:	2100      	movs	r1, #0
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fcd1 	bl	8000dc0 <convertADC12data>
 800141e:	ed87 0a04 	vstr	s0, [r7, #16]
		float lower = convertADC12data(stop_index+ADC2_Is-6, NULL);
 8001422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001424:	3b05      	subs	r3, #5
 8001426:	2100      	movs	r1, #0
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fcc9 	bl	8000dc0 <convertADC12data>
 800142e:	ed87 0a03 	vstr	s0, [r7, #12]
		*freqCorr = (int16_t) 1000*(upper - lower)/norm;
 8001432:	ed97 7a04 	vldr	s14, [r7, #16]
 8001436:	edd7 7a03 	vldr	s15, [r7, #12]
 800143a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800147c <freqCorrection+0x180>
 8001442:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001446:	ed97 7a07 	vldr	s14, [r7, #28]
 800144a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800144e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001452:	ee17 3a90 	vmov	r3, s15
 8001456:	b21a      	sxth	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	801a      	strh	r2, [r3, #0]
		return(1);
 800145c:	2301      	movs	r3, #1
 800145e:	e000      	b.n	8001462 <freqCorrection+0x166>
	}
	else
		return(0);
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3738      	adds	r7, #56	; 0x38
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	47c35000 	.word	0x47c35000
 8001470:	c7c35000 	.word	0xc7c35000
 8001474:	240001b0 	.word	0x240001b0
 8001478:	2aaaaaab 	.word	0x2aaaaaab
 800147c:	447a0000 	.word	0x447a0000

08001480 <measureBridgePlasmaADC12>:


// Measure bridge current, plasma voltage, and bridge current using ADC1 and ADC2 for one period
// After the measurement is done the function doneMeasuringBridgePlasmaADC12 is called
void measureBridgePlasmaADC12(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	//Calculate number of reads needed for one period
	sADC.nADC12Read = (uint32_t) ((1/(float) sHbridge.frequency)/ADC12_GROUP_READTIME);
 8001486:	4b24      	ldr	r3, [pc, #144]	; (8001518 <measureBridgePlasmaADC12+0x98>)
 8001488:	885b      	ldrh	r3, [r3, #2]
 800148a:	ee07 3a90 	vmov	s15, r3
 800148e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001496:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800149a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800149e:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8001510 <measureBridgePlasmaADC12+0x90>
 80014a2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014a6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80014aa:	ee17 2a90 	vmov	r2, s15
 80014ae:	4b1b      	ldr	r3, [pc, #108]	; (800151c <measureBridgePlasmaADC12+0x9c>)
 80014b0:	f8c3 2708 	str.w	r2, [r3, #1800]	; 0x708
	sADC.nADC12Read +=2; //TEST Add to see the start of next period
 80014b4:	4b19      	ldr	r3, [pc, #100]	; (800151c <measureBridgePlasmaADC12+0x9c>)
 80014b6:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
 80014ba:	3302      	adds	r3, #2
 80014bc:	4a17      	ldr	r2, [pc, #92]	; (800151c <measureBridgePlasmaADC12+0x9c>)
 80014be:	f8c2 3708 	str.w	r3, [r2, #1800]	; 0x708

	//Start ADC1 and ADC2 measurements
	if (sADC.nADC12Read <= ADC12_MAX_GROUP)
 80014c2:	4b16      	ldr	r3, [pc, #88]	; (800151c <measureBridgePlasmaADC12+0x9c>)
 80014c4:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
 80014c8:	2b64      	cmp	r3, #100	; 0x64
 80014ca:	d81a      	bhi.n	8001502 <measureBridgePlasmaADC12+0x82>
	{
		//Calculate the number DMA transfers needed
		uint32_t noDMARequests = ADC12_NO_CHANNELS*sADC.nADC12Read;
 80014cc:	4b13      	ldr	r3, [pc, #76]	; (800151c <measureBridgePlasmaADC12+0x9c>)
 80014ce:	f8d3 2708 	ldr.w	r2, [r3, #1800]	; 0x708
 80014d2:	4613      	mov	r3, r2
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	4413      	add	r3, r2
 80014d8:	607b      	str	r3, [r7, #4]

		// Start reading ADC1 and ADC2
		sADC.adc12_reading = 1;
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <measureBridgePlasmaADC12+0x9c>)
 80014dc:	2201      	movs	r2, #1
 80014de:	f8a3 270e 	strh.w	r2, [r3, #1806]	; 0x70e

		//This will start the ADC1 and ADC2 measurements when H-BRIDGE_B_CTRL (TIM1_CH1) goes from 0 to 1.
		//When the measurements are done doneMeasuringBridgePlasmaADC12 is called.
		HAL_StatusTypeDef HALresp = HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t *) sADC.adc12_data, noDMARequests);
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	490d      	ldr	r1, [pc, #52]	; (800151c <measureBridgePlasmaADC12+0x9c>)
 80014e6:	480e      	ldr	r0, [pc, #56]	; (8001520 <measureBridgePlasmaADC12+0xa0>)
 80014e8:	f005 fb76 	bl	8006bd8 <HAL_ADCEx_MultiModeStart_DMA>
 80014ec:	4603      	mov	r3, r0
 80014ee:	70fb      	strb	r3, [r7, #3]
		if (HALresp != HAL_OK)
 80014f0:	78fb      	ldrb	r3, [r7, #3]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d008      	beq.n	8001508 <measureBridgePlasmaADC12+0x88>
		{
			printHALErrorStatus(HALresp, "measureBridgePlasmaADC12");
 80014f6:	78fb      	ldrb	r3, [r7, #3]
 80014f8:	490a      	ldr	r1, [pc, #40]	; (8001524 <measureBridgePlasmaADC12+0xa4>)
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f9c0 	bl	8000880 <printHALErrorStatus>
	}
	else
		printString("** ERROR ** pADC.nRead > ADC12_MAX_GROUP");

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 8001500:	e002      	b.n	8001508 <measureBridgePlasmaADC12+0x88>
		printString("** ERROR ** pADC.nRead > ADC12_MAX_GROUP");
 8001502:	4809      	ldr	r0, [pc, #36]	; (8001528 <measureBridgePlasmaADC12+0xa8>)
 8001504:	f7ff f934 	bl	8000770 <printString>
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	a0b5ed8d 	.word	0xa0b5ed8d
 8001514:	3eb0c6f7 	.word	0x3eb0c6f7
 8001518:	2400001c 	.word	0x2400001c
 800151c:	240001b0 	.word	0x240001b0
 8001520:	24000904 	.word	0x24000904
 8001524:	080116ec 	.word	0x080116ec
 8001528:	08011708 	.word	0x08011708

0800152c <doneMeasuringBridgePlasmaADC12>:

// Done measuring bridge current, plasma voltage, and bridge current
void doneMeasuringBridgePlasmaADC12(uint32_t errorCode)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	static uint32_t count = 0;

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	count++;
 8001534:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <doneMeasuringBridgePlasmaADC12+0x94>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	3301      	adds	r3, #1
 800153a:	4a21      	ldr	r2, [pc, #132]	; (80015c0 <doneMeasuringBridgePlasmaADC12+0x94>)
 800153c:	6013      	str	r3, [r2, #0]

	// Done reading ADC1 and ADC2
	sADC.adc12_reading = 0;
 800153e:	4b21      	ldr	r3, [pc, #132]	; (80015c4 <doneMeasuringBridgePlasmaADC12+0x98>)
 8001540:	2200      	movs	r2, #0
 8001542:	f8a3 270e 	strh.w	r2, [r3, #1806]	; 0x70e

	if (errorCode == HAL_ADC_ERROR_NONE)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d128      	bne.n	800159e <doneMeasuringBridgePlasmaADC12+0x72>
	{
		if (sFlashConfig.mode == RUN_MODE)
 800154c:	4b1e      	ldr	r3, [pc, #120]	; (80015c8 <doneMeasuringBridgePlasmaADC12+0x9c>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d12b      	bne.n	80015ac <doneMeasuringBridgePlasmaADC12+0x80>

			//TODO Check plasma voltage VplaL1 and VplaL2 (To high? Not present?)
			//TODO Calculate plasma voltage Vrms, Vmax and Vmin

			//Adjust H-bridge frequency
			if (powerStatus == V500_ON)
 8001554:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <doneMeasuringBridgePlasmaADC12+0xa0>)
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d127      	bne.n	80015ac <doneMeasuringBridgePlasmaADC12+0x80>
			{
				//Adjust H-bridge frequency
				int16_t freqCorr = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	81fb      	strh	r3, [r7, #14]
				if (freqCorrection(&freqCorr))
 8001560:	f107 030e 	add.w	r3, r7, #14
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fec9 	bl	80012fc <freqCorrection>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d008      	beq.n	8001582 <doneMeasuringBridgePlasmaADC12+0x56>
					sHbridge.frequency += freqCorr;
 8001570:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <doneMeasuringBridgePlasmaADC12+0xa4>)
 8001572:	885a      	ldrh	r2, [r3, #2]
 8001574:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001578:	b29b      	uxth	r3, r3
 800157a:	4413      	add	r3, r2
 800157c:	b29a      	uxth	r2, r3
 800157e:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <doneMeasuringBridgePlasmaADC12+0xa4>)
 8001580:	805a      	strh	r2, [r3, #2]
				//TODO Adjust H-bridge dead time
				//sHbridge.deadtime = new setting;
				programHbridge();
 8001582:	f7ff fa1d 	bl	80009c0 <programHbridge>
				HAL_Delay(1);	//Allow H-bridge to settle with new settings
 8001586:	2001      	movs	r0, #1
 8001588:	f002 fd86 	bl	8004098 <HAL_Delay>
				if (count % 2048)
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <doneMeasuringBridgePlasmaADC12+0x94>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001594:	2b00      	cmp	r3, #0
 8001596:	d009      	beq.n	80015ac <doneMeasuringBridgePlasmaADC12+0x80>
					printHbridgeData();
 8001598:	f7ff f9e8 	bl	800096c <printHbridgeData>
 800159c:	e006      	b.n	80015ac <doneMeasuringBridgePlasmaADC12+0x80>
			}
		}
	}
	else
	{
		printNumber("ADC12 Error Code: ", errorCode, 1);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	2201      	movs	r2, #1
 80015a4:	4619      	mov	r1, r3
 80015a6:	480b      	ldr	r0, [pc, #44]	; (80015d4 <doneMeasuringBridgePlasmaADC12+0xa8>)
 80015a8:	f7ff f924 	bl	80007f4 <printNumber>
	}

	//Measure ADC3 voltages
	if (sFlashConfig.mode == RUN_MODE)
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <doneMeasuringBridgePlasmaADC12+0x9c>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d101      	bne.n	80015b8 <doneMeasuringBridgePlasmaADC12+0x8c>
		measureVoltagesTemperaturesADC3();
 80015b4:	f000 f964 	bl	8001880 <measureVoltagesTemperaturesADC3>

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 80015b8:	bf00      	nop
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	240008c8 	.word	0x240008c8
 80015c4:	240001b0 	.word	0x240001b0
 80015c8:	240008c4 	.word	0x240008c4
 80015cc:	240008c0 	.word	0x240008c0
 80015d0:	2400001c 	.word	0x2400001c
 80015d4:	08011734 	.word	0x08011734

080015d8 <convertADC3data>:

//Convert ADC3 data to voltages
float convertADC3data(uint32_t item, char **text)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
	float result = 0;
 80015e2:	f04f 0300 	mov.w	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]

	switch (item) {
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b0a      	cmp	r3, #10
 80015ec:	f200 80c5 	bhi.w	800177a <convertADC3data+0x1a2>
 80015f0:	a201      	add	r2, pc, #4	; (adr r2, 80015f8 <convertADC3data+0x20>)
 80015f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f6:	bf00      	nop
 80015f8:	08001625 	.word	0x08001625
 80015fc:	08001657 	.word	0x08001657
 8001600:	08001689 	.word	0x08001689
 8001604:	080016bb 	.word	0x080016bb
 8001608:	080016c9 	.word	0x080016c9
 800160c:	08001703 	.word	0x08001703
 8001610:	08001735 	.word	0x08001735
 8001614:	08001743 	.word	0x08001743
 8001618:	08001751 	.word	0x08001751
 800161c:	0800175f 	.word	0x0800175f
 8001620:	0800176d 	.word	0x0800176d
		case ADC3_VBAT:
			result =  1000*((9.76+169.0)/9.76)*3.3*(((float) sADC.adc3_data[ADC3_VBAT])/4096.0);
 8001624:	4b66      	ldr	r3, [pc, #408]	; (80017c0 <convertADC3data+0x1e8>)
 8001626:	f8b3 34b0 	ldrh.w	r3, [r3, #1200]	; 0x4b0
 800162a:	ee07 3a90 	vmov	s15, r3
 800162e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001632:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001636:	ed9f 5b56 	vldr	d5, [pc, #344]	; 8001790 <convertADC3data+0x1b8>
 800163a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800163e:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8001798 <convertADC3data+0x1c0>
 8001642:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001646:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800164a:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_VBAT (mV)";
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	4a5c      	ldr	r2, [pc, #368]	; (80017c4 <convertADC3data+0x1ec>)
 8001652:	601a      	str	r2, [r3, #0]
			break;
 8001654:	e091      	b.n	800177a <convertADC3data+0x1a2>
		case ADC3_15V:
			result =  1000*((30.0+120.0)/30.0)*3.3*(((float) sADC.adc3_data[ADC3_15V])/4096.0);
 8001656:	4b5a      	ldr	r3, [pc, #360]	; (80017c0 <convertADC3data+0x1e8>)
 8001658:	f8b3 34b2 	ldrh.w	r3, [r3, #1202]	; 0x4b2
 800165c:	ee07 3a90 	vmov	s15, r3
 8001660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001664:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001668:	ed9f 5b49 	vldr	d5, [pc, #292]	; 8001790 <convertADC3data+0x1b8>
 800166c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001670:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 80017a0 <convertADC3data+0x1c8>
 8001674:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001678:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800167c:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_15V (mV)";
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	4a51      	ldr	r2, [pc, #324]	; (80017c8 <convertADC3data+0x1f0>)
 8001684:	601a      	str	r2, [r3, #0]
			break;
 8001686:	e078      	b.n	800177a <convertADC3data+0x1a2>
		case ADC3_3_3V:
			result =  1000*((30.0+3.0)/30.0)*3.3*(((float) sADC.adc3_data[ADC3_3_3V])/4096.0);
 8001688:	4b4d      	ldr	r3, [pc, #308]	; (80017c0 <convertADC3data+0x1e8>)
 800168a:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	; 0x4b4
 800168e:	ee07 3a90 	vmov	s15, r3
 8001692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001696:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800169a:	ed9f 5b3d 	vldr	d5, [pc, #244]	; 8001790 <convertADC3data+0x1b8>
 800169e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016a2:	ed9f 6b41 	vldr	d6, [pc, #260]	; 80017a8 <convertADC3data+0x1d0>
 80016a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80016aa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80016ae:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_3_3V (mV)";
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	4a45      	ldr	r2, [pc, #276]	; (80017cc <convertADC3data+0x1f4>)
 80016b6:	601a      	str	r2, [r3, #0]
			break;
 80016b8:	e05f      	b.n	800177a <convertADC3data+0x1a2>
		case ADC3_NC3:
			result = 0;
 80016ba:	f04f 0300 	mov.w	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_NC3";
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	4a43      	ldr	r2, [pc, #268]	; (80017d0 <convertADC3data+0x1f8>)
 80016c4:	601a      	str	r2, [r3, #0]
			break;
 80016c6:	e058      	b.n	800177a <convertADC3data+0x1a2>
		case ADC3_BridgeTemp:
			result = 1000*((float) sADC.adc3_data[ADC3_BridgeTemp])*3.3/4096.0;
 80016c8:	4b3d      	ldr	r3, [pc, #244]	; (80017c0 <convertADC3data+0x1e8>)
 80016ca:	f8b3 34b8 	ldrh.w	r3, [r3, #1208]	; 0x4b8
 80016ce:	ee07 3a90 	vmov	s15, r3
 80016d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016d6:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80017d4 <convertADC3data+0x1fc>
 80016da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016e2:	ed9f 6b33 	vldr	d6, [pc, #204]	; 80017b0 <convertADC3data+0x1d8>
 80016e6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80016ea:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8001790 <convertADC3data+0x1b8>
 80016ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016f2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80016f6:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_BridgeTemp (mV)";
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	4a36      	ldr	r2, [pc, #216]	; (80017d8 <convertADC3data+0x200>)
 80016fe:	601a      	str	r2, [r3, #0]
			break;
 8001700:	e03b      	b.n	800177a <convertADC3data+0x1a2>
		case ADC3_500VDC:
			result =  1000*((12.0+2000.0)/12.0)*3.3*(((float) sADC.adc3_data[ADC3_500VDC])/4096.0);
 8001702:	4b2f      	ldr	r3, [pc, #188]	; (80017c0 <convertADC3data+0x1e8>)
 8001704:	f8b3 34ba 	ldrh.w	r3, [r3, #1210]	; 0x4ba
 8001708:	ee07 3a90 	vmov	s15, r3
 800170c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001710:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001714:	ed9f 5b1e 	vldr	d5, [pc, #120]	; 8001790 <convertADC3data+0x1b8>
 8001718:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800171c:	ed9f 6b26 	vldr	d6, [pc, #152]	; 80017b8 <convertADC3data+0x1e0>
 8001720:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001724:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001728:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_500VDC (mV)";
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	4a2b      	ldr	r2, [pc, #172]	; (80017dc <convertADC3data+0x204>)
 8001730:	601a      	str	r2, [r3, #0]
			break;
 8001732:	e022      	b.n	800177a <convertADC3data+0x1a2>
		case ADC3_Thermistor1:
			result = 0;
 8001734:	f04f 0300 	mov.w	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor1";
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	4a28      	ldr	r2, [pc, #160]	; (80017e0 <convertADC3data+0x208>)
 800173e:	601a      	str	r2, [r3, #0]
			break;
 8001740:	e01b      	b.n	800177a <convertADC3data+0x1a2>
		case ADC3_Thermistor2:
			result = 0;
 8001742:	f04f 0300 	mov.w	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor2";
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	4a26      	ldr	r2, [pc, #152]	; (80017e4 <convertADC3data+0x20c>)
 800174c:	601a      	str	r2, [r3, #0]
			break;
 800174e:	e014      	b.n	800177a <convertADC3data+0x1a2>
		case ADC3_Thermistor3:
			result = 0;
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor3";
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	4a23      	ldr	r2, [pc, #140]	; (80017e8 <convertADC3data+0x210>)
 800175a:	601a      	str	r2, [r3, #0]
			break;
 800175c:	e00d      	b.n	800177a <convertADC3data+0x1a2>
		case ADC3_Thermistor4:
			result = 0;
 800175e:	f04f 0300 	mov.w	r3, #0
 8001762:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor4";
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	4a21      	ldr	r2, [pc, #132]	; (80017ec <convertADC3data+0x214>)
 8001768:	601a      	str	r2, [r3, #0]
			break;
 800176a:	e006      	b.n	800177a <convertADC3data+0x1a2>
		case ADC3_NC10:
			result = 0;
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_NC10";
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	4a1e      	ldr	r2, [pc, #120]	; (80017f0 <convertADC3data+0x218>)
 8001776:	601a      	str	r2, [r3, #0]
			break;
 8001778:	bf00      	nop
	}

	return(result);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	ee07 3a90 	vmov	s15, r3
}
 8001780:	eeb0 0a67 	vmov.f32	s0, s15
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	00000000 	.word	0x00000000
 8001794:	40b00000 	.word	0x40b00000
 8001798:	9714fbcd 	.word	0x9714fbcd
 800179c:	40ed832c 	.word	0x40ed832c
 80017a0:	00000000 	.word	0x00000000
 80017a4:	40d01d00 	.word	0x40d01d00
 80017a8:	00000000 	.word	0x00000000
 80017ac:	40ac5c00 	.word	0x40ac5c00
 80017b0:	66666666 	.word	0x66666666
 80017b4:	400a6666 	.word	0x400a6666
 80017b8:	ffffffff 	.word	0xffffffff
 80017bc:	4120e2a7 	.word	0x4120e2a7
 80017c0:	240001b0 	.word	0x240001b0
 80017c4:	08011748 	.word	0x08011748
 80017c8:	08011758 	.word	0x08011758
 80017cc:	08011768 	.word	0x08011768
 80017d0:	08011778 	.word	0x08011778
 80017d4:	447a0000 	.word	0x447a0000
 80017d8:	08011784 	.word	0x08011784
 80017dc:	0801179c 	.word	0x0801179c
 80017e0:	080117b0 	.word	0x080117b0
 80017e4:	080117c4 	.word	0x080117c4
 80017e8:	080117d8 	.word	0x080117d8
 80017ec:	080117ec 	.word	0x080117ec
 80017f0:	08011800 	.word	0x08011800

080017f4 <printADC3data>:

//Print measured ADC3 data on UART3
void printADC3data(void)
{
 80017f4:	b590      	push	{r4, r7, lr}
 80017f6:	b09f      	sub	sp, #124	; 0x7c
 80017f8:	af02      	add	r7, sp, #8
	if (debug == 1)
 80017fa:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <printADC3data+0x7c>)
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d131      	bne.n	8001866 <printADC3data+0x72>
	{
		printCR();
 8001802:	f7fe ffa5 	bl	8000750 <printCR>
		printNumber("No data: ", ADC3_DMA_REQUESTS, 1);
 8001806:	2201      	movs	r2, #1
 8001808:	210b      	movs	r1, #11
 800180a:	481a      	ldr	r0, [pc, #104]	; (8001874 <printADC3data+0x80>)
 800180c:	f7fe fff2 	bl	80007f4 <printNumber>
		for (int i=0; i<ADC3_DMA_REQUESTS; i++)
 8001810:	2300      	movs	r3, #0
 8001812:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001814:	e024      	b.n	8001860 <printADC3data+0x6c>
		{
			char text[100];
			char *p_text;
			float result = convertADC3data(i, &p_text);
 8001816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001818:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800181c:	4611      	mov	r1, r2
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff feda 	bl	80015d8 <convertADC3data>
 8001824:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68
			sprintf(text, "%2u %20s: %7u    (%6u)\n\r", i, p_text, (int) result, sADC.adc3_data[i]);
 8001828:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800182a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800182e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001832:	ee17 4a90 	vmov	r4, s15
 8001836:	4910      	ldr	r1, [pc, #64]	; (8001878 <printADC3data+0x84>)
 8001838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800183a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800183e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001842:	4638      	mov	r0, r7
 8001844:	9301      	str	r3, [sp, #4]
 8001846:	9400      	str	r4, [sp, #0]
 8001848:	4613      	mov	r3, r2
 800184a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800184c:	490b      	ldr	r1, [pc, #44]	; (800187c <printADC3data+0x88>)
 800184e:	f00f f9a9 	bl	8010ba4 <siprintf>
			printString(text);
 8001852:	463b      	mov	r3, r7
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe ff8b 	bl	8000770 <printString>
		for (int i=0; i<ADC3_DMA_REQUESTS; i++)
 800185a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800185c:	3301      	adds	r3, #1
 800185e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001862:	2b0a      	cmp	r3, #10
 8001864:	ddd7      	ble.n	8001816 <printADC3data+0x22>
		}
	}
}
 8001866:	bf00      	nop
 8001868:	3774      	adds	r7, #116	; 0x74
 800186a:	46bd      	mov	sp, r7
 800186c:	bd90      	pop	{r4, r7, pc}
 800186e:	bf00      	nop
 8001870:	24000000 	.word	0x24000000
 8001874:	08011688 	.word	0x08011688
 8001878:	240001b0 	.word	0x240001b0
 800187c:	0801180c 	.word	0x0801180c

08001880 <measureVoltagesTemperaturesADC3>:

// Measure voltages and temperatures using ADC3
// After the measurement is done the function doneMeasuringVoltagesTemperaturesADC3 is called
void measureVoltagesTemperaturesADC3(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	// This will start the measurement of voltages and temperatures using ADC3
	sADC.adc3_reading = 1; //Started to read ADC3
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <measureVoltagesTemperaturesADC3+0x1c>)
 8001886:	2201      	movs	r2, #1
 8001888:	f8a3 270c 	strh.w	r2, [r3, #1804]	; 0x70c
	HAL_ADC_Start_DMA(&hadc3, (uint32_t *) sADC.adc3_data, ADC3_DMA_REQUESTS);
 800188c:	220b      	movs	r2, #11
 800188e:	4904      	ldr	r1, [pc, #16]	; (80018a0 <measureVoltagesTemperaturesADC3+0x20>)
 8001890:	4804      	ldr	r0, [pc, #16]	; (80018a4 <measureVoltagesTemperaturesADC3+0x24>)
 8001892:	f003 fa7f 	bl	8004d94 <HAL_ADC_Start_DMA>

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	240001b0 	.word	0x240001b0
 80018a0:	24000660 	.word	0x24000660
 80018a4:	240009e4 	.word	0x240009e4

080018a8 <doneMeasuringVoltagesTemperaturesADC3>:


// Done measuring voltages and temperatures
void doneMeasuringVoltagesTemperaturesADC3(uint32_t errorCode)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	sADC.adc3_reading = 0; //Done reading ADC3
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <doneMeasuringVoltagesTemperaturesADC3+0x38>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	f8a3 270c 	strh.w	r2, [r3, #1804]	; 0x70c

	if (errorCode == HAL_ADC_ERROR_NONE)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d006      	beq.n	80018cc <doneMeasuringVoltagesTemperaturesADC3+0x24>
		// TODO Check temperatures

	}
	else
	{
		printNumber("ADC12 Error Code: ", errorCode, 1);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	2201      	movs	r2, #1
 80018c4:	4619      	mov	r1, r3
 80018c6:	4807      	ldr	r0, [pc, #28]	; (80018e4 <doneMeasuringVoltagesTemperaturesADC3+0x3c>)
 80018c8:	f7fe ff94 	bl	80007f4 <printNumber>
	}


	//Start ADC1 and ADC2 measurements
	if (sFlashConfig.mode == RUN_MODE)
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <doneMeasuringVoltagesTemperaturesADC3+0x40>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d101      	bne.n	80018d8 <doneMeasuringVoltagesTemperaturesADC3+0x30>
		measureBridgePlasmaADC12();
 80018d4:	f7ff fdd4 	bl	8001480 <measureBridgePlasmaADC12>

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	240001b0 	.word	0x240001b0
 80018e4:	08011734 	.word	0x08011734
 80018e8:	240008c4 	.word	0x240008c4

080018ec <GetNumber>:

// Get an integer number from UART3. If the number is valid, the function returns 1, otherwise 0.
static uint8_t GetNumber(int *number)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	char input;
	char s_input[MAX_INPUT];
	int pos = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
	//Wait for user input
	HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 100000);
 80018f8:	f107 0123 	add.w	r1, r7, #35	; 0x23
 80018fc:	4b2f      	ldr	r3, [pc, #188]	; (80019bc <GetNumber+0xd0>)
 80018fe:	2201      	movs	r2, #1
 8001900:	482f      	ldr	r0, [pc, #188]	; (80019c0 <GetNumber+0xd4>)
 8001902:	f00d fe10 	bl	800f526 <HAL_UART_Receive>
	while (input != 13)
 8001906:	e039      	b.n	800197c <GetNumber+0x90>
	{
		// Backspace?
		if ((input == 127) && (pos > 0))
 8001908:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800190c:	2b7f      	cmp	r3, #127	; 0x7f
 800190e:	d10e      	bne.n	800192e <GetNumber+0x42>
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	2b00      	cmp	r3, #0
 8001914:	dd0b      	ble.n	800192e <GetNumber+0x42>
		{
			// Delete digit
			HAL_UART_Transmit(&huart3, (uint8_t *) &input, 1, 1000);
 8001916:	f107 0123 	add.w	r1, r7, #35	; 0x23
 800191a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800191e:	2201      	movs	r2, #1
 8001920:	4827      	ldr	r0, [pc, #156]	; (80019c0 <GetNumber+0xd4>)
 8001922:	f00d fd72 	bl	800f40a <HAL_UART_Transmit>
			pos--;
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	3b01      	subs	r3, #1
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
 800192c:	e018      	b.n	8001960 <GetNumber+0x74>
		}
		// A digit?
		else if ((input >= 48) && (input <=57))
 800192e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001932:	2b2f      	cmp	r3, #47	; 0x2f
 8001934:	d914      	bls.n	8001960 <GetNumber+0x74>
 8001936:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800193a:	2b39      	cmp	r3, #57	; 0x39
 800193c:	d810      	bhi.n	8001960 <GetNumber+0x74>
		{
			// Echo digit and store it
			HAL_UART_Transmit(&huart3, (uint8_t *) &input, 1, 1000);
 800193e:	f107 0123 	add.w	r1, r7, #35	; 0x23
 8001942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001946:	2201      	movs	r2, #1
 8001948:	481d      	ldr	r0, [pc, #116]	; (80019c0 <GetNumber+0xd4>)
 800194a:	f00d fd5e 	bl	800f40a <HAL_UART_Transmit>
			s_input[pos++] = input;
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	1c5a      	adds	r2, r3, #1
 8001952:	627a      	str	r2, [r7, #36]	; 0x24
 8001954:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001958:	3328      	adds	r3, #40	; 0x28
 800195a:	443b      	add	r3, r7
 800195c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		}

		// Get next character
		if (pos < MAX_INPUT-1)
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	2b12      	cmp	r3, #18
 8001964:	dc07      	bgt.n	8001976 <GetNumber+0x8a>
		{
			HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 100000);
 8001966:	f107 0123 	add.w	r1, r7, #35	; 0x23
 800196a:	4b14      	ldr	r3, [pc, #80]	; (80019bc <GetNumber+0xd0>)
 800196c:	2201      	movs	r2, #1
 800196e:	4814      	ldr	r0, [pc, #80]	; (80019c0 <GetNumber+0xd4>)
 8001970:	f00d fdd9 	bl	800f526 <HAL_UART_Receive>
 8001974:	e002      	b.n	800197c <GetNumber+0x90>
		}
		else
		{
			input = 13; // Terminate while loop
 8001976:	230d      	movs	r3, #13
 8001978:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	while (input != 13)
 800197c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001980:	2b0d      	cmp	r3, #13
 8001982:	d1c1      	bne.n	8001908 <GetNumber+0x1c>
		}
	}
	s_input[pos] = 0;
 8001984:	f107 020c 	add.w	r2, r7, #12
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	4413      	add	r3, r2
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]
	if (pos > 0)
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	2b00      	cmp	r3, #0
 8001994:	dd07      	ble.n	80019a6 <GetNumber+0xba>
		*number = atoi(s_input);
 8001996:	f107 030c 	add.w	r3, r7, #12
 800199a:	4618      	mov	r0, r3
 800199c:	f00f f816 	bl	80109cc <atoi>
 80019a0:	4602      	mov	r2, r0
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	601a      	str	r2, [r3, #0]
	return(pos > 0);
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	bfcc      	ite	gt
 80019ac:	2301      	movgt	r3, #1
 80019ae:	2300      	movle	r3, #0
 80019b0:	b2db      	uxtb	r3, r3
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3728      	adds	r7, #40	; 0x28
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	000186a0 	.word	0x000186a0
 80019c0:	24000cb4 	.word	0x24000cb4

080019c4 <GetUint16Input>:

// Get an 16bit unsigned number from UAR3 and validate the input againts min and max values
static uint8_t GetUint16Input(uint16_t *input, uint8_t bValidate, uint16_t min, uint16_t max)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b0a0      	sub	sp, #128	; 0x80
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	4608      	mov	r0, r1
 80019ce:	4611      	mov	r1, r2
 80019d0:	461a      	mov	r2, r3
 80019d2:	4603      	mov	r3, r0
 80019d4:	72fb      	strb	r3, [r7, #11]
 80019d6:	460b      	mov	r3, r1
 80019d8:	813b      	strh	r3, [r7, #8]
 80019da:	4613      	mov	r3, r2
 80019dc:	80fb      	strh	r3, [r7, #6]
	int number;
	char s_output[100];
	uint8_t result;

	result = GetNumber(&number);
 80019de:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff ff82 	bl	80018ec <GetNumber>
 80019e8:	4603      	mov	r3, r0
 80019ea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (bValidate)
 80019ee:	7afb      	ldrb	r3, [r7, #11]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d02f      	beq.n	8001a54 <GetUint16Input+0x90>
	{
		if (result && (number >= min) && (number <= max))
 80019f4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d013      	beq.n	8001a24 <GetUint16Input+0x60>
 80019fc:	893a      	ldrh	r2, [r7, #8]
 80019fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a00:	429a      	cmp	r2, r3
 8001a02:	dc0f      	bgt.n	8001a24 <GetUint16Input+0x60>
 8001a04:	88fa      	ldrh	r2, [r7, #6]
 8001a06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	db0b      	blt.n	8001a24 <GetUint16Input+0x60>
		{
			*input =  number;
 8001a0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, (uint8_t *) " - Ok\n\r", 7, 1000);
 8001a14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a18:	2207      	movs	r2, #7
 8001a1a:	4911      	ldr	r1, [pc, #68]	; (8001a60 <GetUint16Input+0x9c>)
 8001a1c:	4811      	ldr	r0, [pc, #68]	; (8001a64 <GetUint16Input+0xa0>)
 8001a1e:	f00d fcf4 	bl	800f40a <HAL_UART_Transmit>
 8001a22:	e017      	b.n	8001a54 <GetUint16Input+0x90>
		}
		else
		{
			result = 0; //Indicate failure
 8001a24:	2300      	movs	r3, #0
 8001a26:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			sprintf(s_output, " - Invalid number, valid range %u - %u\n\r", min, max);
 8001a2a:	893a      	ldrh	r2, [r7, #8]
 8001a2c:	88fb      	ldrh	r3, [r7, #6]
 8001a2e:	f107 0014 	add.w	r0, r7, #20
 8001a32:	490d      	ldr	r1, [pc, #52]	; (8001a68 <GetUint16Input+0xa4>)
 8001a34:	f00f f8b6 	bl	8010ba4 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fc67 	bl	8000310 <strlen>
 8001a42:	4603      	mov	r3, r0
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	f107 0114 	add.w	r1, r7, #20
 8001a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a4e:	4805      	ldr	r0, [pc, #20]	; (8001a64 <GetUint16Input+0xa0>)
 8001a50:	f00d fcdb 	bl	800f40a <HAL_UART_Transmit>
		}
	}
	return(result);
 8001a54:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3780      	adds	r7, #128	; 0x80
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	08011828 	.word	0x08011828
 8001a64:	24000cb4 	.word	0x24000cb4
 8001a68:	08011830 	.word	0x08011830

08001a6c <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef* hadc)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	// ADC1 is master and ADC2 is slave
	if (hadc->Instance == ADC1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a0e      	ldr	r2, [pc, #56]	; (8001ab4 <HAL_ADC_ErrorCallback+0x48>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d108      	bne.n	8001a90 <HAL_ADC_ErrorCallback+0x24>
	{
		printNumber("** ERROR ** ADC12 Error Code: ", hadc->ErrorCode, 1);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	2201      	movs	r2, #1
 8001a86:	4619      	mov	r1, r3
 8001a88:	480b      	ldr	r0, [pc, #44]	; (8001ab8 <HAL_ADC_ErrorCallback+0x4c>)
 8001a8a:	f7fe feb3 	bl	80007f4 <printNumber>
	}
	else if ((hadc->Instance == ADC3))
	{
		printNumber("** ERROR ** ADC3 Error Code: ", hadc->ErrorCode, 1);
	}
}
 8001a8e:	e00c      	b.n	8001aaa <HAL_ADC_ErrorCallback+0x3e>
	else if ((hadc->Instance == ADC3))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a09      	ldr	r2, [pc, #36]	; (8001abc <HAL_ADC_ErrorCallback+0x50>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d107      	bne.n	8001aaa <HAL_ADC_ErrorCallback+0x3e>
		printNumber("** ERROR ** ADC3 Error Code: ", hadc->ErrorCode, 1);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4806      	ldr	r0, [pc, #24]	; (8001ac0 <HAL_ADC_ErrorCallback+0x54>)
 8001aa6:	f7fe fea5 	bl	80007f4 <printNumber>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40022000 	.word	0x40022000
 8001ab8:	0801185c 	.word	0x0801185c
 8001abc:	58026000 	.word	0x58026000
 8001ac0:	0801187c 	.word	0x0801187c

08001ac4 <HAL_ADC_ConvCpltCallback>:

// ADC conversion and DMA transfer complete
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
	// ADC1 is master and ADC2 is slave
	if (hadc->Instance == ADC1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a10      	ldr	r2, [pc, #64]	; (8001b14 <HAL_ADC_ConvCpltCallback+0x50>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d105      	bne.n	8001ae2 <HAL_ADC_ConvCpltCallback+0x1e>
	{
		//HAL_ADCEx_MultiModeStop_DMA(&hadc1);
		doneMeasuringBridgePlasmaADC12(hadc->ErrorCode);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fd26 	bl	800152c <doneMeasuringBridgePlasmaADC12>
	else
	{
		HAL_UART_Transmit(&huart3, (uint8_t *) "** ERROR ** Unknown ADC\n\r", 25, 1000);
		printCR();
	}
}
 8001ae0:	e013      	b.n	8001b0a <HAL_ADC_ConvCpltCallback+0x46>
	else if (hadc->Instance == ADC3)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a0c      	ldr	r2, [pc, #48]	; (8001b18 <HAL_ADC_ConvCpltCallback+0x54>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d105      	bne.n	8001af8 <HAL_ADC_ConvCpltCallback+0x34>
		doneMeasuringVoltagesTemperaturesADC3(hadc->ErrorCode);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fed9 	bl	80018a8 <doneMeasuringVoltagesTemperaturesADC3>
}
 8001af6:	e008      	b.n	8001b0a <HAL_ADC_ConvCpltCallback+0x46>
		HAL_UART_Transmit(&huart3, (uint8_t *) "** ERROR ** Unknown ADC\n\r", 25, 1000);
 8001af8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001afc:	2219      	movs	r2, #25
 8001afe:	4907      	ldr	r1, [pc, #28]	; (8001b1c <HAL_ADC_ConvCpltCallback+0x58>)
 8001b00:	4807      	ldr	r0, [pc, #28]	; (8001b20 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001b02:	f00d fc82 	bl	800f40a <HAL_UART_Transmit>
		printCR();
 8001b06:	f7fe fe23 	bl	8000750 <printCR>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40022000 	.word	0x40022000
 8001b18:	58026000 	.word	0x58026000
 8001b1c:	0801189c 	.word	0x0801189c
 8001b20:	24000cb4 	.word	0x24000cb4

08001b24 <PowerOffLowSupplies>:

//Power Off Supplies in order3.3V switch and 15V
void PowerOffLowSupplies(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
	if (powerStatus == V500_OFF)
 8001b28:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <PowerOffLowSupplies+0x3c>)
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d110      	bne.n	8001b52 <PowerOffLowSupplies+0x2e>
	{
		//Power off 3.3V switch voltage
		HAL_GPIO_WritePin(OUT_3V3_SWITCH_GPIO_Port, OUT_3V3_SWITCH_Pin, GPIO_PIN_SET);
 8001b30:	2201      	movs	r2, #1
 8001b32:	2101      	movs	r1, #1
 8001b34:	480b      	ldr	r0, [pc, #44]	; (8001b64 <PowerOffLowSupplies+0x40>)
 8001b36:	f008 fce5 	bl	800a504 <HAL_GPIO_WritePin>
		HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	f002 faac 	bl	8004098 <HAL_Delay>

		//Power off 15V
		HAL_GPIO_WritePin(OUT_15V_ENABLE_GPIO_Port, OUT_15V_ENABLE_Pin, GPIO_PIN_SET);		//There is an inverter between MCU and the output, thus SET
 8001b40:	2201      	movs	r2, #1
 8001b42:	2102      	movs	r1, #2
 8001b44:	4807      	ldr	r0, [pc, #28]	; (8001b64 <PowerOffLowSupplies+0x40>)
 8001b46:	f008 fcdd 	bl	800a504 <HAL_GPIO_WritePin>
		HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001b4a:	2001      	movs	r0, #1
 8001b4c:	f002 faa4 	bl	8004098 <HAL_Delay>
	else
	{
		printString("** ERROR ** PowerOffLowSupplies: 500V is On\n\r");
		printCR();
	}
}
 8001b50:	e004      	b.n	8001b5c <PowerOffLowSupplies+0x38>
		printString("** ERROR ** PowerOffLowSupplies: 500V is On\n\r");
 8001b52:	4805      	ldr	r0, [pc, #20]	; (8001b68 <PowerOffLowSupplies+0x44>)
 8001b54:	f7fe fe0c 	bl	8000770 <printString>
		printCR();
 8001b58:	f7fe fdfa 	bl	8000750 <printCR>
}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	240008c0 	.word	0x240008c0
 8001b64:	58020c00 	.word	0x58020c00
 8001b68:	080118b8 	.word	0x080118b8

08001b6c <PowerOffHighSupplies>:


//Power Off Supply 500V
void PowerOffHighSupplies(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
	//Make sure the H-bridge outputs are zero before turning off power
	stopHbridge();
 8001b70:	f7fe fece 	bl	8000910 <stopHbridge>

	//Power off 500V
	HAL_GPIO_WritePin(OUT_500V_ENABLE_GPIO_Port, OUT_500V_ENABLE_Pin, GPIO_PIN_SET);	//There is an inverter between MCU and the output, thus SET
 8001b74:	2201      	movs	r2, #1
 8001b76:	2101      	movs	r1, #1
 8001b78:	480b      	ldr	r0, [pc, #44]	; (8001ba8 <PowerOffHighSupplies+0x3c>)
 8001b7a:	f008 fcc3 	bl	800a504 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001b7e:	2001      	movs	r0, #1
 8001b80:	f002 fa8a 	bl	8004098 <HAL_Delay>

	//Disable Line Drive 1
	HAL_GPIO_WritePin(LINE_DRIVER1_ENABLE_GPIO_Port, LINE_DRIVER1_ENABLE_Pin, GPIO_PIN_SET);
 8001b84:	2201      	movs	r2, #1
 8001b86:	2104      	movs	r1, #4
 8001b88:	4808      	ldr	r0, [pc, #32]	; (8001bac <PowerOffHighSupplies+0x40>)
 8001b8a:	f008 fcbb 	bl	800a504 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001b8e:	2001      	movs	r0, #1
 8001b90:	f002 fa82 	bl	8004098 <HAL_Delay>

	//Signal to robot controller all power supplies are inactive.
	HAL_GPIO_WritePin(LED_ACTIVE_GPIO_Port, LED_ACTIVE_Pin, GPIO_PIN_SET);			//There is an inverter between MCU and the output, thus SET
 8001b94:	2201      	movs	r2, #1
 8001b96:	2101      	movs	r1, #1
 8001b98:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <PowerOffHighSupplies+0x44>)
 8001b9a:	f008 fcb3 	bl	800a504 <HAL_GPIO_WritePin>

	powerStatus = V500_OFF;
 8001b9e:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <PowerOffHighSupplies+0x48>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	801a      	strh	r2, [r3, #0]
}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	58021800 	.word	0x58021800
 8001bac:	58020400 	.word	0x58020400
 8001bb0:	58021000 	.word	0x58021000
 8001bb4:	240008c0 	.word	0x240008c0

08001bb8 <PowerOnLowSupplies>:

//Power On Supplies in order 15V, 3.3V switch
//Returns 1 if the power up sequence was successful, and 0 if it failed
int PowerOnLowSupplies(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
	//Power on 15V
	//printString("\n\rPower on 15V - ");
	HAL_GPIO_WritePin(OUT_15V_ENABLE_GPIO_Port, OUT_15V_ENABLE_Pin, GPIO_PIN_RESET);	//There is an inverter between MCU and the output, thus RESET
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2102      	movs	r1, #2
 8001bc0:	4818      	ldr	r0, [pc, #96]	; (8001c24 <PowerOnLowSupplies+0x6c>)
 8001bc2:	f008 fc9f 	bl	800a504 <HAL_GPIO_WritePin>
	printString("\n\rPower on 15V - ");
 8001bc6:	4818      	ldr	r0, [pc, #96]	; (8001c28 <PowerOnLowSupplies+0x70>)
 8001bc8:	f7fe fdd2 	bl	8000770 <printString>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001bcc:	2001      	movs	r0, #1
 8001bce:	f002 fa63 	bl	8004098 <HAL_Delay>

	//Start reading ADC3 channels
	measureVoltagesTemperaturesADC3();
 8001bd2:	f7ff fe55 	bl	8001880 <measureVoltagesTemperaturesADC3>
	//Wait until ADC3 reading is done
	while (sADC.adc3_reading) ;
 8001bd6:	bf00      	nop
 8001bd8:	4b14      	ldr	r3, [pc, #80]	; (8001c2c <PowerOnLowSupplies+0x74>)
 8001bda:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	; 0x70c
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1f9      	bne.n	8001bd8 <PowerOnLowSupplies+0x20>

	//Check 15V voltage
	if (sADC.adc3_data[ADC3_15V] >= sADC3threshold[ADC3_15V])
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <PowerOnLowSupplies+0x74>)
 8001be6:	f8b3 24b2 	ldrh.w	r2, [r3, #1202]	; 0x4b2
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <PowerOnLowSupplies+0x78>)
 8001bec:	885b      	ldrh	r3, [r3, #2]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d30f      	bcc.n	8001c12 <PowerOnLowSupplies+0x5a>
		printString("Ok");
 8001bf2:	4810      	ldr	r0, [pc, #64]	; (8001c34 <PowerOnLowSupplies+0x7c>)
 8001bf4:	f7fe fdbc 	bl	8000770 <printString>
		PowerOffLowSupplies();
		return(0);
	}

	//Power on 3.3V switch voltage
	printString("\n\rPower on 3.3V switch");
 8001bf8:	480f      	ldr	r0, [pc, #60]	; (8001c38 <PowerOnLowSupplies+0x80>)
 8001bfa:	f7fe fdb9 	bl	8000770 <printString>
	HAL_GPIO_WritePin(OUT_3V3_SWITCH_GPIO_Port, OUT_3V3_SWITCH_Pin, GPIO_PIN_RESET);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2101      	movs	r1, #1
 8001c02:	4808      	ldr	r0, [pc, #32]	; (8001c24 <PowerOnLowSupplies+0x6c>)
 8001c04:	f008 fc7e 	bl	800a504 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001c08:	2001      	movs	r0, #1
 8001c0a:	f002 fa45 	bl	8004098 <HAL_Delay>

	return(1);
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e005      	b.n	8001c1e <PowerOnLowSupplies+0x66>
		printString("Fail");
 8001c12:	480a      	ldr	r0, [pc, #40]	; (8001c3c <PowerOnLowSupplies+0x84>)
 8001c14:	f7fe fdac 	bl	8000770 <printString>
		PowerOffLowSupplies();
 8001c18:	f7ff ff84 	bl	8001b24 <PowerOffLowSupplies>
		return(0);
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	58020c00 	.word	0x58020c00
 8001c28:	080118e8 	.word	0x080118e8
 8001c2c:	240001b0 	.word	0x240001b0
 8001c30:	24000004 	.word	0x24000004
 8001c34:	080118fc 	.word	0x080118fc
 8001c38:	08011908 	.word	0x08011908
 8001c3c:	08011900 	.word	0x08011900

08001c40 <PowerOnHighSupplies>:

//Power On Supply 500V
//Returns 1 if the power up was successful, and 0 if it failed
int PowerOnHighSupplies(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
	stopHbridge(); 	//Make sure the H-bridge outputs are zero before enabling the line driver
 8001c44:	f7fe fe64 	bl	8000910 <stopHbridge>

	//Enable Line Drive 1
	printString("\n\rEnable Line Drive 1");
 8001c48:	481d      	ldr	r0, [pc, #116]	; (8001cc0 <PowerOnHighSupplies+0x80>)
 8001c4a:	f7fe fd91 	bl	8000770 <printString>
	HAL_GPIO_WritePin(LINE_DRIVER1_ENABLE_GPIO_Port, LINE_DRIVER1_ENABLE_Pin, GPIO_PIN_RESET);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2104      	movs	r1, #4
 8001c52:	481c      	ldr	r0, [pc, #112]	; (8001cc4 <PowerOnHighSupplies+0x84>)
 8001c54:	f008 fc56 	bl	800a504 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001c58:	2001      	movs	r0, #1
 8001c5a:	f002 fa1d 	bl	8004098 <HAL_Delay>

	//Power on 500V
	printString("\n\rPower on 500V - ");
 8001c5e:	481a      	ldr	r0, [pc, #104]	; (8001cc8 <PowerOnHighSupplies+0x88>)
 8001c60:	f7fe fd86 	bl	8000770 <printString>
	HAL_GPIO_WritePin(OUT_500V_ENABLE_GPIO_Port, OUT_500V_ENABLE_Pin, GPIO_PIN_RESET);	//There is an inverter between MCU and the output, thus RESET
 8001c64:	2200      	movs	r2, #0
 8001c66:	2101      	movs	r1, #1
 8001c68:	4818      	ldr	r0, [pc, #96]	; (8001ccc <PowerOnHighSupplies+0x8c>)
 8001c6a:	f008 fc4b 	bl	800a504 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001c6e:	2001      	movs	r0, #1
 8001c70:	f002 fa12 	bl	8004098 <HAL_Delay>

	//Start reading ADC3 channels
	measureVoltagesTemperaturesADC3();
 8001c74:	f7ff fe04 	bl	8001880 <measureVoltagesTemperaturesADC3>
	//Wait until ADC reading is done
	while (sADC.adc3_reading) ;
 8001c78:	bf00      	nop
 8001c7a:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <PowerOnHighSupplies+0x90>)
 8001c7c:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	; 0x70c
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f9      	bne.n	8001c7a <PowerOnHighSupplies+0x3a>

	//Check 500V voltage
	if (sADC.adc3_data[ADC3_500VDC] >= sADC3threshold[ADC3_500VDC])
 8001c86:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <PowerOnHighSupplies+0x90>)
 8001c88:	f8b3 24ba 	ldrh.w	r2, [r3, #1210]	; 0x4ba
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <PowerOnHighSupplies+0x94>)
 8001c8e:	895b      	ldrh	r3, [r3, #10]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d30c      	bcc.n	8001cae <PowerOnHighSupplies+0x6e>
		printString("Ok");
 8001c94:	4810      	ldr	r0, [pc, #64]	; (8001cd8 <PowerOnHighSupplies+0x98>)
 8001c96:	f7fe fd6b 	bl	8000770 <printString>
		PowerOffHighSupplies();
		return(0);
	}

	//Signal to robot controller all power supplies are active
	HAL_GPIO_WritePin(LED_ACTIVE_GPIO_Port, LED_ACTIVE_Pin, GPIO_PIN_RESET);	//There is an inverter between MCU and the output, thus RESET
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	480f      	ldr	r0, [pc, #60]	; (8001cdc <PowerOnHighSupplies+0x9c>)
 8001ca0:	f008 fc30 	bl	800a504 <HAL_GPIO_WritePin>

	powerStatus = V500_ON;
 8001ca4:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <PowerOnHighSupplies+0xa0>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	801a      	strh	r2, [r3, #0]

	return(1);
 8001caa:	2301      	movs	r3, #1
 8001cac:	e005      	b.n	8001cba <PowerOnHighSupplies+0x7a>
		printString("Fail");
 8001cae:	480d      	ldr	r0, [pc, #52]	; (8001ce4 <PowerOnHighSupplies+0xa4>)
 8001cb0:	f7fe fd5e 	bl	8000770 <printString>
		PowerOffHighSupplies();
 8001cb4:	f7ff ff5a 	bl	8001b6c <PowerOffHighSupplies>
		return(0);
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	08011920 	.word	0x08011920
 8001cc4:	58020400 	.word	0x58020400
 8001cc8:	08011938 	.word	0x08011938
 8001ccc:	58021800 	.word	0x58021800
 8001cd0:	240001b0 	.word	0x240001b0
 8001cd4:	24000004 	.word	0x24000004
 8001cd8:	080118fc 	.word	0x080118fc
 8001cdc:	58021000 	.word	0x58021000
 8001ce0:	240008c0 	.word	0x240008c0
 8001ce4:	08011900 	.word	0x08011900

08001ce8 <HAL_GPIO_EXTI_Callback>:

// GPIO interrupt handler
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	80fb      	strh	r3, [r7, #6]
	if (sFlashConfig.mode == RUN_MODE)
 8001cf2:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d107      	bne.n	8001d0a <HAL_GPIO_EXTI_Callback+0x22>
	{
		// Power off request received
		if(GPIO_Pin == POWER_OFF_IRQ_Pin)
 8001cfa:	88fb      	ldrh	r3, [r7, #6]
 8001cfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d00:	d103      	bne.n	8001d0a <HAL_GPIO_EXTI_Callback+0x22>
		{
			PowerOffHighSupplies();
 8001d02:	f7ff ff33 	bl	8001b6c <PowerOffHighSupplies>
			PowerOffLowSupplies();
 8001d06:	f7ff ff0d 	bl	8001b24 <PowerOffLowSupplies>
		}
	}
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	240008c4 	.word	0x240008c4

08001d18 <InitializeConfigMenu>:

// Initialize the UART3 configuration menu
static void InitializeConfigMenu(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
	int item = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	607b      	str	r3, [r7, #4]

	config_menu[item++] = "\n\rPlasma Driver Configuration Menu";
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	1c5a      	adds	r2, r3, #1
 8001d26:	607a      	str	r2, [r7, #4]
 8001d28:	4a0c      	ldr	r2, [pc, #48]	; (8001d5c <InitializeConfigMenu+0x44>)
 8001d2a:	490d      	ldr	r1, [pc, #52]	; (8001d60 <InitializeConfigMenu+0x48>)
 8001d2c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	config_menu[item++] = "   m: Change mode (Test/Run)";
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	1c5a      	adds	r2, r3, #1
 8001d34:	607a      	str	r2, [r7, #4]
 8001d36:	4a09      	ldr	r2, [pc, #36]	; (8001d5c <InitializeConfigMenu+0x44>)
 8001d38:	490a      	ldr	r1, [pc, #40]	; (8001d64 <InitializeConfigMenu+0x4c>)
 8001d3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if (item > CONFIG_MENU_SIZE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	dd06      	ble.n	8001d52 <InitializeConfigMenu+0x3a>
		HAL_UART_Transmit(&huart3, (uint8_t *) "\n\rIncrease CONFIG_MENU_SIZE", 20, 1000);
 8001d44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d48:	2214      	movs	r2, #20
 8001d4a:	4907      	ldr	r1, [pc, #28]	; (8001d68 <InitializeConfigMenu+0x50>)
 8001d4c:	4807      	ldr	r0, [pc, #28]	; (8001d6c <InitializeConfigMenu+0x54>)
 8001d4e:	f00d fb5c 	bl	800f40a <HAL_UART_Transmit>

}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	240001a8 	.word	0x240001a8
 8001d60:	0801194c 	.word	0x0801194c
 8001d64:	08011970 	.word	0x08011970
 8001d68:	08011990 	.word	0x08011990
 8001d6c:	24000cb4 	.word	0x24000cb4

08001d70 <InitializeMenu>:

// Initialize the UART3 menu
static void InitializeMenu(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
	int item = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	607b      	str	r3, [r7, #4]

	//Clear previous menu
	for (int i=0; i < MAX_MENU_SIZE; ++i)
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	603b      	str	r3, [r7, #0]
 8001d7e:	e007      	b.n	8001d90 <InitializeMenu+0x20>
	{
		menu[i] = "";
 8001d80:	4a48      	ldr	r2, [pc, #288]	; (8001ea4 <InitializeMenu+0x134>)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	4948      	ldr	r1, [pc, #288]	; (8001ea8 <InitializeMenu+0x138>)
 8001d86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0; i < MAX_MENU_SIZE; ++i)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	603b      	str	r3, [r7, #0]
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	2b0b      	cmp	r3, #11
 8001d94:	ddf4      	ble.n	8001d80 <InitializeMenu+0x10>
	}

	if (sFlashConfig.mode == TEST_MODE)
 8001d96:	4b45      	ldr	r3, [pc, #276]	; (8001eac <InitializeMenu+0x13c>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d154      	bne.n	8001e48 <InitializeMenu+0xd8>
	{
		menu[item++] = "\n\rPlasma Driver TEST Menu";
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	607a      	str	r2, [r7, #4]
 8001da4:	4a3f      	ldr	r2, [pc, #252]	; (8001ea4 <InitializeMenu+0x134>)
 8001da6:	4942      	ldr	r1, [pc, #264]	; (8001eb0 <InitializeMenu+0x140>)
 8001da8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   p: Power on supplies";
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	1c5a      	adds	r2, r3, #1
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	4a3c      	ldr	r2, [pc, #240]	; (8001ea4 <InitializeMenu+0x134>)
 8001db4:	493f      	ldr	r1, [pc, #252]	; (8001eb4 <InitializeMenu+0x144>)
 8001db6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   o: Power off supplies";
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	1c5a      	adds	r2, r3, #1
 8001dbe:	607a      	str	r2, [r7, #4]
 8001dc0:	4a38      	ldr	r2, [pc, #224]	; (8001ea4 <InitializeMenu+0x134>)
 8001dc2:	493d      	ldr	r1, [pc, #244]	; (8001eb8 <InitializeMenu+0x148>)
 8001dc4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   s: Start/stop driving H-Bridge";
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	1c5a      	adds	r2, r3, #1
 8001dcc:	607a      	str	r2, [r7, #4]
 8001dce:	4a35      	ldr	r2, [pc, #212]	; (8001ea4 <InitializeMenu+0x134>)
 8001dd0:	493a      	ldr	r1, [pc, #232]	; (8001ebc <InitializeMenu+0x14c>)
 8001dd2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   f: Set H-bridge frequency (Hz)";
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	1c5a      	adds	r2, r3, #1
 8001dda:	607a      	str	r2, [r7, #4]
 8001ddc:	4a31      	ldr	r2, [pc, #196]	; (8001ea4 <InitializeMenu+0x134>)
 8001dde:	4938      	ldr	r1, [pc, #224]	; (8001ec0 <InitializeMenu+0x150>)
 8001de0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   d: Set H-bridge dead time (%)";
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	1c5a      	adds	r2, r3, #1
 8001de8:	607a      	str	r2, [r7, #4]
 8001dea:	4a2e      	ldr	r2, [pc, #184]	; (8001ea4 <InitializeMenu+0x134>)
 8001dec:	4935      	ldr	r1, [pc, #212]	; (8001ec4 <InitializeMenu+0x154>)
 8001dee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   a: Start ADC1 and ADC2 measurement";
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	1c5a      	adds	r2, r3, #1
 8001df6:	607a      	str	r2, [r7, #4]
 8001df8:	4a2a      	ldr	r2, [pc, #168]	; (8001ea4 <InitializeMenu+0x134>)
 8001dfa:	4933      	ldr	r1, [pc, #204]	; (8001ec8 <InitializeMenu+0x158>)
 8001dfc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   b: Start ADC3 measurement";
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	607a      	str	r2, [r7, #4]
 8001e06:	4a27      	ldr	r2, [pc, #156]	; (8001ea4 <InitializeMenu+0x134>)
 8001e08:	4930      	ldr	r1, [pc, #192]	; (8001ecc <InitializeMenu+0x15c>)
 8001e0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   q: Frequency correction";
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	1c5a      	adds	r2, r3, #1
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	4a23      	ldr	r2, [pc, #140]	; (8001ea4 <InitializeMenu+0x134>)
 8001e16:	492e      	ldr	r1, [pc, #184]	; (8001ed0 <InitializeMenu+0x160>)
 8001e18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   z: Debug output (On/Off)";
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	1c5a      	adds	r2, r3, #1
 8001e20:	607a      	str	r2, [r7, #4]
 8001e22:	4a20      	ldr	r2, [pc, #128]	; (8001ea4 <InitializeMenu+0x134>)
 8001e24:	492b      	ldr	r1, [pc, #172]	; (8001ed4 <InitializeMenu+0x164>)
 8001e26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   c: Show/Change configuration";
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	607a      	str	r2, [r7, #4]
 8001e30:	4a1c      	ldr	r2, [pc, #112]	; (8001ea4 <InitializeMenu+0x134>)
 8001e32:	4929      	ldr	r1, [pc, #164]	; (8001ed8 <InitializeMenu+0x168>)
 8001e34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   t: Test GPIO";
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	607a      	str	r2, [r7, #4]
 8001e3e:	4a19      	ldr	r2, [pc, #100]	; (8001ea4 <InitializeMenu+0x134>)
 8001e40:	4926      	ldr	r1, [pc, #152]	; (8001edc <InitializeMenu+0x16c>)
 8001e42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001e46:	e019      	b.n	8001e7c <InitializeMenu+0x10c>
	}
	else if ((sFlashConfig.mode == RUN_MODE))
 8001e48:	4b18      	ldr	r3, [pc, #96]	; (8001eac <InitializeMenu+0x13c>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d10e      	bne.n	8001e6e <InitializeMenu+0xfe>
	{
		menu[item++] = "\n\rPlasma Driver RUN Menu";
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	1c5a      	adds	r2, r3, #1
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	4a13      	ldr	r2, [pc, #76]	; (8001ea4 <InitializeMenu+0x134>)
 8001e58:	4921      	ldr	r1, [pc, #132]	; (8001ee0 <InitializeMenu+0x170>)
 8001e5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   c: Show/Change current configuration";
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	1c5a      	adds	r2, r3, #1
 8001e62:	607a      	str	r2, [r7, #4]
 8001e64:	4a0f      	ldr	r2, [pc, #60]	; (8001ea4 <InitializeMenu+0x134>)
 8001e66:	491f      	ldr	r1, [pc, #124]	; (8001ee4 <InitializeMenu+0x174>)
 8001e68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001e6c:	e006      	b.n	8001e7c <InitializeMenu+0x10c>
	}
	else
	{
		menu[item++] = "\n\rERROR SETTING UP MENU";
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	1c5a      	adds	r2, r3, #1
 8001e72:	607a      	str	r2, [r7, #4]
 8001e74:	4a0b      	ldr	r2, [pc, #44]	; (8001ea4 <InitializeMenu+0x134>)
 8001e76:	491c      	ldr	r1, [pc, #112]	; (8001ee8 <InitializeMenu+0x178>)
 8001e78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	menu_size = item;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <InitializeMenu+0x17c>)
 8001e82:	801a      	strh	r2, [r3, #0]

	if (menu_size> MAX_MENU_SIZE)
 8001e84:	4b19      	ldr	r3, [pc, #100]	; (8001eec <InitializeMenu+0x17c>)
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	2b0c      	cmp	r3, #12
 8001e8a:	d906      	bls.n	8001e9a <InitializeMenu+0x12a>
		HAL_UART_Transmit(&huart3, (uint8_t *) "\n\rIncrease MENU_SIZE", 20, 1000);
 8001e8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e90:	2214      	movs	r2, #20
 8001e92:	4917      	ldr	r1, [pc, #92]	; (8001ef0 <InitializeMenu+0x180>)
 8001e94:	4817      	ldr	r0, [pc, #92]	; (8001ef4 <InitializeMenu+0x184>)
 8001e96:	f00d fab8 	bl	800f40a <HAL_UART_Transmit>

}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	24000174 	.word	0x24000174
 8001ea8:	080119ac 	.word	0x080119ac
 8001eac:	240008c4 	.word	0x240008c4
 8001eb0:	080119b0 	.word	0x080119b0
 8001eb4:	080119cc 	.word	0x080119cc
 8001eb8:	080119e4 	.word	0x080119e4
 8001ebc:	08011a00 	.word	0x08011a00
 8001ec0:	08011a24 	.word	0x08011a24
 8001ec4:	08011a48 	.word	0x08011a48
 8001ec8:	08011a6c 	.word	0x08011a6c
 8001ecc:	08011a94 	.word	0x08011a94
 8001ed0:	08011ab4 	.word	0x08011ab4
 8001ed4:	08011ad0 	.word	0x08011ad0
 8001ed8:	08011aec 	.word	0x08011aec
 8001edc:	08011b0c 	.word	0x08011b0c
 8001ee0:	08011b1c 	.word	0x08011b1c
 8001ee4:	08011b38 	.word	0x08011b38
 8001ee8:	08011b60 	.word	0x08011b60
 8001eec:	240001a4 	.word	0x240001a4
 8001ef0:	08011b78 	.word	0x08011b78
 8001ef4:	24000cb4 	.word	0x24000cb4

08001ef8 <ShowChangeConfigFlash>:

// Show configuration. Add option to change configuration
void ShowChangeConfigFlash(void)
{
 8001ef8:	b590      	push	{r4, r7, lr}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
	uint16_t aYes;
	uint16_t mode;
	char input;

	printConfigFlash();
 8001efe:	f7fe fc4d 	bl	800079c <printConfigFlash>
	printString("\n\rChange configuration (0:No 1:Yes)? ");
 8001f02:	482e      	ldr	r0, [pc, #184]	; (8001fbc <ShowChangeConfigFlash+0xc4>)
 8001f04:	f7fe fc34 	bl	8000770 <printString>
	if (GetUint16Input(&aYes, 1, 0, 1))
 8001f08:	f107 000a 	add.w	r0, r7, #10
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2101      	movs	r1, #1
 8001f12:	f7ff fd57 	bl	80019c4 <GetUint16Input>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d04b      	beq.n	8001fb4 <ShowChangeConfigFlash+0xbc>
	{
		if (aYes)
 8001f1c:	897b      	ldrh	r3, [r7, #10]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d048      	beq.n	8001fb4 <ShowChangeConfigFlash+0xbc>
		{
			for (int i=0; i<CONFIG_MENU_SIZE; i++)
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	e017      	b.n	8001f58 <ShowChangeConfigFlash+0x60>
			{
				HAL_UART_Transmit(&huart3, (uint8_t *) config_menu[i], strlen(config_menu[i]), 1000);
 8001f28:	4a25      	ldr	r2, [pc, #148]	; (8001fc0 <ShowChangeConfigFlash+0xc8>)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001f30:	4a23      	ldr	r2, [pc, #140]	; (8001fc0 <ShowChangeConfigFlash+0xc8>)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe f9e9 	bl	8000310 <strlen>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f46:	4621      	mov	r1, r4
 8001f48:	481e      	ldr	r0, [pc, #120]	; (8001fc4 <ShowChangeConfigFlash+0xcc>)
 8001f4a:	f00d fa5e 	bl	800f40a <HAL_UART_Transmit>
				printCR();
 8001f4e:	f7fe fbff 	bl	8000750 <printCR>
			for (int i=0; i<CONFIG_MENU_SIZE; i++)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	3301      	adds	r3, #1
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	dde4      	ble.n	8001f28 <ShowChangeConfigFlash+0x30>
			}
			printCR();
 8001f5e:	f7fe fbf7 	bl	8000750 <printCR>

			//Wait for user input
			if (HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 60000) == HAL_OK)
 8001f62:	1df9      	adds	r1, r7, #7
 8001f64:	f64e 2360 	movw	r3, #60000	; 0xea60
 8001f68:	2201      	movs	r2, #1
 8001f6a:	4816      	ldr	r0, [pc, #88]	; (8001fc4 <ShowChangeConfigFlash+0xcc>)
 8001f6c:	f00d fadb 	bl	800f526 <HAL_UART_Receive>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d11e      	bne.n	8001fb4 <ShowChangeConfigFlash+0xbc>
			{
				switch (input)
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	2b6d      	cmp	r3, #109	; 0x6d
 8001f7a:	d11b      	bne.n	8001fb4 <ShowChangeConfigFlash+0xbc>
				{
					case 'm': //Change mode
						printString("\n\rChange mode (0:Test 1:Run)? ");
 8001f7c:	4812      	ldr	r0, [pc, #72]	; (8001fc8 <ShowChangeConfigFlash+0xd0>)
 8001f7e:	f7fe fbf7 	bl	8000770 <printString>
						if (GetUint16Input(&mode, 1, 0, 1))
 8001f82:	f107 0008 	add.w	r0, r7, #8
 8001f86:	2301      	movs	r3, #1
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	f7ff fd1a 	bl	80019c4 <GetUint16Input>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00d      	beq.n	8001fb2 <ShowChangeConfigFlash+0xba>
						{   // Data entry valid
							if (sFlashConfig.mode != mode)
 8001f96:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <ShowChangeConfigFlash+0xd4>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	893b      	ldrh	r3, [r7, #8]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d007      	beq.n	8001fb2 <ShowChangeConfigFlash+0xba>
							{
								sFlashConfig.mode = mode;
 8001fa2:	893b      	ldrh	r3, [r7, #8]
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <ShowChangeConfigFlash+0xd4>)
 8001fa8:	701a      	strb	r2, [r3, #0]
								InitializeMenu();
 8001faa:	f7ff fee1 	bl	8001d70 <InitializeMenu>
								writeConfigFlash();
 8001fae:	f7fe fb85 	bl	80006bc <writeConfigFlash>
							}
						}
					break;
 8001fb2:	bf00      	nop
				}
			}
		}
	}
}
 8001fb4:	bf00      	nop
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd90      	pop	{r4, r7, pc}
 8001fbc:	08011b90 	.word	0x08011b90
 8001fc0:	240001a8 	.word	0x240001a8
 8001fc4:	24000cb4 	.word	0x24000cb4
 8001fc8:	08011bb8 	.word	0x08011bb8
 8001fcc:	240008c4 	.word	0x240008c4

08001fd0 <testGPIO>:

//Test GPIO settings
void testGPIO(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0

		printString("\n\rClear LED_GREEN");
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
		GetUint16Input(&aYes, 1, 0, 1);
*/
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <RunModeAction>:

// Action table for the run mode menu
static void RunModeAction(char input)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	71fb      	strb	r3, [r7, #7]
	switch (input)
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	2b63      	cmp	r3, #99	; 0x63
 8001fec:	d102      	bne.n	8001ff4 <RunModeAction+0x16>
	{
		case 'c': //Show/Change current configuration
			ShowChangeConfigFlash();
 8001fee:	f7ff ff83 	bl	8001ef8 <ShowChangeConfigFlash>
			break;
 8001ff2:	bf00      	nop
	}
}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <TestModeAction>:

// Action table for the test mode menu
static void TestModeAction(char input)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b09c      	sub	sp, #112	; 0x70
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
	switch (input)
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	3b61      	subs	r3, #97	; 0x61
 800200a:	2b19      	cmp	r3, #25
 800200c:	f200 80e3 	bhi.w	80021d6 <TestModeAction+0x1da>
 8002010:	a201      	add	r2, pc, #4	; (adr r2, 8002018 <TestModeAction+0x1c>)
 8002012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002016:	bf00      	nop
 8002018:	080020b7 	.word	0x080020b7
 800201c:	080020df 	.word	0x080020df
 8002020:	080021bd 	.word	0x080021bd
 8002024:	08002121 	.word	0x08002121
 8002028:	080021d7 	.word	0x080021d7
 800202c:	080020f7 	.word	0x080020f7
 8002030:	080021d7 	.word	0x080021d7
 8002034:	080021d7 	.word	0x080021d7
 8002038:	080021d7 	.word	0x080021d7
 800203c:	080021d7 	.word	0x080021d7
 8002040:	080021d7 	.word	0x080021d7
 8002044:	080021d7 	.word	0x080021d7
 8002048:	080021d7 	.word	0x080021d7
 800204c:	080021d7 	.word	0x080021d7
 8002050:	080020ab 	.word	0x080020ab
 8002054:	08002081 	.word	0x08002081
 8002058:	0800216d 	.word	0x0800216d
 800205c:	080021d7 	.word	0x080021d7
 8002060:	08002147 	.word	0x08002147
 8002064:	080021c3 	.word	0x080021c3
 8002068:	080021d7 	.word	0x080021d7
 800206c:	080021d7 	.word	0x080021d7
 8002070:	080021d7 	.word	0x080021d7
 8002074:	080021d7 	.word	0x080021d7
 8002078:	080021d7 	.word	0x080021d7
 800207c:	0800219b 	.word	0x0800219b
	{
		case 'p': //Power supplies on
			if (powerStatus == V500_OFF)
 8002080:	4b57      	ldr	r3, [pc, #348]	; (80021e0 <TestModeAction+0x1e4>)
 8002082:	881b      	ldrh	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d10c      	bne.n	80020a2 <TestModeAction+0xa6>
			{
				if (PowerOnHighSupplies() == POWERON_FAILED)
 8002088:	f7ff fdda 	bl	8001c40 <PowerOnHighSupplies>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d103      	bne.n	800209a <TestModeAction+0x9e>
				{
					printString("\n\rPower on failed\n\r");
 8002092:	4854      	ldr	r0, [pc, #336]	; (80021e4 <TestModeAction+0x1e8>)
 8002094:	f7fe fb6c 	bl	8000770 <printString>
			}
			else
			{
				printString("\n\rPower supplies are on\n\r");
			}
			break;
 8002098:	e09d      	b.n	80021d6 <TestModeAction+0x1da>
					printString("\n\rPower on succeeded\n\r");
 800209a:	4853      	ldr	r0, [pc, #332]	; (80021e8 <TestModeAction+0x1ec>)
 800209c:	f7fe fb68 	bl	8000770 <printString>
			break;
 80020a0:	e099      	b.n	80021d6 <TestModeAction+0x1da>
				printString("\n\rPower supplies are on\n\r");
 80020a2:	4852      	ldr	r0, [pc, #328]	; (80021ec <TestModeAction+0x1f0>)
 80020a4:	f7fe fb64 	bl	8000770 <printString>
			break;
 80020a8:	e095      	b.n	80021d6 <TestModeAction+0x1da>

		case 'o': //Power supplies off
			printString("\n\rPower off supplies\n\r");
 80020aa:	4851      	ldr	r0, [pc, #324]	; (80021f0 <TestModeAction+0x1f4>)
 80020ac:	f7fe fb60 	bl	8000770 <printString>
			PowerOffHighSupplies();
 80020b0:	f7ff fd5c 	bl	8001b6c <PowerOffHighSupplies>
			break;
 80020b4:	e08f      	b.n	80021d6 <TestModeAction+0x1da>

		case 'a': //Start ADC1 and ADC2 analog voltage measurement
			if (sHbridge.on)
 80020b6:	4b4f      	ldr	r3, [pc, #316]	; (80021f4 <TestModeAction+0x1f8>)
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00b      	beq.n	80020d6 <TestModeAction+0xda>
			{
				//Setup to read ADC1 and ADC2 channels
				//Reading will start at TIM1 CH1 0->1 interrupt
				measureBridgePlasmaADC12();
 80020be:	f7ff f9df 	bl	8001480 <measureBridgePlasmaADC12>
				//Wait until ADC3 reading is done
				while (sADC.adc12_reading) ;
 80020c2:	bf00      	nop
 80020c4:	4b4c      	ldr	r3, [pc, #304]	; (80021f8 <TestModeAction+0x1fc>)
 80020c6:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	; 0x70e
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1f9      	bne.n	80020c4 <TestModeAction+0xc8>
				//Print ADC3 data on UART3
				printADC12data();
 80020d0:	f7fe ffc6 	bl	8001060 <printADC12data>
			}
			else
			{
				printString("\n\r ---- H-Bridge needs to be on");
			}
			break;
 80020d4:	e07f      	b.n	80021d6 <TestModeAction+0x1da>
				printString("\n\r ---- H-Bridge needs to be on");
 80020d6:	4849      	ldr	r0, [pc, #292]	; (80021fc <TestModeAction+0x200>)
 80020d8:	f7fe fb4a 	bl	8000770 <printString>
			break;
 80020dc:	e07b      	b.n	80021d6 <TestModeAction+0x1da>

		case 'b': //Start ADC3 analog voltage measurement
				//Start reading ADC3 channels
				measureVoltagesTemperaturesADC3();
 80020de:	f7ff fbcf 	bl	8001880 <measureVoltagesTemperaturesADC3>
				//Wait until ADC3 reading is done
				while (sADC.adc3_reading) ;
 80020e2:	bf00      	nop
 80020e4:	4b44      	ldr	r3, [pc, #272]	; (80021f8 <TestModeAction+0x1fc>)
 80020e6:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	; 0x70c
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1f9      	bne.n	80020e4 <TestModeAction+0xe8>
				//Print ADC3 data on UART3
				printADC3data();
 80020f0:	f7ff fb80 	bl	80017f4 <printADC3data>
			break;
 80020f4:	e06f      	b.n	80021d6 <TestModeAction+0x1da>

		case 'f': //Enter frequency (Hz)
			printHbridgeData();
 80020f6:	f7fe fc39 	bl	800096c <printHbridgeData>
			printString("\n\rEnter frequency (Hz): ");
 80020fa:	4841      	ldr	r0, [pc, #260]	; (8002200 <TestModeAction+0x204>)
 80020fc:	f7fe fb38 	bl	8000770 <printString>
			if (GetUint16Input(&sHbridge.frequency, 1, MIN_FREQUENCY, MAX_FREQUENCY))
 8002100:	f64f 53e8 	movw	r3, #65000	; 0xfde8
 8002104:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002108:	2101      	movs	r1, #1
 800210a:	483e      	ldr	r0, [pc, #248]	; (8002204 <TestModeAction+0x208>)
 800210c:	f7ff fc5a 	bl	80019c4 <GetUint16Input>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d058      	beq.n	80021c8 <TestModeAction+0x1cc>
			{   // Data entry valid
				programHbridge();
 8002116:	f7fe fc53 	bl	80009c0 <programHbridge>
				printHbridgeData();
 800211a:	f7fe fc27 	bl	800096c <printHbridgeData>
			}
			break;
 800211e:	e053      	b.n	80021c8 <TestModeAction+0x1cc>

		case 'd': //Enter dead time (%)
			printHbridgeData();
 8002120:	f7fe fc24 	bl	800096c <printHbridgeData>
			printString("\n\rEnter dead time (%): ");
 8002124:	4838      	ldr	r0, [pc, #224]	; (8002208 <TestModeAction+0x20c>)
 8002126:	f7fe fb23 	bl	8000770 <printString>
			if (GetUint16Input(&sHbridge.deadtime, 1, MIN_DEADTIME, MAX_DEADTIME))
 800212a:	2328      	movs	r3, #40	; 0x28
 800212c:	2201      	movs	r2, #1
 800212e:	2101      	movs	r1, #1
 8002130:	4836      	ldr	r0, [pc, #216]	; (800220c <TestModeAction+0x210>)
 8002132:	f7ff fc47 	bl	80019c4 <GetUint16Input>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d047      	beq.n	80021cc <TestModeAction+0x1d0>
			{   // Data entry valid
				programHbridge();
 800213c:	f7fe fc40 	bl	80009c0 <programHbridge>
				printHbridgeData();
 8002140:	f7fe fc14 	bl	800096c <printHbridgeData>
			}
			break;
 8002144:	e042      	b.n	80021cc <TestModeAction+0x1d0>

		case 's': //Start/stop driving H-bridge
			printHbridgeData();
 8002146:	f7fe fc11 	bl	800096c <printHbridgeData>
			printString("\n\rDrive H-bridge 1:Yes 0:No : ");
 800214a:	4831      	ldr	r0, [pc, #196]	; (8002210 <TestModeAction+0x214>)
 800214c:	f7fe fb10 	bl	8000770 <printString>
			if (GetUint16Input(&sHbridge.on, 1, 0, 1))
 8002150:	2301      	movs	r3, #1
 8002152:	2200      	movs	r2, #0
 8002154:	2101      	movs	r1, #1
 8002156:	4827      	ldr	r0, [pc, #156]	; (80021f4 <TestModeAction+0x1f8>)
 8002158:	f7ff fc34 	bl	80019c4 <GetUint16Input>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d036      	beq.n	80021d0 <TestModeAction+0x1d4>
			{   // Data entry valid
				programHbridge();
 8002162:	f7fe fc2d 	bl	80009c0 <programHbridge>
				printHbridgeData();
 8002166:	f7fe fc01 	bl	800096c <printHbridgeData>
			}
			break;
 800216a:	e031      	b.n	80021d0 <TestModeAction+0x1d4>

		case 'q': //Frequency correction
			int16_t freqCorr;
			if (freqCorrection(&freqCorr))
 800216c:	f107 036e 	add.w	r3, r7, #110	; 0x6e
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff f8c3 	bl	80012fc <freqCorrection>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d02b      	beq.n	80021d4 <TestModeAction+0x1d8>
			{
				char text[100];
				sprintf(text, "\n\rFrequency correction: %i", (int) freqCorr);
 800217c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8002180:	461a      	mov	r2, r3
 8002182:	f107 0308 	add.w	r3, r7, #8
 8002186:	4923      	ldr	r1, [pc, #140]	; (8002214 <TestModeAction+0x218>)
 8002188:	4618      	mov	r0, r3
 800218a:	f00e fd0b 	bl	8010ba4 <siprintf>
				printString(text);
 800218e:	f107 0308 	add.w	r3, r7, #8
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe faec 	bl	8000770 <printString>
			}
			break;
 8002198:	e01c      	b.n	80021d4 <TestModeAction+0x1d8>

		case 'z': //Debug output
			printNumber("\n\rCurrent Debug output: ", debug, 0);
 800219a:	4b1f      	ldr	r3, [pc, #124]	; (8002218 <TestModeAction+0x21c>)
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	2200      	movs	r2, #0
 80021a0:	4619      	mov	r1, r3
 80021a2:	481e      	ldr	r0, [pc, #120]	; (800221c <TestModeAction+0x220>)
 80021a4:	f7fe fb26 	bl	80007f4 <printNumber>
			printString("\n\rSet Debug output 1:On 0:Off : ");
 80021a8:	481d      	ldr	r0, [pc, #116]	; (8002220 <TestModeAction+0x224>)
 80021aa:	f7fe fae1 	bl	8000770 <printString>
			GetUint16Input(&debug, 1, 0, 1);
 80021ae:	2301      	movs	r3, #1
 80021b0:	2200      	movs	r2, #0
 80021b2:	2101      	movs	r1, #1
 80021b4:	4818      	ldr	r0, [pc, #96]	; (8002218 <TestModeAction+0x21c>)
 80021b6:	f7ff fc05 	bl	80019c4 <GetUint16Input>
			break;
 80021ba:	e00c      	b.n	80021d6 <TestModeAction+0x1da>

		case 'c': //Show/Change current configuration
			ShowChangeConfigFlash();
 80021bc:	f7ff fe9c 	bl	8001ef8 <ShowChangeConfigFlash>
			break;
 80021c0:	e009      	b.n	80021d6 <TestModeAction+0x1da>

		case 't': //Test GPIO
			testGPIO();
 80021c2:	f7ff ff05 	bl	8001fd0 <testGPIO>
			break;
 80021c6:	e006      	b.n	80021d6 <TestModeAction+0x1da>
			break;
 80021c8:	bf00      	nop
 80021ca:	e004      	b.n	80021d6 <TestModeAction+0x1da>
			break;
 80021cc:	bf00      	nop
 80021ce:	e002      	b.n	80021d6 <TestModeAction+0x1da>
			break;
 80021d0:	bf00      	nop
 80021d2:	e000      	b.n	80021d6 <TestModeAction+0x1da>
			break;
 80021d4:	bf00      	nop
	}
}
 80021d6:	bf00      	nop
 80021d8:	3770      	adds	r7, #112	; 0x70
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	240008c0 	.word	0x240008c0
 80021e4:	08011bd8 	.word	0x08011bd8
 80021e8:	08011bec 	.word	0x08011bec
 80021ec:	08011c04 	.word	0x08011c04
 80021f0:	08011c20 	.word	0x08011c20
 80021f4:	2400001c 	.word	0x2400001c
 80021f8:	240001b0 	.word	0x240001b0
 80021fc:	08011c38 	.word	0x08011c38
 8002200:	08011c58 	.word	0x08011c58
 8002204:	2400001e 	.word	0x2400001e
 8002208:	08011c74 	.word	0x08011c74
 800220c:	24000020 	.word	0x24000020
 8002210:	08011c8c 	.word	0x08011c8c
 8002214:	08011cac 	.word	0x08011cac
 8002218:	24000000 	.word	0x24000000
 800221c:	08011cc8 	.word	0x08011cc8
 8002220:	08011ce4 	.word	0x08011ce4

08002224 <PlasmaDriverMenu>:

// Print the plasma driver menu on UART3, and execute entered command.
static void PlasmaDriverMenu(void)
{
 8002224:	b590      	push	{r4, r7, lr}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
	char input;

	//Wait for user input
	if (HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK)
 800222a:	1cf9      	adds	r1, r7, #3
 800222c:	2301      	movs	r3, #1
 800222e:	2201      	movs	r2, #1
 8002230:	4822      	ldr	r0, [pc, #136]	; (80022bc <PlasmaDriverMenu+0x98>)
 8002232:	f00d f978 	bl	800f526 <HAL_UART_Receive>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d13b      	bne.n	80022b4 <PlasmaDriverMenu+0x90>
	{
		// Return pressed -- Display Menu
		if (input == 13)
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	2b0d      	cmp	r3, #13
 8002240:	d123      	bne.n	800228a <PlasmaDriverMenu+0x66>
		{
			for (int i=0; i<menu_size; i++)
 8002242:	2300      	movs	r3, #0
 8002244:	607b      	str	r3, [r7, #4]
 8002246:	e017      	b.n	8002278 <PlasmaDriverMenu+0x54>
			{
				HAL_UART_Transmit(&huart3, (uint8_t *) menu[i], strlen(menu[i]), 1000);
 8002248:	4a1d      	ldr	r2, [pc, #116]	; (80022c0 <PlasmaDriverMenu+0x9c>)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002250:	4a1b      	ldr	r2, [pc, #108]	; (80022c0 <PlasmaDriverMenu+0x9c>)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe f859 	bl	8000310 <strlen>
 800225e:	4603      	mov	r3, r0
 8002260:	b29a      	uxth	r2, r3
 8002262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002266:	4621      	mov	r1, r4
 8002268:	4814      	ldr	r0, [pc, #80]	; (80022bc <PlasmaDriverMenu+0x98>)
 800226a:	f00d f8ce 	bl	800f40a <HAL_UART_Transmit>
				printCR();
 800226e:	f7fe fa6f 	bl	8000750 <printCR>
			for (int i=0; i<menu_size; i++)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3301      	adds	r3, #1
 8002276:	607b      	str	r3, [r7, #4]
 8002278:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <PlasmaDriverMenu+0xa0>)
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4293      	cmp	r3, r2
 8002282:	dbe1      	blt.n	8002248 <PlasmaDriverMenu+0x24>
			}
			printCR();
 8002284:	f7fe fa64 	bl	8000750 <printCR>
				RunModeAction(input);
			else
				printString("\n\r*** ERROR *** Invalid mode");
		}
	}
}
 8002288:	e014      	b.n	80022b4 <PlasmaDriverMenu+0x90>
			if (sFlashConfig.mode == TEST_MODE)
 800228a:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <PlasmaDriverMenu+0xa4>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d104      	bne.n	800229c <PlasmaDriverMenu+0x78>
				TestModeAction(input);
 8002292:	78fb      	ldrb	r3, [r7, #3]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff feb1 	bl	8001ffc <TestModeAction>
}
 800229a:	e00b      	b.n	80022b4 <PlasmaDriverMenu+0x90>
			else if (sFlashConfig.mode == RUN_MODE)
 800229c:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <PlasmaDriverMenu+0xa4>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d104      	bne.n	80022ae <PlasmaDriverMenu+0x8a>
				RunModeAction(input);
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff fe99 	bl	8001fde <RunModeAction>
}
 80022ac:	e002      	b.n	80022b4 <PlasmaDriverMenu+0x90>
				printString("\n\r*** ERROR *** Invalid mode");
 80022ae:	4807      	ldr	r0, [pc, #28]	; (80022cc <PlasmaDriverMenu+0xa8>)
 80022b0:	f7fe fa5e 	bl	8000770 <printString>
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd90      	pop	{r4, r7, pc}
 80022bc:	24000cb4 	.word	0x24000cb4
 80022c0:	24000174 	.word	0x24000174
 80022c4:	240001a4 	.word	0x240001a4
 80022c8:	240008c4 	.word	0x240008c4
 80022cc:	08011d08 	.word	0x08011d08

080022d0 <PlasmaDriverInit>:

// Initialize the plasma driver
void PlasmaDriverInit(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
	//TEST
	HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);
 80022d4:	2201      	movs	r2, #1
 80022d6:	2102      	movs	r1, #2
 80022d8:	481f      	ldr	r0, [pc, #124]	; (8002358 <PlasmaDriverInit+0x88>)
 80022da:	f008 f913 	bl	800a504 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_3V3_SWITCH_GPIO_Port, OUT_3V3_SWITCH_Pin, GPIO_PIN_RESET);
 80022de:	2200      	movs	r2, #0
 80022e0:	2101      	movs	r1, #1
 80022e2:	481e      	ldr	r0, [pc, #120]	; (800235c <PlasmaDriverInit+0x8c>)
 80022e4:	f008 f90e 	bl	800a504 <HAL_GPIO_WritePin>

	//Enable line driver 2 (HAL has initialized all GPIO)
	HAL_GPIO_WritePin(LINE_DRIVER2_ENABLE_GPIO_Port, LINE_DRIVER2_ENABLE_Pin, GPIO_PIN_RESET);  //Enable = Low
 80022e8:	2200      	movs	r2, #0
 80022ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022ee:	481c      	ldr	r0, [pc, #112]	; (8002360 <PlasmaDriverInit+0x90>)
 80022f0:	f008 f908 	bl	800a504 <HAL_GPIO_WritePin>
	//printString("\n\rEnable Line Drive 2");

	//Power On Supplies in order 15V, 3.3V switch
	PowerOnLowSupplies();
 80022f4:	f7ff fc60 	bl	8001bb8 <PowerOnLowSupplies>

	//Read configuration from flash
	readConfigFlash();
 80022f8:	f7fe fa1a 	bl	8000730 <readConfigFlash>

	//Has the flash configuration been initialized?
	if (sFlashConfig.mode == 0xFF)
 80022fc:	4b19      	ldr	r3, [pc, #100]	; (8002364 <PlasmaDriverInit+0x94>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2bff      	cmp	r3, #255	; 0xff
 8002302:	d107      	bne.n	8002314 <PlasmaDriverInit+0x44>
	{
		// write default configuration to flash
		if (writeConfigFlash() != 0)
 8002304:	f7fe f9da 	bl	80006bc <writeConfigFlash>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d002      	beq.n	8002314 <PlasmaDriverInit+0x44>
			printString("\n\r*** ERROR FLASH");
 800230e:	4816      	ldr	r0, [pc, #88]	; (8002368 <PlasmaDriverInit+0x98>)
 8002310:	f7fe fa2e 	bl	8000770 <printString>
	}

	//Initialize menu and configuration menu
	InitializeMenu();
 8002314:	f7ff fd2c 	bl	8001d70 <InitializeMenu>
	InitializeConfigMenu();
 8002318:	f7ff fcfe 	bl	8001d18 <InitializeConfigMenu>

	//Calibrate ADC1, ADC2 and ADC3
	printString("\n\rCalibrate ADC1, ADC2 and ADC3");
 800231c:	4813      	ldr	r0, [pc, #76]	; (800236c <PlasmaDriverInit+0x9c>)
 800231e:	f7fe fa27 	bl	8000770 <printString>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8002322:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002326:	2100      	movs	r1, #0
 8002328:	4811      	ldr	r0, [pc, #68]	; (8002370 <PlasmaDriverInit+0xa0>)
 800232a:	f004 fbf1 	bl	8006b10 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 800232e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002332:	2100      	movs	r1, #0
 8002334:	480f      	ldr	r0, [pc, #60]	; (8002374 <PlasmaDriverInit+0xa4>)
 8002336:	f004 fbeb 	bl	8006b10 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 800233a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800233e:	2100      	movs	r1, #0
 8002340:	480d      	ldr	r0, [pc, #52]	; (8002378 <PlasmaDriverInit+0xa8>)
 8002342:	f004 fbe5 	bl	8006b10 <HAL_ADCEx_Calibration_Start>

	//Power On Supply 500V
	if (sFlashConfig.mode == RUN_MODE)
 8002346:	4b07      	ldr	r3, [pc, #28]	; (8002364 <PlasmaDriverInit+0x94>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <PlasmaDriverInit+0x82>
	{
		//POWER_OFF_IRQ needs to be high before powering On
		//TESTif (HAL_GPIO_ReadPin(POWER_OFF_IRQ_GPIO_Port, POWER_OFF_IRQ_Pin) == GPIO_PIN_RESET)		//There is an inverter between MCU and the input, thus check RESET
			PowerOnHighSupplies();
 800234e:	f7ff fc77 	bl	8001c40 <PowerOnHighSupplies>
		//TESTelse
		//TEST	printString("\n\rPOWER_OFF_IRQ line is not high - 500V is not powered on");
	}
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	58021800 	.word	0x58021800
 800235c:	58020c00 	.word	0x58020c00
 8002360:	58020400 	.word	0x58020400
 8002364:	240008c4 	.word	0x240008c4
 8002368:	08011d28 	.word	0x08011d28
 800236c:	08011d3c 	.word	0x08011d3c
 8002370:	24000904 	.word	0x24000904
 8002374:	24000974 	.word	0x24000974
 8002378:	240009e4 	.word	0x240009e4

0800237c <PlasmaDoTask>:

// This command is called from a while loop, and will execute any needed task.
void PlasmaDoTask(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
	PlasmaDriverMenu(); //Check UART3 and execute command
 8002380:	f7ff ff50 	bl	8002224 <PlasmaDriverMenu>

	if (sFlashConfig.mode == RUN_MODE)
 8002384:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <PlasmaDoTask+0x40>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d114      	bne.n	80023b6 <PlasmaDoTask+0x3a>
	{
		//Check if robot controller requested the plasma On or Off
		if (HAL_GPIO_ReadPin(TURN_PLASMA_ON_GPIO_Port, TURN_PLASMA_ON_Pin) == GPIO_PIN_RESET)		//There is an inverter between MCU and the input, thus check RESET
 800238c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002390:	480b      	ldr	r0, [pc, #44]	; (80023c0 <PlasmaDoTask+0x44>)
 8002392:	f008 f89f 	bl	800a4d4 <HAL_GPIO_ReadPin>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10c      	bne.n	80023b6 <PlasmaDoTask+0x3a>
		{
			if (powerStatus == V500_ON)
 800239c:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <PlasmaDoTask+0x48>)
 800239e:	881b      	ldrh	r3, [r3, #0]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d105      	bne.n	80023b0 <PlasmaDoTask+0x34>
			{
				sHbridge.on = 1; // Turn Hbridge on
 80023a4:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <PlasmaDoTask+0x4c>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	801a      	strh	r2, [r3, #0]
				programHbridge();
 80023aa:	f7fe fb09 	bl	80009c0 <programHbridge>
			}
			else
				printString("\n\rUnable to turn H-bridge on, since 500V is not powered on");
		}
	}
}
 80023ae:	e002      	b.n	80023b6 <PlasmaDoTask+0x3a>
				printString("\n\rUnable to turn H-bridge on, since 500V is not powered on");
 80023b0:	4806      	ldr	r0, [pc, #24]	; (80023cc <PlasmaDoTask+0x50>)
 80023b2:	f7fe f9dd 	bl	8000770 <printString>
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	240008c4 	.word	0x240008c4
 80023c0:	58021000 	.word	0x58021000
 80023c4:	240008c0 	.word	0x240008c0
 80023c8:	2400001c 	.word	0x2400001c
 80023cc:	08011d5c 	.word	0x08011d5c

080023d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023d4:	f001 fdce 	bl	8003f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023d8:	f000 f826 	bl	8002428 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80023dc:	f000 f894 	bl	8002508 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023e0:	f000 fe4c 	bl	800307c <MX_GPIO_Init>
  MX_DMA_Init();
 80023e4:	f000 fe22 	bl	800302c <MX_DMA_Init>
  MX_TIM1_Init();
 80023e8:	f000 fc26 	bl	8002c38 <MX_TIM1_Init>
  MX_ETH_Init();
 80023ec:	f000 fb3e 	bl	8002a6c <MX_ETH_Init>
  MX_ADC2_Init();
 80023f0:	f000 f958 	bl	80026a4 <MX_ADC2_Init>
  MX_USB_OTG_HS_USB_Init();
 80023f4:	f000 fe12 	bl	800301c <MX_USB_OTG_HS_USB_Init>
  MX_ADC3_Init();
 80023f8:	f000 f9f8 	bl	80027ec <MX_ADC3_Init>
  MX_USART3_UART_Init();
 80023fc:	f000 fbd0 	bl	8002ba0 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8002400:	f000 f8b2 	bl	8002568 <MX_ADC1_Init>
  MX_COMP2_Init();
 8002404:	f000 fb04 	bl	8002a10 <MX_COMP2_Init>
  MX_TIM2_Init();
 8002408:	f000 fca8 	bl	8002d5c <MX_TIM2_Init>
  MX_LPUART1_UART_Init();
 800240c:	f000 fb7a 	bl	8002b04 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8002410:	f000 fcfe 	bl	8002e10 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002414:	f000 fd50 	bl	8002eb8 <MX_TIM4_Init>
  MX_TIM15_Init();
 8002418:	f000 fda8 	bl	8002f6c <MX_TIM15_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  PlasmaDriverInit();  			//Initialize plasma driver
 800241c:	f7ff ff58 	bl	80022d0 <PlasmaDriverInit>
  while (1)
  {
	PlasmaDoTask();     	    //Handle plasma driver task
 8002420:	f7ff ffac 	bl	800237c <PlasmaDoTask>
 8002424:	e7fc      	b.n	8002420 <main+0x50>
	...

08002428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b09c      	sub	sp, #112	; 0x70
 800242c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800242e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002432:	224c      	movs	r2, #76	; 0x4c
 8002434:	2100      	movs	r1, #0
 8002436:	4618      	mov	r0, r3
 8002438:	f00e fbd4 	bl	8010be4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800243c:	1d3b      	adds	r3, r7, #4
 800243e:	2220      	movs	r2, #32
 8002440:	2100      	movs	r1, #0
 8002442:	4618      	mov	r0, r3
 8002444:	f00e fbce 	bl	8010be4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002448:	2002      	movs	r0, #2
 800244a:	f008 f88f 	bl	800a56c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800244e:	2300      	movs	r3, #0
 8002450:	603b      	str	r3, [r7, #0]
 8002452:	4b2c      	ldr	r3, [pc, #176]	; (8002504 <SystemClock_Config+0xdc>)
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	4a2b      	ldr	r2, [pc, #172]	; (8002504 <SystemClock_Config+0xdc>)
 8002458:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800245c:	6193      	str	r3, [r2, #24]
 800245e:	4b29      	ldr	r3, [pc, #164]	; (8002504 <SystemClock_Config+0xdc>)
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800246a:	bf00      	nop
 800246c:	4b25      	ldr	r3, [pc, #148]	; (8002504 <SystemClock_Config+0xdc>)
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002474:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002478:	d1f8      	bne.n	800246c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800247a:	2321      	movs	r3, #33	; 0x21
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800247e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002482:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002484:	2301      	movs	r3, #1
 8002486:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002488:	2302      	movs	r3, #2
 800248a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800248c:	2302      	movs	r3, #2
 800248e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002490:	2304      	movs	r3, #4
 8002492:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8002494:	f240 1313 	movw	r3, #275	; 0x113
 8002498:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800249a:	2301      	movs	r3, #1
 800249c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800249e:	2304      	movs	r3, #4
 80024a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80024a2:	2302      	movs	r3, #2
 80024a4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80024a6:	2304      	movs	r3, #4
 80024a8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80024aa:	2300      	movs	r3, #0
 80024ac:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b6:	4618      	mov	r0, r3
 80024b8:	f008 f892 	bl	800a5e0 <HAL_RCC_OscConfig>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80024c2:	f000 ff4b 	bl	800335c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024c6:	233f      	movs	r3, #63	; 0x3f
 80024c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024ca:	2303      	movs	r3, #3
 80024cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80024d2:	2308      	movs	r3, #8
 80024d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80024d6:	2340      	movs	r3, #64	; 0x40
 80024d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80024da:	2340      	movs	r3, #64	; 0x40
 80024dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 80024de:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80024e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80024e4:	2340      	movs	r3, #64	; 0x40
 80024e6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80024e8:	1d3b      	adds	r3, r7, #4
 80024ea:	2103      	movs	r1, #3
 80024ec:	4618      	mov	r0, r3
 80024ee:	f008 fc51 	bl	800ad94 <HAL_RCC_ClockConfig>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80024f8:	f000 ff30 	bl	800335c <Error_Handler>
  }
}
 80024fc:	bf00      	nop
 80024fe:	3770      	adds	r7, #112	; 0x70
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	58024800 	.word	0x58024800

08002508 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b0ae      	sub	sp, #184	; 0xb8
 800250c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800250e:	463b      	mov	r3, r7
 8002510:	22b8      	movs	r2, #184	; 0xb8
 8002512:	2100      	movs	r1, #0
 8002514:	4618      	mov	r0, r3
 8002516:	f00e fb65 	bl	8010be4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800251a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800251e:	f04f 0300 	mov.w	r3, #0
 8002522:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8002526:	2301      	movs	r3, #1
 8002528:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 800252a:	2318      	movs	r3, #24
 800252c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800252e:	2302      	movs	r3, #2
 8002530:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002532:	2302      	movs	r3, #2
 8002534:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002536:	2302      	movs	r3, #2
 8002538:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800253a:	23c0      	movs	r3, #192	; 0xc0
 800253c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800253e:	2300      	movs	r3, #0
 8002540:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002546:	2300      	movs	r3, #0
 8002548:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800254c:	463b      	mov	r3, r7
 800254e:	4618      	mov	r0, r3
 8002550:	f008 ffac 	bl	800b4ac <HAL_RCCEx_PeriphCLKConfig>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800255a:	f000 feff 	bl	800335c <Error_Handler>
  }
}
 800255e:	bf00      	nop
 8002560:	37b8      	adds	r7, #184	; 0xb8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08c      	sub	sp, #48	; 0x30
 800256c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800256e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	605a      	str	r2, [r3, #4]
 8002578:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800257a:	463b      	mov	r3, r7
 800257c:	2224      	movs	r2, #36	; 0x24
 800257e:	2100      	movs	r1, #0
 8002580:	4618      	mov	r0, r3
 8002582:	f00e fb2f 	bl	8010be4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002586:	4b42      	ldr	r3, [pc, #264]	; (8002690 <MX_ADC1_Init+0x128>)
 8002588:	4a42      	ldr	r2, [pc, #264]	; (8002694 <MX_ADC1_Init+0x12c>)
 800258a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800258c:	4b40      	ldr	r3, [pc, #256]	; (8002690 <MX_ADC1_Init+0x128>)
 800258e:	2200      	movs	r2, #0
 8002590:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8002592:	4b3f      	ldr	r3, [pc, #252]	; (8002690 <MX_ADC1_Init+0x128>)
 8002594:	2200      	movs	r2, #0
 8002596:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002598:	4b3d      	ldr	r3, [pc, #244]	; (8002690 <MX_ADC1_Init+0x128>)
 800259a:	2201      	movs	r2, #1
 800259c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800259e:	4b3c      	ldr	r3, [pc, #240]	; (8002690 <MX_ADC1_Init+0x128>)
 80025a0:	2208      	movs	r2, #8
 80025a2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80025a4:	4b3a      	ldr	r3, [pc, #232]	; (8002690 <MX_ADC1_Init+0x128>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80025aa:	4b39      	ldr	r3, [pc, #228]	; (8002690 <MX_ADC1_Init+0x128>)
 80025ac:	2201      	movs	r2, #1
 80025ae:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 80025b0:	4b37      	ldr	r3, [pc, #220]	; (8002690 <MX_ADC1_Init+0x128>)
 80025b2:	2203      	movs	r2, #3
 80025b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80025b6:	4b36      	ldr	r3, [pc, #216]	; (8002690 <MX_ADC1_Init+0x128>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 80025be:	4b34      	ldr	r3, [pc, #208]	; (8002690 <MX_ADC1_Init+0x128>)
 80025c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80025c6:	4b32      	ldr	r3, [pc, #200]	; (8002690 <MX_ADC1_Init+0x128>)
 80025c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 80025ce:	4b30      	ldr	r3, [pc, #192]	; (8002690 <MX_ADC1_Init+0x128>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80025d4:	4b2e      	ldr	r3, [pc, #184]	; (8002690 <MX_ADC1_Init+0x128>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80025da:	4b2d      	ldr	r3, [pc, #180]	; (8002690 <MX_ADC1_Init+0x128>)
 80025dc:	2200      	movs	r2, #0
 80025de:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80025e0:	4b2b      	ldr	r3, [pc, #172]	; (8002690 <MX_ADC1_Init+0x128>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80025e8:	4829      	ldr	r0, [pc, #164]	; (8002690 <MX_ADC1_Init+0x128>)
 80025ea:	f002 f9cb 	bl	8004984 <HAL_ADC_Init>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80025f4:	f000 feb2 	bl	800335c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 80025f8:	2306      	movs	r3, #6
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 80025fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002600:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8002602:	2300      	movs	r3, #0
 8002604:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800260a:	4619      	mov	r1, r3
 800260c:	4820      	ldr	r0, [pc, #128]	; (8002690 <MX_ADC1_Init+0x128>)
 800260e:	f004 fbc7 	bl	8006da0 <HAL_ADCEx_MultiModeConfigChannel>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8002618:	f000 fea0 	bl	800335c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800261c:	4b1e      	ldr	r3, [pc, #120]	; (8002698 <MX_ADC1_Init+0x130>)
 800261e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002620:	2306      	movs	r3, #6
 8002622:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8002624:	2302      	movs	r3, #2
 8002626:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002628:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800262c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800262e:	2304      	movs	r3, #4
 8002630:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002632:	2300      	movs	r3, #0
 8002634:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8002636:	2300      	movs	r3, #0
 8002638:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800263c:	463b      	mov	r3, r7
 800263e:	4619      	mov	r1, r3
 8002640:	4813      	ldr	r0, [pc, #76]	; (8002690 <MX_ADC1_Init+0x128>)
 8002642:	f002 fed1 	bl	80053e8 <HAL_ADC_ConfigChannel>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 800264c:	f000 fe86 	bl	800335c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <MX_ADC1_Init+0x134>)
 8002652:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002654:	230c      	movs	r3, #12
 8002656:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002658:	463b      	mov	r3, r7
 800265a:	4619      	mov	r1, r3
 800265c:	480c      	ldr	r0, [pc, #48]	; (8002690 <MX_ADC1_Init+0x128>)
 800265e:	f002 fec3 	bl	80053e8 <HAL_ADC_ConfigChannel>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8002668:	f000 fe78 	bl	800335c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 800266c:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <MX_ADC1_Init+0x138>)
 800266e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002670:	2312      	movs	r3, #18
 8002672:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002674:	463b      	mov	r3, r7
 8002676:	4619      	mov	r1, r3
 8002678:	4805      	ldr	r0, [pc, #20]	; (8002690 <MX_ADC1_Init+0x128>)
 800267a:	f002 feb5 	bl	80053e8 <HAL_ADC_ConfigChannel>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8002684:	f000 fe6a 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002688:	bf00      	nop
 800268a:	3730      	adds	r7, #48	; 0x30
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	24000904 	.word	0x24000904
 8002694:	40022000 	.word	0x40022000
 8002698:	3ef08000 	.word	0x3ef08000
 800269c:	4b840000 	.word	0x4b840000
 80026a0:	43210000 	.word	0x43210000

080026a4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b090      	sub	sp, #64	; 0x40
 80026a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80026aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	605a      	str	r2, [r3, #4]
 80026b4:	609a      	str	r2, [r3, #8]
 80026b6:	60da      	str	r2, [r3, #12]
 80026b8:	611a      	str	r2, [r3, #16]
 80026ba:	615a      	str	r2, [r3, #20]
 80026bc:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 80026be:	463b      	mov	r3, r7
 80026c0:	2224      	movs	r2, #36	; 0x24
 80026c2:	2100      	movs	r1, #0
 80026c4:	4618      	mov	r0, r3
 80026c6:	f00e fa8d 	bl	8010be4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80026ca:	4b42      	ldr	r3, [pc, #264]	; (80027d4 <MX_ADC2_Init+0x130>)
 80026cc:	4a42      	ldr	r2, [pc, #264]	; (80027d8 <MX_ADC2_Init+0x134>)
 80026ce:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80026d0:	4b40      	ldr	r3, [pc, #256]	; (80027d4 <MX_ADC2_Init+0x130>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80026d6:	4b3f      	ldr	r3, [pc, #252]	; (80027d4 <MX_ADC2_Init+0x130>)
 80026d8:	2200      	movs	r2, #0
 80026da:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80026dc:	4b3d      	ldr	r3, [pc, #244]	; (80027d4 <MX_ADC2_Init+0x130>)
 80026de:	2201      	movs	r2, #1
 80026e0:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80026e2:	4b3c      	ldr	r3, [pc, #240]	; (80027d4 <MX_ADC2_Init+0x130>)
 80026e4:	2208      	movs	r2, #8
 80026e6:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80026e8:	4b3a      	ldr	r3, [pc, #232]	; (80027d4 <MX_ADC2_Init+0x130>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80026ee:	4b39      	ldr	r3, [pc, #228]	; (80027d4 <MX_ADC2_Init+0x130>)
 80026f0:	2201      	movs	r2, #1
 80026f2:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 3;
 80026f4:	4b37      	ldr	r3, [pc, #220]	; (80027d4 <MX_ADC2_Init+0x130>)
 80026f6:	2203      	movs	r2, #3
 80026f8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80026fa:	4b36      	ldr	r3, [pc, #216]	; (80027d4 <MX_ADC2_Init+0x130>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8002702:	4b34      	ldr	r3, [pc, #208]	; (80027d4 <MX_ADC2_Init+0x130>)
 8002704:	2200      	movs	r2, #0
 8002706:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002708:	4b32      	ldr	r3, [pc, #200]	; (80027d4 <MX_ADC2_Init+0x130>)
 800270a:	2200      	movs	r2, #0
 800270c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800270e:	4b31      	ldr	r3, [pc, #196]	; (80027d4 <MX_ADC2_Init+0x130>)
 8002710:	2200      	movs	r2, #0
 8002712:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8002714:	4b2f      	ldr	r3, [pc, #188]	; (80027d4 <MX_ADC2_Init+0x130>)
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800271c:	482d      	ldr	r0, [pc, #180]	; (80027d4 <MX_ADC2_Init+0x130>)
 800271e:	f002 f931 	bl	8004984 <HAL_ADC_Init>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8002728:	f000 fe18 	bl	800335c <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 800272c:	4b2b      	ldr	r3, [pc, #172]	; (80027dc <MX_ADC2_Init+0x138>)
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8002730:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8002734:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.Channel = ADC_CHANNEL_3;
 8002736:	4b2a      	ldr	r3, [pc, #168]	; (80027e0 <MX_ADC2_Init+0x13c>)
 8002738:	62fb      	str	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.ITMode = DISABLE;
 800273a:	2300      	movs	r3, #0
 800273c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.HighThreshold = 0;
 8002740:	2300      	movs	r3, #0
 8002742:	637b      	str	r3, [r7, #52]	; 0x34
  AnalogWDGConfig.LowThreshold = 0;
 8002744:	2300      	movs	r3, #0
 8002746:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 8002748:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800274c:	4619      	mov	r1, r3
 800274e:	4821      	ldr	r0, [pc, #132]	; (80027d4 <MX_ADC2_Init+0x130>)
 8002750:	f003 fb76 	bl	8005e40 <HAL_ADC_AnalogWDGConfig>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 800275a:	f000 fdff 	bl	800335c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800275e:	4b20      	ldr	r3, [pc, #128]	; (80027e0 <MX_ADC2_Init+0x13c>)
 8002760:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002762:	2306      	movs	r3, #6
 8002764:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8002766:	2302      	movs	r3, #2
 8002768:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800276a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800276e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002770:	2304      	movs	r3, #4
 8002772:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8002778:	2300      	movs	r3, #0
 800277a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800277e:	463b      	mov	r3, r7
 8002780:	4619      	mov	r1, r3
 8002782:	4814      	ldr	r0, [pc, #80]	; (80027d4 <MX_ADC2_Init+0x130>)
 8002784:	f002 fe30 	bl	80053e8 <HAL_ADC_ConfigChannel>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 800278e:	f000 fde5 	bl	800335c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8002792:	4b14      	ldr	r3, [pc, #80]	; (80027e4 <MX_ADC2_Init+0x140>)
 8002794:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002796:	230c      	movs	r3, #12
 8002798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800279a:	463b      	mov	r3, r7
 800279c:	4619      	mov	r1, r3
 800279e:	480d      	ldr	r0, [pc, #52]	; (80027d4 <MX_ADC2_Init+0x130>)
 80027a0:	f002 fe22 	bl	80053e8 <HAL_ADC_ConfigChannel>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_ADC2_Init+0x10a>
  {
    Error_Handler();
 80027aa:	f000 fdd7 	bl	800335c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80027ae:	4b0e      	ldr	r3, [pc, #56]	; (80027e8 <MX_ADC2_Init+0x144>)
 80027b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80027b2:	2312      	movs	r3, #18
 80027b4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80027b6:	463b      	mov	r3, r7
 80027b8:	4619      	mov	r1, r3
 80027ba:	4806      	ldr	r0, [pc, #24]	; (80027d4 <MX_ADC2_Init+0x130>)
 80027bc:	f002 fe14 	bl	80053e8 <HAL_ADC_ConfigChannel>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <MX_ADC2_Init+0x126>
  {
    Error_Handler();
 80027c6:	f000 fdc9 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80027ca:	bf00      	nop
 80027cc:	3740      	adds	r7, #64	; 0x40
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	24000974 	.word	0x24000974
 80027d8:	40022100 	.word	0x40022100
 80027dc:	7dc00000 	.word	0x7dc00000
 80027e0:	0c900008 	.word	0x0c900008
 80027e4:	4fb80000 	.word	0x4fb80000
 80027e8:	14f00020 	.word	0x14f00020

080027ec <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08a      	sub	sp, #40	; 0x28
 80027f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80027f2:	1d3b      	adds	r3, r7, #4
 80027f4:	2224      	movs	r2, #36	; 0x24
 80027f6:	2100      	movs	r1, #0
 80027f8:	4618      	mov	r0, r3
 80027fa:	f00e f9f3 	bl	8010be4 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80027fe:	4b78      	ldr	r3, [pc, #480]	; (80029e0 <MX_ADC3_Init+0x1f4>)
 8002800:	4a78      	ldr	r2, [pc, #480]	; (80029e4 <MX_ADC3_Init+0x1f8>)
 8002802:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002804:	4b76      	ldr	r3, [pc, #472]	; (80029e0 <MX_ADC3_Init+0x1f4>)
 8002806:	2200      	movs	r2, #0
 8002808:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800280a:	4b75      	ldr	r3, [pc, #468]	; (80029e0 <MX_ADC3_Init+0x1f4>)
 800280c:	2208      	movs	r2, #8
 800280e:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8002810:	4b73      	ldr	r3, [pc, #460]	; (80029e0 <MX_ADC3_Init+0x1f4>)
 8002812:	2200      	movs	r2, #0
 8002814:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002816:	4b72      	ldr	r3, [pc, #456]	; (80029e0 <MX_ADC3_Init+0x1f4>)
 8002818:	2201      	movs	r2, #1
 800281a:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800281c:	4b70      	ldr	r3, [pc, #448]	; (80029e0 <MX_ADC3_Init+0x1f4>)
 800281e:	2208      	movs	r2, #8
 8002820:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002822:	4b6f      	ldr	r3, [pc, #444]	; (80029e0 <MX_ADC3_Init+0x1f4>)
 8002824:	2200      	movs	r2, #0
 8002826:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002828:	4b6d      	ldr	r3, [pc, #436]	; (80029e0 <MX_ADC3_Init+0x1f4>)
 800282a:	2200      	movs	r2, #0
 800282c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 11;
 800282e:	4b6c      	ldr	r3, [pc, #432]	; (80029e0 <MX_ADC3_Init+0x1f4>)
 8002830:	220b      	movs	r2, #11
 8002832:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002834:	4b6a      	ldr	r3, [pc, #424]	; (80029e0 <MX_ADC3_Init+0x1f4>)
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800283c:	4b68      	ldr	r3, [pc, #416]	; (80029e0 <MX_ADC3_Init+0x1f4>)
 800283e:	2200      	movs	r2, #0
 8002840:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002842:	4b67      	ldr	r3, [pc, #412]	; (80029e0 <MX_ADC3_Init+0x1f4>)
 8002844:	2200      	movs	r2, #0
 8002846:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8002848:	4b65      	ldr	r3, [pc, #404]	; (80029e0 <MX_ADC3_Init+0x1f4>)
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8002850:	4b63      	ldr	r3, [pc, #396]	; (80029e0 <MX_ADC3_Init+0x1f4>)
 8002852:	2200      	movs	r2, #0
 8002854:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 8002856:	4b62      	ldr	r3, [pc, #392]	; (80029e0 <MX_ADC3_Init+0x1f4>)
 8002858:	2201      	movs	r2, #1
 800285a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800285c:	4b60      	ldr	r3, [pc, #384]	; (80029e0 <MX_ADC3_Init+0x1f4>)
 800285e:	2200      	movs	r2, #0
 8002860:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002862:	4b5f      	ldr	r3, [pc, #380]	; (80029e0 <MX_ADC3_Init+0x1f4>)
 8002864:	2200      	movs	r2, #0
 8002866:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8002868:	4b5d      	ldr	r3, [pc, #372]	; (80029e0 <MX_ADC3_Init+0x1f4>)
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002870:	485b      	ldr	r0, [pc, #364]	; (80029e0 <MX_ADC3_Init+0x1f4>)
 8002872:	f002 f887 	bl	8004984 <HAL_ADC_Init>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 800287c:	f000 fd6e 	bl	800335c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002880:	2301      	movs	r3, #1
 8002882:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002884:	2306      	movs	r3, #6
 8002886:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_6CYCLES_5;
 8002888:	2301      	movs	r3, #1
 800288a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800288c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002890:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002892:	2304      	movs	r3, #4
 8002894:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002896:	2300      	movs	r3, #0
 8002898:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 800289a:	2300      	movs	r3, #0
 800289c:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800289e:	1d3b      	adds	r3, r7, #4
 80028a0:	4619      	mov	r1, r3
 80028a2:	484f      	ldr	r0, [pc, #316]	; (80029e0 <MX_ADC3_Init+0x1f4>)
 80028a4:	f002 fda0 	bl	80053e8 <HAL_ADC_ConfigChannel>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <MX_ADC3_Init+0xc6>
  {
    Error_Handler();
 80028ae:	f000 fd55 	bl	800335c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80028b2:	4b4d      	ldr	r3, [pc, #308]	; (80029e8 <MX_ADC3_Init+0x1fc>)
 80028b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80028b6:	230c      	movs	r3, #12
 80028b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80028ba:	1d3b      	adds	r3, r7, #4
 80028bc:	4619      	mov	r1, r3
 80028be:	4848      	ldr	r0, [pc, #288]	; (80029e0 <MX_ADC3_Init+0x1f4>)
 80028c0:	f002 fd92 	bl	80053e8 <HAL_ADC_ConfigChannel>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <MX_ADC3_Init+0xe2>
  {
    Error_Handler();
 80028ca:	f000 fd47 	bl	800335c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80028ce:	4b47      	ldr	r3, [pc, #284]	; (80029ec <MX_ADC3_Init+0x200>)
 80028d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80028d2:	2312      	movs	r3, #18
 80028d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80028d6:	1d3b      	adds	r3, r7, #4
 80028d8:	4619      	mov	r1, r3
 80028da:	4841      	ldr	r0, [pc, #260]	; (80029e0 <MX_ADC3_Init+0x1f4>)
 80028dc:	f002 fd84 	bl	80053e8 <HAL_ADC_ConfigChannel>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <MX_ADC3_Init+0xfe>
  {
    Error_Handler();
 80028e6:	f000 fd39 	bl	800335c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80028ea:	4b41      	ldr	r3, [pc, #260]	; (80029f0 <MX_ADC3_Init+0x204>)
 80028ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80028ee:	2318      	movs	r3, #24
 80028f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80028f2:	1d3b      	adds	r3, r7, #4
 80028f4:	4619      	mov	r1, r3
 80028f6:	483a      	ldr	r0, [pc, #232]	; (80029e0 <MX_ADC3_Init+0x1f4>)
 80028f8:	f002 fd76 	bl	80053e8 <HAL_ADC_ConfigChannel>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <MX_ADC3_Init+0x11a>
  {
    Error_Handler();
 8002902:	f000 fd2b 	bl	800335c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002906:	4b3b      	ldr	r3, [pc, #236]	; (80029f4 <MX_ADC3_Init+0x208>)
 8002908:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800290a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800290e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002910:	1d3b      	adds	r3, r7, #4
 8002912:	4619      	mov	r1, r3
 8002914:	4832      	ldr	r0, [pc, #200]	; (80029e0 <MX_ADC3_Init+0x1f4>)
 8002916:	f002 fd67 	bl	80053e8 <HAL_ADC_ConfigChannel>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <MX_ADC3_Init+0x138>
  {
    Error_Handler();
 8002920:	f000 fd1c 	bl	800335c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002924:	4b34      	ldr	r3, [pc, #208]	; (80029f8 <MX_ADC3_Init+0x20c>)
 8002926:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002928:	f44f 7383 	mov.w	r3, #262	; 0x106
 800292c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800292e:	1d3b      	adds	r3, r7, #4
 8002930:	4619      	mov	r1, r3
 8002932:	482b      	ldr	r0, [pc, #172]	; (80029e0 <MX_ADC3_Init+0x1f4>)
 8002934:	f002 fd58 	bl	80053e8 <HAL_ADC_ConfigChannel>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <MX_ADC3_Init+0x156>
  {
    Error_Handler();
 800293e:	f000 fd0d 	bl	800335c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002942:	4b2e      	ldr	r3, [pc, #184]	; (80029fc <MX_ADC3_Init+0x210>)
 8002944:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8002946:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800294a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800294c:	1d3b      	adds	r3, r7, #4
 800294e:	4619      	mov	r1, r3
 8002950:	4823      	ldr	r0, [pc, #140]	; (80029e0 <MX_ADC3_Init+0x1f4>)
 8002952:	f002 fd49 	bl	80053e8 <HAL_ADC_ConfigChannel>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <MX_ADC3_Init+0x174>
  {
    Error_Handler();
 800295c:	f000 fcfe 	bl	800335c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002960:	4b27      	ldr	r3, [pc, #156]	; (8002a00 <MX_ADC3_Init+0x214>)
 8002962:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8002964:	f44f 7389 	mov.w	r3, #274	; 0x112
 8002968:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800296a:	1d3b      	adds	r3, r7, #4
 800296c:	4619      	mov	r1, r3
 800296e:	481c      	ldr	r0, [pc, #112]	; (80029e0 <MX_ADC3_Init+0x1f4>)
 8002970:	f002 fd3a 	bl	80053e8 <HAL_ADC_ConfigChannel>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <MX_ADC3_Init+0x192>
  {
    Error_Handler();
 800297a:	f000 fcef 	bl	800335c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800297e:	4b21      	ldr	r3, [pc, #132]	; (8002a04 <MX_ADC3_Init+0x218>)
 8002980:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8002982:	f44f 738c 	mov.w	r3, #280	; 0x118
 8002986:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002988:	1d3b      	adds	r3, r7, #4
 800298a:	4619      	mov	r1, r3
 800298c:	4814      	ldr	r0, [pc, #80]	; (80029e0 <MX_ADC3_Init+0x1f4>)
 800298e:	f002 fd2b 	bl	80053e8 <HAL_ADC_ConfigChannel>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <MX_ADC3_Init+0x1b0>
  {
    Error_Handler();
 8002998:	f000 fce0 	bl	800335c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800299c:	4b1a      	ldr	r3, [pc, #104]	; (8002a08 <MX_ADC3_Init+0x21c>)
 800299e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80029a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80029a6:	1d3b      	adds	r3, r7, #4
 80029a8:	4619      	mov	r1, r3
 80029aa:	480d      	ldr	r0, [pc, #52]	; (80029e0 <MX_ADC3_Init+0x1f4>)
 80029ac:	f002 fd1c 	bl	80053e8 <HAL_ADC_ConfigChannel>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <MX_ADC3_Init+0x1ce>
  {
    Error_Handler();
 80029b6:	f000 fcd1 	bl	800335c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80029ba:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <MX_ADC3_Init+0x220>)
 80029bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80029be:	f240 2306 	movw	r3, #518	; 0x206
 80029c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80029c4:	1d3b      	adds	r3, r7, #4
 80029c6:	4619      	mov	r1, r3
 80029c8:	4805      	ldr	r0, [pc, #20]	; (80029e0 <MX_ADC3_Init+0x1f4>)
 80029ca:	f002 fd0d 	bl	80053e8 <HAL_ADC_ConfigChannel>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_ADC3_Init+0x1ec>
  {
    Error_Handler();
 80029d4:	f000 fcc2 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80029d8:	bf00      	nop
 80029da:	3728      	adds	r7, #40	; 0x28
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	240009e4 	.word	0x240009e4
 80029e4:	58026000 	.word	0x58026000
 80029e8:	04300002 	.word	0x04300002
 80029ec:	08600004 	.word	0x08600004
 80029f0:	0c900008 	.word	0x0c900008
 80029f4:	10c00010 	.word	0x10c00010
 80029f8:	14f00020 	.word	0x14f00020
 80029fc:	19200040 	.word	0x19200040
 8002a00:	1d500080 	.word	0x1d500080
 8002a04:	21800100 	.word	0x21800100
 8002a08:	25b00200 	.word	0x25b00200
 8002a0c:	2a000400 	.word	0x2a000400

08002a10 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8002a14:	4b13      	ldr	r3, [pc, #76]	; (8002a64 <MX_COMP2_Init+0x54>)
 8002a16:	4a14      	ldr	r2, [pc, #80]	; (8002a68 <MX_COMP2_Init+0x58>)
 8002a18:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 8002a1a:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <MX_COMP2_Init+0x54>)
 8002a1c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002a20:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8002a22:	4b10      	ldr	r3, [pc, #64]	; (8002a64 <MX_COMP2_Init+0x54>)
 8002a24:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a28:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8002a2a:	4b0e      	ldr	r3, [pc, #56]	; (8002a64 <MX_COMP2_Init+0x54>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8002a30:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <MX_COMP2_Init+0x54>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8002a36:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <MX_COMP2_Init+0x54>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8002a3c:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <MX_COMP2_Init+0x54>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8002a42:	4b08      	ldr	r3, [pc, #32]	; (8002a64 <MX_COMP2_Init+0x54>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <MX_COMP2_Init+0x54>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8002a4e:	4805      	ldr	r0, [pc, #20]	; (8002a64 <MX_COMP2_Init+0x54>)
 8002a50:	f004 fa88 	bl	8006f64 <HAL_COMP_Init>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <MX_COMP2_Init+0x4e>
  {
    Error_Handler();
 8002a5a:	f000 fc7f 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8002a5e:	bf00      	nop
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	24000b44 	.word	0x24000b44
 8002a68:	58003810 	.word	0x58003810

08002a6c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002a70:	4b1e      	ldr	r3, [pc, #120]	; (8002aec <MX_ETH_Init+0x80>)
 8002a72:	4a1f      	ldr	r2, [pc, #124]	; (8002af0 <MX_ETH_Init+0x84>)
 8002a74:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8002a76:	4b1f      	ldr	r3, [pc, #124]	; (8002af4 <MX_ETH_Init+0x88>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8002a7c:	4b1d      	ldr	r3, [pc, #116]	; (8002af4 <MX_ETH_Init+0x88>)
 8002a7e:	2280      	movs	r2, #128	; 0x80
 8002a80:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8002a82:	4b1c      	ldr	r3, [pc, #112]	; (8002af4 <MX_ETH_Init+0x88>)
 8002a84:	22e1      	movs	r2, #225	; 0xe1
 8002a86:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002a88:	4b1a      	ldr	r3, [pc, #104]	; (8002af4 <MX_ETH_Init+0x88>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8002a8e:	4b19      	ldr	r3, [pc, #100]	; (8002af4 <MX_ETH_Init+0x88>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8002a94:	4b17      	ldr	r3, [pc, #92]	; (8002af4 <MX_ETH_Init+0x88>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8002a9a:	4b14      	ldr	r3, [pc, #80]	; (8002aec <MX_ETH_Init+0x80>)
 8002a9c:	4a15      	ldr	r2, [pc, #84]	; (8002af4 <MX_ETH_Init+0x88>)
 8002a9e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002aa0:	4b12      	ldr	r3, [pc, #72]	; (8002aec <MX_ETH_Init+0x80>)
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002aa6:	4b11      	ldr	r3, [pc, #68]	; (8002aec <MX_ETH_Init+0x80>)
 8002aa8:	4a13      	ldr	r2, [pc, #76]	; (8002af8 <MX_ETH_Init+0x8c>)
 8002aaa:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8002aac:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <MX_ETH_Init+0x80>)
 8002aae:	4a13      	ldr	r2, [pc, #76]	; (8002afc <MX_ETH_Init+0x90>)
 8002ab0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8002ab2:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <MX_ETH_Init+0x80>)
 8002ab4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002ab8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002aba:	480c      	ldr	r0, [pc, #48]	; (8002aec <MX_ETH_Init+0x80>)
 8002abc:	f006 fd60 	bl	8009580 <HAL_ETH_Init>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8002ac6:	f000 fc49 	bl	800335c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002aca:	2238      	movs	r2, #56	; 0x38
 8002acc:	2100      	movs	r1, #0
 8002ace:	480c      	ldr	r0, [pc, #48]	; (8002b00 <MX_ETH_Init+0x94>)
 8002ad0:	f00e f888 	bl	8010be4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002ad4:	4b0a      	ldr	r3, [pc, #40]	; (8002b00 <MX_ETH_Init+0x94>)
 8002ad6:	2221      	movs	r2, #33	; 0x21
 8002ad8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002ada:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <MX_ETH_Init+0x94>)
 8002adc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002ae0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002ae2:	4b07      	ldr	r3, [pc, #28]	; (8002b00 <MX_ETH_Init+0x94>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8002ae8:	bf00      	nop
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	24000b70 	.word	0x24000b70
 8002af0:	40028000 	.word	0x40028000
 8002af4:	24000ec4 	.word	0x24000ec4
 8002af8:	240000f8 	.word	0x240000f8
 8002afc:	24000098 	.word	0x24000098
 8002b00:	240008cc 	.word	0x240008cc

08002b04 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002b08:	4b22      	ldr	r3, [pc, #136]	; (8002b94 <MX_LPUART1_UART_Init+0x90>)
 8002b0a:	4a23      	ldr	r2, [pc, #140]	; (8002b98 <MX_LPUART1_UART_Init+0x94>)
 8002b0c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8002b0e:	4b21      	ldr	r3, [pc, #132]	; (8002b94 <MX_LPUART1_UART_Init+0x90>)
 8002b10:	4a22      	ldr	r2, [pc, #136]	; (8002b9c <MX_LPUART1_UART_Init+0x98>)
 8002b12:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b14:	4b1f      	ldr	r3, [pc, #124]	; (8002b94 <MX_LPUART1_UART_Init+0x90>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002b1a:	4b1e      	ldr	r3, [pc, #120]	; (8002b94 <MX_LPUART1_UART_Init+0x90>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002b20:	4b1c      	ldr	r3, [pc, #112]	; (8002b94 <MX_LPUART1_UART_Init+0x90>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002b26:	4b1b      	ldr	r3, [pc, #108]	; (8002b94 <MX_LPUART1_UART_Init+0x90>)
 8002b28:	220c      	movs	r2, #12
 8002b2a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b2c:	4b19      	ldr	r3, [pc, #100]	; (8002b94 <MX_LPUART1_UART_Init+0x90>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b32:	4b18      	ldr	r3, [pc, #96]	; (8002b94 <MX_LPUART1_UART_Init+0x90>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b38:	4b16      	ldr	r3, [pc, #88]	; (8002b94 <MX_LPUART1_UART_Init+0x90>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b3e:	4b15      	ldr	r3, [pc, #84]	; (8002b94 <MX_LPUART1_UART_Init+0x90>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002b44:	4b13      	ldr	r3, [pc, #76]	; (8002b94 <MX_LPUART1_UART_Init+0x90>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002b4a:	4812      	ldr	r0, [pc, #72]	; (8002b94 <MX_LPUART1_UART_Init+0x90>)
 8002b4c:	f00c fc0d 	bl	800f36a <HAL_UART_Init>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8002b56:	f000 fc01 	bl	800335c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	480d      	ldr	r0, [pc, #52]	; (8002b94 <MX_LPUART1_UART_Init+0x90>)
 8002b5e:	f00d fe6a 	bl	8010836 <HAL_UARTEx_SetTxFifoThreshold>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8002b68:	f000 fbf8 	bl	800335c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	4809      	ldr	r0, [pc, #36]	; (8002b94 <MX_LPUART1_UART_Init+0x90>)
 8002b70:	f00d fe9f 	bl	80108b2 <HAL_UARTEx_SetRxFifoThreshold>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8002b7a:	f000 fbef 	bl	800335c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002b7e:	4805      	ldr	r0, [pc, #20]	; (8002b94 <MX_LPUART1_UART_Init+0x90>)
 8002b80:	f00d fe20 	bl	80107c4 <HAL_UARTEx_DisableFifoMode>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8002b8a:	f000 fbe7 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	24000c20 	.word	0x24000c20
 8002b98:	58000c00 	.word	0x58000c00
 8002b9c:	00033324 	.word	0x00033324

08002ba0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002ba4:	4b22      	ldr	r3, [pc, #136]	; (8002c30 <MX_USART3_UART_Init+0x90>)
 8002ba6:	4a23      	ldr	r2, [pc, #140]	; (8002c34 <MX_USART3_UART_Init+0x94>)
 8002ba8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002baa:	4b21      	ldr	r3, [pc, #132]	; (8002c30 <MX_USART3_UART_Init+0x90>)
 8002bac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bb0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002bb2:	4b1f      	ldr	r3, [pc, #124]	; (8002c30 <MX_USART3_UART_Init+0x90>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002bb8:	4b1d      	ldr	r3, [pc, #116]	; (8002c30 <MX_USART3_UART_Init+0x90>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002bbe:	4b1c      	ldr	r3, [pc, #112]	; (8002c30 <MX_USART3_UART_Init+0x90>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002bc4:	4b1a      	ldr	r3, [pc, #104]	; (8002c30 <MX_USART3_UART_Init+0x90>)
 8002bc6:	220c      	movs	r2, #12
 8002bc8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bca:	4b19      	ldr	r3, [pc, #100]	; (8002c30 <MX_USART3_UART_Init+0x90>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bd0:	4b17      	ldr	r3, [pc, #92]	; (8002c30 <MX_USART3_UART_Init+0x90>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bd6:	4b16      	ldr	r3, [pc, #88]	; (8002c30 <MX_USART3_UART_Init+0x90>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002bdc:	4b14      	ldr	r3, [pc, #80]	; (8002c30 <MX_USART3_UART_Init+0x90>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002be2:	4b13      	ldr	r3, [pc, #76]	; (8002c30 <MX_USART3_UART_Init+0x90>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002be8:	4811      	ldr	r0, [pc, #68]	; (8002c30 <MX_USART3_UART_Init+0x90>)
 8002bea:	f00c fbbe 	bl	800f36a <HAL_UART_Init>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002bf4:	f000 fbb2 	bl	800335c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	480d      	ldr	r0, [pc, #52]	; (8002c30 <MX_USART3_UART_Init+0x90>)
 8002bfc:	f00d fe1b 	bl	8010836 <HAL_UARTEx_SetTxFifoThreshold>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002c06:	f000 fba9 	bl	800335c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	4808      	ldr	r0, [pc, #32]	; (8002c30 <MX_USART3_UART_Init+0x90>)
 8002c0e:	f00d fe50 	bl	80108b2 <HAL_UARTEx_SetRxFifoThreshold>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002c18:	f000 fba0 	bl	800335c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002c1c:	4804      	ldr	r0, [pc, #16]	; (8002c30 <MX_USART3_UART_Init+0x90>)
 8002c1e:	f00d fdd1 	bl	80107c4 <HAL_UARTEx_DisableFifoMode>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002c28:	f000 fb98 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c2c:	bf00      	nop
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	24000cb4 	.word	0x24000cb4
 8002c34:	40004800 	.word	0x40004800

08002c38 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b098      	sub	sp, #96	; 0x60
 8002c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c3e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	605a      	str	r2, [r3, #4]
 8002c48:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c4a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	605a      	str	r2, [r3, #4]
 8002c54:	609a      	str	r2, [r3, #8]
 8002c56:	60da      	str	r2, [r3, #12]
 8002c58:	611a      	str	r2, [r3, #16]
 8002c5a:	615a      	str	r2, [r3, #20]
 8002c5c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c5e:	1d3b      	adds	r3, r7, #4
 8002c60:	2234      	movs	r2, #52	; 0x34
 8002c62:	2100      	movs	r1, #0
 8002c64:	4618      	mov	r0, r3
 8002c66:	f00d ffbd 	bl	8010be4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002c6a:	4b3a      	ldr	r3, [pc, #232]	; (8002d54 <MX_TIM1_Init+0x11c>)
 8002c6c:	4a3a      	ldr	r2, [pc, #232]	; (8002d58 <MX_TIM1_Init+0x120>)
 8002c6e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002c70:	4b38      	ldr	r3, [pc, #224]	; (8002d54 <MX_TIM1_Init+0x11c>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c76:	4b37      	ldr	r3, [pc, #220]	; (8002d54 <MX_TIM1_Init+0x11c>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3240;
 8002c7c:	4b35      	ldr	r3, [pc, #212]	; (8002d54 <MX_TIM1_Init+0x11c>)
 8002c7e:	f640 42a8 	movw	r2, #3240	; 0xca8
 8002c82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c84:	4b33      	ldr	r3, [pc, #204]	; (8002d54 <MX_TIM1_Init+0x11c>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002c8a:	4b32      	ldr	r3, [pc, #200]	; (8002d54 <MX_TIM1_Init+0x11c>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c90:	4b30      	ldr	r3, [pc, #192]	; (8002d54 <MX_TIM1_Init+0x11c>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002c96:	482f      	ldr	r0, [pc, #188]	; (8002d54 <MX_TIM1_Init+0x11c>)
 8002c98:	f00a ffee 	bl	800dc78 <HAL_TIM_PWM_Init>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002ca2:	f000 fb5b 	bl	800335c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002caa:	2300      	movs	r3, #0
 8002cac:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002cb2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4826      	ldr	r0, [pc, #152]	; (8002d54 <MX_TIM1_Init+0x11c>)
 8002cba:	f00c f9f5 	bl	800f0a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002cc4:	f000 fb4a 	bl	800335c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cc8:	2360      	movs	r3, #96	; 0x60
 8002cca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 1620;
 8002ccc:	f240 6354 	movw	r3, #1620	; 0x654
 8002cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8002cd6:	2308      	movs	r3, #8
 8002cd8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8002cde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8002ce4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ce8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002cee:	2200      	movs	r2, #0
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4818      	ldr	r0, [pc, #96]	; (8002d54 <MX_TIM1_Init+0x11c>)
 8002cf4:	f00b fabe 	bl	800e274 <HAL_TIM_PWM_ConfigChannel>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002cfe:	f000 fb2d 	bl	800335c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d02:	2300      	movs	r3, #0
 8002d04:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d06:	2300      	movs	r3, #0
 8002d08:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0xFF;
 8002d0e:	23ff      	movs	r3, #255	; 0xff
 8002d10:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d1a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002d20:	2300      	movs	r3, #0
 8002d22:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002d24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d28:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002d32:	1d3b      	adds	r3, r7, #4
 8002d34:	4619      	mov	r1, r3
 8002d36:	4807      	ldr	r0, [pc, #28]	; (8002d54 <MX_TIM1_Init+0x11c>)
 8002d38:	f00c fa52 	bl	800f1e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8002d42:	f000 fb0b 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002d46:	4803      	ldr	r0, [pc, #12]	; (8002d54 <MX_TIM1_Init+0x11c>)
 8002d48:	f000 ff56 	bl	8003bf8 <HAL_TIM_MspPostInit>

}
 8002d4c:	bf00      	nop
 8002d4e:	3760      	adds	r7, #96	; 0x60
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	24000d48 	.word	0x24000d48
 8002d58:	40010000 	.word	0x40010000

08002d5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08a      	sub	sp, #40	; 0x28
 8002d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d62:	f107 031c 	add.w	r3, r7, #28
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	605a      	str	r2, [r3, #4]
 8002d6c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d6e:	463b      	mov	r3, r7
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	605a      	str	r2, [r3, #4]
 8002d76:	609a      	str	r2, [r3, #8]
 8002d78:	60da      	str	r2, [r3, #12]
 8002d7a:	611a      	str	r2, [r3, #16]
 8002d7c:	615a      	str	r2, [r3, #20]
 8002d7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d80:	4b22      	ldr	r3, [pc, #136]	; (8002e0c <MX_TIM2_Init+0xb0>)
 8002d82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002d88:	4b20      	ldr	r3, [pc, #128]	; (8002e0c <MX_TIM2_Init+0xb0>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d8e:	4b1f      	ldr	r3, [pc, #124]	; (8002e0c <MX_TIM2_Init+0xb0>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002d94:	4b1d      	ldr	r3, [pc, #116]	; (8002e0c <MX_TIM2_Init+0xb0>)
 8002d96:	f04f 32ff 	mov.w	r2, #4294967295
 8002d9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d9c:	4b1b      	ldr	r3, [pc, #108]	; (8002e0c <MX_TIM2_Init+0xb0>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002da2:	4b1a      	ldr	r3, [pc, #104]	; (8002e0c <MX_TIM2_Init+0xb0>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002da8:	4818      	ldr	r0, [pc, #96]	; (8002e0c <MX_TIM2_Init+0xb0>)
 8002daa:	f00a ff65 	bl	800dc78 <HAL_TIM_PWM_Init>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002db4:	f000 fad2 	bl	800335c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002db8:	2300      	movs	r3, #0
 8002dba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002dc0:	f107 031c 	add.w	r3, r7, #28
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4811      	ldr	r0, [pc, #68]	; (8002e0c <MX_TIM2_Init+0xb0>)
 8002dc8:	f00c f96e 	bl	800f0a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002dd2:	f000 fac3 	bl	800335c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dd6:	2360      	movs	r3, #96	; 0x60
 8002dd8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dde:	2300      	movs	r3, #0
 8002de0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002de2:	2300      	movs	r3, #0
 8002de4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002de6:	463b      	mov	r3, r7
 8002de8:	2200      	movs	r2, #0
 8002dea:	4619      	mov	r1, r3
 8002dec:	4807      	ldr	r0, [pc, #28]	; (8002e0c <MX_TIM2_Init+0xb0>)
 8002dee:	f00b fa41 	bl	800e274 <HAL_TIM_PWM_ConfigChannel>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002df8:	f000 fab0 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002dfc:	4803      	ldr	r0, [pc, #12]	; (8002e0c <MX_TIM2_Init+0xb0>)
 8002dfe:	f000 fefb 	bl	8003bf8 <HAL_TIM_MspPostInit>

}
 8002e02:	bf00      	nop
 8002e04:	3728      	adds	r7, #40	; 0x28
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	24000d94 	.word	0x24000d94

08002e10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b088      	sub	sp, #32
 8002e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e16:	f107 0314 	add.w	r3, r7, #20
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	605a      	str	r2, [r3, #4]
 8002e20:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002e22:	1d3b      	adds	r3, r7, #4
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	605a      	str	r2, [r3, #4]
 8002e2a:	609a      	str	r2, [r3, #8]
 8002e2c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e2e:	4b20      	ldr	r3, [pc, #128]	; (8002eb0 <MX_TIM3_Init+0xa0>)
 8002e30:	4a20      	ldr	r2, [pc, #128]	; (8002eb4 <MX_TIM3_Init+0xa4>)
 8002e32:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002e34:	4b1e      	ldr	r3, [pc, #120]	; (8002eb0 <MX_TIM3_Init+0xa0>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e3a:	4b1d      	ldr	r3, [pc, #116]	; (8002eb0 <MX_TIM3_Init+0xa0>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002e40:	4b1b      	ldr	r3, [pc, #108]	; (8002eb0 <MX_TIM3_Init+0xa0>)
 8002e42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e46:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e48:	4b19      	ldr	r3, [pc, #100]	; (8002eb0 <MX_TIM3_Init+0xa0>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e4e:	4b18      	ldr	r3, [pc, #96]	; (8002eb0 <MX_TIM3_Init+0xa0>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002e54:	4816      	ldr	r0, [pc, #88]	; (8002eb0 <MX_TIM3_Init+0xa0>)
 8002e56:	f00b f919 	bl	800e08c <HAL_TIM_IC_Init>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002e60:	f000 fa7c 	bl	800335c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e64:	2300      	movs	r3, #0
 8002e66:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e6c:	f107 0314 	add.w	r3, r7, #20
 8002e70:	4619      	mov	r1, r3
 8002e72:	480f      	ldr	r0, [pc, #60]	; (8002eb0 <MX_TIM3_Init+0xa0>)
 8002e74:	f00c f918 	bl	800f0a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002e7e:	f000 fa6d 	bl	800335c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002e82:	2300      	movs	r3, #0
 8002e84:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002e86:	2301      	movs	r3, #1
 8002e88:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002e92:	1d3b      	adds	r3, r7, #4
 8002e94:	2200      	movs	r2, #0
 8002e96:	4619      	mov	r1, r3
 8002e98:	4805      	ldr	r0, [pc, #20]	; (8002eb0 <MX_TIM3_Init+0xa0>)
 8002e9a:	f00b f94e 	bl	800e13a <HAL_TIM_IC_ConfigChannel>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002ea4:	f000 fa5a 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002ea8:	bf00      	nop
 8002eaa:	3720      	adds	r7, #32
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	24000de0 	.word	0x24000de0
 8002eb4:	40000400 	.word	0x40000400

08002eb8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b08a      	sub	sp, #40	; 0x28
 8002ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ebe:	f107 031c 	add.w	r3, r7, #28
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	605a      	str	r2, [r3, #4]
 8002ec8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002eca:	463b      	mov	r3, r7
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
 8002ed2:	609a      	str	r2, [r3, #8]
 8002ed4:	60da      	str	r2, [r3, #12]
 8002ed6:	611a      	str	r2, [r3, #16]
 8002ed8:	615a      	str	r2, [r3, #20]
 8002eda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002edc:	4b21      	ldr	r3, [pc, #132]	; (8002f64 <MX_TIM4_Init+0xac>)
 8002ede:	4a22      	ldr	r2, [pc, #136]	; (8002f68 <MX_TIM4_Init+0xb0>)
 8002ee0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002ee2:	4b20      	ldr	r3, [pc, #128]	; (8002f64 <MX_TIM4_Init+0xac>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ee8:	4b1e      	ldr	r3, [pc, #120]	; (8002f64 <MX_TIM4_Init+0xac>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002eee:	4b1d      	ldr	r3, [pc, #116]	; (8002f64 <MX_TIM4_Init+0xac>)
 8002ef0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ef4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ef6:	4b1b      	ldr	r3, [pc, #108]	; (8002f64 <MX_TIM4_Init+0xac>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002efc:	4b19      	ldr	r3, [pc, #100]	; (8002f64 <MX_TIM4_Init+0xac>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002f02:	4818      	ldr	r0, [pc, #96]	; (8002f64 <MX_TIM4_Init+0xac>)
 8002f04:	f00a feb8 	bl	800dc78 <HAL_TIM_PWM_Init>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002f0e:	f000 fa25 	bl	800335c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f12:	2300      	movs	r3, #0
 8002f14:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f16:	2300      	movs	r3, #0
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f1a:	f107 031c 	add.w	r3, r7, #28
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4810      	ldr	r0, [pc, #64]	; (8002f64 <MX_TIM4_Init+0xac>)
 8002f22:	f00c f8c1 	bl	800f0a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002f2c:	f000 fa16 	bl	800335c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f30:	2360      	movs	r3, #96	; 0x60
 8002f32:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002f34:	2300      	movs	r3, #0
 8002f36:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f40:	463b      	mov	r3, r7
 8002f42:	2200      	movs	r2, #0
 8002f44:	4619      	mov	r1, r3
 8002f46:	4807      	ldr	r0, [pc, #28]	; (8002f64 <MX_TIM4_Init+0xac>)
 8002f48:	f00b f994 	bl	800e274 <HAL_TIM_PWM_ConfigChannel>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002f52:	f000 fa03 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002f56:	4803      	ldr	r0, [pc, #12]	; (8002f64 <MX_TIM4_Init+0xac>)
 8002f58:	f000 fe4e 	bl	8003bf8 <HAL_TIM_MspPostInit>

}
 8002f5c:	bf00      	nop
 8002f5e:	3728      	adds	r7, #40	; 0x28
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	24000e2c 	.word	0x24000e2c
 8002f68:	40000800 	.word	0x40000800

08002f6c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b088      	sub	sp, #32
 8002f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f72:	f107 0314 	add.w	r3, r7, #20
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	605a      	str	r2, [r3, #4]
 8002f7c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002f7e:	1d3b      	adds	r3, r7, #4
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	605a      	str	r2, [r3, #4]
 8002f86:	609a      	str	r2, [r3, #8]
 8002f88:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002f8a:	4b22      	ldr	r3, [pc, #136]	; (8003014 <MX_TIM15_Init+0xa8>)
 8002f8c:	4a22      	ldr	r2, [pc, #136]	; (8003018 <MX_TIM15_Init+0xac>)
 8002f8e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8002f90:	4b20      	ldr	r3, [pc, #128]	; (8003014 <MX_TIM15_Init+0xa8>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f96:	4b1f      	ldr	r3, [pc, #124]	; (8003014 <MX_TIM15_Init+0xa8>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002f9c:	4b1d      	ldr	r3, [pc, #116]	; (8003014 <MX_TIM15_Init+0xa8>)
 8002f9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fa2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fa4:	4b1b      	ldr	r3, [pc, #108]	; (8003014 <MX_TIM15_Init+0xa8>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002faa:	4b1a      	ldr	r3, [pc, #104]	; (8003014 <MX_TIM15_Init+0xa8>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fb0:	4b18      	ldr	r3, [pc, #96]	; (8003014 <MX_TIM15_Init+0xa8>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8002fb6:	4817      	ldr	r0, [pc, #92]	; (8003014 <MX_TIM15_Init+0xa8>)
 8002fb8:	f00b f868 	bl	800e08c <HAL_TIM_IC_Init>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8002fc2:	f000 f9cb 	bl	800335c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002fce:	f107 0314 	add.w	r3, r7, #20
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	480f      	ldr	r0, [pc, #60]	; (8003014 <MX_TIM15_Init+0xa8>)
 8002fd6:	f00c f867 	bl	800f0a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8002fe0:	f000 f9bc 	bl	800335c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002fec:	2300      	movs	r3, #0
 8002fee:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002ff4:	1d3b      	adds	r3, r7, #4
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4806      	ldr	r0, [pc, #24]	; (8003014 <MX_TIM15_Init+0xa8>)
 8002ffc:	f00b f89d 	bl	800e13a <HAL_TIM_IC_ConfigChannel>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <MX_TIM15_Init+0x9e>
  {
    Error_Handler();
 8003006:	f000 f9a9 	bl	800335c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800300a:	bf00      	nop
 800300c:	3720      	adds	r7, #32
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	24000e78 	.word	0x24000e78
 8003018:	40014000 	.word	0x40014000

0800301c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8003020:	bf00      	nop
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
	...

0800302c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003032:	4b11      	ldr	r3, [pc, #68]	; (8003078 <MX_DMA_Init+0x4c>)
 8003034:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003038:	4a0f      	ldr	r2, [pc, #60]	; (8003078 <MX_DMA_Init+0x4c>)
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003042:	4b0d      	ldr	r3, [pc, #52]	; (8003078 <MX_DMA_Init+0x4c>)
 8003044:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	607b      	str	r3, [r7, #4]
 800304e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003050:	2200      	movs	r2, #0
 8003052:	2100      	movs	r1, #0
 8003054:	200c      	movs	r0, #12
 8003056:	f004 f98a 	bl	800736e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800305a:	200c      	movs	r0, #12
 800305c:	f004 f9a1 	bl	80073a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8003060:	2200      	movs	r2, #0
 8003062:	2100      	movs	r1, #0
 8003064:	200d      	movs	r0, #13
 8003066:	f004 f982 	bl	800736e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800306a:	200d      	movs	r0, #13
 800306c:	f004 f999 	bl	80073a2 <HAL_NVIC_EnableIRQ>

}
 8003070:	bf00      	nop
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	58024400 	.word	0x58024400

0800307c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b08e      	sub	sp, #56	; 0x38
 8003080:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	605a      	str	r2, [r3, #4]
 800308c:	609a      	str	r2, [r3, #8]
 800308e:	60da      	str	r2, [r3, #12]
 8003090:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003092:	4bab      	ldr	r3, [pc, #684]	; (8003340 <MX_GPIO_Init+0x2c4>)
 8003094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003098:	4aa9      	ldr	r2, [pc, #676]	; (8003340 <MX_GPIO_Init+0x2c4>)
 800309a:	f043 0310 	orr.w	r3, r3, #16
 800309e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030a2:	4ba7      	ldr	r3, [pc, #668]	; (8003340 <MX_GPIO_Init+0x2c4>)
 80030a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030a8:	f003 0310 	and.w	r3, r3, #16
 80030ac:	623b      	str	r3, [r7, #32]
 80030ae:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030b0:	4ba3      	ldr	r3, [pc, #652]	; (8003340 <MX_GPIO_Init+0x2c4>)
 80030b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030b6:	4aa2      	ldr	r2, [pc, #648]	; (8003340 <MX_GPIO_Init+0x2c4>)
 80030b8:	f043 0304 	orr.w	r3, r3, #4
 80030bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030c0:	4b9f      	ldr	r3, [pc, #636]	; (8003340 <MX_GPIO_Init+0x2c4>)
 80030c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030c6:	f003 0304 	and.w	r3, r3, #4
 80030ca:	61fb      	str	r3, [r7, #28]
 80030cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80030ce:	4b9c      	ldr	r3, [pc, #624]	; (8003340 <MX_GPIO_Init+0x2c4>)
 80030d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030d4:	4a9a      	ldr	r2, [pc, #616]	; (8003340 <MX_GPIO_Init+0x2c4>)
 80030d6:	f043 0320 	orr.w	r3, r3, #32
 80030da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030de:	4b98      	ldr	r3, [pc, #608]	; (8003340 <MX_GPIO_Init+0x2c4>)
 80030e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030e4:	f003 0320 	and.w	r3, r3, #32
 80030e8:	61bb      	str	r3, [r7, #24]
 80030ea:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030ec:	4b94      	ldr	r3, [pc, #592]	; (8003340 <MX_GPIO_Init+0x2c4>)
 80030ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030f2:	4a93      	ldr	r2, [pc, #588]	; (8003340 <MX_GPIO_Init+0x2c4>)
 80030f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030fc:	4b90      	ldr	r3, [pc, #576]	; (8003340 <MX_GPIO_Init+0x2c4>)
 80030fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003106:	617b      	str	r3, [r7, #20]
 8003108:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800310a:	4b8d      	ldr	r3, [pc, #564]	; (8003340 <MX_GPIO_Init+0x2c4>)
 800310c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003110:	4a8b      	ldr	r2, [pc, #556]	; (8003340 <MX_GPIO_Init+0x2c4>)
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800311a:	4b89      	ldr	r3, [pc, #548]	; (8003340 <MX_GPIO_Init+0x2c4>)
 800311c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	613b      	str	r3, [r7, #16]
 8003126:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003128:	4b85      	ldr	r3, [pc, #532]	; (8003340 <MX_GPIO_Init+0x2c4>)
 800312a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800312e:	4a84      	ldr	r2, [pc, #528]	; (8003340 <MX_GPIO_Init+0x2c4>)
 8003130:	f043 0302 	orr.w	r3, r3, #2
 8003134:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003138:	4b81      	ldr	r3, [pc, #516]	; (8003340 <MX_GPIO_Init+0x2c4>)
 800313a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003146:	4b7e      	ldr	r3, [pc, #504]	; (8003340 <MX_GPIO_Init+0x2c4>)
 8003148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800314c:	4a7c      	ldr	r2, [pc, #496]	; (8003340 <MX_GPIO_Init+0x2c4>)
 800314e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003152:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003156:	4b7a      	ldr	r3, [pc, #488]	; (8003340 <MX_GPIO_Init+0x2c4>)
 8003158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800315c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003160:	60bb      	str	r3, [r7, #8]
 8003162:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003164:	4b76      	ldr	r3, [pc, #472]	; (8003340 <MX_GPIO_Init+0x2c4>)
 8003166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800316a:	4a75      	ldr	r2, [pc, #468]	; (8003340 <MX_GPIO_Init+0x2c4>)
 800316c:	f043 0308 	orr.w	r3, r3, #8
 8003170:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003174:	4b72      	ldr	r3, [pc, #456]	; (8003340 <MX_GPIO_Init+0x2c4>)
 8003176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	607b      	str	r3, [r7, #4]
 8003180:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LINE_DRIVER1_ENABLE_Pin|LINE_DRIVER2_ENABLE_Pin, GPIO_PIN_SET);
 8003182:	2201      	movs	r2, #1
 8003184:	f640 0105 	movw	r1, #2053	; 0x805
 8003188:	486e      	ldr	r0, [pc, #440]	; (8003344 <MX_GPIO_Init+0x2c8>)
 800318a:	f007 f9bb 	bl	800a504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
 800318e:	2200      	movs	r2, #0
 8003190:	2102      	movs	r1, #2
 8003192:	486d      	ldr	r0, [pc, #436]	; (8003348 <MX_GPIO_Init+0x2cc>)
 8003194:	f007 f9b6 	bl	800a504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8003198:	2200      	movs	r2, #0
 800319a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800319e:	4869      	ldr	r0, [pc, #420]	; (8003344 <MX_GPIO_Init+0x2c8>)
 80031a0:	f007 f9b0 	bl	800a504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_3V3_SWITCH_GPIO_Port, OUT_3V3_SWITCH_Pin, GPIO_PIN_SET);
 80031a4:	2201      	movs	r2, #1
 80031a6:	2101      	movs	r1, #1
 80031a8:	4868      	ldr	r0, [pc, #416]	; (800334c <MX_GPIO_Init+0x2d0>)
 80031aa:	f007 f9ab 	bl	800a504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ACTIVE_GPIO_Port, LED_ACTIVE_Pin, GPIO_PIN_SET);
 80031ae:	2201      	movs	r2, #1
 80031b0:	2101      	movs	r1, #1
 80031b2:	4867      	ldr	r0, [pc, #412]	; (8003350 <MX_GPIO_Init+0x2d4>)
 80031b4:	f007 f9a6 	bl	800a504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80031b8:	2200      	movs	r2, #0
 80031ba:	2102      	movs	r1, #2
 80031bc:	4864      	ldr	r0, [pc, #400]	; (8003350 <MX_GPIO_Init+0x2d4>)
 80031be:	f007 f9a1 	bl	800a504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80031c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031c8:	2300      	movs	r3, #0
 80031ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031cc:	2300      	movs	r3, #0
 80031ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80031d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031d4:	4619      	mov	r1, r3
 80031d6:	485f      	ldr	r0, [pc, #380]	; (8003354 <MX_GPIO_Init+0x2d8>)
 80031d8:	f006 ffd4 	bl	800a184 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LINE_DRIVER1_ENABLE_Pin LINE_DRIVER2_ENABLE_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LINE_DRIVER1_ENABLE_Pin|LINE_DRIVER2_ENABLE_Pin|LED_RED_Pin;
 80031dc:	f644 0305 	movw	r3, #18437	; 0x4805
 80031e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031e2:	2301      	movs	r3, #1
 80031e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e6:	2300      	movs	r3, #0
 80031e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ea:	2300      	movs	r3, #0
 80031ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031f2:	4619      	mov	r1, r3
 80031f4:	4853      	ldr	r0, [pc, #332]	; (8003344 <MX_GPIO_Init+0x2c8>)
 80031f6:	f006 ffc5 	bl	800a184 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_500V_ENABLE_Pin */
  GPIO_InitStruct.Pin = OUT_500V_ENABLE_Pin;
 80031fa:	2301      	movs	r3, #1
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031fe:	2300      	movs	r3, #0
 8003200:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003202:	2300      	movs	r3, #0
 8003204:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OUT_500V_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800320a:	4619      	mov	r1, r3
 800320c:	484e      	ldr	r0, [pc, #312]	; (8003348 <MX_GPIO_Init+0x2cc>)
 800320e:	f006 ffb9 	bl	800a184 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_OUTPUT_Pin */
  GPIO_InitStruct.Pin = TEST_OUTPUT_Pin;
 8003212:	2302      	movs	r3, #2
 8003214:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003216:	2301      	movs	r3, #1
 8003218:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321a:	2300      	movs	r3, #0
 800321c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800321e:	2300      	movs	r3, #0
 8003220:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TEST_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 8003222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003226:	4619      	mov	r1, r3
 8003228:	4847      	ldr	r0, [pc, #284]	; (8003348 <MX_GPIO_Init+0x2cc>)
 800322a:	f006 ffab 	bl	800a184 <HAL_GPIO_Init>

  /*Configure GPIO pin : TURN_PLASMA_ON_Pin */
  GPIO_InitStruct.Pin = TURN_PLASMA_ON_Pin;
 800322e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003232:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003234:	2300      	movs	r3, #0
 8003236:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003238:	2300      	movs	r3, #0
 800323a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TURN_PLASMA_ON_GPIO_Port, &GPIO_InitStruct);
 800323c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003240:	4619      	mov	r1, r3
 8003242:	4843      	ldr	r0, [pc, #268]	; (8003350 <MX_GPIO_Init+0x2d4>)
 8003244:	f006 ff9e 	bl	800a184 <HAL_GPIO_Init>

  /*Configure GPIO pin : INP_COMP_IRQ_Pin */
  GPIO_InitStruct.Pin = INP_COMP_IRQ_Pin;
 8003248:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800324e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003252:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003254:	2300      	movs	r3, #0
 8003256:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INP_COMP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800325c:	4619      	mov	r1, r3
 800325e:	483c      	ldr	r0, [pc, #240]	; (8003350 <MX_GPIO_Init+0x2d4>)
 8003260:	f006 ff90 	bl	800a184 <HAL_GPIO_Init>

  /*Configure GPIO pin : POWER_OFF_IRQ_Pin */
  GPIO_InitStruct.Pin = POWER_OFF_IRQ_Pin;
 8003264:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003268:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800326a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800326e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003270:	2300      	movs	r3, #0
 8003272:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(POWER_OFF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003278:	4619      	mov	r1, r3
 800327a:	4835      	ldr	r0, [pc, #212]	; (8003350 <MX_GPIO_Init+0x2d4>)
 800327c:	f006 ff82 	bl	800a184 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8003280:	2380      	movs	r3, #128	; 0x80
 8003282:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003284:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003288:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328a:	2300      	movs	r3, #0
 800328c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800328e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003292:	4619      	mov	r1, r3
 8003294:	482c      	ldr	r0, [pc, #176]	; (8003348 <MX_GPIO_Init+0x2cc>)
 8003296:	f006 ff75 	bl	800a184 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800329a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800329e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032a0:	2300      	movs	r3, #0
 80032a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80032a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032ac:	4619      	mov	r1, r3
 80032ae:	482a      	ldr	r0, [pc, #168]	; (8003358 <MX_GPIO_Init+0x2dc>)
 80032b0:	f006 ff68 	bl	800a184 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80032b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ba:	2302      	movs	r3, #2
 80032bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032be:	2300      	movs	r3, #0
 80032c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c2:	2300      	movs	r3, #0
 80032c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80032c6:	230a      	movs	r3, #10
 80032c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80032ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032ce:	4619      	mov	r1, r3
 80032d0:	4821      	ldr	r0, [pc, #132]	; (8003358 <MX_GPIO_Init+0x2dc>)
 80032d2:	f006 ff57 	bl	800a184 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_3V3_SWITCH_Pin */
  GPIO_InitStruct.Pin = OUT_3V3_SWITCH_Pin;
 80032d6:	2301      	movs	r3, #1
 80032d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032da:	2301      	movs	r3, #1
 80032dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e2:	2300      	movs	r3, #0
 80032e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_3V3_SWITCH_GPIO_Port, &GPIO_InitStruct);
 80032e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032ea:	4619      	mov	r1, r3
 80032ec:	4817      	ldr	r0, [pc, #92]	; (800334c <MX_GPIO_Init+0x2d0>)
 80032ee:	f006 ff49 	bl	800a184 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_15V_ENABLE_Pin */
  GPIO_InitStruct.Pin = OUT_15V_ENABLE_Pin;
 80032f2:	2302      	movs	r3, #2
 80032f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032f6:	2300      	movs	r3, #0
 80032f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fa:	2300      	movs	r3, #0
 80032fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OUT_15V_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80032fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003302:	4619      	mov	r1, r3
 8003304:	4811      	ldr	r0, [pc, #68]	; (800334c <MX_GPIO_Init+0x2d0>)
 8003306:	f006 ff3d 	bl	800a184 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ACTIVE_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_ACTIVE_Pin|LED_YELLOW_Pin;
 800330a:	2303      	movs	r3, #3
 800330c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800330e:	2301      	movs	r3, #1
 8003310:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003312:	2300      	movs	r3, #0
 8003314:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003316:	2300      	movs	r3, #0
 8003318:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800331a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800331e:	4619      	mov	r1, r3
 8003320:	480b      	ldr	r0, [pc, #44]	; (8003350 <MX_GPIO_Init+0x2d4>)
 8003322:	f006 ff2f 	bl	800a184 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003326:	2200      	movs	r2, #0
 8003328:	2100      	movs	r1, #0
 800332a:	2028      	movs	r0, #40	; 0x28
 800332c:	f004 f81f 	bl	800736e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003330:	2028      	movs	r0, #40	; 0x28
 8003332:	f004 f836 	bl	80073a2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003336:	bf00      	nop
 8003338:	3738      	adds	r7, #56	; 0x38
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	58024400 	.word	0x58024400
 8003344:	58020400 	.word	0x58020400
 8003348:	58021800 	.word	0x58021800
 800334c:	58020c00 	.word	0x58020c00
 8003350:	58021000 	.word	0x58021000
 8003354:	58020800 	.word	0x58020800
 8003358:	58020000 	.word	0x58020000

0800335c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003360:	b672      	cpsid	i
}
 8003362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003364:	e7fe      	b.n	8003364 <Error_Handler+0x8>
	...

08003368 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800336e:	4b0a      	ldr	r3, [pc, #40]	; (8003398 <HAL_MspInit+0x30>)
 8003370:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003374:	4a08      	ldr	r2, [pc, #32]	; (8003398 <HAL_MspInit+0x30>)
 8003376:	f043 0302 	orr.w	r3, r3, #2
 800337a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800337e:	4b06      	ldr	r3, [pc, #24]	; (8003398 <HAL_MspInit+0x30>)
 8003380:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	607b      	str	r3, [r7, #4]
 800338a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	58024400 	.word	0x58024400

0800339c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b090      	sub	sp, #64	; 0x40
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	605a      	str	r2, [r3, #4]
 80033ae:	609a      	str	r2, [r3, #8]
 80033b0:	60da      	str	r2, [r3, #12]
 80033b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4aaa      	ldr	r2, [pc, #680]	; (8003664 <HAL_ADC_MspInit+0x2c8>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d16b      	bne.n	8003496 <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80033be:	4baa      	ldr	r3, [pc, #680]	; (8003668 <HAL_ADC_MspInit+0x2cc>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	3301      	adds	r3, #1
 80033c4:	4aa8      	ldr	r2, [pc, #672]	; (8003668 <HAL_ADC_MspInit+0x2cc>)
 80033c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80033c8:	4ba7      	ldr	r3, [pc, #668]	; (8003668 <HAL_ADC_MspInit+0x2cc>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d10e      	bne.n	80033ee <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80033d0:	4ba6      	ldr	r3, [pc, #664]	; (800366c <HAL_ADC_MspInit+0x2d0>)
 80033d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80033d6:	4aa5      	ldr	r2, [pc, #660]	; (800366c <HAL_ADC_MspInit+0x2d0>)
 80033d8:	f043 0320 	orr.w	r3, r3, #32
 80033dc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80033e0:	4ba2      	ldr	r3, [pc, #648]	; (800366c <HAL_ADC_MspInit+0x2d0>)
 80033e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80033e6:	f003 0320 	and.w	r3, r3, #32
 80033ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ee:	4b9f      	ldr	r3, [pc, #636]	; (800366c <HAL_ADC_MspInit+0x2d0>)
 80033f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033f4:	4a9d      	ldr	r2, [pc, #628]	; (800366c <HAL_ADC_MspInit+0x2d0>)
 80033f6:	f043 0301 	orr.w	r3, r3, #1
 80033fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033fe:	4b9b      	ldr	r3, [pc, #620]	; (800366c <HAL_ADC_MspInit+0x2d0>)
 8003400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    PA3     ------> ADC1_INP15
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 800340c:	2319      	movs	r3, #25
 800340e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003410:	2303      	movs	r3, #3
 8003412:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003414:	2300      	movs	r3, #0
 8003416:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003418:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800341c:	4619      	mov	r1, r3
 800341e:	4894      	ldr	r0, [pc, #592]	; (8003670 <HAL_ADC_MspInit+0x2d4>)
 8003420:	f006 feb0 	bl	800a184 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream2;
 8003424:	4b93      	ldr	r3, [pc, #588]	; (8003674 <HAL_ADC_MspInit+0x2d8>)
 8003426:	4a94      	ldr	r2, [pc, #592]	; (8003678 <HAL_ADC_MspInit+0x2dc>)
 8003428:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800342a:	4b92      	ldr	r3, [pc, #584]	; (8003674 <HAL_ADC_MspInit+0x2d8>)
 800342c:	2209      	movs	r2, #9
 800342e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003430:	4b90      	ldr	r3, [pc, #576]	; (8003674 <HAL_ADC_MspInit+0x2d8>)
 8003432:	2200      	movs	r2, #0
 8003434:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003436:	4b8f      	ldr	r3, [pc, #572]	; (8003674 <HAL_ADC_MspInit+0x2d8>)
 8003438:	2200      	movs	r2, #0
 800343a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800343c:	4b8d      	ldr	r3, [pc, #564]	; (8003674 <HAL_ADC_MspInit+0x2d8>)
 800343e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003442:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003444:	4b8b      	ldr	r3, [pc, #556]	; (8003674 <HAL_ADC_MspInit+0x2d8>)
 8003446:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800344a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800344c:	4b89      	ldr	r3, [pc, #548]	; (8003674 <HAL_ADC_MspInit+0x2d8>)
 800344e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003452:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003454:	4b87      	ldr	r3, [pc, #540]	; (8003674 <HAL_ADC_MspInit+0x2d8>)
 8003456:	2200      	movs	r2, #0
 8003458:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800345a:	4b86      	ldr	r3, [pc, #536]	; (8003674 <HAL_ADC_MspInit+0x2d8>)
 800345c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003460:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003462:	4b84      	ldr	r3, [pc, #528]	; (8003674 <HAL_ADC_MspInit+0x2d8>)
 8003464:	2200      	movs	r2, #0
 8003466:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003468:	4882      	ldr	r0, [pc, #520]	; (8003674 <HAL_ADC_MspInit+0x2d8>)
 800346a:	f003 ffb5 	bl	80073d8 <HAL_DMA_Init>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <HAL_ADC_MspInit+0xdc>
    {
      Error_Handler();
 8003474:	f7ff ff72 	bl	800335c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a7e      	ldr	r2, [pc, #504]	; (8003674 <HAL_ADC_MspInit+0x2d8>)
 800347c:	659a      	str	r2, [r3, #88]	; 0x58
 800347e:	4a7d      	ldr	r2, [pc, #500]	; (8003674 <HAL_ADC_MspInit+0x2d8>)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003484:	2200      	movs	r2, #0
 8003486:	2100      	movs	r1, #0
 8003488:	2012      	movs	r0, #18
 800348a:	f003 ff70 	bl	800736e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800348e:	2012      	movs	r0, #18
 8003490:	f003 ff87 	bl	80073a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003494:	e0e2      	b.n	800365c <HAL_ADC_MspInit+0x2c0>
  else if(hadc->Instance==ADC2)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a78      	ldr	r2, [pc, #480]	; (800367c <HAL_ADC_MspInit+0x2e0>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d156      	bne.n	800354e <HAL_ADC_MspInit+0x1b2>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80034a0:	4b71      	ldr	r3, [pc, #452]	; (8003668 <HAL_ADC_MspInit+0x2cc>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	3301      	adds	r3, #1
 80034a6:	4a70      	ldr	r2, [pc, #448]	; (8003668 <HAL_ADC_MspInit+0x2cc>)
 80034a8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80034aa:	4b6f      	ldr	r3, [pc, #444]	; (8003668 <HAL_ADC_MspInit+0x2cc>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d10e      	bne.n	80034d0 <HAL_ADC_MspInit+0x134>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80034b2:	4b6e      	ldr	r3, [pc, #440]	; (800366c <HAL_ADC_MspInit+0x2d0>)
 80034b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80034b8:	4a6c      	ldr	r2, [pc, #432]	; (800366c <HAL_ADC_MspInit+0x2d0>)
 80034ba:	f043 0320 	orr.w	r3, r3, #32
 80034be:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80034c2:	4b6a      	ldr	r3, [pc, #424]	; (800366c <HAL_ADC_MspInit+0x2d0>)
 80034c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80034c8:	f003 0320 	and.w	r3, r3, #32
 80034cc:	623b      	str	r3, [r7, #32]
 80034ce:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034d0:	4b66      	ldr	r3, [pc, #408]	; (800366c <HAL_ADC_MspInit+0x2d0>)
 80034d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034d6:	4a65      	ldr	r2, [pc, #404]	; (800366c <HAL_ADC_MspInit+0x2d0>)
 80034d8:	f043 0301 	orr.w	r3, r3, #1
 80034dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034e0:	4b62      	ldr	r3, [pc, #392]	; (800366c <HAL_ADC_MspInit+0x2d0>)
 80034e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	61fb      	str	r3, [r7, #28]
 80034ec:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ee:	4b5f      	ldr	r3, [pc, #380]	; (800366c <HAL_ADC_MspInit+0x2d0>)
 80034f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034f4:	4a5d      	ldr	r2, [pc, #372]	; (800366c <HAL_ADC_MspInit+0x2d0>)
 80034f6:	f043 0302 	orr.w	r3, r3, #2
 80034fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034fe:	4b5b      	ldr	r3, [pc, #364]	; (800366c <HAL_ADC_MspInit+0x2d0>)
 8003500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	61bb      	str	r3, [r7, #24]
 800350a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800350c:	2360      	movs	r3, #96	; 0x60
 800350e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003510:	2303      	movs	r3, #3
 8003512:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003514:	2300      	movs	r3, #0
 8003516:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003518:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800351c:	4619      	mov	r1, r3
 800351e:	4854      	ldr	r0, [pc, #336]	; (8003670 <HAL_ADC_MspInit+0x2d4>)
 8003520:	f006 fe30 	bl	800a184 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003524:	2302      	movs	r3, #2
 8003526:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003528:	2303      	movs	r3, #3
 800352a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352c:	2300      	movs	r3, #0
 800352e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003530:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003534:	4619      	mov	r1, r3
 8003536:	4852      	ldr	r0, [pc, #328]	; (8003680 <HAL_ADC_MspInit+0x2e4>)
 8003538:	f006 fe24 	bl	800a184 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800353c:	2200      	movs	r2, #0
 800353e:	2100      	movs	r1, #0
 8003540:	2012      	movs	r0, #18
 8003542:	f003 ff14 	bl	800736e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003546:	2012      	movs	r0, #18
 8003548:	f003 ff2b 	bl	80073a2 <HAL_NVIC_EnableIRQ>
}
 800354c:	e086      	b.n	800365c <HAL_ADC_MspInit+0x2c0>
  else if(hadc->Instance==ADC3)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a4c      	ldr	r2, [pc, #304]	; (8003684 <HAL_ADC_MspInit+0x2e8>)
 8003554:	4293      	cmp	r3, r2
 8003556:	f040 8081 	bne.w	800365c <HAL_ADC_MspInit+0x2c0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800355a:	4b44      	ldr	r3, [pc, #272]	; (800366c <HAL_ADC_MspInit+0x2d0>)
 800355c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003560:	4a42      	ldr	r2, [pc, #264]	; (800366c <HAL_ADC_MspInit+0x2d0>)
 8003562:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003566:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800356a:	4b40      	ldr	r3, [pc, #256]	; (800366c <HAL_ADC_MspInit+0x2d0>)
 800356c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003570:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003574:	617b      	str	r3, [r7, #20]
 8003576:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003578:	4b3c      	ldr	r3, [pc, #240]	; (800366c <HAL_ADC_MspInit+0x2d0>)
 800357a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800357e:	4a3b      	ldr	r2, [pc, #236]	; (800366c <HAL_ADC_MspInit+0x2d0>)
 8003580:	f043 0320 	orr.w	r3, r3, #32
 8003584:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003588:	4b38      	ldr	r3, [pc, #224]	; (800366c <HAL_ADC_MspInit+0x2d0>)
 800358a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800358e:	f003 0320 	and.w	r3, r3, #32
 8003592:	613b      	str	r3, [r7, #16]
 8003594:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003596:	4b35      	ldr	r3, [pc, #212]	; (800366c <HAL_ADC_MspInit+0x2d0>)
 8003598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800359c:	4a33      	ldr	r2, [pc, #204]	; (800366c <HAL_ADC_MspInit+0x2d0>)
 800359e:	f043 0304 	orr.w	r3, r3, #4
 80035a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035a6:	4b31      	ldr	r3, [pc, #196]	; (800366c <HAL_ADC_MspInit+0x2d0>)
 80035a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80035b4:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 80035b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035ba:	2303      	movs	r3, #3
 80035bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035be:	2300      	movs	r3, #0
 80035c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80035c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035c6:	4619      	mov	r1, r3
 80035c8:	482f      	ldr	r0, [pc, #188]	; (8003688 <HAL_ADC_MspInit+0x2ec>)
 80035ca:	f006 fddb 	bl	800a184 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80035ce:	2301      	movs	r3, #1
 80035d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035d2:	2303      	movs	r3, #3
 80035d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d6:	2300      	movs	r3, #0
 80035d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035de:	4619      	mov	r1, r3
 80035e0:	482a      	ldr	r0, [pc, #168]	; (800368c <HAL_ADC_MspInit+0x2f0>)
 80035e2:	f006 fdcf 	bl	800a184 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80035e6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80035ea:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80035ee:	f000 fd8b 	bl	8004108 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80035f2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80035f6:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80035fa:	f000 fd85 	bl	8004108 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 80035fe:	4b24      	ldr	r3, [pc, #144]	; (8003690 <HAL_ADC_MspInit+0x2f4>)
 8003600:	4a24      	ldr	r2, [pc, #144]	; (8003694 <HAL_ADC_MspInit+0x2f8>)
 8003602:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8003604:	4b22      	ldr	r3, [pc, #136]	; (8003690 <HAL_ADC_MspInit+0x2f4>)
 8003606:	2273      	movs	r2, #115	; 0x73
 8003608:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800360a:	4b21      	ldr	r3, [pc, #132]	; (8003690 <HAL_ADC_MspInit+0x2f4>)
 800360c:	2200      	movs	r2, #0
 800360e:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003610:	4b1f      	ldr	r3, [pc, #124]	; (8003690 <HAL_ADC_MspInit+0x2f4>)
 8003612:	2200      	movs	r2, #0
 8003614:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003616:	4b1e      	ldr	r3, [pc, #120]	; (8003690 <HAL_ADC_MspInit+0x2f4>)
 8003618:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800361c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800361e:	4b1c      	ldr	r3, [pc, #112]	; (8003690 <HAL_ADC_MspInit+0x2f4>)
 8003620:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003624:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003626:	4b1a      	ldr	r3, [pc, #104]	; (8003690 <HAL_ADC_MspInit+0x2f4>)
 8003628:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800362c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 800362e:	4b18      	ldr	r3, [pc, #96]	; (8003690 <HAL_ADC_MspInit+0x2f4>)
 8003630:	2200      	movs	r2, #0
 8003632:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003634:	4b16      	ldr	r3, [pc, #88]	; (8003690 <HAL_ADC_MspInit+0x2f4>)
 8003636:	2200      	movs	r2, #0
 8003638:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800363a:	4b15      	ldr	r3, [pc, #84]	; (8003690 <HAL_ADC_MspInit+0x2f4>)
 800363c:	2200      	movs	r2, #0
 800363e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8003640:	4813      	ldr	r0, [pc, #76]	; (8003690 <HAL_ADC_MspInit+0x2f4>)
 8003642:	f003 fec9 	bl	80073d8 <HAL_DMA_Init>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <HAL_ADC_MspInit+0x2b4>
      Error_Handler();
 800364c:	f7ff fe86 	bl	800335c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a0f      	ldr	r2, [pc, #60]	; (8003690 <HAL_ADC_MspInit+0x2f4>)
 8003654:	659a      	str	r2, [r3, #88]	; 0x58
 8003656:	4a0e      	ldr	r2, [pc, #56]	; (8003690 <HAL_ADC_MspInit+0x2f4>)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800365c:	bf00      	nop
 800365e:	3740      	adds	r7, #64	; 0x40
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40022000 	.word	0x40022000
 8003668:	24000ecc 	.word	0x24000ecc
 800366c:	58024400 	.word	0x58024400
 8003670:	58020000 	.word	0x58020000
 8003674:	24000a54 	.word	0x24000a54
 8003678:	40020040 	.word	0x40020040
 800367c:	40022100 	.word	0x40022100
 8003680:	58020400 	.word	0x58020400
 8003684:	58026000 	.word	0x58026000
 8003688:	58021400 	.word	0x58021400
 800368c:	58020800 	.word	0x58020800
 8003690:	24000acc 	.word	0x24000acc
 8003694:	40020028 	.word	0x40020028

08003698 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08a      	sub	sp, #40	; 0x28
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a0:	f107 0314 	add.w	r3, r7, #20
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	605a      	str	r2, [r3, #4]
 80036aa:	609a      	str	r2, [r3, #8]
 80036ac:	60da      	str	r2, [r3, #12]
 80036ae:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a21      	ldr	r2, [pc, #132]	; (800373c <HAL_COMP_MspInit+0xa4>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d13b      	bne.n	8003732 <HAL_COMP_MspInit+0x9a>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 80036ba:	4b21      	ldr	r3, [pc, #132]	; (8003740 <HAL_COMP_MspInit+0xa8>)
 80036bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80036c0:	4a1f      	ldr	r2, [pc, #124]	; (8003740 <HAL_COMP_MspInit+0xa8>)
 80036c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80036ca:	4b1d      	ldr	r3, [pc, #116]	; (8003740 <HAL_COMP_MspInit+0xa8>)
 80036cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80036d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036d4:	613b      	str	r3, [r7, #16]
 80036d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80036d8:	4b19      	ldr	r3, [pc, #100]	; (8003740 <HAL_COMP_MspInit+0xa8>)
 80036da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036de:	4a18      	ldr	r2, [pc, #96]	; (8003740 <HAL_COMP_MspInit+0xa8>)
 80036e0:	f043 0310 	orr.w	r3, r3, #16
 80036e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036e8:	4b15      	ldr	r3, [pc, #84]	; (8003740 <HAL_COMP_MspInit+0xa8>)
 80036ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036ee:	f003 0310 	and.w	r3, r3, #16
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PE7     ------> COMP2_INM
    PE11     ------> COMP2_INP
    PE13     ------> COMP2_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_11;
 80036f6:	f44f 6308 	mov.w	r3, #2176	; 0x880
 80036fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036fc:	2303      	movs	r3, #3
 80036fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003700:	2300      	movs	r3, #0
 8003702:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003704:	f107 0314 	add.w	r3, r7, #20
 8003708:	4619      	mov	r1, r3
 800370a:	480e      	ldr	r0, [pc, #56]	; (8003744 <HAL_COMP_MspInit+0xac>)
 800370c:	f006 fd3a 	bl	800a184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003710:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003716:	2302      	movs	r3, #2
 8003718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371a:	2300      	movs	r3, #0
 800371c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800371e:	2300      	movs	r3, #0
 8003720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_COMP2;
 8003722:	230d      	movs	r3, #13
 8003724:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003726:	f107 0314 	add.w	r3, r7, #20
 800372a:	4619      	mov	r1, r3
 800372c:	4805      	ldr	r0, [pc, #20]	; (8003744 <HAL_COMP_MspInit+0xac>)
 800372e:	f006 fd29 	bl	800a184 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8003732:	bf00      	nop
 8003734:	3728      	adds	r7, #40	; 0x28
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	58003810 	.word	0x58003810
 8003740:	58024400 	.word	0x58024400
 8003744:	58021000 	.word	0x58021000

08003748 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b08e      	sub	sp, #56	; 0x38
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	605a      	str	r2, [r3, #4]
 800375a:	609a      	str	r2, [r3, #8]
 800375c:	60da      	str	r2, [r3, #12]
 800375e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a59      	ldr	r2, [pc, #356]	; (80038cc <HAL_ETH_MspInit+0x184>)
 8003766:	4293      	cmp	r3, r2
 8003768:	f040 80ab 	bne.w	80038c2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800376c:	4b58      	ldr	r3, [pc, #352]	; (80038d0 <HAL_ETH_MspInit+0x188>)
 800376e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003772:	4a57      	ldr	r2, [pc, #348]	; (80038d0 <HAL_ETH_MspInit+0x188>)
 8003774:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003778:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800377c:	4b54      	ldr	r3, [pc, #336]	; (80038d0 <HAL_ETH_MspInit+0x188>)
 800377e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003782:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003786:	623b      	str	r3, [r7, #32]
 8003788:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800378a:	4b51      	ldr	r3, [pc, #324]	; (80038d0 <HAL_ETH_MspInit+0x188>)
 800378c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003790:	4a4f      	ldr	r2, [pc, #316]	; (80038d0 <HAL_ETH_MspInit+0x188>)
 8003792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003796:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800379a:	4b4d      	ldr	r3, [pc, #308]	; (80038d0 <HAL_ETH_MspInit+0x188>)
 800379c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80037a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a4:	61fb      	str	r3, [r7, #28]
 80037a6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80037a8:	4b49      	ldr	r3, [pc, #292]	; (80038d0 <HAL_ETH_MspInit+0x188>)
 80037aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80037ae:	4a48      	ldr	r2, [pc, #288]	; (80038d0 <HAL_ETH_MspInit+0x188>)
 80037b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037b4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80037b8:	4b45      	ldr	r3, [pc, #276]	; (80038d0 <HAL_ETH_MspInit+0x188>)
 80037ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80037be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c2:	61bb      	str	r3, [r7, #24]
 80037c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037c6:	4b42      	ldr	r3, [pc, #264]	; (80038d0 <HAL_ETH_MspInit+0x188>)
 80037c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037cc:	4a40      	ldr	r2, [pc, #256]	; (80038d0 <HAL_ETH_MspInit+0x188>)
 80037ce:	f043 0304 	orr.w	r3, r3, #4
 80037d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037d6:	4b3e      	ldr	r3, [pc, #248]	; (80038d0 <HAL_ETH_MspInit+0x188>)
 80037d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	617b      	str	r3, [r7, #20]
 80037e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037e4:	4b3a      	ldr	r3, [pc, #232]	; (80038d0 <HAL_ETH_MspInit+0x188>)
 80037e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037ea:	4a39      	ldr	r2, [pc, #228]	; (80038d0 <HAL_ETH_MspInit+0x188>)
 80037ec:	f043 0301 	orr.w	r3, r3, #1
 80037f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037f4:	4b36      	ldr	r3, [pc, #216]	; (80038d0 <HAL_ETH_MspInit+0x188>)
 80037f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	613b      	str	r3, [r7, #16]
 8003800:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003802:	4b33      	ldr	r3, [pc, #204]	; (80038d0 <HAL_ETH_MspInit+0x188>)
 8003804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003808:	4a31      	ldr	r2, [pc, #196]	; (80038d0 <HAL_ETH_MspInit+0x188>)
 800380a:	f043 0302 	orr.w	r3, r3, #2
 800380e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003812:	4b2f      	ldr	r3, [pc, #188]	; (80038d0 <HAL_ETH_MspInit+0x188>)
 8003814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	60fb      	str	r3, [r7, #12]
 800381e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003820:	4b2b      	ldr	r3, [pc, #172]	; (80038d0 <HAL_ETH_MspInit+0x188>)
 8003822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003826:	4a2a      	ldr	r2, [pc, #168]	; (80038d0 <HAL_ETH_MspInit+0x188>)
 8003828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800382c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003830:	4b27      	ldr	r3, [pc, #156]	; (80038d0 <HAL_ETH_MspInit+0x188>)
 8003832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383a:	60bb      	str	r3, [r7, #8]
 800383c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800383e:	2332      	movs	r3, #50	; 0x32
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003842:	2302      	movs	r3, #2
 8003844:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003846:	2300      	movs	r3, #0
 8003848:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800384a:	2300      	movs	r3, #0
 800384c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800384e:	230b      	movs	r3, #11
 8003850:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003856:	4619      	mov	r1, r3
 8003858:	481e      	ldr	r0, [pc, #120]	; (80038d4 <HAL_ETH_MspInit+0x18c>)
 800385a:	f006 fc93 	bl	800a184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800385e:	2386      	movs	r3, #134	; 0x86
 8003860:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003862:	2302      	movs	r3, #2
 8003864:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003866:	2300      	movs	r3, #0
 8003868:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800386a:	2300      	movs	r3, #0
 800386c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800386e:	230b      	movs	r3, #11
 8003870:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003876:	4619      	mov	r1, r3
 8003878:	4817      	ldr	r0, [pc, #92]	; (80038d8 <HAL_ETH_MspInit+0x190>)
 800387a:	f006 fc83 	bl	800a184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800387e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003882:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003884:	2302      	movs	r3, #2
 8003886:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003888:	2300      	movs	r3, #0
 800388a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800388c:	2300      	movs	r3, #0
 800388e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003890:	230b      	movs	r3, #11
 8003892:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003898:	4619      	mov	r1, r3
 800389a:	4810      	ldr	r0, [pc, #64]	; (80038dc <HAL_ETH_MspInit+0x194>)
 800389c:	f006 fc72 	bl	800a184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80038a0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a6:	2302      	movs	r3, #2
 80038a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ae:	2300      	movs	r3, #0
 80038b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80038b2:	230b      	movs	r3, #11
 80038b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80038b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038ba:	4619      	mov	r1, r3
 80038bc:	4808      	ldr	r0, [pc, #32]	; (80038e0 <HAL_ETH_MspInit+0x198>)
 80038be:	f006 fc61 	bl	800a184 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80038c2:	bf00      	nop
 80038c4:	3738      	adds	r7, #56	; 0x38
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	40028000 	.word	0x40028000
 80038d0:	58024400 	.word	0x58024400
 80038d4:	58020800 	.word	0x58020800
 80038d8:	58020000 	.word	0x58020000
 80038dc:	58020400 	.word	0x58020400
 80038e0:	58021800 	.word	0x58021800

080038e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b0ba      	sub	sp, #232	; 0xe8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	605a      	str	r2, [r3, #4]
 80038f6:	609a      	str	r2, [r3, #8]
 80038f8:	60da      	str	r2, [r3, #12]
 80038fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038fc:	f107 0318 	add.w	r3, r7, #24
 8003900:	22b8      	movs	r2, #184	; 0xb8
 8003902:	2100      	movs	r1, #0
 8003904:	4618      	mov	r0, r3
 8003906:	f00d f96d 	bl	8010be4 <memset>
  if(huart->Instance==LPUART1)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a4d      	ldr	r2, [pc, #308]	; (8003a44 <HAL_UART_MspInit+0x160>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d146      	bne.n	80039a2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003914:	f04f 0204 	mov.w	r2, #4
 8003918:	f04f 0300 	mov.w	r3, #0
 800391c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8003920:	2300      	movs	r3, #0
 8003922:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003926:	f107 0318 	add.w	r3, r7, #24
 800392a:	4618      	mov	r0, r3
 800392c:	f007 fdbe 	bl	800b4ac <HAL_RCCEx_PeriphCLKConfig>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003936:	f7ff fd11 	bl	800335c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800393a:	4b43      	ldr	r3, [pc, #268]	; (8003a48 <HAL_UART_MspInit+0x164>)
 800393c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003940:	4a41      	ldr	r2, [pc, #260]	; (8003a48 <HAL_UART_MspInit+0x164>)
 8003942:	f043 0308 	orr.w	r3, r3, #8
 8003946:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800394a:	4b3f      	ldr	r3, [pc, #252]	; (8003a48 <HAL_UART_MspInit+0x164>)
 800394c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	617b      	str	r3, [r7, #20]
 8003956:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003958:	4b3b      	ldr	r3, [pc, #236]	; (8003a48 <HAL_UART_MspInit+0x164>)
 800395a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800395e:	4a3a      	ldr	r2, [pc, #232]	; (8003a48 <HAL_UART_MspInit+0x164>)
 8003960:	f043 0302 	orr.w	r3, r3, #2
 8003964:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003968:	4b37      	ldr	r3, [pc, #220]	; (8003a48 <HAL_UART_MspInit+0x164>)
 800396a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	613b      	str	r3, [r7, #16]
 8003974:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003976:	23c0      	movs	r3, #192	; 0xc0
 8003978:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800397c:	2302      	movs	r3, #2
 800397e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003982:	2300      	movs	r3, #0
 8003984:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003988:	2300      	movs	r3, #0
 800398a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART;
 800398e:	2308      	movs	r3, #8
 8003990:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003994:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003998:	4619      	mov	r1, r3
 800399a:	482c      	ldr	r0, [pc, #176]	; (8003a4c <HAL_UART_MspInit+0x168>)
 800399c:	f006 fbf2 	bl	800a184 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80039a0:	e04b      	b.n	8003a3a <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART3)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a2a      	ldr	r2, [pc, #168]	; (8003a50 <HAL_UART_MspInit+0x16c>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d146      	bne.n	8003a3a <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80039ac:	f04f 0202 	mov.w	r2, #2
 80039b0:	f04f 0300 	mov.w	r3, #0
 80039b4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80039b8:	2300      	movs	r3, #0
 80039ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039be:	f107 0318 	add.w	r3, r7, #24
 80039c2:	4618      	mov	r0, r3
 80039c4:	f007 fd72 	bl	800b4ac <HAL_RCCEx_PeriphCLKConfig>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <HAL_UART_MspInit+0xee>
      Error_Handler();
 80039ce:	f7ff fcc5 	bl	800335c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80039d2:	4b1d      	ldr	r3, [pc, #116]	; (8003a48 <HAL_UART_MspInit+0x164>)
 80039d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039d8:	4a1b      	ldr	r2, [pc, #108]	; (8003a48 <HAL_UART_MspInit+0x164>)
 80039da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039e2:	4b19      	ldr	r3, [pc, #100]	; (8003a48 <HAL_UART_MspInit+0x164>)
 80039e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ec:	60fb      	str	r3, [r7, #12]
 80039ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039f0:	4b15      	ldr	r3, [pc, #84]	; (8003a48 <HAL_UART_MspInit+0x164>)
 80039f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039f6:	4a14      	ldr	r2, [pc, #80]	; (8003a48 <HAL_UART_MspInit+0x164>)
 80039f8:	f043 0308 	orr.w	r3, r3, #8
 80039fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a00:	4b11      	ldr	r3, [pc, #68]	; (8003a48 <HAL_UART_MspInit+0x164>)
 8003a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a06:	f003 0308 	and.w	r3, r3, #8
 8003a0a:	60bb      	str	r3, [r7, #8]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8003a0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a16:	2302      	movs	r3, #2
 8003a18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a22:	2300      	movs	r3, #0
 8003a24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a28:	2307      	movs	r3, #7
 8003a2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a2e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a32:	4619      	mov	r1, r3
 8003a34:	4807      	ldr	r0, [pc, #28]	; (8003a54 <HAL_UART_MspInit+0x170>)
 8003a36:	f006 fba5 	bl	800a184 <HAL_GPIO_Init>
}
 8003a3a:	bf00      	nop
 8003a3c:	37e8      	adds	r7, #232	; 0xe8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	58000c00 	.word	0x58000c00
 8003a48:	58024400 	.word	0x58024400
 8003a4c:	58020400 	.word	0x58020400
 8003a50:	40004800 	.word	0x40004800
 8003a54:	58020c00 	.word	0x58020c00

08003a58 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b087      	sub	sp, #28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a20      	ldr	r2, [pc, #128]	; (8003ae8 <HAL_TIM_PWM_MspInit+0x90>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d10f      	bne.n	8003a8a <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a6a:	4b20      	ldr	r3, [pc, #128]	; (8003aec <HAL_TIM_PWM_MspInit+0x94>)
 8003a6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a70:	4a1e      	ldr	r2, [pc, #120]	; (8003aec <HAL_TIM_PWM_MspInit+0x94>)
 8003a72:	f043 0301 	orr.w	r3, r3, #1
 8003a76:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a7a:	4b1c      	ldr	r3, [pc, #112]	; (8003aec <HAL_TIM_PWM_MspInit+0x94>)
 8003a7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003a88:	e028      	b.n	8003adc <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM2)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a92:	d10f      	bne.n	8003ab4 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a94:	4b15      	ldr	r3, [pc, #84]	; (8003aec <HAL_TIM_PWM_MspInit+0x94>)
 8003a96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a9a:	4a14      	ldr	r2, [pc, #80]	; (8003aec <HAL_TIM_PWM_MspInit+0x94>)
 8003a9c:	f043 0301 	orr.w	r3, r3, #1
 8003aa0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003aa4:	4b11      	ldr	r3, [pc, #68]	; (8003aec <HAL_TIM_PWM_MspInit+0x94>)
 8003aa6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	613b      	str	r3, [r7, #16]
 8003ab0:	693b      	ldr	r3, [r7, #16]
}
 8003ab2:	e013      	b.n	8003adc <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM4)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a0d      	ldr	r2, [pc, #52]	; (8003af0 <HAL_TIM_PWM_MspInit+0x98>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d10e      	bne.n	8003adc <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003abe:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <HAL_TIM_PWM_MspInit+0x94>)
 8003ac0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ac4:	4a09      	ldr	r2, [pc, #36]	; (8003aec <HAL_TIM_PWM_MspInit+0x94>)
 8003ac6:	f043 0304 	orr.w	r3, r3, #4
 8003aca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ace:	4b07      	ldr	r3, [pc, #28]	; (8003aec <HAL_TIM_PWM_MspInit+0x94>)
 8003ad0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	68fb      	ldr	r3, [r7, #12]
}
 8003adc:	bf00      	nop
 8003ade:	371c      	adds	r7, #28
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	40010000 	.word	0x40010000
 8003aec:	58024400 	.word	0x58024400
 8003af0:	40000800 	.word	0x40000800

08003af4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b08c      	sub	sp, #48	; 0x30
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003afc:	f107 031c 	add.w	r3, r7, #28
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	605a      	str	r2, [r3, #4]
 8003b06:	609a      	str	r2, [r3, #8]
 8003b08:	60da      	str	r2, [r3, #12]
 8003b0a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a34      	ldr	r2, [pc, #208]	; (8003be4 <HAL_TIM_IC_MspInit+0xf0>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d12e      	bne.n	8003b74 <HAL_TIM_IC_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b16:	4b34      	ldr	r3, [pc, #208]	; (8003be8 <HAL_TIM_IC_MspInit+0xf4>)
 8003b18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b1c:	4a32      	ldr	r2, [pc, #200]	; (8003be8 <HAL_TIM_IC_MspInit+0xf4>)
 8003b1e:	f043 0302 	orr.w	r3, r3, #2
 8003b22:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b26:	4b30      	ldr	r3, [pc, #192]	; (8003be8 <HAL_TIM_IC_MspInit+0xf4>)
 8003b28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	61bb      	str	r3, [r7, #24]
 8003b32:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b34:	4b2c      	ldr	r3, [pc, #176]	; (8003be8 <HAL_TIM_IC_MspInit+0xf4>)
 8003b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b3a:	4a2b      	ldr	r2, [pc, #172]	; (8003be8 <HAL_TIM_IC_MspInit+0xf4>)
 8003b3c:	f043 0304 	orr.w	r3, r3, #4
 8003b40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b44:	4b28      	ldr	r3, [pc, #160]	; (8003be8 <HAL_TIM_IC_MspInit+0xf4>)
 8003b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b4a:	f003 0304 	and.w	r3, r3, #4
 8003b4e:	617b      	str	r3, [r7, #20]
 8003b50:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003b52:	2340      	movs	r3, #64	; 0x40
 8003b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b56:	2302      	movs	r3, #2
 8003b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b62:	2302      	movs	r3, #2
 8003b64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b66:	f107 031c 	add.w	r3, r7, #28
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	481f      	ldr	r0, [pc, #124]	; (8003bec <HAL_TIM_IC_MspInit+0xf8>)
 8003b6e:	f006 fb09 	bl	800a184 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003b72:	e032      	b.n	8003bda <HAL_TIM_IC_MspInit+0xe6>
  else if(htim_ic->Instance==TIM15)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a1d      	ldr	r2, [pc, #116]	; (8003bf0 <HAL_TIM_IC_MspInit+0xfc>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d12d      	bne.n	8003bda <HAL_TIM_IC_MspInit+0xe6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003b7e:	4b1a      	ldr	r3, [pc, #104]	; (8003be8 <HAL_TIM_IC_MspInit+0xf4>)
 8003b80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b84:	4a18      	ldr	r2, [pc, #96]	; (8003be8 <HAL_TIM_IC_MspInit+0xf4>)
 8003b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b8a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003b8e:	4b16      	ldr	r3, [pc, #88]	; (8003be8 <HAL_TIM_IC_MspInit+0xf4>)
 8003b90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b98:	613b      	str	r3, [r7, #16]
 8003b9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b9c:	4b12      	ldr	r3, [pc, #72]	; (8003be8 <HAL_TIM_IC_MspInit+0xf4>)
 8003b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ba2:	4a11      	ldr	r2, [pc, #68]	; (8003be8 <HAL_TIM_IC_MspInit+0xf4>)
 8003ba4:	f043 0310 	orr.w	r3, r3, #16
 8003ba8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003bac:	4b0e      	ldr	r3, [pc, #56]	; (8003be8 <HAL_TIM_IC_MspInit+0xf4>)
 8003bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bb2:	f003 0310 	and.w	r3, r3, #16
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003bba:	2320      	movs	r3, #32
 8003bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8003bca:	2304      	movs	r3, #4
 8003bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003bce:	f107 031c 	add.w	r3, r7, #28
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	4807      	ldr	r0, [pc, #28]	; (8003bf4 <HAL_TIM_IC_MspInit+0x100>)
 8003bd6:	f006 fad5 	bl	800a184 <HAL_GPIO_Init>
}
 8003bda:	bf00      	nop
 8003bdc:	3730      	adds	r7, #48	; 0x30
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	40000400 	.word	0x40000400
 8003be8:	58024400 	.word	0x58024400
 8003bec:	58020800 	.word	0x58020800
 8003bf0:	40014000 	.word	0x40014000
 8003bf4:	58021000 	.word	0x58021000

08003bf8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b08a      	sub	sp, #40	; 0x28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c00:	f107 0314 	add.w	r3, r7, #20
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	605a      	str	r2, [r3, #4]
 8003c0a:	609a      	str	r2, [r3, #8]
 8003c0c:	60da      	str	r2, [r3, #12]
 8003c0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a39      	ldr	r2, [pc, #228]	; (8003cfc <HAL_TIM_MspPostInit+0x104>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d120      	bne.n	8003c5c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c1a:	4b39      	ldr	r3, [pc, #228]	; (8003d00 <HAL_TIM_MspPostInit+0x108>)
 8003c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c20:	4a37      	ldr	r2, [pc, #220]	; (8003d00 <HAL_TIM_MspPostInit+0x108>)
 8003c22:	f043 0310 	orr.w	r3, r3, #16
 8003c26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c2a:	4b35      	ldr	r3, [pc, #212]	; (8003d00 <HAL_TIM_MspPostInit+0x108>)
 8003c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c30:	f003 0310 	and.w	r3, r3, #16
 8003c34:	613b      	str	r3, [r7, #16]
 8003c36:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_CH1N_Pin|TIM1_CH1_Pin;
 8003c38:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c3e:	2302      	movs	r3, #2
 8003c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c42:	2300      	movs	r3, #0
 8003c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c46:	2300      	movs	r3, #0
 8003c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c4e:	f107 0314 	add.w	r3, r7, #20
 8003c52:	4619      	mov	r1, r3
 8003c54:	482b      	ldr	r0, [pc, #172]	; (8003d04 <HAL_TIM_MspPostInit+0x10c>)
 8003c56:	f006 fa95 	bl	800a184 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003c5a:	e04a      	b.n	8003cf2 <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM2)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c64:	d120      	bne.n	8003ca8 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c66:	4b26      	ldr	r3, [pc, #152]	; (8003d00 <HAL_TIM_MspPostInit+0x108>)
 8003c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c6c:	4a24      	ldr	r2, [pc, #144]	; (8003d00 <HAL_TIM_MspPostInit+0x108>)
 8003c6e:	f043 0301 	orr.w	r3, r3, #1
 8003c72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c76:	4b22      	ldr	r3, [pc, #136]	; (8003d00 <HAL_TIM_MspPostInit+0x108>)
 8003c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	60fb      	str	r3, [r7, #12]
 8003c82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003c84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c8a:	2312      	movs	r3, #18
 8003c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c92:	2300      	movs	r3, #0
 8003c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003c96:	2301      	movs	r3, #1
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c9a:	f107 0314 	add.w	r3, r7, #20
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4819      	ldr	r0, [pc, #100]	; (8003d08 <HAL_TIM_MspPostInit+0x110>)
 8003ca2:	f006 fa6f 	bl	800a184 <HAL_GPIO_Init>
}
 8003ca6:	e024      	b.n	8003cf2 <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM4)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a17      	ldr	r2, [pc, #92]	; (8003d0c <HAL_TIM_MspPostInit+0x114>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d11f      	bne.n	8003cf2 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cb2:	4b13      	ldr	r3, [pc, #76]	; (8003d00 <HAL_TIM_MspPostInit+0x108>)
 8003cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cb8:	4a11      	ldr	r2, [pc, #68]	; (8003d00 <HAL_TIM_MspPostInit+0x108>)
 8003cba:	f043 0308 	orr.w	r3, r3, #8
 8003cbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003cc2:	4b0f      	ldr	r3, [pc, #60]	; (8003d00 <HAL_TIM_MspPostInit+0x108>)
 8003cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cc8:	f003 0308 	and.w	r3, r3, #8
 8003ccc:	60bb      	str	r3, [r7, #8]
 8003cce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cd6:	2312      	movs	r3, #18
 8003cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ce6:	f107 0314 	add.w	r3, r7, #20
 8003cea:	4619      	mov	r1, r3
 8003cec:	4808      	ldr	r0, [pc, #32]	; (8003d10 <HAL_TIM_MspPostInit+0x118>)
 8003cee:	f006 fa49 	bl	800a184 <HAL_GPIO_Init>
}
 8003cf2:	bf00      	nop
 8003cf4:	3728      	adds	r7, #40	; 0x28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40010000 	.word	0x40010000
 8003d00:	58024400 	.word	0x58024400
 8003d04:	58021000 	.word	0x58021000
 8003d08:	58020000 	.word	0x58020000
 8003d0c:	40000800 	.word	0x40000800
 8003d10:	58020c00 	.word	0x58020c00

08003d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d18:	e7fe      	b.n	8003d18 <NMI_Handler+0x4>

08003d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d1e:	e7fe      	b.n	8003d1e <HardFault_Handler+0x4>

08003d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d24:	e7fe      	b.n	8003d24 <MemManage_Handler+0x4>

08003d26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d26:	b480      	push	{r7}
 8003d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d2a:	e7fe      	b.n	8003d2a <BusFault_Handler+0x4>

08003d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d30:	e7fe      	b.n	8003d30 <UsageFault_Handler+0x4>

08003d32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d32:	b480      	push	{r7}
 8003d34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d36:	bf00      	nop
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d44:	bf00      	nop
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d52:	bf00      	nop
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d60:	f000 f97a 	bl	8004058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d64:	bf00      	nop
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003d6c:	4802      	ldr	r0, [pc, #8]	; (8003d78 <DMA1_Stream1_IRQHandler+0x10>)
 8003d6e:	f004 f8f5 	bl	8007f5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003d72:	bf00      	nop
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	24000acc 	.word	0x24000acc

08003d7c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003d80:	4802      	ldr	r0, [pc, #8]	; (8003d8c <DMA1_Stream2_IRQHandler+0x10>)
 8003d82:	f004 f8eb 	bl	8007f5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003d86:	bf00      	nop
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	24000a54 	.word	0x24000a54

08003d90 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003d94:	4803      	ldr	r0, [pc, #12]	; (8003da4 <ADC_IRQHandler+0x14>)
 8003d96:	f001 f8d9 	bl	8004f4c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003d9a:	4803      	ldr	r0, [pc, #12]	; (8003da8 <ADC_IRQHandler+0x18>)
 8003d9c:	f001 f8d6 	bl	8004f4c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003da0:	bf00      	nop
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	24000904 	.word	0x24000904
 8003da8:	24000974 	.word	0x24000974

08003dac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INP_COMP_IRQ_Pin);
 8003db0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003db4:	f006 fbbf 	bl	800a536 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(POWER_OFF_IRQ_Pin);
 8003db8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003dbc:	f006 fbbb 	bl	800a536 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003dc0:	bf00      	nop
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003dcc:	4a14      	ldr	r2, [pc, #80]	; (8003e20 <_sbrk+0x5c>)
 8003dce:	4b15      	ldr	r3, [pc, #84]	; (8003e24 <_sbrk+0x60>)
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003dd8:	4b13      	ldr	r3, [pc, #76]	; (8003e28 <_sbrk+0x64>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d102      	bne.n	8003de6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003de0:	4b11      	ldr	r3, [pc, #68]	; (8003e28 <_sbrk+0x64>)
 8003de2:	4a12      	ldr	r2, [pc, #72]	; (8003e2c <_sbrk+0x68>)
 8003de4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003de6:	4b10      	ldr	r3, [pc, #64]	; (8003e28 <_sbrk+0x64>)
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4413      	add	r3, r2
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d207      	bcs.n	8003e04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003df4:	f00c ff0e 	bl	8010c14 <__errno>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	220c      	movs	r2, #12
 8003dfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8003e02:	e009      	b.n	8003e18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e04:	4b08      	ldr	r3, [pc, #32]	; (8003e28 <_sbrk+0x64>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e0a:	4b07      	ldr	r3, [pc, #28]	; (8003e28 <_sbrk+0x64>)
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4413      	add	r3, r2
 8003e12:	4a05      	ldr	r2, [pc, #20]	; (8003e28 <_sbrk+0x64>)
 8003e14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e16:	68fb      	ldr	r3, [r7, #12]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	24050000 	.word	0x24050000
 8003e24:	00000400 	.word	0x00000400
 8003e28:	24000ed0 	.word	0x24000ed0
 8003e2c:	24001040 	.word	0x24001040

08003e30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003e34:	4b32      	ldr	r3, [pc, #200]	; (8003f00 <SystemInit+0xd0>)
 8003e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3a:	4a31      	ldr	r2, [pc, #196]	; (8003f00 <SystemInit+0xd0>)
 8003e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003e44:	4b2f      	ldr	r3, [pc, #188]	; (8003f04 <SystemInit+0xd4>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 030f 	and.w	r3, r3, #15
 8003e4c:	2b06      	cmp	r3, #6
 8003e4e:	d807      	bhi.n	8003e60 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003e50:	4b2c      	ldr	r3, [pc, #176]	; (8003f04 <SystemInit+0xd4>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f023 030f 	bic.w	r3, r3, #15
 8003e58:	4a2a      	ldr	r2, [pc, #168]	; (8003f04 <SystemInit+0xd4>)
 8003e5a:	f043 0307 	orr.w	r3, r3, #7
 8003e5e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003e60:	4b29      	ldr	r3, [pc, #164]	; (8003f08 <SystemInit+0xd8>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a28      	ldr	r2, [pc, #160]	; (8003f08 <SystemInit+0xd8>)
 8003e66:	f043 0301 	orr.w	r3, r3, #1
 8003e6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003e6c:	4b26      	ldr	r3, [pc, #152]	; (8003f08 <SystemInit+0xd8>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003e72:	4b25      	ldr	r3, [pc, #148]	; (8003f08 <SystemInit+0xd8>)
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	4924      	ldr	r1, [pc, #144]	; (8003f08 <SystemInit+0xd8>)
 8003e78:	4b24      	ldr	r3, [pc, #144]	; (8003f0c <SystemInit+0xdc>)
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003e7e:	4b21      	ldr	r3, [pc, #132]	; (8003f04 <SystemInit+0xd4>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0308 	and.w	r3, r3, #8
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d007      	beq.n	8003e9a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003e8a:	4b1e      	ldr	r3, [pc, #120]	; (8003f04 <SystemInit+0xd4>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f023 030f 	bic.w	r3, r3, #15
 8003e92:	4a1c      	ldr	r2, [pc, #112]	; (8003f04 <SystemInit+0xd4>)
 8003e94:	f043 0307 	orr.w	r3, r3, #7
 8003e98:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003e9a:	4b1b      	ldr	r3, [pc, #108]	; (8003f08 <SystemInit+0xd8>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003ea0:	4b19      	ldr	r3, [pc, #100]	; (8003f08 <SystemInit+0xd8>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003ea6:	4b18      	ldr	r3, [pc, #96]	; (8003f08 <SystemInit+0xd8>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003eac:	4b16      	ldr	r3, [pc, #88]	; (8003f08 <SystemInit+0xd8>)
 8003eae:	4a18      	ldr	r2, [pc, #96]	; (8003f10 <SystemInit+0xe0>)
 8003eb0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003eb2:	4b15      	ldr	r3, [pc, #84]	; (8003f08 <SystemInit+0xd8>)
 8003eb4:	4a17      	ldr	r2, [pc, #92]	; (8003f14 <SystemInit+0xe4>)
 8003eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003eb8:	4b13      	ldr	r3, [pc, #76]	; (8003f08 <SystemInit+0xd8>)
 8003eba:	4a17      	ldr	r2, [pc, #92]	; (8003f18 <SystemInit+0xe8>)
 8003ebc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003ebe:	4b12      	ldr	r3, [pc, #72]	; (8003f08 <SystemInit+0xd8>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003ec4:	4b10      	ldr	r3, [pc, #64]	; (8003f08 <SystemInit+0xd8>)
 8003ec6:	4a14      	ldr	r2, [pc, #80]	; (8003f18 <SystemInit+0xe8>)
 8003ec8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003eca:	4b0f      	ldr	r3, [pc, #60]	; (8003f08 <SystemInit+0xd8>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003ed0:	4b0d      	ldr	r3, [pc, #52]	; (8003f08 <SystemInit+0xd8>)
 8003ed2:	4a11      	ldr	r2, [pc, #68]	; (8003f18 <SystemInit+0xe8>)
 8003ed4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003ed6:	4b0c      	ldr	r3, [pc, #48]	; (8003f08 <SystemInit+0xd8>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003edc:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <SystemInit+0xd8>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a09      	ldr	r2, [pc, #36]	; (8003f08 <SystemInit+0xd8>)
 8003ee2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ee6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003ee8:	4b07      	ldr	r3, [pc, #28]	; (8003f08 <SystemInit+0xd8>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003eee:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <SystemInit+0xec>)
 8003ef0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003ef4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003ef6:	bf00      	nop
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	e000ed00 	.word	0xe000ed00
 8003f04:	52002000 	.word	0x52002000
 8003f08:	58024400 	.word	0x58024400
 8003f0c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003f10:	02020200 	.word	0x02020200
 8003f14:	01ff0000 	.word	0x01ff0000
 8003f18:	01010280 	.word	0x01010280
 8003f1c:	52004000 	.word	0x52004000

08003f20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003f20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003f24:	f7ff ff84 	bl	8003e30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f28:	480c      	ldr	r0, [pc, #48]	; (8003f5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003f2a:	490d      	ldr	r1, [pc, #52]	; (8003f60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003f2c:	4a0d      	ldr	r2, [pc, #52]	; (8003f64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f30:	e002      	b.n	8003f38 <LoopCopyDataInit>

08003f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f36:	3304      	adds	r3, #4

08003f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f3c:	d3f9      	bcc.n	8003f32 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f3e:	4a0a      	ldr	r2, [pc, #40]	; (8003f68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003f40:	4c0a      	ldr	r4, [pc, #40]	; (8003f6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f44:	e001      	b.n	8003f4a <LoopFillZerobss>

08003f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f48:	3204      	adds	r2, #4

08003f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f4c:	d3fb      	bcc.n	8003f46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f4e:	f00c fe67 	bl	8010c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f52:	f7fe fa3d 	bl	80023d0 <main>
  bx  lr
 8003f56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003f58:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003f5c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003f60:	24000098 	.word	0x24000098
  ldr r2, =_sidata
 8003f64:	08011f44 	.word	0x08011f44
  ldr r2, =_sbss
 8003f68:	24000158 	.word	0x24000158
  ldr r4, =_ebss
 8003f6c:	2400103c 	.word	0x2400103c

08003f70 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f70:	e7fe      	b.n	8003f70 <ADC3_IRQHandler>
	...

08003f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f7a:	2003      	movs	r0, #3
 8003f7c:	f003 f9ec 	bl	8007358 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003f80:	f007 f8be 	bl	800b100 <HAL_RCC_GetSysClockFreq>
 8003f84:	4602      	mov	r2, r0
 8003f86:	4b15      	ldr	r3, [pc, #84]	; (8003fdc <HAL_Init+0x68>)
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	0a1b      	lsrs	r3, r3, #8
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	4913      	ldr	r1, [pc, #76]	; (8003fe0 <HAL_Init+0x6c>)
 8003f92:	5ccb      	ldrb	r3, [r1, r3]
 8003f94:	f003 031f 	and.w	r3, r3, #31
 8003f98:	fa22 f303 	lsr.w	r3, r2, r3
 8003f9c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f9e:	4b0f      	ldr	r3, [pc, #60]	; (8003fdc <HAL_Init+0x68>)
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	f003 030f 	and.w	r3, r3, #15
 8003fa6:	4a0e      	ldr	r2, [pc, #56]	; (8003fe0 <HAL_Init+0x6c>)
 8003fa8:	5cd3      	ldrb	r3, [r2, r3]
 8003faa:	f003 031f 	and.w	r3, r3, #31
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb4:	4a0b      	ldr	r2, [pc, #44]	; (8003fe4 <HAL_Init+0x70>)
 8003fb6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003fb8:	4a0b      	ldr	r2, [pc, #44]	; (8003fe8 <HAL_Init+0x74>)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fbe:	2000      	movs	r0, #0
 8003fc0:	f000 f814 	bl	8003fec <HAL_InitTick>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e002      	b.n	8003fd4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003fce:	f7ff f9cb 	bl	8003368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	58024400 	.word	0x58024400
 8003fe0:	08011d98 	.word	0x08011d98
 8003fe4:	2400003c 	.word	0x2400003c
 8003fe8:	24000038 	.word	0x24000038

08003fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003ff4:	4b15      	ldr	r3, [pc, #84]	; (800404c <HAL_InitTick+0x60>)
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e021      	b.n	8004044 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004000:	4b13      	ldr	r3, [pc, #76]	; (8004050 <HAL_InitTick+0x64>)
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	4b11      	ldr	r3, [pc, #68]	; (800404c <HAL_InitTick+0x60>)
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	4619      	mov	r1, r3
 800400a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800400e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004012:	fbb2 f3f3 	udiv	r3, r2, r3
 8004016:	4618      	mov	r0, r3
 8004018:	f003 f9d1 	bl	80073be <HAL_SYSTICK_Config>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e00e      	b.n	8004044 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b0f      	cmp	r3, #15
 800402a:	d80a      	bhi.n	8004042 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800402c:	2200      	movs	r2, #0
 800402e:	6879      	ldr	r1, [r7, #4]
 8004030:	f04f 30ff 	mov.w	r0, #4294967295
 8004034:	f003 f99b 	bl	800736e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004038:	4a06      	ldr	r2, [pc, #24]	; (8004054 <HAL_InitTick+0x68>)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800403e:	2300      	movs	r3, #0
 8004040:	e000      	b.n	8004044 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
}
 8004044:	4618      	mov	r0, r3
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	24000044 	.word	0x24000044
 8004050:	24000038 	.word	0x24000038
 8004054:	24000040 	.word	0x24000040

08004058 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800405c:	4b06      	ldr	r3, [pc, #24]	; (8004078 <HAL_IncTick+0x20>)
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	461a      	mov	r2, r3
 8004062:	4b06      	ldr	r3, [pc, #24]	; (800407c <HAL_IncTick+0x24>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4413      	add	r3, r2
 8004068:	4a04      	ldr	r2, [pc, #16]	; (800407c <HAL_IncTick+0x24>)
 800406a:	6013      	str	r3, [r2, #0]
}
 800406c:	bf00      	nop
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	24000044 	.word	0x24000044
 800407c:	24000ed4 	.word	0x24000ed4

08004080 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  return uwTick;
 8004084:	4b03      	ldr	r3, [pc, #12]	; (8004094 <HAL_GetTick+0x14>)
 8004086:	681b      	ldr	r3, [r3, #0]
}
 8004088:	4618      	mov	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	24000ed4 	.word	0x24000ed4

08004098 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040a0:	f7ff ffee 	bl	8004080 <HAL_GetTick>
 80040a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b0:	d005      	beq.n	80040be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80040b2:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <HAL_Delay+0x44>)
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	461a      	mov	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4413      	add	r3, r2
 80040bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80040be:	bf00      	nop
 80040c0:	f7ff ffde 	bl	8004080 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d8f7      	bhi.n	80040c0 <HAL_Delay+0x28>
  {
  }
}
 80040d0:	bf00      	nop
 80040d2:	bf00      	nop
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	24000044 	.word	0x24000044

080040e0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80040e8:	4b06      	ldr	r3, [pc, #24]	; (8004104 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80040f0:	4904      	ldr	r1, [pc, #16]	; (8004104 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	604b      	str	r3, [r1, #4]
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	58000400 	.word	0x58000400

08004108 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004112:	4b07      	ldr	r3, [pc, #28]	; (8004130 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	43db      	mvns	r3, r3
 800411a:	401a      	ands	r2, r3
 800411c:	4904      	ldr	r1, [pc, #16]	; (8004130 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	4313      	orrs	r3, r2
 8004122:	604b      	str	r3, [r1, #4]
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	58000400 	.word	0x58000400

08004134 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	431a      	orrs	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	609a      	str	r2, [r3, #8]
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800415a:	b480      	push	{r7}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
 8004162:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	609a      	str	r2, [r3, #8]
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004190:	4618      	mov	r0, r3
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800419c:	b480      	push	{r7}
 800419e:	b087      	sub	sp, #28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
 80041a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	3360      	adds	r3, #96	; 0x60
 80041ae:	461a      	mov	r2, r3
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4a10      	ldr	r2, [pc, #64]	; (80041fc <LL_ADC_SetOffset+0x60>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d10b      	bne.n	80041d8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80041d6:	e00b      	b.n	80041f0 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	430b      	orrs	r3, r1
 80041ea:	431a      	orrs	r2, r3
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	601a      	str	r2, [r3, #0]
}
 80041f0:	bf00      	nop
 80041f2:	371c      	adds	r7, #28
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	58026000 	.word	0x58026000

08004200 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3360      	adds	r3, #96	; 0x60
 800420e:	461a      	mov	r2, r3
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004220:	4618      	mov	r0, r3
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	f003 031f 	and.w	r3, r3, #31
 8004246:	6879      	ldr	r1, [r7, #4]
 8004248:	fa01 f303 	lsl.w	r3, r1, r3
 800424c:	431a      	orrs	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	611a      	str	r2, [r3, #16]
}
 8004252:	bf00      	nop
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
	...

08004260 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004260:	b480      	push	{r7}
 8004262:	b087      	sub	sp, #28
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4a0c      	ldr	r2, [pc, #48]	; (80042a0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d00e      	beq.n	8004292 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	3360      	adds	r3, #96	; 0x60
 8004278:	461a      	mov	r2, r3
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4413      	add	r3, r2
 8004280:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	431a      	orrs	r2, r3
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	601a      	str	r2, [r3, #0]
  }
}
 8004292:	bf00      	nop
 8004294:	371c      	adds	r7, #28
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	58026000 	.word	0x58026000

080042a4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4a0c      	ldr	r2, [pc, #48]	; (80042e4 <LL_ADC_SetOffsetSaturation+0x40>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d10e      	bne.n	80042d6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	3360      	adds	r3, #96	; 0x60
 80042bc:	461a      	mov	r2, r3
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	431a      	orrs	r2, r3
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80042d6:	bf00      	nop
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	58026000 	.word	0x58026000

080042e8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4a0c      	ldr	r2, [pc, #48]	; (8004328 <LL_ADC_SetOffsetSign+0x40>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d10e      	bne.n	800431a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	3360      	adds	r3, #96	; 0x60
 8004300:	461a      	mov	r2, r3
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	431a      	orrs	r2, r3
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800431a:	bf00      	nop
 800431c:	371c      	adds	r7, #28
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	58026000 	.word	0x58026000

0800432c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	3360      	adds	r3, #96	; 0x60
 800433c:	461a      	mov	r2, r3
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4413      	add	r3, r2
 8004344:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	4a0c      	ldr	r2, [pc, #48]	; (800437c <LL_ADC_SetOffsetState+0x50>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d108      	bne.n	8004360 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	431a      	orrs	r2, r3
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800435e:	e007      	b.n	8004370 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	431a      	orrs	r2, r3
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	601a      	str	r2, [r3, #0]
}
 8004370:	bf00      	nop
 8004372:	371c      	adds	r7, #28
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	58026000 	.word	0x58026000

08004380 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004394:	2301      	movs	r3, #1
 8004396:	e000      	b.n	800439a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b087      	sub	sp, #28
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	60f8      	str	r0, [r7, #12]
 80043ae:	60b9      	str	r1, [r7, #8]
 80043b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	3330      	adds	r3, #48	; 0x30
 80043b6:	461a      	mov	r2, r3
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	0a1b      	lsrs	r3, r3, #8
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	f003 030c 	and.w	r3, r3, #12
 80043c2:	4413      	add	r3, r2
 80043c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	f003 031f 	and.w	r3, r3, #31
 80043d0:	211f      	movs	r1, #31
 80043d2:	fa01 f303 	lsl.w	r3, r1, r3
 80043d6:	43db      	mvns	r3, r3
 80043d8:	401a      	ands	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	0e9b      	lsrs	r3, r3, #26
 80043de:	f003 011f 	and.w	r1, r3, #31
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	f003 031f 	and.w	r3, r3, #31
 80043e8:	fa01 f303 	lsl.w	r3, r1, r3
 80043ec:	431a      	orrs	r2, r3
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80043f2:	bf00      	nop
 80043f4:	371c      	adds	r7, #28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
 8004406:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f023 0203 	bic.w	r2, r3, #3
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	431a      	orrs	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	60da      	str	r2, [r3, #12]
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f043 0201 	orr.w	r2, r3, #1
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	60da      	str	r2, [r3, #12]
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a08      	ldr	r2, [pc, #32]	; (8004474 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d107      	bne.n	8004466 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f023 0203 	bic.w	r2, r3, #3
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	431a      	orrs	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	60da      	str	r2, [r3, #12]
  }
}
 8004466:	bf00      	nop
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	58026000 	.word	0x58026000

08004478 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004484:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004488:	2b00      	cmp	r3, #0
 800448a:	d101      	bne.n	8004490 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800448c:	2301      	movs	r3, #1
 800448e:	e000      	b.n	8004492 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800449e:	b480      	push	{r7}
 80044a0:	b087      	sub	sp, #28
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	60f8      	str	r0, [r7, #12]
 80044a6:	60b9      	str	r1, [r7, #8]
 80044a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	3314      	adds	r3, #20
 80044ae:	461a      	mov	r2, r3
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	0e5b      	lsrs	r3, r3, #25
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	f003 0304 	and.w	r3, r3, #4
 80044ba:	4413      	add	r3, r2
 80044bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	0d1b      	lsrs	r3, r3, #20
 80044c6:	f003 031f 	and.w	r3, r3, #31
 80044ca:	2107      	movs	r1, #7
 80044cc:	fa01 f303 	lsl.w	r3, r1, r3
 80044d0:	43db      	mvns	r3, r3
 80044d2:	401a      	ands	r2, r3
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	0d1b      	lsrs	r3, r3, #20
 80044d8:	f003 031f 	and.w	r3, r3, #31
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	fa01 f303 	lsl.w	r3, r1, r3
 80044e2:	431a      	orrs	r2, r3
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80044e8:	bf00      	nop
 80044ea:	371c      	adds	r7, #28
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4a1a      	ldr	r2, [pc, #104]	; (800456c <LL_ADC_SetChannelSingleDiff+0x78>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d115      	bne.n	8004534 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004514:	43db      	mvns	r3, r3
 8004516:	401a      	ands	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f003 0318 	and.w	r3, r3, #24
 800451e:	4914      	ldr	r1, [pc, #80]	; (8004570 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004520:	40d9      	lsrs	r1, r3
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	400b      	ands	r3, r1
 8004526:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800452a:	431a      	orrs	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004532:	e014      	b.n	800455e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004540:	43db      	mvns	r3, r3
 8004542:	401a      	ands	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f003 0318 	and.w	r3, r3, #24
 800454a:	4909      	ldr	r1, [pc, #36]	; (8004570 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800454c:	40d9      	lsrs	r1, r3
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	400b      	ands	r3, r1
 8004552:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004556:	431a      	orrs	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 800455e:	bf00      	nop
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	58026000 	.word	0x58026000
 8004570:	000fffff 	.word	0x000fffff

08004574 <LL_ADC_SetAnalogWDMonitChannels>:
  *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
  *         (2) On STM32H7, parameter available only on ADC instance: ADC2.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	330c      	adds	r3, #12
 8004584:	4618      	mov	r0, r3
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	0d1b      	lsrs	r3, r3, #20
 800458a:	f003 0103 	and.w	r1, r3, #3
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f003 0201 	and.w	r2, r3, #1
 8004594:	4613      	mov	r3, r2
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	4413      	add	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	440b      	add	r3, r1
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4403      	add	r3, r0
 80045a2:	617b      	str	r3, [r7, #20]
                                                      + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68b9      	ldr	r1, [r7, #8]
 80045aa:	4b08      	ldr	r3, [pc, #32]	; (80045cc <LL_ADC_SetAnalogWDMonitChannels+0x58>)
 80045ac:	400b      	ands	r3, r1
 80045ae:	43db      	mvns	r3, r3
 80045b0:	401a      	ands	r2, r3
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	400b      	ands	r3, r1
 80045b8:	431a      	orrs	r2, r3
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 80045be:	bf00      	nop
 80045c0:	371c      	adds	r7, #28
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	7dcfffff 	.word	0x7dcfffff

080045d0 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdHighValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue, uint32_t AWDThresholdLowValue)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b089      	sub	sp, #36	; 0x24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
 80045dc:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  if (ADCx == ADC3)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	4a29      	ldr	r2, [pc, #164]	; (8004688 <LL_ADC_ConfigAnalogWDThresholds+0xb8>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d115      	bne.n	8004612 <LL_ADC_ConfigAnalogWDThresholds+0x42>
  {
    uint32_t __IO *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	3320      	adds	r3, #32
 80045ea:	461a      	mov	r2, r3
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	0d1b      	lsrs	r3, r3, #20
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	f003 030c 	and.w	r3, r3, #12
 80045f6:	4413      	add	r3, r2
 80045f8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	0419      	lsls	r1, r3, #16
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	430b      	orrs	r3, r1
 800460a:	431a      	orrs	r2, r3
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	601a      	str	r2, [r3, #0]
                                                         + (LL_ADC_AWD_THRESHOLD_HIGH));

    MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdLowValue);
    MODIFY_REG(*preg2, ADC_HTR_HT, AWDThresholdHighValue);
  }
}
 8004610:	e034      	b.n	800467c <LL_ADC_ConfigAnalogWDThresholds+0xac>
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS) * 2UL)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	3320      	adds	r3, #32
 8004616:	4618      	mov	r0, r3
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	0d1b      	lsrs	r3, r3, #20
 800461c:	f003 0103 	and.w	r1, r3, #3
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	f003 0201 	and.w	r2, r3, #1
 8004626:	4613      	mov	r3, r2
 8004628:	011b      	lsls	r3, r3, #4
 800462a:	4413      	add	r3, r2
 800462c:	440b      	add	r3, r1
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	4403      	add	r3, r0
 8004634:	61fb      	str	r3, [r7, #28]
    __IO uint32_t *preg2 = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS) * 2UL)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	3320      	adds	r3, #32
 800463a:	4618      	mov	r0, r3
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	0d1b      	lsrs	r3, r3, #20
 8004640:	f003 0103 	and.w	r1, r3, #3
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f003 0201 	and.w	r2, r3, #1
 800464a:	4613      	mov	r3, r2
 800464c:	011b      	lsls	r3, r3, #4
 800464e:	4413      	add	r3, r2
 8004650:	440b      	add	r3, r1
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	3301      	adds	r3, #1
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4403      	add	r3, r0
 800465a:	61bb      	str	r3, [r7, #24]
    MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdLowValue);
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 427c 	and.w	r2, r3, #4227858432	; 0xfc000000
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	431a      	orrs	r2, r3
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	601a      	str	r2, [r3, #0]
    MODIFY_REG(*preg2, ADC_HTR_HT, AWDThresholdHighValue);
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 427c 	and.w	r2, r3, #4227858432	; 0xfc000000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	431a      	orrs	r2, r3
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	601a      	str	r2, [r3, #0]
}
 800467c:	bf00      	nop
 800467e:	3724      	adds	r7, #36	; 0x24
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	58026000 	.word	0x58026000

0800468c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f003 031f 	and.w	r3, r3, #31
}
 800469c:	4618      	mov	r0, r3
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	4b04      	ldr	r3, [pc, #16]	; (80046e4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80046d2:	4013      	ands	r3, r2
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	6093      	str	r3, [r2, #8]
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr
 80046e4:	5fffffc0 	.word	0x5fffffc0

080046e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046fc:	d101      	bne.n	8004702 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80046fe:	2301      	movs	r3, #1
 8004700:	e000      	b.n	8004704 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	4b05      	ldr	r3, [pc, #20]	; (8004734 <LL_ADC_EnableInternalRegulator+0x24>)
 800471e:	4013      	ands	r3, r2
 8004720:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	6fffffc0 	.word	0x6fffffc0

08004738 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004748:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800474c:	d101      	bne.n	8004752 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800474e:	2301      	movs	r3, #1
 8004750:	e000      	b.n	8004754 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	4b05      	ldr	r3, [pc, #20]	; (8004784 <LL_ADC_Enable+0x24>)
 800476e:	4013      	ands	r3, r2
 8004770:	f043 0201 	orr.w	r2, r3, #1
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	7fffffc0 	.word	0x7fffffc0

08004788 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	4b05      	ldr	r3, [pc, #20]	; (80047ac <LL_ADC_Disable+0x24>)
 8004796:	4013      	ands	r3, r2
 8004798:	f043 0202 	orr.w	r2, r3, #2
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	7fffffc0 	.word	0x7fffffc0

080047b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d101      	bne.n	80047c8 <LL_ADC_IsEnabled+0x18>
 80047c4:	2301      	movs	r3, #1
 80047c6:	e000      	b.n	80047ca <LL_ADC_IsEnabled+0x1a>
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d101      	bne.n	80047ee <LL_ADC_IsDisableOngoing+0x18>
 80047ea:	2301      	movs	r3, #1
 80047ec:	e000      	b.n	80047f0 <LL_ADC_IsDisableOngoing+0x1a>
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	4b05      	ldr	r3, [pc, #20]	; (8004820 <LL_ADC_REG_StartConversion+0x24>)
 800480a:	4013      	ands	r3, r2
 800480c:	f043 0204 	orr.w	r2, r3, #4
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	7fffffc0 	.word	0x7fffffc0

08004824 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b04      	cmp	r3, #4
 8004836:	d101      	bne.n	800483c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004838:	2301      	movs	r3, #1
 800483a:	e000      	b.n	800483e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 0308 	and.w	r3, r3, #8
 800485a:	2b08      	cmp	r3, #8
 800485c:	d101      	bne.n	8004862 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2280      	movs	r2, #128	; 0x80
 800487c:	601a      	str	r2, [r3, #0]
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004898:	601a      	str	r2, [r3, #0]
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048b4:	601a      	str	r2, [r3, #0]
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b083      	sub	sp, #12
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	605a      	str	r2, [r3, #4]
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	605a      	str	r2, [r3, #4]
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8004902:	b480      	push	{r7}
 8004904:	b083      	sub	sp, #12
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	605a      	str	r2, [r3, #4]
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8004922:	b480      	push	{r7}
 8004924:	b083      	sub	sp, #12
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	605a      	str	r2, [r3, #4]
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8004942:	b480      	push	{r7}
 8004944:	b083      	sub	sp, #12
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	605a      	str	r2, [r3, #4]
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	605a      	str	r2, [r3, #4]
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
	...

08004984 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004984:	b590      	push	{r4, r7, lr}
 8004986:	b089      	sub	sp, #36	; 0x24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004990:	2300      	movs	r3, #0
 8004992:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e1ee      	b.n	8004d7c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d109      	bne.n	80049c0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f7fe fcf5 	bl	800339c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7ff fe8f 	bl	80046e8 <LL_ADC_IsDeepPowerDownEnabled>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d004      	beq.n	80049da <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7ff fe75 	bl	80046c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4618      	mov	r0, r3
 80049e0:	f7ff feaa 	bl	8004738 <LL_ADC_IsInternalRegulatorEnabled>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d114      	bne.n	8004a14 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7ff fe8e 	bl	8004710 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049f4:	4b8e      	ldr	r3, [pc, #568]	; (8004c30 <HAL_ADC_Init+0x2ac>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	099b      	lsrs	r3, r3, #6
 80049fa:	4a8e      	ldr	r2, [pc, #568]	; (8004c34 <HAL_ADC_Init+0x2b0>)
 80049fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004a00:	099b      	lsrs	r3, r3, #6
 8004a02:	3301      	adds	r3, #1
 8004a04:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004a06:	e002      	b.n	8004a0e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1f9      	bne.n	8004a08 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7ff fe8d 	bl	8004738 <LL_ADC_IsInternalRegulatorEnabled>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10d      	bne.n	8004a40 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a28:	f043 0210 	orr.w	r2, r3, #16
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a34:	f043 0201 	orr.w	r2, r3, #1
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7ff feed 	bl	8004824 <LL_ADC_REG_IsConversionOngoing>
 8004a4a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a50:	f003 0310 	and.w	r3, r3, #16
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f040 8188 	bne.w	8004d6a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f040 8184 	bne.w	8004d6a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a66:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004a6a:	f043 0202 	orr.w	r2, r3, #2
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7ff fe9a 	bl	80047b0 <LL_ADC_IsEnabled>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d136      	bne.n	8004af0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a6c      	ldr	r2, [pc, #432]	; (8004c38 <HAL_ADC_Init+0x2b4>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d004      	beq.n	8004a96 <HAL_ADC_Init+0x112>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a6a      	ldr	r2, [pc, #424]	; (8004c3c <HAL_ADC_Init+0x2b8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d10e      	bne.n	8004ab4 <HAL_ADC_Init+0x130>
 8004a96:	4868      	ldr	r0, [pc, #416]	; (8004c38 <HAL_ADC_Init+0x2b4>)
 8004a98:	f7ff fe8a 	bl	80047b0 <LL_ADC_IsEnabled>
 8004a9c:	4604      	mov	r4, r0
 8004a9e:	4867      	ldr	r0, [pc, #412]	; (8004c3c <HAL_ADC_Init+0x2b8>)
 8004aa0:	f7ff fe86 	bl	80047b0 <LL_ADC_IsEnabled>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	4323      	orrs	r3, r4
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	bf0c      	ite	eq
 8004aac:	2301      	moveq	r3, #1
 8004aae:	2300      	movne	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	e008      	b.n	8004ac6 <HAL_ADC_Init+0x142>
 8004ab4:	4862      	ldr	r0, [pc, #392]	; (8004c40 <HAL_ADC_Init+0x2bc>)
 8004ab6:	f7ff fe7b 	bl	80047b0 <LL_ADC_IsEnabled>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	bf0c      	ite	eq
 8004ac0:	2301      	moveq	r3, #1
 8004ac2:	2300      	movne	r3, #0
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d012      	beq.n	8004af0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a5a      	ldr	r2, [pc, #360]	; (8004c38 <HAL_ADC_Init+0x2b4>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d004      	beq.n	8004ade <HAL_ADC_Init+0x15a>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a58      	ldr	r2, [pc, #352]	; (8004c3c <HAL_ADC_Init+0x2b8>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d101      	bne.n	8004ae2 <HAL_ADC_Init+0x15e>
 8004ade:	4a59      	ldr	r2, [pc, #356]	; (8004c44 <HAL_ADC_Init+0x2c0>)
 8004ae0:	e000      	b.n	8004ae4 <HAL_ADC_Init+0x160>
 8004ae2:	4a59      	ldr	r2, [pc, #356]	; (8004c48 <HAL_ADC_Init+0x2c4>)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4610      	mov	r0, r2
 8004aec:	f7ff fb22 	bl	8004134 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a52      	ldr	r2, [pc, #328]	; (8004c40 <HAL_ADC_Init+0x2bc>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d129      	bne.n	8004b4e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	7e5b      	ldrb	r3, [r3, #25]
 8004afe:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004b04:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8004b0a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	2b08      	cmp	r3, #8
 8004b12:	d013      	beq.n	8004b3c <HAL_ADC_Init+0x1b8>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	2b0c      	cmp	r3, #12
 8004b1a:	d00d      	beq.n	8004b38 <HAL_ADC_Init+0x1b4>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	2b1c      	cmp	r3, #28
 8004b22:	d007      	beq.n	8004b34 <HAL_ADC_Init+0x1b0>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	2b18      	cmp	r3, #24
 8004b2a:	d101      	bne.n	8004b30 <HAL_ADC_Init+0x1ac>
 8004b2c:	2318      	movs	r3, #24
 8004b2e:	e006      	b.n	8004b3e <HAL_ADC_Init+0x1ba>
 8004b30:	2300      	movs	r3, #0
 8004b32:	e004      	b.n	8004b3e <HAL_ADC_Init+0x1ba>
 8004b34:	2310      	movs	r3, #16
 8004b36:	e002      	b.n	8004b3e <HAL_ADC_Init+0x1ba>
 8004b38:	2308      	movs	r3, #8
 8004b3a:	e000      	b.n	8004b3e <HAL_ADC_Init+0x1ba>
 8004b3c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8004b3e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b46:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	61bb      	str	r3, [r7, #24]
 8004b4c:	e00e      	b.n	8004b6c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	7e5b      	ldrb	r3, [r3, #25]
 8004b52:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004b58:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004b5e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b66:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d106      	bne.n	8004b84 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	045b      	lsls	r3, r3, #17
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d009      	beq.n	8004ba0 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b90:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b98:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a26      	ldr	r2, [pc, #152]	; (8004c40 <HAL_ADC_Init+0x2bc>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d115      	bne.n	8004bd6 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68da      	ldr	r2, [r3, #12]
 8004bb0:	4b26      	ldr	r3, [pc, #152]	; (8004c4c <HAL_ADC_Init+0x2c8>)
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	6812      	ldr	r2, [r2, #0]
 8004bb8:	69b9      	ldr	r1, [r7, #24]
 8004bba:	430b      	orrs	r3, r1
 8004bbc:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	611a      	str	r2, [r3, #16]
 8004bd4:	e009      	b.n	8004bea <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68da      	ldr	r2, [r3, #12]
 8004bdc:	4b1c      	ldr	r3, [pc, #112]	; (8004c50 <HAL_ADC_Init+0x2cc>)
 8004bde:	4013      	ands	r3, r2
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	6812      	ldr	r2, [r2, #0]
 8004be4:	69b9      	ldr	r1, [r7, #24]
 8004be6:	430b      	orrs	r3, r1
 8004be8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7ff fe18 	bl	8004824 <LL_ADC_REG_IsConversionOngoing>
 8004bf4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7ff fe25 	bl	800484a <LL_ADC_INJ_IsConversionOngoing>
 8004c00:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f040 808e 	bne.w	8004d26 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f040 808a 	bne.w	8004d26 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a0a      	ldr	r2, [pc, #40]	; (8004c40 <HAL_ADC_Init+0x2bc>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d11b      	bne.n	8004c54 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	7e1b      	ldrb	r3, [r3, #24]
 8004c20:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c28:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	61bb      	str	r3, [r7, #24]
 8004c2e:	e018      	b.n	8004c62 <HAL_ADC_Init+0x2de>
 8004c30:	24000038 	.word	0x24000038
 8004c34:	053e2d63 	.word	0x053e2d63
 8004c38:	40022000 	.word	0x40022000
 8004c3c:	40022100 	.word	0x40022100
 8004c40:	58026000 	.word	0x58026000
 8004c44:	40022300 	.word	0x40022300
 8004c48:	58026300 	.word	0x58026300
 8004c4c:	fff04007 	.word	0xfff04007
 8004c50:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	7e1b      	ldrb	r3, [r3, #24]
 8004c58:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68da      	ldr	r2, [r3, #12]
 8004c68:	4b46      	ldr	r3, [pc, #280]	; (8004d84 <HAL_ADC_Init+0x400>)
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6812      	ldr	r2, [r2, #0]
 8004c70:	69b9      	ldr	r1, [r7, #24]
 8004c72:	430b      	orrs	r3, r1
 8004c74:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d137      	bne.n	8004cf0 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c84:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a3f      	ldr	r2, [pc, #252]	; (8004d88 <HAL_ADC_Init+0x404>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d116      	bne.n	8004cbe <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	691a      	ldr	r2, [r3, #16]
 8004c96:	4b3d      	ldr	r3, [pc, #244]	; (8004d8c <HAL_ADC_Init+0x408>)
 8004c98:	4013      	ands	r3, r2
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004ca2:	4311      	orrs	r1, r2
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004ca8:	4311      	orrs	r1, r2
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0201 	orr.w	r2, r2, #1
 8004cba:	611a      	str	r2, [r3, #16]
 8004cbc:	e020      	b.n	8004d00 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	691a      	ldr	r2, [r3, #16]
 8004cc4:	4b32      	ldr	r3, [pc, #200]	; (8004d90 <HAL_ADC_Init+0x40c>)
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004ccc:	3a01      	subs	r2, #1
 8004cce:	0411      	lsls	r1, r2, #16
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004cd4:	4311      	orrs	r1, r2
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004cda:	4311      	orrs	r1, r2
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f042 0201 	orr.w	r2, r2, #1
 8004cec:	611a      	str	r2, [r3, #16]
 8004cee:	e007      	b.n	8004d00 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	691a      	ldr	r2, [r3, #16]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 0201 	bic.w	r2, r2, #1
 8004cfe:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a1b      	ldr	r2, [pc, #108]	; (8004d88 <HAL_ADC_Init+0x404>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d002      	beq.n	8004d26 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f001 fd99 	bl	8006858 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d10c      	bne.n	8004d48 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d34:	f023 010f 	bic.w	r1, r3, #15
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	69db      	ldr	r3, [r3, #28]
 8004d3c:	1e5a      	subs	r2, r3, #1
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	631a      	str	r2, [r3, #48]	; 0x30
 8004d46:	e007      	b.n	8004d58 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 020f 	bic.w	r2, r2, #15
 8004d56:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d5c:	f023 0303 	bic.w	r3, r3, #3
 8004d60:	f043 0201 	orr.w	r2, r3, #1
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	661a      	str	r2, [r3, #96]	; 0x60
 8004d68:	e007      	b.n	8004d7a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d6e:	f043 0210 	orr.w	r2, r3, #16
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004d7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3724      	adds	r7, #36	; 0x24
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd90      	pop	{r4, r7, pc}
 8004d84:	ffffbffc 	.word	0xffffbffc
 8004d88:	58026000 	.word	0x58026000
 8004d8c:	fc00f81f 	.word	0xfc00f81f
 8004d90:	fc00f81e 	.word	0xfc00f81e

08004d94 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a60      	ldr	r2, [pc, #384]	; (8004f28 <HAL_ADC_Start_DMA+0x194>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d004      	beq.n	8004db4 <HAL_ADC_Start_DMA+0x20>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a5f      	ldr	r2, [pc, #380]	; (8004f2c <HAL_ADC_Start_DMA+0x198>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d101      	bne.n	8004db8 <HAL_ADC_Start_DMA+0x24>
 8004db4:	4b5e      	ldr	r3, [pc, #376]	; (8004f30 <HAL_ADC_Start_DMA+0x19c>)
 8004db6:	e000      	b.n	8004dba <HAL_ADC_Start_DMA+0x26>
 8004db8:	4b5e      	ldr	r3, [pc, #376]	; (8004f34 <HAL_ADC_Start_DMA+0x1a0>)
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7ff fc66 	bl	800468c <LL_ADC_GetMultimode>
 8004dc0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7ff fd2c 	bl	8004824 <LL_ADC_REG_IsConversionOngoing>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f040 80a2 	bne.w	8004f18 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d101      	bne.n	8004de2 <HAL_ADC_Start_DMA+0x4e>
 8004dde:	2302      	movs	r3, #2
 8004de0:	e09d      	b.n	8004f1e <HAL_ADC_Start_DMA+0x18a>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d006      	beq.n	8004dfe <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	2b05      	cmp	r3, #5
 8004df4:	d003      	beq.n	8004dfe <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	2b09      	cmp	r3, #9
 8004dfa:	f040 8086 	bne.w	8004f0a <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f001 fbac 	bl	800655c <ADC_Enable>
 8004e04:	4603      	mov	r3, r0
 8004e06:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004e08:	7dfb      	ldrb	r3, [r7, #23]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d178      	bne.n	8004f00 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004e12:	4b49      	ldr	r3, [pc, #292]	; (8004f38 <HAL_ADC_Start_DMA+0x1a4>)
 8004e14:	4013      	ands	r3, r2
 8004e16:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a42      	ldr	r2, [pc, #264]	; (8004f2c <HAL_ADC_Start_DMA+0x198>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d002      	beq.n	8004e2e <HAL_ADC_Start_DMA+0x9a>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	e000      	b.n	8004e30 <HAL_ADC_Start_DMA+0x9c>
 8004e2e:	4b3e      	ldr	r3, [pc, #248]	; (8004f28 <HAL_ADC_Start_DMA+0x194>)
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	6812      	ldr	r2, [r2, #0]
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d002      	beq.n	8004e3e <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d105      	bne.n	8004e4a <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d006      	beq.n	8004e64 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e5a:	f023 0206 	bic.w	r2, r3, #6
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	665a      	str	r2, [r3, #100]	; 0x64
 8004e62:	e002      	b.n	8004e6a <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	665a      	str	r2, [r3, #100]	; 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6e:	4a33      	ldr	r2, [pc, #204]	; (8004f3c <HAL_ADC_Start_DMA+0x1a8>)
 8004e70:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e76:	4a32      	ldr	r2, [pc, #200]	; (8004f40 <HAL_ADC_Start_DMA+0x1ac>)
 8004e78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e7e:	4a31      	ldr	r2, [pc, #196]	; (8004f44 <HAL_ADC_Start_DMA+0x1b0>)
 8004e80:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	221c      	movs	r2, #28
 8004e88:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f042 0210 	orr.w	r2, r2, #16
 8004ea0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a28      	ldr	r2, [pc, #160]	; (8004f48 <HAL_ADC_Start_DMA+0x1b4>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d10f      	bne.n	8004ecc <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004eb6:	005b      	lsls	r3, r3, #1
 8004eb8:	4619      	mov	r1, r3
 8004eba:	4610      	mov	r0, r2
 8004ebc:	f7ff fac2 	bl	8004444 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7ff faad 	bl	8004424 <LL_ADC_EnableDMAReq>
 8004eca:	e007      	b.n	8004edc <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	4610      	mov	r0, r2
 8004ed8:	f7ff fa91 	bl	80043fe <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3340      	adds	r3, #64	; 0x40
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f002 fdcc 	bl	8007a88 <HAL_DMA_Start_IT>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7ff fc7f 	bl	80047fc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004efe:	e00d      	b.n	8004f1c <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (tmp_hal_status == HAL_OK)
 8004f08:	e008      	b.n	8004f1c <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8004f16:	e001      	b.n	8004f1c <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004f18:	2302      	movs	r3, #2
 8004f1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3718      	adds	r7, #24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	40022000 	.word	0x40022000
 8004f2c:	40022100 	.word	0x40022100
 8004f30:	40022300 	.word	0x40022300
 8004f34:	58026300 	.word	0x58026300
 8004f38:	fffff0fe 	.word	0xfffff0fe
 8004f3c:	0800672f 	.word	0x0800672f
 8004f40:	08006807 	.word	0x08006807
 8004f44:	08006823 	.word	0x08006823
 8004f48:	58026000 	.word	0x58026000

08004f4c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b08a      	sub	sp, #40	; 0x28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004f54:	2300      	movs	r3, #0
 8004f56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a87      	ldr	r2, [pc, #540]	; (800518c <HAL_ADC_IRQHandler+0x240>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d004      	beq.n	8004f7c <HAL_ADC_IRQHandler+0x30>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a86      	ldr	r2, [pc, #536]	; (8005190 <HAL_ADC_IRQHandler+0x244>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d101      	bne.n	8004f80 <HAL_ADC_IRQHandler+0x34>
 8004f7c:	4b85      	ldr	r3, [pc, #532]	; (8005194 <HAL_ADC_IRQHandler+0x248>)
 8004f7e:	e000      	b.n	8004f82 <HAL_ADC_IRQHandler+0x36>
 8004f80:	4b85      	ldr	r3, [pc, #532]	; (8005198 <HAL_ADC_IRQHandler+0x24c>)
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7ff fb82 	bl	800468c <LL_ADC_GetMultimode>
 8004f88:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d017      	beq.n	8004fc4 <HAL_ADC_IRQHandler+0x78>
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d012      	beq.n	8004fc4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fa2:	f003 0310 	and.w	r3, r3, #16
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d105      	bne.n	8004fb6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fae:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f001 fee8 	bl	8006d8c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2202      	movs	r2, #2
 8004fc2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	f003 0304 	and.w	r3, r3, #4
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d004      	beq.n	8004fd8 <HAL_ADC_IRQHandler+0x8c>
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	f003 0304 	and.w	r3, r3, #4
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10a      	bne.n	8004fee <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f000 8083 	beq.w	80050ea <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	f003 0308 	and.w	r3, r3, #8
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d07d      	beq.n	80050ea <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ff2:	f003 0310 	and.w	r3, r3, #16
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d105      	bne.n	8005006 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ffe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4618      	mov	r0, r3
 800500c:	f7ff f9b8 	bl	8004380 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d062      	beq.n	80050dc <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a5d      	ldr	r2, [pc, #372]	; (8005190 <HAL_ADC_IRQHandler+0x244>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d002      	beq.n	8005026 <HAL_ADC_IRQHandler+0xda>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	e000      	b.n	8005028 <HAL_ADC_IRQHandler+0xdc>
 8005026:	4b59      	ldr	r3, [pc, #356]	; (800518c <HAL_ADC_IRQHandler+0x240>)
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6812      	ldr	r2, [r2, #0]
 800502c:	4293      	cmp	r3, r2
 800502e:	d008      	beq.n	8005042 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d005      	beq.n	8005042 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2b05      	cmp	r3, #5
 800503a:	d002      	beq.n	8005042 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	2b09      	cmp	r3, #9
 8005040:	d104      	bne.n	800504c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	623b      	str	r3, [r7, #32]
 800504a:	e00c      	b.n	8005066 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a4f      	ldr	r2, [pc, #316]	; (8005190 <HAL_ADC_IRQHandler+0x244>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d002      	beq.n	800505c <HAL_ADC_IRQHandler+0x110>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	e000      	b.n	800505e <HAL_ADC_IRQHandler+0x112>
 800505c:	4b4b      	ldr	r3, [pc, #300]	; (800518c <HAL_ADC_IRQHandler+0x240>)
 800505e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d135      	bne.n	80050dc <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0308 	and.w	r3, r3, #8
 800507a:	2b08      	cmp	r3, #8
 800507c:	d12e      	bne.n	80050dc <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4618      	mov	r0, r3
 8005084:	f7ff fbce 	bl	8004824 <LL_ADC_REG_IsConversionOngoing>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d11a      	bne.n	80050c4 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 020c 	bic.w	r2, r2, #12
 800509c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d112      	bne.n	80050dc <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ba:	f043 0201 	orr.w	r2, r3, #1
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	661a      	str	r2, [r3, #96]	; 0x60
 80050c2:	e00b      	b.n	80050dc <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050c8:	f043 0210 	orr.w	r2, r3, #16
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050d4:	f043 0201 	orr.w	r2, r3, #1
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f7fc fcf1 	bl	8001ac4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	220c      	movs	r2, #12
 80050e8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	f003 0320 	and.w	r3, r3, #32
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d004      	beq.n	80050fe <HAL_ADC_IRQHandler+0x1b2>
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	f003 0320 	and.w	r3, r3, #32
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10b      	bne.n	8005116 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 80a0 	beq.w	800524a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 809a 	beq.w	800524a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800511a:	f003 0310 	and.w	r3, r3, #16
 800511e:	2b00      	cmp	r3, #0
 8005120:	d105      	bne.n	800512e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005126:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4618      	mov	r0, r3
 8005134:	f7ff f9a0 	bl	8004478 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005138:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4618      	mov	r0, r3
 8005140:	f7ff f91e 	bl	8004380 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005144:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a11      	ldr	r2, [pc, #68]	; (8005190 <HAL_ADC_IRQHandler+0x244>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d002      	beq.n	8005156 <HAL_ADC_IRQHandler+0x20a>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	e000      	b.n	8005158 <HAL_ADC_IRQHandler+0x20c>
 8005156:	4b0d      	ldr	r3, [pc, #52]	; (800518c <HAL_ADC_IRQHandler+0x240>)
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	6812      	ldr	r2, [r2, #0]
 800515c:	4293      	cmp	r3, r2
 800515e:	d008      	beq.n	8005172 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d005      	beq.n	8005172 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	2b06      	cmp	r3, #6
 800516a:	d002      	beq.n	8005172 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	2b07      	cmp	r3, #7
 8005170:	d104      	bne.n	800517c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	623b      	str	r3, [r7, #32]
 800517a:	e014      	b.n	80051a6 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a03      	ldr	r2, [pc, #12]	; (8005190 <HAL_ADC_IRQHandler+0x244>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d00a      	beq.n	800519c <HAL_ADC_IRQHandler+0x250>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	e008      	b.n	800519e <HAL_ADC_IRQHandler+0x252>
 800518c:	40022000 	.word	0x40022000
 8005190:	40022100 	.word	0x40022100
 8005194:	40022300 	.word	0x40022300
 8005198:	58026300 	.word	0x58026300
 800519c:	4b84      	ldr	r3, [pc, #528]	; (80053b0 <HAL_ADC_IRQHandler+0x464>)
 800519e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d047      	beq.n	800523c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d007      	beq.n	80051c6 <HAL_ADC_IRQHandler+0x27a>
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d03f      	beq.n	800523c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80051bc:	6a3b      	ldr	r3, [r7, #32]
 80051be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d13a      	bne.n	800523c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d0:	2b40      	cmp	r3, #64	; 0x40
 80051d2:	d133      	bne.n	800523c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80051d4:	6a3b      	ldr	r3, [r7, #32]
 80051d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d12e      	bne.n	800523c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7ff fb31 	bl	800484a <LL_ADC_INJ_IsConversionOngoing>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d11a      	bne.n	8005224 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80051fc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005202:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800520e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005212:	2b00      	cmp	r3, #0
 8005214:	d112      	bne.n	800523c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800521a:	f043 0201 	orr.w	r2, r3, #1
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	661a      	str	r2, [r3, #96]	; 0x60
 8005222:	e00b      	b.n	800523c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005228:	f043 0210 	orr.w	r2, r3, #16
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005234:	f043 0201 	orr.w	r2, r3, #1
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f001 fd7d 	bl	8006d3c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2260      	movs	r2, #96	; 0x60
 8005248:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005250:	2b00      	cmp	r3, #0
 8005252:	d011      	beq.n	8005278 <HAL_ADC_IRQHandler+0x32c>
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00c      	beq.n	8005278 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005262:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f8b2 	bl	80053d4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2280      	movs	r2, #128	; 0x80
 8005276:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800527e:	2b00      	cmp	r3, #0
 8005280:	d012      	beq.n	80052a8 <HAL_ADC_IRQHandler+0x35c>
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00d      	beq.n	80052a8 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005290:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f001 fd63 	bl	8006d64 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052a6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d012      	beq.n	80052d8 <HAL_ADC_IRQHandler+0x38c>
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00d      	beq.n	80052d8 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f001 fd55 	bl	8006d78 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052d6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f003 0310 	and.w	r3, r3, #16
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d043      	beq.n	800536a <HAL_ADC_IRQHandler+0x41e>
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	f003 0310 	and.w	r3, r3, #16
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d03e      	beq.n	800536a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d102      	bne.n	80052fa <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80052f4:	2301      	movs	r3, #1
 80052f6:	627b      	str	r3, [r7, #36]	; 0x24
 80052f8:	e021      	b.n	800533e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d015      	beq.n	800532c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a2a      	ldr	r2, [pc, #168]	; (80053b0 <HAL_ADC_IRQHandler+0x464>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d004      	beq.n	8005314 <HAL_ADC_IRQHandler+0x3c8>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a29      	ldr	r2, [pc, #164]	; (80053b4 <HAL_ADC_IRQHandler+0x468>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d101      	bne.n	8005318 <HAL_ADC_IRQHandler+0x3cc>
 8005314:	4b28      	ldr	r3, [pc, #160]	; (80053b8 <HAL_ADC_IRQHandler+0x46c>)
 8005316:	e000      	b.n	800531a <HAL_ADC_IRQHandler+0x3ce>
 8005318:	4b28      	ldr	r3, [pc, #160]	; (80053bc <HAL_ADC_IRQHandler+0x470>)
 800531a:	4618      	mov	r0, r3
 800531c:	f7ff f9c4 	bl	80046a8 <LL_ADC_GetMultiDMATransfer>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00b      	beq.n	800533e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8005326:	2301      	movs	r3, #1
 8005328:	627b      	str	r3, [r7, #36]	; 0x24
 800532a:	e008      	b.n	800533e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f003 0303 	and.w	r3, r3, #3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d001      	beq.n	800533e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800533a:	2301      	movs	r3, #1
 800533c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	2b01      	cmp	r3, #1
 8005342:	d10e      	bne.n	8005362 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005348:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005354:	f043 0202 	orr.w	r2, r3, #2
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7fc fb85 	bl	8001a6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2210      	movs	r2, #16
 8005368:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005370:	2b00      	cmp	r3, #0
 8005372:	d018      	beq.n	80053a6 <HAL_ADC_IRQHandler+0x45a>
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800537a:	2b00      	cmp	r3, #0
 800537c:	d013      	beq.n	80053a6 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005382:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800538e:	f043 0208 	orr.w	r2, r3, #8
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800539e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f001 fcd5 	bl	8006d50 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80053a6:	bf00      	nop
 80053a8:	3728      	adds	r7, #40	; 0x28
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	40022000 	.word	0x40022000
 80053b4:	40022100 	.word	0x40022100
 80053b8:	40022300 	.word	0x40022300
 80053bc:	58026300 	.word	0x58026300

080053c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80053e8:	b590      	push	{r4, r7, lr}
 80053ea:	b0b9      	sub	sp, #228	; 0xe4
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053f2:	2300      	movs	r3, #0
 80053f4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80053f8:	2300      	movs	r3, #0
 80053fa:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005402:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	4aa9      	ldr	r2, [pc, #676]	; (80056b0 <HAL_ADC_ConfigChannel+0x2c8>)
 800540a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005412:	2b01      	cmp	r3, #1
 8005414:	d102      	bne.n	800541c <HAL_ADC_ConfigChannel+0x34>
 8005416:	2302      	movs	r3, #2
 8005418:	f000 bcfa 	b.w	8005e10 <HAL_ADC_ConfigChannel+0xa28>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4618      	mov	r0, r3
 800542a:	f7ff f9fb 	bl	8004824 <LL_ADC_REG_IsConversionOngoing>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	f040 84de 	bne.w	8005df2 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a9e      	ldr	r2, [pc, #632]	; (80056b4 <HAL_ADC_ConfigChannel+0x2cc>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d033      	beq.n	80054a8 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005448:	2b00      	cmp	r3, #0
 800544a:	d108      	bne.n	800545e <HAL_ADC_ConfigChannel+0x76>
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	0e9b      	lsrs	r3, r3, #26
 8005452:	f003 031f 	and.w	r3, r3, #31
 8005456:	2201      	movs	r2, #1
 8005458:	fa02 f303 	lsl.w	r3, r2, r3
 800545c:	e01d      	b.n	800549a <HAL_ADC_ConfigChannel+0xb2>
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005466:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800546a:	fa93 f3a3 	rbit	r3, r3
 800546e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005472:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005476:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800547a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8005482:	2320      	movs	r3, #32
 8005484:	e004      	b.n	8005490 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8005486:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800548a:	fab3 f383 	clz	r3, r3
 800548e:	b2db      	uxtb	r3, r3
 8005490:	f003 031f 	and.w	r3, r3, #31
 8005494:	2201      	movs	r2, #1
 8005496:	fa02 f303 	lsl.w	r3, r2, r3
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	6812      	ldr	r2, [r2, #0]
 800549e:	69d1      	ldr	r1, [r2, #28]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	6812      	ldr	r2, [r2, #0]
 80054a4:	430b      	orrs	r3, r1
 80054a6:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6818      	ldr	r0, [r3, #0]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	6859      	ldr	r1, [r3, #4]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	461a      	mov	r2, r3
 80054b6:	f7fe ff76 	bl	80043a6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4618      	mov	r0, r3
 80054c0:	f7ff f9b0 	bl	8004824 <LL_ADC_REG_IsConversionOngoing>
 80054c4:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7ff f9bc 	bl	800484a <LL_ADC_INJ_IsConversionOngoing>
 80054d2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80054d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f040 8270 	bne.w	80059c0 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80054e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f040 826b 	bne.w	80059c0 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6818      	ldr	r0, [r3, #0]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	6819      	ldr	r1, [r3, #0]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	461a      	mov	r2, r3
 80054f8:	f7fe ffd1 	bl	800449e <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a6c      	ldr	r2, [pc, #432]	; (80056b4 <HAL_ADC_ConfigChannel+0x2cc>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d10d      	bne.n	8005522 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	695a      	ldr	r2, [r3, #20]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	08db      	lsrs	r3, r3, #3
 8005512:	f003 0303 	and.w	r3, r3, #3
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	fa02 f303 	lsl.w	r3, r2, r3
 800551c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005520:	e032      	b.n	8005588 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005522:	4b65      	ldr	r3, [pc, #404]	; (80056b8 <HAL_ADC_ConfigChannel+0x2d0>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800552a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800552e:	d10b      	bne.n	8005548 <HAL_ADC_ConfigChannel+0x160>
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	695a      	ldr	r2, [r3, #20]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	089b      	lsrs	r3, r3, #2
 800553c:	f003 0307 	and.w	r3, r3, #7
 8005540:	005b      	lsls	r3, r3, #1
 8005542:	fa02 f303 	lsl.w	r3, r2, r3
 8005546:	e01d      	b.n	8005584 <HAL_ADC_ConfigChannel+0x19c>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	f003 0310 	and.w	r3, r3, #16
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10b      	bne.n	800556e <HAL_ADC_ConfigChannel+0x186>
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	695a      	ldr	r2, [r3, #20]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	089b      	lsrs	r3, r3, #2
 8005562:	f003 0307 	and.w	r3, r3, #7
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	fa02 f303 	lsl.w	r3, r2, r3
 800556c:	e00a      	b.n	8005584 <HAL_ADC_ConfigChannel+0x19c>
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	695a      	ldr	r2, [r3, #20]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	089b      	lsrs	r3, r3, #2
 800557a:	f003 0304 	and.w	r3, r3, #4
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	fa02 f303 	lsl.w	r3, r2, r3
 8005584:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	2b04      	cmp	r3, #4
 800558e:	d048      	beq.n	8005622 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6818      	ldr	r0, [r3, #0]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	6919      	ldr	r1, [r3, #16]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055a0:	f7fe fdfc 	bl	800419c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a42      	ldr	r2, [pc, #264]	; (80056b4 <HAL_ADC_ConfigChannel+0x2cc>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d119      	bne.n	80055e2 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6818      	ldr	r0, [r3, #0]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	6919      	ldr	r1, [r3, #16]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	461a      	mov	r2, r3
 80055bc:	f7fe fe94 	bl	80042e8 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6818      	ldr	r0, [r3, #0]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	6919      	ldr	r1, [r3, #16]
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d102      	bne.n	80055d8 <HAL_ADC_ConfigChannel+0x1f0>
 80055d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055d6:	e000      	b.n	80055da <HAL_ADC_ConfigChannel+0x1f2>
 80055d8:	2300      	movs	r3, #0
 80055da:	461a      	mov	r2, r3
 80055dc:	f7fe fe62 	bl	80042a4 <LL_ADC_SetOffsetSaturation>
 80055e0:	e1ee      	b.n	80059c0 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6818      	ldr	r0, [r3, #0]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	6919      	ldr	r1, [r3, #16]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d102      	bne.n	80055fa <HAL_ADC_ConfigChannel+0x212>
 80055f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80055f8:	e000      	b.n	80055fc <HAL_ADC_ConfigChannel+0x214>
 80055fa:	2300      	movs	r3, #0
 80055fc:	461a      	mov	r2, r3
 80055fe:	f7fe fe2f 	bl	8004260 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6818      	ldr	r0, [r3, #0]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	6919      	ldr	r1, [r3, #16]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	7e1b      	ldrb	r3, [r3, #24]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d102      	bne.n	8005618 <HAL_ADC_ConfigChannel+0x230>
 8005612:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005616:	e000      	b.n	800561a <HAL_ADC_ConfigChannel+0x232>
 8005618:	2300      	movs	r3, #0
 800561a:	461a      	mov	r2, r3
 800561c:	f7fe fe06 	bl	800422c <LL_ADC_SetDataRightShift>
 8005620:	e1ce      	b.n	80059c0 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a23      	ldr	r2, [pc, #140]	; (80056b4 <HAL_ADC_ConfigChannel+0x2cc>)
 8005628:	4293      	cmp	r3, r2
 800562a:	f040 8181 	bne.w	8005930 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2100      	movs	r1, #0
 8005634:	4618      	mov	r0, r3
 8005636:	f7fe fde3 	bl	8004200 <LL_ADC_GetOffsetChannel>
 800563a:	4603      	mov	r3, r0
 800563c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10a      	bne.n	800565a <HAL_ADC_ConfigChannel+0x272>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2100      	movs	r1, #0
 800564a:	4618      	mov	r0, r3
 800564c:	f7fe fdd8 	bl	8004200 <LL_ADC_GetOffsetChannel>
 8005650:	4603      	mov	r3, r0
 8005652:	0e9b      	lsrs	r3, r3, #26
 8005654:	f003 021f 	and.w	r2, r3, #31
 8005658:	e01e      	b.n	8005698 <HAL_ADC_ConfigChannel+0x2b0>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2100      	movs	r1, #0
 8005660:	4618      	mov	r0, r3
 8005662:	f7fe fdcd 	bl	8004200 <LL_ADC_GetOffsetChannel>
 8005666:	4603      	mov	r3, r0
 8005668:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800566c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005670:	fa93 f3a3 	rbit	r3, r3
 8005674:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8005678:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800567c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8005680:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8005688:	2320      	movs	r3, #32
 800568a:	e004      	b.n	8005696 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 800568c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005690:	fab3 f383 	clz	r3, r3
 8005694:	b2db      	uxtb	r3, r3
 8005696:	461a      	mov	r2, r3
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10b      	bne.n	80056bc <HAL_ADC_ConfigChannel+0x2d4>
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	0e9b      	lsrs	r3, r3, #26
 80056aa:	f003 031f 	and.w	r3, r3, #31
 80056ae:	e01e      	b.n	80056ee <HAL_ADC_ConfigChannel+0x306>
 80056b0:	47ff0000 	.word	0x47ff0000
 80056b4:	58026000 	.word	0x58026000
 80056b8:	5c001000 	.word	0x5c001000
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056c8:	fa93 f3a3 	rbit	r3, r3
 80056cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80056d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80056d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80056d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d101      	bne.n	80056e4 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80056e0:	2320      	movs	r3, #32
 80056e2:	e004      	b.n	80056ee <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 80056e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80056e8:	fab3 f383 	clz	r3, r3
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d106      	bne.n	8005700 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2200      	movs	r2, #0
 80056f8:	2100      	movs	r1, #0
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7fe fe16 	bl	800432c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2101      	movs	r1, #1
 8005706:	4618      	mov	r0, r3
 8005708:	f7fe fd7a 	bl	8004200 <LL_ADC_GetOffsetChannel>
 800570c:	4603      	mov	r3, r0
 800570e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10a      	bne.n	800572c <HAL_ADC_ConfigChannel+0x344>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2101      	movs	r1, #1
 800571c:	4618      	mov	r0, r3
 800571e:	f7fe fd6f 	bl	8004200 <LL_ADC_GetOffsetChannel>
 8005722:	4603      	mov	r3, r0
 8005724:	0e9b      	lsrs	r3, r3, #26
 8005726:	f003 021f 	and.w	r2, r3, #31
 800572a:	e01e      	b.n	800576a <HAL_ADC_ConfigChannel+0x382>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2101      	movs	r1, #1
 8005732:	4618      	mov	r0, r3
 8005734:	f7fe fd64 	bl	8004200 <LL_ADC_GetOffsetChannel>
 8005738:	4603      	mov	r3, r0
 800573a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800573e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005742:	fa93 f3a3 	rbit	r3, r3
 8005746:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800574a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800574e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8005752:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005756:	2b00      	cmp	r3, #0
 8005758:	d101      	bne.n	800575e <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 800575a:	2320      	movs	r3, #32
 800575c:	e004      	b.n	8005768 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800575e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005762:	fab3 f383 	clz	r3, r3
 8005766:	b2db      	uxtb	r3, r3
 8005768:	461a      	mov	r2, r3
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005772:	2b00      	cmp	r3, #0
 8005774:	d105      	bne.n	8005782 <HAL_ADC_ConfigChannel+0x39a>
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	0e9b      	lsrs	r3, r3, #26
 800577c:	f003 031f 	and.w	r3, r3, #31
 8005780:	e018      	b.n	80057b4 <HAL_ADC_ConfigChannel+0x3cc>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800578a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800578e:	fa93 f3a3 	rbit	r3, r3
 8005792:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8005796:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800579a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800579e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80057a6:	2320      	movs	r3, #32
 80057a8:	e004      	b.n	80057b4 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80057aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057ae:	fab3 f383 	clz	r3, r3
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d106      	bne.n	80057c6 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2200      	movs	r2, #0
 80057be:	2101      	movs	r1, #1
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7fe fdb3 	bl	800432c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2102      	movs	r1, #2
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7fe fd17 	bl	8004200 <LL_ADC_GetOffsetChannel>
 80057d2:	4603      	mov	r3, r0
 80057d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10a      	bne.n	80057f2 <HAL_ADC_ConfigChannel+0x40a>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2102      	movs	r1, #2
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7fe fd0c 	bl	8004200 <LL_ADC_GetOffsetChannel>
 80057e8:	4603      	mov	r3, r0
 80057ea:	0e9b      	lsrs	r3, r3, #26
 80057ec:	f003 021f 	and.w	r2, r3, #31
 80057f0:	e01e      	b.n	8005830 <HAL_ADC_ConfigChannel+0x448>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2102      	movs	r1, #2
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7fe fd01 	bl	8004200 <LL_ADC_GetOffsetChannel>
 80057fe:	4603      	mov	r3, r0
 8005800:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005804:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005808:	fa93 f3a3 	rbit	r3, r3
 800580c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8005810:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005814:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8005818:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8005820:	2320      	movs	r3, #32
 8005822:	e004      	b.n	800582e <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8005824:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005828:	fab3 f383 	clz	r3, r3
 800582c:	b2db      	uxtb	r3, r3
 800582e:	461a      	mov	r2, r3
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005838:	2b00      	cmp	r3, #0
 800583a:	d105      	bne.n	8005848 <HAL_ADC_ConfigChannel+0x460>
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	0e9b      	lsrs	r3, r3, #26
 8005842:	f003 031f 	and.w	r3, r3, #31
 8005846:	e014      	b.n	8005872 <HAL_ADC_ConfigChannel+0x48a>
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800584e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005850:	fa93 f3a3 	rbit	r3, r3
 8005854:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8005856:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005858:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800585c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005860:	2b00      	cmp	r3, #0
 8005862:	d101      	bne.n	8005868 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8005864:	2320      	movs	r3, #32
 8005866:	e004      	b.n	8005872 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8005868:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800586c:	fab3 f383 	clz	r3, r3
 8005870:	b2db      	uxtb	r3, r3
 8005872:	429a      	cmp	r2, r3
 8005874:	d106      	bne.n	8005884 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2200      	movs	r2, #0
 800587c:	2102      	movs	r1, #2
 800587e:	4618      	mov	r0, r3
 8005880:	f7fe fd54 	bl	800432c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2103      	movs	r1, #3
 800588a:	4618      	mov	r0, r3
 800588c:	f7fe fcb8 	bl	8004200 <LL_ADC_GetOffsetChannel>
 8005890:	4603      	mov	r3, r0
 8005892:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10a      	bne.n	80058b0 <HAL_ADC_ConfigChannel+0x4c8>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2103      	movs	r1, #3
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7fe fcad 	bl	8004200 <LL_ADC_GetOffsetChannel>
 80058a6:	4603      	mov	r3, r0
 80058a8:	0e9b      	lsrs	r3, r3, #26
 80058aa:	f003 021f 	and.w	r2, r3, #31
 80058ae:	e017      	b.n	80058e0 <HAL_ADC_ConfigChannel+0x4f8>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2103      	movs	r1, #3
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7fe fca2 	bl	8004200 <LL_ADC_GetOffsetChannel>
 80058bc:	4603      	mov	r3, r0
 80058be:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058c2:	fa93 f3a3 	rbit	r3, r3
 80058c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80058c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ca:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80058cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80058d2:	2320      	movs	r3, #32
 80058d4:	e003      	b.n	80058de <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80058d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058d8:	fab3 f383 	clz	r3, r3
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	461a      	mov	r2, r3
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d105      	bne.n	80058f8 <HAL_ADC_ConfigChannel+0x510>
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	0e9b      	lsrs	r3, r3, #26
 80058f2:	f003 031f 	and.w	r3, r3, #31
 80058f6:	e011      	b.n	800591c <HAL_ADC_ConfigChannel+0x534>
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005900:	fa93 f3a3 	rbit	r3, r3
 8005904:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8005906:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005908:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800590a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800590c:	2b00      	cmp	r3, #0
 800590e:	d101      	bne.n	8005914 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8005910:	2320      	movs	r3, #32
 8005912:	e003      	b.n	800591c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8005914:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005916:	fab3 f383 	clz	r3, r3
 800591a:	b2db      	uxtb	r3, r3
 800591c:	429a      	cmp	r2, r3
 800591e:	d14f      	bne.n	80059c0 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2200      	movs	r2, #0
 8005926:	2103      	movs	r1, #3
 8005928:	4618      	mov	r0, r3
 800592a:	f7fe fcff 	bl	800432c <LL_ADC_SetOffsetState>
 800592e:	e047      	b.n	80059c0 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005936:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	069b      	lsls	r3, r3, #26
 8005940:	429a      	cmp	r2, r3
 8005942:	d107      	bne.n	8005954 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005952:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800595a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	069b      	lsls	r3, r3, #26
 8005964:	429a      	cmp	r2, r3
 8005966:	d107      	bne.n	8005978 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005976:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800597e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	069b      	lsls	r3, r3, #26
 8005988:	429a      	cmp	r2, r3
 800598a:	d107      	bne.n	800599c <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800599a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	069b      	lsls	r3, r3, #26
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d107      	bne.n	80059c0 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80059be:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7fe fef3 	bl	80047b0 <LL_ADC_IsEnabled>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f040 8219 	bne.w	8005e04 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6818      	ldr	r0, [r3, #0]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	6819      	ldr	r1, [r3, #0]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	461a      	mov	r2, r3
 80059e0:	f7fe fd88 	bl	80044f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	4aa1      	ldr	r2, [pc, #644]	; (8005c70 <HAL_ADC_ConfigChannel+0x888>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	f040 812e 	bne.w	8005c4c <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10b      	bne.n	8005a18 <HAL_ADC_ConfigChannel+0x630>
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	0e9b      	lsrs	r3, r3, #26
 8005a06:	3301      	adds	r3, #1
 8005a08:	f003 031f 	and.w	r3, r3, #31
 8005a0c:	2b09      	cmp	r3, #9
 8005a0e:	bf94      	ite	ls
 8005a10:	2301      	movls	r3, #1
 8005a12:	2300      	movhi	r3, #0
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	e019      	b.n	8005a4c <HAL_ADC_ConfigChannel+0x664>
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a20:	fa93 f3a3 	rbit	r3, r3
 8005a24:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a28:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005a2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8005a30:	2320      	movs	r3, #32
 8005a32:	e003      	b.n	8005a3c <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8005a34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a36:	fab3 f383 	clz	r3, r3
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	f003 031f 	and.w	r3, r3, #31
 8005a42:	2b09      	cmp	r3, #9
 8005a44:	bf94      	ite	ls
 8005a46:	2301      	movls	r3, #1
 8005a48:	2300      	movhi	r3, #0
 8005a4a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d079      	beq.n	8005b44 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d107      	bne.n	8005a6c <HAL_ADC_ConfigChannel+0x684>
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	0e9b      	lsrs	r3, r3, #26
 8005a62:	3301      	adds	r3, #1
 8005a64:	069b      	lsls	r3, r3, #26
 8005a66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a6a:	e015      	b.n	8005a98 <HAL_ADC_ConfigChannel+0x6b0>
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a74:	fa93 f3a3 	rbit	r3, r3
 8005a78:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a7c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d101      	bne.n	8005a88 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8005a84:	2320      	movs	r3, #32
 8005a86:	e003      	b.n	8005a90 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8005a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a8a:	fab3 f383 	clz	r3, r3
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	3301      	adds	r3, #1
 8005a92:	069b      	lsls	r3, r3, #26
 8005a94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d109      	bne.n	8005ab8 <HAL_ADC_ConfigChannel+0x6d0>
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	0e9b      	lsrs	r3, r3, #26
 8005aaa:	3301      	adds	r3, #1
 8005aac:	f003 031f 	and.w	r3, r3, #31
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ab6:	e017      	b.n	8005ae8 <HAL_ADC_ConfigChannel+0x700>
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005abe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ac0:	fa93 f3a3 	rbit	r3, r3
 8005ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ac8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005aca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d101      	bne.n	8005ad4 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8005ad0:	2320      	movs	r3, #32
 8005ad2:	e003      	b.n	8005adc <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8005ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ad6:	fab3 f383 	clz	r3, r3
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	3301      	adds	r3, #1
 8005ade:	f003 031f 	and.w	r3, r3, #31
 8005ae2:	2101      	movs	r1, #1
 8005ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ae8:	ea42 0103 	orr.w	r1, r2, r3
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10a      	bne.n	8005b0e <HAL_ADC_ConfigChannel+0x726>
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	0e9b      	lsrs	r3, r3, #26
 8005afe:	3301      	adds	r3, #1
 8005b00:	f003 021f 	and.w	r2, r3, #31
 8005b04:	4613      	mov	r3, r2
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	4413      	add	r3, r2
 8005b0a:	051b      	lsls	r3, r3, #20
 8005b0c:	e018      	b.n	8005b40 <HAL_ADC_ConfigChannel+0x758>
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b16:	fa93 f3a3 	rbit	r3, r3
 8005b1a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8005b26:	2320      	movs	r3, #32
 8005b28:	e003      	b.n	8005b32 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8005b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2c:	fab3 f383 	clz	r3, r3
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	3301      	adds	r3, #1
 8005b34:	f003 021f 	and.w	r2, r3, #31
 8005b38:	4613      	mov	r3, r2
 8005b3a:	005b      	lsls	r3, r3, #1
 8005b3c:	4413      	add	r3, r2
 8005b3e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b40:	430b      	orrs	r3, r1
 8005b42:	e07e      	b.n	8005c42 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d107      	bne.n	8005b60 <HAL_ADC_ConfigChannel+0x778>
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	0e9b      	lsrs	r3, r3, #26
 8005b56:	3301      	adds	r3, #1
 8005b58:	069b      	lsls	r3, r3, #26
 8005b5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005b5e:	e015      	b.n	8005b8c <HAL_ADC_ConfigChannel+0x7a4>
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b68:	fa93 f3a3 	rbit	r3, r3
 8005b6c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8005b78:	2320      	movs	r3, #32
 8005b7a:	e003      	b.n	8005b84 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8005b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7e:	fab3 f383 	clz	r3, r3
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	3301      	adds	r3, #1
 8005b86:	069b      	lsls	r3, r3, #26
 8005b88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d109      	bne.n	8005bac <HAL_ADC_ConfigChannel+0x7c4>
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	0e9b      	lsrs	r3, r3, #26
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	f003 031f 	and.w	r3, r3, #31
 8005ba4:	2101      	movs	r1, #1
 8005ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8005baa:	e017      	b.n	8005bdc <HAL_ADC_ConfigChannel+0x7f4>
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	fa93 f3a3 	rbit	r3, r3
 8005bb8:	61bb      	str	r3, [r7, #24]
  return result;
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005bbe:	6a3b      	ldr	r3, [r7, #32]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d101      	bne.n	8005bc8 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8005bc4:	2320      	movs	r3, #32
 8005bc6:	e003      	b.n	8005bd0 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	fab3 f383 	clz	r3, r3
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	f003 031f 	and.w	r3, r3, #31
 8005bd6:	2101      	movs	r1, #1
 8005bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bdc:	ea42 0103 	orr.w	r1, r2, r3
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10d      	bne.n	8005c08 <HAL_ADC_ConfigChannel+0x820>
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	0e9b      	lsrs	r3, r3, #26
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	f003 021f 	and.w	r2, r3, #31
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	005b      	lsls	r3, r3, #1
 8005bfc:	4413      	add	r3, r2
 8005bfe:	3b1e      	subs	r3, #30
 8005c00:	051b      	lsls	r3, r3, #20
 8005c02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005c06:	e01b      	b.n	8005c40 <HAL_ADC_ConfigChannel+0x858>
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	fa93 f3a3 	rbit	r3, r3
 8005c14:	60fb      	str	r3, [r7, #12]
  return result;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8005c20:	2320      	movs	r3, #32
 8005c22:	e003      	b.n	8005c2c <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	fab3 f383 	clz	r3, r3
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	f003 021f 	and.w	r2, r3, #31
 8005c32:	4613      	mov	r3, r2
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	4413      	add	r3, r2
 8005c38:	3b1e      	subs	r3, #30
 8005c3a:	051b      	lsls	r3, r3, #20
 8005c3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c40:	430b      	orrs	r3, r1
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	6892      	ldr	r2, [r2, #8]
 8005c46:	4619      	mov	r1, r3
 8005c48:	f7fe fc29 	bl	800449e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f280 80d7 	bge.w	8005e04 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a06      	ldr	r2, [pc, #24]	; (8005c74 <HAL_ADC_ConfigChannel+0x88c>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d004      	beq.n	8005c6a <HAL_ADC_ConfigChannel+0x882>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a04      	ldr	r2, [pc, #16]	; (8005c78 <HAL_ADC_ConfigChannel+0x890>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d10a      	bne.n	8005c80 <HAL_ADC_ConfigChannel+0x898>
 8005c6a:	4b04      	ldr	r3, [pc, #16]	; (8005c7c <HAL_ADC_ConfigChannel+0x894>)
 8005c6c:	e009      	b.n	8005c82 <HAL_ADC_ConfigChannel+0x89a>
 8005c6e:	bf00      	nop
 8005c70:	47ff0000 	.word	0x47ff0000
 8005c74:	40022000 	.word	0x40022000
 8005c78:	40022100 	.word	0x40022100
 8005c7c:	40022300 	.word	0x40022300
 8005c80:	4b65      	ldr	r3, [pc, #404]	; (8005e18 <HAL_ADC_ConfigChannel+0xa30>)
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7fe fa7c 	bl	8004180 <LL_ADC_GetCommonPathInternalCh>
 8005c88:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a62      	ldr	r2, [pc, #392]	; (8005e1c <HAL_ADC_ConfigChannel+0xa34>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d004      	beq.n	8005ca0 <HAL_ADC_ConfigChannel+0x8b8>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a61      	ldr	r2, [pc, #388]	; (8005e20 <HAL_ADC_ConfigChannel+0xa38>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d10e      	bne.n	8005cbe <HAL_ADC_ConfigChannel+0x8d6>
 8005ca0:	485e      	ldr	r0, [pc, #376]	; (8005e1c <HAL_ADC_ConfigChannel+0xa34>)
 8005ca2:	f7fe fd85 	bl	80047b0 <LL_ADC_IsEnabled>
 8005ca6:	4604      	mov	r4, r0
 8005ca8:	485d      	ldr	r0, [pc, #372]	; (8005e20 <HAL_ADC_ConfigChannel+0xa38>)
 8005caa:	f7fe fd81 	bl	80047b0 <LL_ADC_IsEnabled>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	4323      	orrs	r3, r4
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	bf0c      	ite	eq
 8005cb6:	2301      	moveq	r3, #1
 8005cb8:	2300      	movne	r3, #0
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	e008      	b.n	8005cd0 <HAL_ADC_ConfigChannel+0x8e8>
 8005cbe:	4859      	ldr	r0, [pc, #356]	; (8005e24 <HAL_ADC_ConfigChannel+0xa3c>)
 8005cc0:	f7fe fd76 	bl	80047b0 <LL_ADC_IsEnabled>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	bf0c      	ite	eq
 8005cca:	2301      	moveq	r3, #1
 8005ccc:	2300      	movne	r3, #0
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f000 8084 	beq.w	8005dde <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a53      	ldr	r2, [pc, #332]	; (8005e28 <HAL_ADC_ConfigChannel+0xa40>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d132      	bne.n	8005d46 <HAL_ADC_ConfigChannel+0x95e>
 8005ce0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ce4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d12c      	bne.n	8005d46 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a4c      	ldr	r2, [pc, #304]	; (8005e24 <HAL_ADC_ConfigChannel+0xa3c>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	f040 8086 	bne.w	8005e04 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a47      	ldr	r2, [pc, #284]	; (8005e1c <HAL_ADC_ConfigChannel+0xa34>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d004      	beq.n	8005d0c <HAL_ADC_ConfigChannel+0x924>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a46      	ldr	r2, [pc, #280]	; (8005e20 <HAL_ADC_ConfigChannel+0xa38>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d101      	bne.n	8005d10 <HAL_ADC_ConfigChannel+0x928>
 8005d0c:	4a47      	ldr	r2, [pc, #284]	; (8005e2c <HAL_ADC_ConfigChannel+0xa44>)
 8005d0e:	e000      	b.n	8005d12 <HAL_ADC_ConfigChannel+0x92a>
 8005d10:	4a41      	ldr	r2, [pc, #260]	; (8005e18 <HAL_ADC_ConfigChannel+0xa30>)
 8005d12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	f7fe fa1c 	bl	800415a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005d22:	4b43      	ldr	r3, [pc, #268]	; (8005e30 <HAL_ADC_ConfigChannel+0xa48>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	099b      	lsrs	r3, r3, #6
 8005d28:	4a42      	ldr	r2, [pc, #264]	; (8005e34 <HAL_ADC_ConfigChannel+0xa4c>)
 8005d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d2e:	099b      	lsrs	r3, r3, #6
 8005d30:	3301      	adds	r3, #1
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005d36:	e002      	b.n	8005d3e <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1f9      	bne.n	8005d38 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005d44:	e05e      	b.n	8005e04 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a3b      	ldr	r2, [pc, #236]	; (8005e38 <HAL_ADC_ConfigChannel+0xa50>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d120      	bne.n	8005d92 <HAL_ADC_ConfigChannel+0x9aa>
 8005d50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d11a      	bne.n	8005d92 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a30      	ldr	r2, [pc, #192]	; (8005e24 <HAL_ADC_ConfigChannel+0xa3c>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d14e      	bne.n	8005e04 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a2c      	ldr	r2, [pc, #176]	; (8005e1c <HAL_ADC_ConfigChannel+0xa34>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d004      	beq.n	8005d7a <HAL_ADC_ConfigChannel+0x992>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a2a      	ldr	r2, [pc, #168]	; (8005e20 <HAL_ADC_ConfigChannel+0xa38>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d101      	bne.n	8005d7e <HAL_ADC_ConfigChannel+0x996>
 8005d7a:	4a2c      	ldr	r2, [pc, #176]	; (8005e2c <HAL_ADC_ConfigChannel+0xa44>)
 8005d7c:	e000      	b.n	8005d80 <HAL_ADC_ConfigChannel+0x998>
 8005d7e:	4a26      	ldr	r2, [pc, #152]	; (8005e18 <HAL_ADC_ConfigChannel+0xa30>)
 8005d80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d88:	4619      	mov	r1, r3
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	f7fe f9e5 	bl	800415a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005d90:	e038      	b.n	8005e04 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a29      	ldr	r2, [pc, #164]	; (8005e3c <HAL_ADC_ConfigChannel+0xa54>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d133      	bne.n	8005e04 <HAL_ADC_ConfigChannel+0xa1c>
 8005d9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005da0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d12d      	bne.n	8005e04 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a1d      	ldr	r2, [pc, #116]	; (8005e24 <HAL_ADC_ConfigChannel+0xa3c>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d128      	bne.n	8005e04 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a19      	ldr	r2, [pc, #100]	; (8005e1c <HAL_ADC_ConfigChannel+0xa34>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d004      	beq.n	8005dc6 <HAL_ADC_ConfigChannel+0x9de>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a17      	ldr	r2, [pc, #92]	; (8005e20 <HAL_ADC_ConfigChannel+0xa38>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d101      	bne.n	8005dca <HAL_ADC_ConfigChannel+0x9e2>
 8005dc6:	4a19      	ldr	r2, [pc, #100]	; (8005e2c <HAL_ADC_ConfigChannel+0xa44>)
 8005dc8:	e000      	b.n	8005dcc <HAL_ADC_ConfigChannel+0x9e4>
 8005dca:	4a13      	ldr	r2, [pc, #76]	; (8005e18 <HAL_ADC_ConfigChannel+0xa30>)
 8005dcc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005dd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4610      	mov	r0, r2
 8005dd8:	f7fe f9bf 	bl	800415a <LL_ADC_SetCommonPathInternalCh>
 8005ddc:	e012      	b.n	8005e04 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005de2:	f043 0220 	orr.w	r2, r3, #32
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8005df0:	e008      	b.n	8005e04 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005df6:	f043 0220 	orr.w	r2, r3, #32
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005e0c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	37e4      	adds	r7, #228	; 0xe4
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd90      	pop	{r4, r7, pc}
 8005e18:	58026300 	.word	0x58026300
 8005e1c:	40022000 	.word	0x40022000
 8005e20:	40022100 	.word	0x40022100
 8005e24:	58026000 	.word	0x58026000
 8005e28:	c7520000 	.word	0xc7520000
 8005e2c:	40022300 	.word	0x40022300
 8005e30:	24000038 	.word	0x24000038
 8005e34:	053e2d63 	.word	0x053e2d63
 8005e38:	c3210000 	.word	0xc3210000
 8005e3c:	cb840000 	.word	0xcb840000

08005e40 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b094      	sub	sp, #80	; 0x50
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e58:	d003      	beq.n	8005e62 <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8005e5e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }

#if defined(ADC_VER_V5_V90)

  if (hadc->Instance == ADC3)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a8c      	ldr	r2, [pc, #560]	; (8006098 <HAL_ADC_AnalogWDGConfig+0x258>)
 8005e68:	4293      	cmp	r3, r2
      assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d101      	bne.n	8005e78 <HAL_ADC_AnalogWDGConfig+0x38>
 8005e74:	2302      	movs	r3, #2
 8005e76:	e36b      	b.n	8006550 <HAL_ADC_AnalogWDGConfig+0x710>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7fe fccd 	bl	8004824 <LL_ADC_REG_IsConversionOngoing>
 8005e8a:	6438      	str	r0, [r7, #64]	; 0x40
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7fe fcda 	bl	800484a <LL_ADC_INJ_IsConversionOngoing>
 8005e96:	63f8      	str	r0, [r7, #60]	; 0x3c
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f040 8349 	bne.w	8006532 <HAL_ADC_AnalogWDGConfig+0x6f2>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f040 8345 	bne.w	8006532 <HAL_ADC_AnalogWDGConfig+0x6f2>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a7b      	ldr	r2, [pc, #492]	; (800609c <HAL_ADC_AnalogWDGConfig+0x25c>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	f040 8131 	bne.w	8006116 <HAL_ADC_AnalogWDGConfig+0x2d6>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8005ebc:	d034      	beq.n	8005f28 <HAL_ADC_AnalogWDGConfig+0xe8>
 8005ebe:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8005ec2:	d856      	bhi.n	8005f72 <HAL_ADC_AnalogWDGConfig+0x132>
 8005ec4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ec8:	d04b      	beq.n	8005f62 <HAL_ADC_AnalogWDGConfig+0x122>
 8005eca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ece:	d850      	bhi.n	8005f72 <HAL_ADC_AnalogWDGConfig+0x132>
 8005ed0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8005ed4:	d01b      	beq.n	8005f0e <HAL_ADC_AnalogWDGConfig+0xce>
 8005ed6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8005eda:	d84a      	bhi.n	8005f72 <HAL_ADC_AnalogWDGConfig+0x132>
 8005edc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ee0:	d037      	beq.n	8005f52 <HAL_ADC_AnalogWDGConfig+0x112>
 8005ee2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ee6:	d844      	bhi.n	8005f72 <HAL_ADC_AnalogWDGConfig+0x132>
 8005ee8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005eec:	d029      	beq.n	8005f42 <HAL_ADC_AnalogWDGConfig+0x102>
 8005eee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ef2:	d13e      	bne.n	8005f72 <HAL_ADC_AnalogWDGConfig+0x132>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6818      	ldr	r0, [r3, #0]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8005f00:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8005f04:	461a      	mov	r2, r3
 8005f06:	4965      	ldr	r1, [pc, #404]	; (800609c <HAL_ADC_AnalogWDGConfig+0x25c>)
 8005f08:	f7fe fb34 	bl	8004574 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 8005f0c:	e039      	b.n	8005f82 <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6818      	ldr	r0, [r3, #0]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8005f1a:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 8005f1e:	461a      	mov	r2, r3
 8005f20:	495e      	ldr	r1, [pc, #376]	; (800609c <HAL_ADC_AnalogWDGConfig+0x25c>)
 8005f22:	f7fe fb27 	bl	8004574 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 8005f26:	e02c      	b.n	8005f82 <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6818      	ldr	r0, [r3, #0]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8005f34:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 8005f38:	461a      	mov	r2, r3
 8005f3a:	4958      	ldr	r1, [pc, #352]	; (800609c <HAL_ADC_AnalogWDGConfig+0x25c>)
 8005f3c:	f7fe fb1a 	bl	8004574 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8005f40:	e01f      	b.n	8005f82 <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a56      	ldr	r2, [pc, #344]	; (80060a0 <HAL_ADC_AnalogWDGConfig+0x260>)
 8005f48:	4954      	ldr	r1, [pc, #336]	; (800609c <HAL_ADC_AnalogWDGConfig+0x25c>)
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7fe fb12 	bl	8004574 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8005f50:	e017      	b.n	8005f82 <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a53      	ldr	r2, [pc, #332]	; (80060a4 <HAL_ADC_AnalogWDGConfig+0x264>)
 8005f58:	4950      	ldr	r1, [pc, #320]	; (800609c <HAL_ADC_AnalogWDGConfig+0x25c>)
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fe fb0a 	bl	8004574 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8005f60:	e00f      	b.n	8005f82 <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a50      	ldr	r2, [pc, #320]	; (80060a8 <HAL_ADC_AnalogWDGConfig+0x268>)
 8005f68:	494c      	ldr	r1, [pc, #304]	; (800609c <HAL_ADC_AnalogWDGConfig+0x25c>)
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7fe fb02 	bl	8004574 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8005f70:	e007      	b.n	8005f82 <HAL_ADC_AnalogWDGConfig+0x142>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2200      	movs	r2, #0
 8005f78:	4948      	ldr	r1, [pc, #288]	; (800609c <HAL_ADC_AnalogWDGConfig+0x25c>)
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fe fafa 	bl	8004574 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8005f80:	bf00      	nop
      }

      /* Shift the offset in function of the selected ADC resolution:         */
      /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
      /* are set to 0                                                         */
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8005f82:	4b4a      	ldr	r3, [pc, #296]	; (80060ac <HAL_ADC_AnalogWDGConfig+0x26c>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005f8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f8e:	d10b      	bne.n	8005fa8 <HAL_ADC_AnalogWDGConfig+0x168>
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	691a      	ldr	r2, [r3, #16]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	089b      	lsrs	r3, r3, #2
 8005f9c:	f003 0307 	and.w	r3, r3, #7
 8005fa0:	005b      	lsls	r3, r3, #1
 8005fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa6:	e01d      	b.n	8005fe4 <HAL_ADC_AnalogWDGConfig+0x1a4>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	f003 0310 	and.w	r3, r3, #16
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10b      	bne.n	8005fce <HAL_ADC_AnalogWDGConfig+0x18e>
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	691a      	ldr	r2, [r3, #16]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	089b      	lsrs	r3, r3, #2
 8005fc2:	f003 0307 	and.w	r3, r3, #7
 8005fc6:	005b      	lsls	r3, r3, #1
 8005fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fcc:	e00a      	b.n	8005fe4 <HAL_ADC_AnalogWDGConfig+0x1a4>
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	691a      	ldr	r2, [r3, #16]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	089b      	lsrs	r3, r3, #2
 8005fda:	f003 0304 	and.w	r3, r3, #4
 8005fde:	005b      	lsls	r3, r3, #1
 8005fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe4:	64bb      	str	r3, [r7, #72]	; 0x48
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8005fe6:	4b31      	ldr	r3, [pc, #196]	; (80060ac <HAL_ADC_AnalogWDGConfig+0x26c>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005fee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ff2:	d10b      	bne.n	800600c <HAL_ADC_AnalogWDGConfig+0x1cc>
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	695a      	ldr	r2, [r3, #20]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	089b      	lsrs	r3, r3, #2
 8006000:	f003 0307 	and.w	r3, r3, #7
 8006004:	005b      	lsls	r3, r3, #1
 8006006:	fa02 f303 	lsl.w	r3, r2, r3
 800600a:	e01d      	b.n	8006048 <HAL_ADC_AnalogWDGConfig+0x208>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	f003 0310 	and.w	r3, r3, #16
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10b      	bne.n	8006032 <HAL_ADC_AnalogWDGConfig+0x1f2>
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	695a      	ldr	r2, [r3, #20]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	089b      	lsrs	r3, r3, #2
 8006026:	f003 0307 	and.w	r3, r3, #7
 800602a:	005b      	lsls	r3, r3, #1
 800602c:	fa02 f303 	lsl.w	r3, r2, r3
 8006030:	e00a      	b.n	8006048 <HAL_ADC_AnalogWDGConfig+0x208>
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	695a      	ldr	r2, [r3, #20]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	089b      	lsrs	r3, r3, #2
 800603e:	f003 0304 	and.w	r3, r3, #4
 8006042:	005b      	lsls	r3, r3, #1
 8006044:	fa02 f303 	lsl.w	r3, r2, r3
 8006048:	647b      	str	r3, [r7, #68]	; 0x44

      /* Set the high and low thresholds */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a12      	ldr	r2, [pc, #72]	; (8006098 <HAL_ADC_AnalogWDGConfig+0x258>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d131      	bne.n	80060b8 <HAL_ADC_AnalogWDGConfig+0x278>
      {
        MODIFY_REG(hadc->Instance->LTR1_TR1,
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	699a      	ldr	r2, [r3, #24]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	621a      	str	r2, [r3, #32]
                   ADC3_TR1_AWDFILT,
                   AnalogWDGConfig->FilteringConfig);
        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC3_TR1_LT1, tmpAWDLowThresholdShifted);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	6a1a      	ldr	r2, [r3, #32]
 8006070:	4b0f      	ldr	r3, [pc, #60]	; (80060b0 <HAL_ADC_AnalogWDGConfig+0x270>)
 8006072:	4013      	ands	r3, r2
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	6812      	ldr	r2, [r2, #0]
 8006078:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800607a:	430b      	orrs	r3, r1
 800607c:	6213      	str	r3, [r2, #32]
        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC3_TR1_HT1, (tmpAWDHighThresholdShifted << ADC3_TR1_HT1_Pos));
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6a1a      	ldr	r2, [r3, #32]
 8006084:	4b0b      	ldr	r3, [pc, #44]	; (80060b4 <HAL_ADC_AnalogWDGConfig+0x274>)
 8006086:	4013      	ands	r3, r2
 8006088:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800608a:	0411      	lsls	r1, r2, #16
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	6812      	ldr	r2, [r2, #0]
 8006090:	430b      	orrs	r3, r1
 8006092:	6213      	str	r3, [r2, #32]
 8006094:	e024      	b.n	80060e0 <HAL_ADC_AnalogWDGConfig+0x2a0>
 8006096:	bf00      	nop
 8006098:	58026000 	.word	0x58026000
 800609c:	7dc00000 	.word	0x7dc00000
 80060a0:	008fffff 	.word	0x008fffff
 80060a4:	010fffff 	.word	0x010fffff
 80060a8:	018fffff 	.word	0x018fffff
 80060ac:	5c001000 	.word	0x5c001000
 80060b0:	fffff000 	.word	0xfffff000
 80060b4:	f000ffff 	.word	0xf000ffff
      }
      else
      {

        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060c8:	430a      	orrs	r2, r1
 80060ca:	621a      	str	r2, [r3, #32]
        MODIFY_REG(hadc->Instance->HTR1_TR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d2:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060dc:	430a      	orrs	r2, r1
 80060de:	625a      	str	r2, [r3, #36]	; 0x24
      MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
      MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
#endif

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	661a      	str	r2, [r3, #96]	; 0x60

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7fe fbbd 	bl	8004870 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	7b1b      	ldrb	r3, [r3, #12]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d105      	bne.n	800610a <HAL_ADC_AnalogWDGConfig+0x2ca>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4618      	mov	r0, r3
 8006104:	f7fe fbdd 	bl	80048c2 <LL_ADC_EnableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006108:	e21c      	b.n	8006544 <HAL_ADC_AnalogWDGConfig+0x704>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4618      	mov	r0, r3
 8006110:	f7fe fc07 	bl	8004922 <LL_ADC_DisableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006114:	e216      	b.n	8006544 <HAL_ADC_AnalogWDGConfig+0x704>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 800611e:	d01f      	beq.n	8006160 <HAL_ADC_AnalogWDGConfig+0x320>
 8006120:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8006124:	f200 80f4 	bhi.w	8006310 <HAL_ADC_AnalogWDGConfig+0x4d0>
 8006128:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800612c:	d07d      	beq.n	800622a <HAL_ADC_AnalogWDGConfig+0x3ea>
 800612e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006132:	f200 80ed 	bhi.w	8006310 <HAL_ADC_AnalogWDGConfig+0x4d0>
 8006136:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800613a:	d011      	beq.n	8006160 <HAL_ADC_AnalogWDGConfig+0x320>
 800613c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006140:	f200 80e6 	bhi.w	8006310 <HAL_ADC_AnalogWDGConfig+0x4d0>
 8006144:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006148:	d06f      	beq.n	800622a <HAL_ADC_AnalogWDGConfig+0x3ea>
 800614a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800614e:	f200 80df 	bhi.w	8006310 <HAL_ADC_AnalogWDGConfig+0x4d0>
 8006152:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006156:	d068      	beq.n	800622a <HAL_ADC_AnalogWDGConfig+0x3ea>
 8006158:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800615c:	f040 80d8 	bne.w	8006310 <HAL_ADC_AnalogWDGConfig+0x4d0>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a9c      	ldr	r2, [pc, #624]	; (80063d8 <HAL_ADC_AnalogWDGConfig+0x598>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d12f      	bne.n	80061ca <HAL_ADC_AnalogWDGConfig+0x38a>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006172:	2b00      	cmp	r3, #0
 8006174:	d108      	bne.n	8006188 <HAL_ADC_AnalogWDGConfig+0x348>
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	0e9b      	lsrs	r3, r3, #26
 800617c:	f003 031f 	and.w	r3, r3, #31
 8006180:	2201      	movs	r2, #1
 8006182:	fa02 f303 	lsl.w	r3, r2, r3
 8006186:	e016      	b.n	80061b6 <HAL_ADC_AnalogWDGConfig+0x376>
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800618e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006190:	fa93 f3a3 	rbit	r3, r3
 8006194:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8006196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006198:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800619a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619c:	2b00      	cmp	r3, #0
 800619e:	d101      	bne.n	80061a4 <HAL_ADC_AnalogWDGConfig+0x364>
    return 32U;
 80061a0:	2320      	movs	r3, #32
 80061a2:	e003      	b.n	80061ac <HAL_ADC_AnalogWDGConfig+0x36c>
  return __builtin_clz(value);
 80061a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a6:	fab3 f383 	clz	r3, r3
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	f003 031f 	and.w	r3, r3, #31
 80061b0:	2201      	movs	r2, #1
 80061b2:	fa02 f303 	lsl.w	r3, r2, r3
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6812      	ldr	r2, [r2, #0]
 80061ba:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	6812      	ldr	r2, [r2, #0]
 80061c2:	430b      	orrs	r3, r1
 80061c4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 80061c8:	e0ab      	b.n	8006322 <HAL_ADC_AnalogWDGConfig+0x4e2>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d108      	bne.n	80061e8 <HAL_ADC_AnalogWDGConfig+0x3a8>
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	0e9b      	lsrs	r3, r3, #26
 80061dc:	f003 031f 	and.w	r3, r3, #31
 80061e0:	2201      	movs	r2, #1
 80061e2:	fa02 f303 	lsl.w	r3, r2, r3
 80061e6:	e016      	b.n	8006216 <HAL_ADC_AnalogWDGConfig+0x3d6>
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f0:	fa93 f3a3 	rbit	r3, r3
 80061f4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80061f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80061fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d101      	bne.n	8006204 <HAL_ADC_AnalogWDGConfig+0x3c4>
    return 32U;
 8006200:	2320      	movs	r3, #32
 8006202:	e003      	b.n	800620c <HAL_ADC_AnalogWDGConfig+0x3cc>
  return __builtin_clz(value);
 8006204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006206:	fab3 f383 	clz	r3, r3
 800620a:	b2db      	uxtb	r3, r3
 800620c:	f003 031f 	and.w	r3, r3, #31
 8006210:	2201      	movs	r2, #1
 8006212:	fa02 f303 	lsl.w	r3, r2, r3
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	6812      	ldr	r2, [r2, #0]
 800621a:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	6812      	ldr	r2, [r2, #0]
 8006222:	430b      	orrs	r3, r1
 8006224:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 8006228:	e07b      	b.n	8006322 <HAL_ADC_AnalogWDGConfig+0x4e2>
        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:

#if defined(ADC_VER_V5_V90)
          if (hadc->Instance == ADC3)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a6b      	ldr	r2, [pc, #428]	; (80063dc <HAL_ADC_AnalogWDGConfig+0x59c>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d108      	bne.n	8006246 <HAL_ADC_AnalogWDGConfig+0x406>
          {

            LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6818      	ldr	r0, [r3, #0]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a68      	ldr	r2, [pc, #416]	; (80063e0 <HAL_ADC_AnalogWDGConfig+0x5a0>)
 800623e:	4619      	mov	r1, r3
 8006240:	f7fe f998 	bl	8004574 <LL_ADC_SetAnalogWDMonitChannels>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
            }
#if defined(ADC_VER_V5_V90)
          }
#endif  /*ADC_VER_V5_V90*/
          break;
 8006244:	e06d      	b.n	8006322 <HAL_ADC_AnalogWDGConfig+0x4e2>
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a63      	ldr	r2, [pc, #396]	; (80063d8 <HAL_ADC_AnalogWDGConfig+0x598>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d12f      	bne.n	80062b0 <HAL_ADC_AnalogWDGConfig+0x470>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006258:	2b00      	cmp	r3, #0
 800625a:	d108      	bne.n	800626e <HAL_ADC_AnalogWDGConfig+0x42e>
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	0e9b      	lsrs	r3, r3, #26
 8006262:	f003 031f 	and.w	r3, r3, #31
 8006266:	2201      	movs	r2, #1
 8006268:	fa02 f303 	lsl.w	r3, r2, r3
 800626c:	e016      	b.n	800629c <HAL_ADC_AnalogWDGConfig+0x45c>
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	fa93 f3a3 	rbit	r3, r3
 800627a:	61bb      	str	r3, [r7, #24]
  return result;
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006280:	6a3b      	ldr	r3, [r7, #32]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d101      	bne.n	800628a <HAL_ADC_AnalogWDGConfig+0x44a>
    return 32U;
 8006286:	2320      	movs	r3, #32
 8006288:	e003      	b.n	8006292 <HAL_ADC_AnalogWDGConfig+0x452>
  return __builtin_clz(value);
 800628a:	6a3b      	ldr	r3, [r7, #32]
 800628c:	fab3 f383 	clz	r3, r3
 8006290:	b2db      	uxtb	r3, r3
 8006292:	f003 031f 	and.w	r3, r3, #31
 8006296:	2201      	movs	r2, #1
 8006298:	fa02 f303 	lsl.w	r3, r2, r3
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	6812      	ldr	r2, [r2, #0]
 80062a0:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	6812      	ldr	r2, [r2, #0]
 80062a8:	430b      	orrs	r3, r1
 80062aa:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          break;
 80062ae:	e038      	b.n	8006322 <HAL_ADC_AnalogWDGConfig+0x4e2>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d108      	bne.n	80062ce <HAL_ADC_AnalogWDGConfig+0x48e>
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	0e9b      	lsrs	r3, r3, #26
 80062c2:	f003 031f 	and.w	r3, r3, #31
 80062c6:	2201      	movs	r2, #1
 80062c8:	fa02 f303 	lsl.w	r3, r2, r3
 80062cc:	e016      	b.n	80062fc <HAL_ADC_AnalogWDGConfig+0x4bc>
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	fa93 f3a3 	rbit	r3, r3
 80062da:	60fb      	str	r3, [r7, #12]
  return result;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <HAL_ADC_AnalogWDGConfig+0x4aa>
    return 32U;
 80062e6:	2320      	movs	r3, #32
 80062e8:	e003      	b.n	80062f2 <HAL_ADC_AnalogWDGConfig+0x4b2>
  return __builtin_clz(value);
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	fab3 f383 	clz	r3, r3
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	f003 031f 	and.w	r3, r3, #31
 80062f6:	2201      	movs	r2, #1
 80062f8:	fa02 f303 	lsl.w	r3, r2, r3
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	6812      	ldr	r2, [r2, #0]
 8006300:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	6812      	ldr	r2, [r2, #0]
 8006308:	430b      	orrs	r3, r1
 800630a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 800630e:	e008      	b.n	8006322 <HAL_ADC_AnalogWDGConfig+0x4e2>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6818      	ldr	r0, [r3, #0]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2200      	movs	r2, #0
 800631a:	4619      	mov	r1, r3
 800631c:	f7fe f92a 	bl	8004574 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006320:	bf00      	nop
      }

      /* Shift the thresholds in function of the selected ADC resolution      */
      /* have to be left-aligned on bit 15, the LSB (right bits) are set to 0 */
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f003 0310 	and.w	r3, r3, #16
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10b      	bne.n	8006348 <HAL_ADC_AnalogWDGConfig+0x508>
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	691a      	ldr	r2, [r3, #16]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	089b      	lsrs	r3, r3, #2
 800633c:	f003 0307 	and.w	r3, r3, #7
 8006340:	005b      	lsls	r3, r3, #1
 8006342:	fa02 f303 	lsl.w	r3, r2, r3
 8006346:	e00a      	b.n	800635e <HAL_ADC_AnalogWDGConfig+0x51e>
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	691a      	ldr	r2, [r3, #16]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	089b      	lsrs	r3, r3, #2
 8006354:	f003 0304 	and.w	r3, r3, #4
 8006358:	005b      	lsls	r3, r3, #1
 800635a:	fa02 f303 	lsl.w	r3, r2, r3
 800635e:	64bb      	str	r3, [r7, #72]	; 0x48
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	f003 0310 	and.w	r3, r3, #16
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10b      	bne.n	8006386 <HAL_ADC_AnalogWDGConfig+0x546>
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	695a      	ldr	r2, [r3, #20]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	089b      	lsrs	r3, r3, #2
 800637a:	f003 0307 	and.w	r3, r3, #7
 800637e:	005b      	lsls	r3, r3, #1
 8006380:	fa02 f303 	lsl.w	r3, r2, r3
 8006384:	e00a      	b.n	800639c <HAL_ADC_AnalogWDGConfig+0x55c>
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	695a      	ldr	r2, [r3, #20]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	089b      	lsrs	r3, r3, #2
 8006392:	f003 0304 	and.w	r3, r3, #4
 8006396:	005b      	lsls	r3, r3, #1
 8006398:	fa02 f303 	lsl.w	r3, r2, r3
 800639c:	647b      	str	r3, [r7, #68]	; 0x44

#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a0e      	ldr	r2, [pc, #56]	; (80063dc <HAL_ADC_AnalogWDGConfig+0x59c>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d153      	bne.n	8006450 <HAL_ADC_AnalogWDGConfig+0x610>
      {

        /* Analog watchdog thresholds configuration */
        if (AnalogWDGConfig->WatchdogNumber != ADC_ANALOGWATCHDOG_1)
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a0d      	ldr	r2, [pc, #52]	; (80063e4 <HAL_ADC_AnalogWDGConfig+0x5a4>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d045      	beq.n	800643e <HAL_ADC_AnalogWDGConfig+0x5fe>
        {
          /* Shift the offset with respect to the selected ADC resolution:        */
          /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
          /* are set to 0.                                                        */
          tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	f003 0310 	and.w	r3, r3, #16
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d113      	bne.n	80063e8 <HAL_ADC_AnalogWDGConfig+0x5a8>
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	691a      	ldr	r2, [r3, #16]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	089b      	lsrs	r3, r3, #2
 80063cc:	f003 0307 	and.w	r3, r3, #7
 80063d0:	005b      	lsls	r3, r3, #1
 80063d2:	fa02 f303 	lsl.w	r3, r2, r3
 80063d6:	e012      	b.n	80063fe <HAL_ADC_AnalogWDGConfig+0x5be>
 80063d8:	001fffff 	.word	0x001fffff
 80063dc:	58026000 	.word	0x58026000
 80063e0:	018fffff 	.word	0x018fffff
 80063e4:	7dc00000 	.word	0x7dc00000
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	691a      	ldr	r2, [r3, #16]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	089b      	lsrs	r3, r3, #2
 80063f4:	f003 0304 	and.w	r3, r3, #4
 80063f8:	005b      	lsls	r3, r3, #1
 80063fa:	fa02 f303 	lsl.w	r3, r2, r3
 80063fe:	64bb      	str	r3, [r7, #72]	; 0x48
          tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	f003 0310 	and.w	r3, r3, #16
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10b      	bne.n	8006426 <HAL_ADC_AnalogWDGConfig+0x5e6>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	695a      	ldr	r2, [r3, #20]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	089b      	lsrs	r3, r3, #2
 800641a:	f003 0307 	and.w	r3, r3, #7
 800641e:	005b      	lsls	r3, r3, #1
 8006420:	fa02 f303 	lsl.w	r3, r2, r3
 8006424:	e00a      	b.n	800643c <HAL_ADC_AnalogWDGConfig+0x5fc>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	695a      	ldr	r2, [r3, #20]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	089b      	lsrs	r3, r3, #2
 8006432:	f003 0304 	and.w	r3, r3, #4
 8006436:	005b      	lsls	r3, r3, #1
 8006438:	fa02 f303 	lsl.w	r3, r2, r3
 800643c:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Set ADC analog watchdog thresholds value of both thresholds high and low */
        LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted, tmpAWDLowThresholdShifted);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6818      	ldr	r0, [r3, #0]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	6819      	ldr	r1, [r3, #0]
 8006446:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006448:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800644a:	f7fe f8c1 	bl	80045d0 <LL_ADC_ConfigAnalogWDThresholds>
 800644e:	e035      	b.n	80064bc <HAL_ADC_AnalogWDGConfig+0x67c>

      }
      else
      {

        if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a40      	ldr	r2, [pc, #256]	; (8006558 <HAL_ADC_AnalogWDGConfig+0x718>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d118      	bne.n	800648c <HAL_ADC_AnalogWDGConfig+0x64c>
        {
          /* Set ADC analog watchdog thresholds value of both thresholds high and low */
          MODIFY_REG(hadc->Instance->LTR2_DIFSEL,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006462:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800646c:	430a      	orrs	r2, r1
 800646e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
          MODIFY_REG(hadc->Instance->HTR2_CALFACT,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800647a:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006484:	430a      	orrs	r2, r1
 8006486:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800648a:	e017      	b.n	80064bc <HAL_ADC_AnalogWDGConfig+0x67c>
        }
        else
        {
          /* Set ADC analog watchdog thresholds value of both thresholds high and low */
          MODIFY_REG(hadc->Instance->LTR3_RES10,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006494:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800649e:	430a      	orrs	r2, r1
 80064a0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
          MODIFY_REG(hadc->Instance->HTR3_RES11,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80064ac:	f003 417c 	and.w	r1, r3, #4227858432	; 0xfc000000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064b6:	430a      	orrs	r2, r1
 80064b8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
        MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
      }

#endif
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a25      	ldr	r2, [pc, #148]	; (8006558 <HAL_ADC_AnalogWDGConfig+0x718>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d11a      	bne.n	80064fc <HAL_ADC_AnalogWDGConfig+0x6bc>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fe f9d7 	bl	800488a <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	7b1b      	ldrb	r3, [r3, #12]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d105      	bne.n	80064f0 <HAL_ADC_AnalogWDGConfig+0x6b0>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7fe f9fa 	bl	80048e2 <LL_ADC_EnableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80064ee:	e029      	b.n	8006544 <HAL_ADC_AnalogWDGConfig+0x704>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7fe fa24 	bl	8004942 <LL_ADC_DisableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80064fa:	e023      	b.n	8006544 <HAL_ADC_AnalogWDGConfig+0x704>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006500:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4618      	mov	r0, r3
 800650e:	f7fe f9ca 	bl	80048a6 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	7b1b      	ldrb	r3, [r3, #12]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d105      	bne.n	8006526 <HAL_ADC_AnalogWDGConfig+0x6e6>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4618      	mov	r0, r3
 8006520:	f7fe f9ef 	bl	8004902 <LL_ADC_EnableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006524:	e00e      	b.n	8006544 <HAL_ADC_AnalogWDGConfig+0x704>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4618      	mov	r0, r3
 800652c:	f7fe fa19 	bl	8004962 <LL_ADC_DisableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006530:	e008      	b.n	8006544 <HAL_ADC_AnalogWDGConfig+0x704>
  /* If a conversion is on going on ADC group regular or injected, no update  */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006536:	f043 0220 	orr.w	r2, r3, #32
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800654c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006550:	4618      	mov	r0, r3
 8006552:	3750      	adds	r7, #80	; 0x50
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	001fffff 	.word	0x001fffff

0800655c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4618      	mov	r0, r3
 800656a:	f7fe f921 	bl	80047b0 <LL_ADC_IsEnabled>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d16e      	bne.n	8006652 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689a      	ldr	r2, [r3, #8]
 800657a:	4b38      	ldr	r3, [pc, #224]	; (800665c <ADC_Enable+0x100>)
 800657c:	4013      	ands	r3, r2
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00d      	beq.n	800659e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006586:	f043 0210 	orr.w	r2, r3, #16
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006592:	f043 0201 	orr.w	r2, r3, #1
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e05a      	b.n	8006654 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fe f8dc 	bl	8004760 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80065a8:	f7fd fd6a 	bl	8004080 <HAL_GetTick>
 80065ac:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a2b      	ldr	r2, [pc, #172]	; (8006660 <ADC_Enable+0x104>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d004      	beq.n	80065c2 <ADC_Enable+0x66>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a29      	ldr	r2, [pc, #164]	; (8006664 <ADC_Enable+0x108>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d101      	bne.n	80065c6 <ADC_Enable+0x6a>
 80065c2:	4b29      	ldr	r3, [pc, #164]	; (8006668 <ADC_Enable+0x10c>)
 80065c4:	e000      	b.n	80065c8 <ADC_Enable+0x6c>
 80065c6:	4b29      	ldr	r3, [pc, #164]	; (800666c <ADC_Enable+0x110>)
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7fe f85f 	bl	800468c <LL_ADC_GetMultimode>
 80065ce:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a23      	ldr	r2, [pc, #140]	; (8006664 <ADC_Enable+0x108>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d002      	beq.n	80065e0 <ADC_Enable+0x84>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	e000      	b.n	80065e2 <ADC_Enable+0x86>
 80065e0:	4b1f      	ldr	r3, [pc, #124]	; (8006660 <ADC_Enable+0x104>)
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	6812      	ldr	r2, [r2, #0]
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d02c      	beq.n	8006644 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d130      	bne.n	8006652 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80065f0:	e028      	b.n	8006644 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7fe f8da 	bl	80047b0 <LL_ADC_IsEnabled>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d104      	bne.n	800660c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4618      	mov	r0, r3
 8006608:	f7fe f8aa 	bl	8004760 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800660c:	f7fd fd38 	bl	8004080 <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	2b02      	cmp	r3, #2
 8006618:	d914      	bls.n	8006644 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0301 	and.w	r3, r3, #1
 8006624:	2b01      	cmp	r3, #1
 8006626:	d00d      	beq.n	8006644 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800662c:	f043 0210 	orr.w	r2, r3, #16
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006638:	f043 0201 	orr.w	r2, r3, #1
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e007      	b.n	8006654 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0301 	and.w	r3, r3, #1
 800664e:	2b01      	cmp	r3, #1
 8006650:	d1cf      	bne.n	80065f2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	8000003f 	.word	0x8000003f
 8006660:	40022000 	.word	0x40022000
 8006664:	40022100 	.word	0x40022100
 8006668:	40022300 	.word	0x40022300
 800666c:	58026300 	.word	0x58026300

08006670 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4618      	mov	r0, r3
 800667e:	f7fe f8aa 	bl	80047d6 <LL_ADC_IsDisableOngoing>
 8006682:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4618      	mov	r0, r3
 800668a:	f7fe f891 	bl	80047b0 <LL_ADC_IsEnabled>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d047      	beq.n	8006724 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d144      	bne.n	8006724 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f003 030d 	and.w	r3, r3, #13
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d10c      	bne.n	80066c2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7fe f86b 	bl	8004788 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2203      	movs	r2, #3
 80066b8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80066ba:	f7fd fce1 	bl	8004080 <HAL_GetTick>
 80066be:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80066c0:	e029      	b.n	8006716 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066c6:	f043 0210 	orr.w	r2, r3, #16
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066d2:	f043 0201 	orr.w	r2, r3, #1
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e023      	b.n	8006726 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80066de:	f7fd fccf 	bl	8004080 <HAL_GetTick>
 80066e2:	4602      	mov	r2, r0
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d914      	bls.n	8006716 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00d      	beq.n	8006716 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066fe:	f043 0210 	orr.w	r2, r3, #16
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800670a:	f043 0201 	orr.w	r2, r3, #1
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e007      	b.n	8006726 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1dc      	bne.n	80066de <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b084      	sub	sp, #16
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006740:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006744:	2b00      	cmp	r3, #0
 8006746:	d14b      	bne.n	80067e0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800674c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	661a      	str	r2, [r3, #96]	; 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0308 	and.w	r3, r3, #8
 800675e:	2b00      	cmp	r3, #0
 8006760:	d021      	beq.n	80067a6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4618      	mov	r0, r3
 8006768:	f7fd fe0a 	bl	8004380 <LL_ADC_REG_IsTriggerSourceSWStart>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d032      	beq.n	80067d8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d12b      	bne.n	80067d8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006784:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	661a      	str	r2, [r3, #96]	; 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006790:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d11f      	bne.n	80067d8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800679c:	f043 0201 	orr.w	r2, r3, #1
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	661a      	str	r2, [r3, #96]	; 0x60
 80067a4:	e018      	b.n	80067d8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	f003 0303 	and.w	r3, r3, #3
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d111      	bne.n	80067d8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	661a      	str	r2, [r3, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d105      	bne.n	80067d8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067d0:	f043 0201 	orr.w	r2, r3, #1
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f7fb f973 	bl	8001ac4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80067de:	e00e      	b.n	80067fe <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067e4:	f003 0310 	and.w	r3, r3, #16
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d003      	beq.n	80067f4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f7fb f93d 	bl	8001a6c <HAL_ADC_ErrorCallback>
}
 80067f2:	e004      	b.n	80067fe <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	4798      	blx	r3
}
 80067fe:	bf00      	nop
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b084      	sub	sp, #16
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006812:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f7fe fdd3 	bl	80053c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800681a:	bf00      	nop
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b084      	sub	sp, #16
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006834:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006840:	f043 0204 	orr.w	r2, r3, #4
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	665a      	str	r2, [r3, #100]	; 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f7fb f90f 	bl	8001a6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800684e:	bf00      	nop
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
	...

08006858 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a6c      	ldr	r2, [pc, #432]	; (8006a18 <ADC_ConfigureBoostMode+0x1c0>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d004      	beq.n	8006874 <ADC_ConfigureBoostMode+0x1c>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a6b      	ldr	r2, [pc, #428]	; (8006a1c <ADC_ConfigureBoostMode+0x1c4>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d109      	bne.n	8006888 <ADC_ConfigureBoostMode+0x30>
 8006874:	4b6a      	ldr	r3, [pc, #424]	; (8006a20 <ADC_ConfigureBoostMode+0x1c8>)
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800687c:	2b00      	cmp	r3, #0
 800687e:	bf14      	ite	ne
 8006880:	2301      	movne	r3, #1
 8006882:	2300      	moveq	r3, #0
 8006884:	b2db      	uxtb	r3, r3
 8006886:	e008      	b.n	800689a <ADC_ConfigureBoostMode+0x42>
 8006888:	4b66      	ldr	r3, [pc, #408]	; (8006a24 <ADC_ConfigureBoostMode+0x1cc>)
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006890:	2b00      	cmp	r3, #0
 8006892:	bf14      	ite	ne
 8006894:	2301      	movne	r3, #1
 8006896:	2300      	moveq	r3, #0
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d01c      	beq.n	80068d8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800689e:	f004 fda9 	bl	800b3f4 <HAL_RCC_GetHCLKFreq>
 80068a2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80068ac:	d010      	beq.n	80068d0 <ADC_ConfigureBoostMode+0x78>
 80068ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80068b2:	d873      	bhi.n	800699c <ADC_ConfigureBoostMode+0x144>
 80068b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068b8:	d002      	beq.n	80068c0 <ADC_ConfigureBoostMode+0x68>
 80068ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068be:	d16d      	bne.n	800699c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	0c1b      	lsrs	r3, r3, #16
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068cc:	60fb      	str	r3, [r7, #12]
        break;
 80068ce:	e068      	b.n	80069a2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	089b      	lsrs	r3, r3, #2
 80068d4:	60fb      	str	r3, [r7, #12]
        break;
 80068d6:	e064      	b.n	80069a2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80068d8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80068dc:	f04f 0100 	mov.w	r1, #0
 80068e0:	f005 ff84 	bl	800c7ec <HAL_RCCEx_GetPeriphCLKFreq>
 80068e4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80068ee:	d051      	beq.n	8006994 <ADC_ConfigureBoostMode+0x13c>
 80068f0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80068f4:	d854      	bhi.n	80069a0 <ADC_ConfigureBoostMode+0x148>
 80068f6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80068fa:	d047      	beq.n	800698c <ADC_ConfigureBoostMode+0x134>
 80068fc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006900:	d84e      	bhi.n	80069a0 <ADC_ConfigureBoostMode+0x148>
 8006902:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006906:	d03d      	beq.n	8006984 <ADC_ConfigureBoostMode+0x12c>
 8006908:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800690c:	d848      	bhi.n	80069a0 <ADC_ConfigureBoostMode+0x148>
 800690e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006912:	d033      	beq.n	800697c <ADC_ConfigureBoostMode+0x124>
 8006914:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006918:	d842      	bhi.n	80069a0 <ADC_ConfigureBoostMode+0x148>
 800691a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800691e:	d029      	beq.n	8006974 <ADC_ConfigureBoostMode+0x11c>
 8006920:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006924:	d83c      	bhi.n	80069a0 <ADC_ConfigureBoostMode+0x148>
 8006926:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800692a:	d01a      	beq.n	8006962 <ADC_ConfigureBoostMode+0x10a>
 800692c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006930:	d836      	bhi.n	80069a0 <ADC_ConfigureBoostMode+0x148>
 8006932:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006936:	d014      	beq.n	8006962 <ADC_ConfigureBoostMode+0x10a>
 8006938:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800693c:	d830      	bhi.n	80069a0 <ADC_ConfigureBoostMode+0x148>
 800693e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006942:	d00e      	beq.n	8006962 <ADC_ConfigureBoostMode+0x10a>
 8006944:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006948:	d82a      	bhi.n	80069a0 <ADC_ConfigureBoostMode+0x148>
 800694a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800694e:	d008      	beq.n	8006962 <ADC_ConfigureBoostMode+0x10a>
 8006950:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006954:	d824      	bhi.n	80069a0 <ADC_ConfigureBoostMode+0x148>
 8006956:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800695a:	d002      	beq.n	8006962 <ADC_ConfigureBoostMode+0x10a>
 800695c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006960:	d11e      	bne.n	80069a0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	0c9b      	lsrs	r3, r3, #18
 8006968:	005b      	lsls	r3, r3, #1
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006970:	60fb      	str	r3, [r7, #12]
        break;
 8006972:	e016      	b.n	80069a2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	091b      	lsrs	r3, r3, #4
 8006978:	60fb      	str	r3, [r7, #12]
        break;
 800697a:	e012      	b.n	80069a2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	095b      	lsrs	r3, r3, #5
 8006980:	60fb      	str	r3, [r7, #12]
        break;
 8006982:	e00e      	b.n	80069a2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	099b      	lsrs	r3, r3, #6
 8006988:	60fb      	str	r3, [r7, #12]
        break;
 800698a:	e00a      	b.n	80069a2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	09db      	lsrs	r3, r3, #7
 8006990:	60fb      	str	r3, [r7, #12]
        break;
 8006992:	e006      	b.n	80069a2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	0a1b      	lsrs	r3, r3, #8
 8006998:	60fb      	str	r3, [r7, #12]
        break;
 800699a:	e002      	b.n	80069a2 <ADC_ConfigureBoostMode+0x14a>
        break;
 800699c:	bf00      	nop
 800699e:	e000      	b.n	80069a2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80069a0:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	085b      	lsrs	r3, r3, #1
 80069a6:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	4a1f      	ldr	r2, [pc, #124]	; (8006a28 <ADC_ConfigureBoostMode+0x1d0>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d808      	bhi.n	80069c2 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	689a      	ldr	r2, [r3, #8]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80069be:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80069c0:	e025      	b.n	8006a0e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	4a19      	ldr	r2, [pc, #100]	; (8006a2c <ADC_ConfigureBoostMode+0x1d4>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d80a      	bhi.n	80069e0 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069dc:	609a      	str	r2, [r3, #8]
}
 80069de:	e016      	b.n	8006a0e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	4a13      	ldr	r2, [pc, #76]	; (8006a30 <ADC_ConfigureBoostMode+0x1d8>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d80a      	bhi.n	80069fe <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069fa:	609a      	str	r2, [r3, #8]
}
 80069fc:	e007      	b.n	8006a0e <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	689a      	ldr	r2, [r3, #8]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006a0c:	609a      	str	r2, [r3, #8]
}
 8006a0e:	bf00      	nop
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	40022000 	.word	0x40022000
 8006a1c:	40022100 	.word	0x40022100
 8006a20:	40022300 	.word	0x40022300
 8006a24:	58026300 	.word	0x58026300
 8006a28:	005f5e10 	.word	0x005f5e10
 8006a2c:	00bebc20 	.word	0x00bebc20
 8006a30:	017d7840 	.word	0x017d7840

08006a34 <LL_ADC_IsEnabled>:
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f003 0301 	and.w	r3, r3, #1
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d101      	bne.n	8006a4c <LL_ADC_IsEnabled+0x18>
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e000      	b.n	8006a4e <LL_ADC_IsEnabled+0x1a>
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	370c      	adds	r7, #12
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
	...

08006a5c <LL_ADC_StartCalibration>:
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	689a      	ldr	r2, [r3, #8]
 8006a6c:	4b09      	ldr	r3, [pc, #36]	; (8006a94 <LL_ADC_StartCalibration+0x38>)
 8006a6e:	4013      	ands	r3, r2
 8006a70:	68ba      	ldr	r2, [r7, #8]
 8006a72:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006a7c:	430a      	orrs	r2, r1
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	609a      	str	r2, [r3, #8]
}
 8006a88:	bf00      	nop
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr
 8006a94:	3ffeffc0 	.word	0x3ffeffc0

08006a98 <LL_ADC_IsCalibrationOnGoing>:
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006aa8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006aac:	d101      	bne.n	8006ab2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e000      	b.n	8006ab4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <LL_ADC_REG_StartConversion>:
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	689a      	ldr	r2, [r3, #8]
 8006acc:	4b05      	ldr	r3, [pc, #20]	; (8006ae4 <LL_ADC_REG_StartConversion+0x24>)
 8006ace:	4013      	ands	r3, r2
 8006ad0:	f043 0204 	orr.w	r2, r3, #4
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	609a      	str	r2, [r3, #8]
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr
 8006ae4:	7fffffc0 	.word	0x7fffffc0

08006ae8 <LL_ADC_REG_IsConversionOngoing>:
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f003 0304 	and.w	r3, r3, #4
 8006af8:	2b04      	cmp	r3, #4
 8006afa:	d101      	bne.n	8006b00 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006afc:	2301      	movs	r3, #1
 8006afe:	e000      	b.n	8006b02 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	370c      	adds	r7, #12
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
	...

08006b10 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d101      	bne.n	8006b2e <HAL_ADCEx_Calibration_Start+0x1e>
 8006b2a:	2302      	movs	r3, #2
 8006b2c:	e04c      	b.n	8006bc8 <HAL_ADCEx_Calibration_Start+0xb8>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f7ff fd9a 	bl	8006670 <ADC_Disable>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006b40:	7dfb      	ldrb	r3, [r7, #23]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d135      	bne.n	8006bb2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006b4a:	4b21      	ldr	r3, [pc, #132]	; (8006bd0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	f043 0202 	orr.w	r2, r3, #2
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	661a      	str	r2, [r3, #96]	; 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	68b9      	ldr	r1, [r7, #8]
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7ff ff7c 	bl	8006a5c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006b64:	e014      	b.n	8006b90 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	4a19      	ldr	r2, [pc, #100]	; (8006bd4 <HAL_ADCEx_Calibration_Start+0xc4>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d30d      	bcc.n	8006b90 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b78:	f023 0312 	bic.w	r3, r3, #18
 8006b7c:	f043 0210 	orr.w	r2, r3, #16
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e01b      	b.n	8006bc8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7ff ff7f 	bl	8006a98 <LL_ADC_IsCalibrationOnGoing>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1e2      	bne.n	8006b66 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ba4:	f023 0303 	bic.w	r3, r3, #3
 8006ba8:	f043 0201 	orr.w	r2, r3, #1
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	661a      	str	r2, [r3, #96]	; 0x60
 8006bb0:	e005      	b.n	8006bbe <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bb6:	f043 0210 	orr.w	r2, r3, #16
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	661a      	str	r2, [r3, #96]	; 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8006bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3718      	adds	r7, #24
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	ffffeefd 	.word	0xffffeefd
 8006bd4:	25c3f800 	.word	0x25c3f800

08006bd8 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b0a2      	sub	sp, #136	; 0x88
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7ff ff7d 	bl	8006ae8 <LL_ADC_REG_IsConversionOngoing>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d001      	beq.n	8006bf8 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	e08c      	b.n	8006d12 <HAL_ADCEx_MultiModeStart_DMA+0x13a>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d101      	bne.n	8006c06 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8006c02:	2302      	movs	r3, #2
 8006c04:	e085      	b.n	8006d12 <HAL_ADCEx_MultiModeStart_DMA+0x13a>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	673b      	str	r3, [r7, #112]	; 0x70
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006c12:	2300      	movs	r3, #0
 8006c14:	677b      	str	r3, [r7, #116]	; 0x74
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a40      	ldr	r2, [pc, #256]	; (8006d1c <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d102      	bne.n	8006c26 <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 8006c20:	4b3f      	ldr	r3, [pc, #252]	; (8006d20 <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 8006c22:	613b      	str	r3, [r7, #16]
 8006c24:	e001      	b.n	8006c2a <HAL_ADCEx_MultiModeStart_DMA+0x52>
 8006c26:	2300      	movs	r3, #0
 8006c28:	613b      	str	r3, [r7, #16]

    if (tmphadcSlave.Instance == NULL)
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10b      	bne.n	8006c48 <HAL_ADCEx_MultiModeStart_DMA+0x70>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c34:	f043 0220 	orr.w	r2, r3, #32
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	661a      	str	r2, [r3, #96]	; 0x60

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e064      	b.n	8006d12 <HAL_ADCEx_MultiModeStart_DMA+0x13a>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f7ff fc87 	bl	800655c <ADC_Enable>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    if (tmp_hal_status == HAL_OK)
 8006c54:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d107      	bne.n	8006c6c <HAL_ADCEx_MultiModeStart_DMA+0x94>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8006c5c:	f107 0310 	add.w	r3, r7, #16
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7ff fc7b 	bl	800655c <ADC_Enable>
 8006c66:	4603      	mov	r3, r0
 8006c68:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8006c6c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d148      	bne.n	8006d06 <HAL_ADCEx_MultiModeStart_DMA+0x12e>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006c78:	4b2a      	ldr	r3, [pc, #168]	; (8006d24 <HAL_ADCEx_MultiModeStart_DMA+0x14c>)
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	661a      	str	r2, [r3, #96]	; 0x60
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	665a      	str	r2, [r3, #100]	; 0x64

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c8e:	4a26      	ldr	r2, [pc, #152]	; (8006d28 <HAL_ADCEx_MultiModeStart_DMA+0x150>)
 8006c90:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c96:	4a25      	ldr	r2, [pc, #148]	; (8006d2c <HAL_ADCEx_MultiModeStart_DMA+0x154>)
 8006c98:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c9e:	4a24      	ldr	r2, [pc, #144]	; (8006d30 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 8006ca0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a1d      	ldr	r2, [pc, #116]	; (8006d1c <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d004      	beq.n	8006cb6 <HAL_ADCEx_MultiModeStart_DMA+0xde>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a1b      	ldr	r2, [pc, #108]	; (8006d20 <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d101      	bne.n	8006cba <HAL_ADCEx_MultiModeStart_DMA+0xe2>
 8006cb6:	4b1f      	ldr	r3, [pc, #124]	; (8006d34 <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 8006cb8:	e000      	b.n	8006cbc <HAL_ADCEx_MultiModeStart_DMA+0xe4>
 8006cba:	4b1f      	ldr	r3, [pc, #124]	; (8006d38 <HAL_ADCEx_MultiModeStart_DMA+0x160>)
 8006cbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	221c      	movs	r2, #28
 8006cc6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	685a      	ldr	r2, [r3, #4]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f042 0210 	orr.w	r2, r2, #16
 8006cde:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8006ce4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ce8:	330c      	adds	r3, #12
 8006cea:	4619      	mov	r1, r3
 8006cec:	68ba      	ldr	r2, [r7, #8]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f000 feca 	bl	8007a88 <HAL_DMA_Start_IT>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7ff fede 	bl	8006ac0 <LL_ADC_REG_StartConversion>
 8006d04:	e003      	b.n	8006d0e <HAL_ADCEx_MultiModeStart_DMA+0x136>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    }

    /* Return function status */
    return tmp_hal_status;
 8006d0e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
  }
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3788      	adds	r7, #136	; 0x88
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	40022000 	.word	0x40022000
 8006d20:	40022100 	.word	0x40022100
 8006d24:	fffff0fe 	.word	0xfffff0fe
 8006d28:	0800672f 	.word	0x0800672f
 8006d2c:	08006807 	.word	0x08006807
 8006d30:	08006823 	.word	0x08006823
 8006d34:	40022300 	.word	0x40022300
 8006d38:	58026300 	.word	0x58026300

08006d3c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006d58:	bf00      	nop
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006d80:	bf00      	nop
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006da0:	b590      	push	{r4, r7, lr}
 8006da2:	b0a3      	sub	sp, #140	; 0x8c
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006daa:	2300      	movs	r3, #0
 8006dac:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d101      	bne.n	8006dbe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006dba:	2302      	movs	r3, #2
 8006dbc:	e0c1      	b.n	8006f42 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a5e      	ldr	r2, [pc, #376]	; (8006f4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d102      	bne.n	8006dde <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006dd8:	4b5d      	ldr	r3, [pc, #372]	; (8006f50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006dda:	60fb      	str	r3, [r7, #12]
 8006ddc:	e001      	b.n	8006de2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006dde:	2300      	movs	r3, #0
 8006de0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10b      	bne.n	8006e00 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dec:	f043 0220 	orr.w	r2, r3, #32
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e0a0      	b.n	8006f42 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7ff fe70 	bl	8006ae8 <LL_ADC_REG_IsConversionOngoing>
 8006e08:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7ff fe69 	bl	8006ae8 <LL_ADC_REG_IsConversionOngoing>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f040 8081 	bne.w	8006f20 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006e1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d17c      	bne.n	8006f20 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a48      	ldr	r2, [pc, #288]	; (8006f4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d004      	beq.n	8006e3a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a46      	ldr	r2, [pc, #280]	; (8006f50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d101      	bne.n	8006e3e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8006e3a:	4b46      	ldr	r3, [pc, #280]	; (8006f54 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006e3c:	e000      	b.n	8006e40 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8006e3e:	4b46      	ldr	r3, [pc, #280]	; (8006f58 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006e40:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d039      	beq.n	8006ebe <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006e4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	431a      	orrs	r2, r3
 8006e58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e5a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a3a      	ldr	r2, [pc, #232]	; (8006f4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d004      	beq.n	8006e70 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a39      	ldr	r2, [pc, #228]	; (8006f50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d10e      	bne.n	8006e8e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8006e70:	4836      	ldr	r0, [pc, #216]	; (8006f4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006e72:	f7ff fddf 	bl	8006a34 <LL_ADC_IsEnabled>
 8006e76:	4604      	mov	r4, r0
 8006e78:	4835      	ldr	r0, [pc, #212]	; (8006f50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006e7a:	f7ff fddb 	bl	8006a34 <LL_ADC_IsEnabled>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	4323      	orrs	r3, r4
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	bf0c      	ite	eq
 8006e86:	2301      	moveq	r3, #1
 8006e88:	2300      	movne	r3, #0
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	e008      	b.n	8006ea0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8006e8e:	4833      	ldr	r0, [pc, #204]	; (8006f5c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8006e90:	f7ff fdd0 	bl	8006a34 <LL_ADC_IsEnabled>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	bf0c      	ite	eq
 8006e9a:	2301      	moveq	r3, #1
 8006e9c:	2300      	movne	r3, #0
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d047      	beq.n	8006f34 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006ea4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ea6:	689a      	ldr	r2, [r3, #8]
 8006ea8:	4b2d      	ldr	r3, [pc, #180]	; (8006f60 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006eaa:	4013      	ands	r3, r2
 8006eac:	683a      	ldr	r2, [r7, #0]
 8006eae:	6811      	ldr	r1, [r2, #0]
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	6892      	ldr	r2, [r2, #8]
 8006eb4:	430a      	orrs	r2, r1
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006eba:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006ebc:	e03a      	b.n	8006f34 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006ebe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006ec6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ec8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a1f      	ldr	r2, [pc, #124]	; (8006f4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d004      	beq.n	8006ede <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a1d      	ldr	r2, [pc, #116]	; (8006f50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d10e      	bne.n	8006efc <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8006ede:	481b      	ldr	r0, [pc, #108]	; (8006f4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006ee0:	f7ff fda8 	bl	8006a34 <LL_ADC_IsEnabled>
 8006ee4:	4604      	mov	r4, r0
 8006ee6:	481a      	ldr	r0, [pc, #104]	; (8006f50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006ee8:	f7ff fda4 	bl	8006a34 <LL_ADC_IsEnabled>
 8006eec:	4603      	mov	r3, r0
 8006eee:	4323      	orrs	r3, r4
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	bf0c      	ite	eq
 8006ef4:	2301      	moveq	r3, #1
 8006ef6:	2300      	movne	r3, #0
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	e008      	b.n	8006f0e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8006efc:	4817      	ldr	r0, [pc, #92]	; (8006f5c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8006efe:	f7ff fd99 	bl	8006a34 <LL_ADC_IsEnabled>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	bf0c      	ite	eq
 8006f08:	2301      	moveq	r3, #1
 8006f0a:	2300      	movne	r3, #0
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d010      	beq.n	8006f34 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006f12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f14:	689a      	ldr	r2, [r3, #8]
 8006f16:	4b12      	ldr	r3, [pc, #72]	; (8006f60 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006f18:	4013      	ands	r3, r2
 8006f1a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006f1c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006f1e:	e009      	b.n	8006f34 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f24:	f043 0220 	orr.w	r2, r3, #32
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8006f32:	e000      	b.n	8006f36 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006f34:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8006f3e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	378c      	adds	r7, #140	; 0x8c
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd90      	pop	{r4, r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	40022000 	.word	0x40022000
 8006f50:	40022100 	.word	0x40022100
 8006f54:	40022300 	.word	0x40022300
 8006f58:	58026300 	.word	0x58026300
 8006f5c:	58026000 	.word	0x58026000
 8006f60:	fffff0e0 	.word	0xfffff0e0

08006f64 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b088      	sub	sp, #32
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 8006f70:	2300      	movs	r3, #0
 8006f72:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d102      	bne.n	8006f80 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	77fb      	strb	r3, [r7, #31]
 8006f7e:	e10e      	b.n	800719e <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f8e:	d102      	bne.n	8006f96 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	77fb      	strb	r3, [r7, #31]
 8006f94:	e103      	b.n	800719e <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d109      	bne.n	8006fb6 <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f7fc fb71 	bl	8003698 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0304 	and.w	r3, r3, #4
 8006fc0:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8006fca:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 8006fd0:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 8006fd6:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 8006fdc:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	4b6e      	ldr	r3, [pc, #440]	; (80071a8 <HAL_COMP_Init+0x244>)
 8006fee:	4013      	ands	r3, r2
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	6812      	ldr	r2, [r2, #0]
 8006ff4:	6979      	ldr	r1, [r7, #20]
 8006ff6:	430b      	orrs	r3, r1
 8006ff8:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	2b10      	cmp	r3, #16
 8007000:	d108      	bne.n	8007014 <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f042 0210 	orr.w	r2, r2, #16
 8007010:	601a      	str	r2, [r3, #0]
 8007012:	e007      	b.n	8007024 <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 0210 	bic.w	r2, r2, #16
 8007022:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0304 	and.w	r3, r3, #4
 800702e:	2b00      	cmp	r3, #0
 8007030:	d016      	beq.n	8007060 <HAL_COMP_Init+0xfc>
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d013      	beq.n	8007060 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007038:	4b5c      	ldr	r3, [pc, #368]	; (80071ac <HAL_COMP_Init+0x248>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	099b      	lsrs	r3, r3, #6
 800703e:	4a5c      	ldr	r2, [pc, #368]	; (80071b0 <HAL_COMP_Init+0x24c>)
 8007040:	fba2 2303 	umull	r2, r3, r2, r3
 8007044:	099b      	lsrs	r3, r3, #6
 8007046:	1c5a      	adds	r2, r3, #1
 8007048:	4613      	mov	r3, r2
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	4413      	add	r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 8007052:	e002      	b.n	800705a <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	3b01      	subs	r3, #1
 8007058:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1f9      	bne.n	8007054 <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a53      	ldr	r2, [pc, #332]	; (80071b4 <HAL_COMP_Init+0x250>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d102      	bne.n	8007070 <HAL_COMP_Init+0x10c>
 800706a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800706e:	e001      	b.n	8007074 <HAL_COMP_Init+0x110>
 8007070:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007074:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	f003 0303 	and.w	r3, r3, #3
 800707e:	2b00      	cmp	r3, #0
 8007080:	d06d      	beq.n	800715e <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	f003 0310 	and.w	r3, r3, #16
 800708a:	2b00      	cmp	r3, #0
 800708c:	d008      	beq.n	80070a0 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 800708e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	4313      	orrs	r3, r2
 800709c:	600b      	str	r3, [r1, #0]
 800709e:	e008      	b.n	80070b2 <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 80070a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	43db      	mvns	r3, r3
 80070aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070ae:	4013      	ands	r3, r2
 80070b0:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	f003 0320 	and.w	r3, r3, #32
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d008      	beq.n	80070d0 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 80070be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	604b      	str	r3, [r1, #4]
 80070ce:	e008      	b.n	80070e2 <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 80070d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070d4:	685a      	ldr	r2, [r3, #4]
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	43db      	mvns	r3, r3
 80070da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070de:	4013      	ands	r3, r2
 80070e0:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 80070e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a1b      	ldr	r3, [r3, #32]
 80070f0:	f003 0302 	and.w	r3, r3, #2
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00a      	beq.n	800710e <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 80070f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070fc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007100:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	4313      	orrs	r3, r2
 8007108:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800710c:	e00a      	b.n	8007124 <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 800710e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007112:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	43db      	mvns	r3, r3
 800711a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800711e:	4013      	ands	r3, r2
 8007120:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a1b      	ldr	r3, [r3, #32]
 8007128:	f003 0301 	and.w	r3, r3, #1
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00a      	beq.n	8007146 <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 8007130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007134:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007138:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	4313      	orrs	r3, r2
 8007140:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 8007144:	e021      	b.n	800718a <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 8007146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800714a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	43db      	mvns	r3, r3
 8007152:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007156:	4013      	ands	r3, r2
 8007158:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 800715c:	e015      	b.n	800718a <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 800715e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007162:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	43db      	mvns	r3, r3
 800716a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800716e:	4013      	ands	r3, r2
 8007170:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 8007174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007178:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	43db      	mvns	r3, r3
 8007180:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007184:	4013      	ands	r3, r2
 8007186:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	d103      	bne.n	800719e <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
   
  }
  
  return status;
 800719e:	7ffb      	ldrb	r3, [r7, #31]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3720      	adds	r7, #32
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	f0e8cce1 	.word	0xf0e8cce1
 80071ac:	24000038 	.word	0x24000038
 80071b0:	053e2d63 	.word	0x053e2d63
 80071b4:	5800380c 	.word	0x5800380c

080071b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b085      	sub	sp, #20
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f003 0307 	and.w	r3, r3, #7
 80071c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80071c8:	4b0b      	ldr	r3, [pc, #44]	; (80071f8 <__NVIC_SetPriorityGrouping+0x40>)
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80071d4:	4013      	ands	r3, r2
 80071d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80071e0:	4b06      	ldr	r3, [pc, #24]	; (80071fc <__NVIC_SetPriorityGrouping+0x44>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80071e6:	4a04      	ldr	r2, [pc, #16]	; (80071f8 <__NVIC_SetPriorityGrouping+0x40>)
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	60d3      	str	r3, [r2, #12]
}
 80071ec:	bf00      	nop
 80071ee:	3714      	adds	r7, #20
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr
 80071f8:	e000ed00 	.word	0xe000ed00
 80071fc:	05fa0000 	.word	0x05fa0000

08007200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007200:	b480      	push	{r7}
 8007202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007204:	4b04      	ldr	r3, [pc, #16]	; (8007218 <__NVIC_GetPriorityGrouping+0x18>)
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	0a1b      	lsrs	r3, r3, #8
 800720a:	f003 0307 	and.w	r3, r3, #7
}
 800720e:	4618      	mov	r0, r3
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr
 8007218:	e000ed00 	.word	0xe000ed00

0800721c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	4603      	mov	r3, r0
 8007224:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007226:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800722a:	2b00      	cmp	r3, #0
 800722c:	db0b      	blt.n	8007246 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800722e:	88fb      	ldrh	r3, [r7, #6]
 8007230:	f003 021f 	and.w	r2, r3, #31
 8007234:	4907      	ldr	r1, [pc, #28]	; (8007254 <__NVIC_EnableIRQ+0x38>)
 8007236:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800723a:	095b      	lsrs	r3, r3, #5
 800723c:	2001      	movs	r0, #1
 800723e:	fa00 f202 	lsl.w	r2, r0, r2
 8007242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007246:	bf00      	nop
 8007248:	370c      	adds	r7, #12
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	e000e100 	.word	0xe000e100

08007258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	4603      	mov	r3, r0
 8007260:	6039      	str	r1, [r7, #0]
 8007262:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007264:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007268:	2b00      	cmp	r3, #0
 800726a:	db0a      	blt.n	8007282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	b2da      	uxtb	r2, r3
 8007270:	490c      	ldr	r1, [pc, #48]	; (80072a4 <__NVIC_SetPriority+0x4c>)
 8007272:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007276:	0112      	lsls	r2, r2, #4
 8007278:	b2d2      	uxtb	r2, r2
 800727a:	440b      	add	r3, r1
 800727c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007280:	e00a      	b.n	8007298 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	b2da      	uxtb	r2, r3
 8007286:	4908      	ldr	r1, [pc, #32]	; (80072a8 <__NVIC_SetPriority+0x50>)
 8007288:	88fb      	ldrh	r3, [r7, #6]
 800728a:	f003 030f 	and.w	r3, r3, #15
 800728e:	3b04      	subs	r3, #4
 8007290:	0112      	lsls	r2, r2, #4
 8007292:	b2d2      	uxtb	r2, r2
 8007294:	440b      	add	r3, r1
 8007296:	761a      	strb	r2, [r3, #24]
}
 8007298:	bf00      	nop
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr
 80072a4:	e000e100 	.word	0xe000e100
 80072a8:	e000ed00 	.word	0xe000ed00

080072ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b089      	sub	sp, #36	; 0x24
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f003 0307 	and.w	r3, r3, #7
 80072be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	f1c3 0307 	rsb	r3, r3, #7
 80072c6:	2b04      	cmp	r3, #4
 80072c8:	bf28      	it	cs
 80072ca:	2304      	movcs	r3, #4
 80072cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	3304      	adds	r3, #4
 80072d2:	2b06      	cmp	r3, #6
 80072d4:	d902      	bls.n	80072dc <NVIC_EncodePriority+0x30>
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	3b03      	subs	r3, #3
 80072da:	e000      	b.n	80072de <NVIC_EncodePriority+0x32>
 80072dc:	2300      	movs	r3, #0
 80072de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80072e0:	f04f 32ff 	mov.w	r2, #4294967295
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	fa02 f303 	lsl.w	r3, r2, r3
 80072ea:	43da      	mvns	r2, r3
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	401a      	ands	r2, r3
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80072f4:	f04f 31ff 	mov.w	r1, #4294967295
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	fa01 f303 	lsl.w	r3, r1, r3
 80072fe:	43d9      	mvns	r1, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007304:	4313      	orrs	r3, r2
         );
}
 8007306:	4618      	mov	r0, r3
 8007308:	3724      	adds	r7, #36	; 0x24
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
	...

08007314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	3b01      	subs	r3, #1
 8007320:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007324:	d301      	bcc.n	800732a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007326:	2301      	movs	r3, #1
 8007328:	e00f      	b.n	800734a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800732a:	4a0a      	ldr	r2, [pc, #40]	; (8007354 <SysTick_Config+0x40>)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	3b01      	subs	r3, #1
 8007330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007332:	210f      	movs	r1, #15
 8007334:	f04f 30ff 	mov.w	r0, #4294967295
 8007338:	f7ff ff8e 	bl	8007258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800733c:	4b05      	ldr	r3, [pc, #20]	; (8007354 <SysTick_Config+0x40>)
 800733e:	2200      	movs	r2, #0
 8007340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007342:	4b04      	ldr	r3, [pc, #16]	; (8007354 <SysTick_Config+0x40>)
 8007344:	2207      	movs	r2, #7
 8007346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	e000e010 	.word	0xe000e010

08007358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f7ff ff29 	bl	80071b8 <__NVIC_SetPriorityGrouping>
}
 8007366:	bf00      	nop
 8007368:	3708      	adds	r7, #8
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b086      	sub	sp, #24
 8007372:	af00      	add	r7, sp, #0
 8007374:	4603      	mov	r3, r0
 8007376:	60b9      	str	r1, [r7, #8]
 8007378:	607a      	str	r2, [r7, #4]
 800737a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800737c:	f7ff ff40 	bl	8007200 <__NVIC_GetPriorityGrouping>
 8007380:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	68b9      	ldr	r1, [r7, #8]
 8007386:	6978      	ldr	r0, [r7, #20]
 8007388:	f7ff ff90 	bl	80072ac <NVIC_EncodePriority>
 800738c:	4602      	mov	r2, r0
 800738e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007392:	4611      	mov	r1, r2
 8007394:	4618      	mov	r0, r3
 8007396:	f7ff ff5f 	bl	8007258 <__NVIC_SetPriority>
}
 800739a:	bf00      	nop
 800739c:	3718      	adds	r7, #24
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b082      	sub	sp, #8
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	4603      	mov	r3, r0
 80073aa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80073ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7ff ff33 	bl	800721c <__NVIC_EnableIRQ>
}
 80073b6:	bf00      	nop
 80073b8:	3708      	adds	r7, #8
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b082      	sub	sp, #8
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f7ff ffa4 	bl	8007314 <SysTick_Config>
 80073cc:	4603      	mov	r3, r0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3708      	adds	r7, #8
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
	...

080073d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80073e0:	f7fc fe4e 	bl	8004080 <HAL_GetTick>
 80073e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d101      	bne.n	80073f0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e312      	b.n	8007a16 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a66      	ldr	r2, [pc, #408]	; (8007590 <HAL_DMA_Init+0x1b8>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d04a      	beq.n	8007490 <HAL_DMA_Init+0xb8>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a65      	ldr	r2, [pc, #404]	; (8007594 <HAL_DMA_Init+0x1bc>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d045      	beq.n	8007490 <HAL_DMA_Init+0xb8>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a63      	ldr	r2, [pc, #396]	; (8007598 <HAL_DMA_Init+0x1c0>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d040      	beq.n	8007490 <HAL_DMA_Init+0xb8>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a62      	ldr	r2, [pc, #392]	; (800759c <HAL_DMA_Init+0x1c4>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d03b      	beq.n	8007490 <HAL_DMA_Init+0xb8>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a60      	ldr	r2, [pc, #384]	; (80075a0 <HAL_DMA_Init+0x1c8>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d036      	beq.n	8007490 <HAL_DMA_Init+0xb8>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a5f      	ldr	r2, [pc, #380]	; (80075a4 <HAL_DMA_Init+0x1cc>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d031      	beq.n	8007490 <HAL_DMA_Init+0xb8>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a5d      	ldr	r2, [pc, #372]	; (80075a8 <HAL_DMA_Init+0x1d0>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d02c      	beq.n	8007490 <HAL_DMA_Init+0xb8>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a5c      	ldr	r2, [pc, #368]	; (80075ac <HAL_DMA_Init+0x1d4>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d027      	beq.n	8007490 <HAL_DMA_Init+0xb8>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a5a      	ldr	r2, [pc, #360]	; (80075b0 <HAL_DMA_Init+0x1d8>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d022      	beq.n	8007490 <HAL_DMA_Init+0xb8>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a59      	ldr	r2, [pc, #356]	; (80075b4 <HAL_DMA_Init+0x1dc>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d01d      	beq.n	8007490 <HAL_DMA_Init+0xb8>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a57      	ldr	r2, [pc, #348]	; (80075b8 <HAL_DMA_Init+0x1e0>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d018      	beq.n	8007490 <HAL_DMA_Init+0xb8>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a56      	ldr	r2, [pc, #344]	; (80075bc <HAL_DMA_Init+0x1e4>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d013      	beq.n	8007490 <HAL_DMA_Init+0xb8>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a54      	ldr	r2, [pc, #336]	; (80075c0 <HAL_DMA_Init+0x1e8>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d00e      	beq.n	8007490 <HAL_DMA_Init+0xb8>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a53      	ldr	r2, [pc, #332]	; (80075c4 <HAL_DMA_Init+0x1ec>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d009      	beq.n	8007490 <HAL_DMA_Init+0xb8>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a51      	ldr	r2, [pc, #324]	; (80075c8 <HAL_DMA_Init+0x1f0>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d004      	beq.n	8007490 <HAL_DMA_Init+0xb8>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a50      	ldr	r2, [pc, #320]	; (80075cc <HAL_DMA_Init+0x1f4>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d101      	bne.n	8007494 <HAL_DMA_Init+0xbc>
 8007490:	2301      	movs	r3, #1
 8007492:	e000      	b.n	8007496 <HAL_DMA_Init+0xbe>
 8007494:	2300      	movs	r3, #0
 8007496:	2b00      	cmp	r3, #0
 8007498:	f000 813c 	beq.w	8007714 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2202      	movs	r2, #2
 80074a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a37      	ldr	r2, [pc, #220]	; (8007590 <HAL_DMA_Init+0x1b8>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d04a      	beq.n	800754c <HAL_DMA_Init+0x174>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a36      	ldr	r2, [pc, #216]	; (8007594 <HAL_DMA_Init+0x1bc>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d045      	beq.n	800754c <HAL_DMA_Init+0x174>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a34      	ldr	r2, [pc, #208]	; (8007598 <HAL_DMA_Init+0x1c0>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d040      	beq.n	800754c <HAL_DMA_Init+0x174>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a33      	ldr	r2, [pc, #204]	; (800759c <HAL_DMA_Init+0x1c4>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d03b      	beq.n	800754c <HAL_DMA_Init+0x174>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a31      	ldr	r2, [pc, #196]	; (80075a0 <HAL_DMA_Init+0x1c8>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d036      	beq.n	800754c <HAL_DMA_Init+0x174>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a30      	ldr	r2, [pc, #192]	; (80075a4 <HAL_DMA_Init+0x1cc>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d031      	beq.n	800754c <HAL_DMA_Init+0x174>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a2e      	ldr	r2, [pc, #184]	; (80075a8 <HAL_DMA_Init+0x1d0>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d02c      	beq.n	800754c <HAL_DMA_Init+0x174>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a2d      	ldr	r2, [pc, #180]	; (80075ac <HAL_DMA_Init+0x1d4>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d027      	beq.n	800754c <HAL_DMA_Init+0x174>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a2b      	ldr	r2, [pc, #172]	; (80075b0 <HAL_DMA_Init+0x1d8>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d022      	beq.n	800754c <HAL_DMA_Init+0x174>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a2a      	ldr	r2, [pc, #168]	; (80075b4 <HAL_DMA_Init+0x1dc>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d01d      	beq.n	800754c <HAL_DMA_Init+0x174>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a28      	ldr	r2, [pc, #160]	; (80075b8 <HAL_DMA_Init+0x1e0>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d018      	beq.n	800754c <HAL_DMA_Init+0x174>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a27      	ldr	r2, [pc, #156]	; (80075bc <HAL_DMA_Init+0x1e4>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d013      	beq.n	800754c <HAL_DMA_Init+0x174>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a25      	ldr	r2, [pc, #148]	; (80075c0 <HAL_DMA_Init+0x1e8>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d00e      	beq.n	800754c <HAL_DMA_Init+0x174>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a24      	ldr	r2, [pc, #144]	; (80075c4 <HAL_DMA_Init+0x1ec>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d009      	beq.n	800754c <HAL_DMA_Init+0x174>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a22      	ldr	r2, [pc, #136]	; (80075c8 <HAL_DMA_Init+0x1f0>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d004      	beq.n	800754c <HAL_DMA_Init+0x174>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a21      	ldr	r2, [pc, #132]	; (80075cc <HAL_DMA_Init+0x1f4>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d108      	bne.n	800755e <HAL_DMA_Init+0x186>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f022 0201 	bic.w	r2, r2, #1
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	e007      	b.n	800756e <HAL_DMA_Init+0x196>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f022 0201 	bic.w	r2, r2, #1
 800756c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800756e:	e02f      	b.n	80075d0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007570:	f7fc fd86 	bl	8004080 <HAL_GetTick>
 8007574:	4602      	mov	r2, r0
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	2b05      	cmp	r3, #5
 800757c:	d928      	bls.n	80075d0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2220      	movs	r2, #32
 8007582:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2203      	movs	r2, #3
 8007588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e242      	b.n	8007a16 <HAL_DMA_Init+0x63e>
 8007590:	40020010 	.word	0x40020010
 8007594:	40020028 	.word	0x40020028
 8007598:	40020040 	.word	0x40020040
 800759c:	40020058 	.word	0x40020058
 80075a0:	40020070 	.word	0x40020070
 80075a4:	40020088 	.word	0x40020088
 80075a8:	400200a0 	.word	0x400200a0
 80075ac:	400200b8 	.word	0x400200b8
 80075b0:	40020410 	.word	0x40020410
 80075b4:	40020428 	.word	0x40020428
 80075b8:	40020440 	.word	0x40020440
 80075bc:	40020458 	.word	0x40020458
 80075c0:	40020470 	.word	0x40020470
 80075c4:	40020488 	.word	0x40020488
 80075c8:	400204a0 	.word	0x400204a0
 80075cc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1c8      	bne.n	8007570 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80075e6:	697a      	ldr	r2, [r7, #20]
 80075e8:	4b83      	ldr	r3, [pc, #524]	; (80077f8 <HAL_DMA_Init+0x420>)
 80075ea:	4013      	ands	r3, r2
 80075ec:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80075f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007602:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800760e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a1b      	ldr	r3, [r3, #32]
 8007614:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	4313      	orrs	r3, r2
 800761a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007620:	2b04      	cmp	r3, #4
 8007622:	d107      	bne.n	8007634 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762c:	4313      	orrs	r3, r2
 800762e:	697a      	ldr	r2, [r7, #20]
 8007630:	4313      	orrs	r3, r2
 8007632:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	2b28      	cmp	r3, #40	; 0x28
 800763a:	d903      	bls.n	8007644 <HAL_DMA_Init+0x26c>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	2b2e      	cmp	r3, #46	; 0x2e
 8007642:	d91f      	bls.n	8007684 <HAL_DMA_Init+0x2ac>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	2b3e      	cmp	r3, #62	; 0x3e
 800764a:	d903      	bls.n	8007654 <HAL_DMA_Init+0x27c>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	2b42      	cmp	r3, #66	; 0x42
 8007652:	d917      	bls.n	8007684 <HAL_DMA_Init+0x2ac>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	2b46      	cmp	r3, #70	; 0x46
 800765a:	d903      	bls.n	8007664 <HAL_DMA_Init+0x28c>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	2b48      	cmp	r3, #72	; 0x48
 8007662:	d90f      	bls.n	8007684 <HAL_DMA_Init+0x2ac>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	2b4e      	cmp	r3, #78	; 0x4e
 800766a:	d903      	bls.n	8007674 <HAL_DMA_Init+0x29c>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	2b52      	cmp	r3, #82	; 0x52
 8007672:	d907      	bls.n	8007684 <HAL_DMA_Init+0x2ac>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	2b73      	cmp	r3, #115	; 0x73
 800767a:	d905      	bls.n	8007688 <HAL_DMA_Init+0x2b0>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	2b77      	cmp	r3, #119	; 0x77
 8007682:	d801      	bhi.n	8007688 <HAL_DMA_Init+0x2b0>
 8007684:	2301      	movs	r3, #1
 8007686:	e000      	b.n	800768a <HAL_DMA_Init+0x2b2>
 8007688:	2300      	movs	r3, #0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d003      	beq.n	8007696 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007694:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	695b      	ldr	r3, [r3, #20]
 80076a4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	f023 0307 	bic.w	r3, r3, #7
 80076ac:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076bc:	2b04      	cmp	r3, #4
 80076be:	d117      	bne.n	80076f0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c4:	697a      	ldr	r2, [r7, #20]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00e      	beq.n	80076f0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f001 fdca 	bl	800926c <DMA_CheckFifoParam>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d008      	beq.n	80076f0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2240      	movs	r2, #64	; 0x40
 80076e2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e192      	b.n	8007a16 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	697a      	ldr	r2, [r7, #20]
 80076f6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f001 fd05 	bl	8009108 <DMA_CalcBaseAndBitshift>
 80076fe:	4603      	mov	r3, r0
 8007700:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007706:	f003 031f 	and.w	r3, r3, #31
 800770a:	223f      	movs	r2, #63	; 0x3f
 800770c:	409a      	lsls	r2, r3
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	609a      	str	r2, [r3, #8]
 8007712:	e0c8      	b.n	80078a6 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a38      	ldr	r2, [pc, #224]	; (80077fc <HAL_DMA_Init+0x424>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d022      	beq.n	8007764 <HAL_DMA_Init+0x38c>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a37      	ldr	r2, [pc, #220]	; (8007800 <HAL_DMA_Init+0x428>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d01d      	beq.n	8007764 <HAL_DMA_Init+0x38c>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a35      	ldr	r2, [pc, #212]	; (8007804 <HAL_DMA_Init+0x42c>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d018      	beq.n	8007764 <HAL_DMA_Init+0x38c>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a34      	ldr	r2, [pc, #208]	; (8007808 <HAL_DMA_Init+0x430>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d013      	beq.n	8007764 <HAL_DMA_Init+0x38c>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a32      	ldr	r2, [pc, #200]	; (800780c <HAL_DMA_Init+0x434>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d00e      	beq.n	8007764 <HAL_DMA_Init+0x38c>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a31      	ldr	r2, [pc, #196]	; (8007810 <HAL_DMA_Init+0x438>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d009      	beq.n	8007764 <HAL_DMA_Init+0x38c>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a2f      	ldr	r2, [pc, #188]	; (8007814 <HAL_DMA_Init+0x43c>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d004      	beq.n	8007764 <HAL_DMA_Init+0x38c>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a2e      	ldr	r2, [pc, #184]	; (8007818 <HAL_DMA_Init+0x440>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d101      	bne.n	8007768 <HAL_DMA_Init+0x390>
 8007764:	2301      	movs	r3, #1
 8007766:	e000      	b.n	800776a <HAL_DMA_Init+0x392>
 8007768:	2300      	movs	r3, #0
 800776a:	2b00      	cmp	r3, #0
 800776c:	f000 8092 	beq.w	8007894 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a21      	ldr	r2, [pc, #132]	; (80077fc <HAL_DMA_Init+0x424>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d021      	beq.n	80077be <HAL_DMA_Init+0x3e6>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a20      	ldr	r2, [pc, #128]	; (8007800 <HAL_DMA_Init+0x428>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d01c      	beq.n	80077be <HAL_DMA_Init+0x3e6>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a1e      	ldr	r2, [pc, #120]	; (8007804 <HAL_DMA_Init+0x42c>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d017      	beq.n	80077be <HAL_DMA_Init+0x3e6>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a1d      	ldr	r2, [pc, #116]	; (8007808 <HAL_DMA_Init+0x430>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d012      	beq.n	80077be <HAL_DMA_Init+0x3e6>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a1b      	ldr	r2, [pc, #108]	; (800780c <HAL_DMA_Init+0x434>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d00d      	beq.n	80077be <HAL_DMA_Init+0x3e6>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a1a      	ldr	r2, [pc, #104]	; (8007810 <HAL_DMA_Init+0x438>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d008      	beq.n	80077be <HAL_DMA_Init+0x3e6>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a18      	ldr	r2, [pc, #96]	; (8007814 <HAL_DMA_Init+0x43c>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d003      	beq.n	80077be <HAL_DMA_Init+0x3e6>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a17      	ldr	r2, [pc, #92]	; (8007818 <HAL_DMA_Init+0x440>)
 80077bc:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2202      	movs	r2, #2
 80077c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80077d6:	697a      	ldr	r2, [r7, #20]
 80077d8:	4b10      	ldr	r3, [pc, #64]	; (800781c <HAL_DMA_Init+0x444>)
 80077da:	4013      	ands	r3, r2
 80077dc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	2b40      	cmp	r3, #64	; 0x40
 80077e4:	d01c      	beq.n	8007820 <HAL_DMA_Init+0x448>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	2b80      	cmp	r3, #128	; 0x80
 80077ec:	d102      	bne.n	80077f4 <HAL_DMA_Init+0x41c>
 80077ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80077f2:	e016      	b.n	8007822 <HAL_DMA_Init+0x44a>
 80077f4:	2300      	movs	r3, #0
 80077f6:	e014      	b.n	8007822 <HAL_DMA_Init+0x44a>
 80077f8:	fe10803f 	.word	0xfe10803f
 80077fc:	58025408 	.word	0x58025408
 8007800:	5802541c 	.word	0x5802541c
 8007804:	58025430 	.word	0x58025430
 8007808:	58025444 	.word	0x58025444
 800780c:	58025458 	.word	0x58025458
 8007810:	5802546c 	.word	0x5802546c
 8007814:	58025480 	.word	0x58025480
 8007818:	58025494 	.word	0x58025494
 800781c:	fffe000f 	.word	0xfffe000f
 8007820:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	68d2      	ldr	r2, [r2, #12]
 8007826:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007828:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007830:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007838:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007840:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	69db      	ldr	r3, [r3, #28]
 8007846:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007848:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007850:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007852:	697a      	ldr	r2, [r7, #20]
 8007854:	4313      	orrs	r3, r2
 8007856:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	697a      	ldr	r2, [r7, #20]
 800785e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	461a      	mov	r2, r3
 8007866:	4b6e      	ldr	r3, [pc, #440]	; (8007a20 <HAL_DMA_Init+0x648>)
 8007868:	4413      	add	r3, r2
 800786a:	4a6e      	ldr	r2, [pc, #440]	; (8007a24 <HAL_DMA_Init+0x64c>)
 800786c:	fba2 2303 	umull	r2, r3, r2, r3
 8007870:	091b      	lsrs	r3, r3, #4
 8007872:	009a      	lsls	r2, r3, #2
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f001 fc45 	bl	8009108 <DMA_CalcBaseAndBitshift>
 800787e:	4603      	mov	r3, r0
 8007880:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007886:	f003 031f 	and.w	r3, r3, #31
 800788a:	2201      	movs	r2, #1
 800788c:	409a      	lsls	r2, r3
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	605a      	str	r2, [r3, #4]
 8007892:	e008      	b.n	80078a6 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2240      	movs	r2, #64	; 0x40
 8007898:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2203      	movs	r2, #3
 800789e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e0b7      	b.n	8007a16 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a5f      	ldr	r2, [pc, #380]	; (8007a28 <HAL_DMA_Init+0x650>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d072      	beq.n	8007996 <HAL_DMA_Init+0x5be>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a5d      	ldr	r2, [pc, #372]	; (8007a2c <HAL_DMA_Init+0x654>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d06d      	beq.n	8007996 <HAL_DMA_Init+0x5be>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a5c      	ldr	r2, [pc, #368]	; (8007a30 <HAL_DMA_Init+0x658>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d068      	beq.n	8007996 <HAL_DMA_Init+0x5be>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a5a      	ldr	r2, [pc, #360]	; (8007a34 <HAL_DMA_Init+0x65c>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d063      	beq.n	8007996 <HAL_DMA_Init+0x5be>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a59      	ldr	r2, [pc, #356]	; (8007a38 <HAL_DMA_Init+0x660>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d05e      	beq.n	8007996 <HAL_DMA_Init+0x5be>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a57      	ldr	r2, [pc, #348]	; (8007a3c <HAL_DMA_Init+0x664>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d059      	beq.n	8007996 <HAL_DMA_Init+0x5be>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a56      	ldr	r2, [pc, #344]	; (8007a40 <HAL_DMA_Init+0x668>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d054      	beq.n	8007996 <HAL_DMA_Init+0x5be>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a54      	ldr	r2, [pc, #336]	; (8007a44 <HAL_DMA_Init+0x66c>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d04f      	beq.n	8007996 <HAL_DMA_Init+0x5be>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a53      	ldr	r2, [pc, #332]	; (8007a48 <HAL_DMA_Init+0x670>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d04a      	beq.n	8007996 <HAL_DMA_Init+0x5be>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a51      	ldr	r2, [pc, #324]	; (8007a4c <HAL_DMA_Init+0x674>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d045      	beq.n	8007996 <HAL_DMA_Init+0x5be>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a50      	ldr	r2, [pc, #320]	; (8007a50 <HAL_DMA_Init+0x678>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d040      	beq.n	8007996 <HAL_DMA_Init+0x5be>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a4e      	ldr	r2, [pc, #312]	; (8007a54 <HAL_DMA_Init+0x67c>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d03b      	beq.n	8007996 <HAL_DMA_Init+0x5be>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a4d      	ldr	r2, [pc, #308]	; (8007a58 <HAL_DMA_Init+0x680>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d036      	beq.n	8007996 <HAL_DMA_Init+0x5be>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a4b      	ldr	r2, [pc, #300]	; (8007a5c <HAL_DMA_Init+0x684>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d031      	beq.n	8007996 <HAL_DMA_Init+0x5be>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a4a      	ldr	r2, [pc, #296]	; (8007a60 <HAL_DMA_Init+0x688>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d02c      	beq.n	8007996 <HAL_DMA_Init+0x5be>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a48      	ldr	r2, [pc, #288]	; (8007a64 <HAL_DMA_Init+0x68c>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d027      	beq.n	8007996 <HAL_DMA_Init+0x5be>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a47      	ldr	r2, [pc, #284]	; (8007a68 <HAL_DMA_Init+0x690>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d022      	beq.n	8007996 <HAL_DMA_Init+0x5be>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a45      	ldr	r2, [pc, #276]	; (8007a6c <HAL_DMA_Init+0x694>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d01d      	beq.n	8007996 <HAL_DMA_Init+0x5be>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a44      	ldr	r2, [pc, #272]	; (8007a70 <HAL_DMA_Init+0x698>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d018      	beq.n	8007996 <HAL_DMA_Init+0x5be>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a42      	ldr	r2, [pc, #264]	; (8007a74 <HAL_DMA_Init+0x69c>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d013      	beq.n	8007996 <HAL_DMA_Init+0x5be>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a41      	ldr	r2, [pc, #260]	; (8007a78 <HAL_DMA_Init+0x6a0>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d00e      	beq.n	8007996 <HAL_DMA_Init+0x5be>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a3f      	ldr	r2, [pc, #252]	; (8007a7c <HAL_DMA_Init+0x6a4>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d009      	beq.n	8007996 <HAL_DMA_Init+0x5be>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a3e      	ldr	r2, [pc, #248]	; (8007a80 <HAL_DMA_Init+0x6a8>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d004      	beq.n	8007996 <HAL_DMA_Init+0x5be>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a3c      	ldr	r2, [pc, #240]	; (8007a84 <HAL_DMA_Init+0x6ac>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d101      	bne.n	800799a <HAL_DMA_Init+0x5c2>
 8007996:	2301      	movs	r3, #1
 8007998:	e000      	b.n	800799c <HAL_DMA_Init+0x5c4>
 800799a:	2300      	movs	r3, #0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d032      	beq.n	8007a06 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f001 fcdf 	bl	8009364 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	2b80      	cmp	r3, #128	; 0x80
 80079ac:	d102      	bne.n	80079b4 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	685a      	ldr	r2, [r3, #4]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079bc:	b2d2      	uxtb	r2, r2
 80079be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80079c8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d010      	beq.n	80079f4 <HAL_DMA_Init+0x61c>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	2b08      	cmp	r3, #8
 80079d8:	d80c      	bhi.n	80079f4 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f001 fd5c 	bl	8009498 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079e4:	2200      	movs	r2, #0
 80079e6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80079f0:	605a      	str	r2, [r3, #4]
 80079f2:	e008      	b.n	8007a06 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3718      	adds	r7, #24
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	a7fdabf8 	.word	0xa7fdabf8
 8007a24:	cccccccd 	.word	0xcccccccd
 8007a28:	40020010 	.word	0x40020010
 8007a2c:	40020028 	.word	0x40020028
 8007a30:	40020040 	.word	0x40020040
 8007a34:	40020058 	.word	0x40020058
 8007a38:	40020070 	.word	0x40020070
 8007a3c:	40020088 	.word	0x40020088
 8007a40:	400200a0 	.word	0x400200a0
 8007a44:	400200b8 	.word	0x400200b8
 8007a48:	40020410 	.word	0x40020410
 8007a4c:	40020428 	.word	0x40020428
 8007a50:	40020440 	.word	0x40020440
 8007a54:	40020458 	.word	0x40020458
 8007a58:	40020470 	.word	0x40020470
 8007a5c:	40020488 	.word	0x40020488
 8007a60:	400204a0 	.word	0x400204a0
 8007a64:	400204b8 	.word	0x400204b8
 8007a68:	58025408 	.word	0x58025408
 8007a6c:	5802541c 	.word	0x5802541c
 8007a70:	58025430 	.word	0x58025430
 8007a74:	58025444 	.word	0x58025444
 8007a78:	58025458 	.word	0x58025458
 8007a7c:	5802546c 	.word	0x5802546c
 8007a80:	58025480 	.word	0x58025480
 8007a84:	58025494 	.word	0x58025494

08007a88 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
 8007a94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a96:	2300      	movs	r3, #0
 8007a98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d101      	bne.n	8007aa4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e226      	b.n	8007ef2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d101      	bne.n	8007ab2 <HAL_DMA_Start_IT+0x2a>
 8007aae:	2302      	movs	r3, #2
 8007ab0:	e21f      	b.n	8007ef2 <HAL_DMA_Start_IT+0x46a>
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	f040 820a 	bne.w	8007edc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2202      	movs	r2, #2
 8007acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a68      	ldr	r2, [pc, #416]	; (8007c7c <HAL_DMA_Start_IT+0x1f4>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d04a      	beq.n	8007b76 <HAL_DMA_Start_IT+0xee>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a66      	ldr	r2, [pc, #408]	; (8007c80 <HAL_DMA_Start_IT+0x1f8>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d045      	beq.n	8007b76 <HAL_DMA_Start_IT+0xee>
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a65      	ldr	r2, [pc, #404]	; (8007c84 <HAL_DMA_Start_IT+0x1fc>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d040      	beq.n	8007b76 <HAL_DMA_Start_IT+0xee>
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a63      	ldr	r2, [pc, #396]	; (8007c88 <HAL_DMA_Start_IT+0x200>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d03b      	beq.n	8007b76 <HAL_DMA_Start_IT+0xee>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a62      	ldr	r2, [pc, #392]	; (8007c8c <HAL_DMA_Start_IT+0x204>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d036      	beq.n	8007b76 <HAL_DMA_Start_IT+0xee>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a60      	ldr	r2, [pc, #384]	; (8007c90 <HAL_DMA_Start_IT+0x208>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d031      	beq.n	8007b76 <HAL_DMA_Start_IT+0xee>
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a5f      	ldr	r2, [pc, #380]	; (8007c94 <HAL_DMA_Start_IT+0x20c>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d02c      	beq.n	8007b76 <HAL_DMA_Start_IT+0xee>
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a5d      	ldr	r2, [pc, #372]	; (8007c98 <HAL_DMA_Start_IT+0x210>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d027      	beq.n	8007b76 <HAL_DMA_Start_IT+0xee>
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a5c      	ldr	r2, [pc, #368]	; (8007c9c <HAL_DMA_Start_IT+0x214>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d022      	beq.n	8007b76 <HAL_DMA_Start_IT+0xee>
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a5a      	ldr	r2, [pc, #360]	; (8007ca0 <HAL_DMA_Start_IT+0x218>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d01d      	beq.n	8007b76 <HAL_DMA_Start_IT+0xee>
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a59      	ldr	r2, [pc, #356]	; (8007ca4 <HAL_DMA_Start_IT+0x21c>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d018      	beq.n	8007b76 <HAL_DMA_Start_IT+0xee>
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a57      	ldr	r2, [pc, #348]	; (8007ca8 <HAL_DMA_Start_IT+0x220>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d013      	beq.n	8007b76 <HAL_DMA_Start_IT+0xee>
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a56      	ldr	r2, [pc, #344]	; (8007cac <HAL_DMA_Start_IT+0x224>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d00e      	beq.n	8007b76 <HAL_DMA_Start_IT+0xee>
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a54      	ldr	r2, [pc, #336]	; (8007cb0 <HAL_DMA_Start_IT+0x228>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d009      	beq.n	8007b76 <HAL_DMA_Start_IT+0xee>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a53      	ldr	r2, [pc, #332]	; (8007cb4 <HAL_DMA_Start_IT+0x22c>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d004      	beq.n	8007b76 <HAL_DMA_Start_IT+0xee>
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a51      	ldr	r2, [pc, #324]	; (8007cb8 <HAL_DMA_Start_IT+0x230>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d108      	bne.n	8007b88 <HAL_DMA_Start_IT+0x100>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f022 0201 	bic.w	r2, r2, #1
 8007b84:	601a      	str	r2, [r3, #0]
 8007b86:	e007      	b.n	8007b98 <HAL_DMA_Start_IT+0x110>
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f022 0201 	bic.w	r2, r2, #1
 8007b96:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	68b9      	ldr	r1, [r7, #8]
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f001 f906 	bl	8008db0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a34      	ldr	r2, [pc, #208]	; (8007c7c <HAL_DMA_Start_IT+0x1f4>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d04a      	beq.n	8007c44 <HAL_DMA_Start_IT+0x1bc>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a33      	ldr	r2, [pc, #204]	; (8007c80 <HAL_DMA_Start_IT+0x1f8>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d045      	beq.n	8007c44 <HAL_DMA_Start_IT+0x1bc>
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a31      	ldr	r2, [pc, #196]	; (8007c84 <HAL_DMA_Start_IT+0x1fc>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d040      	beq.n	8007c44 <HAL_DMA_Start_IT+0x1bc>
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a30      	ldr	r2, [pc, #192]	; (8007c88 <HAL_DMA_Start_IT+0x200>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d03b      	beq.n	8007c44 <HAL_DMA_Start_IT+0x1bc>
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a2e      	ldr	r2, [pc, #184]	; (8007c8c <HAL_DMA_Start_IT+0x204>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d036      	beq.n	8007c44 <HAL_DMA_Start_IT+0x1bc>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a2d      	ldr	r2, [pc, #180]	; (8007c90 <HAL_DMA_Start_IT+0x208>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d031      	beq.n	8007c44 <HAL_DMA_Start_IT+0x1bc>
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a2b      	ldr	r2, [pc, #172]	; (8007c94 <HAL_DMA_Start_IT+0x20c>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d02c      	beq.n	8007c44 <HAL_DMA_Start_IT+0x1bc>
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a2a      	ldr	r2, [pc, #168]	; (8007c98 <HAL_DMA_Start_IT+0x210>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d027      	beq.n	8007c44 <HAL_DMA_Start_IT+0x1bc>
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a28      	ldr	r2, [pc, #160]	; (8007c9c <HAL_DMA_Start_IT+0x214>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d022      	beq.n	8007c44 <HAL_DMA_Start_IT+0x1bc>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a27      	ldr	r2, [pc, #156]	; (8007ca0 <HAL_DMA_Start_IT+0x218>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d01d      	beq.n	8007c44 <HAL_DMA_Start_IT+0x1bc>
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a25      	ldr	r2, [pc, #148]	; (8007ca4 <HAL_DMA_Start_IT+0x21c>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d018      	beq.n	8007c44 <HAL_DMA_Start_IT+0x1bc>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a24      	ldr	r2, [pc, #144]	; (8007ca8 <HAL_DMA_Start_IT+0x220>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d013      	beq.n	8007c44 <HAL_DMA_Start_IT+0x1bc>
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a22      	ldr	r2, [pc, #136]	; (8007cac <HAL_DMA_Start_IT+0x224>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d00e      	beq.n	8007c44 <HAL_DMA_Start_IT+0x1bc>
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a21      	ldr	r2, [pc, #132]	; (8007cb0 <HAL_DMA_Start_IT+0x228>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d009      	beq.n	8007c44 <HAL_DMA_Start_IT+0x1bc>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a1f      	ldr	r2, [pc, #124]	; (8007cb4 <HAL_DMA_Start_IT+0x22c>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d004      	beq.n	8007c44 <HAL_DMA_Start_IT+0x1bc>
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a1e      	ldr	r2, [pc, #120]	; (8007cb8 <HAL_DMA_Start_IT+0x230>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d101      	bne.n	8007c48 <HAL_DMA_Start_IT+0x1c0>
 8007c44:	2301      	movs	r3, #1
 8007c46:	e000      	b.n	8007c4a <HAL_DMA_Start_IT+0x1c2>
 8007c48:	2300      	movs	r3, #0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d036      	beq.n	8007cbc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f023 021e 	bic.w	r2, r3, #30
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f042 0216 	orr.w	r2, r2, #22
 8007c60:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d03e      	beq.n	8007ce8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f042 0208 	orr.w	r2, r2, #8
 8007c78:	601a      	str	r2, [r3, #0]
 8007c7a:	e035      	b.n	8007ce8 <HAL_DMA_Start_IT+0x260>
 8007c7c:	40020010 	.word	0x40020010
 8007c80:	40020028 	.word	0x40020028
 8007c84:	40020040 	.word	0x40020040
 8007c88:	40020058 	.word	0x40020058
 8007c8c:	40020070 	.word	0x40020070
 8007c90:	40020088 	.word	0x40020088
 8007c94:	400200a0 	.word	0x400200a0
 8007c98:	400200b8 	.word	0x400200b8
 8007c9c:	40020410 	.word	0x40020410
 8007ca0:	40020428 	.word	0x40020428
 8007ca4:	40020440 	.word	0x40020440
 8007ca8:	40020458 	.word	0x40020458
 8007cac:	40020470 	.word	0x40020470
 8007cb0:	40020488 	.word	0x40020488
 8007cb4:	400204a0 	.word	0x400204a0
 8007cb8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f023 020e 	bic.w	r2, r3, #14
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f042 020a 	orr.w	r2, r2, #10
 8007cce:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d007      	beq.n	8007ce8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f042 0204 	orr.w	r2, r2, #4
 8007ce6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a83      	ldr	r2, [pc, #524]	; (8007efc <HAL_DMA_Start_IT+0x474>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d072      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x350>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a82      	ldr	r2, [pc, #520]	; (8007f00 <HAL_DMA_Start_IT+0x478>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d06d      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x350>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a80      	ldr	r2, [pc, #512]	; (8007f04 <HAL_DMA_Start_IT+0x47c>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d068      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x350>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a7f      	ldr	r2, [pc, #508]	; (8007f08 <HAL_DMA_Start_IT+0x480>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d063      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x350>
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a7d      	ldr	r2, [pc, #500]	; (8007f0c <HAL_DMA_Start_IT+0x484>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d05e      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x350>
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a7c      	ldr	r2, [pc, #496]	; (8007f10 <HAL_DMA_Start_IT+0x488>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d059      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x350>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a7a      	ldr	r2, [pc, #488]	; (8007f14 <HAL_DMA_Start_IT+0x48c>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d054      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x350>
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a79      	ldr	r2, [pc, #484]	; (8007f18 <HAL_DMA_Start_IT+0x490>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d04f      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x350>
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a77      	ldr	r2, [pc, #476]	; (8007f1c <HAL_DMA_Start_IT+0x494>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d04a      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x350>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a76      	ldr	r2, [pc, #472]	; (8007f20 <HAL_DMA_Start_IT+0x498>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d045      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x350>
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a74      	ldr	r2, [pc, #464]	; (8007f24 <HAL_DMA_Start_IT+0x49c>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d040      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x350>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a73      	ldr	r2, [pc, #460]	; (8007f28 <HAL_DMA_Start_IT+0x4a0>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d03b      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x350>
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a71      	ldr	r2, [pc, #452]	; (8007f2c <HAL_DMA_Start_IT+0x4a4>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d036      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x350>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a70      	ldr	r2, [pc, #448]	; (8007f30 <HAL_DMA_Start_IT+0x4a8>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d031      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x350>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a6e      	ldr	r2, [pc, #440]	; (8007f34 <HAL_DMA_Start_IT+0x4ac>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d02c      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x350>
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a6d      	ldr	r2, [pc, #436]	; (8007f38 <HAL_DMA_Start_IT+0x4b0>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d027      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x350>
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a6b      	ldr	r2, [pc, #428]	; (8007f3c <HAL_DMA_Start_IT+0x4b4>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d022      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x350>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a6a      	ldr	r2, [pc, #424]	; (8007f40 <HAL_DMA_Start_IT+0x4b8>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d01d      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x350>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a68      	ldr	r2, [pc, #416]	; (8007f44 <HAL_DMA_Start_IT+0x4bc>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d018      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x350>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a67      	ldr	r2, [pc, #412]	; (8007f48 <HAL_DMA_Start_IT+0x4c0>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d013      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x350>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a65      	ldr	r2, [pc, #404]	; (8007f4c <HAL_DMA_Start_IT+0x4c4>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d00e      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x350>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a64      	ldr	r2, [pc, #400]	; (8007f50 <HAL_DMA_Start_IT+0x4c8>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d009      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x350>
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a62      	ldr	r2, [pc, #392]	; (8007f54 <HAL_DMA_Start_IT+0x4cc>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d004      	beq.n	8007dd8 <HAL_DMA_Start_IT+0x350>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a61      	ldr	r2, [pc, #388]	; (8007f58 <HAL_DMA_Start_IT+0x4d0>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d101      	bne.n	8007ddc <HAL_DMA_Start_IT+0x354>
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e000      	b.n	8007dde <HAL_DMA_Start_IT+0x356>
 8007ddc:	2300      	movs	r3, #0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d01a      	beq.n	8007e18 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d007      	beq.n	8007e00 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dfe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d007      	beq.n	8007e18 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e16:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a37      	ldr	r2, [pc, #220]	; (8007efc <HAL_DMA_Start_IT+0x474>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d04a      	beq.n	8007eb8 <HAL_DMA_Start_IT+0x430>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a36      	ldr	r2, [pc, #216]	; (8007f00 <HAL_DMA_Start_IT+0x478>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d045      	beq.n	8007eb8 <HAL_DMA_Start_IT+0x430>
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a34      	ldr	r2, [pc, #208]	; (8007f04 <HAL_DMA_Start_IT+0x47c>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d040      	beq.n	8007eb8 <HAL_DMA_Start_IT+0x430>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a33      	ldr	r2, [pc, #204]	; (8007f08 <HAL_DMA_Start_IT+0x480>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d03b      	beq.n	8007eb8 <HAL_DMA_Start_IT+0x430>
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a31      	ldr	r2, [pc, #196]	; (8007f0c <HAL_DMA_Start_IT+0x484>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d036      	beq.n	8007eb8 <HAL_DMA_Start_IT+0x430>
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a30      	ldr	r2, [pc, #192]	; (8007f10 <HAL_DMA_Start_IT+0x488>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d031      	beq.n	8007eb8 <HAL_DMA_Start_IT+0x430>
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a2e      	ldr	r2, [pc, #184]	; (8007f14 <HAL_DMA_Start_IT+0x48c>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d02c      	beq.n	8007eb8 <HAL_DMA_Start_IT+0x430>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a2d      	ldr	r2, [pc, #180]	; (8007f18 <HAL_DMA_Start_IT+0x490>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d027      	beq.n	8007eb8 <HAL_DMA_Start_IT+0x430>
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a2b      	ldr	r2, [pc, #172]	; (8007f1c <HAL_DMA_Start_IT+0x494>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d022      	beq.n	8007eb8 <HAL_DMA_Start_IT+0x430>
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a2a      	ldr	r2, [pc, #168]	; (8007f20 <HAL_DMA_Start_IT+0x498>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d01d      	beq.n	8007eb8 <HAL_DMA_Start_IT+0x430>
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a28      	ldr	r2, [pc, #160]	; (8007f24 <HAL_DMA_Start_IT+0x49c>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d018      	beq.n	8007eb8 <HAL_DMA_Start_IT+0x430>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a27      	ldr	r2, [pc, #156]	; (8007f28 <HAL_DMA_Start_IT+0x4a0>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d013      	beq.n	8007eb8 <HAL_DMA_Start_IT+0x430>
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a25      	ldr	r2, [pc, #148]	; (8007f2c <HAL_DMA_Start_IT+0x4a4>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d00e      	beq.n	8007eb8 <HAL_DMA_Start_IT+0x430>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a24      	ldr	r2, [pc, #144]	; (8007f30 <HAL_DMA_Start_IT+0x4a8>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d009      	beq.n	8007eb8 <HAL_DMA_Start_IT+0x430>
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a22      	ldr	r2, [pc, #136]	; (8007f34 <HAL_DMA_Start_IT+0x4ac>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d004      	beq.n	8007eb8 <HAL_DMA_Start_IT+0x430>
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a21      	ldr	r2, [pc, #132]	; (8007f38 <HAL_DMA_Start_IT+0x4b0>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d108      	bne.n	8007eca <HAL_DMA_Start_IT+0x442>
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f042 0201 	orr.w	r2, r2, #1
 8007ec6:	601a      	str	r2, [r3, #0]
 8007ec8:	e012      	b.n	8007ef0 <HAL_DMA_Start_IT+0x468>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f042 0201 	orr.w	r2, r2, #1
 8007ed8:	601a      	str	r2, [r3, #0]
 8007eda:	e009      	b.n	8007ef0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ee2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3718      	adds	r7, #24
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	40020010 	.word	0x40020010
 8007f00:	40020028 	.word	0x40020028
 8007f04:	40020040 	.word	0x40020040
 8007f08:	40020058 	.word	0x40020058
 8007f0c:	40020070 	.word	0x40020070
 8007f10:	40020088 	.word	0x40020088
 8007f14:	400200a0 	.word	0x400200a0
 8007f18:	400200b8 	.word	0x400200b8
 8007f1c:	40020410 	.word	0x40020410
 8007f20:	40020428 	.word	0x40020428
 8007f24:	40020440 	.word	0x40020440
 8007f28:	40020458 	.word	0x40020458
 8007f2c:	40020470 	.word	0x40020470
 8007f30:	40020488 	.word	0x40020488
 8007f34:	400204a0 	.word	0x400204a0
 8007f38:	400204b8 	.word	0x400204b8
 8007f3c:	58025408 	.word	0x58025408
 8007f40:	5802541c 	.word	0x5802541c
 8007f44:	58025430 	.word	0x58025430
 8007f48:	58025444 	.word	0x58025444
 8007f4c:	58025458 	.word	0x58025458
 8007f50:	5802546c 	.word	0x5802546c
 8007f54:	58025480 	.word	0x58025480
 8007f58:	58025494 	.word	0x58025494

08007f5c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b08a      	sub	sp, #40	; 0x28
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007f64:	2300      	movs	r3, #0
 8007f66:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007f68:	4b67      	ldr	r3, [pc, #412]	; (8008108 <HAL_DMA_IRQHandler+0x1ac>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a67      	ldr	r2, [pc, #412]	; (800810c <HAL_DMA_IRQHandler+0x1b0>)
 8007f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f72:	0a9b      	lsrs	r3, r3, #10
 8007f74:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f7a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f80:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007f82:	6a3b      	ldr	r3, [r7, #32]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a5f      	ldr	r2, [pc, #380]	; (8008110 <HAL_DMA_IRQHandler+0x1b4>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d04a      	beq.n	800802e <HAL_DMA_IRQHandler+0xd2>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a5d      	ldr	r2, [pc, #372]	; (8008114 <HAL_DMA_IRQHandler+0x1b8>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d045      	beq.n	800802e <HAL_DMA_IRQHandler+0xd2>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a5c      	ldr	r2, [pc, #368]	; (8008118 <HAL_DMA_IRQHandler+0x1bc>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d040      	beq.n	800802e <HAL_DMA_IRQHandler+0xd2>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a5a      	ldr	r2, [pc, #360]	; (800811c <HAL_DMA_IRQHandler+0x1c0>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d03b      	beq.n	800802e <HAL_DMA_IRQHandler+0xd2>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a59      	ldr	r2, [pc, #356]	; (8008120 <HAL_DMA_IRQHandler+0x1c4>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d036      	beq.n	800802e <HAL_DMA_IRQHandler+0xd2>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a57      	ldr	r2, [pc, #348]	; (8008124 <HAL_DMA_IRQHandler+0x1c8>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d031      	beq.n	800802e <HAL_DMA_IRQHandler+0xd2>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a56      	ldr	r2, [pc, #344]	; (8008128 <HAL_DMA_IRQHandler+0x1cc>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d02c      	beq.n	800802e <HAL_DMA_IRQHandler+0xd2>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a54      	ldr	r2, [pc, #336]	; (800812c <HAL_DMA_IRQHandler+0x1d0>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d027      	beq.n	800802e <HAL_DMA_IRQHandler+0xd2>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a53      	ldr	r2, [pc, #332]	; (8008130 <HAL_DMA_IRQHandler+0x1d4>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d022      	beq.n	800802e <HAL_DMA_IRQHandler+0xd2>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a51      	ldr	r2, [pc, #324]	; (8008134 <HAL_DMA_IRQHandler+0x1d8>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d01d      	beq.n	800802e <HAL_DMA_IRQHandler+0xd2>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a50      	ldr	r2, [pc, #320]	; (8008138 <HAL_DMA_IRQHandler+0x1dc>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d018      	beq.n	800802e <HAL_DMA_IRQHandler+0xd2>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a4e      	ldr	r2, [pc, #312]	; (800813c <HAL_DMA_IRQHandler+0x1e0>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d013      	beq.n	800802e <HAL_DMA_IRQHandler+0xd2>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a4d      	ldr	r2, [pc, #308]	; (8008140 <HAL_DMA_IRQHandler+0x1e4>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d00e      	beq.n	800802e <HAL_DMA_IRQHandler+0xd2>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a4b      	ldr	r2, [pc, #300]	; (8008144 <HAL_DMA_IRQHandler+0x1e8>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d009      	beq.n	800802e <HAL_DMA_IRQHandler+0xd2>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a4a      	ldr	r2, [pc, #296]	; (8008148 <HAL_DMA_IRQHandler+0x1ec>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d004      	beq.n	800802e <HAL_DMA_IRQHandler+0xd2>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a48      	ldr	r2, [pc, #288]	; (800814c <HAL_DMA_IRQHandler+0x1f0>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d101      	bne.n	8008032 <HAL_DMA_IRQHandler+0xd6>
 800802e:	2301      	movs	r3, #1
 8008030:	e000      	b.n	8008034 <HAL_DMA_IRQHandler+0xd8>
 8008032:	2300      	movs	r3, #0
 8008034:	2b00      	cmp	r3, #0
 8008036:	f000 842b 	beq.w	8008890 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800803e:	f003 031f 	and.w	r3, r3, #31
 8008042:	2208      	movs	r2, #8
 8008044:	409a      	lsls	r2, r3
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	4013      	ands	r3, r2
 800804a:	2b00      	cmp	r3, #0
 800804c:	f000 80a2 	beq.w	8008194 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a2e      	ldr	r2, [pc, #184]	; (8008110 <HAL_DMA_IRQHandler+0x1b4>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d04a      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x194>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a2d      	ldr	r2, [pc, #180]	; (8008114 <HAL_DMA_IRQHandler+0x1b8>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d045      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x194>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a2b      	ldr	r2, [pc, #172]	; (8008118 <HAL_DMA_IRQHandler+0x1bc>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d040      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x194>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a2a      	ldr	r2, [pc, #168]	; (800811c <HAL_DMA_IRQHandler+0x1c0>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d03b      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x194>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a28      	ldr	r2, [pc, #160]	; (8008120 <HAL_DMA_IRQHandler+0x1c4>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d036      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x194>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a27      	ldr	r2, [pc, #156]	; (8008124 <HAL_DMA_IRQHandler+0x1c8>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d031      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x194>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a25      	ldr	r2, [pc, #148]	; (8008128 <HAL_DMA_IRQHandler+0x1cc>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d02c      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x194>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a24      	ldr	r2, [pc, #144]	; (800812c <HAL_DMA_IRQHandler+0x1d0>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d027      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x194>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a22      	ldr	r2, [pc, #136]	; (8008130 <HAL_DMA_IRQHandler+0x1d4>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d022      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x194>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a21      	ldr	r2, [pc, #132]	; (8008134 <HAL_DMA_IRQHandler+0x1d8>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d01d      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x194>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a1f      	ldr	r2, [pc, #124]	; (8008138 <HAL_DMA_IRQHandler+0x1dc>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d018      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x194>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a1e      	ldr	r2, [pc, #120]	; (800813c <HAL_DMA_IRQHandler+0x1e0>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d013      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x194>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a1c      	ldr	r2, [pc, #112]	; (8008140 <HAL_DMA_IRQHandler+0x1e4>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d00e      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x194>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a1b      	ldr	r2, [pc, #108]	; (8008144 <HAL_DMA_IRQHandler+0x1e8>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d009      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x194>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a19      	ldr	r2, [pc, #100]	; (8008148 <HAL_DMA_IRQHandler+0x1ec>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d004      	beq.n	80080f0 <HAL_DMA_IRQHandler+0x194>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a18      	ldr	r2, [pc, #96]	; (800814c <HAL_DMA_IRQHandler+0x1f0>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d12f      	bne.n	8008150 <HAL_DMA_IRQHandler+0x1f4>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 0304 	and.w	r3, r3, #4
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	bf14      	ite	ne
 80080fe:	2301      	movne	r3, #1
 8008100:	2300      	moveq	r3, #0
 8008102:	b2db      	uxtb	r3, r3
 8008104:	e02e      	b.n	8008164 <HAL_DMA_IRQHandler+0x208>
 8008106:	bf00      	nop
 8008108:	24000038 	.word	0x24000038
 800810c:	1b4e81b5 	.word	0x1b4e81b5
 8008110:	40020010 	.word	0x40020010
 8008114:	40020028 	.word	0x40020028
 8008118:	40020040 	.word	0x40020040
 800811c:	40020058 	.word	0x40020058
 8008120:	40020070 	.word	0x40020070
 8008124:	40020088 	.word	0x40020088
 8008128:	400200a0 	.word	0x400200a0
 800812c:	400200b8 	.word	0x400200b8
 8008130:	40020410 	.word	0x40020410
 8008134:	40020428 	.word	0x40020428
 8008138:	40020440 	.word	0x40020440
 800813c:	40020458 	.word	0x40020458
 8008140:	40020470 	.word	0x40020470
 8008144:	40020488 	.word	0x40020488
 8008148:	400204a0 	.word	0x400204a0
 800814c:	400204b8 	.word	0x400204b8
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 0308 	and.w	r3, r3, #8
 800815a:	2b00      	cmp	r3, #0
 800815c:	bf14      	ite	ne
 800815e:	2301      	movne	r3, #1
 8008160:	2300      	moveq	r3, #0
 8008162:	b2db      	uxtb	r3, r3
 8008164:	2b00      	cmp	r3, #0
 8008166:	d015      	beq.n	8008194 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f022 0204 	bic.w	r2, r2, #4
 8008176:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800817c:	f003 031f 	and.w	r3, r3, #31
 8008180:	2208      	movs	r2, #8
 8008182:	409a      	lsls	r2, r3
 8008184:	6a3b      	ldr	r3, [r7, #32]
 8008186:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800818c:	f043 0201 	orr.w	r2, r3, #1
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008198:	f003 031f 	and.w	r3, r3, #31
 800819c:	69ba      	ldr	r2, [r7, #24]
 800819e:	fa22 f303 	lsr.w	r3, r2, r3
 80081a2:	f003 0301 	and.w	r3, r3, #1
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d06e      	beq.n	8008288 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a69      	ldr	r2, [pc, #420]	; (8008354 <HAL_DMA_IRQHandler+0x3f8>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d04a      	beq.n	800824a <HAL_DMA_IRQHandler+0x2ee>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a67      	ldr	r2, [pc, #412]	; (8008358 <HAL_DMA_IRQHandler+0x3fc>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d045      	beq.n	800824a <HAL_DMA_IRQHandler+0x2ee>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a66      	ldr	r2, [pc, #408]	; (800835c <HAL_DMA_IRQHandler+0x400>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d040      	beq.n	800824a <HAL_DMA_IRQHandler+0x2ee>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a64      	ldr	r2, [pc, #400]	; (8008360 <HAL_DMA_IRQHandler+0x404>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d03b      	beq.n	800824a <HAL_DMA_IRQHandler+0x2ee>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a63      	ldr	r2, [pc, #396]	; (8008364 <HAL_DMA_IRQHandler+0x408>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d036      	beq.n	800824a <HAL_DMA_IRQHandler+0x2ee>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a61      	ldr	r2, [pc, #388]	; (8008368 <HAL_DMA_IRQHandler+0x40c>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d031      	beq.n	800824a <HAL_DMA_IRQHandler+0x2ee>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a60      	ldr	r2, [pc, #384]	; (800836c <HAL_DMA_IRQHandler+0x410>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d02c      	beq.n	800824a <HAL_DMA_IRQHandler+0x2ee>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a5e      	ldr	r2, [pc, #376]	; (8008370 <HAL_DMA_IRQHandler+0x414>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d027      	beq.n	800824a <HAL_DMA_IRQHandler+0x2ee>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a5d      	ldr	r2, [pc, #372]	; (8008374 <HAL_DMA_IRQHandler+0x418>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d022      	beq.n	800824a <HAL_DMA_IRQHandler+0x2ee>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a5b      	ldr	r2, [pc, #364]	; (8008378 <HAL_DMA_IRQHandler+0x41c>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d01d      	beq.n	800824a <HAL_DMA_IRQHandler+0x2ee>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a5a      	ldr	r2, [pc, #360]	; (800837c <HAL_DMA_IRQHandler+0x420>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d018      	beq.n	800824a <HAL_DMA_IRQHandler+0x2ee>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a58      	ldr	r2, [pc, #352]	; (8008380 <HAL_DMA_IRQHandler+0x424>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d013      	beq.n	800824a <HAL_DMA_IRQHandler+0x2ee>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a57      	ldr	r2, [pc, #348]	; (8008384 <HAL_DMA_IRQHandler+0x428>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d00e      	beq.n	800824a <HAL_DMA_IRQHandler+0x2ee>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a55      	ldr	r2, [pc, #340]	; (8008388 <HAL_DMA_IRQHandler+0x42c>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d009      	beq.n	800824a <HAL_DMA_IRQHandler+0x2ee>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a54      	ldr	r2, [pc, #336]	; (800838c <HAL_DMA_IRQHandler+0x430>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d004      	beq.n	800824a <HAL_DMA_IRQHandler+0x2ee>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a52      	ldr	r2, [pc, #328]	; (8008390 <HAL_DMA_IRQHandler+0x434>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d10a      	bne.n	8008260 <HAL_DMA_IRQHandler+0x304>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	695b      	ldr	r3, [r3, #20]
 8008250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008254:	2b00      	cmp	r3, #0
 8008256:	bf14      	ite	ne
 8008258:	2301      	movne	r3, #1
 800825a:	2300      	moveq	r3, #0
 800825c:	b2db      	uxtb	r3, r3
 800825e:	e003      	b.n	8008268 <HAL_DMA_IRQHandler+0x30c>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2300      	movs	r3, #0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d00d      	beq.n	8008288 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008270:	f003 031f 	and.w	r3, r3, #31
 8008274:	2201      	movs	r2, #1
 8008276:	409a      	lsls	r2, r3
 8008278:	6a3b      	ldr	r3, [r7, #32]
 800827a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008280:	f043 0202 	orr.w	r2, r3, #2
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800828c:	f003 031f 	and.w	r3, r3, #31
 8008290:	2204      	movs	r2, #4
 8008292:	409a      	lsls	r2, r3
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	4013      	ands	r3, r2
 8008298:	2b00      	cmp	r3, #0
 800829a:	f000 808f 	beq.w	80083bc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a2c      	ldr	r2, [pc, #176]	; (8008354 <HAL_DMA_IRQHandler+0x3f8>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d04a      	beq.n	800833e <HAL_DMA_IRQHandler+0x3e2>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a2a      	ldr	r2, [pc, #168]	; (8008358 <HAL_DMA_IRQHandler+0x3fc>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d045      	beq.n	800833e <HAL_DMA_IRQHandler+0x3e2>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a29      	ldr	r2, [pc, #164]	; (800835c <HAL_DMA_IRQHandler+0x400>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d040      	beq.n	800833e <HAL_DMA_IRQHandler+0x3e2>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a27      	ldr	r2, [pc, #156]	; (8008360 <HAL_DMA_IRQHandler+0x404>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d03b      	beq.n	800833e <HAL_DMA_IRQHandler+0x3e2>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a26      	ldr	r2, [pc, #152]	; (8008364 <HAL_DMA_IRQHandler+0x408>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d036      	beq.n	800833e <HAL_DMA_IRQHandler+0x3e2>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a24      	ldr	r2, [pc, #144]	; (8008368 <HAL_DMA_IRQHandler+0x40c>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d031      	beq.n	800833e <HAL_DMA_IRQHandler+0x3e2>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a23      	ldr	r2, [pc, #140]	; (800836c <HAL_DMA_IRQHandler+0x410>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d02c      	beq.n	800833e <HAL_DMA_IRQHandler+0x3e2>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a21      	ldr	r2, [pc, #132]	; (8008370 <HAL_DMA_IRQHandler+0x414>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d027      	beq.n	800833e <HAL_DMA_IRQHandler+0x3e2>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a20      	ldr	r2, [pc, #128]	; (8008374 <HAL_DMA_IRQHandler+0x418>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d022      	beq.n	800833e <HAL_DMA_IRQHandler+0x3e2>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a1e      	ldr	r2, [pc, #120]	; (8008378 <HAL_DMA_IRQHandler+0x41c>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d01d      	beq.n	800833e <HAL_DMA_IRQHandler+0x3e2>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a1d      	ldr	r2, [pc, #116]	; (800837c <HAL_DMA_IRQHandler+0x420>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d018      	beq.n	800833e <HAL_DMA_IRQHandler+0x3e2>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a1b      	ldr	r2, [pc, #108]	; (8008380 <HAL_DMA_IRQHandler+0x424>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d013      	beq.n	800833e <HAL_DMA_IRQHandler+0x3e2>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a1a      	ldr	r2, [pc, #104]	; (8008384 <HAL_DMA_IRQHandler+0x428>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d00e      	beq.n	800833e <HAL_DMA_IRQHandler+0x3e2>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a18      	ldr	r2, [pc, #96]	; (8008388 <HAL_DMA_IRQHandler+0x42c>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d009      	beq.n	800833e <HAL_DMA_IRQHandler+0x3e2>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a17      	ldr	r2, [pc, #92]	; (800838c <HAL_DMA_IRQHandler+0x430>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d004      	beq.n	800833e <HAL_DMA_IRQHandler+0x3e2>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a15      	ldr	r2, [pc, #84]	; (8008390 <HAL_DMA_IRQHandler+0x434>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d12a      	bne.n	8008394 <HAL_DMA_IRQHandler+0x438>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 0302 	and.w	r3, r3, #2
 8008348:	2b00      	cmp	r3, #0
 800834a:	bf14      	ite	ne
 800834c:	2301      	movne	r3, #1
 800834e:	2300      	moveq	r3, #0
 8008350:	b2db      	uxtb	r3, r3
 8008352:	e023      	b.n	800839c <HAL_DMA_IRQHandler+0x440>
 8008354:	40020010 	.word	0x40020010
 8008358:	40020028 	.word	0x40020028
 800835c:	40020040 	.word	0x40020040
 8008360:	40020058 	.word	0x40020058
 8008364:	40020070 	.word	0x40020070
 8008368:	40020088 	.word	0x40020088
 800836c:	400200a0 	.word	0x400200a0
 8008370:	400200b8 	.word	0x400200b8
 8008374:	40020410 	.word	0x40020410
 8008378:	40020428 	.word	0x40020428
 800837c:	40020440 	.word	0x40020440
 8008380:	40020458 	.word	0x40020458
 8008384:	40020470 	.word	0x40020470
 8008388:	40020488 	.word	0x40020488
 800838c:	400204a0 	.word	0x400204a0
 8008390:	400204b8 	.word	0x400204b8
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2300      	movs	r3, #0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d00d      	beq.n	80083bc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083a4:	f003 031f 	and.w	r3, r3, #31
 80083a8:	2204      	movs	r2, #4
 80083aa:	409a      	lsls	r2, r3
 80083ac:	6a3b      	ldr	r3, [r7, #32]
 80083ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083b4:	f043 0204 	orr.w	r2, r3, #4
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083c0:	f003 031f 	and.w	r3, r3, #31
 80083c4:	2210      	movs	r2, #16
 80083c6:	409a      	lsls	r2, r3
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	4013      	ands	r3, r2
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f000 80a6 	beq.w	800851e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a85      	ldr	r2, [pc, #532]	; (80085ec <HAL_DMA_IRQHandler+0x690>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d04a      	beq.n	8008472 <HAL_DMA_IRQHandler+0x516>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a83      	ldr	r2, [pc, #524]	; (80085f0 <HAL_DMA_IRQHandler+0x694>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d045      	beq.n	8008472 <HAL_DMA_IRQHandler+0x516>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a82      	ldr	r2, [pc, #520]	; (80085f4 <HAL_DMA_IRQHandler+0x698>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d040      	beq.n	8008472 <HAL_DMA_IRQHandler+0x516>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a80      	ldr	r2, [pc, #512]	; (80085f8 <HAL_DMA_IRQHandler+0x69c>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d03b      	beq.n	8008472 <HAL_DMA_IRQHandler+0x516>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a7f      	ldr	r2, [pc, #508]	; (80085fc <HAL_DMA_IRQHandler+0x6a0>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d036      	beq.n	8008472 <HAL_DMA_IRQHandler+0x516>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a7d      	ldr	r2, [pc, #500]	; (8008600 <HAL_DMA_IRQHandler+0x6a4>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d031      	beq.n	8008472 <HAL_DMA_IRQHandler+0x516>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a7c      	ldr	r2, [pc, #496]	; (8008604 <HAL_DMA_IRQHandler+0x6a8>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d02c      	beq.n	8008472 <HAL_DMA_IRQHandler+0x516>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a7a      	ldr	r2, [pc, #488]	; (8008608 <HAL_DMA_IRQHandler+0x6ac>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d027      	beq.n	8008472 <HAL_DMA_IRQHandler+0x516>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a79      	ldr	r2, [pc, #484]	; (800860c <HAL_DMA_IRQHandler+0x6b0>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d022      	beq.n	8008472 <HAL_DMA_IRQHandler+0x516>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a77      	ldr	r2, [pc, #476]	; (8008610 <HAL_DMA_IRQHandler+0x6b4>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d01d      	beq.n	8008472 <HAL_DMA_IRQHandler+0x516>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a76      	ldr	r2, [pc, #472]	; (8008614 <HAL_DMA_IRQHandler+0x6b8>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d018      	beq.n	8008472 <HAL_DMA_IRQHandler+0x516>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a74      	ldr	r2, [pc, #464]	; (8008618 <HAL_DMA_IRQHandler+0x6bc>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d013      	beq.n	8008472 <HAL_DMA_IRQHandler+0x516>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a73      	ldr	r2, [pc, #460]	; (800861c <HAL_DMA_IRQHandler+0x6c0>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d00e      	beq.n	8008472 <HAL_DMA_IRQHandler+0x516>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a71      	ldr	r2, [pc, #452]	; (8008620 <HAL_DMA_IRQHandler+0x6c4>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d009      	beq.n	8008472 <HAL_DMA_IRQHandler+0x516>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a70      	ldr	r2, [pc, #448]	; (8008624 <HAL_DMA_IRQHandler+0x6c8>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d004      	beq.n	8008472 <HAL_DMA_IRQHandler+0x516>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a6e      	ldr	r2, [pc, #440]	; (8008628 <HAL_DMA_IRQHandler+0x6cc>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d10a      	bne.n	8008488 <HAL_DMA_IRQHandler+0x52c>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 0308 	and.w	r3, r3, #8
 800847c:	2b00      	cmp	r3, #0
 800847e:	bf14      	ite	ne
 8008480:	2301      	movne	r3, #1
 8008482:	2300      	moveq	r3, #0
 8008484:	b2db      	uxtb	r3, r3
 8008486:	e009      	b.n	800849c <HAL_DMA_IRQHandler+0x540>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f003 0304 	and.w	r3, r3, #4
 8008492:	2b00      	cmp	r3, #0
 8008494:	bf14      	ite	ne
 8008496:	2301      	movne	r3, #1
 8008498:	2300      	moveq	r3, #0
 800849a:	b2db      	uxtb	r3, r3
 800849c:	2b00      	cmp	r3, #0
 800849e:	d03e      	beq.n	800851e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084a4:	f003 031f 	and.w	r3, r3, #31
 80084a8:	2210      	movs	r2, #16
 80084aa:	409a      	lsls	r2, r3
 80084ac:	6a3b      	ldr	r3, [r7, #32]
 80084ae:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d018      	beq.n	80084f0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d108      	bne.n	80084de <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d024      	beq.n	800851e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	4798      	blx	r3
 80084dc:	e01f      	b.n	800851e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d01b      	beq.n	800851e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	4798      	blx	r3
 80084ee:	e016      	b.n	800851e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d107      	bne.n	800850e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f022 0208 	bic.w	r2, r2, #8
 800850c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008512:	2b00      	cmp	r3, #0
 8008514:	d003      	beq.n	800851e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008522:	f003 031f 	and.w	r3, r3, #31
 8008526:	2220      	movs	r2, #32
 8008528:	409a      	lsls	r2, r3
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	4013      	ands	r3, r2
 800852e:	2b00      	cmp	r3, #0
 8008530:	f000 8110 	beq.w	8008754 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a2c      	ldr	r2, [pc, #176]	; (80085ec <HAL_DMA_IRQHandler+0x690>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d04a      	beq.n	80085d4 <HAL_DMA_IRQHandler+0x678>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a2b      	ldr	r2, [pc, #172]	; (80085f0 <HAL_DMA_IRQHandler+0x694>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d045      	beq.n	80085d4 <HAL_DMA_IRQHandler+0x678>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a29      	ldr	r2, [pc, #164]	; (80085f4 <HAL_DMA_IRQHandler+0x698>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d040      	beq.n	80085d4 <HAL_DMA_IRQHandler+0x678>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a28      	ldr	r2, [pc, #160]	; (80085f8 <HAL_DMA_IRQHandler+0x69c>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d03b      	beq.n	80085d4 <HAL_DMA_IRQHandler+0x678>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a26      	ldr	r2, [pc, #152]	; (80085fc <HAL_DMA_IRQHandler+0x6a0>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d036      	beq.n	80085d4 <HAL_DMA_IRQHandler+0x678>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a25      	ldr	r2, [pc, #148]	; (8008600 <HAL_DMA_IRQHandler+0x6a4>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d031      	beq.n	80085d4 <HAL_DMA_IRQHandler+0x678>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a23      	ldr	r2, [pc, #140]	; (8008604 <HAL_DMA_IRQHandler+0x6a8>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d02c      	beq.n	80085d4 <HAL_DMA_IRQHandler+0x678>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a22      	ldr	r2, [pc, #136]	; (8008608 <HAL_DMA_IRQHandler+0x6ac>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d027      	beq.n	80085d4 <HAL_DMA_IRQHandler+0x678>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a20      	ldr	r2, [pc, #128]	; (800860c <HAL_DMA_IRQHandler+0x6b0>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d022      	beq.n	80085d4 <HAL_DMA_IRQHandler+0x678>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a1f      	ldr	r2, [pc, #124]	; (8008610 <HAL_DMA_IRQHandler+0x6b4>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d01d      	beq.n	80085d4 <HAL_DMA_IRQHandler+0x678>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a1d      	ldr	r2, [pc, #116]	; (8008614 <HAL_DMA_IRQHandler+0x6b8>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d018      	beq.n	80085d4 <HAL_DMA_IRQHandler+0x678>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a1c      	ldr	r2, [pc, #112]	; (8008618 <HAL_DMA_IRQHandler+0x6bc>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d013      	beq.n	80085d4 <HAL_DMA_IRQHandler+0x678>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a1a      	ldr	r2, [pc, #104]	; (800861c <HAL_DMA_IRQHandler+0x6c0>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d00e      	beq.n	80085d4 <HAL_DMA_IRQHandler+0x678>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a19      	ldr	r2, [pc, #100]	; (8008620 <HAL_DMA_IRQHandler+0x6c4>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d009      	beq.n	80085d4 <HAL_DMA_IRQHandler+0x678>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a17      	ldr	r2, [pc, #92]	; (8008624 <HAL_DMA_IRQHandler+0x6c8>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d004      	beq.n	80085d4 <HAL_DMA_IRQHandler+0x678>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a16      	ldr	r2, [pc, #88]	; (8008628 <HAL_DMA_IRQHandler+0x6cc>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d12b      	bne.n	800862c <HAL_DMA_IRQHandler+0x6d0>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 0310 	and.w	r3, r3, #16
 80085de:	2b00      	cmp	r3, #0
 80085e0:	bf14      	ite	ne
 80085e2:	2301      	movne	r3, #1
 80085e4:	2300      	moveq	r3, #0
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	e02a      	b.n	8008640 <HAL_DMA_IRQHandler+0x6e4>
 80085ea:	bf00      	nop
 80085ec:	40020010 	.word	0x40020010
 80085f0:	40020028 	.word	0x40020028
 80085f4:	40020040 	.word	0x40020040
 80085f8:	40020058 	.word	0x40020058
 80085fc:	40020070 	.word	0x40020070
 8008600:	40020088 	.word	0x40020088
 8008604:	400200a0 	.word	0x400200a0
 8008608:	400200b8 	.word	0x400200b8
 800860c:	40020410 	.word	0x40020410
 8008610:	40020428 	.word	0x40020428
 8008614:	40020440 	.word	0x40020440
 8008618:	40020458 	.word	0x40020458
 800861c:	40020470 	.word	0x40020470
 8008620:	40020488 	.word	0x40020488
 8008624:	400204a0 	.word	0x400204a0
 8008628:	400204b8 	.word	0x400204b8
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 0302 	and.w	r3, r3, #2
 8008636:	2b00      	cmp	r3, #0
 8008638:	bf14      	ite	ne
 800863a:	2301      	movne	r3, #1
 800863c:	2300      	moveq	r3, #0
 800863e:	b2db      	uxtb	r3, r3
 8008640:	2b00      	cmp	r3, #0
 8008642:	f000 8087 	beq.w	8008754 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800864a:	f003 031f 	and.w	r3, r3, #31
 800864e:	2220      	movs	r2, #32
 8008650:	409a      	lsls	r2, r3
 8008652:	6a3b      	ldr	r3, [r7, #32]
 8008654:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800865c:	b2db      	uxtb	r3, r3
 800865e:	2b04      	cmp	r3, #4
 8008660:	d139      	bne.n	80086d6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f022 0216 	bic.w	r2, r2, #22
 8008670:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	695a      	ldr	r2, [r3, #20]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008680:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008686:	2b00      	cmp	r3, #0
 8008688:	d103      	bne.n	8008692 <HAL_DMA_IRQHandler+0x736>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800868e:	2b00      	cmp	r3, #0
 8008690:	d007      	beq.n	80086a2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f022 0208 	bic.w	r2, r2, #8
 80086a0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086a6:	f003 031f 	and.w	r3, r3, #31
 80086aa:	223f      	movs	r2, #63	; 0x3f
 80086ac:	409a      	lsls	r2, r3
 80086ae:	6a3b      	ldr	r3, [r7, #32]
 80086b0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2201      	movs	r2, #1
 80086b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	f000 834a 	beq.w	8008d60 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	4798      	blx	r3
          }
          return;
 80086d4:	e344      	b.n	8008d60 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d018      	beq.n	8008716 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d108      	bne.n	8008704 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d02c      	beq.n	8008754 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	4798      	blx	r3
 8008702:	e027      	b.n	8008754 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008708:	2b00      	cmp	r3, #0
 800870a:	d023      	beq.n	8008754 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	4798      	blx	r3
 8008714:	e01e      	b.n	8008754 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008720:	2b00      	cmp	r3, #0
 8008722:	d10f      	bne.n	8008744 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f022 0210 	bic.w	r2, r2, #16
 8008732:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008748:	2b00      	cmp	r3, #0
 800874a:	d003      	beq.n	8008754 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008758:	2b00      	cmp	r3, #0
 800875a:	f000 8306 	beq.w	8008d6a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008762:	f003 0301 	and.w	r3, r3, #1
 8008766:	2b00      	cmp	r3, #0
 8008768:	f000 8088 	beq.w	800887c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2204      	movs	r2, #4
 8008770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a7a      	ldr	r2, [pc, #488]	; (8008964 <HAL_DMA_IRQHandler+0xa08>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d04a      	beq.n	8008814 <HAL_DMA_IRQHandler+0x8b8>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a79      	ldr	r2, [pc, #484]	; (8008968 <HAL_DMA_IRQHandler+0xa0c>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d045      	beq.n	8008814 <HAL_DMA_IRQHandler+0x8b8>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a77      	ldr	r2, [pc, #476]	; (800896c <HAL_DMA_IRQHandler+0xa10>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d040      	beq.n	8008814 <HAL_DMA_IRQHandler+0x8b8>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a76      	ldr	r2, [pc, #472]	; (8008970 <HAL_DMA_IRQHandler+0xa14>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d03b      	beq.n	8008814 <HAL_DMA_IRQHandler+0x8b8>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a74      	ldr	r2, [pc, #464]	; (8008974 <HAL_DMA_IRQHandler+0xa18>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d036      	beq.n	8008814 <HAL_DMA_IRQHandler+0x8b8>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a73      	ldr	r2, [pc, #460]	; (8008978 <HAL_DMA_IRQHandler+0xa1c>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d031      	beq.n	8008814 <HAL_DMA_IRQHandler+0x8b8>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a71      	ldr	r2, [pc, #452]	; (800897c <HAL_DMA_IRQHandler+0xa20>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d02c      	beq.n	8008814 <HAL_DMA_IRQHandler+0x8b8>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a70      	ldr	r2, [pc, #448]	; (8008980 <HAL_DMA_IRQHandler+0xa24>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d027      	beq.n	8008814 <HAL_DMA_IRQHandler+0x8b8>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a6e      	ldr	r2, [pc, #440]	; (8008984 <HAL_DMA_IRQHandler+0xa28>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d022      	beq.n	8008814 <HAL_DMA_IRQHandler+0x8b8>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a6d      	ldr	r2, [pc, #436]	; (8008988 <HAL_DMA_IRQHandler+0xa2c>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d01d      	beq.n	8008814 <HAL_DMA_IRQHandler+0x8b8>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a6b      	ldr	r2, [pc, #428]	; (800898c <HAL_DMA_IRQHandler+0xa30>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d018      	beq.n	8008814 <HAL_DMA_IRQHandler+0x8b8>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a6a      	ldr	r2, [pc, #424]	; (8008990 <HAL_DMA_IRQHandler+0xa34>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d013      	beq.n	8008814 <HAL_DMA_IRQHandler+0x8b8>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a68      	ldr	r2, [pc, #416]	; (8008994 <HAL_DMA_IRQHandler+0xa38>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d00e      	beq.n	8008814 <HAL_DMA_IRQHandler+0x8b8>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a67      	ldr	r2, [pc, #412]	; (8008998 <HAL_DMA_IRQHandler+0xa3c>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d009      	beq.n	8008814 <HAL_DMA_IRQHandler+0x8b8>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a65      	ldr	r2, [pc, #404]	; (800899c <HAL_DMA_IRQHandler+0xa40>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d004      	beq.n	8008814 <HAL_DMA_IRQHandler+0x8b8>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a64      	ldr	r2, [pc, #400]	; (80089a0 <HAL_DMA_IRQHandler+0xa44>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d108      	bne.n	8008826 <HAL_DMA_IRQHandler+0x8ca>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f022 0201 	bic.w	r2, r2, #1
 8008822:	601a      	str	r2, [r3, #0]
 8008824:	e007      	b.n	8008836 <HAL_DMA_IRQHandler+0x8da>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f022 0201 	bic.w	r2, r2, #1
 8008834:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	3301      	adds	r3, #1
 800883a:	60fb      	str	r3, [r7, #12]
 800883c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800883e:	429a      	cmp	r2, r3
 8008840:	d307      	bcc.n	8008852 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 0301 	and.w	r3, r3, #1
 800884c:	2b00      	cmp	r3, #0
 800884e:	d1f2      	bne.n	8008836 <HAL_DMA_IRQHandler+0x8da>
 8008850:	e000      	b.n	8008854 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008852:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	2b00      	cmp	r3, #0
 8008860:	d004      	beq.n	800886c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2203      	movs	r2, #3
 8008866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800886a:	e003      	b.n	8008874 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008880:	2b00      	cmp	r3, #0
 8008882:	f000 8272 	beq.w	8008d6a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	4798      	blx	r3
 800888e:	e26c      	b.n	8008d6a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a43      	ldr	r2, [pc, #268]	; (80089a4 <HAL_DMA_IRQHandler+0xa48>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d022      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x984>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a42      	ldr	r2, [pc, #264]	; (80089a8 <HAL_DMA_IRQHandler+0xa4c>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d01d      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x984>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a40      	ldr	r2, [pc, #256]	; (80089ac <HAL_DMA_IRQHandler+0xa50>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d018      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x984>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a3f      	ldr	r2, [pc, #252]	; (80089b0 <HAL_DMA_IRQHandler+0xa54>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d013      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x984>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a3d      	ldr	r2, [pc, #244]	; (80089b4 <HAL_DMA_IRQHandler+0xa58>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d00e      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x984>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a3c      	ldr	r2, [pc, #240]	; (80089b8 <HAL_DMA_IRQHandler+0xa5c>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d009      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x984>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a3a      	ldr	r2, [pc, #232]	; (80089bc <HAL_DMA_IRQHandler+0xa60>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d004      	beq.n	80088e0 <HAL_DMA_IRQHandler+0x984>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a39      	ldr	r2, [pc, #228]	; (80089c0 <HAL_DMA_IRQHandler+0xa64>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d101      	bne.n	80088e4 <HAL_DMA_IRQHandler+0x988>
 80088e0:	2301      	movs	r3, #1
 80088e2:	e000      	b.n	80088e6 <HAL_DMA_IRQHandler+0x98a>
 80088e4:	2300      	movs	r3, #0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	f000 823f 	beq.w	8008d6a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088f8:	f003 031f 	and.w	r3, r3, #31
 80088fc:	2204      	movs	r2, #4
 80088fe:	409a      	lsls	r2, r3
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	4013      	ands	r3, r2
 8008904:	2b00      	cmp	r3, #0
 8008906:	f000 80cd 	beq.w	8008aa4 <HAL_DMA_IRQHandler+0xb48>
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	f003 0304 	and.w	r3, r3, #4
 8008910:	2b00      	cmp	r3, #0
 8008912:	f000 80c7 	beq.w	8008aa4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800891a:	f003 031f 	and.w	r3, r3, #31
 800891e:	2204      	movs	r2, #4
 8008920:	409a      	lsls	r2, r3
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800892c:	2b00      	cmp	r3, #0
 800892e:	d049      	beq.n	80089c4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008936:	2b00      	cmp	r3, #0
 8008938:	d109      	bne.n	800894e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800893e:	2b00      	cmp	r3, #0
 8008940:	f000 8210 	beq.w	8008d64 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800894c:	e20a      	b.n	8008d64 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008952:	2b00      	cmp	r3, #0
 8008954:	f000 8206 	beq.w	8008d64 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008960:	e200      	b.n	8008d64 <HAL_DMA_IRQHandler+0xe08>
 8008962:	bf00      	nop
 8008964:	40020010 	.word	0x40020010
 8008968:	40020028 	.word	0x40020028
 800896c:	40020040 	.word	0x40020040
 8008970:	40020058 	.word	0x40020058
 8008974:	40020070 	.word	0x40020070
 8008978:	40020088 	.word	0x40020088
 800897c:	400200a0 	.word	0x400200a0
 8008980:	400200b8 	.word	0x400200b8
 8008984:	40020410 	.word	0x40020410
 8008988:	40020428 	.word	0x40020428
 800898c:	40020440 	.word	0x40020440
 8008990:	40020458 	.word	0x40020458
 8008994:	40020470 	.word	0x40020470
 8008998:	40020488 	.word	0x40020488
 800899c:	400204a0 	.word	0x400204a0
 80089a0:	400204b8 	.word	0x400204b8
 80089a4:	58025408 	.word	0x58025408
 80089a8:	5802541c 	.word	0x5802541c
 80089ac:	58025430 	.word	0x58025430
 80089b0:	58025444 	.word	0x58025444
 80089b4:	58025458 	.word	0x58025458
 80089b8:	5802546c 	.word	0x5802546c
 80089bc:	58025480 	.word	0x58025480
 80089c0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	f003 0320 	and.w	r3, r3, #32
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d160      	bne.n	8008a90 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a7f      	ldr	r2, [pc, #508]	; (8008bd0 <HAL_DMA_IRQHandler+0xc74>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d04a      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xb12>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a7d      	ldr	r2, [pc, #500]	; (8008bd4 <HAL_DMA_IRQHandler+0xc78>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d045      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xb12>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a7c      	ldr	r2, [pc, #496]	; (8008bd8 <HAL_DMA_IRQHandler+0xc7c>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d040      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xb12>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a7a      	ldr	r2, [pc, #488]	; (8008bdc <HAL_DMA_IRQHandler+0xc80>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d03b      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xb12>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a79      	ldr	r2, [pc, #484]	; (8008be0 <HAL_DMA_IRQHandler+0xc84>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d036      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xb12>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a77      	ldr	r2, [pc, #476]	; (8008be4 <HAL_DMA_IRQHandler+0xc88>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d031      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xb12>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a76      	ldr	r2, [pc, #472]	; (8008be8 <HAL_DMA_IRQHandler+0xc8c>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d02c      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xb12>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a74      	ldr	r2, [pc, #464]	; (8008bec <HAL_DMA_IRQHandler+0xc90>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d027      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xb12>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a73      	ldr	r2, [pc, #460]	; (8008bf0 <HAL_DMA_IRQHandler+0xc94>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d022      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xb12>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a71      	ldr	r2, [pc, #452]	; (8008bf4 <HAL_DMA_IRQHandler+0xc98>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d01d      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xb12>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a70      	ldr	r2, [pc, #448]	; (8008bf8 <HAL_DMA_IRQHandler+0xc9c>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d018      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xb12>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a6e      	ldr	r2, [pc, #440]	; (8008bfc <HAL_DMA_IRQHandler+0xca0>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d013      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xb12>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a6d      	ldr	r2, [pc, #436]	; (8008c00 <HAL_DMA_IRQHandler+0xca4>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d00e      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xb12>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a6b      	ldr	r2, [pc, #428]	; (8008c04 <HAL_DMA_IRQHandler+0xca8>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d009      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xb12>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a6a      	ldr	r2, [pc, #424]	; (8008c08 <HAL_DMA_IRQHandler+0xcac>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d004      	beq.n	8008a6e <HAL_DMA_IRQHandler+0xb12>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a68      	ldr	r2, [pc, #416]	; (8008c0c <HAL_DMA_IRQHandler+0xcb0>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d108      	bne.n	8008a80 <HAL_DMA_IRQHandler+0xb24>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f022 0208 	bic.w	r2, r2, #8
 8008a7c:	601a      	str	r2, [r3, #0]
 8008a7e:	e007      	b.n	8008a90 <HAL_DMA_IRQHandler+0xb34>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f022 0204 	bic.w	r2, r2, #4
 8008a8e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	f000 8165 	beq.w	8008d64 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008aa2:	e15f      	b.n	8008d64 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008aa8:	f003 031f 	and.w	r3, r3, #31
 8008aac:	2202      	movs	r2, #2
 8008aae:	409a      	lsls	r2, r3
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	4013      	ands	r3, r2
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f000 80c5 	beq.w	8008c44 <HAL_DMA_IRQHandler+0xce8>
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	f003 0302 	and.w	r3, r3, #2
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f000 80bf 	beq.w	8008c44 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008aca:	f003 031f 	and.w	r3, r3, #31
 8008ace:	2202      	movs	r2, #2
 8008ad0:	409a      	lsls	r2, r3
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d018      	beq.n	8008b12 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d109      	bne.n	8008afe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	f000 813a 	beq.w	8008d68 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008afc:	e134      	b.n	8008d68 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	f000 8130 	beq.w	8008d68 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008b10:	e12a      	b.n	8008d68 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	f003 0320 	and.w	r3, r3, #32
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f040 8089 	bne.w	8008c30 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a2b      	ldr	r2, [pc, #172]	; (8008bd0 <HAL_DMA_IRQHandler+0xc74>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d04a      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xc62>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a29      	ldr	r2, [pc, #164]	; (8008bd4 <HAL_DMA_IRQHandler+0xc78>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d045      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xc62>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a28      	ldr	r2, [pc, #160]	; (8008bd8 <HAL_DMA_IRQHandler+0xc7c>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d040      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xc62>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a26      	ldr	r2, [pc, #152]	; (8008bdc <HAL_DMA_IRQHandler+0xc80>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d03b      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xc62>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a25      	ldr	r2, [pc, #148]	; (8008be0 <HAL_DMA_IRQHandler+0xc84>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d036      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xc62>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a23      	ldr	r2, [pc, #140]	; (8008be4 <HAL_DMA_IRQHandler+0xc88>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d031      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xc62>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a22      	ldr	r2, [pc, #136]	; (8008be8 <HAL_DMA_IRQHandler+0xc8c>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d02c      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xc62>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a20      	ldr	r2, [pc, #128]	; (8008bec <HAL_DMA_IRQHandler+0xc90>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d027      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xc62>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a1f      	ldr	r2, [pc, #124]	; (8008bf0 <HAL_DMA_IRQHandler+0xc94>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d022      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xc62>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a1d      	ldr	r2, [pc, #116]	; (8008bf4 <HAL_DMA_IRQHandler+0xc98>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d01d      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xc62>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a1c      	ldr	r2, [pc, #112]	; (8008bf8 <HAL_DMA_IRQHandler+0xc9c>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d018      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xc62>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a1a      	ldr	r2, [pc, #104]	; (8008bfc <HAL_DMA_IRQHandler+0xca0>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d013      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xc62>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a19      	ldr	r2, [pc, #100]	; (8008c00 <HAL_DMA_IRQHandler+0xca4>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d00e      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xc62>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a17      	ldr	r2, [pc, #92]	; (8008c04 <HAL_DMA_IRQHandler+0xca8>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d009      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xc62>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a16      	ldr	r2, [pc, #88]	; (8008c08 <HAL_DMA_IRQHandler+0xcac>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d004      	beq.n	8008bbe <HAL_DMA_IRQHandler+0xc62>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a14      	ldr	r2, [pc, #80]	; (8008c0c <HAL_DMA_IRQHandler+0xcb0>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d128      	bne.n	8008c10 <HAL_DMA_IRQHandler+0xcb4>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f022 0214 	bic.w	r2, r2, #20
 8008bcc:	601a      	str	r2, [r3, #0]
 8008bce:	e027      	b.n	8008c20 <HAL_DMA_IRQHandler+0xcc4>
 8008bd0:	40020010 	.word	0x40020010
 8008bd4:	40020028 	.word	0x40020028
 8008bd8:	40020040 	.word	0x40020040
 8008bdc:	40020058 	.word	0x40020058
 8008be0:	40020070 	.word	0x40020070
 8008be4:	40020088 	.word	0x40020088
 8008be8:	400200a0 	.word	0x400200a0
 8008bec:	400200b8 	.word	0x400200b8
 8008bf0:	40020410 	.word	0x40020410
 8008bf4:	40020428 	.word	0x40020428
 8008bf8:	40020440 	.word	0x40020440
 8008bfc:	40020458 	.word	0x40020458
 8008c00:	40020470 	.word	0x40020470
 8008c04:	40020488 	.word	0x40020488
 8008c08:	400204a0 	.word	0x400204a0
 8008c0c:	400204b8 	.word	0x400204b8
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f022 020a 	bic.w	r2, r2, #10
 8008c1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f000 8097 	beq.w	8008d68 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008c42:	e091      	b.n	8008d68 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c48:	f003 031f 	and.w	r3, r3, #31
 8008c4c:	2208      	movs	r2, #8
 8008c4e:	409a      	lsls	r2, r3
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	4013      	ands	r3, r2
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	f000 8088 	beq.w	8008d6a <HAL_DMA_IRQHandler+0xe0e>
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	f003 0308 	and.w	r3, r3, #8
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	f000 8082 	beq.w	8008d6a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a41      	ldr	r2, [pc, #260]	; (8008d70 <HAL_DMA_IRQHandler+0xe14>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d04a      	beq.n	8008d06 <HAL_DMA_IRQHandler+0xdaa>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a3f      	ldr	r2, [pc, #252]	; (8008d74 <HAL_DMA_IRQHandler+0xe18>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d045      	beq.n	8008d06 <HAL_DMA_IRQHandler+0xdaa>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a3e      	ldr	r2, [pc, #248]	; (8008d78 <HAL_DMA_IRQHandler+0xe1c>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d040      	beq.n	8008d06 <HAL_DMA_IRQHandler+0xdaa>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a3c      	ldr	r2, [pc, #240]	; (8008d7c <HAL_DMA_IRQHandler+0xe20>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d03b      	beq.n	8008d06 <HAL_DMA_IRQHandler+0xdaa>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a3b      	ldr	r2, [pc, #236]	; (8008d80 <HAL_DMA_IRQHandler+0xe24>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d036      	beq.n	8008d06 <HAL_DMA_IRQHandler+0xdaa>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a39      	ldr	r2, [pc, #228]	; (8008d84 <HAL_DMA_IRQHandler+0xe28>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d031      	beq.n	8008d06 <HAL_DMA_IRQHandler+0xdaa>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a38      	ldr	r2, [pc, #224]	; (8008d88 <HAL_DMA_IRQHandler+0xe2c>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d02c      	beq.n	8008d06 <HAL_DMA_IRQHandler+0xdaa>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a36      	ldr	r2, [pc, #216]	; (8008d8c <HAL_DMA_IRQHandler+0xe30>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d027      	beq.n	8008d06 <HAL_DMA_IRQHandler+0xdaa>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a35      	ldr	r2, [pc, #212]	; (8008d90 <HAL_DMA_IRQHandler+0xe34>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d022      	beq.n	8008d06 <HAL_DMA_IRQHandler+0xdaa>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a33      	ldr	r2, [pc, #204]	; (8008d94 <HAL_DMA_IRQHandler+0xe38>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d01d      	beq.n	8008d06 <HAL_DMA_IRQHandler+0xdaa>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a32      	ldr	r2, [pc, #200]	; (8008d98 <HAL_DMA_IRQHandler+0xe3c>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d018      	beq.n	8008d06 <HAL_DMA_IRQHandler+0xdaa>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a30      	ldr	r2, [pc, #192]	; (8008d9c <HAL_DMA_IRQHandler+0xe40>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d013      	beq.n	8008d06 <HAL_DMA_IRQHandler+0xdaa>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a2f      	ldr	r2, [pc, #188]	; (8008da0 <HAL_DMA_IRQHandler+0xe44>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d00e      	beq.n	8008d06 <HAL_DMA_IRQHandler+0xdaa>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a2d      	ldr	r2, [pc, #180]	; (8008da4 <HAL_DMA_IRQHandler+0xe48>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d009      	beq.n	8008d06 <HAL_DMA_IRQHandler+0xdaa>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a2c      	ldr	r2, [pc, #176]	; (8008da8 <HAL_DMA_IRQHandler+0xe4c>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d004      	beq.n	8008d06 <HAL_DMA_IRQHandler+0xdaa>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a2a      	ldr	r2, [pc, #168]	; (8008dac <HAL_DMA_IRQHandler+0xe50>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d108      	bne.n	8008d18 <HAL_DMA_IRQHandler+0xdbc>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f022 021c 	bic.w	r2, r2, #28
 8008d14:	601a      	str	r2, [r3, #0]
 8008d16:	e007      	b.n	8008d28 <HAL_DMA_IRQHandler+0xdcc>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f022 020e 	bic.w	r2, r2, #14
 8008d26:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d2c:	f003 031f 	and.w	r3, r3, #31
 8008d30:	2201      	movs	r2, #1
 8008d32:	409a      	lsls	r2, r3
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2201      	movs	r2, #1
 8008d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d009      	beq.n	8008d6a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	4798      	blx	r3
 8008d5e:	e004      	b.n	8008d6a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008d60:	bf00      	nop
 8008d62:	e002      	b.n	8008d6a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008d64:	bf00      	nop
 8008d66:	e000      	b.n	8008d6a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008d68:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008d6a:	3728      	adds	r7, #40	; 0x28
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	40020010 	.word	0x40020010
 8008d74:	40020028 	.word	0x40020028
 8008d78:	40020040 	.word	0x40020040
 8008d7c:	40020058 	.word	0x40020058
 8008d80:	40020070 	.word	0x40020070
 8008d84:	40020088 	.word	0x40020088
 8008d88:	400200a0 	.word	0x400200a0
 8008d8c:	400200b8 	.word	0x400200b8
 8008d90:	40020410 	.word	0x40020410
 8008d94:	40020428 	.word	0x40020428
 8008d98:	40020440 	.word	0x40020440
 8008d9c:	40020458 	.word	0x40020458
 8008da0:	40020470 	.word	0x40020470
 8008da4:	40020488 	.word	0x40020488
 8008da8:	400204a0 	.word	0x400204a0
 8008dac:	400204b8 	.word	0x400204b8

08008db0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b087      	sub	sp, #28
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	607a      	str	r2, [r7, #4]
 8008dbc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dc2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dc8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a7f      	ldr	r2, [pc, #508]	; (8008fcc <DMA_SetConfig+0x21c>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d072      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a7d      	ldr	r2, [pc, #500]	; (8008fd0 <DMA_SetConfig+0x220>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d06d      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a7c      	ldr	r2, [pc, #496]	; (8008fd4 <DMA_SetConfig+0x224>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d068      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a7a      	ldr	r2, [pc, #488]	; (8008fd8 <DMA_SetConfig+0x228>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d063      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a79      	ldr	r2, [pc, #484]	; (8008fdc <DMA_SetConfig+0x22c>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d05e      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a77      	ldr	r2, [pc, #476]	; (8008fe0 <DMA_SetConfig+0x230>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d059      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a76      	ldr	r2, [pc, #472]	; (8008fe4 <DMA_SetConfig+0x234>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d054      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a74      	ldr	r2, [pc, #464]	; (8008fe8 <DMA_SetConfig+0x238>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d04f      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a73      	ldr	r2, [pc, #460]	; (8008fec <DMA_SetConfig+0x23c>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d04a      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a71      	ldr	r2, [pc, #452]	; (8008ff0 <DMA_SetConfig+0x240>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d045      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a70      	ldr	r2, [pc, #448]	; (8008ff4 <DMA_SetConfig+0x244>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d040      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a6e      	ldr	r2, [pc, #440]	; (8008ff8 <DMA_SetConfig+0x248>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d03b      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a6d      	ldr	r2, [pc, #436]	; (8008ffc <DMA_SetConfig+0x24c>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d036      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a6b      	ldr	r2, [pc, #428]	; (8009000 <DMA_SetConfig+0x250>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d031      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a6a      	ldr	r2, [pc, #424]	; (8009004 <DMA_SetConfig+0x254>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d02c      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a68      	ldr	r2, [pc, #416]	; (8009008 <DMA_SetConfig+0x258>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d027      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a67      	ldr	r2, [pc, #412]	; (800900c <DMA_SetConfig+0x25c>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d022      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a65      	ldr	r2, [pc, #404]	; (8009010 <DMA_SetConfig+0x260>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d01d      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a64      	ldr	r2, [pc, #400]	; (8009014 <DMA_SetConfig+0x264>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d018      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a62      	ldr	r2, [pc, #392]	; (8009018 <DMA_SetConfig+0x268>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d013      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a61      	ldr	r2, [pc, #388]	; (800901c <DMA_SetConfig+0x26c>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d00e      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a5f      	ldr	r2, [pc, #380]	; (8009020 <DMA_SetConfig+0x270>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d009      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a5e      	ldr	r2, [pc, #376]	; (8009024 <DMA_SetConfig+0x274>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d004      	beq.n	8008eba <DMA_SetConfig+0x10a>
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a5c      	ldr	r2, [pc, #368]	; (8009028 <DMA_SetConfig+0x278>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d101      	bne.n	8008ebe <DMA_SetConfig+0x10e>
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e000      	b.n	8008ec0 <DMA_SetConfig+0x110>
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d00d      	beq.n	8008ee0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ec8:	68fa      	ldr	r2, [r7, #12]
 8008eca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008ecc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d004      	beq.n	8008ee0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008ede:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a39      	ldr	r2, [pc, #228]	; (8008fcc <DMA_SetConfig+0x21c>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d04a      	beq.n	8008f80 <DMA_SetConfig+0x1d0>
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a38      	ldr	r2, [pc, #224]	; (8008fd0 <DMA_SetConfig+0x220>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d045      	beq.n	8008f80 <DMA_SetConfig+0x1d0>
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a36      	ldr	r2, [pc, #216]	; (8008fd4 <DMA_SetConfig+0x224>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d040      	beq.n	8008f80 <DMA_SetConfig+0x1d0>
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a35      	ldr	r2, [pc, #212]	; (8008fd8 <DMA_SetConfig+0x228>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d03b      	beq.n	8008f80 <DMA_SetConfig+0x1d0>
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a33      	ldr	r2, [pc, #204]	; (8008fdc <DMA_SetConfig+0x22c>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d036      	beq.n	8008f80 <DMA_SetConfig+0x1d0>
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a32      	ldr	r2, [pc, #200]	; (8008fe0 <DMA_SetConfig+0x230>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d031      	beq.n	8008f80 <DMA_SetConfig+0x1d0>
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a30      	ldr	r2, [pc, #192]	; (8008fe4 <DMA_SetConfig+0x234>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d02c      	beq.n	8008f80 <DMA_SetConfig+0x1d0>
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a2f      	ldr	r2, [pc, #188]	; (8008fe8 <DMA_SetConfig+0x238>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d027      	beq.n	8008f80 <DMA_SetConfig+0x1d0>
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a2d      	ldr	r2, [pc, #180]	; (8008fec <DMA_SetConfig+0x23c>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d022      	beq.n	8008f80 <DMA_SetConfig+0x1d0>
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a2c      	ldr	r2, [pc, #176]	; (8008ff0 <DMA_SetConfig+0x240>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d01d      	beq.n	8008f80 <DMA_SetConfig+0x1d0>
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a2a      	ldr	r2, [pc, #168]	; (8008ff4 <DMA_SetConfig+0x244>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d018      	beq.n	8008f80 <DMA_SetConfig+0x1d0>
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a29      	ldr	r2, [pc, #164]	; (8008ff8 <DMA_SetConfig+0x248>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d013      	beq.n	8008f80 <DMA_SetConfig+0x1d0>
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a27      	ldr	r2, [pc, #156]	; (8008ffc <DMA_SetConfig+0x24c>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d00e      	beq.n	8008f80 <DMA_SetConfig+0x1d0>
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a26      	ldr	r2, [pc, #152]	; (8009000 <DMA_SetConfig+0x250>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d009      	beq.n	8008f80 <DMA_SetConfig+0x1d0>
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a24      	ldr	r2, [pc, #144]	; (8009004 <DMA_SetConfig+0x254>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d004      	beq.n	8008f80 <DMA_SetConfig+0x1d0>
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a23      	ldr	r2, [pc, #140]	; (8009008 <DMA_SetConfig+0x258>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d101      	bne.n	8008f84 <DMA_SetConfig+0x1d4>
 8008f80:	2301      	movs	r3, #1
 8008f82:	e000      	b.n	8008f86 <DMA_SetConfig+0x1d6>
 8008f84:	2300      	movs	r3, #0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d059      	beq.n	800903e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f8e:	f003 031f 	and.w	r3, r3, #31
 8008f92:	223f      	movs	r2, #63	; 0x3f
 8008f94:	409a      	lsls	r2, r3
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008fa8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	683a      	ldr	r2, [r7, #0]
 8008fb0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	2b40      	cmp	r3, #64	; 0x40
 8008fb8:	d138      	bne.n	800902c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	68ba      	ldr	r2, [r7, #8]
 8008fc8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008fca:	e086      	b.n	80090da <DMA_SetConfig+0x32a>
 8008fcc:	40020010 	.word	0x40020010
 8008fd0:	40020028 	.word	0x40020028
 8008fd4:	40020040 	.word	0x40020040
 8008fd8:	40020058 	.word	0x40020058
 8008fdc:	40020070 	.word	0x40020070
 8008fe0:	40020088 	.word	0x40020088
 8008fe4:	400200a0 	.word	0x400200a0
 8008fe8:	400200b8 	.word	0x400200b8
 8008fec:	40020410 	.word	0x40020410
 8008ff0:	40020428 	.word	0x40020428
 8008ff4:	40020440 	.word	0x40020440
 8008ff8:	40020458 	.word	0x40020458
 8008ffc:	40020470 	.word	0x40020470
 8009000:	40020488 	.word	0x40020488
 8009004:	400204a0 	.word	0x400204a0
 8009008:	400204b8 	.word	0x400204b8
 800900c:	58025408 	.word	0x58025408
 8009010:	5802541c 	.word	0x5802541c
 8009014:	58025430 	.word	0x58025430
 8009018:	58025444 	.word	0x58025444
 800901c:	58025458 	.word	0x58025458
 8009020:	5802546c 	.word	0x5802546c
 8009024:	58025480 	.word	0x58025480
 8009028:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	68ba      	ldr	r2, [r7, #8]
 8009032:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	60da      	str	r2, [r3, #12]
}
 800903c:	e04d      	b.n	80090da <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a29      	ldr	r2, [pc, #164]	; (80090e8 <DMA_SetConfig+0x338>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d022      	beq.n	800908e <DMA_SetConfig+0x2de>
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a27      	ldr	r2, [pc, #156]	; (80090ec <DMA_SetConfig+0x33c>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d01d      	beq.n	800908e <DMA_SetConfig+0x2de>
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a26      	ldr	r2, [pc, #152]	; (80090f0 <DMA_SetConfig+0x340>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d018      	beq.n	800908e <DMA_SetConfig+0x2de>
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a24      	ldr	r2, [pc, #144]	; (80090f4 <DMA_SetConfig+0x344>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d013      	beq.n	800908e <DMA_SetConfig+0x2de>
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a23      	ldr	r2, [pc, #140]	; (80090f8 <DMA_SetConfig+0x348>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d00e      	beq.n	800908e <DMA_SetConfig+0x2de>
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a21      	ldr	r2, [pc, #132]	; (80090fc <DMA_SetConfig+0x34c>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d009      	beq.n	800908e <DMA_SetConfig+0x2de>
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a20      	ldr	r2, [pc, #128]	; (8009100 <DMA_SetConfig+0x350>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d004      	beq.n	800908e <DMA_SetConfig+0x2de>
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a1e      	ldr	r2, [pc, #120]	; (8009104 <DMA_SetConfig+0x354>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d101      	bne.n	8009092 <DMA_SetConfig+0x2e2>
 800908e:	2301      	movs	r3, #1
 8009090:	e000      	b.n	8009094 <DMA_SetConfig+0x2e4>
 8009092:	2300      	movs	r3, #0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d020      	beq.n	80090da <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800909c:	f003 031f 	and.w	r3, r3, #31
 80090a0:	2201      	movs	r2, #1
 80090a2:	409a      	lsls	r2, r3
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	683a      	ldr	r2, [r7, #0]
 80090ae:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	2b40      	cmp	r3, #64	; 0x40
 80090b6:	d108      	bne.n	80090ca <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	68ba      	ldr	r2, [r7, #8]
 80090c6:	60da      	str	r2, [r3, #12]
}
 80090c8:	e007      	b.n	80090da <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	68ba      	ldr	r2, [r7, #8]
 80090d0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	60da      	str	r2, [r3, #12]
}
 80090da:	bf00      	nop
 80090dc:	371c      	adds	r7, #28
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop
 80090e8:	58025408 	.word	0x58025408
 80090ec:	5802541c 	.word	0x5802541c
 80090f0:	58025430 	.word	0x58025430
 80090f4:	58025444 	.word	0x58025444
 80090f8:	58025458 	.word	0x58025458
 80090fc:	5802546c 	.word	0x5802546c
 8009100:	58025480 	.word	0x58025480
 8009104:	58025494 	.word	0x58025494

08009108 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a42      	ldr	r2, [pc, #264]	; (8009220 <DMA_CalcBaseAndBitshift+0x118>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d04a      	beq.n	80091b0 <DMA_CalcBaseAndBitshift+0xa8>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a41      	ldr	r2, [pc, #260]	; (8009224 <DMA_CalcBaseAndBitshift+0x11c>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d045      	beq.n	80091b0 <DMA_CalcBaseAndBitshift+0xa8>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a3f      	ldr	r2, [pc, #252]	; (8009228 <DMA_CalcBaseAndBitshift+0x120>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d040      	beq.n	80091b0 <DMA_CalcBaseAndBitshift+0xa8>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a3e      	ldr	r2, [pc, #248]	; (800922c <DMA_CalcBaseAndBitshift+0x124>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d03b      	beq.n	80091b0 <DMA_CalcBaseAndBitshift+0xa8>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a3c      	ldr	r2, [pc, #240]	; (8009230 <DMA_CalcBaseAndBitshift+0x128>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d036      	beq.n	80091b0 <DMA_CalcBaseAndBitshift+0xa8>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a3b      	ldr	r2, [pc, #236]	; (8009234 <DMA_CalcBaseAndBitshift+0x12c>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d031      	beq.n	80091b0 <DMA_CalcBaseAndBitshift+0xa8>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a39      	ldr	r2, [pc, #228]	; (8009238 <DMA_CalcBaseAndBitshift+0x130>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d02c      	beq.n	80091b0 <DMA_CalcBaseAndBitshift+0xa8>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a38      	ldr	r2, [pc, #224]	; (800923c <DMA_CalcBaseAndBitshift+0x134>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d027      	beq.n	80091b0 <DMA_CalcBaseAndBitshift+0xa8>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a36      	ldr	r2, [pc, #216]	; (8009240 <DMA_CalcBaseAndBitshift+0x138>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d022      	beq.n	80091b0 <DMA_CalcBaseAndBitshift+0xa8>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a35      	ldr	r2, [pc, #212]	; (8009244 <DMA_CalcBaseAndBitshift+0x13c>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d01d      	beq.n	80091b0 <DMA_CalcBaseAndBitshift+0xa8>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a33      	ldr	r2, [pc, #204]	; (8009248 <DMA_CalcBaseAndBitshift+0x140>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d018      	beq.n	80091b0 <DMA_CalcBaseAndBitshift+0xa8>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a32      	ldr	r2, [pc, #200]	; (800924c <DMA_CalcBaseAndBitshift+0x144>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d013      	beq.n	80091b0 <DMA_CalcBaseAndBitshift+0xa8>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a30      	ldr	r2, [pc, #192]	; (8009250 <DMA_CalcBaseAndBitshift+0x148>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d00e      	beq.n	80091b0 <DMA_CalcBaseAndBitshift+0xa8>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a2f      	ldr	r2, [pc, #188]	; (8009254 <DMA_CalcBaseAndBitshift+0x14c>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d009      	beq.n	80091b0 <DMA_CalcBaseAndBitshift+0xa8>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a2d      	ldr	r2, [pc, #180]	; (8009258 <DMA_CalcBaseAndBitshift+0x150>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d004      	beq.n	80091b0 <DMA_CalcBaseAndBitshift+0xa8>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a2c      	ldr	r2, [pc, #176]	; (800925c <DMA_CalcBaseAndBitshift+0x154>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d101      	bne.n	80091b4 <DMA_CalcBaseAndBitshift+0xac>
 80091b0:	2301      	movs	r3, #1
 80091b2:	e000      	b.n	80091b6 <DMA_CalcBaseAndBitshift+0xae>
 80091b4:	2300      	movs	r3, #0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d024      	beq.n	8009204 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	3b10      	subs	r3, #16
 80091c2:	4a27      	ldr	r2, [pc, #156]	; (8009260 <DMA_CalcBaseAndBitshift+0x158>)
 80091c4:	fba2 2303 	umull	r2, r3, r2, r3
 80091c8:	091b      	lsrs	r3, r3, #4
 80091ca:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f003 0307 	and.w	r3, r3, #7
 80091d2:	4a24      	ldr	r2, [pc, #144]	; (8009264 <DMA_CalcBaseAndBitshift+0x15c>)
 80091d4:	5cd3      	ldrb	r3, [r2, r3]
 80091d6:	461a      	mov	r2, r3
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2b03      	cmp	r3, #3
 80091e0:	d908      	bls.n	80091f4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	461a      	mov	r2, r3
 80091e8:	4b1f      	ldr	r3, [pc, #124]	; (8009268 <DMA_CalcBaseAndBitshift+0x160>)
 80091ea:	4013      	ands	r3, r2
 80091ec:	1d1a      	adds	r2, r3, #4
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	659a      	str	r2, [r3, #88]	; 0x58
 80091f2:	e00d      	b.n	8009210 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	461a      	mov	r2, r3
 80091fa:	4b1b      	ldr	r3, [pc, #108]	; (8009268 <DMA_CalcBaseAndBitshift+0x160>)
 80091fc:	4013      	ands	r3, r2
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	6593      	str	r3, [r2, #88]	; 0x58
 8009202:	e005      	b.n	8009210 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009214:	4618      	mov	r0, r3
 8009216:	3714      	adds	r7, #20
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr
 8009220:	40020010 	.word	0x40020010
 8009224:	40020028 	.word	0x40020028
 8009228:	40020040 	.word	0x40020040
 800922c:	40020058 	.word	0x40020058
 8009230:	40020070 	.word	0x40020070
 8009234:	40020088 	.word	0x40020088
 8009238:	400200a0 	.word	0x400200a0
 800923c:	400200b8 	.word	0x400200b8
 8009240:	40020410 	.word	0x40020410
 8009244:	40020428 	.word	0x40020428
 8009248:	40020440 	.word	0x40020440
 800924c:	40020458 	.word	0x40020458
 8009250:	40020470 	.word	0x40020470
 8009254:	40020488 	.word	0x40020488
 8009258:	400204a0 	.word	0x400204a0
 800925c:	400204b8 	.word	0x400204b8
 8009260:	aaaaaaab 	.word	0xaaaaaaab
 8009264:	08011da8 	.word	0x08011da8
 8009268:	fffffc00 	.word	0xfffffc00

0800926c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800926c:	b480      	push	{r7}
 800926e:	b085      	sub	sp, #20
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009274:	2300      	movs	r3, #0
 8009276:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	699b      	ldr	r3, [r3, #24]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d120      	bne.n	80092c2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009284:	2b03      	cmp	r3, #3
 8009286:	d858      	bhi.n	800933a <DMA_CheckFifoParam+0xce>
 8009288:	a201      	add	r2, pc, #4	; (adr r2, 8009290 <DMA_CheckFifoParam+0x24>)
 800928a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800928e:	bf00      	nop
 8009290:	080092a1 	.word	0x080092a1
 8009294:	080092b3 	.word	0x080092b3
 8009298:	080092a1 	.word	0x080092a1
 800929c:	0800933b 	.word	0x0800933b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d048      	beq.n	800933e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80092b0:	e045      	b.n	800933e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80092ba:	d142      	bne.n	8009342 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80092bc:	2301      	movs	r3, #1
 80092be:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80092c0:	e03f      	b.n	8009342 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	699b      	ldr	r3, [r3, #24]
 80092c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092ca:	d123      	bne.n	8009314 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d0:	2b03      	cmp	r3, #3
 80092d2:	d838      	bhi.n	8009346 <DMA_CheckFifoParam+0xda>
 80092d4:	a201      	add	r2, pc, #4	; (adr r2, 80092dc <DMA_CheckFifoParam+0x70>)
 80092d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092da:	bf00      	nop
 80092dc:	080092ed 	.word	0x080092ed
 80092e0:	080092f3 	.word	0x080092f3
 80092e4:	080092ed 	.word	0x080092ed
 80092e8:	08009305 	.word	0x08009305
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80092ec:	2301      	movs	r3, #1
 80092ee:	73fb      	strb	r3, [r7, #15]
        break;
 80092f0:	e030      	b.n	8009354 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d025      	beq.n	800934a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009302:	e022      	b.n	800934a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009308:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800930c:	d11f      	bne.n	800934e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800930e:	2301      	movs	r3, #1
 8009310:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009312:	e01c      	b.n	800934e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009318:	2b02      	cmp	r3, #2
 800931a:	d902      	bls.n	8009322 <DMA_CheckFifoParam+0xb6>
 800931c:	2b03      	cmp	r3, #3
 800931e:	d003      	beq.n	8009328 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009320:	e018      	b.n	8009354 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009322:	2301      	movs	r3, #1
 8009324:	73fb      	strb	r3, [r7, #15]
        break;
 8009326:	e015      	b.n	8009354 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00e      	beq.n	8009352 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009334:	2301      	movs	r3, #1
 8009336:	73fb      	strb	r3, [r7, #15]
    break;
 8009338:	e00b      	b.n	8009352 <DMA_CheckFifoParam+0xe6>
        break;
 800933a:	bf00      	nop
 800933c:	e00a      	b.n	8009354 <DMA_CheckFifoParam+0xe8>
        break;
 800933e:	bf00      	nop
 8009340:	e008      	b.n	8009354 <DMA_CheckFifoParam+0xe8>
        break;
 8009342:	bf00      	nop
 8009344:	e006      	b.n	8009354 <DMA_CheckFifoParam+0xe8>
        break;
 8009346:	bf00      	nop
 8009348:	e004      	b.n	8009354 <DMA_CheckFifoParam+0xe8>
        break;
 800934a:	bf00      	nop
 800934c:	e002      	b.n	8009354 <DMA_CheckFifoParam+0xe8>
        break;
 800934e:	bf00      	nop
 8009350:	e000      	b.n	8009354 <DMA_CheckFifoParam+0xe8>
    break;
 8009352:	bf00      	nop
    }
  }

  return status;
 8009354:	7bfb      	ldrb	r3, [r7, #15]
}
 8009356:	4618      	mov	r0, r3
 8009358:	3714      	adds	r7, #20
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop

08009364 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a38      	ldr	r2, [pc, #224]	; (8009458 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d022      	beq.n	80093c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a36      	ldr	r2, [pc, #216]	; (800945c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d01d      	beq.n	80093c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a35      	ldr	r2, [pc, #212]	; (8009460 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d018      	beq.n	80093c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a33      	ldr	r2, [pc, #204]	; (8009464 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d013      	beq.n	80093c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a32      	ldr	r2, [pc, #200]	; (8009468 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d00e      	beq.n	80093c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a30      	ldr	r2, [pc, #192]	; (800946c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d009      	beq.n	80093c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a2f      	ldr	r2, [pc, #188]	; (8009470 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d004      	beq.n	80093c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a2d      	ldr	r2, [pc, #180]	; (8009474 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d101      	bne.n	80093c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80093c2:	2301      	movs	r3, #1
 80093c4:	e000      	b.n	80093c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80093c6:	2300      	movs	r3, #0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d01a      	beq.n	8009402 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	3b08      	subs	r3, #8
 80093d4:	4a28      	ldr	r2, [pc, #160]	; (8009478 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80093d6:	fba2 2303 	umull	r2, r3, r2, r3
 80093da:	091b      	lsrs	r3, r3, #4
 80093dc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80093de:	68fa      	ldr	r2, [r7, #12]
 80093e0:	4b26      	ldr	r3, [pc, #152]	; (800947c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80093e2:	4413      	add	r3, r2
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	461a      	mov	r2, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	4a24      	ldr	r2, [pc, #144]	; (8009480 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80093f0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f003 031f 	and.w	r3, r3, #31
 80093f8:	2201      	movs	r2, #1
 80093fa:	409a      	lsls	r2, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009400:	e024      	b.n	800944c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	b2db      	uxtb	r3, r3
 8009408:	3b10      	subs	r3, #16
 800940a:	4a1e      	ldr	r2, [pc, #120]	; (8009484 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800940c:	fba2 2303 	umull	r2, r3, r2, r3
 8009410:	091b      	lsrs	r3, r3, #4
 8009412:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	4a1c      	ldr	r2, [pc, #112]	; (8009488 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d806      	bhi.n	800942a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	4a1b      	ldr	r2, [pc, #108]	; (800948c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d902      	bls.n	800942a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	3308      	adds	r3, #8
 8009428:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800942a:	68fa      	ldr	r2, [r7, #12]
 800942c:	4b18      	ldr	r3, [pc, #96]	; (8009490 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800942e:	4413      	add	r3, r2
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	461a      	mov	r2, r3
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4a16      	ldr	r2, [pc, #88]	; (8009494 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800943c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f003 031f 	and.w	r3, r3, #31
 8009444:	2201      	movs	r2, #1
 8009446:	409a      	lsls	r2, r3
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800944c:	bf00      	nop
 800944e:	3714      	adds	r7, #20
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr
 8009458:	58025408 	.word	0x58025408
 800945c:	5802541c 	.word	0x5802541c
 8009460:	58025430 	.word	0x58025430
 8009464:	58025444 	.word	0x58025444
 8009468:	58025458 	.word	0x58025458
 800946c:	5802546c 	.word	0x5802546c
 8009470:	58025480 	.word	0x58025480
 8009474:	58025494 	.word	0x58025494
 8009478:	cccccccd 	.word	0xcccccccd
 800947c:	16009600 	.word	0x16009600
 8009480:	58025880 	.word	0x58025880
 8009484:	aaaaaaab 	.word	0xaaaaaaab
 8009488:	400204b8 	.word	0x400204b8
 800948c:	4002040f 	.word	0x4002040f
 8009490:	10008200 	.word	0x10008200
 8009494:	40020880 	.word	0x40020880

08009498 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009498:	b480      	push	{r7}
 800949a:	b085      	sub	sp, #20
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d04a      	beq.n	8009544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2b08      	cmp	r3, #8
 80094b2:	d847      	bhi.n	8009544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a25      	ldr	r2, [pc, #148]	; (8009550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d022      	beq.n	8009504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a24      	ldr	r2, [pc, #144]	; (8009554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d01d      	beq.n	8009504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a22      	ldr	r2, [pc, #136]	; (8009558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d018      	beq.n	8009504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a21      	ldr	r2, [pc, #132]	; (800955c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d013      	beq.n	8009504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a1f      	ldr	r2, [pc, #124]	; (8009560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d00e      	beq.n	8009504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a1e      	ldr	r2, [pc, #120]	; (8009564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d009      	beq.n	8009504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a1c      	ldr	r2, [pc, #112]	; (8009568 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d004      	beq.n	8009504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a1b      	ldr	r2, [pc, #108]	; (800956c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d101      	bne.n	8009508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009504:	2301      	movs	r3, #1
 8009506:	e000      	b.n	800950a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009508:	2300      	movs	r3, #0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d00a      	beq.n	8009524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800950e:	68fa      	ldr	r2, [r7, #12]
 8009510:	4b17      	ldr	r3, [pc, #92]	; (8009570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009512:	4413      	add	r3, r2
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	461a      	mov	r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4a15      	ldr	r2, [pc, #84]	; (8009574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009520:	671a      	str	r2, [r3, #112]	; 0x70
 8009522:	e009      	b.n	8009538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009524:	68fa      	ldr	r2, [r7, #12]
 8009526:	4b14      	ldr	r3, [pc, #80]	; (8009578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009528:	4413      	add	r3, r2
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	461a      	mov	r2, r3
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	4a11      	ldr	r2, [pc, #68]	; (800957c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009536:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	3b01      	subs	r3, #1
 800953c:	2201      	movs	r2, #1
 800953e:	409a      	lsls	r2, r3
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8009544:	bf00      	nop
 8009546:	3714      	adds	r7, #20
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr
 8009550:	58025408 	.word	0x58025408
 8009554:	5802541c 	.word	0x5802541c
 8009558:	58025430 	.word	0x58025430
 800955c:	58025444 	.word	0x58025444
 8009560:	58025458 	.word	0x58025458
 8009564:	5802546c 	.word	0x5802546c
 8009568:	58025480 	.word	0x58025480
 800956c:	58025494 	.word	0x58025494
 8009570:	1600963f 	.word	0x1600963f
 8009574:	58025940 	.word	0x58025940
 8009578:	1000823f 	.word	0x1000823f
 800957c:	40020940 	.word	0x40020940

08009580 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d101      	bne.n	8009592 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	e0cf      	b.n	8009732 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009598:	2b00      	cmp	r3, #0
 800959a:	d106      	bne.n	80095aa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2223      	movs	r2, #35	; 0x23
 80095a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f7fa f8cf 	bl	8003748 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80095aa:	4b64      	ldr	r3, [pc, #400]	; (800973c <HAL_ETH_Init+0x1bc>)
 80095ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80095b0:	4a62      	ldr	r2, [pc, #392]	; (800973c <HAL_ETH_Init+0x1bc>)
 80095b2:	f043 0302 	orr.w	r3, r3, #2
 80095b6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80095ba:	4b60      	ldr	r3, [pc, #384]	; (800973c <HAL_ETH_Init+0x1bc>)
 80095bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80095c0:	f003 0302 	and.w	r3, r3, #2
 80095c4:	60bb      	str	r3, [r7, #8]
 80095c6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	7a1b      	ldrb	r3, [r3, #8]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d103      	bne.n	80095d8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80095d0:	2000      	movs	r0, #0
 80095d2:	f7fa fd85 	bl	80040e0 <HAL_SYSCFG_ETHInterfaceSelect>
 80095d6:	e003      	b.n	80095e0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80095d8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80095dc:	f7fa fd80 	bl	80040e0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80095e0:	4b57      	ldr	r3, [pc, #348]	; (8009740 <HAL_ETH_Init+0x1c0>)
 80095e2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	6812      	ldr	r2, [r2, #0]
 80095f2:	f043 0301 	orr.w	r3, r3, #1
 80095f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80095fa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80095fc:	f7fa fd40 	bl	8004080 <HAL_GetTick>
 8009600:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8009602:	e011      	b.n	8009628 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8009604:	f7fa fd3c 	bl	8004080 <HAL_GetTick>
 8009608:	4602      	mov	r2, r0
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	1ad3      	subs	r3, r2, r3
 800960e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009612:	d909      	bls.n	8009628 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2204      	movs	r2, #4
 8009618:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	22e0      	movs	r2, #224	; 0xe0
 8009620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8009624:	2301      	movs	r3, #1
 8009626:	e084      	b.n	8009732 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f003 0301 	and.w	r3, r3, #1
 8009636:	2b00      	cmp	r3, #0
 8009638:	d1e4      	bne.n	8009604 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 f886 	bl	800974c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8009640:	f001 fed8 	bl	800b3f4 <HAL_RCC_GetHCLKFreq>
 8009644:	4603      	mov	r3, r0
 8009646:	4a3f      	ldr	r2, [pc, #252]	; (8009744 <HAL_ETH_Init+0x1c4>)
 8009648:	fba2 2303 	umull	r2, r3, r2, r3
 800964c:	0c9a      	lsrs	r2, r3, #18
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	3a01      	subs	r2, #1
 8009654:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f000 fa71 	bl	8009b40 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009666:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800966a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	6812      	ldr	r2, [r2, #0]
 8009672:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009676:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800967a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	695b      	ldr	r3, [r3, #20]
 8009682:	f003 0303 	and.w	r3, r3, #3
 8009686:	2b00      	cmp	r3, #0
 8009688:	d009      	beq.n	800969e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2201      	movs	r2, #1
 800968e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	22e0      	movs	r2, #224	; 0xe0
 8009696:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800969a:	2301      	movs	r3, #1
 800969c:	e049      	b.n	8009732 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096a6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80096aa:	4b27      	ldr	r3, [pc, #156]	; (8009748 <HAL_ETH_Init+0x1c8>)
 80096ac:	4013      	ands	r3, r2
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	6952      	ldr	r2, [r2, #20]
 80096b2:	0051      	lsls	r1, r2, #1
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	6812      	ldr	r2, [r2, #0]
 80096b8:	430b      	orrs	r3, r1
 80096ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80096be:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 fad9 	bl	8009c7a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 fb1f 	bl	8009d0c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	3305      	adds	r3, #5
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	021a      	lsls	r2, r3, #8
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	3304      	adds	r3, #4
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	4619      	mov	r1, r3
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	430a      	orrs	r2, r1
 80096e8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	3303      	adds	r3, #3
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	061a      	lsls	r2, r3, #24
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	3302      	adds	r3, #2
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	041b      	lsls	r3, r3, #16
 8009700:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	3301      	adds	r3, #1
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800970c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800971a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800971c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2210      	movs	r2, #16
 800972c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009730:	2300      	movs	r3, #0
}
 8009732:	4618      	mov	r0, r3
 8009734:	3710      	adds	r7, #16
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	58024400 	.word	0x58024400
 8009740:	58000400 	.word	0x58000400
 8009744:	431bde83 	.word	0x431bde83
 8009748:	ffff8001 	.word	0xffff8001

0800974c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800975c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009764:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8009766:	f001 fe45 	bl	800b3f4 <HAL_RCC_GetHCLKFreq>
 800976a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	4a1e      	ldr	r2, [pc, #120]	; (80097e8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d908      	bls.n	8009786 <HAL_ETH_SetMDIOClockRange+0x3a>
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	4a1d      	ldr	r2, [pc, #116]	; (80097ec <HAL_ETH_SetMDIOClockRange+0xa0>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d804      	bhi.n	8009786 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009782:	60fb      	str	r3, [r7, #12]
 8009784:	e027      	b.n	80097d6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	4a18      	ldr	r2, [pc, #96]	; (80097ec <HAL_ETH_SetMDIOClockRange+0xa0>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d908      	bls.n	80097a0 <HAL_ETH_SetMDIOClockRange+0x54>
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	4a17      	ldr	r2, [pc, #92]	; (80097f0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d204      	bcs.n	80097a0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800979c:	60fb      	str	r3, [r7, #12]
 800979e:	e01a      	b.n	80097d6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	4a13      	ldr	r2, [pc, #76]	; (80097f0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d303      	bcc.n	80097b0 <HAL_ETH_SetMDIOClockRange+0x64>
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	4a12      	ldr	r2, [pc, #72]	; (80097f4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d911      	bls.n	80097d4 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	4a10      	ldr	r2, [pc, #64]	; (80097f4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d908      	bls.n	80097ca <HAL_ETH_SetMDIOClockRange+0x7e>
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	4a0f      	ldr	r2, [pc, #60]	; (80097f8 <HAL_ETH_SetMDIOClockRange+0xac>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d804      	bhi.n	80097ca <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097c6:	60fb      	str	r3, [r7, #12]
 80097c8:	e005      	b.n	80097d6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80097d0:	60fb      	str	r3, [r7, #12]
 80097d2:	e000      	b.n	80097d6 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80097d4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	68fa      	ldr	r2, [r7, #12]
 80097dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80097e0:	bf00      	nop
 80097e2:	3710      	adds	r7, #16
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}
 80097e8:	01312cff 	.word	0x01312cff
 80097ec:	02160ebf 	.word	0x02160ebf
 80097f0:	03938700 	.word	0x03938700
 80097f4:	05f5e0ff 	.word	0x05f5e0ff
 80097f8:	08f0d17f 	.word	0x08f0d17f

080097fc <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b085      	sub	sp, #20
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800980e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	791b      	ldrb	r3, [r3, #4]
 8009814:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8009816:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	7b1b      	ldrb	r3, [r3, #12]
 800981c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800981e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	7b5b      	ldrb	r3, [r3, #13]
 8009824:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8009826:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	7b9b      	ldrb	r3, [r3, #14]
 800982c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800982e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	7bdb      	ldrb	r3, [r3, #15]
 8009834:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8009836:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8009838:	683a      	ldr	r2, [r7, #0]
 800983a:	7c12      	ldrb	r2, [r2, #16]
 800983c:	2a00      	cmp	r2, #0
 800983e:	d102      	bne.n	8009846 <ETH_SetMACConfig+0x4a>
 8009840:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009844:	e000      	b.n	8009848 <ETH_SetMACConfig+0x4c>
 8009846:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8009848:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800984a:	683a      	ldr	r2, [r7, #0]
 800984c:	7c52      	ldrb	r2, [r2, #17]
 800984e:	2a00      	cmp	r2, #0
 8009850:	d102      	bne.n	8009858 <ETH_SetMACConfig+0x5c>
 8009852:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009856:	e000      	b.n	800985a <ETH_SetMACConfig+0x5e>
 8009858:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800985a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	7c9b      	ldrb	r3, [r3, #18]
 8009860:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8009862:	431a      	orrs	r2, r3
               macconf->Speed |
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8009868:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800986e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	7f1b      	ldrb	r3, [r3, #28]
 8009874:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8009876:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	7f5b      	ldrb	r3, [r3, #29]
 800987c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800987e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8009880:	683a      	ldr	r2, [r7, #0]
 8009882:	7f92      	ldrb	r2, [r2, #30]
 8009884:	2a00      	cmp	r2, #0
 8009886:	d102      	bne.n	800988e <ETH_SetMACConfig+0x92>
 8009888:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800988c:	e000      	b.n	8009890 <ETH_SetMACConfig+0x94>
 800988e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8009890:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	7fdb      	ldrb	r3, [r3, #31]
 8009896:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8009898:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800989a:	683a      	ldr	r2, [r7, #0]
 800989c:	f892 2020 	ldrb.w	r2, [r2, #32]
 80098a0:	2a00      	cmp	r2, #0
 80098a2:	d102      	bne.n	80098aa <ETH_SetMACConfig+0xae>
 80098a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80098a8:	e000      	b.n	80098ac <ETH_SetMACConfig+0xb0>
 80098aa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80098ac:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80098b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098ba:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80098bc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80098c2:	4313      	orrs	r3, r2
 80098c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	4b56      	ldr	r3, [pc, #344]	; (8009a28 <ETH_SetMACConfig+0x22c>)
 80098ce:	4013      	ands	r3, r2
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	6812      	ldr	r2, [r2, #0]
 80098d4:	68f9      	ldr	r1, [r7, #12]
 80098d6:	430b      	orrs	r3, r1
 80098d8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098de:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80098e6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80098e8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80098f0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80098f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80098fa:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80098fc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80098fe:	683a      	ldr	r2, [r7, #0]
 8009900:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8009904:	2a00      	cmp	r2, #0
 8009906:	d102      	bne.n	800990e <ETH_SetMACConfig+0x112>
 8009908:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800990c:	e000      	b.n	8009910 <ETH_SetMACConfig+0x114>
 800990e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8009910:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8009916:	4313      	orrs	r3, r2
 8009918:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	685a      	ldr	r2, [r3, #4]
 8009920:	4b42      	ldr	r3, [pc, #264]	; (8009a2c <ETH_SetMACConfig+0x230>)
 8009922:	4013      	ands	r3, r2
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	6812      	ldr	r2, [r2, #0]
 8009928:	68f9      	ldr	r1, [r7, #12]
 800992a:	430b      	orrs	r3, r1
 800992c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009934:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800993a:	4313      	orrs	r3, r2
 800993c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	68da      	ldr	r2, [r3, #12]
 8009944:	4b3a      	ldr	r3, [pc, #232]	; (8009a30 <ETH_SetMACConfig+0x234>)
 8009946:	4013      	ands	r3, r2
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	6812      	ldr	r2, [r2, #0]
 800994c:	68f9      	ldr	r1, [r7, #12]
 800994e:	430b      	orrs	r3, r1
 8009950:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8009958:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800995e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8009960:	683a      	ldr	r2, [r7, #0]
 8009962:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8009966:	2a00      	cmp	r2, #0
 8009968:	d101      	bne.n	800996e <ETH_SetMACConfig+0x172>
 800996a:	2280      	movs	r2, #128	; 0x80
 800996c:	e000      	b.n	8009970 <ETH_SetMACConfig+0x174>
 800996e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8009970:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009976:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009978:	4313      	orrs	r3, r2
 800997a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009982:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8009986:	4013      	ands	r3, r2
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	6812      	ldr	r2, [r2, #0]
 800998c:	68f9      	ldr	r1, [r7, #12]
 800998e:	430b      	orrs	r3, r1
 8009990:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009998:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80099a0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80099a2:	4313      	orrs	r3, r2
 80099a4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099ae:	f023 0103 	bic.w	r1, r3, #3
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	68fa      	ldr	r2, [r7, #12]
 80099b8:	430a      	orrs	r2, r1
 80099ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80099c6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	430a      	orrs	r2, r1
 80099d4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80099dc:	683a      	ldr	r2, [r7, #0]
 80099de:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80099e2:	2a00      	cmp	r2, #0
 80099e4:	d101      	bne.n	80099ea <ETH_SetMACConfig+0x1ee>
 80099e6:	2240      	movs	r2, #64	; 0x40
 80099e8:	e000      	b.n	80099ec <ETH_SetMACConfig+0x1f0>
 80099ea:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80099ec:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80099f4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80099f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80099fe:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8009a00:	4313      	orrs	r3, r2
 8009a02:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8009a0c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	68fa      	ldr	r2, [r7, #12]
 8009a16:	430a      	orrs	r2, r1
 8009a18:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8009a1c:	bf00      	nop
 8009a1e:	3714      	adds	r7, #20
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr
 8009a28:	00048083 	.word	0x00048083
 8009a2c:	c0f88000 	.word	0xc0f88000
 8009a30:	fffffef0 	.word	0xfffffef0

08009a34 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b085      	sub	sp, #20
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	4b38      	ldr	r3, [pc, #224]	; (8009b2c <ETH_SetDMAConfig+0xf8>)
 8009a4a:	4013      	ands	r3, r2
 8009a4c:	683a      	ldr	r2, [r7, #0]
 8009a4e:	6811      	ldr	r1, [r2, #0]
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	6812      	ldr	r2, [r2, #0]
 8009a54:	430b      	orrs	r3, r1
 8009a56:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009a5a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	791b      	ldrb	r3, [r3, #4]
 8009a60:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009a66:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	7b1b      	ldrb	r3, [r3, #12]
 8009a6c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a7a:	685a      	ldr	r2, [r3, #4]
 8009a7c:	4b2c      	ldr	r3, [pc, #176]	; (8009b30 <ETH_SetDMAConfig+0xfc>)
 8009a7e:	4013      	ands	r3, r2
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	6812      	ldr	r2, [r2, #0]
 8009a84:	68f9      	ldr	r1, [r7, #12]
 8009a86:	430b      	orrs	r3, r1
 8009a88:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009a8c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	7b5b      	ldrb	r3, [r3, #13]
 8009a92:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009aa4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8009aa8:	4b22      	ldr	r3, [pc, #136]	; (8009b34 <ETH_SetDMAConfig+0x100>)
 8009aaa:	4013      	ands	r3, r2
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	6812      	ldr	r2, [r2, #0]
 8009ab0:	68f9      	ldr	r1, [r7, #12]
 8009ab2:	430b      	orrs	r3, r1
 8009ab4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009ab8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	7d1b      	ldrb	r3, [r3, #20]
 8009ac4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8009ac6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	7f5b      	ldrb	r3, [r3, #29]
 8009acc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ada:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8009ade:	4b16      	ldr	r3, [pc, #88]	; (8009b38 <ETH_SetDMAConfig+0x104>)
 8009ae0:	4013      	ands	r3, r2
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	6812      	ldr	r2, [r2, #0]
 8009ae6:	68f9      	ldr	r1, [r7, #12]
 8009ae8:	430b      	orrs	r3, r1
 8009aea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009aee:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	7f1b      	ldrb	r3, [r3, #28]
 8009af6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8009afc:	4313      	orrs	r3, r2
 8009afe:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b08:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8009b0c:	4b0b      	ldr	r3, [pc, #44]	; (8009b3c <ETH_SetDMAConfig+0x108>)
 8009b0e:	4013      	ands	r3, r2
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	6812      	ldr	r2, [r2, #0]
 8009b14:	68f9      	ldr	r1, [r7, #12]
 8009b16:	430b      	orrs	r3, r1
 8009b18:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009b1c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8009b20:	bf00      	nop
 8009b22:	3714      	adds	r7, #20
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr
 8009b2c:	ffff87fd 	.word	0xffff87fd
 8009b30:	ffff2ffe 	.word	0xffff2ffe
 8009b34:	fffec000 	.word	0xfffec000
 8009b38:	ffc0efef 	.word	0xffc0efef
 8009b3c:	7fc0ffff 	.word	0x7fc0ffff

08009b40 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b0a4      	sub	sp, #144	; 0x90
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8009b52:	2300      	movs	r3, #0
 8009b54:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8009b64:	2301      	movs	r3, #1
 8009b66:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8009b70:	2300      	movs	r3, #0
 8009b72:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8009b76:	2301      	movs	r3, #1
 8009b78:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8009b7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009b80:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8009b82:	2300      	movs	r3, #0
 8009b84:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8009b92:	2300      	movs	r3, #0
 8009b94:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8009b98:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8009b9c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8009bd8:	2320      	movs	r3, #32
 8009bda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8009bde:	2301      	movs	r3, #1
 8009be0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8009be4:	2300      	movs	r3, #0
 8009be6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8009bea:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8009bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8009bf0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009bf4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8009bfc:	2302      	movs	r3, #2
 8009bfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8009c02:	2300      	movs	r3, #0
 8009c04:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8009c14:	2301      	movs	r3, #1
 8009c16:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8009c24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009c28:	4619      	mov	r1, r3
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f7ff fde6 	bl	80097fc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8009c30:	2301      	movs	r3, #1
 8009c32:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8009c34:	2301      	movs	r3, #1
 8009c36:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8009c42:	2300      	movs	r3, #0
 8009c44:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8009c46:	2300      	movs	r3, #0
 8009c48:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8009c4a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009c4e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8009c50:	2300      	movs	r3, #0
 8009c52:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8009c54:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009c58:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8009c60:	f44f 7306 	mov.w	r3, #536	; 0x218
 8009c64:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8009c66:	f107 0308 	add.w	r3, r7, #8
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f7ff fee1 	bl	8009a34 <ETH_SetDMAConfig>
}
 8009c72:	bf00      	nop
 8009c74:	3790      	adds	r7, #144	; 0x90
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8009c7a:	b480      	push	{r7}
 8009c7c:	b085      	sub	sp, #20
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8009c82:	2300      	movs	r3, #0
 8009c84:	60fb      	str	r3, [r7, #12]
 8009c86:	e01d      	b.n	8009cc4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	68d9      	ldr	r1, [r3, #12]
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	4613      	mov	r3, r2
 8009c90:	005b      	lsls	r3, r3, #1
 8009c92:	4413      	add	r3, r2
 8009c94:	00db      	lsls	r3, r3, #3
 8009c96:	440b      	add	r3, r1
 8009c98:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8009cb2:	68b9      	ldr	r1, [r7, #8]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	68fa      	ldr	r2, [r7, #12]
 8009cb8:	3206      	adds	r2, #6
 8009cba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	60fb      	str	r3, [r7, #12]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2b03      	cmp	r3, #3
 8009cc8:	d9de      	bls.n	8009c88 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cd8:	461a      	mov	r2, r3
 8009cda:	2303      	movs	r3, #3
 8009cdc:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	68da      	ldr	r2, [r3, #12]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cec:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	68da      	ldr	r2, [r3, #12]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cfc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8009d00:	bf00      	nop
 8009d02:	3714      	adds	r7, #20
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr

08009d0c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b085      	sub	sp, #20
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8009d14:	2300      	movs	r3, #0
 8009d16:	60fb      	str	r3, [r7, #12]
 8009d18:	e023      	b.n	8009d62 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6919      	ldr	r1, [r3, #16]
 8009d1e:	68fa      	ldr	r2, [r7, #12]
 8009d20:	4613      	mov	r3, r2
 8009d22:	005b      	lsls	r3, r3, #1
 8009d24:	4413      	add	r3, r2
 8009d26:	00db      	lsls	r3, r3, #3
 8009d28:	440b      	add	r3, r1
 8009d2a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	2200      	movs	r2, #0
 8009d36:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	2200      	movs	r2, #0
 8009d42:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	2200      	movs	r2, #0
 8009d48:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8009d50:	68b9      	ldr	r1, [r7, #8]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	3212      	adds	r2, #18
 8009d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	3301      	adds	r3, #1
 8009d60:	60fb      	str	r3, [r7, #12]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2b03      	cmp	r3, #3
 8009d66:	d9d8      	bls.n	8009d1a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d8e:	461a      	mov	r2, r3
 8009d90:	2303      	movs	r3, #3
 8009d92:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	691a      	ldr	r2, [r3, #16]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009da2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009db6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8009dba:	bf00      	nop
 8009dbc:	3714      	adds	r7, #20
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr
	...

08009dc8 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b08a      	sub	sp, #40	; 0x28
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 8009ddc:	2308      	movs	r3, #8
 8009dde:	76fb      	strb	r3, [r7, #27]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009de0:	4b2e      	ldr	r3, [pc, #184]	; (8009e9c <HAL_FLASH_Program+0xd4>)
 8009de2:	7d1b      	ldrb	r3, [r3, #20]
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d101      	bne.n	8009dec <HAL_FLASH_Program+0x24>
 8009de8:	2302      	movs	r3, #2
 8009dea:	e053      	b.n	8009e94 <HAL_FLASH_Program+0xcc>
 8009dec:	4b2b      	ldr	r3, [pc, #172]	; (8009e9c <HAL_FLASH_Program+0xd4>)
 8009dee:	2201      	movs	r2, #1
 8009df0:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009df8:	d315      	bcc.n	8009e26 <HAL_FLASH_Program+0x5e>
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8009e00:	d211      	bcs.n	8009e26 <HAL_FLASH_Program+0x5e>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 8009e02:	2301      	movs	r3, #1
 8009e04:	617b      	str	r3, [r7, #20]
  {
    return HAL_ERROR;
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009e06:	4b25      	ldr	r3, [pc, #148]	; (8009e9c <HAL_FLASH_Program+0xd4>)
 8009e08:	2200      	movs	r2, #0
 8009e0a:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8009e0c:	6979      	ldr	r1, [r7, #20]
 8009e0e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009e12:	f000 f88d 	bl	8009f30 <FLASH_WaitForLastOperation>
 8009e16:	4603      	mov	r3, r0
 8009e18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 8009e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d002      	beq.n	8009e2a <HAL_FLASH_Program+0x62>
 8009e24:	e031      	b.n	8009e8a <HAL_FLASH_Program+0xc2>
    return HAL_ERROR;
 8009e26:	2301      	movs	r3, #1
 8009e28:	e034      	b.n	8009e94 <HAL_FLASH_Program+0xcc>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 8009e2a:	4b1d      	ldr	r3, [pc, #116]	; (8009ea0 <HAL_FLASH_Program+0xd8>)
 8009e2c:	68db      	ldr	r3, [r3, #12]
 8009e2e:	4a1c      	ldr	r2, [pc, #112]	; (8009ea0 <HAL_FLASH_Program+0xd8>)
 8009e30:	f043 0302 	orr.w	r3, r3, #2
 8009e34:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("isb 0xF":::"memory");
 8009e36:	f3bf 8f6f 	isb	sy
}
 8009e3a:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009e3c:	f3bf 8f4f 	dsb	sy
}
 8009e40:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 8009e42:	69fb      	ldr	r3, [r7, #28]
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	6a3b      	ldr	r3, [r7, #32]
 8009e48:	601a      	str	r2, [r3, #0]
        dest_addr++;
 8009e4a:	6a3b      	ldr	r3, [r7, #32]
 8009e4c:	3304      	adds	r3, #4
 8009e4e:	623b      	str	r3, [r7, #32]
        src_addr++;
 8009e50:	69fb      	ldr	r3, [r7, #28]
 8009e52:	3304      	adds	r3, #4
 8009e54:	61fb      	str	r3, [r7, #28]
        row_index--;
 8009e56:	7efb      	ldrb	r3, [r7, #27]
 8009e58:	3b01      	subs	r3, #1
 8009e5a:	76fb      	strb	r3, [r7, #27]
     } while (row_index != 0U);
 8009e5c:	7efb      	ldrb	r3, [r7, #27]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d1ef      	bne.n	8009e42 <HAL_FLASH_Program+0x7a>
  __ASM volatile ("isb 0xF":::"memory");
 8009e62:	f3bf 8f6f 	isb	sy
}
 8009e66:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009e68:	f3bf 8f4f 	dsb	sy
}
 8009e6c:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8009e6e:	6979      	ldr	r1, [r7, #20]
 8009e70:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009e74:	f000 f85c 	bl	8009f30 <FLASH_WaitForLastOperation>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* If the program operation is completed, disable the PG */
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8009e7e:	4b08      	ldr	r3, [pc, #32]	; (8009ea0 <HAL_FLASH_Program+0xd8>)
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	4a07      	ldr	r2, [pc, #28]	; (8009ea0 <HAL_FLASH_Program+0xd8>)
 8009e84:	f023 0302 	bic.w	r3, r3, #2
 8009e88:	60d3      	str	r3, [r2, #12]
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009e8a:	4b04      	ldr	r3, [pc, #16]	; (8009e9c <HAL_FLASH_Program+0xd4>)
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	751a      	strb	r2, [r3, #20]

  return status;
 8009e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3728      	adds	r7, #40	; 0x28
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}
 8009e9c:	24000ed8 	.word	0x24000ed8
 8009ea0:	52002000 	.word	0x52002000

08009ea4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8009ea8:	4b0c      	ldr	r3, [pc, #48]	; (8009edc <HAL_FLASH_Unlock+0x38>)
 8009eaa:	68db      	ldr	r3, [r3, #12]
 8009eac:	f003 0301 	and.w	r3, r3, #1
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d00d      	beq.n	8009ed0 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8009eb4:	4b09      	ldr	r3, [pc, #36]	; (8009edc <HAL_FLASH_Unlock+0x38>)
 8009eb6:	4a0a      	ldr	r2, [pc, #40]	; (8009ee0 <HAL_FLASH_Unlock+0x3c>)
 8009eb8:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8009eba:	4b08      	ldr	r3, [pc, #32]	; (8009edc <HAL_FLASH_Unlock+0x38>)
 8009ebc:	4a09      	ldr	r2, [pc, #36]	; (8009ee4 <HAL_FLASH_Unlock+0x40>)
 8009ebe:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8009ec0:	4b06      	ldr	r3, [pc, #24]	; (8009edc <HAL_FLASH_Unlock+0x38>)
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	f003 0301 	and.w	r3, r3, #1
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d001      	beq.n	8009ed0 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	e000      	b.n	8009ed2 <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8009ed0:	2300      	movs	r3, #0
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr
 8009edc:	52002000 	.word	0x52002000
 8009ee0:	45670123 	.word	0x45670123
 8009ee4:	cdef89ab 	.word	0xcdef89ab

08009ee8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 8009eec:	4b09      	ldr	r3, [pc, #36]	; (8009f14 <HAL_FLASH_Lock+0x2c>)
 8009eee:	68db      	ldr	r3, [r3, #12]
 8009ef0:	4a08      	ldr	r2, [pc, #32]	; (8009f14 <HAL_FLASH_Lock+0x2c>)
 8009ef2:	f043 0301 	orr.w	r3, r3, #1
 8009ef6:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 8009ef8:	4b06      	ldr	r3, [pc, #24]	; (8009f14 <HAL_FLASH_Lock+0x2c>)
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	f003 0301 	and.w	r3, r3, #1
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d101      	bne.n	8009f08 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 8009f04:	2301      	movs	r3, #1
 8009f06:	e000      	b.n	8009f0a <HAL_FLASH_Lock+0x22>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8009f08:	2300      	movs	r3, #0
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr
 8009f14:	52002000 	.word	0x52002000

08009f18 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_DBECC_BANK2: Double Detection ECC on Bank 2
  *            @arg HAL_FLASH_ERROR_CRCRD_BANK2: CRC Read Error on Bank 2
*/

uint32_t HAL_FLASH_GetError(void)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8009f1c:	4b03      	ldr	r3, [pc, #12]	; (8009f2c <HAL_FLASH_GetError+0x14>)
 8009f1e:	699b      	ldr	r3, [r3, #24]
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr
 8009f2a:	bf00      	nop
 8009f2c:	24000ed8 	.word	0x24000ed8

08009f30 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b086      	sub	sp, #24
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 8009f3a:	2304      	movs	r3, #4
 8009f3c:	613b      	str	r3, [r7, #16]
  uint32_t errorflag = 0;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009f42:	f7fa f89d 	bl	8004080 <HAL_GetTick>
 8009f46:	60f8      	str	r0, [r7, #12]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8009f48:	e010      	b.n	8009f6c <FLASH_WaitForLastOperation+0x3c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f50:	d00c      	beq.n	8009f6c <FLASH_WaitForLastOperation+0x3c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009f52:	f7fa f895 	bl	8004080 <HAL_GetTick>
 8009f56:	4602      	mov	r2, r0
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	1ad3      	subs	r3, r2, r3
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d302      	bcc.n	8009f68 <FLASH_WaitForLastOperation+0x38>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d101      	bne.n	8009f6c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8009f68:	2303      	movs	r3, #3
 8009f6a:	e02d      	b.n	8009fc8 <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8009f6c:	4b18      	ldr	r3, [pc, #96]	; (8009fd0 <FLASH_WaitForLastOperation+0xa0>)
 8009f6e:	691a      	ldr	r2, [r3, #16]
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	4013      	ands	r3, r2
 8009f74:	693a      	ldr	r2, [r7, #16]
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d0e7      	beq.n	8009f4a <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d104      	bne.n	8009f8a <FLASH_WaitForLastOperation+0x5a>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8009f80:	4b13      	ldr	r3, [pc, #76]	; (8009fd0 <FLASH_WaitForLastOperation+0xa0>)
 8009f82:	691a      	ldr	r2, [r3, #16]
 8009f84:	4b13      	ldr	r3, [pc, #76]	; (8009fd4 <FLASH_WaitForLastOperation+0xa4>)
 8009f86:	4013      	ands	r3, r2
 8009f88:	617b      	str	r3, [r7, #20]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d00a      	beq.n	8009faa <FLASH_WaitForLastOperation+0x7a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8009f94:	4b10      	ldr	r3, [pc, #64]	; (8009fd8 <FLASH_WaitForLastOperation+0xa8>)
 8009f96:	699a      	ldr	r2, [r3, #24]
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	4a0e      	ldr	r2, [pc, #56]	; (8009fd8 <FLASH_WaitForLastOperation+0xa8>)
 8009f9e:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8009fa0:	4a0b      	ldr	r2, [pc, #44]	; (8009fd0 <FLASH_WaitForLastOperation+0xa0>)
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	e00e      	b.n	8009fc8 <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d10a      	bne.n	8009fc6 <FLASH_WaitForLastOperation+0x96>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8009fb0:	4b07      	ldr	r3, [pc, #28]	; (8009fd0 <FLASH_WaitForLastOperation+0xa0>)
 8009fb2:	691b      	ldr	r3, [r3, #16]
 8009fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fbc:	d103      	bne.n	8009fc6 <FLASH_WaitForLastOperation+0x96>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8009fbe:	4b04      	ldr	r3, [pc, #16]	; (8009fd0 <FLASH_WaitForLastOperation+0xa0>)
 8009fc0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009fc4:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8009fc6:	2300      	movs	r3, #0
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3718      	adds	r7, #24
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}
 8009fd0:	52002000 	.word	0x52002000
 8009fd4:	17ee0000 	.word	0x17ee0000
 8009fd8:	24000ed8 	.word	0x24000ed8

08009fdc <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009fea:	4b3f      	ldr	r3, [pc, #252]	; (800a0e8 <HAL_FLASHEx_Erase+0x10c>)
 8009fec:	7d1b      	ldrb	r3, [r3, #20]
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	d101      	bne.n	8009ff6 <HAL_FLASHEx_Erase+0x1a>
 8009ff2:	2302      	movs	r3, #2
 8009ff4:	e074      	b.n	800a0e0 <HAL_FLASHEx_Erase+0x104>
 8009ff6:	4b3c      	ldr	r3, [pc, #240]	; (800a0e8 <HAL_FLASHEx_Erase+0x10c>)
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009ffc:	4b3a      	ldr	r3, [pc, #232]	; (800a0e8 <HAL_FLASHEx_Erase+0x10c>)
 8009ffe:	2200      	movs	r2, #0
 800a000:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	f003 0301 	and.w	r3, r3, #1
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d009      	beq.n	800a022 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800a00e:	2101      	movs	r1, #1
 800a010:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a014:	f7ff ff8c 	bl	8009f30 <FLASH_WaitForLastOperation>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d001      	beq.n	800a022 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800a01e:	2301      	movs	r3, #1
 800a020:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800a022:	7bfb      	ldrb	r3, [r7, #15]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d157      	bne.n	800a0d8 <HAL_FLASHEx_Erase+0xfc>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d11e      	bne.n	800a06e <HAL_FLASHEx_Erase+0x92>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	691a      	ldr	r2, [r3, #16]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	4619      	mov	r1, r3
 800a03a:	4610      	mov	r0, r2
 800a03c:	f000 f85a 	bl	800a0f4 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	f003 0301 	and.w	r3, r3, #1
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d045      	beq.n	800a0d8 <HAL_FLASHEx_Erase+0xfc>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800a04c:	2101      	movs	r1, #1
 800a04e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a052:	f7ff ff6d 	bl	8009f30 <FLASH_WaitForLastOperation>
 800a056:	4603      	mov	r3, r0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d001      	beq.n	800a060 <HAL_FLASHEx_Erase+0x84>
        {
          status = HAL_ERROR;
 800a05c:	2301      	movs	r3, #1
 800a05e:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800a060:	4b22      	ldr	r3, [pc, #136]	; (800a0ec <HAL_FLASHEx_Erase+0x110>)
 800a062:	68db      	ldr	r3, [r3, #12]
 800a064:	4a21      	ldr	r2, [pc, #132]	; (800a0ec <HAL_FLASHEx_Erase+0x110>)
 800a066:	f023 0308 	bic.w	r3, r3, #8
 800a06a:	60d3      	str	r3, [r2, #12]
 800a06c:	e034      	b.n	800a0d8 <HAL_FLASHEx_Erase+0xfc>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	f04f 32ff 	mov.w	r2, #4294967295
 800a074:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	689b      	ldr	r3, [r3, #8]
 800a07a:	60bb      	str	r3, [r7, #8]
 800a07c:	e024      	b.n	800a0c8 <HAL_FLASHEx_Erase+0xec>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6859      	ldr	r1, [r3, #4]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	691b      	ldr	r3, [r3, #16]
 800a086:	461a      	mov	r2, r3
 800a088:	68b8      	ldr	r0, [r7, #8]
 800a08a:	f000 f857 	bl	800a13c <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	f003 0301 	and.w	r3, r3, #1
 800a096:	2b00      	cmp	r3, #0
 800a098:	d00c      	beq.n	800a0b4 <HAL_FLASHEx_Erase+0xd8>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800a09a:	2101      	movs	r1, #1
 800a09c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a0a0:	f7ff ff46 	bl	8009f30 <FLASH_WaitForLastOperation>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800a0a8:	4b10      	ldr	r3, [pc, #64]	; (800a0ec <HAL_FLASHEx_Erase+0x110>)
 800a0aa:	68da      	ldr	r2, [r3, #12]
 800a0ac:	490f      	ldr	r1, [pc, #60]	; (800a0ec <HAL_FLASHEx_Erase+0x110>)
 800a0ae:	4b10      	ldr	r3, [pc, #64]	; (800a0f0 <HAL_FLASHEx_Erase+0x114>)
 800a0b0:	4013      	ands	r3, r2
 800a0b2:	60cb      	str	r3, [r1, #12]
          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800a0b4:	7bfb      	ldrb	r3, [r7, #15]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d003      	beq.n	800a0c2 <HAL_FLASHEx_Erase+0xe6>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	68ba      	ldr	r2, [r7, #8]
 800a0be:	601a      	str	r2, [r3, #0]
          break;
 800a0c0:	e00a      	b.n	800a0d8 <HAL_FLASHEx_Erase+0xfc>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	3301      	adds	r3, #1
 800a0c6:	60bb      	str	r3, [r7, #8]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	68da      	ldr	r2, [r3, #12]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	4413      	add	r3, r2
 800a0d2:	68ba      	ldr	r2, [r7, #8]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d3d2      	bcc.n	800a07e <HAL_FLASHEx_Erase+0xa2>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a0d8:	4b03      	ldr	r3, [pc, #12]	; (800a0e8 <HAL_FLASHEx_Erase+0x10c>)
 800a0da:	2200      	movs	r2, #0
 800a0dc:	751a      	strb	r2, [r3, #20]

  return status;
 800a0de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3710      	adds	r7, #16
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	24000ed8 	.word	0x24000ed8
 800a0ec:	52002000 	.word	0x52002000
 800a0f0:	fffff8fb 	.word	0xfffff8fb

0800a0f4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
  }
  else
#endif /* DUAL_BANK */
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	f003 0301 	and.w	r3, r3, #1
 800a104:	2b00      	cmp	r3, #0
 800a106:	d011      	beq.n	800a12c <FLASH_MassErase+0x38>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank1 */
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800a108:	4b0b      	ldr	r3, [pc, #44]	; (800a138 <FLASH_MassErase+0x44>)
 800a10a:	68db      	ldr	r3, [r3, #12]
 800a10c:	4a0a      	ldr	r2, [pc, #40]	; (800a138 <FLASH_MassErase+0x44>)
 800a10e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800a112:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800a114:	4b08      	ldr	r3, [pc, #32]	; (800a138 <FLASH_MassErase+0x44>)
 800a116:	68da      	ldr	r2, [r3, #12]
 800a118:	4907      	ldr	r1, [pc, #28]	; (800a138 <FLASH_MassErase+0x44>)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4313      	orrs	r3, r2
 800a11e:	60cb      	str	r3, [r1, #12]
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800a120:	4b05      	ldr	r3, [pc, #20]	; (800a138 <FLASH_MassErase+0x44>)
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	4a04      	ldr	r2, [pc, #16]	; (800a138 <FLASH_MassErase+0x44>)
 800a126:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800a12a:	60d3      	str	r3, [r2, #12]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800a12c:	bf00      	nop
 800a12e:	370c      	adds	r7, #12
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr
 800a138:	52002000 	.word	0x52002000

0800a13c <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b085      	sub	sp, #20
 800a140:	af00      	add	r7, sp, #0
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	60b9      	str	r1, [r7, #8]
 800a146:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	f003 0301 	and.w	r3, r3, #1
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d010      	beq.n	800a174 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800a152:	4b0b      	ldr	r3, [pc, #44]	; (800a180 <FLASH_Erase_Sector+0x44>)
 800a154:	68db      	ldr	r3, [r3, #12]
 800a156:	4a0a      	ldr	r2, [pc, #40]	; (800a180 <FLASH_Erase_Sector+0x44>)
 800a158:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800a15c:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800a15e:	4b08      	ldr	r3, [pc, #32]	; (800a180 <FLASH_Erase_Sector+0x44>)
 800a160:	68da      	ldr	r2, [r3, #12]
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	0219      	lsls	r1, r3, #8
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	430b      	orrs	r3, r1
 800a16a:	4313      	orrs	r3, r2
 800a16c:	4a04      	ldr	r2, [pc, #16]	; (800a180 <FLASH_Erase_Sector+0x44>)
 800a16e:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800a172:	60d3      	str	r3, [r2, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800a174:	bf00      	nop
 800a176:	3714      	adds	r7, #20
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr
 800a180:	52002000 	.word	0x52002000

0800a184 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a184:	b480      	push	{r7}
 800a186:	b089      	sub	sp, #36	; 0x24
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a18e:	2300      	movs	r3, #0
 800a190:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a192:	4b86      	ldr	r3, [pc, #536]	; (800a3ac <HAL_GPIO_Init+0x228>)
 800a194:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a196:	e18c      	b.n	800a4b2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	2101      	movs	r1, #1
 800a19e:	69fb      	ldr	r3, [r7, #28]
 800a1a0:	fa01 f303 	lsl.w	r3, r1, r3
 800a1a4:	4013      	ands	r3, r2
 800a1a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	f000 817e 	beq.w	800a4ac <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	f003 0303 	and.w	r3, r3, #3
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d005      	beq.n	800a1c8 <HAL_GPIO_Init+0x44>
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	f003 0303 	and.w	r3, r3, #3
 800a1c4:	2b02      	cmp	r3, #2
 800a1c6:	d130      	bne.n	800a22a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a1ce:	69fb      	ldr	r3, [r7, #28]
 800a1d0:	005b      	lsls	r3, r3, #1
 800a1d2:	2203      	movs	r2, #3
 800a1d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a1d8:	43db      	mvns	r3, r3
 800a1da:	69ba      	ldr	r2, [r7, #24]
 800a1dc:	4013      	ands	r3, r2
 800a1de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	68da      	ldr	r2, [r3, #12]
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	005b      	lsls	r3, r3, #1
 800a1e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ec:	69ba      	ldr	r2, [r7, #24]
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	69ba      	ldr	r2, [r7, #24]
 800a1f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a1fe:	2201      	movs	r2, #1
 800a200:	69fb      	ldr	r3, [r7, #28]
 800a202:	fa02 f303 	lsl.w	r3, r2, r3
 800a206:	43db      	mvns	r3, r3
 800a208:	69ba      	ldr	r2, [r7, #24]
 800a20a:	4013      	ands	r3, r2
 800a20c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	091b      	lsrs	r3, r3, #4
 800a214:	f003 0201 	and.w	r2, r3, #1
 800a218:	69fb      	ldr	r3, [r7, #28]
 800a21a:	fa02 f303 	lsl.w	r3, r2, r3
 800a21e:	69ba      	ldr	r2, [r7, #24]
 800a220:	4313      	orrs	r3, r2
 800a222:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	69ba      	ldr	r2, [r7, #24]
 800a228:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	f003 0303 	and.w	r3, r3, #3
 800a232:	2b03      	cmp	r3, #3
 800a234:	d017      	beq.n	800a266 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a23c:	69fb      	ldr	r3, [r7, #28]
 800a23e:	005b      	lsls	r3, r3, #1
 800a240:	2203      	movs	r2, #3
 800a242:	fa02 f303 	lsl.w	r3, r2, r3
 800a246:	43db      	mvns	r3, r3
 800a248:	69ba      	ldr	r2, [r7, #24]
 800a24a:	4013      	ands	r3, r2
 800a24c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	689a      	ldr	r2, [r3, #8]
 800a252:	69fb      	ldr	r3, [r7, #28]
 800a254:	005b      	lsls	r3, r3, #1
 800a256:	fa02 f303 	lsl.w	r3, r2, r3
 800a25a:	69ba      	ldr	r2, [r7, #24]
 800a25c:	4313      	orrs	r3, r2
 800a25e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	69ba      	ldr	r2, [r7, #24]
 800a264:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	f003 0303 	and.w	r3, r3, #3
 800a26e:	2b02      	cmp	r3, #2
 800a270:	d123      	bne.n	800a2ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a272:	69fb      	ldr	r3, [r7, #28]
 800a274:	08da      	lsrs	r2, r3, #3
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	3208      	adds	r2, #8
 800a27a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a27e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a280:	69fb      	ldr	r3, [r7, #28]
 800a282:	f003 0307 	and.w	r3, r3, #7
 800a286:	009b      	lsls	r3, r3, #2
 800a288:	220f      	movs	r2, #15
 800a28a:	fa02 f303 	lsl.w	r3, r2, r3
 800a28e:	43db      	mvns	r3, r3
 800a290:	69ba      	ldr	r2, [r7, #24]
 800a292:	4013      	ands	r3, r2
 800a294:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	691a      	ldr	r2, [r3, #16]
 800a29a:	69fb      	ldr	r3, [r7, #28]
 800a29c:	f003 0307 	and.w	r3, r3, #7
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a2a6:	69ba      	ldr	r2, [r7, #24]
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a2ac:	69fb      	ldr	r3, [r7, #28]
 800a2ae:	08da      	lsrs	r2, r3, #3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	3208      	adds	r2, #8
 800a2b4:	69b9      	ldr	r1, [r7, #24]
 800a2b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	005b      	lsls	r3, r3, #1
 800a2c4:	2203      	movs	r2, #3
 800a2c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ca:	43db      	mvns	r3, r3
 800a2cc:	69ba      	ldr	r2, [r7, #24]
 800a2ce:	4013      	ands	r3, r2
 800a2d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	f003 0203 	and.w	r2, r3, #3
 800a2da:	69fb      	ldr	r3, [r7, #28]
 800a2dc:	005b      	lsls	r3, r3, #1
 800a2de:	fa02 f303 	lsl.w	r3, r2, r3
 800a2e2:	69ba      	ldr	r2, [r7, #24]
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	69ba      	ldr	r2, [r7, #24]
 800a2ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	f000 80d8 	beq.w	800a4ac <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a2fc:	4b2c      	ldr	r3, [pc, #176]	; (800a3b0 <HAL_GPIO_Init+0x22c>)
 800a2fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a302:	4a2b      	ldr	r2, [pc, #172]	; (800a3b0 <HAL_GPIO_Init+0x22c>)
 800a304:	f043 0302 	orr.w	r3, r3, #2
 800a308:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a30c:	4b28      	ldr	r3, [pc, #160]	; (800a3b0 <HAL_GPIO_Init+0x22c>)
 800a30e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a312:	f003 0302 	and.w	r3, r3, #2
 800a316:	60fb      	str	r3, [r7, #12]
 800a318:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a31a:	4a26      	ldr	r2, [pc, #152]	; (800a3b4 <HAL_GPIO_Init+0x230>)
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	089b      	lsrs	r3, r3, #2
 800a320:	3302      	adds	r3, #2
 800a322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a326:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	f003 0303 	and.w	r3, r3, #3
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	220f      	movs	r2, #15
 800a332:	fa02 f303 	lsl.w	r3, r2, r3
 800a336:	43db      	mvns	r3, r3
 800a338:	69ba      	ldr	r2, [r7, #24]
 800a33a:	4013      	ands	r3, r2
 800a33c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	4a1d      	ldr	r2, [pc, #116]	; (800a3b8 <HAL_GPIO_Init+0x234>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d04a      	beq.n	800a3dc <HAL_GPIO_Init+0x258>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	4a1c      	ldr	r2, [pc, #112]	; (800a3bc <HAL_GPIO_Init+0x238>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d02b      	beq.n	800a3a6 <HAL_GPIO_Init+0x222>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	4a1b      	ldr	r2, [pc, #108]	; (800a3c0 <HAL_GPIO_Init+0x23c>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d025      	beq.n	800a3a2 <HAL_GPIO_Init+0x21e>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	4a1a      	ldr	r2, [pc, #104]	; (800a3c4 <HAL_GPIO_Init+0x240>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d01f      	beq.n	800a39e <HAL_GPIO_Init+0x21a>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	4a19      	ldr	r2, [pc, #100]	; (800a3c8 <HAL_GPIO_Init+0x244>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d019      	beq.n	800a39a <HAL_GPIO_Init+0x216>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	4a18      	ldr	r2, [pc, #96]	; (800a3cc <HAL_GPIO_Init+0x248>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d013      	beq.n	800a396 <HAL_GPIO_Init+0x212>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	4a17      	ldr	r2, [pc, #92]	; (800a3d0 <HAL_GPIO_Init+0x24c>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d00d      	beq.n	800a392 <HAL_GPIO_Init+0x20e>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	4a16      	ldr	r2, [pc, #88]	; (800a3d4 <HAL_GPIO_Init+0x250>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d007      	beq.n	800a38e <HAL_GPIO_Init+0x20a>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	4a15      	ldr	r2, [pc, #84]	; (800a3d8 <HAL_GPIO_Init+0x254>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d101      	bne.n	800a38a <HAL_GPIO_Init+0x206>
 800a386:	2309      	movs	r3, #9
 800a388:	e029      	b.n	800a3de <HAL_GPIO_Init+0x25a>
 800a38a:	230a      	movs	r3, #10
 800a38c:	e027      	b.n	800a3de <HAL_GPIO_Init+0x25a>
 800a38e:	2307      	movs	r3, #7
 800a390:	e025      	b.n	800a3de <HAL_GPIO_Init+0x25a>
 800a392:	2306      	movs	r3, #6
 800a394:	e023      	b.n	800a3de <HAL_GPIO_Init+0x25a>
 800a396:	2305      	movs	r3, #5
 800a398:	e021      	b.n	800a3de <HAL_GPIO_Init+0x25a>
 800a39a:	2304      	movs	r3, #4
 800a39c:	e01f      	b.n	800a3de <HAL_GPIO_Init+0x25a>
 800a39e:	2303      	movs	r3, #3
 800a3a0:	e01d      	b.n	800a3de <HAL_GPIO_Init+0x25a>
 800a3a2:	2302      	movs	r3, #2
 800a3a4:	e01b      	b.n	800a3de <HAL_GPIO_Init+0x25a>
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e019      	b.n	800a3de <HAL_GPIO_Init+0x25a>
 800a3aa:	bf00      	nop
 800a3ac:	58000080 	.word	0x58000080
 800a3b0:	58024400 	.word	0x58024400
 800a3b4:	58000400 	.word	0x58000400
 800a3b8:	58020000 	.word	0x58020000
 800a3bc:	58020400 	.word	0x58020400
 800a3c0:	58020800 	.word	0x58020800
 800a3c4:	58020c00 	.word	0x58020c00
 800a3c8:	58021000 	.word	0x58021000
 800a3cc:	58021400 	.word	0x58021400
 800a3d0:	58021800 	.word	0x58021800
 800a3d4:	58021c00 	.word	0x58021c00
 800a3d8:	58022400 	.word	0x58022400
 800a3dc:	2300      	movs	r3, #0
 800a3de:	69fa      	ldr	r2, [r7, #28]
 800a3e0:	f002 0203 	and.w	r2, r2, #3
 800a3e4:	0092      	lsls	r2, r2, #2
 800a3e6:	4093      	lsls	r3, r2
 800a3e8:	69ba      	ldr	r2, [r7, #24]
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a3ee:	4938      	ldr	r1, [pc, #224]	; (800a4d0 <HAL_GPIO_Init+0x34c>)
 800a3f0:	69fb      	ldr	r3, [r7, #28]
 800a3f2:	089b      	lsrs	r3, r3, #2
 800a3f4:	3302      	adds	r3, #2
 800a3f6:	69ba      	ldr	r2, [r7, #24]
 800a3f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a3fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	43db      	mvns	r3, r3
 800a408:	69ba      	ldr	r2, [r7, #24]
 800a40a:	4013      	ands	r3, r2
 800a40c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a416:	2b00      	cmp	r3, #0
 800a418:	d003      	beq.n	800a422 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800a41a:	69ba      	ldr	r2, [r7, #24]
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	4313      	orrs	r3, r2
 800a420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a422:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a426:	69bb      	ldr	r3, [r7, #24]
 800a428:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a42a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	43db      	mvns	r3, r3
 800a436:	69ba      	ldr	r2, [r7, #24]
 800a438:	4013      	ands	r3, r2
 800a43a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a444:	2b00      	cmp	r3, #0
 800a446:	d003      	beq.n	800a450 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800a448:	69ba      	ldr	r2, [r7, #24]
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	4313      	orrs	r3, r2
 800a44e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a450:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a454:	69bb      	ldr	r3, [r7, #24]
 800a456:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	43db      	mvns	r3, r3
 800a462:	69ba      	ldr	r2, [r7, #24]
 800a464:	4013      	ands	r3, r2
 800a466:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	685b      	ldr	r3, [r3, #4]
 800a46c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a470:	2b00      	cmp	r3, #0
 800a472:	d003      	beq.n	800a47c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800a474:	69ba      	ldr	r2, [r7, #24]
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	4313      	orrs	r3, r2
 800a47a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	69ba      	ldr	r2, [r7, #24]
 800a480:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	43db      	mvns	r3, r3
 800a48c:	69ba      	ldr	r2, [r7, #24]
 800a48e:	4013      	ands	r3, r2
 800a490:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d003      	beq.n	800a4a6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800a49e:	69ba      	ldr	r2, [r7, #24]
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	69ba      	ldr	r2, [r7, #24]
 800a4aa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a4ac:	69fb      	ldr	r3, [r7, #28]
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	69fb      	ldr	r3, [r7, #28]
 800a4b8:	fa22 f303 	lsr.w	r3, r2, r3
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	f47f ae6b 	bne.w	800a198 <HAL_GPIO_Init+0x14>
  }
}
 800a4c2:	bf00      	nop
 800a4c4:	bf00      	nop
 800a4c6:	3724      	adds	r7, #36	; 0x24
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr
 800a4d0:	58000400 	.word	0x58000400

0800a4d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b085      	sub	sp, #20
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	460b      	mov	r3, r1
 800a4de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	691a      	ldr	r2, [r3, #16]
 800a4e4:	887b      	ldrh	r3, [r7, #2]
 800a4e6:	4013      	ands	r3, r2
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d002      	beq.n	800a4f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	73fb      	strb	r3, [r7, #15]
 800a4f0:	e001      	b.n	800a4f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a4f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3714      	adds	r7, #20
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	460b      	mov	r3, r1
 800a50e:	807b      	strh	r3, [r7, #2]
 800a510:	4613      	mov	r3, r2
 800a512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a514:	787b      	ldrb	r3, [r7, #1]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d003      	beq.n	800a522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a51a:	887a      	ldrh	r2, [r7, #2]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a520:	e003      	b.n	800a52a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a522:	887b      	ldrh	r3, [r7, #2]
 800a524:	041a      	lsls	r2, r3, #16
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	619a      	str	r2, [r3, #24]
}
 800a52a:	bf00      	nop
 800a52c:	370c      	adds	r7, #12
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr

0800a536 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a536:	b580      	push	{r7, lr}
 800a538:	b082      	sub	sp, #8
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	4603      	mov	r3, r0
 800a53e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800a540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a544:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a548:	88fb      	ldrh	r3, [r7, #6]
 800a54a:	4013      	ands	r3, r2
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d008      	beq.n	800a562 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a550:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a554:	88fb      	ldrh	r3, [r7, #6]
 800a556:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a55a:	88fb      	ldrh	r3, [r7, #6]
 800a55c:	4618      	mov	r0, r3
 800a55e:	f7f7 fbc3 	bl	8001ce8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800a562:	bf00      	nop
 800a564:	3708      	adds	r7, #8
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
	...

0800a56c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b084      	sub	sp, #16
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a574:	4b19      	ldr	r3, [pc, #100]	; (800a5dc <HAL_PWREx_ConfigSupply+0x70>)
 800a576:	68db      	ldr	r3, [r3, #12]
 800a578:	f003 0304 	and.w	r3, r3, #4
 800a57c:	2b04      	cmp	r3, #4
 800a57e:	d00a      	beq.n	800a596 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a580:	4b16      	ldr	r3, [pc, #88]	; (800a5dc <HAL_PWREx_ConfigSupply+0x70>)
 800a582:	68db      	ldr	r3, [r3, #12]
 800a584:	f003 0307 	and.w	r3, r3, #7
 800a588:	687a      	ldr	r2, [r7, #4]
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d001      	beq.n	800a592 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a58e:	2301      	movs	r3, #1
 800a590:	e01f      	b.n	800a5d2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a592:	2300      	movs	r3, #0
 800a594:	e01d      	b.n	800a5d2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a596:	4b11      	ldr	r3, [pc, #68]	; (800a5dc <HAL_PWREx_ConfigSupply+0x70>)
 800a598:	68db      	ldr	r3, [r3, #12]
 800a59a:	f023 0207 	bic.w	r2, r3, #7
 800a59e:	490f      	ldr	r1, [pc, #60]	; (800a5dc <HAL_PWREx_ConfigSupply+0x70>)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a5a6:	f7f9 fd6b 	bl	8004080 <HAL_GetTick>
 800a5aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a5ac:	e009      	b.n	800a5c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a5ae:	f7f9 fd67 	bl	8004080 <HAL_GetTick>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	1ad3      	subs	r3, r2, r3
 800a5b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a5bc:	d901      	bls.n	800a5c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e007      	b.n	800a5d2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a5c2:	4b06      	ldr	r3, [pc, #24]	; (800a5dc <HAL_PWREx_ConfigSupply+0x70>)
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a5ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5ce:	d1ee      	bne.n	800a5ae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a5d0:	2300      	movs	r3, #0
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3710      	adds	r7, #16
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	58024800 	.word	0x58024800

0800a5e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b08c      	sub	sp, #48	; 0x30
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d101      	bne.n	800a5f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	e3c8      	b.n	800ad84 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f003 0301 	and.w	r3, r3, #1
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	f000 8087 	beq.w	800a70e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a600:	4b88      	ldr	r3, [pc, #544]	; (800a824 <HAL_RCC_OscConfig+0x244>)
 800a602:	691b      	ldr	r3, [r3, #16]
 800a604:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a608:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a60a:	4b86      	ldr	r3, [pc, #536]	; (800a824 <HAL_RCC_OscConfig+0x244>)
 800a60c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a60e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a612:	2b10      	cmp	r3, #16
 800a614:	d007      	beq.n	800a626 <HAL_RCC_OscConfig+0x46>
 800a616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a618:	2b18      	cmp	r3, #24
 800a61a:	d110      	bne.n	800a63e <HAL_RCC_OscConfig+0x5e>
 800a61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a61e:	f003 0303 	and.w	r3, r3, #3
 800a622:	2b02      	cmp	r3, #2
 800a624:	d10b      	bne.n	800a63e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a626:	4b7f      	ldr	r3, [pc, #508]	; (800a824 <HAL_RCC_OscConfig+0x244>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d06c      	beq.n	800a70c <HAL_RCC_OscConfig+0x12c>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d168      	bne.n	800a70c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a63a:	2301      	movs	r3, #1
 800a63c:	e3a2      	b.n	800ad84 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a646:	d106      	bne.n	800a656 <HAL_RCC_OscConfig+0x76>
 800a648:	4b76      	ldr	r3, [pc, #472]	; (800a824 <HAL_RCC_OscConfig+0x244>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4a75      	ldr	r2, [pc, #468]	; (800a824 <HAL_RCC_OscConfig+0x244>)
 800a64e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a652:	6013      	str	r3, [r2, #0]
 800a654:	e02e      	b.n	800a6b4 <HAL_RCC_OscConfig+0xd4>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d10c      	bne.n	800a678 <HAL_RCC_OscConfig+0x98>
 800a65e:	4b71      	ldr	r3, [pc, #452]	; (800a824 <HAL_RCC_OscConfig+0x244>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4a70      	ldr	r2, [pc, #448]	; (800a824 <HAL_RCC_OscConfig+0x244>)
 800a664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a668:	6013      	str	r3, [r2, #0]
 800a66a:	4b6e      	ldr	r3, [pc, #440]	; (800a824 <HAL_RCC_OscConfig+0x244>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4a6d      	ldr	r2, [pc, #436]	; (800a824 <HAL_RCC_OscConfig+0x244>)
 800a670:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a674:	6013      	str	r3, [r2, #0]
 800a676:	e01d      	b.n	800a6b4 <HAL_RCC_OscConfig+0xd4>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a680:	d10c      	bne.n	800a69c <HAL_RCC_OscConfig+0xbc>
 800a682:	4b68      	ldr	r3, [pc, #416]	; (800a824 <HAL_RCC_OscConfig+0x244>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4a67      	ldr	r2, [pc, #412]	; (800a824 <HAL_RCC_OscConfig+0x244>)
 800a688:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a68c:	6013      	str	r3, [r2, #0]
 800a68e:	4b65      	ldr	r3, [pc, #404]	; (800a824 <HAL_RCC_OscConfig+0x244>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a64      	ldr	r2, [pc, #400]	; (800a824 <HAL_RCC_OscConfig+0x244>)
 800a694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a698:	6013      	str	r3, [r2, #0]
 800a69a:	e00b      	b.n	800a6b4 <HAL_RCC_OscConfig+0xd4>
 800a69c:	4b61      	ldr	r3, [pc, #388]	; (800a824 <HAL_RCC_OscConfig+0x244>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a60      	ldr	r2, [pc, #384]	; (800a824 <HAL_RCC_OscConfig+0x244>)
 800a6a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6a6:	6013      	str	r3, [r2, #0]
 800a6a8:	4b5e      	ldr	r3, [pc, #376]	; (800a824 <HAL_RCC_OscConfig+0x244>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4a5d      	ldr	r2, [pc, #372]	; (800a824 <HAL_RCC_OscConfig+0x244>)
 800a6ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a6b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d013      	beq.n	800a6e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6bc:	f7f9 fce0 	bl	8004080 <HAL_GetTick>
 800a6c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a6c2:	e008      	b.n	800a6d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a6c4:	f7f9 fcdc 	bl	8004080 <HAL_GetTick>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6cc:	1ad3      	subs	r3, r2, r3
 800a6ce:	2b64      	cmp	r3, #100	; 0x64
 800a6d0:	d901      	bls.n	800a6d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a6d2:	2303      	movs	r3, #3
 800a6d4:	e356      	b.n	800ad84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a6d6:	4b53      	ldr	r3, [pc, #332]	; (800a824 <HAL_RCC_OscConfig+0x244>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d0f0      	beq.n	800a6c4 <HAL_RCC_OscConfig+0xe4>
 800a6e2:	e014      	b.n	800a70e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6e4:	f7f9 fccc 	bl	8004080 <HAL_GetTick>
 800a6e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a6ea:	e008      	b.n	800a6fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a6ec:	f7f9 fcc8 	bl	8004080 <HAL_GetTick>
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f4:	1ad3      	subs	r3, r2, r3
 800a6f6:	2b64      	cmp	r3, #100	; 0x64
 800a6f8:	d901      	bls.n	800a6fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a6fa:	2303      	movs	r3, #3
 800a6fc:	e342      	b.n	800ad84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a6fe:	4b49      	ldr	r3, [pc, #292]	; (800a824 <HAL_RCC_OscConfig+0x244>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a706:	2b00      	cmp	r3, #0
 800a708:	d1f0      	bne.n	800a6ec <HAL_RCC_OscConfig+0x10c>
 800a70a:	e000      	b.n	800a70e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a70c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f003 0302 	and.w	r3, r3, #2
 800a716:	2b00      	cmp	r3, #0
 800a718:	f000 808c 	beq.w	800a834 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a71c:	4b41      	ldr	r3, [pc, #260]	; (800a824 <HAL_RCC_OscConfig+0x244>)
 800a71e:	691b      	ldr	r3, [r3, #16]
 800a720:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a724:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a726:	4b3f      	ldr	r3, [pc, #252]	; (800a824 <HAL_RCC_OscConfig+0x244>)
 800a728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a72a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a72c:	6a3b      	ldr	r3, [r7, #32]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d007      	beq.n	800a742 <HAL_RCC_OscConfig+0x162>
 800a732:	6a3b      	ldr	r3, [r7, #32]
 800a734:	2b18      	cmp	r3, #24
 800a736:	d137      	bne.n	800a7a8 <HAL_RCC_OscConfig+0x1c8>
 800a738:	69fb      	ldr	r3, [r7, #28]
 800a73a:	f003 0303 	and.w	r3, r3, #3
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d132      	bne.n	800a7a8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a742:	4b38      	ldr	r3, [pc, #224]	; (800a824 <HAL_RCC_OscConfig+0x244>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f003 0304 	and.w	r3, r3, #4
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d005      	beq.n	800a75a <HAL_RCC_OscConfig+0x17a>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	68db      	ldr	r3, [r3, #12]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d101      	bne.n	800a75a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a756:	2301      	movs	r3, #1
 800a758:	e314      	b.n	800ad84 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a75a:	4b32      	ldr	r3, [pc, #200]	; (800a824 <HAL_RCC_OscConfig+0x244>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f023 0219 	bic.w	r2, r3, #25
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	492f      	ldr	r1, [pc, #188]	; (800a824 <HAL_RCC_OscConfig+0x244>)
 800a768:	4313      	orrs	r3, r2
 800a76a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a76c:	f7f9 fc88 	bl	8004080 <HAL_GetTick>
 800a770:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a772:	e008      	b.n	800a786 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a774:	f7f9 fc84 	bl	8004080 <HAL_GetTick>
 800a778:	4602      	mov	r2, r0
 800a77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77c:	1ad3      	subs	r3, r2, r3
 800a77e:	2b02      	cmp	r3, #2
 800a780:	d901      	bls.n	800a786 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800a782:	2303      	movs	r3, #3
 800a784:	e2fe      	b.n	800ad84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a786:	4b27      	ldr	r3, [pc, #156]	; (800a824 <HAL_RCC_OscConfig+0x244>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f003 0304 	and.w	r3, r3, #4
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d0f0      	beq.n	800a774 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a792:	4b24      	ldr	r3, [pc, #144]	; (800a824 <HAL_RCC_OscConfig+0x244>)
 800a794:	685b      	ldr	r3, [r3, #4]
 800a796:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	691b      	ldr	r3, [r3, #16]
 800a79e:	061b      	lsls	r3, r3, #24
 800a7a0:	4920      	ldr	r1, [pc, #128]	; (800a824 <HAL_RCC_OscConfig+0x244>)
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a7a6:	e045      	b.n	800a834 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d026      	beq.n	800a7fe <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a7b0:	4b1c      	ldr	r3, [pc, #112]	; (800a824 <HAL_RCC_OscConfig+0x244>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f023 0219 	bic.w	r2, r3, #25
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	68db      	ldr	r3, [r3, #12]
 800a7bc:	4919      	ldr	r1, [pc, #100]	; (800a824 <HAL_RCC_OscConfig+0x244>)
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7c2:	f7f9 fc5d 	bl	8004080 <HAL_GetTick>
 800a7c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a7c8:	e008      	b.n	800a7dc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a7ca:	f7f9 fc59 	bl	8004080 <HAL_GetTick>
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d2:	1ad3      	subs	r3, r2, r3
 800a7d4:	2b02      	cmp	r3, #2
 800a7d6:	d901      	bls.n	800a7dc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800a7d8:	2303      	movs	r3, #3
 800a7da:	e2d3      	b.n	800ad84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a7dc:	4b11      	ldr	r3, [pc, #68]	; (800a824 <HAL_RCC_OscConfig+0x244>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f003 0304 	and.w	r3, r3, #4
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d0f0      	beq.n	800a7ca <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a7e8:	4b0e      	ldr	r3, [pc, #56]	; (800a824 <HAL_RCC_OscConfig+0x244>)
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	691b      	ldr	r3, [r3, #16]
 800a7f4:	061b      	lsls	r3, r3, #24
 800a7f6:	490b      	ldr	r1, [pc, #44]	; (800a824 <HAL_RCC_OscConfig+0x244>)
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	604b      	str	r3, [r1, #4]
 800a7fc:	e01a      	b.n	800a834 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a7fe:	4b09      	ldr	r3, [pc, #36]	; (800a824 <HAL_RCC_OscConfig+0x244>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4a08      	ldr	r2, [pc, #32]	; (800a824 <HAL_RCC_OscConfig+0x244>)
 800a804:	f023 0301 	bic.w	r3, r3, #1
 800a808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a80a:	f7f9 fc39 	bl	8004080 <HAL_GetTick>
 800a80e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a810:	e00a      	b.n	800a828 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a812:	f7f9 fc35 	bl	8004080 <HAL_GetTick>
 800a816:	4602      	mov	r2, r0
 800a818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a81a:	1ad3      	subs	r3, r2, r3
 800a81c:	2b02      	cmp	r3, #2
 800a81e:	d903      	bls.n	800a828 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a820:	2303      	movs	r3, #3
 800a822:	e2af      	b.n	800ad84 <HAL_RCC_OscConfig+0x7a4>
 800a824:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a828:	4b96      	ldr	r3, [pc, #600]	; (800aa84 <HAL_RCC_OscConfig+0x4a4>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f003 0304 	and.w	r3, r3, #4
 800a830:	2b00      	cmp	r3, #0
 800a832:	d1ee      	bne.n	800a812 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f003 0310 	and.w	r3, r3, #16
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d06a      	beq.n	800a916 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a840:	4b90      	ldr	r3, [pc, #576]	; (800aa84 <HAL_RCC_OscConfig+0x4a4>)
 800a842:	691b      	ldr	r3, [r3, #16]
 800a844:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a848:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a84a:	4b8e      	ldr	r3, [pc, #568]	; (800aa84 <HAL_RCC_OscConfig+0x4a4>)
 800a84c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a84e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a850:	69bb      	ldr	r3, [r7, #24]
 800a852:	2b08      	cmp	r3, #8
 800a854:	d007      	beq.n	800a866 <HAL_RCC_OscConfig+0x286>
 800a856:	69bb      	ldr	r3, [r7, #24]
 800a858:	2b18      	cmp	r3, #24
 800a85a:	d11b      	bne.n	800a894 <HAL_RCC_OscConfig+0x2b4>
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	f003 0303 	and.w	r3, r3, #3
 800a862:	2b01      	cmp	r3, #1
 800a864:	d116      	bne.n	800a894 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a866:	4b87      	ldr	r3, [pc, #540]	; (800aa84 <HAL_RCC_OscConfig+0x4a4>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d005      	beq.n	800a87e <HAL_RCC_OscConfig+0x29e>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	69db      	ldr	r3, [r3, #28]
 800a876:	2b80      	cmp	r3, #128	; 0x80
 800a878:	d001      	beq.n	800a87e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800a87a:	2301      	movs	r3, #1
 800a87c:	e282      	b.n	800ad84 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a87e:	4b81      	ldr	r3, [pc, #516]	; (800aa84 <HAL_RCC_OscConfig+0x4a4>)
 800a880:	68db      	ldr	r3, [r3, #12]
 800a882:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6a1b      	ldr	r3, [r3, #32]
 800a88a:	061b      	lsls	r3, r3, #24
 800a88c:	497d      	ldr	r1, [pc, #500]	; (800aa84 <HAL_RCC_OscConfig+0x4a4>)
 800a88e:	4313      	orrs	r3, r2
 800a890:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a892:	e040      	b.n	800a916 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	69db      	ldr	r3, [r3, #28]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d023      	beq.n	800a8e4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a89c:	4b79      	ldr	r3, [pc, #484]	; (800aa84 <HAL_RCC_OscConfig+0x4a4>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a78      	ldr	r2, [pc, #480]	; (800aa84 <HAL_RCC_OscConfig+0x4a4>)
 800a8a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8a8:	f7f9 fbea 	bl	8004080 <HAL_GetTick>
 800a8ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a8ae:	e008      	b.n	800a8c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a8b0:	f7f9 fbe6 	bl	8004080 <HAL_GetTick>
 800a8b4:	4602      	mov	r2, r0
 800a8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b8:	1ad3      	subs	r3, r2, r3
 800a8ba:	2b02      	cmp	r3, #2
 800a8bc:	d901      	bls.n	800a8c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a8be:	2303      	movs	r3, #3
 800a8c0:	e260      	b.n	800ad84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a8c2:	4b70      	ldr	r3, [pc, #448]	; (800aa84 <HAL_RCC_OscConfig+0x4a4>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d0f0      	beq.n	800a8b0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a8ce:	4b6d      	ldr	r3, [pc, #436]	; (800aa84 <HAL_RCC_OscConfig+0x4a4>)
 800a8d0:	68db      	ldr	r3, [r3, #12]
 800a8d2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a1b      	ldr	r3, [r3, #32]
 800a8da:	061b      	lsls	r3, r3, #24
 800a8dc:	4969      	ldr	r1, [pc, #420]	; (800aa84 <HAL_RCC_OscConfig+0x4a4>)
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	60cb      	str	r3, [r1, #12]
 800a8e2:	e018      	b.n	800a916 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a8e4:	4b67      	ldr	r3, [pc, #412]	; (800aa84 <HAL_RCC_OscConfig+0x4a4>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4a66      	ldr	r2, [pc, #408]	; (800aa84 <HAL_RCC_OscConfig+0x4a4>)
 800a8ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a8ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8f0:	f7f9 fbc6 	bl	8004080 <HAL_GetTick>
 800a8f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a8f6:	e008      	b.n	800a90a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a8f8:	f7f9 fbc2 	bl	8004080 <HAL_GetTick>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a900:	1ad3      	subs	r3, r2, r3
 800a902:	2b02      	cmp	r3, #2
 800a904:	d901      	bls.n	800a90a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800a906:	2303      	movs	r3, #3
 800a908:	e23c      	b.n	800ad84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a90a:	4b5e      	ldr	r3, [pc, #376]	; (800aa84 <HAL_RCC_OscConfig+0x4a4>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a912:	2b00      	cmp	r3, #0
 800a914:	d1f0      	bne.n	800a8f8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f003 0308 	and.w	r3, r3, #8
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d036      	beq.n	800a990 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	695b      	ldr	r3, [r3, #20]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d019      	beq.n	800a95e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a92a:	4b56      	ldr	r3, [pc, #344]	; (800aa84 <HAL_RCC_OscConfig+0x4a4>)
 800a92c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a92e:	4a55      	ldr	r2, [pc, #340]	; (800aa84 <HAL_RCC_OscConfig+0x4a4>)
 800a930:	f043 0301 	orr.w	r3, r3, #1
 800a934:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a936:	f7f9 fba3 	bl	8004080 <HAL_GetTick>
 800a93a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a93c:	e008      	b.n	800a950 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a93e:	f7f9 fb9f 	bl	8004080 <HAL_GetTick>
 800a942:	4602      	mov	r2, r0
 800a944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a946:	1ad3      	subs	r3, r2, r3
 800a948:	2b02      	cmp	r3, #2
 800a94a:	d901      	bls.n	800a950 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800a94c:	2303      	movs	r3, #3
 800a94e:	e219      	b.n	800ad84 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a950:	4b4c      	ldr	r3, [pc, #304]	; (800aa84 <HAL_RCC_OscConfig+0x4a4>)
 800a952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a954:	f003 0302 	and.w	r3, r3, #2
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d0f0      	beq.n	800a93e <HAL_RCC_OscConfig+0x35e>
 800a95c:	e018      	b.n	800a990 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a95e:	4b49      	ldr	r3, [pc, #292]	; (800aa84 <HAL_RCC_OscConfig+0x4a4>)
 800a960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a962:	4a48      	ldr	r2, [pc, #288]	; (800aa84 <HAL_RCC_OscConfig+0x4a4>)
 800a964:	f023 0301 	bic.w	r3, r3, #1
 800a968:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a96a:	f7f9 fb89 	bl	8004080 <HAL_GetTick>
 800a96e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a970:	e008      	b.n	800a984 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a972:	f7f9 fb85 	bl	8004080 <HAL_GetTick>
 800a976:	4602      	mov	r2, r0
 800a978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a97a:	1ad3      	subs	r3, r2, r3
 800a97c:	2b02      	cmp	r3, #2
 800a97e:	d901      	bls.n	800a984 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800a980:	2303      	movs	r3, #3
 800a982:	e1ff      	b.n	800ad84 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a984:	4b3f      	ldr	r3, [pc, #252]	; (800aa84 <HAL_RCC_OscConfig+0x4a4>)
 800a986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a988:	f003 0302 	and.w	r3, r3, #2
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d1f0      	bne.n	800a972 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f003 0320 	and.w	r3, r3, #32
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d036      	beq.n	800aa0a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	699b      	ldr	r3, [r3, #24]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d019      	beq.n	800a9d8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a9a4:	4b37      	ldr	r3, [pc, #220]	; (800aa84 <HAL_RCC_OscConfig+0x4a4>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	4a36      	ldr	r2, [pc, #216]	; (800aa84 <HAL_RCC_OscConfig+0x4a4>)
 800a9aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a9ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a9b0:	f7f9 fb66 	bl	8004080 <HAL_GetTick>
 800a9b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a9b6:	e008      	b.n	800a9ca <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a9b8:	f7f9 fb62 	bl	8004080 <HAL_GetTick>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c0:	1ad3      	subs	r3, r2, r3
 800a9c2:	2b02      	cmp	r3, #2
 800a9c4:	d901      	bls.n	800a9ca <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800a9c6:	2303      	movs	r3, #3
 800a9c8:	e1dc      	b.n	800ad84 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a9ca:	4b2e      	ldr	r3, [pc, #184]	; (800aa84 <HAL_RCC_OscConfig+0x4a4>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d0f0      	beq.n	800a9b8 <HAL_RCC_OscConfig+0x3d8>
 800a9d6:	e018      	b.n	800aa0a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a9d8:	4b2a      	ldr	r3, [pc, #168]	; (800aa84 <HAL_RCC_OscConfig+0x4a4>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	4a29      	ldr	r2, [pc, #164]	; (800aa84 <HAL_RCC_OscConfig+0x4a4>)
 800a9de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a9e4:	f7f9 fb4c 	bl	8004080 <HAL_GetTick>
 800a9e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a9ea:	e008      	b.n	800a9fe <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a9ec:	f7f9 fb48 	bl	8004080 <HAL_GetTick>
 800a9f0:	4602      	mov	r2, r0
 800a9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f4:	1ad3      	subs	r3, r2, r3
 800a9f6:	2b02      	cmp	r3, #2
 800a9f8:	d901      	bls.n	800a9fe <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800a9fa:	2303      	movs	r3, #3
 800a9fc:	e1c2      	b.n	800ad84 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a9fe:	4b21      	ldr	r3, [pc, #132]	; (800aa84 <HAL_RCC_OscConfig+0x4a4>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d1f0      	bne.n	800a9ec <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f003 0304 	and.w	r3, r3, #4
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	f000 8086 	beq.w	800ab24 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800aa18:	4b1b      	ldr	r3, [pc, #108]	; (800aa88 <HAL_RCC_OscConfig+0x4a8>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a1a      	ldr	r2, [pc, #104]	; (800aa88 <HAL_RCC_OscConfig+0x4a8>)
 800aa1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aa24:	f7f9 fb2c 	bl	8004080 <HAL_GetTick>
 800aa28:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aa2a:	e008      	b.n	800aa3e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa2c:	f7f9 fb28 	bl	8004080 <HAL_GetTick>
 800aa30:	4602      	mov	r2, r0
 800aa32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa34:	1ad3      	subs	r3, r2, r3
 800aa36:	2b64      	cmp	r3, #100	; 0x64
 800aa38:	d901      	bls.n	800aa3e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800aa3a:	2303      	movs	r3, #3
 800aa3c:	e1a2      	b.n	800ad84 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aa3e:	4b12      	ldr	r3, [pc, #72]	; (800aa88 <HAL_RCC_OscConfig+0x4a8>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d0f0      	beq.n	800aa2c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	689b      	ldr	r3, [r3, #8]
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d106      	bne.n	800aa60 <HAL_RCC_OscConfig+0x480>
 800aa52:	4b0c      	ldr	r3, [pc, #48]	; (800aa84 <HAL_RCC_OscConfig+0x4a4>)
 800aa54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa56:	4a0b      	ldr	r2, [pc, #44]	; (800aa84 <HAL_RCC_OscConfig+0x4a4>)
 800aa58:	f043 0301 	orr.w	r3, r3, #1
 800aa5c:	6713      	str	r3, [r2, #112]	; 0x70
 800aa5e:	e032      	b.n	800aac6 <HAL_RCC_OscConfig+0x4e6>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	689b      	ldr	r3, [r3, #8]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d111      	bne.n	800aa8c <HAL_RCC_OscConfig+0x4ac>
 800aa68:	4b06      	ldr	r3, [pc, #24]	; (800aa84 <HAL_RCC_OscConfig+0x4a4>)
 800aa6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa6c:	4a05      	ldr	r2, [pc, #20]	; (800aa84 <HAL_RCC_OscConfig+0x4a4>)
 800aa6e:	f023 0301 	bic.w	r3, r3, #1
 800aa72:	6713      	str	r3, [r2, #112]	; 0x70
 800aa74:	4b03      	ldr	r3, [pc, #12]	; (800aa84 <HAL_RCC_OscConfig+0x4a4>)
 800aa76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa78:	4a02      	ldr	r2, [pc, #8]	; (800aa84 <HAL_RCC_OscConfig+0x4a4>)
 800aa7a:	f023 0304 	bic.w	r3, r3, #4
 800aa7e:	6713      	str	r3, [r2, #112]	; 0x70
 800aa80:	e021      	b.n	800aac6 <HAL_RCC_OscConfig+0x4e6>
 800aa82:	bf00      	nop
 800aa84:	58024400 	.word	0x58024400
 800aa88:	58024800 	.word	0x58024800
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	689b      	ldr	r3, [r3, #8]
 800aa90:	2b05      	cmp	r3, #5
 800aa92:	d10c      	bne.n	800aaae <HAL_RCC_OscConfig+0x4ce>
 800aa94:	4b83      	ldr	r3, [pc, #524]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800aa96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa98:	4a82      	ldr	r2, [pc, #520]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800aa9a:	f043 0304 	orr.w	r3, r3, #4
 800aa9e:	6713      	str	r3, [r2, #112]	; 0x70
 800aaa0:	4b80      	ldr	r3, [pc, #512]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800aaa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaa4:	4a7f      	ldr	r2, [pc, #508]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800aaa6:	f043 0301 	orr.w	r3, r3, #1
 800aaaa:	6713      	str	r3, [r2, #112]	; 0x70
 800aaac:	e00b      	b.n	800aac6 <HAL_RCC_OscConfig+0x4e6>
 800aaae:	4b7d      	ldr	r3, [pc, #500]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800aab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aab2:	4a7c      	ldr	r2, [pc, #496]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800aab4:	f023 0301 	bic.w	r3, r3, #1
 800aab8:	6713      	str	r3, [r2, #112]	; 0x70
 800aaba:	4b7a      	ldr	r3, [pc, #488]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800aabc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aabe:	4a79      	ldr	r2, [pc, #484]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800aac0:	f023 0304 	bic.w	r3, r3, #4
 800aac4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	689b      	ldr	r3, [r3, #8]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d015      	beq.n	800aafa <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aace:	f7f9 fad7 	bl	8004080 <HAL_GetTick>
 800aad2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aad4:	e00a      	b.n	800aaec <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aad6:	f7f9 fad3 	bl	8004080 <HAL_GetTick>
 800aada:	4602      	mov	r2, r0
 800aadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aade:	1ad3      	subs	r3, r2, r3
 800aae0:	f241 3288 	movw	r2, #5000	; 0x1388
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d901      	bls.n	800aaec <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800aae8:	2303      	movs	r3, #3
 800aaea:	e14b      	b.n	800ad84 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aaec:	4b6d      	ldr	r3, [pc, #436]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800aaee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaf0:	f003 0302 	and.w	r3, r3, #2
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d0ee      	beq.n	800aad6 <HAL_RCC_OscConfig+0x4f6>
 800aaf8:	e014      	b.n	800ab24 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aafa:	f7f9 fac1 	bl	8004080 <HAL_GetTick>
 800aafe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ab00:	e00a      	b.n	800ab18 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab02:	f7f9 fabd 	bl	8004080 <HAL_GetTick>
 800ab06:	4602      	mov	r2, r0
 800ab08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0a:	1ad3      	subs	r3, r2, r3
 800ab0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d901      	bls.n	800ab18 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800ab14:	2303      	movs	r3, #3
 800ab16:	e135      	b.n	800ad84 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ab18:	4b62      	ldr	r3, [pc, #392]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800ab1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab1c:	f003 0302 	and.w	r3, r3, #2
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d1ee      	bne.n	800ab02 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	f000 812a 	beq.w	800ad82 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ab2e:	4b5d      	ldr	r3, [pc, #372]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800ab30:	691b      	ldr	r3, [r3, #16]
 800ab32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab36:	2b18      	cmp	r3, #24
 800ab38:	f000 80ba 	beq.w	800acb0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab40:	2b02      	cmp	r3, #2
 800ab42:	f040 8095 	bne.w	800ac70 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab46:	4b57      	ldr	r3, [pc, #348]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4a56      	ldr	r2, [pc, #344]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800ab4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ab50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab52:	f7f9 fa95 	bl	8004080 <HAL_GetTick>
 800ab56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ab58:	e008      	b.n	800ab6c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab5a:	f7f9 fa91 	bl	8004080 <HAL_GetTick>
 800ab5e:	4602      	mov	r2, r0
 800ab60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab62:	1ad3      	subs	r3, r2, r3
 800ab64:	2b02      	cmp	r3, #2
 800ab66:	d901      	bls.n	800ab6c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800ab68:	2303      	movs	r3, #3
 800ab6a:	e10b      	b.n	800ad84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ab6c:	4b4d      	ldr	r3, [pc, #308]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d1f0      	bne.n	800ab5a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ab78:	4b4a      	ldr	r3, [pc, #296]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800ab7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ab7c:	4b4a      	ldr	r3, [pc, #296]	; (800aca8 <HAL_RCC_OscConfig+0x6c8>)
 800ab7e:	4013      	ands	r3, r2
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ab88:	0112      	lsls	r2, r2, #4
 800ab8a:	430a      	orrs	r2, r1
 800ab8c:	4945      	ldr	r1, [pc, #276]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	628b      	str	r3, [r1, #40]	; 0x28
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab96:	3b01      	subs	r3, #1
 800ab98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aba0:	3b01      	subs	r3, #1
 800aba2:	025b      	lsls	r3, r3, #9
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	431a      	orrs	r2, r3
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abac:	3b01      	subs	r3, #1
 800abae:	041b      	lsls	r3, r3, #16
 800abb0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800abb4:	431a      	orrs	r2, r3
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abba:	3b01      	subs	r3, #1
 800abbc:	061b      	lsls	r3, r3, #24
 800abbe:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800abc2:	4938      	ldr	r1, [pc, #224]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800abc4:	4313      	orrs	r3, r2
 800abc6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800abc8:	4b36      	ldr	r3, [pc, #216]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800abca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abcc:	4a35      	ldr	r2, [pc, #212]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800abce:	f023 0301 	bic.w	r3, r3, #1
 800abd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800abd4:	4b33      	ldr	r3, [pc, #204]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800abd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abd8:	4b34      	ldr	r3, [pc, #208]	; (800acac <HAL_RCC_OscConfig+0x6cc>)
 800abda:	4013      	ands	r3, r2
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800abe0:	00d2      	lsls	r2, r2, #3
 800abe2:	4930      	ldr	r1, [pc, #192]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800abe4:	4313      	orrs	r3, r2
 800abe6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800abe8:	4b2e      	ldr	r3, [pc, #184]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800abea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abec:	f023 020c 	bic.w	r2, r3, #12
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abf4:	492b      	ldr	r1, [pc, #172]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800abf6:	4313      	orrs	r3, r2
 800abf8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800abfa:	4b2a      	ldr	r3, [pc, #168]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800abfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abfe:	f023 0202 	bic.w	r2, r3, #2
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac06:	4927      	ldr	r1, [pc, #156]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ac0c:	4b25      	ldr	r3, [pc, #148]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800ac0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac10:	4a24      	ldr	r2, [pc, #144]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800ac12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac18:	4b22      	ldr	r3, [pc, #136]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800ac1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac1c:	4a21      	ldr	r2, [pc, #132]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800ac1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ac24:	4b1f      	ldr	r3, [pc, #124]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800ac26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac28:	4a1e      	ldr	r2, [pc, #120]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800ac2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ac2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800ac30:	4b1c      	ldr	r3, [pc, #112]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800ac32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac34:	4a1b      	ldr	r2, [pc, #108]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800ac36:	f043 0301 	orr.w	r3, r3, #1
 800ac3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ac3c:	4b19      	ldr	r3, [pc, #100]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4a18      	ldr	r2, [pc, #96]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800ac42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ac46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac48:	f7f9 fa1a 	bl	8004080 <HAL_GetTick>
 800ac4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ac4e:	e008      	b.n	800ac62 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac50:	f7f9 fa16 	bl	8004080 <HAL_GetTick>
 800ac54:	4602      	mov	r2, r0
 800ac56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac58:	1ad3      	subs	r3, r2, r3
 800ac5a:	2b02      	cmp	r3, #2
 800ac5c:	d901      	bls.n	800ac62 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800ac5e:	2303      	movs	r3, #3
 800ac60:	e090      	b.n	800ad84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ac62:	4b10      	ldr	r3, [pc, #64]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d0f0      	beq.n	800ac50 <HAL_RCC_OscConfig+0x670>
 800ac6e:	e088      	b.n	800ad82 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac70:	4b0c      	ldr	r3, [pc, #48]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4a0b      	ldr	r2, [pc, #44]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800ac76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ac7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac7c:	f7f9 fa00 	bl	8004080 <HAL_GetTick>
 800ac80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ac82:	e008      	b.n	800ac96 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac84:	f7f9 f9fc 	bl	8004080 <HAL_GetTick>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8c:	1ad3      	subs	r3, r2, r3
 800ac8e:	2b02      	cmp	r3, #2
 800ac90:	d901      	bls.n	800ac96 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800ac92:	2303      	movs	r3, #3
 800ac94:	e076      	b.n	800ad84 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ac96:	4b03      	ldr	r3, [pc, #12]	; (800aca4 <HAL_RCC_OscConfig+0x6c4>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d1f0      	bne.n	800ac84 <HAL_RCC_OscConfig+0x6a4>
 800aca2:	e06e      	b.n	800ad82 <HAL_RCC_OscConfig+0x7a2>
 800aca4:	58024400 	.word	0x58024400
 800aca8:	fffffc0c 	.word	0xfffffc0c
 800acac:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800acb0:	4b36      	ldr	r3, [pc, #216]	; (800ad8c <HAL_RCC_OscConfig+0x7ac>)
 800acb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acb4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800acb6:	4b35      	ldr	r3, [pc, #212]	; (800ad8c <HAL_RCC_OscConfig+0x7ac>)
 800acb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	d031      	beq.n	800ad28 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	f003 0203 	and.w	r2, r3, #3
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800acce:	429a      	cmp	r2, r3
 800acd0:	d12a      	bne.n	800ad28 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	091b      	lsrs	r3, r3, #4
 800acd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800acde:	429a      	cmp	r2, r3
 800ace0:	d122      	bne.n	800ad28 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800acee:	429a      	cmp	r2, r3
 800acf0:	d11a      	bne.n	800ad28 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	0a5b      	lsrs	r3, r3, #9
 800acf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acfe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d111      	bne.n	800ad28 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	0c1b      	lsrs	r3, r3, #16
 800ad08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad10:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d108      	bne.n	800ad28 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	0e1b      	lsrs	r3, r3, #24
 800ad1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad22:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d001      	beq.n	800ad2c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800ad28:	2301      	movs	r3, #1
 800ad2a:	e02b      	b.n	800ad84 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ad2c:	4b17      	ldr	r3, [pc, #92]	; (800ad8c <HAL_RCC_OscConfig+0x7ac>)
 800ad2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad30:	08db      	lsrs	r3, r3, #3
 800ad32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad36:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad3c:	693a      	ldr	r2, [r7, #16]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d01f      	beq.n	800ad82 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800ad42:	4b12      	ldr	r3, [pc, #72]	; (800ad8c <HAL_RCC_OscConfig+0x7ac>)
 800ad44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad46:	4a11      	ldr	r2, [pc, #68]	; (800ad8c <HAL_RCC_OscConfig+0x7ac>)
 800ad48:	f023 0301 	bic.w	r3, r3, #1
 800ad4c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ad4e:	f7f9 f997 	bl	8004080 <HAL_GetTick>
 800ad52:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ad54:	bf00      	nop
 800ad56:	f7f9 f993 	bl	8004080 <HAL_GetTick>
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d0f9      	beq.n	800ad56 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ad62:	4b0a      	ldr	r3, [pc, #40]	; (800ad8c <HAL_RCC_OscConfig+0x7ac>)
 800ad64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad66:	4b0a      	ldr	r3, [pc, #40]	; (800ad90 <HAL_RCC_OscConfig+0x7b0>)
 800ad68:	4013      	ands	r3, r2
 800ad6a:	687a      	ldr	r2, [r7, #4]
 800ad6c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ad6e:	00d2      	lsls	r2, r2, #3
 800ad70:	4906      	ldr	r1, [pc, #24]	; (800ad8c <HAL_RCC_OscConfig+0x7ac>)
 800ad72:	4313      	orrs	r3, r2
 800ad74:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800ad76:	4b05      	ldr	r3, [pc, #20]	; (800ad8c <HAL_RCC_OscConfig+0x7ac>)
 800ad78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad7a:	4a04      	ldr	r2, [pc, #16]	; (800ad8c <HAL_RCC_OscConfig+0x7ac>)
 800ad7c:	f043 0301 	orr.w	r3, r3, #1
 800ad80:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800ad82:	2300      	movs	r3, #0
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3730      	adds	r7, #48	; 0x30
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}
 800ad8c:	58024400 	.word	0x58024400
 800ad90:	ffff0007 	.word	0xffff0007

0800ad94 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b086      	sub	sp, #24
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d101      	bne.n	800ada8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ada4:	2301      	movs	r3, #1
 800ada6:	e19c      	b.n	800b0e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ada8:	4b8a      	ldr	r3, [pc, #552]	; (800afd4 <HAL_RCC_ClockConfig+0x240>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f003 030f 	and.w	r3, r3, #15
 800adb0:	683a      	ldr	r2, [r7, #0]
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d910      	bls.n	800add8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800adb6:	4b87      	ldr	r3, [pc, #540]	; (800afd4 <HAL_RCC_ClockConfig+0x240>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f023 020f 	bic.w	r2, r3, #15
 800adbe:	4985      	ldr	r1, [pc, #532]	; (800afd4 <HAL_RCC_ClockConfig+0x240>)
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	4313      	orrs	r3, r2
 800adc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800adc6:	4b83      	ldr	r3, [pc, #524]	; (800afd4 <HAL_RCC_ClockConfig+0x240>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f003 030f 	and.w	r3, r3, #15
 800adce:	683a      	ldr	r2, [r7, #0]
 800add0:	429a      	cmp	r2, r3
 800add2:	d001      	beq.n	800add8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800add4:	2301      	movs	r3, #1
 800add6:	e184      	b.n	800b0e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f003 0304 	and.w	r3, r3, #4
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d010      	beq.n	800ae06 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	691a      	ldr	r2, [r3, #16]
 800ade8:	4b7b      	ldr	r3, [pc, #492]	; (800afd8 <HAL_RCC_ClockConfig+0x244>)
 800adea:	699b      	ldr	r3, [r3, #24]
 800adec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d908      	bls.n	800ae06 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800adf4:	4b78      	ldr	r3, [pc, #480]	; (800afd8 <HAL_RCC_ClockConfig+0x244>)
 800adf6:	699b      	ldr	r3, [r3, #24]
 800adf8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	691b      	ldr	r3, [r3, #16]
 800ae00:	4975      	ldr	r1, [pc, #468]	; (800afd8 <HAL_RCC_ClockConfig+0x244>)
 800ae02:	4313      	orrs	r3, r2
 800ae04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f003 0308 	and.w	r3, r3, #8
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d010      	beq.n	800ae34 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	695a      	ldr	r2, [r3, #20]
 800ae16:	4b70      	ldr	r3, [pc, #448]	; (800afd8 <HAL_RCC_ClockConfig+0x244>)
 800ae18:	69db      	ldr	r3, [r3, #28]
 800ae1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d908      	bls.n	800ae34 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ae22:	4b6d      	ldr	r3, [pc, #436]	; (800afd8 <HAL_RCC_ClockConfig+0x244>)
 800ae24:	69db      	ldr	r3, [r3, #28]
 800ae26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	695b      	ldr	r3, [r3, #20]
 800ae2e:	496a      	ldr	r1, [pc, #424]	; (800afd8 <HAL_RCC_ClockConfig+0x244>)
 800ae30:	4313      	orrs	r3, r2
 800ae32:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f003 0310 	and.w	r3, r3, #16
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d010      	beq.n	800ae62 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	699a      	ldr	r2, [r3, #24]
 800ae44:	4b64      	ldr	r3, [pc, #400]	; (800afd8 <HAL_RCC_ClockConfig+0x244>)
 800ae46:	69db      	ldr	r3, [r3, #28]
 800ae48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d908      	bls.n	800ae62 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ae50:	4b61      	ldr	r3, [pc, #388]	; (800afd8 <HAL_RCC_ClockConfig+0x244>)
 800ae52:	69db      	ldr	r3, [r3, #28]
 800ae54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	699b      	ldr	r3, [r3, #24]
 800ae5c:	495e      	ldr	r1, [pc, #376]	; (800afd8 <HAL_RCC_ClockConfig+0x244>)
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f003 0320 	and.w	r3, r3, #32
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d010      	beq.n	800ae90 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	69da      	ldr	r2, [r3, #28]
 800ae72:	4b59      	ldr	r3, [pc, #356]	; (800afd8 <HAL_RCC_ClockConfig+0x244>)
 800ae74:	6a1b      	ldr	r3, [r3, #32]
 800ae76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d908      	bls.n	800ae90 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ae7e:	4b56      	ldr	r3, [pc, #344]	; (800afd8 <HAL_RCC_ClockConfig+0x244>)
 800ae80:	6a1b      	ldr	r3, [r3, #32]
 800ae82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	69db      	ldr	r3, [r3, #28]
 800ae8a:	4953      	ldr	r1, [pc, #332]	; (800afd8 <HAL_RCC_ClockConfig+0x244>)
 800ae8c:	4313      	orrs	r3, r2
 800ae8e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f003 0302 	and.w	r3, r3, #2
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d010      	beq.n	800aebe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	68da      	ldr	r2, [r3, #12]
 800aea0:	4b4d      	ldr	r3, [pc, #308]	; (800afd8 <HAL_RCC_ClockConfig+0x244>)
 800aea2:	699b      	ldr	r3, [r3, #24]
 800aea4:	f003 030f 	and.w	r3, r3, #15
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d908      	bls.n	800aebe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aeac:	4b4a      	ldr	r3, [pc, #296]	; (800afd8 <HAL_RCC_ClockConfig+0x244>)
 800aeae:	699b      	ldr	r3, [r3, #24]
 800aeb0:	f023 020f 	bic.w	r2, r3, #15
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	68db      	ldr	r3, [r3, #12]
 800aeb8:	4947      	ldr	r1, [pc, #284]	; (800afd8 <HAL_RCC_ClockConfig+0x244>)
 800aeba:	4313      	orrs	r3, r2
 800aebc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f003 0301 	and.w	r3, r3, #1
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d055      	beq.n	800af76 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800aeca:	4b43      	ldr	r3, [pc, #268]	; (800afd8 <HAL_RCC_ClockConfig+0x244>)
 800aecc:	699b      	ldr	r3, [r3, #24]
 800aece:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	689b      	ldr	r3, [r3, #8]
 800aed6:	4940      	ldr	r1, [pc, #256]	; (800afd8 <HAL_RCC_ClockConfig+0x244>)
 800aed8:	4313      	orrs	r3, r2
 800aeda:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	2b02      	cmp	r3, #2
 800aee2:	d107      	bne.n	800aef4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aee4:	4b3c      	ldr	r3, [pc, #240]	; (800afd8 <HAL_RCC_ClockConfig+0x244>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d121      	bne.n	800af34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aef0:	2301      	movs	r3, #1
 800aef2:	e0f6      	b.n	800b0e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	2b03      	cmp	r3, #3
 800aefa:	d107      	bne.n	800af0c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aefc:	4b36      	ldr	r3, [pc, #216]	; (800afd8 <HAL_RCC_ClockConfig+0x244>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af04:	2b00      	cmp	r3, #0
 800af06:	d115      	bne.n	800af34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800af08:	2301      	movs	r3, #1
 800af0a:	e0ea      	b.n	800b0e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	2b01      	cmp	r3, #1
 800af12:	d107      	bne.n	800af24 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800af14:	4b30      	ldr	r3, [pc, #192]	; (800afd8 <HAL_RCC_ClockConfig+0x244>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d109      	bne.n	800af34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800af20:	2301      	movs	r3, #1
 800af22:	e0de      	b.n	800b0e2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800af24:	4b2c      	ldr	r3, [pc, #176]	; (800afd8 <HAL_RCC_ClockConfig+0x244>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f003 0304 	and.w	r3, r3, #4
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d101      	bne.n	800af34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800af30:	2301      	movs	r3, #1
 800af32:	e0d6      	b.n	800b0e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800af34:	4b28      	ldr	r3, [pc, #160]	; (800afd8 <HAL_RCC_ClockConfig+0x244>)
 800af36:	691b      	ldr	r3, [r3, #16]
 800af38:	f023 0207 	bic.w	r2, r3, #7
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	4925      	ldr	r1, [pc, #148]	; (800afd8 <HAL_RCC_ClockConfig+0x244>)
 800af42:	4313      	orrs	r3, r2
 800af44:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af46:	f7f9 f89b 	bl	8004080 <HAL_GetTick>
 800af4a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af4c:	e00a      	b.n	800af64 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800af4e:	f7f9 f897 	bl	8004080 <HAL_GetTick>
 800af52:	4602      	mov	r2, r0
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	1ad3      	subs	r3, r2, r3
 800af58:	f241 3288 	movw	r2, #5000	; 0x1388
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d901      	bls.n	800af64 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800af60:	2303      	movs	r3, #3
 800af62:	e0be      	b.n	800b0e2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af64:	4b1c      	ldr	r3, [pc, #112]	; (800afd8 <HAL_RCC_ClockConfig+0x244>)
 800af66:	691b      	ldr	r3, [r3, #16]
 800af68:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	00db      	lsls	r3, r3, #3
 800af72:	429a      	cmp	r2, r3
 800af74:	d1eb      	bne.n	800af4e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f003 0302 	and.w	r3, r3, #2
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d010      	beq.n	800afa4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	68da      	ldr	r2, [r3, #12]
 800af86:	4b14      	ldr	r3, [pc, #80]	; (800afd8 <HAL_RCC_ClockConfig+0x244>)
 800af88:	699b      	ldr	r3, [r3, #24]
 800af8a:	f003 030f 	and.w	r3, r3, #15
 800af8e:	429a      	cmp	r2, r3
 800af90:	d208      	bcs.n	800afa4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800af92:	4b11      	ldr	r3, [pc, #68]	; (800afd8 <HAL_RCC_ClockConfig+0x244>)
 800af94:	699b      	ldr	r3, [r3, #24]
 800af96:	f023 020f 	bic.w	r2, r3, #15
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	68db      	ldr	r3, [r3, #12]
 800af9e:	490e      	ldr	r1, [pc, #56]	; (800afd8 <HAL_RCC_ClockConfig+0x244>)
 800afa0:	4313      	orrs	r3, r2
 800afa2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800afa4:	4b0b      	ldr	r3, [pc, #44]	; (800afd4 <HAL_RCC_ClockConfig+0x240>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f003 030f 	and.w	r3, r3, #15
 800afac:	683a      	ldr	r2, [r7, #0]
 800afae:	429a      	cmp	r2, r3
 800afb0:	d214      	bcs.n	800afdc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800afb2:	4b08      	ldr	r3, [pc, #32]	; (800afd4 <HAL_RCC_ClockConfig+0x240>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f023 020f 	bic.w	r2, r3, #15
 800afba:	4906      	ldr	r1, [pc, #24]	; (800afd4 <HAL_RCC_ClockConfig+0x240>)
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	4313      	orrs	r3, r2
 800afc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800afc2:	4b04      	ldr	r3, [pc, #16]	; (800afd4 <HAL_RCC_ClockConfig+0x240>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f003 030f 	and.w	r3, r3, #15
 800afca:	683a      	ldr	r2, [r7, #0]
 800afcc:	429a      	cmp	r2, r3
 800afce:	d005      	beq.n	800afdc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800afd0:	2301      	movs	r3, #1
 800afd2:	e086      	b.n	800b0e2 <HAL_RCC_ClockConfig+0x34e>
 800afd4:	52002000 	.word	0x52002000
 800afd8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f003 0304 	and.w	r3, r3, #4
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d010      	beq.n	800b00a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	691a      	ldr	r2, [r3, #16]
 800afec:	4b3f      	ldr	r3, [pc, #252]	; (800b0ec <HAL_RCC_ClockConfig+0x358>)
 800afee:	699b      	ldr	r3, [r3, #24]
 800aff0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d208      	bcs.n	800b00a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aff8:	4b3c      	ldr	r3, [pc, #240]	; (800b0ec <HAL_RCC_ClockConfig+0x358>)
 800affa:	699b      	ldr	r3, [r3, #24]
 800affc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	691b      	ldr	r3, [r3, #16]
 800b004:	4939      	ldr	r1, [pc, #228]	; (800b0ec <HAL_RCC_ClockConfig+0x358>)
 800b006:	4313      	orrs	r3, r2
 800b008:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f003 0308 	and.w	r3, r3, #8
 800b012:	2b00      	cmp	r3, #0
 800b014:	d010      	beq.n	800b038 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	695a      	ldr	r2, [r3, #20]
 800b01a:	4b34      	ldr	r3, [pc, #208]	; (800b0ec <HAL_RCC_ClockConfig+0x358>)
 800b01c:	69db      	ldr	r3, [r3, #28]
 800b01e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b022:	429a      	cmp	r2, r3
 800b024:	d208      	bcs.n	800b038 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b026:	4b31      	ldr	r3, [pc, #196]	; (800b0ec <HAL_RCC_ClockConfig+0x358>)
 800b028:	69db      	ldr	r3, [r3, #28]
 800b02a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	695b      	ldr	r3, [r3, #20]
 800b032:	492e      	ldr	r1, [pc, #184]	; (800b0ec <HAL_RCC_ClockConfig+0x358>)
 800b034:	4313      	orrs	r3, r2
 800b036:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f003 0310 	and.w	r3, r3, #16
 800b040:	2b00      	cmp	r3, #0
 800b042:	d010      	beq.n	800b066 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	699a      	ldr	r2, [r3, #24]
 800b048:	4b28      	ldr	r3, [pc, #160]	; (800b0ec <HAL_RCC_ClockConfig+0x358>)
 800b04a:	69db      	ldr	r3, [r3, #28]
 800b04c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b050:	429a      	cmp	r2, r3
 800b052:	d208      	bcs.n	800b066 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b054:	4b25      	ldr	r3, [pc, #148]	; (800b0ec <HAL_RCC_ClockConfig+0x358>)
 800b056:	69db      	ldr	r3, [r3, #28]
 800b058:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	699b      	ldr	r3, [r3, #24]
 800b060:	4922      	ldr	r1, [pc, #136]	; (800b0ec <HAL_RCC_ClockConfig+0x358>)
 800b062:	4313      	orrs	r3, r2
 800b064:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f003 0320 	and.w	r3, r3, #32
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d010      	beq.n	800b094 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	69da      	ldr	r2, [r3, #28]
 800b076:	4b1d      	ldr	r3, [pc, #116]	; (800b0ec <HAL_RCC_ClockConfig+0x358>)
 800b078:	6a1b      	ldr	r3, [r3, #32]
 800b07a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b07e:	429a      	cmp	r2, r3
 800b080:	d208      	bcs.n	800b094 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b082:	4b1a      	ldr	r3, [pc, #104]	; (800b0ec <HAL_RCC_ClockConfig+0x358>)
 800b084:	6a1b      	ldr	r3, [r3, #32]
 800b086:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	69db      	ldr	r3, [r3, #28]
 800b08e:	4917      	ldr	r1, [pc, #92]	; (800b0ec <HAL_RCC_ClockConfig+0x358>)
 800b090:	4313      	orrs	r3, r2
 800b092:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b094:	f000 f834 	bl	800b100 <HAL_RCC_GetSysClockFreq>
 800b098:	4602      	mov	r2, r0
 800b09a:	4b14      	ldr	r3, [pc, #80]	; (800b0ec <HAL_RCC_ClockConfig+0x358>)
 800b09c:	699b      	ldr	r3, [r3, #24]
 800b09e:	0a1b      	lsrs	r3, r3, #8
 800b0a0:	f003 030f 	and.w	r3, r3, #15
 800b0a4:	4912      	ldr	r1, [pc, #72]	; (800b0f0 <HAL_RCC_ClockConfig+0x35c>)
 800b0a6:	5ccb      	ldrb	r3, [r1, r3]
 800b0a8:	f003 031f 	and.w	r3, r3, #31
 800b0ac:	fa22 f303 	lsr.w	r3, r2, r3
 800b0b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b0b2:	4b0e      	ldr	r3, [pc, #56]	; (800b0ec <HAL_RCC_ClockConfig+0x358>)
 800b0b4:	699b      	ldr	r3, [r3, #24]
 800b0b6:	f003 030f 	and.w	r3, r3, #15
 800b0ba:	4a0d      	ldr	r2, [pc, #52]	; (800b0f0 <HAL_RCC_ClockConfig+0x35c>)
 800b0bc:	5cd3      	ldrb	r3, [r2, r3]
 800b0be:	f003 031f 	and.w	r3, r3, #31
 800b0c2:	693a      	ldr	r2, [r7, #16]
 800b0c4:	fa22 f303 	lsr.w	r3, r2, r3
 800b0c8:	4a0a      	ldr	r2, [pc, #40]	; (800b0f4 <HAL_RCC_ClockConfig+0x360>)
 800b0ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b0cc:	4a0a      	ldr	r2, [pc, #40]	; (800b0f8 <HAL_RCC_ClockConfig+0x364>)
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b0d2:	4b0a      	ldr	r3, [pc, #40]	; (800b0fc <HAL_RCC_ClockConfig+0x368>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f7f8 ff88 	bl	8003fec <HAL_InitTick>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b0e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3718      	adds	r7, #24
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
 800b0ea:	bf00      	nop
 800b0ec:	58024400 	.word	0x58024400
 800b0f0:	08011d98 	.word	0x08011d98
 800b0f4:	2400003c 	.word	0x2400003c
 800b0f8:	24000038 	.word	0x24000038
 800b0fc:	24000040 	.word	0x24000040

0800b100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b100:	b480      	push	{r7}
 800b102:	b089      	sub	sp, #36	; 0x24
 800b104:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b106:	4bb3      	ldr	r3, [pc, #716]	; (800b3d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b108:	691b      	ldr	r3, [r3, #16]
 800b10a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b10e:	2b18      	cmp	r3, #24
 800b110:	f200 8155 	bhi.w	800b3be <HAL_RCC_GetSysClockFreq+0x2be>
 800b114:	a201      	add	r2, pc, #4	; (adr r2, 800b11c <HAL_RCC_GetSysClockFreq+0x1c>)
 800b116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b11a:	bf00      	nop
 800b11c:	0800b181 	.word	0x0800b181
 800b120:	0800b3bf 	.word	0x0800b3bf
 800b124:	0800b3bf 	.word	0x0800b3bf
 800b128:	0800b3bf 	.word	0x0800b3bf
 800b12c:	0800b3bf 	.word	0x0800b3bf
 800b130:	0800b3bf 	.word	0x0800b3bf
 800b134:	0800b3bf 	.word	0x0800b3bf
 800b138:	0800b3bf 	.word	0x0800b3bf
 800b13c:	0800b1a7 	.word	0x0800b1a7
 800b140:	0800b3bf 	.word	0x0800b3bf
 800b144:	0800b3bf 	.word	0x0800b3bf
 800b148:	0800b3bf 	.word	0x0800b3bf
 800b14c:	0800b3bf 	.word	0x0800b3bf
 800b150:	0800b3bf 	.word	0x0800b3bf
 800b154:	0800b3bf 	.word	0x0800b3bf
 800b158:	0800b3bf 	.word	0x0800b3bf
 800b15c:	0800b1ad 	.word	0x0800b1ad
 800b160:	0800b3bf 	.word	0x0800b3bf
 800b164:	0800b3bf 	.word	0x0800b3bf
 800b168:	0800b3bf 	.word	0x0800b3bf
 800b16c:	0800b3bf 	.word	0x0800b3bf
 800b170:	0800b3bf 	.word	0x0800b3bf
 800b174:	0800b3bf 	.word	0x0800b3bf
 800b178:	0800b3bf 	.word	0x0800b3bf
 800b17c:	0800b1b3 	.word	0x0800b1b3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b180:	4b94      	ldr	r3, [pc, #592]	; (800b3d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f003 0320 	and.w	r3, r3, #32
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d009      	beq.n	800b1a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b18c:	4b91      	ldr	r3, [pc, #580]	; (800b3d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	08db      	lsrs	r3, r3, #3
 800b192:	f003 0303 	and.w	r3, r3, #3
 800b196:	4a90      	ldr	r2, [pc, #576]	; (800b3d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b198:	fa22 f303 	lsr.w	r3, r2, r3
 800b19c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b19e:	e111      	b.n	800b3c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b1a0:	4b8d      	ldr	r3, [pc, #564]	; (800b3d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b1a2:	61bb      	str	r3, [r7, #24]
      break;
 800b1a4:	e10e      	b.n	800b3c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b1a6:	4b8d      	ldr	r3, [pc, #564]	; (800b3dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b1a8:	61bb      	str	r3, [r7, #24]
      break;
 800b1aa:	e10b      	b.n	800b3c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b1ac:	4b8c      	ldr	r3, [pc, #560]	; (800b3e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b1ae:	61bb      	str	r3, [r7, #24]
      break;
 800b1b0:	e108      	b.n	800b3c4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b1b2:	4b88      	ldr	r3, [pc, #544]	; (800b3d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1b6:	f003 0303 	and.w	r3, r3, #3
 800b1ba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b1bc:	4b85      	ldr	r3, [pc, #532]	; (800b3d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1c0:	091b      	lsrs	r3, r3, #4
 800b1c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1c6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b1c8:	4b82      	ldr	r3, [pc, #520]	; (800b3d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1cc:	f003 0301 	and.w	r3, r3, #1
 800b1d0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b1d2:	4b80      	ldr	r3, [pc, #512]	; (800b3d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1d6:	08db      	lsrs	r3, r3, #3
 800b1d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b1dc:	68fa      	ldr	r2, [r7, #12]
 800b1de:	fb02 f303 	mul.w	r3, r2, r3
 800b1e2:	ee07 3a90 	vmov	s15, r3
 800b1e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	f000 80e1 	beq.w	800b3b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	2b02      	cmp	r3, #2
 800b1fa:	f000 8083 	beq.w	800b304 <HAL_RCC_GetSysClockFreq+0x204>
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	2b02      	cmp	r3, #2
 800b202:	f200 80a1 	bhi.w	800b348 <HAL_RCC_GetSysClockFreq+0x248>
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d003      	beq.n	800b214 <HAL_RCC_GetSysClockFreq+0x114>
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	2b01      	cmp	r3, #1
 800b210:	d056      	beq.n	800b2c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b212:	e099      	b.n	800b348 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b214:	4b6f      	ldr	r3, [pc, #444]	; (800b3d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f003 0320 	and.w	r3, r3, #32
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d02d      	beq.n	800b27c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b220:	4b6c      	ldr	r3, [pc, #432]	; (800b3d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	08db      	lsrs	r3, r3, #3
 800b226:	f003 0303 	and.w	r3, r3, #3
 800b22a:	4a6b      	ldr	r2, [pc, #428]	; (800b3d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b22c:	fa22 f303 	lsr.w	r3, r2, r3
 800b230:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	ee07 3a90 	vmov	s15, r3
 800b238:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	ee07 3a90 	vmov	s15, r3
 800b242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b24a:	4b62      	ldr	r3, [pc, #392]	; (800b3d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b24c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b24e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b252:	ee07 3a90 	vmov	s15, r3
 800b256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b25a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b25e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b3e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b26a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b26e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b272:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b276:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b27a:	e087      	b.n	800b38c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b27c:	693b      	ldr	r3, [r7, #16]
 800b27e:	ee07 3a90 	vmov	s15, r3
 800b282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b286:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b3e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b28a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b28e:	4b51      	ldr	r3, [pc, #324]	; (800b3d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b296:	ee07 3a90 	vmov	s15, r3
 800b29a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b29e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b2a2:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b3e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b2a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b2be:	e065      	b.n	800b38c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	ee07 3a90 	vmov	s15, r3
 800b2c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2ca:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b3ec <HAL_RCC_GetSysClockFreq+0x2ec>
 800b2ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2d2:	4b40      	ldr	r3, [pc, #256]	; (800b3d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2da:	ee07 3a90 	vmov	s15, r3
 800b2de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2e2:	ed97 6a02 	vldr	s12, [r7, #8]
 800b2e6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b3e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b2ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b302:	e043      	b.n	800b38c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	ee07 3a90 	vmov	s15, r3
 800b30a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b30e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b3f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b316:	4b2f      	ldr	r3, [pc, #188]	; (800b3d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b31a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b31e:	ee07 3a90 	vmov	s15, r3
 800b322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b326:	ed97 6a02 	vldr	s12, [r7, #8]
 800b32a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b3e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b32e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b33a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b33e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b342:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b346:	e021      	b.n	800b38c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	ee07 3a90 	vmov	s15, r3
 800b34e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b352:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b3ec <HAL_RCC_GetSysClockFreq+0x2ec>
 800b356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b35a:	4b1e      	ldr	r3, [pc, #120]	; (800b3d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b35c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b35e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b362:	ee07 3a90 	vmov	s15, r3
 800b366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b36a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b36e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b3e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b37a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b37e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b382:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b386:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b38a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b38c:	4b11      	ldr	r3, [pc, #68]	; (800b3d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b38e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b390:	0a5b      	lsrs	r3, r3, #9
 800b392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b396:	3301      	adds	r3, #1
 800b398:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	ee07 3a90 	vmov	s15, r3
 800b3a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b3a4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3b0:	ee17 3a90 	vmov	r3, s15
 800b3b4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b3b6:	e005      	b.n	800b3c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	61bb      	str	r3, [r7, #24]
      break;
 800b3bc:	e002      	b.n	800b3c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b3be:	4b07      	ldr	r3, [pc, #28]	; (800b3dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b3c0:	61bb      	str	r3, [r7, #24]
      break;
 800b3c2:	bf00      	nop
  }

  return sysclockfreq;
 800b3c4:	69bb      	ldr	r3, [r7, #24]
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3724      	adds	r7, #36	; 0x24
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr
 800b3d2:	bf00      	nop
 800b3d4:	58024400 	.word	0x58024400
 800b3d8:	03d09000 	.word	0x03d09000
 800b3dc:	003d0900 	.word	0x003d0900
 800b3e0:	007a1200 	.word	0x007a1200
 800b3e4:	46000000 	.word	0x46000000
 800b3e8:	4c742400 	.word	0x4c742400
 800b3ec:	4a742400 	.word	0x4a742400
 800b3f0:	4af42400 	.word	0x4af42400

0800b3f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b082      	sub	sp, #8
 800b3f8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b3fa:	f7ff fe81 	bl	800b100 <HAL_RCC_GetSysClockFreq>
 800b3fe:	4602      	mov	r2, r0
 800b400:	4b10      	ldr	r3, [pc, #64]	; (800b444 <HAL_RCC_GetHCLKFreq+0x50>)
 800b402:	699b      	ldr	r3, [r3, #24]
 800b404:	0a1b      	lsrs	r3, r3, #8
 800b406:	f003 030f 	and.w	r3, r3, #15
 800b40a:	490f      	ldr	r1, [pc, #60]	; (800b448 <HAL_RCC_GetHCLKFreq+0x54>)
 800b40c:	5ccb      	ldrb	r3, [r1, r3]
 800b40e:	f003 031f 	and.w	r3, r3, #31
 800b412:	fa22 f303 	lsr.w	r3, r2, r3
 800b416:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b418:	4b0a      	ldr	r3, [pc, #40]	; (800b444 <HAL_RCC_GetHCLKFreq+0x50>)
 800b41a:	699b      	ldr	r3, [r3, #24]
 800b41c:	f003 030f 	and.w	r3, r3, #15
 800b420:	4a09      	ldr	r2, [pc, #36]	; (800b448 <HAL_RCC_GetHCLKFreq+0x54>)
 800b422:	5cd3      	ldrb	r3, [r2, r3]
 800b424:	f003 031f 	and.w	r3, r3, #31
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	fa22 f303 	lsr.w	r3, r2, r3
 800b42e:	4a07      	ldr	r2, [pc, #28]	; (800b44c <HAL_RCC_GetHCLKFreq+0x58>)
 800b430:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b432:	4a07      	ldr	r2, [pc, #28]	; (800b450 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b438:	4b04      	ldr	r3, [pc, #16]	; (800b44c <HAL_RCC_GetHCLKFreq+0x58>)
 800b43a:	681b      	ldr	r3, [r3, #0]
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3708      	adds	r7, #8
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}
 800b444:	58024400 	.word	0x58024400
 800b448:	08011d98 	.word	0x08011d98
 800b44c:	2400003c 	.word	0x2400003c
 800b450:	24000038 	.word	0x24000038

0800b454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b458:	f7ff ffcc 	bl	800b3f4 <HAL_RCC_GetHCLKFreq>
 800b45c:	4602      	mov	r2, r0
 800b45e:	4b06      	ldr	r3, [pc, #24]	; (800b478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b460:	69db      	ldr	r3, [r3, #28]
 800b462:	091b      	lsrs	r3, r3, #4
 800b464:	f003 0307 	and.w	r3, r3, #7
 800b468:	4904      	ldr	r1, [pc, #16]	; (800b47c <HAL_RCC_GetPCLK1Freq+0x28>)
 800b46a:	5ccb      	ldrb	r3, [r1, r3]
 800b46c:	f003 031f 	and.w	r3, r3, #31
 800b470:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b474:	4618      	mov	r0, r3
 800b476:	bd80      	pop	{r7, pc}
 800b478:	58024400 	.word	0x58024400
 800b47c:	08011d98 	.word	0x08011d98

0800b480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b484:	f7ff ffb6 	bl	800b3f4 <HAL_RCC_GetHCLKFreq>
 800b488:	4602      	mov	r2, r0
 800b48a:	4b06      	ldr	r3, [pc, #24]	; (800b4a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b48c:	69db      	ldr	r3, [r3, #28]
 800b48e:	0a1b      	lsrs	r3, r3, #8
 800b490:	f003 0307 	and.w	r3, r3, #7
 800b494:	4904      	ldr	r1, [pc, #16]	; (800b4a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b496:	5ccb      	ldrb	r3, [r1, r3]
 800b498:	f003 031f 	and.w	r3, r3, #31
 800b49c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	58024400 	.word	0x58024400
 800b4a8:	08011d98 	.word	0x08011d98

0800b4ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b4ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b4b0:	b0c6      	sub	sp, #280	; 0x118
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b4be:	2300      	movs	r3, #0
 800b4c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b4c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4cc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b4d0:	2500      	movs	r5, #0
 800b4d2:	ea54 0305 	orrs.w	r3, r4, r5
 800b4d6:	d049      	beq.n	800b56c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b4d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b4e2:	d02f      	beq.n	800b544 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b4e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b4e8:	d828      	bhi.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b4ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b4ee:	d01a      	beq.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b4f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b4f4:	d822      	bhi.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d003      	beq.n	800b502 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b4fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4fe:	d007      	beq.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b500:	e01c      	b.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b502:	4bab      	ldr	r3, [pc, #684]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b506:	4aaa      	ldr	r2, [pc, #680]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b50c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b50e:	e01a      	b.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b510:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b514:	3308      	adds	r3, #8
 800b516:	2102      	movs	r1, #2
 800b518:	4618      	mov	r0, r3
 800b51a:	f002 fa49 	bl	800d9b0 <RCCEx_PLL2_Config>
 800b51e:	4603      	mov	r3, r0
 800b520:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b524:	e00f      	b.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b526:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b52a:	3328      	adds	r3, #40	; 0x28
 800b52c:	2102      	movs	r1, #2
 800b52e:	4618      	mov	r0, r3
 800b530:	f002 faf0 	bl	800db14 <RCCEx_PLL3_Config>
 800b534:	4603      	mov	r3, r0
 800b536:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b53a:	e004      	b.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b53c:	2301      	movs	r3, #1
 800b53e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b542:	e000      	b.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b544:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b546:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d10a      	bne.n	800b564 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b54e:	4b98      	ldr	r3, [pc, #608]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b552:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b55a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b55c:	4a94      	ldr	r2, [pc, #592]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b55e:	430b      	orrs	r3, r1
 800b560:	6513      	str	r3, [r2, #80]	; 0x50
 800b562:	e003      	b.n	800b56c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b564:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b568:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b56c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b574:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b578:	f04f 0900 	mov.w	r9, #0
 800b57c:	ea58 0309 	orrs.w	r3, r8, r9
 800b580:	d047      	beq.n	800b612 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b582:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b588:	2b04      	cmp	r3, #4
 800b58a:	d82a      	bhi.n	800b5e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b58c:	a201      	add	r2, pc, #4	; (adr r2, 800b594 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b58e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b592:	bf00      	nop
 800b594:	0800b5a9 	.word	0x0800b5a9
 800b598:	0800b5b7 	.word	0x0800b5b7
 800b59c:	0800b5cd 	.word	0x0800b5cd
 800b5a0:	0800b5eb 	.word	0x0800b5eb
 800b5a4:	0800b5eb 	.word	0x0800b5eb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5a8:	4b81      	ldr	r3, [pc, #516]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b5aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ac:	4a80      	ldr	r2, [pc, #512]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b5ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b5b4:	e01a      	b.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b5b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5ba:	3308      	adds	r3, #8
 800b5bc:	2100      	movs	r1, #0
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f002 f9f6 	bl	800d9b0 <RCCEx_PLL2_Config>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b5ca:	e00f      	b.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b5cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5d0:	3328      	adds	r3, #40	; 0x28
 800b5d2:	2100      	movs	r1, #0
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f002 fa9d 	bl	800db14 <RCCEx_PLL3_Config>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b5e0:	e004      	b.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b5e8:	e000      	b.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b5ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d10a      	bne.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b5f4:	4b6e      	ldr	r3, [pc, #440]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b5f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5f8:	f023 0107 	bic.w	r1, r3, #7
 800b5fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b602:	4a6b      	ldr	r2, [pc, #428]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b604:	430b      	orrs	r3, r1
 800b606:	6513      	str	r3, [r2, #80]	; 0x50
 800b608:	e003      	b.n	800b612 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b60a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b60e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61a:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800b61e:	f04f 0b00 	mov.w	fp, #0
 800b622:	ea5a 030b 	orrs.w	r3, sl, fp
 800b626:	d05b      	beq.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b628:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b62c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b630:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800b634:	d03b      	beq.n	800b6ae <HAL_RCCEx_PeriphCLKConfig+0x202>
 800b636:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800b63a:	d834      	bhi.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b63c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b640:	d037      	beq.n	800b6b2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b642:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b646:	d82e      	bhi.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b648:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b64c:	d033      	beq.n	800b6b6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800b64e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b652:	d828      	bhi.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b654:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b658:	d01a      	beq.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800b65a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b65e:	d822      	bhi.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b660:	2b00      	cmp	r3, #0
 800b662:	d003      	beq.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800b664:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b668:	d007      	beq.n	800b67a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800b66a:	e01c      	b.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b66c:	4b50      	ldr	r3, [pc, #320]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b670:	4a4f      	ldr	r2, [pc, #316]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b672:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b676:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b678:	e01e      	b.n	800b6b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b67a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b67e:	3308      	adds	r3, #8
 800b680:	2100      	movs	r1, #0
 800b682:	4618      	mov	r0, r3
 800b684:	f002 f994 	bl	800d9b0 <RCCEx_PLL2_Config>
 800b688:	4603      	mov	r3, r0
 800b68a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b68e:	e013      	b.n	800b6b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b694:	3328      	adds	r3, #40	; 0x28
 800b696:	2100      	movs	r1, #0
 800b698:	4618      	mov	r0, r3
 800b69a:	f002 fa3b 	bl	800db14 <RCCEx_PLL3_Config>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b6a4:	e008      	b.n	800b6b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b6ac:	e004      	b.n	800b6b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b6ae:	bf00      	nop
 800b6b0:	e002      	b.n	800b6b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b6b2:	bf00      	nop
 800b6b4:	e000      	b.n	800b6b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b6b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d10b      	bne.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b6c0:	4b3b      	ldr	r3, [pc, #236]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b6c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6c4:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b6c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b6d0:	4a37      	ldr	r2, [pc, #220]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b6d2:	430b      	orrs	r3, r1
 800b6d4:	6593      	str	r3, [r2, #88]	; 0x58
 800b6d6:	e003      	b.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b6e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b6ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b6f6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b6fa:	460b      	mov	r3, r1
 800b6fc:	4313      	orrs	r3, r2
 800b6fe:	d05d      	beq.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b704:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b708:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800b70c:	d03b      	beq.n	800b786 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800b70e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800b712:	d834      	bhi.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b714:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b718:	d037      	beq.n	800b78a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800b71a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b71e:	d82e      	bhi.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b720:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b724:	d033      	beq.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800b726:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b72a:	d828      	bhi.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b72c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b730:	d01a      	beq.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800b732:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b736:	d822      	bhi.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d003      	beq.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b73c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b740:	d007      	beq.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b742:	e01c      	b.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b744:	4b1a      	ldr	r3, [pc, #104]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b748:	4a19      	ldr	r2, [pc, #100]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b74a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b74e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b750:	e01e      	b.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b752:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b756:	3308      	adds	r3, #8
 800b758:	2100      	movs	r1, #0
 800b75a:	4618      	mov	r0, r3
 800b75c:	f002 f928 	bl	800d9b0 <RCCEx_PLL2_Config>
 800b760:	4603      	mov	r3, r0
 800b762:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b766:	e013      	b.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b76c:	3328      	adds	r3, #40	; 0x28
 800b76e:	2100      	movs	r1, #0
 800b770:	4618      	mov	r0, r3
 800b772:	f002 f9cf 	bl	800db14 <RCCEx_PLL3_Config>
 800b776:	4603      	mov	r3, r0
 800b778:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b77c:	e008      	b.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b77e:	2301      	movs	r3, #1
 800b780:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b784:	e004      	b.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b786:	bf00      	nop
 800b788:	e002      	b.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b78a:	bf00      	nop
 800b78c:	e000      	b.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b78e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b790:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b794:	2b00      	cmp	r3, #0
 800b796:	d10d      	bne.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b798:	4b05      	ldr	r3, [pc, #20]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b79a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b79c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b7a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b7a8:	4a01      	ldr	r2, [pc, #4]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b7aa:	430b      	orrs	r3, r1
 800b7ac:	6593      	str	r3, [r2, #88]	; 0x58
 800b7ae:	e005      	b.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0x310>
 800b7b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b7bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b7c8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b7d2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b7d6:	460b      	mov	r3, r1
 800b7d8:	4313      	orrs	r3, r2
 800b7da:	d03a      	beq.n	800b852 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b7dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7e2:	2b30      	cmp	r3, #48	; 0x30
 800b7e4:	d01f      	beq.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800b7e6:	2b30      	cmp	r3, #48	; 0x30
 800b7e8:	d819      	bhi.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b7ea:	2b20      	cmp	r3, #32
 800b7ec:	d00c      	beq.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b7ee:	2b20      	cmp	r3, #32
 800b7f0:	d815      	bhi.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d019      	beq.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b7f6:	2b10      	cmp	r3, #16
 800b7f8:	d111      	bne.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7fa:	4baa      	ldr	r3, [pc, #680]	; (800baa4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b7fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7fe:	4aa9      	ldr	r2, [pc, #676]	; (800baa4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b804:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b806:	e011      	b.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b80c:	3308      	adds	r3, #8
 800b80e:	2102      	movs	r1, #2
 800b810:	4618      	mov	r0, r3
 800b812:	f002 f8cd 	bl	800d9b0 <RCCEx_PLL2_Config>
 800b816:	4603      	mov	r3, r0
 800b818:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b81c:	e006      	b.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b81e:	2301      	movs	r3, #1
 800b820:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b824:	e002      	b.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b826:	bf00      	nop
 800b828:	e000      	b.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b82a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b82c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b830:	2b00      	cmp	r3, #0
 800b832:	d10a      	bne.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b834:	4b9b      	ldr	r3, [pc, #620]	; (800baa4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b838:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b83c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b842:	4a98      	ldr	r2, [pc, #608]	; (800baa4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b844:	430b      	orrs	r3, r1
 800b846:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b848:	e003      	b.n	800b852 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b84a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b84e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b85e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b862:	2300      	movs	r3, #0
 800b864:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b868:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b86c:	460b      	mov	r3, r1
 800b86e:	4313      	orrs	r3, r2
 800b870:	d051      	beq.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b878:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b87c:	d035      	beq.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800b87e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b882:	d82e      	bhi.n	800b8e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b884:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b888:	d031      	beq.n	800b8ee <HAL_RCCEx_PeriphCLKConfig+0x442>
 800b88a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b88e:	d828      	bhi.n	800b8e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b890:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b894:	d01a      	beq.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x420>
 800b896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b89a:	d822      	bhi.n	800b8e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d003      	beq.n	800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800b8a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8a4:	d007      	beq.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800b8a6:	e01c      	b.n	800b8e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8a8:	4b7e      	ldr	r3, [pc, #504]	; (800baa4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b8aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ac:	4a7d      	ldr	r2, [pc, #500]	; (800baa4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b8ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b8b4:	e01c      	b.n	800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b8b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8ba:	3308      	adds	r3, #8
 800b8bc:	2100      	movs	r1, #0
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f002 f876 	bl	800d9b0 <RCCEx_PLL2_Config>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b8ca:	e011      	b.n	800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b8cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8d0:	3328      	adds	r3, #40	; 0x28
 800b8d2:	2100      	movs	r1, #0
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f002 f91d 	bl	800db14 <RCCEx_PLL3_Config>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b8e0:	e006      	b.n	800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b8e8:	e002      	b.n	800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b8ea:	bf00      	nop
 800b8ec:	e000      	b.n	800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b8ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d10a      	bne.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b8f8:	4b6a      	ldr	r3, [pc, #424]	; (800baa4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b8fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8fc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b906:	4a67      	ldr	r2, [pc, #412]	; (800baa4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b908:	430b      	orrs	r3, r1
 800b90a:	6513      	str	r3, [r2, #80]	; 0x50
 800b90c:	e003      	b.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b90e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b912:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b922:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b926:	2300      	movs	r3, #0
 800b928:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b92c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b930:	460b      	mov	r3, r1
 800b932:	4313      	orrs	r3, r2
 800b934:	d053      	beq.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b936:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b93a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b93c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b940:	d033      	beq.n	800b9aa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800b942:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b946:	d82c      	bhi.n	800b9a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b948:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b94c:	d02f      	beq.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0x502>
 800b94e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b952:	d826      	bhi.n	800b9a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b954:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b958:	d02b      	beq.n	800b9b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800b95a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b95e:	d820      	bhi.n	800b9a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b960:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b964:	d012      	beq.n	800b98c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800b966:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b96a:	d81a      	bhi.n	800b9a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d022      	beq.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800b970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b974:	d115      	bne.n	800b9a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b97a:	3308      	adds	r3, #8
 800b97c:	2101      	movs	r1, #1
 800b97e:	4618      	mov	r0, r3
 800b980:	f002 f816 	bl	800d9b0 <RCCEx_PLL2_Config>
 800b984:	4603      	mov	r3, r0
 800b986:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b98a:	e015      	b.n	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b98c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b990:	3328      	adds	r3, #40	; 0x28
 800b992:	2101      	movs	r1, #1
 800b994:	4618      	mov	r0, r3
 800b996:	f002 f8bd 	bl	800db14 <RCCEx_PLL3_Config>
 800b99a:	4603      	mov	r3, r0
 800b99c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b9a0:	e00a      	b.n	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b9a8:	e006      	b.n	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b9aa:	bf00      	nop
 800b9ac:	e004      	b.n	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b9ae:	bf00      	nop
 800b9b0:	e002      	b.n	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b9b2:	bf00      	nop
 800b9b4:	e000      	b.n	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b9b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d10a      	bne.n	800b9d6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b9c0:	4b38      	ldr	r3, [pc, #224]	; (800baa4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9c4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b9c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9ce:	4a35      	ldr	r2, [pc, #212]	; (800baa4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9d0:	430b      	orrs	r3, r1
 800b9d2:	6513      	str	r3, [r2, #80]	; 0x50
 800b9d4:	e003      	b.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9da:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b9de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b9ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b9f4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b9f8:	460b      	mov	r3, r1
 800b9fa:	4313      	orrs	r3, r2
 800b9fc:	d058      	beq.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b9fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ba06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ba0a:	d033      	beq.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800ba0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ba10:	d82c      	bhi.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ba12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba16:	d02f      	beq.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800ba18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba1c:	d826      	bhi.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ba1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ba22:	d02b      	beq.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800ba24:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ba28:	d820      	bhi.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ba2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba2e:	d012      	beq.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800ba30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba34:	d81a      	bhi.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d022      	beq.n	800ba80 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800ba3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba3e:	d115      	bne.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba44:	3308      	adds	r3, #8
 800ba46:	2101      	movs	r1, #1
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f001 ffb1 	bl	800d9b0 <RCCEx_PLL2_Config>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ba54:	e015      	b.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba5a:	3328      	adds	r3, #40	; 0x28
 800ba5c:	2101      	movs	r1, #1
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f002 f858 	bl	800db14 <RCCEx_PLL3_Config>
 800ba64:	4603      	mov	r3, r0
 800ba66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ba6a:	e00a      	b.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ba72:	e006      	b.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ba74:	bf00      	nop
 800ba76:	e004      	b.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ba78:	bf00      	nop
 800ba7a:	e002      	b.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ba7c:	bf00      	nop
 800ba7e:	e000      	b.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ba80:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba82:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d10e      	bne.n	800baa8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ba8a:	4b06      	ldr	r3, [pc, #24]	; (800baa4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba8e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ba92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ba9a:	4a02      	ldr	r2, [pc, #8]	; (800baa4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba9c:	430b      	orrs	r3, r1
 800ba9e:	6593      	str	r3, [r2, #88]	; 0x58
 800baa0:	e006      	b.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800baa2:	bf00      	nop
 800baa4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baa8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800baac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800babc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bac0:	2300      	movs	r3, #0
 800bac2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bac6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800baca:	460b      	mov	r3, r1
 800bacc:	4313      	orrs	r3, r2
 800bace:	d037      	beq.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bad6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bada:	d00e      	beq.n	800bafa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800badc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bae0:	d816      	bhi.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d018      	beq.n	800bb18 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800bae6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800baea:	d111      	bne.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800baec:	4bc4      	ldr	r3, [pc, #784]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800baee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf0:	4ac3      	ldr	r2, [pc, #780]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800baf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800baf6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800baf8:	e00f      	b.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bafa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bafe:	3308      	adds	r3, #8
 800bb00:	2101      	movs	r1, #1
 800bb02:	4618      	mov	r0, r3
 800bb04:	f001 ff54 	bl	800d9b0 <RCCEx_PLL2_Config>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bb0e:	e004      	b.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb10:	2301      	movs	r3, #1
 800bb12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bb16:	e000      	b.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800bb18:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb1a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d10a      	bne.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bb22:	4bb7      	ldr	r3, [pc, #732]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb26:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bb2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb30:	4ab3      	ldr	r2, [pc, #716]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb32:	430b      	orrs	r3, r1
 800bb34:	6513      	str	r3, [r2, #80]	; 0x50
 800bb36:	e003      	b.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb3c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bb40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb48:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800bb4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bb50:	2300      	movs	r3, #0
 800bb52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bb56:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800bb5a:	460b      	mov	r3, r1
 800bb5c:	4313      	orrs	r3, r2
 800bb5e:	d039      	beq.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bb60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb66:	2b03      	cmp	r3, #3
 800bb68:	d81c      	bhi.n	800bba4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800bb6a:	a201      	add	r2, pc, #4	; (adr r2, 800bb70 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800bb6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb70:	0800bbad 	.word	0x0800bbad
 800bb74:	0800bb81 	.word	0x0800bb81
 800bb78:	0800bb8f 	.word	0x0800bb8f
 800bb7c:	0800bbad 	.word	0x0800bbad
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb80:	4b9f      	ldr	r3, [pc, #636]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb84:	4a9e      	ldr	r2, [pc, #632]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bb8c:	e00f      	b.n	800bbae <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bb8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb92:	3308      	adds	r3, #8
 800bb94:	2102      	movs	r1, #2
 800bb96:	4618      	mov	r0, r3
 800bb98:	f001 ff0a 	bl	800d9b0 <RCCEx_PLL2_Config>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bba2:	e004      	b.n	800bbae <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bba4:	2301      	movs	r3, #1
 800bba6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bbaa:	e000      	b.n	800bbae <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800bbac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d10a      	bne.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bbb6:	4b92      	ldr	r3, [pc, #584]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbba:	f023 0103 	bic.w	r1, r3, #3
 800bbbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbc4:	4a8e      	ldr	r2, [pc, #568]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbc6:	430b      	orrs	r3, r1
 800bbc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bbca:	e003      	b.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbcc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbd0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bbd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbdc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800bbe0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bbea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bbee:	460b      	mov	r3, r1
 800bbf0:	4313      	orrs	r3, r2
 800bbf2:	f000 8099 	beq.w	800bd28 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bbf6:	4b83      	ldr	r3, [pc, #524]	; (800be04 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	4a82      	ldr	r2, [pc, #520]	; (800be04 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bbfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bc02:	f7f8 fa3d 	bl	8004080 <HAL_GetTick>
 800bc06:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bc0a:	e00b      	b.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc0c:	f7f8 fa38 	bl	8004080 <HAL_GetTick>
 800bc10:	4602      	mov	r2, r0
 800bc12:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800bc16:	1ad3      	subs	r3, r2, r3
 800bc18:	2b64      	cmp	r3, #100	; 0x64
 800bc1a:	d903      	bls.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800bc1c:	2303      	movs	r3, #3
 800bc1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bc22:	e005      	b.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bc24:	4b77      	ldr	r3, [pc, #476]	; (800be04 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d0ed      	beq.n	800bc0c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800bc30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d173      	bne.n	800bd20 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bc38:	4b71      	ldr	r3, [pc, #452]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bc3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bc44:	4053      	eors	r3, r2
 800bc46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d015      	beq.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bc4e:	4b6c      	ldr	r3, [pc, #432]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc56:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bc5a:	4b69      	ldr	r3, [pc, #420]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc5e:	4a68      	ldr	r2, [pc, #416]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc64:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bc66:	4b66      	ldr	r3, [pc, #408]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc6a:	4a65      	ldr	r2, [pc, #404]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc70:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bc72:	4a63      	ldr	r2, [pc, #396]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc78:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bc7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bc82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc86:	d118      	bne.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc88:	f7f8 f9fa 	bl	8004080 <HAL_GetTick>
 800bc8c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bc90:	e00d      	b.n	800bcae <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bc92:	f7f8 f9f5 	bl	8004080 <HAL_GetTick>
 800bc96:	4602      	mov	r2, r0
 800bc98:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800bc9c:	1ad2      	subs	r2, r2, r3
 800bc9e:	f241 3388 	movw	r3, #5000	; 0x1388
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d903      	bls.n	800bcae <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800bca6:	2303      	movs	r3, #3
 800bca8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800bcac:	e005      	b.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bcae:	4b54      	ldr	r3, [pc, #336]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcb2:	f003 0302 	and.w	r3, r3, #2
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d0eb      	beq.n	800bc92 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800bcba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d129      	bne.n	800bd16 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bcc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bcca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bcce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bcd2:	d10e      	bne.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800bcd4:	4b4a      	ldr	r3, [pc, #296]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcd6:	691b      	ldr	r3, [r3, #16]
 800bcd8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800bcdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bce0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bce4:	091a      	lsrs	r2, r3, #4
 800bce6:	4b48      	ldr	r3, [pc, #288]	; (800be08 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800bce8:	4013      	ands	r3, r2
 800bcea:	4a45      	ldr	r2, [pc, #276]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcec:	430b      	orrs	r3, r1
 800bcee:	6113      	str	r3, [r2, #16]
 800bcf0:	e005      	b.n	800bcfe <HAL_RCCEx_PeriphCLKConfig+0x852>
 800bcf2:	4b43      	ldr	r3, [pc, #268]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcf4:	691b      	ldr	r3, [r3, #16]
 800bcf6:	4a42      	ldr	r2, [pc, #264]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcf8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bcfc:	6113      	str	r3, [r2, #16]
 800bcfe:	4b40      	ldr	r3, [pc, #256]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd00:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bd02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bd0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bd0e:	4a3c      	ldr	r2, [pc, #240]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd10:	430b      	orrs	r3, r1
 800bd12:	6713      	str	r3, [r2, #112]	; 0x70
 800bd14:	e008      	b.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bd16:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd1a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800bd1e:	e003      	b.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd24:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bd28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd30:	f002 0301 	and.w	r3, r2, #1
 800bd34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bd38:	2300      	movs	r3, #0
 800bd3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bd3e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800bd42:	460b      	mov	r3, r1
 800bd44:	4313      	orrs	r3, r2
 800bd46:	f000 808f 	beq.w	800be68 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800bd4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd50:	2b28      	cmp	r3, #40	; 0x28
 800bd52:	d871      	bhi.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800bd54:	a201      	add	r2, pc, #4	; (adr r2, 800bd5c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800bd56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd5a:	bf00      	nop
 800bd5c:	0800be41 	.word	0x0800be41
 800bd60:	0800be39 	.word	0x0800be39
 800bd64:	0800be39 	.word	0x0800be39
 800bd68:	0800be39 	.word	0x0800be39
 800bd6c:	0800be39 	.word	0x0800be39
 800bd70:	0800be39 	.word	0x0800be39
 800bd74:	0800be39 	.word	0x0800be39
 800bd78:	0800be39 	.word	0x0800be39
 800bd7c:	0800be0d 	.word	0x0800be0d
 800bd80:	0800be39 	.word	0x0800be39
 800bd84:	0800be39 	.word	0x0800be39
 800bd88:	0800be39 	.word	0x0800be39
 800bd8c:	0800be39 	.word	0x0800be39
 800bd90:	0800be39 	.word	0x0800be39
 800bd94:	0800be39 	.word	0x0800be39
 800bd98:	0800be39 	.word	0x0800be39
 800bd9c:	0800be23 	.word	0x0800be23
 800bda0:	0800be39 	.word	0x0800be39
 800bda4:	0800be39 	.word	0x0800be39
 800bda8:	0800be39 	.word	0x0800be39
 800bdac:	0800be39 	.word	0x0800be39
 800bdb0:	0800be39 	.word	0x0800be39
 800bdb4:	0800be39 	.word	0x0800be39
 800bdb8:	0800be39 	.word	0x0800be39
 800bdbc:	0800be41 	.word	0x0800be41
 800bdc0:	0800be39 	.word	0x0800be39
 800bdc4:	0800be39 	.word	0x0800be39
 800bdc8:	0800be39 	.word	0x0800be39
 800bdcc:	0800be39 	.word	0x0800be39
 800bdd0:	0800be39 	.word	0x0800be39
 800bdd4:	0800be39 	.word	0x0800be39
 800bdd8:	0800be39 	.word	0x0800be39
 800bddc:	0800be41 	.word	0x0800be41
 800bde0:	0800be39 	.word	0x0800be39
 800bde4:	0800be39 	.word	0x0800be39
 800bde8:	0800be39 	.word	0x0800be39
 800bdec:	0800be39 	.word	0x0800be39
 800bdf0:	0800be39 	.word	0x0800be39
 800bdf4:	0800be39 	.word	0x0800be39
 800bdf8:	0800be39 	.word	0x0800be39
 800bdfc:	0800be41 	.word	0x0800be41
 800be00:	58024400 	.word	0x58024400
 800be04:	58024800 	.word	0x58024800
 800be08:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be10:	3308      	adds	r3, #8
 800be12:	2101      	movs	r1, #1
 800be14:	4618      	mov	r0, r3
 800be16:	f001 fdcb 	bl	800d9b0 <RCCEx_PLL2_Config>
 800be1a:	4603      	mov	r3, r0
 800be1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800be20:	e00f      	b.n	800be42 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be26:	3328      	adds	r3, #40	; 0x28
 800be28:	2101      	movs	r1, #1
 800be2a:	4618      	mov	r0, r3
 800be2c:	f001 fe72 	bl	800db14 <RCCEx_PLL3_Config>
 800be30:	4603      	mov	r3, r0
 800be32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800be36:	e004      	b.n	800be42 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be38:	2301      	movs	r3, #1
 800be3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800be3e:	e000      	b.n	800be42 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800be40:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be42:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be46:	2b00      	cmp	r3, #0
 800be48:	d10a      	bne.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800be4a:	4bbf      	ldr	r3, [pc, #764]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800be4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be4e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800be52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be58:	4abb      	ldr	r2, [pc, #748]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800be5a:	430b      	orrs	r3, r1
 800be5c:	6553      	str	r3, [r2, #84]	; 0x54
 800be5e:	e003      	b.n	800be68 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800be68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be70:	f002 0302 	and.w	r3, r2, #2
 800be74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800be78:	2300      	movs	r3, #0
 800be7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800be7e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800be82:	460b      	mov	r3, r1
 800be84:	4313      	orrs	r3, r2
 800be86:	d041      	beq.n	800bf0c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800be88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be8e:	2b05      	cmp	r3, #5
 800be90:	d824      	bhi.n	800bedc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800be92:	a201      	add	r2, pc, #4	; (adr r2, 800be98 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800be94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be98:	0800bee5 	.word	0x0800bee5
 800be9c:	0800beb1 	.word	0x0800beb1
 800bea0:	0800bec7 	.word	0x0800bec7
 800bea4:	0800bee5 	.word	0x0800bee5
 800bea8:	0800bee5 	.word	0x0800bee5
 800beac:	0800bee5 	.word	0x0800bee5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800beb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800beb4:	3308      	adds	r3, #8
 800beb6:	2101      	movs	r1, #1
 800beb8:	4618      	mov	r0, r3
 800beba:	f001 fd79 	bl	800d9b0 <RCCEx_PLL2_Config>
 800bebe:	4603      	mov	r3, r0
 800bec0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bec4:	e00f      	b.n	800bee6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800beca:	3328      	adds	r3, #40	; 0x28
 800becc:	2101      	movs	r1, #1
 800bece:	4618      	mov	r0, r3
 800bed0:	f001 fe20 	bl	800db14 <RCCEx_PLL3_Config>
 800bed4:	4603      	mov	r3, r0
 800bed6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800beda:	e004      	b.n	800bee6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bedc:	2301      	movs	r3, #1
 800bede:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bee2:	e000      	b.n	800bee6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800bee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bee6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800beea:	2b00      	cmp	r3, #0
 800beec:	d10a      	bne.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800beee:	4b96      	ldr	r3, [pc, #600]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bef2:	f023 0107 	bic.w	r1, r3, #7
 800bef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800befa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800befc:	4a92      	ldr	r2, [pc, #584]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800befe:	430b      	orrs	r3, r1
 800bf00:	6553      	str	r3, [r2, #84]	; 0x54
 800bf02:	e003      	b.n	800bf0c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf08:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bf0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf14:	f002 0304 	and.w	r3, r2, #4
 800bf18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bf22:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bf26:	460b      	mov	r3, r1
 800bf28:	4313      	orrs	r3, r2
 800bf2a:	d044      	beq.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bf2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf34:	2b05      	cmp	r3, #5
 800bf36:	d825      	bhi.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800bf38:	a201      	add	r2, pc, #4	; (adr r2, 800bf40 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800bf3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf3e:	bf00      	nop
 800bf40:	0800bf8d 	.word	0x0800bf8d
 800bf44:	0800bf59 	.word	0x0800bf59
 800bf48:	0800bf6f 	.word	0x0800bf6f
 800bf4c:	0800bf8d 	.word	0x0800bf8d
 800bf50:	0800bf8d 	.word	0x0800bf8d
 800bf54:	0800bf8d 	.word	0x0800bf8d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf5c:	3308      	adds	r3, #8
 800bf5e:	2101      	movs	r1, #1
 800bf60:	4618      	mov	r0, r3
 800bf62:	f001 fd25 	bl	800d9b0 <RCCEx_PLL2_Config>
 800bf66:	4603      	mov	r3, r0
 800bf68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bf6c:	e00f      	b.n	800bf8e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf72:	3328      	adds	r3, #40	; 0x28
 800bf74:	2101      	movs	r1, #1
 800bf76:	4618      	mov	r0, r3
 800bf78:	f001 fdcc 	bl	800db14 <RCCEx_PLL3_Config>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bf82:	e004      	b.n	800bf8e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf84:	2301      	movs	r3, #1
 800bf86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bf8a:	e000      	b.n	800bf8e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800bf8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf8e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d10b      	bne.n	800bfae <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bf96:	4b6c      	ldr	r3, [pc, #432]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bf98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf9a:	f023 0107 	bic.w	r1, r3, #7
 800bf9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfa6:	4a68      	ldr	r2, [pc, #416]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bfa8:	430b      	orrs	r3, r1
 800bfaa:	6593      	str	r3, [r2, #88]	; 0x58
 800bfac:	e003      	b.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bfb2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bfb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfbe:	f002 0320 	and.w	r3, r2, #32
 800bfc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bfcc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800bfd0:	460b      	mov	r3, r1
 800bfd2:	4313      	orrs	r3, r2
 800bfd4:	d055      	beq.n	800c082 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bfd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bfe2:	d033      	beq.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800bfe4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bfe8:	d82c      	bhi.n	800c044 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800bfea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfee:	d02f      	beq.n	800c050 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800bff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bff4:	d826      	bhi.n	800c044 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800bff6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bffa:	d02b      	beq.n	800c054 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800bffc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c000:	d820      	bhi.n	800c044 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c002:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c006:	d012      	beq.n	800c02e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800c008:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c00c:	d81a      	bhi.n	800c044 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d022      	beq.n	800c058 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c012:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c016:	d115      	bne.n	800c044 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c018:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c01c:	3308      	adds	r3, #8
 800c01e:	2100      	movs	r1, #0
 800c020:	4618      	mov	r0, r3
 800c022:	f001 fcc5 	bl	800d9b0 <RCCEx_PLL2_Config>
 800c026:	4603      	mov	r3, r0
 800c028:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c02c:	e015      	b.n	800c05a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c02e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c032:	3328      	adds	r3, #40	; 0x28
 800c034:	2102      	movs	r1, #2
 800c036:	4618      	mov	r0, r3
 800c038:	f001 fd6c 	bl	800db14 <RCCEx_PLL3_Config>
 800c03c:	4603      	mov	r3, r0
 800c03e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c042:	e00a      	b.n	800c05a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c044:	2301      	movs	r3, #1
 800c046:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c04a:	e006      	b.n	800c05a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c04c:	bf00      	nop
 800c04e:	e004      	b.n	800c05a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c050:	bf00      	nop
 800c052:	e002      	b.n	800c05a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c054:	bf00      	nop
 800c056:	e000      	b.n	800c05a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c05a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d10b      	bne.n	800c07a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c062:	4b39      	ldr	r3, [pc, #228]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c066:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c06a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c06e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c072:	4a35      	ldr	r2, [pc, #212]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c074:	430b      	orrs	r3, r1
 800c076:	6553      	str	r3, [r2, #84]	; 0x54
 800c078:	e003      	b.n	800c082 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c07a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c07e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c082:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800c08e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c092:	2300      	movs	r3, #0
 800c094:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c098:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c09c:	460b      	mov	r3, r1
 800c09e:	4313      	orrs	r3, r2
 800c0a0:	d058      	beq.n	800c154 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c0a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c0aa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c0ae:	d033      	beq.n	800c118 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800c0b0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c0b4:	d82c      	bhi.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c0b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0ba:	d02f      	beq.n	800c11c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c0bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0c0:	d826      	bhi.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c0c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c0c6:	d02b      	beq.n	800c120 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c0c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c0cc:	d820      	bhi.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c0ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c0d2:	d012      	beq.n	800c0fa <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800c0d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c0d8:	d81a      	bhi.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d022      	beq.n	800c124 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c0de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0e2:	d115      	bne.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c0e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0e8:	3308      	adds	r3, #8
 800c0ea:	2100      	movs	r1, #0
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f001 fc5f 	bl	800d9b0 <RCCEx_PLL2_Config>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c0f8:	e015      	b.n	800c126 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c0fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0fe:	3328      	adds	r3, #40	; 0x28
 800c100:	2102      	movs	r1, #2
 800c102:	4618      	mov	r0, r3
 800c104:	f001 fd06 	bl	800db14 <RCCEx_PLL3_Config>
 800c108:	4603      	mov	r3, r0
 800c10a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c10e:	e00a      	b.n	800c126 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c110:	2301      	movs	r3, #1
 800c112:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c116:	e006      	b.n	800c126 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c118:	bf00      	nop
 800c11a:	e004      	b.n	800c126 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c11c:	bf00      	nop
 800c11e:	e002      	b.n	800c126 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c120:	bf00      	nop
 800c122:	e000      	b.n	800c126 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c124:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c126:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d10e      	bne.n	800c14c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c12e:	4b06      	ldr	r3, [pc, #24]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c132:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800c136:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c13a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c13e:	4a02      	ldr	r2, [pc, #8]	; (800c148 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c140:	430b      	orrs	r3, r1
 800c142:	6593      	str	r3, [r2, #88]	; 0x58
 800c144:	e006      	b.n	800c154 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800c146:	bf00      	nop
 800c148:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c14c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c150:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c160:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c164:	2300      	movs	r3, #0
 800c166:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c16a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c16e:	460b      	mov	r3, r1
 800c170:	4313      	orrs	r3, r2
 800c172:	d055      	beq.n	800c220 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c174:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c178:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c17c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c180:	d033      	beq.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800c182:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c186:	d82c      	bhi.n	800c1e2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c18c:	d02f      	beq.n	800c1ee <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c18e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c192:	d826      	bhi.n	800c1e2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c194:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c198:	d02b      	beq.n	800c1f2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c19a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c19e:	d820      	bhi.n	800c1e2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c1a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c1a4:	d012      	beq.n	800c1cc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800c1a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c1aa:	d81a      	bhi.n	800c1e2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d022      	beq.n	800c1f6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c1b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c1b4:	d115      	bne.n	800c1e2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c1b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1ba:	3308      	adds	r3, #8
 800c1bc:	2100      	movs	r1, #0
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f001 fbf6 	bl	800d9b0 <RCCEx_PLL2_Config>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c1ca:	e015      	b.n	800c1f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c1cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1d0:	3328      	adds	r3, #40	; 0x28
 800c1d2:	2102      	movs	r1, #2
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f001 fc9d 	bl	800db14 <RCCEx_PLL3_Config>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c1e0:	e00a      	b.n	800c1f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c1e8:	e006      	b.n	800c1f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c1ea:	bf00      	nop
 800c1ec:	e004      	b.n	800c1f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c1ee:	bf00      	nop
 800c1f0:	e002      	b.n	800c1f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c1f2:	bf00      	nop
 800c1f4:	e000      	b.n	800c1f8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c1f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d10b      	bne.n	800c218 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c200:	4ba0      	ldr	r3, [pc, #640]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c204:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c208:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c20c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c210:	4a9c      	ldr	r2, [pc, #624]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c212:	430b      	orrs	r3, r1
 800c214:	6593      	str	r3, [r2, #88]	; 0x58
 800c216:	e003      	b.n	800c220 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c218:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c21c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800c220:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c228:	f002 0308 	and.w	r3, r2, #8
 800c22c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c230:	2300      	movs	r3, #0
 800c232:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c236:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c23a:	460b      	mov	r3, r1
 800c23c:	4313      	orrs	r3, r2
 800c23e:	d01e      	beq.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800c240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c244:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c24c:	d10c      	bne.n	800c268 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c24e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c252:	3328      	adds	r3, #40	; 0x28
 800c254:	2102      	movs	r1, #2
 800c256:	4618      	mov	r0, r3
 800c258:	f001 fc5c 	bl	800db14 <RCCEx_PLL3_Config>
 800c25c:	4603      	mov	r3, r0
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d002      	beq.n	800c268 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800c262:	2301      	movs	r3, #1
 800c264:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800c268:	4b86      	ldr	r3, [pc, #536]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c26a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c26c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c270:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c274:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c278:	4a82      	ldr	r2, [pc, #520]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c27a:	430b      	orrs	r3, r1
 800c27c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c27e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c286:	f002 0310 	and.w	r3, r2, #16
 800c28a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c28e:	2300      	movs	r3, #0
 800c290:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c294:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c298:	460b      	mov	r3, r1
 800c29a:	4313      	orrs	r3, r2
 800c29c:	d01e      	beq.n	800c2dc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c29e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c2a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2aa:	d10c      	bne.n	800c2c6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c2ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2b0:	3328      	adds	r3, #40	; 0x28
 800c2b2:	2102      	movs	r1, #2
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f001 fc2d 	bl	800db14 <RCCEx_PLL3_Config>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d002      	beq.n	800c2c6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c2c6:	4b6f      	ldr	r3, [pc, #444]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c2c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c2ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c2d6:	4a6b      	ldr	r2, [pc, #428]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c2d8:	430b      	orrs	r3, r1
 800c2da:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c2dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c2e8:	67bb      	str	r3, [r7, #120]	; 0x78
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c2ee:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c2f2:	460b      	mov	r3, r1
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	d03e      	beq.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c2f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c300:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c304:	d022      	beq.n	800c34c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c306:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c30a:	d81b      	bhi.n	800c344 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d003      	beq.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800c310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c314:	d00b      	beq.n	800c32e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800c316:	e015      	b.n	800c344 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c31c:	3308      	adds	r3, #8
 800c31e:	2100      	movs	r1, #0
 800c320:	4618      	mov	r0, r3
 800c322:	f001 fb45 	bl	800d9b0 <RCCEx_PLL2_Config>
 800c326:	4603      	mov	r3, r0
 800c328:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c32c:	e00f      	b.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c32e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c332:	3328      	adds	r3, #40	; 0x28
 800c334:	2102      	movs	r1, #2
 800c336:	4618      	mov	r0, r3
 800c338:	f001 fbec 	bl	800db14 <RCCEx_PLL3_Config>
 800c33c:	4603      	mov	r3, r0
 800c33e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c342:	e004      	b.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c344:	2301      	movs	r3, #1
 800c346:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c34a:	e000      	b.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800c34c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c34e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c352:	2b00      	cmp	r3, #0
 800c354:	d10b      	bne.n	800c36e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c356:	4b4b      	ldr	r3, [pc, #300]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c35a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c35e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c362:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c366:	4a47      	ldr	r2, [pc, #284]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c368:	430b      	orrs	r3, r1
 800c36a:	6593      	str	r3, [r2, #88]	; 0x58
 800c36c:	e003      	b.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c36e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c372:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c376:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c382:	673b      	str	r3, [r7, #112]	; 0x70
 800c384:	2300      	movs	r3, #0
 800c386:	677b      	str	r3, [r7, #116]	; 0x74
 800c388:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c38c:	460b      	mov	r3, r1
 800c38e:	4313      	orrs	r3, r2
 800c390:	d03b      	beq.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c392:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c396:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c39a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c39e:	d01f      	beq.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c3a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c3a4:	d818      	bhi.n	800c3d8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800c3a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c3aa:	d003      	beq.n	800c3b4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800c3ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c3b0:	d007      	beq.n	800c3c2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800c3b2:	e011      	b.n	800c3d8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3b4:	4b33      	ldr	r3, [pc, #204]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b8:	4a32      	ldr	r2, [pc, #200]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c3ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c3be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c3c0:	e00f      	b.n	800c3e2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c3c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3c6:	3328      	adds	r3, #40	; 0x28
 800c3c8:	2101      	movs	r1, #1
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f001 fba2 	bl	800db14 <RCCEx_PLL3_Config>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800c3d6:	e004      	b.n	800c3e2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c3d8:	2301      	movs	r3, #1
 800c3da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c3de:	e000      	b.n	800c3e2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800c3e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d10b      	bne.n	800c402 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c3ea:	4b26      	ldr	r3, [pc, #152]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c3ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3ee:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c3f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3fa:	4a22      	ldr	r2, [pc, #136]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c3fc:	430b      	orrs	r3, r1
 800c3fe:	6553      	str	r3, [r2, #84]	; 0x54
 800c400:	e003      	b.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c402:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c406:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c40a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c412:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c416:	66bb      	str	r3, [r7, #104]	; 0x68
 800c418:	2300      	movs	r3, #0
 800c41a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c41c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c420:	460b      	mov	r3, r1
 800c422:	4313      	orrs	r3, r2
 800c424:	d034      	beq.n	800c490 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c426:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c42a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d003      	beq.n	800c438 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800c430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c434:	d007      	beq.n	800c446 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800c436:	e011      	b.n	800c45c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c438:	4b12      	ldr	r3, [pc, #72]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c43c:	4a11      	ldr	r2, [pc, #68]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c43e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c442:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c444:	e00e      	b.n	800c464 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c446:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c44a:	3308      	adds	r3, #8
 800c44c:	2102      	movs	r1, #2
 800c44e:	4618      	mov	r0, r3
 800c450:	f001 faae 	bl	800d9b0 <RCCEx_PLL2_Config>
 800c454:	4603      	mov	r3, r0
 800c456:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c45a:	e003      	b.n	800c464 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800c45c:	2301      	movs	r3, #1
 800c45e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c462:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c464:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d10d      	bne.n	800c488 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c46c:	4b05      	ldr	r3, [pc, #20]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c46e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c470:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c47a:	4a02      	ldr	r2, [pc, #8]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c47c:	430b      	orrs	r3, r1
 800c47e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c480:	e006      	b.n	800c490 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800c482:	bf00      	nop
 800c484:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c488:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c48c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c498:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c49c:	663b      	str	r3, [r7, #96]	; 0x60
 800c49e:	2300      	movs	r3, #0
 800c4a0:	667b      	str	r3, [r7, #100]	; 0x64
 800c4a2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c4a6:	460b      	mov	r3, r1
 800c4a8:	4313      	orrs	r3, r2
 800c4aa:	d00c      	beq.n	800c4c6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c4ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4b0:	3328      	adds	r3, #40	; 0x28
 800c4b2:	2102      	movs	r1, #2
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	f001 fb2d 	bl	800db14 <RCCEx_PLL3_Config>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d002      	beq.n	800c4c6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c4c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ce:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c4d2:	65bb      	str	r3, [r7, #88]	; 0x58
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c4d8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c4dc:	460b      	mov	r3, r1
 800c4de:	4313      	orrs	r3, r2
 800c4e0:	d036      	beq.n	800c550 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c4e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c4ec:	d018      	beq.n	800c520 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800c4ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c4f2:	d811      	bhi.n	800c518 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c4f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4f8:	d014      	beq.n	800c524 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800c4fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4fe:	d80b      	bhi.n	800c518 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c500:	2b00      	cmp	r3, #0
 800c502:	d011      	beq.n	800c528 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800c504:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c508:	d106      	bne.n	800c518 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c50a:	4bb7      	ldr	r3, [pc, #732]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c50e:	4ab6      	ldr	r2, [pc, #728]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c514:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c516:	e008      	b.n	800c52a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c518:	2301      	movs	r3, #1
 800c51a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c51e:	e004      	b.n	800c52a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c520:	bf00      	nop
 800c522:	e002      	b.n	800c52a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c524:	bf00      	nop
 800c526:	e000      	b.n	800c52a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c528:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c52a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d10a      	bne.n	800c548 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c532:	4bad      	ldr	r3, [pc, #692]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c536:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c53a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c53e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c540:	4aa9      	ldr	r2, [pc, #676]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c542:	430b      	orrs	r3, r1
 800c544:	6553      	str	r3, [r2, #84]	; 0x54
 800c546:	e003      	b.n	800c550 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c548:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c54c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c558:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c55c:	653b      	str	r3, [r7, #80]	; 0x50
 800c55e:	2300      	movs	r3, #0
 800c560:	657b      	str	r3, [r7, #84]	; 0x54
 800c562:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c566:	460b      	mov	r3, r1
 800c568:	4313      	orrs	r3, r2
 800c56a:	d009      	beq.n	800c580 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c56c:	4b9e      	ldr	r3, [pc, #632]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c56e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c570:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c57a:	4a9b      	ldr	r2, [pc, #620]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c57c:	430b      	orrs	r3, r1
 800c57e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c580:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c588:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c58c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c58e:	2300      	movs	r3, #0
 800c590:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c592:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c596:	460b      	mov	r3, r1
 800c598:	4313      	orrs	r3, r2
 800c59a:	d009      	beq.n	800c5b0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c59c:	4b92      	ldr	r3, [pc, #584]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c59e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5a0:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c5a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c5aa:	4a8f      	ldr	r2, [pc, #572]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c5ac:	430b      	orrs	r3, r1
 800c5ae:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c5b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c5bc:	643b      	str	r3, [r7, #64]	; 0x40
 800c5be:	2300      	movs	r3, #0
 800c5c0:	647b      	str	r3, [r7, #68]	; 0x44
 800c5c2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c5c6:	460b      	mov	r3, r1
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	d00e      	beq.n	800c5ea <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c5cc:	4b86      	ldr	r3, [pc, #536]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c5ce:	691b      	ldr	r3, [r3, #16]
 800c5d0:	4a85      	ldr	r2, [pc, #532]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c5d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c5d6:	6113      	str	r3, [r2, #16]
 800c5d8:	4b83      	ldr	r3, [pc, #524]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c5da:	6919      	ldr	r1, [r3, #16]
 800c5dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c5e4:	4a80      	ldr	r2, [pc, #512]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c5e6:	430b      	orrs	r3, r1
 800c5e8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c5ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c5f6:	63bb      	str	r3, [r7, #56]	; 0x38
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5fc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c600:	460b      	mov	r3, r1
 800c602:	4313      	orrs	r3, r2
 800c604:	d009      	beq.n	800c61a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c606:	4b78      	ldr	r3, [pc, #480]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c60a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c60e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c614:	4a74      	ldr	r2, [pc, #464]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c616:	430b      	orrs	r3, r1
 800c618:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c61a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c622:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c626:	633b      	str	r3, [r7, #48]	; 0x30
 800c628:	2300      	movs	r3, #0
 800c62a:	637b      	str	r3, [r7, #52]	; 0x34
 800c62c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c630:	460b      	mov	r3, r1
 800c632:	4313      	orrs	r3, r2
 800c634:	d00a      	beq.n	800c64c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c636:	4b6c      	ldr	r3, [pc, #432]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c63a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c63e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c646:	4a68      	ldr	r2, [pc, #416]	; (800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c648:	430b      	orrs	r3, r1
 800c64a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c64c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c654:	2100      	movs	r1, #0
 800c656:	62b9      	str	r1, [r7, #40]	; 0x28
 800c658:	f003 0301 	and.w	r3, r3, #1
 800c65c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c65e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c662:	460b      	mov	r3, r1
 800c664:	4313      	orrs	r3, r2
 800c666:	d011      	beq.n	800c68c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c66c:	3308      	adds	r3, #8
 800c66e:	2100      	movs	r1, #0
 800c670:	4618      	mov	r0, r3
 800c672:	f001 f99d 	bl	800d9b0 <RCCEx_PLL2_Config>
 800c676:	4603      	mov	r3, r0
 800c678:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c67c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c680:	2b00      	cmp	r3, #0
 800c682:	d003      	beq.n	800c68c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c684:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c688:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c68c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c694:	2100      	movs	r1, #0
 800c696:	6239      	str	r1, [r7, #32]
 800c698:	f003 0302 	and.w	r3, r3, #2
 800c69c:	627b      	str	r3, [r7, #36]	; 0x24
 800c69e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	4313      	orrs	r3, r2
 800c6a6:	d011      	beq.n	800c6cc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c6a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6ac:	3308      	adds	r3, #8
 800c6ae:	2101      	movs	r1, #1
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f001 f97d 	bl	800d9b0 <RCCEx_PLL2_Config>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c6bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d003      	beq.n	800c6cc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c6c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c6cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d4:	2100      	movs	r1, #0
 800c6d6:	61b9      	str	r1, [r7, #24]
 800c6d8:	f003 0304 	and.w	r3, r3, #4
 800c6dc:	61fb      	str	r3, [r7, #28]
 800c6de:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c6e2:	460b      	mov	r3, r1
 800c6e4:	4313      	orrs	r3, r2
 800c6e6:	d011      	beq.n	800c70c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c6e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6ec:	3308      	adds	r3, #8
 800c6ee:	2102      	movs	r1, #2
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f001 f95d 	bl	800d9b0 <RCCEx_PLL2_Config>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c6fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c700:	2b00      	cmp	r3, #0
 800c702:	d003      	beq.n	800c70c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c704:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c708:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c70c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c714:	2100      	movs	r1, #0
 800c716:	6139      	str	r1, [r7, #16]
 800c718:	f003 0308 	and.w	r3, r3, #8
 800c71c:	617b      	str	r3, [r7, #20]
 800c71e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c722:	460b      	mov	r3, r1
 800c724:	4313      	orrs	r3, r2
 800c726:	d011      	beq.n	800c74c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c72c:	3328      	adds	r3, #40	; 0x28
 800c72e:	2100      	movs	r1, #0
 800c730:	4618      	mov	r0, r3
 800c732:	f001 f9ef 	bl	800db14 <RCCEx_PLL3_Config>
 800c736:	4603      	mov	r3, r0
 800c738:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800c73c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c740:	2b00      	cmp	r3, #0
 800c742:	d003      	beq.n	800c74c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c744:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c748:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c74c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c754:	2100      	movs	r1, #0
 800c756:	60b9      	str	r1, [r7, #8]
 800c758:	f003 0310 	and.w	r3, r3, #16
 800c75c:	60fb      	str	r3, [r7, #12]
 800c75e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c762:	460b      	mov	r3, r1
 800c764:	4313      	orrs	r3, r2
 800c766:	d011      	beq.n	800c78c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c76c:	3328      	adds	r3, #40	; 0x28
 800c76e:	2101      	movs	r1, #1
 800c770:	4618      	mov	r0, r3
 800c772:	f001 f9cf 	bl	800db14 <RCCEx_PLL3_Config>
 800c776:	4603      	mov	r3, r0
 800c778:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c77c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c780:	2b00      	cmp	r3, #0
 800c782:	d003      	beq.n	800c78c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c784:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c788:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c78c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c794:	2100      	movs	r1, #0
 800c796:	6039      	str	r1, [r7, #0]
 800c798:	f003 0320 	and.w	r3, r3, #32
 800c79c:	607b      	str	r3, [r7, #4]
 800c79e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c7a2:	460b      	mov	r3, r1
 800c7a4:	4313      	orrs	r3, r2
 800c7a6:	d011      	beq.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c7a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7ac:	3328      	adds	r3, #40	; 0x28
 800c7ae:	2102      	movs	r1, #2
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f001 f9af 	bl	800db14 <RCCEx_PLL3_Config>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c7bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d003      	beq.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c7c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800c7cc:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d101      	bne.n	800c7d8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	e000      	b.n	800c7da <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800c7d8:	2301      	movs	r3, #1
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c7e6:	bf00      	nop
 800c7e8:	58024400 	.word	0x58024400

0800c7ec <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b090      	sub	sp, #64	; 0x40
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c7f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7fa:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c7fe:	430b      	orrs	r3, r1
 800c800:	f040 8094 	bne.w	800c92c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c804:	4b9b      	ldr	r3, [pc, #620]	; (800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c808:	f003 0307 	and.w	r3, r3, #7
 800c80c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c810:	2b04      	cmp	r3, #4
 800c812:	f200 8087 	bhi.w	800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c816:	a201      	add	r2, pc, #4	; (adr r2, 800c81c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c81c:	0800c831 	.word	0x0800c831
 800c820:	0800c859 	.word	0x0800c859
 800c824:	0800c881 	.word	0x0800c881
 800c828:	0800c91d 	.word	0x0800c91d
 800c82c:	0800c8a9 	.word	0x0800c8a9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c830:	4b90      	ldr	r3, [pc, #576]	; (800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c838:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c83c:	d108      	bne.n	800c850 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c83e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c842:	4618      	mov	r0, r3
 800c844:	f000 ff62 	bl	800d70c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c84a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c84c:	f000 bc93 	b.w	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c850:	2300      	movs	r3, #0
 800c852:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c854:	f000 bc8f 	b.w	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c858:	4b86      	ldr	r3, [pc, #536]	; (800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c860:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c864:	d108      	bne.n	800c878 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c866:	f107 0318 	add.w	r3, r7, #24
 800c86a:	4618      	mov	r0, r3
 800c86c:	f000 fca6 	bl	800d1bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c870:	69bb      	ldr	r3, [r7, #24]
 800c872:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c874:	f000 bc7f 	b.w	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c878:	2300      	movs	r3, #0
 800c87a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c87c:	f000 bc7b 	b.w	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c880:	4b7c      	ldr	r3, [pc, #496]	; (800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c888:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c88c:	d108      	bne.n	800c8a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c88e:	f107 030c 	add.w	r3, r7, #12
 800c892:	4618      	mov	r0, r3
 800c894:	f000 fde6 	bl	800d464 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c89c:	f000 bc6b 	b.w	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8a4:	f000 bc67 	b.w	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c8a8:	4b72      	ldr	r3, [pc, #456]	; (800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c8aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c8b0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c8b2:	4b70      	ldr	r3, [pc, #448]	; (800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	f003 0304 	and.w	r3, r3, #4
 800c8ba:	2b04      	cmp	r3, #4
 800c8bc:	d10c      	bne.n	800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c8be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d109      	bne.n	800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c8c4:	4b6b      	ldr	r3, [pc, #428]	; (800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	08db      	lsrs	r3, r3, #3
 800c8ca:	f003 0303 	and.w	r3, r3, #3
 800c8ce:	4a6a      	ldr	r2, [pc, #424]	; (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c8d0:	fa22 f303 	lsr.w	r3, r2, r3
 800c8d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8d6:	e01f      	b.n	800c918 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c8d8:	4b66      	ldr	r3, [pc, #408]	; (800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8e4:	d106      	bne.n	800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c8e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c8ec:	d102      	bne.n	800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c8ee:	4b63      	ldr	r3, [pc, #396]	; (800ca7c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8f2:	e011      	b.n	800c918 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c8f4:	4b5f      	ldr	r3, [pc, #380]	; (800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c900:	d106      	bne.n	800c910 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c904:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c908:	d102      	bne.n	800c910 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c90a:	4b5d      	ldr	r3, [pc, #372]	; (800ca80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c90c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c90e:	e003      	b.n	800c918 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c910:	2300      	movs	r3, #0
 800c912:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c914:	f000 bc2f 	b.w	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c918:	f000 bc2d 	b.w	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c91c:	4b59      	ldr	r3, [pc, #356]	; (800ca84 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c91e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c920:	f000 bc29 	b.w	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c924:	2300      	movs	r3, #0
 800c926:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c928:	f000 bc25 	b.w	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c92c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c930:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c934:	430b      	orrs	r3, r1
 800c936:	f040 80a7 	bne.w	800ca88 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c93a:	4b4e      	ldr	r3, [pc, #312]	; (800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c93c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c93e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c942:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c946:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c94a:	d054      	beq.n	800c9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800c94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c94e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c952:	f200 808b 	bhi.w	800ca6c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c958:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c95c:	f000 8083 	beq.w	800ca66 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800c960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c962:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c966:	f200 8081 	bhi.w	800ca6c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c96c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c970:	d02f      	beq.n	800c9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c974:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c978:	d878      	bhi.n	800ca6c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d004      	beq.n	800c98a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800c980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c982:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c986:	d012      	beq.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800c988:	e070      	b.n	800ca6c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c98a:	4b3a      	ldr	r3, [pc, #232]	; (800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c992:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c996:	d107      	bne.n	800c9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c99c:	4618      	mov	r0, r3
 800c99e:	f000 feb5 	bl	800d70c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9a6:	e3e6      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9ac:	e3e3      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c9ae:	4b31      	ldr	r3, [pc, #196]	; (800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c9b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c9ba:	d107      	bne.n	800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9bc:	f107 0318 	add.w	r3, r7, #24
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f000 fbfb 	bl	800d1bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c9c6:	69bb      	ldr	r3, [r7, #24]
 800c9c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9ca:	e3d4      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9d0:	e3d1      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c9d2:	4b28      	ldr	r3, [pc, #160]	; (800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c9da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9de:	d107      	bne.n	800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9e0:	f107 030c 	add.w	r3, r7, #12
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f000 fd3d 	bl	800d464 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9ee:	e3c2      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9f4:	e3bf      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c9f6:	4b1f      	ldr	r3, [pc, #124]	; (800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c9f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c9fe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ca00:	4b1c      	ldr	r3, [pc, #112]	; (800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	f003 0304 	and.w	r3, r3, #4
 800ca08:	2b04      	cmp	r3, #4
 800ca0a:	d10c      	bne.n	800ca26 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800ca0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d109      	bne.n	800ca26 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca12:	4b18      	ldr	r3, [pc, #96]	; (800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	08db      	lsrs	r3, r3, #3
 800ca18:	f003 0303 	and.w	r3, r3, #3
 800ca1c:	4a16      	ldr	r2, [pc, #88]	; (800ca78 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800ca1e:	fa22 f303 	lsr.w	r3, r2, r3
 800ca22:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca24:	e01e      	b.n	800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ca26:	4b13      	ldr	r3, [pc, #76]	; (800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca32:	d106      	bne.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800ca34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ca3a:	d102      	bne.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ca3c:	4b0f      	ldr	r3, [pc, #60]	; (800ca7c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800ca3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca40:	e010      	b.n	800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ca42:	4b0c      	ldr	r3, [pc, #48]	; (800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca4e:	d106      	bne.n	800ca5e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800ca50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca56:	d102      	bne.n	800ca5e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ca58:	4b09      	ldr	r3, [pc, #36]	; (800ca80 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ca5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca5c:	e002      	b.n	800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ca62:	e388      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ca64:	e387      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ca66:	4b07      	ldr	r3, [pc, #28]	; (800ca84 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ca68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca6a:	e384      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca70:	e381      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ca72:	bf00      	nop
 800ca74:	58024400 	.word	0x58024400
 800ca78:	03d09000 	.word	0x03d09000
 800ca7c:	003d0900 	.word	0x003d0900
 800ca80:	007a1200 	.word	0x007a1200
 800ca84:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ca88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca8c:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800ca90:	430b      	orrs	r3, r1
 800ca92:	f040 809c 	bne.w	800cbce <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ca96:	4b9e      	ldr	r3, [pc, #632]	; (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ca98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca9a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800ca9e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800caa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800caa6:	d054      	beq.n	800cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800caa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caaa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800caae:	f200 808b 	bhi.w	800cbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cab8:	f000 8083 	beq.w	800cbc2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800cabc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cabe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cac2:	f200 8081 	bhi.w	800cbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cacc:	d02f      	beq.n	800cb2e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800cace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cad4:	d878      	bhi.n	800cbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d004      	beq.n	800cae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800cadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cade:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cae2:	d012      	beq.n	800cb0a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800cae4:	e070      	b.n	800cbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cae6:	4b8a      	ldr	r3, [pc, #552]	; (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800caee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800caf2:	d107      	bne.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800caf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800caf8:	4618      	mov	r0, r3
 800cafa:	f000 fe07 	bl	800d70c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb02:	e338      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb04:	2300      	movs	r3, #0
 800cb06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb08:	e335      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cb0a:	4b81      	ldr	r3, [pc, #516]	; (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb16:	d107      	bne.n	800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb18:	f107 0318 	add.w	r3, r7, #24
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f000 fb4d 	bl	800d1bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cb22:	69bb      	ldr	r3, [r7, #24]
 800cb24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb26:	e326      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb2c:	e323      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cb2e:	4b78      	ldr	r3, [pc, #480]	; (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb3a:	d107      	bne.n	800cb4c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb3c:	f107 030c 	add.w	r3, r7, #12
 800cb40:	4618      	mov	r0, r3
 800cb42:	f000 fc8f 	bl	800d464 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb4a:	e314      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb50:	e311      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cb52:	4b6f      	ldr	r3, [pc, #444]	; (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cb54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cb5a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cb5c:	4b6c      	ldr	r3, [pc, #432]	; (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f003 0304 	and.w	r3, r3, #4
 800cb64:	2b04      	cmp	r3, #4
 800cb66:	d10c      	bne.n	800cb82 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800cb68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d109      	bne.n	800cb82 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb6e:	4b68      	ldr	r3, [pc, #416]	; (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	08db      	lsrs	r3, r3, #3
 800cb74:	f003 0303 	and.w	r3, r3, #3
 800cb78:	4a66      	ldr	r2, [pc, #408]	; (800cd14 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800cb7a:	fa22 f303 	lsr.w	r3, r2, r3
 800cb7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb80:	e01e      	b.n	800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cb82:	4b63      	ldr	r3, [pc, #396]	; (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb8e:	d106      	bne.n	800cb9e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800cb90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb96:	d102      	bne.n	800cb9e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cb98:	4b5f      	ldr	r3, [pc, #380]	; (800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800cb9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb9c:	e010      	b.n	800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cb9e:	4b5c      	ldr	r3, [pc, #368]	; (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cba6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbaa:	d106      	bne.n	800cbba <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800cbac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbb2:	d102      	bne.n	800cbba <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cbb4:	4b59      	ldr	r3, [pc, #356]	; (800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cbb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbb8:	e002      	b.n	800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cbbe:	e2da      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cbc0:	e2d9      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cbc2:	4b57      	ldr	r3, [pc, #348]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cbc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbc6:	e2d6      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbcc:	e2d3      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800cbce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbd2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800cbd6:	430b      	orrs	r3, r1
 800cbd8:	f040 80a7 	bne.w	800cd2a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800cbdc:	4b4c      	ldr	r3, [pc, #304]	; (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cbde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbe0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800cbe4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cbe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cbec:	d055      	beq.n	800cc9a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800cbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cbf4:	f200 8096 	bhi.w	800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cbf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbfa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cbfe:	f000 8084 	beq.w	800cd0a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800cc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cc08:	f200 808c 	bhi.w	800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cc0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cc12:	d030      	beq.n	800cc76 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800cc14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cc1a:	f200 8083 	bhi.w	800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cc1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d004      	beq.n	800cc2e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800cc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc2a:	d012      	beq.n	800cc52 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800cc2c:	e07a      	b.n	800cd24 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cc2e:	4b38      	ldr	r3, [pc, #224]	; (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc3a:	d107      	bne.n	800cc4c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cc3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cc40:	4618      	mov	r0, r3
 800cc42:	f000 fd63 	bl	800d70c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cc46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc4a:	e294      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc50:	e291      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc52:	4b2f      	ldr	r3, [pc, #188]	; (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc5e:	d107      	bne.n	800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc60:	f107 0318 	add.w	r3, r7, #24
 800cc64:	4618      	mov	r0, r3
 800cc66:	f000 faa9 	bl	800d1bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cc6a:	69bb      	ldr	r3, [r7, #24]
 800cc6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc6e:	e282      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc70:	2300      	movs	r3, #0
 800cc72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc74:	e27f      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cc76:	4b26      	ldr	r3, [pc, #152]	; (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc82:	d107      	bne.n	800cc94 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc84:	f107 030c 	add.w	r3, r7, #12
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f000 fbeb 	bl	800d464 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc92:	e270      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc94:	2300      	movs	r3, #0
 800cc96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc98:	e26d      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cc9a:	4b1d      	ldr	r3, [pc, #116]	; (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cca2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cca4:	4b1a      	ldr	r3, [pc, #104]	; (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	f003 0304 	and.w	r3, r3, #4
 800ccac:	2b04      	cmp	r3, #4
 800ccae:	d10c      	bne.n	800ccca <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800ccb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d109      	bne.n	800ccca <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ccb6:	4b16      	ldr	r3, [pc, #88]	; (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	08db      	lsrs	r3, r3, #3
 800ccbc:	f003 0303 	and.w	r3, r3, #3
 800ccc0:	4a14      	ldr	r2, [pc, #80]	; (800cd14 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800ccc2:	fa22 f303 	lsr.w	r3, r2, r3
 800ccc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccc8:	e01e      	b.n	800cd08 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ccca:	4b11      	ldr	r3, [pc, #68]	; (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ccd6:	d106      	bne.n	800cce6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800ccd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ccde:	d102      	bne.n	800cce6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cce0:	4b0d      	ldr	r3, [pc, #52]	; (800cd18 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800cce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cce4:	e010      	b.n	800cd08 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cce6:	4b0a      	ldr	r3, [pc, #40]	; (800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ccf2:	d106      	bne.n	800cd02 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800ccf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccfa:	d102      	bne.n	800cd02 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ccfc:	4b07      	ldr	r3, [pc, #28]	; (800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ccfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd00:	e002      	b.n	800cd08 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cd02:	2300      	movs	r3, #0
 800cd04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cd06:	e236      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cd08:	e235      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cd0a:	4b05      	ldr	r3, [pc, #20]	; (800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cd0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd0e:	e232      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cd10:	58024400 	.word	0x58024400
 800cd14:	03d09000 	.word	0x03d09000
 800cd18:	003d0900 	.word	0x003d0900
 800cd1c:	007a1200 	.word	0x007a1200
 800cd20:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800cd24:	2300      	movs	r3, #0
 800cd26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd28:	e225      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800cd2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd2e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800cd32:	430b      	orrs	r3, r1
 800cd34:	f040 8085 	bne.w	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800cd38:	4b9c      	ldr	r3, [pc, #624]	; (800cfac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cd3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd3c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800cd40:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800cd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cd48:	d06b      	beq.n	800ce22 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800cd4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cd50:	d874      	bhi.n	800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800cd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cd58:	d056      	beq.n	800ce08 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800cd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cd60:	d86c      	bhi.n	800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800cd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd64:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cd68:	d03b      	beq.n	800cde2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800cd6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd6c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cd70:	d864      	bhi.n	800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800cd72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd78:	d021      	beq.n	800cdbe <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800cd7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd80:	d85c      	bhi.n	800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800cd82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d004      	beq.n	800cd92 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800cd88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd8e:	d004      	beq.n	800cd9a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800cd90:	e054      	b.n	800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800cd92:	f7fe fb5f 	bl	800b454 <HAL_RCC_GetPCLK1Freq>
 800cd96:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd98:	e1ed      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd9a:	4b84      	ldr	r3, [pc, #528]	; (800cfac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cda2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cda6:	d107      	bne.n	800cdb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cda8:	f107 0318 	add.w	r3, r7, #24
 800cdac:	4618      	mov	r0, r3
 800cdae:	f000 fa05 	bl	800d1bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cdb2:	69fb      	ldr	r3, [r7, #28]
 800cdb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdb6:	e1de      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdbc:	e1db      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cdbe:	4b7b      	ldr	r3, [pc, #492]	; (800cfac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cdc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cdca:	d107      	bne.n	800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cdcc:	f107 030c 	add.w	r3, r7, #12
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f000 fb47 	bl	800d464 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cdd6:	693b      	ldr	r3, [r7, #16]
 800cdd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdda:	e1cc      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cddc:	2300      	movs	r3, #0
 800cdde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cde0:	e1c9      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cde2:	4b72      	ldr	r3, [pc, #456]	; (800cfac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	f003 0304 	and.w	r3, r3, #4
 800cdea:	2b04      	cmp	r3, #4
 800cdec:	d109      	bne.n	800ce02 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cdee:	4b6f      	ldr	r3, [pc, #444]	; (800cfac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	08db      	lsrs	r3, r3, #3
 800cdf4:	f003 0303 	and.w	r3, r3, #3
 800cdf8:	4a6d      	ldr	r2, [pc, #436]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800cdfa:	fa22 f303 	lsr.w	r3, r2, r3
 800cdfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce00:	e1b9      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce02:	2300      	movs	r3, #0
 800ce04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce06:	e1b6      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ce08:	4b68      	ldr	r3, [pc, #416]	; (800cfac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce14:	d102      	bne.n	800ce1c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800ce16:	4b67      	ldr	r3, [pc, #412]	; (800cfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800ce18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce1a:	e1ac      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce20:	e1a9      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ce22:	4b62      	ldr	r3, [pc, #392]	; (800cfac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce2e:	d102      	bne.n	800ce36 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800ce30:	4b61      	ldr	r3, [pc, #388]	; (800cfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800ce32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce34:	e19f      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce36:	2300      	movs	r3, #0
 800ce38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce3a:	e19c      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce40:	e199      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ce42:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce46:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800ce4a:	430b      	orrs	r3, r1
 800ce4c:	d173      	bne.n	800cf36 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ce4e:	4b57      	ldr	r3, [pc, #348]	; (800cfac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ce50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ce56:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ce58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce5e:	d02f      	beq.n	800cec0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800ce60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce66:	d863      	bhi.n	800cf30 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800ce68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d004      	beq.n	800ce78 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800ce6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce74:	d012      	beq.n	800ce9c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800ce76:	e05b      	b.n	800cf30 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce78:	4b4c      	ldr	r3, [pc, #304]	; (800cfac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce84:	d107      	bne.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce86:	f107 0318 	add.w	r3, r7, #24
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f000 f996 	bl	800d1bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ce90:	69bb      	ldr	r3, [r7, #24]
 800ce92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce94:	e16f      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce96:	2300      	movs	r3, #0
 800ce98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce9a:	e16c      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ce9c:	4b43      	ldr	r3, [pc, #268]	; (800cfac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cea8:	d107      	bne.n	800ceba <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ceaa:	f107 030c 	add.w	r3, r7, #12
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f000 fad8 	bl	800d464 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ceb4:	697b      	ldr	r3, [r7, #20]
 800ceb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ceb8:	e15d      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ceba:	2300      	movs	r3, #0
 800cebc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cebe:	e15a      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cec0:	4b3a      	ldr	r3, [pc, #232]	; (800cfac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cec4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cec8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ceca:	4b38      	ldr	r3, [pc, #224]	; (800cfac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f003 0304 	and.w	r3, r3, #4
 800ced2:	2b04      	cmp	r3, #4
 800ced4:	d10c      	bne.n	800cef0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800ced6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d109      	bne.n	800cef0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cedc:	4b33      	ldr	r3, [pc, #204]	; (800cfac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	08db      	lsrs	r3, r3, #3
 800cee2:	f003 0303 	and.w	r3, r3, #3
 800cee6:	4a32      	ldr	r2, [pc, #200]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800cee8:	fa22 f303 	lsr.w	r3, r2, r3
 800ceec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ceee:	e01e      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cef0:	4b2e      	ldr	r3, [pc, #184]	; (800cfac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cefc:	d106      	bne.n	800cf0c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800cefe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cf04:	d102      	bne.n	800cf0c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cf06:	4b2b      	ldr	r3, [pc, #172]	; (800cfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800cf08:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf0a:	e010      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cf0c:	4b27      	ldr	r3, [pc, #156]	; (800cfac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf18:	d106      	bne.n	800cf28 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800cf1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf20:	d102      	bne.n	800cf28 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cf22:	4b25      	ldr	r3, [pc, #148]	; (800cfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800cf24:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf26:	e002      	b.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cf28:	2300      	movs	r3, #0
 800cf2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cf2c:	e123      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cf2e:	e122      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cf30:	2300      	movs	r3, #0
 800cf32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf34:	e11f      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cf36:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf3a:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800cf3e:	430b      	orrs	r3, r1
 800cf40:	d13c      	bne.n	800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cf42:	4b1a      	ldr	r3, [pc, #104]	; (800cfac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cf4a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cf4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d004      	beq.n	800cf5c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800cf52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf58:	d012      	beq.n	800cf80 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800cf5a:	e023      	b.n	800cfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cf5c:	4b13      	ldr	r3, [pc, #76]	; (800cfac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf68:	d107      	bne.n	800cf7a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cf6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f000 fbcc 	bl	800d70c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cf74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf78:	e0fd      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf7e:	e0fa      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf80:	4b0a      	ldr	r3, [pc, #40]	; (800cfac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf8c:	d107      	bne.n	800cf9e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf8e:	f107 0318 	add.w	r3, r7, #24
 800cf92:	4618      	mov	r0, r3
 800cf94:	f000 f912 	bl	800d1bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cf98:	6a3b      	ldr	r3, [r7, #32]
 800cf9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf9c:	e0eb      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfa2:	e0e8      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfa8:	e0e5      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cfaa:	bf00      	nop
 800cfac:	58024400 	.word	0x58024400
 800cfb0:	03d09000 	.word	0x03d09000
 800cfb4:	003d0900 	.word	0x003d0900
 800cfb8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cfbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfc0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800cfc4:	430b      	orrs	r3, r1
 800cfc6:	f040 8085 	bne.w	800d0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cfca:	4b6d      	ldr	r3, [pc, #436]	; (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cfcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfce:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800cfd2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cfd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cfda:	d06b      	beq.n	800d0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800cfdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cfe2:	d874      	bhi.n	800d0ce <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800cfe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cfea:	d056      	beq.n	800d09a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800cfec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cff2:	d86c      	bhi.n	800d0ce <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800cff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cffa:	d03b      	beq.n	800d074 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800cffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cffe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d002:	d864      	bhi.n	800d0ce <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d006:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d00a:	d021      	beq.n	800d050 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800d00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d00e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d012:	d85c      	bhi.n	800d0ce <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d016:	2b00      	cmp	r3, #0
 800d018:	d004      	beq.n	800d024 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800d01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d01c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d020:	d004      	beq.n	800d02c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800d022:	e054      	b.n	800d0ce <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d024:	f000 f8b4 	bl	800d190 <HAL_RCCEx_GetD3PCLK1Freq>
 800d028:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d02a:	e0a4      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d02c:	4b54      	ldr	r3, [pc, #336]	; (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d034:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d038:	d107      	bne.n	800d04a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d03a:	f107 0318 	add.w	r3, r7, #24
 800d03e:	4618      	mov	r0, r3
 800d040:	f000 f8bc 	bl	800d1bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d044:	69fb      	ldr	r3, [r7, #28]
 800d046:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d048:	e095      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d04a:	2300      	movs	r3, #0
 800d04c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d04e:	e092      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d050:	4b4b      	ldr	r3, [pc, #300]	; (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d05c:	d107      	bne.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d05e:	f107 030c 	add.w	r3, r7, #12
 800d062:	4618      	mov	r0, r3
 800d064:	f000 f9fe 	bl	800d464 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d06c:	e083      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d06e:	2300      	movs	r3, #0
 800d070:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d072:	e080      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d074:	4b42      	ldr	r3, [pc, #264]	; (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	f003 0304 	and.w	r3, r3, #4
 800d07c:	2b04      	cmp	r3, #4
 800d07e:	d109      	bne.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d080:	4b3f      	ldr	r3, [pc, #252]	; (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	08db      	lsrs	r3, r3, #3
 800d086:	f003 0303 	and.w	r3, r3, #3
 800d08a:	4a3e      	ldr	r2, [pc, #248]	; (800d184 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800d08c:	fa22 f303 	lsr.w	r3, r2, r3
 800d090:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d092:	e070      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d094:	2300      	movs	r3, #0
 800d096:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d098:	e06d      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d09a:	4b39      	ldr	r3, [pc, #228]	; (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d0a6:	d102      	bne.n	800d0ae <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800d0a8:	4b37      	ldr	r3, [pc, #220]	; (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0ac:	e063      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0b2:	e060      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d0b4:	4b32      	ldr	r3, [pc, #200]	; (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d0c0:	d102      	bne.n	800d0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800d0c2:	4b32      	ldr	r3, [pc, #200]	; (800d18c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d0c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0c6:	e056      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0cc:	e053      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0d2:	e050      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d0d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0d8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800d0dc:	430b      	orrs	r3, r1
 800d0de:	d148      	bne.n	800d172 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d0e0:	4b27      	ldr	r3, [pc, #156]	; (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d0e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d0e8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d0f0:	d02a      	beq.n	800d148 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800d0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d0f8:	d838      	bhi.n	800d16c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800d0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d004      	beq.n	800d10a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800d100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d102:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d106:	d00d      	beq.n	800d124 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800d108:	e030      	b.n	800d16c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d10a:	4b1d      	ldr	r3, [pc, #116]	; (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d112:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d116:	d102      	bne.n	800d11e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800d118:	4b1c      	ldr	r3, [pc, #112]	; (800d18c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d11a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d11c:	e02b      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d11e:	2300      	movs	r3, #0
 800d120:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d122:	e028      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d124:	4b16      	ldr	r3, [pc, #88]	; (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d12c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d130:	d107      	bne.n	800d142 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d136:	4618      	mov	r0, r3
 800d138:	f000 fae8 	bl	800d70c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d13e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d140:	e019      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d142:	2300      	movs	r3, #0
 800d144:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d146:	e016      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d148:	4b0d      	ldr	r3, [pc, #52]	; (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d150:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d154:	d107      	bne.n	800d166 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d156:	f107 0318 	add.w	r3, r7, #24
 800d15a:	4618      	mov	r0, r3
 800d15c:	f000 f82e 	bl	800d1bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d160:	69fb      	ldr	r3, [r7, #28]
 800d162:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d164:	e007      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d166:	2300      	movs	r3, #0
 800d168:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d16a:	e004      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d16c:	2300      	movs	r3, #0
 800d16e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d170:	e001      	b.n	800d176 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800d172:	2300      	movs	r3, #0
 800d174:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800d176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d178:	4618      	mov	r0, r3
 800d17a:	3740      	adds	r7, #64	; 0x40
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}
 800d180:	58024400 	.word	0x58024400
 800d184:	03d09000 	.word	0x03d09000
 800d188:	003d0900 	.word	0x003d0900
 800d18c:	007a1200 	.word	0x007a1200

0800d190 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d194:	f7fe f92e 	bl	800b3f4 <HAL_RCC_GetHCLKFreq>
 800d198:	4602      	mov	r2, r0
 800d19a:	4b06      	ldr	r3, [pc, #24]	; (800d1b4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d19c:	6a1b      	ldr	r3, [r3, #32]
 800d19e:	091b      	lsrs	r3, r3, #4
 800d1a0:	f003 0307 	and.w	r3, r3, #7
 800d1a4:	4904      	ldr	r1, [pc, #16]	; (800d1b8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d1a6:	5ccb      	ldrb	r3, [r1, r3]
 800d1a8:	f003 031f 	and.w	r3, r3, #31
 800d1ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	bd80      	pop	{r7, pc}
 800d1b4:	58024400 	.word	0x58024400
 800d1b8:	08011d98 	.word	0x08011d98

0800d1bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b089      	sub	sp, #36	; 0x24
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d1c4:	4ba1      	ldr	r3, [pc, #644]	; (800d44c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1c8:	f003 0303 	and.w	r3, r3, #3
 800d1cc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d1ce:	4b9f      	ldr	r3, [pc, #636]	; (800d44c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1d2:	0b1b      	lsrs	r3, r3, #12
 800d1d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d1d8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d1da:	4b9c      	ldr	r3, [pc, #624]	; (800d44c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1de:	091b      	lsrs	r3, r3, #4
 800d1e0:	f003 0301 	and.w	r3, r3, #1
 800d1e4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d1e6:	4b99      	ldr	r3, [pc, #612]	; (800d44c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1ea:	08db      	lsrs	r3, r3, #3
 800d1ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d1f0:	693a      	ldr	r2, [r7, #16]
 800d1f2:	fb02 f303 	mul.w	r3, r2, r3
 800d1f6:	ee07 3a90 	vmov	s15, r3
 800d1fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	2b00      	cmp	r3, #0
 800d206:	f000 8111 	beq.w	800d42c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d20a:	69bb      	ldr	r3, [r7, #24]
 800d20c:	2b02      	cmp	r3, #2
 800d20e:	f000 8083 	beq.w	800d318 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d212:	69bb      	ldr	r3, [r7, #24]
 800d214:	2b02      	cmp	r3, #2
 800d216:	f200 80a1 	bhi.w	800d35c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d21a:	69bb      	ldr	r3, [r7, #24]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d003      	beq.n	800d228 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d220:	69bb      	ldr	r3, [r7, #24]
 800d222:	2b01      	cmp	r3, #1
 800d224:	d056      	beq.n	800d2d4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d226:	e099      	b.n	800d35c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d228:	4b88      	ldr	r3, [pc, #544]	; (800d44c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	f003 0320 	and.w	r3, r3, #32
 800d230:	2b00      	cmp	r3, #0
 800d232:	d02d      	beq.n	800d290 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d234:	4b85      	ldr	r3, [pc, #532]	; (800d44c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	08db      	lsrs	r3, r3, #3
 800d23a:	f003 0303 	and.w	r3, r3, #3
 800d23e:	4a84      	ldr	r2, [pc, #528]	; (800d450 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d240:	fa22 f303 	lsr.w	r3, r2, r3
 800d244:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	ee07 3a90 	vmov	s15, r3
 800d24c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d250:	697b      	ldr	r3, [r7, #20]
 800d252:	ee07 3a90 	vmov	s15, r3
 800d256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d25a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d25e:	4b7b      	ldr	r3, [pc, #492]	; (800d44c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d266:	ee07 3a90 	vmov	s15, r3
 800d26a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d26e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d272:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d454 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d27a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d27e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d28a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d28e:	e087      	b.n	800d3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	ee07 3a90 	vmov	s15, r3
 800d296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d29a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d458 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d29e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2a2:	4b6a      	ldr	r3, [pc, #424]	; (800d44c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2aa:	ee07 3a90 	vmov	s15, r3
 800d2ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d454 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d2ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2d2:	e065      	b.n	800d3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d2d4:	697b      	ldr	r3, [r7, #20]
 800d2d6:	ee07 3a90 	vmov	s15, r3
 800d2da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d45c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d2e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2e6:	4b59      	ldr	r3, [pc, #356]	; (800d44c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2ee:	ee07 3a90 	vmov	s15, r3
 800d2f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d454 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d2fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d306:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d30a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d30e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d312:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d316:	e043      	b.n	800d3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	ee07 3a90 	vmov	s15, r3
 800d31e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d322:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d460 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d32a:	4b48      	ldr	r3, [pc, #288]	; (800d44c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d32c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d32e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d332:	ee07 3a90 	vmov	s15, r3
 800d336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d33a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d33e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d454 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d34a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d34e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d352:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d356:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d35a:	e021      	b.n	800d3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	ee07 3a90 	vmov	s15, r3
 800d362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d366:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d45c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d36a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d36e:	4b37      	ldr	r3, [pc, #220]	; (800d44c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d376:	ee07 3a90 	vmov	s15, r3
 800d37a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d37e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d382:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d454 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d38a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d38e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d39a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d39e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d3a0:	4b2a      	ldr	r3, [pc, #168]	; (800d44c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3a4:	0a5b      	lsrs	r3, r3, #9
 800d3a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3aa:	ee07 3a90 	vmov	s15, r3
 800d3ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d3b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d3ba:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3c6:	ee17 2a90 	vmov	r2, s15
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d3ce:	4b1f      	ldr	r3, [pc, #124]	; (800d44c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3d2:	0c1b      	lsrs	r3, r3, #16
 800d3d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3d8:	ee07 3a90 	vmov	s15, r3
 800d3dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d3e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d3e8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3f4:	ee17 2a90 	vmov	r2, s15
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d3fc:	4b13      	ldr	r3, [pc, #76]	; (800d44c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d400:	0e1b      	lsrs	r3, r3, #24
 800d402:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d406:	ee07 3a90 	vmov	s15, r3
 800d40a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d40e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d412:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d416:	edd7 6a07 	vldr	s13, [r7, #28]
 800d41a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d41e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d422:	ee17 2a90 	vmov	r2, s15
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d42a:	e008      	b.n	800d43e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2200      	movs	r2, #0
 800d430:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2200      	movs	r2, #0
 800d436:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2200      	movs	r2, #0
 800d43c:	609a      	str	r2, [r3, #8]
}
 800d43e:	bf00      	nop
 800d440:	3724      	adds	r7, #36	; 0x24
 800d442:	46bd      	mov	sp, r7
 800d444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d448:	4770      	bx	lr
 800d44a:	bf00      	nop
 800d44c:	58024400 	.word	0x58024400
 800d450:	03d09000 	.word	0x03d09000
 800d454:	46000000 	.word	0x46000000
 800d458:	4c742400 	.word	0x4c742400
 800d45c:	4a742400 	.word	0x4a742400
 800d460:	4af42400 	.word	0x4af42400

0800d464 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d464:	b480      	push	{r7}
 800d466:	b089      	sub	sp, #36	; 0x24
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d46c:	4ba1      	ldr	r3, [pc, #644]	; (800d6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d46e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d470:	f003 0303 	and.w	r3, r3, #3
 800d474:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d476:	4b9f      	ldr	r3, [pc, #636]	; (800d6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d47a:	0d1b      	lsrs	r3, r3, #20
 800d47c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d480:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d482:	4b9c      	ldr	r3, [pc, #624]	; (800d6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d486:	0a1b      	lsrs	r3, r3, #8
 800d488:	f003 0301 	and.w	r3, r3, #1
 800d48c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d48e:	4b99      	ldr	r3, [pc, #612]	; (800d6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d492:	08db      	lsrs	r3, r3, #3
 800d494:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d498:	693a      	ldr	r2, [r7, #16]
 800d49a:	fb02 f303 	mul.w	r3, r2, r3
 800d49e:	ee07 3a90 	vmov	s15, r3
 800d4a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	f000 8111 	beq.w	800d6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d4b2:	69bb      	ldr	r3, [r7, #24]
 800d4b4:	2b02      	cmp	r3, #2
 800d4b6:	f000 8083 	beq.w	800d5c0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d4ba:	69bb      	ldr	r3, [r7, #24]
 800d4bc:	2b02      	cmp	r3, #2
 800d4be:	f200 80a1 	bhi.w	800d604 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d4c2:	69bb      	ldr	r3, [r7, #24]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d003      	beq.n	800d4d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d4c8:	69bb      	ldr	r3, [r7, #24]
 800d4ca:	2b01      	cmp	r3, #1
 800d4cc:	d056      	beq.n	800d57c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d4ce:	e099      	b.n	800d604 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d4d0:	4b88      	ldr	r3, [pc, #544]	; (800d6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	f003 0320 	and.w	r3, r3, #32
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d02d      	beq.n	800d538 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d4dc:	4b85      	ldr	r3, [pc, #532]	; (800d6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	08db      	lsrs	r3, r3, #3
 800d4e2:	f003 0303 	and.w	r3, r3, #3
 800d4e6:	4a84      	ldr	r2, [pc, #528]	; (800d6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d4e8:	fa22 f303 	lsr.w	r3, r2, r3
 800d4ec:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	ee07 3a90 	vmov	s15, r3
 800d4f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4f8:	697b      	ldr	r3, [r7, #20]
 800d4fa:	ee07 3a90 	vmov	s15, r3
 800d4fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d506:	4b7b      	ldr	r3, [pc, #492]	; (800d6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d50a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d50e:	ee07 3a90 	vmov	s15, r3
 800d512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d516:	ed97 6a03 	vldr	s12, [r7, #12]
 800d51a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d6fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d51e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d526:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d52a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d52e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d532:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d536:	e087      	b.n	800d648 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	ee07 3a90 	vmov	s15, r3
 800d53e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d542:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d700 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d54a:	4b6a      	ldr	r3, [pc, #424]	; (800d6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d54c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d54e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d552:	ee07 3a90 	vmov	s15, r3
 800d556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d55a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d55e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d6fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d56a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d56e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d572:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d576:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d57a:	e065      	b.n	800d648 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	ee07 3a90 	vmov	s15, r3
 800d582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d586:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d704 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d58a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d58e:	4b59      	ldr	r3, [pc, #356]	; (800d6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d596:	ee07 3a90 	vmov	s15, r3
 800d59a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d59e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d6fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d5a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d5be:	e043      	b.n	800d648 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	ee07 3a90 	vmov	s15, r3
 800d5c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d708 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d5ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5d2:	4b48      	ldr	r3, [pc, #288]	; (800d6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5da:	ee07 3a90 	vmov	s15, r3
 800d5de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d6fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d5ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d602:	e021      	b.n	800d648 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	ee07 3a90 	vmov	s15, r3
 800d60a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d60e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d704 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d616:	4b37      	ldr	r3, [pc, #220]	; (800d6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d61a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d61e:	ee07 3a90 	vmov	s15, r3
 800d622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d626:	ed97 6a03 	vldr	s12, [r7, #12]
 800d62a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d6fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d62e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d63a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d63e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d642:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d646:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d648:	4b2a      	ldr	r3, [pc, #168]	; (800d6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d64a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d64c:	0a5b      	lsrs	r3, r3, #9
 800d64e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d652:	ee07 3a90 	vmov	s15, r3
 800d656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d65a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d65e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d662:	edd7 6a07 	vldr	s13, [r7, #28]
 800d666:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d66a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d66e:	ee17 2a90 	vmov	r2, s15
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d676:	4b1f      	ldr	r3, [pc, #124]	; (800d6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d67a:	0c1b      	lsrs	r3, r3, #16
 800d67c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d680:	ee07 3a90 	vmov	s15, r3
 800d684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d688:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d68c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d690:	edd7 6a07 	vldr	s13, [r7, #28]
 800d694:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d698:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d69c:	ee17 2a90 	vmov	r2, s15
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d6a4:	4b13      	ldr	r3, [pc, #76]	; (800d6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6a8:	0e1b      	lsrs	r3, r3, #24
 800d6aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6ae:	ee07 3a90 	vmov	s15, r3
 800d6b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d6ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d6be:	edd7 6a07 	vldr	s13, [r7, #28]
 800d6c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6ca:	ee17 2a90 	vmov	r2, s15
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d6d2:	e008      	b.n	800d6e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	609a      	str	r2, [r3, #8]
}
 800d6e6:	bf00      	nop
 800d6e8:	3724      	adds	r7, #36	; 0x24
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f0:	4770      	bx	lr
 800d6f2:	bf00      	nop
 800d6f4:	58024400 	.word	0x58024400
 800d6f8:	03d09000 	.word	0x03d09000
 800d6fc:	46000000 	.word	0x46000000
 800d700:	4c742400 	.word	0x4c742400
 800d704:	4a742400 	.word	0x4a742400
 800d708:	4af42400 	.word	0x4af42400

0800d70c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d70c:	b480      	push	{r7}
 800d70e:	b089      	sub	sp, #36	; 0x24
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d714:	4ba0      	ldr	r3, [pc, #640]	; (800d998 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d718:	f003 0303 	and.w	r3, r3, #3
 800d71c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d71e:	4b9e      	ldr	r3, [pc, #632]	; (800d998 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d722:	091b      	lsrs	r3, r3, #4
 800d724:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d728:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d72a:	4b9b      	ldr	r3, [pc, #620]	; (800d998 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d72c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d72e:	f003 0301 	and.w	r3, r3, #1
 800d732:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d734:	4b98      	ldr	r3, [pc, #608]	; (800d998 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d738:	08db      	lsrs	r3, r3, #3
 800d73a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d73e:	693a      	ldr	r2, [r7, #16]
 800d740:	fb02 f303 	mul.w	r3, r2, r3
 800d744:	ee07 3a90 	vmov	s15, r3
 800d748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d74c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d750:	697b      	ldr	r3, [r7, #20]
 800d752:	2b00      	cmp	r3, #0
 800d754:	f000 8111 	beq.w	800d97a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d758:	69bb      	ldr	r3, [r7, #24]
 800d75a:	2b02      	cmp	r3, #2
 800d75c:	f000 8083 	beq.w	800d866 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d760:	69bb      	ldr	r3, [r7, #24]
 800d762:	2b02      	cmp	r3, #2
 800d764:	f200 80a1 	bhi.w	800d8aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d768:	69bb      	ldr	r3, [r7, #24]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d003      	beq.n	800d776 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d76e:	69bb      	ldr	r3, [r7, #24]
 800d770:	2b01      	cmp	r3, #1
 800d772:	d056      	beq.n	800d822 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d774:	e099      	b.n	800d8aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d776:	4b88      	ldr	r3, [pc, #544]	; (800d998 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	f003 0320 	and.w	r3, r3, #32
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d02d      	beq.n	800d7de <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d782:	4b85      	ldr	r3, [pc, #532]	; (800d998 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	08db      	lsrs	r3, r3, #3
 800d788:	f003 0303 	and.w	r3, r3, #3
 800d78c:	4a83      	ldr	r2, [pc, #524]	; (800d99c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d78e:	fa22 f303 	lsr.w	r3, r2, r3
 800d792:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	ee07 3a90 	vmov	s15, r3
 800d79a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d79e:	697b      	ldr	r3, [r7, #20]
 800d7a0:	ee07 3a90 	vmov	s15, r3
 800d7a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7ac:	4b7a      	ldr	r3, [pc, #488]	; (800d998 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d7ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7b4:	ee07 3a90 	vmov	s15, r3
 800d7b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7bc:	ed97 6a03 	vldr	s12, [r7, #12]
 800d7c0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d9a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d7c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d7d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7d8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d7dc:	e087      	b.n	800d8ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	ee07 3a90 	vmov	s15, r3
 800d7e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7e8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d9a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d7ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7f0:	4b69      	ldr	r3, [pc, #420]	; (800d998 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d7f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7f8:	ee07 3a90 	vmov	s15, r3
 800d7fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d800:	ed97 6a03 	vldr	s12, [r7, #12]
 800d804:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d9a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d808:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d80c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d810:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d814:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d818:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d81c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d820:	e065      	b.n	800d8ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	ee07 3a90 	vmov	s15, r3
 800d828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d82c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d9a8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d830:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d834:	4b58      	ldr	r3, [pc, #352]	; (800d998 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d83c:	ee07 3a90 	vmov	s15, r3
 800d840:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d844:	ed97 6a03 	vldr	s12, [r7, #12]
 800d848:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d9a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d84c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d850:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d854:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d858:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d85c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d860:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d864:	e043      	b.n	800d8ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	ee07 3a90 	vmov	s15, r3
 800d86c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d870:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d9ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d874:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d878:	4b47      	ldr	r3, [pc, #284]	; (800d998 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d87a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d87c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d880:	ee07 3a90 	vmov	s15, r3
 800d884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d888:	ed97 6a03 	vldr	s12, [r7, #12]
 800d88c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d9a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d890:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d894:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d898:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d89c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d8a8:	e021      	b.n	800d8ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d8aa:	697b      	ldr	r3, [r7, #20]
 800d8ac:	ee07 3a90 	vmov	s15, r3
 800d8b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8b4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d9a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d8b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8bc:	4b36      	ldr	r3, [pc, #216]	; (800d998 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8c4:	ee07 3a90 	vmov	s15, r3
 800d8c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800d8d0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d9a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d8d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d8d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d8dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d8e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d8ec:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d8ee:	4b2a      	ldr	r3, [pc, #168]	; (800d998 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8f2:	0a5b      	lsrs	r3, r3, #9
 800d8f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8f8:	ee07 3a90 	vmov	s15, r3
 800d8fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d900:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d904:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d908:	edd7 6a07 	vldr	s13, [r7, #28]
 800d90c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d910:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d914:	ee17 2a90 	vmov	r2, s15
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d91c:	4b1e      	ldr	r3, [pc, #120]	; (800d998 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d91e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d920:	0c1b      	lsrs	r3, r3, #16
 800d922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d926:	ee07 3a90 	vmov	s15, r3
 800d92a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d92e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d932:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d936:	edd7 6a07 	vldr	s13, [r7, #28]
 800d93a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d93e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d942:	ee17 2a90 	vmov	r2, s15
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d94a:	4b13      	ldr	r3, [pc, #76]	; (800d998 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d94c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d94e:	0e1b      	lsrs	r3, r3, #24
 800d950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d954:	ee07 3a90 	vmov	s15, r3
 800d958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d95c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d960:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d964:	edd7 6a07 	vldr	s13, [r7, #28]
 800d968:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d96c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d970:	ee17 2a90 	vmov	r2, s15
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d978:	e008      	b.n	800d98c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2200      	movs	r2, #0
 800d97e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2200      	movs	r2, #0
 800d984:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2200      	movs	r2, #0
 800d98a:	609a      	str	r2, [r3, #8]
}
 800d98c:	bf00      	nop
 800d98e:	3724      	adds	r7, #36	; 0x24
 800d990:	46bd      	mov	sp, r7
 800d992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d996:	4770      	bx	lr
 800d998:	58024400 	.word	0x58024400
 800d99c:	03d09000 	.word	0x03d09000
 800d9a0:	46000000 	.word	0x46000000
 800d9a4:	4c742400 	.word	0x4c742400
 800d9a8:	4a742400 	.word	0x4a742400
 800d9ac:	4af42400 	.word	0x4af42400

0800d9b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b084      	sub	sp, #16
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
 800d9b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d9be:	4b53      	ldr	r3, [pc, #332]	; (800db0c <RCCEx_PLL2_Config+0x15c>)
 800d9c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9c2:	f003 0303 	and.w	r3, r3, #3
 800d9c6:	2b03      	cmp	r3, #3
 800d9c8:	d101      	bne.n	800d9ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	e099      	b.n	800db02 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d9ce:	4b4f      	ldr	r3, [pc, #316]	; (800db0c <RCCEx_PLL2_Config+0x15c>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	4a4e      	ldr	r2, [pc, #312]	; (800db0c <RCCEx_PLL2_Config+0x15c>)
 800d9d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d9d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d9da:	f7f6 fb51 	bl	8004080 <HAL_GetTick>
 800d9de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d9e0:	e008      	b.n	800d9f4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d9e2:	f7f6 fb4d 	bl	8004080 <HAL_GetTick>
 800d9e6:	4602      	mov	r2, r0
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	1ad3      	subs	r3, r2, r3
 800d9ec:	2b02      	cmp	r3, #2
 800d9ee:	d901      	bls.n	800d9f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d9f0:	2303      	movs	r3, #3
 800d9f2:	e086      	b.n	800db02 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d9f4:	4b45      	ldr	r3, [pc, #276]	; (800db0c <RCCEx_PLL2_Config+0x15c>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d1f0      	bne.n	800d9e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800da00:	4b42      	ldr	r3, [pc, #264]	; (800db0c <RCCEx_PLL2_Config+0x15c>)
 800da02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da04:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	031b      	lsls	r3, r3, #12
 800da0e:	493f      	ldr	r1, [pc, #252]	; (800db0c <RCCEx_PLL2_Config+0x15c>)
 800da10:	4313      	orrs	r3, r2
 800da12:	628b      	str	r3, [r1, #40]	; 0x28
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	685b      	ldr	r3, [r3, #4]
 800da18:	3b01      	subs	r3, #1
 800da1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	689b      	ldr	r3, [r3, #8]
 800da22:	3b01      	subs	r3, #1
 800da24:	025b      	lsls	r3, r3, #9
 800da26:	b29b      	uxth	r3, r3
 800da28:	431a      	orrs	r2, r3
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	68db      	ldr	r3, [r3, #12]
 800da2e:	3b01      	subs	r3, #1
 800da30:	041b      	lsls	r3, r3, #16
 800da32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800da36:	431a      	orrs	r2, r3
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	691b      	ldr	r3, [r3, #16]
 800da3c:	3b01      	subs	r3, #1
 800da3e:	061b      	lsls	r3, r3, #24
 800da40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800da44:	4931      	ldr	r1, [pc, #196]	; (800db0c <RCCEx_PLL2_Config+0x15c>)
 800da46:	4313      	orrs	r3, r2
 800da48:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800da4a:	4b30      	ldr	r3, [pc, #192]	; (800db0c <RCCEx_PLL2_Config+0x15c>)
 800da4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	695b      	ldr	r3, [r3, #20]
 800da56:	492d      	ldr	r1, [pc, #180]	; (800db0c <RCCEx_PLL2_Config+0x15c>)
 800da58:	4313      	orrs	r3, r2
 800da5a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800da5c:	4b2b      	ldr	r3, [pc, #172]	; (800db0c <RCCEx_PLL2_Config+0x15c>)
 800da5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da60:	f023 0220 	bic.w	r2, r3, #32
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	699b      	ldr	r3, [r3, #24]
 800da68:	4928      	ldr	r1, [pc, #160]	; (800db0c <RCCEx_PLL2_Config+0x15c>)
 800da6a:	4313      	orrs	r3, r2
 800da6c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800da6e:	4b27      	ldr	r3, [pc, #156]	; (800db0c <RCCEx_PLL2_Config+0x15c>)
 800da70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da72:	4a26      	ldr	r2, [pc, #152]	; (800db0c <RCCEx_PLL2_Config+0x15c>)
 800da74:	f023 0310 	bic.w	r3, r3, #16
 800da78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800da7a:	4b24      	ldr	r3, [pc, #144]	; (800db0c <RCCEx_PLL2_Config+0x15c>)
 800da7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800da7e:	4b24      	ldr	r3, [pc, #144]	; (800db10 <RCCEx_PLL2_Config+0x160>)
 800da80:	4013      	ands	r3, r2
 800da82:	687a      	ldr	r2, [r7, #4]
 800da84:	69d2      	ldr	r2, [r2, #28]
 800da86:	00d2      	lsls	r2, r2, #3
 800da88:	4920      	ldr	r1, [pc, #128]	; (800db0c <RCCEx_PLL2_Config+0x15c>)
 800da8a:	4313      	orrs	r3, r2
 800da8c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800da8e:	4b1f      	ldr	r3, [pc, #124]	; (800db0c <RCCEx_PLL2_Config+0x15c>)
 800da90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da92:	4a1e      	ldr	r2, [pc, #120]	; (800db0c <RCCEx_PLL2_Config+0x15c>)
 800da94:	f043 0310 	orr.w	r3, r3, #16
 800da98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d106      	bne.n	800daae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800daa0:	4b1a      	ldr	r3, [pc, #104]	; (800db0c <RCCEx_PLL2_Config+0x15c>)
 800daa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daa4:	4a19      	ldr	r2, [pc, #100]	; (800db0c <RCCEx_PLL2_Config+0x15c>)
 800daa6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800daaa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800daac:	e00f      	b.n	800dace <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	2b01      	cmp	r3, #1
 800dab2:	d106      	bne.n	800dac2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800dab4:	4b15      	ldr	r3, [pc, #84]	; (800db0c <RCCEx_PLL2_Config+0x15c>)
 800dab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dab8:	4a14      	ldr	r2, [pc, #80]	; (800db0c <RCCEx_PLL2_Config+0x15c>)
 800daba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dabe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dac0:	e005      	b.n	800dace <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800dac2:	4b12      	ldr	r3, [pc, #72]	; (800db0c <RCCEx_PLL2_Config+0x15c>)
 800dac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dac6:	4a11      	ldr	r2, [pc, #68]	; (800db0c <RCCEx_PLL2_Config+0x15c>)
 800dac8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dacc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800dace:	4b0f      	ldr	r3, [pc, #60]	; (800db0c <RCCEx_PLL2_Config+0x15c>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	4a0e      	ldr	r2, [pc, #56]	; (800db0c <RCCEx_PLL2_Config+0x15c>)
 800dad4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dad8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dada:	f7f6 fad1 	bl	8004080 <HAL_GetTick>
 800dade:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dae0:	e008      	b.n	800daf4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dae2:	f7f6 facd 	bl	8004080 <HAL_GetTick>
 800dae6:	4602      	mov	r2, r0
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	1ad3      	subs	r3, r2, r3
 800daec:	2b02      	cmp	r3, #2
 800daee:	d901      	bls.n	800daf4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800daf0:	2303      	movs	r3, #3
 800daf2:	e006      	b.n	800db02 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800daf4:	4b05      	ldr	r3, [pc, #20]	; (800db0c <RCCEx_PLL2_Config+0x15c>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d0f0      	beq.n	800dae2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800db00:	7bfb      	ldrb	r3, [r7, #15]
}
 800db02:	4618      	mov	r0, r3
 800db04:	3710      	adds	r7, #16
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}
 800db0a:	bf00      	nop
 800db0c:	58024400 	.word	0x58024400
 800db10:	ffff0007 	.word	0xffff0007

0800db14 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b084      	sub	sp, #16
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
 800db1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800db1e:	2300      	movs	r3, #0
 800db20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800db22:	4b53      	ldr	r3, [pc, #332]	; (800dc70 <RCCEx_PLL3_Config+0x15c>)
 800db24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db26:	f003 0303 	and.w	r3, r3, #3
 800db2a:	2b03      	cmp	r3, #3
 800db2c:	d101      	bne.n	800db32 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800db2e:	2301      	movs	r3, #1
 800db30:	e099      	b.n	800dc66 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800db32:	4b4f      	ldr	r3, [pc, #316]	; (800dc70 <RCCEx_PLL3_Config+0x15c>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	4a4e      	ldr	r2, [pc, #312]	; (800dc70 <RCCEx_PLL3_Config+0x15c>)
 800db38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800db3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800db3e:	f7f6 fa9f 	bl	8004080 <HAL_GetTick>
 800db42:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800db44:	e008      	b.n	800db58 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800db46:	f7f6 fa9b 	bl	8004080 <HAL_GetTick>
 800db4a:	4602      	mov	r2, r0
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	1ad3      	subs	r3, r2, r3
 800db50:	2b02      	cmp	r3, #2
 800db52:	d901      	bls.n	800db58 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800db54:	2303      	movs	r3, #3
 800db56:	e086      	b.n	800dc66 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800db58:	4b45      	ldr	r3, [pc, #276]	; (800dc70 <RCCEx_PLL3_Config+0x15c>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800db60:	2b00      	cmp	r3, #0
 800db62:	d1f0      	bne.n	800db46 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800db64:	4b42      	ldr	r3, [pc, #264]	; (800dc70 <RCCEx_PLL3_Config+0x15c>)
 800db66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db68:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	051b      	lsls	r3, r3, #20
 800db72:	493f      	ldr	r1, [pc, #252]	; (800dc70 <RCCEx_PLL3_Config+0x15c>)
 800db74:	4313      	orrs	r3, r2
 800db76:	628b      	str	r3, [r1, #40]	; 0x28
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	685b      	ldr	r3, [r3, #4]
 800db7c:	3b01      	subs	r3, #1
 800db7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	689b      	ldr	r3, [r3, #8]
 800db86:	3b01      	subs	r3, #1
 800db88:	025b      	lsls	r3, r3, #9
 800db8a:	b29b      	uxth	r3, r3
 800db8c:	431a      	orrs	r2, r3
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	68db      	ldr	r3, [r3, #12]
 800db92:	3b01      	subs	r3, #1
 800db94:	041b      	lsls	r3, r3, #16
 800db96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800db9a:	431a      	orrs	r2, r3
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	691b      	ldr	r3, [r3, #16]
 800dba0:	3b01      	subs	r3, #1
 800dba2:	061b      	lsls	r3, r3, #24
 800dba4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800dba8:	4931      	ldr	r1, [pc, #196]	; (800dc70 <RCCEx_PLL3_Config+0x15c>)
 800dbaa:	4313      	orrs	r3, r2
 800dbac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800dbae:	4b30      	ldr	r3, [pc, #192]	; (800dc70 <RCCEx_PLL3_Config+0x15c>)
 800dbb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbb2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	695b      	ldr	r3, [r3, #20]
 800dbba:	492d      	ldr	r1, [pc, #180]	; (800dc70 <RCCEx_PLL3_Config+0x15c>)
 800dbbc:	4313      	orrs	r3, r2
 800dbbe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800dbc0:	4b2b      	ldr	r3, [pc, #172]	; (800dc70 <RCCEx_PLL3_Config+0x15c>)
 800dbc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbc4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	699b      	ldr	r3, [r3, #24]
 800dbcc:	4928      	ldr	r1, [pc, #160]	; (800dc70 <RCCEx_PLL3_Config+0x15c>)
 800dbce:	4313      	orrs	r3, r2
 800dbd0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800dbd2:	4b27      	ldr	r3, [pc, #156]	; (800dc70 <RCCEx_PLL3_Config+0x15c>)
 800dbd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbd6:	4a26      	ldr	r2, [pc, #152]	; (800dc70 <RCCEx_PLL3_Config+0x15c>)
 800dbd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dbdc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800dbde:	4b24      	ldr	r3, [pc, #144]	; (800dc70 <RCCEx_PLL3_Config+0x15c>)
 800dbe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dbe2:	4b24      	ldr	r3, [pc, #144]	; (800dc74 <RCCEx_PLL3_Config+0x160>)
 800dbe4:	4013      	ands	r3, r2
 800dbe6:	687a      	ldr	r2, [r7, #4]
 800dbe8:	69d2      	ldr	r2, [r2, #28]
 800dbea:	00d2      	lsls	r2, r2, #3
 800dbec:	4920      	ldr	r1, [pc, #128]	; (800dc70 <RCCEx_PLL3_Config+0x15c>)
 800dbee:	4313      	orrs	r3, r2
 800dbf0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800dbf2:	4b1f      	ldr	r3, [pc, #124]	; (800dc70 <RCCEx_PLL3_Config+0x15c>)
 800dbf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbf6:	4a1e      	ldr	r2, [pc, #120]	; (800dc70 <RCCEx_PLL3_Config+0x15c>)
 800dbf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dbfc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d106      	bne.n	800dc12 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800dc04:	4b1a      	ldr	r3, [pc, #104]	; (800dc70 <RCCEx_PLL3_Config+0x15c>)
 800dc06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc08:	4a19      	ldr	r2, [pc, #100]	; (800dc70 <RCCEx_PLL3_Config+0x15c>)
 800dc0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800dc0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dc10:	e00f      	b.n	800dc32 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	2b01      	cmp	r3, #1
 800dc16:	d106      	bne.n	800dc26 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800dc18:	4b15      	ldr	r3, [pc, #84]	; (800dc70 <RCCEx_PLL3_Config+0x15c>)
 800dc1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc1c:	4a14      	ldr	r2, [pc, #80]	; (800dc70 <RCCEx_PLL3_Config+0x15c>)
 800dc1e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800dc22:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dc24:	e005      	b.n	800dc32 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800dc26:	4b12      	ldr	r3, [pc, #72]	; (800dc70 <RCCEx_PLL3_Config+0x15c>)
 800dc28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc2a:	4a11      	ldr	r2, [pc, #68]	; (800dc70 <RCCEx_PLL3_Config+0x15c>)
 800dc2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800dc30:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800dc32:	4b0f      	ldr	r3, [pc, #60]	; (800dc70 <RCCEx_PLL3_Config+0x15c>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	4a0e      	ldr	r2, [pc, #56]	; (800dc70 <RCCEx_PLL3_Config+0x15c>)
 800dc38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dc3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc3e:	f7f6 fa1f 	bl	8004080 <HAL_GetTick>
 800dc42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dc44:	e008      	b.n	800dc58 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dc46:	f7f6 fa1b 	bl	8004080 <HAL_GetTick>
 800dc4a:	4602      	mov	r2, r0
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	1ad3      	subs	r3, r2, r3
 800dc50:	2b02      	cmp	r3, #2
 800dc52:	d901      	bls.n	800dc58 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dc54:	2303      	movs	r3, #3
 800dc56:	e006      	b.n	800dc66 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dc58:	4b05      	ldr	r3, [pc, #20]	; (800dc70 <RCCEx_PLL3_Config+0x15c>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d0f0      	beq.n	800dc46 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800dc64:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3710      	adds	r7, #16
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}
 800dc6e:	bf00      	nop
 800dc70:	58024400 	.word	0x58024400
 800dc74:	ffff0007 	.word	0xffff0007

0800dc78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b082      	sub	sp, #8
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d101      	bne.n	800dc8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dc86:	2301      	movs	r3, #1
 800dc88:	e049      	b.n	800dd1e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc90:	b2db      	uxtb	r3, r3
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d106      	bne.n	800dca4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2200      	movs	r2, #0
 800dc9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dc9e:	6878      	ldr	r0, [r7, #4]
 800dca0:	f7f5 feda 	bl	8003a58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2202      	movs	r2, #2
 800dca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681a      	ldr	r2, [r3, #0]
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	3304      	adds	r3, #4
 800dcb4:	4619      	mov	r1, r3
 800dcb6:	4610      	mov	r0, r2
 800dcb8:	f000 fbf0 	bl	800e49c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2201      	movs	r2, #1
 800dcc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2201      	movs	r2, #1
 800dcc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2201      	movs	r2, #1
 800dcd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2201      	movs	r2, #1
 800dcd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2201      	movs	r2, #1
 800dce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2201      	movs	r2, #1
 800dce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2201      	movs	r2, #1
 800dcf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2201      	movs	r2, #1
 800dcf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2201      	movs	r2, #1
 800dd00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	2201      	movs	r2, #1
 800dd08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2201      	movs	r2, #1
 800dd10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2201      	movs	r2, #1
 800dd18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dd1c:	2300      	movs	r3, #0
}
 800dd1e:	4618      	mov	r0, r3
 800dd20:	3708      	adds	r7, #8
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}
	...

0800dd28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b084      	sub	sp, #16
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
 800dd30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d109      	bne.n	800dd4c <HAL_TIM_PWM_Start+0x24>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dd3e:	b2db      	uxtb	r3, r3
 800dd40:	2b01      	cmp	r3, #1
 800dd42:	bf14      	ite	ne
 800dd44:	2301      	movne	r3, #1
 800dd46:	2300      	moveq	r3, #0
 800dd48:	b2db      	uxtb	r3, r3
 800dd4a:	e03c      	b.n	800ddc6 <HAL_TIM_PWM_Start+0x9e>
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	2b04      	cmp	r3, #4
 800dd50:	d109      	bne.n	800dd66 <HAL_TIM_PWM_Start+0x3e>
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800dd58:	b2db      	uxtb	r3, r3
 800dd5a:	2b01      	cmp	r3, #1
 800dd5c:	bf14      	ite	ne
 800dd5e:	2301      	movne	r3, #1
 800dd60:	2300      	moveq	r3, #0
 800dd62:	b2db      	uxtb	r3, r3
 800dd64:	e02f      	b.n	800ddc6 <HAL_TIM_PWM_Start+0x9e>
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	2b08      	cmp	r3, #8
 800dd6a:	d109      	bne.n	800dd80 <HAL_TIM_PWM_Start+0x58>
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dd72:	b2db      	uxtb	r3, r3
 800dd74:	2b01      	cmp	r3, #1
 800dd76:	bf14      	ite	ne
 800dd78:	2301      	movne	r3, #1
 800dd7a:	2300      	moveq	r3, #0
 800dd7c:	b2db      	uxtb	r3, r3
 800dd7e:	e022      	b.n	800ddc6 <HAL_TIM_PWM_Start+0x9e>
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	2b0c      	cmp	r3, #12
 800dd84:	d109      	bne.n	800dd9a <HAL_TIM_PWM_Start+0x72>
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dd8c:	b2db      	uxtb	r3, r3
 800dd8e:	2b01      	cmp	r3, #1
 800dd90:	bf14      	ite	ne
 800dd92:	2301      	movne	r3, #1
 800dd94:	2300      	moveq	r3, #0
 800dd96:	b2db      	uxtb	r3, r3
 800dd98:	e015      	b.n	800ddc6 <HAL_TIM_PWM_Start+0x9e>
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	2b10      	cmp	r3, #16
 800dd9e:	d109      	bne.n	800ddb4 <HAL_TIM_PWM_Start+0x8c>
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dda6:	b2db      	uxtb	r3, r3
 800dda8:	2b01      	cmp	r3, #1
 800ddaa:	bf14      	ite	ne
 800ddac:	2301      	movne	r3, #1
 800ddae:	2300      	moveq	r3, #0
 800ddb0:	b2db      	uxtb	r3, r3
 800ddb2:	e008      	b.n	800ddc6 <HAL_TIM_PWM_Start+0x9e>
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ddba:	b2db      	uxtb	r3, r3
 800ddbc:	2b01      	cmp	r3, #1
 800ddbe:	bf14      	ite	ne
 800ddc0:	2301      	movne	r3, #1
 800ddc2:	2300      	moveq	r3, #0
 800ddc4:	b2db      	uxtb	r3, r3
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d001      	beq.n	800ddce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ddca:	2301      	movs	r3, #1
 800ddcc:	e0ab      	b.n	800df26 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d104      	bne.n	800ddde <HAL_TIM_PWM_Start+0xb6>
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	2202      	movs	r2, #2
 800ddd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dddc:	e023      	b.n	800de26 <HAL_TIM_PWM_Start+0xfe>
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	2b04      	cmp	r3, #4
 800dde2:	d104      	bne.n	800ddee <HAL_TIM_PWM_Start+0xc6>
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2202      	movs	r2, #2
 800dde8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ddec:	e01b      	b.n	800de26 <HAL_TIM_PWM_Start+0xfe>
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	2b08      	cmp	r3, #8
 800ddf2:	d104      	bne.n	800ddfe <HAL_TIM_PWM_Start+0xd6>
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2202      	movs	r2, #2
 800ddf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ddfc:	e013      	b.n	800de26 <HAL_TIM_PWM_Start+0xfe>
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	2b0c      	cmp	r3, #12
 800de02:	d104      	bne.n	800de0e <HAL_TIM_PWM_Start+0xe6>
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2202      	movs	r2, #2
 800de08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800de0c:	e00b      	b.n	800de26 <HAL_TIM_PWM_Start+0xfe>
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	2b10      	cmp	r3, #16
 800de12:	d104      	bne.n	800de1e <HAL_TIM_PWM_Start+0xf6>
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2202      	movs	r2, #2
 800de18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800de1c:	e003      	b.n	800de26 <HAL_TIM_PWM_Start+0xfe>
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	2202      	movs	r2, #2
 800de22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	2201      	movs	r2, #1
 800de2c:	6839      	ldr	r1, [r7, #0]
 800de2e:	4618      	mov	r0, r3
 800de30:	f000 ffe6 	bl	800ee00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	4a3d      	ldr	r2, [pc, #244]	; (800df30 <HAL_TIM_PWM_Start+0x208>)
 800de3a:	4293      	cmp	r3, r2
 800de3c:	d013      	beq.n	800de66 <HAL_TIM_PWM_Start+0x13e>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	4a3c      	ldr	r2, [pc, #240]	; (800df34 <HAL_TIM_PWM_Start+0x20c>)
 800de44:	4293      	cmp	r3, r2
 800de46:	d00e      	beq.n	800de66 <HAL_TIM_PWM_Start+0x13e>
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	4a3a      	ldr	r2, [pc, #232]	; (800df38 <HAL_TIM_PWM_Start+0x210>)
 800de4e:	4293      	cmp	r3, r2
 800de50:	d009      	beq.n	800de66 <HAL_TIM_PWM_Start+0x13e>
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	4a39      	ldr	r2, [pc, #228]	; (800df3c <HAL_TIM_PWM_Start+0x214>)
 800de58:	4293      	cmp	r3, r2
 800de5a:	d004      	beq.n	800de66 <HAL_TIM_PWM_Start+0x13e>
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	4a37      	ldr	r2, [pc, #220]	; (800df40 <HAL_TIM_PWM_Start+0x218>)
 800de62:	4293      	cmp	r3, r2
 800de64:	d101      	bne.n	800de6a <HAL_TIM_PWM_Start+0x142>
 800de66:	2301      	movs	r3, #1
 800de68:	e000      	b.n	800de6c <HAL_TIM_PWM_Start+0x144>
 800de6a:	2300      	movs	r3, #0
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d007      	beq.n	800de80 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800de7e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	4a2a      	ldr	r2, [pc, #168]	; (800df30 <HAL_TIM_PWM_Start+0x208>)
 800de86:	4293      	cmp	r3, r2
 800de88:	d02c      	beq.n	800dee4 <HAL_TIM_PWM_Start+0x1bc>
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de92:	d027      	beq.n	800dee4 <HAL_TIM_PWM_Start+0x1bc>
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	4a2a      	ldr	r2, [pc, #168]	; (800df44 <HAL_TIM_PWM_Start+0x21c>)
 800de9a:	4293      	cmp	r3, r2
 800de9c:	d022      	beq.n	800dee4 <HAL_TIM_PWM_Start+0x1bc>
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	4a29      	ldr	r2, [pc, #164]	; (800df48 <HAL_TIM_PWM_Start+0x220>)
 800dea4:	4293      	cmp	r3, r2
 800dea6:	d01d      	beq.n	800dee4 <HAL_TIM_PWM_Start+0x1bc>
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	4a27      	ldr	r2, [pc, #156]	; (800df4c <HAL_TIM_PWM_Start+0x224>)
 800deae:	4293      	cmp	r3, r2
 800deb0:	d018      	beq.n	800dee4 <HAL_TIM_PWM_Start+0x1bc>
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	4a1f      	ldr	r2, [pc, #124]	; (800df34 <HAL_TIM_PWM_Start+0x20c>)
 800deb8:	4293      	cmp	r3, r2
 800deba:	d013      	beq.n	800dee4 <HAL_TIM_PWM_Start+0x1bc>
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	4a23      	ldr	r2, [pc, #140]	; (800df50 <HAL_TIM_PWM_Start+0x228>)
 800dec2:	4293      	cmp	r3, r2
 800dec4:	d00e      	beq.n	800dee4 <HAL_TIM_PWM_Start+0x1bc>
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	4a1b      	ldr	r2, [pc, #108]	; (800df38 <HAL_TIM_PWM_Start+0x210>)
 800decc:	4293      	cmp	r3, r2
 800dece:	d009      	beq.n	800dee4 <HAL_TIM_PWM_Start+0x1bc>
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	4a1f      	ldr	r2, [pc, #124]	; (800df54 <HAL_TIM_PWM_Start+0x22c>)
 800ded6:	4293      	cmp	r3, r2
 800ded8:	d004      	beq.n	800dee4 <HAL_TIM_PWM_Start+0x1bc>
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	4a1e      	ldr	r2, [pc, #120]	; (800df58 <HAL_TIM_PWM_Start+0x230>)
 800dee0:	4293      	cmp	r3, r2
 800dee2:	d115      	bne.n	800df10 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	689a      	ldr	r2, [r3, #8]
 800deea:	4b1c      	ldr	r3, [pc, #112]	; (800df5c <HAL_TIM_PWM_Start+0x234>)
 800deec:	4013      	ands	r3, r2
 800deee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	2b06      	cmp	r3, #6
 800def4:	d015      	beq.n	800df22 <HAL_TIM_PWM_Start+0x1fa>
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800defc:	d011      	beq.n	800df22 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	681a      	ldr	r2, [r3, #0]
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	f042 0201 	orr.w	r2, r2, #1
 800df0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df0e:	e008      	b.n	800df22 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	681a      	ldr	r2, [r3, #0]
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	f042 0201 	orr.w	r2, r2, #1
 800df1e:	601a      	str	r2, [r3, #0]
 800df20:	e000      	b.n	800df24 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800df24:	2300      	movs	r3, #0
}
 800df26:	4618      	mov	r0, r3
 800df28:	3710      	adds	r7, #16
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd80      	pop	{r7, pc}
 800df2e:	bf00      	nop
 800df30:	40010000 	.word	0x40010000
 800df34:	40010400 	.word	0x40010400
 800df38:	40014000 	.word	0x40014000
 800df3c:	40014400 	.word	0x40014400
 800df40:	40014800 	.word	0x40014800
 800df44:	40000400 	.word	0x40000400
 800df48:	40000800 	.word	0x40000800
 800df4c:	40000c00 	.word	0x40000c00
 800df50:	40001800 	.word	0x40001800
 800df54:	4000e000 	.word	0x4000e000
 800df58:	4000e400 	.word	0x4000e400
 800df5c:	00010007 	.word	0x00010007

0800df60 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b082      	sub	sp, #8
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
 800df68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	2200      	movs	r2, #0
 800df70:	6839      	ldr	r1, [r7, #0]
 800df72:	4618      	mov	r0, r3
 800df74:	f000 ff44 	bl	800ee00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	4a3e      	ldr	r2, [pc, #248]	; (800e078 <HAL_TIM_PWM_Stop+0x118>)
 800df7e:	4293      	cmp	r3, r2
 800df80:	d013      	beq.n	800dfaa <HAL_TIM_PWM_Stop+0x4a>
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	4a3d      	ldr	r2, [pc, #244]	; (800e07c <HAL_TIM_PWM_Stop+0x11c>)
 800df88:	4293      	cmp	r3, r2
 800df8a:	d00e      	beq.n	800dfaa <HAL_TIM_PWM_Stop+0x4a>
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	4a3b      	ldr	r2, [pc, #236]	; (800e080 <HAL_TIM_PWM_Stop+0x120>)
 800df92:	4293      	cmp	r3, r2
 800df94:	d009      	beq.n	800dfaa <HAL_TIM_PWM_Stop+0x4a>
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	4a3a      	ldr	r2, [pc, #232]	; (800e084 <HAL_TIM_PWM_Stop+0x124>)
 800df9c:	4293      	cmp	r3, r2
 800df9e:	d004      	beq.n	800dfaa <HAL_TIM_PWM_Stop+0x4a>
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	4a38      	ldr	r2, [pc, #224]	; (800e088 <HAL_TIM_PWM_Stop+0x128>)
 800dfa6:	4293      	cmp	r3, r2
 800dfa8:	d101      	bne.n	800dfae <HAL_TIM_PWM_Stop+0x4e>
 800dfaa:	2301      	movs	r3, #1
 800dfac:	e000      	b.n	800dfb0 <HAL_TIM_PWM_Stop+0x50>
 800dfae:	2300      	movs	r3, #0
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d017      	beq.n	800dfe4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	6a1a      	ldr	r2, [r3, #32]
 800dfba:	f241 1311 	movw	r3, #4369	; 0x1111
 800dfbe:	4013      	ands	r3, r2
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d10f      	bne.n	800dfe4 <HAL_TIM_PWM_Stop+0x84>
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	6a1a      	ldr	r2, [r3, #32]
 800dfca:	f240 4344 	movw	r3, #1092	; 0x444
 800dfce:	4013      	ands	r3, r2
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d107      	bne.n	800dfe4 <HAL_TIM_PWM_Stop+0x84>
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dfe2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	6a1a      	ldr	r2, [r3, #32]
 800dfea:	f241 1311 	movw	r3, #4369	; 0x1111
 800dfee:	4013      	ands	r3, r2
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d10f      	bne.n	800e014 <HAL_TIM_PWM_Stop+0xb4>
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	6a1a      	ldr	r2, [r3, #32]
 800dffa:	f240 4344 	movw	r3, #1092	; 0x444
 800dffe:	4013      	ands	r3, r2
 800e000:	2b00      	cmp	r3, #0
 800e002:	d107      	bne.n	800e014 <HAL_TIM_PWM_Stop+0xb4>
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	681a      	ldr	r2, [r3, #0]
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	f022 0201 	bic.w	r2, r2, #1
 800e012:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d104      	bne.n	800e024 <HAL_TIM_PWM_Stop+0xc4>
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2201      	movs	r2, #1
 800e01e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e022:	e023      	b.n	800e06c <HAL_TIM_PWM_Stop+0x10c>
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	2b04      	cmp	r3, #4
 800e028:	d104      	bne.n	800e034 <HAL_TIM_PWM_Stop+0xd4>
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2201      	movs	r2, #1
 800e02e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e032:	e01b      	b.n	800e06c <HAL_TIM_PWM_Stop+0x10c>
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	2b08      	cmp	r3, #8
 800e038:	d104      	bne.n	800e044 <HAL_TIM_PWM_Stop+0xe4>
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	2201      	movs	r2, #1
 800e03e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e042:	e013      	b.n	800e06c <HAL_TIM_PWM_Stop+0x10c>
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	2b0c      	cmp	r3, #12
 800e048:	d104      	bne.n	800e054 <HAL_TIM_PWM_Stop+0xf4>
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2201      	movs	r2, #1
 800e04e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e052:	e00b      	b.n	800e06c <HAL_TIM_PWM_Stop+0x10c>
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	2b10      	cmp	r3, #16
 800e058:	d104      	bne.n	800e064 <HAL_TIM_PWM_Stop+0x104>
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2201      	movs	r2, #1
 800e05e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e062:	e003      	b.n	800e06c <HAL_TIM_PWM_Stop+0x10c>
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2201      	movs	r2, #1
 800e068:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800e06c:	2300      	movs	r3, #0
}
 800e06e:	4618      	mov	r0, r3
 800e070:	3708      	adds	r7, #8
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}
 800e076:	bf00      	nop
 800e078:	40010000 	.word	0x40010000
 800e07c:	40010400 	.word	0x40010400
 800e080:	40014000 	.word	0x40014000
 800e084:	40014400 	.word	0x40014400
 800e088:	40014800 	.word	0x40014800

0800e08c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b082      	sub	sp, #8
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d101      	bne.n	800e09e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800e09a:	2301      	movs	r3, #1
 800e09c:	e049      	b.n	800e132 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e0a4:	b2db      	uxtb	r3, r3
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d106      	bne.n	800e0b8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	f7f5 fd1e 	bl	8003af4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2202      	movs	r2, #2
 800e0bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681a      	ldr	r2, [r3, #0]
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	3304      	adds	r3, #4
 800e0c8:	4619      	mov	r1, r3
 800e0ca:	4610      	mov	r0, r2
 800e0cc:	f000 f9e6 	bl	800e49c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2201      	movs	r2, #1
 800e0d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2201      	movs	r2, #1
 800e0dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	2201      	movs	r2, #1
 800e0e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2201      	movs	r2, #1
 800e0ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2201      	movs	r2, #1
 800e0f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2201      	movs	r2, #1
 800e0fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2201      	movs	r2, #1
 800e104:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2201      	movs	r2, #1
 800e10c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2201      	movs	r2, #1
 800e114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2201      	movs	r2, #1
 800e11c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2201      	movs	r2, #1
 800e124:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2201      	movs	r2, #1
 800e12c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e130:	2300      	movs	r3, #0
}
 800e132:	4618      	mov	r0, r3
 800e134:	3708      	adds	r7, #8
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}

0800e13a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800e13a:	b580      	push	{r7, lr}
 800e13c:	b086      	sub	sp, #24
 800e13e:	af00      	add	r7, sp, #0
 800e140:	60f8      	str	r0, [r7, #12]
 800e142:	60b9      	str	r1, [r7, #8]
 800e144:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e146:	2300      	movs	r3, #0
 800e148:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e150:	2b01      	cmp	r3, #1
 800e152:	d101      	bne.n	800e158 <HAL_TIM_IC_ConfigChannel+0x1e>
 800e154:	2302      	movs	r3, #2
 800e156:	e088      	b.n	800e26a <HAL_TIM_IC_ConfigChannel+0x130>
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	2201      	movs	r2, #1
 800e15c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d11b      	bne.n	800e19e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e16a:	68bb      	ldr	r3, [r7, #8]
 800e16c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e172:	68bb      	ldr	r3, [r7, #8]
 800e174:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800e176:	f000 fd0d 	bl	800eb94 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	699a      	ldr	r2, [r3, #24]
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	f022 020c 	bic.w	r2, r2, #12
 800e188:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	6999      	ldr	r1, [r3, #24]
 800e190:	68bb      	ldr	r3, [r7, #8]
 800e192:	689a      	ldr	r2, [r3, #8]
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	430a      	orrs	r2, r1
 800e19a:	619a      	str	r2, [r3, #24]
 800e19c:	e060      	b.n	800e260 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2b04      	cmp	r3, #4
 800e1a2:	d11c      	bne.n	800e1de <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800e1b4:	f000 fd6e 	bl	800ec94 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	699a      	ldr	r2, [r3, #24]
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800e1c6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	6999      	ldr	r1, [r3, #24]
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	689b      	ldr	r3, [r3, #8]
 800e1d2:	021a      	lsls	r2, r3, #8
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	430a      	orrs	r2, r1
 800e1da:	619a      	str	r2, [r3, #24]
 800e1dc:	e040      	b.n	800e260 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	2b08      	cmp	r3, #8
 800e1e2:	d11b      	bne.n	800e21c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e1ec:	68bb      	ldr	r3, [r7, #8]
 800e1ee:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800e1f4:	f000 fd8b 	bl	800ed0e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	69da      	ldr	r2, [r3, #28]
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	f022 020c 	bic.w	r2, r2, #12
 800e206:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	69d9      	ldr	r1, [r3, #28]
 800e20e:	68bb      	ldr	r3, [r7, #8]
 800e210:	689a      	ldr	r2, [r3, #8]
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	430a      	orrs	r2, r1
 800e218:	61da      	str	r2, [r3, #28]
 800e21a:	e021      	b.n	800e260 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2b0c      	cmp	r3, #12
 800e220:	d11c      	bne.n	800e25c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e226:	68bb      	ldr	r3, [r7, #8]
 800e228:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e22e:	68bb      	ldr	r3, [r7, #8]
 800e230:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800e232:	f000 fda8 	bl	800ed86 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	69da      	ldr	r2, [r3, #28]
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800e244:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	69d9      	ldr	r1, [r3, #28]
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	689b      	ldr	r3, [r3, #8]
 800e250:	021a      	lsls	r2, r3, #8
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	430a      	orrs	r2, r1
 800e258:	61da      	str	r2, [r3, #28]
 800e25a:	e001      	b.n	800e260 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800e25c:	2301      	movs	r3, #1
 800e25e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	2200      	movs	r2, #0
 800e264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e268:	7dfb      	ldrb	r3, [r7, #23]
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3718      	adds	r7, #24
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}
	...

0800e274 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b086      	sub	sp, #24
 800e278:	af00      	add	r7, sp, #0
 800e27a:	60f8      	str	r0, [r7, #12]
 800e27c:	60b9      	str	r1, [r7, #8]
 800e27e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e280:	2300      	movs	r3, #0
 800e282:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e28a:	2b01      	cmp	r3, #1
 800e28c:	d101      	bne.n	800e292 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e28e:	2302      	movs	r3, #2
 800e290:	e0ff      	b.n	800e492 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	2201      	movs	r2, #1
 800e296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	2b14      	cmp	r3, #20
 800e29e:	f200 80f0 	bhi.w	800e482 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e2a2:	a201      	add	r2, pc, #4	; (adr r2, 800e2a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e2a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2a8:	0800e2fd 	.word	0x0800e2fd
 800e2ac:	0800e483 	.word	0x0800e483
 800e2b0:	0800e483 	.word	0x0800e483
 800e2b4:	0800e483 	.word	0x0800e483
 800e2b8:	0800e33d 	.word	0x0800e33d
 800e2bc:	0800e483 	.word	0x0800e483
 800e2c0:	0800e483 	.word	0x0800e483
 800e2c4:	0800e483 	.word	0x0800e483
 800e2c8:	0800e37f 	.word	0x0800e37f
 800e2cc:	0800e483 	.word	0x0800e483
 800e2d0:	0800e483 	.word	0x0800e483
 800e2d4:	0800e483 	.word	0x0800e483
 800e2d8:	0800e3bf 	.word	0x0800e3bf
 800e2dc:	0800e483 	.word	0x0800e483
 800e2e0:	0800e483 	.word	0x0800e483
 800e2e4:	0800e483 	.word	0x0800e483
 800e2e8:	0800e401 	.word	0x0800e401
 800e2ec:	0800e483 	.word	0x0800e483
 800e2f0:	0800e483 	.word	0x0800e483
 800e2f4:	0800e483 	.word	0x0800e483
 800e2f8:	0800e441 	.word	0x0800e441
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	68b9      	ldr	r1, [r7, #8]
 800e302:	4618      	mov	r0, r3
 800e304:	f000 f970 	bl	800e5e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	699a      	ldr	r2, [r3, #24]
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	f042 0208 	orr.w	r2, r2, #8
 800e316:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	699a      	ldr	r2, [r3, #24]
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	f022 0204 	bic.w	r2, r2, #4
 800e326:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	6999      	ldr	r1, [r3, #24]
 800e32e:	68bb      	ldr	r3, [r7, #8]
 800e330:	691a      	ldr	r2, [r3, #16]
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	430a      	orrs	r2, r1
 800e338:	619a      	str	r2, [r3, #24]
      break;
 800e33a:	e0a5      	b.n	800e488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	68b9      	ldr	r1, [r7, #8]
 800e342:	4618      	mov	r0, r3
 800e344:	f000 f9e0 	bl	800e708 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	699a      	ldr	r2, [r3, #24]
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e356:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	699a      	ldr	r2, [r3, #24]
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e366:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	6999      	ldr	r1, [r3, #24]
 800e36e:	68bb      	ldr	r3, [r7, #8]
 800e370:	691b      	ldr	r3, [r3, #16]
 800e372:	021a      	lsls	r2, r3, #8
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	430a      	orrs	r2, r1
 800e37a:	619a      	str	r2, [r3, #24]
      break;
 800e37c:	e084      	b.n	800e488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	68b9      	ldr	r1, [r7, #8]
 800e384:	4618      	mov	r0, r3
 800e386:	f000 fa49 	bl	800e81c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	69da      	ldr	r2, [r3, #28]
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	f042 0208 	orr.w	r2, r2, #8
 800e398:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	69da      	ldr	r2, [r3, #28]
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	f022 0204 	bic.w	r2, r2, #4
 800e3a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	69d9      	ldr	r1, [r3, #28]
 800e3b0:	68bb      	ldr	r3, [r7, #8]
 800e3b2:	691a      	ldr	r2, [r3, #16]
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	430a      	orrs	r2, r1
 800e3ba:	61da      	str	r2, [r3, #28]
      break;
 800e3bc:	e064      	b.n	800e488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	68b9      	ldr	r1, [r7, #8]
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f000 fab1 	bl	800e92c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	69da      	ldr	r2, [r3, #28]
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e3d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	69da      	ldr	r2, [r3, #28]
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e3e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	69d9      	ldr	r1, [r3, #28]
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	691b      	ldr	r3, [r3, #16]
 800e3f4:	021a      	lsls	r2, r3, #8
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	430a      	orrs	r2, r1
 800e3fc:	61da      	str	r2, [r3, #28]
      break;
 800e3fe:	e043      	b.n	800e488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	68b9      	ldr	r1, [r7, #8]
 800e406:	4618      	mov	r0, r3
 800e408:	f000 fafa 	bl	800ea00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	f042 0208 	orr.w	r2, r2, #8
 800e41a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	f022 0204 	bic.w	r2, r2, #4
 800e42a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	691a      	ldr	r2, [r3, #16]
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	430a      	orrs	r2, r1
 800e43c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e43e:	e023      	b.n	800e488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	68b9      	ldr	r1, [r7, #8]
 800e446:	4618      	mov	r0, r3
 800e448:	f000 fb3e 	bl	800eac8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e45a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e46a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	691b      	ldr	r3, [r3, #16]
 800e476:	021a      	lsls	r2, r3, #8
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	430a      	orrs	r2, r1
 800e47e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e480:	e002      	b.n	800e488 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e482:	2301      	movs	r3, #1
 800e484:	75fb      	strb	r3, [r7, #23]
      break;
 800e486:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	2200      	movs	r2, #0
 800e48c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e490:	7dfb      	ldrb	r3, [r7, #23]
}
 800e492:	4618      	mov	r0, r3
 800e494:	3718      	adds	r7, #24
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}
 800e49a:	bf00      	nop

0800e49c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e49c:	b480      	push	{r7}
 800e49e:	b085      	sub	sp, #20
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
 800e4a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	4a44      	ldr	r2, [pc, #272]	; (800e5c0 <TIM_Base_SetConfig+0x124>)
 800e4b0:	4293      	cmp	r3, r2
 800e4b2:	d013      	beq.n	800e4dc <TIM_Base_SetConfig+0x40>
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e4ba:	d00f      	beq.n	800e4dc <TIM_Base_SetConfig+0x40>
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	4a41      	ldr	r2, [pc, #260]	; (800e5c4 <TIM_Base_SetConfig+0x128>)
 800e4c0:	4293      	cmp	r3, r2
 800e4c2:	d00b      	beq.n	800e4dc <TIM_Base_SetConfig+0x40>
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	4a40      	ldr	r2, [pc, #256]	; (800e5c8 <TIM_Base_SetConfig+0x12c>)
 800e4c8:	4293      	cmp	r3, r2
 800e4ca:	d007      	beq.n	800e4dc <TIM_Base_SetConfig+0x40>
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	4a3f      	ldr	r2, [pc, #252]	; (800e5cc <TIM_Base_SetConfig+0x130>)
 800e4d0:	4293      	cmp	r3, r2
 800e4d2:	d003      	beq.n	800e4dc <TIM_Base_SetConfig+0x40>
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	4a3e      	ldr	r2, [pc, #248]	; (800e5d0 <TIM_Base_SetConfig+0x134>)
 800e4d8:	4293      	cmp	r3, r2
 800e4da:	d108      	bne.n	800e4ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e4e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	685b      	ldr	r3, [r3, #4]
 800e4e8:	68fa      	ldr	r2, [r7, #12]
 800e4ea:	4313      	orrs	r3, r2
 800e4ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	4a33      	ldr	r2, [pc, #204]	; (800e5c0 <TIM_Base_SetConfig+0x124>)
 800e4f2:	4293      	cmp	r3, r2
 800e4f4:	d027      	beq.n	800e546 <TIM_Base_SetConfig+0xaa>
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e4fc:	d023      	beq.n	800e546 <TIM_Base_SetConfig+0xaa>
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	4a30      	ldr	r2, [pc, #192]	; (800e5c4 <TIM_Base_SetConfig+0x128>)
 800e502:	4293      	cmp	r3, r2
 800e504:	d01f      	beq.n	800e546 <TIM_Base_SetConfig+0xaa>
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	4a2f      	ldr	r2, [pc, #188]	; (800e5c8 <TIM_Base_SetConfig+0x12c>)
 800e50a:	4293      	cmp	r3, r2
 800e50c:	d01b      	beq.n	800e546 <TIM_Base_SetConfig+0xaa>
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	4a2e      	ldr	r2, [pc, #184]	; (800e5cc <TIM_Base_SetConfig+0x130>)
 800e512:	4293      	cmp	r3, r2
 800e514:	d017      	beq.n	800e546 <TIM_Base_SetConfig+0xaa>
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	4a2d      	ldr	r2, [pc, #180]	; (800e5d0 <TIM_Base_SetConfig+0x134>)
 800e51a:	4293      	cmp	r3, r2
 800e51c:	d013      	beq.n	800e546 <TIM_Base_SetConfig+0xaa>
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	4a2c      	ldr	r2, [pc, #176]	; (800e5d4 <TIM_Base_SetConfig+0x138>)
 800e522:	4293      	cmp	r3, r2
 800e524:	d00f      	beq.n	800e546 <TIM_Base_SetConfig+0xaa>
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	4a2b      	ldr	r2, [pc, #172]	; (800e5d8 <TIM_Base_SetConfig+0x13c>)
 800e52a:	4293      	cmp	r3, r2
 800e52c:	d00b      	beq.n	800e546 <TIM_Base_SetConfig+0xaa>
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	4a2a      	ldr	r2, [pc, #168]	; (800e5dc <TIM_Base_SetConfig+0x140>)
 800e532:	4293      	cmp	r3, r2
 800e534:	d007      	beq.n	800e546 <TIM_Base_SetConfig+0xaa>
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	4a29      	ldr	r2, [pc, #164]	; (800e5e0 <TIM_Base_SetConfig+0x144>)
 800e53a:	4293      	cmp	r3, r2
 800e53c:	d003      	beq.n	800e546 <TIM_Base_SetConfig+0xaa>
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	4a28      	ldr	r2, [pc, #160]	; (800e5e4 <TIM_Base_SetConfig+0x148>)
 800e542:	4293      	cmp	r3, r2
 800e544:	d108      	bne.n	800e558 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e54c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	68db      	ldr	r3, [r3, #12]
 800e552:	68fa      	ldr	r2, [r7, #12]
 800e554:	4313      	orrs	r3, r2
 800e556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	695b      	ldr	r3, [r3, #20]
 800e562:	4313      	orrs	r3, r2
 800e564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	68fa      	ldr	r2, [r7, #12]
 800e56a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	689a      	ldr	r2, [r3, #8]
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	681a      	ldr	r2, [r3, #0]
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	4a10      	ldr	r2, [pc, #64]	; (800e5c0 <TIM_Base_SetConfig+0x124>)
 800e580:	4293      	cmp	r3, r2
 800e582:	d00f      	beq.n	800e5a4 <TIM_Base_SetConfig+0x108>
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	4a12      	ldr	r2, [pc, #72]	; (800e5d0 <TIM_Base_SetConfig+0x134>)
 800e588:	4293      	cmp	r3, r2
 800e58a:	d00b      	beq.n	800e5a4 <TIM_Base_SetConfig+0x108>
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	4a11      	ldr	r2, [pc, #68]	; (800e5d4 <TIM_Base_SetConfig+0x138>)
 800e590:	4293      	cmp	r3, r2
 800e592:	d007      	beq.n	800e5a4 <TIM_Base_SetConfig+0x108>
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	4a10      	ldr	r2, [pc, #64]	; (800e5d8 <TIM_Base_SetConfig+0x13c>)
 800e598:	4293      	cmp	r3, r2
 800e59a:	d003      	beq.n	800e5a4 <TIM_Base_SetConfig+0x108>
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	4a0f      	ldr	r2, [pc, #60]	; (800e5dc <TIM_Base_SetConfig+0x140>)
 800e5a0:	4293      	cmp	r3, r2
 800e5a2:	d103      	bne.n	800e5ac <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	691a      	ldr	r2, [r3, #16]
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2201      	movs	r2, #1
 800e5b0:	615a      	str	r2, [r3, #20]
}
 800e5b2:	bf00      	nop
 800e5b4:	3714      	adds	r7, #20
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5bc:	4770      	bx	lr
 800e5be:	bf00      	nop
 800e5c0:	40010000 	.word	0x40010000
 800e5c4:	40000400 	.word	0x40000400
 800e5c8:	40000800 	.word	0x40000800
 800e5cc:	40000c00 	.word	0x40000c00
 800e5d0:	40010400 	.word	0x40010400
 800e5d4:	40014000 	.word	0x40014000
 800e5d8:	40014400 	.word	0x40014400
 800e5dc:	40014800 	.word	0x40014800
 800e5e0:	4000e000 	.word	0x4000e000
 800e5e4:	4000e400 	.word	0x4000e400

0800e5e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e5e8:	b480      	push	{r7}
 800e5ea:	b087      	sub	sp, #28
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
 800e5f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6a1b      	ldr	r3, [r3, #32]
 800e5f6:	f023 0201 	bic.w	r2, r3, #1
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	6a1b      	ldr	r3, [r3, #32]
 800e602:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	685b      	ldr	r3, [r3, #4]
 800e608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	699b      	ldr	r3, [r3, #24]
 800e60e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e610:	68fa      	ldr	r2, [r7, #12]
 800e612:	4b37      	ldr	r3, [pc, #220]	; (800e6f0 <TIM_OC1_SetConfig+0x108>)
 800e614:	4013      	ands	r3, r2
 800e616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	f023 0303 	bic.w	r3, r3, #3
 800e61e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	68fa      	ldr	r2, [r7, #12]
 800e626:	4313      	orrs	r3, r2
 800e628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e62a:	697b      	ldr	r3, [r7, #20]
 800e62c:	f023 0302 	bic.w	r3, r3, #2
 800e630:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e632:	683b      	ldr	r3, [r7, #0]
 800e634:	689b      	ldr	r3, [r3, #8]
 800e636:	697a      	ldr	r2, [r7, #20]
 800e638:	4313      	orrs	r3, r2
 800e63a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	4a2d      	ldr	r2, [pc, #180]	; (800e6f4 <TIM_OC1_SetConfig+0x10c>)
 800e640:	4293      	cmp	r3, r2
 800e642:	d00f      	beq.n	800e664 <TIM_OC1_SetConfig+0x7c>
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	4a2c      	ldr	r2, [pc, #176]	; (800e6f8 <TIM_OC1_SetConfig+0x110>)
 800e648:	4293      	cmp	r3, r2
 800e64a:	d00b      	beq.n	800e664 <TIM_OC1_SetConfig+0x7c>
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	4a2b      	ldr	r2, [pc, #172]	; (800e6fc <TIM_OC1_SetConfig+0x114>)
 800e650:	4293      	cmp	r3, r2
 800e652:	d007      	beq.n	800e664 <TIM_OC1_SetConfig+0x7c>
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	4a2a      	ldr	r2, [pc, #168]	; (800e700 <TIM_OC1_SetConfig+0x118>)
 800e658:	4293      	cmp	r3, r2
 800e65a:	d003      	beq.n	800e664 <TIM_OC1_SetConfig+0x7c>
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	4a29      	ldr	r2, [pc, #164]	; (800e704 <TIM_OC1_SetConfig+0x11c>)
 800e660:	4293      	cmp	r3, r2
 800e662:	d10c      	bne.n	800e67e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e664:	697b      	ldr	r3, [r7, #20]
 800e666:	f023 0308 	bic.w	r3, r3, #8
 800e66a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	68db      	ldr	r3, [r3, #12]
 800e670:	697a      	ldr	r2, [r7, #20]
 800e672:	4313      	orrs	r3, r2
 800e674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	f023 0304 	bic.w	r3, r3, #4
 800e67c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	4a1c      	ldr	r2, [pc, #112]	; (800e6f4 <TIM_OC1_SetConfig+0x10c>)
 800e682:	4293      	cmp	r3, r2
 800e684:	d00f      	beq.n	800e6a6 <TIM_OC1_SetConfig+0xbe>
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	4a1b      	ldr	r2, [pc, #108]	; (800e6f8 <TIM_OC1_SetConfig+0x110>)
 800e68a:	4293      	cmp	r3, r2
 800e68c:	d00b      	beq.n	800e6a6 <TIM_OC1_SetConfig+0xbe>
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	4a1a      	ldr	r2, [pc, #104]	; (800e6fc <TIM_OC1_SetConfig+0x114>)
 800e692:	4293      	cmp	r3, r2
 800e694:	d007      	beq.n	800e6a6 <TIM_OC1_SetConfig+0xbe>
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	4a19      	ldr	r2, [pc, #100]	; (800e700 <TIM_OC1_SetConfig+0x118>)
 800e69a:	4293      	cmp	r3, r2
 800e69c:	d003      	beq.n	800e6a6 <TIM_OC1_SetConfig+0xbe>
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	4a18      	ldr	r2, [pc, #96]	; (800e704 <TIM_OC1_SetConfig+0x11c>)
 800e6a2:	4293      	cmp	r3, r2
 800e6a4:	d111      	bne.n	800e6ca <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e6a6:	693b      	ldr	r3, [r7, #16]
 800e6a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e6ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e6ae:	693b      	ldr	r3, [r7, #16]
 800e6b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e6b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	695b      	ldr	r3, [r3, #20]
 800e6ba:	693a      	ldr	r2, [r7, #16]
 800e6bc:	4313      	orrs	r3, r2
 800e6be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	699b      	ldr	r3, [r3, #24]
 800e6c4:	693a      	ldr	r2, [r7, #16]
 800e6c6:	4313      	orrs	r3, r2
 800e6c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	693a      	ldr	r2, [r7, #16]
 800e6ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	68fa      	ldr	r2, [r7, #12]
 800e6d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	685a      	ldr	r2, [r3, #4]
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	697a      	ldr	r2, [r7, #20]
 800e6e2:	621a      	str	r2, [r3, #32]
}
 800e6e4:	bf00      	nop
 800e6e6:	371c      	adds	r7, #28
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ee:	4770      	bx	lr
 800e6f0:	fffeff8f 	.word	0xfffeff8f
 800e6f4:	40010000 	.word	0x40010000
 800e6f8:	40010400 	.word	0x40010400
 800e6fc:	40014000 	.word	0x40014000
 800e700:	40014400 	.word	0x40014400
 800e704:	40014800 	.word	0x40014800

0800e708 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e708:	b480      	push	{r7}
 800e70a:	b087      	sub	sp, #28
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
 800e710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6a1b      	ldr	r3, [r3, #32]
 800e716:	f023 0210 	bic.w	r2, r3, #16
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	6a1b      	ldr	r3, [r3, #32]
 800e722:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	685b      	ldr	r3, [r3, #4]
 800e728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	699b      	ldr	r3, [r3, #24]
 800e72e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e730:	68fa      	ldr	r2, [r7, #12]
 800e732:	4b34      	ldr	r3, [pc, #208]	; (800e804 <TIM_OC2_SetConfig+0xfc>)
 800e734:	4013      	ands	r3, r2
 800e736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e73e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	021b      	lsls	r3, r3, #8
 800e746:	68fa      	ldr	r2, [r7, #12]
 800e748:	4313      	orrs	r3, r2
 800e74a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e74c:	697b      	ldr	r3, [r7, #20]
 800e74e:	f023 0320 	bic.w	r3, r3, #32
 800e752:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	689b      	ldr	r3, [r3, #8]
 800e758:	011b      	lsls	r3, r3, #4
 800e75a:	697a      	ldr	r2, [r7, #20]
 800e75c:	4313      	orrs	r3, r2
 800e75e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	4a29      	ldr	r2, [pc, #164]	; (800e808 <TIM_OC2_SetConfig+0x100>)
 800e764:	4293      	cmp	r3, r2
 800e766:	d003      	beq.n	800e770 <TIM_OC2_SetConfig+0x68>
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	4a28      	ldr	r2, [pc, #160]	; (800e80c <TIM_OC2_SetConfig+0x104>)
 800e76c:	4293      	cmp	r3, r2
 800e76e:	d10d      	bne.n	800e78c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e770:	697b      	ldr	r3, [r7, #20]
 800e772:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e776:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	68db      	ldr	r3, [r3, #12]
 800e77c:	011b      	lsls	r3, r3, #4
 800e77e:	697a      	ldr	r2, [r7, #20]
 800e780:	4313      	orrs	r3, r2
 800e782:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e784:	697b      	ldr	r3, [r7, #20]
 800e786:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e78a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	4a1e      	ldr	r2, [pc, #120]	; (800e808 <TIM_OC2_SetConfig+0x100>)
 800e790:	4293      	cmp	r3, r2
 800e792:	d00f      	beq.n	800e7b4 <TIM_OC2_SetConfig+0xac>
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	4a1d      	ldr	r2, [pc, #116]	; (800e80c <TIM_OC2_SetConfig+0x104>)
 800e798:	4293      	cmp	r3, r2
 800e79a:	d00b      	beq.n	800e7b4 <TIM_OC2_SetConfig+0xac>
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	4a1c      	ldr	r2, [pc, #112]	; (800e810 <TIM_OC2_SetConfig+0x108>)
 800e7a0:	4293      	cmp	r3, r2
 800e7a2:	d007      	beq.n	800e7b4 <TIM_OC2_SetConfig+0xac>
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	4a1b      	ldr	r2, [pc, #108]	; (800e814 <TIM_OC2_SetConfig+0x10c>)
 800e7a8:	4293      	cmp	r3, r2
 800e7aa:	d003      	beq.n	800e7b4 <TIM_OC2_SetConfig+0xac>
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	4a1a      	ldr	r2, [pc, #104]	; (800e818 <TIM_OC2_SetConfig+0x110>)
 800e7b0:	4293      	cmp	r3, r2
 800e7b2:	d113      	bne.n	800e7dc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e7ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e7bc:	693b      	ldr	r3, [r7, #16]
 800e7be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e7c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	695b      	ldr	r3, [r3, #20]
 800e7c8:	009b      	lsls	r3, r3, #2
 800e7ca:	693a      	ldr	r2, [r7, #16]
 800e7cc:	4313      	orrs	r3, r2
 800e7ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	699b      	ldr	r3, [r3, #24]
 800e7d4:	009b      	lsls	r3, r3, #2
 800e7d6:	693a      	ldr	r2, [r7, #16]
 800e7d8:	4313      	orrs	r3, r2
 800e7da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	693a      	ldr	r2, [r7, #16]
 800e7e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	68fa      	ldr	r2, [r7, #12]
 800e7e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	685a      	ldr	r2, [r3, #4]
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	697a      	ldr	r2, [r7, #20]
 800e7f4:	621a      	str	r2, [r3, #32]
}
 800e7f6:	bf00      	nop
 800e7f8:	371c      	adds	r7, #28
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e800:	4770      	bx	lr
 800e802:	bf00      	nop
 800e804:	feff8fff 	.word	0xfeff8fff
 800e808:	40010000 	.word	0x40010000
 800e80c:	40010400 	.word	0x40010400
 800e810:	40014000 	.word	0x40014000
 800e814:	40014400 	.word	0x40014400
 800e818:	40014800 	.word	0x40014800

0800e81c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e81c:	b480      	push	{r7}
 800e81e:	b087      	sub	sp, #28
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
 800e824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	6a1b      	ldr	r3, [r3, #32]
 800e82a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	6a1b      	ldr	r3, [r3, #32]
 800e836:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	685b      	ldr	r3, [r3, #4]
 800e83c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	69db      	ldr	r3, [r3, #28]
 800e842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e844:	68fa      	ldr	r2, [r7, #12]
 800e846:	4b33      	ldr	r3, [pc, #204]	; (800e914 <TIM_OC3_SetConfig+0xf8>)
 800e848:	4013      	ands	r3, r2
 800e84a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	f023 0303 	bic.w	r3, r3, #3
 800e852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	68fa      	ldr	r2, [r7, #12]
 800e85a:	4313      	orrs	r3, r2
 800e85c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e85e:	697b      	ldr	r3, [r7, #20]
 800e860:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e864:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	689b      	ldr	r3, [r3, #8]
 800e86a:	021b      	lsls	r3, r3, #8
 800e86c:	697a      	ldr	r2, [r7, #20]
 800e86e:	4313      	orrs	r3, r2
 800e870:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	4a28      	ldr	r2, [pc, #160]	; (800e918 <TIM_OC3_SetConfig+0xfc>)
 800e876:	4293      	cmp	r3, r2
 800e878:	d003      	beq.n	800e882 <TIM_OC3_SetConfig+0x66>
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	4a27      	ldr	r2, [pc, #156]	; (800e91c <TIM_OC3_SetConfig+0x100>)
 800e87e:	4293      	cmp	r3, r2
 800e880:	d10d      	bne.n	800e89e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e888:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e88a:	683b      	ldr	r3, [r7, #0]
 800e88c:	68db      	ldr	r3, [r3, #12]
 800e88e:	021b      	lsls	r3, r3, #8
 800e890:	697a      	ldr	r2, [r7, #20]
 800e892:	4313      	orrs	r3, r2
 800e894:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e896:	697b      	ldr	r3, [r7, #20]
 800e898:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e89c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	4a1d      	ldr	r2, [pc, #116]	; (800e918 <TIM_OC3_SetConfig+0xfc>)
 800e8a2:	4293      	cmp	r3, r2
 800e8a4:	d00f      	beq.n	800e8c6 <TIM_OC3_SetConfig+0xaa>
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	4a1c      	ldr	r2, [pc, #112]	; (800e91c <TIM_OC3_SetConfig+0x100>)
 800e8aa:	4293      	cmp	r3, r2
 800e8ac:	d00b      	beq.n	800e8c6 <TIM_OC3_SetConfig+0xaa>
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	4a1b      	ldr	r2, [pc, #108]	; (800e920 <TIM_OC3_SetConfig+0x104>)
 800e8b2:	4293      	cmp	r3, r2
 800e8b4:	d007      	beq.n	800e8c6 <TIM_OC3_SetConfig+0xaa>
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	4a1a      	ldr	r2, [pc, #104]	; (800e924 <TIM_OC3_SetConfig+0x108>)
 800e8ba:	4293      	cmp	r3, r2
 800e8bc:	d003      	beq.n	800e8c6 <TIM_OC3_SetConfig+0xaa>
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	4a19      	ldr	r2, [pc, #100]	; (800e928 <TIM_OC3_SetConfig+0x10c>)
 800e8c2:	4293      	cmp	r3, r2
 800e8c4:	d113      	bne.n	800e8ee <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e8c6:	693b      	ldr	r3, [r7, #16]
 800e8c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e8cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e8ce:	693b      	ldr	r3, [r7, #16]
 800e8d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e8d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e8d6:	683b      	ldr	r3, [r7, #0]
 800e8d8:	695b      	ldr	r3, [r3, #20]
 800e8da:	011b      	lsls	r3, r3, #4
 800e8dc:	693a      	ldr	r2, [r7, #16]
 800e8de:	4313      	orrs	r3, r2
 800e8e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	699b      	ldr	r3, [r3, #24]
 800e8e6:	011b      	lsls	r3, r3, #4
 800e8e8:	693a      	ldr	r2, [r7, #16]
 800e8ea:	4313      	orrs	r3, r2
 800e8ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	693a      	ldr	r2, [r7, #16]
 800e8f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	68fa      	ldr	r2, [r7, #12]
 800e8f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	685a      	ldr	r2, [r3, #4]
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	697a      	ldr	r2, [r7, #20]
 800e906:	621a      	str	r2, [r3, #32]
}
 800e908:	bf00      	nop
 800e90a:	371c      	adds	r7, #28
 800e90c:	46bd      	mov	sp, r7
 800e90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e912:	4770      	bx	lr
 800e914:	fffeff8f 	.word	0xfffeff8f
 800e918:	40010000 	.word	0x40010000
 800e91c:	40010400 	.word	0x40010400
 800e920:	40014000 	.word	0x40014000
 800e924:	40014400 	.word	0x40014400
 800e928:	40014800 	.word	0x40014800

0800e92c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e92c:	b480      	push	{r7}
 800e92e:	b087      	sub	sp, #28
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
 800e934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6a1b      	ldr	r3, [r3, #32]
 800e93a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	6a1b      	ldr	r3, [r3, #32]
 800e946:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	685b      	ldr	r3, [r3, #4]
 800e94c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	69db      	ldr	r3, [r3, #28]
 800e952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e954:	68fa      	ldr	r2, [r7, #12]
 800e956:	4b24      	ldr	r3, [pc, #144]	; (800e9e8 <TIM_OC4_SetConfig+0xbc>)
 800e958:	4013      	ands	r3, r2
 800e95a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e964:	683b      	ldr	r3, [r7, #0]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	021b      	lsls	r3, r3, #8
 800e96a:	68fa      	ldr	r2, [r7, #12]
 800e96c:	4313      	orrs	r3, r2
 800e96e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e970:	693b      	ldr	r3, [r7, #16]
 800e972:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e976:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	689b      	ldr	r3, [r3, #8]
 800e97c:	031b      	lsls	r3, r3, #12
 800e97e:	693a      	ldr	r2, [r7, #16]
 800e980:	4313      	orrs	r3, r2
 800e982:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	4a19      	ldr	r2, [pc, #100]	; (800e9ec <TIM_OC4_SetConfig+0xc0>)
 800e988:	4293      	cmp	r3, r2
 800e98a:	d00f      	beq.n	800e9ac <TIM_OC4_SetConfig+0x80>
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	4a18      	ldr	r2, [pc, #96]	; (800e9f0 <TIM_OC4_SetConfig+0xc4>)
 800e990:	4293      	cmp	r3, r2
 800e992:	d00b      	beq.n	800e9ac <TIM_OC4_SetConfig+0x80>
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	4a17      	ldr	r2, [pc, #92]	; (800e9f4 <TIM_OC4_SetConfig+0xc8>)
 800e998:	4293      	cmp	r3, r2
 800e99a:	d007      	beq.n	800e9ac <TIM_OC4_SetConfig+0x80>
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	4a16      	ldr	r2, [pc, #88]	; (800e9f8 <TIM_OC4_SetConfig+0xcc>)
 800e9a0:	4293      	cmp	r3, r2
 800e9a2:	d003      	beq.n	800e9ac <TIM_OC4_SetConfig+0x80>
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	4a15      	ldr	r2, [pc, #84]	; (800e9fc <TIM_OC4_SetConfig+0xd0>)
 800e9a8:	4293      	cmp	r3, r2
 800e9aa:	d109      	bne.n	800e9c0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e9ac:	697b      	ldr	r3, [r7, #20]
 800e9ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e9b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	695b      	ldr	r3, [r3, #20]
 800e9b8:	019b      	lsls	r3, r3, #6
 800e9ba:	697a      	ldr	r2, [r7, #20]
 800e9bc:	4313      	orrs	r3, r2
 800e9be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	697a      	ldr	r2, [r7, #20]
 800e9c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	68fa      	ldr	r2, [r7, #12]
 800e9ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	685a      	ldr	r2, [r3, #4]
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	693a      	ldr	r2, [r7, #16]
 800e9d8:	621a      	str	r2, [r3, #32]
}
 800e9da:	bf00      	nop
 800e9dc:	371c      	adds	r7, #28
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e4:	4770      	bx	lr
 800e9e6:	bf00      	nop
 800e9e8:	feff8fff 	.word	0xfeff8fff
 800e9ec:	40010000 	.word	0x40010000
 800e9f0:	40010400 	.word	0x40010400
 800e9f4:	40014000 	.word	0x40014000
 800e9f8:	40014400 	.word	0x40014400
 800e9fc:	40014800 	.word	0x40014800

0800ea00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ea00:	b480      	push	{r7}
 800ea02:	b087      	sub	sp, #28
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
 800ea08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	6a1b      	ldr	r3, [r3, #32]
 800ea0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	6a1b      	ldr	r3, [r3, #32]
 800ea1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	685b      	ldr	r3, [r3, #4]
 800ea20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ea28:	68fa      	ldr	r2, [r7, #12]
 800ea2a:	4b21      	ldr	r3, [pc, #132]	; (800eab0 <TIM_OC5_SetConfig+0xb0>)
 800ea2c:	4013      	ands	r3, r2
 800ea2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	68fa      	ldr	r2, [r7, #12]
 800ea36:	4313      	orrs	r3, r2
 800ea38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ea3a:	693b      	ldr	r3, [r7, #16]
 800ea3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ea40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	689b      	ldr	r3, [r3, #8]
 800ea46:	041b      	lsls	r3, r3, #16
 800ea48:	693a      	ldr	r2, [r7, #16]
 800ea4a:	4313      	orrs	r3, r2
 800ea4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	4a18      	ldr	r2, [pc, #96]	; (800eab4 <TIM_OC5_SetConfig+0xb4>)
 800ea52:	4293      	cmp	r3, r2
 800ea54:	d00f      	beq.n	800ea76 <TIM_OC5_SetConfig+0x76>
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	4a17      	ldr	r2, [pc, #92]	; (800eab8 <TIM_OC5_SetConfig+0xb8>)
 800ea5a:	4293      	cmp	r3, r2
 800ea5c:	d00b      	beq.n	800ea76 <TIM_OC5_SetConfig+0x76>
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	4a16      	ldr	r2, [pc, #88]	; (800eabc <TIM_OC5_SetConfig+0xbc>)
 800ea62:	4293      	cmp	r3, r2
 800ea64:	d007      	beq.n	800ea76 <TIM_OC5_SetConfig+0x76>
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	4a15      	ldr	r2, [pc, #84]	; (800eac0 <TIM_OC5_SetConfig+0xc0>)
 800ea6a:	4293      	cmp	r3, r2
 800ea6c:	d003      	beq.n	800ea76 <TIM_OC5_SetConfig+0x76>
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	4a14      	ldr	r2, [pc, #80]	; (800eac4 <TIM_OC5_SetConfig+0xc4>)
 800ea72:	4293      	cmp	r3, r2
 800ea74:	d109      	bne.n	800ea8a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ea76:	697b      	ldr	r3, [r7, #20]
 800ea78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ea7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	695b      	ldr	r3, [r3, #20]
 800ea82:	021b      	lsls	r3, r3, #8
 800ea84:	697a      	ldr	r2, [r7, #20]
 800ea86:	4313      	orrs	r3, r2
 800ea88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	697a      	ldr	r2, [r7, #20]
 800ea8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	68fa      	ldr	r2, [r7, #12]
 800ea94:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	685a      	ldr	r2, [r3, #4]
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	693a      	ldr	r2, [r7, #16]
 800eaa2:	621a      	str	r2, [r3, #32]
}
 800eaa4:	bf00      	nop
 800eaa6:	371c      	adds	r7, #28
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaae:	4770      	bx	lr
 800eab0:	fffeff8f 	.word	0xfffeff8f
 800eab4:	40010000 	.word	0x40010000
 800eab8:	40010400 	.word	0x40010400
 800eabc:	40014000 	.word	0x40014000
 800eac0:	40014400 	.word	0x40014400
 800eac4:	40014800 	.word	0x40014800

0800eac8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800eac8:	b480      	push	{r7}
 800eaca:	b087      	sub	sp, #28
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
 800ead0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	6a1b      	ldr	r3, [r3, #32]
 800ead6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	6a1b      	ldr	r3, [r3, #32]
 800eae2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	685b      	ldr	r3, [r3, #4]
 800eae8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eaee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800eaf0:	68fa      	ldr	r2, [r7, #12]
 800eaf2:	4b22      	ldr	r3, [pc, #136]	; (800eb7c <TIM_OC6_SetConfig+0xb4>)
 800eaf4:	4013      	ands	r3, r2
 800eaf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	021b      	lsls	r3, r3, #8
 800eafe:	68fa      	ldr	r2, [r7, #12]
 800eb00:	4313      	orrs	r3, r2
 800eb02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800eb04:	693b      	ldr	r3, [r7, #16]
 800eb06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800eb0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	689b      	ldr	r3, [r3, #8]
 800eb10:	051b      	lsls	r3, r3, #20
 800eb12:	693a      	ldr	r2, [r7, #16]
 800eb14:	4313      	orrs	r3, r2
 800eb16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	4a19      	ldr	r2, [pc, #100]	; (800eb80 <TIM_OC6_SetConfig+0xb8>)
 800eb1c:	4293      	cmp	r3, r2
 800eb1e:	d00f      	beq.n	800eb40 <TIM_OC6_SetConfig+0x78>
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	4a18      	ldr	r2, [pc, #96]	; (800eb84 <TIM_OC6_SetConfig+0xbc>)
 800eb24:	4293      	cmp	r3, r2
 800eb26:	d00b      	beq.n	800eb40 <TIM_OC6_SetConfig+0x78>
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	4a17      	ldr	r2, [pc, #92]	; (800eb88 <TIM_OC6_SetConfig+0xc0>)
 800eb2c:	4293      	cmp	r3, r2
 800eb2e:	d007      	beq.n	800eb40 <TIM_OC6_SetConfig+0x78>
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	4a16      	ldr	r2, [pc, #88]	; (800eb8c <TIM_OC6_SetConfig+0xc4>)
 800eb34:	4293      	cmp	r3, r2
 800eb36:	d003      	beq.n	800eb40 <TIM_OC6_SetConfig+0x78>
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	4a15      	ldr	r2, [pc, #84]	; (800eb90 <TIM_OC6_SetConfig+0xc8>)
 800eb3c:	4293      	cmp	r3, r2
 800eb3e:	d109      	bne.n	800eb54 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800eb40:	697b      	ldr	r3, [r7, #20]
 800eb42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800eb46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	695b      	ldr	r3, [r3, #20]
 800eb4c:	029b      	lsls	r3, r3, #10
 800eb4e:	697a      	ldr	r2, [r7, #20]
 800eb50:	4313      	orrs	r3, r2
 800eb52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	697a      	ldr	r2, [r7, #20]
 800eb58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	68fa      	ldr	r2, [r7, #12]
 800eb5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	685a      	ldr	r2, [r3, #4]
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	693a      	ldr	r2, [r7, #16]
 800eb6c:	621a      	str	r2, [r3, #32]
}
 800eb6e:	bf00      	nop
 800eb70:	371c      	adds	r7, #28
 800eb72:	46bd      	mov	sp, r7
 800eb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb78:	4770      	bx	lr
 800eb7a:	bf00      	nop
 800eb7c:	feff8fff 	.word	0xfeff8fff
 800eb80:	40010000 	.word	0x40010000
 800eb84:	40010400 	.word	0x40010400
 800eb88:	40014000 	.word	0x40014000
 800eb8c:	40014400 	.word	0x40014400
 800eb90:	40014800 	.word	0x40014800

0800eb94 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800eb94:	b480      	push	{r7}
 800eb96:	b087      	sub	sp, #28
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	60f8      	str	r0, [r7, #12]
 800eb9c:	60b9      	str	r1, [r7, #8]
 800eb9e:	607a      	str	r2, [r7, #4]
 800eba0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	6a1b      	ldr	r3, [r3, #32]
 800eba6:	f023 0201 	bic.w	r2, r3, #1
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	699b      	ldr	r3, [r3, #24]
 800ebb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	6a1b      	ldr	r3, [r3, #32]
 800ebb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	4a2c      	ldr	r2, [pc, #176]	; (800ec70 <TIM_TI1_SetConfig+0xdc>)
 800ebbe:	4293      	cmp	r3, r2
 800ebc0:	d023      	beq.n	800ec0a <TIM_TI1_SetConfig+0x76>
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ebc8:	d01f      	beq.n	800ec0a <TIM_TI1_SetConfig+0x76>
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	4a29      	ldr	r2, [pc, #164]	; (800ec74 <TIM_TI1_SetConfig+0xe0>)
 800ebce:	4293      	cmp	r3, r2
 800ebd0:	d01b      	beq.n	800ec0a <TIM_TI1_SetConfig+0x76>
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	4a28      	ldr	r2, [pc, #160]	; (800ec78 <TIM_TI1_SetConfig+0xe4>)
 800ebd6:	4293      	cmp	r3, r2
 800ebd8:	d017      	beq.n	800ec0a <TIM_TI1_SetConfig+0x76>
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	4a27      	ldr	r2, [pc, #156]	; (800ec7c <TIM_TI1_SetConfig+0xe8>)
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	d013      	beq.n	800ec0a <TIM_TI1_SetConfig+0x76>
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	4a26      	ldr	r2, [pc, #152]	; (800ec80 <TIM_TI1_SetConfig+0xec>)
 800ebe6:	4293      	cmp	r3, r2
 800ebe8:	d00f      	beq.n	800ec0a <TIM_TI1_SetConfig+0x76>
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	4a25      	ldr	r2, [pc, #148]	; (800ec84 <TIM_TI1_SetConfig+0xf0>)
 800ebee:	4293      	cmp	r3, r2
 800ebf0:	d00b      	beq.n	800ec0a <TIM_TI1_SetConfig+0x76>
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	4a24      	ldr	r2, [pc, #144]	; (800ec88 <TIM_TI1_SetConfig+0xf4>)
 800ebf6:	4293      	cmp	r3, r2
 800ebf8:	d007      	beq.n	800ec0a <TIM_TI1_SetConfig+0x76>
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	4a23      	ldr	r2, [pc, #140]	; (800ec8c <TIM_TI1_SetConfig+0xf8>)
 800ebfe:	4293      	cmp	r3, r2
 800ec00:	d003      	beq.n	800ec0a <TIM_TI1_SetConfig+0x76>
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	4a22      	ldr	r2, [pc, #136]	; (800ec90 <TIM_TI1_SetConfig+0xfc>)
 800ec06:	4293      	cmp	r3, r2
 800ec08:	d101      	bne.n	800ec0e <TIM_TI1_SetConfig+0x7a>
 800ec0a:	2301      	movs	r3, #1
 800ec0c:	e000      	b.n	800ec10 <TIM_TI1_SetConfig+0x7c>
 800ec0e:	2300      	movs	r3, #0
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d008      	beq.n	800ec26 <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800ec14:	697b      	ldr	r3, [r7, #20]
 800ec16:	f023 0303 	bic.w	r3, r3, #3
 800ec1a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800ec1c:	697a      	ldr	r2, [r7, #20]
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	4313      	orrs	r3, r2
 800ec22:	617b      	str	r3, [r7, #20]
 800ec24:	e003      	b.n	800ec2e <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	f043 0301 	orr.w	r3, r3, #1
 800ec2c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ec2e:	697b      	ldr	r3, [r7, #20]
 800ec30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ec34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	011b      	lsls	r3, r3, #4
 800ec3a:	b2db      	uxtb	r3, r3
 800ec3c:	697a      	ldr	r2, [r7, #20]
 800ec3e:	4313      	orrs	r3, r2
 800ec40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ec42:	693b      	ldr	r3, [r7, #16]
 800ec44:	f023 030a 	bic.w	r3, r3, #10
 800ec48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800ec4a:	68bb      	ldr	r3, [r7, #8]
 800ec4c:	f003 030a 	and.w	r3, r3, #10
 800ec50:	693a      	ldr	r2, [r7, #16]
 800ec52:	4313      	orrs	r3, r2
 800ec54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	697a      	ldr	r2, [r7, #20]
 800ec5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	693a      	ldr	r2, [r7, #16]
 800ec60:	621a      	str	r2, [r3, #32]
}
 800ec62:	bf00      	nop
 800ec64:	371c      	adds	r7, #28
 800ec66:	46bd      	mov	sp, r7
 800ec68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6c:	4770      	bx	lr
 800ec6e:	bf00      	nop
 800ec70:	40010000 	.word	0x40010000
 800ec74:	40000400 	.word	0x40000400
 800ec78:	40000800 	.word	0x40000800
 800ec7c:	40000c00 	.word	0x40000c00
 800ec80:	40010400 	.word	0x40010400
 800ec84:	40001800 	.word	0x40001800
 800ec88:	40014000 	.word	0x40014000
 800ec8c:	4000e000 	.word	0x4000e000
 800ec90:	4000e400 	.word	0x4000e400

0800ec94 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ec94:	b480      	push	{r7}
 800ec96:	b087      	sub	sp, #28
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	60f8      	str	r0, [r7, #12]
 800ec9c:	60b9      	str	r1, [r7, #8]
 800ec9e:	607a      	str	r2, [r7, #4]
 800eca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	6a1b      	ldr	r3, [r3, #32]
 800eca6:	f023 0210 	bic.w	r2, r3, #16
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	699b      	ldr	r3, [r3, #24]
 800ecb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	6a1b      	ldr	r3, [r3, #32]
 800ecb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800ecba:	697b      	ldr	r3, [r7, #20]
 800ecbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ecc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	021b      	lsls	r3, r3, #8
 800ecc6:	697a      	ldr	r2, [r7, #20]
 800ecc8:	4313      	orrs	r3, r2
 800ecca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800eccc:	697b      	ldr	r3, [r7, #20]
 800ecce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ecd2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800ecd4:	683b      	ldr	r3, [r7, #0]
 800ecd6:	031b      	lsls	r3, r3, #12
 800ecd8:	b29b      	uxth	r3, r3
 800ecda:	697a      	ldr	r2, [r7, #20]
 800ecdc:	4313      	orrs	r3, r2
 800ecde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ece0:	693b      	ldr	r3, [r7, #16]
 800ece2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ece6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800ece8:	68bb      	ldr	r3, [r7, #8]
 800ecea:	011b      	lsls	r3, r3, #4
 800ecec:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ecf0:	693a      	ldr	r2, [r7, #16]
 800ecf2:	4313      	orrs	r3, r2
 800ecf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	697a      	ldr	r2, [r7, #20]
 800ecfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	693a      	ldr	r2, [r7, #16]
 800ed00:	621a      	str	r2, [r3, #32]
}
 800ed02:	bf00      	nop
 800ed04:	371c      	adds	r7, #28
 800ed06:	46bd      	mov	sp, r7
 800ed08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0c:	4770      	bx	lr

0800ed0e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ed0e:	b480      	push	{r7}
 800ed10:	b087      	sub	sp, #28
 800ed12:	af00      	add	r7, sp, #0
 800ed14:	60f8      	str	r0, [r7, #12]
 800ed16:	60b9      	str	r1, [r7, #8]
 800ed18:	607a      	str	r2, [r7, #4]
 800ed1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	6a1b      	ldr	r3, [r3, #32]
 800ed20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	69db      	ldr	r3, [r3, #28]
 800ed2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	6a1b      	ldr	r3, [r3, #32]
 800ed32:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800ed34:	697b      	ldr	r3, [r7, #20]
 800ed36:	f023 0303 	bic.w	r3, r3, #3
 800ed3a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800ed3c:	697a      	ldr	r2, [r7, #20]
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	4313      	orrs	r3, r2
 800ed42:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800ed44:	697b      	ldr	r3, [r7, #20]
 800ed46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ed4a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	011b      	lsls	r3, r3, #4
 800ed50:	b2db      	uxtb	r3, r3
 800ed52:	697a      	ldr	r2, [r7, #20]
 800ed54:	4313      	orrs	r3, r2
 800ed56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ed58:	693b      	ldr	r3, [r7, #16]
 800ed5a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800ed5e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ed60:	68bb      	ldr	r3, [r7, #8]
 800ed62:	021b      	lsls	r3, r3, #8
 800ed64:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800ed68:	693a      	ldr	r2, [r7, #16]
 800ed6a:	4313      	orrs	r3, r2
 800ed6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	697a      	ldr	r2, [r7, #20]
 800ed72:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	693a      	ldr	r2, [r7, #16]
 800ed78:	621a      	str	r2, [r3, #32]
}
 800ed7a:	bf00      	nop
 800ed7c:	371c      	adds	r7, #28
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed84:	4770      	bx	lr

0800ed86 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ed86:	b480      	push	{r7}
 800ed88:	b087      	sub	sp, #28
 800ed8a:	af00      	add	r7, sp, #0
 800ed8c:	60f8      	str	r0, [r7, #12]
 800ed8e:	60b9      	str	r1, [r7, #8]
 800ed90:	607a      	str	r2, [r7, #4]
 800ed92:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	6a1b      	ldr	r3, [r3, #32]
 800ed98:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	69db      	ldr	r3, [r3, #28]
 800eda4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	6a1b      	ldr	r3, [r3, #32]
 800edaa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800edb2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	021b      	lsls	r3, r3, #8
 800edb8:	697a      	ldr	r2, [r7, #20]
 800edba:	4313      	orrs	r3, r2
 800edbc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800edbe:	697b      	ldr	r3, [r7, #20]
 800edc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800edc4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	031b      	lsls	r3, r3, #12
 800edca:	b29b      	uxth	r3, r3
 800edcc:	697a      	ldr	r2, [r7, #20]
 800edce:	4313      	orrs	r3, r2
 800edd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800edd2:	693b      	ldr	r3, [r7, #16]
 800edd4:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800edd8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800edda:	68bb      	ldr	r3, [r7, #8]
 800eddc:	031b      	lsls	r3, r3, #12
 800edde:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800ede2:	693a      	ldr	r2, [r7, #16]
 800ede4:	4313      	orrs	r3, r2
 800ede6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	697a      	ldr	r2, [r7, #20]
 800edec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	693a      	ldr	r2, [r7, #16]
 800edf2:	621a      	str	r2, [r3, #32]
}
 800edf4:	bf00      	nop
 800edf6:	371c      	adds	r7, #28
 800edf8:	46bd      	mov	sp, r7
 800edfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfe:	4770      	bx	lr

0800ee00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ee00:	b480      	push	{r7}
 800ee02:	b087      	sub	sp, #28
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	60f8      	str	r0, [r7, #12]
 800ee08:	60b9      	str	r1, [r7, #8]
 800ee0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ee0c:	68bb      	ldr	r3, [r7, #8]
 800ee0e:	f003 031f 	and.w	r3, r3, #31
 800ee12:	2201      	movs	r2, #1
 800ee14:	fa02 f303 	lsl.w	r3, r2, r3
 800ee18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	6a1a      	ldr	r2, [r3, #32]
 800ee1e:	697b      	ldr	r3, [r7, #20]
 800ee20:	43db      	mvns	r3, r3
 800ee22:	401a      	ands	r2, r3
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	6a1a      	ldr	r2, [r3, #32]
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	f003 031f 	and.w	r3, r3, #31
 800ee32:	6879      	ldr	r1, [r7, #4]
 800ee34:	fa01 f303 	lsl.w	r3, r1, r3
 800ee38:	431a      	orrs	r2, r3
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	621a      	str	r2, [r3, #32]
}
 800ee3e:	bf00      	nop
 800ee40:	371c      	adds	r7, #28
 800ee42:	46bd      	mov	sp, r7
 800ee44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee48:	4770      	bx	lr
	...

0800ee4c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b084      	sub	sp, #16
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
 800ee54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ee56:	683b      	ldr	r3, [r7, #0]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d109      	bne.n	800ee70 <HAL_TIMEx_PWMN_Start+0x24>
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ee62:	b2db      	uxtb	r3, r3
 800ee64:	2b01      	cmp	r3, #1
 800ee66:	bf14      	ite	ne
 800ee68:	2301      	movne	r3, #1
 800ee6a:	2300      	moveq	r3, #0
 800ee6c:	b2db      	uxtb	r3, r3
 800ee6e:	e022      	b.n	800eeb6 <HAL_TIMEx_PWMN_Start+0x6a>
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	2b04      	cmp	r3, #4
 800ee74:	d109      	bne.n	800ee8a <HAL_TIMEx_PWMN_Start+0x3e>
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ee7c:	b2db      	uxtb	r3, r3
 800ee7e:	2b01      	cmp	r3, #1
 800ee80:	bf14      	ite	ne
 800ee82:	2301      	movne	r3, #1
 800ee84:	2300      	moveq	r3, #0
 800ee86:	b2db      	uxtb	r3, r3
 800ee88:	e015      	b.n	800eeb6 <HAL_TIMEx_PWMN_Start+0x6a>
 800ee8a:	683b      	ldr	r3, [r7, #0]
 800ee8c:	2b08      	cmp	r3, #8
 800ee8e:	d109      	bne.n	800eea4 <HAL_TIMEx_PWMN_Start+0x58>
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ee96:	b2db      	uxtb	r3, r3
 800ee98:	2b01      	cmp	r3, #1
 800ee9a:	bf14      	ite	ne
 800ee9c:	2301      	movne	r3, #1
 800ee9e:	2300      	moveq	r3, #0
 800eea0:	b2db      	uxtb	r3, r3
 800eea2:	e008      	b.n	800eeb6 <HAL_TIMEx_PWMN_Start+0x6a>
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800eeaa:	b2db      	uxtb	r3, r3
 800eeac:	2b01      	cmp	r3, #1
 800eeae:	bf14      	ite	ne
 800eeb0:	2301      	movne	r3, #1
 800eeb2:	2300      	moveq	r3, #0
 800eeb4:	b2db      	uxtb	r3, r3
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d001      	beq.n	800eebe <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800eeba:	2301      	movs	r3, #1
 800eebc:	e07d      	b.n	800efba <HAL_TIMEx_PWMN_Start+0x16e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800eebe:	683b      	ldr	r3, [r7, #0]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d104      	bne.n	800eece <HAL_TIMEx_PWMN_Start+0x82>
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	2202      	movs	r2, #2
 800eec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eecc:	e013      	b.n	800eef6 <HAL_TIMEx_PWMN_Start+0xaa>
 800eece:	683b      	ldr	r3, [r7, #0]
 800eed0:	2b04      	cmp	r3, #4
 800eed2:	d104      	bne.n	800eede <HAL_TIMEx_PWMN_Start+0x92>
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	2202      	movs	r2, #2
 800eed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eedc:	e00b      	b.n	800eef6 <HAL_TIMEx_PWMN_Start+0xaa>
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	2b08      	cmp	r3, #8
 800eee2:	d104      	bne.n	800eeee <HAL_TIMEx_PWMN_Start+0xa2>
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2202      	movs	r2, #2
 800eee8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800eeec:	e003      	b.n	800eef6 <HAL_TIMEx_PWMN_Start+0xaa>
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2202      	movs	r2, #2
 800eef2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	2204      	movs	r2, #4
 800eefc:	6839      	ldr	r1, [r7, #0]
 800eefe:	4618      	mov	r0, r3
 800ef00:	f000 fa0e 	bl	800f320 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ef12:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	4a2a      	ldr	r2, [pc, #168]	; (800efc4 <HAL_TIMEx_PWMN_Start+0x178>)
 800ef1a:	4293      	cmp	r3, r2
 800ef1c:	d02c      	beq.n	800ef78 <HAL_TIMEx_PWMN_Start+0x12c>
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef26:	d027      	beq.n	800ef78 <HAL_TIMEx_PWMN_Start+0x12c>
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	4a26      	ldr	r2, [pc, #152]	; (800efc8 <HAL_TIMEx_PWMN_Start+0x17c>)
 800ef2e:	4293      	cmp	r3, r2
 800ef30:	d022      	beq.n	800ef78 <HAL_TIMEx_PWMN_Start+0x12c>
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	4a25      	ldr	r2, [pc, #148]	; (800efcc <HAL_TIMEx_PWMN_Start+0x180>)
 800ef38:	4293      	cmp	r3, r2
 800ef3a:	d01d      	beq.n	800ef78 <HAL_TIMEx_PWMN_Start+0x12c>
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	4a23      	ldr	r2, [pc, #140]	; (800efd0 <HAL_TIMEx_PWMN_Start+0x184>)
 800ef42:	4293      	cmp	r3, r2
 800ef44:	d018      	beq.n	800ef78 <HAL_TIMEx_PWMN_Start+0x12c>
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	4a22      	ldr	r2, [pc, #136]	; (800efd4 <HAL_TIMEx_PWMN_Start+0x188>)
 800ef4c:	4293      	cmp	r3, r2
 800ef4e:	d013      	beq.n	800ef78 <HAL_TIMEx_PWMN_Start+0x12c>
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	4a20      	ldr	r2, [pc, #128]	; (800efd8 <HAL_TIMEx_PWMN_Start+0x18c>)
 800ef56:	4293      	cmp	r3, r2
 800ef58:	d00e      	beq.n	800ef78 <HAL_TIMEx_PWMN_Start+0x12c>
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	4a1f      	ldr	r2, [pc, #124]	; (800efdc <HAL_TIMEx_PWMN_Start+0x190>)
 800ef60:	4293      	cmp	r3, r2
 800ef62:	d009      	beq.n	800ef78 <HAL_TIMEx_PWMN_Start+0x12c>
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	4a1d      	ldr	r2, [pc, #116]	; (800efe0 <HAL_TIMEx_PWMN_Start+0x194>)
 800ef6a:	4293      	cmp	r3, r2
 800ef6c:	d004      	beq.n	800ef78 <HAL_TIMEx_PWMN_Start+0x12c>
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	4a1c      	ldr	r2, [pc, #112]	; (800efe4 <HAL_TIMEx_PWMN_Start+0x198>)
 800ef74:	4293      	cmp	r3, r2
 800ef76:	d115      	bne.n	800efa4 <HAL_TIMEx_PWMN_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	689a      	ldr	r2, [r3, #8]
 800ef7e:	4b1a      	ldr	r3, [pc, #104]	; (800efe8 <HAL_TIMEx_PWMN_Start+0x19c>)
 800ef80:	4013      	ands	r3, r2
 800ef82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	2b06      	cmp	r3, #6
 800ef88:	d015      	beq.n	800efb6 <HAL_TIMEx_PWMN_Start+0x16a>
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef90:	d011      	beq.n	800efb6 <HAL_TIMEx_PWMN_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	681a      	ldr	r2, [r3, #0]
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	f042 0201 	orr.w	r2, r2, #1
 800efa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efa2:	e008      	b.n	800efb6 <HAL_TIMEx_PWMN_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	681a      	ldr	r2, [r3, #0]
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	f042 0201 	orr.w	r2, r2, #1
 800efb2:	601a      	str	r2, [r3, #0]
 800efb4:	e000      	b.n	800efb8 <HAL_TIMEx_PWMN_Start+0x16c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efb6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800efb8:	2300      	movs	r3, #0
}
 800efba:	4618      	mov	r0, r3
 800efbc:	3710      	adds	r7, #16
 800efbe:	46bd      	mov	sp, r7
 800efc0:	bd80      	pop	{r7, pc}
 800efc2:	bf00      	nop
 800efc4:	40010000 	.word	0x40010000
 800efc8:	40000400 	.word	0x40000400
 800efcc:	40000800 	.word	0x40000800
 800efd0:	40000c00 	.word	0x40000c00
 800efd4:	40010400 	.word	0x40010400
 800efd8:	40001800 	.word	0x40001800
 800efdc:	40014000 	.word	0x40014000
 800efe0:	4000e000 	.word	0x4000e000
 800efe4:	4000e400 	.word	0x4000e400
 800efe8:	00010007 	.word	0x00010007

0800efec <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b082      	sub	sp, #8
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
 800eff4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	2200      	movs	r2, #0
 800effc:	6839      	ldr	r1, [r7, #0]
 800effe:	4618      	mov	r0, r3
 800f000:	f000 f98e 	bl	800f320 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	6a1a      	ldr	r2, [r3, #32]
 800f00a:	f241 1311 	movw	r3, #4369	; 0x1111
 800f00e:	4013      	ands	r3, r2
 800f010:	2b00      	cmp	r3, #0
 800f012:	d10f      	bne.n	800f034 <HAL_TIMEx_PWMN_Stop+0x48>
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	6a1a      	ldr	r2, [r3, #32]
 800f01a:	f240 4344 	movw	r3, #1092	; 0x444
 800f01e:	4013      	ands	r3, r2
 800f020:	2b00      	cmp	r3, #0
 800f022:	d107      	bne.n	800f034 <HAL_TIMEx_PWMN_Stop+0x48>
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f032:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	6a1a      	ldr	r2, [r3, #32]
 800f03a:	f241 1311 	movw	r3, #4369	; 0x1111
 800f03e:	4013      	ands	r3, r2
 800f040:	2b00      	cmp	r3, #0
 800f042:	d10f      	bne.n	800f064 <HAL_TIMEx_PWMN_Stop+0x78>
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	6a1a      	ldr	r2, [r3, #32]
 800f04a:	f240 4344 	movw	r3, #1092	; 0x444
 800f04e:	4013      	ands	r3, r2
 800f050:	2b00      	cmp	r3, #0
 800f052:	d107      	bne.n	800f064 <HAL_TIMEx_PWMN_Stop+0x78>
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	681a      	ldr	r2, [r3, #0]
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	f022 0201 	bic.w	r2, r2, #1
 800f062:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d104      	bne.n	800f074 <HAL_TIMEx_PWMN_Stop+0x88>
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	2201      	movs	r2, #1
 800f06e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f072:	e013      	b.n	800f09c <HAL_TIMEx_PWMN_Stop+0xb0>
 800f074:	683b      	ldr	r3, [r7, #0]
 800f076:	2b04      	cmp	r3, #4
 800f078:	d104      	bne.n	800f084 <HAL_TIMEx_PWMN_Stop+0x98>
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	2201      	movs	r2, #1
 800f07e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f082:	e00b      	b.n	800f09c <HAL_TIMEx_PWMN_Stop+0xb0>
 800f084:	683b      	ldr	r3, [r7, #0]
 800f086:	2b08      	cmp	r3, #8
 800f088:	d104      	bne.n	800f094 <HAL_TIMEx_PWMN_Stop+0xa8>
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	2201      	movs	r2, #1
 800f08e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f092:	e003      	b.n	800f09c <HAL_TIMEx_PWMN_Stop+0xb0>
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2201      	movs	r2, #1
 800f098:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800f09c:	2300      	movs	r3, #0
}
 800f09e:	4618      	mov	r0, r3
 800f0a0:	3708      	adds	r7, #8
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}
	...

0800f0a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f0a8:	b480      	push	{r7}
 800f0aa:	b085      	sub	sp, #20
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
 800f0b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f0b8:	2b01      	cmp	r3, #1
 800f0ba:	d101      	bne.n	800f0c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f0bc:	2302      	movs	r3, #2
 800f0be:	e077      	b.n	800f1b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2201      	movs	r2, #1
 800f0c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2202      	movs	r2, #2
 800f0cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	685b      	ldr	r3, [r3, #4]
 800f0d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	689b      	ldr	r3, [r3, #8]
 800f0de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	4a35      	ldr	r2, [pc, #212]	; (800f1bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f0e6:	4293      	cmp	r3, r2
 800f0e8:	d004      	beq.n	800f0f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	4a34      	ldr	r2, [pc, #208]	; (800f1c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f0f0:	4293      	cmp	r3, r2
 800f0f2:	d108      	bne.n	800f106 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f0fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	685b      	ldr	r3, [r3, #4]
 800f100:	68fa      	ldr	r2, [r7, #12]
 800f102:	4313      	orrs	r3, r2
 800f104:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f10c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f10e:	683b      	ldr	r3, [r7, #0]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	68fa      	ldr	r2, [r7, #12]
 800f114:	4313      	orrs	r3, r2
 800f116:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	68fa      	ldr	r2, [r7, #12]
 800f11e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	4a25      	ldr	r2, [pc, #148]	; (800f1bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f126:	4293      	cmp	r3, r2
 800f128:	d02c      	beq.n	800f184 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f132:	d027      	beq.n	800f184 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	4a22      	ldr	r2, [pc, #136]	; (800f1c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f13a:	4293      	cmp	r3, r2
 800f13c:	d022      	beq.n	800f184 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	4a21      	ldr	r2, [pc, #132]	; (800f1c8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f144:	4293      	cmp	r3, r2
 800f146:	d01d      	beq.n	800f184 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	4a1f      	ldr	r2, [pc, #124]	; (800f1cc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f14e:	4293      	cmp	r3, r2
 800f150:	d018      	beq.n	800f184 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	4a1a      	ldr	r2, [pc, #104]	; (800f1c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f158:	4293      	cmp	r3, r2
 800f15a:	d013      	beq.n	800f184 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	4a1b      	ldr	r2, [pc, #108]	; (800f1d0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f162:	4293      	cmp	r3, r2
 800f164:	d00e      	beq.n	800f184 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	4a1a      	ldr	r2, [pc, #104]	; (800f1d4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800f16c:	4293      	cmp	r3, r2
 800f16e:	d009      	beq.n	800f184 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	4a18      	ldr	r2, [pc, #96]	; (800f1d8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800f176:	4293      	cmp	r3, r2
 800f178:	d004      	beq.n	800f184 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	4a17      	ldr	r2, [pc, #92]	; (800f1dc <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800f180:	4293      	cmp	r3, r2
 800f182:	d10c      	bne.n	800f19e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f18a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f18c:	683b      	ldr	r3, [r7, #0]
 800f18e:	689b      	ldr	r3, [r3, #8]
 800f190:	68ba      	ldr	r2, [r7, #8]
 800f192:	4313      	orrs	r3, r2
 800f194:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	68ba      	ldr	r2, [r7, #8]
 800f19c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2201      	movs	r2, #1
 800f1a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f1ae:	2300      	movs	r3, #0
}
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	3714      	adds	r7, #20
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ba:	4770      	bx	lr
 800f1bc:	40010000 	.word	0x40010000
 800f1c0:	40010400 	.word	0x40010400
 800f1c4:	40000400 	.word	0x40000400
 800f1c8:	40000800 	.word	0x40000800
 800f1cc:	40000c00 	.word	0x40000c00
 800f1d0:	40001800 	.word	0x40001800
 800f1d4:	40014000 	.word	0x40014000
 800f1d8:	4000e000 	.word	0x4000e000
 800f1dc:	4000e400 	.word	0x4000e400

0800f1e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f1e0:	b480      	push	{r7}
 800f1e2:	b085      	sub	sp, #20
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
 800f1e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f1f4:	2b01      	cmp	r3, #1
 800f1f6:	d101      	bne.n	800f1fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f1f8:	2302      	movs	r3, #2
 800f1fa:	e087      	b.n	800f30c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2201      	movs	r2, #1
 800f200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	68db      	ldr	r3, [r3, #12]
 800f20e:	4313      	orrs	r3, r2
 800f210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	689b      	ldr	r3, [r3, #8]
 800f21c:	4313      	orrs	r3, r2
 800f21e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	685b      	ldr	r3, [r3, #4]
 800f22a:	4313      	orrs	r3, r2
 800f22c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	4313      	orrs	r3, r2
 800f23a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	691b      	ldr	r3, [r3, #16]
 800f246:	4313      	orrs	r3, r2
 800f248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	695b      	ldr	r3, [r3, #20]
 800f254:	4313      	orrs	r3, r2
 800f256:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f262:	4313      	orrs	r3, r2
 800f264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	699b      	ldr	r3, [r3, #24]
 800f270:	041b      	lsls	r3, r3, #16
 800f272:	4313      	orrs	r3, r2
 800f274:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	4a27      	ldr	r2, [pc, #156]	; (800f318 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800f27c:	4293      	cmp	r3, r2
 800f27e:	d004      	beq.n	800f28a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	4a25      	ldr	r2, [pc, #148]	; (800f31c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800f286:	4293      	cmp	r3, r2
 800f288:	d106      	bne.n	800f298 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	69db      	ldr	r3, [r3, #28]
 800f294:	4313      	orrs	r3, r2
 800f296:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	4a1e      	ldr	r2, [pc, #120]	; (800f318 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800f29e:	4293      	cmp	r3, r2
 800f2a0:	d004      	beq.n	800f2ac <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	4a1d      	ldr	r2, [pc, #116]	; (800f31c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800f2a8:	4293      	cmp	r3, r2
 800f2aa:	d126      	bne.n	800f2fa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800f2b2:	683b      	ldr	r3, [r7, #0]
 800f2b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2b6:	051b      	lsls	r3, r3, #20
 800f2b8:	4313      	orrs	r3, r2
 800f2ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	6a1b      	ldr	r3, [r3, #32]
 800f2c6:	4313      	orrs	r3, r2
 800f2c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2d4:	4313      	orrs	r3, r2
 800f2d6:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	4a0e      	ldr	r2, [pc, #56]	; (800f318 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800f2de:	4293      	cmp	r3, r2
 800f2e0:	d004      	beq.n	800f2ec <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	4a0d      	ldr	r2, [pc, #52]	; (800f31c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800f2e8:	4293      	cmp	r3, r2
 800f2ea:	d106      	bne.n	800f2fa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2f6:	4313      	orrs	r3, r2
 800f2f8:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	68fa      	ldr	r2, [r7, #12]
 800f300:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	2200      	movs	r2, #0
 800f306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f30a:	2300      	movs	r3, #0
}
 800f30c:	4618      	mov	r0, r3
 800f30e:	3714      	adds	r7, #20
 800f310:	46bd      	mov	sp, r7
 800f312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f316:	4770      	bx	lr
 800f318:	40010000 	.word	0x40010000
 800f31c:	40010400 	.word	0x40010400

0800f320 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800f320:	b480      	push	{r7}
 800f322:	b087      	sub	sp, #28
 800f324:	af00      	add	r7, sp, #0
 800f326:	60f8      	str	r0, [r7, #12]
 800f328:	60b9      	str	r1, [r7, #8]
 800f32a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	f003 031f 	and.w	r3, r3, #31
 800f332:	2204      	movs	r2, #4
 800f334:	fa02 f303 	lsl.w	r3, r2, r3
 800f338:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	6a1a      	ldr	r2, [r3, #32]
 800f33e:	697b      	ldr	r3, [r7, #20]
 800f340:	43db      	mvns	r3, r3
 800f342:	401a      	ands	r2, r3
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	6a1a      	ldr	r2, [r3, #32]
 800f34c:	68bb      	ldr	r3, [r7, #8]
 800f34e:	f003 031f 	and.w	r3, r3, #31
 800f352:	6879      	ldr	r1, [r7, #4]
 800f354:	fa01 f303 	lsl.w	r3, r1, r3
 800f358:	431a      	orrs	r2, r3
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	621a      	str	r2, [r3, #32]
}
 800f35e:	bf00      	nop
 800f360:	371c      	adds	r7, #28
 800f362:	46bd      	mov	sp, r7
 800f364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f368:	4770      	bx	lr

0800f36a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f36a:	b580      	push	{r7, lr}
 800f36c:	b082      	sub	sp, #8
 800f36e:	af00      	add	r7, sp, #0
 800f370:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d101      	bne.n	800f37c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f378:	2301      	movs	r3, #1
 800f37a:	e042      	b.n	800f402 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f382:	2b00      	cmp	r3, #0
 800f384:	d106      	bne.n	800f394 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	2200      	movs	r2, #0
 800f38a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f38e:	6878      	ldr	r0, [r7, #4]
 800f390:	f7f4 faa8 	bl	80038e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2224      	movs	r2, #36	; 0x24
 800f398:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	681a      	ldr	r2, [r3, #0]
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	f022 0201 	bic.w	r2, r2, #1
 800f3aa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	f000 f983 	bl	800f6b8 <UART_SetConfig>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	2b01      	cmp	r3, #1
 800f3b6:	d101      	bne.n	800f3bc <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f3b8:	2301      	movs	r3, #1
 800f3ba:	e022      	b.n	800f402 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d002      	beq.n	800f3ca <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f3c4:	6878      	ldr	r0, [r7, #4]
 800f3c6:	f000 ffe3 	bl	8010390 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	685a      	ldr	r2, [r3, #4]
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f3d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	689a      	ldr	r2, [r3, #8]
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f3e8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	681a      	ldr	r2, [r3, #0]
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	f042 0201 	orr.w	r2, r2, #1
 800f3f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f3fa:	6878      	ldr	r0, [r7, #4]
 800f3fc:	f001 f86a 	bl	80104d4 <UART_CheckIdleState>
 800f400:	4603      	mov	r3, r0
}
 800f402:	4618      	mov	r0, r3
 800f404:	3708      	adds	r7, #8
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}

0800f40a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f40a:	b580      	push	{r7, lr}
 800f40c:	b08a      	sub	sp, #40	; 0x28
 800f40e:	af02      	add	r7, sp, #8
 800f410:	60f8      	str	r0, [r7, #12]
 800f412:	60b9      	str	r1, [r7, #8]
 800f414:	603b      	str	r3, [r7, #0]
 800f416:	4613      	mov	r3, r2
 800f418:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f420:	2b20      	cmp	r3, #32
 800f422:	d17b      	bne.n	800f51c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800f424:	68bb      	ldr	r3, [r7, #8]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d002      	beq.n	800f430 <HAL_UART_Transmit+0x26>
 800f42a:	88fb      	ldrh	r3, [r7, #6]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d101      	bne.n	800f434 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f430:	2301      	movs	r3, #1
 800f432:	e074      	b.n	800f51e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	2200      	movs	r2, #0
 800f438:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	2221      	movs	r2, #33	; 0x21
 800f440:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f444:	f7f4 fe1c 	bl	8004080 <HAL_GetTick>
 800f448:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	88fa      	ldrh	r2, [r7, #6]
 800f44e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	88fa      	ldrh	r2, [r7, #6]
 800f456:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	689b      	ldr	r3, [r3, #8]
 800f45e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f462:	d108      	bne.n	800f476 <HAL_UART_Transmit+0x6c>
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	691b      	ldr	r3, [r3, #16]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d104      	bne.n	800f476 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f46c:	2300      	movs	r3, #0
 800f46e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	61bb      	str	r3, [r7, #24]
 800f474:	e003      	b.n	800f47e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800f476:	68bb      	ldr	r3, [r7, #8]
 800f478:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f47a:	2300      	movs	r3, #0
 800f47c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f47e:	e030      	b.n	800f4e2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f480:	683b      	ldr	r3, [r7, #0]
 800f482:	9300      	str	r3, [sp, #0]
 800f484:	697b      	ldr	r3, [r7, #20]
 800f486:	2200      	movs	r2, #0
 800f488:	2180      	movs	r1, #128	; 0x80
 800f48a:	68f8      	ldr	r0, [r7, #12]
 800f48c:	f001 f8cc 	bl	8010628 <UART_WaitOnFlagUntilTimeout>
 800f490:	4603      	mov	r3, r0
 800f492:	2b00      	cmp	r3, #0
 800f494:	d005      	beq.n	800f4a2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	2220      	movs	r2, #32
 800f49a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800f49e:	2303      	movs	r3, #3
 800f4a0:	e03d      	b.n	800f51e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800f4a2:	69fb      	ldr	r3, [r7, #28]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d10b      	bne.n	800f4c0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f4a8:	69bb      	ldr	r3, [r7, #24]
 800f4aa:	881b      	ldrh	r3, [r3, #0]
 800f4ac:	461a      	mov	r2, r3
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f4b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f4b8:	69bb      	ldr	r3, [r7, #24]
 800f4ba:	3302      	adds	r3, #2
 800f4bc:	61bb      	str	r3, [r7, #24]
 800f4be:	e007      	b.n	800f4d0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f4c0:	69fb      	ldr	r3, [r7, #28]
 800f4c2:	781a      	ldrb	r2, [r3, #0]
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f4ca:	69fb      	ldr	r3, [r7, #28]
 800f4cc:	3301      	adds	r3, #1
 800f4ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f4d6:	b29b      	uxth	r3, r3
 800f4d8:	3b01      	subs	r3, #1
 800f4da:	b29a      	uxth	r2, r3
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f4e8:	b29b      	uxth	r3, r3
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d1c8      	bne.n	800f480 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	9300      	str	r3, [sp, #0]
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	2140      	movs	r1, #64	; 0x40
 800f4f8:	68f8      	ldr	r0, [r7, #12]
 800f4fa:	f001 f895 	bl	8010628 <UART_WaitOnFlagUntilTimeout>
 800f4fe:	4603      	mov	r3, r0
 800f500:	2b00      	cmp	r3, #0
 800f502:	d005      	beq.n	800f510 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	2220      	movs	r2, #32
 800f508:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800f50c:	2303      	movs	r3, #3
 800f50e:	e006      	b.n	800f51e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	2220      	movs	r2, #32
 800f514:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800f518:	2300      	movs	r3, #0
 800f51a:	e000      	b.n	800f51e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800f51c:	2302      	movs	r3, #2
  }
}
 800f51e:	4618      	mov	r0, r3
 800f520:	3720      	adds	r7, #32
 800f522:	46bd      	mov	sp, r7
 800f524:	bd80      	pop	{r7, pc}

0800f526 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f526:	b580      	push	{r7, lr}
 800f528:	b08a      	sub	sp, #40	; 0x28
 800f52a:	af02      	add	r7, sp, #8
 800f52c:	60f8      	str	r0, [r7, #12]
 800f52e:	60b9      	str	r1, [r7, #8]
 800f530:	603b      	str	r3, [r7, #0]
 800f532:	4613      	mov	r3, r2
 800f534:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f53c:	2b20      	cmp	r3, #32
 800f53e:	f040 80b5 	bne.w	800f6ac <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800f542:	68bb      	ldr	r3, [r7, #8]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d002      	beq.n	800f54e <HAL_UART_Receive+0x28>
 800f548:	88fb      	ldrh	r3, [r7, #6]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d101      	bne.n	800f552 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800f54e:	2301      	movs	r3, #1
 800f550:	e0ad      	b.n	800f6ae <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	2200      	movs	r2, #0
 800f556:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	2222      	movs	r2, #34	; 0x22
 800f55e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	2200      	movs	r2, #0
 800f566:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f568:	f7f4 fd8a 	bl	8004080 <HAL_GetTick>
 800f56c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	88fa      	ldrh	r2, [r7, #6]
 800f572:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	88fa      	ldrh	r2, [r7, #6]
 800f57a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	689b      	ldr	r3, [r3, #8]
 800f582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f586:	d10e      	bne.n	800f5a6 <HAL_UART_Receive+0x80>
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	691b      	ldr	r3, [r3, #16]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d105      	bne.n	800f59c <HAL_UART_Receive+0x76>
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f596:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f59a:	e02d      	b.n	800f5f8 <HAL_UART_Receive+0xd2>
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	22ff      	movs	r2, #255	; 0xff
 800f5a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f5a4:	e028      	b.n	800f5f8 <HAL_UART_Receive+0xd2>
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	689b      	ldr	r3, [r3, #8]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d10d      	bne.n	800f5ca <HAL_UART_Receive+0xa4>
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	691b      	ldr	r3, [r3, #16]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d104      	bne.n	800f5c0 <HAL_UART_Receive+0x9a>
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	22ff      	movs	r2, #255	; 0xff
 800f5ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f5be:	e01b      	b.n	800f5f8 <HAL_UART_Receive+0xd2>
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	227f      	movs	r2, #127	; 0x7f
 800f5c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f5c8:	e016      	b.n	800f5f8 <HAL_UART_Receive+0xd2>
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	689b      	ldr	r3, [r3, #8]
 800f5ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f5d2:	d10d      	bne.n	800f5f0 <HAL_UART_Receive+0xca>
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	691b      	ldr	r3, [r3, #16]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d104      	bne.n	800f5e6 <HAL_UART_Receive+0xc0>
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	227f      	movs	r2, #127	; 0x7f
 800f5e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f5e4:	e008      	b.n	800f5f8 <HAL_UART_Receive+0xd2>
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	223f      	movs	r2, #63	; 0x3f
 800f5ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f5ee:	e003      	b.n	800f5f8 <HAL_UART_Receive+0xd2>
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f5fe:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	689b      	ldr	r3, [r3, #8]
 800f604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f608:	d108      	bne.n	800f61c <HAL_UART_Receive+0xf6>
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	691b      	ldr	r3, [r3, #16]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d104      	bne.n	800f61c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800f612:	2300      	movs	r3, #0
 800f614:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f616:	68bb      	ldr	r3, [r7, #8]
 800f618:	61bb      	str	r3, [r7, #24]
 800f61a:	e003      	b.n	800f624 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f620:	2300      	movs	r3, #0
 800f622:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800f624:	e036      	b.n	800f694 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f626:	683b      	ldr	r3, [r7, #0]
 800f628:	9300      	str	r3, [sp, #0]
 800f62a:	697b      	ldr	r3, [r7, #20]
 800f62c:	2200      	movs	r2, #0
 800f62e:	2120      	movs	r1, #32
 800f630:	68f8      	ldr	r0, [r7, #12]
 800f632:	f000 fff9 	bl	8010628 <UART_WaitOnFlagUntilTimeout>
 800f636:	4603      	mov	r3, r0
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d005      	beq.n	800f648 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	2220      	movs	r2, #32
 800f640:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800f644:	2303      	movs	r3, #3
 800f646:	e032      	b.n	800f6ae <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800f648:	69fb      	ldr	r3, [r7, #28]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d10c      	bne.n	800f668 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f654:	b29a      	uxth	r2, r3
 800f656:	8a7b      	ldrh	r3, [r7, #18]
 800f658:	4013      	ands	r3, r2
 800f65a:	b29a      	uxth	r2, r3
 800f65c:	69bb      	ldr	r3, [r7, #24]
 800f65e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f660:	69bb      	ldr	r3, [r7, #24]
 800f662:	3302      	adds	r3, #2
 800f664:	61bb      	str	r3, [r7, #24]
 800f666:	e00c      	b.n	800f682 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f66e:	b2da      	uxtb	r2, r3
 800f670:	8a7b      	ldrh	r3, [r7, #18]
 800f672:	b2db      	uxtb	r3, r3
 800f674:	4013      	ands	r3, r2
 800f676:	b2da      	uxtb	r2, r3
 800f678:	69fb      	ldr	r3, [r7, #28]
 800f67a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800f67c:	69fb      	ldr	r3, [r7, #28]
 800f67e:	3301      	adds	r3, #1
 800f680:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f688:	b29b      	uxth	r3, r3
 800f68a:	3b01      	subs	r3, #1
 800f68c:	b29a      	uxth	r2, r3
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f69a:	b29b      	uxth	r3, r3
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d1c2      	bne.n	800f626 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	2220      	movs	r2, #32
 800f6a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	e000      	b.n	800f6ae <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800f6ac:	2302      	movs	r3, #2
  }
}
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	3720      	adds	r7, #32
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	bd80      	pop	{r7, pc}
	...

0800f6b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f6b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f6bc:	b092      	sub	sp, #72	; 0x48
 800f6be:	af00      	add	r7, sp, #0
 800f6c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f6c8:	697b      	ldr	r3, [r7, #20]
 800f6ca:	689a      	ldr	r2, [r3, #8]
 800f6cc:	697b      	ldr	r3, [r7, #20]
 800f6ce:	691b      	ldr	r3, [r3, #16]
 800f6d0:	431a      	orrs	r2, r3
 800f6d2:	697b      	ldr	r3, [r7, #20]
 800f6d4:	695b      	ldr	r3, [r3, #20]
 800f6d6:	431a      	orrs	r2, r3
 800f6d8:	697b      	ldr	r3, [r7, #20]
 800f6da:	69db      	ldr	r3, [r3, #28]
 800f6dc:	4313      	orrs	r3, r2
 800f6de:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f6e0:	697b      	ldr	r3, [r7, #20]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	681a      	ldr	r2, [r3, #0]
 800f6e6:	4bbe      	ldr	r3, [pc, #760]	; (800f9e0 <UART_SetConfig+0x328>)
 800f6e8:	4013      	ands	r3, r2
 800f6ea:	697a      	ldr	r2, [r7, #20]
 800f6ec:	6812      	ldr	r2, [r2, #0]
 800f6ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f6f0:	430b      	orrs	r3, r1
 800f6f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f6f4:	697b      	ldr	r3, [r7, #20]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	685b      	ldr	r3, [r3, #4]
 800f6fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f6fe:	697b      	ldr	r3, [r7, #20]
 800f700:	68da      	ldr	r2, [r3, #12]
 800f702:	697b      	ldr	r3, [r7, #20]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	430a      	orrs	r2, r1
 800f708:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f70a:	697b      	ldr	r3, [r7, #20]
 800f70c:	699b      	ldr	r3, [r3, #24]
 800f70e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f710:	697b      	ldr	r3, [r7, #20]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	4ab3      	ldr	r2, [pc, #716]	; (800f9e4 <UART_SetConfig+0x32c>)
 800f716:	4293      	cmp	r3, r2
 800f718:	d004      	beq.n	800f724 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f71a:	697b      	ldr	r3, [r7, #20]
 800f71c:	6a1b      	ldr	r3, [r3, #32]
 800f71e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f720:	4313      	orrs	r3, r2
 800f722:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f724:	697b      	ldr	r3, [r7, #20]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	689a      	ldr	r2, [r3, #8]
 800f72a:	4baf      	ldr	r3, [pc, #700]	; (800f9e8 <UART_SetConfig+0x330>)
 800f72c:	4013      	ands	r3, r2
 800f72e:	697a      	ldr	r2, [r7, #20]
 800f730:	6812      	ldr	r2, [r2, #0]
 800f732:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f734:	430b      	orrs	r3, r1
 800f736:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f738:	697b      	ldr	r3, [r7, #20]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f73e:	f023 010f 	bic.w	r1, r3, #15
 800f742:	697b      	ldr	r3, [r7, #20]
 800f744:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f746:	697b      	ldr	r3, [r7, #20]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	430a      	orrs	r2, r1
 800f74c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f74e:	697b      	ldr	r3, [r7, #20]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	4aa6      	ldr	r2, [pc, #664]	; (800f9ec <UART_SetConfig+0x334>)
 800f754:	4293      	cmp	r3, r2
 800f756:	d177      	bne.n	800f848 <UART_SetConfig+0x190>
 800f758:	4ba5      	ldr	r3, [pc, #660]	; (800f9f0 <UART_SetConfig+0x338>)
 800f75a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f75c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f760:	2b28      	cmp	r3, #40	; 0x28
 800f762:	d86d      	bhi.n	800f840 <UART_SetConfig+0x188>
 800f764:	a201      	add	r2, pc, #4	; (adr r2, 800f76c <UART_SetConfig+0xb4>)
 800f766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f76a:	bf00      	nop
 800f76c:	0800f811 	.word	0x0800f811
 800f770:	0800f841 	.word	0x0800f841
 800f774:	0800f841 	.word	0x0800f841
 800f778:	0800f841 	.word	0x0800f841
 800f77c:	0800f841 	.word	0x0800f841
 800f780:	0800f841 	.word	0x0800f841
 800f784:	0800f841 	.word	0x0800f841
 800f788:	0800f841 	.word	0x0800f841
 800f78c:	0800f819 	.word	0x0800f819
 800f790:	0800f841 	.word	0x0800f841
 800f794:	0800f841 	.word	0x0800f841
 800f798:	0800f841 	.word	0x0800f841
 800f79c:	0800f841 	.word	0x0800f841
 800f7a0:	0800f841 	.word	0x0800f841
 800f7a4:	0800f841 	.word	0x0800f841
 800f7a8:	0800f841 	.word	0x0800f841
 800f7ac:	0800f821 	.word	0x0800f821
 800f7b0:	0800f841 	.word	0x0800f841
 800f7b4:	0800f841 	.word	0x0800f841
 800f7b8:	0800f841 	.word	0x0800f841
 800f7bc:	0800f841 	.word	0x0800f841
 800f7c0:	0800f841 	.word	0x0800f841
 800f7c4:	0800f841 	.word	0x0800f841
 800f7c8:	0800f841 	.word	0x0800f841
 800f7cc:	0800f829 	.word	0x0800f829
 800f7d0:	0800f841 	.word	0x0800f841
 800f7d4:	0800f841 	.word	0x0800f841
 800f7d8:	0800f841 	.word	0x0800f841
 800f7dc:	0800f841 	.word	0x0800f841
 800f7e0:	0800f841 	.word	0x0800f841
 800f7e4:	0800f841 	.word	0x0800f841
 800f7e8:	0800f841 	.word	0x0800f841
 800f7ec:	0800f831 	.word	0x0800f831
 800f7f0:	0800f841 	.word	0x0800f841
 800f7f4:	0800f841 	.word	0x0800f841
 800f7f8:	0800f841 	.word	0x0800f841
 800f7fc:	0800f841 	.word	0x0800f841
 800f800:	0800f841 	.word	0x0800f841
 800f804:	0800f841 	.word	0x0800f841
 800f808:	0800f841 	.word	0x0800f841
 800f80c:	0800f839 	.word	0x0800f839
 800f810:	2301      	movs	r3, #1
 800f812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f816:	e326      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800f818:	2304      	movs	r3, #4
 800f81a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f81e:	e322      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800f820:	2308      	movs	r3, #8
 800f822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f826:	e31e      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800f828:	2310      	movs	r3, #16
 800f82a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f82e:	e31a      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800f830:	2320      	movs	r3, #32
 800f832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f836:	e316      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800f838:	2340      	movs	r3, #64	; 0x40
 800f83a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f83e:	e312      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800f840:	2380      	movs	r3, #128	; 0x80
 800f842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f846:	e30e      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800f848:	697b      	ldr	r3, [r7, #20]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	4a69      	ldr	r2, [pc, #420]	; (800f9f4 <UART_SetConfig+0x33c>)
 800f84e:	4293      	cmp	r3, r2
 800f850:	d130      	bne.n	800f8b4 <UART_SetConfig+0x1fc>
 800f852:	4b67      	ldr	r3, [pc, #412]	; (800f9f0 <UART_SetConfig+0x338>)
 800f854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f856:	f003 0307 	and.w	r3, r3, #7
 800f85a:	2b05      	cmp	r3, #5
 800f85c:	d826      	bhi.n	800f8ac <UART_SetConfig+0x1f4>
 800f85e:	a201      	add	r2, pc, #4	; (adr r2, 800f864 <UART_SetConfig+0x1ac>)
 800f860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f864:	0800f87d 	.word	0x0800f87d
 800f868:	0800f885 	.word	0x0800f885
 800f86c:	0800f88d 	.word	0x0800f88d
 800f870:	0800f895 	.word	0x0800f895
 800f874:	0800f89d 	.word	0x0800f89d
 800f878:	0800f8a5 	.word	0x0800f8a5
 800f87c:	2300      	movs	r3, #0
 800f87e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f882:	e2f0      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800f884:	2304      	movs	r3, #4
 800f886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f88a:	e2ec      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800f88c:	2308      	movs	r3, #8
 800f88e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f892:	e2e8      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800f894:	2310      	movs	r3, #16
 800f896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f89a:	e2e4      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800f89c:	2320      	movs	r3, #32
 800f89e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8a2:	e2e0      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800f8a4:	2340      	movs	r3, #64	; 0x40
 800f8a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8aa:	e2dc      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800f8ac:	2380      	movs	r3, #128	; 0x80
 800f8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8b2:	e2d8      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800f8b4:	697b      	ldr	r3, [r7, #20]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	4a4f      	ldr	r2, [pc, #316]	; (800f9f8 <UART_SetConfig+0x340>)
 800f8ba:	4293      	cmp	r3, r2
 800f8bc:	d130      	bne.n	800f920 <UART_SetConfig+0x268>
 800f8be:	4b4c      	ldr	r3, [pc, #304]	; (800f9f0 <UART_SetConfig+0x338>)
 800f8c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8c2:	f003 0307 	and.w	r3, r3, #7
 800f8c6:	2b05      	cmp	r3, #5
 800f8c8:	d826      	bhi.n	800f918 <UART_SetConfig+0x260>
 800f8ca:	a201      	add	r2, pc, #4	; (adr r2, 800f8d0 <UART_SetConfig+0x218>)
 800f8cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8d0:	0800f8e9 	.word	0x0800f8e9
 800f8d4:	0800f8f1 	.word	0x0800f8f1
 800f8d8:	0800f8f9 	.word	0x0800f8f9
 800f8dc:	0800f901 	.word	0x0800f901
 800f8e0:	0800f909 	.word	0x0800f909
 800f8e4:	0800f911 	.word	0x0800f911
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8ee:	e2ba      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800f8f0:	2304      	movs	r3, #4
 800f8f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8f6:	e2b6      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800f8f8:	2308      	movs	r3, #8
 800f8fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8fe:	e2b2      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800f900:	2310      	movs	r3, #16
 800f902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f906:	e2ae      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800f908:	2320      	movs	r3, #32
 800f90a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f90e:	e2aa      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800f910:	2340      	movs	r3, #64	; 0x40
 800f912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f916:	e2a6      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800f918:	2380      	movs	r3, #128	; 0x80
 800f91a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f91e:	e2a2      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800f920:	697b      	ldr	r3, [r7, #20]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	4a35      	ldr	r2, [pc, #212]	; (800f9fc <UART_SetConfig+0x344>)
 800f926:	4293      	cmp	r3, r2
 800f928:	d130      	bne.n	800f98c <UART_SetConfig+0x2d4>
 800f92a:	4b31      	ldr	r3, [pc, #196]	; (800f9f0 <UART_SetConfig+0x338>)
 800f92c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f92e:	f003 0307 	and.w	r3, r3, #7
 800f932:	2b05      	cmp	r3, #5
 800f934:	d826      	bhi.n	800f984 <UART_SetConfig+0x2cc>
 800f936:	a201      	add	r2, pc, #4	; (adr r2, 800f93c <UART_SetConfig+0x284>)
 800f938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f93c:	0800f955 	.word	0x0800f955
 800f940:	0800f95d 	.word	0x0800f95d
 800f944:	0800f965 	.word	0x0800f965
 800f948:	0800f96d 	.word	0x0800f96d
 800f94c:	0800f975 	.word	0x0800f975
 800f950:	0800f97d 	.word	0x0800f97d
 800f954:	2300      	movs	r3, #0
 800f956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f95a:	e284      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800f95c:	2304      	movs	r3, #4
 800f95e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f962:	e280      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800f964:	2308      	movs	r3, #8
 800f966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f96a:	e27c      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800f96c:	2310      	movs	r3, #16
 800f96e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f972:	e278      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800f974:	2320      	movs	r3, #32
 800f976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f97a:	e274      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800f97c:	2340      	movs	r3, #64	; 0x40
 800f97e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f982:	e270      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800f984:	2380      	movs	r3, #128	; 0x80
 800f986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f98a:	e26c      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800f98c:	697b      	ldr	r3, [r7, #20]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	4a1b      	ldr	r2, [pc, #108]	; (800fa00 <UART_SetConfig+0x348>)
 800f992:	4293      	cmp	r3, r2
 800f994:	d142      	bne.n	800fa1c <UART_SetConfig+0x364>
 800f996:	4b16      	ldr	r3, [pc, #88]	; (800f9f0 <UART_SetConfig+0x338>)
 800f998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f99a:	f003 0307 	and.w	r3, r3, #7
 800f99e:	2b05      	cmp	r3, #5
 800f9a0:	d838      	bhi.n	800fa14 <UART_SetConfig+0x35c>
 800f9a2:	a201      	add	r2, pc, #4	; (adr r2, 800f9a8 <UART_SetConfig+0x2f0>)
 800f9a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9a8:	0800f9c1 	.word	0x0800f9c1
 800f9ac:	0800f9c9 	.word	0x0800f9c9
 800f9b0:	0800f9d1 	.word	0x0800f9d1
 800f9b4:	0800f9d9 	.word	0x0800f9d9
 800f9b8:	0800fa05 	.word	0x0800fa05
 800f9bc:	0800fa0d 	.word	0x0800fa0d
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9c6:	e24e      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800f9c8:	2304      	movs	r3, #4
 800f9ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9ce:	e24a      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800f9d0:	2308      	movs	r3, #8
 800f9d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9d6:	e246      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800f9d8:	2310      	movs	r3, #16
 800f9da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9de:	e242      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800f9e0:	cfff69f3 	.word	0xcfff69f3
 800f9e4:	58000c00 	.word	0x58000c00
 800f9e8:	11fff4ff 	.word	0x11fff4ff
 800f9ec:	40011000 	.word	0x40011000
 800f9f0:	58024400 	.word	0x58024400
 800f9f4:	40004400 	.word	0x40004400
 800f9f8:	40004800 	.word	0x40004800
 800f9fc:	40004c00 	.word	0x40004c00
 800fa00:	40005000 	.word	0x40005000
 800fa04:	2320      	movs	r3, #32
 800fa06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa0a:	e22c      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fa0c:	2340      	movs	r3, #64	; 0x40
 800fa0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa12:	e228      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fa14:	2380      	movs	r3, #128	; 0x80
 800fa16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa1a:	e224      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fa1c:	697b      	ldr	r3, [r7, #20]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	4ab1      	ldr	r2, [pc, #708]	; (800fce8 <UART_SetConfig+0x630>)
 800fa22:	4293      	cmp	r3, r2
 800fa24:	d176      	bne.n	800fb14 <UART_SetConfig+0x45c>
 800fa26:	4bb1      	ldr	r3, [pc, #708]	; (800fcec <UART_SetConfig+0x634>)
 800fa28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fa2e:	2b28      	cmp	r3, #40	; 0x28
 800fa30:	d86c      	bhi.n	800fb0c <UART_SetConfig+0x454>
 800fa32:	a201      	add	r2, pc, #4	; (adr r2, 800fa38 <UART_SetConfig+0x380>)
 800fa34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa38:	0800fadd 	.word	0x0800fadd
 800fa3c:	0800fb0d 	.word	0x0800fb0d
 800fa40:	0800fb0d 	.word	0x0800fb0d
 800fa44:	0800fb0d 	.word	0x0800fb0d
 800fa48:	0800fb0d 	.word	0x0800fb0d
 800fa4c:	0800fb0d 	.word	0x0800fb0d
 800fa50:	0800fb0d 	.word	0x0800fb0d
 800fa54:	0800fb0d 	.word	0x0800fb0d
 800fa58:	0800fae5 	.word	0x0800fae5
 800fa5c:	0800fb0d 	.word	0x0800fb0d
 800fa60:	0800fb0d 	.word	0x0800fb0d
 800fa64:	0800fb0d 	.word	0x0800fb0d
 800fa68:	0800fb0d 	.word	0x0800fb0d
 800fa6c:	0800fb0d 	.word	0x0800fb0d
 800fa70:	0800fb0d 	.word	0x0800fb0d
 800fa74:	0800fb0d 	.word	0x0800fb0d
 800fa78:	0800faed 	.word	0x0800faed
 800fa7c:	0800fb0d 	.word	0x0800fb0d
 800fa80:	0800fb0d 	.word	0x0800fb0d
 800fa84:	0800fb0d 	.word	0x0800fb0d
 800fa88:	0800fb0d 	.word	0x0800fb0d
 800fa8c:	0800fb0d 	.word	0x0800fb0d
 800fa90:	0800fb0d 	.word	0x0800fb0d
 800fa94:	0800fb0d 	.word	0x0800fb0d
 800fa98:	0800faf5 	.word	0x0800faf5
 800fa9c:	0800fb0d 	.word	0x0800fb0d
 800faa0:	0800fb0d 	.word	0x0800fb0d
 800faa4:	0800fb0d 	.word	0x0800fb0d
 800faa8:	0800fb0d 	.word	0x0800fb0d
 800faac:	0800fb0d 	.word	0x0800fb0d
 800fab0:	0800fb0d 	.word	0x0800fb0d
 800fab4:	0800fb0d 	.word	0x0800fb0d
 800fab8:	0800fafd 	.word	0x0800fafd
 800fabc:	0800fb0d 	.word	0x0800fb0d
 800fac0:	0800fb0d 	.word	0x0800fb0d
 800fac4:	0800fb0d 	.word	0x0800fb0d
 800fac8:	0800fb0d 	.word	0x0800fb0d
 800facc:	0800fb0d 	.word	0x0800fb0d
 800fad0:	0800fb0d 	.word	0x0800fb0d
 800fad4:	0800fb0d 	.word	0x0800fb0d
 800fad8:	0800fb05 	.word	0x0800fb05
 800fadc:	2301      	movs	r3, #1
 800fade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fae2:	e1c0      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fae4:	2304      	movs	r3, #4
 800fae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800faea:	e1bc      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800faec:	2308      	movs	r3, #8
 800faee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800faf2:	e1b8      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800faf4:	2310      	movs	r3, #16
 800faf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fafa:	e1b4      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fafc:	2320      	movs	r3, #32
 800fafe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb02:	e1b0      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fb04:	2340      	movs	r3, #64	; 0x40
 800fb06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb0a:	e1ac      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fb0c:	2380      	movs	r3, #128	; 0x80
 800fb0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb12:	e1a8      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fb14:	697b      	ldr	r3, [r7, #20]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	4a75      	ldr	r2, [pc, #468]	; (800fcf0 <UART_SetConfig+0x638>)
 800fb1a:	4293      	cmp	r3, r2
 800fb1c:	d130      	bne.n	800fb80 <UART_SetConfig+0x4c8>
 800fb1e:	4b73      	ldr	r3, [pc, #460]	; (800fcec <UART_SetConfig+0x634>)
 800fb20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb22:	f003 0307 	and.w	r3, r3, #7
 800fb26:	2b05      	cmp	r3, #5
 800fb28:	d826      	bhi.n	800fb78 <UART_SetConfig+0x4c0>
 800fb2a:	a201      	add	r2, pc, #4	; (adr r2, 800fb30 <UART_SetConfig+0x478>)
 800fb2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb30:	0800fb49 	.word	0x0800fb49
 800fb34:	0800fb51 	.word	0x0800fb51
 800fb38:	0800fb59 	.word	0x0800fb59
 800fb3c:	0800fb61 	.word	0x0800fb61
 800fb40:	0800fb69 	.word	0x0800fb69
 800fb44:	0800fb71 	.word	0x0800fb71
 800fb48:	2300      	movs	r3, #0
 800fb4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb4e:	e18a      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fb50:	2304      	movs	r3, #4
 800fb52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb56:	e186      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fb58:	2308      	movs	r3, #8
 800fb5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb5e:	e182      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fb60:	2310      	movs	r3, #16
 800fb62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb66:	e17e      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fb68:	2320      	movs	r3, #32
 800fb6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb6e:	e17a      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fb70:	2340      	movs	r3, #64	; 0x40
 800fb72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb76:	e176      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fb78:	2380      	movs	r3, #128	; 0x80
 800fb7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb7e:	e172      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fb80:	697b      	ldr	r3, [r7, #20]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	4a5b      	ldr	r2, [pc, #364]	; (800fcf4 <UART_SetConfig+0x63c>)
 800fb86:	4293      	cmp	r3, r2
 800fb88:	d130      	bne.n	800fbec <UART_SetConfig+0x534>
 800fb8a:	4b58      	ldr	r3, [pc, #352]	; (800fcec <UART_SetConfig+0x634>)
 800fb8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb8e:	f003 0307 	and.w	r3, r3, #7
 800fb92:	2b05      	cmp	r3, #5
 800fb94:	d826      	bhi.n	800fbe4 <UART_SetConfig+0x52c>
 800fb96:	a201      	add	r2, pc, #4	; (adr r2, 800fb9c <UART_SetConfig+0x4e4>)
 800fb98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb9c:	0800fbb5 	.word	0x0800fbb5
 800fba0:	0800fbbd 	.word	0x0800fbbd
 800fba4:	0800fbc5 	.word	0x0800fbc5
 800fba8:	0800fbcd 	.word	0x0800fbcd
 800fbac:	0800fbd5 	.word	0x0800fbd5
 800fbb0:	0800fbdd 	.word	0x0800fbdd
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbba:	e154      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fbbc:	2304      	movs	r3, #4
 800fbbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbc2:	e150      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fbc4:	2308      	movs	r3, #8
 800fbc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbca:	e14c      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fbcc:	2310      	movs	r3, #16
 800fbce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbd2:	e148      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fbd4:	2320      	movs	r3, #32
 800fbd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbda:	e144      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fbdc:	2340      	movs	r3, #64	; 0x40
 800fbde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbe2:	e140      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fbe4:	2380      	movs	r3, #128	; 0x80
 800fbe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbea:	e13c      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fbec:	697b      	ldr	r3, [r7, #20]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	4a41      	ldr	r2, [pc, #260]	; (800fcf8 <UART_SetConfig+0x640>)
 800fbf2:	4293      	cmp	r3, r2
 800fbf4:	f040 8082 	bne.w	800fcfc <UART_SetConfig+0x644>
 800fbf8:	4b3c      	ldr	r3, [pc, #240]	; (800fcec <UART_SetConfig+0x634>)
 800fbfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fbfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fc00:	2b28      	cmp	r3, #40	; 0x28
 800fc02:	d86d      	bhi.n	800fce0 <UART_SetConfig+0x628>
 800fc04:	a201      	add	r2, pc, #4	; (adr r2, 800fc0c <UART_SetConfig+0x554>)
 800fc06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc0a:	bf00      	nop
 800fc0c:	0800fcb1 	.word	0x0800fcb1
 800fc10:	0800fce1 	.word	0x0800fce1
 800fc14:	0800fce1 	.word	0x0800fce1
 800fc18:	0800fce1 	.word	0x0800fce1
 800fc1c:	0800fce1 	.word	0x0800fce1
 800fc20:	0800fce1 	.word	0x0800fce1
 800fc24:	0800fce1 	.word	0x0800fce1
 800fc28:	0800fce1 	.word	0x0800fce1
 800fc2c:	0800fcb9 	.word	0x0800fcb9
 800fc30:	0800fce1 	.word	0x0800fce1
 800fc34:	0800fce1 	.word	0x0800fce1
 800fc38:	0800fce1 	.word	0x0800fce1
 800fc3c:	0800fce1 	.word	0x0800fce1
 800fc40:	0800fce1 	.word	0x0800fce1
 800fc44:	0800fce1 	.word	0x0800fce1
 800fc48:	0800fce1 	.word	0x0800fce1
 800fc4c:	0800fcc1 	.word	0x0800fcc1
 800fc50:	0800fce1 	.word	0x0800fce1
 800fc54:	0800fce1 	.word	0x0800fce1
 800fc58:	0800fce1 	.word	0x0800fce1
 800fc5c:	0800fce1 	.word	0x0800fce1
 800fc60:	0800fce1 	.word	0x0800fce1
 800fc64:	0800fce1 	.word	0x0800fce1
 800fc68:	0800fce1 	.word	0x0800fce1
 800fc6c:	0800fcc9 	.word	0x0800fcc9
 800fc70:	0800fce1 	.word	0x0800fce1
 800fc74:	0800fce1 	.word	0x0800fce1
 800fc78:	0800fce1 	.word	0x0800fce1
 800fc7c:	0800fce1 	.word	0x0800fce1
 800fc80:	0800fce1 	.word	0x0800fce1
 800fc84:	0800fce1 	.word	0x0800fce1
 800fc88:	0800fce1 	.word	0x0800fce1
 800fc8c:	0800fcd1 	.word	0x0800fcd1
 800fc90:	0800fce1 	.word	0x0800fce1
 800fc94:	0800fce1 	.word	0x0800fce1
 800fc98:	0800fce1 	.word	0x0800fce1
 800fc9c:	0800fce1 	.word	0x0800fce1
 800fca0:	0800fce1 	.word	0x0800fce1
 800fca4:	0800fce1 	.word	0x0800fce1
 800fca8:	0800fce1 	.word	0x0800fce1
 800fcac:	0800fcd9 	.word	0x0800fcd9
 800fcb0:	2301      	movs	r3, #1
 800fcb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcb6:	e0d6      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fcb8:	2304      	movs	r3, #4
 800fcba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcbe:	e0d2      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fcc0:	2308      	movs	r3, #8
 800fcc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcc6:	e0ce      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fcc8:	2310      	movs	r3, #16
 800fcca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcce:	e0ca      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fcd0:	2320      	movs	r3, #32
 800fcd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcd6:	e0c6      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fcd8:	2340      	movs	r3, #64	; 0x40
 800fcda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fcde:	e0c2      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fce0:	2380      	movs	r3, #128	; 0x80
 800fce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fce6:	e0be      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fce8:	40011400 	.word	0x40011400
 800fcec:	58024400 	.word	0x58024400
 800fcf0:	40007800 	.word	0x40007800
 800fcf4:	40007c00 	.word	0x40007c00
 800fcf8:	40011800 	.word	0x40011800
 800fcfc:	697b      	ldr	r3, [r7, #20]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	4aad      	ldr	r2, [pc, #692]	; (800ffb8 <UART_SetConfig+0x900>)
 800fd02:	4293      	cmp	r3, r2
 800fd04:	d176      	bne.n	800fdf4 <UART_SetConfig+0x73c>
 800fd06:	4bad      	ldr	r3, [pc, #692]	; (800ffbc <UART_SetConfig+0x904>)
 800fd08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fd0e:	2b28      	cmp	r3, #40	; 0x28
 800fd10:	d86c      	bhi.n	800fdec <UART_SetConfig+0x734>
 800fd12:	a201      	add	r2, pc, #4	; (adr r2, 800fd18 <UART_SetConfig+0x660>)
 800fd14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd18:	0800fdbd 	.word	0x0800fdbd
 800fd1c:	0800fded 	.word	0x0800fded
 800fd20:	0800fded 	.word	0x0800fded
 800fd24:	0800fded 	.word	0x0800fded
 800fd28:	0800fded 	.word	0x0800fded
 800fd2c:	0800fded 	.word	0x0800fded
 800fd30:	0800fded 	.word	0x0800fded
 800fd34:	0800fded 	.word	0x0800fded
 800fd38:	0800fdc5 	.word	0x0800fdc5
 800fd3c:	0800fded 	.word	0x0800fded
 800fd40:	0800fded 	.word	0x0800fded
 800fd44:	0800fded 	.word	0x0800fded
 800fd48:	0800fded 	.word	0x0800fded
 800fd4c:	0800fded 	.word	0x0800fded
 800fd50:	0800fded 	.word	0x0800fded
 800fd54:	0800fded 	.word	0x0800fded
 800fd58:	0800fdcd 	.word	0x0800fdcd
 800fd5c:	0800fded 	.word	0x0800fded
 800fd60:	0800fded 	.word	0x0800fded
 800fd64:	0800fded 	.word	0x0800fded
 800fd68:	0800fded 	.word	0x0800fded
 800fd6c:	0800fded 	.word	0x0800fded
 800fd70:	0800fded 	.word	0x0800fded
 800fd74:	0800fded 	.word	0x0800fded
 800fd78:	0800fdd5 	.word	0x0800fdd5
 800fd7c:	0800fded 	.word	0x0800fded
 800fd80:	0800fded 	.word	0x0800fded
 800fd84:	0800fded 	.word	0x0800fded
 800fd88:	0800fded 	.word	0x0800fded
 800fd8c:	0800fded 	.word	0x0800fded
 800fd90:	0800fded 	.word	0x0800fded
 800fd94:	0800fded 	.word	0x0800fded
 800fd98:	0800fddd 	.word	0x0800fddd
 800fd9c:	0800fded 	.word	0x0800fded
 800fda0:	0800fded 	.word	0x0800fded
 800fda4:	0800fded 	.word	0x0800fded
 800fda8:	0800fded 	.word	0x0800fded
 800fdac:	0800fded 	.word	0x0800fded
 800fdb0:	0800fded 	.word	0x0800fded
 800fdb4:	0800fded 	.word	0x0800fded
 800fdb8:	0800fde5 	.word	0x0800fde5
 800fdbc:	2301      	movs	r3, #1
 800fdbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdc2:	e050      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fdc4:	2304      	movs	r3, #4
 800fdc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdca:	e04c      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fdcc:	2308      	movs	r3, #8
 800fdce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdd2:	e048      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fdd4:	2310      	movs	r3, #16
 800fdd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdda:	e044      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fddc:	2320      	movs	r3, #32
 800fdde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fde2:	e040      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fde4:	2340      	movs	r3, #64	; 0x40
 800fde6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdea:	e03c      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fdec:	2380      	movs	r3, #128	; 0x80
 800fdee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fdf2:	e038      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fdf4:	697b      	ldr	r3, [r7, #20]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	4a71      	ldr	r2, [pc, #452]	; (800ffc0 <UART_SetConfig+0x908>)
 800fdfa:	4293      	cmp	r3, r2
 800fdfc:	d130      	bne.n	800fe60 <UART_SetConfig+0x7a8>
 800fdfe:	4b6f      	ldr	r3, [pc, #444]	; (800ffbc <UART_SetConfig+0x904>)
 800fe00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe02:	f003 0307 	and.w	r3, r3, #7
 800fe06:	2b05      	cmp	r3, #5
 800fe08:	d826      	bhi.n	800fe58 <UART_SetConfig+0x7a0>
 800fe0a:	a201      	add	r2, pc, #4	; (adr r2, 800fe10 <UART_SetConfig+0x758>)
 800fe0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe10:	0800fe29 	.word	0x0800fe29
 800fe14:	0800fe31 	.word	0x0800fe31
 800fe18:	0800fe39 	.word	0x0800fe39
 800fe1c:	0800fe41 	.word	0x0800fe41
 800fe20:	0800fe49 	.word	0x0800fe49
 800fe24:	0800fe51 	.word	0x0800fe51
 800fe28:	2302      	movs	r3, #2
 800fe2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe2e:	e01a      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fe30:	2304      	movs	r3, #4
 800fe32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe36:	e016      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fe38:	2308      	movs	r3, #8
 800fe3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe3e:	e012      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fe40:	2310      	movs	r3, #16
 800fe42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe46:	e00e      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fe48:	2320      	movs	r3, #32
 800fe4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe4e:	e00a      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fe50:	2340      	movs	r3, #64	; 0x40
 800fe52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe56:	e006      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fe58:	2380      	movs	r3, #128	; 0x80
 800fe5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe5e:	e002      	b.n	800fe66 <UART_SetConfig+0x7ae>
 800fe60:	2380      	movs	r3, #128	; 0x80
 800fe62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fe66:	697b      	ldr	r3, [r7, #20]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	4a55      	ldr	r2, [pc, #340]	; (800ffc0 <UART_SetConfig+0x908>)
 800fe6c:	4293      	cmp	r3, r2
 800fe6e:	f040 80f8 	bne.w	8010062 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fe72:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fe76:	2b20      	cmp	r3, #32
 800fe78:	dc46      	bgt.n	800ff08 <UART_SetConfig+0x850>
 800fe7a:	2b02      	cmp	r3, #2
 800fe7c:	db75      	blt.n	800ff6a <UART_SetConfig+0x8b2>
 800fe7e:	3b02      	subs	r3, #2
 800fe80:	2b1e      	cmp	r3, #30
 800fe82:	d872      	bhi.n	800ff6a <UART_SetConfig+0x8b2>
 800fe84:	a201      	add	r2, pc, #4	; (adr r2, 800fe8c <UART_SetConfig+0x7d4>)
 800fe86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe8a:	bf00      	nop
 800fe8c:	0800ff0f 	.word	0x0800ff0f
 800fe90:	0800ff6b 	.word	0x0800ff6b
 800fe94:	0800ff17 	.word	0x0800ff17
 800fe98:	0800ff6b 	.word	0x0800ff6b
 800fe9c:	0800ff6b 	.word	0x0800ff6b
 800fea0:	0800ff6b 	.word	0x0800ff6b
 800fea4:	0800ff27 	.word	0x0800ff27
 800fea8:	0800ff6b 	.word	0x0800ff6b
 800feac:	0800ff6b 	.word	0x0800ff6b
 800feb0:	0800ff6b 	.word	0x0800ff6b
 800feb4:	0800ff6b 	.word	0x0800ff6b
 800feb8:	0800ff6b 	.word	0x0800ff6b
 800febc:	0800ff6b 	.word	0x0800ff6b
 800fec0:	0800ff6b 	.word	0x0800ff6b
 800fec4:	0800ff37 	.word	0x0800ff37
 800fec8:	0800ff6b 	.word	0x0800ff6b
 800fecc:	0800ff6b 	.word	0x0800ff6b
 800fed0:	0800ff6b 	.word	0x0800ff6b
 800fed4:	0800ff6b 	.word	0x0800ff6b
 800fed8:	0800ff6b 	.word	0x0800ff6b
 800fedc:	0800ff6b 	.word	0x0800ff6b
 800fee0:	0800ff6b 	.word	0x0800ff6b
 800fee4:	0800ff6b 	.word	0x0800ff6b
 800fee8:	0800ff6b 	.word	0x0800ff6b
 800feec:	0800ff6b 	.word	0x0800ff6b
 800fef0:	0800ff6b 	.word	0x0800ff6b
 800fef4:	0800ff6b 	.word	0x0800ff6b
 800fef8:	0800ff6b 	.word	0x0800ff6b
 800fefc:	0800ff6b 	.word	0x0800ff6b
 800ff00:	0800ff6b 	.word	0x0800ff6b
 800ff04:	0800ff5d 	.word	0x0800ff5d
 800ff08:	2b40      	cmp	r3, #64	; 0x40
 800ff0a:	d02a      	beq.n	800ff62 <UART_SetConfig+0x8aa>
 800ff0c:	e02d      	b.n	800ff6a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ff0e:	f7fd f93f 	bl	800d190 <HAL_RCCEx_GetD3PCLK1Freq>
 800ff12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ff14:	e02f      	b.n	800ff76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ff16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f7fd f94e 	bl	800d1bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ff20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff24:	e027      	b.n	800ff76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ff26:	f107 0318 	add.w	r3, r7, #24
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	f7fd fa9a 	bl	800d464 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ff30:	69fb      	ldr	r3, [r7, #28]
 800ff32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff34:	e01f      	b.n	800ff76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ff36:	4b21      	ldr	r3, [pc, #132]	; (800ffbc <UART_SetConfig+0x904>)
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	f003 0320 	and.w	r3, r3, #32
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d009      	beq.n	800ff56 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ff42:	4b1e      	ldr	r3, [pc, #120]	; (800ffbc <UART_SetConfig+0x904>)
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	08db      	lsrs	r3, r3, #3
 800ff48:	f003 0303 	and.w	r3, r3, #3
 800ff4c:	4a1d      	ldr	r2, [pc, #116]	; (800ffc4 <UART_SetConfig+0x90c>)
 800ff4e:	fa22 f303 	lsr.w	r3, r2, r3
 800ff52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ff54:	e00f      	b.n	800ff76 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ff56:	4b1b      	ldr	r3, [pc, #108]	; (800ffc4 <UART_SetConfig+0x90c>)
 800ff58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff5a:	e00c      	b.n	800ff76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ff5c:	4b1a      	ldr	r3, [pc, #104]	; (800ffc8 <UART_SetConfig+0x910>)
 800ff5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff60:	e009      	b.n	800ff76 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ff62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ff66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff68:	e005      	b.n	800ff76 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ff6e:	2301      	movs	r3, #1
 800ff70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ff74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ff76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	f000 81ee 	beq.w	801035a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ff7e:	697b      	ldr	r3, [r7, #20]
 800ff80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff82:	4a12      	ldr	r2, [pc, #72]	; (800ffcc <UART_SetConfig+0x914>)
 800ff84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff88:	461a      	mov	r2, r3
 800ff8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff8c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff90:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ff92:	697b      	ldr	r3, [r7, #20]
 800ff94:	685a      	ldr	r2, [r3, #4]
 800ff96:	4613      	mov	r3, r2
 800ff98:	005b      	lsls	r3, r3, #1
 800ff9a:	4413      	add	r3, r2
 800ff9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff9e:	429a      	cmp	r2, r3
 800ffa0:	d305      	bcc.n	800ffae <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ffa2:	697b      	ldr	r3, [r7, #20]
 800ffa4:	685b      	ldr	r3, [r3, #4]
 800ffa6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ffa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ffaa:	429a      	cmp	r2, r3
 800ffac:	d910      	bls.n	800ffd0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ffae:	2301      	movs	r3, #1
 800ffb0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ffb4:	e1d1      	b.n	801035a <UART_SetConfig+0xca2>
 800ffb6:	bf00      	nop
 800ffb8:	40011c00 	.word	0x40011c00
 800ffbc:	58024400 	.word	0x58024400
 800ffc0:	58000c00 	.word	0x58000c00
 800ffc4:	03d09000 	.word	0x03d09000
 800ffc8:	003d0900 	.word	0x003d0900
 800ffcc:	08011db0 	.word	0x08011db0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ffd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffd2:	2200      	movs	r2, #0
 800ffd4:	60bb      	str	r3, [r7, #8]
 800ffd6:	60fa      	str	r2, [r7, #12]
 800ffd8:	697b      	ldr	r3, [r7, #20]
 800ffda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffdc:	4ac0      	ldr	r2, [pc, #768]	; (80102e0 <UART_SetConfig+0xc28>)
 800ffde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ffe2:	b29b      	uxth	r3, r3
 800ffe4:	2200      	movs	r2, #0
 800ffe6:	603b      	str	r3, [r7, #0]
 800ffe8:	607a      	str	r2, [r7, #4]
 800ffea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ffee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fff2:	f7f0 f9e5 	bl	80003c0 <__aeabi_uldivmod>
 800fff6:	4602      	mov	r2, r0
 800fff8:	460b      	mov	r3, r1
 800fffa:	4610      	mov	r0, r2
 800fffc:	4619      	mov	r1, r3
 800fffe:	f04f 0200 	mov.w	r2, #0
 8010002:	f04f 0300 	mov.w	r3, #0
 8010006:	020b      	lsls	r3, r1, #8
 8010008:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801000c:	0202      	lsls	r2, r0, #8
 801000e:	6979      	ldr	r1, [r7, #20]
 8010010:	6849      	ldr	r1, [r1, #4]
 8010012:	0849      	lsrs	r1, r1, #1
 8010014:	2000      	movs	r0, #0
 8010016:	460c      	mov	r4, r1
 8010018:	4605      	mov	r5, r0
 801001a:	eb12 0804 	adds.w	r8, r2, r4
 801001e:	eb43 0905 	adc.w	r9, r3, r5
 8010022:	697b      	ldr	r3, [r7, #20]
 8010024:	685b      	ldr	r3, [r3, #4]
 8010026:	2200      	movs	r2, #0
 8010028:	469a      	mov	sl, r3
 801002a:	4693      	mov	fp, r2
 801002c:	4652      	mov	r2, sl
 801002e:	465b      	mov	r3, fp
 8010030:	4640      	mov	r0, r8
 8010032:	4649      	mov	r1, r9
 8010034:	f7f0 f9c4 	bl	80003c0 <__aeabi_uldivmod>
 8010038:	4602      	mov	r2, r0
 801003a:	460b      	mov	r3, r1
 801003c:	4613      	mov	r3, r2
 801003e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010042:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010046:	d308      	bcc.n	801005a <UART_SetConfig+0x9a2>
 8010048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801004a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801004e:	d204      	bcs.n	801005a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8010050:	697b      	ldr	r3, [r7, #20]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010056:	60da      	str	r2, [r3, #12]
 8010058:	e17f      	b.n	801035a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 801005a:	2301      	movs	r3, #1
 801005c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010060:	e17b      	b.n	801035a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010062:	697b      	ldr	r3, [r7, #20]
 8010064:	69db      	ldr	r3, [r3, #28]
 8010066:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801006a:	f040 80bd 	bne.w	80101e8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 801006e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010072:	2b20      	cmp	r3, #32
 8010074:	dc48      	bgt.n	8010108 <UART_SetConfig+0xa50>
 8010076:	2b00      	cmp	r3, #0
 8010078:	db7b      	blt.n	8010172 <UART_SetConfig+0xaba>
 801007a:	2b20      	cmp	r3, #32
 801007c:	d879      	bhi.n	8010172 <UART_SetConfig+0xaba>
 801007e:	a201      	add	r2, pc, #4	; (adr r2, 8010084 <UART_SetConfig+0x9cc>)
 8010080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010084:	0801010f 	.word	0x0801010f
 8010088:	08010117 	.word	0x08010117
 801008c:	08010173 	.word	0x08010173
 8010090:	08010173 	.word	0x08010173
 8010094:	0801011f 	.word	0x0801011f
 8010098:	08010173 	.word	0x08010173
 801009c:	08010173 	.word	0x08010173
 80100a0:	08010173 	.word	0x08010173
 80100a4:	0801012f 	.word	0x0801012f
 80100a8:	08010173 	.word	0x08010173
 80100ac:	08010173 	.word	0x08010173
 80100b0:	08010173 	.word	0x08010173
 80100b4:	08010173 	.word	0x08010173
 80100b8:	08010173 	.word	0x08010173
 80100bc:	08010173 	.word	0x08010173
 80100c0:	08010173 	.word	0x08010173
 80100c4:	0801013f 	.word	0x0801013f
 80100c8:	08010173 	.word	0x08010173
 80100cc:	08010173 	.word	0x08010173
 80100d0:	08010173 	.word	0x08010173
 80100d4:	08010173 	.word	0x08010173
 80100d8:	08010173 	.word	0x08010173
 80100dc:	08010173 	.word	0x08010173
 80100e0:	08010173 	.word	0x08010173
 80100e4:	08010173 	.word	0x08010173
 80100e8:	08010173 	.word	0x08010173
 80100ec:	08010173 	.word	0x08010173
 80100f0:	08010173 	.word	0x08010173
 80100f4:	08010173 	.word	0x08010173
 80100f8:	08010173 	.word	0x08010173
 80100fc:	08010173 	.word	0x08010173
 8010100:	08010173 	.word	0x08010173
 8010104:	08010165 	.word	0x08010165
 8010108:	2b40      	cmp	r3, #64	; 0x40
 801010a:	d02e      	beq.n	801016a <UART_SetConfig+0xab2>
 801010c:	e031      	b.n	8010172 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801010e:	f7fb f9a1 	bl	800b454 <HAL_RCC_GetPCLK1Freq>
 8010112:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010114:	e033      	b.n	801017e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010116:	f7fb f9b3 	bl	800b480 <HAL_RCC_GetPCLK2Freq>
 801011a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801011c:	e02f      	b.n	801017e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801011e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010122:	4618      	mov	r0, r3
 8010124:	f7fd f84a 	bl	800d1bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801012a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801012c:	e027      	b.n	801017e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801012e:	f107 0318 	add.w	r3, r7, #24
 8010132:	4618      	mov	r0, r3
 8010134:	f7fd f996 	bl	800d464 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010138:	69fb      	ldr	r3, [r7, #28]
 801013a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801013c:	e01f      	b.n	801017e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801013e:	4b69      	ldr	r3, [pc, #420]	; (80102e4 <UART_SetConfig+0xc2c>)
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	f003 0320 	and.w	r3, r3, #32
 8010146:	2b00      	cmp	r3, #0
 8010148:	d009      	beq.n	801015e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801014a:	4b66      	ldr	r3, [pc, #408]	; (80102e4 <UART_SetConfig+0xc2c>)
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	08db      	lsrs	r3, r3, #3
 8010150:	f003 0303 	and.w	r3, r3, #3
 8010154:	4a64      	ldr	r2, [pc, #400]	; (80102e8 <UART_SetConfig+0xc30>)
 8010156:	fa22 f303 	lsr.w	r3, r2, r3
 801015a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801015c:	e00f      	b.n	801017e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 801015e:	4b62      	ldr	r3, [pc, #392]	; (80102e8 <UART_SetConfig+0xc30>)
 8010160:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010162:	e00c      	b.n	801017e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010164:	4b61      	ldr	r3, [pc, #388]	; (80102ec <UART_SetConfig+0xc34>)
 8010166:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010168:	e009      	b.n	801017e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801016a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801016e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010170:	e005      	b.n	801017e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8010172:	2300      	movs	r3, #0
 8010174:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010176:	2301      	movs	r3, #1
 8010178:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801017c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801017e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010180:	2b00      	cmp	r3, #0
 8010182:	f000 80ea 	beq.w	801035a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010186:	697b      	ldr	r3, [r7, #20]
 8010188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801018a:	4a55      	ldr	r2, [pc, #340]	; (80102e0 <UART_SetConfig+0xc28>)
 801018c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010190:	461a      	mov	r2, r3
 8010192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010194:	fbb3 f3f2 	udiv	r3, r3, r2
 8010198:	005a      	lsls	r2, r3, #1
 801019a:	697b      	ldr	r3, [r7, #20]
 801019c:	685b      	ldr	r3, [r3, #4]
 801019e:	085b      	lsrs	r3, r3, #1
 80101a0:	441a      	add	r2, r3
 80101a2:	697b      	ldr	r3, [r7, #20]
 80101a4:	685b      	ldr	r3, [r3, #4]
 80101a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80101aa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80101ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ae:	2b0f      	cmp	r3, #15
 80101b0:	d916      	bls.n	80101e0 <UART_SetConfig+0xb28>
 80101b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80101b8:	d212      	bcs.n	80101e0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80101ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101bc:	b29b      	uxth	r3, r3
 80101be:	f023 030f 	bic.w	r3, r3, #15
 80101c2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80101c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101c6:	085b      	lsrs	r3, r3, #1
 80101c8:	b29b      	uxth	r3, r3
 80101ca:	f003 0307 	and.w	r3, r3, #7
 80101ce:	b29a      	uxth	r2, r3
 80101d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80101d2:	4313      	orrs	r3, r2
 80101d4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80101d6:	697b      	ldr	r3, [r7, #20]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80101dc:	60da      	str	r2, [r3, #12]
 80101de:	e0bc      	b.n	801035a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80101e0:	2301      	movs	r3, #1
 80101e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80101e6:	e0b8      	b.n	801035a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80101e8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80101ec:	2b20      	cmp	r3, #32
 80101ee:	dc4b      	bgt.n	8010288 <UART_SetConfig+0xbd0>
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	f2c0 8087 	blt.w	8010304 <UART_SetConfig+0xc4c>
 80101f6:	2b20      	cmp	r3, #32
 80101f8:	f200 8084 	bhi.w	8010304 <UART_SetConfig+0xc4c>
 80101fc:	a201      	add	r2, pc, #4	; (adr r2, 8010204 <UART_SetConfig+0xb4c>)
 80101fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010202:	bf00      	nop
 8010204:	0801028f 	.word	0x0801028f
 8010208:	08010297 	.word	0x08010297
 801020c:	08010305 	.word	0x08010305
 8010210:	08010305 	.word	0x08010305
 8010214:	0801029f 	.word	0x0801029f
 8010218:	08010305 	.word	0x08010305
 801021c:	08010305 	.word	0x08010305
 8010220:	08010305 	.word	0x08010305
 8010224:	080102af 	.word	0x080102af
 8010228:	08010305 	.word	0x08010305
 801022c:	08010305 	.word	0x08010305
 8010230:	08010305 	.word	0x08010305
 8010234:	08010305 	.word	0x08010305
 8010238:	08010305 	.word	0x08010305
 801023c:	08010305 	.word	0x08010305
 8010240:	08010305 	.word	0x08010305
 8010244:	080102bf 	.word	0x080102bf
 8010248:	08010305 	.word	0x08010305
 801024c:	08010305 	.word	0x08010305
 8010250:	08010305 	.word	0x08010305
 8010254:	08010305 	.word	0x08010305
 8010258:	08010305 	.word	0x08010305
 801025c:	08010305 	.word	0x08010305
 8010260:	08010305 	.word	0x08010305
 8010264:	08010305 	.word	0x08010305
 8010268:	08010305 	.word	0x08010305
 801026c:	08010305 	.word	0x08010305
 8010270:	08010305 	.word	0x08010305
 8010274:	08010305 	.word	0x08010305
 8010278:	08010305 	.word	0x08010305
 801027c:	08010305 	.word	0x08010305
 8010280:	08010305 	.word	0x08010305
 8010284:	080102f7 	.word	0x080102f7
 8010288:	2b40      	cmp	r3, #64	; 0x40
 801028a:	d037      	beq.n	80102fc <UART_SetConfig+0xc44>
 801028c:	e03a      	b.n	8010304 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801028e:	f7fb f8e1 	bl	800b454 <HAL_RCC_GetPCLK1Freq>
 8010292:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010294:	e03c      	b.n	8010310 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010296:	f7fb f8f3 	bl	800b480 <HAL_RCC_GetPCLK2Freq>
 801029a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801029c:	e038      	b.n	8010310 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801029e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80102a2:	4618      	mov	r0, r3
 80102a4:	f7fc ff8a 	bl	800d1bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80102a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80102ac:	e030      	b.n	8010310 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80102ae:	f107 0318 	add.w	r3, r7, #24
 80102b2:	4618      	mov	r0, r3
 80102b4:	f7fd f8d6 	bl	800d464 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80102b8:	69fb      	ldr	r3, [r7, #28]
 80102ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80102bc:	e028      	b.n	8010310 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80102be:	4b09      	ldr	r3, [pc, #36]	; (80102e4 <UART_SetConfig+0xc2c>)
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	f003 0320 	and.w	r3, r3, #32
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d012      	beq.n	80102f0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80102ca:	4b06      	ldr	r3, [pc, #24]	; (80102e4 <UART_SetConfig+0xc2c>)
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	08db      	lsrs	r3, r3, #3
 80102d0:	f003 0303 	and.w	r3, r3, #3
 80102d4:	4a04      	ldr	r2, [pc, #16]	; (80102e8 <UART_SetConfig+0xc30>)
 80102d6:	fa22 f303 	lsr.w	r3, r2, r3
 80102da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80102dc:	e018      	b.n	8010310 <UART_SetConfig+0xc58>
 80102de:	bf00      	nop
 80102e0:	08011db0 	.word	0x08011db0
 80102e4:	58024400 	.word	0x58024400
 80102e8:	03d09000 	.word	0x03d09000
 80102ec:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80102f0:	4b24      	ldr	r3, [pc, #144]	; (8010384 <UART_SetConfig+0xccc>)
 80102f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80102f4:	e00c      	b.n	8010310 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80102f6:	4b24      	ldr	r3, [pc, #144]	; (8010388 <UART_SetConfig+0xcd0>)
 80102f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80102fa:	e009      	b.n	8010310 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80102fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010300:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010302:	e005      	b.n	8010310 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8010304:	2300      	movs	r3, #0
 8010306:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010308:	2301      	movs	r3, #1
 801030a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801030e:	bf00      	nop
    }

    if (pclk != 0U)
 8010310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010312:	2b00      	cmp	r3, #0
 8010314:	d021      	beq.n	801035a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010316:	697b      	ldr	r3, [r7, #20]
 8010318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801031a:	4a1c      	ldr	r2, [pc, #112]	; (801038c <UART_SetConfig+0xcd4>)
 801031c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010320:	461a      	mov	r2, r3
 8010322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010324:	fbb3 f2f2 	udiv	r2, r3, r2
 8010328:	697b      	ldr	r3, [r7, #20]
 801032a:	685b      	ldr	r3, [r3, #4]
 801032c:	085b      	lsrs	r3, r3, #1
 801032e:	441a      	add	r2, r3
 8010330:	697b      	ldr	r3, [r7, #20]
 8010332:	685b      	ldr	r3, [r3, #4]
 8010334:	fbb2 f3f3 	udiv	r3, r2, r3
 8010338:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801033a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801033c:	2b0f      	cmp	r3, #15
 801033e:	d909      	bls.n	8010354 <UART_SetConfig+0xc9c>
 8010340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010346:	d205      	bcs.n	8010354 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801034a:	b29a      	uxth	r2, r3
 801034c:	697b      	ldr	r3, [r7, #20]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	60da      	str	r2, [r3, #12]
 8010352:	e002      	b.n	801035a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8010354:	2301      	movs	r3, #1
 8010356:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801035a:	697b      	ldr	r3, [r7, #20]
 801035c:	2201      	movs	r2, #1
 801035e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010362:	697b      	ldr	r3, [r7, #20]
 8010364:	2201      	movs	r2, #1
 8010366:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801036a:	697b      	ldr	r3, [r7, #20]
 801036c:	2200      	movs	r2, #0
 801036e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8010370:	697b      	ldr	r3, [r7, #20]
 8010372:	2200      	movs	r2, #0
 8010374:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8010376:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 801037a:	4618      	mov	r0, r3
 801037c:	3748      	adds	r7, #72	; 0x48
 801037e:	46bd      	mov	sp, r7
 8010380:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010384:	03d09000 	.word	0x03d09000
 8010388:	003d0900 	.word	0x003d0900
 801038c:	08011db0 	.word	0x08011db0

08010390 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010390:	b480      	push	{r7}
 8010392:	b083      	sub	sp, #12
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801039c:	f003 0301 	and.w	r3, r3, #1
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d00a      	beq.n	80103ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	685b      	ldr	r3, [r3, #4]
 80103aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	430a      	orrs	r2, r1
 80103b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103be:	f003 0302 	and.w	r3, r3, #2
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d00a      	beq.n	80103dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	685b      	ldr	r3, [r3, #4]
 80103cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	430a      	orrs	r2, r1
 80103da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103e0:	f003 0304 	and.w	r3, r3, #4
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d00a      	beq.n	80103fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	685b      	ldr	r3, [r3, #4]
 80103ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	430a      	orrs	r2, r1
 80103fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010402:	f003 0308 	and.w	r3, r3, #8
 8010406:	2b00      	cmp	r3, #0
 8010408:	d00a      	beq.n	8010420 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	685b      	ldr	r3, [r3, #4]
 8010410:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	430a      	orrs	r2, r1
 801041e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010424:	f003 0310 	and.w	r3, r3, #16
 8010428:	2b00      	cmp	r3, #0
 801042a:	d00a      	beq.n	8010442 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	689b      	ldr	r3, [r3, #8]
 8010432:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	430a      	orrs	r2, r1
 8010440:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010446:	f003 0320 	and.w	r3, r3, #32
 801044a:	2b00      	cmp	r3, #0
 801044c:	d00a      	beq.n	8010464 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	689b      	ldr	r3, [r3, #8]
 8010454:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	430a      	orrs	r2, r1
 8010462:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801046c:	2b00      	cmp	r3, #0
 801046e:	d01a      	beq.n	80104a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	685b      	ldr	r3, [r3, #4]
 8010476:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	430a      	orrs	r2, r1
 8010484:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801048a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801048e:	d10a      	bne.n	80104a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	685b      	ldr	r3, [r3, #4]
 8010496:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	430a      	orrs	r2, r1
 80104a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d00a      	beq.n	80104c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	685b      	ldr	r3, [r3, #4]
 80104b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	430a      	orrs	r2, r1
 80104c6:	605a      	str	r2, [r3, #4]
  }
}
 80104c8:	bf00      	nop
 80104ca:	370c      	adds	r7, #12
 80104cc:	46bd      	mov	sp, r7
 80104ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d2:	4770      	bx	lr

080104d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b098      	sub	sp, #96	; 0x60
 80104d8:	af02      	add	r7, sp, #8
 80104da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	2200      	movs	r2, #0
 80104e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80104e4:	f7f3 fdcc 	bl	8004080 <HAL_GetTick>
 80104e8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	f003 0308 	and.w	r3, r3, #8
 80104f4:	2b08      	cmp	r3, #8
 80104f6:	d12f      	bne.n	8010558 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80104f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80104fc:	9300      	str	r3, [sp, #0]
 80104fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010500:	2200      	movs	r2, #0
 8010502:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010506:	6878      	ldr	r0, [r7, #4]
 8010508:	f000 f88e 	bl	8010628 <UART_WaitOnFlagUntilTimeout>
 801050c:	4603      	mov	r3, r0
 801050e:	2b00      	cmp	r3, #0
 8010510:	d022      	beq.n	8010558 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801051a:	e853 3f00 	ldrex	r3, [r3]
 801051e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010522:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010526:	653b      	str	r3, [r7, #80]	; 0x50
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	461a      	mov	r2, r3
 801052e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010530:	647b      	str	r3, [r7, #68]	; 0x44
 8010532:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010534:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010536:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010538:	e841 2300 	strex	r3, r2, [r1]
 801053c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801053e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010540:	2b00      	cmp	r3, #0
 8010542:	d1e6      	bne.n	8010512 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	2220      	movs	r2, #32
 8010548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	2200      	movs	r2, #0
 8010550:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010554:	2303      	movs	r3, #3
 8010556:	e063      	b.n	8010620 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	f003 0304 	and.w	r3, r3, #4
 8010562:	2b04      	cmp	r3, #4
 8010564:	d149      	bne.n	80105fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010566:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801056a:	9300      	str	r3, [sp, #0]
 801056c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801056e:	2200      	movs	r2, #0
 8010570:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010574:	6878      	ldr	r0, [r7, #4]
 8010576:	f000 f857 	bl	8010628 <UART_WaitOnFlagUntilTimeout>
 801057a:	4603      	mov	r3, r0
 801057c:	2b00      	cmp	r3, #0
 801057e:	d03c      	beq.n	80105fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010588:	e853 3f00 	ldrex	r3, [r3]
 801058c:	623b      	str	r3, [r7, #32]
   return(result);
 801058e:	6a3b      	ldr	r3, [r7, #32]
 8010590:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010594:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	461a      	mov	r2, r3
 801059c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801059e:	633b      	str	r3, [r7, #48]	; 0x30
 80105a0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80105a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80105a6:	e841 2300 	strex	r3, r2, [r1]
 80105aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80105ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d1e6      	bne.n	8010580 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	3308      	adds	r3, #8
 80105b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105ba:	693b      	ldr	r3, [r7, #16]
 80105bc:	e853 3f00 	ldrex	r3, [r3]
 80105c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	f023 0301 	bic.w	r3, r3, #1
 80105c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	3308      	adds	r3, #8
 80105d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80105d2:	61fa      	str	r2, [r7, #28]
 80105d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105d6:	69b9      	ldr	r1, [r7, #24]
 80105d8:	69fa      	ldr	r2, [r7, #28]
 80105da:	e841 2300 	strex	r3, r2, [r1]
 80105de:	617b      	str	r3, [r7, #20]
   return(result);
 80105e0:	697b      	ldr	r3, [r7, #20]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d1e5      	bne.n	80105b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	2220      	movs	r2, #32
 80105ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	2200      	movs	r2, #0
 80105f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80105f6:	2303      	movs	r3, #3
 80105f8:	e012      	b.n	8010620 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	2220      	movs	r2, #32
 80105fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	2220      	movs	r2, #32
 8010606:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	2200      	movs	r2, #0
 801060e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	2200      	movs	r2, #0
 8010614:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	2200      	movs	r2, #0
 801061a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801061e:	2300      	movs	r3, #0
}
 8010620:	4618      	mov	r0, r3
 8010622:	3758      	adds	r7, #88	; 0x58
 8010624:	46bd      	mov	sp, r7
 8010626:	bd80      	pop	{r7, pc}

08010628 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b084      	sub	sp, #16
 801062c:	af00      	add	r7, sp, #0
 801062e:	60f8      	str	r0, [r7, #12]
 8010630:	60b9      	str	r1, [r7, #8]
 8010632:	603b      	str	r3, [r7, #0]
 8010634:	4613      	mov	r3, r2
 8010636:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010638:	e049      	b.n	80106ce <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801063a:	69bb      	ldr	r3, [r7, #24]
 801063c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010640:	d045      	beq.n	80106ce <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010642:	f7f3 fd1d 	bl	8004080 <HAL_GetTick>
 8010646:	4602      	mov	r2, r0
 8010648:	683b      	ldr	r3, [r7, #0]
 801064a:	1ad3      	subs	r3, r2, r3
 801064c:	69ba      	ldr	r2, [r7, #24]
 801064e:	429a      	cmp	r2, r3
 8010650:	d302      	bcc.n	8010658 <UART_WaitOnFlagUntilTimeout+0x30>
 8010652:	69bb      	ldr	r3, [r7, #24]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d101      	bne.n	801065c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010658:	2303      	movs	r3, #3
 801065a:	e048      	b.n	80106ee <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	f003 0304 	and.w	r3, r3, #4
 8010666:	2b00      	cmp	r3, #0
 8010668:	d031      	beq.n	80106ce <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	69db      	ldr	r3, [r3, #28]
 8010670:	f003 0308 	and.w	r3, r3, #8
 8010674:	2b08      	cmp	r3, #8
 8010676:	d110      	bne.n	801069a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	2208      	movs	r2, #8
 801067e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8010680:	68f8      	ldr	r0, [r7, #12]
 8010682:	f000 f839 	bl	80106f8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	2208      	movs	r2, #8
 801068a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	2200      	movs	r2, #0
 8010692:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8010696:	2301      	movs	r3, #1
 8010698:	e029      	b.n	80106ee <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	69db      	ldr	r3, [r3, #28]
 80106a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80106a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80106a8:	d111      	bne.n	80106ce <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80106b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80106b4:	68f8      	ldr	r0, [r7, #12]
 80106b6:	f000 f81f 	bl	80106f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	2220      	movs	r2, #32
 80106be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	2200      	movs	r2, #0
 80106c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80106ca:	2303      	movs	r3, #3
 80106cc:	e00f      	b.n	80106ee <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	69da      	ldr	r2, [r3, #28]
 80106d4:	68bb      	ldr	r3, [r7, #8]
 80106d6:	4013      	ands	r3, r2
 80106d8:	68ba      	ldr	r2, [r7, #8]
 80106da:	429a      	cmp	r2, r3
 80106dc:	bf0c      	ite	eq
 80106de:	2301      	moveq	r3, #1
 80106e0:	2300      	movne	r3, #0
 80106e2:	b2db      	uxtb	r3, r3
 80106e4:	461a      	mov	r2, r3
 80106e6:	79fb      	ldrb	r3, [r7, #7]
 80106e8:	429a      	cmp	r2, r3
 80106ea:	d0a6      	beq.n	801063a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80106ec:	2300      	movs	r3, #0
}
 80106ee:	4618      	mov	r0, r3
 80106f0:	3710      	adds	r7, #16
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd80      	pop	{r7, pc}
	...

080106f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80106f8:	b480      	push	{r7}
 80106fa:	b095      	sub	sp, #84	; 0x54
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010708:	e853 3f00 	ldrex	r3, [r3]
 801070c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801070e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010710:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010714:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	461a      	mov	r2, r3
 801071c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801071e:	643b      	str	r3, [r7, #64]	; 0x40
 8010720:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010722:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010724:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010726:	e841 2300 	strex	r3, r2, [r1]
 801072a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801072c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801072e:	2b00      	cmp	r3, #0
 8010730:	d1e6      	bne.n	8010700 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	3308      	adds	r3, #8
 8010738:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801073a:	6a3b      	ldr	r3, [r7, #32]
 801073c:	e853 3f00 	ldrex	r3, [r3]
 8010740:	61fb      	str	r3, [r7, #28]
   return(result);
 8010742:	69fa      	ldr	r2, [r7, #28]
 8010744:	4b1e      	ldr	r3, [pc, #120]	; (80107c0 <UART_EndRxTransfer+0xc8>)
 8010746:	4013      	ands	r3, r2
 8010748:	64bb      	str	r3, [r7, #72]	; 0x48
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	3308      	adds	r3, #8
 8010750:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010752:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010754:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010756:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801075a:	e841 2300 	strex	r3, r2, [r1]
 801075e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010762:	2b00      	cmp	r3, #0
 8010764:	d1e5      	bne.n	8010732 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801076a:	2b01      	cmp	r3, #1
 801076c:	d118      	bne.n	80107a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	e853 3f00 	ldrex	r3, [r3]
 801077a:	60bb      	str	r3, [r7, #8]
   return(result);
 801077c:	68bb      	ldr	r3, [r7, #8]
 801077e:	f023 0310 	bic.w	r3, r3, #16
 8010782:	647b      	str	r3, [r7, #68]	; 0x44
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	461a      	mov	r2, r3
 801078a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801078c:	61bb      	str	r3, [r7, #24]
 801078e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010790:	6979      	ldr	r1, [r7, #20]
 8010792:	69ba      	ldr	r2, [r7, #24]
 8010794:	e841 2300 	strex	r3, r2, [r1]
 8010798:	613b      	str	r3, [r7, #16]
   return(result);
 801079a:	693b      	ldr	r3, [r7, #16]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d1e6      	bne.n	801076e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	2220      	movs	r2, #32
 80107a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	2200      	movs	r2, #0
 80107ac:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	2200      	movs	r2, #0
 80107b2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80107b4:	bf00      	nop
 80107b6:	3754      	adds	r7, #84	; 0x54
 80107b8:	46bd      	mov	sp, r7
 80107ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107be:	4770      	bx	lr
 80107c0:	effffffe 	.word	0xeffffffe

080107c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80107c4:	b480      	push	{r7}
 80107c6:	b085      	sub	sp, #20
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80107d2:	2b01      	cmp	r3, #1
 80107d4:	d101      	bne.n	80107da <HAL_UARTEx_DisableFifoMode+0x16>
 80107d6:	2302      	movs	r3, #2
 80107d8:	e027      	b.n	801082a <HAL_UARTEx_DisableFifoMode+0x66>
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	2201      	movs	r2, #1
 80107de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	2224      	movs	r2, #36	; 0x24
 80107e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	681a      	ldr	r2, [r3, #0]
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	f022 0201 	bic.w	r2, r2, #1
 8010800:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010808:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	2200      	movs	r2, #0
 801080e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	68fa      	ldr	r2, [r7, #12]
 8010816:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2220      	movs	r2, #32
 801081c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	2200      	movs	r2, #0
 8010824:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010828:	2300      	movs	r3, #0
}
 801082a:	4618      	mov	r0, r3
 801082c:	3714      	adds	r7, #20
 801082e:	46bd      	mov	sp, r7
 8010830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010834:	4770      	bx	lr

08010836 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010836:	b580      	push	{r7, lr}
 8010838:	b084      	sub	sp, #16
 801083a:	af00      	add	r7, sp, #0
 801083c:	6078      	str	r0, [r7, #4]
 801083e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010846:	2b01      	cmp	r3, #1
 8010848:	d101      	bne.n	801084e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801084a:	2302      	movs	r3, #2
 801084c:	e02d      	b.n	80108aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	2201      	movs	r2, #1
 8010852:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	2224      	movs	r2, #36	; 0x24
 801085a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	681a      	ldr	r2, [r3, #0]
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	f022 0201 	bic.w	r2, r2, #1
 8010874:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	689b      	ldr	r3, [r3, #8]
 801087c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	683a      	ldr	r2, [r7, #0]
 8010886:	430a      	orrs	r2, r1
 8010888:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801088a:	6878      	ldr	r0, [r7, #4]
 801088c:	f000 f850 	bl	8010930 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	68fa      	ldr	r2, [r7, #12]
 8010896:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	2220      	movs	r2, #32
 801089c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	2200      	movs	r2, #0
 80108a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80108a8:	2300      	movs	r3, #0
}
 80108aa:	4618      	mov	r0, r3
 80108ac:	3710      	adds	r7, #16
 80108ae:	46bd      	mov	sp, r7
 80108b0:	bd80      	pop	{r7, pc}

080108b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80108b2:	b580      	push	{r7, lr}
 80108b4:	b084      	sub	sp, #16
 80108b6:	af00      	add	r7, sp, #0
 80108b8:	6078      	str	r0, [r7, #4]
 80108ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80108c2:	2b01      	cmp	r3, #1
 80108c4:	d101      	bne.n	80108ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80108c6:	2302      	movs	r3, #2
 80108c8:	e02d      	b.n	8010926 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	2201      	movs	r2, #1
 80108ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	2224      	movs	r2, #36	; 0x24
 80108d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	681a      	ldr	r2, [r3, #0]
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	f022 0201 	bic.w	r2, r2, #1
 80108f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	689b      	ldr	r3, [r3, #8]
 80108f8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	683a      	ldr	r2, [r7, #0]
 8010902:	430a      	orrs	r2, r1
 8010904:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010906:	6878      	ldr	r0, [r7, #4]
 8010908:	f000 f812 	bl	8010930 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	68fa      	ldr	r2, [r7, #12]
 8010912:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	2220      	movs	r2, #32
 8010918:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	2200      	movs	r2, #0
 8010920:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010924:	2300      	movs	r3, #0
}
 8010926:	4618      	mov	r0, r3
 8010928:	3710      	adds	r7, #16
 801092a:	46bd      	mov	sp, r7
 801092c:	bd80      	pop	{r7, pc}
	...

08010930 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010930:	b480      	push	{r7}
 8010932:	b085      	sub	sp, #20
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801093c:	2b00      	cmp	r3, #0
 801093e:	d108      	bne.n	8010952 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	2201      	movs	r2, #1
 8010944:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2201      	movs	r2, #1
 801094c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010950:	e031      	b.n	80109b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010952:	2310      	movs	r3, #16
 8010954:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010956:	2310      	movs	r3, #16
 8010958:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	689b      	ldr	r3, [r3, #8]
 8010960:	0e5b      	lsrs	r3, r3, #25
 8010962:	b2db      	uxtb	r3, r3
 8010964:	f003 0307 	and.w	r3, r3, #7
 8010968:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	689b      	ldr	r3, [r3, #8]
 8010970:	0f5b      	lsrs	r3, r3, #29
 8010972:	b2db      	uxtb	r3, r3
 8010974:	f003 0307 	and.w	r3, r3, #7
 8010978:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801097a:	7bbb      	ldrb	r3, [r7, #14]
 801097c:	7b3a      	ldrb	r2, [r7, #12]
 801097e:	4911      	ldr	r1, [pc, #68]	; (80109c4 <UARTEx_SetNbDataToProcess+0x94>)
 8010980:	5c8a      	ldrb	r2, [r1, r2]
 8010982:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010986:	7b3a      	ldrb	r2, [r7, #12]
 8010988:	490f      	ldr	r1, [pc, #60]	; (80109c8 <UARTEx_SetNbDataToProcess+0x98>)
 801098a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801098c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010990:	b29a      	uxth	r2, r3
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010998:	7bfb      	ldrb	r3, [r7, #15]
 801099a:	7b7a      	ldrb	r2, [r7, #13]
 801099c:	4909      	ldr	r1, [pc, #36]	; (80109c4 <UARTEx_SetNbDataToProcess+0x94>)
 801099e:	5c8a      	ldrb	r2, [r1, r2]
 80109a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80109a4:	7b7a      	ldrb	r2, [r7, #13]
 80109a6:	4908      	ldr	r1, [pc, #32]	; (80109c8 <UARTEx_SetNbDataToProcess+0x98>)
 80109a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80109aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80109ae:	b29a      	uxth	r2, r3
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80109b6:	bf00      	nop
 80109b8:	3714      	adds	r7, #20
 80109ba:	46bd      	mov	sp, r7
 80109bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c0:	4770      	bx	lr
 80109c2:	bf00      	nop
 80109c4:	08011dc8 	.word	0x08011dc8
 80109c8:	08011dd0 	.word	0x08011dd0

080109cc <atoi>:
 80109cc:	220a      	movs	r2, #10
 80109ce:	2100      	movs	r1, #0
 80109d0:	f000 b89c 	b.w	8010b0c <strtol>

080109d4 <__itoa>:
 80109d4:	1e93      	subs	r3, r2, #2
 80109d6:	2b22      	cmp	r3, #34	; 0x22
 80109d8:	b510      	push	{r4, lr}
 80109da:	460c      	mov	r4, r1
 80109dc:	d904      	bls.n	80109e8 <__itoa+0x14>
 80109de:	2300      	movs	r3, #0
 80109e0:	700b      	strb	r3, [r1, #0]
 80109e2:	461c      	mov	r4, r3
 80109e4:	4620      	mov	r0, r4
 80109e6:	bd10      	pop	{r4, pc}
 80109e8:	2a0a      	cmp	r2, #10
 80109ea:	d109      	bne.n	8010a00 <__itoa+0x2c>
 80109ec:	2800      	cmp	r0, #0
 80109ee:	da07      	bge.n	8010a00 <__itoa+0x2c>
 80109f0:	232d      	movs	r3, #45	; 0x2d
 80109f2:	700b      	strb	r3, [r1, #0]
 80109f4:	4240      	negs	r0, r0
 80109f6:	2101      	movs	r1, #1
 80109f8:	4421      	add	r1, r4
 80109fa:	f000 f891 	bl	8010b20 <__utoa>
 80109fe:	e7f1      	b.n	80109e4 <__itoa+0x10>
 8010a00:	2100      	movs	r1, #0
 8010a02:	e7f9      	b.n	80109f8 <__itoa+0x24>

08010a04 <itoa>:
 8010a04:	f7ff bfe6 	b.w	80109d4 <__itoa>

08010a08 <_strtol_l.constprop.0>:
 8010a08:	2b01      	cmp	r3, #1
 8010a0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a0e:	d001      	beq.n	8010a14 <_strtol_l.constprop.0+0xc>
 8010a10:	2b24      	cmp	r3, #36	; 0x24
 8010a12:	d906      	bls.n	8010a22 <_strtol_l.constprop.0+0x1a>
 8010a14:	f000 f8fe 	bl	8010c14 <__errno>
 8010a18:	2316      	movs	r3, #22
 8010a1a:	6003      	str	r3, [r0, #0]
 8010a1c:	2000      	movs	r0, #0
 8010a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a22:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010b08 <_strtol_l.constprop.0+0x100>
 8010a26:	460d      	mov	r5, r1
 8010a28:	462e      	mov	r6, r5
 8010a2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010a2e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8010a32:	f017 0708 	ands.w	r7, r7, #8
 8010a36:	d1f7      	bne.n	8010a28 <_strtol_l.constprop.0+0x20>
 8010a38:	2c2d      	cmp	r4, #45	; 0x2d
 8010a3a:	d132      	bne.n	8010aa2 <_strtol_l.constprop.0+0x9a>
 8010a3c:	782c      	ldrb	r4, [r5, #0]
 8010a3e:	2701      	movs	r7, #1
 8010a40:	1cb5      	adds	r5, r6, #2
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d05b      	beq.n	8010afe <_strtol_l.constprop.0+0xf6>
 8010a46:	2b10      	cmp	r3, #16
 8010a48:	d109      	bne.n	8010a5e <_strtol_l.constprop.0+0x56>
 8010a4a:	2c30      	cmp	r4, #48	; 0x30
 8010a4c:	d107      	bne.n	8010a5e <_strtol_l.constprop.0+0x56>
 8010a4e:	782c      	ldrb	r4, [r5, #0]
 8010a50:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010a54:	2c58      	cmp	r4, #88	; 0x58
 8010a56:	d14d      	bne.n	8010af4 <_strtol_l.constprop.0+0xec>
 8010a58:	786c      	ldrb	r4, [r5, #1]
 8010a5a:	2310      	movs	r3, #16
 8010a5c:	3502      	adds	r5, #2
 8010a5e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010a62:	f108 38ff 	add.w	r8, r8, #4294967295
 8010a66:	f04f 0e00 	mov.w	lr, #0
 8010a6a:	fbb8 f9f3 	udiv	r9, r8, r3
 8010a6e:	4676      	mov	r6, lr
 8010a70:	fb03 8a19 	mls	sl, r3, r9, r8
 8010a74:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010a78:	f1bc 0f09 	cmp.w	ip, #9
 8010a7c:	d816      	bhi.n	8010aac <_strtol_l.constprop.0+0xa4>
 8010a7e:	4664      	mov	r4, ip
 8010a80:	42a3      	cmp	r3, r4
 8010a82:	dd24      	ble.n	8010ace <_strtol_l.constprop.0+0xc6>
 8010a84:	f1be 3fff 	cmp.w	lr, #4294967295
 8010a88:	d008      	beq.n	8010a9c <_strtol_l.constprop.0+0x94>
 8010a8a:	45b1      	cmp	r9, r6
 8010a8c:	d31c      	bcc.n	8010ac8 <_strtol_l.constprop.0+0xc0>
 8010a8e:	d101      	bne.n	8010a94 <_strtol_l.constprop.0+0x8c>
 8010a90:	45a2      	cmp	sl, r4
 8010a92:	db19      	blt.n	8010ac8 <_strtol_l.constprop.0+0xc0>
 8010a94:	fb06 4603 	mla	r6, r6, r3, r4
 8010a98:	f04f 0e01 	mov.w	lr, #1
 8010a9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010aa0:	e7e8      	b.n	8010a74 <_strtol_l.constprop.0+0x6c>
 8010aa2:	2c2b      	cmp	r4, #43	; 0x2b
 8010aa4:	bf04      	itt	eq
 8010aa6:	782c      	ldrbeq	r4, [r5, #0]
 8010aa8:	1cb5      	addeq	r5, r6, #2
 8010aaa:	e7ca      	b.n	8010a42 <_strtol_l.constprop.0+0x3a>
 8010aac:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010ab0:	f1bc 0f19 	cmp.w	ip, #25
 8010ab4:	d801      	bhi.n	8010aba <_strtol_l.constprop.0+0xb2>
 8010ab6:	3c37      	subs	r4, #55	; 0x37
 8010ab8:	e7e2      	b.n	8010a80 <_strtol_l.constprop.0+0x78>
 8010aba:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010abe:	f1bc 0f19 	cmp.w	ip, #25
 8010ac2:	d804      	bhi.n	8010ace <_strtol_l.constprop.0+0xc6>
 8010ac4:	3c57      	subs	r4, #87	; 0x57
 8010ac6:	e7db      	b.n	8010a80 <_strtol_l.constprop.0+0x78>
 8010ac8:	f04f 3eff 	mov.w	lr, #4294967295
 8010acc:	e7e6      	b.n	8010a9c <_strtol_l.constprop.0+0x94>
 8010ace:	f1be 3fff 	cmp.w	lr, #4294967295
 8010ad2:	d105      	bne.n	8010ae0 <_strtol_l.constprop.0+0xd8>
 8010ad4:	2322      	movs	r3, #34	; 0x22
 8010ad6:	6003      	str	r3, [r0, #0]
 8010ad8:	4646      	mov	r6, r8
 8010ada:	b942      	cbnz	r2, 8010aee <_strtol_l.constprop.0+0xe6>
 8010adc:	4630      	mov	r0, r6
 8010ade:	e79e      	b.n	8010a1e <_strtol_l.constprop.0+0x16>
 8010ae0:	b107      	cbz	r7, 8010ae4 <_strtol_l.constprop.0+0xdc>
 8010ae2:	4276      	negs	r6, r6
 8010ae4:	2a00      	cmp	r2, #0
 8010ae6:	d0f9      	beq.n	8010adc <_strtol_l.constprop.0+0xd4>
 8010ae8:	f1be 0f00 	cmp.w	lr, #0
 8010aec:	d000      	beq.n	8010af0 <_strtol_l.constprop.0+0xe8>
 8010aee:	1e69      	subs	r1, r5, #1
 8010af0:	6011      	str	r1, [r2, #0]
 8010af2:	e7f3      	b.n	8010adc <_strtol_l.constprop.0+0xd4>
 8010af4:	2430      	movs	r4, #48	; 0x30
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d1b1      	bne.n	8010a5e <_strtol_l.constprop.0+0x56>
 8010afa:	2308      	movs	r3, #8
 8010afc:	e7af      	b.n	8010a5e <_strtol_l.constprop.0+0x56>
 8010afe:	2c30      	cmp	r4, #48	; 0x30
 8010b00:	d0a5      	beq.n	8010a4e <_strtol_l.constprop.0+0x46>
 8010b02:	230a      	movs	r3, #10
 8010b04:	e7ab      	b.n	8010a5e <_strtol_l.constprop.0+0x56>
 8010b06:	bf00      	nop
 8010b08:	08011dfe 	.word	0x08011dfe

08010b0c <strtol>:
 8010b0c:	4613      	mov	r3, r2
 8010b0e:	460a      	mov	r2, r1
 8010b10:	4601      	mov	r1, r0
 8010b12:	4802      	ldr	r0, [pc, #8]	; (8010b1c <strtol+0x10>)
 8010b14:	6800      	ldr	r0, [r0, #0]
 8010b16:	f7ff bf77 	b.w	8010a08 <_strtol_l.constprop.0>
 8010b1a:	bf00      	nop
 8010b1c:	24000094 	.word	0x24000094

08010b20 <__utoa>:
 8010b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b22:	4c1f      	ldr	r4, [pc, #124]	; (8010ba0 <__utoa+0x80>)
 8010b24:	b08b      	sub	sp, #44	; 0x2c
 8010b26:	4605      	mov	r5, r0
 8010b28:	460b      	mov	r3, r1
 8010b2a:	466e      	mov	r6, sp
 8010b2c:	f104 0c20 	add.w	ip, r4, #32
 8010b30:	6820      	ldr	r0, [r4, #0]
 8010b32:	6861      	ldr	r1, [r4, #4]
 8010b34:	4637      	mov	r7, r6
 8010b36:	c703      	stmia	r7!, {r0, r1}
 8010b38:	3408      	adds	r4, #8
 8010b3a:	4564      	cmp	r4, ip
 8010b3c:	463e      	mov	r6, r7
 8010b3e:	d1f7      	bne.n	8010b30 <__utoa+0x10>
 8010b40:	7921      	ldrb	r1, [r4, #4]
 8010b42:	7139      	strb	r1, [r7, #4]
 8010b44:	1e91      	subs	r1, r2, #2
 8010b46:	6820      	ldr	r0, [r4, #0]
 8010b48:	6038      	str	r0, [r7, #0]
 8010b4a:	2922      	cmp	r1, #34	; 0x22
 8010b4c:	f04f 0100 	mov.w	r1, #0
 8010b50:	d904      	bls.n	8010b5c <__utoa+0x3c>
 8010b52:	7019      	strb	r1, [r3, #0]
 8010b54:	460b      	mov	r3, r1
 8010b56:	4618      	mov	r0, r3
 8010b58:	b00b      	add	sp, #44	; 0x2c
 8010b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b5c:	1e58      	subs	r0, r3, #1
 8010b5e:	4684      	mov	ip, r0
 8010b60:	fbb5 f7f2 	udiv	r7, r5, r2
 8010b64:	fb02 5617 	mls	r6, r2, r7, r5
 8010b68:	3628      	adds	r6, #40	; 0x28
 8010b6a:	446e      	add	r6, sp
 8010b6c:	460c      	mov	r4, r1
 8010b6e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8010b72:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8010b76:	462e      	mov	r6, r5
 8010b78:	42b2      	cmp	r2, r6
 8010b7a:	f101 0101 	add.w	r1, r1, #1
 8010b7e:	463d      	mov	r5, r7
 8010b80:	d9ee      	bls.n	8010b60 <__utoa+0x40>
 8010b82:	2200      	movs	r2, #0
 8010b84:	545a      	strb	r2, [r3, r1]
 8010b86:	1919      	adds	r1, r3, r4
 8010b88:	1aa5      	subs	r5, r4, r2
 8010b8a:	42aa      	cmp	r2, r5
 8010b8c:	dae3      	bge.n	8010b56 <__utoa+0x36>
 8010b8e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8010b92:	780e      	ldrb	r6, [r1, #0]
 8010b94:	7006      	strb	r6, [r0, #0]
 8010b96:	3201      	adds	r2, #1
 8010b98:	f801 5901 	strb.w	r5, [r1], #-1
 8010b9c:	e7f4      	b.n	8010b88 <__utoa+0x68>
 8010b9e:	bf00      	nop
 8010ba0:	08011dd8 	.word	0x08011dd8

08010ba4 <siprintf>:
 8010ba4:	b40e      	push	{r1, r2, r3}
 8010ba6:	b500      	push	{lr}
 8010ba8:	b09c      	sub	sp, #112	; 0x70
 8010baa:	ab1d      	add	r3, sp, #116	; 0x74
 8010bac:	9002      	str	r0, [sp, #8]
 8010bae:	9006      	str	r0, [sp, #24]
 8010bb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010bb4:	4809      	ldr	r0, [pc, #36]	; (8010bdc <siprintf+0x38>)
 8010bb6:	9107      	str	r1, [sp, #28]
 8010bb8:	9104      	str	r1, [sp, #16]
 8010bba:	4909      	ldr	r1, [pc, #36]	; (8010be0 <siprintf+0x3c>)
 8010bbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8010bc0:	9105      	str	r1, [sp, #20]
 8010bc2:	6800      	ldr	r0, [r0, #0]
 8010bc4:	9301      	str	r3, [sp, #4]
 8010bc6:	a902      	add	r1, sp, #8
 8010bc8:	f000 f9aa 	bl	8010f20 <_svfiprintf_r>
 8010bcc:	9b02      	ldr	r3, [sp, #8]
 8010bce:	2200      	movs	r2, #0
 8010bd0:	701a      	strb	r2, [r3, #0]
 8010bd2:	b01c      	add	sp, #112	; 0x70
 8010bd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8010bd8:	b003      	add	sp, #12
 8010bda:	4770      	bx	lr
 8010bdc:	24000094 	.word	0x24000094
 8010be0:	ffff0208 	.word	0xffff0208

08010be4 <memset>:
 8010be4:	4402      	add	r2, r0
 8010be6:	4603      	mov	r3, r0
 8010be8:	4293      	cmp	r3, r2
 8010bea:	d100      	bne.n	8010bee <memset+0xa>
 8010bec:	4770      	bx	lr
 8010bee:	f803 1b01 	strb.w	r1, [r3], #1
 8010bf2:	e7f9      	b.n	8010be8 <memset+0x4>

08010bf4 <strcat>:
 8010bf4:	b510      	push	{r4, lr}
 8010bf6:	4602      	mov	r2, r0
 8010bf8:	7814      	ldrb	r4, [r2, #0]
 8010bfa:	4613      	mov	r3, r2
 8010bfc:	3201      	adds	r2, #1
 8010bfe:	2c00      	cmp	r4, #0
 8010c00:	d1fa      	bne.n	8010bf8 <strcat+0x4>
 8010c02:	3b01      	subs	r3, #1
 8010c04:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010c08:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010c0c:	2a00      	cmp	r2, #0
 8010c0e:	d1f9      	bne.n	8010c04 <strcat+0x10>
 8010c10:	bd10      	pop	{r4, pc}
	...

08010c14 <__errno>:
 8010c14:	4b01      	ldr	r3, [pc, #4]	; (8010c1c <__errno+0x8>)
 8010c16:	6818      	ldr	r0, [r3, #0]
 8010c18:	4770      	bx	lr
 8010c1a:	bf00      	nop
 8010c1c:	24000094 	.word	0x24000094

08010c20 <__libc_init_array>:
 8010c20:	b570      	push	{r4, r5, r6, lr}
 8010c22:	4d0d      	ldr	r5, [pc, #52]	; (8010c58 <__libc_init_array+0x38>)
 8010c24:	4c0d      	ldr	r4, [pc, #52]	; (8010c5c <__libc_init_array+0x3c>)
 8010c26:	1b64      	subs	r4, r4, r5
 8010c28:	10a4      	asrs	r4, r4, #2
 8010c2a:	2600      	movs	r6, #0
 8010c2c:	42a6      	cmp	r6, r4
 8010c2e:	d109      	bne.n	8010c44 <__libc_init_array+0x24>
 8010c30:	4d0b      	ldr	r5, [pc, #44]	; (8010c60 <__libc_init_array+0x40>)
 8010c32:	4c0c      	ldr	r4, [pc, #48]	; (8010c64 <__libc_init_array+0x44>)
 8010c34:	f000 fc72 	bl	801151c <_init>
 8010c38:	1b64      	subs	r4, r4, r5
 8010c3a:	10a4      	asrs	r4, r4, #2
 8010c3c:	2600      	movs	r6, #0
 8010c3e:	42a6      	cmp	r6, r4
 8010c40:	d105      	bne.n	8010c4e <__libc_init_array+0x2e>
 8010c42:	bd70      	pop	{r4, r5, r6, pc}
 8010c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c48:	4798      	blx	r3
 8010c4a:	3601      	adds	r6, #1
 8010c4c:	e7ee      	b.n	8010c2c <__libc_init_array+0xc>
 8010c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c52:	4798      	blx	r3
 8010c54:	3601      	adds	r6, #1
 8010c56:	e7f2      	b.n	8010c3e <__libc_init_array+0x1e>
 8010c58:	08011f3c 	.word	0x08011f3c
 8010c5c:	08011f3c 	.word	0x08011f3c
 8010c60:	08011f3c 	.word	0x08011f3c
 8010c64:	08011f40 	.word	0x08011f40

08010c68 <__retarget_lock_acquire_recursive>:
 8010c68:	4770      	bx	lr

08010c6a <__retarget_lock_release_recursive>:
 8010c6a:	4770      	bx	lr

08010c6c <strcpy>:
 8010c6c:	4603      	mov	r3, r0
 8010c6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010c72:	f803 2b01 	strb.w	r2, [r3], #1
 8010c76:	2a00      	cmp	r2, #0
 8010c78:	d1f9      	bne.n	8010c6e <strcpy+0x2>
 8010c7a:	4770      	bx	lr

08010c7c <_free_r>:
 8010c7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010c7e:	2900      	cmp	r1, #0
 8010c80:	d044      	beq.n	8010d0c <_free_r+0x90>
 8010c82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c86:	9001      	str	r0, [sp, #4]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	f1a1 0404 	sub.w	r4, r1, #4
 8010c8e:	bfb8      	it	lt
 8010c90:	18e4      	addlt	r4, r4, r3
 8010c92:	f000 f8df 	bl	8010e54 <__malloc_lock>
 8010c96:	4a1e      	ldr	r2, [pc, #120]	; (8010d10 <_free_r+0x94>)
 8010c98:	9801      	ldr	r0, [sp, #4]
 8010c9a:	6813      	ldr	r3, [r2, #0]
 8010c9c:	b933      	cbnz	r3, 8010cac <_free_r+0x30>
 8010c9e:	6063      	str	r3, [r4, #4]
 8010ca0:	6014      	str	r4, [r2, #0]
 8010ca2:	b003      	add	sp, #12
 8010ca4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010ca8:	f000 b8da 	b.w	8010e60 <__malloc_unlock>
 8010cac:	42a3      	cmp	r3, r4
 8010cae:	d908      	bls.n	8010cc2 <_free_r+0x46>
 8010cb0:	6825      	ldr	r5, [r4, #0]
 8010cb2:	1961      	adds	r1, r4, r5
 8010cb4:	428b      	cmp	r3, r1
 8010cb6:	bf01      	itttt	eq
 8010cb8:	6819      	ldreq	r1, [r3, #0]
 8010cba:	685b      	ldreq	r3, [r3, #4]
 8010cbc:	1949      	addeq	r1, r1, r5
 8010cbe:	6021      	streq	r1, [r4, #0]
 8010cc0:	e7ed      	b.n	8010c9e <_free_r+0x22>
 8010cc2:	461a      	mov	r2, r3
 8010cc4:	685b      	ldr	r3, [r3, #4]
 8010cc6:	b10b      	cbz	r3, 8010ccc <_free_r+0x50>
 8010cc8:	42a3      	cmp	r3, r4
 8010cca:	d9fa      	bls.n	8010cc2 <_free_r+0x46>
 8010ccc:	6811      	ldr	r1, [r2, #0]
 8010cce:	1855      	adds	r5, r2, r1
 8010cd0:	42a5      	cmp	r5, r4
 8010cd2:	d10b      	bne.n	8010cec <_free_r+0x70>
 8010cd4:	6824      	ldr	r4, [r4, #0]
 8010cd6:	4421      	add	r1, r4
 8010cd8:	1854      	adds	r4, r2, r1
 8010cda:	42a3      	cmp	r3, r4
 8010cdc:	6011      	str	r1, [r2, #0]
 8010cde:	d1e0      	bne.n	8010ca2 <_free_r+0x26>
 8010ce0:	681c      	ldr	r4, [r3, #0]
 8010ce2:	685b      	ldr	r3, [r3, #4]
 8010ce4:	6053      	str	r3, [r2, #4]
 8010ce6:	440c      	add	r4, r1
 8010ce8:	6014      	str	r4, [r2, #0]
 8010cea:	e7da      	b.n	8010ca2 <_free_r+0x26>
 8010cec:	d902      	bls.n	8010cf4 <_free_r+0x78>
 8010cee:	230c      	movs	r3, #12
 8010cf0:	6003      	str	r3, [r0, #0]
 8010cf2:	e7d6      	b.n	8010ca2 <_free_r+0x26>
 8010cf4:	6825      	ldr	r5, [r4, #0]
 8010cf6:	1961      	adds	r1, r4, r5
 8010cf8:	428b      	cmp	r3, r1
 8010cfa:	bf04      	itt	eq
 8010cfc:	6819      	ldreq	r1, [r3, #0]
 8010cfe:	685b      	ldreq	r3, [r3, #4]
 8010d00:	6063      	str	r3, [r4, #4]
 8010d02:	bf04      	itt	eq
 8010d04:	1949      	addeq	r1, r1, r5
 8010d06:	6021      	streq	r1, [r4, #0]
 8010d08:	6054      	str	r4, [r2, #4]
 8010d0a:	e7ca      	b.n	8010ca2 <_free_r+0x26>
 8010d0c:	b003      	add	sp, #12
 8010d0e:	bd30      	pop	{r4, r5, pc}
 8010d10:	24001034 	.word	0x24001034

08010d14 <sbrk_aligned>:
 8010d14:	b570      	push	{r4, r5, r6, lr}
 8010d16:	4e0e      	ldr	r6, [pc, #56]	; (8010d50 <sbrk_aligned+0x3c>)
 8010d18:	460c      	mov	r4, r1
 8010d1a:	6831      	ldr	r1, [r6, #0]
 8010d1c:	4605      	mov	r5, r0
 8010d1e:	b911      	cbnz	r1, 8010d26 <sbrk_aligned+0x12>
 8010d20:	f000 fba6 	bl	8011470 <_sbrk_r>
 8010d24:	6030      	str	r0, [r6, #0]
 8010d26:	4621      	mov	r1, r4
 8010d28:	4628      	mov	r0, r5
 8010d2a:	f000 fba1 	bl	8011470 <_sbrk_r>
 8010d2e:	1c43      	adds	r3, r0, #1
 8010d30:	d00a      	beq.n	8010d48 <sbrk_aligned+0x34>
 8010d32:	1cc4      	adds	r4, r0, #3
 8010d34:	f024 0403 	bic.w	r4, r4, #3
 8010d38:	42a0      	cmp	r0, r4
 8010d3a:	d007      	beq.n	8010d4c <sbrk_aligned+0x38>
 8010d3c:	1a21      	subs	r1, r4, r0
 8010d3e:	4628      	mov	r0, r5
 8010d40:	f000 fb96 	bl	8011470 <_sbrk_r>
 8010d44:	3001      	adds	r0, #1
 8010d46:	d101      	bne.n	8010d4c <sbrk_aligned+0x38>
 8010d48:	f04f 34ff 	mov.w	r4, #4294967295
 8010d4c:	4620      	mov	r0, r4
 8010d4e:	bd70      	pop	{r4, r5, r6, pc}
 8010d50:	24001038 	.word	0x24001038

08010d54 <_malloc_r>:
 8010d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d58:	1ccd      	adds	r5, r1, #3
 8010d5a:	f025 0503 	bic.w	r5, r5, #3
 8010d5e:	3508      	adds	r5, #8
 8010d60:	2d0c      	cmp	r5, #12
 8010d62:	bf38      	it	cc
 8010d64:	250c      	movcc	r5, #12
 8010d66:	2d00      	cmp	r5, #0
 8010d68:	4607      	mov	r7, r0
 8010d6a:	db01      	blt.n	8010d70 <_malloc_r+0x1c>
 8010d6c:	42a9      	cmp	r1, r5
 8010d6e:	d905      	bls.n	8010d7c <_malloc_r+0x28>
 8010d70:	230c      	movs	r3, #12
 8010d72:	603b      	str	r3, [r7, #0]
 8010d74:	2600      	movs	r6, #0
 8010d76:	4630      	mov	r0, r6
 8010d78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010e50 <_malloc_r+0xfc>
 8010d80:	f000 f868 	bl	8010e54 <__malloc_lock>
 8010d84:	f8d8 3000 	ldr.w	r3, [r8]
 8010d88:	461c      	mov	r4, r3
 8010d8a:	bb5c      	cbnz	r4, 8010de4 <_malloc_r+0x90>
 8010d8c:	4629      	mov	r1, r5
 8010d8e:	4638      	mov	r0, r7
 8010d90:	f7ff ffc0 	bl	8010d14 <sbrk_aligned>
 8010d94:	1c43      	adds	r3, r0, #1
 8010d96:	4604      	mov	r4, r0
 8010d98:	d155      	bne.n	8010e46 <_malloc_r+0xf2>
 8010d9a:	f8d8 4000 	ldr.w	r4, [r8]
 8010d9e:	4626      	mov	r6, r4
 8010da0:	2e00      	cmp	r6, #0
 8010da2:	d145      	bne.n	8010e30 <_malloc_r+0xdc>
 8010da4:	2c00      	cmp	r4, #0
 8010da6:	d048      	beq.n	8010e3a <_malloc_r+0xe6>
 8010da8:	6823      	ldr	r3, [r4, #0]
 8010daa:	4631      	mov	r1, r6
 8010dac:	4638      	mov	r0, r7
 8010dae:	eb04 0903 	add.w	r9, r4, r3
 8010db2:	f000 fb5d 	bl	8011470 <_sbrk_r>
 8010db6:	4581      	cmp	r9, r0
 8010db8:	d13f      	bne.n	8010e3a <_malloc_r+0xe6>
 8010dba:	6821      	ldr	r1, [r4, #0]
 8010dbc:	1a6d      	subs	r5, r5, r1
 8010dbe:	4629      	mov	r1, r5
 8010dc0:	4638      	mov	r0, r7
 8010dc2:	f7ff ffa7 	bl	8010d14 <sbrk_aligned>
 8010dc6:	3001      	adds	r0, #1
 8010dc8:	d037      	beq.n	8010e3a <_malloc_r+0xe6>
 8010dca:	6823      	ldr	r3, [r4, #0]
 8010dcc:	442b      	add	r3, r5
 8010dce:	6023      	str	r3, [r4, #0]
 8010dd0:	f8d8 3000 	ldr.w	r3, [r8]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d038      	beq.n	8010e4a <_malloc_r+0xf6>
 8010dd8:	685a      	ldr	r2, [r3, #4]
 8010dda:	42a2      	cmp	r2, r4
 8010ddc:	d12b      	bne.n	8010e36 <_malloc_r+0xe2>
 8010dde:	2200      	movs	r2, #0
 8010de0:	605a      	str	r2, [r3, #4]
 8010de2:	e00f      	b.n	8010e04 <_malloc_r+0xb0>
 8010de4:	6822      	ldr	r2, [r4, #0]
 8010de6:	1b52      	subs	r2, r2, r5
 8010de8:	d41f      	bmi.n	8010e2a <_malloc_r+0xd6>
 8010dea:	2a0b      	cmp	r2, #11
 8010dec:	d917      	bls.n	8010e1e <_malloc_r+0xca>
 8010dee:	1961      	adds	r1, r4, r5
 8010df0:	42a3      	cmp	r3, r4
 8010df2:	6025      	str	r5, [r4, #0]
 8010df4:	bf18      	it	ne
 8010df6:	6059      	strne	r1, [r3, #4]
 8010df8:	6863      	ldr	r3, [r4, #4]
 8010dfa:	bf08      	it	eq
 8010dfc:	f8c8 1000 	streq.w	r1, [r8]
 8010e00:	5162      	str	r2, [r4, r5]
 8010e02:	604b      	str	r3, [r1, #4]
 8010e04:	4638      	mov	r0, r7
 8010e06:	f104 060b 	add.w	r6, r4, #11
 8010e0a:	f000 f829 	bl	8010e60 <__malloc_unlock>
 8010e0e:	f026 0607 	bic.w	r6, r6, #7
 8010e12:	1d23      	adds	r3, r4, #4
 8010e14:	1af2      	subs	r2, r6, r3
 8010e16:	d0ae      	beq.n	8010d76 <_malloc_r+0x22>
 8010e18:	1b9b      	subs	r3, r3, r6
 8010e1a:	50a3      	str	r3, [r4, r2]
 8010e1c:	e7ab      	b.n	8010d76 <_malloc_r+0x22>
 8010e1e:	42a3      	cmp	r3, r4
 8010e20:	6862      	ldr	r2, [r4, #4]
 8010e22:	d1dd      	bne.n	8010de0 <_malloc_r+0x8c>
 8010e24:	f8c8 2000 	str.w	r2, [r8]
 8010e28:	e7ec      	b.n	8010e04 <_malloc_r+0xb0>
 8010e2a:	4623      	mov	r3, r4
 8010e2c:	6864      	ldr	r4, [r4, #4]
 8010e2e:	e7ac      	b.n	8010d8a <_malloc_r+0x36>
 8010e30:	4634      	mov	r4, r6
 8010e32:	6876      	ldr	r6, [r6, #4]
 8010e34:	e7b4      	b.n	8010da0 <_malloc_r+0x4c>
 8010e36:	4613      	mov	r3, r2
 8010e38:	e7cc      	b.n	8010dd4 <_malloc_r+0x80>
 8010e3a:	230c      	movs	r3, #12
 8010e3c:	603b      	str	r3, [r7, #0]
 8010e3e:	4638      	mov	r0, r7
 8010e40:	f000 f80e 	bl	8010e60 <__malloc_unlock>
 8010e44:	e797      	b.n	8010d76 <_malloc_r+0x22>
 8010e46:	6025      	str	r5, [r4, #0]
 8010e48:	e7dc      	b.n	8010e04 <_malloc_r+0xb0>
 8010e4a:	605b      	str	r3, [r3, #4]
 8010e4c:	deff      	udf	#255	; 0xff
 8010e4e:	bf00      	nop
 8010e50:	24001034 	.word	0x24001034

08010e54 <__malloc_lock>:
 8010e54:	4801      	ldr	r0, [pc, #4]	; (8010e5c <__malloc_lock+0x8>)
 8010e56:	f7ff bf07 	b.w	8010c68 <__retarget_lock_acquire_recursive>
 8010e5a:	bf00      	nop
 8010e5c:	24001030 	.word	0x24001030

08010e60 <__malloc_unlock>:
 8010e60:	4801      	ldr	r0, [pc, #4]	; (8010e68 <__malloc_unlock+0x8>)
 8010e62:	f7ff bf02 	b.w	8010c6a <__retarget_lock_release_recursive>
 8010e66:	bf00      	nop
 8010e68:	24001030 	.word	0x24001030

08010e6c <__ssputs_r>:
 8010e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e70:	688e      	ldr	r6, [r1, #8]
 8010e72:	461f      	mov	r7, r3
 8010e74:	42be      	cmp	r6, r7
 8010e76:	680b      	ldr	r3, [r1, #0]
 8010e78:	4682      	mov	sl, r0
 8010e7a:	460c      	mov	r4, r1
 8010e7c:	4690      	mov	r8, r2
 8010e7e:	d82c      	bhi.n	8010eda <__ssputs_r+0x6e>
 8010e80:	898a      	ldrh	r2, [r1, #12]
 8010e82:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010e86:	d026      	beq.n	8010ed6 <__ssputs_r+0x6a>
 8010e88:	6965      	ldr	r5, [r4, #20]
 8010e8a:	6909      	ldr	r1, [r1, #16]
 8010e8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010e90:	eba3 0901 	sub.w	r9, r3, r1
 8010e94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010e98:	1c7b      	adds	r3, r7, #1
 8010e9a:	444b      	add	r3, r9
 8010e9c:	106d      	asrs	r5, r5, #1
 8010e9e:	429d      	cmp	r5, r3
 8010ea0:	bf38      	it	cc
 8010ea2:	461d      	movcc	r5, r3
 8010ea4:	0553      	lsls	r3, r2, #21
 8010ea6:	d527      	bpl.n	8010ef8 <__ssputs_r+0x8c>
 8010ea8:	4629      	mov	r1, r5
 8010eaa:	f7ff ff53 	bl	8010d54 <_malloc_r>
 8010eae:	4606      	mov	r6, r0
 8010eb0:	b360      	cbz	r0, 8010f0c <__ssputs_r+0xa0>
 8010eb2:	6921      	ldr	r1, [r4, #16]
 8010eb4:	464a      	mov	r2, r9
 8010eb6:	f000 faeb 	bl	8011490 <memcpy>
 8010eba:	89a3      	ldrh	r3, [r4, #12]
 8010ebc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ec4:	81a3      	strh	r3, [r4, #12]
 8010ec6:	6126      	str	r6, [r4, #16]
 8010ec8:	6165      	str	r5, [r4, #20]
 8010eca:	444e      	add	r6, r9
 8010ecc:	eba5 0509 	sub.w	r5, r5, r9
 8010ed0:	6026      	str	r6, [r4, #0]
 8010ed2:	60a5      	str	r5, [r4, #8]
 8010ed4:	463e      	mov	r6, r7
 8010ed6:	42be      	cmp	r6, r7
 8010ed8:	d900      	bls.n	8010edc <__ssputs_r+0x70>
 8010eda:	463e      	mov	r6, r7
 8010edc:	6820      	ldr	r0, [r4, #0]
 8010ede:	4632      	mov	r2, r6
 8010ee0:	4641      	mov	r1, r8
 8010ee2:	f000 faab 	bl	801143c <memmove>
 8010ee6:	68a3      	ldr	r3, [r4, #8]
 8010ee8:	1b9b      	subs	r3, r3, r6
 8010eea:	60a3      	str	r3, [r4, #8]
 8010eec:	6823      	ldr	r3, [r4, #0]
 8010eee:	4433      	add	r3, r6
 8010ef0:	6023      	str	r3, [r4, #0]
 8010ef2:	2000      	movs	r0, #0
 8010ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ef8:	462a      	mov	r2, r5
 8010efa:	f000 fad7 	bl	80114ac <_realloc_r>
 8010efe:	4606      	mov	r6, r0
 8010f00:	2800      	cmp	r0, #0
 8010f02:	d1e0      	bne.n	8010ec6 <__ssputs_r+0x5a>
 8010f04:	6921      	ldr	r1, [r4, #16]
 8010f06:	4650      	mov	r0, sl
 8010f08:	f7ff feb8 	bl	8010c7c <_free_r>
 8010f0c:	230c      	movs	r3, #12
 8010f0e:	f8ca 3000 	str.w	r3, [sl]
 8010f12:	89a3      	ldrh	r3, [r4, #12]
 8010f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f18:	81a3      	strh	r3, [r4, #12]
 8010f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8010f1e:	e7e9      	b.n	8010ef4 <__ssputs_r+0x88>

08010f20 <_svfiprintf_r>:
 8010f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f24:	4698      	mov	r8, r3
 8010f26:	898b      	ldrh	r3, [r1, #12]
 8010f28:	061b      	lsls	r3, r3, #24
 8010f2a:	b09d      	sub	sp, #116	; 0x74
 8010f2c:	4607      	mov	r7, r0
 8010f2e:	460d      	mov	r5, r1
 8010f30:	4614      	mov	r4, r2
 8010f32:	d50e      	bpl.n	8010f52 <_svfiprintf_r+0x32>
 8010f34:	690b      	ldr	r3, [r1, #16]
 8010f36:	b963      	cbnz	r3, 8010f52 <_svfiprintf_r+0x32>
 8010f38:	2140      	movs	r1, #64	; 0x40
 8010f3a:	f7ff ff0b 	bl	8010d54 <_malloc_r>
 8010f3e:	6028      	str	r0, [r5, #0]
 8010f40:	6128      	str	r0, [r5, #16]
 8010f42:	b920      	cbnz	r0, 8010f4e <_svfiprintf_r+0x2e>
 8010f44:	230c      	movs	r3, #12
 8010f46:	603b      	str	r3, [r7, #0]
 8010f48:	f04f 30ff 	mov.w	r0, #4294967295
 8010f4c:	e0d0      	b.n	80110f0 <_svfiprintf_r+0x1d0>
 8010f4e:	2340      	movs	r3, #64	; 0x40
 8010f50:	616b      	str	r3, [r5, #20]
 8010f52:	2300      	movs	r3, #0
 8010f54:	9309      	str	r3, [sp, #36]	; 0x24
 8010f56:	2320      	movs	r3, #32
 8010f58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010f5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010f60:	2330      	movs	r3, #48	; 0x30
 8010f62:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011108 <_svfiprintf_r+0x1e8>
 8010f66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010f6a:	f04f 0901 	mov.w	r9, #1
 8010f6e:	4623      	mov	r3, r4
 8010f70:	469a      	mov	sl, r3
 8010f72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f76:	b10a      	cbz	r2, 8010f7c <_svfiprintf_r+0x5c>
 8010f78:	2a25      	cmp	r2, #37	; 0x25
 8010f7a:	d1f9      	bne.n	8010f70 <_svfiprintf_r+0x50>
 8010f7c:	ebba 0b04 	subs.w	fp, sl, r4
 8010f80:	d00b      	beq.n	8010f9a <_svfiprintf_r+0x7a>
 8010f82:	465b      	mov	r3, fp
 8010f84:	4622      	mov	r2, r4
 8010f86:	4629      	mov	r1, r5
 8010f88:	4638      	mov	r0, r7
 8010f8a:	f7ff ff6f 	bl	8010e6c <__ssputs_r>
 8010f8e:	3001      	adds	r0, #1
 8010f90:	f000 80a9 	beq.w	80110e6 <_svfiprintf_r+0x1c6>
 8010f94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f96:	445a      	add	r2, fp
 8010f98:	9209      	str	r2, [sp, #36]	; 0x24
 8010f9a:	f89a 3000 	ldrb.w	r3, [sl]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	f000 80a1 	beq.w	80110e6 <_svfiprintf_r+0x1c6>
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8010faa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010fae:	f10a 0a01 	add.w	sl, sl, #1
 8010fb2:	9304      	str	r3, [sp, #16]
 8010fb4:	9307      	str	r3, [sp, #28]
 8010fb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010fba:	931a      	str	r3, [sp, #104]	; 0x68
 8010fbc:	4654      	mov	r4, sl
 8010fbe:	2205      	movs	r2, #5
 8010fc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fc4:	4850      	ldr	r0, [pc, #320]	; (8011108 <_svfiprintf_r+0x1e8>)
 8010fc6:	f7ef f9ab 	bl	8000320 <memchr>
 8010fca:	9a04      	ldr	r2, [sp, #16]
 8010fcc:	b9d8      	cbnz	r0, 8011006 <_svfiprintf_r+0xe6>
 8010fce:	06d0      	lsls	r0, r2, #27
 8010fd0:	bf44      	itt	mi
 8010fd2:	2320      	movmi	r3, #32
 8010fd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010fd8:	0711      	lsls	r1, r2, #28
 8010fda:	bf44      	itt	mi
 8010fdc:	232b      	movmi	r3, #43	; 0x2b
 8010fde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010fe2:	f89a 3000 	ldrb.w	r3, [sl]
 8010fe6:	2b2a      	cmp	r3, #42	; 0x2a
 8010fe8:	d015      	beq.n	8011016 <_svfiprintf_r+0xf6>
 8010fea:	9a07      	ldr	r2, [sp, #28]
 8010fec:	4654      	mov	r4, sl
 8010fee:	2000      	movs	r0, #0
 8010ff0:	f04f 0c0a 	mov.w	ip, #10
 8010ff4:	4621      	mov	r1, r4
 8010ff6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ffa:	3b30      	subs	r3, #48	; 0x30
 8010ffc:	2b09      	cmp	r3, #9
 8010ffe:	d94d      	bls.n	801109c <_svfiprintf_r+0x17c>
 8011000:	b1b0      	cbz	r0, 8011030 <_svfiprintf_r+0x110>
 8011002:	9207      	str	r2, [sp, #28]
 8011004:	e014      	b.n	8011030 <_svfiprintf_r+0x110>
 8011006:	eba0 0308 	sub.w	r3, r0, r8
 801100a:	fa09 f303 	lsl.w	r3, r9, r3
 801100e:	4313      	orrs	r3, r2
 8011010:	9304      	str	r3, [sp, #16]
 8011012:	46a2      	mov	sl, r4
 8011014:	e7d2      	b.n	8010fbc <_svfiprintf_r+0x9c>
 8011016:	9b03      	ldr	r3, [sp, #12]
 8011018:	1d19      	adds	r1, r3, #4
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	9103      	str	r1, [sp, #12]
 801101e:	2b00      	cmp	r3, #0
 8011020:	bfbb      	ittet	lt
 8011022:	425b      	neglt	r3, r3
 8011024:	f042 0202 	orrlt.w	r2, r2, #2
 8011028:	9307      	strge	r3, [sp, #28]
 801102a:	9307      	strlt	r3, [sp, #28]
 801102c:	bfb8      	it	lt
 801102e:	9204      	strlt	r2, [sp, #16]
 8011030:	7823      	ldrb	r3, [r4, #0]
 8011032:	2b2e      	cmp	r3, #46	; 0x2e
 8011034:	d10c      	bne.n	8011050 <_svfiprintf_r+0x130>
 8011036:	7863      	ldrb	r3, [r4, #1]
 8011038:	2b2a      	cmp	r3, #42	; 0x2a
 801103a:	d134      	bne.n	80110a6 <_svfiprintf_r+0x186>
 801103c:	9b03      	ldr	r3, [sp, #12]
 801103e:	1d1a      	adds	r2, r3, #4
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	9203      	str	r2, [sp, #12]
 8011044:	2b00      	cmp	r3, #0
 8011046:	bfb8      	it	lt
 8011048:	f04f 33ff 	movlt.w	r3, #4294967295
 801104c:	3402      	adds	r4, #2
 801104e:	9305      	str	r3, [sp, #20]
 8011050:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8011118 <_svfiprintf_r+0x1f8>
 8011054:	7821      	ldrb	r1, [r4, #0]
 8011056:	2203      	movs	r2, #3
 8011058:	4650      	mov	r0, sl
 801105a:	f7ef f961 	bl	8000320 <memchr>
 801105e:	b138      	cbz	r0, 8011070 <_svfiprintf_r+0x150>
 8011060:	9b04      	ldr	r3, [sp, #16]
 8011062:	eba0 000a 	sub.w	r0, r0, sl
 8011066:	2240      	movs	r2, #64	; 0x40
 8011068:	4082      	lsls	r2, r0
 801106a:	4313      	orrs	r3, r2
 801106c:	3401      	adds	r4, #1
 801106e:	9304      	str	r3, [sp, #16]
 8011070:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011074:	4825      	ldr	r0, [pc, #148]	; (801110c <_svfiprintf_r+0x1ec>)
 8011076:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801107a:	2206      	movs	r2, #6
 801107c:	f7ef f950 	bl	8000320 <memchr>
 8011080:	2800      	cmp	r0, #0
 8011082:	d038      	beq.n	80110f6 <_svfiprintf_r+0x1d6>
 8011084:	4b22      	ldr	r3, [pc, #136]	; (8011110 <_svfiprintf_r+0x1f0>)
 8011086:	bb1b      	cbnz	r3, 80110d0 <_svfiprintf_r+0x1b0>
 8011088:	9b03      	ldr	r3, [sp, #12]
 801108a:	3307      	adds	r3, #7
 801108c:	f023 0307 	bic.w	r3, r3, #7
 8011090:	3308      	adds	r3, #8
 8011092:	9303      	str	r3, [sp, #12]
 8011094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011096:	4433      	add	r3, r6
 8011098:	9309      	str	r3, [sp, #36]	; 0x24
 801109a:	e768      	b.n	8010f6e <_svfiprintf_r+0x4e>
 801109c:	fb0c 3202 	mla	r2, ip, r2, r3
 80110a0:	460c      	mov	r4, r1
 80110a2:	2001      	movs	r0, #1
 80110a4:	e7a6      	b.n	8010ff4 <_svfiprintf_r+0xd4>
 80110a6:	2300      	movs	r3, #0
 80110a8:	3401      	adds	r4, #1
 80110aa:	9305      	str	r3, [sp, #20]
 80110ac:	4619      	mov	r1, r3
 80110ae:	f04f 0c0a 	mov.w	ip, #10
 80110b2:	4620      	mov	r0, r4
 80110b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80110b8:	3a30      	subs	r2, #48	; 0x30
 80110ba:	2a09      	cmp	r2, #9
 80110bc:	d903      	bls.n	80110c6 <_svfiprintf_r+0x1a6>
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d0c6      	beq.n	8011050 <_svfiprintf_r+0x130>
 80110c2:	9105      	str	r1, [sp, #20]
 80110c4:	e7c4      	b.n	8011050 <_svfiprintf_r+0x130>
 80110c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80110ca:	4604      	mov	r4, r0
 80110cc:	2301      	movs	r3, #1
 80110ce:	e7f0      	b.n	80110b2 <_svfiprintf_r+0x192>
 80110d0:	ab03      	add	r3, sp, #12
 80110d2:	9300      	str	r3, [sp, #0]
 80110d4:	462a      	mov	r2, r5
 80110d6:	4b0f      	ldr	r3, [pc, #60]	; (8011114 <_svfiprintf_r+0x1f4>)
 80110d8:	a904      	add	r1, sp, #16
 80110da:	4638      	mov	r0, r7
 80110dc:	f3af 8000 	nop.w
 80110e0:	1c42      	adds	r2, r0, #1
 80110e2:	4606      	mov	r6, r0
 80110e4:	d1d6      	bne.n	8011094 <_svfiprintf_r+0x174>
 80110e6:	89ab      	ldrh	r3, [r5, #12]
 80110e8:	065b      	lsls	r3, r3, #25
 80110ea:	f53f af2d 	bmi.w	8010f48 <_svfiprintf_r+0x28>
 80110ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80110f0:	b01d      	add	sp, #116	; 0x74
 80110f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110f6:	ab03      	add	r3, sp, #12
 80110f8:	9300      	str	r3, [sp, #0]
 80110fa:	462a      	mov	r2, r5
 80110fc:	4b05      	ldr	r3, [pc, #20]	; (8011114 <_svfiprintf_r+0x1f4>)
 80110fe:	a904      	add	r1, sp, #16
 8011100:	4638      	mov	r0, r7
 8011102:	f000 f879 	bl	80111f8 <_printf_i>
 8011106:	e7eb      	b.n	80110e0 <_svfiprintf_r+0x1c0>
 8011108:	08011efe 	.word	0x08011efe
 801110c:	08011f08 	.word	0x08011f08
 8011110:	00000000 	.word	0x00000000
 8011114:	08010e6d 	.word	0x08010e6d
 8011118:	08011f04 	.word	0x08011f04

0801111c <_printf_common>:
 801111c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011120:	4616      	mov	r6, r2
 8011122:	4699      	mov	r9, r3
 8011124:	688a      	ldr	r2, [r1, #8]
 8011126:	690b      	ldr	r3, [r1, #16]
 8011128:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801112c:	4293      	cmp	r3, r2
 801112e:	bfb8      	it	lt
 8011130:	4613      	movlt	r3, r2
 8011132:	6033      	str	r3, [r6, #0]
 8011134:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011138:	4607      	mov	r7, r0
 801113a:	460c      	mov	r4, r1
 801113c:	b10a      	cbz	r2, 8011142 <_printf_common+0x26>
 801113e:	3301      	adds	r3, #1
 8011140:	6033      	str	r3, [r6, #0]
 8011142:	6823      	ldr	r3, [r4, #0]
 8011144:	0699      	lsls	r1, r3, #26
 8011146:	bf42      	ittt	mi
 8011148:	6833      	ldrmi	r3, [r6, #0]
 801114a:	3302      	addmi	r3, #2
 801114c:	6033      	strmi	r3, [r6, #0]
 801114e:	6825      	ldr	r5, [r4, #0]
 8011150:	f015 0506 	ands.w	r5, r5, #6
 8011154:	d106      	bne.n	8011164 <_printf_common+0x48>
 8011156:	f104 0a19 	add.w	sl, r4, #25
 801115a:	68e3      	ldr	r3, [r4, #12]
 801115c:	6832      	ldr	r2, [r6, #0]
 801115e:	1a9b      	subs	r3, r3, r2
 8011160:	42ab      	cmp	r3, r5
 8011162:	dc26      	bgt.n	80111b2 <_printf_common+0x96>
 8011164:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011168:	1e13      	subs	r3, r2, #0
 801116a:	6822      	ldr	r2, [r4, #0]
 801116c:	bf18      	it	ne
 801116e:	2301      	movne	r3, #1
 8011170:	0692      	lsls	r2, r2, #26
 8011172:	d42b      	bmi.n	80111cc <_printf_common+0xb0>
 8011174:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011178:	4649      	mov	r1, r9
 801117a:	4638      	mov	r0, r7
 801117c:	47c0      	blx	r8
 801117e:	3001      	adds	r0, #1
 8011180:	d01e      	beq.n	80111c0 <_printf_common+0xa4>
 8011182:	6823      	ldr	r3, [r4, #0]
 8011184:	6922      	ldr	r2, [r4, #16]
 8011186:	f003 0306 	and.w	r3, r3, #6
 801118a:	2b04      	cmp	r3, #4
 801118c:	bf02      	ittt	eq
 801118e:	68e5      	ldreq	r5, [r4, #12]
 8011190:	6833      	ldreq	r3, [r6, #0]
 8011192:	1aed      	subeq	r5, r5, r3
 8011194:	68a3      	ldr	r3, [r4, #8]
 8011196:	bf0c      	ite	eq
 8011198:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801119c:	2500      	movne	r5, #0
 801119e:	4293      	cmp	r3, r2
 80111a0:	bfc4      	itt	gt
 80111a2:	1a9b      	subgt	r3, r3, r2
 80111a4:	18ed      	addgt	r5, r5, r3
 80111a6:	2600      	movs	r6, #0
 80111a8:	341a      	adds	r4, #26
 80111aa:	42b5      	cmp	r5, r6
 80111ac:	d11a      	bne.n	80111e4 <_printf_common+0xc8>
 80111ae:	2000      	movs	r0, #0
 80111b0:	e008      	b.n	80111c4 <_printf_common+0xa8>
 80111b2:	2301      	movs	r3, #1
 80111b4:	4652      	mov	r2, sl
 80111b6:	4649      	mov	r1, r9
 80111b8:	4638      	mov	r0, r7
 80111ba:	47c0      	blx	r8
 80111bc:	3001      	adds	r0, #1
 80111be:	d103      	bne.n	80111c8 <_printf_common+0xac>
 80111c0:	f04f 30ff 	mov.w	r0, #4294967295
 80111c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111c8:	3501      	adds	r5, #1
 80111ca:	e7c6      	b.n	801115a <_printf_common+0x3e>
 80111cc:	18e1      	adds	r1, r4, r3
 80111ce:	1c5a      	adds	r2, r3, #1
 80111d0:	2030      	movs	r0, #48	; 0x30
 80111d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80111d6:	4422      	add	r2, r4
 80111d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80111dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80111e0:	3302      	adds	r3, #2
 80111e2:	e7c7      	b.n	8011174 <_printf_common+0x58>
 80111e4:	2301      	movs	r3, #1
 80111e6:	4622      	mov	r2, r4
 80111e8:	4649      	mov	r1, r9
 80111ea:	4638      	mov	r0, r7
 80111ec:	47c0      	blx	r8
 80111ee:	3001      	adds	r0, #1
 80111f0:	d0e6      	beq.n	80111c0 <_printf_common+0xa4>
 80111f2:	3601      	adds	r6, #1
 80111f4:	e7d9      	b.n	80111aa <_printf_common+0x8e>
	...

080111f8 <_printf_i>:
 80111f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80111fc:	7e0f      	ldrb	r7, [r1, #24]
 80111fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011200:	2f78      	cmp	r7, #120	; 0x78
 8011202:	4691      	mov	r9, r2
 8011204:	4680      	mov	r8, r0
 8011206:	460c      	mov	r4, r1
 8011208:	469a      	mov	sl, r3
 801120a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801120e:	d807      	bhi.n	8011220 <_printf_i+0x28>
 8011210:	2f62      	cmp	r7, #98	; 0x62
 8011212:	d80a      	bhi.n	801122a <_printf_i+0x32>
 8011214:	2f00      	cmp	r7, #0
 8011216:	f000 80d4 	beq.w	80113c2 <_printf_i+0x1ca>
 801121a:	2f58      	cmp	r7, #88	; 0x58
 801121c:	f000 80c0 	beq.w	80113a0 <_printf_i+0x1a8>
 8011220:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011224:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011228:	e03a      	b.n	80112a0 <_printf_i+0xa8>
 801122a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801122e:	2b15      	cmp	r3, #21
 8011230:	d8f6      	bhi.n	8011220 <_printf_i+0x28>
 8011232:	a101      	add	r1, pc, #4	; (adr r1, 8011238 <_printf_i+0x40>)
 8011234:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011238:	08011291 	.word	0x08011291
 801123c:	080112a5 	.word	0x080112a5
 8011240:	08011221 	.word	0x08011221
 8011244:	08011221 	.word	0x08011221
 8011248:	08011221 	.word	0x08011221
 801124c:	08011221 	.word	0x08011221
 8011250:	080112a5 	.word	0x080112a5
 8011254:	08011221 	.word	0x08011221
 8011258:	08011221 	.word	0x08011221
 801125c:	08011221 	.word	0x08011221
 8011260:	08011221 	.word	0x08011221
 8011264:	080113a9 	.word	0x080113a9
 8011268:	080112d1 	.word	0x080112d1
 801126c:	08011363 	.word	0x08011363
 8011270:	08011221 	.word	0x08011221
 8011274:	08011221 	.word	0x08011221
 8011278:	080113cb 	.word	0x080113cb
 801127c:	08011221 	.word	0x08011221
 8011280:	080112d1 	.word	0x080112d1
 8011284:	08011221 	.word	0x08011221
 8011288:	08011221 	.word	0x08011221
 801128c:	0801136b 	.word	0x0801136b
 8011290:	682b      	ldr	r3, [r5, #0]
 8011292:	1d1a      	adds	r2, r3, #4
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	602a      	str	r2, [r5, #0]
 8011298:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801129c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80112a0:	2301      	movs	r3, #1
 80112a2:	e09f      	b.n	80113e4 <_printf_i+0x1ec>
 80112a4:	6820      	ldr	r0, [r4, #0]
 80112a6:	682b      	ldr	r3, [r5, #0]
 80112a8:	0607      	lsls	r7, r0, #24
 80112aa:	f103 0104 	add.w	r1, r3, #4
 80112ae:	6029      	str	r1, [r5, #0]
 80112b0:	d501      	bpl.n	80112b6 <_printf_i+0xbe>
 80112b2:	681e      	ldr	r6, [r3, #0]
 80112b4:	e003      	b.n	80112be <_printf_i+0xc6>
 80112b6:	0646      	lsls	r6, r0, #25
 80112b8:	d5fb      	bpl.n	80112b2 <_printf_i+0xba>
 80112ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80112be:	2e00      	cmp	r6, #0
 80112c0:	da03      	bge.n	80112ca <_printf_i+0xd2>
 80112c2:	232d      	movs	r3, #45	; 0x2d
 80112c4:	4276      	negs	r6, r6
 80112c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80112ca:	485a      	ldr	r0, [pc, #360]	; (8011434 <_printf_i+0x23c>)
 80112cc:	230a      	movs	r3, #10
 80112ce:	e012      	b.n	80112f6 <_printf_i+0xfe>
 80112d0:	682b      	ldr	r3, [r5, #0]
 80112d2:	6820      	ldr	r0, [r4, #0]
 80112d4:	1d19      	adds	r1, r3, #4
 80112d6:	6029      	str	r1, [r5, #0]
 80112d8:	0605      	lsls	r5, r0, #24
 80112da:	d501      	bpl.n	80112e0 <_printf_i+0xe8>
 80112dc:	681e      	ldr	r6, [r3, #0]
 80112de:	e002      	b.n	80112e6 <_printf_i+0xee>
 80112e0:	0641      	lsls	r1, r0, #25
 80112e2:	d5fb      	bpl.n	80112dc <_printf_i+0xe4>
 80112e4:	881e      	ldrh	r6, [r3, #0]
 80112e6:	4853      	ldr	r0, [pc, #332]	; (8011434 <_printf_i+0x23c>)
 80112e8:	2f6f      	cmp	r7, #111	; 0x6f
 80112ea:	bf0c      	ite	eq
 80112ec:	2308      	moveq	r3, #8
 80112ee:	230a      	movne	r3, #10
 80112f0:	2100      	movs	r1, #0
 80112f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80112f6:	6865      	ldr	r5, [r4, #4]
 80112f8:	60a5      	str	r5, [r4, #8]
 80112fa:	2d00      	cmp	r5, #0
 80112fc:	bfa2      	ittt	ge
 80112fe:	6821      	ldrge	r1, [r4, #0]
 8011300:	f021 0104 	bicge.w	r1, r1, #4
 8011304:	6021      	strge	r1, [r4, #0]
 8011306:	b90e      	cbnz	r6, 801130c <_printf_i+0x114>
 8011308:	2d00      	cmp	r5, #0
 801130a:	d04b      	beq.n	80113a4 <_printf_i+0x1ac>
 801130c:	4615      	mov	r5, r2
 801130e:	fbb6 f1f3 	udiv	r1, r6, r3
 8011312:	fb03 6711 	mls	r7, r3, r1, r6
 8011316:	5dc7      	ldrb	r7, [r0, r7]
 8011318:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801131c:	4637      	mov	r7, r6
 801131e:	42bb      	cmp	r3, r7
 8011320:	460e      	mov	r6, r1
 8011322:	d9f4      	bls.n	801130e <_printf_i+0x116>
 8011324:	2b08      	cmp	r3, #8
 8011326:	d10b      	bne.n	8011340 <_printf_i+0x148>
 8011328:	6823      	ldr	r3, [r4, #0]
 801132a:	07de      	lsls	r6, r3, #31
 801132c:	d508      	bpl.n	8011340 <_printf_i+0x148>
 801132e:	6923      	ldr	r3, [r4, #16]
 8011330:	6861      	ldr	r1, [r4, #4]
 8011332:	4299      	cmp	r1, r3
 8011334:	bfde      	ittt	le
 8011336:	2330      	movle	r3, #48	; 0x30
 8011338:	f805 3c01 	strble.w	r3, [r5, #-1]
 801133c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011340:	1b52      	subs	r2, r2, r5
 8011342:	6122      	str	r2, [r4, #16]
 8011344:	f8cd a000 	str.w	sl, [sp]
 8011348:	464b      	mov	r3, r9
 801134a:	aa03      	add	r2, sp, #12
 801134c:	4621      	mov	r1, r4
 801134e:	4640      	mov	r0, r8
 8011350:	f7ff fee4 	bl	801111c <_printf_common>
 8011354:	3001      	adds	r0, #1
 8011356:	d14a      	bne.n	80113ee <_printf_i+0x1f6>
 8011358:	f04f 30ff 	mov.w	r0, #4294967295
 801135c:	b004      	add	sp, #16
 801135e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011362:	6823      	ldr	r3, [r4, #0]
 8011364:	f043 0320 	orr.w	r3, r3, #32
 8011368:	6023      	str	r3, [r4, #0]
 801136a:	4833      	ldr	r0, [pc, #204]	; (8011438 <_printf_i+0x240>)
 801136c:	2778      	movs	r7, #120	; 0x78
 801136e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011372:	6823      	ldr	r3, [r4, #0]
 8011374:	6829      	ldr	r1, [r5, #0]
 8011376:	061f      	lsls	r7, r3, #24
 8011378:	f851 6b04 	ldr.w	r6, [r1], #4
 801137c:	d402      	bmi.n	8011384 <_printf_i+0x18c>
 801137e:	065f      	lsls	r7, r3, #25
 8011380:	bf48      	it	mi
 8011382:	b2b6      	uxthmi	r6, r6
 8011384:	07df      	lsls	r7, r3, #31
 8011386:	bf48      	it	mi
 8011388:	f043 0320 	orrmi.w	r3, r3, #32
 801138c:	6029      	str	r1, [r5, #0]
 801138e:	bf48      	it	mi
 8011390:	6023      	strmi	r3, [r4, #0]
 8011392:	b91e      	cbnz	r6, 801139c <_printf_i+0x1a4>
 8011394:	6823      	ldr	r3, [r4, #0]
 8011396:	f023 0320 	bic.w	r3, r3, #32
 801139a:	6023      	str	r3, [r4, #0]
 801139c:	2310      	movs	r3, #16
 801139e:	e7a7      	b.n	80112f0 <_printf_i+0xf8>
 80113a0:	4824      	ldr	r0, [pc, #144]	; (8011434 <_printf_i+0x23c>)
 80113a2:	e7e4      	b.n	801136e <_printf_i+0x176>
 80113a4:	4615      	mov	r5, r2
 80113a6:	e7bd      	b.n	8011324 <_printf_i+0x12c>
 80113a8:	682b      	ldr	r3, [r5, #0]
 80113aa:	6826      	ldr	r6, [r4, #0]
 80113ac:	6961      	ldr	r1, [r4, #20]
 80113ae:	1d18      	adds	r0, r3, #4
 80113b0:	6028      	str	r0, [r5, #0]
 80113b2:	0635      	lsls	r5, r6, #24
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	d501      	bpl.n	80113bc <_printf_i+0x1c4>
 80113b8:	6019      	str	r1, [r3, #0]
 80113ba:	e002      	b.n	80113c2 <_printf_i+0x1ca>
 80113bc:	0670      	lsls	r0, r6, #25
 80113be:	d5fb      	bpl.n	80113b8 <_printf_i+0x1c0>
 80113c0:	8019      	strh	r1, [r3, #0]
 80113c2:	2300      	movs	r3, #0
 80113c4:	6123      	str	r3, [r4, #16]
 80113c6:	4615      	mov	r5, r2
 80113c8:	e7bc      	b.n	8011344 <_printf_i+0x14c>
 80113ca:	682b      	ldr	r3, [r5, #0]
 80113cc:	1d1a      	adds	r2, r3, #4
 80113ce:	602a      	str	r2, [r5, #0]
 80113d0:	681d      	ldr	r5, [r3, #0]
 80113d2:	6862      	ldr	r2, [r4, #4]
 80113d4:	2100      	movs	r1, #0
 80113d6:	4628      	mov	r0, r5
 80113d8:	f7ee ffa2 	bl	8000320 <memchr>
 80113dc:	b108      	cbz	r0, 80113e2 <_printf_i+0x1ea>
 80113de:	1b40      	subs	r0, r0, r5
 80113e0:	6060      	str	r0, [r4, #4]
 80113e2:	6863      	ldr	r3, [r4, #4]
 80113e4:	6123      	str	r3, [r4, #16]
 80113e6:	2300      	movs	r3, #0
 80113e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80113ec:	e7aa      	b.n	8011344 <_printf_i+0x14c>
 80113ee:	6923      	ldr	r3, [r4, #16]
 80113f0:	462a      	mov	r2, r5
 80113f2:	4649      	mov	r1, r9
 80113f4:	4640      	mov	r0, r8
 80113f6:	47d0      	blx	sl
 80113f8:	3001      	adds	r0, #1
 80113fa:	d0ad      	beq.n	8011358 <_printf_i+0x160>
 80113fc:	6823      	ldr	r3, [r4, #0]
 80113fe:	079b      	lsls	r3, r3, #30
 8011400:	d413      	bmi.n	801142a <_printf_i+0x232>
 8011402:	68e0      	ldr	r0, [r4, #12]
 8011404:	9b03      	ldr	r3, [sp, #12]
 8011406:	4298      	cmp	r0, r3
 8011408:	bfb8      	it	lt
 801140a:	4618      	movlt	r0, r3
 801140c:	e7a6      	b.n	801135c <_printf_i+0x164>
 801140e:	2301      	movs	r3, #1
 8011410:	4632      	mov	r2, r6
 8011412:	4649      	mov	r1, r9
 8011414:	4640      	mov	r0, r8
 8011416:	47d0      	blx	sl
 8011418:	3001      	adds	r0, #1
 801141a:	d09d      	beq.n	8011358 <_printf_i+0x160>
 801141c:	3501      	adds	r5, #1
 801141e:	68e3      	ldr	r3, [r4, #12]
 8011420:	9903      	ldr	r1, [sp, #12]
 8011422:	1a5b      	subs	r3, r3, r1
 8011424:	42ab      	cmp	r3, r5
 8011426:	dcf2      	bgt.n	801140e <_printf_i+0x216>
 8011428:	e7eb      	b.n	8011402 <_printf_i+0x20a>
 801142a:	2500      	movs	r5, #0
 801142c:	f104 0619 	add.w	r6, r4, #25
 8011430:	e7f5      	b.n	801141e <_printf_i+0x226>
 8011432:	bf00      	nop
 8011434:	08011f0f 	.word	0x08011f0f
 8011438:	08011f20 	.word	0x08011f20

0801143c <memmove>:
 801143c:	4288      	cmp	r0, r1
 801143e:	b510      	push	{r4, lr}
 8011440:	eb01 0402 	add.w	r4, r1, r2
 8011444:	d902      	bls.n	801144c <memmove+0x10>
 8011446:	4284      	cmp	r4, r0
 8011448:	4623      	mov	r3, r4
 801144a:	d807      	bhi.n	801145c <memmove+0x20>
 801144c:	1e43      	subs	r3, r0, #1
 801144e:	42a1      	cmp	r1, r4
 8011450:	d008      	beq.n	8011464 <memmove+0x28>
 8011452:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011456:	f803 2f01 	strb.w	r2, [r3, #1]!
 801145a:	e7f8      	b.n	801144e <memmove+0x12>
 801145c:	4402      	add	r2, r0
 801145e:	4601      	mov	r1, r0
 8011460:	428a      	cmp	r2, r1
 8011462:	d100      	bne.n	8011466 <memmove+0x2a>
 8011464:	bd10      	pop	{r4, pc}
 8011466:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801146a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801146e:	e7f7      	b.n	8011460 <memmove+0x24>

08011470 <_sbrk_r>:
 8011470:	b538      	push	{r3, r4, r5, lr}
 8011472:	4d06      	ldr	r5, [pc, #24]	; (801148c <_sbrk_r+0x1c>)
 8011474:	2300      	movs	r3, #0
 8011476:	4604      	mov	r4, r0
 8011478:	4608      	mov	r0, r1
 801147a:	602b      	str	r3, [r5, #0]
 801147c:	f7f2 fca2 	bl	8003dc4 <_sbrk>
 8011480:	1c43      	adds	r3, r0, #1
 8011482:	d102      	bne.n	801148a <_sbrk_r+0x1a>
 8011484:	682b      	ldr	r3, [r5, #0]
 8011486:	b103      	cbz	r3, 801148a <_sbrk_r+0x1a>
 8011488:	6023      	str	r3, [r4, #0]
 801148a:	bd38      	pop	{r3, r4, r5, pc}
 801148c:	2400102c 	.word	0x2400102c

08011490 <memcpy>:
 8011490:	440a      	add	r2, r1
 8011492:	4291      	cmp	r1, r2
 8011494:	f100 33ff 	add.w	r3, r0, #4294967295
 8011498:	d100      	bne.n	801149c <memcpy+0xc>
 801149a:	4770      	bx	lr
 801149c:	b510      	push	{r4, lr}
 801149e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80114a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80114a6:	4291      	cmp	r1, r2
 80114a8:	d1f9      	bne.n	801149e <memcpy+0xe>
 80114aa:	bd10      	pop	{r4, pc}

080114ac <_realloc_r>:
 80114ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114b0:	4680      	mov	r8, r0
 80114b2:	4614      	mov	r4, r2
 80114b4:	460e      	mov	r6, r1
 80114b6:	b921      	cbnz	r1, 80114c2 <_realloc_r+0x16>
 80114b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80114bc:	4611      	mov	r1, r2
 80114be:	f7ff bc49 	b.w	8010d54 <_malloc_r>
 80114c2:	b92a      	cbnz	r2, 80114d0 <_realloc_r+0x24>
 80114c4:	f7ff fbda 	bl	8010c7c <_free_r>
 80114c8:	4625      	mov	r5, r4
 80114ca:	4628      	mov	r0, r5
 80114cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114d0:	f000 f81b 	bl	801150a <_malloc_usable_size_r>
 80114d4:	4284      	cmp	r4, r0
 80114d6:	4607      	mov	r7, r0
 80114d8:	d802      	bhi.n	80114e0 <_realloc_r+0x34>
 80114da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80114de:	d812      	bhi.n	8011506 <_realloc_r+0x5a>
 80114e0:	4621      	mov	r1, r4
 80114e2:	4640      	mov	r0, r8
 80114e4:	f7ff fc36 	bl	8010d54 <_malloc_r>
 80114e8:	4605      	mov	r5, r0
 80114ea:	2800      	cmp	r0, #0
 80114ec:	d0ed      	beq.n	80114ca <_realloc_r+0x1e>
 80114ee:	42bc      	cmp	r4, r7
 80114f0:	4622      	mov	r2, r4
 80114f2:	4631      	mov	r1, r6
 80114f4:	bf28      	it	cs
 80114f6:	463a      	movcs	r2, r7
 80114f8:	f7ff ffca 	bl	8011490 <memcpy>
 80114fc:	4631      	mov	r1, r6
 80114fe:	4640      	mov	r0, r8
 8011500:	f7ff fbbc 	bl	8010c7c <_free_r>
 8011504:	e7e1      	b.n	80114ca <_realloc_r+0x1e>
 8011506:	4635      	mov	r5, r6
 8011508:	e7df      	b.n	80114ca <_realloc_r+0x1e>

0801150a <_malloc_usable_size_r>:
 801150a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801150e:	1f18      	subs	r0, r3, #4
 8011510:	2b00      	cmp	r3, #0
 8011512:	bfbc      	itt	lt
 8011514:	580b      	ldrlt	r3, [r1, r0]
 8011516:	18c0      	addlt	r0, r0, r3
 8011518:	4770      	bx	lr
	...

0801151c <_init>:
 801151c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801151e:	bf00      	nop
 8011520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011522:	bc08      	pop	{r3}
 8011524:	469e      	mov	lr, r3
 8011526:	4770      	bx	lr

08011528 <_fini>:
 8011528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801152a:	bf00      	nop
 801152c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801152e:	bc08      	pop	{r3}
 8011530:	469e      	mov	lr, r3
 8011532:	4770      	bx	lr
