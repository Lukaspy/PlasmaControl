
PlasmaDriver_NucleoH723ZG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013ff4  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d18  080142c8  080142c8  000152c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014fe0  08014fe0  00015fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014fe8  08014fe8  00015fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08014fec  08014fec  00015fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000210  24000000  08014ff0  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000210  08015200  00016210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000270  08015260  00016270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f3c  240002d0  080152c0  000162d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400120c  080152c0  0001720c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000162d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024220  00000000  00000000  000162fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b28  00000000  00000000  0003a51e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ba0  00000000  00000000  0003e048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001598  00000000  00000000  0003fbe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003804d  00000000  00000000  00041180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000224a6  00000000  00000000  000791cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016e0df  00000000  00000000  0009b673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00209752  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008894  00000000  00000000  00209798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0021202c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002d0 	.word	0x240002d0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080142ac 	.word	0x080142ac

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002d4 	.word	0x240002d4
 800030c:	080142ac 	.word	0x080142ac

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <writeConfigFlash>:
// Prototypes
void measureVoltagesTemperaturesADC3(void);

// Write configuration to flash
static uint32_t writeConfigFlash(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
	uint32_t faultySector;	//Contains error code for faulty sector
	uint32_t error_code = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]

	// Unlock Flash
	HAL_FLASH_Unlock();
 80006ba:	f009 ff45 	bl	800a548 <HAL_FLASH_Unlock>

	// Erase flash sector 7
	if (HAL_FLASHEx_Erase(&sFlashErase, &faultySector) == HAL_OK)
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	4619      	mov	r1, r3
 80006c2:	4815      	ldr	r0, [pc, #84]	@ (8000718 <writeConfigFlash+0x68>)
 80006c4:	f009 ffdc 	bl	800a680 <HAL_FLASHEx_Erase>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d119      	bne.n	8000702 <writeConfigFlash+0x52>
	{
		for (uint32_t offset = 0; offset < sizeof(sFlashConfig); offset += FLASH_WORD)
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	e012      	b.n	80006fa <writeConfigFlash+0x4a>
		{
			// Program one flash word (8*4 bytes)
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, FLASH_SECTOR7_START_ADDR + offset, ((uint32_t) &sFlashConfig) + offset) != HAL_OK)
 80006d4:	68ba      	ldr	r2, [r7, #8]
 80006d6:	4b11      	ldr	r3, [pc, #68]	@ (800071c <writeConfigFlash+0x6c>)
 80006d8:	4413      	add	r3, r2
 80006da:	4911      	ldr	r1, [pc, #68]	@ (8000720 <writeConfigFlash+0x70>)
 80006dc:	68ba      	ldr	r2, [r7, #8]
 80006de:	440a      	add	r2, r1
 80006e0:	4619      	mov	r1, r3
 80006e2:	2001      	movs	r0, #1
 80006e4:	f009 fec2 	bl	800a46c <HAL_FLASH_Program>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d002      	beq.n	80006f4 <writeConfigFlash+0x44>
			{
				// Error during flash write
				error_code = HAL_FLASH_GetError();
 80006ee:	f009 ff65 	bl	800a5bc <HAL_FLASH_GetError>
 80006f2:	60f8      	str	r0, [r7, #12]
		for (uint32_t offset = 0; offset < sizeof(sFlashConfig); offset += FLASH_WORD)
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	3320      	adds	r3, #32
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d0e9      	beq.n	80006d4 <writeConfigFlash+0x24>
 8000700:	e002      	b.n	8000708 <writeConfigFlash+0x58>
			}
		}
	}
	else
	{
		error_code = HAL_FLASH_GetError();
 8000702:	f009 ff5b 	bl	800a5bc <HAL_FLASH_GetError>
 8000706:	60f8      	str	r0, [r7, #12]
	}

	  // Lock Flash
	  HAL_FLASH_Lock();
 8000708:	f009 ff40 	bl	800a58c <HAL_FLASH_Lock>

	  return error_code;
 800070c:	68fb      	ldr	r3, [r7, #12]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	24000024 	.word	0x24000024
 800071c:	080e0000 	.word	0x080e0000
 8000720:	24000a44 	.word	0x24000a44

08000724 <readConfigFlash>:

// Read configuration from flash
static void readConfigFlash(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
	// Read configuration from flash
	memcpy(&sFlashConfig, (void *) FLASH_SECTOR7_START_ADDR, sizeof(sFlashConfig));
 8000728:	4b04      	ldr	r3, [pc, #16]	@ (800073c <readConfigFlash+0x18>)
 800072a:	781a      	ldrb	r2, [r3, #0]
 800072c:	4b04      	ldr	r3, [pc, #16]	@ (8000740 <readConfigFlash+0x1c>)
 800072e:	701a      	strb	r2, [r3, #0]
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	080e0000 	.word	0x080e0000
 8000740:	24000a44 	.word	0x24000a44

08000744 <printCR>:

// Print CR
static void printCR(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, (uint8_t *) "\n\r", 2, 1000);
 8000748:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800074c:	2202      	movs	r2, #2
 800074e:	4903      	ldr	r1, [pc, #12]	@ (800075c <printCR+0x18>)
 8000750:	4803      	ldr	r0, [pc, #12]	@ (8000760 <printCR+0x1c>)
 8000752:	f00f fc18 	bl	800ff86 <HAL_UART_Transmit>
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	080142c8 	.word	0x080142c8
 8000760:	24000e34 	.word	0x24000e34

08000764 <printString>:

// Print string on UART3
static void printString(char *str)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) str, strlen(str), 1000);
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff fe1f 	bl	80003b0 <strlen>
 8000772:	4603      	mov	r3, r0
 8000774:	b29a      	uxth	r2, r3
 8000776:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800077a:	6879      	ldr	r1, [r7, #4]
 800077c:	4803      	ldr	r0, [pc, #12]	@ (800078c <printString+0x28>)
 800077e:	f00f fc02 	bl	800ff86 <HAL_UART_Transmit>
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	24000e34 	.word	0x24000e34

08000790 <printConfigFlash>:

// Print configuration on UART3
static void printConfigFlash(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	printString("\n\rCurrent configuration:");
 8000794:	480e      	ldr	r0, [pc, #56]	@ (80007d0 <printConfigFlash+0x40>)
 8000796:	f7ff ffe5 	bl	8000764 <printString>
	printString("\n\r  Mode = ");
 800079a:	480e      	ldr	r0, [pc, #56]	@ (80007d4 <printConfigFlash+0x44>)
 800079c:	f7ff ffe2 	bl	8000764 <printString>
	if (sFlashConfig.mode == TEST_MODE)
 80007a0:	4b0d      	ldr	r3, [pc, #52]	@ (80007d8 <printConfigFlash+0x48>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d103      	bne.n	80007b0 <printConfigFlash+0x20>
		printString("TEST");
 80007a8:	480c      	ldr	r0, [pc, #48]	@ (80007dc <printConfigFlash+0x4c>)
 80007aa:	f7ff ffdb 	bl	8000764 <printString>
 80007ae:	e00a      	b.n	80007c6 <printConfigFlash+0x36>
	else if (sFlashConfig.mode == RUN_MODE)
 80007b0:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <printConfigFlash+0x48>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d103      	bne.n	80007c0 <printConfigFlash+0x30>
		printString("RUN");
 80007b8:	4809      	ldr	r0, [pc, #36]	@ (80007e0 <printConfigFlash+0x50>)
 80007ba:	f7ff ffd3 	bl	8000764 <printString>
 80007be:	e002      	b.n	80007c6 <printConfigFlash+0x36>
	else
		printString("UNKNOWN");
 80007c0:	4808      	ldr	r0, [pc, #32]	@ (80007e4 <printConfigFlash+0x54>)
 80007c2:	f7ff ffcf 	bl	8000764 <printString>
	printCR();
 80007c6:	f7ff ffbd 	bl	8000744 <printCR>
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	080142cc 	.word	0x080142cc
 80007d4:	080142e8 	.word	0x080142e8
 80007d8:	24000a44 	.word	0x24000a44
 80007dc:	080142f4 	.word	0x080142f4
 80007e0:	080142fc 	.word	0x080142fc
 80007e4:	08014300 	.word	0x08014300

080007e8 <printNumber>:

// Print 16bit unsigned integer on UART3
static void printNumber(const char *text, uint16_t number, uint8_t CR)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b09e      	sub	sp, #120	@ 0x78
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	460b      	mov	r3, r1
 80007f2:	807b      	strh	r3, [r7, #2]
 80007f4:	4613      	mov	r3, r2
 80007f6:	707b      	strb	r3, [r7, #1]
	char s_output[100];
	char s_number[7];
	strcpy(s_output, text);
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	6879      	ldr	r1, [r7, #4]
 80007fe:	4618      	mov	r0, r3
 8000800:	f011 fd71 	bl	80122e6 <strcpy>
	itoa(number, s_number, 10);
 8000804:	887b      	ldrh	r3, [r7, #2]
 8000806:	f107 010c 	add.w	r1, r7, #12
 800080a:	220a      	movs	r2, #10
 800080c:	4618      	mov	r0, r3
 800080e:	f010 feb7 	bl	8011580 <itoa>
	strcat(s_output, s_number);
 8000812:	f107 020c 	add.w	r2, r7, #12
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4611      	mov	r1, r2
 800081c:	4618      	mov	r0, r3
 800081e:	f011 fcdc 	bl	80121da <strcat>
	if (CR)
 8000822:	787b      	ldrb	r3, [r7, #1]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d00e      	beq.n	8000846 <printNumber+0x5e>
	{
		strcat(s_output, "\n\r");
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff fdbf 	bl	80003b0 <strlen>
 8000832:	4603      	mov	r3, r0
 8000834:	461a      	mov	r2, r3
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4413      	add	r3, r2
 800083c:	4a0b      	ldr	r2, [pc, #44]	@ (800086c <printNumber+0x84>)
 800083e:	8811      	ldrh	r1, [r2, #0]
 8000840:	7892      	ldrb	r2, [r2, #2]
 8000842:	8019      	strh	r1, [r3, #0]
 8000844:	709a      	strb	r2, [r3, #2]
	}
	HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff fdb0 	bl	80003b0 <strlen>
 8000850:	4603      	mov	r3, r0
 8000852:	b29a      	uxth	r2, r3
 8000854:	f107 0114 	add.w	r1, r7, #20
 8000858:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800085c:	4804      	ldr	r0, [pc, #16]	@ (8000870 <printNumber+0x88>)
 800085e:	f00f fb92 	bl	800ff86 <HAL_UART_Transmit>
}
 8000862:	bf00      	nop
 8000864:	3778      	adds	r7, #120	@ 0x78
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	080142c8 	.word	0x080142c8
 8000870:	24000e34 	.word	0x24000e34

08000874 <printHALErrorStatus>:

// Print HAL error status on UART3
static void	printHALErrorStatus(HAL_StatusTypeDef HALresp, const char *text)
{
 8000874:	b5b0      	push	{r4, r5, r7, lr}
 8000876:	b09c      	sub	sp, #112	@ 0x70
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	6039      	str	r1, [r7, #0]
 800087e:	71fb      	strb	r3, [r7, #7]
	char s_output[100];

	switch (HALresp)
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	2b03      	cmp	r3, #3
 8000884:	d828      	bhi.n	80008d8 <printHALErrorStatus+0x64>
 8000886:	a201      	add	r2, pc, #4	@ (adr r2, 800088c <printHALErrorStatus+0x18>)
 8000888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800088c:	080008d9 	.word	0x080008d9
 8000890:	0800089d 	.word	0x0800089d
 8000894:	080008b1 	.word	0x080008b1
 8000898:	080008c5 	.word	0x080008c5
	{
		case HAL_ERROR:
			strcpy(s_output, "** HAL ERROR **: ");
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	4a15      	ldr	r2, [pc, #84]	@ (80008f8 <printHALErrorStatus+0x84>)
 80008a2:	461c      	mov	r4, r3
 80008a4:	4615      	mov	r5, r2
 80008a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008aa:	682b      	ldr	r3, [r5, #0]
 80008ac:	8023      	strh	r3, [r4, #0]
		break;
 80008ae:	e013      	b.n	80008d8 <printHALErrorStatus+0x64>

		case HAL_BUSY:
			strcpy(s_output, "** HAL BUSY **: ");
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	4a11      	ldr	r2, [pc, #68]	@ (80008fc <printHALErrorStatus+0x88>)
 80008b6:	461c      	mov	r4, r3
 80008b8:	4615      	mov	r5, r2
 80008ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008be:	682b      	ldr	r3, [r5, #0]
 80008c0:	7023      	strb	r3, [r4, #0]
		break;
 80008c2:	e009      	b.n	80008d8 <printHALErrorStatus+0x64>

		case HAL_TIMEOUT:
			strcpy(s_output, "** HAL TIMEOUT **: ");
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000900 <printHALErrorStatus+0x8c>)
 80008ca:	461c      	mov	r4, r3
 80008cc:	4615      	mov	r5, r2
 80008ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008d2:	682b      	ldr	r3, [r5, #0]
 80008d4:	6023      	str	r3, [r4, #0]
		break;
 80008d6:	bf00      	nop

		case HAL_OK:
		break;
	}
	strcat(s_output, text);
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	6839      	ldr	r1, [r7, #0]
 80008de:	4618      	mov	r0, r3
 80008e0:	f011 fc7b 	bl	80121da <strcat>
	printString(s_output);
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff3b 	bl	8000764 <printString>
}
 80008ee:	bf00      	nop
 80008f0:	3770      	adds	r7, #112	@ 0x70
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bdb0      	pop	{r4, r5, r7, pc}
 80008f6:	bf00      	nop
 80008f8:	08014308 	.word	0x08014308
 80008fc:	0801431c 	.word	0x0801431c
 8000900:	08014330 	.word	0x08014330

08000904 <stopHbridge>:

void stopHbridge(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]

	//Stop TIMER 1 PWM & interrupts
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);  //This will stop channel PWM1
 8000918:	2100      	movs	r1, #0
 800091a:	480f      	ldr	r0, [pc, #60]	@ (8000958 <stopHbridge+0x54>)
 800091c:	f00d ff48 	bl	800e7b0 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); //This will stop channel PWM1N
 8000920:	2100      	movs	r1, #0
 8000922:	480d      	ldr	r0, [pc, #52]	@ (8000958 <stopHbridge+0x54>)
 8000924:	f00f f920 	bl	800fb68 <HAL_TIMEx_PWMN_Stop>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, TIM1_CH1N_Pin|TIM1_CH1_Pin, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800092e:	480b      	ldr	r0, [pc, #44]	@ (800095c <stopHbridge+0x58>)
 8000930:	f00a f93a 	bl	800aba8 <HAL_GPIO_WritePin>
	/*Configure GPIO pins : LED_GREEN_Pin LINE_DRIVER1_ENABLE_Pin LINE_DRIVER2_ENABLE_Pin LED_RED_Pin */
	GPIO_InitStruct.Pin = TIM1_CH1N_Pin|TIM1_CH1_Pin;
 8000934:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000938:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	4619      	mov	r1, r3
 800094a:	4804      	ldr	r0, [pc, #16]	@ (800095c <stopHbridge+0x58>)
 800094c:	f009 ff6c 	bl	800a828 <HAL_GPIO_Init>

}
 8000950:	bf00      	nop
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	24000ec8 	.word	0x24000ec8
 800095c:	58021000 	.word	0x58021000

08000960 <printHbridgeData>:

// Print H-bridge data on UART3
static void printHbridgeData(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b09c      	sub	sp, #112	@ 0x70
 8000964:	af02      	add	r7, sp, #8
	char s_output[100];
	sprintf(s_output, "\n\rH-bridge 1=On 0=Off: %u, Frequency: %u (Hz), Dead time: %u (%%)\n\r", sHbridge.on, sHbridge.frequency, sHbridge.deadtime);
 8000966:	4b0f      	ldr	r3, [pc, #60]	@ (80009a4 <printHbridgeData+0x44>)
 8000968:	881b      	ldrh	r3, [r3, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	4b0d      	ldr	r3, [pc, #52]	@ (80009a4 <printHbridgeData+0x44>)
 800096e:	885b      	ldrh	r3, [r3, #2]
 8000970:	4619      	mov	r1, r3
 8000972:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <printHbridgeData+0x44>)
 8000974:	889b      	ldrh	r3, [r3, #4]
 8000976:	1d38      	adds	r0, r7, #4
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	460b      	mov	r3, r1
 800097c:	490a      	ldr	r1, [pc, #40]	@ (80009a8 <printHbridgeData+0x48>)
 800097e:	f011 fbc1 	bl	8012104 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff fd13 	bl	80003b0 <strlen>
 800098a:	4603      	mov	r3, r0
 800098c:	b29a      	uxth	r2, r3
 800098e:	1d39      	adds	r1, r7, #4
 8000990:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000994:	4805      	ldr	r0, [pc, #20]	@ (80009ac <printHbridgeData+0x4c>)
 8000996:	f00f faf6 	bl	800ff86 <HAL_UART_Transmit>
}
 800099a:	bf00      	nop
 800099c:	3768      	adds	r7, #104	@ 0x68
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	2400001c 	.word	0x2400001c
 80009a8:	08014344 	.word	0x08014344
 80009ac:	24000e34 	.word	0x24000e34

080009b0 <programHbridge>:



// Program TIMER 1 controlling the H-bridge
static void programHbridge()
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b0a6      	sub	sp, #152	@ 0x98
 80009b4:	af00      	add	r7, sp, #0
	uint8_t DT, DTG;
	float tDTS = 1E6/((float) TIMER_BASE_CLOCK);  //Minimum step in usec
 80009b6:	4b90      	ldr	r3, [pc, #576]	@ (8000bf8 <programHbridge+0x248>)
 80009b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	// TIMER 1 has already been initialized using HAL.
	// Program the H-bridge TIMER 1 - Clock TIMER_BASE_CLOCK

	// Calculate the period and duty cycle based on the frequency requested.
	timARR_f = ((float) TIMER_BASE_CLOCK) / ((float) sHbridge.frequency);
 80009bc:	4b8f      	ldr	r3, [pc, #572]	@ (8000bfc <programHbridge+0x24c>)
 80009be:	885b      	ldrh	r3, [r3, #2]
 80009c0:	ee07 3a90 	vmov	s15, r3
 80009c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009c8:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8000c00 <programHbridge+0x250>
 80009cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009d0:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
	timARR = (uint32_t) (timARR_f + 0.5);							// Set period counter
 80009d4:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80009d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009dc:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 80009e0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80009e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80009e8:	ee17 3a90 	vmov	r3, s15
 80009ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	timCCR1 = timARR / 2;  											// 50% duty cycle
 80009f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80009f4:	085b      	lsrs	r3, r3, #1
 80009f6:	67fb      	str	r3, [r7, #124]	@ 0x7c

	// Print out the set frequency
	if (debug == 1)
 80009f8:	4b82      	ldr	r3, [pc, #520]	@ (8000c04 <programHbridge+0x254>)
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d105      	bne.n	8000a0c <programHbridge+0x5c>
	{
		value_int = ((uint32_t) TIMER_BASE_CLOCK) / timARR;
 8000a00:	4a81      	ldr	r2, [pc, #516]	@ (8000c08 <programHbridge+0x258>)
 8000a02:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0a:	67bb      	str	r3, [r7, #120]	@ 0x78
	//  DTG[7:5] = 10x => DT = (64 + DTG[5:0]) x tDTG with tDTG =2xtDTS.	 max (64 + 63)*2*tDTS  	: 3.7236 usec - 7.3890 usec
	//  DTG[7:5] = 110 => DT = (32 + DTG[4:0]) x tDTG with tDTG =8xtDTS.     max (32 + 31)*8*tDTS   : 7.4472 usec - 14.662 usec
	//  DTG[7:5] = 111 => DT = (32 + DTG[4:0]) x tDTG with tDTG = 16 x tDTS. max (32 + 31)*16*tDTS 	: 14.895 usec - 29.324 usec

	// Calculate dead time in usec
	req_dtime_us = (((float) sHbridge.deadtime))*(10000./(float) sHbridge.frequency);
 8000a0c:	4b7b      	ldr	r3, [pc, #492]	@ (8000bfc <programHbridge+0x24c>)
 8000a0e:	889b      	ldrh	r3, [r3, #4]
 8000a10:	ee07 3a90 	vmov	s15, r3
 8000a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a18:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000a1c:	4b77      	ldr	r3, [pc, #476]	@ (8000bfc <programHbridge+0x24c>)
 8000a1e:	885b      	ldrh	r3, [r3, #2]
 8000a20:	ee07 3a90 	vmov	s15, r3
 8000a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a28:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000a2c:	ed9f 4b70 	vldr	d4, [pc, #448]	@ 8000bf0 <programHbridge+0x240>
 8000a30:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000a34:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000a38:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a3c:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
		printString(s_output);
	}
*/

	// Minimum allowed dead time is 1 usec.
	if (req_dtime_us < 1.0)
 8000a40:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8000a44:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000a48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a50:	d503      	bpl.n	8000a5a <programHbridge+0xaa>
		req_dtime_us = 1.0;
 8000a52:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000a56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	if (req_dtime_us <= 127*tDTS) //3.6946
 8000a5a:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000a5e:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8000c0c <programHbridge+0x25c>
 8000a62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a66:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000a6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a72:	d81e      	bhi.n	8000ab2 <programHbridge+0x102>
	{
		DT = (uint8_t) (req_dtime_us/tDTS + 0.5);
 8000a74:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000a78:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000a7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a84:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000a88:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000a8c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a90:	edc7 7a01 	vstr	s15, [r7, #4]
 8000a94:	793b      	ldrb	r3, [r7, #4]
 8000a96:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 127)
 8000a9a:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	da02      	bge.n	8000aa8 <programHbridge+0xf8>
			DT = 127;
 8000aa2:	237f      	movs	r3, #127	@ 0x7f
 8000aa4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT;
 8000aa8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000aac:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000ab0:	e0bb      	b.n	8000c2a <programHbridge+0x27a>
	}
	else if (req_dtime_us <= 127*2*tDTS) //7.3890
 8000ab2:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000ab6:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8000c10 <programHbridge+0x260>
 8000aba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000abe:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000ac2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aca:	d825      	bhi.n	8000b18 <programHbridge+0x168>
	{
		DT = (uint8_t) ((req_dtime_us/(2*tDTS)) - 64 + 0.5);
 8000acc:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000ad0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000ad4:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000ad8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000adc:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8000c14 <programHbridge+0x264>
 8000ae0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ae4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ae8:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000aec:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000af0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000af4:	edc7 7a01 	vstr	s15, [r7, #4]
 8000af8:	793b      	ldrb	r3, [r7, #4]
 8000afa:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 63)
 8000afe:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000b02:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b04:	d902      	bls.n	8000b0c <programHbridge+0x15c>
			DT = 63;
 8000b06:	233f      	movs	r3, #63	@ 0x3f
 8000b08:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT + 0x80;
 8000b0c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000b10:	3b80      	subs	r3, #128	@ 0x80
 8000b12:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000b16:	e088      	b.n	8000c2a <programHbridge+0x27a>
	}
	else if (req_dtime_us <= 63*8*tDTS) //14.662
 8000b18:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000b1c:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8000c18 <programHbridge+0x268>
 8000b20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b24:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000b28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b30:	d827      	bhi.n	8000b82 <programHbridge+0x1d2>
	{
		DT = (uint8_t) ((req_dtime_us/(8*tDTS)) - 32 + 0.5);
 8000b32:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000b36:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8000b3a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b3e:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000b42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b46:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8000c1c <programHbridge+0x26c>
 8000b4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b4e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b52:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000b56:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b5a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b5e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000b62:	793b      	ldrb	r3, [r7, #4]
 8000b64:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 31)
 8000b68:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000b6c:	2b1f      	cmp	r3, #31
 8000b6e:	d902      	bls.n	8000b76 <programHbridge+0x1c6>
			DT = 31;
 8000b70:	231f      	movs	r3, #31
 8000b72:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT + 0xC0;
 8000b76:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000b7a:	3b40      	subs	r3, #64	@ 0x40
 8000b7c:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000b80:	e053      	b.n	8000c2a <programHbridge+0x27a>
	}
	else if (req_dtime_us <= 63*16*tDTS) //29.324
 8000b82:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000b86:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8000c20 <programHbridge+0x270>
 8000b8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b8e:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000b92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b9a:	d843      	bhi.n	8000c24 <programHbridge+0x274>
	{
		DT = (uint8_t) ((req_dtime_us/(16*tDTS)) - 32 + 0.5);
 8000b9c:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000ba0:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8000ba4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ba8:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000bac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bb0:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000c1c <programHbridge+0x26c>
 8000bb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000bb8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bbc:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000bc0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000bc4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000bc8:	edc7 7a01 	vstr	s15, [r7, #4]
 8000bcc:	793b      	ldrb	r3, [r7, #4]
 8000bce:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 31)
 8000bd2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000bd6:	2b1f      	cmp	r3, #31
 8000bd8:	d902      	bls.n	8000be0 <programHbridge+0x230>
			DT = 31;
 8000bda:	231f      	movs	r3, #31
 8000bdc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT + 0xE0;
 8000be0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000be4:	3b20      	subs	r3, #32
 8000be6:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000bea:	e01e      	b.n	8000c2a <programHbridge+0x27a>
 8000bec:	f3af 8000 	nop.w
 8000bf0:	00000000 	.word	0x00000000
 8000bf4:	40c38800 	.word	0x40c38800
 8000bf8:	3cee500f 	.word	0x3cee500f
 8000bfc:	2400001c 	.word	0x2400001c
 8000c00:	4c032156 	.word	0x4c032156
 8000c04:	24000000 	.word	0x24000000
 8000c08:	020c8558 	.word	0x020c8558
 8000c0c:	42fe0000 	.word	0x42fe0000
 8000c10:	437e0000 	.word	0x437e0000
 8000c14:	42800000 	.word	0x42800000
 8000c18:	43fc0000 	.word	0x43fc0000
 8000c1c:	42000000 	.word	0x42000000
 8000c20:	447c0000 	.word	0x447c0000
	}
	else
		DTG = 255;
 8000c24:	23ff      	movs	r3, #255	@ 0xff
 8000c26:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96

	uint32_t temp = TIM1->BDTR & 0xFFFFFF00;		//Mask out DTG
 8000c2a:	4b4e      	ldr	r3, [pc, #312]	@ (8000d64 <programHbridge+0x3b4>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000c32:	677b      	str	r3, [r7, #116]	@ 0x74
	timBDTR = temp | DTG;							//Add new DTG
 8000c34:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000c38:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	673b      	str	r3, [r7, #112]	@ 0x70

	//Change timer1 settings
	htim1.Init.Period = timARR;   // Updating internal structure for timer
 8000c3e:	4a4a      	ldr	r2, [pc, #296]	@ (8000d68 <programHbridge+0x3b8>)
 8000c40:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000c44:	60d3      	str	r3, [r2, #12]
	TIM1->ARR = timARR;			  // Update period
 8000c46:	4a47      	ldr	r2, [pc, #284]	@ (8000d64 <programHbridge+0x3b4>)
 8000c48:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000c4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM1->CCR1 = timCCR1;		  // Update duty cycle
 8000c4e:	4a45      	ldr	r2, [pc, #276]	@ (8000d64 <programHbridge+0x3b4>)
 8000c50:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000c52:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM1->BDTR = timBDTR;	      // Update dead time
 8000c54:	4a43      	ldr	r2, [pc, #268]	@ (8000d64 <programHbridge+0x3b4>)
 8000c56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000c58:	6453      	str	r3, [r2, #68]	@ 0x44

	if (debug == 1) {
 8000c5a:	4b44      	ldr	r3, [pc, #272]	@ (8000d6c <programHbridge+0x3bc>)
 8000c5c:	881b      	ldrh	r3, [r3, #0]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d160      	bne.n	8000d24 <programHbridge+0x374>
		//sprintf(s_output, "ARR %lu CCR1 %lu BDTR %lu", timARR, timCCR1, timBDTR & 0xFF);
		//printString(s_output);

		float calcDT = 0;
 8000c62:	f04f 0300 	mov.w	r3, #0
 8000c66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		//  DTG[7:5] = 0xx => DT = DTG[7:0] x tDTG with tDTG = tDTS.			 max 127*tDTS   		: 0.0000 usec - 3.6946 usec
		if ((DTG & 0x80) == 0) {
 8000c6a:	f997 3096 	ldrsb.w	r3, [r7, #150]	@ 0x96
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	db0b      	blt.n	8000c8a <programHbridge+0x2da>
			calcDT = DTG*tDTS;
 8000c72:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000c76:	ee07 3a90 	vmov	s15, r3
 8000c7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c7e:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c86:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		//  DTG[7:5] = 10x => DT = (64 + DTG[5:0]) x tDTG with tDTG =2xtDTS.	 max (64 + 63)*2*tDTS  	: 3.7236 usec - 7.3890 usec
		if ((DTG & 0xC0) == 0x80) {
 8000c8a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000c8e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000c92:	2b80      	cmp	r3, #128	@ 0x80
 8000c94:	d10f      	bne.n	8000cb6 <programHbridge+0x306>
			calcDT = (64 + (DTG & 0x3F))*2*tDTS;
 8000c96:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000c9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000c9e:	3340      	adds	r3, #64	@ 0x40
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	ee07 3a90 	vmov	s15, r3
 8000ca6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000caa:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cb2:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		//  DTG[7:5] = 110 => DT = (32 + DTG[4:0]) x tDTG with tDTG =8xtDTS.     max (32 + 31)*8*tDTS   : 7.4472 usec - 14.662 usec
		if ((DTG & 0xE0) == 0xC0) {
 8000cb6:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000cba:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000cbe:	2bc0      	cmp	r3, #192	@ 0xc0
 8000cc0:	d10f      	bne.n	8000ce2 <programHbridge+0x332>
			calcDT = (32 + (DTG & 0x1F))*8*tDTS;
 8000cc2:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000cc6:	f003 031f 	and.w	r3, r3, #31
 8000cca:	3320      	adds	r3, #32
 8000ccc:	00db      	lsls	r3, r3, #3
 8000cce:	ee07 3a90 	vmov	s15, r3
 8000cd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cd6:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cde:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		//  DTG[7:5] = 111 => DT = (32 + DTG[4:0]) x tDTG with tDTG = 16 x tDTS. max (32 + 31)*16*tDTS 	: 14.895 usec - 29.324 usec
		if ((DTG & 0xE0) == 0xE0) {
 8000ce2:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000ce6:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000cea:	2be0      	cmp	r3, #224	@ 0xe0
 8000cec:	d10f      	bne.n	8000d0e <programHbridge+0x35e>
			calcDT = (32 + (DTG & 0x1F))*16*tDTS;
 8000cee:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000cf2:	f003 031f 	and.w	r3, r3, #31
 8000cf6:	3320      	adds	r3, #32
 8000cf8:	011b      	lsls	r3, r3, #4
 8000cfa:	ee07 3a90 	vmov	s15, r3
 8000cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d02:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d0a:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		value_int = (uint32_t) 1000*calcDT;
 8000d0e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8000d12:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000d70 <programHbridge+0x3c0>
 8000d16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d1e:	ee17 3a90 	vmov	r3, s15
 8000d22:	67bb      	str	r3, [r7, #120]	@ 0x78
		//sprintf(s_output, "\n\rSet dead time: %lu (ns)\n\r", value_int);
		//printString(s_output);
	}

	//Start driving the H-bridge
	if (sHbridge.on && (TIM_CHANNEL_STATE_GET(&htim1, TIM_CHANNEL_1) == HAL_TIM_CHANNEL_STATE_READY))
 8000d24:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <programHbridge+0x3c4>)
 8000d26:	881b      	ldrh	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d010      	beq.n	8000d4e <programHbridge+0x39e>
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d68 <programHbridge+0x3b8>)
 8000d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d10a      	bne.n	8000d4e <programHbridge+0x39e>
	{
		HAL_TIM_MspPostInit(&htim1);	//Setup GPIO for timer alternate function
 8000d38:	480b      	ldr	r0, [pc, #44]	@ (8000d68 <programHbridge+0x3b8>)
 8000d3a:	f003 fa19 	bl	8004170 <HAL_TIM_MspPostInit>
		//Start TIMER 1 PWM & interrupts
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  //This will start channel PWM1
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4809      	ldr	r0, [pc, #36]	@ (8000d68 <programHbridge+0x3b8>)
 8000d42:	f00d fc19 	bl	800e578 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); //This will start channel PWM1N
 8000d46:	2100      	movs	r1, #0
 8000d48:	4807      	ldr	r0, [pc, #28]	@ (8000d68 <programHbridge+0x3b8>)
 8000d4a:	f00e fe3d 	bl	800f9c8 <HAL_TIMEx_PWMN_Start>
	}

	//Stop driving the H-bridge
	if (!sHbridge.on)
 8000d4e:	4b09      	ldr	r3, [pc, #36]	@ (8000d74 <programHbridge+0x3c4>)
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d101      	bne.n	8000d5a <programHbridge+0x3aa>
	{
		stopHbridge();
 8000d56:	f7ff fdd5 	bl	8000904 <stopHbridge>
	}

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);

}
 8000d5a:	bf00      	nop
 8000d5c:	3798      	adds	r7, #152	@ 0x98
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40010000 	.word	0x40010000
 8000d68:	24000ec8 	.word	0x24000ec8
 8000d6c:	24000000 	.word	0x24000000
 8000d70:	447a0000 	.word	0x447a0000
 8000d74:	2400001c 	.word	0x2400001c

08000d78 <convertADC12data>:
#define ADC1_VplaL1			4	//Plasma voltage L1
#define ADC2_VplaL2			5	//Plasma voltage L2

//Convert ADC1 & ADC2 data to voltages and current
float convertADC12data(uint32_t item, char **text)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
	float result = 0;
 8000d82:	f04f 0300 	mov.w	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
* 3.3           *   (ADCData/65536.0)       *    1000
*   ^                   ^       ^                  ^
*   |                   |       |                  |
 * full scale V      Raw Data   Max ADC Value    Convert to mV
 */
	switch (item % (2*ADC12_NO_CHANNELS)) {
 8000d88:	6879      	ldr	r1, [r7, #4]
 8000d8a:	4ba3      	ldr	r3, [pc, #652]	@ (8001018 <convertADC12data+0x2a0>)
 8000d8c:	fba3 2301 	umull	r2, r3, r3, r1
 8000d90:	089a      	lsrs	r2, r3, #2
 8000d92:	4613      	mov	r3, r2
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	4413      	add	r3, r2
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	1aca      	subs	r2, r1, r3
 8000d9c:	2a05      	cmp	r2, #5
 8000d9e:	f200 8107 	bhi.w	8000fb0 <convertADC12data+0x238>
 8000da2:	a301      	add	r3, pc, #4	@ (adr r3, 8000da8 <convertADC12data+0x30>)
 8000da4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8000da8:	08000dc1 	.word	0x08000dc1
 8000dac:	08000de5 	.word	0x08000de5
 8000db0:	08000e51 	.word	0x08000e51
 8000db4:	08000e8d 	.word	0x08000e8d
 8000db8:	08000ec7 	.word	0x08000ec7
 8000dbc:	08000f31 	.word	0x08000f31
		case ADC1_TIM1_CH1:
			result = sADC.adc12_data[item];
 8000dc0:	4a96      	ldr	r2, [pc, #600]	@ (800101c <convertADC12data+0x2a4>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dc8:	ee07 3a90 	vmov	s15, r3
 8000dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dd0:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f000 80df 	beq.w	8000f9a <convertADC12data+0x222>
				*text ="ADC1_TIM1_CH1";
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	4a90      	ldr	r2, [pc, #576]	@ (8001020 <convertADC12data+0x2a8>)
 8000de0:	601a      	str	r2, [r3, #0]
			break;
 8000de2:	e0da      	b.n	8000f9a <convertADC12data+0x222>

		case ADC2_Is:
			V = 3.3*(((float) sADC.adc12_data[item])/65536.0)*1000;
 8000de4:	4a8d      	ldr	r2, [pc, #564]	@ (800101c <convertADC12data+0x2a4>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dec:	ee07 3a90 	vmov	s15, r3
 8000df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000df4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000df8:	ed9f 5b73 	vldr	d5, [pc, #460]	@ 8000fc8 <convertADC12data+0x250>
 8000dfc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e00:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8000fd0 <convertADC12data+0x258>
 8000e04:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e08:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8000fd8 <convertADC12data+0x260>
 8000e0c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e10:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e14:	edc7 7a02 	vstr	s15, [r7, #8]
			result =  2000*(V - 1.585714)/3.594286; //V;
 8000e18:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e1c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e20:	ed9f 6b6f 	vldr	d6, [pc, #444]	@ 8000fe0 <convertADC12data+0x268>
 8000e24:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e28:	ed9f 6b6f 	vldr	d6, [pc, #444]	@ 8000fe8 <convertADC12data+0x270>
 8000e2c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000e30:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8000ff0 <convertADC12data+0x278>
 8000e34:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e38:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e3c:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f000 80ab 	beq.w	8000f9e <convertADC12data+0x226>
				*text ="ADC2_Is(mA)";
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	4a76      	ldr	r2, [pc, #472]	@ (8001024 <convertADC12data+0x2ac>)
 8000e4c:	601a      	str	r2, [r3, #0]
			break;
 8000e4e:	e0a6      	b.n	8000f9e <convertADC12data+0x226>

		case ADC1_VbriS1:
			result =  1000*((12.0+2000.0)/12.0)*3.3*(((float) sADC.adc12_data[item])/65536.0); // 3.3*(((float) sADC.adc12_data[item])/65536.0)*1000;
 8000e50:	4a72      	ldr	r2, [pc, #456]	@ (800101c <convertADC12data+0x2a4>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e58:	ee07 3a90 	vmov	s15, r3
 8000e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e60:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e64:	ed9f 5b58 	vldr	d5, [pc, #352]	@ 8000fc8 <convertADC12data+0x250>
 8000e68:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e6c:	ed9f 6b62 	vldr	d6, [pc, #392]	@ 8000ff8 <convertADC12data+0x280>
 8000e70:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e74:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e78:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	f000 808f 	beq.w	8000fa2 <convertADC12data+0x22a>
				*text ="ADC1_VbriS1(mV)";
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	4a68      	ldr	r2, [pc, #416]	@ (8001028 <convertADC12data+0x2b0>)
 8000e88:	601a      	str	r2, [r3, #0]
			break;
 8000e8a:	e08a      	b.n	8000fa2 <convertADC12data+0x22a>

		case ADC2_VbriS2:
			result =  1000*((12.0+2000.0)/12.0)*3.3*(((float) sADC.adc12_data[item])/65536.0); //3.3*(((float) sADC.adc12_data[item])/65536.0) * 1000;
 8000e8c:	4a63      	ldr	r2, [pc, #396]	@ (800101c <convertADC12data+0x2a4>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e94:	ee07 3a90 	vmov	s15, r3
 8000e98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e9c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000ea0:	ed9f 5b49 	vldr	d5, [pc, #292]	@ 8000fc8 <convertADC12data+0x250>
 8000ea4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ea8:	ed9f 6b53 	vldr	d6, [pc, #332]	@ 8000ff8 <convertADC12data+0x280>
 8000eac:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000eb0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000eb4:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d073      	beq.n	8000fa6 <convertADC12data+0x22e>
				*text ="ADC2_VbriS2(mV)";
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	4a5a      	ldr	r2, [pc, #360]	@ (800102c <convertADC12data+0x2b4>)
 8000ec2:	601a      	str	r2, [r3, #0]
			break;
 8000ec4:	e06f      	b.n	8000fa6 <convertADC12data+0x22e>

		case ADC1_VplaL1:
			V = 3.3*(((float) sADC.adc12_data[item])/65536.0) * 1000;
 8000ec6:	4a55      	ldr	r2, [pc, #340]	@ (800101c <convertADC12data+0x2a4>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ece:	ee07 3a90 	vmov	s15, r3
 8000ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ed6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000eda:	ed9f 5b3b 	vldr	d5, [pc, #236]	@ 8000fc8 <convertADC12data+0x250>
 8000ede:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ee2:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 8000fd0 <convertADC12data+0x258>
 8000ee6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000eea:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 8000fd8 <convertADC12data+0x260>
 8000eee:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ef2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ef6:	edc7 7a02 	vstr	s15, [r7, #8]
			result =  1E6*(V-1.648348)/0.999; //V;//
 8000efa:	edd7 7a02 	vldr	s15, [r7, #8]
 8000efe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f02:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 8001000 <convertADC12data+0x288>
 8000f06:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f0a:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 8001008 <convertADC12data+0x290>
 8000f0e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f12:	ed9f 5b3f 	vldr	d5, [pc, #252]	@ 8001010 <convertADC12data+0x298>
 8000f16:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f1a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f1e:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d040      	beq.n	8000faa <convertADC12data+0x232>
				*text ="ADC1_VplaL1(mV)";
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	4a41      	ldr	r2, [pc, #260]	@ (8001030 <convertADC12data+0x2b8>)
 8000f2c:	601a      	str	r2, [r3, #0]
			break;
 8000f2e:	e03c      	b.n	8000faa <convertADC12data+0x232>

		case ADC2_VplaL2:
			//V is the directly measured voltage from the ADC in mV
			V = 3.3*(((float) sADC.adc12_data[item])/65536.0) * 1000;
 8000f30:	4a3a      	ldr	r2, [pc, #232]	@ (800101c <convertADC12data+0x2a4>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f38:	ee07 3a90 	vmov	s15, r3
 8000f3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f40:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000f44:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 8000fc8 <convertADC12data+0x250>
 8000f48:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f4c:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 8000fd0 <convertADC12data+0x258>
 8000f50:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f54:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 8000fd8 <convertADC12data+0x260>
 8000f58:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f5c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f60:	edc7 7a02 	vstr	s15, [r7, #8]
			//result is the True voltage at L2 (corrected for voltage divider)
			result =  1E6*(V-1.648348)/0.999;
 8000f64:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f6c:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8001000 <convertADC12data+0x288>
 8000f70:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f74:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8001008 <convertADC12data+0x290>
 8000f78:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f7c:	ed9f 5b24 	vldr	d5, [pc, #144]	@ 8001010 <convertADC12data+0x298>
 8000f80:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f84:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f88:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d00d      	beq.n	8000fae <convertADC12data+0x236>
				*text ="ADC2_VplaL2(mV)";
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	4a27      	ldr	r2, [pc, #156]	@ (8001034 <convertADC12data+0x2bc>)
 8000f96:	601a      	str	r2, [r3, #0]
			break;
 8000f98:	e009      	b.n	8000fae <convertADC12data+0x236>
			break;
 8000f9a:	bf00      	nop
 8000f9c:	e008      	b.n	8000fb0 <convertADC12data+0x238>
			break;
 8000f9e:	bf00      	nop
 8000fa0:	e006      	b.n	8000fb0 <convertADC12data+0x238>
			break;
 8000fa2:	bf00      	nop
 8000fa4:	e004      	b.n	8000fb0 <convertADC12data+0x238>
			break;
 8000fa6:	bf00      	nop
 8000fa8:	e002      	b.n	8000fb0 <convertADC12data+0x238>
			break;
 8000faa:	bf00      	nop
 8000fac:	e000      	b.n	8000fb0 <convertADC12data+0x238>
			break;
 8000fae:	bf00      	nop
	}

	return(result);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	ee07 3a90 	vmov	s15, r3
}
 8000fb6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	f3af 8000 	nop.w
 8000fc8:	00000000 	.word	0x00000000
 8000fcc:	40f00000 	.word	0x40f00000
 8000fd0:	66666666 	.word	0x66666666
 8000fd4:	400a6666 	.word	0x400a6666
 8000fd8:	00000000 	.word	0x00000000
 8000fdc:	408f4000 	.word	0x408f4000
 8000fe0:	a4acf313 	.word	0xa4acf313
 8000fe4:	3ff95f15 	.word	0x3ff95f15
 8000fe8:	00000000 	.word	0x00000000
 8000fec:	409f4000 	.word	0x409f4000
 8000ff0:	04b3c3e7 	.word	0x04b3c3e7
 8000ff4:	400cc119 	.word	0x400cc119
 8000ff8:	ffffffff 	.word	0xffffffff
 8000ffc:	4120e2a7 	.word	0x4120e2a7
 8001000:	2706d506 	.word	0x2706d506
 8001004:	3ffa5fa2 	.word	0x3ffa5fa2
 8001008:	00000000 	.word	0x00000000
 800100c:	412e8480 	.word	0x412e8480
 8001010:	d916872b 	.word	0xd916872b
 8001014:	3feff7ce 	.word	0x3feff7ce
 8001018:	aaaaaaab 	.word	0xaaaaaaab
 800101c:	24000330 	.word	0x24000330
 8001020:	08014388 	.word	0x08014388
 8001024:	08014398 	.word	0x08014398
 8001028:	080143a4 	.word	0x080143a4
 800102c:	080143b4 	.word	0x080143b4
 8001030:	080143c4 	.word	0x080143c4
 8001034:	080143d4 	.word	0x080143d4

08001038 <printADC12data>:

//Print measured ADC1 and ADC2 data on UART3
void printADC12data(void)
{
 8001038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800103a:	b0f7      	sub	sp, #476	@ 0x1dc
 800103c:	af10      	add	r7, sp, #64	@ 0x40
	char *p_text[2*ADC12_NO_CHANNELS];
	float result[2*ADC12_NO_CHANNELS];

	if (debug == 1)
 800103e:	4ba0      	ldr	r3, [pc, #640]	@ (80012c0 <printADC12data+0x288>)
 8001040:	881b      	ldrh	r3, [r3, #0]
 8001042:	2b01      	cmp	r3, #1
 8001044:	f040 8136 	bne.w	80012b4 <printADC12data+0x27c>
	{
		printCR();
 8001048:	f7ff fb7c 	bl	8000744 <printCR>
		printNumber("No data: ", sADC.nADC12Read, 1);
 800104c:	4b9d      	ldr	r3, [pc, #628]	@ (80012c4 <printADC12data+0x28c>)
 800104e:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 8001052:	b29b      	uxth	r3, r3
 8001054:	2201      	movs	r2, #1
 8001056:	4619      	mov	r1, r3
 8001058:	489b      	ldr	r0, [pc, #620]	@ (80012c8 <printADC12data+0x290>)
 800105a:	f7ff fbc5 	bl	80007e8 <printNumber>
		for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i++)
 800105e:	2300      	movs	r3, #0
 8001060:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8001064:	e119      	b.n	800129a <printADC12data+0x262>
		{
			int ii = i % (2*ADC12_NO_CHANNELS);
 8001066:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800106a:	4b98      	ldr	r3, [pc, #608]	@ (80012cc <printADC12data+0x294>)
 800106c:	fb83 3102 	smull	r3, r1, r3, r2
 8001070:	17d3      	asrs	r3, r2, #31
 8001072:	1ac9      	subs	r1, r1, r3
 8001074:	460b      	mov	r3, r1
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	440b      	add	r3, r1
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
			result[ii] = convertADC12data(i, &p_text[ii]);
 8001082:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 8001086:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 800108a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4413      	add	r3, r2
 8001092:	4619      	mov	r1, r3
 8001094:	f7ff fe70 	bl	8000d78 <convertADC12data>
 8001098:	eef0 7a40 	vmov.f32	s15, s0
 800109c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80010a6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80010aa:	4413      	add	r3, r2
 80010ac:	3b38      	subs	r3, #56	@ 0x38
 80010ae:	edc3 7a00 	vstr	s15, [r3]
			char text[300];
			if (ii == 5)
 80010b2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80010b6:	2b05      	cmp	r3, #5
 80010b8:	f040 80ea 	bne.w	8001290 <printADC12data+0x258>
			{
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80010bc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80010c0:	4a82      	ldr	r2, [pc, #520]	@ (80012cc <printADC12data+0x294>)
 80010c2:	fb82 1203 	smull	r1, r2, r2, r3
 80010c6:	17db      	asrs	r3, r3, #31
 80010c8:	eba2 0c03 	sub.w	ip, r2, r3
						p_text[ii-5],                     sADC.adc12_data[i-5],
 80010cc:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80010d0:	3b05      	subs	r3, #5
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80010d8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80010dc:	4413      	add	r3, r2
 80010de:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80010e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
						p_text[ii-5],                     sADC.adc12_data[i-5],
 80010e4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80010e8:	3b05      	subs	r3, #5
 80010ea:	4a76      	ldr	r2, [pc, #472]	@ (80012c4 <printADC12data+0x28c>)
 80010ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80010f0:	62bb      	str	r3, [r7, #40]	@ 0x28
						p_text[ii-4], (int) result[ii-4], sADC.adc12_data[i-4],
 80010f2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80010f6:	3b04      	subs	r3, #4
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 80010fe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001102:	18d3      	adds	r3, r2, r3
 8001104:	f853 5c20 	ldr.w	r5, [r3, #-32]
						p_text[ii-4], (int) result[ii-4], sADC.adc12_data[i-4],
 8001108:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800110c:	3b04      	subs	r3, #4
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 8001114:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001118:	18d3      	adds	r3, r2, r3
 800111a:	3b38      	subs	r3, #56	@ 0x38
 800111c:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001120:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001124:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
						p_text[ii-4], (int) result[ii-4], sADC.adc12_data[i-4],
 8001128:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800112c:	3b04      	subs	r3, #4
 800112e:	4a65      	ldr	r2, [pc, #404]	@ (80012c4 <printADC12data+0x28c>)
 8001130:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001134:	623b      	str	r3, [r7, #32]
						p_text[ii-3], (int) result[ii-3], sADC.adc12_data[i-3],
 8001136:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800113a:	3b03      	subs	r3, #3
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 8001142:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001146:	18d3      	adds	r3, r2, r3
 8001148:	f853 6c20 	ldr.w	r6, [r3, #-32]
						p_text[ii-3], (int) result[ii-3], sADC.adc12_data[i-3],
 800114c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001150:	3b03      	subs	r3, #3
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 8001158:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800115c:	18d3      	adds	r3, r2, r3
 800115e:	3b38      	subs	r3, #56	@ 0x38
 8001160:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001164:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001168:	edc7 7a07 	vstr	s15, [r7, #28]
						p_text[ii-3], (int) result[ii-3], sADC.adc12_data[i-3],
 800116c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001170:	3b03      	subs	r3, #3
 8001172:	4a54      	ldr	r2, [pc, #336]	@ (80012c4 <printADC12data+0x28c>)
 8001174:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001178:	61bb      	str	r3, [r7, #24]
						p_text[ii-2], (int) result[ii-2], sADC.adc12_data[i-2],
 800117a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800117e:	3b02      	subs	r3, #2
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 8001186:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800118a:	18d3      	adds	r3, r2, r3
 800118c:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8001190:	617a      	str	r2, [r7, #20]
						p_text[ii-2], (int) result[ii-2], sADC.adc12_data[i-2],
 8001192:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001196:	3b02      	subs	r3, #2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	f503 71b4 	add.w	r1, r3, #360	@ 0x168
 800119e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011a2:	18cb      	adds	r3, r1, r3
 80011a4:	3b38      	subs	r3, #56	@ 0x38
 80011a6:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ae:	edc7 7a04 	vstr	s15, [r7, #16]
						p_text[ii-2], (int) result[ii-2], sADC.adc12_data[i-2],
 80011b2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80011b6:	3b02      	subs	r3, #2
 80011b8:	4a42      	ldr	r2, [pc, #264]	@ (80012c4 <printADC12data+0x28c>)
 80011ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011be:	60fb      	str	r3, [r7, #12]
						p_text[ii-1], (int) result[ii-1], sADC.adc12_data[i-1],
 80011c0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80011c4:	3b01      	subs	r3, #1
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	f503 71b4 	add.w	r1, r3, #360	@ 0x168
 80011cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011d0:	18cb      	adds	r3, r1, r3
 80011d2:	f853 1c20 	ldr.w	r1, [r3, #-32]
 80011d6:	60b9      	str	r1, [r7, #8]
						p_text[ii-1], (int) result[ii-1], sADC.adc12_data[i-1],
 80011d8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80011dc:	3b01      	subs	r3, #1
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	f503 70b4 	add.w	r0, r3, #360	@ 0x168
 80011e4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011e8:	18c3      	adds	r3, r0, r3
 80011ea:	3b38      	subs	r3, #56	@ 0x38
 80011ec:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011f4:	edc7 7a01 	vstr	s15, [r7, #4]
						p_text[ii-1], (int) result[ii-1], sADC.adc12_data[i-1],
 80011f8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80011fc:	1e5a      	subs	r2, r3, #1
 80011fe:	4b31      	ldr	r3, [pc, #196]	@ (80012c4 <printADC12data+0x28c>)
 8001200:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001204:	603b      	str	r3, [r7, #0]
 8001206:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	f503 70b4 	add.w	r0, r3, #360	@ 0x168
 8001210:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001214:	18c3      	adds	r3, r0, r3
 8001216:	f853 1c20 	ldr.w	r1, [r3, #-32]
						p_text[ii],   (int) result[ii],   sADC.adc12_data[i]);
 800121a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	f503 70b4 	add.w	r0, r3, #360	@ 0x168
 8001224:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001228:	18c3      	adds	r3, r0, r3
 800122a:	3b38      	subs	r3, #56	@ 0x38
 800122c:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001230:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001234:	ee17 4a90 	vmov	r4, s15
						p_text[ii],   (int) result[ii],   sADC.adc12_data[i]);
 8001238:	4a22      	ldr	r2, [pc, #136]	@ (80012c4 <printADC12data+0x28c>)
 800123a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800123e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001242:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8001246:	930f      	str	r3, [sp, #60]	@ 0x3c
 8001248:	940e      	str	r4, [sp, #56]	@ 0x38
 800124a:	910d      	str	r1, [sp, #52]	@ 0x34
 800124c:	683c      	ldr	r4, [r7, #0]
 800124e:	940c      	str	r4, [sp, #48]	@ 0x30
 8001250:	687c      	ldr	r4, [r7, #4]
 8001252:	940b      	str	r4, [sp, #44]	@ 0x2c
 8001254:	68b9      	ldr	r1, [r7, #8]
 8001256:	910a      	str	r1, [sp, #40]	@ 0x28
 8001258:	68f9      	ldr	r1, [r7, #12]
 800125a:	9109      	str	r1, [sp, #36]	@ 0x24
 800125c:	6939      	ldr	r1, [r7, #16]
 800125e:	9108      	str	r1, [sp, #32]
 8001260:	697a      	ldr	r2, [r7, #20]
 8001262:	9207      	str	r2, [sp, #28]
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	9206      	str	r2, [sp, #24]
 8001268:	69fa      	ldr	r2, [r7, #28]
 800126a:	9205      	str	r2, [sp, #20]
 800126c:	9604      	str	r6, [sp, #16]
 800126e:	6a3a      	ldr	r2, [r7, #32]
 8001270:	9203      	str	r2, [sp, #12]
 8001272:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001274:	9202      	str	r2, [sp, #8]
 8001276:	9501      	str	r5, [sp, #4]
 8001278:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800127a:	9200      	str	r2, [sp, #0]
 800127c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800127e:	4662      	mov	r2, ip
 8001280:	4913      	ldr	r1, [pc, #76]	@ (80012d0 <printADC12data+0x298>)
 8001282:	f010 ff3f 	bl	8012104 <siprintf>
				printString(text);
 8001286:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fa6a 	bl	8000764 <printString>
		for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i++)
 8001290:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001294:	3301      	adds	r3, #1
 8001296:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 800129a:	4b0a      	ldr	r3, [pc, #40]	@ (80012c4 <printADC12data+0x28c>)
 800129c:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 80012a0:	4613      	mov	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4413      	add	r3, r2
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	461a      	mov	r2, r3
 80012aa:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80012ae:	429a      	cmp	r2, r3
 80012b0:	f63f aed9 	bhi.w	8001066 <printADC12data+0x2e>
			}
		}
	}
}
 80012b4:	bf00      	nop
 80012b6:	f507 77ce 	add.w	r7, r7, #412	@ 0x19c
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012be:	bf00      	nop
 80012c0:	24000000 	.word	0x24000000
 80012c4:	24000330 	.word	0x24000330
 80012c8:	080143e4 	.word	0x080143e4
 80012cc:	2aaaaaab 	.word	0x2aaaaaab
 80012d0:	080143f0 	.word	0x080143f0

080012d4 <freqCorrection>:

//Calculate frequency correction
//Returns 1 if a valid frequency correction is calculated, otherwise 0
uint8_t freqCorrection(int16_t *freqCorr)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08e      	sub	sp, #56	@ 0x38
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	int start_index=0;
 80012dc:	2300      	movs	r3, #0
 80012de:	637b      	str	r3, [r7, #52]	@ 0x34
	int stop_index=0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	633b      	str	r3, [r7, #48]	@ 0x30
	int number_of_lows=0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
	int lowDetected = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int highDetected = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	62bb      	str	r3, [r7, #40]	@ 0x28
	float min = 100000;
 80012f0:	4b54      	ldr	r3, [pc, #336]	@ (8001444 <freqCorrection+0x170>)
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24
	float max = -100000;
 80012f4:	4b54      	ldr	r3, [pc, #336]	@ (8001448 <freqCorrection+0x174>)
 80012f6:	623b      	str	r3, [r7, #32]
	float norm = 0;
 80012f8:	f04f 0300 	mov.w	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]

	//Find when MOSFET branch is on (start and stop time)
	//Find minimum and maximum value of bridge current
 	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]
 8001302:	e041      	b.n	8001388 <freqCorrection+0xb4>
	{
		// Find minimum of bridge current
		float data = convertADC12data(i+ADC2_Is, NULL);
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	3301      	adds	r3, #1
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fd34 	bl	8000d78 <convertADC12data>
 8001310:	ed87 0a02 	vstr	s0, [r7, #8]
		if (data < min)
 8001314:	ed97 7a02 	vldr	s14, [r7, #8]
 8001318:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800131c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001324:	d501      	bpl.n	800132a <freqCorrection+0x56>
		{
			min = data;
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	627b      	str	r3, [r7, #36]	@ 0x24
			//HAL_UART_Transmit(huart3, min);
			//printCR();
		}
		// Find maximum
		if (data > max)
 800132a:	ed97 7a02 	vldr	s14, [r7, #8]
 800132e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001332:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133a:	dd01      	ble.n	8001340 <freqCorrection+0x6c>
		{
			max = data;
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	623b      	str	r3, [r7, #32]
		}
		// Check for low
		if (!lowDetected && sADC.adc12_data[i+ADC1_TIM1_CH1] < 500)
 8001340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001342:	2b00      	cmp	r3, #0
 8001344:	d10a      	bne.n	800135c <freqCorrection+0x88>
 8001346:	4a41      	ldr	r2, [pc, #260]	@ (800144c <freqCorrection+0x178>)
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800134e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001352:	d203      	bcs.n	800135c <freqCorrection+0x88>
		{
			//First low detected
			start_index = i; 		// Store index of first low detected
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	637b      	str	r3, [r7, #52]	@ 0x34
			lowDetected = 1;
 8001358:	2301      	movs	r3, #1
 800135a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
		//Check for high
		if (!highDetected && lowDetected && sADC.adc12_data[i+ADC1_TIM1_CH1] > 65000)
 800135c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800135e:	2b00      	cmp	r3, #0
 8001360:	d10f      	bne.n	8001382 <freqCorrection+0xae>
 8001362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001364:	2b00      	cmp	r3, #0
 8001366:	d00c      	beq.n	8001382 <freqCorrection+0xae>
 8001368:	4a38      	ldr	r2, [pc, #224]	@ (800144c <freqCorrection+0x178>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001370:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 8001374:	4293      	cmp	r3, r2
 8001376:	d904      	bls.n	8001382 <freqCorrection+0xae>
		{
			//High after first low detected
			stop_index = i-6;		// Store index of last low
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	3b06      	subs	r3, #6
 800137c:	633b      	str	r3, [r7, #48]	@ 0x30
			highDetected = 1;
 800137e:	2301      	movs	r3, #1
 8001380:	62bb      	str	r3, [r7, #40]	@ 0x28
 	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	3306      	adds	r3, #6
 8001386:	61bb      	str	r3, [r7, #24]
 8001388:	4b30      	ldr	r3, [pc, #192]	@ (800144c <freqCorrection+0x178>)
 800138a:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 800138e:	4613      	mov	r3, r2
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4413      	add	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	461a      	mov	r2, r3
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	429a      	cmp	r2, r3
 800139c:	d8b2      	bhi.n	8001304 <freqCorrection+0x30>
		}
	}

	// Check maximum and minimum difference
	norm = max - min;
 800139e:	ed97 7a08 	vldr	s14, [r7, #32]
 80013a2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80013a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013aa:	edc7 7a07 	vstr	s15, [r7, #28]
	if (norm < 10)
 80013ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80013b2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80013b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013be:	d501      	bpl.n	80013c4 <freqCorrection+0xf0>
		norm = max;
 80013c0:	6a3b      	ldr	r3, [r7, #32]
 80013c2:	61fb      	str	r3, [r7, #28]

	number_of_lows = (stop_index - start_index)/6 + 1;
 80013c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	4a21      	ldr	r2, [pc, #132]	@ (8001450 <freqCorrection+0x17c>)
 80013cc:	fb82 1203 	smull	r1, r2, r2, r3
 80013d0:	17db      	asrs	r3, r3, #31
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	3301      	adds	r3, #1
 80013d6:	617b      	str	r3, [r7, #20]
	if (lowDetected && highDetected && (number_of_lows >= 5))
 80013d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d02c      	beq.n	8001438 <freqCorrection+0x164>
 80013de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d029      	beq.n	8001438 <freqCorrection+0x164>
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	dd26      	ble.n	8001438 <freqCorrection+0x164>
	{
		float upper = convertADC12data(start_index+ADC2_Is+6, NULL);
 80013ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013ec:	3307      	adds	r3, #7
 80013ee:	2100      	movs	r1, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fcc1 	bl	8000d78 <convertADC12data>
 80013f6:	ed87 0a04 	vstr	s0, [r7, #16]
		float lower = convertADC12data(stop_index+ADC2_Is-6, NULL);
 80013fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013fc:	3b05      	subs	r3, #5
 80013fe:	2100      	movs	r1, #0
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff fcb9 	bl	8000d78 <convertADC12data>
 8001406:	ed87 0a03 	vstr	s0, [r7, #12]
		*freqCorr = (int16_t) 1000*(upper - lower)/norm;
 800140a:	ed97 7a04 	vldr	s14, [r7, #16]
 800140e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001412:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001416:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001454 <freqCorrection+0x180>
 800141a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800141e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001422:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001426:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800142a:	ee17 3a90 	vmov	r3, s15
 800142e:	b21a      	sxth	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	801a      	strh	r2, [r3, #0]
		return(1);
 8001434:	2301      	movs	r3, #1
 8001436:	e000      	b.n	800143a <freqCorrection+0x166>
	}
	else
		return(0);
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3738      	adds	r7, #56	@ 0x38
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	47c35000 	.word	0x47c35000
 8001448:	c7c35000 	.word	0xc7c35000
 800144c:	24000330 	.word	0x24000330
 8001450:	2aaaaaab 	.word	0x2aaaaaab
 8001454:	447a0000 	.word	0x447a0000

08001458 <voltageCorrection>:


//Calculate voltage correction base on a desired RMS voltage
//Returns 1 if a valid frequency correction is calculated, otherwise 0
uint8_t voltageCorrection(int16_t Vdesired, int16_t *vCorr)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	6039      	str	r1, [r7, #0]
 8001462:	80fb      	strh	r3, [r7, #6]
	float max = -100000;
 8001464:	4b32      	ldr	r3, [pc, #200]	@ (8001530 <voltageCorrection+0xd8>)
 8001466:	61fb      	str	r3, [r7, #28]

	//Find maximum value of bridge voltage
	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 8001468:	2300      	movs	r3, #0
 800146a:	61bb      	str	r3, [r7, #24]
 800146c:	e031      	b.n	80014d2 <voltageCorrection+0x7a>
	{
		// Find minimum of bridge current
		float VL1 = convertADC12data(i+ADC1_VplaL1, NULL);
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	3304      	adds	r3, #4
 8001472:	2100      	movs	r1, #0
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fc7f 	bl	8000d78 <convertADC12data>
 800147a:	ed87 0a05 	vstr	s0, [r7, #20]
		float VL2 = convertADC12data(i+ADC2_VplaL2, NULL);
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	3305      	adds	r3, #5
 8001482:	2100      	movs	r1, #0
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff fc77 	bl	8000d78 <convertADC12data>
 800148a:	ed87 0a04 	vstr	s0, [r7, #16]
		float VL = VL1 - VL2;
 800148e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001492:	edd7 7a04 	vldr	s15, [r7, #16]
 8001496:	ee77 7a67 	vsub.f32	s15, s14, s15
 800149a:	edc7 7a03 	vstr	s15, [r7, #12]
		VL = sqrt(2) * VL;
 800149e:	edd7 7a03 	vldr	s15, [r7, #12]
 80014a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014a6:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 8001528 <voltageCorrection+0xd0>
 80014aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80014ae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014b2:	edc7 7a03 	vstr	s15, [r7, #12]
		if (VL > max)
 80014b6:	ed97 7a03 	vldr	s14, [r7, #12]
 80014ba:	edd7 7a07 	vldr	s15, [r7, #28]
 80014be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c6:	dd01      	ble.n	80014cc <voltageCorrection+0x74>
		{
			max = VL;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	61fb      	str	r3, [r7, #28]
	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	3306      	adds	r3, #6
 80014d0:	61bb      	str	r3, [r7, #24]
 80014d2:	4b18      	ldr	r3, [pc, #96]	@ (8001534 <voltageCorrection+0xdc>)
 80014d4:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 80014d8:	4613      	mov	r3, r2
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	4413      	add	r3, r2
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	461a      	mov	r2, r3
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d8c2      	bhi.n	800146e <voltageCorrection+0x16>
		}
	}
	*vCorr = (int16_t) (Vdesired-max)/100;
 80014e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ec:	ee07 3a90 	vmov	s15, r3
 80014f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80014f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001500:	ee17 3a90 	vmov	r3, s15
 8001504:	b21b      	sxth	r3, r3
 8001506:	4a0c      	ldr	r2, [pc, #48]	@ (8001538 <voltageCorrection+0xe0>)
 8001508:	fb82 1203 	smull	r1, r2, r2, r3
 800150c:	1152      	asrs	r2, r2, #5
 800150e:	17db      	asrs	r3, r3, #31
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	b21a      	sxth	r2, r3
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	801a      	strh	r2, [r3, #0]
	return 1;
 8001518:	2301      	movs	r3, #1
}
 800151a:	4618      	mov	r0, r3
 800151c:	3720      	adds	r7, #32
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	f3af 8000 	nop.w
 8001528:	667f3bcd 	.word	0x667f3bcd
 800152c:	3ff6a09e 	.word	0x3ff6a09e
 8001530:	c7c35000 	.word	0xc7c35000
 8001534:	24000330 	.word	0x24000330
 8001538:	51eb851f 	.word	0x51eb851f
 800153c:	00000000 	.word	0x00000000

08001540 <measureBridgePlasmaADC12>:


// Measure bridge current, plasma voltage, and bridge current using ADC1 and ADC2 for one period
// After the measurement is done the function doneMeasuringBridgePlasmaADC12 is called
void measureBridgePlasmaADC12(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	//Calculate number of reads needed for one period
	sADC.nADC12Read = ((uint32_t) ((1/(float) sHbridge.frequency)/ADC12_GROUP_READTIME));//* 2; //Multiplied by two to grab two periods
 8001546:	4b24      	ldr	r3, [pc, #144]	@ (80015d8 <measureBridgePlasmaADC12+0x98>)
 8001548:	885b      	ldrh	r3, [r3, #2]
 800154a:	ee07 3a90 	vmov	s15, r3
 800154e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001552:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001556:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800155a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800155e:	ed9f 5b1c 	vldr	d5, [pc, #112]	@ 80015d0 <measureBridgePlasmaADC12+0x90>
 8001562:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001566:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800156a:	ee17 2a90 	vmov	r2, s15
 800156e:	4b1b      	ldr	r3, [pc, #108]	@ (80015dc <measureBridgePlasmaADC12+0x9c>)
 8001570:	f8c3 2708 	str.w	r2, [r3, #1800]	@ 0x708
	sADC.nADC12Read +=2; //Add to see the start of next period
 8001574:	4b19      	ldr	r3, [pc, #100]	@ (80015dc <measureBridgePlasmaADC12+0x9c>)
 8001576:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 800157a:	3302      	adds	r3, #2
 800157c:	4a17      	ldr	r2, [pc, #92]	@ (80015dc <measureBridgePlasmaADC12+0x9c>)
 800157e:	f8c2 3708 	str.w	r3, [r2, #1800]	@ 0x708

	//Start ADC1 and ADC2 measurements
	if (sADC.nADC12Read <= ADC12_MAX_GROUP)
 8001582:	4b16      	ldr	r3, [pc, #88]	@ (80015dc <measureBridgePlasmaADC12+0x9c>)
 8001584:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 8001588:	2b64      	cmp	r3, #100	@ 0x64
 800158a:	d81a      	bhi.n	80015c2 <measureBridgePlasmaADC12+0x82>
	{
		//Calculate the number DMA transfers needed
		uint32_t noDMARequests = ADC12_NO_CHANNELS*sADC.nADC12Read;
 800158c:	4b13      	ldr	r3, [pc, #76]	@ (80015dc <measureBridgePlasmaADC12+0x9c>)
 800158e:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 8001592:	4613      	mov	r3, r2
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4413      	add	r3, r2
 8001598:	607b      	str	r3, [r7, #4]

		// Start reading ADC1 and ADC2
		sADC.adc12_reading = 1;
 800159a:	4b10      	ldr	r3, [pc, #64]	@ (80015dc <measureBridgePlasmaADC12+0x9c>)
 800159c:	2201      	movs	r2, #1
 800159e:	f8a3 270e 	strh.w	r2, [r3, #1806]	@ 0x70e

		//This will start the ADC1 and ADC2 measurements when H-BRIDGE_B_CTRL (TIM1_CH1) goes from 0 to 1.
		//When the measurements are done doneMeasuringBridgePlasmaADC12 is called.
		HAL_StatusTypeDef HALresp = HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t *) sADC.adc12_data, noDMARequests);
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	490d      	ldr	r1, [pc, #52]	@ (80015dc <measureBridgePlasmaADC12+0x9c>)
 80015a6:	480e      	ldr	r0, [pc, #56]	@ (80015e0 <measureBridgePlasmaADC12+0xa0>)
 80015a8:	f005 fe68 	bl	800727c <HAL_ADCEx_MultiModeStart_DMA>
 80015ac:	4603      	mov	r3, r0
 80015ae:	70fb      	strb	r3, [r7, #3]
		if (HALresp != HAL_OK)
 80015b0:	78fb      	ldrb	r3, [r7, #3]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d008      	beq.n	80015c8 <measureBridgePlasmaADC12+0x88>
		{
			printHALErrorStatus(HALresp, "measureBridgePlasmaADC12");
 80015b6:	78fb      	ldrb	r3, [r7, #3]
 80015b8:	490a      	ldr	r1, [pc, #40]	@ (80015e4 <measureBridgePlasmaADC12+0xa4>)
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff f95a 	bl	8000874 <printHALErrorStatus>
	}
	else
		printString("** ERROR ** pADC.nRead > ADC12_MAX_GROUP");

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 80015c0:	e002      	b.n	80015c8 <measureBridgePlasmaADC12+0x88>
		printString("** ERROR ** pADC.nRead > ADC12_MAX_GROUP");
 80015c2:	4809      	ldr	r0, [pc, #36]	@ (80015e8 <measureBridgePlasmaADC12+0xa8>)
 80015c4:	f7ff f8ce 	bl	8000764 <printString>
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	a0b5ed8d 	.word	0xa0b5ed8d
 80015d4:	3eb0c6f7 	.word	0x3eb0c6f7
 80015d8:	2400001c 	.word	0x2400001c
 80015dc:	24000330 	.word	0x24000330
 80015e0:	24000a84 	.word	0x24000a84
 80015e4:	08014448 	.word	0x08014448
 80015e8:	08014464 	.word	0x08014464

080015ec <doneMeasuringBridgePlasmaADC12>:

// Done measuring bridge current, plasma voltage, and bridge current
void doneMeasuringBridgePlasmaADC12(uint32_t errorCode)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	static uint32_t count = 0;

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	count++;
 80015f4:	4b22      	ldr	r3, [pc, #136]	@ (8001680 <doneMeasuringBridgePlasmaADC12+0x94>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	3301      	adds	r3, #1
 80015fa:	4a21      	ldr	r2, [pc, #132]	@ (8001680 <doneMeasuringBridgePlasmaADC12+0x94>)
 80015fc:	6013      	str	r3, [r2, #0]

	// Done reading ADC1 and ADC2
	sADC.adc12_reading = 0;
 80015fe:	4b21      	ldr	r3, [pc, #132]	@ (8001684 <doneMeasuringBridgePlasmaADC12+0x98>)
 8001600:	2200      	movs	r2, #0
 8001602:	f8a3 270e 	strh.w	r2, [r3, #1806]	@ 0x70e

	if (errorCode == HAL_ADC_ERROR_NONE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d128      	bne.n	800165e <doneMeasuringBridgePlasmaADC12+0x72>
	{
		if (sFlashConfig.mode == RUN_MODE)
 800160c:	4b1e      	ldr	r3, [pc, #120]	@ (8001688 <doneMeasuringBridgePlasmaADC12+0x9c>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d12b      	bne.n	800166c <doneMeasuringBridgePlasmaADC12+0x80>

			//TODO Check plasma voltage VplaL1 and VplaL2 (To high? Not present?)
			//TODO Calculate plasma voltage Vrms, Vmax and Vmin

			//Adjust H-bridge frequency
			if (powerStatus == V500_ON)
 8001614:	4b1d      	ldr	r3, [pc, #116]	@ (800168c <doneMeasuringBridgePlasmaADC12+0xa0>)
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d127      	bne.n	800166c <doneMeasuringBridgePlasmaADC12+0x80>
			{
				//Adjust H-bridge frequency
				int16_t freqCorr = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	81fb      	strh	r3, [r7, #14]
				if (freqCorrection(&freqCorr))
 8001620:	f107 030e 	add.w	r3, r7, #14
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fe55 	bl	80012d4 <freqCorrection>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d008      	beq.n	8001642 <doneMeasuringBridgePlasmaADC12+0x56>
					sHbridge.frequency += freqCorr;
 8001630:	4b17      	ldr	r3, [pc, #92]	@ (8001690 <doneMeasuringBridgePlasmaADC12+0xa4>)
 8001632:	885a      	ldrh	r2, [r3, #2]
 8001634:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001638:	b29b      	uxth	r3, r3
 800163a:	4413      	add	r3, r2
 800163c:	b29a      	uxth	r2, r3
 800163e:	4b14      	ldr	r3, [pc, #80]	@ (8001690 <doneMeasuringBridgePlasmaADC12+0xa4>)
 8001640:	805a      	strh	r2, [r3, #2]
				//TODO Adjust H-bridge dead time
				//sHbridge.deadtime = new setting;
				programHbridge();
 8001642:	f7ff f9b5 	bl	80009b0 <programHbridge>
					HAL_Delay(1);	//Allow H-bridge to settle with new settings
 8001646:	2001      	movs	r0, #1
 8001648:	f003 f878 	bl	800473c <HAL_Delay>
				if (count % 2048)
 800164c:	4b0c      	ldr	r3, [pc, #48]	@ (8001680 <doneMeasuringBridgePlasmaADC12+0x94>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001654:	2b00      	cmp	r3, #0
 8001656:	d009      	beq.n	800166c <doneMeasuringBridgePlasmaADC12+0x80>
					printHbridgeData();
 8001658:	f7ff f982 	bl	8000960 <printHbridgeData>
 800165c:	e006      	b.n	800166c <doneMeasuringBridgePlasmaADC12+0x80>
			}
		}
	}
	else
	{
		printNumber("ADC12 Error Code: ", errorCode, 1);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	b29b      	uxth	r3, r3
 8001662:	2201      	movs	r2, #1
 8001664:	4619      	mov	r1, r3
 8001666:	480b      	ldr	r0, [pc, #44]	@ (8001694 <doneMeasuringBridgePlasmaADC12+0xa8>)
 8001668:	f7ff f8be 	bl	80007e8 <printNumber>
	}

	//Measure ADC3 voltages
	if (sFlashConfig.mode == RUN_MODE)
 800166c:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <doneMeasuringBridgePlasmaADC12+0x9c>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d101      	bne.n	8001678 <doneMeasuringBridgePlasmaADC12+0x8c>
		measureVoltagesTemperaturesADC3();
 8001674:	f000 fb14 	bl	8001ca0 <measureVoltagesTemperaturesADC3>

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 8001678:	bf00      	nop
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	24000a48 	.word	0x24000a48
 8001684:	24000330 	.word	0x24000330
 8001688:	24000a44 	.word	0x24000a44
 800168c:	24000a40 	.word	0x24000a40
 8001690:	2400001c 	.word	0x2400001c
 8001694:	08014490 	.word	0x08014490

08001698 <printHbridgeDatalogging>:
// Print H-bridge data on UART3 formatted for CSV datalogging
// Prints: Hbridge Freq, Deadtime, Is, VplaL1, VplaL2, VbrS1, VbriS2
// Parameter:
//		startTime: denotes the system time when ADC measurement was started
static void printHbridgeDatalogging(uint32_t startTime, uint32_t stopTime)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	f5ad 6d8a 	sub.w	sp, sp, #1104	@ 0x450
 800169e:	af0c      	add	r7, sp, #48	@ 0x30
 80016a0:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80016a4:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 80016a8:	6018      	str	r0, [r3, #0]
 80016aa:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80016ae:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 80016b2:	6019      	str	r1, [r3, #0]
	char s_output[1000];
	//Convert from ms to sec: time elapsed / number of adc reads
	//This assumes that the time taken for each adc read is approx. equal
	double interval = (double) (stopTime - startTime) / (double) sADC.nADC12Read;
 80016b4:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80016b8:	f5a3 6284 	sub.w	r2, r3, #1056	@ 0x420
 80016bc:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80016c0:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 80016c4:	6812      	ldr	r2, [r2, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	ee07 3a90 	vmov	s15, r3
 80016ce:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 80016d2:	4b5c      	ldr	r3, [pc, #368]	@ (8001844 <printHbridgeDatalogging+0x1ac>)
 80016d4:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 80016d8:	ee07 3a90 	vmov	s15, r3
 80016dc:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80016e0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80016e4:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80016e8:	ed83 7b00 	vstr	d7, [r3]

	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 80016ec:	2300      	movs	r3, #0
 80016ee:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 80016f2:	e093      	b.n	800181c <printHbridgeDatalogging+0x184>
		{
			//calculate time of current measurement (start time + ADC sample rate)
			//TODO: This is likely not exactly accurate. Better way to record time of measurement accounting for conversion/DMA time?
			double measTime = startTime + (interval * i);
 80016f4:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80016f8:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	ee07 3a90 	vmov	s15, r3
 8001702:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001706:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 800170a:	ee07 3a90 	vmov	s15, r3
 800170e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001712:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001716:	ed93 7b00 	vldr	d7, [r3]
 800171a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800171e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001722:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001726:	ed83 7b00 	vstr	d7, [r3]

			float Is = convertADC12data(i+ADC2_Is, NULL);
 800172a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 800172e:	3301      	adds	r3, #1
 8001730:	2100      	movs	r1, #0
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fb20 	bl	8000d78 <convertADC12data>
 8001738:	f207 4304 	addw	r3, r7, #1028	@ 0x404
 800173c:	ed83 0a00 	vstr	s0, [r3]
			float VplaL1 = convertADC12data(i+ADC1_VplaL1, NULL);
 8001740:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001744:	3304      	adds	r3, #4
 8001746:	2100      	movs	r1, #0
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fb15 	bl	8000d78 <convertADC12data>
 800174e:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8001752:	ed83 0a00 	vstr	s0, [r3]
			float VplaL2 = convertADC12data(i+ADC2_VplaL2, NULL);
 8001756:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 800175a:	3305      	adds	r3, #5
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fb0a 	bl	8000d78 <convertADC12data>
 8001764:	ed87 0aff 	vstr	s0, [r7, #1020]	@ 0x3fc
			float VbriS1 = convertADC12data(i+ADC1_VbriS1, NULL);
 8001768:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 800176c:	3302      	adds	r3, #2
 800176e:	2100      	movs	r1, #0
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fb01 	bl	8000d78 <convertADC12data>
 8001776:	ed87 0afe 	vstr	s0, [r7, #1016]	@ 0x3f8
			float VbriS2 = convertADC12data(i+ADC2_VbriS2, NULL);
 800177a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 800177e:	3303      	adds	r3, #3
 8001780:	2100      	movs	r1, #0
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff faf8 	bl	8000d78 <convertADC12data>
 8001788:	ed87 0afd 	vstr	s0, [r7, #1012]	@ 0x3f4

			sprintf(s_output, "%.2lf,%u,%u,%f,%f,%f,%f,%f", measTime, sHbridge.frequency, sHbridge.deadtime,Is,VplaL1,VplaL2,VbriS1,VbriS2);
 800178c:	4b2e      	ldr	r3, [pc, #184]	@ (8001848 <printHbridgeDatalogging+0x1b0>)
 800178e:	885b      	ldrh	r3, [r3, #2]
 8001790:	461a      	mov	r2, r3
 8001792:	4b2d      	ldr	r3, [pc, #180]	@ (8001848 <printHbridgeDatalogging+0x1b0>)
 8001794:	889b      	ldrh	r3, [r3, #4]
 8001796:	f207 4104 	addw	r1, r7, #1028	@ 0x404
 800179a:	edd1 7a00 	vldr	s15, [r1]
 800179e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017a2:	f507 6180 	add.w	r1, r7, #1024	@ 0x400
 80017a6:	edd1 6a00 	vldr	s13, [r1]
 80017aa:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80017ae:	edd7 5aff 	vldr	s11, [r7, #1020]	@ 0x3fc
 80017b2:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 80017b6:	edd7 4afe 	vldr	s9, [r7, #1016]	@ 0x3f8
 80017ba:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 80017be:	edd7 3afd 	vldr	s7, [r7, #1012]	@ 0x3f4
 80017c2:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 80017c6:	f107 000c 	add.w	r0, r7, #12
 80017ca:	ed8d 3b0a 	vstr	d3, [sp, #40]	@ 0x28
 80017ce:	ed8d 4b08 	vstr	d4, [sp, #32]
 80017d2:	ed8d 5b06 	vstr	d5, [sp, #24]
 80017d6:	ed8d 6b04 	vstr	d6, [sp, #16]
 80017da:	ed8d 7b02 	vstr	d7, [sp, #8]
 80017de:	9301      	str	r3, [sp, #4]
 80017e0:	9200      	str	r2, [sp, #0]
 80017e2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80017e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ea:	4918      	ldr	r1, [pc, #96]	@ (800184c <printHbridgeDatalogging+0x1b4>)
 80017ec:	f010 fc8a 	bl	8012104 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 80017f0:	f107 030c 	add.w	r3, r7, #12
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7fe fddb 	bl	80003b0 <strlen>
 80017fa:	4603      	mov	r3, r0
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	f107 010c 	add.w	r1, r7, #12
 8001802:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001806:	4812      	ldr	r0, [pc, #72]	@ (8001850 <printHbridgeDatalogging+0x1b8>)
 8001808:	f00e fbbd 	bl	800ff86 <HAL_UART_Transmit>
			printString("\n");
 800180c:	4811      	ldr	r0, [pc, #68]	@ (8001854 <printHbridgeDatalogging+0x1bc>)
 800180e:	f7fe ffa9 	bl	8000764 <printString>
	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 8001812:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001816:	3306      	adds	r3, #6
 8001818:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 800181c:	4b09      	ldr	r3, [pc, #36]	@ (8001844 <printHbridgeDatalogging+0x1ac>)
 800181e:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 8001822:	4613      	mov	r3, r2
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	4413      	add	r3, r2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	461a      	mov	r2, r3
 800182c:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001830:	429a      	cmp	r2, r3
 8001832:	f63f af5f 	bhi.w	80016f4 <printHbridgeDatalogging+0x5c>
		}
}
 8001836:	bf00      	nop
 8001838:	bf00      	nop
 800183a:	f507 6784 	add.w	r7, r7, #1056	@ 0x420
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	24000330 	.word	0x24000330
 8001848:	2400001c 	.word	0x2400001c
 800184c:	080144a4 	.word	0x080144a4
 8001850:	24000e34 	.word	0x24000e34
 8001854:	080144c0 	.word	0x080144c0

08001858 <autoFreqAdj>:

// Automatically Correct the Drive Frequency until user presses any key
void autoFreqAdj(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
	char input;


	//printString("\n\r%Press any key to exit"); //Commented out to allow for automated remote serial control (datalogging)

	printString("Time(us),Freq (Hz),Deadtime (%),Bridge I,VplaL1,VplaL2,VbriS1,VbriS2");
 800185e:	482c      	ldr	r0, [pc, #176]	@ (8001910 <autoFreqAdj+0xb8>)
 8001860:	f7fe ff80 	bl	8000764 <printString>
	printCR();
 8001864:	f7fe ff6e 	bl	8000744 <printCR>

	//Start timer24 which is used to time when each ADC measurement is captured
	HAL_TIM_Base_Start(&htim24);
 8001868:	482a      	ldr	r0, [pc, #168]	@ (8001914 <autoFreqAdj+0xbc>)
 800186a:	f00c fdaf 	bl	800e3cc <HAL_TIM_Base_Start>


	while (!(HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK))
 800186e:	e041      	b.n	80018f4 <autoFreqAdj+0x9c>
	{
		uint32_t startTime = __HAL_TIM_GET_COUNTER(&htim24);//TIM24->CNT;
 8001870:	4b28      	ldr	r3, [pc, #160]	@ (8001914 <autoFreqAdj+0xbc>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001876:	60fb      	str	r3, [r7, #12]
		measureBridgePlasmaADC12();
 8001878:	f7ff fe62 	bl	8001540 <measureBridgePlasmaADC12>
		//Wait until ADC3 reading is done
		while (sADC.adc12_reading);
 800187c:	bf00      	nop
 800187e:	4b26      	ldr	r3, [pc, #152]	@ (8001918 <autoFreqAdj+0xc0>)
 8001880:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	@ 0x70e
 8001884:	b29b      	uxth	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f9      	bne.n	800187e <autoFreqAdj+0x26>
		uint32_t stopTime = __HAL_TIM_GET_COUNTER(&htim24);//TIM24->CNT;
 800188a:	4b22      	ldr	r3, [pc, #136]	@ (8001914 <autoFreqAdj+0xbc>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001890:	60bb      	str	r3, [r7, #8]
		//printADC12data();

		//Calculate delta f
		int16_t freqCorr;
		freqCorrection(&freqCorr);
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fd1d 	bl	80012d4 <freqCorrection>

		//char text[100];
		//sprintf(text, "\n\rFrequency correction: %i", (int) freqCorr);
		//printString(text);

		if (sHbridge.frequency + freqCorr > MAX_FREQUENCY) //GetUint16Input(&sHbridge.frequency, 1, MIN_FREQUENCY, MAX_FREQUENCY))
 800189a:	4b20      	ldr	r3, [pc, #128]	@ (800191c <autoFreqAdj+0xc4>)
 800189c:	885b      	ldrh	r3, [r3, #2]
 800189e:	461a      	mov	r2, r3
 80018a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 80018aa:	4293      	cmp	r3, r2
 80018ac:	dd04      	ble.n	80018b8 <autoFreqAdj+0x60>
		{   // Calculated freq is higher than max

			//sprintf(text, "\n\r%i is higher than max freq", (int) sHbridge.frequency + freqCorr);
			//printString(text);
			sHbridge.frequency = MAX_FREQUENCY;
 80018ae:	4b1b      	ldr	r3, [pc, #108]	@ (800191c <autoFreqAdj+0xc4>)
 80018b0:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 80018b4:	805a      	strh	r2, [r3, #2]
 80018b6:	e017      	b.n	80018e8 <autoFreqAdj+0x90>
		}
		else if (sHbridge.frequency + freqCorr < MIN_FREQUENCY)
 80018b8:	4b18      	ldr	r3, [pc, #96]	@ (800191c <autoFreqAdj+0xc4>)
 80018ba:	885b      	ldrh	r3, [r3, #2]
 80018bc:	461a      	mov	r2, r3
 80018be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018c2:	4413      	add	r3, r2
 80018c4:	f643 2297 	movw	r2, #14999	@ 0x3a97
 80018c8:	4293      	cmp	r3, r2
 80018ca:	dc04      	bgt.n	80018d6 <autoFreqAdj+0x7e>
		{
			//sprintf(text, "\n\r%i is lower than min freq", (int) sHbridge.frequency + freqCorr);
			//printString(text);

			sHbridge.frequency = MIN_FREQUENCY;
 80018cc:	4b13      	ldr	r3, [pc, #76]	@ (800191c <autoFreqAdj+0xc4>)
 80018ce:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80018d2:	805a      	strh	r2, [r3, #2]
 80018d4:	e008      	b.n	80018e8 <autoFreqAdj+0x90>

		}
		else
		{
			sHbridge.frequency = sHbridge.frequency + freqCorr;
 80018d6:	4b11      	ldr	r3, [pc, #68]	@ (800191c <autoFreqAdj+0xc4>)
 80018d8:	885a      	ldrh	r2, [r3, #2]
 80018da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	4413      	add	r3, r2
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	4b0d      	ldr	r3, [pc, #52]	@ (800191c <autoFreqAdj+0xc4>)
 80018e6:	805a      	strh	r2, [r3, #2]
		}

		programHbridge();
 80018e8:	f7ff f862 	bl	80009b0 <programHbridge>

		//Print current ADC data
		printHbridgeDatalogging(startTime, stopTime);
 80018ec:	68b9      	ldr	r1, [r7, #8]
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f7ff fed2 	bl	8001698 <printHbridgeDatalogging>
	while (!(HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK))
 80018f4:	1df9      	adds	r1, r7, #7
 80018f6:	2301      	movs	r3, #1
 80018f8:	2201      	movs	r2, #1
 80018fa:	4809      	ldr	r0, [pc, #36]	@ (8001920 <autoFreqAdj+0xc8>)
 80018fc:	f00e fbd1 	bl	80100a2 <HAL_UART_Receive>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1b4      	bne.n	8001870 <autoFreqAdj+0x18>


	}
}
 8001906:	bf00      	nop
 8001908:	bf00      	nop
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	080144c4 	.word	0x080144c4
 8001914:	24001044 	.word	0x24001044
 8001918:	24000330 	.word	0x24000330
 800191c:	2400001c 	.word	0x2400001c
 8001920:	24000e34 	.word	0x24000e34

08001924 <autoVoltageAdj>:


void autoVoltageAdj(int16_t userVoltage)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	80fb      	strh	r3, [r7, #6]
	char input;


	//printString("\n\r%Press any key to exit"); //Commented out to allow for automated remote serial control (datalogging)

	printString("Time(us),Freq (Hz),Deadtime (%),Bridge I,VplaL1,VplaL2,VbriS1,VbriS2");
 800192e:	482c      	ldr	r0, [pc, #176]	@ (80019e0 <autoVoltageAdj+0xbc>)
 8001930:	f7fe ff18 	bl	8000764 <printString>
	printCR();
 8001934:	f7fe ff06 	bl	8000744 <printCR>

	//Start timer24 which is used to time when each ADC measurement is captured
	HAL_TIM_Base_Start(&htim24);
 8001938:	482a      	ldr	r0, [pc, #168]	@ (80019e4 <autoVoltageAdj+0xc0>)
 800193a:	f00c fd47 	bl	800e3cc <HAL_TIM_Base_Start>


	while (!(HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK))
 800193e:	e03f      	b.n	80019c0 <autoVoltageAdj+0x9c>
	{
		uint32_t startTime = __HAL_TIM_GET_COUNTER(&htim24);//TIM24->CNT;
 8001940:	4b28      	ldr	r3, [pc, #160]	@ (80019e4 <autoVoltageAdj+0xc0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001946:	617b      	str	r3, [r7, #20]
		measureBridgePlasmaADC12();
 8001948:	f7ff fdfa 	bl	8001540 <measureBridgePlasmaADC12>
		//Wait until ADC3 reading is done
		while (sADC.adc12_reading);
 800194c:	bf00      	nop
 800194e:	4b26      	ldr	r3, [pc, #152]	@ (80019e8 <autoVoltageAdj+0xc4>)
 8001950:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	@ 0x70e
 8001954:	b29b      	uxth	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f9      	bne.n	800194e <autoVoltageAdj+0x2a>
		uint32_t stopTime = __HAL_TIM_GET_COUNTER(&htim24);//TIM24->CNT;
 800195a:	4b22      	ldr	r3, [pc, #136]	@ (80019e4 <autoVoltageAdj+0xc0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001960:	613b      	str	r3, [r7, #16]
		//printADC12data();

		//Calculate delta f
		int16_t voltageCorr;
		voltageCorrection(userVoltage, &voltageCorr);
 8001962:	f107 020c 	add.w	r2, r7, #12
 8001966:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fd73 	bl	8001458 <voltageCorrection>

		//char text[100];
		//sprintf(text, "\n\rFrequency correction: %i", (int) freqCorr);
		//printString(text);

		if (sHbridge.deadtime + voltageCorr > MAX_DEADTIME) //GetUint16Input(&sHbridge.frequency, 1, MIN_FREQUENCY, MAX_FREQUENCY))
 8001972:	4b1e      	ldr	r3, [pc, #120]	@ (80019ec <autoVoltageAdj+0xc8>)
 8001974:	889b      	ldrh	r3, [r3, #4]
 8001976:	461a      	mov	r2, r3
 8001978:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800197c:	4413      	add	r3, r2
 800197e:	2b28      	cmp	r3, #40	@ 0x28
 8001980:	dd03      	ble.n	800198a <autoVoltageAdj+0x66>
		{   // Calculated freq is higher than max

			//sprintf(text, "\n\r%i is higher than max freq", (int) sHbridge.frequency + freqCorr);
			//printString(text);
			sHbridge.deadtime = MAX_DEADTIME;
 8001982:	4b1a      	ldr	r3, [pc, #104]	@ (80019ec <autoVoltageAdj+0xc8>)
 8001984:	2228      	movs	r2, #40	@ 0x28
 8001986:	809a      	strh	r2, [r3, #4]
 8001988:	e014      	b.n	80019b4 <autoVoltageAdj+0x90>
		}
		else if (sHbridge.deadtime + voltageCorr < MIN_DEADTIME)
 800198a:	4b18      	ldr	r3, [pc, #96]	@ (80019ec <autoVoltageAdj+0xc8>)
 800198c:	889b      	ldrh	r3, [r3, #4]
 800198e:	461a      	mov	r2, r3
 8001990:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001994:	4413      	add	r3, r2
 8001996:	2b00      	cmp	r3, #0
 8001998:	dc03      	bgt.n	80019a2 <autoVoltageAdj+0x7e>
		{
			//sprintf(text, "\n\r%i is lower than min freq", (int) sHbridge.frequency + freqCorr);
			//printString(text);

			sHbridge.deadtime = MIN_DEADTIME;
 800199a:	4b14      	ldr	r3, [pc, #80]	@ (80019ec <autoVoltageAdj+0xc8>)
 800199c:	2201      	movs	r2, #1
 800199e:	809a      	strh	r2, [r3, #4]
 80019a0:	e008      	b.n	80019b4 <autoVoltageAdj+0x90>

		}
		else
		{
			sHbridge.deadtime = sHbridge.deadtime + voltageCorr;
 80019a2:	4b12      	ldr	r3, [pc, #72]	@ (80019ec <autoVoltageAdj+0xc8>)
 80019a4:	889a      	ldrh	r2, [r3, #4]
 80019a6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	4413      	add	r3, r2
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	4b0e      	ldr	r3, [pc, #56]	@ (80019ec <autoVoltageAdj+0xc8>)
 80019b2:	809a      	strh	r2, [r3, #4]
		}

		programHbridge();
 80019b4:	f7fe fffc 	bl	80009b0 <programHbridge>

		//Print current ADC data
		printHbridgeDatalogging(startTime, stopTime);
 80019b8:	6939      	ldr	r1, [r7, #16]
 80019ba:	6978      	ldr	r0, [r7, #20]
 80019bc:	f7ff fe6c 	bl	8001698 <printHbridgeDatalogging>
	while (!(HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK))
 80019c0:	f107 010f 	add.w	r1, r7, #15
 80019c4:	2301      	movs	r3, #1
 80019c6:	2201      	movs	r2, #1
 80019c8:	4809      	ldr	r0, [pc, #36]	@ (80019f0 <autoVoltageAdj+0xcc>)
 80019ca:	f00e fb6a 	bl	80100a2 <HAL_UART_Receive>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1b5      	bne.n	8001940 <autoVoltageAdj+0x1c>


	}
}
 80019d4:	bf00      	nop
 80019d6:	bf00      	nop
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	080144c4 	.word	0x080144c4
 80019e4:	24001044 	.word	0x24001044
 80019e8:	24000330 	.word	0x24000330
 80019ec:	2400001c 	.word	0x2400001c
 80019f0:	24000e34 	.word	0x24000e34
 80019f4:	00000000 	.word	0x00000000

080019f8 <convertADC3data>:


//Convert ADC3 data to voltages
float convertADC3data(uint32_t item, char **text)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
	float result = 0;
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]

	switch (item) {
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b0a      	cmp	r3, #10
 8001a0c:	f200 80c5 	bhi.w	8001b9a <convertADC3data+0x1a2>
 8001a10:	a201      	add	r2, pc, #4	@ (adr r2, 8001a18 <convertADC3data+0x20>)
 8001a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a16:	bf00      	nop
 8001a18:	08001a45 	.word	0x08001a45
 8001a1c:	08001a77 	.word	0x08001a77
 8001a20:	08001aa9 	.word	0x08001aa9
 8001a24:	08001adb 	.word	0x08001adb
 8001a28:	08001ae9 	.word	0x08001ae9
 8001a2c:	08001b23 	.word	0x08001b23
 8001a30:	08001b55 	.word	0x08001b55
 8001a34:	08001b63 	.word	0x08001b63
 8001a38:	08001b71 	.word	0x08001b71
 8001a3c:	08001b7f 	.word	0x08001b7f
 8001a40:	08001b8d 	.word	0x08001b8d
		case ADC3_VBAT:
			result =  1000*((9.76+169.0)/9.76)*3.3*(((float) sADC.adc3_data[ADC3_VBAT])/4096.0);
 8001a44:	4b66      	ldr	r3, [pc, #408]	@ (8001be0 <convertADC3data+0x1e8>)
 8001a46:	f8b3 34b0 	ldrh.w	r3, [r3, #1200]	@ 0x4b0
 8001a4a:	ee07 3a90 	vmov	s15, r3
 8001a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a52:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001a56:	ed9f 5b56 	vldr	d5, [pc, #344]	@ 8001bb0 <convertADC3data+0x1b8>
 8001a5a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a5e:	ed9f 6b56 	vldr	d6, [pc, #344]	@ 8001bb8 <convertADC3data+0x1c0>
 8001a62:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a66:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a6a:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_VBAT (mV)";
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	4a5c      	ldr	r2, [pc, #368]	@ (8001be4 <convertADC3data+0x1ec>)
 8001a72:	601a      	str	r2, [r3, #0]
			break;
 8001a74:	e091      	b.n	8001b9a <convertADC3data+0x1a2>
		case ADC3_15V:
			result =  1000*((30.0+120.0)/30.0)*3.3*(((float) sADC.adc3_data[ADC3_15V])/4096.0);
 8001a76:	4b5a      	ldr	r3, [pc, #360]	@ (8001be0 <convertADC3data+0x1e8>)
 8001a78:	f8b3 34b2 	ldrh.w	r3, [r3, #1202]	@ 0x4b2
 8001a7c:	ee07 3a90 	vmov	s15, r3
 8001a80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a84:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001a88:	ed9f 5b49 	vldr	d5, [pc, #292]	@ 8001bb0 <convertADC3data+0x1b8>
 8001a8c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a90:	ed9f 6b4b 	vldr	d6, [pc, #300]	@ 8001bc0 <convertADC3data+0x1c8>
 8001a94:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a98:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a9c:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_15V (mV)";
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	4a51      	ldr	r2, [pc, #324]	@ (8001be8 <convertADC3data+0x1f0>)
 8001aa4:	601a      	str	r2, [r3, #0]
			break;
 8001aa6:	e078      	b.n	8001b9a <convertADC3data+0x1a2>
		case ADC3_3_3V:
			result =  1000*((30.0+3.0)/30.0)*3.3*(((float) sADC.adc3_data[ADC3_3_3V])/4096.0);
 8001aa8:	4b4d      	ldr	r3, [pc, #308]	@ (8001be0 <convertADC3data+0x1e8>)
 8001aaa:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	@ 0x4b4
 8001aae:	ee07 3a90 	vmov	s15, r3
 8001ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ab6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001aba:	ed9f 5b3d 	vldr	d5, [pc, #244]	@ 8001bb0 <convertADC3data+0x1b8>
 8001abe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ac2:	ed9f 6b41 	vldr	d6, [pc, #260]	@ 8001bc8 <convertADC3data+0x1d0>
 8001ac6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001aca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ace:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_3_3V (mV)";
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	4a45      	ldr	r2, [pc, #276]	@ (8001bec <convertADC3data+0x1f4>)
 8001ad6:	601a      	str	r2, [r3, #0]
			break;
 8001ad8:	e05f      	b.n	8001b9a <convertADC3data+0x1a2>
		case ADC3_NC3:
			result = 0;
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_NC3";
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	4a43      	ldr	r2, [pc, #268]	@ (8001bf0 <convertADC3data+0x1f8>)
 8001ae4:	601a      	str	r2, [r3, #0]
			break;
 8001ae6:	e058      	b.n	8001b9a <convertADC3data+0x1a2>
		case ADC3_BridgeTemp:
			result = 1000*((float) sADC.adc3_data[ADC3_BridgeTemp])*3.3/4096.0;
 8001ae8:	4b3d      	ldr	r3, [pc, #244]	@ (8001be0 <convertADC3data+0x1e8>)
 8001aea:	f8b3 34b8 	ldrh.w	r3, [r3, #1208]	@ 0x4b8
 8001aee:	ee07 3a90 	vmov	s15, r3
 8001af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001af6:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8001bf4 <convertADC3data+0x1fc>
 8001afa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001afe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b02:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 8001bd0 <convertADC3data+0x1d8>
 8001b06:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001b0a:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 8001bb0 <convertADC3data+0x1b8>
 8001b0e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b12:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b16:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_BridgeTemp (mV)";
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	4a36      	ldr	r2, [pc, #216]	@ (8001bf8 <convertADC3data+0x200>)
 8001b1e:	601a      	str	r2, [r3, #0]
			break;
 8001b20:	e03b      	b.n	8001b9a <convertADC3data+0x1a2>
		case ADC3_500VDC:
			result =  1000*((12.0+2000.0)/12.0)*3.3*(((float) sADC.adc3_data[ADC3_500VDC])/4096.0);
 8001b22:	4b2f      	ldr	r3, [pc, #188]	@ (8001be0 <convertADC3data+0x1e8>)
 8001b24:	f8b3 34ba 	ldrh.w	r3, [r3, #1210]	@ 0x4ba
 8001b28:	ee07 3a90 	vmov	s15, r3
 8001b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b30:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001b34:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8001bb0 <convertADC3data+0x1b8>
 8001b38:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b3c:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 8001bd8 <convertADC3data+0x1e0>
 8001b40:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b44:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b48:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_500VDC (mV)";
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	4a2b      	ldr	r2, [pc, #172]	@ (8001bfc <convertADC3data+0x204>)
 8001b50:	601a      	str	r2, [r3, #0]
			break;
 8001b52:	e022      	b.n	8001b9a <convertADC3data+0x1a2>
		case ADC3_Thermistor1:
			result = 0;
 8001b54:	f04f 0300 	mov.w	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor1";
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	4a28      	ldr	r2, [pc, #160]	@ (8001c00 <convertADC3data+0x208>)
 8001b5e:	601a      	str	r2, [r3, #0]
			break;
 8001b60:	e01b      	b.n	8001b9a <convertADC3data+0x1a2>
		case ADC3_Thermistor2:
			result = 0;
 8001b62:	f04f 0300 	mov.w	r3, #0
 8001b66:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor2";
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	4a26      	ldr	r2, [pc, #152]	@ (8001c04 <convertADC3data+0x20c>)
 8001b6c:	601a      	str	r2, [r3, #0]
			break;
 8001b6e:	e014      	b.n	8001b9a <convertADC3data+0x1a2>
		case ADC3_Thermistor3:
			result = 0;
 8001b70:	f04f 0300 	mov.w	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor3";
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	4a23      	ldr	r2, [pc, #140]	@ (8001c08 <convertADC3data+0x210>)
 8001b7a:	601a      	str	r2, [r3, #0]
			break;
 8001b7c:	e00d      	b.n	8001b9a <convertADC3data+0x1a2>
		case ADC3_Thermistor4:
			result = 0;
 8001b7e:	f04f 0300 	mov.w	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor4";
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	4a21      	ldr	r2, [pc, #132]	@ (8001c0c <convertADC3data+0x214>)
 8001b88:	601a      	str	r2, [r3, #0]
			break;
 8001b8a:	e006      	b.n	8001b9a <convertADC3data+0x1a2>
		case ADC3_NC10:
			result = 0;
 8001b8c:	f04f 0300 	mov.w	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_NC10";
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	4a1e      	ldr	r2, [pc, #120]	@ (8001c10 <convertADC3data+0x218>)
 8001b96:	601a      	str	r2, [r3, #0]
			break;
 8001b98:	bf00      	nop
	}

	return(result);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	ee07 3a90 	vmov	s15, r3
}
 8001ba0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	00000000 	.word	0x00000000
 8001bb4:	40b00000 	.word	0x40b00000
 8001bb8:	9714fbcd 	.word	0x9714fbcd
 8001bbc:	40ed832c 	.word	0x40ed832c
 8001bc0:	00000000 	.word	0x00000000
 8001bc4:	40d01d00 	.word	0x40d01d00
 8001bc8:	00000000 	.word	0x00000000
 8001bcc:	40ac5c00 	.word	0x40ac5c00
 8001bd0:	66666666 	.word	0x66666666
 8001bd4:	400a6666 	.word	0x400a6666
 8001bd8:	ffffffff 	.word	0xffffffff
 8001bdc:	4120e2a7 	.word	0x4120e2a7
 8001be0:	24000330 	.word	0x24000330
 8001be4:	0801450c 	.word	0x0801450c
 8001be8:	0801451c 	.word	0x0801451c
 8001bec:	0801452c 	.word	0x0801452c
 8001bf0:	0801453c 	.word	0x0801453c
 8001bf4:	447a0000 	.word	0x447a0000
 8001bf8:	08014548 	.word	0x08014548
 8001bfc:	08014560 	.word	0x08014560
 8001c00:	08014574 	.word	0x08014574
 8001c04:	08014588 	.word	0x08014588
 8001c08:	0801459c 	.word	0x0801459c
 8001c0c:	080145b0 	.word	0x080145b0
 8001c10:	080145c4 	.word	0x080145c4

08001c14 <printADC3data>:

//Print measured ADC3 data on UART3
void printADC3data(void)
{
 8001c14:	b590      	push	{r4, r7, lr}
 8001c16:	b09f      	sub	sp, #124	@ 0x7c
 8001c18:	af02      	add	r7, sp, #8
	if (debug == 1)
 8001c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001c90 <printADC3data+0x7c>)
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d131      	bne.n	8001c86 <printADC3data+0x72>
	{
		printCR();
 8001c22:	f7fe fd8f 	bl	8000744 <printCR>
		printNumber("No data: ", ADC3_DMA_REQUESTS, 1);
 8001c26:	2201      	movs	r2, #1
 8001c28:	210b      	movs	r1, #11
 8001c2a:	481a      	ldr	r0, [pc, #104]	@ (8001c94 <printADC3data+0x80>)
 8001c2c:	f7fe fddc 	bl	80007e8 <printNumber>
		for (int i=0; i<ADC3_DMA_REQUESTS; i++)
 8001c30:	2300      	movs	r3, #0
 8001c32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001c34:	e024      	b.n	8001c80 <printADC3data+0x6c>
		{
			char text[100];
			char *p_text;
			float result = convertADC3data(i, &p_text);
 8001c36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c38:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8001c3c:	4611      	mov	r1, r2
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff feda 	bl	80019f8 <convertADC3data>
 8001c44:	ed87 0a1a 	vstr	s0, [r7, #104]	@ 0x68
			sprintf(text, "%2u %20s: %7u    (%6u)\n\r", i, p_text, (int) result, sADC.adc3_data[i]);
 8001c48:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001c4a:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001c4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c52:	ee17 4a90 	vmov	r4, s15
 8001c56:	4910      	ldr	r1, [pc, #64]	@ (8001c98 <printADC3data+0x84>)
 8001c58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c5a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001c5e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001c62:	4638      	mov	r0, r7
 8001c64:	9301      	str	r3, [sp, #4]
 8001c66:	9400      	str	r4, [sp, #0]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001c6c:	490b      	ldr	r1, [pc, #44]	@ (8001c9c <printADC3data+0x88>)
 8001c6e:	f010 fa49 	bl	8012104 <siprintf>
			printString(text);
 8001c72:	463b      	mov	r3, r7
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe fd75 	bl	8000764 <printString>
		for (int i=0; i<ADC3_DMA_REQUESTS; i++)
 8001c7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001c80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c82:	2b0a      	cmp	r3, #10
 8001c84:	ddd7      	ble.n	8001c36 <printADC3data+0x22>
		}
	}
}
 8001c86:	bf00      	nop
 8001c88:	3774      	adds	r7, #116	@ 0x74
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd90      	pop	{r4, r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	24000000 	.word	0x24000000
 8001c94:	080143e4 	.word	0x080143e4
 8001c98:	24000330 	.word	0x24000330
 8001c9c:	080145d0 	.word	0x080145d0

08001ca0 <measureVoltagesTemperaturesADC3>:

// Measure voltages and temperatures using ADC3
// After the measurement is done the function doneMeasuringVoltagesTemperaturesADC3 is called
void measureVoltagesTemperaturesADC3(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	// This will start the measurement of voltages and temperatures using ADC3
	sADC.adc3_reading = 1; //Started to read ADC3
 8001ca4:	4b05      	ldr	r3, [pc, #20]	@ (8001cbc <measureVoltagesTemperaturesADC3+0x1c>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f8a3 270c 	strh.w	r2, [r3, #1804]	@ 0x70c
	HAL_ADC_Start_DMA(&hadc3, (uint32_t *) sADC.adc3_data, ADC3_DMA_REQUESTS);
 8001cac:	220b      	movs	r2, #11
 8001cae:	4904      	ldr	r1, [pc, #16]	@ (8001cc0 <measureVoltagesTemperaturesADC3+0x20>)
 8001cb0:	4804      	ldr	r0, [pc, #16]	@ (8001cc4 <measureVoltagesTemperaturesADC3+0x24>)
 8001cb2:	f003 fbc1 	bl	8005438 <HAL_ADC_Start_DMA>

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	24000330 	.word	0x24000330
 8001cc0:	240007e0 	.word	0x240007e0
 8001cc4:	24000b64 	.word	0x24000b64

08001cc8 <doneMeasuringVoltagesTemperaturesADC3>:


// Done measuring voltages and temperatures
void doneMeasuringVoltagesTemperaturesADC3(uint32_t errorCode)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	sADC.adc3_reading = 0; //Done reading ADC3
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d00 <doneMeasuringVoltagesTemperaturesADC3+0x38>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f8a3 270c 	strh.w	r2, [r3, #1804]	@ 0x70c

	if (errorCode == HAL_ADC_ERROR_NONE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d006      	beq.n	8001cec <doneMeasuringVoltagesTemperaturesADC3+0x24>
		// TODO Check temperatures

	}
	else
	{
		printNumber("ADC12 Error Code: ", errorCode, 1);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4807      	ldr	r0, [pc, #28]	@ (8001d04 <doneMeasuringVoltagesTemperaturesADC3+0x3c>)
 8001ce8:	f7fe fd7e 	bl	80007e8 <printNumber>
	}


	//Start ADC1 and ADC2 measurements
	if (sFlashConfig.mode == RUN_MODE)
 8001cec:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <doneMeasuringVoltagesTemperaturesADC3+0x40>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <doneMeasuringVoltagesTemperaturesADC3+0x30>
		measureBridgePlasmaADC12();
 8001cf4:	f7ff fc24 	bl	8001540 <measureBridgePlasmaADC12>

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 8001cf8:	bf00      	nop
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	24000330 	.word	0x24000330
 8001d04:	08014490 	.word	0x08014490
 8001d08:	24000a44 	.word	0x24000a44

08001d0c <GetNumber>:

// Get an integer number from UART3. If the number is valid, the function returns 1, otherwise 0.
static uint8_t GetNumber(int *number)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	@ 0x28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
	char input;
	char s_input[MAX_INPUT];
	int pos = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	627b      	str	r3, [r7, #36]	@ 0x24
	//Wait for user input
	HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 100000);
 8001d18:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8001d1c:	4b2f      	ldr	r3, [pc, #188]	@ (8001ddc <GetNumber+0xd0>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	482f      	ldr	r0, [pc, #188]	@ (8001de0 <GetNumber+0xd4>)
 8001d22:	f00e f9be 	bl	80100a2 <HAL_UART_Receive>
	while (input != 13)
 8001d26:	e039      	b.n	8001d9c <GetNumber+0x90>
	{
		// Backspace?
		if ((input == 127) && (pos > 0))
 8001d28:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d2c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d2e:	d10e      	bne.n	8001d4e <GetNumber+0x42>
 8001d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	dd0b      	ble.n	8001d4e <GetNumber+0x42>
		{
			// Delete digit
			HAL_UART_Transmit(&huart3, (uint8_t *) &input, 1, 1000);
 8001d36:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8001d3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d3e:	2201      	movs	r2, #1
 8001d40:	4827      	ldr	r0, [pc, #156]	@ (8001de0 <GetNumber+0xd4>)
 8001d42:	f00e f920 	bl	800ff86 <HAL_UART_Transmit>
			pos--;
 8001d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d4c:	e018      	b.n	8001d80 <GetNumber+0x74>
		}
		// A digit?
		else if ((input >= 48) && (input <=57))
 8001d4e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d52:	2b2f      	cmp	r3, #47	@ 0x2f
 8001d54:	d914      	bls.n	8001d80 <GetNumber+0x74>
 8001d56:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d5a:	2b39      	cmp	r3, #57	@ 0x39
 8001d5c:	d810      	bhi.n	8001d80 <GetNumber+0x74>
		{
			// Echo digit and store it
			HAL_UART_Transmit(&huart3, (uint8_t *) &input, 1, 1000);
 8001d5e:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8001d62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d66:	2201      	movs	r2, #1
 8001d68:	481d      	ldr	r0, [pc, #116]	@ (8001de0 <GetNumber+0xd4>)
 8001d6a:	f00e f90c 	bl	800ff86 <HAL_UART_Transmit>
			s_input[pos++] = input;
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	627a      	str	r2, [r7, #36]	@ 0x24
 8001d74:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001d78:	3328      	adds	r3, #40	@ 0x28
 8001d7a:	443b      	add	r3, r7
 8001d7c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		}

		// Get next character
		if (pos < MAX_INPUT-1)
 8001d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d82:	2b12      	cmp	r3, #18
 8001d84:	dc07      	bgt.n	8001d96 <GetNumber+0x8a>
		{
			HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 100000);
 8001d86:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8001d8a:	4b14      	ldr	r3, [pc, #80]	@ (8001ddc <GetNumber+0xd0>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	4814      	ldr	r0, [pc, #80]	@ (8001de0 <GetNumber+0xd4>)
 8001d90:	f00e f987 	bl	80100a2 <HAL_UART_Receive>
 8001d94:	e002      	b.n	8001d9c <GetNumber+0x90>
		}
		else
		{
			input = 13; // Terminate while loop
 8001d96:	230d      	movs	r3, #13
 8001d98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	while (input != 13)
 8001d9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001da0:	2b0d      	cmp	r3, #13
 8001da2:	d1c1      	bne.n	8001d28 <GetNumber+0x1c>
		}
	}
	s_input[pos] = 0;
 8001da4:	f107 020c 	add.w	r2, r7, #12
 8001da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001daa:	4413      	add	r3, r2
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
	if (pos > 0)
 8001db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	dd07      	ble.n	8001dc6 <GetNumber+0xba>
		*number = atoi(s_input);
 8001db6:	f107 030c 	add.w	r3, r7, #12
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f00f fbc4 	bl	8011548 <atoi>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	601a      	str	r2, [r3, #0]
	return(pos > 0);
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	bfcc      	ite	gt
 8001dcc:	2301      	movgt	r3, #1
 8001dce:	2300      	movle	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3728      	adds	r7, #40	@ 0x28
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	000186a0 	.word	0x000186a0
 8001de0:	24000e34 	.word	0x24000e34

08001de4 <GetUint16Input>:

// Get an 16bit unsigned number from UAR3 and validate the input againts min and max values
static uint8_t GetUint16Input(uint16_t *input, uint8_t bValidate, uint16_t min, uint16_t max)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b0a0      	sub	sp, #128	@ 0x80
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	4608      	mov	r0, r1
 8001dee:	4611      	mov	r1, r2
 8001df0:	461a      	mov	r2, r3
 8001df2:	4603      	mov	r3, r0
 8001df4:	72fb      	strb	r3, [r7, #11]
 8001df6:	460b      	mov	r3, r1
 8001df8:	813b      	strh	r3, [r7, #8]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	80fb      	strh	r3, [r7, #6]
	int number;
	char s_output[100];
	uint8_t result;

	result = GetNumber(&number);
 8001dfe:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff ff82 	bl	8001d0c <GetNumber>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (bValidate)
 8001e0e:	7afb      	ldrb	r3, [r7, #11]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d02f      	beq.n	8001e74 <GetUint16Input+0x90>
	{
		if (result && (number >= min) && (number <= max))
 8001e14:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d013      	beq.n	8001e44 <GetUint16Input+0x60>
 8001e1c:	893a      	ldrh	r2, [r7, #8]
 8001e1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e20:	429a      	cmp	r2, r3
 8001e22:	dc0f      	bgt.n	8001e44 <GetUint16Input+0x60>
 8001e24:	88fa      	ldrh	r2, [r7, #6]
 8001e26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	db0b      	blt.n	8001e44 <GetUint16Input+0x60>
		{
			*input =  number;
 8001e2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, (uint8_t *) " - Ok\n\r", 7, 1000);
 8001e34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e38:	2207      	movs	r2, #7
 8001e3a:	4911      	ldr	r1, [pc, #68]	@ (8001e80 <GetUint16Input+0x9c>)
 8001e3c:	4811      	ldr	r0, [pc, #68]	@ (8001e84 <GetUint16Input+0xa0>)
 8001e3e:	f00e f8a2 	bl	800ff86 <HAL_UART_Transmit>
 8001e42:	e017      	b.n	8001e74 <GetUint16Input+0x90>
		}
		else
		{
			result = 0; //Indicate failure
 8001e44:	2300      	movs	r3, #0
 8001e46:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			sprintf(s_output, " - Invalid number, valid range %u - %u\n\r", min, max);
 8001e4a:	893a      	ldrh	r2, [r7, #8]
 8001e4c:	88fb      	ldrh	r3, [r7, #6]
 8001e4e:	f107 0014 	add.w	r0, r7, #20
 8001e52:	490d      	ldr	r1, [pc, #52]	@ (8001e88 <GetUint16Input+0xa4>)
 8001e54:	f010 f956 	bl	8012104 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe faa7 	bl	80003b0 <strlen>
 8001e62:	4603      	mov	r3, r0
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	f107 0114 	add.w	r1, r7, #20
 8001e6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e6e:	4805      	ldr	r0, [pc, #20]	@ (8001e84 <GetUint16Input+0xa0>)
 8001e70:	f00e f889 	bl	800ff86 <HAL_UART_Transmit>
		}
	}
	return(result);
 8001e74:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3780      	adds	r7, #128	@ 0x80
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	080145ec 	.word	0x080145ec
 8001e84:	24000e34 	.word	0x24000e34
 8001e88:	080145f4 	.word	0x080145f4

08001e8c <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef* hadc)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	// ADC1 is master and ADC2 is slave
	if (hadc->Instance == ADC1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0e      	ldr	r2, [pc, #56]	@ (8001ed4 <HAL_ADC_ErrorCallback+0x48>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d108      	bne.n	8001eb0 <HAL_ADC_ErrorCallback+0x24>
	{
		printNumber("** ERROR ** ADC12 Error Code: ", hadc->ErrorCode, 1);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	480b      	ldr	r0, [pc, #44]	@ (8001ed8 <HAL_ADC_ErrorCallback+0x4c>)
 8001eaa:	f7fe fc9d 	bl	80007e8 <printNumber>
	}
	else if ((hadc->Instance == ADC3))
	{
		printNumber("** ERROR ** ADC3 Error Code: ", hadc->ErrorCode, 1);
	}
}
 8001eae:	e00c      	b.n	8001eca <HAL_ADC_ErrorCallback+0x3e>
	else if ((hadc->Instance == ADC3))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a09      	ldr	r2, [pc, #36]	@ (8001edc <HAL_ADC_ErrorCallback+0x50>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d107      	bne.n	8001eca <HAL_ADC_ErrorCallback+0x3e>
		printNumber("** ERROR ** ADC3 Error Code: ", hadc->ErrorCode, 1);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4806      	ldr	r0, [pc, #24]	@ (8001ee0 <HAL_ADC_ErrorCallback+0x54>)
 8001ec6:	f7fe fc8f 	bl	80007e8 <printNumber>
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40022000 	.word	0x40022000
 8001ed8:	08014620 	.word	0x08014620
 8001edc:	58026000 	.word	0x58026000
 8001ee0:	08014640 	.word	0x08014640

08001ee4 <HAL_ADC_ConvCpltCallback>:

// ADC conversion and DMA transfer complete
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]

	// ADC1 is master and ADC2 is slave
	if (hadc->Instance == ADC1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a10      	ldr	r2, [pc, #64]	@ (8001f34 <HAL_ADC_ConvCpltCallback+0x50>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d105      	bne.n	8001f02 <HAL_ADC_ConvCpltCallback+0x1e>
	{
		//HAL_ADCEx_MultiModeStop_DMA(&hadc1);
		doneMeasuringBridgePlasmaADC12(hadc->ErrorCode);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fb76 	bl	80015ec <doneMeasuringBridgePlasmaADC12>
	else
	{
		HAL_UART_Transmit(&huart3, (uint8_t *) "** ERROR ** Unknown ADC\n\r", 25, 1000);
		printCR();
	}
}
 8001f00:	e013      	b.n	8001f2a <HAL_ADC_ConvCpltCallback+0x46>
	else if (hadc->Instance == ADC3)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a0c      	ldr	r2, [pc, #48]	@ (8001f38 <HAL_ADC_ConvCpltCallback+0x54>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d105      	bne.n	8001f18 <HAL_ADC_ConvCpltCallback+0x34>
		doneMeasuringVoltagesTemperaturesADC3(hadc->ErrorCode);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fed9 	bl	8001cc8 <doneMeasuringVoltagesTemperaturesADC3>
}
 8001f16:	e008      	b.n	8001f2a <HAL_ADC_ConvCpltCallback+0x46>
		HAL_UART_Transmit(&huart3, (uint8_t *) "** ERROR ** Unknown ADC\n\r", 25, 1000);
 8001f18:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f1c:	2219      	movs	r2, #25
 8001f1e:	4907      	ldr	r1, [pc, #28]	@ (8001f3c <HAL_ADC_ConvCpltCallback+0x58>)
 8001f20:	4807      	ldr	r0, [pc, #28]	@ (8001f40 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001f22:	f00e f830 	bl	800ff86 <HAL_UART_Transmit>
		printCR();
 8001f26:	f7fe fc0d 	bl	8000744 <printCR>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40022000 	.word	0x40022000
 8001f38:	58026000 	.word	0x58026000
 8001f3c:	08014660 	.word	0x08014660
 8001f40:	24000e34 	.word	0x24000e34

08001f44 <PowerOffLowSupplies>:

//Power Off Supplies in order3.3V switch and 15V
void PowerOffLowSupplies(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
	if (powerStatus == V500_OFF)
 8001f48:	4b0d      	ldr	r3, [pc, #52]	@ (8001f80 <PowerOffLowSupplies+0x3c>)
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d110      	bne.n	8001f72 <PowerOffLowSupplies+0x2e>
	{
		//Power off 3.3V switch voltage
		HAL_GPIO_WritePin(OUT_3V3_SWITCH_GPIO_Port, OUT_3V3_SWITCH_Pin, GPIO_PIN_SET);
 8001f50:	2201      	movs	r2, #1
 8001f52:	2101      	movs	r1, #1
 8001f54:	480b      	ldr	r0, [pc, #44]	@ (8001f84 <PowerOffLowSupplies+0x40>)
 8001f56:	f008 fe27 	bl	800aba8 <HAL_GPIO_WritePin>
		HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	f002 fbee 	bl	800473c <HAL_Delay>

		//Power off 15V
		HAL_GPIO_WritePin(OUT_15V_ENABLE_GPIO_Port, OUT_15V_ENABLE_Pin, GPIO_PIN_SET);		//There is an inverter between MCU and the output, thus SET
 8001f60:	2201      	movs	r2, #1
 8001f62:	2102      	movs	r1, #2
 8001f64:	4807      	ldr	r0, [pc, #28]	@ (8001f84 <PowerOffLowSupplies+0x40>)
 8001f66:	f008 fe1f 	bl	800aba8 <HAL_GPIO_WritePin>
		HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001f6a:	2001      	movs	r0, #1
 8001f6c:	f002 fbe6 	bl	800473c <HAL_Delay>
	else
	{
		printString("** ERROR ** PowerOffLowSupplies: 500V is On\n\r");
		printCR();
	}
}
 8001f70:	e004      	b.n	8001f7c <PowerOffLowSupplies+0x38>
		printString("** ERROR ** PowerOffLowSupplies: 500V is On\n\r");
 8001f72:	4805      	ldr	r0, [pc, #20]	@ (8001f88 <PowerOffLowSupplies+0x44>)
 8001f74:	f7fe fbf6 	bl	8000764 <printString>
		printCR();
 8001f78:	f7fe fbe4 	bl	8000744 <printCR>
}
 8001f7c:	bf00      	nop
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	24000a40 	.word	0x24000a40
 8001f84:	58020c00 	.word	0x58020c00
 8001f88:	0801467c 	.word	0x0801467c

08001f8c <PowerOffHighSupplies>:


//Power Off Supply 500V
void PowerOffHighSupplies(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
	//Make sure the H-bridge outputs are zero before turning off power
	stopHbridge();
 8001f90:	f7fe fcb8 	bl	8000904 <stopHbridge>

	//Power off 500V
	HAL_GPIO_WritePin(OUT_500V_ENABLE_GPIO_Port, OUT_500V_ENABLE_Pin, GPIO_PIN_SET);	//There is an inverter between MCU and the output, thus SET
 8001f94:	2201      	movs	r2, #1
 8001f96:	2101      	movs	r1, #1
 8001f98:	480b      	ldr	r0, [pc, #44]	@ (8001fc8 <PowerOffHighSupplies+0x3c>)
 8001f9a:	f008 fe05 	bl	800aba8 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001f9e:	2001      	movs	r0, #1
 8001fa0:	f002 fbcc 	bl	800473c <HAL_Delay>

	//Disable Line Drive 1
	HAL_GPIO_WritePin(LINE_DRIVER1_ENABLE_GPIO_Port, LINE_DRIVER1_ENABLE_Pin, GPIO_PIN_SET);
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	2104      	movs	r1, #4
 8001fa8:	4808      	ldr	r0, [pc, #32]	@ (8001fcc <PowerOffHighSupplies+0x40>)
 8001faa:	f008 fdfd 	bl	800aba8 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001fae:	2001      	movs	r0, #1
 8001fb0:	f002 fbc4 	bl	800473c <HAL_Delay>

	//Signal to robot controller all power supplies are inactive.
	HAL_GPIO_WritePin(LED_ACTIVE_GPIO_Port, LED_ACTIVE_Pin, GPIO_PIN_SET);			//There is an inverter between MCU and the output, thus SET
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	4805      	ldr	r0, [pc, #20]	@ (8001fd0 <PowerOffHighSupplies+0x44>)
 8001fba:	f008 fdf5 	bl	800aba8 <HAL_GPIO_WritePin>

	powerStatus = V500_OFF;
 8001fbe:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <PowerOffHighSupplies+0x48>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	801a      	strh	r2, [r3, #0]
}
 8001fc4:	bf00      	nop
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	58021800 	.word	0x58021800
 8001fcc:	58020400 	.word	0x58020400
 8001fd0:	58021000 	.word	0x58021000
 8001fd4:	24000a40 	.word	0x24000a40

08001fd8 <PowerOffSupplies>:

void PowerOffSupplies(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
	PowerOffHighSupplies();
 8001fdc:	f7ff ffd6 	bl	8001f8c <PowerOffHighSupplies>
	PowerOffLowSupplies();
 8001fe0:	f7ff ffb0 	bl	8001f44 <PowerOffLowSupplies>
}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <PowerOnLowSupplies>:

//Power On Supplies in order 15V, 3.3V switch
//Returns 1 if the power up sequence was successful, and 0 if it failed
int PowerOnLowSupplies(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
	//Power on 15V
	//printString("\n\rPower on 15V - ");
	HAL_GPIO_WritePin(OUT_15V_ENABLE_GPIO_Port, OUT_15V_ENABLE_Pin, GPIO_PIN_RESET);	//There is an inverter between MCU and the output, thus RESET
 8001fec:	2200      	movs	r2, #0
 8001fee:	2102      	movs	r1, #2
 8001ff0:	4818      	ldr	r0, [pc, #96]	@ (8002054 <PowerOnLowSupplies+0x6c>)
 8001ff2:	f008 fdd9 	bl	800aba8 <HAL_GPIO_WritePin>
	printString("\n\rPower on 15V - ");
 8001ff6:	4818      	ldr	r0, [pc, #96]	@ (8002058 <PowerOnLowSupplies+0x70>)
 8001ff8:	f7fe fbb4 	bl	8000764 <printString>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	f002 fb9d 	bl	800473c <HAL_Delay>

	//Start reading ADC3 channels
	measureVoltagesTemperaturesADC3();
 8002002:	f7ff fe4d 	bl	8001ca0 <measureVoltagesTemperaturesADC3>
	//Wait until ADC3 reading is done
	while (sADC.adc3_reading) ;
 8002006:	bf00      	nop
 8002008:	4b14      	ldr	r3, [pc, #80]	@ (800205c <PowerOnLowSupplies+0x74>)
 800200a:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	@ 0x70c
 800200e:	b29b      	uxth	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1f9      	bne.n	8002008 <PowerOnLowSupplies+0x20>

	//Check 15V voltage
	if (sADC.adc3_data[ADC3_15V] >= sADC3threshold[ADC3_15V])
 8002014:	4b11      	ldr	r3, [pc, #68]	@ (800205c <PowerOnLowSupplies+0x74>)
 8002016:	f8b3 24b2 	ldrh.w	r2, [r3, #1202]	@ 0x4b2
 800201a:	4b11      	ldr	r3, [pc, #68]	@ (8002060 <PowerOnLowSupplies+0x78>)
 800201c:	885b      	ldrh	r3, [r3, #2]
 800201e:	429a      	cmp	r2, r3
 8002020:	d30f      	bcc.n	8002042 <PowerOnLowSupplies+0x5a>
		printString("Ok");
 8002022:	4810      	ldr	r0, [pc, #64]	@ (8002064 <PowerOnLowSupplies+0x7c>)
 8002024:	f7fe fb9e 	bl	8000764 <printString>
		PowerOffLowSupplies();
		return(0);
	}

	//Power on 3.3V switch voltage
	printString("\n\rPower on 3.3V switch");
 8002028:	480f      	ldr	r0, [pc, #60]	@ (8002068 <PowerOnLowSupplies+0x80>)
 800202a:	f7fe fb9b 	bl	8000764 <printString>
	HAL_GPIO_WritePin(OUT_3V3_SWITCH_GPIO_Port, OUT_3V3_SWITCH_Pin, GPIO_PIN_RESET);
 800202e:	2200      	movs	r2, #0
 8002030:	2101      	movs	r1, #1
 8002032:	4808      	ldr	r0, [pc, #32]	@ (8002054 <PowerOnLowSupplies+0x6c>)
 8002034:	f008 fdb8 	bl	800aba8 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8002038:	2001      	movs	r0, #1
 800203a:	f002 fb7f 	bl	800473c <HAL_Delay>

	return(1);
 800203e:	2301      	movs	r3, #1
 8002040:	e005      	b.n	800204e <PowerOnLowSupplies+0x66>
		printString("Fail");
 8002042:	480a      	ldr	r0, [pc, #40]	@ (800206c <PowerOnLowSupplies+0x84>)
 8002044:	f7fe fb8e 	bl	8000764 <printString>
		PowerOffLowSupplies();
 8002048:	f7ff ff7c 	bl	8001f44 <PowerOffLowSupplies>
		return(0);
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	58020c00 	.word	0x58020c00
 8002058:	080146ac 	.word	0x080146ac
 800205c:	24000330 	.word	0x24000330
 8002060:	24000004 	.word	0x24000004
 8002064:	080146c0 	.word	0x080146c0
 8002068:	080146cc 	.word	0x080146cc
 800206c:	080146c4 	.word	0x080146c4

08002070 <PowerOnHighSupplies>:

//Power On Supply 500V
//Returns 1 if the power up was successful, and 0 if it failed
int PowerOnHighSupplies(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
	stopHbridge(); 	//Make sure the H-bridge outputs are zero before enabling the line driver
 8002074:	f7fe fc46 	bl	8000904 <stopHbridge>

	//Enable Line Drive 1
	printString("\n\rEnable Line Drive 1");
 8002078:	481b      	ldr	r0, [pc, #108]	@ (80020e8 <PowerOnHighSupplies+0x78>)
 800207a:	f7fe fb73 	bl	8000764 <printString>
	HAL_GPIO_WritePin(LINE_DRIVER1_ENABLE_GPIO_Port, LINE_DRIVER1_ENABLE_Pin, GPIO_PIN_RESET);
 800207e:	2200      	movs	r2, #0
 8002080:	2104      	movs	r1, #4
 8002082:	481a      	ldr	r0, [pc, #104]	@ (80020ec <PowerOnHighSupplies+0x7c>)
 8002084:	f008 fd90 	bl	800aba8 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8002088:	2001      	movs	r0, #1
 800208a:	f002 fb57 	bl	800473c <HAL_Delay>

	//Power on 500V
	printString("\n\rPower on 500V - ");
 800208e:	4818      	ldr	r0, [pc, #96]	@ (80020f0 <PowerOnHighSupplies+0x80>)
 8002090:	f7fe fb68 	bl	8000764 <printString>
	HAL_GPIO_WritePin(OUT_500V_ENABLE_GPIO_Port, OUT_500V_ENABLE_Pin, GPIO_PIN_RESET);	//There is an inverter between MCU and the output, thus RESET
 8002094:	2200      	movs	r2, #0
 8002096:	2101      	movs	r1, #1
 8002098:	4816      	ldr	r0, [pc, #88]	@ (80020f4 <PowerOnHighSupplies+0x84>)
 800209a:	f008 fd85 	bl	800aba8 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 800209e:	2001      	movs	r0, #1
 80020a0:	f002 fb4c 	bl	800473c <HAL_Delay>

	//Start reading ADC3 channels
	measureVoltagesTemperaturesADC3();
 80020a4:	f7ff fdfc 	bl	8001ca0 <measureVoltagesTemperaturesADC3>
	//Wait until ADC reading is done
	while (sADC.adc3_reading) ;
 80020a8:	bf00      	nop
 80020aa:	4b13      	ldr	r3, [pc, #76]	@ (80020f8 <PowerOnHighSupplies+0x88>)
 80020ac:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	@ 0x70c
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f9      	bne.n	80020aa <PowerOnHighSupplies+0x3a>

	//Check 500V voltage
	if (sADC.adc3_data[ADC3_500VDC] >= sADC3threshold[ADC3_500VDC])
 80020b6:	4b10      	ldr	r3, [pc, #64]	@ (80020f8 <PowerOnHighSupplies+0x88>)
 80020b8:	f8b3 24ba 	ldrh.w	r2, [r3, #1210]	@ 0x4ba
 80020bc:	4b0f      	ldr	r3, [pc, #60]	@ (80020fc <PowerOnHighSupplies+0x8c>)
 80020be:	895b      	ldrh	r3, [r3, #10]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d303      	bcc.n	80020cc <PowerOnHighSupplies+0x5c>
		printString("Ok");
 80020c4:	480e      	ldr	r0, [pc, #56]	@ (8002100 <PowerOnHighSupplies+0x90>)
 80020c6:	f7fe fb4d 	bl	8000764 <printString>
 80020ca:	e002      	b.n	80020d2 <PowerOnHighSupplies+0x62>
	else
	{
		//printString("Fail");
		printString("debug");
 80020cc:	480d      	ldr	r0, [pc, #52]	@ (8002104 <PowerOnHighSupplies+0x94>)
 80020ce:	f7fe fb49 	bl	8000764 <printString>
		//PowerOffHighSupplies();
		//return(0);
	}

	//Signal to robot controller all power supplies are active
	HAL_GPIO_WritePin(LED_ACTIVE_GPIO_Port, LED_ACTIVE_Pin, GPIO_PIN_RESET);	//There is an inverter between MCU and the output, thus RESET
 80020d2:	2200      	movs	r2, #0
 80020d4:	2101      	movs	r1, #1
 80020d6:	480c      	ldr	r0, [pc, #48]	@ (8002108 <PowerOnHighSupplies+0x98>)
 80020d8:	f008 fd66 	bl	800aba8 <HAL_GPIO_WritePin>

	powerStatus = V500_ON;
 80020dc:	4b0b      	ldr	r3, [pc, #44]	@ (800210c <PowerOnHighSupplies+0x9c>)
 80020de:	2201      	movs	r2, #1
 80020e0:	801a      	strh	r2, [r3, #0]

	return(1);
 80020e2:	2301      	movs	r3, #1
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	080146e4 	.word	0x080146e4
 80020ec:	58020400 	.word	0x58020400
 80020f0:	080146fc 	.word	0x080146fc
 80020f4:	58021800 	.word	0x58021800
 80020f8:	24000330 	.word	0x24000330
 80020fc:	24000004 	.word	0x24000004
 8002100:	080146c0 	.word	0x080146c0
 8002104:	08014710 	.word	0x08014710
 8002108:	58021000 	.word	0x58021000
 800210c:	24000a40 	.word	0x24000a40

08002110 <HAL_GPIO_EXTI_Callback>:

// GPIO interrupt handler
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	80fb      	strh	r3, [r7, #6]
	if (sFlashConfig.mode == RUN_MODE)
 800211a:	4b07      	ldr	r3, [pc, #28]	@ (8002138 <HAL_GPIO_EXTI_Callback+0x28>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d105      	bne.n	800212e <HAL_GPIO_EXTI_Callback+0x1e>
	{
		// Power off request received
		if(GPIO_Pin == POWER_OFF_IRQ_Pin)
 8002122:	88fb      	ldrh	r3, [r7, #6]
 8002124:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002128:	d101      	bne.n	800212e <HAL_GPIO_EXTI_Callback+0x1e>
			PowerOffSupplies();
 800212a:	f7ff ff55 	bl	8001fd8 <PowerOffSupplies>
	}
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	24000a44 	.word	0x24000a44

0800213c <InitializeConfigMenu>:

// Initialize the UART3 configuration menu
static void InitializeConfigMenu(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
	int item = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	607b      	str	r3, [r7, #4]

	config_menu[item++] = "\n\rPlasma Driver Configuration Menu";
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	1c5a      	adds	r2, r3, #1
 800214a:	607a      	str	r2, [r7, #4]
 800214c:	4a0c      	ldr	r2, [pc, #48]	@ (8002180 <InitializeConfigMenu+0x44>)
 800214e:	490d      	ldr	r1, [pc, #52]	@ (8002184 <InitializeConfigMenu+0x48>)
 8002150:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	config_menu[item++] = "   m: Change mode (Test/Run)";
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	4a09      	ldr	r2, [pc, #36]	@ (8002180 <InitializeConfigMenu+0x44>)
 800215c:	490a      	ldr	r1, [pc, #40]	@ (8002188 <InitializeConfigMenu+0x4c>)
 800215e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if (item > CONFIG_MENU_SIZE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b02      	cmp	r3, #2
 8002166:	dd06      	ble.n	8002176 <InitializeConfigMenu+0x3a>
		HAL_UART_Transmit(&huart3, (uint8_t *) "\n\rIncrease CONFIG_MENU_SIZE", 20, 1000);
 8002168:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800216c:	2214      	movs	r2, #20
 800216e:	4907      	ldr	r1, [pc, #28]	@ (800218c <InitializeConfigMenu+0x50>)
 8002170:	4807      	ldr	r0, [pc, #28]	@ (8002190 <InitializeConfigMenu+0x54>)
 8002172:	f00d ff08 	bl	800ff86 <HAL_UART_Transmit>

}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	24000328 	.word	0x24000328
 8002184:	08014718 	.word	0x08014718
 8002188:	0801473c 	.word	0x0801473c
 800218c:	0801475c 	.word	0x0801475c
 8002190:	24000e34 	.word	0x24000e34

08002194 <InitializeMenu>:

// Initialize the UART3 menu
static void InitializeMenu(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
	int item = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	607b      	str	r3, [r7, #4]

	//Clear previous menu
	for (int i=0; i < MAX_MENU_SIZE; ++i)
 800219e:	2300      	movs	r3, #0
 80021a0:	603b      	str	r3, [r7, #0]
 80021a2:	e007      	b.n	80021b4 <InitializeMenu+0x20>
	{
		menu[i] = "";
 80021a4:	4a4f      	ldr	r2, [pc, #316]	@ (80022e4 <InitializeMenu+0x150>)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	494f      	ldr	r1, [pc, #316]	@ (80022e8 <InitializeMenu+0x154>)
 80021aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0; i < MAX_MENU_SIZE; ++i)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	3301      	adds	r3, #1
 80021b2:	603b      	str	r3, [r7, #0]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	2b0d      	cmp	r3, #13
 80021b8:	ddf4      	ble.n	80021a4 <InitializeMenu+0x10>
	}

	if (sFlashConfig.mode == TEST_MODE)
 80021ba:	4b4c      	ldr	r3, [pc, #304]	@ (80022ec <InitializeMenu+0x158>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d162      	bne.n	8002288 <InitializeMenu+0xf4>
	{
		menu[item++] = "\n\rPlasma Driver TEST Menu";
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	1c5a      	adds	r2, r3, #1
 80021c6:	607a      	str	r2, [r7, #4]
 80021c8:	4a46      	ldr	r2, [pc, #280]	@ (80022e4 <InitializeMenu+0x150>)
 80021ca:	4949      	ldr	r1, [pc, #292]	@ (80022f0 <InitializeMenu+0x15c>)
 80021cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   p: Power on supplies";
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	607a      	str	r2, [r7, #4]
 80021d6:	4a43      	ldr	r2, [pc, #268]	@ (80022e4 <InitializeMenu+0x150>)
 80021d8:	4946      	ldr	r1, [pc, #280]	@ (80022f4 <InitializeMenu+0x160>)
 80021da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   o: Power off supplies";
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	1c5a      	adds	r2, r3, #1
 80021e2:	607a      	str	r2, [r7, #4]
 80021e4:	4a3f      	ldr	r2, [pc, #252]	@ (80022e4 <InitializeMenu+0x150>)
 80021e6:	4944      	ldr	r1, [pc, #272]	@ (80022f8 <InitializeMenu+0x164>)
 80021e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   s: Start/stop driving H-Bridge";
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	607a      	str	r2, [r7, #4]
 80021f2:	4a3c      	ldr	r2, [pc, #240]	@ (80022e4 <InitializeMenu+0x150>)
 80021f4:	4941      	ldr	r1, [pc, #260]	@ (80022fc <InitializeMenu+0x168>)
 80021f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   f: Set H-bridge frequency (Hz)";
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	607a      	str	r2, [r7, #4]
 8002200:	4a38      	ldr	r2, [pc, #224]	@ (80022e4 <InitializeMenu+0x150>)
 8002202:	493f      	ldr	r1, [pc, #252]	@ (8002300 <InitializeMenu+0x16c>)
 8002204:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   d: Set H-bridge dead time (%)";
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	607a      	str	r2, [r7, #4]
 800220e:	4a35      	ldr	r2, [pc, #212]	@ (80022e4 <InitializeMenu+0x150>)
 8002210:	493c      	ldr	r1, [pc, #240]	@ (8002304 <InitializeMenu+0x170>)
 8002212:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   a: Start ADC1 and ADC2 measurement";
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	1c5a      	adds	r2, r3, #1
 800221a:	607a      	str	r2, [r7, #4]
 800221c:	4a31      	ldr	r2, [pc, #196]	@ (80022e4 <InitializeMenu+0x150>)
 800221e:	493a      	ldr	r1, [pc, #232]	@ (8002308 <InitializeMenu+0x174>)
 8002220:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   b: Start ADC3 measurement";
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	1c5a      	adds	r2, r3, #1
 8002228:	607a      	str	r2, [r7, #4]
 800222a:	4a2e      	ldr	r2, [pc, #184]	@ (80022e4 <InitializeMenu+0x150>)
 800222c:	4937      	ldr	r1, [pc, #220]	@ (800230c <InitializeMenu+0x178>)
 800222e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   q: Frequency correction";
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	1c5a      	adds	r2, r3, #1
 8002236:	607a      	str	r2, [r7, #4]
 8002238:	4a2a      	ldr	r2, [pc, #168]	@ (80022e4 <InitializeMenu+0x150>)
 800223a:	4935      	ldr	r1, [pc, #212]	@ (8002310 <InitializeMenu+0x17c>)
 800223c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   z: Debug output (On/Off)";
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	607a      	str	r2, [r7, #4]
 8002246:	4a27      	ldr	r2, [pc, #156]	@ (80022e4 <InitializeMenu+0x150>)
 8002248:	4932      	ldr	r1, [pc, #200]	@ (8002314 <InitializeMenu+0x180>)
 800224a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   c: Show/Change configuration";
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	1c5a      	adds	r2, r3, #1
 8002252:	607a      	str	r2, [r7, #4]
 8002254:	4a23      	ldr	r2, [pc, #140]	@ (80022e4 <InitializeMenu+0x150>)
 8002256:	4930      	ldr	r1, [pc, #192]	@ (8002318 <InitializeMenu+0x184>)
 8002258:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   t: Test GPIO";
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	607a      	str	r2, [r7, #4]
 8002262:	4a20      	ldr	r2, [pc, #128]	@ (80022e4 <InitializeMenu+0x150>)
 8002264:	492d      	ldr	r1, [pc, #180]	@ (800231c <InitializeMenu+0x188>)
 8002266:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   y: Auto Frequency Adjustment";
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	1c5a      	adds	r2, r3, #1
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	4a1c      	ldr	r2, [pc, #112]	@ (80022e4 <InitializeMenu+0x150>)
 8002272:	492b      	ldr	r1, [pc, #172]	@ (8002320 <InitializeMenu+0x18c>)
 8002274:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   u: Auto Voltage Adjustment";
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	607a      	str	r2, [r7, #4]
 800227e:	4a19      	ldr	r2, [pc, #100]	@ (80022e4 <InitializeMenu+0x150>)
 8002280:	4928      	ldr	r1, [pc, #160]	@ (8002324 <InitializeMenu+0x190>)
 8002282:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8002286:	e019      	b.n	80022bc <InitializeMenu+0x128>
	}
	else if ((sFlashConfig.mode == RUN_MODE))
 8002288:	4b18      	ldr	r3, [pc, #96]	@ (80022ec <InitializeMenu+0x158>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d10e      	bne.n	80022ae <InitializeMenu+0x11a>
	{
		menu[item++] = "\n\rPlasma Driver RUN Menu";
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	1c5a      	adds	r2, r3, #1
 8002294:	607a      	str	r2, [r7, #4]
 8002296:	4a13      	ldr	r2, [pc, #76]	@ (80022e4 <InitializeMenu+0x150>)
 8002298:	4923      	ldr	r1, [pc, #140]	@ (8002328 <InitializeMenu+0x194>)
 800229a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   c: Show/Change current configuration";
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	607a      	str	r2, [r7, #4]
 80022a4:	4a0f      	ldr	r2, [pc, #60]	@ (80022e4 <InitializeMenu+0x150>)
 80022a6:	4921      	ldr	r1, [pc, #132]	@ (800232c <InitializeMenu+0x198>)
 80022a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80022ac:	e006      	b.n	80022bc <InitializeMenu+0x128>
	}
	else
	{
		menu[item++] = "\n\rERROR SETTING UP MENU";
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	1c5a      	adds	r2, r3, #1
 80022b2:	607a      	str	r2, [r7, #4]
 80022b4:	4a0b      	ldr	r2, [pc, #44]	@ (80022e4 <InitializeMenu+0x150>)
 80022b6:	491e      	ldr	r1, [pc, #120]	@ (8002330 <InitializeMenu+0x19c>)
 80022b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	menu_size = item;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	b29a      	uxth	r2, r3
 80022c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002334 <InitializeMenu+0x1a0>)
 80022c2:	801a      	strh	r2, [r3, #0]

	if (menu_size> MAX_MENU_SIZE)
 80022c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002334 <InitializeMenu+0x1a0>)
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	2b0e      	cmp	r3, #14
 80022ca:	d906      	bls.n	80022da <InitializeMenu+0x146>
		HAL_UART_Transmit(&huart3, (uint8_t *) "\n\rIncrease MENU_SIZE", 20, 1000);
 80022cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022d0:	2214      	movs	r2, #20
 80022d2:	4919      	ldr	r1, [pc, #100]	@ (8002338 <InitializeMenu+0x1a4>)
 80022d4:	4819      	ldr	r0, [pc, #100]	@ (800233c <InitializeMenu+0x1a8>)
 80022d6:	f00d fe56 	bl	800ff86 <HAL_UART_Transmit>

}
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	240002ec 	.word	0x240002ec
 80022e8:	08014778 	.word	0x08014778
 80022ec:	24000a44 	.word	0x24000a44
 80022f0:	0801477c 	.word	0x0801477c
 80022f4:	08014798 	.word	0x08014798
 80022f8:	080147b0 	.word	0x080147b0
 80022fc:	080147cc 	.word	0x080147cc
 8002300:	080147f0 	.word	0x080147f0
 8002304:	08014814 	.word	0x08014814
 8002308:	08014838 	.word	0x08014838
 800230c:	08014860 	.word	0x08014860
 8002310:	08014880 	.word	0x08014880
 8002314:	0801489c 	.word	0x0801489c
 8002318:	080148b8 	.word	0x080148b8
 800231c:	080148d8 	.word	0x080148d8
 8002320:	080148e8 	.word	0x080148e8
 8002324:	08014908 	.word	0x08014908
 8002328:	08014928 	.word	0x08014928
 800232c:	08014944 	.word	0x08014944
 8002330:	0801496c 	.word	0x0801496c
 8002334:	24000324 	.word	0x24000324
 8002338:	08014984 	.word	0x08014984
 800233c:	24000e34 	.word	0x24000e34

08002340 <ShowChangeConfigFlash>:

// Show configuration. Add option to change configuration
void ShowChangeConfigFlash(void)
{
 8002340:	b590      	push	{r4, r7, lr}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
	uint16_t aYes;
	uint16_t mode;
	char input;

	printConfigFlash();
 8002346:	f7fe fa23 	bl	8000790 <printConfigFlash>
	printString("\n\rChange configuration (0:No 1:Yes)? ");
 800234a:	482e      	ldr	r0, [pc, #184]	@ (8002404 <ShowChangeConfigFlash+0xc4>)
 800234c:	f7fe fa0a 	bl	8000764 <printString>
	if (GetUint16Input(&aYes, 1, 0, 1))
 8002350:	f107 000a 	add.w	r0, r7, #10
 8002354:	2301      	movs	r3, #1
 8002356:	2200      	movs	r2, #0
 8002358:	2101      	movs	r1, #1
 800235a:	f7ff fd43 	bl	8001de4 <GetUint16Input>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d04b      	beq.n	80023fc <ShowChangeConfigFlash+0xbc>
	{
		if (aYes)
 8002364:	897b      	ldrh	r3, [r7, #10]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d048      	beq.n	80023fc <ShowChangeConfigFlash+0xbc>
		{
			for (int i=0; i<CONFIG_MENU_SIZE; i++)
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	e017      	b.n	80023a0 <ShowChangeConfigFlash+0x60>
			{
				HAL_UART_Transmit(&huart3, (uint8_t *) config_menu[i], strlen(config_menu[i]), 1000);
 8002370:	4a25      	ldr	r2, [pc, #148]	@ (8002408 <ShowChangeConfigFlash+0xc8>)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002378:	4a23      	ldr	r2, [pc, #140]	@ (8002408 <ShowChangeConfigFlash+0xc8>)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe f815 	bl	80003b0 <strlen>
 8002386:	4603      	mov	r3, r0
 8002388:	b29a      	uxth	r2, r3
 800238a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800238e:	4621      	mov	r1, r4
 8002390:	481e      	ldr	r0, [pc, #120]	@ (800240c <ShowChangeConfigFlash+0xcc>)
 8002392:	f00d fdf8 	bl	800ff86 <HAL_UART_Transmit>
				printCR();
 8002396:	f7fe f9d5 	bl	8000744 <printCR>
			for (int i=0; i<CONFIG_MENU_SIZE; i++)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	3301      	adds	r3, #1
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	dde4      	ble.n	8002370 <ShowChangeConfigFlash+0x30>
			}
			printCR();
 80023a6:	f7fe f9cd 	bl	8000744 <printCR>

			//Wait for user input
			if (HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 60000) == HAL_OK)
 80023aa:	1df9      	adds	r1, r7, #7
 80023ac:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80023b0:	2201      	movs	r2, #1
 80023b2:	4816      	ldr	r0, [pc, #88]	@ (800240c <ShowChangeConfigFlash+0xcc>)
 80023b4:	f00d fe75 	bl	80100a2 <HAL_UART_Receive>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d11e      	bne.n	80023fc <ShowChangeConfigFlash+0xbc>
			{
				switch (input)
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	2b6d      	cmp	r3, #109	@ 0x6d
 80023c2:	d11b      	bne.n	80023fc <ShowChangeConfigFlash+0xbc>
				{
					case 'm': //Change mode
						printString("\n\rChange mode (0:Test 1:Run)? ");
 80023c4:	4812      	ldr	r0, [pc, #72]	@ (8002410 <ShowChangeConfigFlash+0xd0>)
 80023c6:	f7fe f9cd 	bl	8000764 <printString>
						if (GetUint16Input(&mode, 1, 0, 1))
 80023ca:	f107 0008 	add.w	r0, r7, #8
 80023ce:	2301      	movs	r3, #1
 80023d0:	2200      	movs	r2, #0
 80023d2:	2101      	movs	r1, #1
 80023d4:	f7ff fd06 	bl	8001de4 <GetUint16Input>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00d      	beq.n	80023fa <ShowChangeConfigFlash+0xba>
						{   // Data entry valid
							if (sFlashConfig.mode != mode)
 80023de:	4b0d      	ldr	r3, [pc, #52]	@ (8002414 <ShowChangeConfigFlash+0xd4>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	461a      	mov	r2, r3
 80023e4:	893b      	ldrh	r3, [r7, #8]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d007      	beq.n	80023fa <ShowChangeConfigFlash+0xba>
							{
								sFlashConfig.mode = mode;
 80023ea:	893b      	ldrh	r3, [r7, #8]
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	4b09      	ldr	r3, [pc, #36]	@ (8002414 <ShowChangeConfigFlash+0xd4>)
 80023f0:	701a      	strb	r2, [r3, #0]
								InitializeMenu();
 80023f2:	f7ff fecf 	bl	8002194 <InitializeMenu>
								writeConfigFlash();
 80023f6:	f7fe f95b 	bl	80006b0 <writeConfigFlash>
							}
						}
					break;
 80023fa:	bf00      	nop
				}
			}
		}
	}
}
 80023fc:	bf00      	nop
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	bd90      	pop	{r4, r7, pc}
 8002404:	0801499c 	.word	0x0801499c
 8002408:	24000328 	.word	0x24000328
 800240c:	24000e34 	.word	0x24000e34
 8002410:	080149c4 	.word	0x080149c4
 8002414:	24000a44 	.word	0x24000a44

08002418 <testGPIO>:

//Test GPIO settings
void testGPIO(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0

		printString("\n\rClear LED_GREEN");
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
		GetUint16Input(&aYes, 1, 0, 1);
*/
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <RunModeAction>:

// Action table for the run mode menu
static void RunModeAction(char input)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	4603      	mov	r3, r0
 800242e:	71fb      	strb	r3, [r7, #7]
	switch (input)
 8002430:	79fb      	ldrb	r3, [r7, #7]
 8002432:	2b63      	cmp	r3, #99	@ 0x63
 8002434:	d102      	bne.n	800243c <RunModeAction+0x16>
	{
		case 'c': //Show/Change current configuration
			ShowChangeConfigFlash();
 8002436:	f7ff ff83 	bl	8002340 <ShowChangeConfigFlash>
			break;
 800243a:	bf00      	nop
	}
}
 800243c:	bf00      	nop
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <TestModeAction>:

// Action table for the test mode menu
static void TestModeAction(char input)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b09c      	sub	sp, #112	@ 0x70
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	71fb      	strb	r3, [r7, #7]
	switch (input)
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	3b61      	subs	r3, #97	@ 0x61
 8002452:	2b19      	cmp	r3, #25
 8002454:	f200 80fd 	bhi.w	8002652 <TestModeAction+0x20e>
 8002458:	a201      	add	r2, pc, #4	@ (adr r2, 8002460 <TestModeAction+0x1c>)
 800245a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245e:	bf00      	nop
 8002460:	080024ff 	.word	0x080024ff
 8002464:	08002527 	.word	0x08002527
 8002468:	08002605 	.word	0x08002605
 800246c:	08002569 	.word	0x08002569
 8002470:	08002653 	.word	0x08002653
 8002474:	0800253f 	.word	0x0800253f
 8002478:	08002653 	.word	0x08002653
 800247c:	08002653 	.word	0x08002653
 8002480:	08002653 	.word	0x08002653
 8002484:	08002653 	.word	0x08002653
 8002488:	08002653 	.word	0x08002653
 800248c:	08002653 	.word	0x08002653
 8002490:	08002653 	.word	0x08002653
 8002494:	08002653 	.word	0x08002653
 8002498:	080024f3 	.word	0x080024f3
 800249c:	080024c9 	.word	0x080024c9
 80024a0:	080025b5 	.word	0x080025b5
 80024a4:	08002653 	.word	0x08002653
 80024a8:	0800258f 	.word	0x0800258f
 80024ac:	0800260b 	.word	0x0800260b
 80024b0:	08002617 	.word	0x08002617
 80024b4:	08002653 	.word	0x08002653
 80024b8:	08002653 	.word	0x08002653
 80024bc:	08002653 	.word	0x08002653
 80024c0:	08002611 	.word	0x08002611
 80024c4:	080025e3 	.word	0x080025e3
	{
		case 'p': //Power supplies on
			if (powerStatus == V500_OFF)
 80024c8:	4b64      	ldr	r3, [pc, #400]	@ (800265c <TestModeAction+0x218>)
 80024ca:	881b      	ldrh	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10c      	bne.n	80024ea <TestModeAction+0xa6>
			{
				if (PowerOnHighSupplies() == POWERON_FAILED)
 80024d0:	f7ff fdce 	bl	8002070 <PowerOnHighSupplies>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d103      	bne.n	80024e2 <TestModeAction+0x9e>
				{
					printString("\n\rPower on failed\n\r");
 80024da:	4861      	ldr	r0, [pc, #388]	@ (8002660 <TestModeAction+0x21c>)
 80024dc:	f7fe f942 	bl	8000764 <printString>
			}
			else
			{
				printString("\n\rPower supplies are on\n\r");
			}
			break;
 80024e0:	e0b7      	b.n	8002652 <TestModeAction+0x20e>
					printString("\n\rPower on succeeded\n\r");
 80024e2:	4860      	ldr	r0, [pc, #384]	@ (8002664 <TestModeAction+0x220>)
 80024e4:	f7fe f93e 	bl	8000764 <printString>
			break;
 80024e8:	e0b3      	b.n	8002652 <TestModeAction+0x20e>
				printString("\n\rPower supplies are on\n\r");
 80024ea:	485f      	ldr	r0, [pc, #380]	@ (8002668 <TestModeAction+0x224>)
 80024ec:	f7fe f93a 	bl	8000764 <printString>
			break;
 80024f0:	e0af      	b.n	8002652 <TestModeAction+0x20e>

		case 'o': //Power supplies off
			printString("\n\rPower off supplies\n\r");
 80024f2:	485e      	ldr	r0, [pc, #376]	@ (800266c <TestModeAction+0x228>)
 80024f4:	f7fe f936 	bl	8000764 <printString>
			PowerOffHighSupplies();
 80024f8:	f7ff fd48 	bl	8001f8c <PowerOffHighSupplies>
			break;
 80024fc:	e0a9      	b.n	8002652 <TestModeAction+0x20e>

		case 'a': //Start ADC1 and ADC2 analog voltage measurement
			if (sHbridge.on)
 80024fe:	4b5c      	ldr	r3, [pc, #368]	@ (8002670 <TestModeAction+0x22c>)
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00b      	beq.n	800251e <TestModeAction+0xda>
			{
				//Setup to read ADC1 and ADC2 channels
				//Reading will start at TIM1 CH1 0->1 interrupt
				measureBridgePlasmaADC12();
 8002506:	f7ff f81b 	bl	8001540 <measureBridgePlasmaADC12>
				//Wait until ADC3 reading is done
				while (sADC.adc12_reading) ;
 800250a:	bf00      	nop
 800250c:	4b59      	ldr	r3, [pc, #356]	@ (8002674 <TestModeAction+0x230>)
 800250e:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	@ 0x70e
 8002512:	b29b      	uxth	r3, r3
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1f9      	bne.n	800250c <TestModeAction+0xc8>
				//Print ADC3 data on UART3
				printADC12data();
 8002518:	f7fe fd8e 	bl	8001038 <printADC12data>
			}
			else
			{
				printString("\n\r ---- H-Bridge needs to be on");
			}
			break;
 800251c:	e099      	b.n	8002652 <TestModeAction+0x20e>
				printString("\n\r ---- H-Bridge needs to be on");
 800251e:	4856      	ldr	r0, [pc, #344]	@ (8002678 <TestModeAction+0x234>)
 8002520:	f7fe f920 	bl	8000764 <printString>
			break;
 8002524:	e095      	b.n	8002652 <TestModeAction+0x20e>

		case 'b': //Start ADC3 analog voltage measurement
				//Start reading ADC3 channels
				measureVoltagesTemperaturesADC3();
 8002526:	f7ff fbbb 	bl	8001ca0 <measureVoltagesTemperaturesADC3>
				//Wait until ADC3 reading is done
				while (sADC.adc3_reading) ;
 800252a:	bf00      	nop
 800252c:	4b51      	ldr	r3, [pc, #324]	@ (8002674 <TestModeAction+0x230>)
 800252e:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	@ 0x70c
 8002532:	b29b      	uxth	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1f9      	bne.n	800252c <TestModeAction+0xe8>
				//Print ADC3 data on UART3
				printADC3data();
 8002538:	f7ff fb6c 	bl	8001c14 <printADC3data>
			break;
 800253c:	e089      	b.n	8002652 <TestModeAction+0x20e>

		case 'f': //Enter frequency (Hz)
			printHbridgeData();
 800253e:	f7fe fa0f 	bl	8000960 <printHbridgeData>
			printString("\n\rEnter frequency (Hz): ");
 8002542:	484e      	ldr	r0, [pc, #312]	@ (800267c <TestModeAction+0x238>)
 8002544:	f7fe f90e 	bl	8000764 <printString>
			if (GetUint16Input(&sHbridge.frequency, 1, MIN_FREQUENCY, MAX_FREQUENCY))
 8002548:	f64f 53e8 	movw	r3, #65000	@ 0xfde8
 800254c:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8002550:	2101      	movs	r1, #1
 8002552:	484b      	ldr	r0, [pc, #300]	@ (8002680 <TestModeAction+0x23c>)
 8002554:	f7ff fc46 	bl	8001de4 <GetUint16Input>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d070      	beq.n	8002640 <TestModeAction+0x1fc>
			{   // Data entry valid
				programHbridge();
 800255e:	f7fe fa27 	bl	80009b0 <programHbridge>
				printHbridgeData();
 8002562:	f7fe f9fd 	bl	8000960 <printHbridgeData>
			}
			break;
 8002566:	e06b      	b.n	8002640 <TestModeAction+0x1fc>

		case 'd': //Enter dead time (%)
			printHbridgeData();
 8002568:	f7fe f9fa 	bl	8000960 <printHbridgeData>
			printString("\n\rEnter dead time (%): ");
 800256c:	4845      	ldr	r0, [pc, #276]	@ (8002684 <TestModeAction+0x240>)
 800256e:	f7fe f8f9 	bl	8000764 <printString>
			if (GetUint16Input(&sHbridge.deadtime, 1, MIN_DEADTIME, MAX_DEADTIME))
 8002572:	2328      	movs	r3, #40	@ 0x28
 8002574:	2201      	movs	r2, #1
 8002576:	2101      	movs	r1, #1
 8002578:	4843      	ldr	r0, [pc, #268]	@ (8002688 <TestModeAction+0x244>)
 800257a:	f7ff fc33 	bl	8001de4 <GetUint16Input>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d05f      	beq.n	8002644 <TestModeAction+0x200>
			{   // Data entry valid
				programHbridge();
 8002584:	f7fe fa14 	bl	80009b0 <programHbridge>
				printHbridgeData();
 8002588:	f7fe f9ea 	bl	8000960 <printHbridgeData>
			}
			break;
 800258c:	e05a      	b.n	8002644 <TestModeAction+0x200>

		case 's': //Start/stop driving H-bridge
			printHbridgeData();
 800258e:	f7fe f9e7 	bl	8000960 <printHbridgeData>
			printString("\n\rDrive H-bridge 1:Yes 0:No : ");
 8002592:	483e      	ldr	r0, [pc, #248]	@ (800268c <TestModeAction+0x248>)
 8002594:	f7fe f8e6 	bl	8000764 <printString>
			if (GetUint16Input(&sHbridge.on, 1, 0, 1))
 8002598:	2301      	movs	r3, #1
 800259a:	2200      	movs	r2, #0
 800259c:	2101      	movs	r1, #1
 800259e:	4834      	ldr	r0, [pc, #208]	@ (8002670 <TestModeAction+0x22c>)
 80025a0:	f7ff fc20 	bl	8001de4 <GetUint16Input>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d04e      	beq.n	8002648 <TestModeAction+0x204>
			{   // Data entry valid
				programHbridge();
 80025aa:	f7fe fa01 	bl	80009b0 <programHbridge>
				printHbridgeData();
 80025ae:	f7fe f9d7 	bl	8000960 <printHbridgeData>
			}
			break;
 80025b2:	e049      	b.n	8002648 <TestModeAction+0x204>

		case 'q': //Frequency correction
			int16_t freqCorr;
			if (freqCorrection(&freqCorr))
 80025b4:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fe fe8b 	bl	80012d4 <freqCorrection>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d043      	beq.n	800264c <TestModeAction+0x208>
			{
				char text[100];
				sprintf(text, "\n\rFrequency correction: %i", (int) freqCorr);
 80025c4:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 80025c8:	461a      	mov	r2, r3
 80025ca:	f107 0308 	add.w	r3, r7, #8
 80025ce:	4930      	ldr	r1, [pc, #192]	@ (8002690 <TestModeAction+0x24c>)
 80025d0:	4618      	mov	r0, r3
 80025d2:	f00f fd97 	bl	8012104 <siprintf>
				printString(text);
 80025d6:	f107 0308 	add.w	r3, r7, #8
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fe f8c2 	bl	8000764 <printString>
			}
			break;
 80025e0:	e034      	b.n	800264c <TestModeAction+0x208>

		case 'z': //Debug output
			printNumber("\n\rCurrent Debug output: ", debug, 0);
 80025e2:	4b2c      	ldr	r3, [pc, #176]	@ (8002694 <TestModeAction+0x250>)
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	2200      	movs	r2, #0
 80025e8:	4619      	mov	r1, r3
 80025ea:	482b      	ldr	r0, [pc, #172]	@ (8002698 <TestModeAction+0x254>)
 80025ec:	f7fe f8fc 	bl	80007e8 <printNumber>
			printString("\n\rSet Debug output 1:On 0:Off : ");
 80025f0:	482a      	ldr	r0, [pc, #168]	@ (800269c <TestModeAction+0x258>)
 80025f2:	f7fe f8b7 	bl	8000764 <printString>
			GetUint16Input(&debug, 1, 0, 1);
 80025f6:	2301      	movs	r3, #1
 80025f8:	2200      	movs	r2, #0
 80025fa:	2101      	movs	r1, #1
 80025fc:	4825      	ldr	r0, [pc, #148]	@ (8002694 <TestModeAction+0x250>)
 80025fe:	f7ff fbf1 	bl	8001de4 <GetUint16Input>
			break;
 8002602:	e026      	b.n	8002652 <TestModeAction+0x20e>

		case 'c': //Show/Change current configuration
			ShowChangeConfigFlash();
 8002604:	f7ff fe9c 	bl	8002340 <ShowChangeConfigFlash>
			break;
 8002608:	e023      	b.n	8002652 <TestModeAction+0x20e>

		case 't': //Test GPIO
			testGPIO();
 800260a:	f7ff ff05 	bl	8002418 <testGPIO>
			break;
 800260e:	e020      	b.n	8002652 <TestModeAction+0x20e>

		case 'y': //Auto Freq Adjust
			autoFreqAdj();
 8002610:	f7ff f922 	bl	8001858 <autoFreqAdj>
			break;
 8002614:	e01d      	b.n	8002652 <TestModeAction+0x20e>
		case 'u': //Auto Freq Adjust
			printString("Desired Voltage: ");
 8002616:	4822      	ldr	r0, [pc, #136]	@ (80026a0 <TestModeAction+0x25c>)
 8002618:	f7fe f8a4 	bl	8000764 <printString>
			uint16_t userVoltage;
			//Max and min valid voltages
			if (GetUint16Input(&userVoltage, 1, 0, 5000))
 800261c:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 8002620:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002624:	2200      	movs	r2, #0
 8002626:	2101      	movs	r1, #1
 8002628:	f7ff fbdc 	bl	8001de4 <GetUint16Input>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00e      	beq.n	8002650 <TestModeAction+0x20c>
			{   // Data entry valid
				autoVoltageAdj(userVoltage);
 8002632:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002636:	b21b      	sxth	r3, r3
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff f973 	bl	8001924 <autoVoltageAdj>
			}
			break;
 800263e:	e007      	b.n	8002650 <TestModeAction+0x20c>
			break;
 8002640:	bf00      	nop
 8002642:	e006      	b.n	8002652 <TestModeAction+0x20e>
			break;
 8002644:	bf00      	nop
 8002646:	e004      	b.n	8002652 <TestModeAction+0x20e>
			break;
 8002648:	bf00      	nop
 800264a:	e002      	b.n	8002652 <TestModeAction+0x20e>
			break;
 800264c:	bf00      	nop
 800264e:	e000      	b.n	8002652 <TestModeAction+0x20e>
			break;
 8002650:	bf00      	nop
	}
}
 8002652:	bf00      	nop
 8002654:	3770      	adds	r7, #112	@ 0x70
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	24000a40 	.word	0x24000a40
 8002660:	080149e4 	.word	0x080149e4
 8002664:	080149f8 	.word	0x080149f8
 8002668:	08014a10 	.word	0x08014a10
 800266c:	08014a2c 	.word	0x08014a2c
 8002670:	2400001c 	.word	0x2400001c
 8002674:	24000330 	.word	0x24000330
 8002678:	08014a44 	.word	0x08014a44
 800267c:	08014a64 	.word	0x08014a64
 8002680:	2400001e 	.word	0x2400001e
 8002684:	08014a80 	.word	0x08014a80
 8002688:	24000020 	.word	0x24000020
 800268c:	08014a98 	.word	0x08014a98
 8002690:	08014ab8 	.word	0x08014ab8
 8002694:	24000000 	.word	0x24000000
 8002698:	08014ad4 	.word	0x08014ad4
 800269c:	08014af0 	.word	0x08014af0
 80026a0:	08014b14 	.word	0x08014b14

080026a4 <PlasmaDriverMenu>:

// Print the plasma driver menu on UART3, and execute entered command.
static void PlasmaDriverMenu(void)
{
 80026a4:	b590      	push	{r4, r7, lr}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
	char input;

	//Wait for user input
	if (HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK)
 80026aa:	1cf9      	adds	r1, r7, #3
 80026ac:	2301      	movs	r3, #1
 80026ae:	2201      	movs	r2, #1
 80026b0:	4822      	ldr	r0, [pc, #136]	@ (800273c <PlasmaDriverMenu+0x98>)
 80026b2:	f00d fcf6 	bl	80100a2 <HAL_UART_Receive>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d13b      	bne.n	8002734 <PlasmaDriverMenu+0x90>
	{
		// Return pressed -- Display Menu
		if (input == 13)
 80026bc:	78fb      	ldrb	r3, [r7, #3]
 80026be:	2b0d      	cmp	r3, #13
 80026c0:	d123      	bne.n	800270a <PlasmaDriverMenu+0x66>
		{
			for (int i=0; i<menu_size; i++)
 80026c2:	2300      	movs	r3, #0
 80026c4:	607b      	str	r3, [r7, #4]
 80026c6:	e017      	b.n	80026f8 <PlasmaDriverMenu+0x54>
			{
				HAL_UART_Transmit(&huart3, (uint8_t *) menu[i], strlen(menu[i]), 1000);
 80026c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002740 <PlasmaDriverMenu+0x9c>)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80026d0:	4a1b      	ldr	r2, [pc, #108]	@ (8002740 <PlasmaDriverMenu+0x9c>)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fd fe69 	bl	80003b0 <strlen>
 80026de:	4603      	mov	r3, r0
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026e6:	4621      	mov	r1, r4
 80026e8:	4814      	ldr	r0, [pc, #80]	@ (800273c <PlasmaDriverMenu+0x98>)
 80026ea:	f00d fc4c 	bl	800ff86 <HAL_UART_Transmit>
				printCR();
 80026ee:	f7fe f829 	bl	8000744 <printCR>
			for (int i=0; i<menu_size; i++)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3301      	adds	r3, #1
 80026f6:	607b      	str	r3, [r7, #4]
 80026f8:	4b12      	ldr	r3, [pc, #72]	@ (8002744 <PlasmaDriverMenu+0xa0>)
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4293      	cmp	r3, r2
 8002702:	dbe1      	blt.n	80026c8 <PlasmaDriverMenu+0x24>
			}
			printCR();
 8002704:	f7fe f81e 	bl	8000744 <printCR>
				RunModeAction(input);
			else
				printString("\n\r*** ERROR *** Invalid mode");
		}
	}
}
 8002708:	e014      	b.n	8002734 <PlasmaDriverMenu+0x90>
			if (sFlashConfig.mode == TEST_MODE)
 800270a:	4b0f      	ldr	r3, [pc, #60]	@ (8002748 <PlasmaDriverMenu+0xa4>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d104      	bne.n	800271c <PlasmaDriverMenu+0x78>
				TestModeAction(input);
 8002712:	78fb      	ldrb	r3, [r7, #3]
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff fe95 	bl	8002444 <TestModeAction>
}
 800271a:	e00b      	b.n	8002734 <PlasmaDriverMenu+0x90>
			else if (sFlashConfig.mode == RUN_MODE)
 800271c:	4b0a      	ldr	r3, [pc, #40]	@ (8002748 <PlasmaDriverMenu+0xa4>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d104      	bne.n	800272e <PlasmaDriverMenu+0x8a>
				RunModeAction(input);
 8002724:	78fb      	ldrb	r3, [r7, #3]
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff fe7d 	bl	8002426 <RunModeAction>
}
 800272c:	e002      	b.n	8002734 <PlasmaDriverMenu+0x90>
				printString("\n\r*** ERROR *** Invalid mode");
 800272e:	4807      	ldr	r0, [pc, #28]	@ (800274c <PlasmaDriverMenu+0xa8>)
 8002730:	f7fe f818 	bl	8000764 <printString>
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	bd90      	pop	{r4, r7, pc}
 800273c:	24000e34 	.word	0x24000e34
 8002740:	240002ec 	.word	0x240002ec
 8002744:	24000324 	.word	0x24000324
 8002748:	24000a44 	.word	0x24000a44
 800274c:	08014b28 	.word	0x08014b28

08002750 <PlasmaDriverInit>:

// Initialize the plasma driver
void PlasmaDriverInit(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
	//Enable line driver 2 (HAL has initialized all GPIO)
	HAL_GPIO_WritePin(LINE_DRIVER2_ENABLE_GPIO_Port, LINE_DRIVER2_ENABLE_Pin, GPIO_PIN_RESET);  //Enable = Low
 8002754:	2200      	movs	r2, #0
 8002756:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800275a:	4821      	ldr	r0, [pc, #132]	@ (80027e0 <PlasmaDriverInit+0x90>)
 800275c:	f008 fa24 	bl	800aba8 <HAL_GPIO_WritePin>
	printString("\n\rEnable Line Drive 2");
 8002760:	4820      	ldr	r0, [pc, #128]	@ (80027e4 <PlasmaDriverInit+0x94>)
 8002762:	f7fd ffff 	bl	8000764 <printString>

	//Power On Supplies in order 15V, 3.3V switch
	PowerOnLowSupplies();
 8002766:	f7ff fc3f 	bl	8001fe8 <PowerOnLowSupplies>

	//Read configuration from flash
	readConfigFlash();
 800276a:	f7fd ffdb 	bl	8000724 <readConfigFlash>

	//Has the flash configuration been initialized?
	if (sFlashConfig.mode == 0xFF)
 800276e:	4b1e      	ldr	r3, [pc, #120]	@ (80027e8 <PlasmaDriverInit+0x98>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2bff      	cmp	r3, #255	@ 0xff
 8002774:	d107      	bne.n	8002786 <PlasmaDriverInit+0x36>
	{
		// write default configuration to flash
		if (writeConfigFlash() != 0)
 8002776:	f7fd ff9b 	bl	80006b0 <writeConfigFlash>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d002      	beq.n	8002786 <PlasmaDriverInit+0x36>
			printString("\n\r*** ERROR FLASH");
 8002780:	481a      	ldr	r0, [pc, #104]	@ (80027ec <PlasmaDriverInit+0x9c>)
 8002782:	f7fd ffef 	bl	8000764 <printString>
	}

	//Initialize menu and configuration menu
	InitializeMenu();
 8002786:	f7ff fd05 	bl	8002194 <InitializeMenu>
	InitializeConfigMenu();
 800278a:	f7ff fcd7 	bl	800213c <InitializeConfigMenu>

	//Calibrate ADC1, ADC2 and ADC3
	printString("\n\rCalibrate ADC1, ADC2 and ADC3");
 800278e:	4818      	ldr	r0, [pc, #96]	@ (80027f0 <PlasmaDriverInit+0xa0>)
 8002790:	f7fd ffe8 	bl	8000764 <printString>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8002794:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002798:	2100      	movs	r1, #0
 800279a:	4816      	ldr	r0, [pc, #88]	@ (80027f4 <PlasmaDriverInit+0xa4>)
 800279c:	f004 fd0a 	bl	80071b4 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80027a0:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80027a4:	2100      	movs	r1, #0
 80027a6:	4814      	ldr	r0, [pc, #80]	@ (80027f8 <PlasmaDriverInit+0xa8>)
 80027a8:	f004 fd04 	bl	80071b4 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80027ac:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80027b0:	2100      	movs	r1, #0
 80027b2:	4812      	ldr	r0, [pc, #72]	@ (80027fc <PlasmaDriverInit+0xac>)
 80027b4:	f004 fcfe 	bl	80071b4 <HAL_ADCEx_Calibration_Start>

	//Power On Supply 500V
	if (sFlashConfig.mode == RUN_MODE)
 80027b8:	4b0b      	ldr	r3, [pc, #44]	@ (80027e8 <PlasmaDriverInit+0x98>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d10d      	bne.n	80027dc <PlasmaDriverInit+0x8c>
	{
		//POWER_OFF_IRQ needs to be high before powering On
		if (HAL_GPIO_ReadPin(POWER_OFF_IRQ_GPIO_Port, POWER_OFF_IRQ_Pin) == GPIO_PIN_RESET)		//There is an inverter between MCU and the input, thus check RESET
 80027c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027c4:	480e      	ldr	r0, [pc, #56]	@ (8002800 <PlasmaDriverInit+0xb0>)
 80027c6:	f008 f9d7 	bl	800ab78 <HAL_GPIO_ReadPin>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d102      	bne.n	80027d6 <PlasmaDriverInit+0x86>
			PowerOnHighSupplies();
 80027d0:	f7ff fc4e 	bl	8002070 <PowerOnHighSupplies>
		else
		printString("\n\rPOWER_OFF_IRQ line is not high - 500V is not powered on");
	}
}
 80027d4:	e002      	b.n	80027dc <PlasmaDriverInit+0x8c>
		printString("\n\rPOWER_OFF_IRQ line is not high - 500V is not powered on");
 80027d6:	480b      	ldr	r0, [pc, #44]	@ (8002804 <PlasmaDriverInit+0xb4>)
 80027d8:	f7fd ffc4 	bl	8000764 <printString>
}
 80027dc:	bf00      	nop
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	58020400 	.word	0x58020400
 80027e4:	08014b48 	.word	0x08014b48
 80027e8:	24000a44 	.word	0x24000a44
 80027ec:	08014b60 	.word	0x08014b60
 80027f0:	08014b74 	.word	0x08014b74
 80027f4:	24000a84 	.word	0x24000a84
 80027f8:	24000af4 	.word	0x24000af4
 80027fc:	24000b64 	.word	0x24000b64
 8002800:	58021000 	.word	0x58021000
 8002804:	08014b94 	.word	0x08014b94

08002808 <PlasmaDoTask>:

// This command is called from a while loop, and will execute any needed task.
void PlasmaDoTask(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
	PlasmaDriverMenu(); //Check UART3 and execute command
 800280c:	f7ff ff4a 	bl	80026a4 <PlasmaDriverMenu>

	if (sFlashConfig.mode == RUN_MODE)
 8002810:	4b0d      	ldr	r3, [pc, #52]	@ (8002848 <PlasmaDoTask+0x40>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d114      	bne.n	8002842 <PlasmaDoTask+0x3a>
	{
		//Check if robot controller requested the plasma On or Off
		if (HAL_GPIO_ReadPin(TURN_PLASMA_ON_GPIO_Port, TURN_PLASMA_ON_Pin) == GPIO_PIN_RESET)		//There is an inverter between MCU and the input, thus check RESET
 8002818:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800281c:	480b      	ldr	r0, [pc, #44]	@ (800284c <PlasmaDoTask+0x44>)
 800281e:	f008 f9ab 	bl	800ab78 <HAL_GPIO_ReadPin>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10c      	bne.n	8002842 <PlasmaDoTask+0x3a>
		{
			if (powerStatus == V500_ON)
 8002828:	4b09      	ldr	r3, [pc, #36]	@ (8002850 <PlasmaDoTask+0x48>)
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d105      	bne.n	800283c <PlasmaDoTask+0x34>
			{
				sHbridge.on = 1; // Turn Hbridge on
 8002830:	4b08      	ldr	r3, [pc, #32]	@ (8002854 <PlasmaDoTask+0x4c>)
 8002832:	2201      	movs	r2, #1
 8002834:	801a      	strh	r2, [r3, #0]
				programHbridge();
 8002836:	f7fe f8bb 	bl	80009b0 <programHbridge>
			}
			else
				printString("\n\rUnable to turn H-bridge on, since 500V is not powered on");
		}
	}
}
 800283a:	e002      	b.n	8002842 <PlasmaDoTask+0x3a>
				printString("\n\rUnable to turn H-bridge on, since 500V is not powered on");
 800283c:	4806      	ldr	r0, [pc, #24]	@ (8002858 <PlasmaDoTask+0x50>)
 800283e:	f7fd ff91 	bl	8000764 <printString>
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	24000a44 	.word	0x24000a44
 800284c:	58021000 	.word	0x58021000
 8002850:	24000a40 	.word	0x24000a40
 8002854:	2400001c 	.word	0x2400001c
 8002858:	08014bd0 	.word	0x08014bd0

0800285c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002860:	f001 feda 	bl	8004618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002864:	f000 f828 	bl	80028b8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002868:	f000 f896 	bl	8002998 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800286c:	f000 fea0 	bl	80035b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002870:	f000 fe76 	bl	8003560 <MX_DMA_Init>
  MX_TIM1_Init();
 8002874:	f000 fc2a 	bl	80030cc <MX_TIM1_Init>
  MX_ETH_Init();
 8002878:	f000 fb40 	bl	8002efc <MX_ETH_Init>
  MX_ADC2_Init();
 800287c:	f000 f95a 	bl	8002b34 <MX_ADC2_Init>
  MX_USB_OTG_HS_USB_Init();
 8002880:	f000 fe66 	bl	8003550 <MX_USB_OTG_HS_USB_Init>
  MX_ADC3_Init();
 8002884:	f000 f9fa 	bl	8002c7c <MX_ADC3_Init>
  MX_USART3_UART_Init();
 8002888:	f000 fbd2 	bl	8003030 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800288c:	f000 f8b4 	bl	80029f8 <MX_ADC1_Init>
  MX_COMP2_Init();
 8002890:	f000 fb06 	bl	8002ea0 <MX_COMP2_Init>
  MX_TIM2_Init();
 8002894:	f000 fcac 	bl	80031f0 <MX_TIM2_Init>
  MX_LPUART1_UART_Init();
 8002898:	f000 fb7c 	bl	8002f94 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 800289c:	f000 fd02 	bl	80032a4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80028a0:	f000 fd54 	bl	800334c <MX_TIM4_Init>
  MX_TIM15_Init();
 80028a4:	f000 fdac 	bl	8003400 <MX_TIM15_Init>
  MX_TIM24_Init();
 80028a8:	f000 fe02 	bl	80034b0 <MX_TIM24_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  PlasmaDriverInit();  			//Initialize plasma driver
 80028ac:	f7ff ff50 	bl	8002750 <PlasmaDriverInit>

  while (1)
  {
	PlasmaDoTask();     	    //Handle plasma driver task
 80028b0:	f7ff ffaa 	bl	8002808 <PlasmaDoTask>
 80028b4:	e7fc      	b.n	80028b0 <main+0x54>
	...

080028b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b09c      	sub	sp, #112	@ 0x70
 80028bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028c2:	224c      	movs	r2, #76	@ 0x4c
 80028c4:	2100      	movs	r1, #0
 80028c6:	4618      	mov	r0, r3
 80028c8:	f00f fc7f 	bl	80121ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028cc:	1d3b      	adds	r3, r7, #4
 80028ce:	2220      	movs	r2, #32
 80028d0:	2100      	movs	r1, #0
 80028d2:	4618      	mov	r0, r3
 80028d4:	f00f fc79 	bl	80121ca <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80028d8:	2002      	movs	r0, #2
 80028da:	f008 f999 	bl	800ac10 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80028de:	2300      	movs	r3, #0
 80028e0:	603b      	str	r3, [r7, #0]
 80028e2:	4b2c      	ldr	r3, [pc, #176]	@ (8002994 <SystemClock_Config+0xdc>)
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	4a2b      	ldr	r2, [pc, #172]	@ (8002994 <SystemClock_Config+0xdc>)
 80028e8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80028ec:	6193      	str	r3, [r2, #24]
 80028ee:	4b29      	ldr	r3, [pc, #164]	@ (8002994 <SystemClock_Config+0xdc>)
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80028f6:	603b      	str	r3, [r7, #0]
 80028f8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80028fa:	bf00      	nop
 80028fc:	4b25      	ldr	r3, [pc, #148]	@ (8002994 <SystemClock_Config+0xdc>)
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002904:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002908:	d1f8      	bne.n	80028fc <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800290a:	2321      	movs	r3, #33	@ 0x21
 800290c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800290e:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002912:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002914:	2301      	movs	r3, #1
 8002916:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002918:	2302      	movs	r3, #2
 800291a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800291c:	2302      	movs	r3, #2
 800291e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002920:	2304      	movs	r3, #4
 8002922:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8002924:	f240 1313 	movw	r3, #275	@ 0x113
 8002928:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800292a:	2301      	movs	r3, #1
 800292c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800292e:	2304      	movs	r3, #4
 8002930:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002932:	2302      	movs	r3, #2
 8002934:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8002936:	2304      	movs	r3, #4
 8002938:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800293a:	2300      	movs	r3, #0
 800293c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002942:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002946:	4618      	mov	r0, r3
 8002948:	f008 f99c 	bl	800ac84 <HAL_RCC_OscConfig>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002952:	f000 ff9d 	bl	8003890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002956:	233f      	movs	r3, #63	@ 0x3f
 8002958:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800295a:	2303      	movs	r3, #3
 800295c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800295e:	2300      	movs	r3, #0
 8002960:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002962:	2308      	movs	r3, #8
 8002964:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002966:	2340      	movs	r3, #64	@ 0x40
 8002968:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800296a:	2340      	movs	r3, #64	@ 0x40
 800296c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 800296e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002972:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002974:	2340      	movs	r3, #64	@ 0x40
 8002976:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002978:	1d3b      	adds	r3, r7, #4
 800297a:	2103      	movs	r1, #3
 800297c:	4618      	mov	r0, r3
 800297e:	f008 fd5b 	bl	800b438 <HAL_RCC_ClockConfig>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002988:	f000 ff82 	bl	8003890 <Error_Handler>
  }
}
 800298c:	bf00      	nop
 800298e:	3770      	adds	r7, #112	@ 0x70
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	58024800 	.word	0x58024800

08002998 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b0ae      	sub	sp, #184	@ 0xb8
 800299c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800299e:	463b      	mov	r3, r7
 80029a0:	22b8      	movs	r2, #184	@ 0xb8
 80029a2:	2100      	movs	r1, #0
 80029a4:	4618      	mov	r0, r3
 80029a6:	f00f fc10 	bl	80121ca <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80029aa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80029ae:	f04f 0300 	mov.w	r3, #0
 80029b2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80029b6:	2301      	movs	r3, #1
 80029b8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 80029ba:	2318      	movs	r3, #24
 80029bc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80029be:	2302      	movs	r3, #2
 80029c0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80029c2:	2302      	movs	r3, #2
 80029c4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80029c6:	2302      	movs	r3, #2
 80029c8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80029ca:	23c0      	movs	r3, #192	@ 0xc0
 80029cc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80029ce:	2300      	movs	r3, #0
 80029d0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029dc:	463b      	mov	r3, r7
 80029de:	4618      	mov	r0, r3
 80029e0:	f009 f8b6 	bl	800bb50 <HAL_RCCEx_PeriphCLKConfig>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80029ea:	f000 ff51 	bl	8003890 <Error_Handler>
  }
}
 80029ee:	bf00      	nop
 80029f0:	37b8      	adds	r7, #184	@ 0xb8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08c      	sub	sp, #48	@ 0x30
 80029fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80029fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	605a      	str	r2, [r3, #4]
 8002a08:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002a0a:	463b      	mov	r3, r7
 8002a0c:	2224      	movs	r2, #36	@ 0x24
 8002a0e:	2100      	movs	r1, #0
 8002a10:	4618      	mov	r0, r3
 8002a12:	f00f fbda 	bl	80121ca <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002a16:	4b42      	ldr	r3, [pc, #264]	@ (8002b20 <MX_ADC1_Init+0x128>)
 8002a18:	4a42      	ldr	r2, [pc, #264]	@ (8002b24 <MX_ADC1_Init+0x12c>)
 8002a1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002a1c:	4b40      	ldr	r3, [pc, #256]	@ (8002b20 <MX_ADC1_Init+0x128>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8002a22:	4b3f      	ldr	r3, [pc, #252]	@ (8002b20 <MX_ADC1_Init+0x128>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002a28:	4b3d      	ldr	r3, [pc, #244]	@ (8002b20 <MX_ADC1_Init+0x128>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002a2e:	4b3c      	ldr	r3, [pc, #240]	@ (8002b20 <MX_ADC1_Init+0x128>)
 8002a30:	2208      	movs	r2, #8
 8002a32:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002a34:	4b3a      	ldr	r3, [pc, #232]	@ (8002b20 <MX_ADC1_Init+0x128>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002a3a:	4b39      	ldr	r3, [pc, #228]	@ (8002b20 <MX_ADC1_Init+0x128>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8002a40:	4b37      	ldr	r3, [pc, #220]	@ (8002b20 <MX_ADC1_Init+0x128>)
 8002a42:	2203      	movs	r2, #3
 8002a44:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002a46:	4b36      	ldr	r3, [pc, #216]	@ (8002b20 <MX_ADC1_Init+0x128>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 8002a4e:	4b34      	ldr	r3, [pc, #208]	@ (8002b20 <MX_ADC1_Init+0x128>)
 8002a50:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a54:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002a56:	4b32      	ldr	r3, [pc, #200]	@ (8002b20 <MX_ADC1_Init+0x128>)
 8002a58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 8002a5e:	4b30      	ldr	r3, [pc, #192]	@ (8002b20 <MX_ADC1_Init+0x128>)
 8002a60:	2201      	movs	r2, #1
 8002a62:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002a64:	4b2e      	ldr	r3, [pc, #184]	@ (8002b20 <MX_ADC1_Init+0x128>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002a6a:	4b2d      	ldr	r3, [pc, #180]	@ (8002b20 <MX_ADC1_Init+0x128>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8002a70:	4b2b      	ldr	r3, [pc, #172]	@ (8002b20 <MX_ADC1_Init+0x128>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a78:	4829      	ldr	r0, [pc, #164]	@ (8002b20 <MX_ADC1_Init+0x128>)
 8002a7a:	f002 fad5 	bl	8005028 <HAL_ADC_Init>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002a84:	f000 ff04 	bl	8003890 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8002a88:	2306      	movs	r3, #6
 8002a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 8002a8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a90:	62bb      	str	r3, [r7, #40]	@ 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8002a92:	2300      	movs	r3, #0
 8002a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002a96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4820      	ldr	r0, [pc, #128]	@ (8002b20 <MX_ADC1_Init+0x128>)
 8002a9e:	f004 fcd1 	bl	8007444 <HAL_ADCEx_MultiModeConfigChannel>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8002aa8:	f000 fef2 	bl	8003890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002aac:	4b1e      	ldr	r3, [pc, #120]	@ (8002b28 <MX_ADC1_Init+0x130>)
 8002aae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002ab0:	2306      	movs	r3, #6
 8002ab2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002ab8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002abc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002abe:	2304      	movs	r3, #4
 8002ac0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002acc:	463b      	mov	r3, r7
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4813      	ldr	r0, [pc, #76]	@ (8002b20 <MX_ADC1_Init+0x128>)
 8002ad2:	f002 ffdb 	bl	8005a8c <HAL_ADC_ConfigChannel>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8002adc:	f000 fed8 	bl	8003890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8002ae0:	4b12      	ldr	r3, [pc, #72]	@ (8002b2c <MX_ADC1_Init+0x134>)
 8002ae2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002ae4:	230c      	movs	r3, #12
 8002ae6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ae8:	463b      	mov	r3, r7
 8002aea:	4619      	mov	r1, r3
 8002aec:	480c      	ldr	r0, [pc, #48]	@ (8002b20 <MX_ADC1_Init+0x128>)
 8002aee:	f002 ffcd 	bl	8005a8c <HAL_ADC_ConfigChannel>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8002af8:	f000 feca 	bl	8003890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8002afc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b30 <MX_ADC1_Init+0x138>)
 8002afe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002b00:	2312      	movs	r3, #18
 8002b02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b04:	463b      	mov	r3, r7
 8002b06:	4619      	mov	r1, r3
 8002b08:	4805      	ldr	r0, [pc, #20]	@ (8002b20 <MX_ADC1_Init+0x128>)
 8002b0a:	f002 ffbf 	bl	8005a8c <HAL_ADC_ConfigChannel>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8002b14:	f000 febc 	bl	8003890 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002b18:	bf00      	nop
 8002b1a:	3730      	adds	r7, #48	@ 0x30
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	24000a84 	.word	0x24000a84
 8002b24:	40022000 	.word	0x40022000
 8002b28:	3ef08000 	.word	0x3ef08000
 8002b2c:	4b840000 	.word	0x4b840000
 8002b30:	43210000 	.word	0x43210000

08002b34 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b090      	sub	sp, #64	@ 0x40
 8002b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8002b3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	605a      	str	r2, [r3, #4]
 8002b44:	609a      	str	r2, [r3, #8]
 8002b46:	60da      	str	r2, [r3, #12]
 8002b48:	611a      	str	r2, [r3, #16]
 8002b4a:	615a      	str	r2, [r3, #20]
 8002b4c:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002b4e:	463b      	mov	r3, r7
 8002b50:	2224      	movs	r2, #36	@ 0x24
 8002b52:	2100      	movs	r1, #0
 8002b54:	4618      	mov	r0, r3
 8002b56:	f00f fb38 	bl	80121ca <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002b5a:	4b42      	ldr	r3, [pc, #264]	@ (8002c64 <MX_ADC2_Init+0x130>)
 8002b5c:	4a42      	ldr	r2, [pc, #264]	@ (8002c68 <MX_ADC2_Init+0x134>)
 8002b5e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002b60:	4b40      	ldr	r3, [pc, #256]	@ (8002c64 <MX_ADC2_Init+0x130>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8002b66:	4b3f      	ldr	r3, [pc, #252]	@ (8002c64 <MX_ADC2_Init+0x130>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002b6c:	4b3d      	ldr	r3, [pc, #244]	@ (8002c64 <MX_ADC2_Init+0x130>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002b72:	4b3c      	ldr	r3, [pc, #240]	@ (8002c64 <MX_ADC2_Init+0x130>)
 8002b74:	2208      	movs	r2, #8
 8002b76:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002b78:	4b3a      	ldr	r3, [pc, #232]	@ (8002c64 <MX_ADC2_Init+0x130>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002b7e:	4b39      	ldr	r3, [pc, #228]	@ (8002c64 <MX_ADC2_Init+0x130>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 3;
 8002b84:	4b37      	ldr	r3, [pc, #220]	@ (8002c64 <MX_ADC2_Init+0x130>)
 8002b86:	2203      	movs	r2, #3
 8002b88:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002b8a:	4b36      	ldr	r3, [pc, #216]	@ (8002c64 <MX_ADC2_Init+0x130>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8002b92:	4b34      	ldr	r3, [pc, #208]	@ (8002c64 <MX_ADC2_Init+0x130>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002b98:	4b32      	ldr	r3, [pc, #200]	@ (8002c64 <MX_ADC2_Init+0x130>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002b9e:	4b31      	ldr	r3, [pc, #196]	@ (8002c64 <MX_ADC2_Init+0x130>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8002ba4:	4b2f      	ldr	r3, [pc, #188]	@ (8002c64 <MX_ADC2_Init+0x130>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002bac:	482d      	ldr	r0, [pc, #180]	@ (8002c64 <MX_ADC2_Init+0x130>)
 8002bae:	f002 fa3b 	bl	8005028 <HAL_ADC_Init>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8002bb8:	f000 fe6a 	bl	8003890 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8002bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8002c6c <MX_ADC2_Init+0x138>)
 8002bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8002bc0:	f44f 0340 	mov.w	r3, #12582912	@ 0xc00000
 8002bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  AnalogWDGConfig.Channel = ADC_CHANNEL_3;
 8002bc6:	4b2a      	ldr	r3, [pc, #168]	@ (8002c70 <MX_ADC2_Init+0x13c>)
 8002bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  AnalogWDGConfig.ITMode = DISABLE;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  AnalogWDGConfig.HighThreshold = 0;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	637b      	str	r3, [r7, #52]	@ 0x34
  AnalogWDGConfig.LowThreshold = 0;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 8002bd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4821      	ldr	r0, [pc, #132]	@ (8002c64 <MX_ADC2_Init+0x130>)
 8002be0:	f003 fc80 	bl	80064e4 <HAL_ADC_AnalogWDGConfig>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8002bea:	f000 fe51 	bl	8003890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002bee:	4b20      	ldr	r3, [pc, #128]	@ (8002c70 <MX_ADC2_Init+0x13c>)
 8002bf0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002bf2:	2306      	movs	r3, #6
 8002bf4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002bfa:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002bfe:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002c00:	2304      	movs	r3, #4
 8002c02:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002c0e:	463b      	mov	r3, r7
 8002c10:	4619      	mov	r1, r3
 8002c12:	4814      	ldr	r0, [pc, #80]	@ (8002c64 <MX_ADC2_Init+0x130>)
 8002c14:	f002 ff3a 	bl	8005a8c <HAL_ADC_ConfigChannel>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 8002c1e:	f000 fe37 	bl	8003890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8002c22:	4b14      	ldr	r3, [pc, #80]	@ (8002c74 <MX_ADC2_Init+0x140>)
 8002c24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002c26:	230c      	movs	r3, #12
 8002c28:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002c2a:	463b      	mov	r3, r7
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	480d      	ldr	r0, [pc, #52]	@ (8002c64 <MX_ADC2_Init+0x130>)
 8002c30:	f002 ff2c 	bl	8005a8c <HAL_ADC_ConfigChannel>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <MX_ADC2_Init+0x10a>
  {
    Error_Handler();
 8002c3a:	f000 fe29 	bl	8003890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c78 <MX_ADC2_Init+0x144>)
 8002c40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002c42:	2312      	movs	r3, #18
 8002c44:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002c46:	463b      	mov	r3, r7
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4806      	ldr	r0, [pc, #24]	@ (8002c64 <MX_ADC2_Init+0x130>)
 8002c4c:	f002 ff1e 	bl	8005a8c <HAL_ADC_ConfigChannel>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <MX_ADC2_Init+0x126>
  {
    Error_Handler();
 8002c56:	f000 fe1b 	bl	8003890 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002c5a:	bf00      	nop
 8002c5c:	3740      	adds	r7, #64	@ 0x40
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	24000af4 	.word	0x24000af4
 8002c68:	40022100 	.word	0x40022100
 8002c6c:	7dc00000 	.word	0x7dc00000
 8002c70:	0c900008 	.word	0x0c900008
 8002c74:	4fb80000 	.word	0x4fb80000
 8002c78:	14f00020 	.word	0x14f00020

08002c7c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b08a      	sub	sp, #40	@ 0x28
 8002c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c82:	1d3b      	adds	r3, r7, #4
 8002c84:	2224      	movs	r2, #36	@ 0x24
 8002c86:	2100      	movs	r1, #0
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f00f fa9e 	bl	80121ca <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8002c8e:	4b78      	ldr	r3, [pc, #480]	@ (8002e70 <MX_ADC3_Init+0x1f4>)
 8002c90:	4a78      	ldr	r2, [pc, #480]	@ (8002e74 <MX_ADC3_Init+0x1f8>)
 8002c92:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002c94:	4b76      	ldr	r3, [pc, #472]	@ (8002e70 <MX_ADC3_Init+0x1f4>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002c9a:	4b75      	ldr	r3, [pc, #468]	@ (8002e70 <MX_ADC3_Init+0x1f4>)
 8002c9c:	2208      	movs	r2, #8
 8002c9e:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8002ca0:	4b73      	ldr	r3, [pc, #460]	@ (8002e70 <MX_ADC3_Init+0x1f4>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002ca6:	4b72      	ldr	r3, [pc, #456]	@ (8002e70 <MX_ADC3_Init+0x1f4>)
 8002ca8:	2201      	movs	r2, #1
 8002caa:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002cac:	4b70      	ldr	r3, [pc, #448]	@ (8002e70 <MX_ADC3_Init+0x1f4>)
 8002cae:	2208      	movs	r2, #8
 8002cb0:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002cb2:	4b6f      	ldr	r3, [pc, #444]	@ (8002e70 <MX_ADC3_Init+0x1f4>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002cb8:	4b6d      	ldr	r3, [pc, #436]	@ (8002e70 <MX_ADC3_Init+0x1f4>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 11;
 8002cbe:	4b6c      	ldr	r3, [pc, #432]	@ (8002e70 <MX_ADC3_Init+0x1f4>)
 8002cc0:	220b      	movs	r2, #11
 8002cc2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002cc4:	4b6a      	ldr	r3, [pc, #424]	@ (8002e70 <MX_ADC3_Init+0x1f4>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ccc:	4b68      	ldr	r3, [pc, #416]	@ (8002e70 <MX_ADC3_Init+0x1f4>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002cd2:	4b67      	ldr	r3, [pc, #412]	@ (8002e70 <MX_ADC3_Init+0x1f4>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8002cd8:	4b65      	ldr	r3, [pc, #404]	@ (8002e70 <MX_ADC3_Init+0x1f4>)
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8002ce0:	4b63      	ldr	r3, [pc, #396]	@ (8002e70 <MX_ADC3_Init+0x1f4>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 8002ce6:	4b62      	ldr	r3, [pc, #392]	@ (8002e70 <MX_ADC3_Init+0x1f4>)
 8002ce8:	2201      	movs	r2, #1
 8002cea:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002cec:	4b60      	ldr	r3, [pc, #384]	@ (8002e70 <MX_ADC3_Init+0x1f4>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002cf2:	4b5f      	ldr	r3, [pc, #380]	@ (8002e70 <MX_ADC3_Init+0x1f4>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8002cf8:	4b5d      	ldr	r3, [pc, #372]	@ (8002e70 <MX_ADC3_Init+0x1f4>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002d00:	485b      	ldr	r0, [pc, #364]	@ (8002e70 <MX_ADC3_Init+0x1f4>)
 8002d02:	f002 f991 	bl	8005028 <HAL_ADC_Init>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8002d0c:	f000 fdc0 	bl	8003890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002d10:	2301      	movs	r3, #1
 8002d12:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002d14:	2306      	movs	r3, #6
 8002d16:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_6CYCLES_5;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002d1c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002d20:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002d22:	2304      	movs	r3, #4
 8002d24:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002d2e:	1d3b      	adds	r3, r7, #4
 8002d30:	4619      	mov	r1, r3
 8002d32:	484f      	ldr	r0, [pc, #316]	@ (8002e70 <MX_ADC3_Init+0x1f4>)
 8002d34:	f002 feaa 	bl	8005a8c <HAL_ADC_ConfigChannel>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <MX_ADC3_Init+0xc6>
  {
    Error_Handler();
 8002d3e:	f000 fda7 	bl	8003890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002d42:	4b4d      	ldr	r3, [pc, #308]	@ (8002e78 <MX_ADC3_Init+0x1fc>)
 8002d44:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002d46:	230c      	movs	r3, #12
 8002d48:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002d4a:	1d3b      	adds	r3, r7, #4
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4848      	ldr	r0, [pc, #288]	@ (8002e70 <MX_ADC3_Init+0x1f4>)
 8002d50:	f002 fe9c 	bl	8005a8c <HAL_ADC_ConfigChannel>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <MX_ADC3_Init+0xe2>
  {
    Error_Handler();
 8002d5a:	f000 fd99 	bl	8003890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002d5e:	4b47      	ldr	r3, [pc, #284]	@ (8002e7c <MX_ADC3_Init+0x200>)
 8002d60:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002d62:	2312      	movs	r3, #18
 8002d64:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002d66:	1d3b      	adds	r3, r7, #4
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4841      	ldr	r0, [pc, #260]	@ (8002e70 <MX_ADC3_Init+0x1f4>)
 8002d6c:	f002 fe8e 	bl	8005a8c <HAL_ADC_ConfigChannel>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <MX_ADC3_Init+0xfe>
  {
    Error_Handler();
 8002d76:	f000 fd8b 	bl	8003890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002d7a:	4b41      	ldr	r3, [pc, #260]	@ (8002e80 <MX_ADC3_Init+0x204>)
 8002d7c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002d7e:	2318      	movs	r3, #24
 8002d80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002d82:	1d3b      	adds	r3, r7, #4
 8002d84:	4619      	mov	r1, r3
 8002d86:	483a      	ldr	r0, [pc, #232]	@ (8002e70 <MX_ADC3_Init+0x1f4>)
 8002d88:	f002 fe80 	bl	8005a8c <HAL_ADC_ConfigChannel>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <MX_ADC3_Init+0x11a>
  {
    Error_Handler();
 8002d92:	f000 fd7d 	bl	8003890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002d96:	4b3b      	ldr	r3, [pc, #236]	@ (8002e84 <MX_ADC3_Init+0x208>)
 8002d98:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002d9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d9e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002da0:	1d3b      	adds	r3, r7, #4
 8002da2:	4619      	mov	r1, r3
 8002da4:	4832      	ldr	r0, [pc, #200]	@ (8002e70 <MX_ADC3_Init+0x1f4>)
 8002da6:	f002 fe71 	bl	8005a8c <HAL_ADC_ConfigChannel>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <MX_ADC3_Init+0x138>
  {
    Error_Handler();
 8002db0:	f000 fd6e 	bl	8003890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002db4:	4b34      	ldr	r3, [pc, #208]	@ (8002e88 <MX_ADC3_Init+0x20c>)
 8002db6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002db8:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8002dbc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002dbe:	1d3b      	adds	r3, r7, #4
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	482b      	ldr	r0, [pc, #172]	@ (8002e70 <MX_ADC3_Init+0x1f4>)
 8002dc4:	f002 fe62 	bl	8005a8c <HAL_ADC_ConfigChannel>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <MX_ADC3_Init+0x156>
  {
    Error_Handler();
 8002dce:	f000 fd5f 	bl	8003890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002dd2:	4b2e      	ldr	r3, [pc, #184]	@ (8002e8c <MX_ADC3_Init+0x210>)
 8002dd4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8002dd6:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8002dda:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002ddc:	1d3b      	adds	r3, r7, #4
 8002dde:	4619      	mov	r1, r3
 8002de0:	4823      	ldr	r0, [pc, #140]	@ (8002e70 <MX_ADC3_Init+0x1f4>)
 8002de2:	f002 fe53 	bl	8005a8c <HAL_ADC_ConfigChannel>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <MX_ADC3_Init+0x174>
  {
    Error_Handler();
 8002dec:	f000 fd50 	bl	8003890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002df0:	4b27      	ldr	r3, [pc, #156]	@ (8002e90 <MX_ADC3_Init+0x214>)
 8002df2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8002df4:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8002df8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002dfa:	1d3b      	adds	r3, r7, #4
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	481c      	ldr	r0, [pc, #112]	@ (8002e70 <MX_ADC3_Init+0x1f4>)
 8002e00:	f002 fe44 	bl	8005a8c <HAL_ADC_ConfigChannel>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <MX_ADC3_Init+0x192>
  {
    Error_Handler();
 8002e0a:	f000 fd41 	bl	8003890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002e0e:	4b21      	ldr	r3, [pc, #132]	@ (8002e94 <MX_ADC3_Init+0x218>)
 8002e10:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8002e12:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8002e16:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002e18:	1d3b      	adds	r3, r7, #4
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4814      	ldr	r0, [pc, #80]	@ (8002e70 <MX_ADC3_Init+0x1f4>)
 8002e1e:	f002 fe35 	bl	8005a8c <HAL_ADC_ConfigChannel>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <MX_ADC3_Init+0x1b0>
  {
    Error_Handler();
 8002e28:	f000 fd32 	bl	8003890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8002e98 <MX_ADC3_Init+0x21c>)
 8002e2e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8002e30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e34:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002e36:	1d3b      	adds	r3, r7, #4
 8002e38:	4619      	mov	r1, r3
 8002e3a:	480d      	ldr	r0, [pc, #52]	@ (8002e70 <MX_ADC3_Init+0x1f4>)
 8002e3c:	f002 fe26 	bl	8005a8c <HAL_ADC_ConfigChannel>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <MX_ADC3_Init+0x1ce>
  {
    Error_Handler();
 8002e46:	f000 fd23 	bl	8003890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002e4a:	4b14      	ldr	r3, [pc, #80]	@ (8002e9c <MX_ADC3_Init+0x220>)
 8002e4c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8002e4e:	f240 2306 	movw	r3, #518	@ 0x206
 8002e52:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002e54:	1d3b      	adds	r3, r7, #4
 8002e56:	4619      	mov	r1, r3
 8002e58:	4805      	ldr	r0, [pc, #20]	@ (8002e70 <MX_ADC3_Init+0x1f4>)
 8002e5a:	f002 fe17 	bl	8005a8c <HAL_ADC_ConfigChannel>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <MX_ADC3_Init+0x1ec>
  {
    Error_Handler();
 8002e64:	f000 fd14 	bl	8003890 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002e68:	bf00      	nop
 8002e6a:	3728      	adds	r7, #40	@ 0x28
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	24000b64 	.word	0x24000b64
 8002e74:	58026000 	.word	0x58026000
 8002e78:	04300002 	.word	0x04300002
 8002e7c:	08600004 	.word	0x08600004
 8002e80:	0c900008 	.word	0x0c900008
 8002e84:	10c00010 	.word	0x10c00010
 8002e88:	14f00020 	.word	0x14f00020
 8002e8c:	19200040 	.word	0x19200040
 8002e90:	1d500080 	.word	0x1d500080
 8002e94:	21800100 	.word	0x21800100
 8002e98:	25b00200 	.word	0x25b00200
 8002e9c:	2a000400 	.word	0x2a000400

08002ea0 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8002ea4:	4b13      	ldr	r3, [pc, #76]	@ (8002ef4 <MX_COMP2_Init+0x54>)
 8002ea6:	4a14      	ldr	r2, [pc, #80]	@ (8002ef8 <MX_COMP2_Init+0x58>)
 8002ea8:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 8002eaa:	4b12      	ldr	r3, [pc, #72]	@ (8002ef4 <MX_COMP2_Init+0x54>)
 8002eac:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8002eb0:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8002eb2:	4b10      	ldr	r3, [pc, #64]	@ (8002ef4 <MX_COMP2_Init+0x54>)
 8002eb4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002eb8:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8002eba:	4b0e      	ldr	r3, [pc, #56]	@ (8002ef4 <MX_COMP2_Init+0x54>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8002ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef4 <MX_COMP2_Init+0x54>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8002ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef4 <MX_COMP2_Init+0x54>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8002ecc:	4b09      	ldr	r3, [pc, #36]	@ (8002ef4 <MX_COMP2_Init+0x54>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8002ed2:	4b08      	ldr	r3, [pc, #32]	@ (8002ef4 <MX_COMP2_Init+0x54>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8002ed8:	4b06      	ldr	r3, [pc, #24]	@ (8002ef4 <MX_COMP2_Init+0x54>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8002ede:	4805      	ldr	r0, [pc, #20]	@ (8002ef4 <MX_COMP2_Init+0x54>)
 8002ee0:	f004 fb92 	bl	8007608 <HAL_COMP_Init>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <MX_COMP2_Init+0x4e>
  {
    Error_Handler();
 8002eea:	f000 fcd1 	bl	8003890 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8002eee:	bf00      	nop
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	24000cc4 	.word	0x24000cc4
 8002ef8:	58003810 	.word	0x58003810

08002efc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002f00:	4b1e      	ldr	r3, [pc, #120]	@ (8002f7c <MX_ETH_Init+0x80>)
 8002f02:	4a1f      	ldr	r2, [pc, #124]	@ (8002f80 <MX_ETH_Init+0x84>)
 8002f04:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8002f06:	4b1f      	ldr	r3, [pc, #124]	@ (8002f84 <MX_ETH_Init+0x88>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8002f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8002f84 <MX_ETH_Init+0x88>)
 8002f0e:	2280      	movs	r2, #128	@ 0x80
 8002f10:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8002f12:	4b1c      	ldr	r3, [pc, #112]	@ (8002f84 <MX_ETH_Init+0x88>)
 8002f14:	22e1      	movs	r2, #225	@ 0xe1
 8002f16:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002f18:	4b1a      	ldr	r3, [pc, #104]	@ (8002f84 <MX_ETH_Init+0x88>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8002f1e:	4b19      	ldr	r3, [pc, #100]	@ (8002f84 <MX_ETH_Init+0x88>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8002f24:	4b17      	ldr	r3, [pc, #92]	@ (8002f84 <MX_ETH_Init+0x88>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8002f2a:	4b14      	ldr	r3, [pc, #80]	@ (8002f7c <MX_ETH_Init+0x80>)
 8002f2c:	4a15      	ldr	r2, [pc, #84]	@ (8002f84 <MX_ETH_Init+0x88>)
 8002f2e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002f30:	4b12      	ldr	r3, [pc, #72]	@ (8002f7c <MX_ETH_Init+0x80>)
 8002f32:	2201      	movs	r2, #1
 8002f34:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002f36:	4b11      	ldr	r3, [pc, #68]	@ (8002f7c <MX_ETH_Init+0x80>)
 8002f38:	4a13      	ldr	r2, [pc, #76]	@ (8002f88 <MX_ETH_Init+0x8c>)
 8002f3a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8002f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f7c <MX_ETH_Init+0x80>)
 8002f3e:	4a13      	ldr	r2, [pc, #76]	@ (8002f8c <MX_ETH_Init+0x90>)
 8002f40:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8002f42:	4b0e      	ldr	r3, [pc, #56]	@ (8002f7c <MX_ETH_Init+0x80>)
 8002f44:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8002f48:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002f4a:	480c      	ldr	r0, [pc, #48]	@ (8002f7c <MX_ETH_Init+0x80>)
 8002f4c:	f006 fe6a 	bl	8009c24 <HAL_ETH_Init>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8002f56:	f000 fc9b 	bl	8003890 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002f5a:	2238      	movs	r2, #56	@ 0x38
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	480c      	ldr	r0, [pc, #48]	@ (8002f90 <MX_ETH_Init+0x94>)
 8002f60:	f00f f933 	bl	80121ca <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002f64:	4b0a      	ldr	r3, [pc, #40]	@ (8002f90 <MX_ETH_Init+0x94>)
 8002f66:	2221      	movs	r2, #33	@ 0x21
 8002f68:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002f6a:	4b09      	ldr	r3, [pc, #36]	@ (8002f90 <MX_ETH_Init+0x94>)
 8002f6c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002f70:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002f72:	4b07      	ldr	r3, [pc, #28]	@ (8002f90 <MX_ETH_Init+0x94>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8002f78:	bf00      	nop
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	24000cf0 	.word	0x24000cf0
 8002f80:	40028000 	.word	0x40028000
 8002f84:	24001090 	.word	0x24001090
 8002f88:	24000270 	.word	0x24000270
 8002f8c:	24000210 	.word	0x24000210
 8002f90:	24000a4c 	.word	0x24000a4c

08002f94 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002f98:	4b22      	ldr	r3, [pc, #136]	@ (8003024 <MX_LPUART1_UART_Init+0x90>)
 8002f9a:	4a23      	ldr	r2, [pc, #140]	@ (8003028 <MX_LPUART1_UART_Init+0x94>)
 8002f9c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8002f9e:	4b21      	ldr	r3, [pc, #132]	@ (8003024 <MX_LPUART1_UART_Init+0x90>)
 8002fa0:	4a22      	ldr	r2, [pc, #136]	@ (800302c <MX_LPUART1_UART_Init+0x98>)
 8002fa2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8003024 <MX_LPUART1_UART_Init+0x90>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002faa:	4b1e      	ldr	r3, [pc, #120]	@ (8003024 <MX_LPUART1_UART_Init+0x90>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002fb0:	4b1c      	ldr	r3, [pc, #112]	@ (8003024 <MX_LPUART1_UART_Init+0x90>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8003024 <MX_LPUART1_UART_Init+0x90>)
 8002fb8:	220c      	movs	r2, #12
 8002fba:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fbc:	4b19      	ldr	r3, [pc, #100]	@ (8003024 <MX_LPUART1_UART_Init+0x90>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fc2:	4b18      	ldr	r3, [pc, #96]	@ (8003024 <MX_LPUART1_UART_Init+0x90>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002fc8:	4b16      	ldr	r3, [pc, #88]	@ (8003024 <MX_LPUART1_UART_Init+0x90>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fce:	4b15      	ldr	r3, [pc, #84]	@ (8003024 <MX_LPUART1_UART_Init+0x90>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002fd4:	4b13      	ldr	r3, [pc, #76]	@ (8003024 <MX_LPUART1_UART_Init+0x90>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002fda:	4812      	ldr	r0, [pc, #72]	@ (8003024 <MX_LPUART1_UART_Init+0x90>)
 8002fdc:	f00c ff83 	bl	800fee6 <HAL_UART_Init>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8002fe6:	f000 fc53 	bl	8003890 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fea:	2100      	movs	r1, #0
 8002fec:	480d      	ldr	r0, [pc, #52]	@ (8003024 <MX_LPUART1_UART_Init+0x90>)
 8002fee:	f00e f9e0 	bl	80113b2 <HAL_UARTEx_SetTxFifoThreshold>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8002ff8:	f000 fc4a 	bl	8003890 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	4809      	ldr	r0, [pc, #36]	@ (8003024 <MX_LPUART1_UART_Init+0x90>)
 8003000:	f00e fa15 	bl	801142e <HAL_UARTEx_SetRxFifoThreshold>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 800300a:	f000 fc41 	bl	8003890 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800300e:	4805      	ldr	r0, [pc, #20]	@ (8003024 <MX_LPUART1_UART_Init+0x90>)
 8003010:	f00e f996 	bl	8011340 <HAL_UARTEx_DisableFifoMode>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 800301a:	f000 fc39 	bl	8003890 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800301e:	bf00      	nop
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	24000da0 	.word	0x24000da0
 8003028:	58000c00 	.word	0x58000c00
 800302c:	00033324 	.word	0x00033324

08003030 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003034:	4b22      	ldr	r3, [pc, #136]	@ (80030c0 <MX_USART3_UART_Init+0x90>)
 8003036:	4a23      	ldr	r2, [pc, #140]	@ (80030c4 <MX_USART3_UART_Init+0x94>)
 8003038:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 8593750;
 800303a:	4b21      	ldr	r3, [pc, #132]	@ (80030c0 <MX_USART3_UART_Init+0x90>)
 800303c:	4a22      	ldr	r2, [pc, #136]	@ (80030c8 <MX_USART3_UART_Init+0x98>)
 800303e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003040:	4b1f      	ldr	r3, [pc, #124]	@ (80030c0 <MX_USART3_UART_Init+0x90>)
 8003042:	2200      	movs	r2, #0
 8003044:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003046:	4b1e      	ldr	r3, [pc, #120]	@ (80030c0 <MX_USART3_UART_Init+0x90>)
 8003048:	2200      	movs	r2, #0
 800304a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800304c:	4b1c      	ldr	r3, [pc, #112]	@ (80030c0 <MX_USART3_UART_Init+0x90>)
 800304e:	2200      	movs	r2, #0
 8003050:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003052:	4b1b      	ldr	r3, [pc, #108]	@ (80030c0 <MX_USART3_UART_Init+0x90>)
 8003054:	220c      	movs	r2, #12
 8003056:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003058:	4b19      	ldr	r3, [pc, #100]	@ (80030c0 <MX_USART3_UART_Init+0x90>)
 800305a:	2200      	movs	r2, #0
 800305c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800305e:	4b18      	ldr	r3, [pc, #96]	@ (80030c0 <MX_USART3_UART_Init+0x90>)
 8003060:	2200      	movs	r2, #0
 8003062:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003064:	4b16      	ldr	r3, [pc, #88]	@ (80030c0 <MX_USART3_UART_Init+0x90>)
 8003066:	2200      	movs	r2, #0
 8003068:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800306a:	4b15      	ldr	r3, [pc, #84]	@ (80030c0 <MX_USART3_UART_Init+0x90>)
 800306c:	2200      	movs	r2, #0
 800306e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003070:	4b13      	ldr	r3, [pc, #76]	@ (80030c0 <MX_USART3_UART_Init+0x90>)
 8003072:	2200      	movs	r2, #0
 8003074:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003076:	4812      	ldr	r0, [pc, #72]	@ (80030c0 <MX_USART3_UART_Init+0x90>)
 8003078:	f00c ff35 	bl	800fee6 <HAL_UART_Init>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8003082:	f000 fc05 	bl	8003890 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003086:	2100      	movs	r1, #0
 8003088:	480d      	ldr	r0, [pc, #52]	@ (80030c0 <MX_USART3_UART_Init+0x90>)
 800308a:	f00e f992 	bl	80113b2 <HAL_UARTEx_SetTxFifoThreshold>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8003094:	f000 fbfc 	bl	8003890 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003098:	2100      	movs	r1, #0
 800309a:	4809      	ldr	r0, [pc, #36]	@ (80030c0 <MX_USART3_UART_Init+0x90>)
 800309c:	f00e f9c7 	bl	801142e <HAL_UARTEx_SetRxFifoThreshold>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 80030a6:	f000 fbf3 	bl	8003890 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80030aa:	4805      	ldr	r0, [pc, #20]	@ (80030c0 <MX_USART3_UART_Init+0x90>)
 80030ac:	f00e f948 	bl	8011340 <HAL_UARTEx_DisableFifoMode>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 80030b6:	f000 fbeb 	bl	8003890 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80030ba:	bf00      	nop
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	24000e34 	.word	0x24000e34
 80030c4:	40004800 	.word	0x40004800
 80030c8:	00832156 	.word	0x00832156

080030cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b098      	sub	sp, #96	@ 0x60
 80030d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030d2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	605a      	str	r2, [r3, #4]
 80030dc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030de:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	605a      	str	r2, [r3, #4]
 80030e8:	609a      	str	r2, [r3, #8]
 80030ea:	60da      	str	r2, [r3, #12]
 80030ec:	611a      	str	r2, [r3, #16]
 80030ee:	615a      	str	r2, [r3, #20]
 80030f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80030f2:	1d3b      	adds	r3, r7, #4
 80030f4:	2234      	movs	r2, #52	@ 0x34
 80030f6:	2100      	movs	r1, #0
 80030f8:	4618      	mov	r0, r3
 80030fa:	f00f f866 	bl	80121ca <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80030fe:	4b3a      	ldr	r3, [pc, #232]	@ (80031e8 <MX_TIM1_Init+0x11c>)
 8003100:	4a3a      	ldr	r2, [pc, #232]	@ (80031ec <MX_TIM1_Init+0x120>)
 8003102:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003104:	4b38      	ldr	r3, [pc, #224]	@ (80031e8 <MX_TIM1_Init+0x11c>)
 8003106:	2200      	movs	r2, #0
 8003108:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800310a:	4b37      	ldr	r3, [pc, #220]	@ (80031e8 <MX_TIM1_Init+0x11c>)
 800310c:	2200      	movs	r2, #0
 800310e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3240;
 8003110:	4b35      	ldr	r3, [pc, #212]	@ (80031e8 <MX_TIM1_Init+0x11c>)
 8003112:	f640 42a8 	movw	r2, #3240	@ 0xca8
 8003116:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003118:	4b33      	ldr	r3, [pc, #204]	@ (80031e8 <MX_TIM1_Init+0x11c>)
 800311a:	2200      	movs	r2, #0
 800311c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800311e:	4b32      	ldr	r3, [pc, #200]	@ (80031e8 <MX_TIM1_Init+0x11c>)
 8003120:	2200      	movs	r2, #0
 8003122:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003124:	4b30      	ldr	r3, [pc, #192]	@ (80031e8 <MX_TIM1_Init+0x11c>)
 8003126:	2200      	movs	r2, #0
 8003128:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800312a:	482f      	ldr	r0, [pc, #188]	@ (80031e8 <MX_TIM1_Init+0x11c>)
 800312c:	f00b f9cc 	bl	800e4c8 <HAL_TIM_PWM_Init>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8003136:	f000 fbab 	bl	8003890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800313a:	2300      	movs	r3, #0
 800313c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800313e:	2300      	movs	r3, #0
 8003140:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003142:	2300      	movs	r3, #0
 8003144:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003146:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800314a:	4619      	mov	r1, r3
 800314c:	4826      	ldr	r0, [pc, #152]	@ (80031e8 <MX_TIM1_Init+0x11c>)
 800314e:	f00c fd69 	bl	800fc24 <HAL_TIMEx_MasterConfigSynchronization>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003158:	f000 fb9a 	bl	8003890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800315c:	2360      	movs	r3, #96	@ 0x60
 800315e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 1620;
 8003160:	f240 6354 	movw	r3, #1620	@ 0x654
 8003164:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003166:	2302      	movs	r3, #2
 8003168:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 800316a:	2308      	movs	r3, #8
 800316c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800316e:	2300      	movs	r3, #0
 8003170:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8003172:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003176:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8003178:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800317c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800317e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003182:	2200      	movs	r2, #0
 8003184:	4619      	mov	r1, r3
 8003186:	4818      	ldr	r0, [pc, #96]	@ (80031e8 <MX_TIM1_Init+0x11c>)
 8003188:	f00b fc9c 	bl	800eac4 <HAL_TIM_PWM_ConfigChannel>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003192:	f000 fb7d 	bl	8003890 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003196:	2300      	movs	r3, #0
 8003198:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800319a:	2300      	movs	r3, #0
 800319c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800319e:	2300      	movs	r3, #0
 80031a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0xFF;
 80031a2:	23ff      	movs	r3, #255	@ 0xff
 80031a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80031a6:	2300      	movs	r3, #0
 80031a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80031aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80031ae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80031b0:	2300      	movs	r3, #0
 80031b2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80031b4:	2300      	movs	r3, #0
 80031b6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80031b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80031be:	2300      	movs	r3, #0
 80031c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80031c2:	2300      	movs	r3, #0
 80031c4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80031c6:	1d3b      	adds	r3, r7, #4
 80031c8:	4619      	mov	r1, r3
 80031ca:	4807      	ldr	r0, [pc, #28]	@ (80031e8 <MX_TIM1_Init+0x11c>)
 80031cc:	f00c fdc6 	bl	800fd5c <HAL_TIMEx_ConfigBreakDeadTime>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80031d6:	f000 fb5b 	bl	8003890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80031da:	4803      	ldr	r0, [pc, #12]	@ (80031e8 <MX_TIM1_Init+0x11c>)
 80031dc:	f000 ffc8 	bl	8004170 <HAL_TIM_MspPostInit>

}
 80031e0:	bf00      	nop
 80031e2:	3760      	adds	r7, #96	@ 0x60
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	24000ec8 	.word	0x24000ec8
 80031ec:	40010000 	.word	0x40010000

080031f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08a      	sub	sp, #40	@ 0x28
 80031f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031f6:	f107 031c 	add.w	r3, r7, #28
 80031fa:	2200      	movs	r2, #0
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	605a      	str	r2, [r3, #4]
 8003200:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003202:	463b      	mov	r3, r7
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	605a      	str	r2, [r3, #4]
 800320a:	609a      	str	r2, [r3, #8]
 800320c:	60da      	str	r2, [r3, #12]
 800320e:	611a      	str	r2, [r3, #16]
 8003210:	615a      	str	r2, [r3, #20]
 8003212:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003214:	4b22      	ldr	r3, [pc, #136]	@ (80032a0 <MX_TIM2_Init+0xb0>)
 8003216:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800321a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800321c:	4b20      	ldr	r3, [pc, #128]	@ (80032a0 <MX_TIM2_Init+0xb0>)
 800321e:	2200      	movs	r2, #0
 8003220:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003222:	4b1f      	ldr	r3, [pc, #124]	@ (80032a0 <MX_TIM2_Init+0xb0>)
 8003224:	2200      	movs	r2, #0
 8003226:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003228:	4b1d      	ldr	r3, [pc, #116]	@ (80032a0 <MX_TIM2_Init+0xb0>)
 800322a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800322e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003230:	4b1b      	ldr	r3, [pc, #108]	@ (80032a0 <MX_TIM2_Init+0xb0>)
 8003232:	2200      	movs	r2, #0
 8003234:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003236:	4b1a      	ldr	r3, [pc, #104]	@ (80032a0 <MX_TIM2_Init+0xb0>)
 8003238:	2200      	movs	r2, #0
 800323a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800323c:	4818      	ldr	r0, [pc, #96]	@ (80032a0 <MX_TIM2_Init+0xb0>)
 800323e:	f00b f943 	bl	800e4c8 <HAL_TIM_PWM_Init>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8003248:	f000 fb22 	bl	8003890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800324c:	2300      	movs	r3, #0
 800324e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003250:	2300      	movs	r3, #0
 8003252:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003254:	f107 031c 	add.w	r3, r7, #28
 8003258:	4619      	mov	r1, r3
 800325a:	4811      	ldr	r0, [pc, #68]	@ (80032a0 <MX_TIM2_Init+0xb0>)
 800325c:	f00c fce2 	bl	800fc24 <HAL_TIMEx_MasterConfigSynchronization>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8003266:	f000 fb13 	bl	8003890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800326a:	2360      	movs	r3, #96	@ 0x60
 800326c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800326e:	2300      	movs	r3, #0
 8003270:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003272:	2300      	movs	r3, #0
 8003274:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003276:	2300      	movs	r3, #0
 8003278:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800327a:	463b      	mov	r3, r7
 800327c:	2200      	movs	r2, #0
 800327e:	4619      	mov	r1, r3
 8003280:	4807      	ldr	r0, [pc, #28]	@ (80032a0 <MX_TIM2_Init+0xb0>)
 8003282:	f00b fc1f 	bl	800eac4 <HAL_TIM_PWM_ConfigChannel>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800328c:	f000 fb00 	bl	8003890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003290:	4803      	ldr	r0, [pc, #12]	@ (80032a0 <MX_TIM2_Init+0xb0>)
 8003292:	f000 ff6d 	bl	8004170 <HAL_TIM_MspPostInit>

}
 8003296:	bf00      	nop
 8003298:	3728      	adds	r7, #40	@ 0x28
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	24000f14 	.word	0x24000f14

080032a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b088      	sub	sp, #32
 80032a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032aa:	f107 0314 	add.w	r3, r7, #20
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	605a      	str	r2, [r3, #4]
 80032b4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80032b6:	1d3b      	adds	r3, r7, #4
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	605a      	str	r2, [r3, #4]
 80032be:	609a      	str	r2, [r3, #8]
 80032c0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80032c2:	4b20      	ldr	r3, [pc, #128]	@ (8003344 <MX_TIM3_Init+0xa0>)
 80032c4:	4a20      	ldr	r2, [pc, #128]	@ (8003348 <MX_TIM3_Init+0xa4>)
 80032c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80032c8:	4b1e      	ldr	r3, [pc, #120]	@ (8003344 <MX_TIM3_Init+0xa0>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003344 <MX_TIM3_Init+0xa0>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80032d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003344 <MX_TIM3_Init+0xa0>)
 80032d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032dc:	4b19      	ldr	r3, [pc, #100]	@ (8003344 <MX_TIM3_Init+0xa0>)
 80032de:	2200      	movs	r2, #0
 80032e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032e2:	4b18      	ldr	r3, [pc, #96]	@ (8003344 <MX_TIM3_Init+0xa0>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80032e8:	4816      	ldr	r0, [pc, #88]	@ (8003344 <MX_TIM3_Init+0xa0>)
 80032ea:	f00b faf7 	bl	800e8dc <HAL_TIM_IC_Init>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80032f4:	f000 facc 	bl	8003890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032f8:	2300      	movs	r3, #0
 80032fa:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032fc:	2300      	movs	r3, #0
 80032fe:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003300:	f107 0314 	add.w	r3, r7, #20
 8003304:	4619      	mov	r1, r3
 8003306:	480f      	ldr	r0, [pc, #60]	@ (8003344 <MX_TIM3_Init+0xa0>)
 8003308:	f00c fc8c 	bl	800fc24 <HAL_TIMEx_MasterConfigSynchronization>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8003312:	f000 fabd 	bl	8003890 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003316:	2300      	movs	r3, #0
 8003318:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800331a:	2301      	movs	r3, #1
 800331c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800331e:	2300      	movs	r3, #0
 8003320:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003322:	2300      	movs	r3, #0
 8003324:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003326:	1d3b      	adds	r3, r7, #4
 8003328:	2200      	movs	r2, #0
 800332a:	4619      	mov	r1, r3
 800332c:	4805      	ldr	r0, [pc, #20]	@ (8003344 <MX_TIM3_Init+0xa0>)
 800332e:	f00b fb2c 	bl	800e98a <HAL_TIM_IC_ConfigChannel>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003338:	f000 faaa 	bl	8003890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800333c:	bf00      	nop
 800333e:	3720      	adds	r7, #32
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	24000f60 	.word	0x24000f60
 8003348:	40000400 	.word	0x40000400

0800334c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b08a      	sub	sp, #40	@ 0x28
 8003350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003352:	f107 031c 	add.w	r3, r7, #28
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	605a      	str	r2, [r3, #4]
 800335c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800335e:	463b      	mov	r3, r7
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	605a      	str	r2, [r3, #4]
 8003366:	609a      	str	r2, [r3, #8]
 8003368:	60da      	str	r2, [r3, #12]
 800336a:	611a      	str	r2, [r3, #16]
 800336c:	615a      	str	r2, [r3, #20]
 800336e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003370:	4b21      	ldr	r3, [pc, #132]	@ (80033f8 <MX_TIM4_Init+0xac>)
 8003372:	4a22      	ldr	r2, [pc, #136]	@ (80033fc <MX_TIM4_Init+0xb0>)
 8003374:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003376:	4b20      	ldr	r3, [pc, #128]	@ (80033f8 <MX_TIM4_Init+0xac>)
 8003378:	2200      	movs	r2, #0
 800337a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800337c:	4b1e      	ldr	r3, [pc, #120]	@ (80033f8 <MX_TIM4_Init+0xac>)
 800337e:	2200      	movs	r2, #0
 8003380:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003382:	4b1d      	ldr	r3, [pc, #116]	@ (80033f8 <MX_TIM4_Init+0xac>)
 8003384:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003388:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800338a:	4b1b      	ldr	r3, [pc, #108]	@ (80033f8 <MX_TIM4_Init+0xac>)
 800338c:	2200      	movs	r2, #0
 800338e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003390:	4b19      	ldr	r3, [pc, #100]	@ (80033f8 <MX_TIM4_Init+0xac>)
 8003392:	2200      	movs	r2, #0
 8003394:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003396:	4818      	ldr	r0, [pc, #96]	@ (80033f8 <MX_TIM4_Init+0xac>)
 8003398:	f00b f896 	bl	800e4c8 <HAL_TIM_PWM_Init>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80033a2:	f000 fa75 	bl	8003890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033a6:	2300      	movs	r3, #0
 80033a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033aa:	2300      	movs	r3, #0
 80033ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80033ae:	f107 031c 	add.w	r3, r7, #28
 80033b2:	4619      	mov	r1, r3
 80033b4:	4810      	ldr	r0, [pc, #64]	@ (80033f8 <MX_TIM4_Init+0xac>)
 80033b6:	f00c fc35 	bl	800fc24 <HAL_TIMEx_MasterConfigSynchronization>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80033c0:	f000 fa66 	bl	8003890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033c4:	2360      	movs	r3, #96	@ 0x60
 80033c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80033c8:	2300      	movs	r3, #0
 80033ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033cc:	2300      	movs	r3, #0
 80033ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033d0:	2300      	movs	r3, #0
 80033d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033d4:	463b      	mov	r3, r7
 80033d6:	2200      	movs	r2, #0
 80033d8:	4619      	mov	r1, r3
 80033da:	4807      	ldr	r0, [pc, #28]	@ (80033f8 <MX_TIM4_Init+0xac>)
 80033dc:	f00b fb72 	bl	800eac4 <HAL_TIM_PWM_ConfigChannel>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80033e6:	f000 fa53 	bl	8003890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80033ea:	4803      	ldr	r0, [pc, #12]	@ (80033f8 <MX_TIM4_Init+0xac>)
 80033ec:	f000 fec0 	bl	8004170 <HAL_TIM_MspPostInit>

}
 80033f0:	bf00      	nop
 80033f2:	3728      	adds	r7, #40	@ 0x28
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	24000fac 	.word	0x24000fac
 80033fc:	40000800 	.word	0x40000800

08003400 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b088      	sub	sp, #32
 8003404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003406:	f107 0314 	add.w	r3, r7, #20
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	605a      	str	r2, [r3, #4]
 8003410:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003412:	1d3b      	adds	r3, r7, #4
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	605a      	str	r2, [r3, #4]
 800341a:	609a      	str	r2, [r3, #8]
 800341c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800341e:	4b22      	ldr	r3, [pc, #136]	@ (80034a8 <MX_TIM15_Init+0xa8>)
 8003420:	4a22      	ldr	r2, [pc, #136]	@ (80034ac <MX_TIM15_Init+0xac>)
 8003422:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8003424:	4b20      	ldr	r3, [pc, #128]	@ (80034a8 <MX_TIM15_Init+0xa8>)
 8003426:	2200      	movs	r2, #0
 8003428:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800342a:	4b1f      	ldr	r3, [pc, #124]	@ (80034a8 <MX_TIM15_Init+0xa8>)
 800342c:	2200      	movs	r2, #0
 800342e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8003430:	4b1d      	ldr	r3, [pc, #116]	@ (80034a8 <MX_TIM15_Init+0xa8>)
 8003432:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003436:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003438:	4b1b      	ldr	r3, [pc, #108]	@ (80034a8 <MX_TIM15_Init+0xa8>)
 800343a:	2200      	movs	r2, #0
 800343c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800343e:	4b1a      	ldr	r3, [pc, #104]	@ (80034a8 <MX_TIM15_Init+0xa8>)
 8003440:	2200      	movs	r2, #0
 8003442:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003444:	4b18      	ldr	r3, [pc, #96]	@ (80034a8 <MX_TIM15_Init+0xa8>)
 8003446:	2200      	movs	r2, #0
 8003448:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 800344a:	4817      	ldr	r0, [pc, #92]	@ (80034a8 <MX_TIM15_Init+0xa8>)
 800344c:	f00b fa46 	bl	800e8dc <HAL_TIM_IC_Init>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8003456:	f000 fa1b 	bl	8003890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800345a:	2300      	movs	r3, #0
 800345c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800345e:	2300      	movs	r3, #0
 8003460:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003462:	f107 0314 	add.w	r3, r7, #20
 8003466:	4619      	mov	r1, r3
 8003468:	480f      	ldr	r0, [pc, #60]	@ (80034a8 <MX_TIM15_Init+0xa8>)
 800346a:	f00c fbdb 	bl	800fc24 <HAL_TIMEx_MasterConfigSynchronization>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8003474:	f000 fa0c 	bl	8003890 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003478:	2300      	movs	r3, #0
 800347a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800347c:	2301      	movs	r3, #1
 800347e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003484:	2300      	movs	r3, #0
 8003486:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003488:	1d3b      	adds	r3, r7, #4
 800348a:	2200      	movs	r2, #0
 800348c:	4619      	mov	r1, r3
 800348e:	4806      	ldr	r0, [pc, #24]	@ (80034a8 <MX_TIM15_Init+0xa8>)
 8003490:	f00b fa7b 	bl	800e98a <HAL_TIM_IC_ConfigChannel>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <MX_TIM15_Init+0x9e>
  {
    Error_Handler();
 800349a:	f000 f9f9 	bl	8003890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800349e:	bf00      	nop
 80034a0:	3720      	adds	r7, #32
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	24000ff8 	.word	0x24000ff8
 80034ac:	40014000 	.word	0x40014000

080034b0 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b088      	sub	sp, #32
 80034b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034b6:	f107 0310 	add.w	r3, r7, #16
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	605a      	str	r2, [r3, #4]
 80034c0:	609a      	str	r2, [r3, #8]
 80034c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034c4:	1d3b      	adds	r3, r7, #4
 80034c6:	2200      	movs	r2, #0
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	605a      	str	r2, [r3, #4]
 80034cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 80034ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003548 <MX_TIM24_Init+0x98>)
 80034d0:	4a1e      	ldr	r2, [pc, #120]	@ (800354c <MX_TIM24_Init+0x9c>)
 80034d2:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 275 - 1;
 80034d4:	4b1c      	ldr	r3, [pc, #112]	@ (8003548 <MX_TIM24_Init+0x98>)
 80034d6:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80034da:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003548 <MX_TIM24_Init+0x98>)
 80034de:	2200      	movs	r2, #0
 80034e0:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 80034e2:	4b19      	ldr	r3, [pc, #100]	@ (8003548 <MX_TIM24_Init+0x98>)
 80034e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80034e8:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034ea:	4b17      	ldr	r3, [pc, #92]	@ (8003548 <MX_TIM24_Init+0x98>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80034f0:	4b15      	ldr	r3, [pc, #84]	@ (8003548 <MX_TIM24_Init+0x98>)
 80034f2:	2280      	movs	r2, #128	@ 0x80
 80034f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 80034f6:	4814      	ldr	r0, [pc, #80]	@ (8003548 <MX_TIM24_Init+0x98>)
 80034f8:	f00a ff10 	bl	800e31c <HAL_TIM_Base_Init>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <MX_TIM24_Init+0x56>
  {
    Error_Handler();
 8003502:	f000 f9c5 	bl	8003890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003506:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800350a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 800350c:	f107 0310 	add.w	r3, r7, #16
 8003510:	4619      	mov	r1, r3
 8003512:	480d      	ldr	r0, [pc, #52]	@ (8003548 <MX_TIM24_Init+0x98>)
 8003514:	f00b fbea 	bl	800ecec <HAL_TIM_ConfigClockSource>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <MX_TIM24_Init+0x72>
  {
    Error_Handler();
 800351e:	f000 f9b7 	bl	8003890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003522:	2300      	movs	r3, #0
 8003524:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003526:	2300      	movs	r3, #0
 8003528:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 800352a:	1d3b      	adds	r3, r7, #4
 800352c:	4619      	mov	r1, r3
 800352e:	4806      	ldr	r0, [pc, #24]	@ (8003548 <MX_TIM24_Init+0x98>)
 8003530:	f00c fb78 	bl	800fc24 <HAL_TIMEx_MasterConfigSynchronization>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <MX_TIM24_Init+0x8e>
  {
    Error_Handler();
 800353a:	f000 f9a9 	bl	8003890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 800353e:	bf00      	nop
 8003540:	3720      	adds	r7, #32
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	24001044 	.word	0x24001044
 800354c:	4000e400 	.word	0x4000e400

08003550 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8003554:	bf00      	nop
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
	...

08003560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003566:	4b11      	ldr	r3, [pc, #68]	@ (80035ac <MX_DMA_Init+0x4c>)
 8003568:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800356c:	4a0f      	ldr	r2, [pc, #60]	@ (80035ac <MX_DMA_Init+0x4c>)
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003576:	4b0d      	ldr	r3, [pc, #52]	@ (80035ac <MX_DMA_Init+0x4c>)
 8003578:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	607b      	str	r3, [r7, #4]
 8003582:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003584:	2200      	movs	r2, #0
 8003586:	2100      	movs	r1, #0
 8003588:	200c      	movs	r0, #12
 800358a:	f004 fa42 	bl	8007a12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800358e:	200c      	movs	r0, #12
 8003590:	f004 fa59 	bl	8007a46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8003594:	2200      	movs	r2, #0
 8003596:	2100      	movs	r1, #0
 8003598:	200d      	movs	r0, #13
 800359a:	f004 fa3a 	bl	8007a12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800359e:	200d      	movs	r0, #13
 80035a0:	f004 fa51 	bl	8007a46 <HAL_NVIC_EnableIRQ>

}
 80035a4:	bf00      	nop
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	58024400 	.word	0x58024400

080035b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b08e      	sub	sp, #56	@ 0x38
 80035b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035ba:	2200      	movs	r2, #0
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	605a      	str	r2, [r3, #4]
 80035c0:	609a      	str	r2, [r3, #8]
 80035c2:	60da      	str	r2, [r3, #12]
 80035c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80035c6:	4bab      	ldr	r3, [pc, #684]	@ (8003874 <MX_GPIO_Init+0x2c4>)
 80035c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035cc:	4aa9      	ldr	r2, [pc, #676]	@ (8003874 <MX_GPIO_Init+0x2c4>)
 80035ce:	f043 0310 	orr.w	r3, r3, #16
 80035d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80035d6:	4ba7      	ldr	r3, [pc, #668]	@ (8003874 <MX_GPIO_Init+0x2c4>)
 80035d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035dc:	f003 0310 	and.w	r3, r3, #16
 80035e0:	623b      	str	r3, [r7, #32]
 80035e2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035e4:	4ba3      	ldr	r3, [pc, #652]	@ (8003874 <MX_GPIO_Init+0x2c4>)
 80035e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035ea:	4aa2      	ldr	r2, [pc, #648]	@ (8003874 <MX_GPIO_Init+0x2c4>)
 80035ec:	f043 0304 	orr.w	r3, r3, #4
 80035f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80035f4:	4b9f      	ldr	r3, [pc, #636]	@ (8003874 <MX_GPIO_Init+0x2c4>)
 80035f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035fa:	f003 0304 	and.w	r3, r3, #4
 80035fe:	61fb      	str	r3, [r7, #28]
 8003600:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003602:	4b9c      	ldr	r3, [pc, #624]	@ (8003874 <MX_GPIO_Init+0x2c4>)
 8003604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003608:	4a9a      	ldr	r2, [pc, #616]	@ (8003874 <MX_GPIO_Init+0x2c4>)
 800360a:	f043 0320 	orr.w	r3, r3, #32
 800360e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003612:	4b98      	ldr	r3, [pc, #608]	@ (8003874 <MX_GPIO_Init+0x2c4>)
 8003614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003618:	f003 0320 	and.w	r3, r3, #32
 800361c:	61bb      	str	r3, [r7, #24]
 800361e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003620:	4b94      	ldr	r3, [pc, #592]	@ (8003874 <MX_GPIO_Init+0x2c4>)
 8003622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003626:	4a93      	ldr	r2, [pc, #588]	@ (8003874 <MX_GPIO_Init+0x2c4>)
 8003628:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800362c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003630:	4b90      	ldr	r3, [pc, #576]	@ (8003874 <MX_GPIO_Init+0x2c4>)
 8003632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800363e:	4b8d      	ldr	r3, [pc, #564]	@ (8003874 <MX_GPIO_Init+0x2c4>)
 8003640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003644:	4a8b      	ldr	r2, [pc, #556]	@ (8003874 <MX_GPIO_Init+0x2c4>)
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800364e:	4b89      	ldr	r3, [pc, #548]	@ (8003874 <MX_GPIO_Init+0x2c4>)
 8003650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	613b      	str	r3, [r7, #16]
 800365a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800365c:	4b85      	ldr	r3, [pc, #532]	@ (8003874 <MX_GPIO_Init+0x2c4>)
 800365e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003662:	4a84      	ldr	r2, [pc, #528]	@ (8003874 <MX_GPIO_Init+0x2c4>)
 8003664:	f043 0302 	orr.w	r3, r3, #2
 8003668:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800366c:	4b81      	ldr	r3, [pc, #516]	@ (8003874 <MX_GPIO_Init+0x2c4>)
 800366e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800367a:	4b7e      	ldr	r3, [pc, #504]	@ (8003874 <MX_GPIO_Init+0x2c4>)
 800367c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003680:	4a7c      	ldr	r2, [pc, #496]	@ (8003874 <MX_GPIO_Init+0x2c4>)
 8003682:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003686:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800368a:	4b7a      	ldr	r3, [pc, #488]	@ (8003874 <MX_GPIO_Init+0x2c4>)
 800368c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003694:	60bb      	str	r3, [r7, #8]
 8003696:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003698:	4b76      	ldr	r3, [pc, #472]	@ (8003874 <MX_GPIO_Init+0x2c4>)
 800369a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800369e:	4a75      	ldr	r2, [pc, #468]	@ (8003874 <MX_GPIO_Init+0x2c4>)
 80036a0:	f043 0308 	orr.w	r3, r3, #8
 80036a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80036a8:	4b72      	ldr	r3, [pc, #456]	@ (8003874 <MX_GPIO_Init+0x2c4>)
 80036aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	607b      	str	r3, [r7, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LINE_DRIVER1_ENABLE_Pin|LINE_DRIVER2_ENABLE_Pin, GPIO_PIN_SET);
 80036b6:	2201      	movs	r2, #1
 80036b8:	f640 0105 	movw	r1, #2053	@ 0x805
 80036bc:	486e      	ldr	r0, [pc, #440]	@ (8003878 <MX_GPIO_Init+0x2c8>)
 80036be:	f007 fa73 	bl	800aba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
 80036c2:	2200      	movs	r2, #0
 80036c4:	2102      	movs	r1, #2
 80036c6:	486d      	ldr	r0, [pc, #436]	@ (800387c <MX_GPIO_Init+0x2cc>)
 80036c8:	f007 fa6e 	bl	800aba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80036cc:	2200      	movs	r2, #0
 80036ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80036d2:	4869      	ldr	r0, [pc, #420]	@ (8003878 <MX_GPIO_Init+0x2c8>)
 80036d4:	f007 fa68 	bl	800aba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_3V3_SWITCH_GPIO_Port, OUT_3V3_SWITCH_Pin, GPIO_PIN_SET);
 80036d8:	2201      	movs	r2, #1
 80036da:	2101      	movs	r1, #1
 80036dc:	4868      	ldr	r0, [pc, #416]	@ (8003880 <MX_GPIO_Init+0x2d0>)
 80036de:	f007 fa63 	bl	800aba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ACTIVE_GPIO_Port, LED_ACTIVE_Pin, GPIO_PIN_SET);
 80036e2:	2201      	movs	r2, #1
 80036e4:	2101      	movs	r1, #1
 80036e6:	4867      	ldr	r0, [pc, #412]	@ (8003884 <MX_GPIO_Init+0x2d4>)
 80036e8:	f007 fa5e 	bl	800aba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80036ec:	2200      	movs	r2, #0
 80036ee:	2102      	movs	r1, #2
 80036f0:	4864      	ldr	r0, [pc, #400]	@ (8003884 <MX_GPIO_Init+0x2d4>)
 80036f2:	f007 fa59 	bl	800aba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80036f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80036fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036fc:	2300      	movs	r3, #0
 80036fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003700:	2300      	movs	r3, #0
 8003702:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003704:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003708:	4619      	mov	r1, r3
 800370a:	485f      	ldr	r0, [pc, #380]	@ (8003888 <MX_GPIO_Init+0x2d8>)
 800370c:	f007 f88c 	bl	800a828 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LINE_DRIVER1_ENABLE_Pin LINE_DRIVER2_ENABLE_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LINE_DRIVER1_ENABLE_Pin|LINE_DRIVER2_ENABLE_Pin|LED_RED_Pin;
 8003710:	f644 0305 	movw	r3, #18437	@ 0x4805
 8003714:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003716:	2301      	movs	r3, #1
 8003718:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371a:	2300      	movs	r3, #0
 800371c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800371e:	2300      	movs	r3, #0
 8003720:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003722:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003726:	4619      	mov	r1, r3
 8003728:	4853      	ldr	r0, [pc, #332]	@ (8003878 <MX_GPIO_Init+0x2c8>)
 800372a:	f007 f87d 	bl	800a828 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_500V_ENABLE_Pin */
  GPIO_InitStruct.Pin = OUT_500V_ENABLE_Pin;
 800372e:	2301      	movs	r3, #1
 8003730:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003732:	2300      	movs	r3, #0
 8003734:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003736:	2300      	movs	r3, #0
 8003738:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OUT_500V_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800373a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800373e:	4619      	mov	r1, r3
 8003740:	484e      	ldr	r0, [pc, #312]	@ (800387c <MX_GPIO_Init+0x2cc>)
 8003742:	f007 f871 	bl	800a828 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_OUTPUT_Pin */
  GPIO_InitStruct.Pin = TEST_OUTPUT_Pin;
 8003746:	2302      	movs	r3, #2
 8003748:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800374a:	2301      	movs	r3, #1
 800374c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374e:	2300      	movs	r3, #0
 8003750:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003752:	2300      	movs	r3, #0
 8003754:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TEST_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 8003756:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800375a:	4619      	mov	r1, r3
 800375c:	4847      	ldr	r0, [pc, #284]	@ (800387c <MX_GPIO_Init+0x2cc>)
 800375e:	f007 f863 	bl	800a828 <HAL_GPIO_Init>

  /*Configure GPIO pin : TURN_PLASMA_ON_Pin */
  GPIO_InitStruct.Pin = TURN_PLASMA_ON_Pin;
 8003762:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003766:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003768:	2300      	movs	r3, #0
 800376a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376c:	2300      	movs	r3, #0
 800376e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TURN_PLASMA_ON_GPIO_Port, &GPIO_InitStruct);
 8003770:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003774:	4619      	mov	r1, r3
 8003776:	4843      	ldr	r0, [pc, #268]	@ (8003884 <MX_GPIO_Init+0x2d4>)
 8003778:	f007 f856 	bl	800a828 <HAL_GPIO_Init>

  /*Configure GPIO pin : INP_COMP_IRQ_Pin */
  GPIO_InitStruct.Pin = INP_COMP_IRQ_Pin;
 800377c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003780:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003782:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003786:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003788:	2300      	movs	r3, #0
 800378a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(INP_COMP_IRQ_GPIO_Port, &GPIO_InitStruct);
 800378c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003790:	4619      	mov	r1, r3
 8003792:	483c      	ldr	r0, [pc, #240]	@ (8003884 <MX_GPIO_Init+0x2d4>)
 8003794:	f007 f848 	bl	800a828 <HAL_GPIO_Init>

  /*Configure GPIO pin : POWER_OFF_IRQ_Pin */
  GPIO_InitStruct.Pin = POWER_OFF_IRQ_Pin;
 8003798:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800379c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800379e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80037a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a4:	2300      	movs	r3, #0
 80037a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(POWER_OFF_IRQ_GPIO_Port, &GPIO_InitStruct);
 80037a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037ac:	4619      	mov	r1, r3
 80037ae:	4835      	ldr	r0, [pc, #212]	@ (8003884 <MX_GPIO_Init+0x2d4>)
 80037b0:	f007 f83a 	bl	800a828 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80037b4:	2380      	movs	r3, #128	@ 0x80
 80037b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80037b8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80037bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80037c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037c6:	4619      	mov	r1, r3
 80037c8:	482c      	ldr	r0, [pc, #176]	@ (800387c <MX_GPIO_Init+0x2cc>)
 80037ca:	f007 f82d 	bl	800a828 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80037ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80037d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037d4:	2300      	movs	r3, #0
 80037d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d8:	2300      	movs	r3, #0
 80037da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80037dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037e0:	4619      	mov	r1, r3
 80037e2:	482a      	ldr	r0, [pc, #168]	@ (800388c <MX_GPIO_Init+0x2dc>)
 80037e4:	f007 f820 	bl	800a828 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80037e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ee:	2302      	movs	r3, #2
 80037f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f2:	2300      	movs	r3, #0
 80037f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f6:	2300      	movs	r3, #0
 80037f8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80037fa:	230a      	movs	r3, #10
 80037fc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80037fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003802:	4619      	mov	r1, r3
 8003804:	4821      	ldr	r0, [pc, #132]	@ (800388c <MX_GPIO_Init+0x2dc>)
 8003806:	f007 f80f 	bl	800a828 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_3V3_SWITCH_Pin */
  GPIO_InitStruct.Pin = OUT_3V3_SWITCH_Pin;
 800380a:	2301      	movs	r3, #1
 800380c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800380e:	2301      	movs	r3, #1
 8003810:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003812:	2300      	movs	r3, #0
 8003814:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003816:	2300      	movs	r3, #0
 8003818:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(OUT_3V3_SWITCH_GPIO_Port, &GPIO_InitStruct);
 800381a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800381e:	4619      	mov	r1, r3
 8003820:	4817      	ldr	r0, [pc, #92]	@ (8003880 <MX_GPIO_Init+0x2d0>)
 8003822:	f007 f801 	bl	800a828 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_15V_ENABLE_Pin */
  GPIO_InitStruct.Pin = OUT_15V_ENABLE_Pin;
 8003826:	2302      	movs	r3, #2
 8003828:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800382a:	2300      	movs	r3, #0
 800382c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382e:	2300      	movs	r3, #0
 8003830:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OUT_15V_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003836:	4619      	mov	r1, r3
 8003838:	4811      	ldr	r0, [pc, #68]	@ (8003880 <MX_GPIO_Init+0x2d0>)
 800383a:	f006 fff5 	bl	800a828 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ACTIVE_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_ACTIVE_Pin|LED_YELLOW_Pin;
 800383e:	2303      	movs	r3, #3
 8003840:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003842:	2301      	movs	r3, #1
 8003844:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003846:	2300      	movs	r3, #0
 8003848:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800384a:	2300      	movs	r3, #0
 800384c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800384e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003852:	4619      	mov	r1, r3
 8003854:	480b      	ldr	r0, [pc, #44]	@ (8003884 <MX_GPIO_Init+0x2d4>)
 8003856:	f006 ffe7 	bl	800a828 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800385a:	2200      	movs	r2, #0
 800385c:	2100      	movs	r1, #0
 800385e:	2028      	movs	r0, #40	@ 0x28
 8003860:	f004 f8d7 	bl	8007a12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003864:	2028      	movs	r0, #40	@ 0x28
 8003866:	f004 f8ee 	bl	8007a46 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800386a:	bf00      	nop
 800386c:	3738      	adds	r7, #56	@ 0x38
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	58024400 	.word	0x58024400
 8003878:	58020400 	.word	0x58020400
 800387c:	58021800 	.word	0x58021800
 8003880:	58020c00 	.word	0x58020c00
 8003884:	58021000 	.word	0x58021000
 8003888:	58020800 	.word	0x58020800
 800388c:	58020000 	.word	0x58020000

08003890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003894:	b672      	cpsid	i
}
 8003896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003898:	bf00      	nop
 800389a:	e7fd      	b.n	8003898 <Error_Handler+0x8>

0800389c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038a2:	4b0a      	ldr	r3, [pc, #40]	@ (80038cc <HAL_MspInit+0x30>)
 80038a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80038a8:	4a08      	ldr	r2, [pc, #32]	@ (80038cc <HAL_MspInit+0x30>)
 80038aa:	f043 0302 	orr.w	r3, r3, #2
 80038ae:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80038b2:	4b06      	ldr	r3, [pc, #24]	@ (80038cc <HAL_MspInit+0x30>)
 80038b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	607b      	str	r3, [r7, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	58024400 	.word	0x58024400

080038d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b090      	sub	sp, #64	@ 0x40
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	605a      	str	r2, [r3, #4]
 80038e2:	609a      	str	r2, [r3, #8]
 80038e4:	60da      	str	r2, [r3, #12]
 80038e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4aaa      	ldr	r2, [pc, #680]	@ (8003b98 <HAL_ADC_MspInit+0x2c8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d16b      	bne.n	80039ca <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80038f2:	4baa      	ldr	r3, [pc, #680]	@ (8003b9c <HAL_ADC_MspInit+0x2cc>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	3301      	adds	r3, #1
 80038f8:	4aa8      	ldr	r2, [pc, #672]	@ (8003b9c <HAL_ADC_MspInit+0x2cc>)
 80038fa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80038fc:	4ba7      	ldr	r3, [pc, #668]	@ (8003b9c <HAL_ADC_MspInit+0x2cc>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d10e      	bne.n	8003922 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003904:	4ba6      	ldr	r3, [pc, #664]	@ (8003ba0 <HAL_ADC_MspInit+0x2d0>)
 8003906:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800390a:	4aa5      	ldr	r2, [pc, #660]	@ (8003ba0 <HAL_ADC_MspInit+0x2d0>)
 800390c:	f043 0320 	orr.w	r3, r3, #32
 8003910:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003914:	4ba2      	ldr	r3, [pc, #648]	@ (8003ba0 <HAL_ADC_MspInit+0x2d0>)
 8003916:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800391a:	f003 0320 	and.w	r3, r3, #32
 800391e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003922:	4b9f      	ldr	r3, [pc, #636]	@ (8003ba0 <HAL_ADC_MspInit+0x2d0>)
 8003924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003928:	4a9d      	ldr	r2, [pc, #628]	@ (8003ba0 <HAL_ADC_MspInit+0x2d0>)
 800392a:	f043 0301 	orr.w	r3, r3, #1
 800392e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003932:	4b9b      	ldr	r3, [pc, #620]	@ (8003ba0 <HAL_ADC_MspInit+0x2d0>)
 8003934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	627b      	str	r3, [r7, #36]	@ 0x24
 800393e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    PA3     ------> ADC1_INP15
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8003940:	2319      	movs	r3, #25
 8003942:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003944:	2303      	movs	r3, #3
 8003946:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003948:	2300      	movs	r3, #0
 800394a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800394c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003950:	4619      	mov	r1, r3
 8003952:	4894      	ldr	r0, [pc, #592]	@ (8003ba4 <HAL_ADC_MspInit+0x2d4>)
 8003954:	f006 ff68 	bl	800a828 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream2;
 8003958:	4b93      	ldr	r3, [pc, #588]	@ (8003ba8 <HAL_ADC_MspInit+0x2d8>)
 800395a:	4a94      	ldr	r2, [pc, #592]	@ (8003bac <HAL_ADC_MspInit+0x2dc>)
 800395c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800395e:	4b92      	ldr	r3, [pc, #584]	@ (8003ba8 <HAL_ADC_MspInit+0x2d8>)
 8003960:	2209      	movs	r2, #9
 8003962:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003964:	4b90      	ldr	r3, [pc, #576]	@ (8003ba8 <HAL_ADC_MspInit+0x2d8>)
 8003966:	2200      	movs	r2, #0
 8003968:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800396a:	4b8f      	ldr	r3, [pc, #572]	@ (8003ba8 <HAL_ADC_MspInit+0x2d8>)
 800396c:	2200      	movs	r2, #0
 800396e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003970:	4b8d      	ldr	r3, [pc, #564]	@ (8003ba8 <HAL_ADC_MspInit+0x2d8>)
 8003972:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003976:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003978:	4b8b      	ldr	r3, [pc, #556]	@ (8003ba8 <HAL_ADC_MspInit+0x2d8>)
 800397a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800397e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003980:	4b89      	ldr	r3, [pc, #548]	@ (8003ba8 <HAL_ADC_MspInit+0x2d8>)
 8003982:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003986:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003988:	4b87      	ldr	r3, [pc, #540]	@ (8003ba8 <HAL_ADC_MspInit+0x2d8>)
 800398a:	2200      	movs	r2, #0
 800398c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800398e:	4b86      	ldr	r3, [pc, #536]	@ (8003ba8 <HAL_ADC_MspInit+0x2d8>)
 8003990:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003994:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003996:	4b84      	ldr	r3, [pc, #528]	@ (8003ba8 <HAL_ADC_MspInit+0x2d8>)
 8003998:	2200      	movs	r2, #0
 800399a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800399c:	4882      	ldr	r0, [pc, #520]	@ (8003ba8 <HAL_ADC_MspInit+0x2d8>)
 800399e:	f004 f86d 	bl	8007a7c <HAL_DMA_Init>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <HAL_ADC_MspInit+0xdc>
    {
      Error_Handler();
 80039a8:	f7ff ff72 	bl	8003890 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a7e      	ldr	r2, [pc, #504]	@ (8003ba8 <HAL_ADC_MspInit+0x2d8>)
 80039b0:	659a      	str	r2, [r3, #88]	@ 0x58
 80039b2:	4a7d      	ldr	r2, [pc, #500]	@ (8003ba8 <HAL_ADC_MspInit+0x2d8>)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80039b8:	2200      	movs	r2, #0
 80039ba:	2100      	movs	r1, #0
 80039bc:	2012      	movs	r0, #18
 80039be:	f004 f828 	bl	8007a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80039c2:	2012      	movs	r0, #18
 80039c4:	f004 f83f 	bl	8007a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80039c8:	e0e2      	b.n	8003b90 <HAL_ADC_MspInit+0x2c0>
  else if(hadc->Instance==ADC2)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a78      	ldr	r2, [pc, #480]	@ (8003bb0 <HAL_ADC_MspInit+0x2e0>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d156      	bne.n	8003a82 <HAL_ADC_MspInit+0x1b2>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80039d4:	4b71      	ldr	r3, [pc, #452]	@ (8003b9c <HAL_ADC_MspInit+0x2cc>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	3301      	adds	r3, #1
 80039da:	4a70      	ldr	r2, [pc, #448]	@ (8003b9c <HAL_ADC_MspInit+0x2cc>)
 80039dc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80039de:	4b6f      	ldr	r3, [pc, #444]	@ (8003b9c <HAL_ADC_MspInit+0x2cc>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d10e      	bne.n	8003a04 <HAL_ADC_MspInit+0x134>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80039e6:	4b6e      	ldr	r3, [pc, #440]	@ (8003ba0 <HAL_ADC_MspInit+0x2d0>)
 80039e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80039ec:	4a6c      	ldr	r2, [pc, #432]	@ (8003ba0 <HAL_ADC_MspInit+0x2d0>)
 80039ee:	f043 0320 	orr.w	r3, r3, #32
 80039f2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80039f6:	4b6a      	ldr	r3, [pc, #424]	@ (8003ba0 <HAL_ADC_MspInit+0x2d0>)
 80039f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80039fc:	f003 0320 	and.w	r3, r3, #32
 8003a00:	623b      	str	r3, [r7, #32]
 8003a02:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a04:	4b66      	ldr	r3, [pc, #408]	@ (8003ba0 <HAL_ADC_MspInit+0x2d0>)
 8003a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a0a:	4a65      	ldr	r2, [pc, #404]	@ (8003ba0 <HAL_ADC_MspInit+0x2d0>)
 8003a0c:	f043 0301 	orr.w	r3, r3, #1
 8003a10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a14:	4b62      	ldr	r3, [pc, #392]	@ (8003ba0 <HAL_ADC_MspInit+0x2d0>)
 8003a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	61fb      	str	r3, [r7, #28]
 8003a20:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a22:	4b5f      	ldr	r3, [pc, #380]	@ (8003ba0 <HAL_ADC_MspInit+0x2d0>)
 8003a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a28:	4a5d      	ldr	r2, [pc, #372]	@ (8003ba0 <HAL_ADC_MspInit+0x2d0>)
 8003a2a:	f043 0302 	orr.w	r3, r3, #2
 8003a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a32:	4b5b      	ldr	r3, [pc, #364]	@ (8003ba0 <HAL_ADC_MspInit+0x2d0>)
 8003a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	61bb      	str	r3, [r7, #24]
 8003a3e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003a40:	2360      	movs	r3, #96	@ 0x60
 8003a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a44:	2303      	movs	r3, #3
 8003a46:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a50:	4619      	mov	r1, r3
 8003a52:	4854      	ldr	r0, [pc, #336]	@ (8003ba4 <HAL_ADC_MspInit+0x2d4>)
 8003a54:	f006 fee8 	bl	800a828 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003a58:	2302      	movs	r3, #2
 8003a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a60:	2300      	movs	r3, #0
 8003a62:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4852      	ldr	r0, [pc, #328]	@ (8003bb4 <HAL_ADC_MspInit+0x2e4>)
 8003a6c:	f006 fedc 	bl	800a828 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003a70:	2200      	movs	r2, #0
 8003a72:	2100      	movs	r1, #0
 8003a74:	2012      	movs	r0, #18
 8003a76:	f003 ffcc 	bl	8007a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003a7a:	2012      	movs	r0, #18
 8003a7c:	f003 ffe3 	bl	8007a46 <HAL_NVIC_EnableIRQ>
}
 8003a80:	e086      	b.n	8003b90 <HAL_ADC_MspInit+0x2c0>
  else if(hadc->Instance==ADC3)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a4c      	ldr	r2, [pc, #304]	@ (8003bb8 <HAL_ADC_MspInit+0x2e8>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	f040 8081 	bne.w	8003b90 <HAL_ADC_MspInit+0x2c0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003a8e:	4b44      	ldr	r3, [pc, #272]	@ (8003ba0 <HAL_ADC_MspInit+0x2d0>)
 8003a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a94:	4a42      	ldr	r2, [pc, #264]	@ (8003ba0 <HAL_ADC_MspInit+0x2d0>)
 8003a96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a9e:	4b40      	ldr	r3, [pc, #256]	@ (8003ba0 <HAL_ADC_MspInit+0x2d0>)
 8003aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003aa4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003aa8:	617b      	str	r3, [r7, #20]
 8003aaa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003aac:	4b3c      	ldr	r3, [pc, #240]	@ (8003ba0 <HAL_ADC_MspInit+0x2d0>)
 8003aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ab2:	4a3b      	ldr	r2, [pc, #236]	@ (8003ba0 <HAL_ADC_MspInit+0x2d0>)
 8003ab4:	f043 0320 	orr.w	r3, r3, #32
 8003ab8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003abc:	4b38      	ldr	r3, [pc, #224]	@ (8003ba0 <HAL_ADC_MspInit+0x2d0>)
 8003abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ac2:	f003 0320 	and.w	r3, r3, #32
 8003ac6:	613b      	str	r3, [r7, #16]
 8003ac8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003aca:	4b35      	ldr	r3, [pc, #212]	@ (8003ba0 <HAL_ADC_MspInit+0x2d0>)
 8003acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ad0:	4a33      	ldr	r2, [pc, #204]	@ (8003ba0 <HAL_ADC_MspInit+0x2d0>)
 8003ad2:	f043 0304 	orr.w	r3, r3, #4
 8003ad6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003ada:	4b31      	ldr	r3, [pc, #196]	@ (8003ba0 <HAL_ADC_MspInit+0x2d0>)
 8003adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8003ae8:	f44f 63ff 	mov.w	r3, #2040	@ 0x7f8
 8003aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003aee:	2303      	movs	r3, #3
 8003af0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af2:	2300      	movs	r3, #0
 8003af4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003af6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003afa:	4619      	mov	r1, r3
 8003afc:	482f      	ldr	r0, [pc, #188]	@ (8003bbc <HAL_ADC_MspInit+0x2ec>)
 8003afe:	f006 fe93 	bl	800a828 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003b02:	2301      	movs	r3, #1
 8003b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b06:	2303      	movs	r3, #3
 8003b08:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003b12:	4619      	mov	r1, r3
 8003b14:	482a      	ldr	r0, [pc, #168]	@ (8003bc0 <HAL_ADC_MspInit+0x2f0>)
 8003b16:	f006 fe87 	bl	800a828 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8003b1a:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8003b1e:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8003b22:	f000 fe43 	bl	80047ac <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8003b26:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8003b2a:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8003b2e:	f000 fe3d 	bl	80047ac <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8003b32:	4b24      	ldr	r3, [pc, #144]	@ (8003bc4 <HAL_ADC_MspInit+0x2f4>)
 8003b34:	4a24      	ldr	r2, [pc, #144]	@ (8003bc8 <HAL_ADC_MspInit+0x2f8>)
 8003b36:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8003b38:	4b22      	ldr	r3, [pc, #136]	@ (8003bc4 <HAL_ADC_MspInit+0x2f4>)
 8003b3a:	2273      	movs	r2, #115	@ 0x73
 8003b3c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b3e:	4b21      	ldr	r3, [pc, #132]	@ (8003bc4 <HAL_ADC_MspInit+0x2f4>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b44:	4b1f      	ldr	r3, [pc, #124]	@ (8003bc4 <HAL_ADC_MspInit+0x2f4>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8003bc4 <HAL_ADC_MspInit+0x2f4>)
 8003b4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b50:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b52:	4b1c      	ldr	r3, [pc, #112]	@ (8003bc4 <HAL_ADC_MspInit+0x2f4>)
 8003b54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b58:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8003bc4 <HAL_ADC_MspInit+0x2f4>)
 8003b5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b60:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8003b62:	4b18      	ldr	r3, [pc, #96]	@ (8003bc4 <HAL_ADC_MspInit+0x2f4>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003b68:	4b16      	ldr	r3, [pc, #88]	@ (8003bc4 <HAL_ADC_MspInit+0x2f4>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b6e:	4b15      	ldr	r3, [pc, #84]	@ (8003bc4 <HAL_ADC_MspInit+0x2f4>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8003b74:	4813      	ldr	r0, [pc, #76]	@ (8003bc4 <HAL_ADC_MspInit+0x2f4>)
 8003b76:	f003 ff81 	bl	8007a7c <HAL_DMA_Init>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <HAL_ADC_MspInit+0x2b4>
      Error_Handler();
 8003b80:	f7ff fe86 	bl	8003890 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a0f      	ldr	r2, [pc, #60]	@ (8003bc4 <HAL_ADC_MspInit+0x2f4>)
 8003b88:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b8a:	4a0e      	ldr	r2, [pc, #56]	@ (8003bc4 <HAL_ADC_MspInit+0x2f4>)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003b90:	bf00      	nop
 8003b92:	3740      	adds	r7, #64	@ 0x40
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40022000 	.word	0x40022000
 8003b9c:	24001098 	.word	0x24001098
 8003ba0:	58024400 	.word	0x58024400
 8003ba4:	58020000 	.word	0x58020000
 8003ba8:	24000bd4 	.word	0x24000bd4
 8003bac:	40020040 	.word	0x40020040
 8003bb0:	40022100 	.word	0x40022100
 8003bb4:	58020400 	.word	0x58020400
 8003bb8:	58026000 	.word	0x58026000
 8003bbc:	58021400 	.word	0x58021400
 8003bc0:	58020800 	.word	0x58020800
 8003bc4:	24000c4c 	.word	0x24000c4c
 8003bc8:	40020028 	.word	0x40020028

08003bcc <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08a      	sub	sp, #40	@ 0x28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd4:	f107 0314 	add.w	r3, r7, #20
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	605a      	str	r2, [r3, #4]
 8003bde:	609a      	str	r2, [r3, #8]
 8003be0:	60da      	str	r2, [r3, #12]
 8003be2:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a21      	ldr	r2, [pc, #132]	@ (8003c70 <HAL_COMP_MspInit+0xa4>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d13b      	bne.n	8003c66 <HAL_COMP_MspInit+0x9a>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 8003bee:	4b21      	ldr	r3, [pc, #132]	@ (8003c74 <HAL_COMP_MspInit+0xa8>)
 8003bf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003bf4:	4a1f      	ldr	r2, [pc, #124]	@ (8003c74 <HAL_COMP_MspInit+0xa8>)
 8003bf6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bfa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8003c74 <HAL_COMP_MspInit+0xa8>)
 8003c00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003c04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c08:	613b      	str	r3, [r7, #16]
 8003c0a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c0c:	4b19      	ldr	r3, [pc, #100]	@ (8003c74 <HAL_COMP_MspInit+0xa8>)
 8003c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c12:	4a18      	ldr	r2, [pc, #96]	@ (8003c74 <HAL_COMP_MspInit+0xa8>)
 8003c14:	f043 0310 	orr.w	r3, r3, #16
 8003c18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c1c:	4b15      	ldr	r3, [pc, #84]	@ (8003c74 <HAL_COMP_MspInit+0xa8>)
 8003c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c22:	f003 0310 	and.w	r3, r3, #16
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PE7     ------> COMP2_INM
    PE11     ------> COMP2_INP
    PE13     ------> COMP2_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_11;
 8003c2a:	f44f 6308 	mov.w	r3, #2176	@ 0x880
 8003c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c30:	2303      	movs	r3, #3
 8003c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c34:	2300      	movs	r3, #0
 8003c36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c38:	f107 0314 	add.w	r3, r7, #20
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	480e      	ldr	r0, [pc, #56]	@ (8003c78 <HAL_COMP_MspInit+0xac>)
 8003c40:	f006 fdf2 	bl	800a828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003c44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c52:	2300      	movs	r3, #0
 8003c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_COMP2;
 8003c56:	230d      	movs	r3, #13
 8003c58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c5a:	f107 0314 	add.w	r3, r7, #20
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4805      	ldr	r0, [pc, #20]	@ (8003c78 <HAL_COMP_MspInit+0xac>)
 8003c62:	f006 fde1 	bl	800a828 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8003c66:	bf00      	nop
 8003c68:	3728      	adds	r7, #40	@ 0x28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	58003810 	.word	0x58003810
 8003c74:	58024400 	.word	0x58024400
 8003c78:	58021000 	.word	0x58021000

08003c7c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b08e      	sub	sp, #56	@ 0x38
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	605a      	str	r2, [r3, #4]
 8003c8e:	609a      	str	r2, [r3, #8]
 8003c90:	60da      	str	r2, [r3, #12]
 8003c92:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a59      	ldr	r2, [pc, #356]	@ (8003e00 <HAL_ETH_MspInit+0x184>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	f040 80ab 	bne.w	8003df6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8003ca0:	4b58      	ldr	r3, [pc, #352]	@ (8003e04 <HAL_ETH_MspInit+0x188>)
 8003ca2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003ca6:	4a57      	ldr	r2, [pc, #348]	@ (8003e04 <HAL_ETH_MspInit+0x188>)
 8003ca8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cac:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003cb0:	4b54      	ldr	r3, [pc, #336]	@ (8003e04 <HAL_ETH_MspInit+0x188>)
 8003cb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003cb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cba:	623b      	str	r3, [r7, #32]
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8003cbe:	4b51      	ldr	r3, [pc, #324]	@ (8003e04 <HAL_ETH_MspInit+0x188>)
 8003cc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003cc4:	4a4f      	ldr	r2, [pc, #316]	@ (8003e04 <HAL_ETH_MspInit+0x188>)
 8003cc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003cce:	4b4d      	ldr	r3, [pc, #308]	@ (8003e04 <HAL_ETH_MspInit+0x188>)
 8003cd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003cd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cd8:	61fb      	str	r3, [r7, #28]
 8003cda:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8003cdc:	4b49      	ldr	r3, [pc, #292]	@ (8003e04 <HAL_ETH_MspInit+0x188>)
 8003cde:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003ce2:	4a48      	ldr	r2, [pc, #288]	@ (8003e04 <HAL_ETH_MspInit+0x188>)
 8003ce4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ce8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003cec:	4b45      	ldr	r3, [pc, #276]	@ (8003e04 <HAL_ETH_MspInit+0x188>)
 8003cee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cf6:	61bb      	str	r3, [r7, #24]
 8003cf8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cfa:	4b42      	ldr	r3, [pc, #264]	@ (8003e04 <HAL_ETH_MspInit+0x188>)
 8003cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d00:	4a40      	ldr	r2, [pc, #256]	@ (8003e04 <HAL_ETH_MspInit+0x188>)
 8003d02:	f043 0304 	orr.w	r3, r3, #4
 8003d06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003d0a:	4b3e      	ldr	r3, [pc, #248]	@ (8003e04 <HAL_ETH_MspInit+0x188>)
 8003d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	617b      	str	r3, [r7, #20]
 8003d16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d18:	4b3a      	ldr	r3, [pc, #232]	@ (8003e04 <HAL_ETH_MspInit+0x188>)
 8003d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d1e:	4a39      	ldr	r2, [pc, #228]	@ (8003e04 <HAL_ETH_MspInit+0x188>)
 8003d20:	f043 0301 	orr.w	r3, r3, #1
 8003d24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003d28:	4b36      	ldr	r3, [pc, #216]	@ (8003e04 <HAL_ETH_MspInit+0x188>)
 8003d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	613b      	str	r3, [r7, #16]
 8003d34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d36:	4b33      	ldr	r3, [pc, #204]	@ (8003e04 <HAL_ETH_MspInit+0x188>)
 8003d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d3c:	4a31      	ldr	r2, [pc, #196]	@ (8003e04 <HAL_ETH_MspInit+0x188>)
 8003d3e:	f043 0302 	orr.w	r3, r3, #2
 8003d42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003d46:	4b2f      	ldr	r3, [pc, #188]	@ (8003e04 <HAL_ETH_MspInit+0x188>)
 8003d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	60fb      	str	r3, [r7, #12]
 8003d52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003d54:	4b2b      	ldr	r3, [pc, #172]	@ (8003e04 <HAL_ETH_MspInit+0x188>)
 8003d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d5a:	4a2a      	ldr	r2, [pc, #168]	@ (8003e04 <HAL_ETH_MspInit+0x188>)
 8003d5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003d64:	4b27      	ldr	r3, [pc, #156]	@ (8003e04 <HAL_ETH_MspInit+0x188>)
 8003d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d6e:	60bb      	str	r3, [r7, #8]
 8003d70:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003d72:	2332      	movs	r3, #50	@ 0x32
 8003d74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d76:	2302      	movs	r3, #2
 8003d78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d82:	230b      	movs	r3, #11
 8003d84:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	481e      	ldr	r0, [pc, #120]	@ (8003e08 <HAL_ETH_MspInit+0x18c>)
 8003d8e:	f006 fd4b 	bl	800a828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003d92:	2386      	movs	r3, #134	@ 0x86
 8003d94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d96:	2302      	movs	r3, #2
 8003d98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003da2:	230b      	movs	r3, #11
 8003da4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003da6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003daa:	4619      	mov	r1, r3
 8003dac:	4817      	ldr	r0, [pc, #92]	@ (8003e0c <HAL_ETH_MspInit+0x190>)
 8003dae:	f006 fd3b 	bl	800a828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003db2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003db6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db8:	2302      	movs	r3, #2
 8003dba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003dc4:	230b      	movs	r3, #11
 8003dc6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003dc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4810      	ldr	r0, [pc, #64]	@ (8003e10 <HAL_ETH_MspInit+0x194>)
 8003dd0:	f006 fd2a 	bl	800a828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003dd4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8003dd8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dda:	2302      	movs	r3, #2
 8003ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dde:	2300      	movs	r3, #0
 8003de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de2:	2300      	movs	r3, #0
 8003de4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003de6:	230b      	movs	r3, #11
 8003de8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003dea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003dee:	4619      	mov	r1, r3
 8003df0:	4808      	ldr	r0, [pc, #32]	@ (8003e14 <HAL_ETH_MspInit+0x198>)
 8003df2:	f006 fd19 	bl	800a828 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8003df6:	bf00      	nop
 8003df8:	3738      	adds	r7, #56	@ 0x38
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	40028000 	.word	0x40028000
 8003e04:	58024400 	.word	0x58024400
 8003e08:	58020800 	.word	0x58020800
 8003e0c:	58020000 	.word	0x58020000
 8003e10:	58020400 	.word	0x58020400
 8003e14:	58021800 	.word	0x58021800

08003e18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b0ba      	sub	sp, #232	@ 0xe8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e20:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	605a      	str	r2, [r3, #4]
 8003e2a:	609a      	str	r2, [r3, #8]
 8003e2c:	60da      	str	r2, [r3, #12]
 8003e2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e30:	f107 0318 	add.w	r3, r7, #24
 8003e34:	22b8      	movs	r2, #184	@ 0xb8
 8003e36:	2100      	movs	r1, #0
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f00e f9c6 	bl	80121ca <memset>
  if(huart->Instance==LPUART1)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a4d      	ldr	r2, [pc, #308]	@ (8003f78 <HAL_UART_MspInit+0x160>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d146      	bne.n	8003ed6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003e48:	f04f 0204 	mov.w	r2, #4
 8003e4c:	f04f 0300 	mov.w	r3, #0
 8003e50:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8003e54:	2300      	movs	r3, #0
 8003e56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e5a:	f107 0318 	add.w	r3, r7, #24
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f007 fe76 	bl	800bb50 <HAL_RCCEx_PeriphCLKConfig>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003e6a:	f7ff fd11 	bl	8003890 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003e6e:	4b43      	ldr	r3, [pc, #268]	@ (8003f7c <HAL_UART_MspInit+0x164>)
 8003e70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003e74:	4a41      	ldr	r2, [pc, #260]	@ (8003f7c <HAL_UART_MspInit+0x164>)
 8003e76:	f043 0308 	orr.w	r3, r3, #8
 8003e7a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003e7e:	4b3f      	ldr	r3, [pc, #252]	@ (8003f7c <HAL_UART_MspInit+0x164>)
 8003e80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003e84:	f003 0308 	and.w	r3, r3, #8
 8003e88:	617b      	str	r3, [r7, #20]
 8003e8a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e8c:	4b3b      	ldr	r3, [pc, #236]	@ (8003f7c <HAL_UART_MspInit+0x164>)
 8003e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e92:	4a3a      	ldr	r2, [pc, #232]	@ (8003f7c <HAL_UART_MspInit+0x164>)
 8003e94:	f043 0302 	orr.w	r3, r3, #2
 8003e98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003e9c:	4b37      	ldr	r3, [pc, #220]	@ (8003f7c <HAL_UART_MspInit+0x164>)
 8003e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	613b      	str	r3, [r7, #16]
 8003ea8:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003eaa:	23c0      	movs	r3, #192	@ 0xc0
 8003eac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART;
 8003ec2:	2308      	movs	r3, #8
 8003ec4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ec8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003ecc:	4619      	mov	r1, r3
 8003ece:	482c      	ldr	r0, [pc, #176]	@ (8003f80 <HAL_UART_MspInit+0x168>)
 8003ed0:	f006 fcaa 	bl	800a828 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003ed4:	e04b      	b.n	8003f6e <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART3)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a2a      	ldr	r2, [pc, #168]	@ (8003f84 <HAL_UART_MspInit+0x16c>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d146      	bne.n	8003f6e <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003ee0:	f04f 0202 	mov.w	r2, #2
 8003ee4:	f04f 0300 	mov.w	r3, #0
 8003ee8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003eec:	2300      	movs	r3, #0
 8003eee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ef2:	f107 0318 	add.w	r3, r7, #24
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f007 fe2a 	bl	800bb50 <HAL_RCCEx_PeriphCLKConfig>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <HAL_UART_MspInit+0xee>
      Error_Handler();
 8003f02:	f7ff fcc5 	bl	8003890 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003f06:	4b1d      	ldr	r3, [pc, #116]	@ (8003f7c <HAL_UART_MspInit+0x164>)
 8003f08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003f0c:	4a1b      	ldr	r2, [pc, #108]	@ (8003f7c <HAL_UART_MspInit+0x164>)
 8003f0e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f12:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003f16:	4b19      	ldr	r3, [pc, #100]	@ (8003f7c <HAL_UART_MspInit+0x164>)
 8003f18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003f1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f24:	4b15      	ldr	r3, [pc, #84]	@ (8003f7c <HAL_UART_MspInit+0x164>)
 8003f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f2a:	4a14      	ldr	r2, [pc, #80]	@ (8003f7c <HAL_UART_MspInit+0x164>)
 8003f2c:	f043 0308 	orr.w	r3, r3, #8
 8003f30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003f34:	4b11      	ldr	r3, [pc, #68]	@ (8003f7c <HAL_UART_MspInit+0x164>)
 8003f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	60bb      	str	r3, [r7, #8]
 8003f40:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8003f42:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003f46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f50:	2300      	movs	r3, #0
 8003f52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f56:	2300      	movs	r3, #0
 8003f58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003f5c:	2307      	movs	r3, #7
 8003f5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f62:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003f66:	4619      	mov	r1, r3
 8003f68:	4807      	ldr	r0, [pc, #28]	@ (8003f88 <HAL_UART_MspInit+0x170>)
 8003f6a:	f006 fc5d 	bl	800a828 <HAL_GPIO_Init>
}
 8003f6e:	bf00      	nop
 8003f70:	37e8      	adds	r7, #232	@ 0xe8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	58000c00 	.word	0x58000c00
 8003f7c:	58024400 	.word	0x58024400
 8003f80:	58020400 	.word	0x58020400
 8003f84:	40004800 	.word	0x40004800
 8003f88:	58020c00 	.word	0x58020c00

08003f8c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a20      	ldr	r2, [pc, #128]	@ (800401c <HAL_TIM_PWM_MspInit+0x90>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d10f      	bne.n	8003fbe <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f9e:	4b20      	ldr	r3, [pc, #128]	@ (8004020 <HAL_TIM_PWM_MspInit+0x94>)
 8003fa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fa4:	4a1e      	ldr	r2, [pc, #120]	@ (8004020 <HAL_TIM_PWM_MspInit+0x94>)
 8003fa6:	f043 0301 	orr.w	r3, r3, #1
 8003faa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003fae:	4b1c      	ldr	r3, [pc, #112]	@ (8004020 <HAL_TIM_PWM_MspInit+0x94>)
 8003fb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	617b      	str	r3, [r7, #20]
 8003fba:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003fbc:	e028      	b.n	8004010 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM2)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fc6:	d10f      	bne.n	8003fe8 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003fc8:	4b15      	ldr	r3, [pc, #84]	@ (8004020 <HAL_TIM_PWM_MspInit+0x94>)
 8003fca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003fce:	4a14      	ldr	r2, [pc, #80]	@ (8004020 <HAL_TIM_PWM_MspInit+0x94>)
 8003fd0:	f043 0301 	orr.w	r3, r3, #1
 8003fd4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003fd8:	4b11      	ldr	r3, [pc, #68]	@ (8004020 <HAL_TIM_PWM_MspInit+0x94>)
 8003fda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	613b      	str	r3, [r7, #16]
 8003fe4:	693b      	ldr	r3, [r7, #16]
}
 8003fe6:	e013      	b.n	8004010 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM4)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a0d      	ldr	r2, [pc, #52]	@ (8004024 <HAL_TIM_PWM_MspInit+0x98>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d10e      	bne.n	8004010 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8004020 <HAL_TIM_PWM_MspInit+0x94>)
 8003ff4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003ff8:	4a09      	ldr	r2, [pc, #36]	@ (8004020 <HAL_TIM_PWM_MspInit+0x94>)
 8003ffa:	f043 0304 	orr.w	r3, r3, #4
 8003ffe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004002:	4b07      	ldr	r3, [pc, #28]	@ (8004020 <HAL_TIM_PWM_MspInit+0x94>)
 8004004:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	68fb      	ldr	r3, [r7, #12]
}
 8004010:	bf00      	nop
 8004012:	371c      	adds	r7, #28
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	40010000 	.word	0x40010000
 8004020:	58024400 	.word	0x58024400
 8004024:	40000800 	.word	0x40000800

08004028 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08c      	sub	sp, #48	@ 0x30
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004030:	f107 031c 	add.w	r3, r7, #28
 8004034:	2200      	movs	r2, #0
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	605a      	str	r2, [r3, #4]
 800403a:	609a      	str	r2, [r3, #8]
 800403c:	60da      	str	r2, [r3, #12]
 800403e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a34      	ldr	r2, [pc, #208]	@ (8004118 <HAL_TIM_IC_MspInit+0xf0>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d12e      	bne.n	80040a8 <HAL_TIM_IC_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800404a:	4b34      	ldr	r3, [pc, #208]	@ (800411c <HAL_TIM_IC_MspInit+0xf4>)
 800404c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004050:	4a32      	ldr	r2, [pc, #200]	@ (800411c <HAL_TIM_IC_MspInit+0xf4>)
 8004052:	f043 0302 	orr.w	r3, r3, #2
 8004056:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800405a:	4b30      	ldr	r3, [pc, #192]	@ (800411c <HAL_TIM_IC_MspInit+0xf4>)
 800405c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	61bb      	str	r3, [r7, #24]
 8004066:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004068:	4b2c      	ldr	r3, [pc, #176]	@ (800411c <HAL_TIM_IC_MspInit+0xf4>)
 800406a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800406e:	4a2b      	ldr	r2, [pc, #172]	@ (800411c <HAL_TIM_IC_MspInit+0xf4>)
 8004070:	f043 0304 	orr.w	r3, r3, #4
 8004074:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004078:	4b28      	ldr	r3, [pc, #160]	@ (800411c <HAL_TIM_IC_MspInit+0xf4>)
 800407a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800407e:	f003 0304 	and.w	r3, r3, #4
 8004082:	617b      	str	r3, [r7, #20]
 8004084:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004086:	2340      	movs	r3, #64	@ 0x40
 8004088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800408a:	2302      	movs	r3, #2
 800408c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800408e:	2301      	movs	r3, #1
 8004090:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004092:	2300      	movs	r3, #0
 8004094:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004096:	2302      	movs	r3, #2
 8004098:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800409a:	f107 031c 	add.w	r3, r7, #28
 800409e:	4619      	mov	r1, r3
 80040a0:	481f      	ldr	r0, [pc, #124]	@ (8004120 <HAL_TIM_IC_MspInit+0xf8>)
 80040a2:	f006 fbc1 	bl	800a828 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80040a6:	e032      	b.n	800410e <HAL_TIM_IC_MspInit+0xe6>
  else if(htim_ic->Instance==TIM15)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004124 <HAL_TIM_IC_MspInit+0xfc>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d12d      	bne.n	800410e <HAL_TIM_IC_MspInit+0xe6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80040b2:	4b1a      	ldr	r3, [pc, #104]	@ (800411c <HAL_TIM_IC_MspInit+0xf4>)
 80040b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040b8:	4a18      	ldr	r2, [pc, #96]	@ (800411c <HAL_TIM_IC_MspInit+0xf4>)
 80040ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80040c2:	4b16      	ldr	r3, [pc, #88]	@ (800411c <HAL_TIM_IC_MspInit+0xf4>)
 80040c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040cc:	613b      	str	r3, [r7, #16]
 80040ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80040d0:	4b12      	ldr	r3, [pc, #72]	@ (800411c <HAL_TIM_IC_MspInit+0xf4>)
 80040d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040d6:	4a11      	ldr	r2, [pc, #68]	@ (800411c <HAL_TIM_IC_MspInit+0xf4>)
 80040d8:	f043 0310 	orr.w	r3, r3, #16
 80040dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80040e0:	4b0e      	ldr	r3, [pc, #56]	@ (800411c <HAL_TIM_IC_MspInit+0xf4>)
 80040e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040e6:	f003 0310 	and.w	r3, r3, #16
 80040ea:	60fb      	str	r3, [r7, #12]
 80040ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80040ee:	2320      	movs	r3, #32
 80040f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f2:	2302      	movs	r3, #2
 80040f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040f6:	2301      	movs	r3, #1
 80040f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040fa:	2300      	movs	r3, #0
 80040fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80040fe:	2304      	movs	r3, #4
 8004100:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004102:	f107 031c 	add.w	r3, r7, #28
 8004106:	4619      	mov	r1, r3
 8004108:	4807      	ldr	r0, [pc, #28]	@ (8004128 <HAL_TIM_IC_MspInit+0x100>)
 800410a:	f006 fb8d 	bl	800a828 <HAL_GPIO_Init>
}
 800410e:	bf00      	nop
 8004110:	3730      	adds	r7, #48	@ 0x30
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	40000400 	.word	0x40000400
 800411c:	58024400 	.word	0x58024400
 8004120:	58020800 	.word	0x58020800
 8004124:	40014000 	.word	0x40014000
 8004128:	58021000 	.word	0x58021000

0800412c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM24)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a0b      	ldr	r2, [pc, #44]	@ (8004168 <HAL_TIM_Base_MspInit+0x3c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d10e      	bne.n	800415c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM24_MspInit 0 */

  /* USER CODE END TIM24_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM24_CLK_ENABLE();
 800413e:	4b0b      	ldr	r3, [pc, #44]	@ (800416c <HAL_TIM_Base_MspInit+0x40>)
 8004140:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004144:	4a09      	ldr	r2, [pc, #36]	@ (800416c <HAL_TIM_Base_MspInit+0x40>)
 8004146:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800414a:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800414e:	4b07      	ldr	r3, [pc, #28]	@ (800416c <HAL_TIM_Base_MspInit+0x40>)
 8004150:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004154:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 800415c:	bf00      	nop
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr
 8004168:	4000e400 	.word	0x4000e400
 800416c:	58024400 	.word	0x58024400

08004170 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b08a      	sub	sp, #40	@ 0x28
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004178:	f107 0314 	add.w	r3, r7, #20
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	605a      	str	r2, [r3, #4]
 8004182:	609a      	str	r2, [r3, #8]
 8004184:	60da      	str	r2, [r3, #12]
 8004186:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a39      	ldr	r2, [pc, #228]	@ (8004274 <HAL_TIM_MspPostInit+0x104>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d120      	bne.n	80041d4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004192:	4b39      	ldr	r3, [pc, #228]	@ (8004278 <HAL_TIM_MspPostInit+0x108>)
 8004194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004198:	4a37      	ldr	r2, [pc, #220]	@ (8004278 <HAL_TIM_MspPostInit+0x108>)
 800419a:	f043 0310 	orr.w	r3, r3, #16
 800419e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80041a2:	4b35      	ldr	r3, [pc, #212]	@ (8004278 <HAL_TIM_MspPostInit+0x108>)
 80041a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041a8:	f003 0310 	and.w	r3, r3, #16
 80041ac:	613b      	str	r3, [r7, #16]
 80041ae:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_CH1N_Pin|TIM1_CH1_Pin;
 80041b0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80041b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b6:	2302      	movs	r3, #2
 80041b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ba:	2300      	movs	r3, #0
 80041bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041be:	2300      	movs	r3, #0
 80041c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80041c2:	2301      	movs	r3, #1
 80041c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80041c6:	f107 0314 	add.w	r3, r7, #20
 80041ca:	4619      	mov	r1, r3
 80041cc:	482b      	ldr	r0, [pc, #172]	@ (800427c <HAL_TIM_MspPostInit+0x10c>)
 80041ce:	f006 fb2b 	bl	800a828 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80041d2:	e04a      	b.n	800426a <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM2)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041dc:	d120      	bne.n	8004220 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041de:	4b26      	ldr	r3, [pc, #152]	@ (8004278 <HAL_TIM_MspPostInit+0x108>)
 80041e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041e4:	4a24      	ldr	r2, [pc, #144]	@ (8004278 <HAL_TIM_MspPostInit+0x108>)
 80041e6:	f043 0301 	orr.w	r3, r3, #1
 80041ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80041ee:	4b22      	ldr	r3, [pc, #136]	@ (8004278 <HAL_TIM_MspPostInit+0x108>)
 80041f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80041fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004202:	2312      	movs	r3, #18
 8004204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004206:	2300      	movs	r3, #0
 8004208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800420a:	2300      	movs	r3, #0
 800420c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800420e:	2301      	movs	r3, #1
 8004210:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004212:	f107 0314 	add.w	r3, r7, #20
 8004216:	4619      	mov	r1, r3
 8004218:	4819      	ldr	r0, [pc, #100]	@ (8004280 <HAL_TIM_MspPostInit+0x110>)
 800421a:	f006 fb05 	bl	800a828 <HAL_GPIO_Init>
}
 800421e:	e024      	b.n	800426a <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM4)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a17      	ldr	r2, [pc, #92]	@ (8004284 <HAL_TIM_MspPostInit+0x114>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d11f      	bne.n	800426a <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800422a:	4b13      	ldr	r3, [pc, #76]	@ (8004278 <HAL_TIM_MspPostInit+0x108>)
 800422c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004230:	4a11      	ldr	r2, [pc, #68]	@ (8004278 <HAL_TIM_MspPostInit+0x108>)
 8004232:	f043 0308 	orr.w	r3, r3, #8
 8004236:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800423a:	4b0f      	ldr	r3, [pc, #60]	@ (8004278 <HAL_TIM_MspPostInit+0x108>)
 800423c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004240:	f003 0308 	and.w	r3, r3, #8
 8004244:	60bb      	str	r3, [r7, #8]
 8004246:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004248:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800424c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800424e:	2312      	movs	r3, #18
 8004250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004252:	2300      	movs	r3, #0
 8004254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004256:	2300      	movs	r3, #0
 8004258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800425a:	2302      	movs	r3, #2
 800425c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800425e:	f107 0314 	add.w	r3, r7, #20
 8004262:	4619      	mov	r1, r3
 8004264:	4808      	ldr	r0, [pc, #32]	@ (8004288 <HAL_TIM_MspPostInit+0x118>)
 8004266:	f006 fadf 	bl	800a828 <HAL_GPIO_Init>
}
 800426a:	bf00      	nop
 800426c:	3728      	adds	r7, #40	@ 0x28
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40010000 	.word	0x40010000
 8004278:	58024400 	.word	0x58024400
 800427c:	58021000 	.word	0x58021000
 8004280:	58020000 	.word	0x58020000
 8004284:	40000800 	.word	0x40000800
 8004288:	58020c00 	.word	0x58020c00

0800428c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004290:	bf00      	nop
 8004292:	e7fd      	b.n	8004290 <NMI_Handler+0x4>

08004294 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004298:	bf00      	nop
 800429a:	e7fd      	b.n	8004298 <HardFault_Handler+0x4>

0800429c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042a0:	bf00      	nop
 80042a2:	e7fd      	b.n	80042a0 <MemManage_Handler+0x4>

080042a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042a8:	bf00      	nop
 80042aa:	e7fd      	b.n	80042a8 <BusFault_Handler+0x4>

080042ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042b0:	bf00      	nop
 80042b2:	e7fd      	b.n	80042b0 <UsageFault_Handler+0x4>

080042b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042b8:	bf00      	nop
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042c2:	b480      	push	{r7}
 80042c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042c6:	bf00      	nop
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042d4:	bf00      	nop
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042e2:	f000 fa0b 	bl	80046fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042e6:	bf00      	nop
 80042e8:	bd80      	pop	{r7, pc}
	...

080042ec <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80042f0:	4802      	ldr	r0, [pc, #8]	@ (80042fc <DMA1_Stream1_IRQHandler+0x10>)
 80042f2:	f004 f985 	bl	8008600 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80042f6:	bf00      	nop
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	24000c4c 	.word	0x24000c4c

08004300 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004304:	4802      	ldr	r0, [pc, #8]	@ (8004310 <DMA1_Stream2_IRQHandler+0x10>)
 8004306:	f004 f97b 	bl	8008600 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800430a:	bf00      	nop
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	24000bd4 	.word	0x24000bd4

08004314 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004318:	4803      	ldr	r0, [pc, #12]	@ (8004328 <ADC_IRQHandler+0x14>)
 800431a:	f001 f969 	bl	80055f0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800431e:	4803      	ldr	r0, [pc, #12]	@ (800432c <ADC_IRQHandler+0x18>)
 8004320:	f001 f966 	bl	80055f0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004324:	bf00      	nop
 8004326:	bd80      	pop	{r7, pc}
 8004328:	24000a84 	.word	0x24000a84
 800432c:	24000af4 	.word	0x24000af4

08004330 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INP_COMP_IRQ_Pin);
 8004334:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004338:	f006 fc4f 	bl	800abda <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(POWER_OFF_IRQ_Pin);
 800433c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004340:	f006 fc4b 	bl	800abda <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004344:	bf00      	nop
 8004346:	bd80      	pop	{r7, pc}

08004348 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  return 1;
 800434c:	2301      	movs	r3, #1
}
 800434e:	4618      	mov	r0, r3
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <_kill>:

int _kill(int pid, int sig)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004362:	f00d ff93 	bl	801228c <__errno>
 8004366:	4603      	mov	r3, r0
 8004368:	2216      	movs	r2, #22
 800436a:	601a      	str	r2, [r3, #0]
  return -1;
 800436c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004370:	4618      	mov	r0, r3
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <_exit>:

void _exit (int status)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004380:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7ff ffe7 	bl	8004358 <_kill>
  while (1) {}    /* Make sure we hang here */
 800438a:	bf00      	nop
 800438c:	e7fd      	b.n	800438a <_exit+0x12>

0800438e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b086      	sub	sp, #24
 8004392:	af00      	add	r7, sp, #0
 8004394:	60f8      	str	r0, [r7, #12]
 8004396:	60b9      	str	r1, [r7, #8]
 8004398:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800439a:	2300      	movs	r3, #0
 800439c:	617b      	str	r3, [r7, #20]
 800439e:	e00a      	b.n	80043b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80043a0:	f3af 8000 	nop.w
 80043a4:	4601      	mov	r1, r0
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	60ba      	str	r2, [r7, #8]
 80043ac:	b2ca      	uxtb	r2, r1
 80043ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	3301      	adds	r3, #1
 80043b4:	617b      	str	r3, [r7, #20]
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	dbf0      	blt.n	80043a0 <_read+0x12>
  }

  return len;
 80043be:	687b      	ldr	r3, [r7, #4]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3718      	adds	r7, #24
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043d4:	2300      	movs	r3, #0
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	e009      	b.n	80043ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	1c5a      	adds	r2, r3, #1
 80043de:	60ba      	str	r2, [r7, #8]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	3301      	adds	r3, #1
 80043ec:	617b      	str	r3, [r7, #20]
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	dbf1      	blt.n	80043da <_write+0x12>
  }
  return len;
 80043f6:	687b      	ldr	r3, [r7, #4]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3718      	adds	r7, #24
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <_close>:

int _close(int file)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004408:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800440c:	4618      	mov	r0, r3
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004428:	605a      	str	r2, [r3, #4]
  return 0;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <_isatty>:

int _isatty(int file)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004440:	2301      	movs	r3, #1
}
 8004442:	4618      	mov	r0, r3
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800444e:	b480      	push	{r7}
 8004450:	b085      	sub	sp, #20
 8004452:	af00      	add	r7, sp, #0
 8004454:	60f8      	str	r0, [r7, #12]
 8004456:	60b9      	str	r1, [r7, #8]
 8004458:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004470:	4a14      	ldr	r2, [pc, #80]	@ (80044c4 <_sbrk+0x5c>)
 8004472:	4b15      	ldr	r3, [pc, #84]	@ (80044c8 <_sbrk+0x60>)
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800447c:	4b13      	ldr	r3, [pc, #76]	@ (80044cc <_sbrk+0x64>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d102      	bne.n	800448a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004484:	4b11      	ldr	r3, [pc, #68]	@ (80044cc <_sbrk+0x64>)
 8004486:	4a12      	ldr	r2, [pc, #72]	@ (80044d0 <_sbrk+0x68>)
 8004488:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800448a:	4b10      	ldr	r3, [pc, #64]	@ (80044cc <_sbrk+0x64>)
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4413      	add	r3, r2
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	429a      	cmp	r2, r3
 8004496:	d207      	bcs.n	80044a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004498:	f00d fef8 	bl	801228c <__errno>
 800449c:	4603      	mov	r3, r0
 800449e:	220c      	movs	r2, #12
 80044a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80044a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80044a6:	e009      	b.n	80044bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80044a8:	4b08      	ldr	r3, [pc, #32]	@ (80044cc <_sbrk+0x64>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80044ae:	4b07      	ldr	r3, [pc, #28]	@ (80044cc <_sbrk+0x64>)
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4413      	add	r3, r2
 80044b6:	4a05      	ldr	r2, [pc, #20]	@ (80044cc <_sbrk+0x64>)
 80044b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80044ba:	68fb      	ldr	r3, [r7, #12]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3718      	adds	r7, #24
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	24050000 	.word	0x24050000
 80044c8:	00000400 	.word	0x00000400
 80044cc:	2400109c 	.word	0x2400109c
 80044d0:	24001210 	.word	0x24001210

080044d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80044d8:	4b32      	ldr	r3, [pc, #200]	@ (80045a4 <SystemInit+0xd0>)
 80044da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044de:	4a31      	ldr	r2, [pc, #196]	@ (80045a4 <SystemInit+0xd0>)
 80044e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80044e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80044e8:	4b2f      	ldr	r3, [pc, #188]	@ (80045a8 <SystemInit+0xd4>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 030f 	and.w	r3, r3, #15
 80044f0:	2b06      	cmp	r3, #6
 80044f2:	d807      	bhi.n	8004504 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80044f4:	4b2c      	ldr	r3, [pc, #176]	@ (80045a8 <SystemInit+0xd4>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f023 030f 	bic.w	r3, r3, #15
 80044fc:	4a2a      	ldr	r2, [pc, #168]	@ (80045a8 <SystemInit+0xd4>)
 80044fe:	f043 0307 	orr.w	r3, r3, #7
 8004502:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004504:	4b29      	ldr	r3, [pc, #164]	@ (80045ac <SystemInit+0xd8>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a28      	ldr	r2, [pc, #160]	@ (80045ac <SystemInit+0xd8>)
 800450a:	f043 0301 	orr.w	r3, r3, #1
 800450e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004510:	4b26      	ldr	r3, [pc, #152]	@ (80045ac <SystemInit+0xd8>)
 8004512:	2200      	movs	r2, #0
 8004514:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004516:	4b25      	ldr	r3, [pc, #148]	@ (80045ac <SystemInit+0xd8>)
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	4924      	ldr	r1, [pc, #144]	@ (80045ac <SystemInit+0xd8>)
 800451c:	4b24      	ldr	r3, [pc, #144]	@ (80045b0 <SystemInit+0xdc>)
 800451e:	4013      	ands	r3, r2
 8004520:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004522:	4b21      	ldr	r3, [pc, #132]	@ (80045a8 <SystemInit+0xd4>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b00      	cmp	r3, #0
 800452c:	d007      	beq.n	800453e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800452e:	4b1e      	ldr	r3, [pc, #120]	@ (80045a8 <SystemInit+0xd4>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f023 030f 	bic.w	r3, r3, #15
 8004536:	4a1c      	ldr	r2, [pc, #112]	@ (80045a8 <SystemInit+0xd4>)
 8004538:	f043 0307 	orr.w	r3, r3, #7
 800453c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800453e:	4b1b      	ldr	r3, [pc, #108]	@ (80045ac <SystemInit+0xd8>)
 8004540:	2200      	movs	r2, #0
 8004542:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004544:	4b19      	ldr	r3, [pc, #100]	@ (80045ac <SystemInit+0xd8>)
 8004546:	2200      	movs	r2, #0
 8004548:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800454a:	4b18      	ldr	r3, [pc, #96]	@ (80045ac <SystemInit+0xd8>)
 800454c:	2200      	movs	r2, #0
 800454e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004550:	4b16      	ldr	r3, [pc, #88]	@ (80045ac <SystemInit+0xd8>)
 8004552:	4a18      	ldr	r2, [pc, #96]	@ (80045b4 <SystemInit+0xe0>)
 8004554:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004556:	4b15      	ldr	r3, [pc, #84]	@ (80045ac <SystemInit+0xd8>)
 8004558:	4a17      	ldr	r2, [pc, #92]	@ (80045b8 <SystemInit+0xe4>)
 800455a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800455c:	4b13      	ldr	r3, [pc, #76]	@ (80045ac <SystemInit+0xd8>)
 800455e:	4a17      	ldr	r2, [pc, #92]	@ (80045bc <SystemInit+0xe8>)
 8004560:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004562:	4b12      	ldr	r3, [pc, #72]	@ (80045ac <SystemInit+0xd8>)
 8004564:	2200      	movs	r2, #0
 8004566:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004568:	4b10      	ldr	r3, [pc, #64]	@ (80045ac <SystemInit+0xd8>)
 800456a:	4a14      	ldr	r2, [pc, #80]	@ (80045bc <SystemInit+0xe8>)
 800456c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800456e:	4b0f      	ldr	r3, [pc, #60]	@ (80045ac <SystemInit+0xd8>)
 8004570:	2200      	movs	r2, #0
 8004572:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004574:	4b0d      	ldr	r3, [pc, #52]	@ (80045ac <SystemInit+0xd8>)
 8004576:	4a11      	ldr	r2, [pc, #68]	@ (80045bc <SystemInit+0xe8>)
 8004578:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800457a:	4b0c      	ldr	r3, [pc, #48]	@ (80045ac <SystemInit+0xd8>)
 800457c:	2200      	movs	r2, #0
 800457e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004580:	4b0a      	ldr	r3, [pc, #40]	@ (80045ac <SystemInit+0xd8>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a09      	ldr	r2, [pc, #36]	@ (80045ac <SystemInit+0xd8>)
 8004586:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800458a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800458c:	4b07      	ldr	r3, [pc, #28]	@ (80045ac <SystemInit+0xd8>)
 800458e:	2200      	movs	r2, #0
 8004590:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004592:	4b0b      	ldr	r3, [pc, #44]	@ (80045c0 <SystemInit+0xec>)
 8004594:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8004598:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800459a:	bf00      	nop
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	e000ed00 	.word	0xe000ed00
 80045a8:	52002000 	.word	0x52002000
 80045ac:	58024400 	.word	0x58024400
 80045b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80045b4:	02020200 	.word	0x02020200
 80045b8:	01ff0000 	.word	0x01ff0000
 80045bc:	01010280 	.word	0x01010280
 80045c0:	52004000 	.word	0x52004000

080045c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80045c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80045fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80045c8:	f7ff ff84 	bl	80044d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80045cc:	480c      	ldr	r0, [pc, #48]	@ (8004600 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80045ce:	490d      	ldr	r1, [pc, #52]	@ (8004604 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80045d0:	4a0d      	ldr	r2, [pc, #52]	@ (8004608 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80045d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80045d4:	e002      	b.n	80045dc <LoopCopyDataInit>

080045d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045da:	3304      	adds	r3, #4

080045dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045e0:	d3f9      	bcc.n	80045d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045e2:	4a0a      	ldr	r2, [pc, #40]	@ (800460c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80045e4:	4c0a      	ldr	r4, [pc, #40]	@ (8004610 <LoopFillZerobss+0x22>)
  movs r3, #0
 80045e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045e8:	e001      	b.n	80045ee <LoopFillZerobss>

080045ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045ec:	3204      	adds	r2, #4

080045ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045f0:	d3fb      	bcc.n	80045ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80045f2:	f00d fe51 	bl	8012298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80045f6:	f7fe f931 	bl	800285c <main>
  bx  lr
 80045fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80045fc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004600:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004604:	24000210 	.word	0x24000210
  ldr r2, =_sidata
 8004608:	08014ff0 	.word	0x08014ff0
  ldr r2, =_sbss
 800460c:	240002d0 	.word	0x240002d0
  ldr r4, =_ebss
 8004610:	2400120c 	.word	0x2400120c

08004614 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004614:	e7fe      	b.n	8004614 <ADC3_IRQHandler>
	...

08004618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800461e:	2003      	movs	r0, #3
 8004620:	f003 f9ec 	bl	80079fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004624:	f007 f8be 	bl	800b7a4 <HAL_RCC_GetSysClockFreq>
 8004628:	4602      	mov	r2, r0
 800462a:	4b15      	ldr	r3, [pc, #84]	@ (8004680 <HAL_Init+0x68>)
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	0a1b      	lsrs	r3, r3, #8
 8004630:	f003 030f 	and.w	r3, r3, #15
 8004634:	4913      	ldr	r1, [pc, #76]	@ (8004684 <HAL_Init+0x6c>)
 8004636:	5ccb      	ldrb	r3, [r1, r3]
 8004638:	f003 031f 	and.w	r3, r3, #31
 800463c:	fa22 f303 	lsr.w	r3, r2, r3
 8004640:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004642:	4b0f      	ldr	r3, [pc, #60]	@ (8004680 <HAL_Init+0x68>)
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	f003 030f 	and.w	r3, r3, #15
 800464a:	4a0e      	ldr	r2, [pc, #56]	@ (8004684 <HAL_Init+0x6c>)
 800464c:	5cd3      	ldrb	r3, [r2, r3]
 800464e:	f003 031f 	and.w	r3, r3, #31
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	fa22 f303 	lsr.w	r3, r2, r3
 8004658:	4a0b      	ldr	r2, [pc, #44]	@ (8004688 <HAL_Init+0x70>)
 800465a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800465c:	4a0b      	ldr	r2, [pc, #44]	@ (800468c <HAL_Init+0x74>)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004662:	2000      	movs	r0, #0
 8004664:	f000 f814 	bl	8004690 <HAL_InitTick>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e002      	b.n	8004678 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004672:	f7ff f913 	bl	800389c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	58024400 	.word	0x58024400
 8004684:	08014c0c 	.word	0x08014c0c
 8004688:	2400003c 	.word	0x2400003c
 800468c:	24000038 	.word	0x24000038

08004690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004698:	4b15      	ldr	r3, [pc, #84]	@ (80046f0 <HAL_InitTick+0x60>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e021      	b.n	80046e8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80046a4:	4b13      	ldr	r3, [pc, #76]	@ (80046f4 <HAL_InitTick+0x64>)
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	4b11      	ldr	r3, [pc, #68]	@ (80046f0 <HAL_InitTick+0x60>)
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	4619      	mov	r1, r3
 80046ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80046b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80046b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ba:	4618      	mov	r0, r3
 80046bc:	f003 f9d1 	bl	8007a62 <HAL_SYSTICK_Config>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e00e      	b.n	80046e8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b0f      	cmp	r3, #15
 80046ce:	d80a      	bhi.n	80046e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046d0:	2200      	movs	r2, #0
 80046d2:	6879      	ldr	r1, [r7, #4]
 80046d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80046d8:	f003 f99b 	bl	8007a12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80046dc:	4a06      	ldr	r2, [pc, #24]	@ (80046f8 <HAL_InitTick+0x68>)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	e000      	b.n	80046e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	24000044 	.word	0x24000044
 80046f4:	24000038 	.word	0x24000038
 80046f8:	24000040 	.word	0x24000040

080046fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046fc:	b480      	push	{r7}
 80046fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004700:	4b06      	ldr	r3, [pc, #24]	@ (800471c <HAL_IncTick+0x20>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	461a      	mov	r2, r3
 8004706:	4b06      	ldr	r3, [pc, #24]	@ (8004720 <HAL_IncTick+0x24>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4413      	add	r3, r2
 800470c:	4a04      	ldr	r2, [pc, #16]	@ (8004720 <HAL_IncTick+0x24>)
 800470e:	6013      	str	r3, [r2, #0]
}
 8004710:	bf00      	nop
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	24000044 	.word	0x24000044
 8004720:	240010a0 	.word	0x240010a0

08004724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0
  return uwTick;
 8004728:	4b03      	ldr	r3, [pc, #12]	@ (8004738 <HAL_GetTick+0x14>)
 800472a:	681b      	ldr	r3, [r3, #0]
}
 800472c:	4618      	mov	r0, r3
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	240010a0 	.word	0x240010a0

0800473c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004744:	f7ff ffee 	bl	8004724 <HAL_GetTick>
 8004748:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004754:	d005      	beq.n	8004762 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004756:	4b0a      	ldr	r3, [pc, #40]	@ (8004780 <HAL_Delay+0x44>)
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	461a      	mov	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4413      	add	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004762:	bf00      	nop
 8004764:	f7ff ffde 	bl	8004724 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	429a      	cmp	r2, r3
 8004772:	d8f7      	bhi.n	8004764 <HAL_Delay+0x28>
  {
  }
}
 8004774:	bf00      	nop
 8004776:	bf00      	nop
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	24000044 	.word	0x24000044

08004784 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800478c:	4b06      	ldr	r3, [pc, #24]	@ (80047a8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8004794:	4904      	ldr	r1, [pc, #16]	@ (80047a8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4313      	orrs	r3, r2
 800479a:	604b      	str	r3, [r1, #4]
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	58000400 	.word	0x58000400

080047ac <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80047b6:	4b07      	ldr	r3, [pc, #28]	@ (80047d4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	43db      	mvns	r3, r3
 80047be:	401a      	ands	r2, r3
 80047c0:	4904      	ldr	r1, [pc, #16]	@ (80047d4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	604b      	str	r3, [r1, #4]
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	58000400 	.word	0x58000400

080047d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	431a      	orrs	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	609a      	str	r2, [r3, #8]
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
 8004806:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	609a      	str	r2, [r3, #8]
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004834:	4618      	mov	r0, r3
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
 800484c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	3360      	adds	r3, #96	@ 0x60
 8004852:	461a      	mov	r2, r3
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	4413      	add	r3, r2
 800485a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	4a10      	ldr	r2, [pc, #64]	@ (80048a0 <LL_ADC_SetOffset+0x60>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d10b      	bne.n	800487c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	4313      	orrs	r3, r2
 8004872:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800487a:	e00b      	b.n	8004894 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	430b      	orrs	r3, r1
 800488e:	431a      	orrs	r2, r3
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	601a      	str	r2, [r3, #0]
}
 8004894:	bf00      	nop
 8004896:	371c      	adds	r7, #28
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	58026000 	.word	0x58026000

080048a4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	3360      	adds	r3, #96	@ 0x60
 80048b2:	461a      	mov	r2, r3
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3714      	adds	r7, #20
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f003 031f 	and.w	r3, r3, #31
 80048ea:	6879      	ldr	r1, [r7, #4]
 80048ec:	fa01 f303 	lsl.w	r3, r1, r3
 80048f0:	431a      	orrs	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	611a      	str	r2, [r3, #16]
}
 80048f6:	bf00      	nop
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
	...

08004904 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4a0c      	ldr	r2, [pc, #48]	@ (8004944 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d00e      	beq.n	8004936 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	3360      	adds	r3, #96	@ 0x60
 800491c:	461a      	mov	r2, r3
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4413      	add	r3, r2
 8004924:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	431a      	orrs	r2, r3
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	601a      	str	r2, [r3, #0]
  }
}
 8004936:	bf00      	nop
 8004938:	371c      	adds	r7, #28
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	58026000 	.word	0x58026000

08004948 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004948:	b480      	push	{r7}
 800494a:	b087      	sub	sp, #28
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4a0c      	ldr	r2, [pc, #48]	@ (8004988 <LL_ADC_SetOffsetSaturation+0x40>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d10e      	bne.n	800497a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	3360      	adds	r3, #96	@ 0x60
 8004960:	461a      	mov	r2, r3
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	431a      	orrs	r2, r3
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800497a:	bf00      	nop
 800497c:	371c      	adds	r7, #28
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	58026000 	.word	0x58026000

0800498c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4a0c      	ldr	r2, [pc, #48]	@ (80049cc <LL_ADC_SetOffsetSign+0x40>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d10e      	bne.n	80049be <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	3360      	adds	r3, #96	@ 0x60
 80049a4:	461a      	mov	r2, r3
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	4413      	add	r3, r2
 80049ac:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	431a      	orrs	r2, r3
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80049be:	bf00      	nop
 80049c0:	371c      	adds	r7, #28
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	58026000 	.word	0x58026000

080049d0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	3360      	adds	r3, #96	@ 0x60
 80049e0:	461a      	mov	r2, r3
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	4a0c      	ldr	r2, [pc, #48]	@ (8004a20 <LL_ADC_SetOffsetState+0x50>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d108      	bne.n	8004a04 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	431a      	orrs	r2, r3
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8004a02:	e007      	b.n	8004a14 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	601a      	str	r2, [r3, #0]
}
 8004a14:	bf00      	nop
 8004a16:	371c      	adds	r7, #28
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	58026000 	.word	0x58026000

08004a24 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e000      	b.n	8004a3e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b087      	sub	sp, #28
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	60f8      	str	r0, [r7, #12]
 8004a52:	60b9      	str	r1, [r7, #8]
 8004a54:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	3330      	adds	r3, #48	@ 0x30
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	0a1b      	lsrs	r3, r3, #8
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	f003 030c 	and.w	r3, r3, #12
 8004a66:	4413      	add	r3, r2
 8004a68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	f003 031f 	and.w	r3, r3, #31
 8004a74:	211f      	movs	r1, #31
 8004a76:	fa01 f303 	lsl.w	r3, r1, r3
 8004a7a:	43db      	mvns	r3, r3
 8004a7c:	401a      	ands	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	0e9b      	lsrs	r3, r3, #26
 8004a82:	f003 011f 	and.w	r1, r3, #31
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	f003 031f 	and.w	r3, r3, #31
 8004a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a90:	431a      	orrs	r2, r3
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004a96:	bf00      	nop
 8004a98:	371c      	adds	r7, #28
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
 8004aaa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f023 0203 	bic.w	r2, r3, #3
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	60da      	str	r2, [r3, #12]
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f043 0201 	orr.w	r2, r3, #1
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	60da      	str	r2, [r3, #12]
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a08      	ldr	r2, [pc, #32]	@ (8004b18 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d107      	bne.n	8004b0a <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	f023 0203 	bic.w	r2, r3, #3
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	431a      	orrs	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	60da      	str	r2, [r3, #12]
  }
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	58026000 	.word	0x58026000

08004b1c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b28:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004b30:	2301      	movs	r3, #1
 8004b32:	e000      	b.n	8004b36 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b087      	sub	sp, #28
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	60f8      	str	r0, [r7, #12]
 8004b4a:	60b9      	str	r1, [r7, #8]
 8004b4c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	3314      	adds	r3, #20
 8004b52:	461a      	mov	r2, r3
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	0e5b      	lsrs	r3, r3, #25
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	f003 0304 	and.w	r3, r3, #4
 8004b5e:	4413      	add	r3, r2
 8004b60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	0d1b      	lsrs	r3, r3, #20
 8004b6a:	f003 031f 	and.w	r3, r3, #31
 8004b6e:	2107      	movs	r1, #7
 8004b70:	fa01 f303 	lsl.w	r3, r1, r3
 8004b74:	43db      	mvns	r3, r3
 8004b76:	401a      	ands	r2, r3
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	0d1b      	lsrs	r3, r3, #20
 8004b7c:	f003 031f 	and.w	r3, r3, #31
 8004b80:	6879      	ldr	r1, [r7, #4]
 8004b82:	fa01 f303 	lsl.w	r3, r1, r3
 8004b86:	431a      	orrs	r2, r3
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004b8c:	bf00      	nop
 8004b8e:	371c      	adds	r7, #28
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4a1a      	ldr	r2, [pc, #104]	@ (8004c10 <LL_ADC_SetChannelSingleDiff+0x78>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d115      	bne.n	8004bd8 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bb8:	43db      	mvns	r3, r3
 8004bba:	401a      	ands	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f003 0318 	and.w	r3, r3, #24
 8004bc2:	4914      	ldr	r1, [pc, #80]	@ (8004c14 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004bc4:	40d9      	lsrs	r1, r3
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	400b      	ands	r3, r1
 8004bca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004bd6:	e014      	b.n	8004c02 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004be4:	43db      	mvns	r3, r3
 8004be6:	401a      	ands	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f003 0318 	and.w	r3, r3, #24
 8004bee:	4909      	ldr	r1, [pc, #36]	@ (8004c14 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004bf0:	40d9      	lsrs	r1, r3
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	400b      	ands	r3, r1
 8004bf6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8004c02:	bf00      	nop
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	58026000 	.word	0x58026000
 8004c14:	000fffff 	.word	0x000fffff

08004c18 <LL_ADC_SetAnalogWDMonitChannels>:
  *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
  *         (2) On STM32H7, parameter available only on ADC instance: ADC2.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	330c      	adds	r3, #12
 8004c28:	4618      	mov	r0, r3
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	0d1b      	lsrs	r3, r3, #20
 8004c2e:	f003 0103 	and.w	r1, r3, #3
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	f003 0201 	and.w	r2, r3, #1
 8004c38:	4613      	mov	r3, r2
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	4413      	add	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	440b      	add	r3, r1
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4403      	add	r3, r0
 8004c46:	617b      	str	r3, [r7, #20]
                                                      + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68b9      	ldr	r1, [r7, #8]
 8004c4e:	4b08      	ldr	r3, [pc, #32]	@ (8004c70 <LL_ADC_SetAnalogWDMonitChannels+0x58>)
 8004c50:	400b      	ands	r3, r1
 8004c52:	43db      	mvns	r3, r3
 8004c54:	401a      	ands	r2, r3
 8004c56:	6879      	ldr	r1, [r7, #4]
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	400b      	ands	r3, r1
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8004c62:	bf00      	nop
 8004c64:	371c      	adds	r7, #28
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	7dcfffff 	.word	0x7dcfffff

08004c74 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdHighValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue, uint32_t AWDThresholdLowValue)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b089      	sub	sp, #36	@ 0x24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
 8004c80:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  if (ADCx == ADC3)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4a29      	ldr	r2, [pc, #164]	@ (8004d2c <LL_ADC_ConfigAnalogWDThresholds+0xb8>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d115      	bne.n	8004cb6 <LL_ADC_ConfigAnalogWDThresholds+0x42>
  {
    uint32_t __IO *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	3320      	adds	r3, #32
 8004c8e:	461a      	mov	r2, r3
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	0d1b      	lsrs	r3, r3, #20
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	f003 030c 	and.w	r3, r3, #12
 8004c9a:	4413      	add	r3, r2
 8004c9c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 22f0 	and.w	r2, r3, #4026593280	@ 0xf000f000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	0419      	lsls	r1, r3, #16
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	430b      	orrs	r3, r1
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	601a      	str	r2, [r3, #0]
                                                         + (LL_ADC_AWD_THRESHOLD_HIGH));

    MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdLowValue);
    MODIFY_REG(*preg2, ADC_HTR_HT, AWDThresholdHighValue);
  }
}
 8004cb4:	e034      	b.n	8004d20 <LL_ADC_ConfigAnalogWDThresholds+0xac>
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS) * 2UL)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	3320      	adds	r3, #32
 8004cba:	4618      	mov	r0, r3
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	0d1b      	lsrs	r3, r3, #20
 8004cc0:	f003 0103 	and.w	r1, r3, #3
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f003 0201 	and.w	r2, r3, #1
 8004cca:	4613      	mov	r3, r2
 8004ccc:	011b      	lsls	r3, r3, #4
 8004cce:	4413      	add	r3, r2
 8004cd0:	440b      	add	r3, r1
 8004cd2:	005b      	lsls	r3, r3, #1
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4403      	add	r3, r0
 8004cd8:	61fb      	str	r3, [r7, #28]
    __IO uint32_t *preg2 = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS) * 2UL)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	3320      	adds	r3, #32
 8004cde:	4618      	mov	r0, r3
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	0d1b      	lsrs	r3, r3, #20
 8004ce4:	f003 0103 	and.w	r1, r3, #3
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	f003 0201 	and.w	r2, r3, #1
 8004cee:	4613      	mov	r3, r2
 8004cf0:	011b      	lsls	r3, r3, #4
 8004cf2:	4413      	add	r3, r2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4403      	add	r3, r0
 8004cfe:	61bb      	str	r3, [r7, #24]
    MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdLowValue);
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 427c 	and.w	r2, r3, #4227858432	@ 0xfc000000
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	601a      	str	r2, [r3, #0]
    MODIFY_REG(*preg2, ADC_HTR_HT, AWDThresholdHighValue);
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 427c 	and.w	r2, r3, #4227858432	@ 0xfc000000
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	601a      	str	r2, [r3, #0]
}
 8004d20:	bf00      	nop
 8004d22:	3724      	adds	r7, #36	@ 0x24
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	58026000 	.word	0x58026000

08004d30 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f003 031f 	and.w	r3, r3, #31
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	4b04      	ldr	r3, [pc, #16]	@ (8004d88 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004d76:	4013      	ands	r3, r2
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	6093      	str	r3, [r2, #8]
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	5fffffc0 	.word	0x5fffffc0

08004d8c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004da0:	d101      	bne.n	8004da6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004da2:	2301      	movs	r3, #1
 8004da4:	e000      	b.n	8004da8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	4b05      	ldr	r3, [pc, #20]	@ (8004dd8 <LL_ADC_EnableInternalRegulator+0x24>)
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr
 8004dd8:	6fffffc0 	.word	0x6fffffc0

08004ddc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004df0:	d101      	bne.n	8004df6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e000      	b.n	8004df8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	4b05      	ldr	r3, [pc, #20]	@ (8004e28 <LL_ADC_Enable+0x24>)
 8004e12:	4013      	ands	r3, r2
 8004e14:	f043 0201 	orr.w	r2, r3, #1
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	7fffffc0 	.word	0x7fffffc0

08004e2c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	4b05      	ldr	r3, [pc, #20]	@ (8004e50 <LL_ADC_Disable+0x24>)
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	f043 0202 	orr.w	r2, r3, #2
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	7fffffc0 	.word	0x7fffffc0

08004e54 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d101      	bne.n	8004e6c <LL_ADC_IsEnabled+0x18>
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e000      	b.n	8004e6e <LL_ADC_IsEnabled+0x1a>
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d101      	bne.n	8004e92 <LL_ADC_IsDisableOngoing+0x18>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e000      	b.n	8004e94 <LL_ADC_IsDisableOngoing+0x1a>
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	4b05      	ldr	r3, [pc, #20]	@ (8004ec4 <LL_ADC_REG_StartConversion+0x24>)
 8004eae:	4013      	ands	r3, r2
 8004eb0:	f043 0204 	orr.w	r2, r3, #4
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	7fffffc0 	.word	0x7fffffc0

08004ec8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b04      	cmp	r3, #4
 8004eda:	d101      	bne.n	8004ee0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004edc:	2301      	movs	r3, #1
 8004ede:	e000      	b.n	8004ee2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b083      	sub	sp, #12
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f003 0308 	and.w	r3, r3, #8
 8004efe:	2b08      	cmp	r3, #8
 8004f00:	d101      	bne.n	8004f06 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004f02:	2301      	movs	r3, #1
 8004f04:	e000      	b.n	8004f08 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2280      	movs	r2, #128	@ 0x80
 8004f20:	601a      	str	r2, [r3, #0]
}
 8004f22:	bf00      	nop
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f3c:	601a      	str	r2, [r3, #0]
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f58:	601a      	str	r2, [r3, #0]
}
 8004f5a:	bf00      	nop
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	605a      	str	r2, [r3, #4]
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	605a      	str	r2, [r3, #4]
}
 8004f9a:	bf00      	nop
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b083      	sub	sp, #12
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	605a      	str	r2, [r3, #4]
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	605a      	str	r2, [r3, #4]
}
 8004fda:	bf00      	nop
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b083      	sub	sp, #12
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	605a      	str	r2, [r3, #4]
}
 8004ffa:	bf00      	nop
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8005006:	b480      	push	{r7}
 8005008:	b083      	sub	sp, #12
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	605a      	str	r2, [r3, #4]
}
 800501a:	bf00      	nop
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
	...

08005028 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005028:	b590      	push	{r4, r7, lr}
 800502a:	b089      	sub	sp, #36	@ 0x24
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005030:	2300      	movs	r3, #0
 8005032:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005034:	2300      	movs	r3, #0
 8005036:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e1ee      	b.n	8005420 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800504c:	2b00      	cmp	r3, #0
 800504e:	d109      	bne.n	8005064 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f7fe fc3d 	bl	80038d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4618      	mov	r0, r3
 800506a:	f7ff fe8f 	bl	8004d8c <LL_ADC_IsDeepPowerDownEnabled>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d004      	beq.n	800507e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4618      	mov	r0, r3
 800507a:	f7ff fe75 	bl	8004d68 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4618      	mov	r0, r3
 8005084:	f7ff feaa 	bl	8004ddc <LL_ADC_IsInternalRegulatorEnabled>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d114      	bne.n	80050b8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4618      	mov	r0, r3
 8005094:	f7ff fe8e 	bl	8004db4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005098:	4b8e      	ldr	r3, [pc, #568]	@ (80052d4 <HAL_ADC_Init+0x2ac>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	099b      	lsrs	r3, r3, #6
 800509e:	4a8e      	ldr	r2, [pc, #568]	@ (80052d8 <HAL_ADC_Init+0x2b0>)
 80050a0:	fba2 2303 	umull	r2, r3, r2, r3
 80050a4:	099b      	lsrs	r3, r3, #6
 80050a6:	3301      	adds	r3, #1
 80050a8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80050aa:	e002      	b.n	80050b2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1f9      	bne.n	80050ac <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4618      	mov	r0, r3
 80050be:	f7ff fe8d 	bl	8004ddc <LL_ADC_IsInternalRegulatorEnabled>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10d      	bne.n	80050e4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050cc:	f043 0210 	orr.w	r2, r3, #16
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050d8:	f043 0201 	orr.w	r2, r3, #1
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7ff feed 	bl	8004ec8 <LL_ADC_REG_IsConversionOngoing>
 80050ee:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050f4:	f003 0310 	and.w	r3, r3, #16
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f040 8188 	bne.w	800540e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	2b00      	cmp	r3, #0
 8005102:	f040 8184 	bne.w	800540e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800510a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800510e:	f043 0202 	orr.w	r2, r3, #2
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4618      	mov	r0, r3
 800511c:	f7ff fe9a 	bl	8004e54 <LL_ADC_IsEnabled>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d136      	bne.n	8005194 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a6c      	ldr	r2, [pc, #432]	@ (80052dc <HAL_ADC_Init+0x2b4>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d004      	beq.n	800513a <HAL_ADC_Init+0x112>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a6a      	ldr	r2, [pc, #424]	@ (80052e0 <HAL_ADC_Init+0x2b8>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d10e      	bne.n	8005158 <HAL_ADC_Init+0x130>
 800513a:	4868      	ldr	r0, [pc, #416]	@ (80052dc <HAL_ADC_Init+0x2b4>)
 800513c:	f7ff fe8a 	bl	8004e54 <LL_ADC_IsEnabled>
 8005140:	4604      	mov	r4, r0
 8005142:	4867      	ldr	r0, [pc, #412]	@ (80052e0 <HAL_ADC_Init+0x2b8>)
 8005144:	f7ff fe86 	bl	8004e54 <LL_ADC_IsEnabled>
 8005148:	4603      	mov	r3, r0
 800514a:	4323      	orrs	r3, r4
 800514c:	2b00      	cmp	r3, #0
 800514e:	bf0c      	ite	eq
 8005150:	2301      	moveq	r3, #1
 8005152:	2300      	movne	r3, #0
 8005154:	b2db      	uxtb	r3, r3
 8005156:	e008      	b.n	800516a <HAL_ADC_Init+0x142>
 8005158:	4862      	ldr	r0, [pc, #392]	@ (80052e4 <HAL_ADC_Init+0x2bc>)
 800515a:	f7ff fe7b 	bl	8004e54 <LL_ADC_IsEnabled>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	bf0c      	ite	eq
 8005164:	2301      	moveq	r3, #1
 8005166:	2300      	movne	r3, #0
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d012      	beq.n	8005194 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a5a      	ldr	r2, [pc, #360]	@ (80052dc <HAL_ADC_Init+0x2b4>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d004      	beq.n	8005182 <HAL_ADC_Init+0x15a>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a58      	ldr	r2, [pc, #352]	@ (80052e0 <HAL_ADC_Init+0x2b8>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d101      	bne.n	8005186 <HAL_ADC_Init+0x15e>
 8005182:	4a59      	ldr	r2, [pc, #356]	@ (80052e8 <HAL_ADC_Init+0x2c0>)
 8005184:	e000      	b.n	8005188 <HAL_ADC_Init+0x160>
 8005186:	4a59      	ldr	r2, [pc, #356]	@ (80052ec <HAL_ADC_Init+0x2c4>)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	4619      	mov	r1, r3
 800518e:	4610      	mov	r0, r2
 8005190:	f7ff fb22 	bl	80047d8 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a52      	ldr	r2, [pc, #328]	@ (80052e4 <HAL_ADC_Init+0x2bc>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d129      	bne.n	80051f2 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	7e5b      	ldrb	r3, [r3, #25]
 80051a2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80051a8:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80051ae:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	2b08      	cmp	r3, #8
 80051b6:	d013      	beq.n	80051e0 <HAL_ADC_Init+0x1b8>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	2b0c      	cmp	r3, #12
 80051be:	d00d      	beq.n	80051dc <HAL_ADC_Init+0x1b4>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	2b1c      	cmp	r3, #28
 80051c6:	d007      	beq.n	80051d8 <HAL_ADC_Init+0x1b0>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	2b18      	cmp	r3, #24
 80051ce:	d101      	bne.n	80051d4 <HAL_ADC_Init+0x1ac>
 80051d0:	2318      	movs	r3, #24
 80051d2:	e006      	b.n	80051e2 <HAL_ADC_Init+0x1ba>
 80051d4:	2300      	movs	r3, #0
 80051d6:	e004      	b.n	80051e2 <HAL_ADC_Init+0x1ba>
 80051d8:	2310      	movs	r3, #16
 80051da:	e002      	b.n	80051e2 <HAL_ADC_Init+0x1ba>
 80051dc:	2308      	movs	r3, #8
 80051de:	e000      	b.n	80051e2 <HAL_ADC_Init+0x1ba>
 80051e0:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80051e2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051ea:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80051ec:	4313      	orrs	r3, r2
 80051ee:	61bb      	str	r3, [r7, #24]
 80051f0:	e00e      	b.n	8005210 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	7e5b      	ldrb	r3, [r3, #25]
 80051f6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80051fc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005202:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 3020 	ldrb.w	r3, [r3, #32]
 800520a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800520c:	4313      	orrs	r3, r2
 800520e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d106      	bne.n	8005228 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800521e:	3b01      	subs	r3, #1
 8005220:	045b      	lsls	r3, r3, #17
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	4313      	orrs	r3, r2
 8005226:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800522c:	2b00      	cmp	r3, #0
 800522e:	d009      	beq.n	8005244 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005234:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800523c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	4313      	orrs	r3, r2
 8005242:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a26      	ldr	r2, [pc, #152]	@ (80052e4 <HAL_ADC_Init+0x2bc>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d115      	bne.n	800527a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	4b26      	ldr	r3, [pc, #152]	@ (80052f0 <HAL_ADC_Init+0x2c8>)
 8005256:	4013      	ands	r3, r2
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	6812      	ldr	r2, [r2, #0]
 800525c:	69b9      	ldr	r1, [r7, #24]
 800525e:	430b      	orrs	r3, r1
 8005260:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	611a      	str	r2, [r3, #16]
 8005278:	e009      	b.n	800528e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68da      	ldr	r2, [r3, #12]
 8005280:	4b1c      	ldr	r3, [pc, #112]	@ (80052f4 <HAL_ADC_Init+0x2cc>)
 8005282:	4013      	ands	r3, r2
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	6812      	ldr	r2, [r2, #0]
 8005288:	69b9      	ldr	r1, [r7, #24]
 800528a:	430b      	orrs	r3, r1
 800528c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4618      	mov	r0, r3
 8005294:	f7ff fe18 	bl	8004ec8 <LL_ADC_REG_IsConversionOngoing>
 8005298:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4618      	mov	r0, r3
 80052a0:	f7ff fe25 	bl	8004eee <LL_ADC_INJ_IsConversionOngoing>
 80052a4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f040 808e 	bne.w	80053ca <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f040 808a 	bne.w	80053ca <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a0a      	ldr	r2, [pc, #40]	@ (80052e4 <HAL_ADC_Init+0x2bc>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d11b      	bne.n	80052f8 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	7e1b      	ldrb	r3, [r3, #24]
 80052c4:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80052cc:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80052ce:	4313      	orrs	r3, r2
 80052d0:	61bb      	str	r3, [r7, #24]
 80052d2:	e018      	b.n	8005306 <HAL_ADC_Init+0x2de>
 80052d4:	24000038 	.word	0x24000038
 80052d8:	053e2d63 	.word	0x053e2d63
 80052dc:	40022000 	.word	0x40022000
 80052e0:	40022100 	.word	0x40022100
 80052e4:	58026000 	.word	0x58026000
 80052e8:	40022300 	.word	0x40022300
 80052ec:	58026300 	.word	0x58026300
 80052f0:	fff04007 	.word	0xfff04007
 80052f4:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	7e1b      	ldrb	r3, [r3, #24]
 80052fc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8005302:	4313      	orrs	r3, r2
 8005304:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68da      	ldr	r2, [r3, #12]
 800530c:	4b46      	ldr	r3, [pc, #280]	@ (8005428 <HAL_ADC_Init+0x400>)
 800530e:	4013      	ands	r3, r2
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	6812      	ldr	r2, [r2, #0]
 8005314:	69b9      	ldr	r1, [r7, #24]
 8005316:	430b      	orrs	r3, r1
 8005318:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005320:	2b01      	cmp	r3, #1
 8005322:	d137      	bne.n	8005394 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005328:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a3f      	ldr	r2, [pc, #252]	@ (800542c <HAL_ADC_Init+0x404>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d116      	bne.n	8005362 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	691a      	ldr	r2, [r3, #16]
 800533a:	4b3d      	ldr	r3, [pc, #244]	@ (8005430 <HAL_ADC_Init+0x408>)
 800533c:	4013      	ands	r3, r2
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005346:	4311      	orrs	r1, r2
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800534c:	4311      	orrs	r1, r2
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005352:	430a      	orrs	r2, r1
 8005354:	431a      	orrs	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0201 	orr.w	r2, r2, #1
 800535e:	611a      	str	r2, [r3, #16]
 8005360:	e020      	b.n	80053a4 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	691a      	ldr	r2, [r3, #16]
 8005368:	4b32      	ldr	r3, [pc, #200]	@ (8005434 <HAL_ADC_Init+0x40c>)
 800536a:	4013      	ands	r3, r2
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005370:	3a01      	subs	r2, #1
 8005372:	0411      	lsls	r1, r2, #16
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005378:	4311      	orrs	r1, r2
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800537e:	4311      	orrs	r1, r2
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005384:	430a      	orrs	r2, r1
 8005386:	431a      	orrs	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f042 0201 	orr.w	r2, r2, #1
 8005390:	611a      	str	r2, [r3, #16]
 8005392:	e007      	b.n	80053a4 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	691a      	ldr	r2, [r3, #16]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f022 0201 	bic.w	r2, r2, #1
 80053a2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a1b      	ldr	r2, [pc, #108]	@ (800542c <HAL_ADC_Init+0x404>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d002      	beq.n	80053ca <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f001 fd99 	bl	8006efc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d10c      	bne.n	80053ec <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d8:	f023 010f 	bic.w	r1, r3, #15
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	69db      	ldr	r3, [r3, #28]
 80053e0:	1e5a      	subs	r2, r3, #1
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80053ea:	e007      	b.n	80053fc <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 020f 	bic.w	r2, r2, #15
 80053fa:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005400:	f023 0303 	bic.w	r3, r3, #3
 8005404:	f043 0201 	orr.w	r2, r3, #1
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	661a      	str	r2, [r3, #96]	@ 0x60
 800540c:	e007      	b.n	800541e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005412:	f043 0210 	orr.w	r2, r3, #16
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800541e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3724      	adds	r7, #36	@ 0x24
 8005424:	46bd      	mov	sp, r7
 8005426:	bd90      	pop	{r4, r7, pc}
 8005428:	ffffbffc 	.word	0xffffbffc
 800542c:	58026000 	.word	0x58026000
 8005430:	fc00f81f 	.word	0xfc00f81f
 8005434:	fc00f81e 	.word	0xfc00f81e

08005438 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a60      	ldr	r2, [pc, #384]	@ (80055cc <HAL_ADC_Start_DMA+0x194>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d004      	beq.n	8005458 <HAL_ADC_Start_DMA+0x20>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a5f      	ldr	r2, [pc, #380]	@ (80055d0 <HAL_ADC_Start_DMA+0x198>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d101      	bne.n	800545c <HAL_ADC_Start_DMA+0x24>
 8005458:	4b5e      	ldr	r3, [pc, #376]	@ (80055d4 <HAL_ADC_Start_DMA+0x19c>)
 800545a:	e000      	b.n	800545e <HAL_ADC_Start_DMA+0x26>
 800545c:	4b5e      	ldr	r3, [pc, #376]	@ (80055d8 <HAL_ADC_Start_DMA+0x1a0>)
 800545e:	4618      	mov	r0, r3
 8005460:	f7ff fc66 	bl	8004d30 <LL_ADC_GetMultimode>
 8005464:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f7ff fd2c 	bl	8004ec8 <LL_ADC_REG_IsConversionOngoing>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	f040 80a2 	bne.w	80055bc <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800547e:	2b01      	cmp	r3, #1
 8005480:	d101      	bne.n	8005486 <HAL_ADC_Start_DMA+0x4e>
 8005482:	2302      	movs	r3, #2
 8005484:	e09d      	b.n	80055c2 <HAL_ADC_Start_DMA+0x18a>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d006      	beq.n	80054a2 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	2b05      	cmp	r3, #5
 8005498:	d003      	beq.n	80054a2 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	2b09      	cmp	r3, #9
 800549e:	f040 8086 	bne.w	80055ae <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f001 fbac 	bl	8006c00 <ADC_Enable>
 80054a8:	4603      	mov	r3, r0
 80054aa:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80054ac:	7dfb      	ldrb	r3, [r7, #23]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d178      	bne.n	80055a4 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80054b6:	4b49      	ldr	r3, [pc, #292]	@ (80055dc <HAL_ADC_Start_DMA+0x1a4>)
 80054b8:	4013      	ands	r3, r2
 80054ba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a42      	ldr	r2, [pc, #264]	@ (80055d0 <HAL_ADC_Start_DMA+0x198>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d002      	beq.n	80054d2 <HAL_ADC_Start_DMA+0x9a>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	e000      	b.n	80054d4 <HAL_ADC_Start_DMA+0x9c>
 80054d2:	4b3e      	ldr	r3, [pc, #248]	@ (80055cc <HAL_ADC_Start_DMA+0x194>)
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	6812      	ldr	r2, [r2, #0]
 80054d8:	4293      	cmp	r3, r2
 80054da:	d002      	beq.n	80054e2 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d105      	bne.n	80054ee <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054e6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d006      	beq.n	8005508 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054fe:	f023 0206 	bic.w	r2, r3, #6
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	665a      	str	r2, [r3, #100]	@ 0x64
 8005506:	e002      	b.n	800550e <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005512:	4a33      	ldr	r2, [pc, #204]	@ (80055e0 <HAL_ADC_Start_DMA+0x1a8>)
 8005514:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800551a:	4a32      	ldr	r2, [pc, #200]	@ (80055e4 <HAL_ADC_Start_DMA+0x1ac>)
 800551c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005522:	4a31      	ldr	r2, [pc, #196]	@ (80055e8 <HAL_ADC_Start_DMA+0x1b0>)
 8005524:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	221c      	movs	r2, #28
 800552c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f042 0210 	orr.w	r2, r2, #16
 8005544:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a28      	ldr	r2, [pc, #160]	@ (80055ec <HAL_ADC_Start_DMA+0x1b4>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d10f      	bne.n	8005570 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800555a:	005b      	lsls	r3, r3, #1
 800555c:	4619      	mov	r1, r3
 800555e:	4610      	mov	r0, r2
 8005560:	f7ff fac2 	bl	8004ae8 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4618      	mov	r0, r3
 800556a:	f7ff faad 	bl	8004ac8 <LL_ADC_EnableDMAReq>
 800556e:	e007      	b.n	8005580 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005578:	4619      	mov	r1, r3
 800557a:	4610      	mov	r0, r2
 800557c:	f7ff fa91 	bl	8004aa2 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	3340      	adds	r3, #64	@ 0x40
 800558a:	4619      	mov	r1, r3
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f002 fdcc 	bl	800812c <HAL_DMA_Start_IT>
 8005594:	4603      	mov	r3, r0
 8005596:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4618      	mov	r0, r3
 800559e:	f7ff fc7f 	bl	8004ea0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80055a2:	e00d      	b.n	80055c0 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 80055ac:	e008      	b.n	80055c0 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80055ba:	e001      	b.n	80055c0 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80055bc:	2302      	movs	r3, #2
 80055be:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80055c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3718      	adds	r7, #24
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	40022000 	.word	0x40022000
 80055d0:	40022100 	.word	0x40022100
 80055d4:	40022300 	.word	0x40022300
 80055d8:	58026300 	.word	0x58026300
 80055dc:	fffff0fe 	.word	0xfffff0fe
 80055e0:	08006dd3 	.word	0x08006dd3
 80055e4:	08006eab 	.word	0x08006eab
 80055e8:	08006ec7 	.word	0x08006ec7
 80055ec:	58026000 	.word	0x58026000

080055f0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08a      	sub	sp, #40	@ 0x28
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80055f8:	2300      	movs	r3, #0
 80055fa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a87      	ldr	r2, [pc, #540]	@ (8005830 <HAL_ADC_IRQHandler+0x240>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d004      	beq.n	8005620 <HAL_ADC_IRQHandler+0x30>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a86      	ldr	r2, [pc, #536]	@ (8005834 <HAL_ADC_IRQHandler+0x244>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d101      	bne.n	8005624 <HAL_ADC_IRQHandler+0x34>
 8005620:	4b85      	ldr	r3, [pc, #532]	@ (8005838 <HAL_ADC_IRQHandler+0x248>)
 8005622:	e000      	b.n	8005626 <HAL_ADC_IRQHandler+0x36>
 8005624:	4b85      	ldr	r3, [pc, #532]	@ (800583c <HAL_ADC_IRQHandler+0x24c>)
 8005626:	4618      	mov	r0, r3
 8005628:	f7ff fb82 	bl	8004d30 <LL_ADC_GetMultimode>
 800562c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	f003 0302 	and.w	r3, r3, #2
 8005634:	2b00      	cmp	r3, #0
 8005636:	d017      	beq.n	8005668 <HAL_ADC_IRQHandler+0x78>
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d012      	beq.n	8005668 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005646:	f003 0310 	and.w	r3, r3, #16
 800564a:	2b00      	cmp	r3, #0
 800564c:	d105      	bne.n	800565a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005652:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f001 fee8 	bl	8007430 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2202      	movs	r2, #2
 8005666:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	f003 0304 	and.w	r3, r3, #4
 800566e:	2b00      	cmp	r3, #0
 8005670:	d004      	beq.n	800567c <HAL_ADC_IRQHandler+0x8c>
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	f003 0304 	and.w	r3, r3, #4
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10a      	bne.n	8005692 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005682:	2b00      	cmp	r3, #0
 8005684:	f000 8083 	beq.w	800578e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	f003 0308 	and.w	r3, r3, #8
 800568e:	2b00      	cmp	r3, #0
 8005690:	d07d      	beq.n	800578e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005696:	f003 0310 	and.w	r3, r3, #16
 800569a:	2b00      	cmp	r3, #0
 800569c:	d105      	bne.n	80056aa <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056a2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7ff f9b8 	bl	8004a24 <LL_ADC_REG_IsTriggerSourceSWStart>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d062      	beq.n	8005780 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a5d      	ldr	r2, [pc, #372]	@ (8005834 <HAL_ADC_IRQHandler+0x244>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d002      	beq.n	80056ca <HAL_ADC_IRQHandler+0xda>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	e000      	b.n	80056cc <HAL_ADC_IRQHandler+0xdc>
 80056ca:	4b59      	ldr	r3, [pc, #356]	@ (8005830 <HAL_ADC_IRQHandler+0x240>)
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	6812      	ldr	r2, [r2, #0]
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d008      	beq.n	80056e6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d005      	beq.n	80056e6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	2b05      	cmp	r3, #5
 80056de:	d002      	beq.n	80056e6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2b09      	cmp	r3, #9
 80056e4:	d104      	bne.n	80056f0 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	623b      	str	r3, [r7, #32]
 80056ee:	e00c      	b.n	800570a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a4f      	ldr	r2, [pc, #316]	@ (8005834 <HAL_ADC_IRQHandler+0x244>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d002      	beq.n	8005700 <HAL_ADC_IRQHandler+0x110>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	e000      	b.n	8005702 <HAL_ADC_IRQHandler+0x112>
 8005700:	4b4b      	ldr	r3, [pc, #300]	@ (8005830 <HAL_ADC_IRQHandler+0x240>)
 8005702:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d135      	bne.n	8005780 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0308 	and.w	r3, r3, #8
 800571e:	2b08      	cmp	r3, #8
 8005720:	d12e      	bne.n	8005780 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4618      	mov	r0, r3
 8005728:	f7ff fbce 	bl	8004ec8 <LL_ADC_REG_IsConversionOngoing>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d11a      	bne.n	8005768 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 020c 	bic.w	r2, r2, #12
 8005740:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005746:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005752:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d112      	bne.n	8005780 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800575e:	f043 0201 	orr.w	r2, r3, #1
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	661a      	str	r2, [r3, #96]	@ 0x60
 8005766:	e00b      	b.n	8005780 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800576c:	f043 0210 	orr.w	r2, r3, #16
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005778:	f043 0201 	orr.w	r2, r3, #1
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7fc fbaf 	bl	8001ee4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	220c      	movs	r2, #12
 800578c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	f003 0320 	and.w	r3, r3, #32
 8005794:	2b00      	cmp	r3, #0
 8005796:	d004      	beq.n	80057a2 <HAL_ADC_IRQHandler+0x1b2>
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	f003 0320 	and.w	r3, r3, #32
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10b      	bne.n	80057ba <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 80a0 	beq.w	80058ee <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 809a 	beq.w	80058ee <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057be:	f003 0310 	and.w	r3, r3, #16
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d105      	bne.n	80057d2 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057ca:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7ff f9a0 	bl	8004b1c <LL_ADC_INJ_IsTriggerSourceSWStart>
 80057dc:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7ff f91e 	bl	8004a24 <LL_ADC_REG_IsTriggerSourceSWStart>
 80057e8:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a11      	ldr	r2, [pc, #68]	@ (8005834 <HAL_ADC_IRQHandler+0x244>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d002      	beq.n	80057fa <HAL_ADC_IRQHandler+0x20a>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	e000      	b.n	80057fc <HAL_ADC_IRQHandler+0x20c>
 80057fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005830 <HAL_ADC_IRQHandler+0x240>)
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	6812      	ldr	r2, [r2, #0]
 8005800:	4293      	cmp	r3, r2
 8005802:	d008      	beq.n	8005816 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d005      	beq.n	8005816 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	2b06      	cmp	r3, #6
 800580e:	d002      	beq.n	8005816 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	2b07      	cmp	r3, #7
 8005814:	d104      	bne.n	8005820 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	623b      	str	r3, [r7, #32]
 800581e:	e014      	b.n	800584a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a03      	ldr	r2, [pc, #12]	@ (8005834 <HAL_ADC_IRQHandler+0x244>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d00a      	beq.n	8005840 <HAL_ADC_IRQHandler+0x250>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	e008      	b.n	8005842 <HAL_ADC_IRQHandler+0x252>
 8005830:	40022000 	.word	0x40022000
 8005834:	40022100 	.word	0x40022100
 8005838:	40022300 	.word	0x40022300
 800583c:	58026300 	.word	0x58026300
 8005840:	4b84      	ldr	r3, [pc, #528]	@ (8005a54 <HAL_ADC_IRQHandler+0x464>)
 8005842:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d047      	beq.n	80058e0 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d007      	beq.n	800586a <HAL_ADC_IRQHandler+0x27a>
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d03f      	beq.n	80058e0 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005860:	6a3b      	ldr	r3, [r7, #32]
 8005862:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005866:	2b00      	cmp	r3, #0
 8005868:	d13a      	bne.n	80058e0 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005874:	2b40      	cmp	r3, #64	@ 0x40
 8005876:	d133      	bne.n	80058e0 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005878:	6a3b      	ldr	r3, [r7, #32]
 800587a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d12e      	bne.n	80058e0 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4618      	mov	r0, r3
 8005888:	f7ff fb31 	bl	8004eee <LL_ADC_INJ_IsConversionOngoing>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d11a      	bne.n	80058c8 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80058a0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d112      	bne.n	80058e0 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058be:	f043 0201 	orr.w	r2, r3, #1
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	661a      	str	r2, [r3, #96]	@ 0x60
 80058c6:	e00b      	b.n	80058e0 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058cc:	f043 0210 	orr.w	r2, r3, #16
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058d8:	f043 0201 	orr.w	r2, r3, #1
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f001 fd7d 	bl	80073e0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2260      	movs	r2, #96	@ 0x60
 80058ec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d011      	beq.n	800591c <HAL_ADC_IRQHandler+0x32c>
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00c      	beq.n	800591c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005906:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f8b2 	bl	8005a78 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2280      	movs	r2, #128	@ 0x80
 800591a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005922:	2b00      	cmp	r3, #0
 8005924:	d012      	beq.n	800594c <HAL_ADC_IRQHandler+0x35c>
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00d      	beq.n	800594c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005934:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f001 fd63 	bl	8007408 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800594a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005952:	2b00      	cmp	r3, #0
 8005954:	d012      	beq.n	800597c <HAL_ADC_IRQHandler+0x38c>
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00d      	beq.n	800597c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005964:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f001 fd55 	bl	800741c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800597a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	f003 0310 	and.w	r3, r3, #16
 8005982:	2b00      	cmp	r3, #0
 8005984:	d043      	beq.n	8005a0e <HAL_ADC_IRQHandler+0x41e>
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	f003 0310 	and.w	r3, r3, #16
 800598c:	2b00      	cmp	r3, #0
 800598e:	d03e      	beq.n	8005a0e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005994:	2b00      	cmp	r3, #0
 8005996:	d102      	bne.n	800599e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8005998:	2301      	movs	r3, #1
 800599a:	627b      	str	r3, [r7, #36]	@ 0x24
 800599c:	e021      	b.n	80059e2 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d015      	beq.n	80059d0 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a2a      	ldr	r2, [pc, #168]	@ (8005a54 <HAL_ADC_IRQHandler+0x464>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d004      	beq.n	80059b8 <HAL_ADC_IRQHandler+0x3c8>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a29      	ldr	r2, [pc, #164]	@ (8005a58 <HAL_ADC_IRQHandler+0x468>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d101      	bne.n	80059bc <HAL_ADC_IRQHandler+0x3cc>
 80059b8:	4b28      	ldr	r3, [pc, #160]	@ (8005a5c <HAL_ADC_IRQHandler+0x46c>)
 80059ba:	e000      	b.n	80059be <HAL_ADC_IRQHandler+0x3ce>
 80059bc:	4b28      	ldr	r3, [pc, #160]	@ (8005a60 <HAL_ADC_IRQHandler+0x470>)
 80059be:	4618      	mov	r0, r3
 80059c0:	f7ff f9c4 	bl	8004d4c <LL_ADC_GetMultiDMATransfer>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00b      	beq.n	80059e2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80059ca:	2301      	movs	r3, #1
 80059cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80059ce:	e008      	b.n	80059e2 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f003 0303 	and.w	r3, r3, #3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80059de:	2301      	movs	r3, #1
 80059e0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80059e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d10e      	bne.n	8005a06 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059ec:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059f8:	f043 0202 	orr.w	r2, r3, #2
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f7fc fa43 	bl	8001e8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2210      	movs	r2, #16
 8005a0c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d018      	beq.n	8005a4a <HAL_ADC_IRQHandler+0x45a>
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d013      	beq.n	8005a4a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a26:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a32:	f043 0208 	orr.w	r2, r3, #8
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005a42:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f001 fcd5 	bl	80073f4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005a4a:	bf00      	nop
 8005a4c:	3728      	adds	r7, #40	@ 0x28
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	40022000 	.word	0x40022000
 8005a58:	40022100 	.word	0x40022100
 8005a5c:	40022300 	.word	0x40022300
 8005a60:	58026300 	.word	0x58026300

08005a64 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005a8c:	b590      	push	{r4, r7, lr}
 8005a8e:	b0b9      	sub	sp, #228	@ 0xe4
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a96:	2300      	movs	r3, #0
 8005a98:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005aa6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	4aa9      	ldr	r2, [pc, #676]	@ (8005d54 <HAL_ADC_ConfigChannel+0x2c8>)
 8005aae:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d102      	bne.n	8005ac0 <HAL_ADC_ConfigChannel+0x34>
 8005aba:	2302      	movs	r3, #2
 8005abc:	f000 bcfa 	b.w	80064b4 <HAL_ADC_ConfigChannel+0xa28>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7ff f9fb 	bl	8004ec8 <LL_ADC_REG_IsConversionOngoing>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f040 84de 	bne.w	8006496 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a9e      	ldr	r2, [pc, #632]	@ (8005d58 <HAL_ADC_ConfigChannel+0x2cc>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d033      	beq.n	8005b4c <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d108      	bne.n	8005b02 <HAL_ADC_ConfigChannel+0x76>
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	0e9b      	lsrs	r3, r3, #26
 8005af6:	f003 031f 	and.w	r3, r3, #31
 8005afa:	2201      	movs	r2, #1
 8005afc:	fa02 f303 	lsl.w	r3, r2, r3
 8005b00:	e01d      	b.n	8005b3e <HAL_ADC_ConfigChannel+0xb2>
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005b0e:	fa93 f3a3 	rbit	r3, r3
 8005b12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005b16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005b1a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005b1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8005b26:	2320      	movs	r3, #32
 8005b28:	e004      	b.n	8005b34 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8005b2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005b2e:	fab3 f383 	clz	r3, r3
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	f003 031f 	and.w	r3, r3, #31
 8005b38:	2201      	movs	r2, #1
 8005b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6812      	ldr	r2, [r2, #0]
 8005b42:	69d1      	ldr	r1, [r2, #28]
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	6812      	ldr	r2, [r2, #0]
 8005b48:	430b      	orrs	r3, r1
 8005b4a:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6818      	ldr	r0, [r3, #0]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	6859      	ldr	r1, [r3, #4]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	461a      	mov	r2, r3
 8005b5a:	f7fe ff76 	bl	8004a4a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7ff f9b0 	bl	8004ec8 <LL_ADC_REG_IsConversionOngoing>
 8005b68:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7ff f9bc 	bl	8004eee <LL_ADC_INJ_IsConversionOngoing>
 8005b76:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005b7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f040 8270 	bne.w	8006064 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005b84:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f040 826b 	bne.w	8006064 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6818      	ldr	r0, [r3, #0]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	6819      	ldr	r1, [r3, #0]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	f7fe ffd1 	bl	8004b42 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a6c      	ldr	r2, [pc, #432]	@ (8005d58 <HAL_ADC_ConfigChannel+0x2cc>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d10d      	bne.n	8005bc6 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	695a      	ldr	r2, [r3, #20]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	08db      	lsrs	r3, r3, #3
 8005bb6:	f003 0303 	and.w	r3, r3, #3
 8005bba:	005b      	lsls	r3, r3, #1
 8005bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005bc4:	e032      	b.n	8005c2c <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005bc6:	4b65      	ldr	r3, [pc, #404]	@ (8005d5c <HAL_ADC_ConfigChannel+0x2d0>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005bce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bd2:	d10b      	bne.n	8005bec <HAL_ADC_ConfigChannel+0x160>
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	695a      	ldr	r2, [r3, #20]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	089b      	lsrs	r3, r3, #2
 8005be0:	f003 0307 	and.w	r3, r3, #7
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bea:	e01d      	b.n	8005c28 <HAL_ADC_ConfigChannel+0x19c>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	f003 0310 	and.w	r3, r3, #16
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10b      	bne.n	8005c12 <HAL_ADC_ConfigChannel+0x186>
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	695a      	ldr	r2, [r3, #20]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	089b      	lsrs	r3, r3, #2
 8005c06:	f003 0307 	and.w	r3, r3, #7
 8005c0a:	005b      	lsls	r3, r3, #1
 8005c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c10:	e00a      	b.n	8005c28 <HAL_ADC_ConfigChannel+0x19c>
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	695a      	ldr	r2, [r3, #20]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	089b      	lsrs	r3, r3, #2
 8005c1e:	f003 0304 	and.w	r3, r3, #4
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	fa02 f303 	lsl.w	r3, r2, r3
 8005c28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	2b04      	cmp	r3, #4
 8005c32:	d048      	beq.n	8005cc6 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6818      	ldr	r0, [r3, #0]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	6919      	ldr	r1, [r3, #16]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c44:	f7fe fdfc 	bl	8004840 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a42      	ldr	r2, [pc, #264]	@ (8005d58 <HAL_ADC_ConfigChannel+0x2cc>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d119      	bne.n	8005c86 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6818      	ldr	r0, [r3, #0]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	6919      	ldr	r1, [r3, #16]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	f7fe fe94 	bl	800498c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6818      	ldr	r0, [r3, #0]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	6919      	ldr	r1, [r3, #16]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d102      	bne.n	8005c7c <HAL_ADC_ConfigChannel+0x1f0>
 8005c76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c7a:	e000      	b.n	8005c7e <HAL_ADC_ConfigChannel+0x1f2>
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	461a      	mov	r2, r3
 8005c80:	f7fe fe62 	bl	8004948 <LL_ADC_SetOffsetSaturation>
 8005c84:	e1ee      	b.n	8006064 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6818      	ldr	r0, [r3, #0]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	6919      	ldr	r1, [r3, #16]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d102      	bne.n	8005c9e <HAL_ADC_ConfigChannel+0x212>
 8005c98:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005c9c:	e000      	b.n	8005ca0 <HAL_ADC_ConfigChannel+0x214>
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	f7fe fe2f 	bl	8004904 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6818      	ldr	r0, [r3, #0]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	6919      	ldr	r1, [r3, #16]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	7e1b      	ldrb	r3, [r3, #24]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d102      	bne.n	8005cbc <HAL_ADC_ConfigChannel+0x230>
 8005cb6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005cba:	e000      	b.n	8005cbe <HAL_ADC_ConfigChannel+0x232>
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	f7fe fe06 	bl	80048d0 <LL_ADC_SetDataRightShift>
 8005cc4:	e1ce      	b.n	8006064 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a23      	ldr	r2, [pc, #140]	@ (8005d58 <HAL_ADC_ConfigChannel+0x2cc>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	f040 8181 	bne.w	8005fd4 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7fe fde3 	bl	80048a4 <LL_ADC_GetOffsetChannel>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10a      	bne.n	8005cfe <HAL_ADC_ConfigChannel+0x272>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2100      	movs	r1, #0
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7fe fdd8 	bl	80048a4 <LL_ADC_GetOffsetChannel>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	0e9b      	lsrs	r3, r3, #26
 8005cf8:	f003 021f 	and.w	r2, r3, #31
 8005cfc:	e01e      	b.n	8005d3c <HAL_ADC_ConfigChannel+0x2b0>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2100      	movs	r1, #0
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7fe fdcd 	bl	80048a4 <LL_ADC_GetOffsetChannel>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005d14:	fa93 f3a3 	rbit	r3, r3
 8005d18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8005d1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005d20:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8005d24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8005d2c:	2320      	movs	r3, #32
 8005d2e:	e004      	b.n	8005d3a <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8005d30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005d34:	fab3 f383 	clz	r3, r3
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10b      	bne.n	8005d60 <HAL_ADC_ConfigChannel+0x2d4>
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	0e9b      	lsrs	r3, r3, #26
 8005d4e:	f003 031f 	and.w	r3, r3, #31
 8005d52:	e01e      	b.n	8005d92 <HAL_ADC_ConfigChannel+0x306>
 8005d54:	47ff0000 	.word	0x47ff0000
 8005d58:	58026000 	.word	0x58026000
 8005d5c:	5c001000 	.word	0x5c001000
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d6c:	fa93 f3a3 	rbit	r3, r3
 8005d70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8005d74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8005d7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d101      	bne.n	8005d88 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8005d84:	2320      	movs	r3, #32
 8005d86:	e004      	b.n	8005d92 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8005d88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005d8c:	fab3 f383 	clz	r3, r3
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d106      	bne.n	8005da4 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fe fe16 	bl	80049d0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2101      	movs	r1, #1
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7fe fd7a 	bl	80048a4 <LL_ADC_GetOffsetChannel>
 8005db0:	4603      	mov	r3, r0
 8005db2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10a      	bne.n	8005dd0 <HAL_ADC_ConfigChannel+0x344>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2101      	movs	r1, #1
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7fe fd6f 	bl	80048a4 <LL_ADC_GetOffsetChannel>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	0e9b      	lsrs	r3, r3, #26
 8005dca:	f003 021f 	and.w	r2, r3, #31
 8005dce:	e01e      	b.n	8005e0e <HAL_ADC_ConfigChannel+0x382>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2101      	movs	r1, #1
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7fe fd64 	bl	80048a4 <LL_ADC_GetOffsetChannel>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005de2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005de6:	fa93 f3a3 	rbit	r3, r3
 8005dea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8005dee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005df2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8005df6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d101      	bne.n	8005e02 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8005dfe:	2320      	movs	r3, #32
 8005e00:	e004      	b.n	8005e0c <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8005e02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005e06:	fab3 f383 	clz	r3, r3
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d105      	bne.n	8005e26 <HAL_ADC_ConfigChannel+0x39a>
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	0e9b      	lsrs	r3, r3, #26
 8005e20:	f003 031f 	and.w	r3, r3, #31
 8005e24:	e018      	b.n	8005e58 <HAL_ADC_ConfigChannel+0x3cc>
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005e32:	fa93 f3a3 	rbit	r3, r3
 8005e36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8005e3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005e3e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8005e42:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8005e4a:	2320      	movs	r3, #32
 8005e4c:	e004      	b.n	8005e58 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8005e4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e52:	fab3 f383 	clz	r3, r3
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d106      	bne.n	8005e6a <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2200      	movs	r2, #0
 8005e62:	2101      	movs	r1, #1
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7fe fdb3 	bl	80049d0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2102      	movs	r1, #2
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7fe fd17 	bl	80048a4 <LL_ADC_GetOffsetChannel>
 8005e76:	4603      	mov	r3, r0
 8005e78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10a      	bne.n	8005e96 <HAL_ADC_ConfigChannel+0x40a>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2102      	movs	r1, #2
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7fe fd0c 	bl	80048a4 <LL_ADC_GetOffsetChannel>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	0e9b      	lsrs	r3, r3, #26
 8005e90:	f003 021f 	and.w	r2, r3, #31
 8005e94:	e01e      	b.n	8005ed4 <HAL_ADC_ConfigChannel+0x448>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2102      	movs	r1, #2
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7fe fd01 	bl	80048a4 <LL_ADC_GetOffsetChannel>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ea8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005eac:	fa93 f3a3 	rbit	r3, r3
 8005eb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8005eb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005eb8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8005ebc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d101      	bne.n	8005ec8 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8005ec4:	2320      	movs	r3, #32
 8005ec6:	e004      	b.n	8005ed2 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8005ec8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ecc:	fab3 f383 	clz	r3, r3
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d105      	bne.n	8005eec <HAL_ADC_ConfigChannel+0x460>
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	0e9b      	lsrs	r3, r3, #26
 8005ee6:	f003 031f 	and.w	r3, r3, #31
 8005eea:	e014      	b.n	8005f16 <HAL_ADC_ConfigChannel+0x48a>
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ef2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005ef4:	fa93 f3a3 	rbit	r3, r3
 8005ef8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8005efa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005efc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8005f00:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d101      	bne.n	8005f0c <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8005f08:	2320      	movs	r3, #32
 8005f0a:	e004      	b.n	8005f16 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8005f0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005f10:	fab3 f383 	clz	r3, r3
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d106      	bne.n	8005f28 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	2102      	movs	r1, #2
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fe fd54 	bl	80049d0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2103      	movs	r1, #3
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fe fcb8 	bl	80048a4 <LL_ADC_GetOffsetChannel>
 8005f34:	4603      	mov	r3, r0
 8005f36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10a      	bne.n	8005f54 <HAL_ADC_ConfigChannel+0x4c8>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2103      	movs	r1, #3
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7fe fcad 	bl	80048a4 <LL_ADC_GetOffsetChannel>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	0e9b      	lsrs	r3, r3, #26
 8005f4e:	f003 021f 	and.w	r2, r3, #31
 8005f52:	e017      	b.n	8005f84 <HAL_ADC_ConfigChannel+0x4f8>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2103      	movs	r1, #3
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fe fca2 	bl	80048a4 <LL_ADC_GetOffsetChannel>
 8005f60:	4603      	mov	r3, r0
 8005f62:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f66:	fa93 f3a3 	rbit	r3, r3
 8005f6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005f6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f6e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8005f70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8005f76:	2320      	movs	r3, #32
 8005f78:	e003      	b.n	8005f82 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8005f7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f7c:	fab3 f383 	clz	r3, r3
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	461a      	mov	r2, r3
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d105      	bne.n	8005f9c <HAL_ADC_ConfigChannel+0x510>
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	0e9b      	lsrs	r3, r3, #26
 8005f96:	f003 031f 	and.w	r3, r3, #31
 8005f9a:	e011      	b.n	8005fc0 <HAL_ADC_ConfigChannel+0x534>
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fa2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fa4:	fa93 f3a3 	rbit	r3, r3
 8005fa8:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8005faa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005fac:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8005fae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d101      	bne.n	8005fb8 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8005fb4:	2320      	movs	r3, #32
 8005fb6:	e003      	b.n	8005fc0 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8005fb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005fba:	fab3 f383 	clz	r3, r3
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d14f      	bne.n	8006064 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	2103      	movs	r1, #3
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7fe fcff 	bl	80049d0 <LL_ADC_SetOffsetState>
 8005fd2:	e047      	b.n	8006064 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fda:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	069b      	lsls	r3, r3, #26
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d107      	bne.n	8005ff8 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005ff6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ffe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	069b      	lsls	r3, r3, #26
 8006008:	429a      	cmp	r2, r3
 800600a:	d107      	bne.n	800601c <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800601a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006022:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	069b      	lsls	r3, r3, #26
 800602c:	429a      	cmp	r2, r3
 800602e:	d107      	bne.n	8006040 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800603e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006046:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	069b      	lsls	r3, r3, #26
 8006050:	429a      	cmp	r2, r3
 8006052:	d107      	bne.n	8006064 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8006062:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4618      	mov	r0, r3
 800606a:	f7fe fef3 	bl	8004e54 <LL_ADC_IsEnabled>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	f040 8219 	bne.w	80064a8 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6818      	ldr	r0, [r3, #0]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	6819      	ldr	r1, [r3, #0]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	461a      	mov	r2, r3
 8006084:	f7fe fd88 	bl	8004b98 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	4aa1      	ldr	r2, [pc, #644]	@ (8006314 <HAL_ADC_ConfigChannel+0x888>)
 800608e:	4293      	cmp	r3, r2
 8006090:	f040 812e 	bne.w	80062f0 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d10b      	bne.n	80060bc <HAL_ADC_ConfigChannel+0x630>
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	0e9b      	lsrs	r3, r3, #26
 80060aa:	3301      	adds	r3, #1
 80060ac:	f003 031f 	and.w	r3, r3, #31
 80060b0:	2b09      	cmp	r3, #9
 80060b2:	bf94      	ite	ls
 80060b4:	2301      	movls	r3, #1
 80060b6:	2300      	movhi	r3, #0
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	e019      	b.n	80060f0 <HAL_ADC_ConfigChannel+0x664>
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060c4:	fa93 f3a3 	rbit	r3, r3
 80060c8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80060ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80060ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d101      	bne.n	80060d8 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80060d4:	2320      	movs	r3, #32
 80060d6:	e003      	b.n	80060e0 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80060d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060da:	fab3 f383 	clz	r3, r3
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	3301      	adds	r3, #1
 80060e2:	f003 031f 	and.w	r3, r3, #31
 80060e6:	2b09      	cmp	r3, #9
 80060e8:	bf94      	ite	ls
 80060ea:	2301      	movls	r3, #1
 80060ec:	2300      	movhi	r3, #0
 80060ee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d079      	beq.n	80061e8 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d107      	bne.n	8006110 <HAL_ADC_ConfigChannel+0x684>
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	0e9b      	lsrs	r3, r3, #26
 8006106:	3301      	adds	r3, #1
 8006108:	069b      	lsls	r3, r3, #26
 800610a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800610e:	e015      	b.n	800613c <HAL_ADC_ConfigChannel+0x6b0>
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006116:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006118:	fa93 f3a3 	rbit	r3, r3
 800611c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800611e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006120:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8006122:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8006128:	2320      	movs	r3, #32
 800612a:	e003      	b.n	8006134 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 800612c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800612e:	fab3 f383 	clz	r3, r3
 8006132:	b2db      	uxtb	r3, r3
 8006134:	3301      	adds	r3, #1
 8006136:	069b      	lsls	r3, r3, #26
 8006138:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006144:	2b00      	cmp	r3, #0
 8006146:	d109      	bne.n	800615c <HAL_ADC_ConfigChannel+0x6d0>
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	0e9b      	lsrs	r3, r3, #26
 800614e:	3301      	adds	r3, #1
 8006150:	f003 031f 	and.w	r3, r3, #31
 8006154:	2101      	movs	r1, #1
 8006156:	fa01 f303 	lsl.w	r3, r1, r3
 800615a:	e017      	b.n	800618c <HAL_ADC_ConfigChannel+0x700>
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006162:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006164:	fa93 f3a3 	rbit	r3, r3
 8006168:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800616a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800616c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800616e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006170:	2b00      	cmp	r3, #0
 8006172:	d101      	bne.n	8006178 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8006174:	2320      	movs	r3, #32
 8006176:	e003      	b.n	8006180 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8006178:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800617a:	fab3 f383 	clz	r3, r3
 800617e:	b2db      	uxtb	r3, r3
 8006180:	3301      	adds	r3, #1
 8006182:	f003 031f 	and.w	r3, r3, #31
 8006186:	2101      	movs	r1, #1
 8006188:	fa01 f303 	lsl.w	r3, r1, r3
 800618c:	ea42 0103 	orr.w	r1, r2, r3
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10a      	bne.n	80061b2 <HAL_ADC_ConfigChannel+0x726>
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	0e9b      	lsrs	r3, r3, #26
 80061a2:	3301      	adds	r3, #1
 80061a4:	f003 021f 	and.w	r2, r3, #31
 80061a8:	4613      	mov	r3, r2
 80061aa:	005b      	lsls	r3, r3, #1
 80061ac:	4413      	add	r3, r2
 80061ae:	051b      	lsls	r3, r3, #20
 80061b0:	e018      	b.n	80061e4 <HAL_ADC_ConfigChannel+0x758>
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061ba:	fa93 f3a3 	rbit	r3, r3
 80061be:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80061c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80061c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d101      	bne.n	80061ce <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 80061ca:	2320      	movs	r3, #32
 80061cc:	e003      	b.n	80061d6 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 80061ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d0:	fab3 f383 	clz	r3, r3
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	3301      	adds	r3, #1
 80061d8:	f003 021f 	and.w	r2, r3, #31
 80061dc:	4613      	mov	r3, r2
 80061de:	005b      	lsls	r3, r3, #1
 80061e0:	4413      	add	r3, r2
 80061e2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80061e4:	430b      	orrs	r3, r1
 80061e6:	e07e      	b.n	80062e6 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d107      	bne.n	8006204 <HAL_ADC_ConfigChannel+0x778>
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	0e9b      	lsrs	r3, r3, #26
 80061fa:	3301      	adds	r3, #1
 80061fc:	069b      	lsls	r3, r3, #26
 80061fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006202:	e015      	b.n	8006230 <HAL_ADC_ConfigChannel+0x7a4>
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800620a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800620c:	fa93 f3a3 	rbit	r3, r3
 8006210:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8006212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006214:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8006216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006218:	2b00      	cmp	r3, #0
 800621a:	d101      	bne.n	8006220 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 800621c:	2320      	movs	r3, #32
 800621e:	e003      	b.n	8006228 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8006220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006222:	fab3 f383 	clz	r3, r3
 8006226:	b2db      	uxtb	r3, r3
 8006228:	3301      	adds	r3, #1
 800622a:	069b      	lsls	r3, r3, #26
 800622c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006238:	2b00      	cmp	r3, #0
 800623a:	d109      	bne.n	8006250 <HAL_ADC_ConfigChannel+0x7c4>
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	0e9b      	lsrs	r3, r3, #26
 8006242:	3301      	adds	r3, #1
 8006244:	f003 031f 	and.w	r3, r3, #31
 8006248:	2101      	movs	r1, #1
 800624a:	fa01 f303 	lsl.w	r3, r1, r3
 800624e:	e017      	b.n	8006280 <HAL_ADC_ConfigChannel+0x7f4>
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	fa93 f3a3 	rbit	r3, r3
 800625c:	61bb      	str	r3, [r7, #24]
  return result;
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006262:	6a3b      	ldr	r3, [r7, #32]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d101      	bne.n	800626c <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8006268:	2320      	movs	r3, #32
 800626a:	e003      	b.n	8006274 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 800626c:	6a3b      	ldr	r3, [r7, #32]
 800626e:	fab3 f383 	clz	r3, r3
 8006272:	b2db      	uxtb	r3, r3
 8006274:	3301      	adds	r3, #1
 8006276:	f003 031f 	and.w	r3, r3, #31
 800627a:	2101      	movs	r1, #1
 800627c:	fa01 f303 	lsl.w	r3, r1, r3
 8006280:	ea42 0103 	orr.w	r1, r2, r3
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800628c:	2b00      	cmp	r3, #0
 800628e:	d10d      	bne.n	80062ac <HAL_ADC_ConfigChannel+0x820>
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	0e9b      	lsrs	r3, r3, #26
 8006296:	3301      	adds	r3, #1
 8006298:	f003 021f 	and.w	r2, r3, #31
 800629c:	4613      	mov	r3, r2
 800629e:	005b      	lsls	r3, r3, #1
 80062a0:	4413      	add	r3, r2
 80062a2:	3b1e      	subs	r3, #30
 80062a4:	051b      	lsls	r3, r3, #20
 80062a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80062aa:	e01b      	b.n	80062e4 <HAL_ADC_ConfigChannel+0x858>
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	fa93 f3a3 	rbit	r3, r3
 80062b8:	60fb      	str	r3, [r7, #12]
  return result;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 80062c4:	2320      	movs	r3, #32
 80062c6:	e003      	b.n	80062d0 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	fab3 f383 	clz	r3, r3
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	3301      	adds	r3, #1
 80062d2:	f003 021f 	and.w	r2, r3, #31
 80062d6:	4613      	mov	r3, r2
 80062d8:	005b      	lsls	r3, r3, #1
 80062da:	4413      	add	r3, r2
 80062dc:	3b1e      	subs	r3, #30
 80062de:	051b      	lsls	r3, r3, #20
 80062e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80062e4:	430b      	orrs	r3, r1
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	6892      	ldr	r2, [r2, #8]
 80062ea:	4619      	mov	r1, r3
 80062ec:	f7fe fc29 	bl	8004b42 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f280 80d7 	bge.w	80064a8 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a06      	ldr	r2, [pc, #24]	@ (8006318 <HAL_ADC_ConfigChannel+0x88c>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d004      	beq.n	800630e <HAL_ADC_ConfigChannel+0x882>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a04      	ldr	r2, [pc, #16]	@ (800631c <HAL_ADC_ConfigChannel+0x890>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d10a      	bne.n	8006324 <HAL_ADC_ConfigChannel+0x898>
 800630e:	4b04      	ldr	r3, [pc, #16]	@ (8006320 <HAL_ADC_ConfigChannel+0x894>)
 8006310:	e009      	b.n	8006326 <HAL_ADC_ConfigChannel+0x89a>
 8006312:	bf00      	nop
 8006314:	47ff0000 	.word	0x47ff0000
 8006318:	40022000 	.word	0x40022000
 800631c:	40022100 	.word	0x40022100
 8006320:	40022300 	.word	0x40022300
 8006324:	4b65      	ldr	r3, [pc, #404]	@ (80064bc <HAL_ADC_ConfigChannel+0xa30>)
 8006326:	4618      	mov	r0, r3
 8006328:	f7fe fa7c 	bl	8004824 <LL_ADC_GetCommonPathInternalCh>
 800632c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a62      	ldr	r2, [pc, #392]	@ (80064c0 <HAL_ADC_ConfigChannel+0xa34>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d004      	beq.n	8006344 <HAL_ADC_ConfigChannel+0x8b8>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a61      	ldr	r2, [pc, #388]	@ (80064c4 <HAL_ADC_ConfigChannel+0xa38>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d10e      	bne.n	8006362 <HAL_ADC_ConfigChannel+0x8d6>
 8006344:	485e      	ldr	r0, [pc, #376]	@ (80064c0 <HAL_ADC_ConfigChannel+0xa34>)
 8006346:	f7fe fd85 	bl	8004e54 <LL_ADC_IsEnabled>
 800634a:	4604      	mov	r4, r0
 800634c:	485d      	ldr	r0, [pc, #372]	@ (80064c4 <HAL_ADC_ConfigChannel+0xa38>)
 800634e:	f7fe fd81 	bl	8004e54 <LL_ADC_IsEnabled>
 8006352:	4603      	mov	r3, r0
 8006354:	4323      	orrs	r3, r4
 8006356:	2b00      	cmp	r3, #0
 8006358:	bf0c      	ite	eq
 800635a:	2301      	moveq	r3, #1
 800635c:	2300      	movne	r3, #0
 800635e:	b2db      	uxtb	r3, r3
 8006360:	e008      	b.n	8006374 <HAL_ADC_ConfigChannel+0x8e8>
 8006362:	4859      	ldr	r0, [pc, #356]	@ (80064c8 <HAL_ADC_ConfigChannel+0xa3c>)
 8006364:	f7fe fd76 	bl	8004e54 <LL_ADC_IsEnabled>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	bf0c      	ite	eq
 800636e:	2301      	moveq	r3, #1
 8006370:	2300      	movne	r3, #0
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b00      	cmp	r3, #0
 8006376:	f000 8084 	beq.w	8006482 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a53      	ldr	r2, [pc, #332]	@ (80064cc <HAL_ADC_ConfigChannel+0xa40>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d132      	bne.n	80063ea <HAL_ADC_ConfigChannel+0x95e>
 8006384:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006388:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d12c      	bne.n	80063ea <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a4c      	ldr	r2, [pc, #304]	@ (80064c8 <HAL_ADC_ConfigChannel+0xa3c>)
 8006396:	4293      	cmp	r3, r2
 8006398:	f040 8086 	bne.w	80064a8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a47      	ldr	r2, [pc, #284]	@ (80064c0 <HAL_ADC_ConfigChannel+0xa34>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d004      	beq.n	80063b0 <HAL_ADC_ConfigChannel+0x924>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a46      	ldr	r2, [pc, #280]	@ (80064c4 <HAL_ADC_ConfigChannel+0xa38>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d101      	bne.n	80063b4 <HAL_ADC_ConfigChannel+0x928>
 80063b0:	4a47      	ldr	r2, [pc, #284]	@ (80064d0 <HAL_ADC_ConfigChannel+0xa44>)
 80063b2:	e000      	b.n	80063b6 <HAL_ADC_ConfigChannel+0x92a>
 80063b4:	4a41      	ldr	r2, [pc, #260]	@ (80064bc <HAL_ADC_ConfigChannel+0xa30>)
 80063b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80063ba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80063be:	4619      	mov	r1, r3
 80063c0:	4610      	mov	r0, r2
 80063c2:	f7fe fa1c 	bl	80047fe <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80063c6:	4b43      	ldr	r3, [pc, #268]	@ (80064d4 <HAL_ADC_ConfigChannel+0xa48>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	099b      	lsrs	r3, r3, #6
 80063cc:	4a42      	ldr	r2, [pc, #264]	@ (80064d8 <HAL_ADC_ConfigChannel+0xa4c>)
 80063ce:	fba2 2303 	umull	r2, r3, r2, r3
 80063d2:	099b      	lsrs	r3, r3, #6
 80063d4:	3301      	adds	r3, #1
 80063d6:	005b      	lsls	r3, r3, #1
 80063d8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80063da:	e002      	b.n	80063e2 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	3b01      	subs	r3, #1
 80063e0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d1f9      	bne.n	80063dc <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80063e8:	e05e      	b.n	80064a8 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a3b      	ldr	r2, [pc, #236]	@ (80064dc <HAL_ADC_ConfigChannel+0xa50>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d120      	bne.n	8006436 <HAL_ADC_ConfigChannel+0x9aa>
 80063f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80063f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d11a      	bne.n	8006436 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a30      	ldr	r2, [pc, #192]	@ (80064c8 <HAL_ADC_ConfigChannel+0xa3c>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d14e      	bne.n	80064a8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a2c      	ldr	r2, [pc, #176]	@ (80064c0 <HAL_ADC_ConfigChannel+0xa34>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d004      	beq.n	800641e <HAL_ADC_ConfigChannel+0x992>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a2a      	ldr	r2, [pc, #168]	@ (80064c4 <HAL_ADC_ConfigChannel+0xa38>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d101      	bne.n	8006422 <HAL_ADC_ConfigChannel+0x996>
 800641e:	4a2c      	ldr	r2, [pc, #176]	@ (80064d0 <HAL_ADC_ConfigChannel+0xa44>)
 8006420:	e000      	b.n	8006424 <HAL_ADC_ConfigChannel+0x998>
 8006422:	4a26      	ldr	r2, [pc, #152]	@ (80064bc <HAL_ADC_ConfigChannel+0xa30>)
 8006424:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006428:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800642c:	4619      	mov	r1, r3
 800642e:	4610      	mov	r0, r2
 8006430:	f7fe f9e5 	bl	80047fe <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006434:	e038      	b.n	80064a8 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a29      	ldr	r2, [pc, #164]	@ (80064e0 <HAL_ADC_ConfigChannel+0xa54>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d133      	bne.n	80064a8 <HAL_ADC_ConfigChannel+0xa1c>
 8006440:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006444:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d12d      	bne.n	80064a8 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a1d      	ldr	r2, [pc, #116]	@ (80064c8 <HAL_ADC_ConfigChannel+0xa3c>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d128      	bne.n	80064a8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a19      	ldr	r2, [pc, #100]	@ (80064c0 <HAL_ADC_ConfigChannel+0xa34>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d004      	beq.n	800646a <HAL_ADC_ConfigChannel+0x9de>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a17      	ldr	r2, [pc, #92]	@ (80064c4 <HAL_ADC_ConfigChannel+0xa38>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d101      	bne.n	800646e <HAL_ADC_ConfigChannel+0x9e2>
 800646a:	4a19      	ldr	r2, [pc, #100]	@ (80064d0 <HAL_ADC_ConfigChannel+0xa44>)
 800646c:	e000      	b.n	8006470 <HAL_ADC_ConfigChannel+0x9e4>
 800646e:	4a13      	ldr	r2, [pc, #76]	@ (80064bc <HAL_ADC_ConfigChannel+0xa30>)
 8006470:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006474:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006478:	4619      	mov	r1, r3
 800647a:	4610      	mov	r0, r2
 800647c:	f7fe f9bf 	bl	80047fe <LL_ADC_SetCommonPathInternalCh>
 8006480:	e012      	b.n	80064a8 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006486:	f043 0220 	orr.w	r2, r3, #32
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8006494:	e008      	b.n	80064a8 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800649a:	f043 0220 	orr.w	r2, r3, #32
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80064b0:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	37e4      	adds	r7, #228	@ 0xe4
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd90      	pop	{r4, r7, pc}
 80064bc:	58026300 	.word	0x58026300
 80064c0:	40022000 	.word	0x40022000
 80064c4:	40022100 	.word	0x40022100
 80064c8:	58026000 	.word	0x58026000
 80064cc:	c7520000 	.word	0xc7520000
 80064d0:	40022300 	.word	0x40022300
 80064d4:	24000038 	.word	0x24000038
 80064d8:	053e2d63 	.word	0x053e2d63
 80064dc:	c3210000 	.word	0xc3210000
 80064e0:	cb840000 	.word	0xcb840000

080064e4 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b094      	sub	sp, #80	@ 0x50
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80064ee:	2300      	movs	r3, #0
 80064f0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80064fc:	d003      	beq.n	8006506 <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8006502:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }

#if defined(ADC_VER_V5_V90)

  if (hadc->Instance == ADC3)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a8c      	ldr	r2, [pc, #560]	@ (800673c <HAL_ADC_AnalogWDGConfig+0x258>)
 800650c:	4293      	cmp	r3, r2
      assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006514:	2b01      	cmp	r3, #1
 8006516:	d101      	bne.n	800651c <HAL_ADC_AnalogWDGConfig+0x38>
 8006518:	2302      	movs	r3, #2
 800651a:	e36b      	b.n	8006bf4 <HAL_ADC_AnalogWDGConfig+0x710>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4618      	mov	r0, r3
 800652a:	f7fe fccd 	bl	8004ec8 <LL_ADC_REG_IsConversionOngoing>
 800652e:	6438      	str	r0, [r7, #64]	@ 0x40
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4618      	mov	r0, r3
 8006536:	f7fe fcda 	bl	8004eee <LL_ADC_INJ_IsConversionOngoing>
 800653a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800653c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800653e:	2b00      	cmp	r3, #0
 8006540:	f040 8349 	bne.w	8006bd6 <HAL_ADC_AnalogWDGConfig+0x6f2>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006546:	2b00      	cmp	r3, #0
 8006548:	f040 8345 	bne.w	8006bd6 <HAL_ADC_AnalogWDGConfig+0x6f2>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a7b      	ldr	r2, [pc, #492]	@ (8006740 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8006552:	4293      	cmp	r3, r2
 8006554:	f040 8131 	bne.w	80067ba <HAL_ADC_AnalogWDGConfig+0x2d6>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8006560:	d034      	beq.n	80065cc <HAL_ADC_AnalogWDGConfig+0xe8>
 8006562:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8006566:	d856      	bhi.n	8006616 <HAL_ADC_AnalogWDGConfig+0x132>
 8006568:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800656c:	d04b      	beq.n	8006606 <HAL_ADC_AnalogWDGConfig+0x122>
 800656e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006572:	d850      	bhi.n	8006616 <HAL_ADC_AnalogWDGConfig+0x132>
 8006574:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006578:	d01b      	beq.n	80065b2 <HAL_ADC_AnalogWDGConfig+0xce>
 800657a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800657e:	d84a      	bhi.n	8006616 <HAL_ADC_AnalogWDGConfig+0x132>
 8006580:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006584:	d037      	beq.n	80065f6 <HAL_ADC_AnalogWDGConfig+0x112>
 8006586:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800658a:	d844      	bhi.n	8006616 <HAL_ADC_AnalogWDGConfig+0x132>
 800658c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006590:	d029      	beq.n	80065e6 <HAL_ADC_AnalogWDGConfig+0x102>
 8006592:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006596:	d13e      	bne.n	8006616 <HAL_ADC_AnalogWDGConfig+0x132>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6818      	ldr	r0, [r3, #0]
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 80065a4:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 80065a8:	461a      	mov	r2, r3
 80065aa:	4965      	ldr	r1, [pc, #404]	@ (8006740 <HAL_ADC_AnalogWDGConfig+0x25c>)
 80065ac:	f7fe fb34 	bl	8004c18 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 80065b0:	e039      	b.n	8006626 <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6818      	ldr	r0, [r3, #0]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 80065be:	f043 73a0 	orr.w	r3, r3, #20971520	@ 0x1400000
 80065c2:	461a      	mov	r2, r3
 80065c4:	495e      	ldr	r1, [pc, #376]	@ (8006740 <HAL_ADC_AnalogWDGConfig+0x25c>)
 80065c6:	f7fe fb27 	bl	8004c18 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 80065ca:	e02c      	b.n	8006626 <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6818      	ldr	r0, [r3, #0]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 80065d8:	f043 73e0 	orr.w	r3, r3, #29360128	@ 0x1c00000
 80065dc:	461a      	mov	r2, r3
 80065de:	4958      	ldr	r1, [pc, #352]	@ (8006740 <HAL_ADC_AnalogWDGConfig+0x25c>)
 80065e0:	f7fe fb1a 	bl	8004c18 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 80065e4:	e01f      	b.n	8006626 <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a56      	ldr	r2, [pc, #344]	@ (8006744 <HAL_ADC_AnalogWDGConfig+0x260>)
 80065ec:	4954      	ldr	r1, [pc, #336]	@ (8006740 <HAL_ADC_AnalogWDGConfig+0x25c>)
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7fe fb12 	bl	8004c18 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80065f4:	e017      	b.n	8006626 <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a53      	ldr	r2, [pc, #332]	@ (8006748 <HAL_ADC_AnalogWDGConfig+0x264>)
 80065fc:	4950      	ldr	r1, [pc, #320]	@ (8006740 <HAL_ADC_AnalogWDGConfig+0x25c>)
 80065fe:	4618      	mov	r0, r3
 8006600:	f7fe fb0a 	bl	8004c18 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006604:	e00f      	b.n	8006626 <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a50      	ldr	r2, [pc, #320]	@ (800674c <HAL_ADC_AnalogWDGConfig+0x268>)
 800660c:	494c      	ldr	r1, [pc, #304]	@ (8006740 <HAL_ADC_AnalogWDGConfig+0x25c>)
 800660e:	4618      	mov	r0, r3
 8006610:	f7fe fb02 	bl	8004c18 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006614:	e007      	b.n	8006626 <HAL_ADC_AnalogWDGConfig+0x142>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2200      	movs	r2, #0
 800661c:	4948      	ldr	r1, [pc, #288]	@ (8006740 <HAL_ADC_AnalogWDGConfig+0x25c>)
 800661e:	4618      	mov	r0, r3
 8006620:	f7fe fafa 	bl	8004c18 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006624:	bf00      	nop
      }

      /* Shift the offset in function of the selected ADC resolution:         */
      /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
      /* are set to 0                                                         */
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8006626:	4b4a      	ldr	r3, [pc, #296]	@ (8006750 <HAL_ADC_AnalogWDGConfig+0x26c>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800662e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006632:	d10b      	bne.n	800664c <HAL_ADC_AnalogWDGConfig+0x168>
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	691a      	ldr	r2, [r3, #16]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	089b      	lsrs	r3, r3, #2
 8006640:	f003 0307 	and.w	r3, r3, #7
 8006644:	005b      	lsls	r3, r3, #1
 8006646:	fa02 f303 	lsl.w	r3, r2, r3
 800664a:	e01d      	b.n	8006688 <HAL_ADC_AnalogWDGConfig+0x1a4>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	f003 0310 	and.w	r3, r3, #16
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10b      	bne.n	8006672 <HAL_ADC_AnalogWDGConfig+0x18e>
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	691a      	ldr	r2, [r3, #16]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	089b      	lsrs	r3, r3, #2
 8006666:	f003 0307 	and.w	r3, r3, #7
 800666a:	005b      	lsls	r3, r3, #1
 800666c:	fa02 f303 	lsl.w	r3, r2, r3
 8006670:	e00a      	b.n	8006688 <HAL_ADC_AnalogWDGConfig+0x1a4>
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	691a      	ldr	r2, [r3, #16]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	089b      	lsrs	r3, r3, #2
 800667e:	f003 0304 	and.w	r3, r3, #4
 8006682:	005b      	lsls	r3, r3, #1
 8006684:	fa02 f303 	lsl.w	r3, r2, r3
 8006688:	64bb      	str	r3, [r7, #72]	@ 0x48
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 800668a:	4b31      	ldr	r3, [pc, #196]	@ (8006750 <HAL_ADC_AnalogWDGConfig+0x26c>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006692:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006696:	d10b      	bne.n	80066b0 <HAL_ADC_AnalogWDGConfig+0x1cc>
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	695a      	ldr	r2, [r3, #20]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	089b      	lsrs	r3, r3, #2
 80066a4:	f003 0307 	and.w	r3, r3, #7
 80066a8:	005b      	lsls	r3, r3, #1
 80066aa:	fa02 f303 	lsl.w	r3, r2, r3
 80066ae:	e01d      	b.n	80066ec <HAL_ADC_AnalogWDGConfig+0x208>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	f003 0310 	and.w	r3, r3, #16
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10b      	bne.n	80066d6 <HAL_ADC_AnalogWDGConfig+0x1f2>
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	695a      	ldr	r2, [r3, #20]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	089b      	lsrs	r3, r3, #2
 80066ca:	f003 0307 	and.w	r3, r3, #7
 80066ce:	005b      	lsls	r3, r3, #1
 80066d0:	fa02 f303 	lsl.w	r3, r2, r3
 80066d4:	e00a      	b.n	80066ec <HAL_ADC_AnalogWDGConfig+0x208>
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	695a      	ldr	r2, [r3, #20]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	089b      	lsrs	r3, r3, #2
 80066e2:	f003 0304 	and.w	r3, r3, #4
 80066e6:	005b      	lsls	r3, r3, #1
 80066e8:	fa02 f303 	lsl.w	r3, r2, r3
 80066ec:	647b      	str	r3, [r7, #68]	@ 0x44

      /* Set the high and low thresholds */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a12      	ldr	r2, [pc, #72]	@ (800673c <HAL_ADC_AnalogWDGConfig+0x258>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d131      	bne.n	800675c <HAL_ADC_AnalogWDGConfig+0x278>
      {
        MODIFY_REG(hadc->Instance->LTR1_TR1,
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	699a      	ldr	r2, [r3, #24]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	430a      	orrs	r2, r1
 800670c:	621a      	str	r2, [r3, #32]
                   ADC3_TR1_AWDFILT,
                   AnalogWDGConfig->FilteringConfig);
        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC3_TR1_LT1, tmpAWDLowThresholdShifted);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	6a1a      	ldr	r2, [r3, #32]
 8006714:	4b0f      	ldr	r3, [pc, #60]	@ (8006754 <HAL_ADC_AnalogWDGConfig+0x270>)
 8006716:	4013      	ands	r3, r2
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	6812      	ldr	r2, [r2, #0]
 800671c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800671e:	430b      	orrs	r3, r1
 8006720:	6213      	str	r3, [r2, #32]
        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC3_TR1_HT1, (tmpAWDHighThresholdShifted << ADC3_TR1_HT1_Pos));
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	6a1a      	ldr	r2, [r3, #32]
 8006728:	4b0b      	ldr	r3, [pc, #44]	@ (8006758 <HAL_ADC_AnalogWDGConfig+0x274>)
 800672a:	4013      	ands	r3, r2
 800672c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800672e:	0411      	lsls	r1, r2, #16
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	6812      	ldr	r2, [r2, #0]
 8006734:	430b      	orrs	r3, r1
 8006736:	6213      	str	r3, [r2, #32]
 8006738:	e024      	b.n	8006784 <HAL_ADC_AnalogWDGConfig+0x2a0>
 800673a:	bf00      	nop
 800673c:	58026000 	.word	0x58026000
 8006740:	7dc00000 	.word	0x7dc00000
 8006744:	008fffff 	.word	0x008fffff
 8006748:	010fffff 	.word	0x010fffff
 800674c:	018fffff 	.word	0x018fffff
 8006750:	5c001000 	.word	0x5c001000
 8006754:	fffff000 	.word	0xfffff000
 8006758:	f000ffff 	.word	0xf000ffff
      }
      else
      {

        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800676c:	430a      	orrs	r2, r1
 800676e:	621a      	str	r2, [r3, #32]
        MODIFY_REG(hadc->Instance->HTR1_TR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006776:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006780:	430a      	orrs	r2, r1
 8006782:	625a      	str	r2, [r3, #36]	@ 0x24
      MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
      MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
#endif

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006788:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4618      	mov	r0, r3
 8006796:	f7fe fbbd 	bl	8004f14 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	7b1b      	ldrb	r3, [r3, #12]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d105      	bne.n	80067ae <HAL_ADC_AnalogWDGConfig+0x2ca>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7fe fbdd 	bl	8004f66 <LL_ADC_EnableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80067ac:	e21c      	b.n	8006be8 <HAL_ADC_AnalogWDGConfig+0x704>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7fe fc07 	bl	8004fc6 <LL_ADC_DisableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80067b8:	e216      	b.n	8006be8 <HAL_ADC_AnalogWDGConfig+0x704>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 80067c2:	d01f      	beq.n	8006804 <HAL_ADC_AnalogWDGConfig+0x320>
 80067c4:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 80067c8:	f200 80f4 	bhi.w	80069b4 <HAL_ADC_AnalogWDGConfig+0x4d0>
 80067cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80067d0:	d07d      	beq.n	80068ce <HAL_ADC_AnalogWDGConfig+0x3ea>
 80067d2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80067d6:	f200 80ed 	bhi.w	80069b4 <HAL_ADC_AnalogWDGConfig+0x4d0>
 80067da:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80067de:	d011      	beq.n	8006804 <HAL_ADC_AnalogWDGConfig+0x320>
 80067e0:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80067e4:	f200 80e6 	bhi.w	80069b4 <HAL_ADC_AnalogWDGConfig+0x4d0>
 80067e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80067ec:	d06f      	beq.n	80068ce <HAL_ADC_AnalogWDGConfig+0x3ea>
 80067ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80067f2:	f200 80df 	bhi.w	80069b4 <HAL_ADC_AnalogWDGConfig+0x4d0>
 80067f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80067fa:	d068      	beq.n	80068ce <HAL_ADC_AnalogWDGConfig+0x3ea>
 80067fc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006800:	f040 80d8 	bne.w	80069b4 <HAL_ADC_AnalogWDGConfig+0x4d0>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a9c      	ldr	r2, [pc, #624]	@ (8006a7c <HAL_ADC_AnalogWDGConfig+0x598>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d12f      	bne.n	800686e <HAL_ADC_AnalogWDGConfig+0x38a>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006816:	2b00      	cmp	r3, #0
 8006818:	d108      	bne.n	800682c <HAL_ADC_AnalogWDGConfig+0x348>
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	0e9b      	lsrs	r3, r3, #26
 8006820:	f003 031f 	and.w	r3, r3, #31
 8006824:	2201      	movs	r2, #1
 8006826:	fa02 f303 	lsl.w	r3, r2, r3
 800682a:	e016      	b.n	800685a <HAL_ADC_AnalogWDGConfig+0x376>
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006834:	fa93 f3a3 	rbit	r3, r3
 8006838:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800683a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800683c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800683e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006840:	2b00      	cmp	r3, #0
 8006842:	d101      	bne.n	8006848 <HAL_ADC_AnalogWDGConfig+0x364>
    return 32U;
 8006844:	2320      	movs	r3, #32
 8006846:	e003      	b.n	8006850 <HAL_ADC_AnalogWDGConfig+0x36c>
  return __builtin_clz(value);
 8006848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800684a:	fab3 f383 	clz	r3, r3
 800684e:	b2db      	uxtb	r3, r3
 8006850:	f003 031f 	and.w	r3, r3, #31
 8006854:	2201      	movs	r2, #1
 8006856:	fa02 f303 	lsl.w	r3, r2, r3
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	6812      	ldr	r2, [r2, #0]
 800685e:	f8d2 10a0 	ldr.w	r1, [r2, #160]	@ 0xa0
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	6812      	ldr	r2, [r2, #0]
 8006866:	430b      	orrs	r3, r1
 8006868:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 800686c:	e0ab      	b.n	80069c6 <HAL_ADC_AnalogWDGConfig+0x4e2>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006876:	2b00      	cmp	r3, #0
 8006878:	d108      	bne.n	800688c <HAL_ADC_AnalogWDGConfig+0x3a8>
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	0e9b      	lsrs	r3, r3, #26
 8006880:	f003 031f 	and.w	r3, r3, #31
 8006884:	2201      	movs	r2, #1
 8006886:	fa02 f303 	lsl.w	r3, r2, r3
 800688a:	e016      	b.n	80068ba <HAL_ADC_AnalogWDGConfig+0x3d6>
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006894:	fa93 f3a3 	rbit	r3, r3
 8006898:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800689a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800689e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d101      	bne.n	80068a8 <HAL_ADC_AnalogWDGConfig+0x3c4>
    return 32U;
 80068a4:	2320      	movs	r3, #32
 80068a6:	e003      	b.n	80068b0 <HAL_ADC_AnalogWDGConfig+0x3cc>
  return __builtin_clz(value);
 80068a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068aa:	fab3 f383 	clz	r3, r3
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	f003 031f 	and.w	r3, r3, #31
 80068b4:	2201      	movs	r2, #1
 80068b6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	6812      	ldr	r2, [r2, #0]
 80068be:	f8d2 10a4 	ldr.w	r1, [r2, #164]	@ 0xa4
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	6812      	ldr	r2, [r2, #0]
 80068c6:	430b      	orrs	r3, r1
 80068c8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
          break;
 80068cc:	e07b      	b.n	80069c6 <HAL_ADC_AnalogWDGConfig+0x4e2>
        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:

#if defined(ADC_VER_V5_V90)
          if (hadc->Instance == ADC3)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a6b      	ldr	r2, [pc, #428]	@ (8006a80 <HAL_ADC_AnalogWDGConfig+0x59c>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d108      	bne.n	80068ea <HAL_ADC_AnalogWDGConfig+0x406>
          {

            LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6818      	ldr	r0, [r3, #0]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a68      	ldr	r2, [pc, #416]	@ (8006a84 <HAL_ADC_AnalogWDGConfig+0x5a0>)
 80068e2:	4619      	mov	r1, r3
 80068e4:	f7fe f998 	bl	8004c18 <LL_ADC_SetAnalogWDMonitChannels>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
            }
#if defined(ADC_VER_V5_V90)
          }
#endif  /*ADC_VER_V5_V90*/
          break;
 80068e8:	e06d      	b.n	80069c6 <HAL_ADC_AnalogWDGConfig+0x4e2>
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a63      	ldr	r2, [pc, #396]	@ (8006a7c <HAL_ADC_AnalogWDGConfig+0x598>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d12f      	bne.n	8006954 <HAL_ADC_AnalogWDGConfig+0x470>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d108      	bne.n	8006912 <HAL_ADC_AnalogWDGConfig+0x42e>
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	0e9b      	lsrs	r3, r3, #26
 8006906:	f003 031f 	and.w	r3, r3, #31
 800690a:	2201      	movs	r2, #1
 800690c:	fa02 f303 	lsl.w	r3, r2, r3
 8006910:	e016      	b.n	8006940 <HAL_ADC_AnalogWDGConfig+0x45c>
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	fa93 f3a3 	rbit	r3, r3
 800691e:	61bb      	str	r3, [r7, #24]
  return result;
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006924:	6a3b      	ldr	r3, [r7, #32]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d101      	bne.n	800692e <HAL_ADC_AnalogWDGConfig+0x44a>
    return 32U;
 800692a:	2320      	movs	r3, #32
 800692c:	e003      	b.n	8006936 <HAL_ADC_AnalogWDGConfig+0x452>
  return __builtin_clz(value);
 800692e:	6a3b      	ldr	r3, [r7, #32]
 8006930:	fab3 f383 	clz	r3, r3
 8006934:	b2db      	uxtb	r3, r3
 8006936:	f003 031f 	and.w	r3, r3, #31
 800693a:	2201      	movs	r2, #1
 800693c:	fa02 f303 	lsl.w	r3, r2, r3
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	6812      	ldr	r2, [r2, #0]
 8006944:	f8d2 10a0 	ldr.w	r1, [r2, #160]	@ 0xa0
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	6812      	ldr	r2, [r2, #0]
 800694c:	430b      	orrs	r3, r1
 800694e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
          break;
 8006952:	e038      	b.n	80069c6 <HAL_ADC_AnalogWDGConfig+0x4e2>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800695c:	2b00      	cmp	r3, #0
 800695e:	d108      	bne.n	8006972 <HAL_ADC_AnalogWDGConfig+0x48e>
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	0e9b      	lsrs	r3, r3, #26
 8006966:	f003 031f 	and.w	r3, r3, #31
 800696a:	2201      	movs	r2, #1
 800696c:	fa02 f303 	lsl.w	r3, r2, r3
 8006970:	e016      	b.n	80069a0 <HAL_ADC_AnalogWDGConfig+0x4bc>
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	fa93 f3a3 	rbit	r3, r3
 800697e:	60fb      	str	r3, [r7, #12]
  return result;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d101      	bne.n	800698e <HAL_ADC_AnalogWDGConfig+0x4aa>
    return 32U;
 800698a:	2320      	movs	r3, #32
 800698c:	e003      	b.n	8006996 <HAL_ADC_AnalogWDGConfig+0x4b2>
  return __builtin_clz(value);
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	fab3 f383 	clz	r3, r3
 8006994:	b2db      	uxtb	r3, r3
 8006996:	f003 031f 	and.w	r3, r3, #31
 800699a:	2201      	movs	r2, #1
 800699c:	fa02 f303 	lsl.w	r3, r2, r3
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	6812      	ldr	r2, [r2, #0]
 80069a4:	f8d2 10a4 	ldr.w	r1, [r2, #164]	@ 0xa4
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	6812      	ldr	r2, [r2, #0]
 80069ac:	430b      	orrs	r3, r1
 80069ae:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
          break;
 80069b2:	e008      	b.n	80069c6 <HAL_ADC_AnalogWDGConfig+0x4e2>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6818      	ldr	r0, [r3, #0]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2200      	movs	r2, #0
 80069be:	4619      	mov	r1, r3
 80069c0:	f7fe f92a 	bl	8004c18 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80069c4:	bf00      	nop
      }

      /* Shift the thresholds in function of the selected ADC resolution      */
      /* have to be left-aligned on bit 15, the LSB (right bits) are set to 0 */
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	f003 0310 	and.w	r3, r3, #16
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10b      	bne.n	80069ec <HAL_ADC_AnalogWDGConfig+0x508>
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	691a      	ldr	r2, [r3, #16]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	089b      	lsrs	r3, r3, #2
 80069e0:	f003 0307 	and.w	r3, r3, #7
 80069e4:	005b      	lsls	r3, r3, #1
 80069e6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ea:	e00a      	b.n	8006a02 <HAL_ADC_AnalogWDGConfig+0x51e>
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	691a      	ldr	r2, [r3, #16]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	089b      	lsrs	r3, r3, #2
 80069f8:	f003 0304 	and.w	r3, r3, #4
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006a02:	64bb      	str	r3, [r7, #72]	@ 0x48
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	f003 0310 	and.w	r3, r3, #16
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10b      	bne.n	8006a2a <HAL_ADC_AnalogWDGConfig+0x546>
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	695a      	ldr	r2, [r3, #20]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	089b      	lsrs	r3, r3, #2
 8006a1e:	f003 0307 	and.w	r3, r3, #7
 8006a22:	005b      	lsls	r3, r3, #1
 8006a24:	fa02 f303 	lsl.w	r3, r2, r3
 8006a28:	e00a      	b.n	8006a40 <HAL_ADC_AnalogWDGConfig+0x55c>
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	695a      	ldr	r2, [r3, #20]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	089b      	lsrs	r3, r3, #2
 8006a36:	f003 0304 	and.w	r3, r3, #4
 8006a3a:	005b      	lsls	r3, r3, #1
 8006a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a40:	647b      	str	r3, [r7, #68]	@ 0x44

#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a0e      	ldr	r2, [pc, #56]	@ (8006a80 <HAL_ADC_AnalogWDGConfig+0x59c>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d153      	bne.n	8006af4 <HAL_ADC_AnalogWDGConfig+0x610>
      {

        /* Analog watchdog thresholds configuration */
        if (AnalogWDGConfig->WatchdogNumber != ADC_ANALOGWATCHDOG_1)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a0d      	ldr	r2, [pc, #52]	@ (8006a88 <HAL_ADC_AnalogWDGConfig+0x5a4>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d045      	beq.n	8006ae2 <HAL_ADC_AnalogWDGConfig+0x5fe>
        {
          /* Shift the offset with respect to the selected ADC resolution:        */
          /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
          /* are set to 0.                                                        */
          tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	f003 0310 	and.w	r3, r3, #16
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d113      	bne.n	8006a8c <HAL_ADC_AnalogWDGConfig+0x5a8>
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	691a      	ldr	r2, [r3, #16]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	089b      	lsrs	r3, r3, #2
 8006a70:	f003 0307 	and.w	r3, r3, #7
 8006a74:	005b      	lsls	r3, r3, #1
 8006a76:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7a:	e012      	b.n	8006aa2 <HAL_ADC_AnalogWDGConfig+0x5be>
 8006a7c:	001fffff 	.word	0x001fffff
 8006a80:	58026000 	.word	0x58026000
 8006a84:	018fffff 	.word	0x018fffff
 8006a88:	7dc00000 	.word	0x7dc00000
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	691a      	ldr	r2, [r3, #16]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	089b      	lsrs	r3, r3, #2
 8006a98:	f003 0304 	and.w	r3, r3, #4
 8006a9c:	005b      	lsls	r3, r3, #1
 8006a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa2:	64bb      	str	r3, [r7, #72]	@ 0x48
          tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	f003 0310 	and.w	r3, r3, #16
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10b      	bne.n	8006aca <HAL_ADC_AnalogWDGConfig+0x5e6>
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	695a      	ldr	r2, [r3, #20]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	089b      	lsrs	r3, r3, #2
 8006abe:	f003 0307 	and.w	r3, r3, #7
 8006ac2:	005b      	lsls	r3, r3, #1
 8006ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac8:	e00a      	b.n	8006ae0 <HAL_ADC_AnalogWDGConfig+0x5fc>
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	695a      	ldr	r2, [r3, #20]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	089b      	lsrs	r3, r3, #2
 8006ad6:	f003 0304 	and.w	r3, r3, #4
 8006ada:	005b      	lsls	r3, r3, #1
 8006adc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae0:	647b      	str	r3, [r7, #68]	@ 0x44
        }

        /* Set ADC analog watchdog thresholds value of both thresholds high and low */
        LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted, tmpAWDLowThresholdShifted);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6818      	ldr	r0, [r3, #0]
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	6819      	ldr	r1, [r3, #0]
 8006aea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006aec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006aee:	f7fe f8c1 	bl	8004c74 <LL_ADC_ConfigAnalogWDThresholds>
 8006af2:	e035      	b.n	8006b60 <HAL_ADC_AnalogWDGConfig+0x67c>

      }
      else
      {

        if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a40      	ldr	r2, [pc, #256]	@ (8006bfc <HAL_ADC_AnalogWDGConfig+0x718>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d118      	bne.n	8006b30 <HAL_ADC_AnalogWDGConfig+0x64c>
        {
          /* Set ADC analog watchdog thresholds value of both thresholds high and low */
          MODIFY_REG(hadc->Instance->LTR2_DIFSEL,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006b06:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b10:	430a      	orrs	r2, r1
 8006b12:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
          MODIFY_REG(hadc->Instance->HTR2_CALFACT,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006b1e:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 8006b2e:	e017      	b.n	8006b60 <HAL_ADC_AnalogWDGConfig+0x67c>
        }
        else
        {
          /* Set ADC analog watchdog thresholds value of both thresholds high and low */
          MODIFY_REG(hadc->Instance->LTR3_RES10,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006b38:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b42:	430a      	orrs	r2, r1
 8006b44:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
          MODIFY_REG(hadc->Instance->HTR3_RES11,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006b50:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b5a:	430a      	orrs	r2, r1
 8006b5c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
        MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
      }

#endif
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a25      	ldr	r2, [pc, #148]	@ (8006bfc <HAL_ADC_AnalogWDGConfig+0x718>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d11a      	bne.n	8006ba0 <HAL_ADC_AnalogWDGConfig+0x6bc>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b6e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7fe f9d7 	bl	8004f2e <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	7b1b      	ldrb	r3, [r3, #12]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d105      	bne.n	8006b94 <HAL_ADC_AnalogWDGConfig+0x6b0>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7fe f9fa 	bl	8004f86 <LL_ADC_EnableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006b92:	e029      	b.n	8006be8 <HAL_ADC_AnalogWDGConfig+0x704>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7fe fa24 	bl	8004fe6 <LL_ADC_DisableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006b9e:	e023      	b.n	8006be8 <HAL_ADC_AnalogWDGConfig+0x704>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ba4:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7fe f9ca 	bl	8004f4a <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	7b1b      	ldrb	r3, [r3, #12]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d105      	bne.n	8006bca <HAL_ADC_AnalogWDGConfig+0x6e6>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fe f9ef 	bl	8004fa6 <LL_ADC_EnableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006bc8:	e00e      	b.n	8006be8 <HAL_ADC_AnalogWDGConfig+0x704>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7fe fa19 	bl	8005006 <LL_ADC_DisableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006bd4:	e008      	b.n	8006be8 <HAL_ADC_AnalogWDGConfig+0x704>
  /* If a conversion is on going on ADC group regular or injected, no update  */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bda:	f043 0220 	orr.w	r2, r3, #32
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8006bf0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3750      	adds	r7, #80	@ 0x50
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	001fffff 	.word	0x001fffff

08006c00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7fe f921 	bl	8004e54 <LL_ADC_IsEnabled>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d16e      	bne.n	8006cf6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	689a      	ldr	r2, [r3, #8]
 8006c1e:	4b38      	ldr	r3, [pc, #224]	@ (8006d00 <ADC_Enable+0x100>)
 8006c20:	4013      	ands	r3, r2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00d      	beq.n	8006c42 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c2a:	f043 0210 	orr.w	r2, r3, #16
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c36:	f043 0201 	orr.w	r2, r3, #1
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e05a      	b.n	8006cf8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7fe f8dc 	bl	8004e04 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006c4c:	f7fd fd6a 	bl	8004724 <HAL_GetTick>
 8006c50:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a2b      	ldr	r2, [pc, #172]	@ (8006d04 <ADC_Enable+0x104>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d004      	beq.n	8006c66 <ADC_Enable+0x66>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a29      	ldr	r2, [pc, #164]	@ (8006d08 <ADC_Enable+0x108>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d101      	bne.n	8006c6a <ADC_Enable+0x6a>
 8006c66:	4b29      	ldr	r3, [pc, #164]	@ (8006d0c <ADC_Enable+0x10c>)
 8006c68:	e000      	b.n	8006c6c <ADC_Enable+0x6c>
 8006c6a:	4b29      	ldr	r3, [pc, #164]	@ (8006d10 <ADC_Enable+0x110>)
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7fe f85f 	bl	8004d30 <LL_ADC_GetMultimode>
 8006c72:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a23      	ldr	r2, [pc, #140]	@ (8006d08 <ADC_Enable+0x108>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d002      	beq.n	8006c84 <ADC_Enable+0x84>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	e000      	b.n	8006c86 <ADC_Enable+0x86>
 8006c84:	4b1f      	ldr	r3, [pc, #124]	@ (8006d04 <ADC_Enable+0x104>)
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	6812      	ldr	r2, [r2, #0]
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d02c      	beq.n	8006ce8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d130      	bne.n	8006cf6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006c94:	e028      	b.n	8006ce8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fe f8da 	bl	8004e54 <LL_ADC_IsEnabled>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d104      	bne.n	8006cb0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7fe f8aa 	bl	8004e04 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006cb0:	f7fd fd38 	bl	8004724 <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d914      	bls.n	8006ce8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0301 	and.w	r3, r3, #1
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d00d      	beq.n	8006ce8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cd0:	f043 0210 	orr.w	r2, r3, #16
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cdc:	f043 0201 	orr.w	r2, r3, #1
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e007      	b.n	8006cf8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d1cf      	bne.n	8006c96 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	8000003f 	.word	0x8000003f
 8006d04:	40022000 	.word	0x40022000
 8006d08:	40022100 	.word	0x40022100
 8006d0c:	40022300 	.word	0x40022300
 8006d10:	58026300 	.word	0x58026300

08006d14 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7fe f8aa 	bl	8004e7a <LL_ADC_IsDisableOngoing>
 8006d26:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7fe f891 	bl	8004e54 <LL_ADC_IsEnabled>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d047      	beq.n	8006dc8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d144      	bne.n	8006dc8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f003 030d 	and.w	r3, r3, #13
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d10c      	bne.n	8006d66 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7fe f86b 	bl	8004e2c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2203      	movs	r2, #3
 8006d5c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006d5e:	f7fd fce1 	bl	8004724 <HAL_GetTick>
 8006d62:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006d64:	e029      	b.n	8006dba <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d6a:	f043 0210 	orr.w	r2, r3, #16
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d76:	f043 0201 	orr.w	r2, r3, #1
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e023      	b.n	8006dca <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006d82:	f7fd fccf 	bl	8004724 <HAL_GetTick>
 8006d86:	4602      	mov	r2, r0
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d914      	bls.n	8006dba <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00d      	beq.n	8006dba <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006da2:	f043 0210 	orr.w	r2, r3, #16
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dae:	f043 0201 	orr.w	r2, r3, #1
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e007      	b.n	8006dca <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	f003 0301 	and.w	r3, r3, #1
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1dc      	bne.n	8006d82 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b084      	sub	sp, #16
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dde:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006de4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d14b      	bne.n	8006e84 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006df0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 0308 	and.w	r3, r3, #8
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d021      	beq.n	8006e4a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7fd fe0a 	bl	8004a24 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d032      	beq.n	8006e7c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d12b      	bne.n	8006e7c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d11f      	bne.n	8006e7c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e40:	f043 0201 	orr.w	r2, r3, #1
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	661a      	str	r2, [r3, #96]	@ 0x60
 8006e48:	e018      	b.n	8006e7c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	f003 0303 	and.w	r3, r3, #3
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d111      	bne.n	8006e7c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d105      	bne.n	8006e7c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e74:	f043 0201 	orr.w	r2, r3, #1
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f7fb f831 	bl	8001ee4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006e82:	e00e      	b.n	8006ea2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e88:	f003 0310 	and.w	r3, r3, #16
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d003      	beq.n	8006e98 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f7fa fffb 	bl	8001e8c <HAL_ADC_ErrorCallback>
}
 8006e96:	e004      	b.n	8006ea2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	4798      	blx	r3
}
 8006ea2:	bf00      	nop
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b084      	sub	sp, #16
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f7fe fdd3 	bl	8005a64 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006ebe:	bf00      	nop
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b084      	sub	sp, #16
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ed8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ee4:	f043 0204 	orr.w	r2, r3, #4
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f7fa ffcd 	bl	8001e8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006ef2:	bf00      	nop
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
	...

08006efc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a6c      	ldr	r2, [pc, #432]	@ (80070bc <ADC_ConfigureBoostMode+0x1c0>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d004      	beq.n	8006f18 <ADC_ConfigureBoostMode+0x1c>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a6b      	ldr	r2, [pc, #428]	@ (80070c0 <ADC_ConfigureBoostMode+0x1c4>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d109      	bne.n	8006f2c <ADC_ConfigureBoostMode+0x30>
 8006f18:	4b6a      	ldr	r3, [pc, #424]	@ (80070c4 <ADC_ConfigureBoostMode+0x1c8>)
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	bf14      	ite	ne
 8006f24:	2301      	movne	r3, #1
 8006f26:	2300      	moveq	r3, #0
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	e008      	b.n	8006f3e <ADC_ConfigureBoostMode+0x42>
 8006f2c:	4b66      	ldr	r3, [pc, #408]	@ (80070c8 <ADC_ConfigureBoostMode+0x1cc>)
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	bf14      	ite	ne
 8006f38:	2301      	movne	r3, #1
 8006f3a:	2300      	moveq	r3, #0
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d01c      	beq.n	8006f7c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006f42:	f004 fda9 	bl	800ba98 <HAL_RCC_GetHCLKFreq>
 8006f46:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f50:	d010      	beq.n	8006f74 <ADC_ConfigureBoostMode+0x78>
 8006f52:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f56:	d873      	bhi.n	8007040 <ADC_ConfigureBoostMode+0x144>
 8006f58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f5c:	d002      	beq.n	8006f64 <ADC_ConfigureBoostMode+0x68>
 8006f5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f62:	d16d      	bne.n	8007040 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	0c1b      	lsrs	r3, r3, #16
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f70:	60fb      	str	r3, [r7, #12]
        break;
 8006f72:	e068      	b.n	8007046 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	089b      	lsrs	r3, r3, #2
 8006f78:	60fb      	str	r3, [r7, #12]
        break;
 8006f7a:	e064      	b.n	8007046 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006f7c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8006f80:	f04f 0100 	mov.w	r1, #0
 8006f84:	f005 ff84 	bl	800ce90 <HAL_RCCEx_GetPeriphCLKFreq>
 8006f88:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8006f92:	d051      	beq.n	8007038 <ADC_ConfigureBoostMode+0x13c>
 8006f94:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8006f98:	d854      	bhi.n	8007044 <ADC_ConfigureBoostMode+0x148>
 8006f9a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8006f9e:	d047      	beq.n	8007030 <ADC_ConfigureBoostMode+0x134>
 8006fa0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8006fa4:	d84e      	bhi.n	8007044 <ADC_ConfigureBoostMode+0x148>
 8006fa6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8006faa:	d03d      	beq.n	8007028 <ADC_ConfigureBoostMode+0x12c>
 8006fac:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8006fb0:	d848      	bhi.n	8007044 <ADC_ConfigureBoostMode+0x148>
 8006fb2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006fb6:	d033      	beq.n	8007020 <ADC_ConfigureBoostMode+0x124>
 8006fb8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006fbc:	d842      	bhi.n	8007044 <ADC_ConfigureBoostMode+0x148>
 8006fbe:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8006fc2:	d029      	beq.n	8007018 <ADC_ConfigureBoostMode+0x11c>
 8006fc4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8006fc8:	d83c      	bhi.n	8007044 <ADC_ConfigureBoostMode+0x148>
 8006fca:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006fce:	d01a      	beq.n	8007006 <ADC_ConfigureBoostMode+0x10a>
 8006fd0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006fd4:	d836      	bhi.n	8007044 <ADC_ConfigureBoostMode+0x148>
 8006fd6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006fda:	d014      	beq.n	8007006 <ADC_ConfigureBoostMode+0x10a>
 8006fdc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006fe0:	d830      	bhi.n	8007044 <ADC_ConfigureBoostMode+0x148>
 8006fe2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fe6:	d00e      	beq.n	8007006 <ADC_ConfigureBoostMode+0x10a>
 8006fe8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fec:	d82a      	bhi.n	8007044 <ADC_ConfigureBoostMode+0x148>
 8006fee:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006ff2:	d008      	beq.n	8007006 <ADC_ConfigureBoostMode+0x10a>
 8006ff4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006ff8:	d824      	bhi.n	8007044 <ADC_ConfigureBoostMode+0x148>
 8006ffa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ffe:	d002      	beq.n	8007006 <ADC_ConfigureBoostMode+0x10a>
 8007000:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007004:	d11e      	bne.n	8007044 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	0c9b      	lsrs	r3, r3, #18
 800700c:	005b      	lsls	r3, r3, #1
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	fbb2 f3f3 	udiv	r3, r2, r3
 8007014:	60fb      	str	r3, [r7, #12]
        break;
 8007016:	e016      	b.n	8007046 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	091b      	lsrs	r3, r3, #4
 800701c:	60fb      	str	r3, [r7, #12]
        break;
 800701e:	e012      	b.n	8007046 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	095b      	lsrs	r3, r3, #5
 8007024:	60fb      	str	r3, [r7, #12]
        break;
 8007026:	e00e      	b.n	8007046 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	099b      	lsrs	r3, r3, #6
 800702c:	60fb      	str	r3, [r7, #12]
        break;
 800702e:	e00a      	b.n	8007046 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	09db      	lsrs	r3, r3, #7
 8007034:	60fb      	str	r3, [r7, #12]
        break;
 8007036:	e006      	b.n	8007046 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	0a1b      	lsrs	r3, r3, #8
 800703c:	60fb      	str	r3, [r7, #12]
        break;
 800703e:	e002      	b.n	8007046 <ADC_ConfigureBoostMode+0x14a>
        break;
 8007040:	bf00      	nop
 8007042:	e000      	b.n	8007046 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8007044:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	085b      	lsrs	r3, r3, #1
 800704a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	4a1f      	ldr	r2, [pc, #124]	@ (80070cc <ADC_ConfigureBoostMode+0x1d0>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d808      	bhi.n	8007066 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	689a      	ldr	r2, [r3, #8]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007062:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8007064:	e025      	b.n	80070b2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	4a19      	ldr	r2, [pc, #100]	@ (80070d0 <ADC_ConfigureBoostMode+0x1d4>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d80a      	bhi.n	8007084 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007080:	609a      	str	r2, [r3, #8]
}
 8007082:	e016      	b.n	80070b2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	4a13      	ldr	r2, [pc, #76]	@ (80070d4 <ADC_ConfigureBoostMode+0x1d8>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d80a      	bhi.n	80070a2 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800709e:	609a      	str	r2, [r3, #8]
}
 80070a0:	e007      	b.n	80070b2 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	689a      	ldr	r2, [r3, #8]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80070b0:	609a      	str	r2, [r3, #8]
}
 80070b2:	bf00      	nop
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	40022000 	.word	0x40022000
 80070c0:	40022100 	.word	0x40022100
 80070c4:	40022300 	.word	0x40022300
 80070c8:	58026300 	.word	0x58026300
 80070cc:	005f5e10 	.word	0x005f5e10
 80070d0:	00bebc20 	.word	0x00bebc20
 80070d4:	017d7840 	.word	0x017d7840

080070d8 <LL_ADC_IsEnabled>:
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d101      	bne.n	80070f0 <LL_ADC_IsEnabled+0x18>
 80070ec:	2301      	movs	r3, #1
 80070ee:	e000      	b.n	80070f2 <LL_ADC_IsEnabled+0x1a>
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	370c      	adds	r7, #12
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
	...

08007100 <LL_ADC_StartCalibration>:
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	689a      	ldr	r2, [r3, #8]
 8007110:	4b09      	ldr	r3, [pc, #36]	@ (8007138 <LL_ADC_StartCalibration+0x38>)
 8007112:	4013      	ands	r3, r2
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007120:	430a      	orrs	r2, r1
 8007122:	4313      	orrs	r3, r2
 8007124:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	609a      	str	r2, [r3, #8]
}
 800712c:	bf00      	nop
 800712e:	3714      	adds	r7, #20
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr
 8007138:	3ffeffc0 	.word	0x3ffeffc0

0800713c <LL_ADC_IsCalibrationOnGoing>:
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800714c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007150:	d101      	bne.n	8007156 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8007152:	2301      	movs	r3, #1
 8007154:	e000      	b.n	8007158 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <LL_ADC_REG_StartConversion>:
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	689a      	ldr	r2, [r3, #8]
 8007170:	4b05      	ldr	r3, [pc, #20]	@ (8007188 <LL_ADC_REG_StartConversion+0x24>)
 8007172:	4013      	ands	r3, r2
 8007174:	f043 0204 	orr.w	r2, r3, #4
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	609a      	str	r2, [r3, #8]
}
 800717c:	bf00      	nop
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr
 8007188:	7fffffc0 	.word	0x7fffffc0

0800718c <LL_ADC_REG_IsConversionOngoing>:
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f003 0304 	and.w	r3, r3, #4
 800719c:	2b04      	cmp	r3, #4
 800719e:	d101      	bne.n	80071a4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80071a0:	2301      	movs	r3, #1
 80071a2:	e000      	b.n	80071a6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	370c      	adds	r7, #12
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
	...

080071b4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b086      	sub	sp, #24
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80071c0:	2300      	movs	r3, #0
 80071c2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d101      	bne.n	80071d2 <HAL_ADCEx_Calibration_Start+0x1e>
 80071ce:	2302      	movs	r3, #2
 80071d0:	e04c      	b.n	800726c <HAL_ADCEx_Calibration_Start+0xb8>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f7ff fd9a 	bl	8006d14 <ADC_Disable>
 80071e0:	4603      	mov	r3, r0
 80071e2:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80071e4:	7dfb      	ldrb	r3, [r7, #23]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d135      	bne.n	8007256 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80071ee:	4b21      	ldr	r3, [pc, #132]	@ (8007274 <HAL_ADCEx_Calibration_Start+0xc0>)
 80071f0:	4013      	ands	r3, r2
 80071f2:	f043 0202 	orr.w	r2, r3, #2
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	661a      	str	r2, [r3, #96]	@ 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	68b9      	ldr	r1, [r7, #8]
 8007202:	4618      	mov	r0, r3
 8007204:	f7ff ff7c 	bl	8007100 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007208:	e014      	b.n	8007234 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	3301      	adds	r3, #1
 800720e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	4a19      	ldr	r2, [pc, #100]	@ (8007278 <HAL_ADCEx_Calibration_Start+0xc4>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d30d      	bcc.n	8007234 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800721c:	f023 0312 	bic.w	r3, r3, #18
 8007220:	f043 0210 	orr.w	r2, r3, #16
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	e01b      	b.n	800726c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4618      	mov	r0, r3
 800723a:	f7ff ff7f 	bl	800713c <LL_ADC_IsCalibrationOnGoing>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1e2      	bne.n	800720a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007248:	f023 0303 	bic.w	r3, r3, #3
 800724c:	f043 0201 	orr.w	r2, r3, #1
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	661a      	str	r2, [r3, #96]	@ 0x60
 8007254:	e005      	b.n	8007262 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800725a:	f043 0210 	orr.w	r2, r3, #16
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800726a:	7dfb      	ldrb	r3, [r7, #23]
}
 800726c:	4618      	mov	r0, r3
 800726e:	3718      	adds	r7, #24
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	ffffeefd 	.word	0xffffeefd
 8007278:	25c3f800 	.word	0x25c3f800

0800727c <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b0a2      	sub	sp, #136	@ 0x88
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4618      	mov	r0, r3
 800728e:	f7ff ff7d 	bl	800718c <LL_ADC_REG_IsConversionOngoing>
 8007292:	4603      	mov	r3, r0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d001      	beq.n	800729c <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8007298:	2302      	movs	r3, #2
 800729a:	e08c      	b.n	80073b6 <HAL_ADCEx_MultiModeStart_DMA+0x13a>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d101      	bne.n	80072aa <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 80072a6:	2302      	movs	r3, #2
 80072a8:	e085      	b.n	80073b6 <HAL_ADCEx_MultiModeStart_DMA+0x13a>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2201      	movs	r2, #1
 80072ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80072b2:	2300      	movs	r3, #0
 80072b4:	673b      	str	r3, [r7, #112]	@ 0x70
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80072b6:	2300      	movs	r3, #0
 80072b8:	677b      	str	r3, [r7, #116]	@ 0x74
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a40      	ldr	r2, [pc, #256]	@ (80073c0 <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d102      	bne.n	80072ca <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 80072c4:	4b3f      	ldr	r3, [pc, #252]	@ (80073c4 <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 80072c6:	613b      	str	r3, [r7, #16]
 80072c8:	e001      	b.n	80072ce <HAL_ADCEx_MultiModeStart_DMA+0x52>
 80072ca:	2300      	movs	r3, #0
 80072cc:	613b      	str	r3, [r7, #16]

    if (tmphadcSlave.Instance == NULL)
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10b      	bne.n	80072ec <HAL_ADCEx_MultiModeStart_DMA+0x70>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072d8:	f043 0220 	orr.w	r2, r3, #32
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e064      	b.n	80073b6 <HAL_ADCEx_MultiModeStart_DMA+0x13a>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f7ff fc87 	bl	8006c00 <ADC_Enable>
 80072f2:	4603      	mov	r3, r0
 80072f4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    if (tmp_hal_status == HAL_OK)
 80072f8:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d107      	bne.n	8007310 <HAL_ADCEx_MultiModeStart_DMA+0x94>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8007300:	f107 0310 	add.w	r3, r7, #16
 8007304:	4618      	mov	r0, r3
 8007306:	f7ff fc7b 	bl	8006c00 <ADC_Enable>
 800730a:	4603      	mov	r3, r0
 800730c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8007310:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8007314:	2b00      	cmp	r3, #0
 8007316:	d148      	bne.n	80073aa <HAL_ADCEx_MultiModeStart_DMA+0x12e>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800731c:	4b2a      	ldr	r3, [pc, #168]	@ (80073c8 <HAL_ADCEx_MultiModeStart_DMA+0x14c>)
 800731e:	4013      	ands	r3, r2
 8007320:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	661a      	str	r2, [r3, #96]	@ 0x60
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2200      	movs	r2, #0
 800732c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007332:	4a26      	ldr	r2, [pc, #152]	@ (80073cc <HAL_ADCEx_MultiModeStart_DMA+0x150>)
 8007334:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800733a:	4a25      	ldr	r2, [pc, #148]	@ (80073d0 <HAL_ADCEx_MultiModeStart_DMA+0x154>)
 800733c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007342:	4a24      	ldr	r2, [pc, #144]	@ (80073d4 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 8007344:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a1d      	ldr	r2, [pc, #116]	@ (80073c0 <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d004      	beq.n	800735a <HAL_ADCEx_MultiModeStart_DMA+0xde>
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a1b      	ldr	r2, [pc, #108]	@ (80073c4 <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d101      	bne.n	800735e <HAL_ADCEx_MultiModeStart_DMA+0xe2>
 800735a:	4b1f      	ldr	r3, [pc, #124]	@ (80073d8 <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 800735c:	e000      	b.n	8007360 <HAL_ADCEx_MultiModeStart_DMA+0xe4>
 800735e:	4b1f      	ldr	r3, [pc, #124]	@ (80073dc <HAL_ADCEx_MultiModeStart_DMA+0x160>)
 8007360:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	221c      	movs	r2, #28
 800736a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2200      	movs	r2, #0
 8007370:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	685a      	ldr	r2, [r3, #4]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f042 0210 	orr.w	r2, r2, #16
 8007382:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8007388:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800738c:	330c      	adds	r3, #12
 800738e:	4619      	mov	r1, r3
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f000 feca 	bl	800812c <HAL_DMA_Start_IT>
 8007398:	4603      	mov	r3, r0
 800739a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7ff fede 	bl	8007164 <LL_ADC_REG_StartConversion>
 80073a8:	e003      	b.n	80073b2 <HAL_ADCEx_MultiModeStart_DMA+0x136>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    }

    /* Return function status */
    return tmp_hal_status;
 80073b2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
  }
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3788      	adds	r7, #136	@ 0x88
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	40022000 	.word	0x40022000
 80073c4:	40022100 	.word	0x40022100
 80073c8:	fffff0fe 	.word	0xfffff0fe
 80073cc:	08006dd3 	.word	0x08006dd3
 80073d0:	08006eab 	.word	0x08006eab
 80073d4:	08006ec7 	.word	0x08006ec7
 80073d8:	40022300 	.word	0x40022300
 80073dc:	58026300 	.word	0x58026300

080073e0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80073e8:	bf00      	nop
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80073fc:	bf00      	nop
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8007444:	b590      	push	{r4, r7, lr}
 8007446:	b0a3      	sub	sp, #140	@ 0x8c
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800744e:	2300      	movs	r3, #0
 8007450:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800745a:	2b01      	cmp	r3, #1
 800745c:	d101      	bne.n	8007462 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800745e:	2302      	movs	r3, #2
 8007460:	e0c1      	b.n	80075e6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800746a:	2300      	movs	r3, #0
 800746c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800746e:	2300      	movs	r3, #0
 8007470:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a5e      	ldr	r2, [pc, #376]	@ (80075f0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d102      	bne.n	8007482 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800747c:	4b5d      	ldr	r3, [pc, #372]	@ (80075f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800747e:	60fb      	str	r3, [r7, #12]
 8007480:	e001      	b.n	8007486 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8007482:	2300      	movs	r3, #0
 8007484:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d10b      	bne.n	80074a4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007490:	f043 0220 	orr.w	r2, r3, #32
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	e0a0      	b.n	80075e6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7ff fe70 	bl	800718c <LL_ADC_REG_IsConversionOngoing>
 80074ac:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7ff fe69 	bl	800718c <LL_ADC_REG_IsConversionOngoing>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f040 8081 	bne.w	80075c4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80074c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d17c      	bne.n	80075c4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a48      	ldr	r2, [pc, #288]	@ (80075f0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d004      	beq.n	80074de <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a46      	ldr	r2, [pc, #280]	@ (80075f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d101      	bne.n	80074e2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80074de:	4b46      	ldr	r3, [pc, #280]	@ (80075f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80074e0:	e000      	b.n	80074e4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80074e2:	4b46      	ldr	r3, [pc, #280]	@ (80075fc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80074e4:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d039      	beq.n	8007562 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80074ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	431a      	orrs	r2, r3
 80074fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80074fe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a3a      	ldr	r2, [pc, #232]	@ (80075f0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d004      	beq.n	8007514 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a39      	ldr	r2, [pc, #228]	@ (80075f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d10e      	bne.n	8007532 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8007514:	4836      	ldr	r0, [pc, #216]	@ (80075f0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007516:	f7ff fddf 	bl	80070d8 <LL_ADC_IsEnabled>
 800751a:	4604      	mov	r4, r0
 800751c:	4835      	ldr	r0, [pc, #212]	@ (80075f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800751e:	f7ff fddb 	bl	80070d8 <LL_ADC_IsEnabled>
 8007522:	4603      	mov	r3, r0
 8007524:	4323      	orrs	r3, r4
 8007526:	2b00      	cmp	r3, #0
 8007528:	bf0c      	ite	eq
 800752a:	2301      	moveq	r3, #1
 800752c:	2300      	movne	r3, #0
 800752e:	b2db      	uxtb	r3, r3
 8007530:	e008      	b.n	8007544 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8007532:	4833      	ldr	r0, [pc, #204]	@ (8007600 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8007534:	f7ff fdd0 	bl	80070d8 <LL_ADC_IsEnabled>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	bf0c      	ite	eq
 800753e:	2301      	moveq	r3, #1
 8007540:	2300      	movne	r3, #0
 8007542:	b2db      	uxtb	r3, r3
 8007544:	2b00      	cmp	r3, #0
 8007546:	d047      	beq.n	80075d8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007548:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800754a:	689a      	ldr	r2, [r3, #8]
 800754c:	4b2d      	ldr	r3, [pc, #180]	@ (8007604 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800754e:	4013      	ands	r3, r2
 8007550:	683a      	ldr	r2, [r7, #0]
 8007552:	6811      	ldr	r1, [r2, #0]
 8007554:	683a      	ldr	r2, [r7, #0]
 8007556:	6892      	ldr	r2, [r2, #8]
 8007558:	430a      	orrs	r2, r1
 800755a:	431a      	orrs	r2, r3
 800755c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800755e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007560:	e03a      	b.n	80075d8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8007562:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800756a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800756c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a1f      	ldr	r2, [pc, #124]	@ (80075f0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d004      	beq.n	8007582 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a1d      	ldr	r2, [pc, #116]	@ (80075f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d10e      	bne.n	80075a0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8007582:	481b      	ldr	r0, [pc, #108]	@ (80075f0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007584:	f7ff fda8 	bl	80070d8 <LL_ADC_IsEnabled>
 8007588:	4604      	mov	r4, r0
 800758a:	481a      	ldr	r0, [pc, #104]	@ (80075f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800758c:	f7ff fda4 	bl	80070d8 <LL_ADC_IsEnabled>
 8007590:	4603      	mov	r3, r0
 8007592:	4323      	orrs	r3, r4
 8007594:	2b00      	cmp	r3, #0
 8007596:	bf0c      	ite	eq
 8007598:	2301      	moveq	r3, #1
 800759a:	2300      	movne	r3, #0
 800759c:	b2db      	uxtb	r3, r3
 800759e:	e008      	b.n	80075b2 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80075a0:	4817      	ldr	r0, [pc, #92]	@ (8007600 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80075a2:	f7ff fd99 	bl	80070d8 <LL_ADC_IsEnabled>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	bf0c      	ite	eq
 80075ac:	2301      	moveq	r3, #1
 80075ae:	2300      	movne	r3, #0
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d010      	beq.n	80075d8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80075b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80075b8:	689a      	ldr	r2, [r3, #8]
 80075ba:	4b12      	ldr	r3, [pc, #72]	@ (8007604 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80075bc:	4013      	ands	r3, r2
 80075be:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80075c0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80075c2:	e009      	b.n	80075d8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075c8:	f043 0220 	orr.w	r2, r3, #32
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80075d6:	e000      	b.n	80075da <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80075d8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80075e2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	378c      	adds	r7, #140	@ 0x8c
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd90      	pop	{r4, r7, pc}
 80075ee:	bf00      	nop
 80075f0:	40022000 	.word	0x40022000
 80075f4:	40022100 	.word	0x40022100
 80075f8:	40022300 	.word	0x40022300
 80075fc:	58026300 	.word	0x58026300
 8007600:	58026000 	.word	0x58026000
 8007604:	fffff0e0 	.word	0xfffff0e0

08007608 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b088      	sub	sp, #32
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8007610:	2300      	movs	r3, #0
 8007612:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 8007614:	2300      	movs	r3, #0
 8007616:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d102      	bne.n	8007624 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	77fb      	strb	r3, [r7, #31]
 8007622:	e10e      	b.n	8007842 <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800762e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007632:	d102      	bne.n	800763a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	77fb      	strb	r3, [r7, #31]
 8007638:	e103      	b.n	8007842 <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007640:	b2db      	uxtb	r3, r3
 8007642:	2b00      	cmp	r3, #0
 8007644:	d109      	bne.n	800765a <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f7fc fab9 	bl	8003bcc <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 0304 	and.w	r3, r3, #4
 8007664:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800766e:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 8007674:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 800767a:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 8007680:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8007686:	4313      	orrs	r3, r2
 8007688:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	4b6e      	ldr	r3, [pc, #440]	@ (800784c <HAL_COMP_Init+0x244>)
 8007692:	4013      	ands	r3, r2
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	6812      	ldr	r2, [r2, #0]
 8007698:	6979      	ldr	r1, [r7, #20]
 800769a:	430b      	orrs	r3, r1
 800769c:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	2b10      	cmp	r3, #16
 80076a4:	d108      	bne.n	80076b8 <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f042 0210 	orr.w	r2, r2, #16
 80076b4:	601a      	str	r2, [r3, #0]
 80076b6:	e007      	b.n	80076c8 <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f022 0210 	bic.w	r2, r2, #16
 80076c6:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 0304 	and.w	r3, r3, #4
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d016      	beq.n	8007704 <HAL_COMP_Init+0xfc>
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d013      	beq.n	8007704 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80076dc:	4b5c      	ldr	r3, [pc, #368]	@ (8007850 <HAL_COMP_Init+0x248>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	099b      	lsrs	r3, r3, #6
 80076e2:	4a5c      	ldr	r2, [pc, #368]	@ (8007854 <HAL_COMP_Init+0x24c>)
 80076e4:	fba2 2303 	umull	r2, r3, r2, r3
 80076e8:	099b      	lsrs	r3, r3, #6
 80076ea:	1c5a      	adds	r2, r3, #1
 80076ec:	4613      	mov	r3, r2
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	4413      	add	r3, r2
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 80076f6:	e002      	b.n	80076fe <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	3b01      	subs	r3, #1
 80076fc:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d1f9      	bne.n	80076f8 <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a53      	ldr	r2, [pc, #332]	@ (8007858 <HAL_COMP_Init+0x250>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d102      	bne.n	8007714 <HAL_COMP_Init+0x10c>
 800770e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007712:	e001      	b.n	8007718 <HAL_COMP_Init+0x110>
 8007714:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007718:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a1b      	ldr	r3, [r3, #32]
 800771e:	f003 0303 	and.w	r3, r3, #3
 8007722:	2b00      	cmp	r3, #0
 8007724:	d06d      	beq.n	8007802 <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a1b      	ldr	r3, [r3, #32]
 800772a:	f003 0310 	and.w	r3, r3, #16
 800772e:	2b00      	cmp	r3, #0
 8007730:	d008      	beq.n	8007744 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 8007732:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	4313      	orrs	r3, r2
 8007740:	600b      	str	r3, [r1, #0]
 8007742:	e008      	b.n	8007756 <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 8007744:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	43db      	mvns	r3, r3
 800774e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007752:	4013      	ands	r3, r2
 8007754:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a1b      	ldr	r3, [r3, #32]
 800775a:	f003 0320 	and.w	r3, r3, #32
 800775e:	2b00      	cmp	r3, #0
 8007760:	d008      	beq.n	8007774 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 8007762:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007766:	685a      	ldr	r2, [r3, #4]
 8007768:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	4313      	orrs	r3, r2
 8007770:	604b      	str	r3, [r1, #4]
 8007772:	e008      	b.n	8007786 <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 8007774:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007778:	685a      	ldr	r2, [r3, #4]
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	43db      	mvns	r3, r3
 800777e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007782:	4013      	ands	r3, r2
 8007784:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 8007786:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a1b      	ldr	r3, [r3, #32]
 8007794:	f003 0302 	and.w	r3, r3, #2
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00a      	beq.n	80077b2 <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 800779c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077a0:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80077a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 80077b0:	e00a      	b.n	80077c8 <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 80077b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077b6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	43db      	mvns	r3, r3
 80077be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80077c2:	4013      	ands	r3, r2
 80077c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a1b      	ldr	r3, [r3, #32]
 80077cc:	f003 0301 	and.w	r3, r3, #1
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d00a      	beq.n	80077ea <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 80077d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077d8:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80077dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 80077e8:	e021      	b.n	800782e <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 80077ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077ee:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	43db      	mvns	r3, r3
 80077f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80077fa:	4013      	ands	r3, r2
 80077fc:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 8007800:	e015      	b.n	800782e <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 8007802:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007806:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	43db      	mvns	r3, r3
 800780e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007812:	4013      	ands	r3, r2
 8007814:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 8007818:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800781c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	43db      	mvns	r3, r3
 8007824:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007828:	4013      	ands	r3, r2
 800782a:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d103      	bne.n	8007842 <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2201      	movs	r2, #1
 800783e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
   
  }
  
  return status;
 8007842:	7ffb      	ldrb	r3, [r7, #31]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3720      	adds	r7, #32
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	f0e8cce1 	.word	0xf0e8cce1
 8007850:	24000038 	.word	0x24000038
 8007854:	053e2d63 	.word	0x053e2d63
 8007858:	5800380c 	.word	0x5800380c

0800785c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f003 0307 	and.w	r3, r3, #7
 800786a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800786c:	4b0b      	ldr	r3, [pc, #44]	@ (800789c <__NVIC_SetPriorityGrouping+0x40>)
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007872:	68ba      	ldr	r2, [r7, #8]
 8007874:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007878:	4013      	ands	r3, r2
 800787a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007884:	4b06      	ldr	r3, [pc, #24]	@ (80078a0 <__NVIC_SetPriorityGrouping+0x44>)
 8007886:	4313      	orrs	r3, r2
 8007888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800788a:	4a04      	ldr	r2, [pc, #16]	@ (800789c <__NVIC_SetPriorityGrouping+0x40>)
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	60d3      	str	r3, [r2, #12]
}
 8007890:	bf00      	nop
 8007892:	3714      	adds	r7, #20
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr
 800789c:	e000ed00 	.word	0xe000ed00
 80078a0:	05fa0000 	.word	0x05fa0000

080078a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80078a4:	b480      	push	{r7}
 80078a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80078a8:	4b04      	ldr	r3, [pc, #16]	@ (80078bc <__NVIC_GetPriorityGrouping+0x18>)
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	0a1b      	lsrs	r3, r3, #8
 80078ae:	f003 0307 	and.w	r3, r3, #7
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr
 80078bc:	e000ed00 	.word	0xe000ed00

080078c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	4603      	mov	r3, r0
 80078c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80078ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	db0b      	blt.n	80078ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80078d2:	88fb      	ldrh	r3, [r7, #6]
 80078d4:	f003 021f 	and.w	r2, r3, #31
 80078d8:	4907      	ldr	r1, [pc, #28]	@ (80078f8 <__NVIC_EnableIRQ+0x38>)
 80078da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80078de:	095b      	lsrs	r3, r3, #5
 80078e0:	2001      	movs	r0, #1
 80078e2:	fa00 f202 	lsl.w	r2, r0, r2
 80078e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80078ea:	bf00      	nop
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	e000e100 	.word	0xe000e100

080078fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	4603      	mov	r3, r0
 8007904:	6039      	str	r1, [r7, #0]
 8007906:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007908:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800790c:	2b00      	cmp	r3, #0
 800790e:	db0a      	blt.n	8007926 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	b2da      	uxtb	r2, r3
 8007914:	490c      	ldr	r1, [pc, #48]	@ (8007948 <__NVIC_SetPriority+0x4c>)
 8007916:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800791a:	0112      	lsls	r2, r2, #4
 800791c:	b2d2      	uxtb	r2, r2
 800791e:	440b      	add	r3, r1
 8007920:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007924:	e00a      	b.n	800793c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	b2da      	uxtb	r2, r3
 800792a:	4908      	ldr	r1, [pc, #32]	@ (800794c <__NVIC_SetPriority+0x50>)
 800792c:	88fb      	ldrh	r3, [r7, #6]
 800792e:	f003 030f 	and.w	r3, r3, #15
 8007932:	3b04      	subs	r3, #4
 8007934:	0112      	lsls	r2, r2, #4
 8007936:	b2d2      	uxtb	r2, r2
 8007938:	440b      	add	r3, r1
 800793a:	761a      	strb	r2, [r3, #24]
}
 800793c:	bf00      	nop
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr
 8007948:	e000e100 	.word	0xe000e100
 800794c:	e000ed00 	.word	0xe000ed00

08007950 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007950:	b480      	push	{r7}
 8007952:	b089      	sub	sp, #36	@ 0x24
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f003 0307 	and.w	r3, r3, #7
 8007962:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	f1c3 0307 	rsb	r3, r3, #7
 800796a:	2b04      	cmp	r3, #4
 800796c:	bf28      	it	cs
 800796e:	2304      	movcs	r3, #4
 8007970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	3304      	adds	r3, #4
 8007976:	2b06      	cmp	r3, #6
 8007978:	d902      	bls.n	8007980 <NVIC_EncodePriority+0x30>
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	3b03      	subs	r3, #3
 800797e:	e000      	b.n	8007982 <NVIC_EncodePriority+0x32>
 8007980:	2300      	movs	r3, #0
 8007982:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007984:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	fa02 f303 	lsl.w	r3, r2, r3
 800798e:	43da      	mvns	r2, r3
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	401a      	ands	r2, r3
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007998:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	fa01 f303 	lsl.w	r3, r1, r3
 80079a2:	43d9      	mvns	r1, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079a8:	4313      	orrs	r3, r2
         );
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3724      	adds	r7, #36	@ 0x24
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr
	...

080079b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	3b01      	subs	r3, #1
 80079c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80079c8:	d301      	bcc.n	80079ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80079ca:	2301      	movs	r3, #1
 80079cc:	e00f      	b.n	80079ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80079ce:	4a0a      	ldr	r2, [pc, #40]	@ (80079f8 <SysTick_Config+0x40>)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	3b01      	subs	r3, #1
 80079d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80079d6:	210f      	movs	r1, #15
 80079d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80079dc:	f7ff ff8e 	bl	80078fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80079e0:	4b05      	ldr	r3, [pc, #20]	@ (80079f8 <SysTick_Config+0x40>)
 80079e2:	2200      	movs	r2, #0
 80079e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80079e6:	4b04      	ldr	r3, [pc, #16]	@ (80079f8 <SysTick_Config+0x40>)
 80079e8:	2207      	movs	r2, #7
 80079ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3708      	adds	r7, #8
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	e000e010 	.word	0xe000e010

080079fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f7ff ff29 	bl	800785c <__NVIC_SetPriorityGrouping>
}
 8007a0a:	bf00      	nop
 8007a0c:	3708      	adds	r7, #8
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b086      	sub	sp, #24
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	4603      	mov	r3, r0
 8007a1a:	60b9      	str	r1, [r7, #8]
 8007a1c:	607a      	str	r2, [r7, #4]
 8007a1e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007a20:	f7ff ff40 	bl	80078a4 <__NVIC_GetPriorityGrouping>
 8007a24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	68b9      	ldr	r1, [r7, #8]
 8007a2a:	6978      	ldr	r0, [r7, #20]
 8007a2c:	f7ff ff90 	bl	8007950 <NVIC_EncodePriority>
 8007a30:	4602      	mov	r2, r0
 8007a32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007a36:	4611      	mov	r1, r2
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7ff ff5f 	bl	80078fc <__NVIC_SetPriority>
}
 8007a3e:	bf00      	nop
 8007a40:	3718      	adds	r7, #24
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b082      	sub	sp, #8
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007a50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7ff ff33 	bl	80078c0 <__NVIC_EnableIRQ>
}
 8007a5a:	bf00      	nop
 8007a5c:	3708      	adds	r7, #8
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b082      	sub	sp, #8
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f7ff ffa4 	bl	80079b8 <SysTick_Config>
 8007a70:	4603      	mov	r3, r0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3708      	adds	r7, #8
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
	...

08007a7c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b086      	sub	sp, #24
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007a84:	f7fc fe4e 	bl	8004724 <HAL_GetTick>
 8007a88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d101      	bne.n	8007a94 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	e312      	b.n	80080ba <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a66      	ldr	r2, [pc, #408]	@ (8007c34 <HAL_DMA_Init+0x1b8>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d04a      	beq.n	8007b34 <HAL_DMA_Init+0xb8>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a65      	ldr	r2, [pc, #404]	@ (8007c38 <HAL_DMA_Init+0x1bc>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d045      	beq.n	8007b34 <HAL_DMA_Init+0xb8>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a63      	ldr	r2, [pc, #396]	@ (8007c3c <HAL_DMA_Init+0x1c0>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d040      	beq.n	8007b34 <HAL_DMA_Init+0xb8>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a62      	ldr	r2, [pc, #392]	@ (8007c40 <HAL_DMA_Init+0x1c4>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d03b      	beq.n	8007b34 <HAL_DMA_Init+0xb8>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a60      	ldr	r2, [pc, #384]	@ (8007c44 <HAL_DMA_Init+0x1c8>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d036      	beq.n	8007b34 <HAL_DMA_Init+0xb8>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a5f      	ldr	r2, [pc, #380]	@ (8007c48 <HAL_DMA_Init+0x1cc>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d031      	beq.n	8007b34 <HAL_DMA_Init+0xb8>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a5d      	ldr	r2, [pc, #372]	@ (8007c4c <HAL_DMA_Init+0x1d0>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d02c      	beq.n	8007b34 <HAL_DMA_Init+0xb8>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a5c      	ldr	r2, [pc, #368]	@ (8007c50 <HAL_DMA_Init+0x1d4>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d027      	beq.n	8007b34 <HAL_DMA_Init+0xb8>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a5a      	ldr	r2, [pc, #360]	@ (8007c54 <HAL_DMA_Init+0x1d8>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d022      	beq.n	8007b34 <HAL_DMA_Init+0xb8>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a59      	ldr	r2, [pc, #356]	@ (8007c58 <HAL_DMA_Init+0x1dc>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d01d      	beq.n	8007b34 <HAL_DMA_Init+0xb8>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a57      	ldr	r2, [pc, #348]	@ (8007c5c <HAL_DMA_Init+0x1e0>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d018      	beq.n	8007b34 <HAL_DMA_Init+0xb8>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a56      	ldr	r2, [pc, #344]	@ (8007c60 <HAL_DMA_Init+0x1e4>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d013      	beq.n	8007b34 <HAL_DMA_Init+0xb8>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a54      	ldr	r2, [pc, #336]	@ (8007c64 <HAL_DMA_Init+0x1e8>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d00e      	beq.n	8007b34 <HAL_DMA_Init+0xb8>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a53      	ldr	r2, [pc, #332]	@ (8007c68 <HAL_DMA_Init+0x1ec>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d009      	beq.n	8007b34 <HAL_DMA_Init+0xb8>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a51      	ldr	r2, [pc, #324]	@ (8007c6c <HAL_DMA_Init+0x1f0>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d004      	beq.n	8007b34 <HAL_DMA_Init+0xb8>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a50      	ldr	r2, [pc, #320]	@ (8007c70 <HAL_DMA_Init+0x1f4>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d101      	bne.n	8007b38 <HAL_DMA_Init+0xbc>
 8007b34:	2301      	movs	r3, #1
 8007b36:	e000      	b.n	8007b3a <HAL_DMA_Init+0xbe>
 8007b38:	2300      	movs	r3, #0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f000 813c 	beq.w	8007db8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2202      	movs	r2, #2
 8007b44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a37      	ldr	r2, [pc, #220]	@ (8007c34 <HAL_DMA_Init+0x1b8>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d04a      	beq.n	8007bf0 <HAL_DMA_Init+0x174>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a36      	ldr	r2, [pc, #216]	@ (8007c38 <HAL_DMA_Init+0x1bc>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d045      	beq.n	8007bf0 <HAL_DMA_Init+0x174>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a34      	ldr	r2, [pc, #208]	@ (8007c3c <HAL_DMA_Init+0x1c0>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d040      	beq.n	8007bf0 <HAL_DMA_Init+0x174>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a33      	ldr	r2, [pc, #204]	@ (8007c40 <HAL_DMA_Init+0x1c4>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d03b      	beq.n	8007bf0 <HAL_DMA_Init+0x174>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a31      	ldr	r2, [pc, #196]	@ (8007c44 <HAL_DMA_Init+0x1c8>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d036      	beq.n	8007bf0 <HAL_DMA_Init+0x174>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a30      	ldr	r2, [pc, #192]	@ (8007c48 <HAL_DMA_Init+0x1cc>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d031      	beq.n	8007bf0 <HAL_DMA_Init+0x174>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a2e      	ldr	r2, [pc, #184]	@ (8007c4c <HAL_DMA_Init+0x1d0>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d02c      	beq.n	8007bf0 <HAL_DMA_Init+0x174>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a2d      	ldr	r2, [pc, #180]	@ (8007c50 <HAL_DMA_Init+0x1d4>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d027      	beq.n	8007bf0 <HAL_DMA_Init+0x174>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a2b      	ldr	r2, [pc, #172]	@ (8007c54 <HAL_DMA_Init+0x1d8>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d022      	beq.n	8007bf0 <HAL_DMA_Init+0x174>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a2a      	ldr	r2, [pc, #168]	@ (8007c58 <HAL_DMA_Init+0x1dc>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d01d      	beq.n	8007bf0 <HAL_DMA_Init+0x174>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a28      	ldr	r2, [pc, #160]	@ (8007c5c <HAL_DMA_Init+0x1e0>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d018      	beq.n	8007bf0 <HAL_DMA_Init+0x174>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a27      	ldr	r2, [pc, #156]	@ (8007c60 <HAL_DMA_Init+0x1e4>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d013      	beq.n	8007bf0 <HAL_DMA_Init+0x174>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a25      	ldr	r2, [pc, #148]	@ (8007c64 <HAL_DMA_Init+0x1e8>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d00e      	beq.n	8007bf0 <HAL_DMA_Init+0x174>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a24      	ldr	r2, [pc, #144]	@ (8007c68 <HAL_DMA_Init+0x1ec>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d009      	beq.n	8007bf0 <HAL_DMA_Init+0x174>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a22      	ldr	r2, [pc, #136]	@ (8007c6c <HAL_DMA_Init+0x1f0>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d004      	beq.n	8007bf0 <HAL_DMA_Init+0x174>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a21      	ldr	r2, [pc, #132]	@ (8007c70 <HAL_DMA_Init+0x1f4>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d108      	bne.n	8007c02 <HAL_DMA_Init+0x186>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f022 0201 	bic.w	r2, r2, #1
 8007bfe:	601a      	str	r2, [r3, #0]
 8007c00:	e007      	b.n	8007c12 <HAL_DMA_Init+0x196>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f022 0201 	bic.w	r2, r2, #1
 8007c10:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007c12:	e02f      	b.n	8007c74 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007c14:	f7fc fd86 	bl	8004724 <HAL_GetTick>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	1ad3      	subs	r3, r2, r3
 8007c1e:	2b05      	cmp	r3, #5
 8007c20:	d928      	bls.n	8007c74 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2220      	movs	r2, #32
 8007c26:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2203      	movs	r2, #3
 8007c2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e242      	b.n	80080ba <HAL_DMA_Init+0x63e>
 8007c34:	40020010 	.word	0x40020010
 8007c38:	40020028 	.word	0x40020028
 8007c3c:	40020040 	.word	0x40020040
 8007c40:	40020058 	.word	0x40020058
 8007c44:	40020070 	.word	0x40020070
 8007c48:	40020088 	.word	0x40020088
 8007c4c:	400200a0 	.word	0x400200a0
 8007c50:	400200b8 	.word	0x400200b8
 8007c54:	40020410 	.word	0x40020410
 8007c58:	40020428 	.word	0x40020428
 8007c5c:	40020440 	.word	0x40020440
 8007c60:	40020458 	.word	0x40020458
 8007c64:	40020470 	.word	0x40020470
 8007c68:	40020488 	.word	0x40020488
 8007c6c:	400204a0 	.word	0x400204a0
 8007c70:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 0301 	and.w	r3, r3, #1
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1c8      	bne.n	8007c14 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007c8a:	697a      	ldr	r2, [r7, #20]
 8007c8c:	4b83      	ldr	r3, [pc, #524]	@ (8007e9c <HAL_DMA_Init+0x420>)
 8007c8e:	4013      	ands	r3, r2
 8007c90:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007c9a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ca6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007cb2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a1b      	ldr	r3, [r3, #32]
 8007cb8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007cba:	697a      	ldr	r2, [r7, #20]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cc4:	2b04      	cmp	r3, #4
 8007cc6:	d107      	bne.n	8007cd8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	2b28      	cmp	r3, #40	@ 0x28
 8007cde:	d903      	bls.n	8007ce8 <HAL_DMA_Init+0x26c>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ce6:	d91f      	bls.n	8007d28 <HAL_DMA_Init+0x2ac>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	2b3e      	cmp	r3, #62	@ 0x3e
 8007cee:	d903      	bls.n	8007cf8 <HAL_DMA_Init+0x27c>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	2b42      	cmp	r3, #66	@ 0x42
 8007cf6:	d917      	bls.n	8007d28 <HAL_DMA_Init+0x2ac>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	2b46      	cmp	r3, #70	@ 0x46
 8007cfe:	d903      	bls.n	8007d08 <HAL_DMA_Init+0x28c>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	2b48      	cmp	r3, #72	@ 0x48
 8007d06:	d90f      	bls.n	8007d28 <HAL_DMA_Init+0x2ac>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	2b4e      	cmp	r3, #78	@ 0x4e
 8007d0e:	d903      	bls.n	8007d18 <HAL_DMA_Init+0x29c>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	2b52      	cmp	r3, #82	@ 0x52
 8007d16:	d907      	bls.n	8007d28 <HAL_DMA_Init+0x2ac>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	2b73      	cmp	r3, #115	@ 0x73
 8007d1e:	d905      	bls.n	8007d2c <HAL_DMA_Init+0x2b0>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	2b77      	cmp	r3, #119	@ 0x77
 8007d26:	d801      	bhi.n	8007d2c <HAL_DMA_Init+0x2b0>
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e000      	b.n	8007d2e <HAL_DMA_Init+0x2b2>
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d003      	beq.n	8007d3a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d38:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	697a      	ldr	r2, [r7, #20]
 8007d40:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	695b      	ldr	r3, [r3, #20]
 8007d48:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	f023 0307 	bic.w	r3, r3, #7
 8007d50:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d56:	697a      	ldr	r2, [r7, #20]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d60:	2b04      	cmp	r3, #4
 8007d62:	d117      	bne.n	8007d94 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d68:	697a      	ldr	r2, [r7, #20]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00e      	beq.n	8007d94 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f001 fdca 	bl	8009910 <DMA_CheckFifoParam>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d008      	beq.n	8007d94 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2240      	movs	r2, #64	@ 0x40
 8007d86:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	e192      	b.n	80080ba <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	697a      	ldr	r2, [r7, #20]
 8007d9a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f001 fd05 	bl	80097ac <DMA_CalcBaseAndBitshift>
 8007da2:	4603      	mov	r3, r0
 8007da4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007daa:	f003 031f 	and.w	r3, r3, #31
 8007dae:	223f      	movs	r2, #63	@ 0x3f
 8007db0:	409a      	lsls	r2, r3
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	609a      	str	r2, [r3, #8]
 8007db6:	e0c8      	b.n	8007f4a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a38      	ldr	r2, [pc, #224]	@ (8007ea0 <HAL_DMA_Init+0x424>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d022      	beq.n	8007e08 <HAL_DMA_Init+0x38c>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a37      	ldr	r2, [pc, #220]	@ (8007ea4 <HAL_DMA_Init+0x428>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d01d      	beq.n	8007e08 <HAL_DMA_Init+0x38c>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a35      	ldr	r2, [pc, #212]	@ (8007ea8 <HAL_DMA_Init+0x42c>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d018      	beq.n	8007e08 <HAL_DMA_Init+0x38c>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a34      	ldr	r2, [pc, #208]	@ (8007eac <HAL_DMA_Init+0x430>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d013      	beq.n	8007e08 <HAL_DMA_Init+0x38c>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a32      	ldr	r2, [pc, #200]	@ (8007eb0 <HAL_DMA_Init+0x434>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d00e      	beq.n	8007e08 <HAL_DMA_Init+0x38c>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a31      	ldr	r2, [pc, #196]	@ (8007eb4 <HAL_DMA_Init+0x438>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d009      	beq.n	8007e08 <HAL_DMA_Init+0x38c>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a2f      	ldr	r2, [pc, #188]	@ (8007eb8 <HAL_DMA_Init+0x43c>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d004      	beq.n	8007e08 <HAL_DMA_Init+0x38c>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a2e      	ldr	r2, [pc, #184]	@ (8007ebc <HAL_DMA_Init+0x440>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d101      	bne.n	8007e0c <HAL_DMA_Init+0x390>
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e000      	b.n	8007e0e <HAL_DMA_Init+0x392>
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f000 8092 	beq.w	8007f38 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a21      	ldr	r2, [pc, #132]	@ (8007ea0 <HAL_DMA_Init+0x424>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d021      	beq.n	8007e62 <HAL_DMA_Init+0x3e6>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a20      	ldr	r2, [pc, #128]	@ (8007ea4 <HAL_DMA_Init+0x428>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d01c      	beq.n	8007e62 <HAL_DMA_Init+0x3e6>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a1e      	ldr	r2, [pc, #120]	@ (8007ea8 <HAL_DMA_Init+0x42c>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d017      	beq.n	8007e62 <HAL_DMA_Init+0x3e6>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a1d      	ldr	r2, [pc, #116]	@ (8007eac <HAL_DMA_Init+0x430>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d012      	beq.n	8007e62 <HAL_DMA_Init+0x3e6>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a1b      	ldr	r2, [pc, #108]	@ (8007eb0 <HAL_DMA_Init+0x434>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d00d      	beq.n	8007e62 <HAL_DMA_Init+0x3e6>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a1a      	ldr	r2, [pc, #104]	@ (8007eb4 <HAL_DMA_Init+0x438>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d008      	beq.n	8007e62 <HAL_DMA_Init+0x3e6>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a18      	ldr	r2, [pc, #96]	@ (8007eb8 <HAL_DMA_Init+0x43c>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d003      	beq.n	8007e62 <HAL_DMA_Init+0x3e6>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a17      	ldr	r2, [pc, #92]	@ (8007ebc <HAL_DMA_Init+0x440>)
 8007e60:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2202      	movs	r2, #2
 8007e66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007e7a:	697a      	ldr	r2, [r7, #20]
 8007e7c:	4b10      	ldr	r3, [pc, #64]	@ (8007ec0 <HAL_DMA_Init+0x444>)
 8007e7e:	4013      	ands	r3, r2
 8007e80:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	2b40      	cmp	r3, #64	@ 0x40
 8007e88:	d01c      	beq.n	8007ec4 <HAL_DMA_Init+0x448>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	2b80      	cmp	r3, #128	@ 0x80
 8007e90:	d102      	bne.n	8007e98 <HAL_DMA_Init+0x41c>
 8007e92:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007e96:	e016      	b.n	8007ec6 <HAL_DMA_Init+0x44a>
 8007e98:	2300      	movs	r3, #0
 8007e9a:	e014      	b.n	8007ec6 <HAL_DMA_Init+0x44a>
 8007e9c:	fe10803f 	.word	0xfe10803f
 8007ea0:	58025408 	.word	0x58025408
 8007ea4:	5802541c 	.word	0x5802541c
 8007ea8:	58025430 	.word	0x58025430
 8007eac:	58025444 	.word	0x58025444
 8007eb0:	58025458 	.word	0x58025458
 8007eb4:	5802546c 	.word	0x5802546c
 8007eb8:	58025480 	.word	0x58025480
 8007ebc:	58025494 	.word	0x58025494
 8007ec0:	fffe000f 	.word	0xfffe000f
 8007ec4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	68d2      	ldr	r2, [r2, #12]
 8007eca:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007ecc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007ed4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007edc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	699b      	ldr	r3, [r3, #24]
 8007ee2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007ee4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	69db      	ldr	r3, [r3, #28]
 8007eea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007eec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a1b      	ldr	r3, [r3, #32]
 8007ef2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007ef4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007ef6:	697a      	ldr	r2, [r7, #20]
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	697a      	ldr	r2, [r7, #20]
 8007f02:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	461a      	mov	r2, r3
 8007f0a:	4b6e      	ldr	r3, [pc, #440]	@ (80080c4 <HAL_DMA_Init+0x648>)
 8007f0c:	4413      	add	r3, r2
 8007f0e:	4a6e      	ldr	r2, [pc, #440]	@ (80080c8 <HAL_DMA_Init+0x64c>)
 8007f10:	fba2 2303 	umull	r2, r3, r2, r3
 8007f14:	091b      	lsrs	r3, r3, #4
 8007f16:	009a      	lsls	r2, r3, #2
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f001 fc45 	bl	80097ac <DMA_CalcBaseAndBitshift>
 8007f22:	4603      	mov	r3, r0
 8007f24:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f2a:	f003 031f 	and.w	r3, r3, #31
 8007f2e:	2201      	movs	r2, #1
 8007f30:	409a      	lsls	r2, r3
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	605a      	str	r2, [r3, #4]
 8007f36:	e008      	b.n	8007f4a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2240      	movs	r2, #64	@ 0x40
 8007f3c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2203      	movs	r2, #3
 8007f42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e0b7      	b.n	80080ba <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a5f      	ldr	r2, [pc, #380]	@ (80080cc <HAL_DMA_Init+0x650>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d072      	beq.n	800803a <HAL_DMA_Init+0x5be>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a5d      	ldr	r2, [pc, #372]	@ (80080d0 <HAL_DMA_Init+0x654>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d06d      	beq.n	800803a <HAL_DMA_Init+0x5be>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a5c      	ldr	r2, [pc, #368]	@ (80080d4 <HAL_DMA_Init+0x658>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d068      	beq.n	800803a <HAL_DMA_Init+0x5be>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a5a      	ldr	r2, [pc, #360]	@ (80080d8 <HAL_DMA_Init+0x65c>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d063      	beq.n	800803a <HAL_DMA_Init+0x5be>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a59      	ldr	r2, [pc, #356]	@ (80080dc <HAL_DMA_Init+0x660>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d05e      	beq.n	800803a <HAL_DMA_Init+0x5be>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a57      	ldr	r2, [pc, #348]	@ (80080e0 <HAL_DMA_Init+0x664>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d059      	beq.n	800803a <HAL_DMA_Init+0x5be>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a56      	ldr	r2, [pc, #344]	@ (80080e4 <HAL_DMA_Init+0x668>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d054      	beq.n	800803a <HAL_DMA_Init+0x5be>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a54      	ldr	r2, [pc, #336]	@ (80080e8 <HAL_DMA_Init+0x66c>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d04f      	beq.n	800803a <HAL_DMA_Init+0x5be>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a53      	ldr	r2, [pc, #332]	@ (80080ec <HAL_DMA_Init+0x670>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d04a      	beq.n	800803a <HAL_DMA_Init+0x5be>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a51      	ldr	r2, [pc, #324]	@ (80080f0 <HAL_DMA_Init+0x674>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d045      	beq.n	800803a <HAL_DMA_Init+0x5be>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a50      	ldr	r2, [pc, #320]	@ (80080f4 <HAL_DMA_Init+0x678>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d040      	beq.n	800803a <HAL_DMA_Init+0x5be>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a4e      	ldr	r2, [pc, #312]	@ (80080f8 <HAL_DMA_Init+0x67c>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d03b      	beq.n	800803a <HAL_DMA_Init+0x5be>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a4d      	ldr	r2, [pc, #308]	@ (80080fc <HAL_DMA_Init+0x680>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d036      	beq.n	800803a <HAL_DMA_Init+0x5be>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a4b      	ldr	r2, [pc, #300]	@ (8008100 <HAL_DMA_Init+0x684>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d031      	beq.n	800803a <HAL_DMA_Init+0x5be>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a4a      	ldr	r2, [pc, #296]	@ (8008104 <HAL_DMA_Init+0x688>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d02c      	beq.n	800803a <HAL_DMA_Init+0x5be>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a48      	ldr	r2, [pc, #288]	@ (8008108 <HAL_DMA_Init+0x68c>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d027      	beq.n	800803a <HAL_DMA_Init+0x5be>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a47      	ldr	r2, [pc, #284]	@ (800810c <HAL_DMA_Init+0x690>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d022      	beq.n	800803a <HAL_DMA_Init+0x5be>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a45      	ldr	r2, [pc, #276]	@ (8008110 <HAL_DMA_Init+0x694>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d01d      	beq.n	800803a <HAL_DMA_Init+0x5be>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a44      	ldr	r2, [pc, #272]	@ (8008114 <HAL_DMA_Init+0x698>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d018      	beq.n	800803a <HAL_DMA_Init+0x5be>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a42      	ldr	r2, [pc, #264]	@ (8008118 <HAL_DMA_Init+0x69c>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d013      	beq.n	800803a <HAL_DMA_Init+0x5be>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a41      	ldr	r2, [pc, #260]	@ (800811c <HAL_DMA_Init+0x6a0>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d00e      	beq.n	800803a <HAL_DMA_Init+0x5be>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a3f      	ldr	r2, [pc, #252]	@ (8008120 <HAL_DMA_Init+0x6a4>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d009      	beq.n	800803a <HAL_DMA_Init+0x5be>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a3e      	ldr	r2, [pc, #248]	@ (8008124 <HAL_DMA_Init+0x6a8>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d004      	beq.n	800803a <HAL_DMA_Init+0x5be>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a3c      	ldr	r2, [pc, #240]	@ (8008128 <HAL_DMA_Init+0x6ac>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d101      	bne.n	800803e <HAL_DMA_Init+0x5c2>
 800803a:	2301      	movs	r3, #1
 800803c:	e000      	b.n	8008040 <HAL_DMA_Init+0x5c4>
 800803e:	2300      	movs	r3, #0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d032      	beq.n	80080aa <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f001 fcdf 	bl	8009a08 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	2b80      	cmp	r3, #128	@ 0x80
 8008050:	d102      	bne.n	8008058 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	685a      	ldr	r2, [r3, #4]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008060:	b2d2      	uxtb	r2, r2
 8008062:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800806c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d010      	beq.n	8008098 <HAL_DMA_Init+0x61c>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	2b08      	cmp	r3, #8
 800807c:	d80c      	bhi.n	8008098 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f001 fd5c 	bl	8009b3c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008088:	2200      	movs	r2, #0
 800808a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008094:	605a      	str	r2, [r3, #4]
 8008096:	e008      	b.n	80080aa <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3718      	adds	r7, #24
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	a7fdabf8 	.word	0xa7fdabf8
 80080c8:	cccccccd 	.word	0xcccccccd
 80080cc:	40020010 	.word	0x40020010
 80080d0:	40020028 	.word	0x40020028
 80080d4:	40020040 	.word	0x40020040
 80080d8:	40020058 	.word	0x40020058
 80080dc:	40020070 	.word	0x40020070
 80080e0:	40020088 	.word	0x40020088
 80080e4:	400200a0 	.word	0x400200a0
 80080e8:	400200b8 	.word	0x400200b8
 80080ec:	40020410 	.word	0x40020410
 80080f0:	40020428 	.word	0x40020428
 80080f4:	40020440 	.word	0x40020440
 80080f8:	40020458 	.word	0x40020458
 80080fc:	40020470 	.word	0x40020470
 8008100:	40020488 	.word	0x40020488
 8008104:	400204a0 	.word	0x400204a0
 8008108:	400204b8 	.word	0x400204b8
 800810c:	58025408 	.word	0x58025408
 8008110:	5802541c 	.word	0x5802541c
 8008114:	58025430 	.word	0x58025430
 8008118:	58025444 	.word	0x58025444
 800811c:	58025458 	.word	0x58025458
 8008120:	5802546c 	.word	0x5802546c
 8008124:	58025480 	.word	0x58025480
 8008128:	58025494 	.word	0x58025494

0800812c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b086      	sub	sp, #24
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	607a      	str	r2, [r7, #4]
 8008138:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800813a:	2300      	movs	r3, #0
 800813c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d101      	bne.n	8008148 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	e226      	b.n	8008596 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800814e:	2b01      	cmp	r3, #1
 8008150:	d101      	bne.n	8008156 <HAL_DMA_Start_IT+0x2a>
 8008152:	2302      	movs	r3, #2
 8008154:	e21f      	b.n	8008596 <HAL_DMA_Start_IT+0x46a>
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2201      	movs	r2, #1
 800815a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008164:	b2db      	uxtb	r3, r3
 8008166:	2b01      	cmp	r3, #1
 8008168:	f040 820a 	bne.w	8008580 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2202      	movs	r2, #2
 8008170:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a68      	ldr	r2, [pc, #416]	@ (8008320 <HAL_DMA_Start_IT+0x1f4>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d04a      	beq.n	800821a <HAL_DMA_Start_IT+0xee>
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a66      	ldr	r2, [pc, #408]	@ (8008324 <HAL_DMA_Start_IT+0x1f8>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d045      	beq.n	800821a <HAL_DMA_Start_IT+0xee>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a65      	ldr	r2, [pc, #404]	@ (8008328 <HAL_DMA_Start_IT+0x1fc>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d040      	beq.n	800821a <HAL_DMA_Start_IT+0xee>
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a63      	ldr	r2, [pc, #396]	@ (800832c <HAL_DMA_Start_IT+0x200>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d03b      	beq.n	800821a <HAL_DMA_Start_IT+0xee>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a62      	ldr	r2, [pc, #392]	@ (8008330 <HAL_DMA_Start_IT+0x204>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d036      	beq.n	800821a <HAL_DMA_Start_IT+0xee>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a60      	ldr	r2, [pc, #384]	@ (8008334 <HAL_DMA_Start_IT+0x208>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d031      	beq.n	800821a <HAL_DMA_Start_IT+0xee>
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a5f      	ldr	r2, [pc, #380]	@ (8008338 <HAL_DMA_Start_IT+0x20c>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d02c      	beq.n	800821a <HAL_DMA_Start_IT+0xee>
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a5d      	ldr	r2, [pc, #372]	@ (800833c <HAL_DMA_Start_IT+0x210>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d027      	beq.n	800821a <HAL_DMA_Start_IT+0xee>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a5c      	ldr	r2, [pc, #368]	@ (8008340 <HAL_DMA_Start_IT+0x214>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d022      	beq.n	800821a <HAL_DMA_Start_IT+0xee>
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a5a      	ldr	r2, [pc, #360]	@ (8008344 <HAL_DMA_Start_IT+0x218>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d01d      	beq.n	800821a <HAL_DMA_Start_IT+0xee>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a59      	ldr	r2, [pc, #356]	@ (8008348 <HAL_DMA_Start_IT+0x21c>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d018      	beq.n	800821a <HAL_DMA_Start_IT+0xee>
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a57      	ldr	r2, [pc, #348]	@ (800834c <HAL_DMA_Start_IT+0x220>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d013      	beq.n	800821a <HAL_DMA_Start_IT+0xee>
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a56      	ldr	r2, [pc, #344]	@ (8008350 <HAL_DMA_Start_IT+0x224>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d00e      	beq.n	800821a <HAL_DMA_Start_IT+0xee>
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a54      	ldr	r2, [pc, #336]	@ (8008354 <HAL_DMA_Start_IT+0x228>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d009      	beq.n	800821a <HAL_DMA_Start_IT+0xee>
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a53      	ldr	r2, [pc, #332]	@ (8008358 <HAL_DMA_Start_IT+0x22c>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d004      	beq.n	800821a <HAL_DMA_Start_IT+0xee>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a51      	ldr	r2, [pc, #324]	@ (800835c <HAL_DMA_Start_IT+0x230>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d108      	bne.n	800822c <HAL_DMA_Start_IT+0x100>
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f022 0201 	bic.w	r2, r2, #1
 8008228:	601a      	str	r2, [r3, #0]
 800822a:	e007      	b.n	800823c <HAL_DMA_Start_IT+0x110>
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f022 0201 	bic.w	r2, r2, #1
 800823a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	68b9      	ldr	r1, [r7, #8]
 8008242:	68f8      	ldr	r0, [r7, #12]
 8008244:	f001 f906 	bl	8009454 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a34      	ldr	r2, [pc, #208]	@ (8008320 <HAL_DMA_Start_IT+0x1f4>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d04a      	beq.n	80082e8 <HAL_DMA_Start_IT+0x1bc>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a33      	ldr	r2, [pc, #204]	@ (8008324 <HAL_DMA_Start_IT+0x1f8>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d045      	beq.n	80082e8 <HAL_DMA_Start_IT+0x1bc>
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a31      	ldr	r2, [pc, #196]	@ (8008328 <HAL_DMA_Start_IT+0x1fc>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d040      	beq.n	80082e8 <HAL_DMA_Start_IT+0x1bc>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a30      	ldr	r2, [pc, #192]	@ (800832c <HAL_DMA_Start_IT+0x200>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d03b      	beq.n	80082e8 <HAL_DMA_Start_IT+0x1bc>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a2e      	ldr	r2, [pc, #184]	@ (8008330 <HAL_DMA_Start_IT+0x204>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d036      	beq.n	80082e8 <HAL_DMA_Start_IT+0x1bc>
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a2d      	ldr	r2, [pc, #180]	@ (8008334 <HAL_DMA_Start_IT+0x208>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d031      	beq.n	80082e8 <HAL_DMA_Start_IT+0x1bc>
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a2b      	ldr	r2, [pc, #172]	@ (8008338 <HAL_DMA_Start_IT+0x20c>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d02c      	beq.n	80082e8 <HAL_DMA_Start_IT+0x1bc>
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a2a      	ldr	r2, [pc, #168]	@ (800833c <HAL_DMA_Start_IT+0x210>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d027      	beq.n	80082e8 <HAL_DMA_Start_IT+0x1bc>
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a28      	ldr	r2, [pc, #160]	@ (8008340 <HAL_DMA_Start_IT+0x214>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d022      	beq.n	80082e8 <HAL_DMA_Start_IT+0x1bc>
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a27      	ldr	r2, [pc, #156]	@ (8008344 <HAL_DMA_Start_IT+0x218>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d01d      	beq.n	80082e8 <HAL_DMA_Start_IT+0x1bc>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a25      	ldr	r2, [pc, #148]	@ (8008348 <HAL_DMA_Start_IT+0x21c>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d018      	beq.n	80082e8 <HAL_DMA_Start_IT+0x1bc>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a24      	ldr	r2, [pc, #144]	@ (800834c <HAL_DMA_Start_IT+0x220>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d013      	beq.n	80082e8 <HAL_DMA_Start_IT+0x1bc>
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a22      	ldr	r2, [pc, #136]	@ (8008350 <HAL_DMA_Start_IT+0x224>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d00e      	beq.n	80082e8 <HAL_DMA_Start_IT+0x1bc>
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a21      	ldr	r2, [pc, #132]	@ (8008354 <HAL_DMA_Start_IT+0x228>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d009      	beq.n	80082e8 <HAL_DMA_Start_IT+0x1bc>
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a1f      	ldr	r2, [pc, #124]	@ (8008358 <HAL_DMA_Start_IT+0x22c>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d004      	beq.n	80082e8 <HAL_DMA_Start_IT+0x1bc>
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a1e      	ldr	r2, [pc, #120]	@ (800835c <HAL_DMA_Start_IT+0x230>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d101      	bne.n	80082ec <HAL_DMA_Start_IT+0x1c0>
 80082e8:	2301      	movs	r3, #1
 80082ea:	e000      	b.n	80082ee <HAL_DMA_Start_IT+0x1c2>
 80082ec:	2300      	movs	r3, #0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d036      	beq.n	8008360 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f023 021e 	bic.w	r2, r3, #30
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f042 0216 	orr.w	r2, r2, #22
 8008304:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800830a:	2b00      	cmp	r3, #0
 800830c:	d03e      	beq.n	800838c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f042 0208 	orr.w	r2, r2, #8
 800831c:	601a      	str	r2, [r3, #0]
 800831e:	e035      	b.n	800838c <HAL_DMA_Start_IT+0x260>
 8008320:	40020010 	.word	0x40020010
 8008324:	40020028 	.word	0x40020028
 8008328:	40020040 	.word	0x40020040
 800832c:	40020058 	.word	0x40020058
 8008330:	40020070 	.word	0x40020070
 8008334:	40020088 	.word	0x40020088
 8008338:	400200a0 	.word	0x400200a0
 800833c:	400200b8 	.word	0x400200b8
 8008340:	40020410 	.word	0x40020410
 8008344:	40020428 	.word	0x40020428
 8008348:	40020440 	.word	0x40020440
 800834c:	40020458 	.word	0x40020458
 8008350:	40020470 	.word	0x40020470
 8008354:	40020488 	.word	0x40020488
 8008358:	400204a0 	.word	0x400204a0
 800835c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f023 020e 	bic.w	r2, r3, #14
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f042 020a 	orr.w	r2, r2, #10
 8008372:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008378:	2b00      	cmp	r3, #0
 800837a:	d007      	beq.n	800838c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f042 0204 	orr.w	r2, r2, #4
 800838a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a83      	ldr	r2, [pc, #524]	@ (80085a0 <HAL_DMA_Start_IT+0x474>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d072      	beq.n	800847c <HAL_DMA_Start_IT+0x350>
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a82      	ldr	r2, [pc, #520]	@ (80085a4 <HAL_DMA_Start_IT+0x478>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d06d      	beq.n	800847c <HAL_DMA_Start_IT+0x350>
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a80      	ldr	r2, [pc, #512]	@ (80085a8 <HAL_DMA_Start_IT+0x47c>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d068      	beq.n	800847c <HAL_DMA_Start_IT+0x350>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a7f      	ldr	r2, [pc, #508]	@ (80085ac <HAL_DMA_Start_IT+0x480>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d063      	beq.n	800847c <HAL_DMA_Start_IT+0x350>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a7d      	ldr	r2, [pc, #500]	@ (80085b0 <HAL_DMA_Start_IT+0x484>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d05e      	beq.n	800847c <HAL_DMA_Start_IT+0x350>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a7c      	ldr	r2, [pc, #496]	@ (80085b4 <HAL_DMA_Start_IT+0x488>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d059      	beq.n	800847c <HAL_DMA_Start_IT+0x350>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a7a      	ldr	r2, [pc, #488]	@ (80085b8 <HAL_DMA_Start_IT+0x48c>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d054      	beq.n	800847c <HAL_DMA_Start_IT+0x350>
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a79      	ldr	r2, [pc, #484]	@ (80085bc <HAL_DMA_Start_IT+0x490>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d04f      	beq.n	800847c <HAL_DMA_Start_IT+0x350>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a77      	ldr	r2, [pc, #476]	@ (80085c0 <HAL_DMA_Start_IT+0x494>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d04a      	beq.n	800847c <HAL_DMA_Start_IT+0x350>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a76      	ldr	r2, [pc, #472]	@ (80085c4 <HAL_DMA_Start_IT+0x498>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d045      	beq.n	800847c <HAL_DMA_Start_IT+0x350>
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a74      	ldr	r2, [pc, #464]	@ (80085c8 <HAL_DMA_Start_IT+0x49c>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d040      	beq.n	800847c <HAL_DMA_Start_IT+0x350>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a73      	ldr	r2, [pc, #460]	@ (80085cc <HAL_DMA_Start_IT+0x4a0>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d03b      	beq.n	800847c <HAL_DMA_Start_IT+0x350>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a71      	ldr	r2, [pc, #452]	@ (80085d0 <HAL_DMA_Start_IT+0x4a4>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d036      	beq.n	800847c <HAL_DMA_Start_IT+0x350>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a70      	ldr	r2, [pc, #448]	@ (80085d4 <HAL_DMA_Start_IT+0x4a8>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d031      	beq.n	800847c <HAL_DMA_Start_IT+0x350>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a6e      	ldr	r2, [pc, #440]	@ (80085d8 <HAL_DMA_Start_IT+0x4ac>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d02c      	beq.n	800847c <HAL_DMA_Start_IT+0x350>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a6d      	ldr	r2, [pc, #436]	@ (80085dc <HAL_DMA_Start_IT+0x4b0>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d027      	beq.n	800847c <HAL_DMA_Start_IT+0x350>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a6b      	ldr	r2, [pc, #428]	@ (80085e0 <HAL_DMA_Start_IT+0x4b4>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d022      	beq.n	800847c <HAL_DMA_Start_IT+0x350>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a6a      	ldr	r2, [pc, #424]	@ (80085e4 <HAL_DMA_Start_IT+0x4b8>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d01d      	beq.n	800847c <HAL_DMA_Start_IT+0x350>
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a68      	ldr	r2, [pc, #416]	@ (80085e8 <HAL_DMA_Start_IT+0x4bc>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d018      	beq.n	800847c <HAL_DMA_Start_IT+0x350>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a67      	ldr	r2, [pc, #412]	@ (80085ec <HAL_DMA_Start_IT+0x4c0>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d013      	beq.n	800847c <HAL_DMA_Start_IT+0x350>
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a65      	ldr	r2, [pc, #404]	@ (80085f0 <HAL_DMA_Start_IT+0x4c4>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d00e      	beq.n	800847c <HAL_DMA_Start_IT+0x350>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a64      	ldr	r2, [pc, #400]	@ (80085f4 <HAL_DMA_Start_IT+0x4c8>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d009      	beq.n	800847c <HAL_DMA_Start_IT+0x350>
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a62      	ldr	r2, [pc, #392]	@ (80085f8 <HAL_DMA_Start_IT+0x4cc>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d004      	beq.n	800847c <HAL_DMA_Start_IT+0x350>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a61      	ldr	r2, [pc, #388]	@ (80085fc <HAL_DMA_Start_IT+0x4d0>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d101      	bne.n	8008480 <HAL_DMA_Start_IT+0x354>
 800847c:	2301      	movs	r3, #1
 800847e:	e000      	b.n	8008482 <HAL_DMA_Start_IT+0x356>
 8008480:	2300      	movs	r3, #0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d01a      	beq.n	80084bc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008490:	2b00      	cmp	r3, #0
 8008492:	d007      	beq.n	80084a4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800849e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80084a2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d007      	beq.n	80084bc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80084ba:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a37      	ldr	r2, [pc, #220]	@ (80085a0 <HAL_DMA_Start_IT+0x474>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d04a      	beq.n	800855c <HAL_DMA_Start_IT+0x430>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a36      	ldr	r2, [pc, #216]	@ (80085a4 <HAL_DMA_Start_IT+0x478>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d045      	beq.n	800855c <HAL_DMA_Start_IT+0x430>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a34      	ldr	r2, [pc, #208]	@ (80085a8 <HAL_DMA_Start_IT+0x47c>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d040      	beq.n	800855c <HAL_DMA_Start_IT+0x430>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a33      	ldr	r2, [pc, #204]	@ (80085ac <HAL_DMA_Start_IT+0x480>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d03b      	beq.n	800855c <HAL_DMA_Start_IT+0x430>
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a31      	ldr	r2, [pc, #196]	@ (80085b0 <HAL_DMA_Start_IT+0x484>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d036      	beq.n	800855c <HAL_DMA_Start_IT+0x430>
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a30      	ldr	r2, [pc, #192]	@ (80085b4 <HAL_DMA_Start_IT+0x488>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d031      	beq.n	800855c <HAL_DMA_Start_IT+0x430>
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a2e      	ldr	r2, [pc, #184]	@ (80085b8 <HAL_DMA_Start_IT+0x48c>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d02c      	beq.n	800855c <HAL_DMA_Start_IT+0x430>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a2d      	ldr	r2, [pc, #180]	@ (80085bc <HAL_DMA_Start_IT+0x490>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d027      	beq.n	800855c <HAL_DMA_Start_IT+0x430>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a2b      	ldr	r2, [pc, #172]	@ (80085c0 <HAL_DMA_Start_IT+0x494>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d022      	beq.n	800855c <HAL_DMA_Start_IT+0x430>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a2a      	ldr	r2, [pc, #168]	@ (80085c4 <HAL_DMA_Start_IT+0x498>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d01d      	beq.n	800855c <HAL_DMA_Start_IT+0x430>
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a28      	ldr	r2, [pc, #160]	@ (80085c8 <HAL_DMA_Start_IT+0x49c>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d018      	beq.n	800855c <HAL_DMA_Start_IT+0x430>
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a27      	ldr	r2, [pc, #156]	@ (80085cc <HAL_DMA_Start_IT+0x4a0>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d013      	beq.n	800855c <HAL_DMA_Start_IT+0x430>
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a25      	ldr	r2, [pc, #148]	@ (80085d0 <HAL_DMA_Start_IT+0x4a4>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d00e      	beq.n	800855c <HAL_DMA_Start_IT+0x430>
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a24      	ldr	r2, [pc, #144]	@ (80085d4 <HAL_DMA_Start_IT+0x4a8>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d009      	beq.n	800855c <HAL_DMA_Start_IT+0x430>
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a22      	ldr	r2, [pc, #136]	@ (80085d8 <HAL_DMA_Start_IT+0x4ac>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d004      	beq.n	800855c <HAL_DMA_Start_IT+0x430>
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a21      	ldr	r2, [pc, #132]	@ (80085dc <HAL_DMA_Start_IT+0x4b0>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d108      	bne.n	800856e <HAL_DMA_Start_IT+0x442>
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f042 0201 	orr.w	r2, r2, #1
 800856a:	601a      	str	r2, [r3, #0]
 800856c:	e012      	b.n	8008594 <HAL_DMA_Start_IT+0x468>
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f042 0201 	orr.w	r2, r2, #1
 800857c:	601a      	str	r2, [r3, #0]
 800857e:	e009      	b.n	8008594 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008586:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2200      	movs	r2, #0
 800858c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008594:	7dfb      	ldrb	r3, [r7, #23]
}
 8008596:	4618      	mov	r0, r3
 8008598:	3718      	adds	r7, #24
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	40020010 	.word	0x40020010
 80085a4:	40020028 	.word	0x40020028
 80085a8:	40020040 	.word	0x40020040
 80085ac:	40020058 	.word	0x40020058
 80085b0:	40020070 	.word	0x40020070
 80085b4:	40020088 	.word	0x40020088
 80085b8:	400200a0 	.word	0x400200a0
 80085bc:	400200b8 	.word	0x400200b8
 80085c0:	40020410 	.word	0x40020410
 80085c4:	40020428 	.word	0x40020428
 80085c8:	40020440 	.word	0x40020440
 80085cc:	40020458 	.word	0x40020458
 80085d0:	40020470 	.word	0x40020470
 80085d4:	40020488 	.word	0x40020488
 80085d8:	400204a0 	.word	0x400204a0
 80085dc:	400204b8 	.word	0x400204b8
 80085e0:	58025408 	.word	0x58025408
 80085e4:	5802541c 	.word	0x5802541c
 80085e8:	58025430 	.word	0x58025430
 80085ec:	58025444 	.word	0x58025444
 80085f0:	58025458 	.word	0x58025458
 80085f4:	5802546c 	.word	0x5802546c
 80085f8:	58025480 	.word	0x58025480
 80085fc:	58025494 	.word	0x58025494

08008600 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b08a      	sub	sp, #40	@ 0x28
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008608:	2300      	movs	r3, #0
 800860a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800860c:	4b67      	ldr	r3, [pc, #412]	@ (80087ac <HAL_DMA_IRQHandler+0x1ac>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a67      	ldr	r2, [pc, #412]	@ (80087b0 <HAL_DMA_IRQHandler+0x1b0>)
 8008612:	fba2 2303 	umull	r2, r3, r2, r3
 8008616:	0a9b      	lsrs	r3, r3, #10
 8008618:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800861e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008624:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008626:	6a3b      	ldr	r3, [r7, #32]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a5f      	ldr	r2, [pc, #380]	@ (80087b4 <HAL_DMA_IRQHandler+0x1b4>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d04a      	beq.n	80086d2 <HAL_DMA_IRQHandler+0xd2>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a5d      	ldr	r2, [pc, #372]	@ (80087b8 <HAL_DMA_IRQHandler+0x1b8>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d045      	beq.n	80086d2 <HAL_DMA_IRQHandler+0xd2>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a5c      	ldr	r2, [pc, #368]	@ (80087bc <HAL_DMA_IRQHandler+0x1bc>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d040      	beq.n	80086d2 <HAL_DMA_IRQHandler+0xd2>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a5a      	ldr	r2, [pc, #360]	@ (80087c0 <HAL_DMA_IRQHandler+0x1c0>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d03b      	beq.n	80086d2 <HAL_DMA_IRQHandler+0xd2>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a59      	ldr	r2, [pc, #356]	@ (80087c4 <HAL_DMA_IRQHandler+0x1c4>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d036      	beq.n	80086d2 <HAL_DMA_IRQHandler+0xd2>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a57      	ldr	r2, [pc, #348]	@ (80087c8 <HAL_DMA_IRQHandler+0x1c8>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d031      	beq.n	80086d2 <HAL_DMA_IRQHandler+0xd2>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a56      	ldr	r2, [pc, #344]	@ (80087cc <HAL_DMA_IRQHandler+0x1cc>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d02c      	beq.n	80086d2 <HAL_DMA_IRQHandler+0xd2>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a54      	ldr	r2, [pc, #336]	@ (80087d0 <HAL_DMA_IRQHandler+0x1d0>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d027      	beq.n	80086d2 <HAL_DMA_IRQHandler+0xd2>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a53      	ldr	r2, [pc, #332]	@ (80087d4 <HAL_DMA_IRQHandler+0x1d4>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d022      	beq.n	80086d2 <HAL_DMA_IRQHandler+0xd2>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a51      	ldr	r2, [pc, #324]	@ (80087d8 <HAL_DMA_IRQHandler+0x1d8>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d01d      	beq.n	80086d2 <HAL_DMA_IRQHandler+0xd2>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a50      	ldr	r2, [pc, #320]	@ (80087dc <HAL_DMA_IRQHandler+0x1dc>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d018      	beq.n	80086d2 <HAL_DMA_IRQHandler+0xd2>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a4e      	ldr	r2, [pc, #312]	@ (80087e0 <HAL_DMA_IRQHandler+0x1e0>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d013      	beq.n	80086d2 <HAL_DMA_IRQHandler+0xd2>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a4d      	ldr	r2, [pc, #308]	@ (80087e4 <HAL_DMA_IRQHandler+0x1e4>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d00e      	beq.n	80086d2 <HAL_DMA_IRQHandler+0xd2>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a4b      	ldr	r2, [pc, #300]	@ (80087e8 <HAL_DMA_IRQHandler+0x1e8>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d009      	beq.n	80086d2 <HAL_DMA_IRQHandler+0xd2>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a4a      	ldr	r2, [pc, #296]	@ (80087ec <HAL_DMA_IRQHandler+0x1ec>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d004      	beq.n	80086d2 <HAL_DMA_IRQHandler+0xd2>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a48      	ldr	r2, [pc, #288]	@ (80087f0 <HAL_DMA_IRQHandler+0x1f0>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d101      	bne.n	80086d6 <HAL_DMA_IRQHandler+0xd6>
 80086d2:	2301      	movs	r3, #1
 80086d4:	e000      	b.n	80086d8 <HAL_DMA_IRQHandler+0xd8>
 80086d6:	2300      	movs	r3, #0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	f000 842b 	beq.w	8008f34 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086e2:	f003 031f 	and.w	r3, r3, #31
 80086e6:	2208      	movs	r2, #8
 80086e8:	409a      	lsls	r2, r3
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	4013      	ands	r3, r2
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	f000 80a2 	beq.w	8008838 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a2e      	ldr	r2, [pc, #184]	@ (80087b4 <HAL_DMA_IRQHandler+0x1b4>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d04a      	beq.n	8008794 <HAL_DMA_IRQHandler+0x194>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a2d      	ldr	r2, [pc, #180]	@ (80087b8 <HAL_DMA_IRQHandler+0x1b8>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d045      	beq.n	8008794 <HAL_DMA_IRQHandler+0x194>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a2b      	ldr	r2, [pc, #172]	@ (80087bc <HAL_DMA_IRQHandler+0x1bc>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d040      	beq.n	8008794 <HAL_DMA_IRQHandler+0x194>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a2a      	ldr	r2, [pc, #168]	@ (80087c0 <HAL_DMA_IRQHandler+0x1c0>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d03b      	beq.n	8008794 <HAL_DMA_IRQHandler+0x194>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a28      	ldr	r2, [pc, #160]	@ (80087c4 <HAL_DMA_IRQHandler+0x1c4>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d036      	beq.n	8008794 <HAL_DMA_IRQHandler+0x194>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a27      	ldr	r2, [pc, #156]	@ (80087c8 <HAL_DMA_IRQHandler+0x1c8>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d031      	beq.n	8008794 <HAL_DMA_IRQHandler+0x194>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a25      	ldr	r2, [pc, #148]	@ (80087cc <HAL_DMA_IRQHandler+0x1cc>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d02c      	beq.n	8008794 <HAL_DMA_IRQHandler+0x194>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a24      	ldr	r2, [pc, #144]	@ (80087d0 <HAL_DMA_IRQHandler+0x1d0>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d027      	beq.n	8008794 <HAL_DMA_IRQHandler+0x194>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a22      	ldr	r2, [pc, #136]	@ (80087d4 <HAL_DMA_IRQHandler+0x1d4>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d022      	beq.n	8008794 <HAL_DMA_IRQHandler+0x194>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a21      	ldr	r2, [pc, #132]	@ (80087d8 <HAL_DMA_IRQHandler+0x1d8>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d01d      	beq.n	8008794 <HAL_DMA_IRQHandler+0x194>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a1f      	ldr	r2, [pc, #124]	@ (80087dc <HAL_DMA_IRQHandler+0x1dc>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d018      	beq.n	8008794 <HAL_DMA_IRQHandler+0x194>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a1e      	ldr	r2, [pc, #120]	@ (80087e0 <HAL_DMA_IRQHandler+0x1e0>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d013      	beq.n	8008794 <HAL_DMA_IRQHandler+0x194>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a1c      	ldr	r2, [pc, #112]	@ (80087e4 <HAL_DMA_IRQHandler+0x1e4>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d00e      	beq.n	8008794 <HAL_DMA_IRQHandler+0x194>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a1b      	ldr	r2, [pc, #108]	@ (80087e8 <HAL_DMA_IRQHandler+0x1e8>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d009      	beq.n	8008794 <HAL_DMA_IRQHandler+0x194>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a19      	ldr	r2, [pc, #100]	@ (80087ec <HAL_DMA_IRQHandler+0x1ec>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d004      	beq.n	8008794 <HAL_DMA_IRQHandler+0x194>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a18      	ldr	r2, [pc, #96]	@ (80087f0 <HAL_DMA_IRQHandler+0x1f0>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d12f      	bne.n	80087f4 <HAL_DMA_IRQHandler+0x1f4>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f003 0304 	and.w	r3, r3, #4
 800879e:	2b00      	cmp	r3, #0
 80087a0:	bf14      	ite	ne
 80087a2:	2301      	movne	r3, #1
 80087a4:	2300      	moveq	r3, #0
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	e02e      	b.n	8008808 <HAL_DMA_IRQHandler+0x208>
 80087aa:	bf00      	nop
 80087ac:	24000038 	.word	0x24000038
 80087b0:	1b4e81b5 	.word	0x1b4e81b5
 80087b4:	40020010 	.word	0x40020010
 80087b8:	40020028 	.word	0x40020028
 80087bc:	40020040 	.word	0x40020040
 80087c0:	40020058 	.word	0x40020058
 80087c4:	40020070 	.word	0x40020070
 80087c8:	40020088 	.word	0x40020088
 80087cc:	400200a0 	.word	0x400200a0
 80087d0:	400200b8 	.word	0x400200b8
 80087d4:	40020410 	.word	0x40020410
 80087d8:	40020428 	.word	0x40020428
 80087dc:	40020440 	.word	0x40020440
 80087e0:	40020458 	.word	0x40020458
 80087e4:	40020470 	.word	0x40020470
 80087e8:	40020488 	.word	0x40020488
 80087ec:	400204a0 	.word	0x400204a0
 80087f0:	400204b8 	.word	0x400204b8
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 0308 	and.w	r3, r3, #8
 80087fe:	2b00      	cmp	r3, #0
 8008800:	bf14      	ite	ne
 8008802:	2301      	movne	r3, #1
 8008804:	2300      	moveq	r3, #0
 8008806:	b2db      	uxtb	r3, r3
 8008808:	2b00      	cmp	r3, #0
 800880a:	d015      	beq.n	8008838 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f022 0204 	bic.w	r2, r2, #4
 800881a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008820:	f003 031f 	and.w	r3, r3, #31
 8008824:	2208      	movs	r2, #8
 8008826:	409a      	lsls	r2, r3
 8008828:	6a3b      	ldr	r3, [r7, #32]
 800882a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008830:	f043 0201 	orr.w	r2, r3, #1
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800883c:	f003 031f 	and.w	r3, r3, #31
 8008840:	69ba      	ldr	r2, [r7, #24]
 8008842:	fa22 f303 	lsr.w	r3, r2, r3
 8008846:	f003 0301 	and.w	r3, r3, #1
 800884a:	2b00      	cmp	r3, #0
 800884c:	d06e      	beq.n	800892c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a69      	ldr	r2, [pc, #420]	@ (80089f8 <HAL_DMA_IRQHandler+0x3f8>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d04a      	beq.n	80088ee <HAL_DMA_IRQHandler+0x2ee>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a67      	ldr	r2, [pc, #412]	@ (80089fc <HAL_DMA_IRQHandler+0x3fc>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d045      	beq.n	80088ee <HAL_DMA_IRQHandler+0x2ee>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a66      	ldr	r2, [pc, #408]	@ (8008a00 <HAL_DMA_IRQHandler+0x400>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d040      	beq.n	80088ee <HAL_DMA_IRQHandler+0x2ee>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a64      	ldr	r2, [pc, #400]	@ (8008a04 <HAL_DMA_IRQHandler+0x404>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d03b      	beq.n	80088ee <HAL_DMA_IRQHandler+0x2ee>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a63      	ldr	r2, [pc, #396]	@ (8008a08 <HAL_DMA_IRQHandler+0x408>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d036      	beq.n	80088ee <HAL_DMA_IRQHandler+0x2ee>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a61      	ldr	r2, [pc, #388]	@ (8008a0c <HAL_DMA_IRQHandler+0x40c>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d031      	beq.n	80088ee <HAL_DMA_IRQHandler+0x2ee>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a60      	ldr	r2, [pc, #384]	@ (8008a10 <HAL_DMA_IRQHandler+0x410>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d02c      	beq.n	80088ee <HAL_DMA_IRQHandler+0x2ee>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a5e      	ldr	r2, [pc, #376]	@ (8008a14 <HAL_DMA_IRQHandler+0x414>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d027      	beq.n	80088ee <HAL_DMA_IRQHandler+0x2ee>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a5d      	ldr	r2, [pc, #372]	@ (8008a18 <HAL_DMA_IRQHandler+0x418>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d022      	beq.n	80088ee <HAL_DMA_IRQHandler+0x2ee>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a5b      	ldr	r2, [pc, #364]	@ (8008a1c <HAL_DMA_IRQHandler+0x41c>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d01d      	beq.n	80088ee <HAL_DMA_IRQHandler+0x2ee>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a5a      	ldr	r2, [pc, #360]	@ (8008a20 <HAL_DMA_IRQHandler+0x420>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d018      	beq.n	80088ee <HAL_DMA_IRQHandler+0x2ee>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a58      	ldr	r2, [pc, #352]	@ (8008a24 <HAL_DMA_IRQHandler+0x424>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d013      	beq.n	80088ee <HAL_DMA_IRQHandler+0x2ee>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a57      	ldr	r2, [pc, #348]	@ (8008a28 <HAL_DMA_IRQHandler+0x428>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d00e      	beq.n	80088ee <HAL_DMA_IRQHandler+0x2ee>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a55      	ldr	r2, [pc, #340]	@ (8008a2c <HAL_DMA_IRQHandler+0x42c>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d009      	beq.n	80088ee <HAL_DMA_IRQHandler+0x2ee>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a54      	ldr	r2, [pc, #336]	@ (8008a30 <HAL_DMA_IRQHandler+0x430>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d004      	beq.n	80088ee <HAL_DMA_IRQHandler+0x2ee>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a52      	ldr	r2, [pc, #328]	@ (8008a34 <HAL_DMA_IRQHandler+0x434>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d10a      	bne.n	8008904 <HAL_DMA_IRQHandler+0x304>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	695b      	ldr	r3, [r3, #20]
 80088f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	bf14      	ite	ne
 80088fc:	2301      	movne	r3, #1
 80088fe:	2300      	moveq	r3, #0
 8008900:	b2db      	uxtb	r3, r3
 8008902:	e003      	b.n	800890c <HAL_DMA_IRQHandler+0x30c>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2300      	movs	r3, #0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d00d      	beq.n	800892c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008914:	f003 031f 	and.w	r3, r3, #31
 8008918:	2201      	movs	r2, #1
 800891a:	409a      	lsls	r2, r3
 800891c:	6a3b      	ldr	r3, [r7, #32]
 800891e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008924:	f043 0202 	orr.w	r2, r3, #2
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008930:	f003 031f 	and.w	r3, r3, #31
 8008934:	2204      	movs	r2, #4
 8008936:	409a      	lsls	r2, r3
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	4013      	ands	r3, r2
 800893c:	2b00      	cmp	r3, #0
 800893e:	f000 808f 	beq.w	8008a60 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a2c      	ldr	r2, [pc, #176]	@ (80089f8 <HAL_DMA_IRQHandler+0x3f8>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d04a      	beq.n	80089e2 <HAL_DMA_IRQHandler+0x3e2>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a2a      	ldr	r2, [pc, #168]	@ (80089fc <HAL_DMA_IRQHandler+0x3fc>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d045      	beq.n	80089e2 <HAL_DMA_IRQHandler+0x3e2>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a29      	ldr	r2, [pc, #164]	@ (8008a00 <HAL_DMA_IRQHandler+0x400>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d040      	beq.n	80089e2 <HAL_DMA_IRQHandler+0x3e2>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a27      	ldr	r2, [pc, #156]	@ (8008a04 <HAL_DMA_IRQHandler+0x404>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d03b      	beq.n	80089e2 <HAL_DMA_IRQHandler+0x3e2>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a26      	ldr	r2, [pc, #152]	@ (8008a08 <HAL_DMA_IRQHandler+0x408>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d036      	beq.n	80089e2 <HAL_DMA_IRQHandler+0x3e2>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a24      	ldr	r2, [pc, #144]	@ (8008a0c <HAL_DMA_IRQHandler+0x40c>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d031      	beq.n	80089e2 <HAL_DMA_IRQHandler+0x3e2>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a23      	ldr	r2, [pc, #140]	@ (8008a10 <HAL_DMA_IRQHandler+0x410>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d02c      	beq.n	80089e2 <HAL_DMA_IRQHandler+0x3e2>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a21      	ldr	r2, [pc, #132]	@ (8008a14 <HAL_DMA_IRQHandler+0x414>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d027      	beq.n	80089e2 <HAL_DMA_IRQHandler+0x3e2>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a20      	ldr	r2, [pc, #128]	@ (8008a18 <HAL_DMA_IRQHandler+0x418>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d022      	beq.n	80089e2 <HAL_DMA_IRQHandler+0x3e2>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a1e      	ldr	r2, [pc, #120]	@ (8008a1c <HAL_DMA_IRQHandler+0x41c>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d01d      	beq.n	80089e2 <HAL_DMA_IRQHandler+0x3e2>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a1d      	ldr	r2, [pc, #116]	@ (8008a20 <HAL_DMA_IRQHandler+0x420>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d018      	beq.n	80089e2 <HAL_DMA_IRQHandler+0x3e2>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a1b      	ldr	r2, [pc, #108]	@ (8008a24 <HAL_DMA_IRQHandler+0x424>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d013      	beq.n	80089e2 <HAL_DMA_IRQHandler+0x3e2>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a1a      	ldr	r2, [pc, #104]	@ (8008a28 <HAL_DMA_IRQHandler+0x428>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d00e      	beq.n	80089e2 <HAL_DMA_IRQHandler+0x3e2>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a18      	ldr	r2, [pc, #96]	@ (8008a2c <HAL_DMA_IRQHandler+0x42c>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d009      	beq.n	80089e2 <HAL_DMA_IRQHandler+0x3e2>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a17      	ldr	r2, [pc, #92]	@ (8008a30 <HAL_DMA_IRQHandler+0x430>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d004      	beq.n	80089e2 <HAL_DMA_IRQHandler+0x3e2>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a15      	ldr	r2, [pc, #84]	@ (8008a34 <HAL_DMA_IRQHandler+0x434>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d12a      	bne.n	8008a38 <HAL_DMA_IRQHandler+0x438>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f003 0302 	and.w	r3, r3, #2
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	bf14      	ite	ne
 80089f0:	2301      	movne	r3, #1
 80089f2:	2300      	moveq	r3, #0
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	e023      	b.n	8008a40 <HAL_DMA_IRQHandler+0x440>
 80089f8:	40020010 	.word	0x40020010
 80089fc:	40020028 	.word	0x40020028
 8008a00:	40020040 	.word	0x40020040
 8008a04:	40020058 	.word	0x40020058
 8008a08:	40020070 	.word	0x40020070
 8008a0c:	40020088 	.word	0x40020088
 8008a10:	400200a0 	.word	0x400200a0
 8008a14:	400200b8 	.word	0x400200b8
 8008a18:	40020410 	.word	0x40020410
 8008a1c:	40020428 	.word	0x40020428
 8008a20:	40020440 	.word	0x40020440
 8008a24:	40020458 	.word	0x40020458
 8008a28:	40020470 	.word	0x40020470
 8008a2c:	40020488 	.word	0x40020488
 8008a30:	400204a0 	.word	0x400204a0
 8008a34:	400204b8 	.word	0x400204b8
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	2300      	movs	r3, #0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d00d      	beq.n	8008a60 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a48:	f003 031f 	and.w	r3, r3, #31
 8008a4c:	2204      	movs	r2, #4
 8008a4e:	409a      	lsls	r2, r3
 8008a50:	6a3b      	ldr	r3, [r7, #32]
 8008a52:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a58:	f043 0204 	orr.w	r2, r3, #4
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a64:	f003 031f 	and.w	r3, r3, #31
 8008a68:	2210      	movs	r2, #16
 8008a6a:	409a      	lsls	r2, r3
 8008a6c:	69bb      	ldr	r3, [r7, #24]
 8008a6e:	4013      	ands	r3, r2
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f000 80a6 	beq.w	8008bc2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a85      	ldr	r2, [pc, #532]	@ (8008c90 <HAL_DMA_IRQHandler+0x690>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d04a      	beq.n	8008b16 <HAL_DMA_IRQHandler+0x516>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a83      	ldr	r2, [pc, #524]	@ (8008c94 <HAL_DMA_IRQHandler+0x694>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d045      	beq.n	8008b16 <HAL_DMA_IRQHandler+0x516>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a82      	ldr	r2, [pc, #520]	@ (8008c98 <HAL_DMA_IRQHandler+0x698>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d040      	beq.n	8008b16 <HAL_DMA_IRQHandler+0x516>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a80      	ldr	r2, [pc, #512]	@ (8008c9c <HAL_DMA_IRQHandler+0x69c>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d03b      	beq.n	8008b16 <HAL_DMA_IRQHandler+0x516>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a7f      	ldr	r2, [pc, #508]	@ (8008ca0 <HAL_DMA_IRQHandler+0x6a0>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d036      	beq.n	8008b16 <HAL_DMA_IRQHandler+0x516>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a7d      	ldr	r2, [pc, #500]	@ (8008ca4 <HAL_DMA_IRQHandler+0x6a4>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d031      	beq.n	8008b16 <HAL_DMA_IRQHandler+0x516>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a7c      	ldr	r2, [pc, #496]	@ (8008ca8 <HAL_DMA_IRQHandler+0x6a8>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d02c      	beq.n	8008b16 <HAL_DMA_IRQHandler+0x516>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a7a      	ldr	r2, [pc, #488]	@ (8008cac <HAL_DMA_IRQHandler+0x6ac>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d027      	beq.n	8008b16 <HAL_DMA_IRQHandler+0x516>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a79      	ldr	r2, [pc, #484]	@ (8008cb0 <HAL_DMA_IRQHandler+0x6b0>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d022      	beq.n	8008b16 <HAL_DMA_IRQHandler+0x516>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a77      	ldr	r2, [pc, #476]	@ (8008cb4 <HAL_DMA_IRQHandler+0x6b4>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d01d      	beq.n	8008b16 <HAL_DMA_IRQHandler+0x516>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a76      	ldr	r2, [pc, #472]	@ (8008cb8 <HAL_DMA_IRQHandler+0x6b8>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d018      	beq.n	8008b16 <HAL_DMA_IRQHandler+0x516>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a74      	ldr	r2, [pc, #464]	@ (8008cbc <HAL_DMA_IRQHandler+0x6bc>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d013      	beq.n	8008b16 <HAL_DMA_IRQHandler+0x516>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a73      	ldr	r2, [pc, #460]	@ (8008cc0 <HAL_DMA_IRQHandler+0x6c0>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d00e      	beq.n	8008b16 <HAL_DMA_IRQHandler+0x516>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a71      	ldr	r2, [pc, #452]	@ (8008cc4 <HAL_DMA_IRQHandler+0x6c4>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d009      	beq.n	8008b16 <HAL_DMA_IRQHandler+0x516>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a70      	ldr	r2, [pc, #448]	@ (8008cc8 <HAL_DMA_IRQHandler+0x6c8>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d004      	beq.n	8008b16 <HAL_DMA_IRQHandler+0x516>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a6e      	ldr	r2, [pc, #440]	@ (8008ccc <HAL_DMA_IRQHandler+0x6cc>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d10a      	bne.n	8008b2c <HAL_DMA_IRQHandler+0x52c>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f003 0308 	and.w	r3, r3, #8
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	bf14      	ite	ne
 8008b24:	2301      	movne	r3, #1
 8008b26:	2300      	moveq	r3, #0
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	e009      	b.n	8008b40 <HAL_DMA_IRQHandler+0x540>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f003 0304 	and.w	r3, r3, #4
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	bf14      	ite	ne
 8008b3a:	2301      	movne	r3, #1
 8008b3c:	2300      	moveq	r3, #0
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d03e      	beq.n	8008bc2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b48:	f003 031f 	and.w	r3, r3, #31
 8008b4c:	2210      	movs	r2, #16
 8008b4e:	409a      	lsls	r2, r3
 8008b50:	6a3b      	ldr	r3, [r7, #32]
 8008b52:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d018      	beq.n	8008b94 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d108      	bne.n	8008b82 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d024      	beq.n	8008bc2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	4798      	blx	r3
 8008b80:	e01f      	b.n	8008bc2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d01b      	beq.n	8008bc2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	4798      	blx	r3
 8008b92:	e016      	b.n	8008bc2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d107      	bne.n	8008bb2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f022 0208 	bic.w	r2, r2, #8
 8008bb0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d003      	beq.n	8008bc2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bc6:	f003 031f 	and.w	r3, r3, #31
 8008bca:	2220      	movs	r2, #32
 8008bcc:	409a      	lsls	r2, r3
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	4013      	ands	r3, r2
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	f000 8110 	beq.w	8008df8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a2c      	ldr	r2, [pc, #176]	@ (8008c90 <HAL_DMA_IRQHandler+0x690>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d04a      	beq.n	8008c78 <HAL_DMA_IRQHandler+0x678>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a2b      	ldr	r2, [pc, #172]	@ (8008c94 <HAL_DMA_IRQHandler+0x694>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d045      	beq.n	8008c78 <HAL_DMA_IRQHandler+0x678>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a29      	ldr	r2, [pc, #164]	@ (8008c98 <HAL_DMA_IRQHandler+0x698>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d040      	beq.n	8008c78 <HAL_DMA_IRQHandler+0x678>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a28      	ldr	r2, [pc, #160]	@ (8008c9c <HAL_DMA_IRQHandler+0x69c>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d03b      	beq.n	8008c78 <HAL_DMA_IRQHandler+0x678>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a26      	ldr	r2, [pc, #152]	@ (8008ca0 <HAL_DMA_IRQHandler+0x6a0>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d036      	beq.n	8008c78 <HAL_DMA_IRQHandler+0x678>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a25      	ldr	r2, [pc, #148]	@ (8008ca4 <HAL_DMA_IRQHandler+0x6a4>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d031      	beq.n	8008c78 <HAL_DMA_IRQHandler+0x678>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a23      	ldr	r2, [pc, #140]	@ (8008ca8 <HAL_DMA_IRQHandler+0x6a8>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d02c      	beq.n	8008c78 <HAL_DMA_IRQHandler+0x678>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a22      	ldr	r2, [pc, #136]	@ (8008cac <HAL_DMA_IRQHandler+0x6ac>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d027      	beq.n	8008c78 <HAL_DMA_IRQHandler+0x678>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a20      	ldr	r2, [pc, #128]	@ (8008cb0 <HAL_DMA_IRQHandler+0x6b0>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d022      	beq.n	8008c78 <HAL_DMA_IRQHandler+0x678>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a1f      	ldr	r2, [pc, #124]	@ (8008cb4 <HAL_DMA_IRQHandler+0x6b4>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d01d      	beq.n	8008c78 <HAL_DMA_IRQHandler+0x678>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a1d      	ldr	r2, [pc, #116]	@ (8008cb8 <HAL_DMA_IRQHandler+0x6b8>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d018      	beq.n	8008c78 <HAL_DMA_IRQHandler+0x678>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a1c      	ldr	r2, [pc, #112]	@ (8008cbc <HAL_DMA_IRQHandler+0x6bc>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d013      	beq.n	8008c78 <HAL_DMA_IRQHandler+0x678>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a1a      	ldr	r2, [pc, #104]	@ (8008cc0 <HAL_DMA_IRQHandler+0x6c0>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d00e      	beq.n	8008c78 <HAL_DMA_IRQHandler+0x678>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a19      	ldr	r2, [pc, #100]	@ (8008cc4 <HAL_DMA_IRQHandler+0x6c4>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d009      	beq.n	8008c78 <HAL_DMA_IRQHandler+0x678>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a17      	ldr	r2, [pc, #92]	@ (8008cc8 <HAL_DMA_IRQHandler+0x6c8>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d004      	beq.n	8008c78 <HAL_DMA_IRQHandler+0x678>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a16      	ldr	r2, [pc, #88]	@ (8008ccc <HAL_DMA_IRQHandler+0x6cc>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d12b      	bne.n	8008cd0 <HAL_DMA_IRQHandler+0x6d0>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 0310 	and.w	r3, r3, #16
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	bf14      	ite	ne
 8008c86:	2301      	movne	r3, #1
 8008c88:	2300      	moveq	r3, #0
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	e02a      	b.n	8008ce4 <HAL_DMA_IRQHandler+0x6e4>
 8008c8e:	bf00      	nop
 8008c90:	40020010 	.word	0x40020010
 8008c94:	40020028 	.word	0x40020028
 8008c98:	40020040 	.word	0x40020040
 8008c9c:	40020058 	.word	0x40020058
 8008ca0:	40020070 	.word	0x40020070
 8008ca4:	40020088 	.word	0x40020088
 8008ca8:	400200a0 	.word	0x400200a0
 8008cac:	400200b8 	.word	0x400200b8
 8008cb0:	40020410 	.word	0x40020410
 8008cb4:	40020428 	.word	0x40020428
 8008cb8:	40020440 	.word	0x40020440
 8008cbc:	40020458 	.word	0x40020458
 8008cc0:	40020470 	.word	0x40020470
 8008cc4:	40020488 	.word	0x40020488
 8008cc8:	400204a0 	.word	0x400204a0
 8008ccc:	400204b8 	.word	0x400204b8
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f003 0302 	and.w	r3, r3, #2
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	bf14      	ite	ne
 8008cde:	2301      	movne	r3, #1
 8008ce0:	2300      	moveq	r3, #0
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	f000 8087 	beq.w	8008df8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008cee:	f003 031f 	and.w	r3, r3, #31
 8008cf2:	2220      	movs	r2, #32
 8008cf4:	409a      	lsls	r2, r3
 8008cf6:	6a3b      	ldr	r3, [r7, #32]
 8008cf8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	2b04      	cmp	r3, #4
 8008d04:	d139      	bne.n	8008d7a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f022 0216 	bic.w	r2, r2, #22
 8008d14:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	695a      	ldr	r2, [r3, #20]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008d24:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d103      	bne.n	8008d36 <HAL_DMA_IRQHandler+0x736>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d007      	beq.n	8008d46 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f022 0208 	bic.w	r2, r2, #8
 8008d44:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d4a:	f003 031f 	and.w	r3, r3, #31
 8008d4e:	223f      	movs	r2, #63	@ 0x3f
 8008d50:	409a      	lsls	r2, r3
 8008d52:	6a3b      	ldr	r3, [r7, #32]
 8008d54:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	f000 834a 	beq.w	8009404 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	4798      	blx	r3
          }
          return;
 8008d78:	e344      	b.n	8009404 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d018      	beq.n	8008dba <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d108      	bne.n	8008da8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d02c      	beq.n	8008df8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	4798      	blx	r3
 8008da6:	e027      	b.n	8008df8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d023      	beq.n	8008df8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	4798      	blx	r3
 8008db8:	e01e      	b.n	8008df8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d10f      	bne.n	8008de8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f022 0210 	bic.w	r2, r2, #16
 8008dd6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2200      	movs	r2, #0
 8008de4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d003      	beq.n	8008df8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f000 8306 	beq.w	800940e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e06:	f003 0301 	and.w	r3, r3, #1
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	f000 8088 	beq.w	8008f20 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2204      	movs	r2, #4
 8008e14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a7a      	ldr	r2, [pc, #488]	@ (8009008 <HAL_DMA_IRQHandler+0xa08>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d04a      	beq.n	8008eb8 <HAL_DMA_IRQHandler+0x8b8>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a79      	ldr	r2, [pc, #484]	@ (800900c <HAL_DMA_IRQHandler+0xa0c>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d045      	beq.n	8008eb8 <HAL_DMA_IRQHandler+0x8b8>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a77      	ldr	r2, [pc, #476]	@ (8009010 <HAL_DMA_IRQHandler+0xa10>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d040      	beq.n	8008eb8 <HAL_DMA_IRQHandler+0x8b8>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a76      	ldr	r2, [pc, #472]	@ (8009014 <HAL_DMA_IRQHandler+0xa14>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d03b      	beq.n	8008eb8 <HAL_DMA_IRQHandler+0x8b8>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a74      	ldr	r2, [pc, #464]	@ (8009018 <HAL_DMA_IRQHandler+0xa18>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d036      	beq.n	8008eb8 <HAL_DMA_IRQHandler+0x8b8>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a73      	ldr	r2, [pc, #460]	@ (800901c <HAL_DMA_IRQHandler+0xa1c>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d031      	beq.n	8008eb8 <HAL_DMA_IRQHandler+0x8b8>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a71      	ldr	r2, [pc, #452]	@ (8009020 <HAL_DMA_IRQHandler+0xa20>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d02c      	beq.n	8008eb8 <HAL_DMA_IRQHandler+0x8b8>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a70      	ldr	r2, [pc, #448]	@ (8009024 <HAL_DMA_IRQHandler+0xa24>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d027      	beq.n	8008eb8 <HAL_DMA_IRQHandler+0x8b8>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a6e      	ldr	r2, [pc, #440]	@ (8009028 <HAL_DMA_IRQHandler+0xa28>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d022      	beq.n	8008eb8 <HAL_DMA_IRQHandler+0x8b8>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a6d      	ldr	r2, [pc, #436]	@ (800902c <HAL_DMA_IRQHandler+0xa2c>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d01d      	beq.n	8008eb8 <HAL_DMA_IRQHandler+0x8b8>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a6b      	ldr	r2, [pc, #428]	@ (8009030 <HAL_DMA_IRQHandler+0xa30>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d018      	beq.n	8008eb8 <HAL_DMA_IRQHandler+0x8b8>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a6a      	ldr	r2, [pc, #424]	@ (8009034 <HAL_DMA_IRQHandler+0xa34>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d013      	beq.n	8008eb8 <HAL_DMA_IRQHandler+0x8b8>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a68      	ldr	r2, [pc, #416]	@ (8009038 <HAL_DMA_IRQHandler+0xa38>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d00e      	beq.n	8008eb8 <HAL_DMA_IRQHandler+0x8b8>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a67      	ldr	r2, [pc, #412]	@ (800903c <HAL_DMA_IRQHandler+0xa3c>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d009      	beq.n	8008eb8 <HAL_DMA_IRQHandler+0x8b8>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a65      	ldr	r2, [pc, #404]	@ (8009040 <HAL_DMA_IRQHandler+0xa40>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d004      	beq.n	8008eb8 <HAL_DMA_IRQHandler+0x8b8>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a64      	ldr	r2, [pc, #400]	@ (8009044 <HAL_DMA_IRQHandler+0xa44>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d108      	bne.n	8008eca <HAL_DMA_IRQHandler+0x8ca>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f022 0201 	bic.w	r2, r2, #1
 8008ec6:	601a      	str	r2, [r3, #0]
 8008ec8:	e007      	b.n	8008eda <HAL_DMA_IRQHandler+0x8da>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f022 0201 	bic.w	r2, r2, #1
 8008ed8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	3301      	adds	r3, #1
 8008ede:	60fb      	str	r3, [r7, #12]
 8008ee0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d307      	bcc.n	8008ef6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f003 0301 	and.w	r3, r3, #1
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d1f2      	bne.n	8008eda <HAL_DMA_IRQHandler+0x8da>
 8008ef4:	e000      	b.n	8008ef8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008ef6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f003 0301 	and.w	r3, r3, #1
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d004      	beq.n	8008f10 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2203      	movs	r2, #3
 8008f0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8008f0e:	e003      	b.n	8008f18 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2201      	movs	r2, #1
 8008f14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f000 8272 	beq.w	800940e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	4798      	blx	r3
 8008f32:	e26c      	b.n	800940e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a43      	ldr	r2, [pc, #268]	@ (8009048 <HAL_DMA_IRQHandler+0xa48>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d022      	beq.n	8008f84 <HAL_DMA_IRQHandler+0x984>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a42      	ldr	r2, [pc, #264]	@ (800904c <HAL_DMA_IRQHandler+0xa4c>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d01d      	beq.n	8008f84 <HAL_DMA_IRQHandler+0x984>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a40      	ldr	r2, [pc, #256]	@ (8009050 <HAL_DMA_IRQHandler+0xa50>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d018      	beq.n	8008f84 <HAL_DMA_IRQHandler+0x984>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a3f      	ldr	r2, [pc, #252]	@ (8009054 <HAL_DMA_IRQHandler+0xa54>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d013      	beq.n	8008f84 <HAL_DMA_IRQHandler+0x984>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a3d      	ldr	r2, [pc, #244]	@ (8009058 <HAL_DMA_IRQHandler+0xa58>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d00e      	beq.n	8008f84 <HAL_DMA_IRQHandler+0x984>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a3c      	ldr	r2, [pc, #240]	@ (800905c <HAL_DMA_IRQHandler+0xa5c>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d009      	beq.n	8008f84 <HAL_DMA_IRQHandler+0x984>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a3a      	ldr	r2, [pc, #232]	@ (8009060 <HAL_DMA_IRQHandler+0xa60>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d004      	beq.n	8008f84 <HAL_DMA_IRQHandler+0x984>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a39      	ldr	r2, [pc, #228]	@ (8009064 <HAL_DMA_IRQHandler+0xa64>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d101      	bne.n	8008f88 <HAL_DMA_IRQHandler+0x988>
 8008f84:	2301      	movs	r3, #1
 8008f86:	e000      	b.n	8008f8a <HAL_DMA_IRQHandler+0x98a>
 8008f88:	2300      	movs	r3, #0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	f000 823f 	beq.w	800940e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f9c:	f003 031f 	and.w	r3, r3, #31
 8008fa0:	2204      	movs	r2, #4
 8008fa2:	409a      	lsls	r2, r3
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	4013      	ands	r3, r2
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	f000 80cd 	beq.w	8009148 <HAL_DMA_IRQHandler+0xb48>
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	f003 0304 	and.w	r3, r3, #4
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f000 80c7 	beq.w	8009148 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fbe:	f003 031f 	and.w	r3, r3, #31
 8008fc2:	2204      	movs	r2, #4
 8008fc4:	409a      	lsls	r2, r3
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d049      	beq.n	8009068 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d109      	bne.n	8008ff2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	f000 8210 	beq.w	8009408 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008ff0:	e20a      	b.n	8009408 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	f000 8206 	beq.w	8009408 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009004:	e200      	b.n	8009408 <HAL_DMA_IRQHandler+0xe08>
 8009006:	bf00      	nop
 8009008:	40020010 	.word	0x40020010
 800900c:	40020028 	.word	0x40020028
 8009010:	40020040 	.word	0x40020040
 8009014:	40020058 	.word	0x40020058
 8009018:	40020070 	.word	0x40020070
 800901c:	40020088 	.word	0x40020088
 8009020:	400200a0 	.word	0x400200a0
 8009024:	400200b8 	.word	0x400200b8
 8009028:	40020410 	.word	0x40020410
 800902c:	40020428 	.word	0x40020428
 8009030:	40020440 	.word	0x40020440
 8009034:	40020458 	.word	0x40020458
 8009038:	40020470 	.word	0x40020470
 800903c:	40020488 	.word	0x40020488
 8009040:	400204a0 	.word	0x400204a0
 8009044:	400204b8 	.word	0x400204b8
 8009048:	58025408 	.word	0x58025408
 800904c:	5802541c 	.word	0x5802541c
 8009050:	58025430 	.word	0x58025430
 8009054:	58025444 	.word	0x58025444
 8009058:	58025458 	.word	0x58025458
 800905c:	5802546c 	.word	0x5802546c
 8009060:	58025480 	.word	0x58025480
 8009064:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	f003 0320 	and.w	r3, r3, #32
 800906e:	2b00      	cmp	r3, #0
 8009070:	d160      	bne.n	8009134 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a7f      	ldr	r2, [pc, #508]	@ (8009274 <HAL_DMA_IRQHandler+0xc74>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d04a      	beq.n	8009112 <HAL_DMA_IRQHandler+0xb12>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a7d      	ldr	r2, [pc, #500]	@ (8009278 <HAL_DMA_IRQHandler+0xc78>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d045      	beq.n	8009112 <HAL_DMA_IRQHandler+0xb12>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a7c      	ldr	r2, [pc, #496]	@ (800927c <HAL_DMA_IRQHandler+0xc7c>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d040      	beq.n	8009112 <HAL_DMA_IRQHandler+0xb12>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a7a      	ldr	r2, [pc, #488]	@ (8009280 <HAL_DMA_IRQHandler+0xc80>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d03b      	beq.n	8009112 <HAL_DMA_IRQHandler+0xb12>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a79      	ldr	r2, [pc, #484]	@ (8009284 <HAL_DMA_IRQHandler+0xc84>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d036      	beq.n	8009112 <HAL_DMA_IRQHandler+0xb12>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a77      	ldr	r2, [pc, #476]	@ (8009288 <HAL_DMA_IRQHandler+0xc88>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d031      	beq.n	8009112 <HAL_DMA_IRQHandler+0xb12>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a76      	ldr	r2, [pc, #472]	@ (800928c <HAL_DMA_IRQHandler+0xc8c>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d02c      	beq.n	8009112 <HAL_DMA_IRQHandler+0xb12>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a74      	ldr	r2, [pc, #464]	@ (8009290 <HAL_DMA_IRQHandler+0xc90>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d027      	beq.n	8009112 <HAL_DMA_IRQHandler+0xb12>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a73      	ldr	r2, [pc, #460]	@ (8009294 <HAL_DMA_IRQHandler+0xc94>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d022      	beq.n	8009112 <HAL_DMA_IRQHandler+0xb12>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a71      	ldr	r2, [pc, #452]	@ (8009298 <HAL_DMA_IRQHandler+0xc98>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d01d      	beq.n	8009112 <HAL_DMA_IRQHandler+0xb12>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a70      	ldr	r2, [pc, #448]	@ (800929c <HAL_DMA_IRQHandler+0xc9c>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d018      	beq.n	8009112 <HAL_DMA_IRQHandler+0xb12>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a6e      	ldr	r2, [pc, #440]	@ (80092a0 <HAL_DMA_IRQHandler+0xca0>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d013      	beq.n	8009112 <HAL_DMA_IRQHandler+0xb12>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a6d      	ldr	r2, [pc, #436]	@ (80092a4 <HAL_DMA_IRQHandler+0xca4>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d00e      	beq.n	8009112 <HAL_DMA_IRQHandler+0xb12>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a6b      	ldr	r2, [pc, #428]	@ (80092a8 <HAL_DMA_IRQHandler+0xca8>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d009      	beq.n	8009112 <HAL_DMA_IRQHandler+0xb12>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a6a      	ldr	r2, [pc, #424]	@ (80092ac <HAL_DMA_IRQHandler+0xcac>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d004      	beq.n	8009112 <HAL_DMA_IRQHandler+0xb12>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a68      	ldr	r2, [pc, #416]	@ (80092b0 <HAL_DMA_IRQHandler+0xcb0>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d108      	bne.n	8009124 <HAL_DMA_IRQHandler+0xb24>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f022 0208 	bic.w	r2, r2, #8
 8009120:	601a      	str	r2, [r3, #0]
 8009122:	e007      	b.n	8009134 <HAL_DMA_IRQHandler+0xb34>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f022 0204 	bic.w	r2, r2, #4
 8009132:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009138:	2b00      	cmp	r3, #0
 800913a:	f000 8165 	beq.w	8009408 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009146:	e15f      	b.n	8009408 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800914c:	f003 031f 	and.w	r3, r3, #31
 8009150:	2202      	movs	r2, #2
 8009152:	409a      	lsls	r2, r3
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	4013      	ands	r3, r2
 8009158:	2b00      	cmp	r3, #0
 800915a:	f000 80c5 	beq.w	80092e8 <HAL_DMA_IRQHandler+0xce8>
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	f003 0302 	and.w	r3, r3, #2
 8009164:	2b00      	cmp	r3, #0
 8009166:	f000 80bf 	beq.w	80092e8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800916e:	f003 031f 	and.w	r3, r3, #31
 8009172:	2202      	movs	r2, #2
 8009174:	409a      	lsls	r2, r3
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009180:	2b00      	cmp	r3, #0
 8009182:	d018      	beq.n	80091b6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800918a:	2b00      	cmp	r3, #0
 800918c:	d109      	bne.n	80091a2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009192:	2b00      	cmp	r3, #0
 8009194:	f000 813a 	beq.w	800940c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80091a0:	e134      	b.n	800940c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f000 8130 	beq.w	800940c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80091b4:	e12a      	b.n	800940c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	f003 0320 	and.w	r3, r3, #32
 80091bc:	2b00      	cmp	r3, #0
 80091be:	f040 8089 	bne.w	80092d4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a2b      	ldr	r2, [pc, #172]	@ (8009274 <HAL_DMA_IRQHandler+0xc74>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d04a      	beq.n	8009262 <HAL_DMA_IRQHandler+0xc62>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a29      	ldr	r2, [pc, #164]	@ (8009278 <HAL_DMA_IRQHandler+0xc78>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d045      	beq.n	8009262 <HAL_DMA_IRQHandler+0xc62>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a28      	ldr	r2, [pc, #160]	@ (800927c <HAL_DMA_IRQHandler+0xc7c>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d040      	beq.n	8009262 <HAL_DMA_IRQHandler+0xc62>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a26      	ldr	r2, [pc, #152]	@ (8009280 <HAL_DMA_IRQHandler+0xc80>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d03b      	beq.n	8009262 <HAL_DMA_IRQHandler+0xc62>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a25      	ldr	r2, [pc, #148]	@ (8009284 <HAL_DMA_IRQHandler+0xc84>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d036      	beq.n	8009262 <HAL_DMA_IRQHandler+0xc62>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a23      	ldr	r2, [pc, #140]	@ (8009288 <HAL_DMA_IRQHandler+0xc88>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d031      	beq.n	8009262 <HAL_DMA_IRQHandler+0xc62>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a22      	ldr	r2, [pc, #136]	@ (800928c <HAL_DMA_IRQHandler+0xc8c>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d02c      	beq.n	8009262 <HAL_DMA_IRQHandler+0xc62>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a20      	ldr	r2, [pc, #128]	@ (8009290 <HAL_DMA_IRQHandler+0xc90>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d027      	beq.n	8009262 <HAL_DMA_IRQHandler+0xc62>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a1f      	ldr	r2, [pc, #124]	@ (8009294 <HAL_DMA_IRQHandler+0xc94>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d022      	beq.n	8009262 <HAL_DMA_IRQHandler+0xc62>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a1d      	ldr	r2, [pc, #116]	@ (8009298 <HAL_DMA_IRQHandler+0xc98>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d01d      	beq.n	8009262 <HAL_DMA_IRQHandler+0xc62>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a1c      	ldr	r2, [pc, #112]	@ (800929c <HAL_DMA_IRQHandler+0xc9c>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d018      	beq.n	8009262 <HAL_DMA_IRQHandler+0xc62>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a1a      	ldr	r2, [pc, #104]	@ (80092a0 <HAL_DMA_IRQHandler+0xca0>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d013      	beq.n	8009262 <HAL_DMA_IRQHandler+0xc62>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a19      	ldr	r2, [pc, #100]	@ (80092a4 <HAL_DMA_IRQHandler+0xca4>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d00e      	beq.n	8009262 <HAL_DMA_IRQHandler+0xc62>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a17      	ldr	r2, [pc, #92]	@ (80092a8 <HAL_DMA_IRQHandler+0xca8>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d009      	beq.n	8009262 <HAL_DMA_IRQHandler+0xc62>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4a16      	ldr	r2, [pc, #88]	@ (80092ac <HAL_DMA_IRQHandler+0xcac>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d004      	beq.n	8009262 <HAL_DMA_IRQHandler+0xc62>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a14      	ldr	r2, [pc, #80]	@ (80092b0 <HAL_DMA_IRQHandler+0xcb0>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d128      	bne.n	80092b4 <HAL_DMA_IRQHandler+0xcb4>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	681a      	ldr	r2, [r3, #0]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f022 0214 	bic.w	r2, r2, #20
 8009270:	601a      	str	r2, [r3, #0]
 8009272:	e027      	b.n	80092c4 <HAL_DMA_IRQHandler+0xcc4>
 8009274:	40020010 	.word	0x40020010
 8009278:	40020028 	.word	0x40020028
 800927c:	40020040 	.word	0x40020040
 8009280:	40020058 	.word	0x40020058
 8009284:	40020070 	.word	0x40020070
 8009288:	40020088 	.word	0x40020088
 800928c:	400200a0 	.word	0x400200a0
 8009290:	400200b8 	.word	0x400200b8
 8009294:	40020410 	.word	0x40020410
 8009298:	40020428 	.word	0x40020428
 800929c:	40020440 	.word	0x40020440
 80092a0:	40020458 	.word	0x40020458
 80092a4:	40020470 	.word	0x40020470
 80092a8:	40020488 	.word	0x40020488
 80092ac:	400204a0 	.word	0x400204a0
 80092b0:	400204b8 	.word	0x400204b8
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f022 020a 	bic.w	r2, r2, #10
 80092c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f000 8097 	beq.w	800940c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80092e6:	e091      	b.n	800940c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092ec:	f003 031f 	and.w	r3, r3, #31
 80092f0:	2208      	movs	r2, #8
 80092f2:	409a      	lsls	r2, r3
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	4013      	ands	r3, r2
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	f000 8088 	beq.w	800940e <HAL_DMA_IRQHandler+0xe0e>
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	f003 0308 	and.w	r3, r3, #8
 8009304:	2b00      	cmp	r3, #0
 8009306:	f000 8082 	beq.w	800940e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a41      	ldr	r2, [pc, #260]	@ (8009414 <HAL_DMA_IRQHandler+0xe14>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d04a      	beq.n	80093aa <HAL_DMA_IRQHandler+0xdaa>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a3f      	ldr	r2, [pc, #252]	@ (8009418 <HAL_DMA_IRQHandler+0xe18>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d045      	beq.n	80093aa <HAL_DMA_IRQHandler+0xdaa>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a3e      	ldr	r2, [pc, #248]	@ (800941c <HAL_DMA_IRQHandler+0xe1c>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d040      	beq.n	80093aa <HAL_DMA_IRQHandler+0xdaa>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a3c      	ldr	r2, [pc, #240]	@ (8009420 <HAL_DMA_IRQHandler+0xe20>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d03b      	beq.n	80093aa <HAL_DMA_IRQHandler+0xdaa>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a3b      	ldr	r2, [pc, #236]	@ (8009424 <HAL_DMA_IRQHandler+0xe24>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d036      	beq.n	80093aa <HAL_DMA_IRQHandler+0xdaa>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a39      	ldr	r2, [pc, #228]	@ (8009428 <HAL_DMA_IRQHandler+0xe28>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d031      	beq.n	80093aa <HAL_DMA_IRQHandler+0xdaa>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a38      	ldr	r2, [pc, #224]	@ (800942c <HAL_DMA_IRQHandler+0xe2c>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d02c      	beq.n	80093aa <HAL_DMA_IRQHandler+0xdaa>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a36      	ldr	r2, [pc, #216]	@ (8009430 <HAL_DMA_IRQHandler+0xe30>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d027      	beq.n	80093aa <HAL_DMA_IRQHandler+0xdaa>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a35      	ldr	r2, [pc, #212]	@ (8009434 <HAL_DMA_IRQHandler+0xe34>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d022      	beq.n	80093aa <HAL_DMA_IRQHandler+0xdaa>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a33      	ldr	r2, [pc, #204]	@ (8009438 <HAL_DMA_IRQHandler+0xe38>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d01d      	beq.n	80093aa <HAL_DMA_IRQHandler+0xdaa>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a32      	ldr	r2, [pc, #200]	@ (800943c <HAL_DMA_IRQHandler+0xe3c>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d018      	beq.n	80093aa <HAL_DMA_IRQHandler+0xdaa>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a30      	ldr	r2, [pc, #192]	@ (8009440 <HAL_DMA_IRQHandler+0xe40>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d013      	beq.n	80093aa <HAL_DMA_IRQHandler+0xdaa>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a2f      	ldr	r2, [pc, #188]	@ (8009444 <HAL_DMA_IRQHandler+0xe44>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d00e      	beq.n	80093aa <HAL_DMA_IRQHandler+0xdaa>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a2d      	ldr	r2, [pc, #180]	@ (8009448 <HAL_DMA_IRQHandler+0xe48>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d009      	beq.n	80093aa <HAL_DMA_IRQHandler+0xdaa>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a2c      	ldr	r2, [pc, #176]	@ (800944c <HAL_DMA_IRQHandler+0xe4c>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d004      	beq.n	80093aa <HAL_DMA_IRQHandler+0xdaa>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a2a      	ldr	r2, [pc, #168]	@ (8009450 <HAL_DMA_IRQHandler+0xe50>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d108      	bne.n	80093bc <HAL_DMA_IRQHandler+0xdbc>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f022 021c 	bic.w	r2, r2, #28
 80093b8:	601a      	str	r2, [r3, #0]
 80093ba:	e007      	b.n	80093cc <HAL_DMA_IRQHandler+0xdcc>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f022 020e 	bic.w	r2, r2, #14
 80093ca:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80093d0:	f003 031f 	and.w	r3, r3, #31
 80093d4:	2201      	movs	r2, #1
 80093d6:	409a      	lsls	r2, r3
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2201      	movs	r2, #1
 80093e0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2201      	movs	r2, #1
 80093e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d009      	beq.n	800940e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	4798      	blx	r3
 8009402:	e004      	b.n	800940e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009404:	bf00      	nop
 8009406:	e002      	b.n	800940e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009408:	bf00      	nop
 800940a:	e000      	b.n	800940e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800940c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800940e:	3728      	adds	r7, #40	@ 0x28
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}
 8009414:	40020010 	.word	0x40020010
 8009418:	40020028 	.word	0x40020028
 800941c:	40020040 	.word	0x40020040
 8009420:	40020058 	.word	0x40020058
 8009424:	40020070 	.word	0x40020070
 8009428:	40020088 	.word	0x40020088
 800942c:	400200a0 	.word	0x400200a0
 8009430:	400200b8 	.word	0x400200b8
 8009434:	40020410 	.word	0x40020410
 8009438:	40020428 	.word	0x40020428
 800943c:	40020440 	.word	0x40020440
 8009440:	40020458 	.word	0x40020458
 8009444:	40020470 	.word	0x40020470
 8009448:	40020488 	.word	0x40020488
 800944c:	400204a0 	.word	0x400204a0
 8009450:	400204b8 	.word	0x400204b8

08009454 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009454:	b480      	push	{r7}
 8009456:	b087      	sub	sp, #28
 8009458:	af00      	add	r7, sp, #0
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	607a      	str	r2, [r7, #4]
 8009460:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009466:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800946c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a7f      	ldr	r2, [pc, #508]	@ (8009670 <DMA_SetConfig+0x21c>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d072      	beq.n	800955e <DMA_SetConfig+0x10a>
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a7d      	ldr	r2, [pc, #500]	@ (8009674 <DMA_SetConfig+0x220>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d06d      	beq.n	800955e <DMA_SetConfig+0x10a>
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a7c      	ldr	r2, [pc, #496]	@ (8009678 <DMA_SetConfig+0x224>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d068      	beq.n	800955e <DMA_SetConfig+0x10a>
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a7a      	ldr	r2, [pc, #488]	@ (800967c <DMA_SetConfig+0x228>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d063      	beq.n	800955e <DMA_SetConfig+0x10a>
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a79      	ldr	r2, [pc, #484]	@ (8009680 <DMA_SetConfig+0x22c>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d05e      	beq.n	800955e <DMA_SetConfig+0x10a>
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a77      	ldr	r2, [pc, #476]	@ (8009684 <DMA_SetConfig+0x230>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d059      	beq.n	800955e <DMA_SetConfig+0x10a>
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a76      	ldr	r2, [pc, #472]	@ (8009688 <DMA_SetConfig+0x234>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d054      	beq.n	800955e <DMA_SetConfig+0x10a>
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a74      	ldr	r2, [pc, #464]	@ (800968c <DMA_SetConfig+0x238>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d04f      	beq.n	800955e <DMA_SetConfig+0x10a>
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a73      	ldr	r2, [pc, #460]	@ (8009690 <DMA_SetConfig+0x23c>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d04a      	beq.n	800955e <DMA_SetConfig+0x10a>
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a71      	ldr	r2, [pc, #452]	@ (8009694 <DMA_SetConfig+0x240>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d045      	beq.n	800955e <DMA_SetConfig+0x10a>
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a70      	ldr	r2, [pc, #448]	@ (8009698 <DMA_SetConfig+0x244>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d040      	beq.n	800955e <DMA_SetConfig+0x10a>
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a6e      	ldr	r2, [pc, #440]	@ (800969c <DMA_SetConfig+0x248>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d03b      	beq.n	800955e <DMA_SetConfig+0x10a>
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a6d      	ldr	r2, [pc, #436]	@ (80096a0 <DMA_SetConfig+0x24c>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d036      	beq.n	800955e <DMA_SetConfig+0x10a>
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a6b      	ldr	r2, [pc, #428]	@ (80096a4 <DMA_SetConfig+0x250>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d031      	beq.n	800955e <DMA_SetConfig+0x10a>
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a6a      	ldr	r2, [pc, #424]	@ (80096a8 <DMA_SetConfig+0x254>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d02c      	beq.n	800955e <DMA_SetConfig+0x10a>
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a68      	ldr	r2, [pc, #416]	@ (80096ac <DMA_SetConfig+0x258>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d027      	beq.n	800955e <DMA_SetConfig+0x10a>
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a67      	ldr	r2, [pc, #412]	@ (80096b0 <DMA_SetConfig+0x25c>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d022      	beq.n	800955e <DMA_SetConfig+0x10a>
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a65      	ldr	r2, [pc, #404]	@ (80096b4 <DMA_SetConfig+0x260>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d01d      	beq.n	800955e <DMA_SetConfig+0x10a>
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4a64      	ldr	r2, [pc, #400]	@ (80096b8 <DMA_SetConfig+0x264>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d018      	beq.n	800955e <DMA_SetConfig+0x10a>
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a62      	ldr	r2, [pc, #392]	@ (80096bc <DMA_SetConfig+0x268>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d013      	beq.n	800955e <DMA_SetConfig+0x10a>
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a61      	ldr	r2, [pc, #388]	@ (80096c0 <DMA_SetConfig+0x26c>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d00e      	beq.n	800955e <DMA_SetConfig+0x10a>
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a5f      	ldr	r2, [pc, #380]	@ (80096c4 <DMA_SetConfig+0x270>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d009      	beq.n	800955e <DMA_SetConfig+0x10a>
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a5e      	ldr	r2, [pc, #376]	@ (80096c8 <DMA_SetConfig+0x274>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d004      	beq.n	800955e <DMA_SetConfig+0x10a>
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a5c      	ldr	r2, [pc, #368]	@ (80096cc <DMA_SetConfig+0x278>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d101      	bne.n	8009562 <DMA_SetConfig+0x10e>
 800955e:	2301      	movs	r3, #1
 8009560:	e000      	b.n	8009564 <DMA_SetConfig+0x110>
 8009562:	2300      	movs	r3, #0
 8009564:	2b00      	cmp	r3, #0
 8009566:	d00d      	beq.n	8009584 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009570:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009576:	2b00      	cmp	r3, #0
 8009578:	d004      	beq.n	8009584 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800957e:	68fa      	ldr	r2, [r7, #12]
 8009580:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009582:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a39      	ldr	r2, [pc, #228]	@ (8009670 <DMA_SetConfig+0x21c>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d04a      	beq.n	8009624 <DMA_SetConfig+0x1d0>
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a38      	ldr	r2, [pc, #224]	@ (8009674 <DMA_SetConfig+0x220>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d045      	beq.n	8009624 <DMA_SetConfig+0x1d0>
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a36      	ldr	r2, [pc, #216]	@ (8009678 <DMA_SetConfig+0x224>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d040      	beq.n	8009624 <DMA_SetConfig+0x1d0>
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a35      	ldr	r2, [pc, #212]	@ (800967c <DMA_SetConfig+0x228>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d03b      	beq.n	8009624 <DMA_SetConfig+0x1d0>
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a33      	ldr	r2, [pc, #204]	@ (8009680 <DMA_SetConfig+0x22c>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d036      	beq.n	8009624 <DMA_SetConfig+0x1d0>
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a32      	ldr	r2, [pc, #200]	@ (8009684 <DMA_SetConfig+0x230>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d031      	beq.n	8009624 <DMA_SetConfig+0x1d0>
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a30      	ldr	r2, [pc, #192]	@ (8009688 <DMA_SetConfig+0x234>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d02c      	beq.n	8009624 <DMA_SetConfig+0x1d0>
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a2f      	ldr	r2, [pc, #188]	@ (800968c <DMA_SetConfig+0x238>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d027      	beq.n	8009624 <DMA_SetConfig+0x1d0>
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a2d      	ldr	r2, [pc, #180]	@ (8009690 <DMA_SetConfig+0x23c>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d022      	beq.n	8009624 <DMA_SetConfig+0x1d0>
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a2c      	ldr	r2, [pc, #176]	@ (8009694 <DMA_SetConfig+0x240>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d01d      	beq.n	8009624 <DMA_SetConfig+0x1d0>
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a2a      	ldr	r2, [pc, #168]	@ (8009698 <DMA_SetConfig+0x244>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d018      	beq.n	8009624 <DMA_SetConfig+0x1d0>
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a29      	ldr	r2, [pc, #164]	@ (800969c <DMA_SetConfig+0x248>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d013      	beq.n	8009624 <DMA_SetConfig+0x1d0>
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a27      	ldr	r2, [pc, #156]	@ (80096a0 <DMA_SetConfig+0x24c>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d00e      	beq.n	8009624 <DMA_SetConfig+0x1d0>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a26      	ldr	r2, [pc, #152]	@ (80096a4 <DMA_SetConfig+0x250>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d009      	beq.n	8009624 <DMA_SetConfig+0x1d0>
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a24      	ldr	r2, [pc, #144]	@ (80096a8 <DMA_SetConfig+0x254>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d004      	beq.n	8009624 <DMA_SetConfig+0x1d0>
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a23      	ldr	r2, [pc, #140]	@ (80096ac <DMA_SetConfig+0x258>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d101      	bne.n	8009628 <DMA_SetConfig+0x1d4>
 8009624:	2301      	movs	r3, #1
 8009626:	e000      	b.n	800962a <DMA_SetConfig+0x1d6>
 8009628:	2300      	movs	r3, #0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d059      	beq.n	80096e2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009632:	f003 031f 	and.w	r3, r3, #31
 8009636:	223f      	movs	r2, #63	@ 0x3f
 8009638:	409a      	lsls	r2, r3
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800964c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	683a      	ldr	r2, [r7, #0]
 8009654:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	2b40      	cmp	r3, #64	@ 0x40
 800965c:	d138      	bne.n	80096d0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	68ba      	ldr	r2, [r7, #8]
 800966c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800966e:	e086      	b.n	800977e <DMA_SetConfig+0x32a>
 8009670:	40020010 	.word	0x40020010
 8009674:	40020028 	.word	0x40020028
 8009678:	40020040 	.word	0x40020040
 800967c:	40020058 	.word	0x40020058
 8009680:	40020070 	.word	0x40020070
 8009684:	40020088 	.word	0x40020088
 8009688:	400200a0 	.word	0x400200a0
 800968c:	400200b8 	.word	0x400200b8
 8009690:	40020410 	.word	0x40020410
 8009694:	40020428 	.word	0x40020428
 8009698:	40020440 	.word	0x40020440
 800969c:	40020458 	.word	0x40020458
 80096a0:	40020470 	.word	0x40020470
 80096a4:	40020488 	.word	0x40020488
 80096a8:	400204a0 	.word	0x400204a0
 80096ac:	400204b8 	.word	0x400204b8
 80096b0:	58025408 	.word	0x58025408
 80096b4:	5802541c 	.word	0x5802541c
 80096b8:	58025430 	.word	0x58025430
 80096bc:	58025444 	.word	0x58025444
 80096c0:	58025458 	.word	0x58025458
 80096c4:	5802546c 	.word	0x5802546c
 80096c8:	58025480 	.word	0x58025480
 80096cc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	68ba      	ldr	r2, [r7, #8]
 80096d6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	687a      	ldr	r2, [r7, #4]
 80096de:	60da      	str	r2, [r3, #12]
}
 80096e0:	e04d      	b.n	800977e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a29      	ldr	r2, [pc, #164]	@ (800978c <DMA_SetConfig+0x338>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d022      	beq.n	8009732 <DMA_SetConfig+0x2de>
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a27      	ldr	r2, [pc, #156]	@ (8009790 <DMA_SetConfig+0x33c>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d01d      	beq.n	8009732 <DMA_SetConfig+0x2de>
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a26      	ldr	r2, [pc, #152]	@ (8009794 <DMA_SetConfig+0x340>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d018      	beq.n	8009732 <DMA_SetConfig+0x2de>
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a24      	ldr	r2, [pc, #144]	@ (8009798 <DMA_SetConfig+0x344>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d013      	beq.n	8009732 <DMA_SetConfig+0x2de>
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a23      	ldr	r2, [pc, #140]	@ (800979c <DMA_SetConfig+0x348>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d00e      	beq.n	8009732 <DMA_SetConfig+0x2de>
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a21      	ldr	r2, [pc, #132]	@ (80097a0 <DMA_SetConfig+0x34c>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d009      	beq.n	8009732 <DMA_SetConfig+0x2de>
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a20      	ldr	r2, [pc, #128]	@ (80097a4 <DMA_SetConfig+0x350>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d004      	beq.n	8009732 <DMA_SetConfig+0x2de>
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a1e      	ldr	r2, [pc, #120]	@ (80097a8 <DMA_SetConfig+0x354>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d101      	bne.n	8009736 <DMA_SetConfig+0x2e2>
 8009732:	2301      	movs	r3, #1
 8009734:	e000      	b.n	8009738 <DMA_SetConfig+0x2e4>
 8009736:	2300      	movs	r3, #0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d020      	beq.n	800977e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009740:	f003 031f 	and.w	r3, r3, #31
 8009744:	2201      	movs	r2, #1
 8009746:	409a      	lsls	r2, r3
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	683a      	ldr	r2, [r7, #0]
 8009752:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	2b40      	cmp	r3, #64	@ 0x40
 800975a:	d108      	bne.n	800976e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	68ba      	ldr	r2, [r7, #8]
 800976a:	60da      	str	r2, [r3, #12]
}
 800976c:	e007      	b.n	800977e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	68ba      	ldr	r2, [r7, #8]
 8009774:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	60da      	str	r2, [r3, #12]
}
 800977e:	bf00      	nop
 8009780:	371c      	adds	r7, #28
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	58025408 	.word	0x58025408
 8009790:	5802541c 	.word	0x5802541c
 8009794:	58025430 	.word	0x58025430
 8009798:	58025444 	.word	0x58025444
 800979c:	58025458 	.word	0x58025458
 80097a0:	5802546c 	.word	0x5802546c
 80097a4:	58025480 	.word	0x58025480
 80097a8:	58025494 	.word	0x58025494

080097ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b085      	sub	sp, #20
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a42      	ldr	r2, [pc, #264]	@ (80098c4 <DMA_CalcBaseAndBitshift+0x118>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d04a      	beq.n	8009854 <DMA_CalcBaseAndBitshift+0xa8>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4a41      	ldr	r2, [pc, #260]	@ (80098c8 <DMA_CalcBaseAndBitshift+0x11c>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d045      	beq.n	8009854 <DMA_CalcBaseAndBitshift+0xa8>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4a3f      	ldr	r2, [pc, #252]	@ (80098cc <DMA_CalcBaseAndBitshift+0x120>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d040      	beq.n	8009854 <DMA_CalcBaseAndBitshift+0xa8>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a3e      	ldr	r2, [pc, #248]	@ (80098d0 <DMA_CalcBaseAndBitshift+0x124>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d03b      	beq.n	8009854 <DMA_CalcBaseAndBitshift+0xa8>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a3c      	ldr	r2, [pc, #240]	@ (80098d4 <DMA_CalcBaseAndBitshift+0x128>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d036      	beq.n	8009854 <DMA_CalcBaseAndBitshift+0xa8>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a3b      	ldr	r2, [pc, #236]	@ (80098d8 <DMA_CalcBaseAndBitshift+0x12c>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d031      	beq.n	8009854 <DMA_CalcBaseAndBitshift+0xa8>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a39      	ldr	r2, [pc, #228]	@ (80098dc <DMA_CalcBaseAndBitshift+0x130>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d02c      	beq.n	8009854 <DMA_CalcBaseAndBitshift+0xa8>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a38      	ldr	r2, [pc, #224]	@ (80098e0 <DMA_CalcBaseAndBitshift+0x134>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d027      	beq.n	8009854 <DMA_CalcBaseAndBitshift+0xa8>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a36      	ldr	r2, [pc, #216]	@ (80098e4 <DMA_CalcBaseAndBitshift+0x138>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d022      	beq.n	8009854 <DMA_CalcBaseAndBitshift+0xa8>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a35      	ldr	r2, [pc, #212]	@ (80098e8 <DMA_CalcBaseAndBitshift+0x13c>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d01d      	beq.n	8009854 <DMA_CalcBaseAndBitshift+0xa8>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a33      	ldr	r2, [pc, #204]	@ (80098ec <DMA_CalcBaseAndBitshift+0x140>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d018      	beq.n	8009854 <DMA_CalcBaseAndBitshift+0xa8>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a32      	ldr	r2, [pc, #200]	@ (80098f0 <DMA_CalcBaseAndBitshift+0x144>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d013      	beq.n	8009854 <DMA_CalcBaseAndBitshift+0xa8>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a30      	ldr	r2, [pc, #192]	@ (80098f4 <DMA_CalcBaseAndBitshift+0x148>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d00e      	beq.n	8009854 <DMA_CalcBaseAndBitshift+0xa8>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a2f      	ldr	r2, [pc, #188]	@ (80098f8 <DMA_CalcBaseAndBitshift+0x14c>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d009      	beq.n	8009854 <DMA_CalcBaseAndBitshift+0xa8>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a2d      	ldr	r2, [pc, #180]	@ (80098fc <DMA_CalcBaseAndBitshift+0x150>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d004      	beq.n	8009854 <DMA_CalcBaseAndBitshift+0xa8>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4a2c      	ldr	r2, [pc, #176]	@ (8009900 <DMA_CalcBaseAndBitshift+0x154>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d101      	bne.n	8009858 <DMA_CalcBaseAndBitshift+0xac>
 8009854:	2301      	movs	r3, #1
 8009856:	e000      	b.n	800985a <DMA_CalcBaseAndBitshift+0xae>
 8009858:	2300      	movs	r3, #0
 800985a:	2b00      	cmp	r3, #0
 800985c:	d024      	beq.n	80098a8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	b2db      	uxtb	r3, r3
 8009864:	3b10      	subs	r3, #16
 8009866:	4a27      	ldr	r2, [pc, #156]	@ (8009904 <DMA_CalcBaseAndBitshift+0x158>)
 8009868:	fba2 2303 	umull	r2, r3, r2, r3
 800986c:	091b      	lsrs	r3, r3, #4
 800986e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f003 0307 	and.w	r3, r3, #7
 8009876:	4a24      	ldr	r2, [pc, #144]	@ (8009908 <DMA_CalcBaseAndBitshift+0x15c>)
 8009878:	5cd3      	ldrb	r3, [r2, r3]
 800987a:	461a      	mov	r2, r3
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2b03      	cmp	r3, #3
 8009884:	d908      	bls.n	8009898 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	461a      	mov	r2, r3
 800988c:	4b1f      	ldr	r3, [pc, #124]	@ (800990c <DMA_CalcBaseAndBitshift+0x160>)
 800988e:	4013      	ands	r3, r2
 8009890:	1d1a      	adds	r2, r3, #4
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	659a      	str	r2, [r3, #88]	@ 0x58
 8009896:	e00d      	b.n	80098b4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	461a      	mov	r2, r3
 800989e:	4b1b      	ldr	r3, [pc, #108]	@ (800990c <DMA_CalcBaseAndBitshift+0x160>)
 80098a0:	4013      	ands	r3, r2
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80098a6:	e005      	b.n	80098b4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3714      	adds	r7, #20
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr
 80098c4:	40020010 	.word	0x40020010
 80098c8:	40020028 	.word	0x40020028
 80098cc:	40020040 	.word	0x40020040
 80098d0:	40020058 	.word	0x40020058
 80098d4:	40020070 	.word	0x40020070
 80098d8:	40020088 	.word	0x40020088
 80098dc:	400200a0 	.word	0x400200a0
 80098e0:	400200b8 	.word	0x400200b8
 80098e4:	40020410 	.word	0x40020410
 80098e8:	40020428 	.word	0x40020428
 80098ec:	40020440 	.word	0x40020440
 80098f0:	40020458 	.word	0x40020458
 80098f4:	40020470 	.word	0x40020470
 80098f8:	40020488 	.word	0x40020488
 80098fc:	400204a0 	.word	0x400204a0
 8009900:	400204b8 	.word	0x400204b8
 8009904:	aaaaaaab 	.word	0xaaaaaaab
 8009908:	08014c1c 	.word	0x08014c1c
 800990c:	fffffc00 	.word	0xfffffc00

08009910 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009910:	b480      	push	{r7}
 8009912:	b085      	sub	sp, #20
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009918:	2300      	movs	r3, #0
 800991a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	699b      	ldr	r3, [r3, #24]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d120      	bne.n	8009966 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009928:	2b03      	cmp	r3, #3
 800992a:	d858      	bhi.n	80099de <DMA_CheckFifoParam+0xce>
 800992c:	a201      	add	r2, pc, #4	@ (adr r2, 8009934 <DMA_CheckFifoParam+0x24>)
 800992e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009932:	bf00      	nop
 8009934:	08009945 	.word	0x08009945
 8009938:	08009957 	.word	0x08009957
 800993c:	08009945 	.word	0x08009945
 8009940:	080099df 	.word	0x080099df
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009948:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800994c:	2b00      	cmp	r3, #0
 800994e:	d048      	beq.n	80099e2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009950:	2301      	movs	r3, #1
 8009952:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009954:	e045      	b.n	80099e2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800995a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800995e:	d142      	bne.n	80099e6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009960:	2301      	movs	r3, #1
 8009962:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009964:	e03f      	b.n	80099e6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	699b      	ldr	r3, [r3, #24]
 800996a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800996e:	d123      	bne.n	80099b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009974:	2b03      	cmp	r3, #3
 8009976:	d838      	bhi.n	80099ea <DMA_CheckFifoParam+0xda>
 8009978:	a201      	add	r2, pc, #4	@ (adr r2, 8009980 <DMA_CheckFifoParam+0x70>)
 800997a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800997e:	bf00      	nop
 8009980:	08009991 	.word	0x08009991
 8009984:	08009997 	.word	0x08009997
 8009988:	08009991 	.word	0x08009991
 800998c:	080099a9 	.word	0x080099a9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009990:	2301      	movs	r3, #1
 8009992:	73fb      	strb	r3, [r7, #15]
        break;
 8009994:	e030      	b.n	80099f8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800999a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d025      	beq.n	80099ee <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80099a2:	2301      	movs	r3, #1
 80099a4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80099a6:	e022      	b.n	80099ee <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80099b0:	d11f      	bne.n	80099f2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80099b2:	2301      	movs	r3, #1
 80099b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80099b6:	e01c      	b.n	80099f2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099bc:	2b02      	cmp	r3, #2
 80099be:	d902      	bls.n	80099c6 <DMA_CheckFifoParam+0xb6>
 80099c0:	2b03      	cmp	r3, #3
 80099c2:	d003      	beq.n	80099cc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80099c4:	e018      	b.n	80099f8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80099c6:	2301      	movs	r3, #1
 80099c8:	73fb      	strb	r3, [r7, #15]
        break;
 80099ca:	e015      	b.n	80099f8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d00e      	beq.n	80099f6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80099d8:	2301      	movs	r3, #1
 80099da:	73fb      	strb	r3, [r7, #15]
    break;
 80099dc:	e00b      	b.n	80099f6 <DMA_CheckFifoParam+0xe6>
        break;
 80099de:	bf00      	nop
 80099e0:	e00a      	b.n	80099f8 <DMA_CheckFifoParam+0xe8>
        break;
 80099e2:	bf00      	nop
 80099e4:	e008      	b.n	80099f8 <DMA_CheckFifoParam+0xe8>
        break;
 80099e6:	bf00      	nop
 80099e8:	e006      	b.n	80099f8 <DMA_CheckFifoParam+0xe8>
        break;
 80099ea:	bf00      	nop
 80099ec:	e004      	b.n	80099f8 <DMA_CheckFifoParam+0xe8>
        break;
 80099ee:	bf00      	nop
 80099f0:	e002      	b.n	80099f8 <DMA_CheckFifoParam+0xe8>
        break;
 80099f2:	bf00      	nop
 80099f4:	e000      	b.n	80099f8 <DMA_CheckFifoParam+0xe8>
    break;
 80099f6:	bf00      	nop
    }
  }

  return status;
 80099f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3714      	adds	r7, #20
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr
 8009a06:	bf00      	nop

08009a08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a38      	ldr	r2, [pc, #224]	@ (8009afc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d022      	beq.n	8009a66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a36      	ldr	r2, [pc, #216]	@ (8009b00 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d01d      	beq.n	8009a66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a35      	ldr	r2, [pc, #212]	@ (8009b04 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d018      	beq.n	8009a66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a33      	ldr	r2, [pc, #204]	@ (8009b08 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d013      	beq.n	8009a66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a32      	ldr	r2, [pc, #200]	@ (8009b0c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d00e      	beq.n	8009a66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a30      	ldr	r2, [pc, #192]	@ (8009b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d009      	beq.n	8009a66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a2f      	ldr	r2, [pc, #188]	@ (8009b14 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d004      	beq.n	8009a66 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a2d      	ldr	r2, [pc, #180]	@ (8009b18 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d101      	bne.n	8009a6a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009a66:	2301      	movs	r3, #1
 8009a68:	e000      	b.n	8009a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d01a      	beq.n	8009aa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	3b08      	subs	r3, #8
 8009a78:	4a28      	ldr	r2, [pc, #160]	@ (8009b1c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8009a7e:	091b      	lsrs	r3, r3, #4
 8009a80:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	4b26      	ldr	r3, [pc, #152]	@ (8009b20 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009a86:	4413      	add	r3, r2
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	4a24      	ldr	r2, [pc, #144]	@ (8009b24 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009a94:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f003 031f 	and.w	r3, r3, #31
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	409a      	lsls	r2, r3
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009aa4:	e024      	b.n	8009af0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	3b10      	subs	r3, #16
 8009aae:	4a1e      	ldr	r2, [pc, #120]	@ (8009b28 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ab4:	091b      	lsrs	r3, r3, #4
 8009ab6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	4a1c      	ldr	r2, [pc, #112]	@ (8009b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d806      	bhi.n	8009ace <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	4a1b      	ldr	r2, [pc, #108]	@ (8009b30 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d902      	bls.n	8009ace <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	3308      	adds	r3, #8
 8009acc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009ace:	68fa      	ldr	r2, [r7, #12]
 8009ad0:	4b18      	ldr	r3, [pc, #96]	@ (8009b34 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009ad2:	4413      	add	r3, r2
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4a16      	ldr	r2, [pc, #88]	@ (8009b38 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009ae0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f003 031f 	and.w	r3, r3, #31
 8009ae8:	2201      	movs	r2, #1
 8009aea:	409a      	lsls	r2, r3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009af0:	bf00      	nop
 8009af2:	3714      	adds	r7, #20
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr
 8009afc:	58025408 	.word	0x58025408
 8009b00:	5802541c 	.word	0x5802541c
 8009b04:	58025430 	.word	0x58025430
 8009b08:	58025444 	.word	0x58025444
 8009b0c:	58025458 	.word	0x58025458
 8009b10:	5802546c 	.word	0x5802546c
 8009b14:	58025480 	.word	0x58025480
 8009b18:	58025494 	.word	0x58025494
 8009b1c:	cccccccd 	.word	0xcccccccd
 8009b20:	16009600 	.word	0x16009600
 8009b24:	58025880 	.word	0x58025880
 8009b28:	aaaaaaab 	.word	0xaaaaaaab
 8009b2c:	400204b8 	.word	0x400204b8
 8009b30:	4002040f 	.word	0x4002040f
 8009b34:	10008200 	.word	0x10008200
 8009b38:	40020880 	.word	0x40020880

08009b3c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b085      	sub	sp, #20
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d04a      	beq.n	8009be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2b08      	cmp	r3, #8
 8009b56:	d847      	bhi.n	8009be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a25      	ldr	r2, [pc, #148]	@ (8009bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d022      	beq.n	8009ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a24      	ldr	r2, [pc, #144]	@ (8009bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d01d      	beq.n	8009ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a22      	ldr	r2, [pc, #136]	@ (8009bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d018      	beq.n	8009ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a21      	ldr	r2, [pc, #132]	@ (8009c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d013      	beq.n	8009ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a1f      	ldr	r2, [pc, #124]	@ (8009c04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d00e      	beq.n	8009ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a1e      	ldr	r2, [pc, #120]	@ (8009c08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d009      	beq.n	8009ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a1c      	ldr	r2, [pc, #112]	@ (8009c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d004      	beq.n	8009ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a1b      	ldr	r2, [pc, #108]	@ (8009c10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d101      	bne.n	8009bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009ba8:	2301      	movs	r3, #1
 8009baa:	e000      	b.n	8009bae <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009bac:	2300      	movs	r3, #0
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d00a      	beq.n	8009bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009bb2:	68fa      	ldr	r2, [r7, #12]
 8009bb4:	4b17      	ldr	r3, [pc, #92]	@ (8009c14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009bb6:	4413      	add	r3, r2
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	461a      	mov	r2, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	4a15      	ldr	r2, [pc, #84]	@ (8009c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009bc4:	671a      	str	r2, [r3, #112]	@ 0x70
 8009bc6:	e009      	b.n	8009bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009bc8:	68fa      	ldr	r2, [r7, #12]
 8009bca:	4b14      	ldr	r3, [pc, #80]	@ (8009c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009bcc:	4413      	add	r3, r2
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	4a11      	ldr	r2, [pc, #68]	@ (8009c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009bda:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	3b01      	subs	r3, #1
 8009be0:	2201      	movs	r2, #1
 8009be2:	409a      	lsls	r2, r3
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8009be8:	bf00      	nop
 8009bea:	3714      	adds	r7, #20
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr
 8009bf4:	58025408 	.word	0x58025408
 8009bf8:	5802541c 	.word	0x5802541c
 8009bfc:	58025430 	.word	0x58025430
 8009c00:	58025444 	.word	0x58025444
 8009c04:	58025458 	.word	0x58025458
 8009c08:	5802546c 	.word	0x5802546c
 8009c0c:	58025480 	.word	0x58025480
 8009c10:	58025494 	.word	0x58025494
 8009c14:	1600963f 	.word	0x1600963f
 8009c18:	58025940 	.word	0x58025940
 8009c1c:	1000823f 	.word	0x1000823f
 8009c20:	40020940 	.word	0x40020940

08009c24 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d101      	bne.n	8009c36 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8009c32:	2301      	movs	r3, #1
 8009c34:	e0cf      	b.n	8009dd6 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d106      	bne.n	8009c4e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2223      	movs	r2, #35	@ 0x23
 8009c44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f7fa f817 	bl	8003c7c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009c4e:	4b64      	ldr	r3, [pc, #400]	@ (8009de0 <HAL_ETH_Init+0x1bc>)
 8009c50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009c54:	4a62      	ldr	r2, [pc, #392]	@ (8009de0 <HAL_ETH_Init+0x1bc>)
 8009c56:	f043 0302 	orr.w	r3, r3, #2
 8009c5a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8009c5e:	4b60      	ldr	r3, [pc, #384]	@ (8009de0 <HAL_ETH_Init+0x1bc>)
 8009c60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009c64:	f003 0302 	and.w	r3, r3, #2
 8009c68:	60bb      	str	r3, [r7, #8]
 8009c6a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	7a1b      	ldrb	r3, [r3, #8]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d103      	bne.n	8009c7c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8009c74:	2000      	movs	r0, #0
 8009c76:	f7fa fd85 	bl	8004784 <HAL_SYSCFG_ETHInterfaceSelect>
 8009c7a:	e003      	b.n	8009c84 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8009c7c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8009c80:	f7fa fd80 	bl	8004784 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8009c84:	4b57      	ldr	r3, [pc, #348]	@ (8009de4 <HAL_ETH_Init+0x1c0>)
 8009c86:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	6812      	ldr	r2, [r2, #0]
 8009c96:	f043 0301 	orr.w	r3, r3, #1
 8009c9a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009c9e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009ca0:	f7fa fd40 	bl	8004724 <HAL_GetTick>
 8009ca4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8009ca6:	e011      	b.n	8009ccc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8009ca8:	f7fa fd3c 	bl	8004724 <HAL_GetTick>
 8009cac:	4602      	mov	r2, r0
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	1ad3      	subs	r3, r2, r3
 8009cb2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8009cb6:	d909      	bls.n	8009ccc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2204      	movs	r2, #4
 8009cbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	22e0      	movs	r2, #224	@ 0xe0
 8009cc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	e084      	b.n	8009dd6 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f003 0301 	and.w	r3, r3, #1
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d1e4      	bne.n	8009ca8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 f886 	bl	8009df0 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8009ce4:	f001 fed8 	bl	800ba98 <HAL_RCC_GetHCLKFreq>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	4a3f      	ldr	r2, [pc, #252]	@ (8009de8 <HAL_ETH_Init+0x1c4>)
 8009cec:	fba2 2303 	umull	r2, r3, r2, r3
 8009cf0:	0c9a      	lsrs	r2, r3, #18
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	3a01      	subs	r2, #1
 8009cf8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 fa71 	bl	800a1e4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d0a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8009d0e:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	6812      	ldr	r2, [r2, #0]
 8009d16:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009d1a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009d1e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	695b      	ldr	r3, [r3, #20]
 8009d26:	f003 0303 	and.w	r3, r3, #3
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d009      	beq.n	8009d42 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2201      	movs	r2, #1
 8009d32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	22e0      	movs	r2, #224	@ 0xe0
 8009d3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	e049      	b.n	8009dd6 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d4a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8009d4e:	4b27      	ldr	r3, [pc, #156]	@ (8009dec <HAL_ETH_Init+0x1c8>)
 8009d50:	4013      	ands	r3, r2
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	6952      	ldr	r2, [r2, #20]
 8009d56:	0051      	lsls	r1, r2, #1
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	6812      	ldr	r2, [r2, #0]
 8009d5c:	430b      	orrs	r3, r1
 8009d5e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009d62:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 fad9 	bl	800a31e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f000 fb1f 	bl	800a3b0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	3305      	adds	r3, #5
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	021a      	lsls	r2, r3, #8
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	3304      	adds	r3, #4
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	4619      	mov	r1, r3
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	430a      	orrs	r2, r1
 8009d8c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	3303      	adds	r3, #3
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	061a      	lsls	r2, r3, #24
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	3302      	adds	r3, #2
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	041b      	lsls	r3, r3, #16
 8009da4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	3301      	adds	r3, #1
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009db0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009dbe:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009dc0:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2210      	movs	r2, #16
 8009dd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009dd4:	2300      	movs	r3, #0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3710      	adds	r7, #16
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
 8009dde:	bf00      	nop
 8009de0:	58024400 	.word	0x58024400
 8009de4:	58000400 	.word	0x58000400
 8009de8:	431bde83 	.word	0x431bde83
 8009dec:	ffff8001 	.word	0xffff8001

08009df0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009e00:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009e08:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8009e0a:	f001 fe45 	bl	800ba98 <HAL_RCC_GetHCLKFreq>
 8009e0e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	4a1e      	ldr	r2, [pc, #120]	@ (8009e8c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d908      	bls.n	8009e2a <HAL_ETH_SetMDIOClockRange+0x3a>
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	4a1d      	ldr	r2, [pc, #116]	@ (8009e90 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d804      	bhi.n	8009e2a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009e26:	60fb      	str	r3, [r7, #12]
 8009e28:	e027      	b.n	8009e7a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	4a18      	ldr	r2, [pc, #96]	@ (8009e90 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d908      	bls.n	8009e44 <HAL_ETH_SetMDIOClockRange+0x54>
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	4a17      	ldr	r2, [pc, #92]	@ (8009e94 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d204      	bcs.n	8009e44 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009e40:	60fb      	str	r3, [r7, #12]
 8009e42:	e01a      	b.n	8009e7a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	4a13      	ldr	r2, [pc, #76]	@ (8009e94 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d303      	bcc.n	8009e54 <HAL_ETH_SetMDIOClockRange+0x64>
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	4a12      	ldr	r2, [pc, #72]	@ (8009e98 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d911      	bls.n	8009e78 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	4a10      	ldr	r2, [pc, #64]	@ (8009e98 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d908      	bls.n	8009e6e <HAL_ETH_SetMDIOClockRange+0x7e>
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	4a0f      	ldr	r2, [pc, #60]	@ (8009e9c <HAL_ETH_SetMDIOClockRange+0xac>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d804      	bhi.n	8009e6e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e6a:	60fb      	str	r3, [r7, #12]
 8009e6c:	e005      	b.n	8009e7a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009e74:	60fb      	str	r3, [r7, #12]
 8009e76:	e000      	b.n	8009e7a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8009e78:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	68fa      	ldr	r2, [r7, #12]
 8009e80:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8009e84:	bf00      	nop
 8009e86:	3710      	adds	r7, #16
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	01312cff 	.word	0x01312cff
 8009e90:	02160ebf 	.word	0x02160ebf
 8009e94:	03938700 	.word	0x03938700
 8009e98:	05f5e0ff 	.word	0x05f5e0ff
 8009e9c:	08f0d17f 	.word	0x08f0d17f

08009ea0 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b085      	sub	sp, #20
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8009eb2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	791b      	ldrb	r3, [r3, #4]
 8009eb8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8009eba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	7b1b      	ldrb	r3, [r3, #12]
 8009ec0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8009ec2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	7b5b      	ldrb	r3, [r3, #13]
 8009ec8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8009eca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	7b9b      	ldrb	r3, [r3, #14]
 8009ed0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8009ed2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	7bdb      	ldrb	r3, [r3, #15]
 8009ed8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8009eda:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8009edc:	683a      	ldr	r2, [r7, #0]
 8009ede:	7c12      	ldrb	r2, [r2, #16]
 8009ee0:	2a00      	cmp	r2, #0
 8009ee2:	d102      	bne.n	8009eea <ETH_SetMACConfig+0x4a>
 8009ee4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8009ee8:	e000      	b.n	8009eec <ETH_SetMACConfig+0x4c>
 8009eea:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8009eec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8009eee:	683a      	ldr	r2, [r7, #0]
 8009ef0:	7c52      	ldrb	r2, [r2, #17]
 8009ef2:	2a00      	cmp	r2, #0
 8009ef4:	d102      	bne.n	8009efc <ETH_SetMACConfig+0x5c>
 8009ef6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009efa:	e000      	b.n	8009efe <ETH_SetMACConfig+0x5e>
 8009efc:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8009efe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	7c9b      	ldrb	r3, [r3, #18]
 8009f04:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8009f06:	431a      	orrs	r2, r3
               macconf->Speed |
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8009f0c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8009f12:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	7f1b      	ldrb	r3, [r3, #28]
 8009f18:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8009f1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	7f5b      	ldrb	r3, [r3, #29]
 8009f20:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8009f22:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8009f24:	683a      	ldr	r2, [r7, #0]
 8009f26:	7f92      	ldrb	r2, [r2, #30]
 8009f28:	2a00      	cmp	r2, #0
 8009f2a:	d102      	bne.n	8009f32 <ETH_SetMACConfig+0x92>
 8009f2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009f30:	e000      	b.n	8009f34 <ETH_SetMACConfig+0x94>
 8009f32:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8009f34:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	7fdb      	ldrb	r3, [r3, #31]
 8009f3a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8009f3c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8009f3e:	683a      	ldr	r2, [r7, #0]
 8009f40:	f892 2020 	ldrb.w	r2, [r2, #32]
 8009f44:	2a00      	cmp	r2, #0
 8009f46:	d102      	bne.n	8009f4e <ETH_SetMACConfig+0xae>
 8009f48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009f4c:	e000      	b.n	8009f50 <ETH_SetMACConfig+0xb0>
 8009f4e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8009f50:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8009f56:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f5e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8009f60:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8009f66:	4313      	orrs	r3, r2
 8009f68:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	681a      	ldr	r2, [r3, #0]
 8009f70:	4b56      	ldr	r3, [pc, #344]	@ (800a0cc <ETH_SetMACConfig+0x22c>)
 8009f72:	4013      	ands	r3, r2
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	6812      	ldr	r2, [r2, #0]
 8009f78:	68f9      	ldr	r1, [r7, #12]
 8009f7a:	430b      	orrs	r3, r1
 8009f7c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f82:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009f8a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8009f8c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009f94:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8009f96:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009f9e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8009fa0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8009fa2:	683a      	ldr	r2, [r7, #0]
 8009fa4:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8009fa8:	2a00      	cmp	r2, #0
 8009faa:	d102      	bne.n	8009fb2 <ETH_SetMACConfig+0x112>
 8009fac:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8009fb0:	e000      	b.n	8009fb4 <ETH_SetMACConfig+0x114>
 8009fb2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8009fb4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	685a      	ldr	r2, [r3, #4]
 8009fc4:	4b42      	ldr	r3, [pc, #264]	@ (800a0d0 <ETH_SetMACConfig+0x230>)
 8009fc6:	4013      	ands	r3, r2
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	6812      	ldr	r2, [r2, #0]
 8009fcc:	68f9      	ldr	r1, [r7, #12]
 8009fce:	430b      	orrs	r3, r1
 8009fd0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009fd8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	68da      	ldr	r2, [r3, #12]
 8009fe8:	4b3a      	ldr	r3, [pc, #232]	@ (800a0d4 <ETH_SetMACConfig+0x234>)
 8009fea:	4013      	ands	r3, r2
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	6812      	ldr	r2, [r2, #0]
 8009ff0:	68f9      	ldr	r1, [r7, #12]
 8009ff2:	430b      	orrs	r3, r1
 8009ff4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8009ffc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a002:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800a004:	683a      	ldr	r2, [r7, #0]
 800a006:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800a00a:	2a00      	cmp	r2, #0
 800a00c:	d101      	bne.n	800a012 <ETH_SetMACConfig+0x172>
 800a00e:	2280      	movs	r2, #128	@ 0x80
 800a010:	e000      	b.n	800a014 <ETH_SetMACConfig+0x174>
 800a012:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800a014:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a01a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a01c:	4313      	orrs	r3, r2
 800a01e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a026:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800a02a:	4013      	ands	r3, r2
 800a02c:	687a      	ldr	r2, [r7, #4]
 800a02e:	6812      	ldr	r2, [r2, #0]
 800a030:	68f9      	ldr	r1, [r7, #12]
 800a032:	430b      	orrs	r3, r1
 800a034:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800a03c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800a044:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800a046:	4313      	orrs	r3, r2
 800a048:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a052:	f023 0103 	bic.w	r1, r3, #3
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	68fa      	ldr	r2, [r7, #12]
 800a05c:	430a      	orrs	r2, r1
 800a05e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800a06a:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	430a      	orrs	r2, r1
 800a078:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800a080:	683a      	ldr	r2, [r7, #0]
 800a082:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800a086:	2a00      	cmp	r2, #0
 800a088:	d101      	bne.n	800a08e <ETH_SetMACConfig+0x1ee>
 800a08a:	2240      	movs	r2, #64	@ 0x40
 800a08c:	e000      	b.n	800a090 <ETH_SetMACConfig+0x1f0>
 800a08e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800a090:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800a098:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800a09a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800a0a2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800a0b0:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	68fa      	ldr	r2, [r7, #12]
 800a0ba:	430a      	orrs	r2, r1
 800a0bc:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 800a0c0:	bf00      	nop
 800a0c2:	3714      	adds	r7, #20
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr
 800a0cc:	00048083 	.word	0x00048083
 800a0d0:	c0f88000 	.word	0xc0f88000
 800a0d4:	fffffef0 	.word	0xfffffef0

0800a0d8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b085      	sub	sp, #20
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	4b38      	ldr	r3, [pc, #224]	@ (800a1d0 <ETH_SetDMAConfig+0xf8>)
 800a0ee:	4013      	ands	r3, r2
 800a0f0:	683a      	ldr	r2, [r7, #0]
 800a0f2:	6811      	ldr	r1, [r2, #0]
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	6812      	ldr	r2, [r2, #0]
 800a0f8:	430b      	orrs	r3, r1
 800a0fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a0fe:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	791b      	ldrb	r3, [r3, #4]
 800a104:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a10a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	7b1b      	ldrb	r3, [r3, #12]
 800a110:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a112:	4313      	orrs	r3, r2
 800a114:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a11e:	685a      	ldr	r2, [r3, #4]
 800a120:	4b2c      	ldr	r3, [pc, #176]	@ (800a1d4 <ETH_SetDMAConfig+0xfc>)
 800a122:	4013      	ands	r3, r2
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	6812      	ldr	r2, [r2, #0]
 800a128:	68f9      	ldr	r1, [r7, #12]
 800a12a:	430b      	orrs	r3, r1
 800a12c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a130:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	7b5b      	ldrb	r3, [r3, #13]
 800a136:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800a13c:	4313      	orrs	r3, r2
 800a13e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a148:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800a14c:	4b22      	ldr	r3, [pc, #136]	@ (800a1d8 <ETH_SetDMAConfig+0x100>)
 800a14e:	4013      	ands	r3, r2
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	6812      	ldr	r2, [r2, #0]
 800a154:	68f9      	ldr	r1, [r7, #12]
 800a156:	430b      	orrs	r3, r1
 800a158:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a15c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	7d1b      	ldrb	r3, [r3, #20]
 800a168:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800a16a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	7f5b      	ldrb	r3, [r3, #29]
 800a170:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800a172:	4313      	orrs	r3, r2
 800a174:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a17e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800a182:	4b16      	ldr	r3, [pc, #88]	@ (800a1dc <ETH_SetDMAConfig+0x104>)
 800a184:	4013      	ands	r3, r2
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	6812      	ldr	r2, [r2, #0]
 800a18a:	68f9      	ldr	r1, [r7, #12]
 800a18c:	430b      	orrs	r3, r1
 800a18e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a192:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	7f1b      	ldrb	r3, [r3, #28]
 800a19a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1ac:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800a1b0:	4b0b      	ldr	r3, [pc, #44]	@ (800a1e0 <ETH_SetDMAConfig+0x108>)
 800a1b2:	4013      	ands	r3, r2
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	6812      	ldr	r2, [r2, #0]
 800a1b8:	68f9      	ldr	r1, [r7, #12]
 800a1ba:	430b      	orrs	r3, r1
 800a1bc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a1c0:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 800a1c4:	bf00      	nop
 800a1c6:	3714      	adds	r7, #20
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr
 800a1d0:	ffff87fd 	.word	0xffff87fd
 800a1d4:	ffff2ffe 	.word	0xffff2ffe
 800a1d8:	fffec000 	.word	0xfffec000
 800a1dc:	ffc0efef 	.word	0xffc0efef
 800a1e0:	7fc0ffff 	.word	0x7fc0ffff

0800a1e4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b0a4      	sub	sp, #144	@ 0x90
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800a202:	2301      	movs	r3, #1
 800a204:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800a208:	2301      	movs	r3, #1
 800a20a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800a20e:	2301      	movs	r3, #1
 800a210:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800a214:	2300      	movs	r3, #0
 800a216:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800a21a:	2301      	movs	r3, #1
 800a21c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800a220:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a224:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800a226:	2300      	movs	r3, #0
 800a228:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800a22c:	2300      	movs	r3, #0
 800a22e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800a230:	2300      	movs	r3, #0
 800a232:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800a236:	2300      	movs	r3, #0
 800a238:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800a23c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 800a240:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800a242:	2300      	movs	r3, #0
 800a244:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800a248:	2300      	movs	r3, #0
 800a24a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 800a24c:	2301      	movs	r3, #1
 800a24e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800a252:	2300      	movs	r3, #0
 800a254:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800a258:	2300      	movs	r3, #0
 800a25a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800a25e:	2300      	movs	r3, #0
 800a260:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0;
 800a262:	2300      	movs	r3, #0
 800a264:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800a266:	2300      	movs	r3, #0
 800a268:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800a26a:	2300      	movs	r3, #0
 800a26c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800a270:	2300      	movs	r3, #0
 800a272:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800a276:	2301      	movs	r3, #1
 800a278:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800a27c:	2320      	movs	r3, #32
 800a27e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800a282:	2301      	movs	r3, #1
 800a284:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800a288:	2300      	movs	r3, #0
 800a28a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800a28e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800a292:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800a294:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a298:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800a29a:	2300      	movs	r3, #0
 800a29c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800a2a0:	2302      	movs	r3, #2
 800a2a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800a2c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f7ff fde6 	bl	8009ea0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800a2ee:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a2f2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800a2f8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a2fc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800a2fe:	2300      	movs	r3, #0
 800a300:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800a304:	f44f 7306 	mov.w	r3, #536	@ 0x218
 800a308:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800a30a:	f107 0308 	add.w	r3, r7, #8
 800a30e:	4619      	mov	r1, r3
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f7ff fee1 	bl	800a0d8 <ETH_SetDMAConfig>
}
 800a316:	bf00      	nop
 800a318:	3790      	adds	r7, #144	@ 0x90
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}

0800a31e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800a31e:	b480      	push	{r7}
 800a320:	b085      	sub	sp, #20
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800a326:	2300      	movs	r3, #0
 800a328:	60fb      	str	r3, [r7, #12]
 800a32a:	e01d      	b.n	800a368 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	68d9      	ldr	r1, [r3, #12]
 800a330:	68fa      	ldr	r2, [r7, #12]
 800a332:	4613      	mov	r3, r2
 800a334:	005b      	lsls	r3, r3, #1
 800a336:	4413      	add	r3, r2
 800a338:	00db      	lsls	r3, r3, #3
 800a33a:	440b      	add	r3, r1
 800a33c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	2200      	movs	r2, #0
 800a342:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	2200      	movs	r2, #0
 800a348:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	2200      	movs	r2, #0
 800a34e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	2200      	movs	r2, #0
 800a354:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800a356:	68b9      	ldr	r1, [r7, #8]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	68fa      	ldr	r2, [r7, #12]
 800a35c:	3206      	adds	r2, #6
 800a35e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	3301      	adds	r3, #1
 800a366:	60fb      	str	r3, [r7, #12]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2b03      	cmp	r3, #3
 800a36c:	d9de      	bls.n	800a32c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a37c:	461a      	mov	r2, r3
 800a37e:	2303      	movs	r3, #3
 800a380:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	68da      	ldr	r2, [r3, #12]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a390:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	68da      	ldr	r2, [r3, #12]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a3a0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 800a3a4:	bf00      	nop
 800a3a6:	3714      	adds	r7, #20
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b085      	sub	sp, #20
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	60fb      	str	r3, [r7, #12]
 800a3bc:	e023      	b.n	800a406 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6919      	ldr	r1, [r3, #16]
 800a3c2:	68fa      	ldr	r2, [r7, #12]
 800a3c4:	4613      	mov	r3, r2
 800a3c6:	005b      	lsls	r3, r3, #1
 800a3c8:	4413      	add	r3, r2
 800a3ca:	00db      	lsls	r3, r3, #3
 800a3cc:	440b      	add	r3, r1
 800a3ce:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800a3f4:	68b9      	ldr	r1, [r7, #8]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	68fa      	ldr	r2, [r7, #12]
 800a3fa:	3212      	adds	r2, #18
 800a3fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	3301      	adds	r3, #1
 800a404:	60fb      	str	r3, [r7, #12]
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2b03      	cmp	r3, #3
 800a40a:	d9d8      	bls.n	800a3be <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2200      	movs	r2, #0
 800a410:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2200      	movs	r2, #0
 800a416:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2200      	movs	r2, #0
 800a41c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2200      	movs	r2, #0
 800a422:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2200      	movs	r2, #0
 800a428:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a432:	461a      	mov	r2, r3
 800a434:	2303      	movs	r3, #3
 800a436:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	691a      	ldr	r2, [r3, #16]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a446:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	691b      	ldr	r3, [r3, #16]
 800a44e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a45a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800a45e:	bf00      	nop
 800a460:	3714      	adds	r7, #20
 800a462:	46bd      	mov	sp, r7
 800a464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a468:	4770      	bx	lr
	...

0800a46c <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b08a      	sub	sp, #40	@ 0x28
 800a470:	af00      	add	r7, sp, #0
 800a472:	60f8      	str	r0, [r7, #12]
 800a474:	60b9      	str	r1, [r7, #8]
 800a476:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 800a480:	2308      	movs	r3, #8
 800a482:	76fb      	strb	r3, [r7, #27]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a484:	4b2e      	ldr	r3, [pc, #184]	@ (800a540 <HAL_FLASH_Program+0xd4>)
 800a486:	7d1b      	ldrb	r3, [r3, #20]
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d101      	bne.n	800a490 <HAL_FLASH_Program+0x24>
 800a48c:	2302      	movs	r3, #2
 800a48e:	e053      	b.n	800a538 <HAL_FLASH_Program+0xcc>
 800a490:	4b2b      	ldr	r3, [pc, #172]	@ (800a540 <HAL_FLASH_Program+0xd4>)
 800a492:	2201      	movs	r2, #1
 800a494:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a49c:	d315      	bcc.n	800a4ca <HAL_FLASH_Program+0x5e>
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 800a4a4:	d211      	bcs.n	800a4ca <HAL_FLASH_Program+0x5e>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	617b      	str	r3, [r7, #20]
  {
    return HAL_ERROR;
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a4aa:	4b25      	ldr	r3, [pc, #148]	@ (800a540 <HAL_FLASH_Program+0xd4>)
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800a4b0:	6979      	ldr	r1, [r7, #20]
 800a4b2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a4b6:	f000 f88d 	bl	800a5d4 <FLASH_WaitForLastOperation>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if(status == HAL_OK)
 800a4c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d002      	beq.n	800a4ce <HAL_FLASH_Program+0x62>
 800a4c8:	e031      	b.n	800a52e <HAL_FLASH_Program+0xc2>
    return HAL_ERROR;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	e034      	b.n	800a538 <HAL_FLASH_Program+0xcc>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800a4ce:	4b1d      	ldr	r3, [pc, #116]	@ (800a544 <HAL_FLASH_Program+0xd8>)
 800a4d0:	68db      	ldr	r3, [r3, #12]
 800a4d2:	4a1c      	ldr	r2, [pc, #112]	@ (800a544 <HAL_FLASH_Program+0xd8>)
 800a4d4:	f043 0302 	orr.w	r3, r3, #2
 800a4d8:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("isb 0xF":::"memory");
 800a4da:	f3bf 8f6f 	isb	sy
}
 800a4de:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a4e0:	f3bf 8f4f 	dsb	sy
}
 800a4e4:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 800a4e6:	69fb      	ldr	r3, [r7, #28]
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	6a3b      	ldr	r3, [r7, #32]
 800a4ec:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800a4ee:	6a3b      	ldr	r3, [r7, #32]
 800a4f0:	3304      	adds	r3, #4
 800a4f2:	623b      	str	r3, [r7, #32]
        src_addr++;
 800a4f4:	69fb      	ldr	r3, [r7, #28]
 800a4f6:	3304      	adds	r3, #4
 800a4f8:	61fb      	str	r3, [r7, #28]
        row_index--;
 800a4fa:	7efb      	ldrb	r3, [r7, #27]
 800a4fc:	3b01      	subs	r3, #1
 800a4fe:	76fb      	strb	r3, [r7, #27]
     } while (row_index != 0U);
 800a500:	7efb      	ldrb	r3, [r7, #27]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d1ef      	bne.n	800a4e6 <HAL_FLASH_Program+0x7a>
  __ASM volatile ("isb 0xF":::"memory");
 800a506:	f3bf 8f6f 	isb	sy
}
 800a50a:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a50c:	f3bf 8f4f 	dsb	sy
}
 800a510:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800a512:	6979      	ldr	r1, [r7, #20]
 800a514:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a518:	f000 f85c 	bl	800a5d4 <FLASH_WaitForLastOperation>
 800a51c:	4603      	mov	r3, r0
 800a51e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* If the program operation is completed, disable the PG */
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 800a522:	4b08      	ldr	r3, [pc, #32]	@ (800a544 <HAL_FLASH_Program+0xd8>)
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	4a07      	ldr	r2, [pc, #28]	@ (800a544 <HAL_FLASH_Program+0xd8>)
 800a528:	f023 0302 	bic.w	r3, r3, #2
 800a52c:	60d3      	str	r3, [r2, #12]
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a52e:	4b04      	ldr	r3, [pc, #16]	@ (800a540 <HAL_FLASH_Program+0xd4>)
 800a530:	2200      	movs	r2, #0
 800a532:	751a      	strb	r2, [r3, #20]

  return status;
 800a534:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3728      	adds	r7, #40	@ 0x28
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	240010a4 	.word	0x240010a4
 800a544:	52002000 	.word	0x52002000

0800a548 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800a548:	b480      	push	{r7}
 800a54a:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800a54c:	4b0c      	ldr	r3, [pc, #48]	@ (800a580 <HAL_FLASH_Unlock+0x38>)
 800a54e:	68db      	ldr	r3, [r3, #12]
 800a550:	f003 0301 	and.w	r3, r3, #1
 800a554:	2b00      	cmp	r3, #0
 800a556:	d00d      	beq.n	800a574 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 800a558:	4b09      	ldr	r3, [pc, #36]	@ (800a580 <HAL_FLASH_Unlock+0x38>)
 800a55a:	4a0a      	ldr	r2, [pc, #40]	@ (800a584 <HAL_FLASH_Unlock+0x3c>)
 800a55c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800a55e:	4b08      	ldr	r3, [pc, #32]	@ (800a580 <HAL_FLASH_Unlock+0x38>)
 800a560:	4a09      	ldr	r2, [pc, #36]	@ (800a588 <HAL_FLASH_Unlock+0x40>)
 800a562:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800a564:	4b06      	ldr	r3, [pc, #24]	@ (800a580 <HAL_FLASH_Unlock+0x38>)
 800a566:	68db      	ldr	r3, [r3, #12]
 800a568:	f003 0301 	and.w	r3, r3, #1
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d001      	beq.n	800a574 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 800a570:	2301      	movs	r3, #1
 800a572:	e000      	b.n	800a576 <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800a574:	2300      	movs	r3, #0
}
 800a576:	4618      	mov	r0, r3
 800a578:	46bd      	mov	sp, r7
 800a57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57e:	4770      	bx	lr
 800a580:	52002000 	.word	0x52002000
 800a584:	45670123 	.word	0x45670123
 800a588:	cdef89ab 	.word	0xcdef89ab

0800a58c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800a58c:	b480      	push	{r7}
 800a58e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 800a590:	4b09      	ldr	r3, [pc, #36]	@ (800a5b8 <HAL_FLASH_Lock+0x2c>)
 800a592:	68db      	ldr	r3, [r3, #12]
 800a594:	4a08      	ldr	r2, [pc, #32]	@ (800a5b8 <HAL_FLASH_Lock+0x2c>)
 800a596:	f043 0301 	orr.w	r3, r3, #1
 800a59a:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 800a59c:	4b06      	ldr	r3, [pc, #24]	@ (800a5b8 <HAL_FLASH_Lock+0x2c>)
 800a59e:	68db      	ldr	r3, [r3, #12]
 800a5a0:	f003 0301 	and.w	r3, r3, #1
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d101      	bne.n	800a5ac <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	e000      	b.n	800a5ae <HAL_FLASH_Lock+0x22>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800a5ac:	2300      	movs	r3, #0
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr
 800a5b8:	52002000 	.word	0x52002000

0800a5bc <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_DBECC_BANK2: Double Detection ECC on Bank 2
  *            @arg HAL_FLASH_ERROR_CRCRD_BANK2: CRC Read Error on Bank 2
*/

uint32_t HAL_FLASH_GetError(void)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800a5c0:	4b03      	ldr	r3, [pc, #12]	@ (800a5d0 <HAL_FLASH_GetError+0x14>)
 800a5c2:	699b      	ldr	r3, [r3, #24]
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr
 800a5ce:	bf00      	nop
 800a5d0:	240010a4 	.word	0x240010a4

0800a5d4 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b086      	sub	sp, #24
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800a5de:	2304      	movs	r3, #4
 800a5e0:	613b      	str	r3, [r7, #16]
  uint32_t errorflag = 0;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a5e6:	f7fa f89d 	bl	8004724 <HAL_GetTick>
 800a5ea:	60f8      	str	r0, [r7, #12]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800a5ec:	e010      	b.n	800a610 <FLASH_WaitForLastOperation+0x3c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a5f4:	d00c      	beq.n	800a610 <FLASH_WaitForLastOperation+0x3c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a5f6:	f7fa f895 	bl	8004724 <HAL_GetTick>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	1ad3      	subs	r3, r2, r3
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	429a      	cmp	r2, r3
 800a604:	d302      	bcc.n	800a60c <FLASH_WaitForLastOperation+0x38>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d101      	bne.n	800a610 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800a60c:	2303      	movs	r3, #3
 800a60e:	e02d      	b.n	800a66c <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800a610:	4b18      	ldr	r3, [pc, #96]	@ (800a674 <FLASH_WaitForLastOperation+0xa0>)
 800a612:	691a      	ldr	r2, [r3, #16]
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	4013      	ands	r3, r2
 800a618:	693a      	ldr	r2, [r7, #16]
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d0e7      	beq.n	800a5ee <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	2b01      	cmp	r3, #1
 800a622:	d104      	bne.n	800a62e <FLASH_WaitForLastOperation+0x5a>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800a624:	4b13      	ldr	r3, [pc, #76]	@ (800a674 <FLASH_WaitForLastOperation+0xa0>)
 800a626:	691a      	ldr	r2, [r3, #16]
 800a628:	4b13      	ldr	r3, [pc, #76]	@ (800a678 <FLASH_WaitForLastOperation+0xa4>)
 800a62a:	4013      	ands	r3, r2
 800a62c:	617b      	str	r3, [r7, #20]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a634:	2b00      	cmp	r3, #0
 800a636:	d00a      	beq.n	800a64e <FLASH_WaitForLastOperation+0x7a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800a638:	4b10      	ldr	r3, [pc, #64]	@ (800a67c <FLASH_WaitForLastOperation+0xa8>)
 800a63a:	699a      	ldr	r2, [r3, #24]
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	4313      	orrs	r3, r2
 800a640:	4a0e      	ldr	r2, [pc, #56]	@ (800a67c <FLASH_WaitForLastOperation+0xa8>)
 800a642:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800a644:	4a0b      	ldr	r2, [pc, #44]	@ (800a674 <FLASH_WaitForLastOperation+0xa0>)
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
 800a64a:	2301      	movs	r3, #1
 800a64c:	e00e      	b.n	800a66c <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	2b01      	cmp	r3, #1
 800a652:	d10a      	bne.n	800a66a <FLASH_WaitForLastOperation+0x96>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800a654:	4b07      	ldr	r3, [pc, #28]	@ (800a674 <FLASH_WaitForLastOperation+0xa0>)
 800a656:	691b      	ldr	r3, [r3, #16]
 800a658:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a65c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a660:	d103      	bne.n	800a66a <FLASH_WaitForLastOperation+0x96>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800a662:	4b04      	ldr	r3, [pc, #16]	@ (800a674 <FLASH_WaitForLastOperation+0xa0>)
 800a664:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800a668:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800a66a:	2300      	movs	r3, #0
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3718      	adds	r7, #24
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}
 800a674:	52002000 	.word	0x52002000
 800a678:	17ee0000 	.word	0x17ee0000
 800a67c:	240010a4 	.word	0x240010a4

0800a680 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a68a:	2300      	movs	r3, #0
 800a68c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a68e:	4b3f      	ldr	r3, [pc, #252]	@ (800a78c <HAL_FLASHEx_Erase+0x10c>)
 800a690:	7d1b      	ldrb	r3, [r3, #20]
 800a692:	2b01      	cmp	r3, #1
 800a694:	d101      	bne.n	800a69a <HAL_FLASHEx_Erase+0x1a>
 800a696:	2302      	movs	r3, #2
 800a698:	e074      	b.n	800a784 <HAL_FLASHEx_Erase+0x104>
 800a69a:	4b3c      	ldr	r3, [pc, #240]	@ (800a78c <HAL_FLASHEx_Erase+0x10c>)
 800a69c:	2201      	movs	r2, #1
 800a69e:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a6a0:	4b3a      	ldr	r3, [pc, #232]	@ (800a78c <HAL_FLASHEx_Erase+0x10c>)
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	f003 0301 	and.w	r3, r3, #1
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d009      	beq.n	800a6c6 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800a6b2:	2101      	movs	r1, #1
 800a6b4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a6b8:	f7ff ff8c 	bl	800a5d4 <FLASH_WaitForLastOperation>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d001      	beq.n	800a6c6 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800a6c6:	7bfb      	ldrb	r3, [r7, #15]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d157      	bne.n	800a77c <HAL_FLASHEx_Erase+0xfc>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d11e      	bne.n	800a712 <HAL_FLASHEx_Erase+0x92>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	691a      	ldr	r2, [r3, #16]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	4619      	mov	r1, r3
 800a6de:	4610      	mov	r0, r2
 800a6e0:	f000 f85a 	bl	800a798 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	f003 0301 	and.w	r3, r3, #1
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d045      	beq.n	800a77c <HAL_FLASHEx_Erase+0xfc>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800a6f0:	2101      	movs	r1, #1
 800a6f2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a6f6:	f7ff ff6d 	bl	800a5d4 <FLASH_WaitForLastOperation>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d001      	beq.n	800a704 <HAL_FLASHEx_Erase+0x84>
        {
          status = HAL_ERROR;
 800a700:	2301      	movs	r3, #1
 800a702:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800a704:	4b22      	ldr	r3, [pc, #136]	@ (800a790 <HAL_FLASHEx_Erase+0x110>)
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	4a21      	ldr	r2, [pc, #132]	@ (800a790 <HAL_FLASHEx_Erase+0x110>)
 800a70a:	f023 0308 	bic.w	r3, r3, #8
 800a70e:	60d3      	str	r3, [r2, #12]
 800a710:	e034      	b.n	800a77c <HAL_FLASHEx_Erase+0xfc>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a718:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	689b      	ldr	r3, [r3, #8]
 800a71e:	60bb      	str	r3, [r7, #8]
 800a720:	e024      	b.n	800a76c <HAL_FLASHEx_Erase+0xec>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6859      	ldr	r1, [r3, #4]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	691b      	ldr	r3, [r3, #16]
 800a72a:	461a      	mov	r2, r3
 800a72c:	68b8      	ldr	r0, [r7, #8]
 800a72e:	f000 f857 	bl	800a7e0 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	f003 0301 	and.w	r3, r3, #1
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d00c      	beq.n	800a758 <HAL_FLASHEx_Erase+0xd8>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800a73e:	2101      	movs	r1, #1
 800a740:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a744:	f7ff ff46 	bl	800a5d4 <FLASH_WaitForLastOperation>
 800a748:	4603      	mov	r3, r0
 800a74a:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800a74c:	4b10      	ldr	r3, [pc, #64]	@ (800a790 <HAL_FLASHEx_Erase+0x110>)
 800a74e:	68da      	ldr	r2, [r3, #12]
 800a750:	490f      	ldr	r1, [pc, #60]	@ (800a790 <HAL_FLASHEx_Erase+0x110>)
 800a752:	4b10      	ldr	r3, [pc, #64]	@ (800a794 <HAL_FLASHEx_Erase+0x114>)
 800a754:	4013      	ands	r3, r2
 800a756:	60cb      	str	r3, [r1, #12]
          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800a758:	7bfb      	ldrb	r3, [r7, #15]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d003      	beq.n	800a766 <HAL_FLASHEx_Erase+0xe6>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	601a      	str	r2, [r3, #0]
          break;
 800a764:	e00a      	b.n	800a77c <HAL_FLASHEx_Erase+0xfc>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	3301      	adds	r3, #1
 800a76a:	60bb      	str	r3, [r7, #8]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	68da      	ldr	r2, [r3, #12]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	689b      	ldr	r3, [r3, #8]
 800a774:	4413      	add	r3, r2
 800a776:	68ba      	ldr	r2, [r7, #8]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d3d2      	bcc.n	800a722 <HAL_FLASHEx_Erase+0xa2>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a77c:	4b03      	ldr	r3, [pc, #12]	@ (800a78c <HAL_FLASHEx_Erase+0x10c>)
 800a77e:	2200      	movs	r2, #0
 800a780:	751a      	strb	r2, [r3, #20]

  return status;
 800a782:	7bfb      	ldrb	r3, [r7, #15]
}
 800a784:	4618      	mov	r0, r3
 800a786:	3710      	adds	r7, #16
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	240010a4 	.word	0x240010a4
 800a790:	52002000 	.word	0x52002000
 800a794:	fffff8fb 	.word	0xfffff8fb

0800a798 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800a798:	b480      	push	{r7}
 800a79a:	b083      	sub	sp, #12
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
  }
  else
#endif /* DUAL_BANK */
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	f003 0301 	and.w	r3, r3, #1
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d011      	beq.n	800a7d0 <FLASH_MassErase+0x38>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank1 */
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800a7ac:	4b0b      	ldr	r3, [pc, #44]	@ (800a7dc <FLASH_MassErase+0x44>)
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	4a0a      	ldr	r2, [pc, #40]	@ (800a7dc <FLASH_MassErase+0x44>)
 800a7b2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800a7b6:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800a7b8:	4b08      	ldr	r3, [pc, #32]	@ (800a7dc <FLASH_MassErase+0x44>)
 800a7ba:	68da      	ldr	r2, [r3, #12]
 800a7bc:	4907      	ldr	r1, [pc, #28]	@ (800a7dc <FLASH_MassErase+0x44>)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	60cb      	str	r3, [r1, #12]
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800a7c4:	4b05      	ldr	r3, [pc, #20]	@ (800a7dc <FLASH_MassErase+0x44>)
 800a7c6:	68db      	ldr	r3, [r3, #12]
 800a7c8:	4a04      	ldr	r2, [pc, #16]	@ (800a7dc <FLASH_MassErase+0x44>)
 800a7ca:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 800a7ce:	60d3      	str	r3, [r2, #12]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800a7d0:	bf00      	nop
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr
 800a7dc:	52002000 	.word	0x52002000

0800a7e0 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b085      	sub	sp, #20
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	60f8      	str	r0, [r7, #12]
 800a7e8:	60b9      	str	r1, [r7, #8]
 800a7ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	f003 0301 	and.w	r3, r3, #1
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d010      	beq.n	800a818 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800a7f6:	4b0b      	ldr	r3, [pc, #44]	@ (800a824 <FLASH_Erase_Sector+0x44>)
 800a7f8:	68db      	ldr	r3, [r3, #12]
 800a7fa:	4a0a      	ldr	r2, [pc, #40]	@ (800a824 <FLASH_Erase_Sector+0x44>)
 800a7fc:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 800a800:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800a802:	4b08      	ldr	r3, [pc, #32]	@ (800a824 <FLASH_Erase_Sector+0x44>)
 800a804:	68da      	ldr	r2, [r3, #12]
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	0219      	lsls	r1, r3, #8
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	430b      	orrs	r3, r1
 800a80e:	4313      	orrs	r3, r2
 800a810:	4a04      	ldr	r2, [pc, #16]	@ (800a824 <FLASH_Erase_Sector+0x44>)
 800a812:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 800a816:	60d3      	str	r3, [r2, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800a818:	bf00      	nop
 800a81a:	3714      	adds	r7, #20
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr
 800a824:	52002000 	.word	0x52002000

0800a828 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a828:	b480      	push	{r7}
 800a82a:	b089      	sub	sp, #36	@ 0x24
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a832:	2300      	movs	r3, #0
 800a834:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a836:	4b86      	ldr	r3, [pc, #536]	@ (800aa50 <HAL_GPIO_Init+0x228>)
 800a838:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a83a:	e18c      	b.n	800ab56 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	2101      	movs	r1, #1
 800a842:	69fb      	ldr	r3, [r7, #28]
 800a844:	fa01 f303 	lsl.w	r3, r1, r3
 800a848:	4013      	ands	r3, r2
 800a84a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f000 817e 	beq.w	800ab50 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	f003 0303 	and.w	r3, r3, #3
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d005      	beq.n	800a86c <HAL_GPIO_Init+0x44>
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	f003 0303 	and.w	r3, r3, #3
 800a868:	2b02      	cmp	r3, #2
 800a86a:	d130      	bne.n	800a8ce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a872:	69fb      	ldr	r3, [r7, #28]
 800a874:	005b      	lsls	r3, r3, #1
 800a876:	2203      	movs	r2, #3
 800a878:	fa02 f303 	lsl.w	r3, r2, r3
 800a87c:	43db      	mvns	r3, r3
 800a87e:	69ba      	ldr	r2, [r7, #24]
 800a880:	4013      	ands	r3, r2
 800a882:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	68da      	ldr	r2, [r3, #12]
 800a888:	69fb      	ldr	r3, [r7, #28]
 800a88a:	005b      	lsls	r3, r3, #1
 800a88c:	fa02 f303 	lsl.w	r3, r2, r3
 800a890:	69ba      	ldr	r2, [r7, #24]
 800a892:	4313      	orrs	r3, r2
 800a894:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	69ba      	ldr	r2, [r7, #24]
 800a89a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	69fb      	ldr	r3, [r7, #28]
 800a8a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a8aa:	43db      	mvns	r3, r3
 800a8ac:	69ba      	ldr	r2, [r7, #24]
 800a8ae:	4013      	ands	r3, r2
 800a8b0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	091b      	lsrs	r3, r3, #4
 800a8b8:	f003 0201 	and.w	r2, r3, #1
 800a8bc:	69fb      	ldr	r3, [r7, #28]
 800a8be:	fa02 f303 	lsl.w	r3, r2, r3
 800a8c2:	69ba      	ldr	r2, [r7, #24]
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	69ba      	ldr	r2, [r7, #24]
 800a8cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	f003 0303 	and.w	r3, r3, #3
 800a8d6:	2b03      	cmp	r3, #3
 800a8d8:	d017      	beq.n	800a90a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	68db      	ldr	r3, [r3, #12]
 800a8de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a8e0:	69fb      	ldr	r3, [r7, #28]
 800a8e2:	005b      	lsls	r3, r3, #1
 800a8e4:	2203      	movs	r2, #3
 800a8e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ea:	43db      	mvns	r3, r3
 800a8ec:	69ba      	ldr	r2, [r7, #24]
 800a8ee:	4013      	ands	r3, r2
 800a8f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	689a      	ldr	r2, [r3, #8]
 800a8f6:	69fb      	ldr	r3, [r7, #28]
 800a8f8:	005b      	lsls	r3, r3, #1
 800a8fa:	fa02 f303 	lsl.w	r3, r2, r3
 800a8fe:	69ba      	ldr	r2, [r7, #24]
 800a900:	4313      	orrs	r3, r2
 800a902:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	69ba      	ldr	r2, [r7, #24]
 800a908:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	f003 0303 	and.w	r3, r3, #3
 800a912:	2b02      	cmp	r3, #2
 800a914:	d123      	bne.n	800a95e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a916:	69fb      	ldr	r3, [r7, #28]
 800a918:	08da      	lsrs	r2, r3, #3
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	3208      	adds	r2, #8
 800a91e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a922:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a924:	69fb      	ldr	r3, [r7, #28]
 800a926:	f003 0307 	and.w	r3, r3, #7
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	220f      	movs	r2, #15
 800a92e:	fa02 f303 	lsl.w	r3, r2, r3
 800a932:	43db      	mvns	r3, r3
 800a934:	69ba      	ldr	r2, [r7, #24]
 800a936:	4013      	ands	r3, r2
 800a938:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	691a      	ldr	r2, [r3, #16]
 800a93e:	69fb      	ldr	r3, [r7, #28]
 800a940:	f003 0307 	and.w	r3, r3, #7
 800a944:	009b      	lsls	r3, r3, #2
 800a946:	fa02 f303 	lsl.w	r3, r2, r3
 800a94a:	69ba      	ldr	r2, [r7, #24]
 800a94c:	4313      	orrs	r3, r2
 800a94e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a950:	69fb      	ldr	r3, [r7, #28]
 800a952:	08da      	lsrs	r2, r3, #3
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	3208      	adds	r2, #8
 800a958:	69b9      	ldr	r1, [r7, #24]
 800a95a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a964:	69fb      	ldr	r3, [r7, #28]
 800a966:	005b      	lsls	r3, r3, #1
 800a968:	2203      	movs	r2, #3
 800a96a:	fa02 f303 	lsl.w	r3, r2, r3
 800a96e:	43db      	mvns	r3, r3
 800a970:	69ba      	ldr	r2, [r7, #24]
 800a972:	4013      	ands	r3, r2
 800a974:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	f003 0203 	and.w	r2, r3, #3
 800a97e:	69fb      	ldr	r3, [r7, #28]
 800a980:	005b      	lsls	r3, r3, #1
 800a982:	fa02 f303 	lsl.w	r3, r2, r3
 800a986:	69ba      	ldr	r2, [r7, #24]
 800a988:	4313      	orrs	r3, r2
 800a98a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	69ba      	ldr	r2, [r7, #24]
 800a990:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	685b      	ldr	r3, [r3, #4]
 800a996:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	f000 80d8 	beq.w	800ab50 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a9a0:	4b2c      	ldr	r3, [pc, #176]	@ (800aa54 <HAL_GPIO_Init+0x22c>)
 800a9a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a9a6:	4a2b      	ldr	r2, [pc, #172]	@ (800aa54 <HAL_GPIO_Init+0x22c>)
 800a9a8:	f043 0302 	orr.w	r3, r3, #2
 800a9ac:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800a9b0:	4b28      	ldr	r3, [pc, #160]	@ (800aa54 <HAL_GPIO_Init+0x22c>)
 800a9b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a9b6:	f003 0302 	and.w	r3, r3, #2
 800a9ba:	60fb      	str	r3, [r7, #12]
 800a9bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a9be:	4a26      	ldr	r2, [pc, #152]	@ (800aa58 <HAL_GPIO_Init+0x230>)
 800a9c0:	69fb      	ldr	r3, [r7, #28]
 800a9c2:	089b      	lsrs	r3, r3, #2
 800a9c4:	3302      	adds	r3, #2
 800a9c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a9cc:	69fb      	ldr	r3, [r7, #28]
 800a9ce:	f003 0303 	and.w	r3, r3, #3
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	220f      	movs	r2, #15
 800a9d6:	fa02 f303 	lsl.w	r3, r2, r3
 800a9da:	43db      	mvns	r3, r3
 800a9dc:	69ba      	ldr	r2, [r7, #24]
 800a9de:	4013      	ands	r3, r2
 800a9e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	4a1d      	ldr	r2, [pc, #116]	@ (800aa5c <HAL_GPIO_Init+0x234>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d04a      	beq.n	800aa80 <HAL_GPIO_Init+0x258>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	4a1c      	ldr	r2, [pc, #112]	@ (800aa60 <HAL_GPIO_Init+0x238>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d02b      	beq.n	800aa4a <HAL_GPIO_Init+0x222>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	4a1b      	ldr	r2, [pc, #108]	@ (800aa64 <HAL_GPIO_Init+0x23c>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d025      	beq.n	800aa46 <HAL_GPIO_Init+0x21e>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	4a1a      	ldr	r2, [pc, #104]	@ (800aa68 <HAL_GPIO_Init+0x240>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d01f      	beq.n	800aa42 <HAL_GPIO_Init+0x21a>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	4a19      	ldr	r2, [pc, #100]	@ (800aa6c <HAL_GPIO_Init+0x244>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d019      	beq.n	800aa3e <HAL_GPIO_Init+0x216>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	4a18      	ldr	r2, [pc, #96]	@ (800aa70 <HAL_GPIO_Init+0x248>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d013      	beq.n	800aa3a <HAL_GPIO_Init+0x212>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	4a17      	ldr	r2, [pc, #92]	@ (800aa74 <HAL_GPIO_Init+0x24c>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d00d      	beq.n	800aa36 <HAL_GPIO_Init+0x20e>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	4a16      	ldr	r2, [pc, #88]	@ (800aa78 <HAL_GPIO_Init+0x250>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d007      	beq.n	800aa32 <HAL_GPIO_Init+0x20a>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	4a15      	ldr	r2, [pc, #84]	@ (800aa7c <HAL_GPIO_Init+0x254>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d101      	bne.n	800aa2e <HAL_GPIO_Init+0x206>
 800aa2a:	2309      	movs	r3, #9
 800aa2c:	e029      	b.n	800aa82 <HAL_GPIO_Init+0x25a>
 800aa2e:	230a      	movs	r3, #10
 800aa30:	e027      	b.n	800aa82 <HAL_GPIO_Init+0x25a>
 800aa32:	2307      	movs	r3, #7
 800aa34:	e025      	b.n	800aa82 <HAL_GPIO_Init+0x25a>
 800aa36:	2306      	movs	r3, #6
 800aa38:	e023      	b.n	800aa82 <HAL_GPIO_Init+0x25a>
 800aa3a:	2305      	movs	r3, #5
 800aa3c:	e021      	b.n	800aa82 <HAL_GPIO_Init+0x25a>
 800aa3e:	2304      	movs	r3, #4
 800aa40:	e01f      	b.n	800aa82 <HAL_GPIO_Init+0x25a>
 800aa42:	2303      	movs	r3, #3
 800aa44:	e01d      	b.n	800aa82 <HAL_GPIO_Init+0x25a>
 800aa46:	2302      	movs	r3, #2
 800aa48:	e01b      	b.n	800aa82 <HAL_GPIO_Init+0x25a>
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	e019      	b.n	800aa82 <HAL_GPIO_Init+0x25a>
 800aa4e:	bf00      	nop
 800aa50:	58000080 	.word	0x58000080
 800aa54:	58024400 	.word	0x58024400
 800aa58:	58000400 	.word	0x58000400
 800aa5c:	58020000 	.word	0x58020000
 800aa60:	58020400 	.word	0x58020400
 800aa64:	58020800 	.word	0x58020800
 800aa68:	58020c00 	.word	0x58020c00
 800aa6c:	58021000 	.word	0x58021000
 800aa70:	58021400 	.word	0x58021400
 800aa74:	58021800 	.word	0x58021800
 800aa78:	58021c00 	.word	0x58021c00
 800aa7c:	58022400 	.word	0x58022400
 800aa80:	2300      	movs	r3, #0
 800aa82:	69fa      	ldr	r2, [r7, #28]
 800aa84:	f002 0203 	and.w	r2, r2, #3
 800aa88:	0092      	lsls	r2, r2, #2
 800aa8a:	4093      	lsls	r3, r2
 800aa8c:	69ba      	ldr	r2, [r7, #24]
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800aa92:	4938      	ldr	r1, [pc, #224]	@ (800ab74 <HAL_GPIO_Init+0x34c>)
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	089b      	lsrs	r3, r3, #2
 800aa98:	3302      	adds	r3, #2
 800aa9a:	69ba      	ldr	r2, [r7, #24]
 800aa9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800aaa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	43db      	mvns	r3, r3
 800aaac:	69ba      	ldr	r2, [r7, #24]
 800aaae:	4013      	ands	r3, r2
 800aab0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d003      	beq.n	800aac6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800aabe:	69ba      	ldr	r2, [r7, #24]
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	4313      	orrs	r3, r2
 800aac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800aac6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aaca:	69bb      	ldr	r3, [r7, #24]
 800aacc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800aace:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	43db      	mvns	r3, r3
 800aada:	69ba      	ldr	r2, [r7, #24]
 800aadc:	4013      	ands	r3, r2
 800aade:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d003      	beq.n	800aaf4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800aaec:	69ba      	ldr	r2, [r7, #24]
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	4313      	orrs	r3, r2
 800aaf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800aaf4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aaf8:	69bb      	ldr	r3, [r7, #24]
 800aafa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	43db      	mvns	r3, r3
 800ab06:	69ba      	ldr	r2, [r7, #24]
 800ab08:	4013      	ands	r3, r2
 800ab0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d003      	beq.n	800ab20 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800ab18:	69ba      	ldr	r2, [r7, #24]
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	69ba      	ldr	r2, [r7, #24]
 800ab24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	43db      	mvns	r3, r3
 800ab30:	69ba      	ldr	r2, [r7, #24]
 800ab32:	4013      	ands	r3, r2
 800ab34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d003      	beq.n	800ab4a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800ab42:	69ba      	ldr	r2, [r7, #24]
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	4313      	orrs	r3, r2
 800ab48:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	69ba      	ldr	r2, [r7, #24]
 800ab4e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800ab50:	69fb      	ldr	r3, [r7, #28]
 800ab52:	3301      	adds	r3, #1
 800ab54:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	681a      	ldr	r2, [r3, #0]
 800ab5a:	69fb      	ldr	r3, [r7, #28]
 800ab5c:	fa22 f303 	lsr.w	r3, r2, r3
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	f47f ae6b 	bne.w	800a83c <HAL_GPIO_Init+0x14>
  }
}
 800ab66:	bf00      	nop
 800ab68:	bf00      	nop
 800ab6a:	3724      	adds	r7, #36	@ 0x24
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr
 800ab74:	58000400 	.word	0x58000400

0800ab78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b085      	sub	sp, #20
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	460b      	mov	r3, r1
 800ab82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	691a      	ldr	r2, [r3, #16]
 800ab88:	887b      	ldrh	r3, [r7, #2]
 800ab8a:	4013      	ands	r3, r2
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d002      	beq.n	800ab96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ab90:	2301      	movs	r3, #1
 800ab92:	73fb      	strb	r3, [r7, #15]
 800ab94:	e001      	b.n	800ab9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ab96:	2300      	movs	r3, #0
 800ab98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ab9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3714      	adds	r7, #20
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr

0800aba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b083      	sub	sp, #12
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	460b      	mov	r3, r1
 800abb2:	807b      	strh	r3, [r7, #2]
 800abb4:	4613      	mov	r3, r2
 800abb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800abb8:	787b      	ldrb	r3, [r7, #1]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d003      	beq.n	800abc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800abbe:	887a      	ldrh	r2, [r7, #2]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800abc4:	e003      	b.n	800abce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800abc6:	887b      	ldrh	r3, [r7, #2]
 800abc8:	041a      	lsls	r2, r3, #16
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	619a      	str	r2, [r3, #24]
}
 800abce:	bf00      	nop
 800abd0:	370c      	adds	r7, #12
 800abd2:	46bd      	mov	sp, r7
 800abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd8:	4770      	bx	lr

0800abda <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800abda:	b580      	push	{r7, lr}
 800abdc:	b082      	sub	sp, #8
 800abde:	af00      	add	r7, sp, #0
 800abe0:	4603      	mov	r3, r0
 800abe2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800abe4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800abe8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800abec:	88fb      	ldrh	r3, [r7, #6]
 800abee:	4013      	ands	r3, r2
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d008      	beq.n	800ac06 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800abf4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800abf8:	88fb      	ldrh	r3, [r7, #6]
 800abfa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800abfe:	88fb      	ldrh	r3, [r7, #6]
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7f7 fa85 	bl	8002110 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800ac06:	bf00      	nop
 800ac08:	3708      	adds	r7, #8
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
	...

0800ac10 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b084      	sub	sp, #16
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800ac18:	4b19      	ldr	r3, [pc, #100]	@ (800ac80 <HAL_PWREx_ConfigSupply+0x70>)
 800ac1a:	68db      	ldr	r3, [r3, #12]
 800ac1c:	f003 0304 	and.w	r3, r3, #4
 800ac20:	2b04      	cmp	r3, #4
 800ac22:	d00a      	beq.n	800ac3a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800ac24:	4b16      	ldr	r3, [pc, #88]	@ (800ac80 <HAL_PWREx_ConfigSupply+0x70>)
 800ac26:	68db      	ldr	r3, [r3, #12]
 800ac28:	f003 0307 	and.w	r3, r3, #7
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	429a      	cmp	r2, r3
 800ac30:	d001      	beq.n	800ac36 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800ac32:	2301      	movs	r3, #1
 800ac34:	e01f      	b.n	800ac76 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800ac36:	2300      	movs	r3, #0
 800ac38:	e01d      	b.n	800ac76 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800ac3a:	4b11      	ldr	r3, [pc, #68]	@ (800ac80 <HAL_PWREx_ConfigSupply+0x70>)
 800ac3c:	68db      	ldr	r3, [r3, #12]
 800ac3e:	f023 0207 	bic.w	r2, r3, #7
 800ac42:	490f      	ldr	r1, [pc, #60]	@ (800ac80 <HAL_PWREx_ConfigSupply+0x70>)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	4313      	orrs	r3, r2
 800ac48:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800ac4a:	f7f9 fd6b 	bl	8004724 <HAL_GetTick>
 800ac4e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ac50:	e009      	b.n	800ac66 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ac52:	f7f9 fd67 	bl	8004724 <HAL_GetTick>
 800ac56:	4602      	mov	r2, r0
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	1ad3      	subs	r3, r2, r3
 800ac5c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ac60:	d901      	bls.n	800ac66 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800ac62:	2301      	movs	r3, #1
 800ac64:	e007      	b.n	800ac76 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ac66:	4b06      	ldr	r3, [pc, #24]	@ (800ac80 <HAL_PWREx_ConfigSupply+0x70>)
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ac6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac72:	d1ee      	bne.n	800ac52 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800ac74:	2300      	movs	r3, #0
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3710      	adds	r7, #16
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	58024800 	.word	0x58024800

0800ac84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b08c      	sub	sp, #48	@ 0x30
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d101      	bne.n	800ac96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ac92:	2301      	movs	r3, #1
 800ac94:	e3c8      	b.n	800b428 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f003 0301 	and.w	r3, r3, #1
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	f000 8087 	beq.w	800adb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aca4:	4b88      	ldr	r3, [pc, #544]	@ (800aec8 <HAL_RCC_OscConfig+0x244>)
 800aca6:	691b      	ldr	r3, [r3, #16]
 800aca8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800acac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800acae:	4b86      	ldr	r3, [pc, #536]	@ (800aec8 <HAL_RCC_OscConfig+0x244>)
 800acb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800acb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acb6:	2b10      	cmp	r3, #16
 800acb8:	d007      	beq.n	800acca <HAL_RCC_OscConfig+0x46>
 800acba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acbc:	2b18      	cmp	r3, #24
 800acbe:	d110      	bne.n	800ace2 <HAL_RCC_OscConfig+0x5e>
 800acc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acc2:	f003 0303 	and.w	r3, r3, #3
 800acc6:	2b02      	cmp	r3, #2
 800acc8:	d10b      	bne.n	800ace2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800acca:	4b7f      	ldr	r3, [pc, #508]	@ (800aec8 <HAL_RCC_OscConfig+0x244>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d06c      	beq.n	800adb0 <HAL_RCC_OscConfig+0x12c>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d168      	bne.n	800adb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800acde:	2301      	movs	r3, #1
 800ace0:	e3a2      	b.n	800b428 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800acea:	d106      	bne.n	800acfa <HAL_RCC_OscConfig+0x76>
 800acec:	4b76      	ldr	r3, [pc, #472]	@ (800aec8 <HAL_RCC_OscConfig+0x244>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a75      	ldr	r2, [pc, #468]	@ (800aec8 <HAL_RCC_OscConfig+0x244>)
 800acf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800acf6:	6013      	str	r3, [r2, #0]
 800acf8:	e02e      	b.n	800ad58 <HAL_RCC_OscConfig+0xd4>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d10c      	bne.n	800ad1c <HAL_RCC_OscConfig+0x98>
 800ad02:	4b71      	ldr	r3, [pc, #452]	@ (800aec8 <HAL_RCC_OscConfig+0x244>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4a70      	ldr	r2, [pc, #448]	@ (800aec8 <HAL_RCC_OscConfig+0x244>)
 800ad08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ad0c:	6013      	str	r3, [r2, #0]
 800ad0e:	4b6e      	ldr	r3, [pc, #440]	@ (800aec8 <HAL_RCC_OscConfig+0x244>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	4a6d      	ldr	r2, [pc, #436]	@ (800aec8 <HAL_RCC_OscConfig+0x244>)
 800ad14:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ad18:	6013      	str	r3, [r2, #0]
 800ad1a:	e01d      	b.n	800ad58 <HAL_RCC_OscConfig+0xd4>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ad24:	d10c      	bne.n	800ad40 <HAL_RCC_OscConfig+0xbc>
 800ad26:	4b68      	ldr	r3, [pc, #416]	@ (800aec8 <HAL_RCC_OscConfig+0x244>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4a67      	ldr	r2, [pc, #412]	@ (800aec8 <HAL_RCC_OscConfig+0x244>)
 800ad2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ad30:	6013      	str	r3, [r2, #0]
 800ad32:	4b65      	ldr	r3, [pc, #404]	@ (800aec8 <HAL_RCC_OscConfig+0x244>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4a64      	ldr	r2, [pc, #400]	@ (800aec8 <HAL_RCC_OscConfig+0x244>)
 800ad38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ad3c:	6013      	str	r3, [r2, #0]
 800ad3e:	e00b      	b.n	800ad58 <HAL_RCC_OscConfig+0xd4>
 800ad40:	4b61      	ldr	r3, [pc, #388]	@ (800aec8 <HAL_RCC_OscConfig+0x244>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a60      	ldr	r2, [pc, #384]	@ (800aec8 <HAL_RCC_OscConfig+0x244>)
 800ad46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ad4a:	6013      	str	r3, [r2, #0]
 800ad4c:	4b5e      	ldr	r3, [pc, #376]	@ (800aec8 <HAL_RCC_OscConfig+0x244>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a5d      	ldr	r2, [pc, #372]	@ (800aec8 <HAL_RCC_OscConfig+0x244>)
 800ad52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ad56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d013      	beq.n	800ad88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad60:	f7f9 fce0 	bl	8004724 <HAL_GetTick>
 800ad64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ad66:	e008      	b.n	800ad7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ad68:	f7f9 fcdc 	bl	8004724 <HAL_GetTick>
 800ad6c:	4602      	mov	r2, r0
 800ad6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad70:	1ad3      	subs	r3, r2, r3
 800ad72:	2b64      	cmp	r3, #100	@ 0x64
 800ad74:	d901      	bls.n	800ad7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800ad76:	2303      	movs	r3, #3
 800ad78:	e356      	b.n	800b428 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ad7a:	4b53      	ldr	r3, [pc, #332]	@ (800aec8 <HAL_RCC_OscConfig+0x244>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d0f0      	beq.n	800ad68 <HAL_RCC_OscConfig+0xe4>
 800ad86:	e014      	b.n	800adb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad88:	f7f9 fccc 	bl	8004724 <HAL_GetTick>
 800ad8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ad8e:	e008      	b.n	800ada2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ad90:	f7f9 fcc8 	bl	8004724 <HAL_GetTick>
 800ad94:	4602      	mov	r2, r0
 800ad96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad98:	1ad3      	subs	r3, r2, r3
 800ad9a:	2b64      	cmp	r3, #100	@ 0x64
 800ad9c:	d901      	bls.n	800ada2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800ad9e:	2303      	movs	r3, #3
 800ada0:	e342      	b.n	800b428 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ada2:	4b49      	ldr	r3, [pc, #292]	@ (800aec8 <HAL_RCC_OscConfig+0x244>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d1f0      	bne.n	800ad90 <HAL_RCC_OscConfig+0x10c>
 800adae:	e000      	b.n	800adb2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800adb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f003 0302 	and.w	r3, r3, #2
 800adba:	2b00      	cmp	r3, #0
 800adbc:	f000 808c 	beq.w	800aed8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800adc0:	4b41      	ldr	r3, [pc, #260]	@ (800aec8 <HAL_RCC_OscConfig+0x244>)
 800adc2:	691b      	ldr	r3, [r3, #16]
 800adc4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800adc8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800adca:	4b3f      	ldr	r3, [pc, #252]	@ (800aec8 <HAL_RCC_OscConfig+0x244>)
 800adcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adce:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800add0:	6a3b      	ldr	r3, [r7, #32]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d007      	beq.n	800ade6 <HAL_RCC_OscConfig+0x162>
 800add6:	6a3b      	ldr	r3, [r7, #32]
 800add8:	2b18      	cmp	r3, #24
 800adda:	d137      	bne.n	800ae4c <HAL_RCC_OscConfig+0x1c8>
 800addc:	69fb      	ldr	r3, [r7, #28]
 800adde:	f003 0303 	and.w	r3, r3, #3
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d132      	bne.n	800ae4c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ade6:	4b38      	ldr	r3, [pc, #224]	@ (800aec8 <HAL_RCC_OscConfig+0x244>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f003 0304 	and.w	r3, r3, #4
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d005      	beq.n	800adfe <HAL_RCC_OscConfig+0x17a>
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d101      	bne.n	800adfe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800adfa:	2301      	movs	r3, #1
 800adfc:	e314      	b.n	800b428 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800adfe:	4b32      	ldr	r3, [pc, #200]	@ (800aec8 <HAL_RCC_OscConfig+0x244>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f023 0219 	bic.w	r2, r3, #25
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	68db      	ldr	r3, [r3, #12]
 800ae0a:	492f      	ldr	r1, [pc, #188]	@ (800aec8 <HAL_RCC_OscConfig+0x244>)
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae10:	f7f9 fc88 	bl	8004724 <HAL_GetTick>
 800ae14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ae16:	e008      	b.n	800ae2a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ae18:	f7f9 fc84 	bl	8004724 <HAL_GetTick>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae20:	1ad3      	subs	r3, r2, r3
 800ae22:	2b02      	cmp	r3, #2
 800ae24:	d901      	bls.n	800ae2a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800ae26:	2303      	movs	r3, #3
 800ae28:	e2fe      	b.n	800b428 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ae2a:	4b27      	ldr	r3, [pc, #156]	@ (800aec8 <HAL_RCC_OscConfig+0x244>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f003 0304 	and.w	r3, r3, #4
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d0f0      	beq.n	800ae18 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae36:	4b24      	ldr	r3, [pc, #144]	@ (800aec8 <HAL_RCC_OscConfig+0x244>)
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	691b      	ldr	r3, [r3, #16]
 800ae42:	061b      	lsls	r3, r3, #24
 800ae44:	4920      	ldr	r1, [pc, #128]	@ (800aec8 <HAL_RCC_OscConfig+0x244>)
 800ae46:	4313      	orrs	r3, r2
 800ae48:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ae4a:	e045      	b.n	800aed8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	68db      	ldr	r3, [r3, #12]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d026      	beq.n	800aea2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ae54:	4b1c      	ldr	r3, [pc, #112]	@ (800aec8 <HAL_RCC_OscConfig+0x244>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f023 0219 	bic.w	r2, r3, #25
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	68db      	ldr	r3, [r3, #12]
 800ae60:	4919      	ldr	r1, [pc, #100]	@ (800aec8 <HAL_RCC_OscConfig+0x244>)
 800ae62:	4313      	orrs	r3, r2
 800ae64:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae66:	f7f9 fc5d 	bl	8004724 <HAL_GetTick>
 800ae6a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ae6c:	e008      	b.n	800ae80 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ae6e:	f7f9 fc59 	bl	8004724 <HAL_GetTick>
 800ae72:	4602      	mov	r2, r0
 800ae74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae76:	1ad3      	subs	r3, r2, r3
 800ae78:	2b02      	cmp	r3, #2
 800ae7a:	d901      	bls.n	800ae80 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800ae7c:	2303      	movs	r3, #3
 800ae7e:	e2d3      	b.n	800b428 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ae80:	4b11      	ldr	r3, [pc, #68]	@ (800aec8 <HAL_RCC_OscConfig+0x244>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f003 0304 	and.w	r3, r3, #4
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d0f0      	beq.n	800ae6e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae8c:	4b0e      	ldr	r3, [pc, #56]	@ (800aec8 <HAL_RCC_OscConfig+0x244>)
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	691b      	ldr	r3, [r3, #16]
 800ae98:	061b      	lsls	r3, r3, #24
 800ae9a:	490b      	ldr	r1, [pc, #44]	@ (800aec8 <HAL_RCC_OscConfig+0x244>)
 800ae9c:	4313      	orrs	r3, r2
 800ae9e:	604b      	str	r3, [r1, #4]
 800aea0:	e01a      	b.n	800aed8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aea2:	4b09      	ldr	r3, [pc, #36]	@ (800aec8 <HAL_RCC_OscConfig+0x244>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4a08      	ldr	r2, [pc, #32]	@ (800aec8 <HAL_RCC_OscConfig+0x244>)
 800aea8:	f023 0301 	bic.w	r3, r3, #1
 800aeac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aeae:	f7f9 fc39 	bl	8004724 <HAL_GetTick>
 800aeb2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800aeb4:	e00a      	b.n	800aecc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aeb6:	f7f9 fc35 	bl	8004724 <HAL_GetTick>
 800aeba:	4602      	mov	r2, r0
 800aebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aebe:	1ad3      	subs	r3, r2, r3
 800aec0:	2b02      	cmp	r3, #2
 800aec2:	d903      	bls.n	800aecc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800aec4:	2303      	movs	r3, #3
 800aec6:	e2af      	b.n	800b428 <HAL_RCC_OscConfig+0x7a4>
 800aec8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800aecc:	4b96      	ldr	r3, [pc, #600]	@ (800b128 <HAL_RCC_OscConfig+0x4a4>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f003 0304 	and.w	r3, r3, #4
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d1ee      	bne.n	800aeb6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f003 0310 	and.w	r3, r3, #16
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d06a      	beq.n	800afba <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aee4:	4b90      	ldr	r3, [pc, #576]	@ (800b128 <HAL_RCC_OscConfig+0x4a4>)
 800aee6:	691b      	ldr	r3, [r3, #16]
 800aee8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aeec:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aeee:	4b8e      	ldr	r3, [pc, #568]	@ (800b128 <HAL_RCC_OscConfig+0x4a4>)
 800aef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aef2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800aef4:	69bb      	ldr	r3, [r7, #24]
 800aef6:	2b08      	cmp	r3, #8
 800aef8:	d007      	beq.n	800af0a <HAL_RCC_OscConfig+0x286>
 800aefa:	69bb      	ldr	r3, [r7, #24]
 800aefc:	2b18      	cmp	r3, #24
 800aefe:	d11b      	bne.n	800af38 <HAL_RCC_OscConfig+0x2b4>
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	f003 0303 	and.w	r3, r3, #3
 800af06:	2b01      	cmp	r3, #1
 800af08:	d116      	bne.n	800af38 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800af0a:	4b87      	ldr	r3, [pc, #540]	@ (800b128 <HAL_RCC_OscConfig+0x4a4>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af12:	2b00      	cmp	r3, #0
 800af14:	d005      	beq.n	800af22 <HAL_RCC_OscConfig+0x29e>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	69db      	ldr	r3, [r3, #28]
 800af1a:	2b80      	cmp	r3, #128	@ 0x80
 800af1c:	d001      	beq.n	800af22 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800af1e:	2301      	movs	r3, #1
 800af20:	e282      	b.n	800b428 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800af22:	4b81      	ldr	r3, [pc, #516]	@ (800b128 <HAL_RCC_OscConfig+0x4a4>)
 800af24:	68db      	ldr	r3, [r3, #12]
 800af26:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6a1b      	ldr	r3, [r3, #32]
 800af2e:	061b      	lsls	r3, r3, #24
 800af30:	497d      	ldr	r1, [pc, #500]	@ (800b128 <HAL_RCC_OscConfig+0x4a4>)
 800af32:	4313      	orrs	r3, r2
 800af34:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800af36:	e040      	b.n	800afba <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	69db      	ldr	r3, [r3, #28]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d023      	beq.n	800af88 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800af40:	4b79      	ldr	r3, [pc, #484]	@ (800b128 <HAL_RCC_OscConfig+0x4a4>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4a78      	ldr	r2, [pc, #480]	@ (800b128 <HAL_RCC_OscConfig+0x4a4>)
 800af46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af4c:	f7f9 fbea 	bl	8004724 <HAL_GetTick>
 800af50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800af52:	e008      	b.n	800af66 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800af54:	f7f9 fbe6 	bl	8004724 <HAL_GetTick>
 800af58:	4602      	mov	r2, r0
 800af5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af5c:	1ad3      	subs	r3, r2, r3
 800af5e:	2b02      	cmp	r3, #2
 800af60:	d901      	bls.n	800af66 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800af62:	2303      	movs	r3, #3
 800af64:	e260      	b.n	800b428 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800af66:	4b70      	ldr	r3, [pc, #448]	@ (800b128 <HAL_RCC_OscConfig+0x4a4>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d0f0      	beq.n	800af54 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800af72:	4b6d      	ldr	r3, [pc, #436]	@ (800b128 <HAL_RCC_OscConfig+0x4a4>)
 800af74:	68db      	ldr	r3, [r3, #12]
 800af76:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6a1b      	ldr	r3, [r3, #32]
 800af7e:	061b      	lsls	r3, r3, #24
 800af80:	4969      	ldr	r1, [pc, #420]	@ (800b128 <HAL_RCC_OscConfig+0x4a4>)
 800af82:	4313      	orrs	r3, r2
 800af84:	60cb      	str	r3, [r1, #12]
 800af86:	e018      	b.n	800afba <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800af88:	4b67      	ldr	r3, [pc, #412]	@ (800b128 <HAL_RCC_OscConfig+0x4a4>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4a66      	ldr	r2, [pc, #408]	@ (800b128 <HAL_RCC_OscConfig+0x4a4>)
 800af8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af94:	f7f9 fbc6 	bl	8004724 <HAL_GetTick>
 800af98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800af9a:	e008      	b.n	800afae <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800af9c:	f7f9 fbc2 	bl	8004724 <HAL_GetTick>
 800afa0:	4602      	mov	r2, r0
 800afa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afa4:	1ad3      	subs	r3, r2, r3
 800afa6:	2b02      	cmp	r3, #2
 800afa8:	d901      	bls.n	800afae <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800afaa:	2303      	movs	r3, #3
 800afac:	e23c      	b.n	800b428 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800afae:	4b5e      	ldr	r3, [pc, #376]	@ (800b128 <HAL_RCC_OscConfig+0x4a4>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d1f0      	bne.n	800af9c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f003 0308 	and.w	r3, r3, #8
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d036      	beq.n	800b034 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	695b      	ldr	r3, [r3, #20]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d019      	beq.n	800b002 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800afce:	4b56      	ldr	r3, [pc, #344]	@ (800b128 <HAL_RCC_OscConfig+0x4a4>)
 800afd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800afd2:	4a55      	ldr	r2, [pc, #340]	@ (800b128 <HAL_RCC_OscConfig+0x4a4>)
 800afd4:	f043 0301 	orr.w	r3, r3, #1
 800afd8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800afda:	f7f9 fba3 	bl	8004724 <HAL_GetTick>
 800afde:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800afe0:	e008      	b.n	800aff4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800afe2:	f7f9 fb9f 	bl	8004724 <HAL_GetTick>
 800afe6:	4602      	mov	r2, r0
 800afe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afea:	1ad3      	subs	r3, r2, r3
 800afec:	2b02      	cmp	r3, #2
 800afee:	d901      	bls.n	800aff4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800aff0:	2303      	movs	r3, #3
 800aff2:	e219      	b.n	800b428 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aff4:	4b4c      	ldr	r3, [pc, #304]	@ (800b128 <HAL_RCC_OscConfig+0x4a4>)
 800aff6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aff8:	f003 0302 	and.w	r3, r3, #2
 800affc:	2b00      	cmp	r3, #0
 800affe:	d0f0      	beq.n	800afe2 <HAL_RCC_OscConfig+0x35e>
 800b000:	e018      	b.n	800b034 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b002:	4b49      	ldr	r3, [pc, #292]	@ (800b128 <HAL_RCC_OscConfig+0x4a4>)
 800b004:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b006:	4a48      	ldr	r2, [pc, #288]	@ (800b128 <HAL_RCC_OscConfig+0x4a4>)
 800b008:	f023 0301 	bic.w	r3, r3, #1
 800b00c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b00e:	f7f9 fb89 	bl	8004724 <HAL_GetTick>
 800b012:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b014:	e008      	b.n	800b028 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b016:	f7f9 fb85 	bl	8004724 <HAL_GetTick>
 800b01a:	4602      	mov	r2, r0
 800b01c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b01e:	1ad3      	subs	r3, r2, r3
 800b020:	2b02      	cmp	r3, #2
 800b022:	d901      	bls.n	800b028 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800b024:	2303      	movs	r3, #3
 800b026:	e1ff      	b.n	800b428 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b028:	4b3f      	ldr	r3, [pc, #252]	@ (800b128 <HAL_RCC_OscConfig+0x4a4>)
 800b02a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b02c:	f003 0302 	and.w	r3, r3, #2
 800b030:	2b00      	cmp	r3, #0
 800b032:	d1f0      	bne.n	800b016 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f003 0320 	and.w	r3, r3, #32
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d036      	beq.n	800b0ae <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	699b      	ldr	r3, [r3, #24]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d019      	beq.n	800b07c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b048:	4b37      	ldr	r3, [pc, #220]	@ (800b128 <HAL_RCC_OscConfig+0x4a4>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4a36      	ldr	r2, [pc, #216]	@ (800b128 <HAL_RCC_OscConfig+0x4a4>)
 800b04e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b052:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b054:	f7f9 fb66 	bl	8004724 <HAL_GetTick>
 800b058:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b05a:	e008      	b.n	800b06e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b05c:	f7f9 fb62 	bl	8004724 <HAL_GetTick>
 800b060:	4602      	mov	r2, r0
 800b062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b064:	1ad3      	subs	r3, r2, r3
 800b066:	2b02      	cmp	r3, #2
 800b068:	d901      	bls.n	800b06e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800b06a:	2303      	movs	r3, #3
 800b06c:	e1dc      	b.n	800b428 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b06e:	4b2e      	ldr	r3, [pc, #184]	@ (800b128 <HAL_RCC_OscConfig+0x4a4>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b076:	2b00      	cmp	r3, #0
 800b078:	d0f0      	beq.n	800b05c <HAL_RCC_OscConfig+0x3d8>
 800b07a:	e018      	b.n	800b0ae <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b07c:	4b2a      	ldr	r3, [pc, #168]	@ (800b128 <HAL_RCC_OscConfig+0x4a4>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a29      	ldr	r2, [pc, #164]	@ (800b128 <HAL_RCC_OscConfig+0x4a4>)
 800b082:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b086:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b088:	f7f9 fb4c 	bl	8004724 <HAL_GetTick>
 800b08c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b08e:	e008      	b.n	800b0a2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b090:	f7f9 fb48 	bl	8004724 <HAL_GetTick>
 800b094:	4602      	mov	r2, r0
 800b096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b098:	1ad3      	subs	r3, r2, r3
 800b09a:	2b02      	cmp	r3, #2
 800b09c:	d901      	bls.n	800b0a2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800b09e:	2303      	movs	r3, #3
 800b0a0:	e1c2      	b.n	800b428 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b0a2:	4b21      	ldr	r3, [pc, #132]	@ (800b128 <HAL_RCC_OscConfig+0x4a4>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d1f0      	bne.n	800b090 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f003 0304 	and.w	r3, r3, #4
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	f000 8086 	beq.w	800b1c8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b0bc:	4b1b      	ldr	r3, [pc, #108]	@ (800b12c <HAL_RCC_OscConfig+0x4a8>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4a1a      	ldr	r2, [pc, #104]	@ (800b12c <HAL_RCC_OscConfig+0x4a8>)
 800b0c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b0c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b0c8:	f7f9 fb2c 	bl	8004724 <HAL_GetTick>
 800b0cc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b0ce:	e008      	b.n	800b0e2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b0d0:	f7f9 fb28 	bl	8004724 <HAL_GetTick>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0d8:	1ad3      	subs	r3, r2, r3
 800b0da:	2b64      	cmp	r3, #100	@ 0x64
 800b0dc:	d901      	bls.n	800b0e2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800b0de:	2303      	movs	r3, #3
 800b0e0:	e1a2      	b.n	800b428 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b0e2:	4b12      	ldr	r3, [pc, #72]	@ (800b12c <HAL_RCC_OscConfig+0x4a8>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d0f0      	beq.n	800b0d0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	689b      	ldr	r3, [r3, #8]
 800b0f2:	2b01      	cmp	r3, #1
 800b0f4:	d106      	bne.n	800b104 <HAL_RCC_OscConfig+0x480>
 800b0f6:	4b0c      	ldr	r3, [pc, #48]	@ (800b128 <HAL_RCC_OscConfig+0x4a4>)
 800b0f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0fa:	4a0b      	ldr	r2, [pc, #44]	@ (800b128 <HAL_RCC_OscConfig+0x4a4>)
 800b0fc:	f043 0301 	orr.w	r3, r3, #1
 800b100:	6713      	str	r3, [r2, #112]	@ 0x70
 800b102:	e032      	b.n	800b16a <HAL_RCC_OscConfig+0x4e6>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	689b      	ldr	r3, [r3, #8]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d111      	bne.n	800b130 <HAL_RCC_OscConfig+0x4ac>
 800b10c:	4b06      	ldr	r3, [pc, #24]	@ (800b128 <HAL_RCC_OscConfig+0x4a4>)
 800b10e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b110:	4a05      	ldr	r2, [pc, #20]	@ (800b128 <HAL_RCC_OscConfig+0x4a4>)
 800b112:	f023 0301 	bic.w	r3, r3, #1
 800b116:	6713      	str	r3, [r2, #112]	@ 0x70
 800b118:	4b03      	ldr	r3, [pc, #12]	@ (800b128 <HAL_RCC_OscConfig+0x4a4>)
 800b11a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b11c:	4a02      	ldr	r2, [pc, #8]	@ (800b128 <HAL_RCC_OscConfig+0x4a4>)
 800b11e:	f023 0304 	bic.w	r3, r3, #4
 800b122:	6713      	str	r3, [r2, #112]	@ 0x70
 800b124:	e021      	b.n	800b16a <HAL_RCC_OscConfig+0x4e6>
 800b126:	bf00      	nop
 800b128:	58024400 	.word	0x58024400
 800b12c:	58024800 	.word	0x58024800
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	689b      	ldr	r3, [r3, #8]
 800b134:	2b05      	cmp	r3, #5
 800b136:	d10c      	bne.n	800b152 <HAL_RCC_OscConfig+0x4ce>
 800b138:	4b83      	ldr	r3, [pc, #524]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b13a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b13c:	4a82      	ldr	r2, [pc, #520]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b13e:	f043 0304 	orr.w	r3, r3, #4
 800b142:	6713      	str	r3, [r2, #112]	@ 0x70
 800b144:	4b80      	ldr	r3, [pc, #512]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b148:	4a7f      	ldr	r2, [pc, #508]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b14a:	f043 0301 	orr.w	r3, r3, #1
 800b14e:	6713      	str	r3, [r2, #112]	@ 0x70
 800b150:	e00b      	b.n	800b16a <HAL_RCC_OscConfig+0x4e6>
 800b152:	4b7d      	ldr	r3, [pc, #500]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b156:	4a7c      	ldr	r2, [pc, #496]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b158:	f023 0301 	bic.w	r3, r3, #1
 800b15c:	6713      	str	r3, [r2, #112]	@ 0x70
 800b15e:	4b7a      	ldr	r3, [pc, #488]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b162:	4a79      	ldr	r2, [pc, #484]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b164:	f023 0304 	bic.w	r3, r3, #4
 800b168:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	689b      	ldr	r3, [r3, #8]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d015      	beq.n	800b19e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b172:	f7f9 fad7 	bl	8004724 <HAL_GetTick>
 800b176:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b178:	e00a      	b.n	800b190 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b17a:	f7f9 fad3 	bl	8004724 <HAL_GetTick>
 800b17e:	4602      	mov	r2, r0
 800b180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b182:	1ad3      	subs	r3, r2, r3
 800b184:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b188:	4293      	cmp	r3, r2
 800b18a:	d901      	bls.n	800b190 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800b18c:	2303      	movs	r3, #3
 800b18e:	e14b      	b.n	800b428 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b190:	4b6d      	ldr	r3, [pc, #436]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b192:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b194:	f003 0302 	and.w	r3, r3, #2
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d0ee      	beq.n	800b17a <HAL_RCC_OscConfig+0x4f6>
 800b19c:	e014      	b.n	800b1c8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b19e:	f7f9 fac1 	bl	8004724 <HAL_GetTick>
 800b1a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b1a4:	e00a      	b.n	800b1bc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b1a6:	f7f9 fabd 	bl	8004724 <HAL_GetTick>
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ae:	1ad3      	subs	r3, r2, r3
 800b1b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d901      	bls.n	800b1bc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800b1b8:	2303      	movs	r3, #3
 800b1ba:	e135      	b.n	800b428 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b1bc:	4b62      	ldr	r3, [pc, #392]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b1be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b1c0:	f003 0302 	and.w	r3, r3, #2
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d1ee      	bne.n	800b1a6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	f000 812a 	beq.w	800b426 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b1d2:	4b5d      	ldr	r3, [pc, #372]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b1d4:	691b      	ldr	r3, [r3, #16]
 800b1d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b1da:	2b18      	cmp	r3, #24
 800b1dc:	f000 80ba 	beq.w	800b354 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1e4:	2b02      	cmp	r3, #2
 800b1e6:	f040 8095 	bne.w	800b314 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b1ea:	4b57      	ldr	r3, [pc, #348]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4a56      	ldr	r2, [pc, #344]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b1f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b1f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1f6:	f7f9 fa95 	bl	8004724 <HAL_GetTick>
 800b1fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b1fc:	e008      	b.n	800b210 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b1fe:	f7f9 fa91 	bl	8004724 <HAL_GetTick>
 800b202:	4602      	mov	r2, r0
 800b204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b206:	1ad3      	subs	r3, r2, r3
 800b208:	2b02      	cmp	r3, #2
 800b20a:	d901      	bls.n	800b210 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800b20c:	2303      	movs	r3, #3
 800b20e:	e10b      	b.n	800b428 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b210:	4b4d      	ldr	r3, [pc, #308]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d1f0      	bne.n	800b1fe <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b21c:	4b4a      	ldr	r3, [pc, #296]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b21e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b220:	4b4a      	ldr	r3, [pc, #296]	@ (800b34c <HAL_RCC_OscConfig+0x6c8>)
 800b222:	4013      	ands	r3, r2
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b22c:	0112      	lsls	r2, r2, #4
 800b22e:	430a      	orrs	r2, r1
 800b230:	4945      	ldr	r1, [pc, #276]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b232:	4313      	orrs	r3, r2
 800b234:	628b      	str	r3, [r1, #40]	@ 0x28
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b23a:	3b01      	subs	r3, #1
 800b23c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b244:	3b01      	subs	r3, #1
 800b246:	025b      	lsls	r3, r3, #9
 800b248:	b29b      	uxth	r3, r3
 800b24a:	431a      	orrs	r2, r3
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b250:	3b01      	subs	r3, #1
 800b252:	041b      	lsls	r3, r3, #16
 800b254:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b258:	431a      	orrs	r2, r3
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b25e:	3b01      	subs	r3, #1
 800b260:	061b      	lsls	r3, r3, #24
 800b262:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b266:	4938      	ldr	r1, [pc, #224]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b268:	4313      	orrs	r3, r2
 800b26a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800b26c:	4b36      	ldr	r3, [pc, #216]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b26e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b270:	4a35      	ldr	r2, [pc, #212]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b272:	f023 0301 	bic.w	r3, r3, #1
 800b276:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b278:	4b33      	ldr	r3, [pc, #204]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b27a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b27c:	4b34      	ldr	r3, [pc, #208]	@ (800b350 <HAL_RCC_OscConfig+0x6cc>)
 800b27e:	4013      	ands	r3, r2
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b284:	00d2      	lsls	r2, r2, #3
 800b286:	4930      	ldr	r1, [pc, #192]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b288:	4313      	orrs	r3, r2
 800b28a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b28c:	4b2e      	ldr	r3, [pc, #184]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b28e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b290:	f023 020c 	bic.w	r2, r3, #12
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b298:	492b      	ldr	r1, [pc, #172]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b29a:	4313      	orrs	r3, r2
 800b29c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b29e:	4b2a      	ldr	r3, [pc, #168]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b2a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2a2:	f023 0202 	bic.w	r2, r3, #2
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2aa:	4927      	ldr	r1, [pc, #156]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b2ac:	4313      	orrs	r3, r2
 800b2ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b2b0:	4b25      	ldr	r3, [pc, #148]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b2b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2b4:	4a24      	ldr	r2, [pc, #144]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b2b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b2ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2bc:	4b22      	ldr	r3, [pc, #136]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b2be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2c0:	4a21      	ldr	r2, [pc, #132]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b2c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b2c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b2c8:	4b1f      	ldr	r3, [pc, #124]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b2ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2cc:	4a1e      	ldr	r2, [pc, #120]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b2ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b2d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800b2d4:	4b1c      	ldr	r3, [pc, #112]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b2d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2d8:	4a1b      	ldr	r2, [pc, #108]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b2da:	f043 0301 	orr.w	r3, r3, #1
 800b2de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b2e0:	4b19      	ldr	r3, [pc, #100]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4a18      	ldr	r2, [pc, #96]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b2e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b2ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2ec:	f7f9 fa1a 	bl	8004724 <HAL_GetTick>
 800b2f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b2f2:	e008      	b.n	800b306 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b2f4:	f7f9 fa16 	bl	8004724 <HAL_GetTick>
 800b2f8:	4602      	mov	r2, r0
 800b2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2fc:	1ad3      	subs	r3, r2, r3
 800b2fe:	2b02      	cmp	r3, #2
 800b300:	d901      	bls.n	800b306 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800b302:	2303      	movs	r3, #3
 800b304:	e090      	b.n	800b428 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b306:	4b10      	ldr	r3, [pc, #64]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d0f0      	beq.n	800b2f4 <HAL_RCC_OscConfig+0x670>
 800b312:	e088      	b.n	800b426 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b314:	4b0c      	ldr	r3, [pc, #48]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	4a0b      	ldr	r2, [pc, #44]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b31a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b31e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b320:	f7f9 fa00 	bl	8004724 <HAL_GetTick>
 800b324:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b326:	e008      	b.n	800b33a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b328:	f7f9 f9fc 	bl	8004724 <HAL_GetTick>
 800b32c:	4602      	mov	r2, r0
 800b32e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b330:	1ad3      	subs	r3, r2, r3
 800b332:	2b02      	cmp	r3, #2
 800b334:	d901      	bls.n	800b33a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800b336:	2303      	movs	r3, #3
 800b338:	e076      	b.n	800b428 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b33a:	4b03      	ldr	r3, [pc, #12]	@ (800b348 <HAL_RCC_OscConfig+0x6c4>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b342:	2b00      	cmp	r3, #0
 800b344:	d1f0      	bne.n	800b328 <HAL_RCC_OscConfig+0x6a4>
 800b346:	e06e      	b.n	800b426 <HAL_RCC_OscConfig+0x7a2>
 800b348:	58024400 	.word	0x58024400
 800b34c:	fffffc0c 	.word	0xfffffc0c
 800b350:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b354:	4b36      	ldr	r3, [pc, #216]	@ (800b430 <HAL_RCC_OscConfig+0x7ac>)
 800b356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b358:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b35a:	4b35      	ldr	r3, [pc, #212]	@ (800b430 <HAL_RCC_OscConfig+0x7ac>)
 800b35c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b35e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b364:	2b01      	cmp	r3, #1
 800b366:	d031      	beq.n	800b3cc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	f003 0203 	and.w	r2, r3, #3
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b372:	429a      	cmp	r2, r3
 800b374:	d12a      	bne.n	800b3cc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	091b      	lsrs	r3, r3, #4
 800b37a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b382:	429a      	cmp	r2, r3
 800b384:	d122      	bne.n	800b3cc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b390:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b392:	429a      	cmp	r2, r3
 800b394:	d11a      	bne.n	800b3cc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	0a5b      	lsrs	r3, r3, #9
 800b39a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3a2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d111      	bne.n	800b3cc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	0c1b      	lsrs	r3, r3, #16
 800b3ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d108      	bne.n	800b3cc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	0e1b      	lsrs	r3, r3, #24
 800b3be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3c6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b3c8:	429a      	cmp	r2, r3
 800b3ca:	d001      	beq.n	800b3d0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	e02b      	b.n	800b428 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b3d0:	4b17      	ldr	r3, [pc, #92]	@ (800b430 <HAL_RCC_OscConfig+0x7ac>)
 800b3d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3d4:	08db      	lsrs	r3, r3, #3
 800b3d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b3da:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b3e0:	693a      	ldr	r2, [r7, #16]
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d01f      	beq.n	800b426 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800b3e6:	4b12      	ldr	r3, [pc, #72]	@ (800b430 <HAL_RCC_OscConfig+0x7ac>)
 800b3e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3ea:	4a11      	ldr	r2, [pc, #68]	@ (800b430 <HAL_RCC_OscConfig+0x7ac>)
 800b3ec:	f023 0301 	bic.w	r3, r3, #1
 800b3f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b3f2:	f7f9 f997 	bl	8004724 <HAL_GetTick>
 800b3f6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b3f8:	bf00      	nop
 800b3fa:	f7f9 f993 	bl	8004724 <HAL_GetTick>
 800b3fe:	4602      	mov	r2, r0
 800b400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b402:	4293      	cmp	r3, r2
 800b404:	d0f9      	beq.n	800b3fa <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b406:	4b0a      	ldr	r3, [pc, #40]	@ (800b430 <HAL_RCC_OscConfig+0x7ac>)
 800b408:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b40a:	4b0a      	ldr	r3, [pc, #40]	@ (800b434 <HAL_RCC_OscConfig+0x7b0>)
 800b40c:	4013      	ands	r3, r2
 800b40e:	687a      	ldr	r2, [r7, #4]
 800b410:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b412:	00d2      	lsls	r2, r2, #3
 800b414:	4906      	ldr	r1, [pc, #24]	@ (800b430 <HAL_RCC_OscConfig+0x7ac>)
 800b416:	4313      	orrs	r3, r2
 800b418:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800b41a:	4b05      	ldr	r3, [pc, #20]	@ (800b430 <HAL_RCC_OscConfig+0x7ac>)
 800b41c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b41e:	4a04      	ldr	r2, [pc, #16]	@ (800b430 <HAL_RCC_OscConfig+0x7ac>)
 800b420:	f043 0301 	orr.w	r3, r3, #1
 800b424:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800b426:	2300      	movs	r3, #0
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3730      	adds	r7, #48	@ 0x30
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	58024400 	.word	0x58024400
 800b434:	ffff0007 	.word	0xffff0007

0800b438 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b086      	sub	sp, #24
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d101      	bne.n	800b44c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b448:	2301      	movs	r3, #1
 800b44a:	e19c      	b.n	800b786 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b44c:	4b8a      	ldr	r3, [pc, #552]	@ (800b678 <HAL_RCC_ClockConfig+0x240>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f003 030f 	and.w	r3, r3, #15
 800b454:	683a      	ldr	r2, [r7, #0]
 800b456:	429a      	cmp	r2, r3
 800b458:	d910      	bls.n	800b47c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b45a:	4b87      	ldr	r3, [pc, #540]	@ (800b678 <HAL_RCC_ClockConfig+0x240>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f023 020f 	bic.w	r2, r3, #15
 800b462:	4985      	ldr	r1, [pc, #532]	@ (800b678 <HAL_RCC_ClockConfig+0x240>)
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	4313      	orrs	r3, r2
 800b468:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b46a:	4b83      	ldr	r3, [pc, #524]	@ (800b678 <HAL_RCC_ClockConfig+0x240>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f003 030f 	and.w	r3, r3, #15
 800b472:	683a      	ldr	r2, [r7, #0]
 800b474:	429a      	cmp	r2, r3
 800b476:	d001      	beq.n	800b47c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b478:	2301      	movs	r3, #1
 800b47a:	e184      	b.n	800b786 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f003 0304 	and.w	r3, r3, #4
 800b484:	2b00      	cmp	r3, #0
 800b486:	d010      	beq.n	800b4aa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	691a      	ldr	r2, [r3, #16]
 800b48c:	4b7b      	ldr	r3, [pc, #492]	@ (800b67c <HAL_RCC_ClockConfig+0x244>)
 800b48e:	699b      	ldr	r3, [r3, #24]
 800b490:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b494:	429a      	cmp	r2, r3
 800b496:	d908      	bls.n	800b4aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b498:	4b78      	ldr	r3, [pc, #480]	@ (800b67c <HAL_RCC_ClockConfig+0x244>)
 800b49a:	699b      	ldr	r3, [r3, #24]
 800b49c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	691b      	ldr	r3, [r3, #16]
 800b4a4:	4975      	ldr	r1, [pc, #468]	@ (800b67c <HAL_RCC_ClockConfig+0x244>)
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f003 0308 	and.w	r3, r3, #8
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d010      	beq.n	800b4d8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	695a      	ldr	r2, [r3, #20]
 800b4ba:	4b70      	ldr	r3, [pc, #448]	@ (800b67c <HAL_RCC_ClockConfig+0x244>)
 800b4bc:	69db      	ldr	r3, [r3, #28]
 800b4be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d908      	bls.n	800b4d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b4c6:	4b6d      	ldr	r3, [pc, #436]	@ (800b67c <HAL_RCC_ClockConfig+0x244>)
 800b4c8:	69db      	ldr	r3, [r3, #28]
 800b4ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	695b      	ldr	r3, [r3, #20]
 800b4d2:	496a      	ldr	r1, [pc, #424]	@ (800b67c <HAL_RCC_ClockConfig+0x244>)
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f003 0310 	and.w	r3, r3, #16
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d010      	beq.n	800b506 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	699a      	ldr	r2, [r3, #24]
 800b4e8:	4b64      	ldr	r3, [pc, #400]	@ (800b67c <HAL_RCC_ClockConfig+0x244>)
 800b4ea:	69db      	ldr	r3, [r3, #28]
 800b4ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d908      	bls.n	800b506 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b4f4:	4b61      	ldr	r3, [pc, #388]	@ (800b67c <HAL_RCC_ClockConfig+0x244>)
 800b4f6:	69db      	ldr	r3, [r3, #28]
 800b4f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	699b      	ldr	r3, [r3, #24]
 800b500:	495e      	ldr	r1, [pc, #376]	@ (800b67c <HAL_RCC_ClockConfig+0x244>)
 800b502:	4313      	orrs	r3, r2
 800b504:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f003 0320 	and.w	r3, r3, #32
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d010      	beq.n	800b534 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	69da      	ldr	r2, [r3, #28]
 800b516:	4b59      	ldr	r3, [pc, #356]	@ (800b67c <HAL_RCC_ClockConfig+0x244>)
 800b518:	6a1b      	ldr	r3, [r3, #32]
 800b51a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b51e:	429a      	cmp	r2, r3
 800b520:	d908      	bls.n	800b534 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b522:	4b56      	ldr	r3, [pc, #344]	@ (800b67c <HAL_RCC_ClockConfig+0x244>)
 800b524:	6a1b      	ldr	r3, [r3, #32]
 800b526:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	69db      	ldr	r3, [r3, #28]
 800b52e:	4953      	ldr	r1, [pc, #332]	@ (800b67c <HAL_RCC_ClockConfig+0x244>)
 800b530:	4313      	orrs	r3, r2
 800b532:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f003 0302 	and.w	r3, r3, #2
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d010      	beq.n	800b562 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	68da      	ldr	r2, [r3, #12]
 800b544:	4b4d      	ldr	r3, [pc, #308]	@ (800b67c <HAL_RCC_ClockConfig+0x244>)
 800b546:	699b      	ldr	r3, [r3, #24]
 800b548:	f003 030f 	and.w	r3, r3, #15
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d908      	bls.n	800b562 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b550:	4b4a      	ldr	r3, [pc, #296]	@ (800b67c <HAL_RCC_ClockConfig+0x244>)
 800b552:	699b      	ldr	r3, [r3, #24]
 800b554:	f023 020f 	bic.w	r2, r3, #15
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	68db      	ldr	r3, [r3, #12]
 800b55c:	4947      	ldr	r1, [pc, #284]	@ (800b67c <HAL_RCC_ClockConfig+0x244>)
 800b55e:	4313      	orrs	r3, r2
 800b560:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f003 0301 	and.w	r3, r3, #1
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d055      	beq.n	800b61a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b56e:	4b43      	ldr	r3, [pc, #268]	@ (800b67c <HAL_RCC_ClockConfig+0x244>)
 800b570:	699b      	ldr	r3, [r3, #24]
 800b572:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	689b      	ldr	r3, [r3, #8]
 800b57a:	4940      	ldr	r1, [pc, #256]	@ (800b67c <HAL_RCC_ClockConfig+0x244>)
 800b57c:	4313      	orrs	r3, r2
 800b57e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	2b02      	cmp	r3, #2
 800b586:	d107      	bne.n	800b598 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b588:	4b3c      	ldr	r3, [pc, #240]	@ (800b67c <HAL_RCC_ClockConfig+0x244>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b590:	2b00      	cmp	r3, #0
 800b592:	d121      	bne.n	800b5d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b594:	2301      	movs	r3, #1
 800b596:	e0f6      	b.n	800b786 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	2b03      	cmp	r3, #3
 800b59e:	d107      	bne.n	800b5b0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b5a0:	4b36      	ldr	r3, [pc, #216]	@ (800b67c <HAL_RCC_ClockConfig+0x244>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d115      	bne.n	800b5d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	e0ea      	b.n	800b786 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	685b      	ldr	r3, [r3, #4]
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	d107      	bne.n	800b5c8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b5b8:	4b30      	ldr	r3, [pc, #192]	@ (800b67c <HAL_RCC_ClockConfig+0x244>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d109      	bne.n	800b5d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	e0de      	b.n	800b786 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b5c8:	4b2c      	ldr	r3, [pc, #176]	@ (800b67c <HAL_RCC_ClockConfig+0x244>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f003 0304 	and.w	r3, r3, #4
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d101      	bne.n	800b5d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	e0d6      	b.n	800b786 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b5d8:	4b28      	ldr	r3, [pc, #160]	@ (800b67c <HAL_RCC_ClockConfig+0x244>)
 800b5da:	691b      	ldr	r3, [r3, #16]
 800b5dc:	f023 0207 	bic.w	r2, r3, #7
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	685b      	ldr	r3, [r3, #4]
 800b5e4:	4925      	ldr	r1, [pc, #148]	@ (800b67c <HAL_RCC_ClockConfig+0x244>)
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5ea:	f7f9 f89b 	bl	8004724 <HAL_GetTick>
 800b5ee:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b5f0:	e00a      	b.n	800b608 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b5f2:	f7f9 f897 	bl	8004724 <HAL_GetTick>
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	1ad3      	subs	r3, r2, r3
 800b5fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b600:	4293      	cmp	r3, r2
 800b602:	d901      	bls.n	800b608 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b604:	2303      	movs	r3, #3
 800b606:	e0be      	b.n	800b786 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b608:	4b1c      	ldr	r3, [pc, #112]	@ (800b67c <HAL_RCC_ClockConfig+0x244>)
 800b60a:	691b      	ldr	r3, [r3, #16]
 800b60c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	685b      	ldr	r3, [r3, #4]
 800b614:	00db      	lsls	r3, r3, #3
 800b616:	429a      	cmp	r2, r3
 800b618:	d1eb      	bne.n	800b5f2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f003 0302 	and.w	r3, r3, #2
 800b622:	2b00      	cmp	r3, #0
 800b624:	d010      	beq.n	800b648 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	68da      	ldr	r2, [r3, #12]
 800b62a:	4b14      	ldr	r3, [pc, #80]	@ (800b67c <HAL_RCC_ClockConfig+0x244>)
 800b62c:	699b      	ldr	r3, [r3, #24]
 800b62e:	f003 030f 	and.w	r3, r3, #15
 800b632:	429a      	cmp	r2, r3
 800b634:	d208      	bcs.n	800b648 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b636:	4b11      	ldr	r3, [pc, #68]	@ (800b67c <HAL_RCC_ClockConfig+0x244>)
 800b638:	699b      	ldr	r3, [r3, #24]
 800b63a:	f023 020f 	bic.w	r2, r3, #15
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	68db      	ldr	r3, [r3, #12]
 800b642:	490e      	ldr	r1, [pc, #56]	@ (800b67c <HAL_RCC_ClockConfig+0x244>)
 800b644:	4313      	orrs	r3, r2
 800b646:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b648:	4b0b      	ldr	r3, [pc, #44]	@ (800b678 <HAL_RCC_ClockConfig+0x240>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f003 030f 	and.w	r3, r3, #15
 800b650:	683a      	ldr	r2, [r7, #0]
 800b652:	429a      	cmp	r2, r3
 800b654:	d214      	bcs.n	800b680 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b656:	4b08      	ldr	r3, [pc, #32]	@ (800b678 <HAL_RCC_ClockConfig+0x240>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f023 020f 	bic.w	r2, r3, #15
 800b65e:	4906      	ldr	r1, [pc, #24]	@ (800b678 <HAL_RCC_ClockConfig+0x240>)
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	4313      	orrs	r3, r2
 800b664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b666:	4b04      	ldr	r3, [pc, #16]	@ (800b678 <HAL_RCC_ClockConfig+0x240>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f003 030f 	and.w	r3, r3, #15
 800b66e:	683a      	ldr	r2, [r7, #0]
 800b670:	429a      	cmp	r2, r3
 800b672:	d005      	beq.n	800b680 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b674:	2301      	movs	r3, #1
 800b676:	e086      	b.n	800b786 <HAL_RCC_ClockConfig+0x34e>
 800b678:	52002000 	.word	0x52002000
 800b67c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f003 0304 	and.w	r3, r3, #4
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d010      	beq.n	800b6ae <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	691a      	ldr	r2, [r3, #16]
 800b690:	4b3f      	ldr	r3, [pc, #252]	@ (800b790 <HAL_RCC_ClockConfig+0x358>)
 800b692:	699b      	ldr	r3, [r3, #24]
 800b694:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b698:	429a      	cmp	r2, r3
 800b69a:	d208      	bcs.n	800b6ae <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b69c:	4b3c      	ldr	r3, [pc, #240]	@ (800b790 <HAL_RCC_ClockConfig+0x358>)
 800b69e:	699b      	ldr	r3, [r3, #24]
 800b6a0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	691b      	ldr	r3, [r3, #16]
 800b6a8:	4939      	ldr	r1, [pc, #228]	@ (800b790 <HAL_RCC_ClockConfig+0x358>)
 800b6aa:	4313      	orrs	r3, r2
 800b6ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f003 0308 	and.w	r3, r3, #8
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d010      	beq.n	800b6dc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	695a      	ldr	r2, [r3, #20]
 800b6be:	4b34      	ldr	r3, [pc, #208]	@ (800b790 <HAL_RCC_ClockConfig+0x358>)
 800b6c0:	69db      	ldr	r3, [r3, #28]
 800b6c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d208      	bcs.n	800b6dc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b6ca:	4b31      	ldr	r3, [pc, #196]	@ (800b790 <HAL_RCC_ClockConfig+0x358>)
 800b6cc:	69db      	ldr	r3, [r3, #28]
 800b6ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	695b      	ldr	r3, [r3, #20]
 800b6d6:	492e      	ldr	r1, [pc, #184]	@ (800b790 <HAL_RCC_ClockConfig+0x358>)
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f003 0310 	and.w	r3, r3, #16
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d010      	beq.n	800b70a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	699a      	ldr	r2, [r3, #24]
 800b6ec:	4b28      	ldr	r3, [pc, #160]	@ (800b790 <HAL_RCC_ClockConfig+0x358>)
 800b6ee:	69db      	ldr	r3, [r3, #28]
 800b6f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d208      	bcs.n	800b70a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b6f8:	4b25      	ldr	r3, [pc, #148]	@ (800b790 <HAL_RCC_ClockConfig+0x358>)
 800b6fa:	69db      	ldr	r3, [r3, #28]
 800b6fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	699b      	ldr	r3, [r3, #24]
 800b704:	4922      	ldr	r1, [pc, #136]	@ (800b790 <HAL_RCC_ClockConfig+0x358>)
 800b706:	4313      	orrs	r3, r2
 800b708:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f003 0320 	and.w	r3, r3, #32
 800b712:	2b00      	cmp	r3, #0
 800b714:	d010      	beq.n	800b738 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	69da      	ldr	r2, [r3, #28]
 800b71a:	4b1d      	ldr	r3, [pc, #116]	@ (800b790 <HAL_RCC_ClockConfig+0x358>)
 800b71c:	6a1b      	ldr	r3, [r3, #32]
 800b71e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b722:	429a      	cmp	r2, r3
 800b724:	d208      	bcs.n	800b738 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b726:	4b1a      	ldr	r3, [pc, #104]	@ (800b790 <HAL_RCC_ClockConfig+0x358>)
 800b728:	6a1b      	ldr	r3, [r3, #32]
 800b72a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	69db      	ldr	r3, [r3, #28]
 800b732:	4917      	ldr	r1, [pc, #92]	@ (800b790 <HAL_RCC_ClockConfig+0x358>)
 800b734:	4313      	orrs	r3, r2
 800b736:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b738:	f000 f834 	bl	800b7a4 <HAL_RCC_GetSysClockFreq>
 800b73c:	4602      	mov	r2, r0
 800b73e:	4b14      	ldr	r3, [pc, #80]	@ (800b790 <HAL_RCC_ClockConfig+0x358>)
 800b740:	699b      	ldr	r3, [r3, #24]
 800b742:	0a1b      	lsrs	r3, r3, #8
 800b744:	f003 030f 	and.w	r3, r3, #15
 800b748:	4912      	ldr	r1, [pc, #72]	@ (800b794 <HAL_RCC_ClockConfig+0x35c>)
 800b74a:	5ccb      	ldrb	r3, [r1, r3]
 800b74c:	f003 031f 	and.w	r3, r3, #31
 800b750:	fa22 f303 	lsr.w	r3, r2, r3
 800b754:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b756:	4b0e      	ldr	r3, [pc, #56]	@ (800b790 <HAL_RCC_ClockConfig+0x358>)
 800b758:	699b      	ldr	r3, [r3, #24]
 800b75a:	f003 030f 	and.w	r3, r3, #15
 800b75e:	4a0d      	ldr	r2, [pc, #52]	@ (800b794 <HAL_RCC_ClockConfig+0x35c>)
 800b760:	5cd3      	ldrb	r3, [r2, r3]
 800b762:	f003 031f 	and.w	r3, r3, #31
 800b766:	693a      	ldr	r2, [r7, #16]
 800b768:	fa22 f303 	lsr.w	r3, r2, r3
 800b76c:	4a0a      	ldr	r2, [pc, #40]	@ (800b798 <HAL_RCC_ClockConfig+0x360>)
 800b76e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b770:	4a0a      	ldr	r2, [pc, #40]	@ (800b79c <HAL_RCC_ClockConfig+0x364>)
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b776:	4b0a      	ldr	r3, [pc, #40]	@ (800b7a0 <HAL_RCC_ClockConfig+0x368>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	4618      	mov	r0, r3
 800b77c:	f7f8 ff88 	bl	8004690 <HAL_InitTick>
 800b780:	4603      	mov	r3, r0
 800b782:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b784:	7bfb      	ldrb	r3, [r7, #15]
}
 800b786:	4618      	mov	r0, r3
 800b788:	3718      	adds	r7, #24
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}
 800b78e:	bf00      	nop
 800b790:	58024400 	.word	0x58024400
 800b794:	08014c0c 	.word	0x08014c0c
 800b798:	2400003c 	.word	0x2400003c
 800b79c:	24000038 	.word	0x24000038
 800b7a0:	24000040 	.word	0x24000040

0800b7a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b089      	sub	sp, #36	@ 0x24
 800b7a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b7aa:	4bb3      	ldr	r3, [pc, #716]	@ (800ba78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7ac:	691b      	ldr	r3, [r3, #16]
 800b7ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b7b2:	2b18      	cmp	r3, #24
 800b7b4:	f200 8155 	bhi.w	800ba62 <HAL_RCC_GetSysClockFreq+0x2be>
 800b7b8:	a201      	add	r2, pc, #4	@ (adr r2, 800b7c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b7ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7be:	bf00      	nop
 800b7c0:	0800b825 	.word	0x0800b825
 800b7c4:	0800ba63 	.word	0x0800ba63
 800b7c8:	0800ba63 	.word	0x0800ba63
 800b7cc:	0800ba63 	.word	0x0800ba63
 800b7d0:	0800ba63 	.word	0x0800ba63
 800b7d4:	0800ba63 	.word	0x0800ba63
 800b7d8:	0800ba63 	.word	0x0800ba63
 800b7dc:	0800ba63 	.word	0x0800ba63
 800b7e0:	0800b84b 	.word	0x0800b84b
 800b7e4:	0800ba63 	.word	0x0800ba63
 800b7e8:	0800ba63 	.word	0x0800ba63
 800b7ec:	0800ba63 	.word	0x0800ba63
 800b7f0:	0800ba63 	.word	0x0800ba63
 800b7f4:	0800ba63 	.word	0x0800ba63
 800b7f8:	0800ba63 	.word	0x0800ba63
 800b7fc:	0800ba63 	.word	0x0800ba63
 800b800:	0800b851 	.word	0x0800b851
 800b804:	0800ba63 	.word	0x0800ba63
 800b808:	0800ba63 	.word	0x0800ba63
 800b80c:	0800ba63 	.word	0x0800ba63
 800b810:	0800ba63 	.word	0x0800ba63
 800b814:	0800ba63 	.word	0x0800ba63
 800b818:	0800ba63 	.word	0x0800ba63
 800b81c:	0800ba63 	.word	0x0800ba63
 800b820:	0800b857 	.word	0x0800b857
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b824:	4b94      	ldr	r3, [pc, #592]	@ (800ba78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f003 0320 	and.w	r3, r3, #32
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d009      	beq.n	800b844 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b830:	4b91      	ldr	r3, [pc, #580]	@ (800ba78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	08db      	lsrs	r3, r3, #3
 800b836:	f003 0303 	and.w	r3, r3, #3
 800b83a:	4a90      	ldr	r2, [pc, #576]	@ (800ba7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b83c:	fa22 f303 	lsr.w	r3, r2, r3
 800b840:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b842:	e111      	b.n	800ba68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b844:	4b8d      	ldr	r3, [pc, #564]	@ (800ba7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b846:	61bb      	str	r3, [r7, #24]
      break;
 800b848:	e10e      	b.n	800ba68 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b84a:	4b8d      	ldr	r3, [pc, #564]	@ (800ba80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b84c:	61bb      	str	r3, [r7, #24]
      break;
 800b84e:	e10b      	b.n	800ba68 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b850:	4b8c      	ldr	r3, [pc, #560]	@ (800ba84 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b852:	61bb      	str	r3, [r7, #24]
      break;
 800b854:	e108      	b.n	800ba68 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b856:	4b88      	ldr	r3, [pc, #544]	@ (800ba78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b85a:	f003 0303 	and.w	r3, r3, #3
 800b85e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b860:	4b85      	ldr	r3, [pc, #532]	@ (800ba78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b864:	091b      	lsrs	r3, r3, #4
 800b866:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b86a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b86c:	4b82      	ldr	r3, [pc, #520]	@ (800ba78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b86e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b870:	f003 0301 	and.w	r3, r3, #1
 800b874:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b876:	4b80      	ldr	r3, [pc, #512]	@ (800ba78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b87a:	08db      	lsrs	r3, r3, #3
 800b87c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b880:	68fa      	ldr	r2, [r7, #12]
 800b882:	fb02 f303 	mul.w	r3, r2, r3
 800b886:	ee07 3a90 	vmov	s15, r3
 800b88a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b88e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	2b00      	cmp	r3, #0
 800b896:	f000 80e1 	beq.w	800ba5c <HAL_RCC_GetSysClockFreq+0x2b8>
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	2b02      	cmp	r3, #2
 800b89e:	f000 8083 	beq.w	800b9a8 <HAL_RCC_GetSysClockFreq+0x204>
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	2b02      	cmp	r3, #2
 800b8a6:	f200 80a1 	bhi.w	800b9ec <HAL_RCC_GetSysClockFreq+0x248>
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d003      	beq.n	800b8b8 <HAL_RCC_GetSysClockFreq+0x114>
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	2b01      	cmp	r3, #1
 800b8b4:	d056      	beq.n	800b964 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b8b6:	e099      	b.n	800b9ec <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8b8:	4b6f      	ldr	r3, [pc, #444]	@ (800ba78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f003 0320 	and.w	r3, r3, #32
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d02d      	beq.n	800b920 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b8c4:	4b6c      	ldr	r3, [pc, #432]	@ (800ba78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	08db      	lsrs	r3, r3, #3
 800b8ca:	f003 0303 	and.w	r3, r3, #3
 800b8ce:	4a6b      	ldr	r2, [pc, #428]	@ (800ba7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b8d0:	fa22 f303 	lsr.w	r3, r2, r3
 800b8d4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	ee07 3a90 	vmov	s15, r3
 800b8dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	ee07 3a90 	vmov	s15, r3
 800b8e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8ee:	4b62      	ldr	r3, [pc, #392]	@ (800ba78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b8f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8f6:	ee07 3a90 	vmov	s15, r3
 800b8fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8fe:	ed97 6a02 	vldr	s12, [r7, #8]
 800b902:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800ba88 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b90a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b90e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b91a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b91e:	e087      	b.n	800ba30 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	ee07 3a90 	vmov	s15, r3
 800b926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b92a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800ba8c <HAL_RCC_GetSysClockFreq+0x2e8>
 800b92e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b932:	4b51      	ldr	r3, [pc, #324]	@ (800ba78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b93a:	ee07 3a90 	vmov	s15, r3
 800b93e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b942:	ed97 6a02 	vldr	s12, [r7, #8]
 800b946:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800ba88 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b94a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b94e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b952:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b95a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b95e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b962:	e065      	b.n	800ba30 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	ee07 3a90 	vmov	s15, r3
 800b96a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b96e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800ba90 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b976:	4b40      	ldr	r3, [pc, #256]	@ (800ba78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b97a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b97e:	ee07 3a90 	vmov	s15, r3
 800b982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b986:	ed97 6a02 	vldr	s12, [r7, #8]
 800b98a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800ba88 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b98e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b996:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b99a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b99e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b9a6:	e043      	b.n	800ba30 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	ee07 3a90 	vmov	s15, r3
 800b9ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9b2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800ba94 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b9b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9ba:	4b2f      	ldr	r3, [pc, #188]	@ (800ba78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b9bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9c2:	ee07 3a90 	vmov	s15, r3
 800b9c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800b9ce:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800ba88 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b9d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b9de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b9ea:	e021      	b.n	800ba30 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	ee07 3a90 	vmov	s15, r3
 800b9f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9f6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800ba90 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b9fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9fe:	4b1e      	ldr	r3, [pc, #120]	@ (800ba78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba06:	ee07 3a90 	vmov	s15, r3
 800ba0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba0e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ba12:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800ba88 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ba16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ba2e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ba30:	4b11      	ldr	r3, [pc, #68]	@ (800ba78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba34:	0a5b      	lsrs	r3, r3, #9
 800ba36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba3a:	3301      	adds	r3, #1
 800ba3c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	ee07 3a90 	vmov	s15, r3
 800ba44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ba48:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba54:	ee17 3a90 	vmov	r3, s15
 800ba58:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800ba5a:	e005      	b.n	800ba68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	61bb      	str	r3, [r7, #24]
      break;
 800ba60:	e002      	b.n	800ba68 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800ba62:	4b07      	ldr	r3, [pc, #28]	@ (800ba80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ba64:	61bb      	str	r3, [r7, #24]
      break;
 800ba66:	bf00      	nop
  }

  return sysclockfreq;
 800ba68:	69bb      	ldr	r3, [r7, #24]
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3724      	adds	r7, #36	@ 0x24
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr
 800ba76:	bf00      	nop
 800ba78:	58024400 	.word	0x58024400
 800ba7c:	03d09000 	.word	0x03d09000
 800ba80:	003d0900 	.word	0x003d0900
 800ba84:	007a1200 	.word	0x007a1200
 800ba88:	46000000 	.word	0x46000000
 800ba8c:	4c742400 	.word	0x4c742400
 800ba90:	4a742400 	.word	0x4a742400
 800ba94:	4af42400 	.word	0x4af42400

0800ba98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ba9e:	f7ff fe81 	bl	800b7a4 <HAL_RCC_GetSysClockFreq>
 800baa2:	4602      	mov	r2, r0
 800baa4:	4b10      	ldr	r3, [pc, #64]	@ (800bae8 <HAL_RCC_GetHCLKFreq+0x50>)
 800baa6:	699b      	ldr	r3, [r3, #24]
 800baa8:	0a1b      	lsrs	r3, r3, #8
 800baaa:	f003 030f 	and.w	r3, r3, #15
 800baae:	490f      	ldr	r1, [pc, #60]	@ (800baec <HAL_RCC_GetHCLKFreq+0x54>)
 800bab0:	5ccb      	ldrb	r3, [r1, r3]
 800bab2:	f003 031f 	and.w	r3, r3, #31
 800bab6:	fa22 f303 	lsr.w	r3, r2, r3
 800baba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800babc:	4b0a      	ldr	r3, [pc, #40]	@ (800bae8 <HAL_RCC_GetHCLKFreq+0x50>)
 800babe:	699b      	ldr	r3, [r3, #24]
 800bac0:	f003 030f 	and.w	r3, r3, #15
 800bac4:	4a09      	ldr	r2, [pc, #36]	@ (800baec <HAL_RCC_GetHCLKFreq+0x54>)
 800bac6:	5cd3      	ldrb	r3, [r2, r3]
 800bac8:	f003 031f 	and.w	r3, r3, #31
 800bacc:	687a      	ldr	r2, [r7, #4]
 800bace:	fa22 f303 	lsr.w	r3, r2, r3
 800bad2:	4a07      	ldr	r2, [pc, #28]	@ (800baf0 <HAL_RCC_GetHCLKFreq+0x58>)
 800bad4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800bad6:	4a07      	ldr	r2, [pc, #28]	@ (800baf4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800badc:	4b04      	ldr	r3, [pc, #16]	@ (800baf0 <HAL_RCC_GetHCLKFreq+0x58>)
 800bade:	681b      	ldr	r3, [r3, #0]
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3708      	adds	r7, #8
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}
 800bae8:	58024400 	.word	0x58024400
 800baec:	08014c0c 	.word	0x08014c0c
 800baf0:	2400003c 	.word	0x2400003c
 800baf4:	24000038 	.word	0x24000038

0800baf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800bafc:	f7ff ffcc 	bl	800ba98 <HAL_RCC_GetHCLKFreq>
 800bb00:	4602      	mov	r2, r0
 800bb02:	4b06      	ldr	r3, [pc, #24]	@ (800bb1c <HAL_RCC_GetPCLK1Freq+0x24>)
 800bb04:	69db      	ldr	r3, [r3, #28]
 800bb06:	091b      	lsrs	r3, r3, #4
 800bb08:	f003 0307 	and.w	r3, r3, #7
 800bb0c:	4904      	ldr	r1, [pc, #16]	@ (800bb20 <HAL_RCC_GetPCLK1Freq+0x28>)
 800bb0e:	5ccb      	ldrb	r3, [r1, r3]
 800bb10:	f003 031f 	and.w	r3, r3, #31
 800bb14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	bd80      	pop	{r7, pc}
 800bb1c:	58024400 	.word	0x58024400
 800bb20:	08014c0c 	.word	0x08014c0c

0800bb24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800bb28:	f7ff ffb6 	bl	800ba98 <HAL_RCC_GetHCLKFreq>
 800bb2c:	4602      	mov	r2, r0
 800bb2e:	4b06      	ldr	r3, [pc, #24]	@ (800bb48 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bb30:	69db      	ldr	r3, [r3, #28]
 800bb32:	0a1b      	lsrs	r3, r3, #8
 800bb34:	f003 0307 	and.w	r3, r3, #7
 800bb38:	4904      	ldr	r1, [pc, #16]	@ (800bb4c <HAL_RCC_GetPCLK2Freq+0x28>)
 800bb3a:	5ccb      	ldrb	r3, [r1, r3]
 800bb3c:	f003 031f 	and.w	r3, r3, #31
 800bb40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	58024400 	.word	0x58024400
 800bb4c:	08014c0c 	.word	0x08014c0c

0800bb50 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bb50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb54:	b0c6      	sub	sp, #280	@ 0x118
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bb62:	2300      	movs	r3, #0
 800bb64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bb68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb70:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800bb74:	2500      	movs	r5, #0
 800bb76:	ea54 0305 	orrs.w	r3, r4, r5
 800bb7a:	d049      	beq.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800bb7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb82:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bb86:	d02f      	beq.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800bb88:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bb8c:	d828      	bhi.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800bb8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bb92:	d01a      	beq.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800bb94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bb98:	d822      	bhi.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d003      	beq.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800bb9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bba2:	d007      	beq.n	800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800bba4:	e01c      	b.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bba6:	4bab      	ldr	r3, [pc, #684]	@ (800be54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbaa:	4aaa      	ldr	r2, [pc, #680]	@ (800be54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bbac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bbb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bbb2:	e01a      	b.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bbb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbb8:	3308      	adds	r3, #8
 800bbba:	2102      	movs	r1, #2
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f002 fa49 	bl	800e054 <RCCEx_PLL2_Config>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bbc8:	e00f      	b.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bbca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbce:	3328      	adds	r3, #40	@ 0x28
 800bbd0:	2102      	movs	r1, #2
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f002 faf0 	bl	800e1b8 <RCCEx_PLL3_Config>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bbde:	e004      	b.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bbe6:	e000      	b.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800bbe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d10a      	bne.n	800bc08 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800bbf2:	4b98      	ldr	r3, [pc, #608]	@ (800be54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bbf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbf6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800bbfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc00:	4a94      	ldr	r2, [pc, #592]	@ (800be54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bc02:	430b      	orrs	r3, r1
 800bc04:	6513      	str	r3, [r2, #80]	@ 0x50
 800bc06:	e003      	b.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bc10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc18:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800bc1c:	f04f 0900 	mov.w	r9, #0
 800bc20:	ea58 0309 	orrs.w	r3, r8, r9
 800bc24:	d047      	beq.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800bc26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc2c:	2b04      	cmp	r3, #4
 800bc2e:	d82a      	bhi.n	800bc86 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800bc30:	a201      	add	r2, pc, #4	@ (adr r2, 800bc38 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800bc32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc36:	bf00      	nop
 800bc38:	0800bc4d 	.word	0x0800bc4d
 800bc3c:	0800bc5b 	.word	0x0800bc5b
 800bc40:	0800bc71 	.word	0x0800bc71
 800bc44:	0800bc8f 	.word	0x0800bc8f
 800bc48:	0800bc8f 	.word	0x0800bc8f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc4c:	4b81      	ldr	r3, [pc, #516]	@ (800be54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bc4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc50:	4a80      	ldr	r2, [pc, #512]	@ (800be54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bc52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bc58:	e01a      	b.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc5e:	3308      	adds	r3, #8
 800bc60:	2100      	movs	r1, #0
 800bc62:	4618      	mov	r0, r3
 800bc64:	f002 f9f6 	bl	800e054 <RCCEx_PLL2_Config>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bc6e:	e00f      	b.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bc70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc74:	3328      	adds	r3, #40	@ 0x28
 800bc76:	2100      	movs	r1, #0
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f002 fa9d 	bl	800e1b8 <RCCEx_PLL3_Config>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bc84:	e004      	b.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc86:	2301      	movs	r3, #1
 800bc88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bc8c:	e000      	b.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800bc8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d10a      	bne.n	800bcae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bc98:	4b6e      	ldr	r3, [pc, #440]	@ (800be54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bc9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc9c:	f023 0107 	bic.w	r1, r3, #7
 800bca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bca6:	4a6b      	ldr	r2, [pc, #428]	@ (800be54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bca8:	430b      	orrs	r3, r1
 800bcaa:	6513      	str	r3, [r2, #80]	@ 0x50
 800bcac:	e003      	b.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bcb2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800bcb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcbe:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800bcc2:	f04f 0b00 	mov.w	fp, #0
 800bcc6:	ea5a 030b 	orrs.w	r3, sl, fp
 800bcca:	d05b      	beq.n	800bd84 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800bccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bcd4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800bcd8:	d03b      	beq.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800bcda:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800bcde:	d834      	bhi.n	800bd4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bce0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bce4:	d037      	beq.n	800bd56 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800bce6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bcea:	d82e      	bhi.n	800bd4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bcec:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bcf0:	d033      	beq.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800bcf2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bcf6:	d828      	bhi.n	800bd4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bcf8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bcfc:	d01a      	beq.n	800bd34 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800bcfe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bd02:	d822      	bhi.n	800bd4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d003      	beq.n	800bd10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800bd08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bd0c:	d007      	beq.n	800bd1e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800bd0e:	e01c      	b.n	800bd4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd10:	4b50      	ldr	r3, [pc, #320]	@ (800be54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bd12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd14:	4a4f      	ldr	r2, [pc, #316]	@ (800be54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bd16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bd1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bd1c:	e01e      	b.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd22:	3308      	adds	r3, #8
 800bd24:	2100      	movs	r1, #0
 800bd26:	4618      	mov	r0, r3
 800bd28:	f002 f994 	bl	800e054 <RCCEx_PLL2_Config>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bd32:	e013      	b.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bd34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd38:	3328      	adds	r3, #40	@ 0x28
 800bd3a:	2100      	movs	r1, #0
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f002 fa3b 	bl	800e1b8 <RCCEx_PLL3_Config>
 800bd42:	4603      	mov	r3, r0
 800bd44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bd48:	e008      	b.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bd50:	e004      	b.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bd52:	bf00      	nop
 800bd54:	e002      	b.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bd56:	bf00      	nop
 800bd58:	e000      	b.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bd5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d10b      	bne.n	800bd7c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800bd64:	4b3b      	ldr	r3, [pc, #236]	@ (800be54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bd66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd68:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800bd6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bd74:	4a37      	ldr	r2, [pc, #220]	@ (800be54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bd76:	430b      	orrs	r3, r1
 800bd78:	6593      	str	r3, [r2, #88]	@ 0x58
 800bd7a:	e003      	b.n	800bd84 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bd84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800bd90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bd94:	2300      	movs	r3, #0
 800bd96:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800bd9a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800bd9e:	460b      	mov	r3, r1
 800bda0:	4313      	orrs	r3, r2
 800bda2:	d05d      	beq.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800bda4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bda8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bdac:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800bdb0:	d03b      	beq.n	800be2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800bdb2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800bdb6:	d834      	bhi.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bdb8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bdbc:	d037      	beq.n	800be2e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800bdbe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bdc2:	d82e      	bhi.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bdc4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bdc8:	d033      	beq.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800bdca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bdce:	d828      	bhi.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bdd0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bdd4:	d01a      	beq.n	800be0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800bdd6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bdda:	d822      	bhi.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d003      	beq.n	800bde8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800bde0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bde4:	d007      	beq.n	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800bde6:	e01c      	b.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bde8:	4b1a      	ldr	r3, [pc, #104]	@ (800be54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bdea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdec:	4a19      	ldr	r2, [pc, #100]	@ (800be54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bdee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bdf2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bdf4:	e01e      	b.n	800be34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bdf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdfa:	3308      	adds	r3, #8
 800bdfc:	2100      	movs	r1, #0
 800bdfe:	4618      	mov	r0, r3
 800be00:	f002 f928 	bl	800e054 <RCCEx_PLL2_Config>
 800be04:	4603      	mov	r3, r0
 800be06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800be0a:	e013      	b.n	800be34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800be0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be10:	3328      	adds	r3, #40	@ 0x28
 800be12:	2100      	movs	r1, #0
 800be14:	4618      	mov	r0, r3
 800be16:	f002 f9cf 	bl	800e1b8 <RCCEx_PLL3_Config>
 800be1a:	4603      	mov	r3, r0
 800be1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800be20:	e008      	b.n	800be34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800be22:	2301      	movs	r3, #1
 800be24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800be28:	e004      	b.n	800be34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800be2a:	bf00      	nop
 800be2c:	e002      	b.n	800be34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800be2e:	bf00      	nop
 800be30:	e000      	b.n	800be34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800be32:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d10d      	bne.n	800be58 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800be3c:	4b05      	ldr	r3, [pc, #20]	@ (800be54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800be3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be40:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800be44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800be4c:	4a01      	ldr	r2, [pc, #4]	@ (800be54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800be4e:	430b      	orrs	r3, r1
 800be50:	6593      	str	r3, [r2, #88]	@ 0x58
 800be52:	e005      	b.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800be54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800be60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be68:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800be6c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800be70:	2300      	movs	r3, #0
 800be72:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800be76:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800be7a:	460b      	mov	r3, r1
 800be7c:	4313      	orrs	r3, r2
 800be7e:	d03a      	beq.n	800bef6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800be80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be86:	2b30      	cmp	r3, #48	@ 0x30
 800be88:	d01f      	beq.n	800beca <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800be8a:	2b30      	cmp	r3, #48	@ 0x30
 800be8c:	d819      	bhi.n	800bec2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800be8e:	2b20      	cmp	r3, #32
 800be90:	d00c      	beq.n	800beac <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800be92:	2b20      	cmp	r3, #32
 800be94:	d815      	bhi.n	800bec2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800be96:	2b00      	cmp	r3, #0
 800be98:	d019      	beq.n	800bece <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800be9a:	2b10      	cmp	r3, #16
 800be9c:	d111      	bne.n	800bec2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be9e:	4baa      	ldr	r3, [pc, #680]	@ (800c148 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bea2:	4aa9      	ldr	r2, [pc, #676]	@ (800c148 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bea8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800beaa:	e011      	b.n	800bed0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800beac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800beb0:	3308      	adds	r3, #8
 800beb2:	2102      	movs	r1, #2
 800beb4:	4618      	mov	r0, r3
 800beb6:	f002 f8cd 	bl	800e054 <RCCEx_PLL2_Config>
 800beba:	4603      	mov	r3, r0
 800bebc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800bec0:	e006      	b.n	800bed0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bec2:	2301      	movs	r3, #1
 800bec4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bec8:	e002      	b.n	800bed0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800beca:	bf00      	nop
 800becc:	e000      	b.n	800bed0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800bece:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bed0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d10a      	bne.n	800beee <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800bed8:	4b9b      	ldr	r3, [pc, #620]	@ (800c148 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800beda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bedc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800bee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bee6:	4a98      	ldr	r2, [pc, #608]	@ (800c148 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bee8:	430b      	orrs	r3, r1
 800beea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800beec:	e003      	b.n	800bef6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800beee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bef2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800befa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befe:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800bf02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bf06:	2300      	movs	r3, #0
 800bf08:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bf0c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800bf10:	460b      	mov	r3, r1
 800bf12:	4313      	orrs	r3, r2
 800bf14:	d051      	beq.n	800bfba <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800bf16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bf1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bf20:	d035      	beq.n	800bf8e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800bf22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bf26:	d82e      	bhi.n	800bf86 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bf28:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bf2c:	d031      	beq.n	800bf92 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800bf2e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bf32:	d828      	bhi.n	800bf86 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bf34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bf38:	d01a      	beq.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800bf3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bf3e:	d822      	bhi.n	800bf86 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d003      	beq.n	800bf4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800bf44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf48:	d007      	beq.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800bf4a:	e01c      	b.n	800bf86 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf4c:	4b7e      	ldr	r3, [pc, #504]	@ (800c148 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bf4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf50:	4a7d      	ldr	r2, [pc, #500]	@ (800c148 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bf52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bf56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bf58:	e01c      	b.n	800bf94 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bf5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf5e:	3308      	adds	r3, #8
 800bf60:	2100      	movs	r1, #0
 800bf62:	4618      	mov	r0, r3
 800bf64:	f002 f876 	bl	800e054 <RCCEx_PLL2_Config>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bf6e:	e011      	b.n	800bf94 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bf70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf74:	3328      	adds	r3, #40	@ 0x28
 800bf76:	2100      	movs	r1, #0
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f002 f91d 	bl	800e1b8 <RCCEx_PLL3_Config>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bf84:	e006      	b.n	800bf94 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf86:	2301      	movs	r3, #1
 800bf88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bf8c:	e002      	b.n	800bf94 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800bf8e:	bf00      	nop
 800bf90:	e000      	b.n	800bf94 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800bf92:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d10a      	bne.n	800bfb2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bf9c:	4b6a      	ldr	r3, [pc, #424]	@ (800c148 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bf9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bfa0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800bfa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bfaa:	4a67      	ldr	r2, [pc, #412]	@ (800c148 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bfac:	430b      	orrs	r3, r1
 800bfae:	6513      	str	r3, [r2, #80]	@ 0x50
 800bfb0:	e003      	b.n	800bfba <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bfb6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bfba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800bfc6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bfca:	2300      	movs	r3, #0
 800bfcc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bfd0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	4313      	orrs	r3, r2
 800bfd8:	d053      	beq.n	800c082 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800bfda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bfe0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bfe4:	d033      	beq.n	800c04e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800bfe6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bfea:	d82c      	bhi.n	800c046 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bfec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bff0:	d02f      	beq.n	800c052 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800bff2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bff6:	d826      	bhi.n	800c046 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bff8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bffc:	d02b      	beq.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800bffe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c002:	d820      	bhi.n	800c046 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c004:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c008:	d012      	beq.n	800c030 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800c00a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c00e:	d81a      	bhi.n	800c046 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c010:	2b00      	cmp	r3, #0
 800c012:	d022      	beq.n	800c05a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800c014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c018:	d115      	bne.n	800c046 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c01a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c01e:	3308      	adds	r3, #8
 800c020:	2101      	movs	r1, #1
 800c022:	4618      	mov	r0, r3
 800c024:	f002 f816 	bl	800e054 <RCCEx_PLL2_Config>
 800c028:	4603      	mov	r3, r0
 800c02a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c02e:	e015      	b.n	800c05c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c034:	3328      	adds	r3, #40	@ 0x28
 800c036:	2101      	movs	r1, #1
 800c038:	4618      	mov	r0, r3
 800c03a:	f002 f8bd 	bl	800e1b8 <RCCEx_PLL3_Config>
 800c03e:	4603      	mov	r3, r0
 800c040:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c044:	e00a      	b.n	800c05c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c046:	2301      	movs	r3, #1
 800c048:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c04c:	e006      	b.n	800c05c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c04e:	bf00      	nop
 800c050:	e004      	b.n	800c05c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c052:	bf00      	nop
 800c054:	e002      	b.n	800c05c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c056:	bf00      	nop
 800c058:	e000      	b.n	800c05c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c05a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c05c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c060:	2b00      	cmp	r3, #0
 800c062:	d10a      	bne.n	800c07a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c064:	4b38      	ldr	r3, [pc, #224]	@ (800c148 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c066:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c068:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800c06c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c072:	4a35      	ldr	r2, [pc, #212]	@ (800c148 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c074:	430b      	orrs	r3, r1
 800c076:	6513      	str	r3, [r2, #80]	@ 0x50
 800c078:	e003      	b.n	800c082 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c07a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c07e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c082:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800c08e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c092:	2300      	movs	r3, #0
 800c094:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c098:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c09c:	460b      	mov	r3, r1
 800c09e:	4313      	orrs	r3, r2
 800c0a0:	d058      	beq.n	800c154 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800c0a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c0aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c0ae:	d033      	beq.n	800c118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800c0b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c0b4:	d82c      	bhi.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c0b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0ba:	d02f      	beq.n	800c11c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800c0bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0c0:	d826      	bhi.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c0c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c0c6:	d02b      	beq.n	800c120 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800c0c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c0cc:	d820      	bhi.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c0ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c0d2:	d012      	beq.n	800c0fa <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800c0d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c0d8:	d81a      	bhi.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d022      	beq.n	800c124 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800c0de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c0e2:	d115      	bne.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c0e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0e8:	3308      	adds	r3, #8
 800c0ea:	2101      	movs	r1, #1
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f001 ffb1 	bl	800e054 <RCCEx_PLL2_Config>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c0f8:	e015      	b.n	800c126 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c0fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0fe:	3328      	adds	r3, #40	@ 0x28
 800c100:	2101      	movs	r1, #1
 800c102:	4618      	mov	r0, r3
 800c104:	f002 f858 	bl	800e1b8 <RCCEx_PLL3_Config>
 800c108:	4603      	mov	r3, r0
 800c10a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c10e:	e00a      	b.n	800c126 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800c110:	2301      	movs	r3, #1
 800c112:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c116:	e006      	b.n	800c126 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c118:	bf00      	nop
 800c11a:	e004      	b.n	800c126 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c11c:	bf00      	nop
 800c11e:	e002      	b.n	800c126 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c120:	bf00      	nop
 800c122:	e000      	b.n	800c126 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c124:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c126:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d10e      	bne.n	800c14c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c12e:	4b06      	ldr	r3, [pc, #24]	@ (800c148 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c132:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c136:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c13a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c13e:	4a02      	ldr	r2, [pc, #8]	@ (800c148 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c140:	430b      	orrs	r3, r1
 800c142:	6593      	str	r3, [r2, #88]	@ 0x58
 800c144:	e006      	b.n	800c154 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800c146:	bf00      	nop
 800c148:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c14c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c150:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800c160:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c164:	2300      	movs	r3, #0
 800c166:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c16a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800c16e:	460b      	mov	r3, r1
 800c170:	4313      	orrs	r3, r2
 800c172:	d037      	beq.n	800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800c174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c178:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c17a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c17e:	d00e      	beq.n	800c19e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800c180:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c184:	d816      	bhi.n	800c1b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800c186:	2b00      	cmp	r3, #0
 800c188:	d018      	beq.n	800c1bc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800c18a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c18e:	d111      	bne.n	800c1b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c190:	4bc4      	ldr	r3, [pc, #784]	@ (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c194:	4ac3      	ldr	r2, [pc, #780]	@ (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c196:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c19a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c19c:	e00f      	b.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c19e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1a2:	3308      	adds	r3, #8
 800c1a4:	2101      	movs	r1, #1
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f001 ff54 	bl	800e054 <RCCEx_PLL2_Config>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c1b2:	e004      	b.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c1ba:	e000      	b.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800c1bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d10a      	bne.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c1c6:	4bb7      	ldr	r3, [pc, #732]	@ (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c1c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c1ca:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c1ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c1d4:	4ab3      	ldr	r2, [pc, #716]	@ (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c1d6:	430b      	orrs	r3, r1
 800c1d8:	6513      	str	r3, [r2, #80]	@ 0x50
 800c1da:	e003      	b.n	800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c1e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c1e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ec:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800c1f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c1fa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800c1fe:	460b      	mov	r3, r1
 800c200:	4313      	orrs	r3, r2
 800c202:	d039      	beq.n	800c278 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800c204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c208:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c20a:	2b03      	cmp	r3, #3
 800c20c:	d81c      	bhi.n	800c248 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800c20e:	a201      	add	r2, pc, #4	@ (adr r2, 800c214 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800c210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c214:	0800c251 	.word	0x0800c251
 800c218:	0800c225 	.word	0x0800c225
 800c21c:	0800c233 	.word	0x0800c233
 800c220:	0800c251 	.word	0x0800c251
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c224:	4b9f      	ldr	r3, [pc, #636]	@ (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c228:	4a9e      	ldr	r2, [pc, #632]	@ (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c22a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c22e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c230:	e00f      	b.n	800c252 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c232:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c236:	3308      	adds	r3, #8
 800c238:	2102      	movs	r1, #2
 800c23a:	4618      	mov	r0, r3
 800c23c:	f001 ff0a 	bl	800e054 <RCCEx_PLL2_Config>
 800c240:	4603      	mov	r3, r0
 800c242:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c246:	e004      	b.n	800c252 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c248:	2301      	movs	r3, #1
 800c24a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c24e:	e000      	b.n	800c252 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800c250:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c252:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c256:	2b00      	cmp	r3, #0
 800c258:	d10a      	bne.n	800c270 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c25a:	4b92      	ldr	r3, [pc, #584]	@ (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c25c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c25e:	f023 0103 	bic.w	r1, r3, #3
 800c262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c266:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c268:	4a8e      	ldr	r2, [pc, #568]	@ (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c26a:	430b      	orrs	r3, r1
 800c26c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c26e:	e003      	b.n	800c278 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c270:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c274:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c280:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800c284:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c288:	2300      	movs	r3, #0
 800c28a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c28e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c292:	460b      	mov	r3, r1
 800c294:	4313      	orrs	r3, r2
 800c296:	f000 8099 	beq.w	800c3cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c29a:	4b83      	ldr	r3, [pc, #524]	@ (800c4a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	4a82      	ldr	r2, [pc, #520]	@ (800c4a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c2a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c2a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c2a6:	f7f8 fa3d 	bl	8004724 <HAL_GetTick>
 800c2aa:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c2ae:	e00b      	b.n	800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c2b0:	f7f8 fa38 	bl	8004724 <HAL_GetTick>
 800c2b4:	4602      	mov	r2, r0
 800c2b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c2ba:	1ad3      	subs	r3, r2, r3
 800c2bc:	2b64      	cmp	r3, #100	@ 0x64
 800c2be:	d903      	bls.n	800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800c2c0:	2303      	movs	r3, #3
 800c2c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c2c6:	e005      	b.n	800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c2c8:	4b77      	ldr	r3, [pc, #476]	@ (800c4a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d0ed      	beq.n	800c2b0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800c2d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d173      	bne.n	800c3c4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c2dc:	4b71      	ldr	r3, [pc, #452]	@ (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c2de:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c2e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c2e8:	4053      	eors	r3, r2
 800c2ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d015      	beq.n	800c31e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c2f2:	4b6c      	ldr	r3, [pc, #432]	@ (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c2f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c2f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c2fa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c2fe:	4b69      	ldr	r3, [pc, #420]	@ (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c302:	4a68      	ldr	r2, [pc, #416]	@ (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c308:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c30a:	4b66      	ldr	r3, [pc, #408]	@ (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c30c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c30e:	4a65      	ldr	r2, [pc, #404]	@ (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c310:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c314:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c316:	4a63      	ldr	r2, [pc, #396]	@ (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c318:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c31c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c31e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c322:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c326:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c32a:	d118      	bne.n	800c35e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c32c:	f7f8 f9fa 	bl	8004724 <HAL_GetTick>
 800c330:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c334:	e00d      	b.n	800c352 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c336:	f7f8 f9f5 	bl	8004724 <HAL_GetTick>
 800c33a:	4602      	mov	r2, r0
 800c33c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c340:	1ad2      	subs	r2, r2, r3
 800c342:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c346:	429a      	cmp	r2, r3
 800c348:	d903      	bls.n	800c352 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800c34a:	2303      	movs	r3, #3
 800c34c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800c350:	e005      	b.n	800c35e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c352:	4b54      	ldr	r3, [pc, #336]	@ (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c356:	f003 0302 	and.w	r3, r3, #2
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d0eb      	beq.n	800c336 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800c35e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c362:	2b00      	cmp	r3, #0
 800c364:	d129      	bne.n	800c3ba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c36a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c36e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c372:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c376:	d10e      	bne.n	800c396 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800c378:	4b4a      	ldr	r3, [pc, #296]	@ (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c37a:	691b      	ldr	r3, [r3, #16]
 800c37c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800c380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c384:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c388:	091a      	lsrs	r2, r3, #4
 800c38a:	4b48      	ldr	r3, [pc, #288]	@ (800c4ac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800c38c:	4013      	ands	r3, r2
 800c38e:	4a45      	ldr	r2, [pc, #276]	@ (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c390:	430b      	orrs	r3, r1
 800c392:	6113      	str	r3, [r2, #16]
 800c394:	e005      	b.n	800c3a2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800c396:	4b43      	ldr	r3, [pc, #268]	@ (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c398:	691b      	ldr	r3, [r3, #16]
 800c39a:	4a42      	ldr	r2, [pc, #264]	@ (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c39c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c3a0:	6113      	str	r3, [r2, #16]
 800c3a2:	4b40      	ldr	r3, [pc, #256]	@ (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c3a4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800c3a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c3ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c3b2:	4a3c      	ldr	r2, [pc, #240]	@ (800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c3b4:	430b      	orrs	r3, r1
 800c3b6:	6713      	str	r3, [r2, #112]	@ 0x70
 800c3b8:	e008      	b.n	800c3cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c3ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c3be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800c3c2:	e003      	b.n	800c3cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c3c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c3cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d4:	f002 0301 	and.w	r3, r2, #1
 800c3d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c3dc:	2300      	movs	r3, #0
 800c3de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c3e2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800c3e6:	460b      	mov	r3, r1
 800c3e8:	4313      	orrs	r3, r2
 800c3ea:	f000 808f 	beq.w	800c50c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c3ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c3f4:	2b28      	cmp	r3, #40	@ 0x28
 800c3f6:	d871      	bhi.n	800c4dc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800c3f8:	a201      	add	r2, pc, #4	@ (adr r2, 800c400 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800c3fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3fe:	bf00      	nop
 800c400:	0800c4e5 	.word	0x0800c4e5
 800c404:	0800c4dd 	.word	0x0800c4dd
 800c408:	0800c4dd 	.word	0x0800c4dd
 800c40c:	0800c4dd 	.word	0x0800c4dd
 800c410:	0800c4dd 	.word	0x0800c4dd
 800c414:	0800c4dd 	.word	0x0800c4dd
 800c418:	0800c4dd 	.word	0x0800c4dd
 800c41c:	0800c4dd 	.word	0x0800c4dd
 800c420:	0800c4b1 	.word	0x0800c4b1
 800c424:	0800c4dd 	.word	0x0800c4dd
 800c428:	0800c4dd 	.word	0x0800c4dd
 800c42c:	0800c4dd 	.word	0x0800c4dd
 800c430:	0800c4dd 	.word	0x0800c4dd
 800c434:	0800c4dd 	.word	0x0800c4dd
 800c438:	0800c4dd 	.word	0x0800c4dd
 800c43c:	0800c4dd 	.word	0x0800c4dd
 800c440:	0800c4c7 	.word	0x0800c4c7
 800c444:	0800c4dd 	.word	0x0800c4dd
 800c448:	0800c4dd 	.word	0x0800c4dd
 800c44c:	0800c4dd 	.word	0x0800c4dd
 800c450:	0800c4dd 	.word	0x0800c4dd
 800c454:	0800c4dd 	.word	0x0800c4dd
 800c458:	0800c4dd 	.word	0x0800c4dd
 800c45c:	0800c4dd 	.word	0x0800c4dd
 800c460:	0800c4e5 	.word	0x0800c4e5
 800c464:	0800c4dd 	.word	0x0800c4dd
 800c468:	0800c4dd 	.word	0x0800c4dd
 800c46c:	0800c4dd 	.word	0x0800c4dd
 800c470:	0800c4dd 	.word	0x0800c4dd
 800c474:	0800c4dd 	.word	0x0800c4dd
 800c478:	0800c4dd 	.word	0x0800c4dd
 800c47c:	0800c4dd 	.word	0x0800c4dd
 800c480:	0800c4e5 	.word	0x0800c4e5
 800c484:	0800c4dd 	.word	0x0800c4dd
 800c488:	0800c4dd 	.word	0x0800c4dd
 800c48c:	0800c4dd 	.word	0x0800c4dd
 800c490:	0800c4dd 	.word	0x0800c4dd
 800c494:	0800c4dd 	.word	0x0800c4dd
 800c498:	0800c4dd 	.word	0x0800c4dd
 800c49c:	0800c4dd 	.word	0x0800c4dd
 800c4a0:	0800c4e5 	.word	0x0800c4e5
 800c4a4:	58024400 	.word	0x58024400
 800c4a8:	58024800 	.word	0x58024800
 800c4ac:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c4b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4b4:	3308      	adds	r3, #8
 800c4b6:	2101      	movs	r1, #1
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f001 fdcb 	bl	800e054 <RCCEx_PLL2_Config>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c4c4:	e00f      	b.n	800c4e6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c4c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4ca:	3328      	adds	r3, #40	@ 0x28
 800c4cc:	2101      	movs	r1, #1
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f001 fe72 	bl	800e1b8 <RCCEx_PLL3_Config>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c4da:	e004      	b.n	800c4e6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c4dc:	2301      	movs	r3, #1
 800c4de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c4e2:	e000      	b.n	800c4e6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800c4e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c4e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d10a      	bne.n	800c504 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c4ee:	4bbf      	ldr	r3, [pc, #764]	@ (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c4f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4f2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800c4f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c4fc:	4abb      	ldr	r2, [pc, #748]	@ (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c4fe:	430b      	orrs	r3, r1
 800c500:	6553      	str	r3, [r2, #84]	@ 0x54
 800c502:	e003      	b.n	800c50c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c504:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c508:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c50c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c514:	f002 0302 	and.w	r3, r2, #2
 800c518:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c51c:	2300      	movs	r3, #0
 800c51e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c522:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800c526:	460b      	mov	r3, r1
 800c528:	4313      	orrs	r3, r2
 800c52a:	d041      	beq.n	800c5b0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c52c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c532:	2b05      	cmp	r3, #5
 800c534:	d824      	bhi.n	800c580 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800c536:	a201      	add	r2, pc, #4	@ (adr r2, 800c53c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800c538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c53c:	0800c589 	.word	0x0800c589
 800c540:	0800c555 	.word	0x0800c555
 800c544:	0800c56b 	.word	0x0800c56b
 800c548:	0800c589 	.word	0x0800c589
 800c54c:	0800c589 	.word	0x0800c589
 800c550:	0800c589 	.word	0x0800c589
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c558:	3308      	adds	r3, #8
 800c55a:	2101      	movs	r1, #1
 800c55c:	4618      	mov	r0, r3
 800c55e:	f001 fd79 	bl	800e054 <RCCEx_PLL2_Config>
 800c562:	4603      	mov	r3, r0
 800c564:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c568:	e00f      	b.n	800c58a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c56a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c56e:	3328      	adds	r3, #40	@ 0x28
 800c570:	2101      	movs	r1, #1
 800c572:	4618      	mov	r0, r3
 800c574:	f001 fe20 	bl	800e1b8 <RCCEx_PLL3_Config>
 800c578:	4603      	mov	r3, r0
 800c57a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c57e:	e004      	b.n	800c58a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c580:	2301      	movs	r3, #1
 800c582:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c586:	e000      	b.n	800c58a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800c588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c58a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d10a      	bne.n	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c592:	4b96      	ldr	r3, [pc, #600]	@ (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c596:	f023 0107 	bic.w	r1, r3, #7
 800c59a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c59e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c5a0:	4a92      	ldr	r2, [pc, #584]	@ (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c5a2:	430b      	orrs	r3, r1
 800c5a4:	6553      	str	r3, [r2, #84]	@ 0x54
 800c5a6:	e003      	b.n	800c5b0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c5b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b8:	f002 0304 	and.w	r3, r2, #4
 800c5bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c5c6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c5ca:	460b      	mov	r3, r1
 800c5cc:	4313      	orrs	r3, r2
 800c5ce:	d044      	beq.n	800c65a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c5d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5d8:	2b05      	cmp	r3, #5
 800c5da:	d825      	bhi.n	800c628 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800c5dc:	a201      	add	r2, pc, #4	@ (adr r2, 800c5e4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800c5de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5e2:	bf00      	nop
 800c5e4:	0800c631 	.word	0x0800c631
 800c5e8:	0800c5fd 	.word	0x0800c5fd
 800c5ec:	0800c613 	.word	0x0800c613
 800c5f0:	0800c631 	.word	0x0800c631
 800c5f4:	0800c631 	.word	0x0800c631
 800c5f8:	0800c631 	.word	0x0800c631
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c5fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c600:	3308      	adds	r3, #8
 800c602:	2101      	movs	r1, #1
 800c604:	4618      	mov	r0, r3
 800c606:	f001 fd25 	bl	800e054 <RCCEx_PLL2_Config>
 800c60a:	4603      	mov	r3, r0
 800c60c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c610:	e00f      	b.n	800c632 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c612:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c616:	3328      	adds	r3, #40	@ 0x28
 800c618:	2101      	movs	r1, #1
 800c61a:	4618      	mov	r0, r3
 800c61c:	f001 fdcc 	bl	800e1b8 <RCCEx_PLL3_Config>
 800c620:	4603      	mov	r3, r0
 800c622:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c626:	e004      	b.n	800c632 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c628:	2301      	movs	r3, #1
 800c62a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c62e:	e000      	b.n	800c632 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800c630:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c632:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c636:	2b00      	cmp	r3, #0
 800c638:	d10b      	bne.n	800c652 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c63a:	4b6c      	ldr	r3, [pc, #432]	@ (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c63c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c63e:	f023 0107 	bic.w	r1, r3, #7
 800c642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c64a:	4a68      	ldr	r2, [pc, #416]	@ (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c64c:	430b      	orrs	r3, r1
 800c64e:	6593      	str	r3, [r2, #88]	@ 0x58
 800c650:	e003      	b.n	800c65a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c652:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c656:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c65a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c662:	f002 0320 	and.w	r3, r2, #32
 800c666:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c66a:	2300      	movs	r3, #0
 800c66c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c670:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800c674:	460b      	mov	r3, r1
 800c676:	4313      	orrs	r3, r2
 800c678:	d055      	beq.n	800c726 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c67a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c67e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c682:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c686:	d033      	beq.n	800c6f0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800c688:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c68c:	d82c      	bhi.n	800c6e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c68e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c692:	d02f      	beq.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c694:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c698:	d826      	bhi.n	800c6e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c69a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c69e:	d02b      	beq.n	800c6f8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c6a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c6a4:	d820      	bhi.n	800c6e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c6a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c6aa:	d012      	beq.n	800c6d2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800c6ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c6b0:	d81a      	bhi.n	800c6e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d022      	beq.n	800c6fc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c6b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c6ba:	d115      	bne.n	800c6e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c6bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6c0:	3308      	adds	r3, #8
 800c6c2:	2100      	movs	r1, #0
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f001 fcc5 	bl	800e054 <RCCEx_PLL2_Config>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c6d0:	e015      	b.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c6d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6d6:	3328      	adds	r3, #40	@ 0x28
 800c6d8:	2102      	movs	r1, #2
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f001 fd6c 	bl	800e1b8 <RCCEx_PLL3_Config>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c6e6:	e00a      	b.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c6ee:	e006      	b.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c6f0:	bf00      	nop
 800c6f2:	e004      	b.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c6f4:	bf00      	nop
 800c6f6:	e002      	b.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c6f8:	bf00      	nop
 800c6fa:	e000      	b.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c6fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c6fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c702:	2b00      	cmp	r3, #0
 800c704:	d10b      	bne.n	800c71e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c706:	4b39      	ldr	r3, [pc, #228]	@ (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c70a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c70e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c712:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c716:	4a35      	ldr	r2, [pc, #212]	@ (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c718:	430b      	orrs	r3, r1
 800c71a:	6553      	str	r3, [r2, #84]	@ 0x54
 800c71c:	e003      	b.n	800c726 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c71e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c722:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800c732:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c736:	2300      	movs	r3, #0
 800c738:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c73c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800c740:	460b      	mov	r3, r1
 800c742:	4313      	orrs	r3, r2
 800c744:	d058      	beq.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c74a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c74e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c752:	d033      	beq.n	800c7bc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800c754:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c758:	d82c      	bhi.n	800c7b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c75a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c75e:	d02f      	beq.n	800c7c0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c760:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c764:	d826      	bhi.n	800c7b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c766:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c76a:	d02b      	beq.n	800c7c4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c76c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c770:	d820      	bhi.n	800c7b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c772:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c776:	d012      	beq.n	800c79e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800c778:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c77c:	d81a      	bhi.n	800c7b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d022      	beq.n	800c7c8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c782:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c786:	d115      	bne.n	800c7b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c78c:	3308      	adds	r3, #8
 800c78e:	2100      	movs	r1, #0
 800c790:	4618      	mov	r0, r3
 800c792:	f001 fc5f 	bl	800e054 <RCCEx_PLL2_Config>
 800c796:	4603      	mov	r3, r0
 800c798:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c79c:	e015      	b.n	800c7ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c79e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7a2:	3328      	adds	r3, #40	@ 0x28
 800c7a4:	2102      	movs	r1, #2
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f001 fd06 	bl	800e1b8 <RCCEx_PLL3_Config>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c7b2:	e00a      	b.n	800c7ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c7ba:	e006      	b.n	800c7ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c7bc:	bf00      	nop
 800c7be:	e004      	b.n	800c7ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c7c0:	bf00      	nop
 800c7c2:	e002      	b.n	800c7ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c7c4:	bf00      	nop
 800c7c6:	e000      	b.n	800c7ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c7c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d10e      	bne.n	800c7f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c7d2:	4b06      	ldr	r3, [pc, #24]	@ (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c7d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7d6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800c7da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c7e2:	4a02      	ldr	r2, [pc, #8]	@ (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c7e4:	430b      	orrs	r3, r1
 800c7e6:	6593      	str	r3, [r2, #88]	@ 0x58
 800c7e8:	e006      	b.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800c7ea:	bf00      	nop
 800c7ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c7f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c800:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800c804:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c808:	2300      	movs	r3, #0
 800c80a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c80e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800c812:	460b      	mov	r3, r1
 800c814:	4313      	orrs	r3, r2
 800c816:	d055      	beq.n	800c8c4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c81c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c820:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c824:	d033      	beq.n	800c88e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800c826:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c82a:	d82c      	bhi.n	800c886 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c82c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c830:	d02f      	beq.n	800c892 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c832:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c836:	d826      	bhi.n	800c886 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c838:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c83c:	d02b      	beq.n	800c896 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c83e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c842:	d820      	bhi.n	800c886 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c844:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c848:	d012      	beq.n	800c870 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800c84a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c84e:	d81a      	bhi.n	800c886 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c850:	2b00      	cmp	r3, #0
 800c852:	d022      	beq.n	800c89a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c854:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c858:	d115      	bne.n	800c886 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c85a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c85e:	3308      	adds	r3, #8
 800c860:	2100      	movs	r1, #0
 800c862:	4618      	mov	r0, r3
 800c864:	f001 fbf6 	bl	800e054 <RCCEx_PLL2_Config>
 800c868:	4603      	mov	r3, r0
 800c86a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c86e:	e015      	b.n	800c89c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c874:	3328      	adds	r3, #40	@ 0x28
 800c876:	2102      	movs	r1, #2
 800c878:	4618      	mov	r0, r3
 800c87a:	f001 fc9d 	bl	800e1b8 <RCCEx_PLL3_Config>
 800c87e:	4603      	mov	r3, r0
 800c880:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c884:	e00a      	b.n	800c89c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c886:	2301      	movs	r3, #1
 800c888:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c88c:	e006      	b.n	800c89c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c88e:	bf00      	nop
 800c890:	e004      	b.n	800c89c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c892:	bf00      	nop
 800c894:	e002      	b.n	800c89c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c896:	bf00      	nop
 800c898:	e000      	b.n	800c89c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c89a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c89c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d10b      	bne.n	800c8bc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c8a4:	4ba0      	ldr	r3, [pc, #640]	@ (800cb28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c8a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8a8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800c8ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c8b4:	4a9c      	ldr	r2, [pc, #624]	@ (800cb28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c8b6:	430b      	orrs	r3, r1
 800c8b8:	6593      	str	r3, [r2, #88]	@ 0x58
 800c8ba:	e003      	b.n	800c8c4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c8c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800c8c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8cc:	f002 0308 	and.w	r3, r2, #8
 800c8d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c8da:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800c8de:	460b      	mov	r3, r1
 800c8e0:	4313      	orrs	r3, r2
 800c8e2:	d01e      	beq.n	800c922 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800c8e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c8ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c8f0:	d10c      	bne.n	800c90c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c8f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8f6:	3328      	adds	r3, #40	@ 0x28
 800c8f8:	2102      	movs	r1, #2
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f001 fc5c 	bl	800e1b8 <RCCEx_PLL3_Config>
 800c900:	4603      	mov	r3, r0
 800c902:	2b00      	cmp	r3, #0
 800c904:	d002      	beq.n	800c90c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800c906:	2301      	movs	r3, #1
 800c908:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800c90c:	4b86      	ldr	r3, [pc, #536]	@ (800cb28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c90e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c910:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c918:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c91c:	4a82      	ldr	r2, [pc, #520]	@ (800cb28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c91e:	430b      	orrs	r3, r1
 800c920:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c92a:	f002 0310 	and.w	r3, r2, #16
 800c92e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c932:	2300      	movs	r3, #0
 800c934:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c938:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800c93c:	460b      	mov	r3, r1
 800c93e:	4313      	orrs	r3, r2
 800c940:	d01e      	beq.n	800c980 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c946:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c94a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c94e:	d10c      	bne.n	800c96a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c954:	3328      	adds	r3, #40	@ 0x28
 800c956:	2102      	movs	r1, #2
 800c958:	4618      	mov	r0, r3
 800c95a:	f001 fc2d 	bl	800e1b8 <RCCEx_PLL3_Config>
 800c95e:	4603      	mov	r3, r0
 800c960:	2b00      	cmp	r3, #0
 800c962:	d002      	beq.n	800c96a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800c964:	2301      	movs	r3, #1
 800c966:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c96a:	4b6f      	ldr	r3, [pc, #444]	@ (800cb28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c96c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c96e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c972:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c976:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c97a:	4a6b      	ldr	r2, [pc, #428]	@ (800cb28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c97c:	430b      	orrs	r3, r1
 800c97e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c988:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800c98c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c98e:	2300      	movs	r3, #0
 800c990:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c992:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800c996:	460b      	mov	r3, r1
 800c998:	4313      	orrs	r3, r2
 800c99a:	d03e      	beq.n	800ca1a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c99c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c9a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c9a8:	d022      	beq.n	800c9f0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c9aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c9ae:	d81b      	bhi.n	800c9e8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d003      	beq.n	800c9bc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800c9b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c9b8:	d00b      	beq.n	800c9d2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800c9ba:	e015      	b.n	800c9e8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c9bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9c0:	3308      	adds	r3, #8
 800c9c2:	2100      	movs	r1, #0
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f001 fb45 	bl	800e054 <RCCEx_PLL2_Config>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c9d0:	e00f      	b.n	800c9f2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c9d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9d6:	3328      	adds	r3, #40	@ 0x28
 800c9d8:	2102      	movs	r1, #2
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f001 fbec 	bl	800e1b8 <RCCEx_PLL3_Config>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c9e6:	e004      	b.n	800c9f2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c9ee:	e000      	b.n	800c9f2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800c9f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c9f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d10b      	bne.n	800ca12 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c9fa:	4b4b      	ldr	r3, [pc, #300]	@ (800cb28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c9fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c9fe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800ca02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ca0a:	4a47      	ldr	r2, [pc, #284]	@ (800cb28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ca0c:	430b      	orrs	r3, r1
 800ca0e:	6593      	str	r3, [r2, #88]	@ 0x58
 800ca10:	e003      	b.n	800ca1a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca16:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ca1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca22:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800ca26:	673b      	str	r3, [r7, #112]	@ 0x70
 800ca28:	2300      	movs	r3, #0
 800ca2a:	677b      	str	r3, [r7, #116]	@ 0x74
 800ca2c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800ca30:	460b      	mov	r3, r1
 800ca32:	4313      	orrs	r3, r2
 800ca34:	d03b      	beq.n	800caae <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ca36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ca3e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ca42:	d01f      	beq.n	800ca84 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800ca44:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ca48:	d818      	bhi.n	800ca7c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800ca4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ca4e:	d003      	beq.n	800ca58 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800ca50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ca54:	d007      	beq.n	800ca66 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800ca56:	e011      	b.n	800ca7c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca58:	4b33      	ldr	r3, [pc, #204]	@ (800cb28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ca5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca5c:	4a32      	ldr	r2, [pc, #200]	@ (800cb28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ca5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ca62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ca64:	e00f      	b.n	800ca86 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ca66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca6a:	3328      	adds	r3, #40	@ 0x28
 800ca6c:	2101      	movs	r1, #1
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f001 fba2 	bl	800e1b8 <RCCEx_PLL3_Config>
 800ca74:	4603      	mov	r3, r0
 800ca76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800ca7a:	e004      	b.n	800ca86 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ca7c:	2301      	movs	r3, #1
 800ca7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ca82:	e000      	b.n	800ca86 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800ca84:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d10b      	bne.n	800caa6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ca8e:	4b26      	ldr	r3, [pc, #152]	@ (800cb28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ca90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca92:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ca96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ca9e:	4a22      	ldr	r2, [pc, #136]	@ (800cb28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800caa0:	430b      	orrs	r3, r1
 800caa2:	6553      	str	r3, [r2, #84]	@ 0x54
 800caa4:	e003      	b.n	800caae <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800caa6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800caaa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800caae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800caba:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cabc:	2300      	movs	r3, #0
 800cabe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cac0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800cac4:	460b      	mov	r3, r1
 800cac6:	4313      	orrs	r3, r2
 800cac8:	d034      	beq.n	800cb34 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800caca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d003      	beq.n	800cadc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800cad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cad8:	d007      	beq.n	800caea <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800cada:	e011      	b.n	800cb00 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cadc:	4b12      	ldr	r3, [pc, #72]	@ (800cb28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cae0:	4a11      	ldr	r2, [pc, #68]	@ (800cb28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cae2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cae6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800cae8:	e00e      	b.n	800cb08 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800caea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caee:	3308      	adds	r3, #8
 800caf0:	2102      	movs	r1, #2
 800caf2:	4618      	mov	r0, r3
 800caf4:	f001 faae 	bl	800e054 <RCCEx_PLL2_Config>
 800caf8:	4603      	mov	r3, r0
 800cafa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800cafe:	e003      	b.n	800cb08 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800cb00:	2301      	movs	r3, #1
 800cb02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cb06:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d10d      	bne.n	800cb2c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800cb10:	4b05      	ldr	r3, [pc, #20]	@ (800cb28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cb12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cb14:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cb18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb1e:	4a02      	ldr	r2, [pc, #8]	@ (800cb28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cb20:	430b      	orrs	r3, r1
 800cb22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800cb24:	e006      	b.n	800cb34 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800cb26:	bf00      	nop
 800cb28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800cb34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb3c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800cb40:	663b      	str	r3, [r7, #96]	@ 0x60
 800cb42:	2300      	movs	r3, #0
 800cb44:	667b      	str	r3, [r7, #100]	@ 0x64
 800cb46:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800cb4a:	460b      	mov	r3, r1
 800cb4c:	4313      	orrs	r3, r2
 800cb4e:	d00c      	beq.n	800cb6a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800cb50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb54:	3328      	adds	r3, #40	@ 0x28
 800cb56:	2102      	movs	r1, #2
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f001 fb2d 	bl	800e1b8 <RCCEx_PLL3_Config>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d002      	beq.n	800cb6a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800cb64:	2301      	movs	r3, #1
 800cb66:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800cb6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb72:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800cb76:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cb78:	2300      	movs	r3, #0
 800cb7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cb7c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800cb80:	460b      	mov	r3, r1
 800cb82:	4313      	orrs	r3, r2
 800cb84:	d036      	beq.n	800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800cb86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cb8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cb90:	d018      	beq.n	800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800cb92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cb96:	d811      	bhi.n	800cbbc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800cb98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb9c:	d014      	beq.n	800cbc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800cb9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cba2:	d80b      	bhi.n	800cbbc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d011      	beq.n	800cbcc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800cba8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cbac:	d106      	bne.n	800cbbc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cbae:	4bb7      	ldr	r3, [pc, #732]	@ (800ce8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cbb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbb2:	4ab6      	ldr	r2, [pc, #728]	@ (800ce8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cbb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cbb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800cbba:	e008      	b.n	800cbce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cbc2:	e004      	b.n	800cbce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800cbc4:	bf00      	nop
 800cbc6:	e002      	b.n	800cbce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800cbc8:	bf00      	nop
 800cbca:	e000      	b.n	800cbce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800cbcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cbce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d10a      	bne.n	800cbec <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cbd6:	4bad      	ldr	r3, [pc, #692]	@ (800ce8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cbd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cbda:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800cbde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbe2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cbe4:	4aa9      	ldr	r2, [pc, #676]	@ (800ce8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cbe6:	430b      	orrs	r3, r1
 800cbe8:	6553      	str	r3, [r2, #84]	@ 0x54
 800cbea:	e003      	b.n	800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cbf0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cbf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbfc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800cc00:	653b      	str	r3, [r7, #80]	@ 0x50
 800cc02:	2300      	movs	r3, #0
 800cc04:	657b      	str	r3, [r7, #84]	@ 0x54
 800cc06:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800cc0a:	460b      	mov	r3, r1
 800cc0c:	4313      	orrs	r3, r2
 800cc0e:	d009      	beq.n	800cc24 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cc10:	4b9e      	ldr	r3, [pc, #632]	@ (800ce8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cc12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc14:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cc18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc1e:	4a9b      	ldr	r2, [pc, #620]	@ (800ce8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cc20:	430b      	orrs	r3, r1
 800cc22:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800cc24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc2c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800cc30:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cc32:	2300      	movs	r3, #0
 800cc34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cc36:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800cc3a:	460b      	mov	r3, r1
 800cc3c:	4313      	orrs	r3, r2
 800cc3e:	d009      	beq.n	800cc54 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800cc40:	4b92      	ldr	r3, [pc, #584]	@ (800ce8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cc42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc44:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800cc48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cc4e:	4a8f      	ldr	r2, [pc, #572]	@ (800ce8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cc50:	430b      	orrs	r3, r1
 800cc52:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800cc54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc5c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800cc60:	643b      	str	r3, [r7, #64]	@ 0x40
 800cc62:	2300      	movs	r3, #0
 800cc64:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc66:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800cc6a:	460b      	mov	r3, r1
 800cc6c:	4313      	orrs	r3, r2
 800cc6e:	d00e      	beq.n	800cc8e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cc70:	4b86      	ldr	r3, [pc, #536]	@ (800ce8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cc72:	691b      	ldr	r3, [r3, #16]
 800cc74:	4a85      	ldr	r2, [pc, #532]	@ (800ce8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cc76:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800cc7a:	6113      	str	r3, [r2, #16]
 800cc7c:	4b83      	ldr	r3, [pc, #524]	@ (800ce8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cc7e:	6919      	ldr	r1, [r3, #16]
 800cc80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800cc88:	4a80      	ldr	r2, [pc, #512]	@ (800ce8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cc8a:	430b      	orrs	r3, r1
 800cc8c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800cc8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc96:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800cc9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cca0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800cca4:	460b      	mov	r3, r1
 800cca6:	4313      	orrs	r3, r2
 800cca8:	d009      	beq.n	800ccbe <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ccaa:	4b78      	ldr	r3, [pc, #480]	@ (800ce8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ccac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ccae:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800ccb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ccb8:	4a74      	ldr	r2, [pc, #464]	@ (800ce8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ccba:	430b      	orrs	r3, r1
 800ccbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ccbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800ccca:	633b      	str	r3, [r7, #48]	@ 0x30
 800cccc:	2300      	movs	r3, #0
 800ccce:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccd0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800ccd4:	460b      	mov	r3, r1
 800ccd6:	4313      	orrs	r3, r2
 800ccd8:	d00a      	beq.n	800ccf0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ccda:	4b6c      	ldr	r3, [pc, #432]	@ (800ce8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ccdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ccde:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800cce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ccea:	4a68      	ldr	r2, [pc, #416]	@ (800ce8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ccec:	430b      	orrs	r3, r1
 800ccee:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ccf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf8:	2100      	movs	r1, #0
 800ccfa:	62b9      	str	r1, [r7, #40]	@ 0x28
 800ccfc:	f003 0301 	and.w	r3, r3, #1
 800cd00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cd02:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800cd06:	460b      	mov	r3, r1
 800cd08:	4313      	orrs	r3, r2
 800cd0a:	d011      	beq.n	800cd30 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cd0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd10:	3308      	adds	r3, #8
 800cd12:	2100      	movs	r1, #0
 800cd14:	4618      	mov	r0, r3
 800cd16:	f001 f99d 	bl	800e054 <RCCEx_PLL2_Config>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cd20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d003      	beq.n	800cd30 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800cd30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd38:	2100      	movs	r1, #0
 800cd3a:	6239      	str	r1, [r7, #32]
 800cd3c:	f003 0302 	and.w	r3, r3, #2
 800cd40:	627b      	str	r3, [r7, #36]	@ 0x24
 800cd42:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800cd46:	460b      	mov	r3, r1
 800cd48:	4313      	orrs	r3, r2
 800cd4a:	d011      	beq.n	800cd70 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cd4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd50:	3308      	adds	r3, #8
 800cd52:	2101      	movs	r1, #1
 800cd54:	4618      	mov	r0, r3
 800cd56:	f001 f97d 	bl	800e054 <RCCEx_PLL2_Config>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cd60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d003      	beq.n	800cd70 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800cd70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd78:	2100      	movs	r1, #0
 800cd7a:	61b9      	str	r1, [r7, #24]
 800cd7c:	f003 0304 	and.w	r3, r3, #4
 800cd80:	61fb      	str	r3, [r7, #28]
 800cd82:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800cd86:	460b      	mov	r3, r1
 800cd88:	4313      	orrs	r3, r2
 800cd8a:	d011      	beq.n	800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cd8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd90:	3308      	adds	r3, #8
 800cd92:	2102      	movs	r1, #2
 800cd94:	4618      	mov	r0, r3
 800cd96:	f001 f95d 	bl	800e054 <RCCEx_PLL2_Config>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cda0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d003      	beq.n	800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cda8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cdac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800cdb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb8:	2100      	movs	r1, #0
 800cdba:	6139      	str	r1, [r7, #16]
 800cdbc:	f003 0308 	and.w	r3, r3, #8
 800cdc0:	617b      	str	r3, [r7, #20]
 800cdc2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800cdc6:	460b      	mov	r3, r1
 800cdc8:	4313      	orrs	r3, r2
 800cdca:	d011      	beq.n	800cdf0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cdcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdd0:	3328      	adds	r3, #40	@ 0x28
 800cdd2:	2100      	movs	r1, #0
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f001 f9ef 	bl	800e1b8 <RCCEx_PLL3_Config>
 800cdda:	4603      	mov	r3, r0
 800cddc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800cde0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d003      	beq.n	800cdf0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cde8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cdec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800cdf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdf8:	2100      	movs	r1, #0
 800cdfa:	60b9      	str	r1, [r7, #8]
 800cdfc:	f003 0310 	and.w	r3, r3, #16
 800ce00:	60fb      	str	r3, [r7, #12]
 800ce02:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ce06:	460b      	mov	r3, r1
 800ce08:	4313      	orrs	r3, r2
 800ce0a:	d011      	beq.n	800ce30 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ce0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce10:	3328      	adds	r3, #40	@ 0x28
 800ce12:	2101      	movs	r1, #1
 800ce14:	4618      	mov	r0, r3
 800ce16:	f001 f9cf 	bl	800e1b8 <RCCEx_PLL3_Config>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ce20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d003      	beq.n	800ce30 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ce2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ce30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce38:	2100      	movs	r1, #0
 800ce3a:	6039      	str	r1, [r7, #0]
 800ce3c:	f003 0320 	and.w	r3, r3, #32
 800ce40:	607b      	str	r3, [r7, #4]
 800ce42:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ce46:	460b      	mov	r3, r1
 800ce48:	4313      	orrs	r3, r2
 800ce4a:	d011      	beq.n	800ce70 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ce4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce50:	3328      	adds	r3, #40	@ 0x28
 800ce52:	2102      	movs	r1, #2
 800ce54:	4618      	mov	r0, r3
 800ce56:	f001 f9af 	bl	800e1b8 <RCCEx_PLL3_Config>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ce60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d003      	beq.n	800ce70 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ce6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800ce70:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d101      	bne.n	800ce7c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	e000      	b.n	800ce7e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800ce7c:	2301      	movs	r3, #1
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800ce84:	46bd      	mov	sp, r7
 800ce86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ce8a:	bf00      	nop
 800ce8c:	58024400 	.word	0x58024400

0800ce90 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b090      	sub	sp, #64	@ 0x40
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ce9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce9e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800cea2:	430b      	orrs	r3, r1
 800cea4:	f040 8094 	bne.w	800cfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800cea8:	4b9b      	ldr	r3, [pc, #620]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ceaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ceac:	f003 0307 	and.w	r3, r3, #7
 800ceb0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ceb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceb4:	2b04      	cmp	r3, #4
 800ceb6:	f200 8087 	bhi.w	800cfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ceba:	a201      	add	r2, pc, #4	@ (adr r2, 800cec0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800cebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cec0:	0800ced5 	.word	0x0800ced5
 800cec4:	0800cefd 	.word	0x0800cefd
 800cec8:	0800cf25 	.word	0x0800cf25
 800cecc:	0800cfc1 	.word	0x0800cfc1
 800ced0:	0800cf4d 	.word	0x0800cf4d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ced4:	4b90      	ldr	r3, [pc, #576]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cedc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cee0:	d108      	bne.n	800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cee2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cee6:	4618      	mov	r0, r3
 800cee8:	f000 ff62 	bl	800ddb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ceec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cef0:	f000 bc93 	b.w	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cef4:	2300      	movs	r3, #0
 800cef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cef8:	f000 bc8f 	b.w	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cefc:	4b86      	ldr	r3, [pc, #536]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cf04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cf08:	d108      	bne.n	800cf1c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf0a:	f107 0318 	add.w	r3, r7, #24
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f000 fca6 	bl	800d860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cf14:	69bb      	ldr	r3, [r7, #24]
 800cf16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf18:	f000 bc7f 	b.w	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf20:	f000 bc7b 	b.w	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cf24:	4b7c      	ldr	r3, [pc, #496]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cf2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cf30:	d108      	bne.n	800cf44 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf32:	f107 030c 	add.w	r3, r7, #12
 800cf36:	4618      	mov	r0, r3
 800cf38:	f000 fde6 	bl	800db08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf40:	f000 bc6b 	b.w	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf44:	2300      	movs	r3, #0
 800cf46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf48:	f000 bc67 	b.w	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cf4c:	4b72      	ldr	r3, [pc, #456]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cf4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cf50:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cf54:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cf56:	4b70      	ldr	r3, [pc, #448]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	f003 0304 	and.w	r3, r3, #4
 800cf5e:	2b04      	cmp	r3, #4
 800cf60:	d10c      	bne.n	800cf7c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800cf62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d109      	bne.n	800cf7c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf68:	4b6b      	ldr	r3, [pc, #428]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	08db      	lsrs	r3, r3, #3
 800cf6e:	f003 0303 	and.w	r3, r3, #3
 800cf72:	4a6a      	ldr	r2, [pc, #424]	@ (800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800cf74:	fa22 f303 	lsr.w	r3, r2, r3
 800cf78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf7a:	e01f      	b.n	800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cf7c:	4b66      	ldr	r3, [pc, #408]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cf88:	d106      	bne.n	800cf98 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800cf8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cf90:	d102      	bne.n	800cf98 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cf92:	4b63      	ldr	r3, [pc, #396]	@ (800d120 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800cf94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf96:	e011      	b.n	800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cf98:	4b5f      	ldr	r3, [pc, #380]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cfa0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cfa4:	d106      	bne.n	800cfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800cfa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cfac:	d102      	bne.n	800cfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cfae:	4b5d      	ldr	r3, [pc, #372]	@ (800d124 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cfb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cfb2:	e003      	b.n	800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cfb8:	f000 bc2f 	b.w	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cfbc:	f000 bc2d 	b.w	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cfc0:	4b59      	ldr	r3, [pc, #356]	@ (800d128 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800cfc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfc4:	f000 bc29 	b.w	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800cfc8:	2300      	movs	r3, #0
 800cfca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfcc:	f000 bc25 	b.w	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800cfd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfd4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800cfd8:	430b      	orrs	r3, r1
 800cfda:	f040 80a7 	bne.w	800d12c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800cfde:	4b4e      	ldr	r3, [pc, #312]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cfe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cfe2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800cfe6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800cfe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cfee:	d054      	beq.n	800d09a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800cff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cff2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cff6:	f200 808b 	bhi.w	800d110 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cffc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d000:	f000 8083 	beq.w	800d10a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800d004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d006:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d00a:	f200 8081 	bhi.w	800d110 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800d00e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d010:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d014:	d02f      	beq.n	800d076 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800d016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d018:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d01c:	d878      	bhi.n	800d110 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800d01e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d020:	2b00      	cmp	r3, #0
 800d022:	d004      	beq.n	800d02e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800d024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d026:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d02a:	d012      	beq.n	800d052 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800d02c:	e070      	b.n	800d110 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d02e:	4b3a      	ldr	r3, [pc, #232]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d036:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d03a:	d107      	bne.n	800d04c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d03c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d040:	4618      	mov	r0, r3
 800d042:	f000 feb5 	bl	800ddb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d048:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d04a:	e3e6      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d04c:	2300      	movs	r3, #0
 800d04e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d050:	e3e3      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d052:	4b31      	ldr	r3, [pc, #196]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d05a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d05e:	d107      	bne.n	800d070 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d060:	f107 0318 	add.w	r3, r7, #24
 800d064:	4618      	mov	r0, r3
 800d066:	f000 fbfb 	bl	800d860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d06a:	69bb      	ldr	r3, [r7, #24]
 800d06c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d06e:	e3d4      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d070:	2300      	movs	r3, #0
 800d072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d074:	e3d1      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d076:	4b28      	ldr	r3, [pc, #160]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d07e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d082:	d107      	bne.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d084:	f107 030c 	add.w	r3, r7, #12
 800d088:	4618      	mov	r0, r3
 800d08a:	f000 fd3d 	bl	800db08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d092:	e3c2      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d094:	2300      	movs	r3, #0
 800d096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d098:	e3bf      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d09a:	4b1f      	ldr	r3, [pc, #124]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d09c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d09e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d0a2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d0a4:	4b1c      	ldr	r3, [pc, #112]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	f003 0304 	and.w	r3, r3, #4
 800d0ac:	2b04      	cmp	r3, #4
 800d0ae:	d10c      	bne.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800d0b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d109      	bne.n	800d0ca <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d0b6:	4b18      	ldr	r3, [pc, #96]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	08db      	lsrs	r3, r3, #3
 800d0bc:	f003 0303 	and.w	r3, r3, #3
 800d0c0:	4a16      	ldr	r2, [pc, #88]	@ (800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800d0c2:	fa22 f303 	lsr.w	r3, r2, r3
 800d0c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d0c8:	e01e      	b.n	800d108 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d0ca:	4b13      	ldr	r3, [pc, #76]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d0d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d0d6:	d106      	bne.n	800d0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800d0d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d0de:	d102      	bne.n	800d0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d0e0:	4b0f      	ldr	r3, [pc, #60]	@ (800d120 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800d0e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d0e4:	e010      	b.n	800d108 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d0e6:	4b0c      	ldr	r3, [pc, #48]	@ (800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d0ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d0f2:	d106      	bne.n	800d102 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800d0f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d0fa:	d102      	bne.n	800d102 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d0fc:	4b09      	ldr	r3, [pc, #36]	@ (800d124 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d0fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d100:	e002      	b.n	800d108 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d102:	2300      	movs	r3, #0
 800d104:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d106:	e388      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d108:	e387      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d10a:	4b07      	ldr	r3, [pc, #28]	@ (800d128 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800d10c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d10e:	e384      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d110:	2300      	movs	r3, #0
 800d112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d114:	e381      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d116:	bf00      	nop
 800d118:	58024400 	.word	0x58024400
 800d11c:	03d09000 	.word	0x03d09000
 800d120:	003d0900 	.word	0x003d0900
 800d124:	007a1200 	.word	0x007a1200
 800d128:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800d12c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d130:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800d134:	430b      	orrs	r3, r1
 800d136:	f040 809c 	bne.w	800d272 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800d13a:	4b9e      	ldr	r3, [pc, #632]	@ (800d3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d13c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d13e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800d142:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800d144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d146:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d14a:	d054      	beq.n	800d1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800d14c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d14e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d152:	f200 808b 	bhi.w	800d26c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800d156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d158:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d15c:	f000 8083 	beq.w	800d266 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800d160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d162:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d166:	f200 8081 	bhi.w	800d26c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800d16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d16c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d170:	d02f      	beq.n	800d1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800d172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d174:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d178:	d878      	bhi.n	800d26c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800d17a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d004      	beq.n	800d18a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800d180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d182:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d186:	d012      	beq.n	800d1ae <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800d188:	e070      	b.n	800d26c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d18a:	4b8a      	ldr	r3, [pc, #552]	@ (800d3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d192:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d196:	d107      	bne.n	800d1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d198:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d19c:	4618      	mov	r0, r3
 800d19e:	f000 fe07 	bl	800ddb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d1a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1a6:	e338      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1ac:	e335      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d1ae:	4b81      	ldr	r3, [pc, #516]	@ (800d3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d1b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d1ba:	d107      	bne.n	800d1cc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1bc:	f107 0318 	add.w	r3, r7, #24
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f000 fb4d 	bl	800d860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d1c6:	69bb      	ldr	r3, [r7, #24]
 800d1c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1ca:	e326      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1d0:	e323      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d1d2:	4b78      	ldr	r3, [pc, #480]	@ (800d3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d1da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d1de:	d107      	bne.n	800d1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d1e0:	f107 030c 	add.w	r3, r7, #12
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f000 fc8f 	bl	800db08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1ee:	e314      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1f4:	e311      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d1f6:	4b6f      	ldr	r3, [pc, #444]	@ (800d3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d1f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d1fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d1fe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d200:	4b6c      	ldr	r3, [pc, #432]	@ (800d3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	f003 0304 	and.w	r3, r3, #4
 800d208:	2b04      	cmp	r3, #4
 800d20a:	d10c      	bne.n	800d226 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800d20c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d109      	bne.n	800d226 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d212:	4b68      	ldr	r3, [pc, #416]	@ (800d3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	08db      	lsrs	r3, r3, #3
 800d218:	f003 0303 	and.w	r3, r3, #3
 800d21c:	4a66      	ldr	r2, [pc, #408]	@ (800d3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800d21e:	fa22 f303 	lsr.w	r3, r2, r3
 800d222:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d224:	e01e      	b.n	800d264 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d226:	4b63      	ldr	r3, [pc, #396]	@ (800d3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d22e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d232:	d106      	bne.n	800d242 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800d234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d236:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d23a:	d102      	bne.n	800d242 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d23c:	4b5f      	ldr	r3, [pc, #380]	@ (800d3bc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800d23e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d240:	e010      	b.n	800d264 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d242:	4b5c      	ldr	r3, [pc, #368]	@ (800d3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d24a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d24e:	d106      	bne.n	800d25e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800d250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d252:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d256:	d102      	bne.n	800d25e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d258:	4b59      	ldr	r3, [pc, #356]	@ (800d3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d25a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d25c:	e002      	b.n	800d264 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d25e:	2300      	movs	r3, #0
 800d260:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d262:	e2da      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d264:	e2d9      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d266:	4b57      	ldr	r3, [pc, #348]	@ (800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800d268:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d26a:	e2d6      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d26c:	2300      	movs	r3, #0
 800d26e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d270:	e2d3      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800d272:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d276:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800d27a:	430b      	orrs	r3, r1
 800d27c:	f040 80a7 	bne.w	800d3ce <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800d280:	4b4c      	ldr	r3, [pc, #304]	@ (800d3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d282:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d284:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800d288:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d28a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d28c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d290:	d055      	beq.n	800d33e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800d292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d294:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d298:	f200 8096 	bhi.w	800d3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d29e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d2a2:	f000 8084 	beq.w	800d3ae <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800d2a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d2ac:	f200 808c 	bhi.w	800d3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d2b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d2b6:	d030      	beq.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800d2b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d2be:	f200 8083 	bhi.w	800d3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d2c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d004      	beq.n	800d2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800d2c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d2ce:	d012      	beq.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800d2d0:	e07a      	b.n	800d3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d2d2:	4b38      	ldr	r3, [pc, #224]	@ (800d3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d2da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d2de:	d107      	bne.n	800d2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d2e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f000 fd63 	bl	800ddb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2ee:	e294      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2f4:	e291      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d2f6:	4b2f      	ldr	r3, [pc, #188]	@ (800d3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d2fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d302:	d107      	bne.n	800d314 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d304:	f107 0318 	add.w	r3, r7, #24
 800d308:	4618      	mov	r0, r3
 800d30a:	f000 faa9 	bl	800d860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d30e:	69bb      	ldr	r3, [r7, #24]
 800d310:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d312:	e282      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d314:	2300      	movs	r3, #0
 800d316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d318:	e27f      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d31a:	4b26      	ldr	r3, [pc, #152]	@ (800d3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d322:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d326:	d107      	bne.n	800d338 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d328:	f107 030c 	add.w	r3, r7, #12
 800d32c:	4618      	mov	r0, r3
 800d32e:	f000 fbeb 	bl	800db08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d336:	e270      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d338:	2300      	movs	r3, #0
 800d33a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d33c:	e26d      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d33e:	4b1d      	ldr	r3, [pc, #116]	@ (800d3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d342:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d346:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d348:	4b1a      	ldr	r3, [pc, #104]	@ (800d3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f003 0304 	and.w	r3, r3, #4
 800d350:	2b04      	cmp	r3, #4
 800d352:	d10c      	bne.n	800d36e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800d354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d356:	2b00      	cmp	r3, #0
 800d358:	d109      	bne.n	800d36e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d35a:	4b16      	ldr	r3, [pc, #88]	@ (800d3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	08db      	lsrs	r3, r3, #3
 800d360:	f003 0303 	and.w	r3, r3, #3
 800d364:	4a14      	ldr	r2, [pc, #80]	@ (800d3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800d366:	fa22 f303 	lsr.w	r3, r2, r3
 800d36a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d36c:	e01e      	b.n	800d3ac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d36e:	4b11      	ldr	r3, [pc, #68]	@ (800d3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d376:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d37a:	d106      	bne.n	800d38a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800d37c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d37e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d382:	d102      	bne.n	800d38a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d384:	4b0d      	ldr	r3, [pc, #52]	@ (800d3bc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800d386:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d388:	e010      	b.n	800d3ac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d38a:	4b0a      	ldr	r3, [pc, #40]	@ (800d3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d392:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d396:	d106      	bne.n	800d3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800d398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d39a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d39e:	d102      	bne.n	800d3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d3a0:	4b07      	ldr	r3, [pc, #28]	@ (800d3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d3a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d3a4:	e002      	b.n	800d3ac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d3aa:	e236      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d3ac:	e235      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d3ae:	4b05      	ldr	r3, [pc, #20]	@ (800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800d3b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3b2:	e232      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d3b4:	58024400 	.word	0x58024400
 800d3b8:	03d09000 	.word	0x03d09000
 800d3bc:	003d0900 	.word	0x003d0900
 800d3c0:	007a1200 	.word	0x007a1200
 800d3c4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3cc:	e225      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800d3ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d3d2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800d3d6:	430b      	orrs	r3, r1
 800d3d8:	f040 8085 	bne.w	800d4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800d3dc:	4b9c      	ldr	r3, [pc, #624]	@ (800d650 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d3de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d3e0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800d3e4:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800d3e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d3ec:	d06b      	beq.n	800d4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800d3ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d3f4:	d874      	bhi.n	800d4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d3f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d3fc:	d056      	beq.n	800d4ac <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800d3fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d400:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d404:	d86c      	bhi.n	800d4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d408:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d40c:	d03b      	beq.n	800d486 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800d40e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d410:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d414:	d864      	bhi.n	800d4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d418:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d41c:	d021      	beq.n	800d462 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800d41e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d420:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d424:	d85c      	bhi.n	800d4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d004      	beq.n	800d436 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800d42c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d42e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d432:	d004      	beq.n	800d43e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800d434:	e054      	b.n	800d4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800d436:	f7fe fb5f 	bl	800baf8 <HAL_RCC_GetPCLK1Freq>
 800d43a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d43c:	e1ed      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d43e:	4b84      	ldr	r3, [pc, #528]	@ (800d650 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d446:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d44a:	d107      	bne.n	800d45c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d44c:	f107 0318 	add.w	r3, r7, #24
 800d450:	4618      	mov	r0, r3
 800d452:	f000 fa05 	bl	800d860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d456:	69fb      	ldr	r3, [r7, #28]
 800d458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d45a:	e1de      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d45c:	2300      	movs	r3, #0
 800d45e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d460:	e1db      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d462:	4b7b      	ldr	r3, [pc, #492]	@ (800d650 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d46a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d46e:	d107      	bne.n	800d480 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d470:	f107 030c 	add.w	r3, r7, #12
 800d474:	4618      	mov	r0, r3
 800d476:	f000 fb47 	bl	800db08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d47e:	e1cc      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d480:	2300      	movs	r3, #0
 800d482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d484:	e1c9      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d486:	4b72      	ldr	r3, [pc, #456]	@ (800d650 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	f003 0304 	and.w	r3, r3, #4
 800d48e:	2b04      	cmp	r3, #4
 800d490:	d109      	bne.n	800d4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d492:	4b6f      	ldr	r3, [pc, #444]	@ (800d650 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	08db      	lsrs	r3, r3, #3
 800d498:	f003 0303 	and.w	r3, r3, #3
 800d49c:	4a6d      	ldr	r2, [pc, #436]	@ (800d654 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d49e:	fa22 f303 	lsr.w	r3, r2, r3
 800d4a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d4a4:	e1b9      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4aa:	e1b6      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d4ac:	4b68      	ldr	r3, [pc, #416]	@ (800d650 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d4b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d4b8:	d102      	bne.n	800d4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800d4ba:	4b67      	ldr	r3, [pc, #412]	@ (800d658 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d4bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d4be:	e1ac      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4c4:	e1a9      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d4c6:	4b62      	ldr	r3, [pc, #392]	@ (800d650 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d4ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d4d2:	d102      	bne.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800d4d4:	4b61      	ldr	r3, [pc, #388]	@ (800d65c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d4d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d4d8:	e19f      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4de:	e19c      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4e4:	e199      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800d4e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4ea:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800d4ee:	430b      	orrs	r3, r1
 800d4f0:	d173      	bne.n	800d5da <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800d4f2:	4b57      	ldr	r3, [pc, #348]	@ (800d650 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d4f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d4f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d4fa:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d502:	d02f      	beq.n	800d564 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800d504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d506:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d50a:	d863      	bhi.n	800d5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800d50c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d004      	beq.n	800d51c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800d512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d518:	d012      	beq.n	800d540 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800d51a:	e05b      	b.n	800d5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d51c:	4b4c      	ldr	r3, [pc, #304]	@ (800d650 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d524:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d528:	d107      	bne.n	800d53a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d52a:	f107 0318 	add.w	r3, r7, #24
 800d52e:	4618      	mov	r0, r3
 800d530:	f000 f996 	bl	800d860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d534:	69bb      	ldr	r3, [r7, #24]
 800d536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d538:	e16f      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d53a:	2300      	movs	r3, #0
 800d53c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d53e:	e16c      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d540:	4b43      	ldr	r3, [pc, #268]	@ (800d650 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d548:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d54c:	d107      	bne.n	800d55e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d54e:	f107 030c 	add.w	r3, r7, #12
 800d552:	4618      	mov	r0, r3
 800d554:	f000 fad8 	bl	800db08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d558:	697b      	ldr	r3, [r7, #20]
 800d55a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d55c:	e15d      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d55e:	2300      	movs	r3, #0
 800d560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d562:	e15a      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d564:	4b3a      	ldr	r3, [pc, #232]	@ (800d650 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d568:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d56c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d56e:	4b38      	ldr	r3, [pc, #224]	@ (800d650 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f003 0304 	and.w	r3, r3, #4
 800d576:	2b04      	cmp	r3, #4
 800d578:	d10c      	bne.n	800d594 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800d57a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d109      	bne.n	800d594 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d580:	4b33      	ldr	r3, [pc, #204]	@ (800d650 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	08db      	lsrs	r3, r3, #3
 800d586:	f003 0303 	and.w	r3, r3, #3
 800d58a:	4a32      	ldr	r2, [pc, #200]	@ (800d654 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d58c:	fa22 f303 	lsr.w	r3, r2, r3
 800d590:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d592:	e01e      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d594:	4b2e      	ldr	r3, [pc, #184]	@ (800d650 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d59c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d5a0:	d106      	bne.n	800d5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800d5a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d5a8:	d102      	bne.n	800d5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d5aa:	4b2b      	ldr	r3, [pc, #172]	@ (800d658 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d5ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d5ae:	e010      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d5b0:	4b27      	ldr	r3, [pc, #156]	@ (800d650 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d5b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d5bc:	d106      	bne.n	800d5cc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800d5be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d5c4:	d102      	bne.n	800d5cc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d5c6:	4b25      	ldr	r3, [pc, #148]	@ (800d65c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d5c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d5ca:	e002      	b.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d5d0:	e123      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d5d2:	e122      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5d8:	e11f      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d5da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d5de:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800d5e2:	430b      	orrs	r3, r1
 800d5e4:	d13c      	bne.n	800d660 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d5e6:	4b1a      	ldr	r3, [pc, #104]	@ (800d650 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d5e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d5ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d5ee:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d5f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d004      	beq.n	800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800d5f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d5fc:	d012      	beq.n	800d624 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800d5fe:	e023      	b.n	800d648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d600:	4b13      	ldr	r3, [pc, #76]	@ (800d650 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d608:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d60c:	d107      	bne.n	800d61e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d60e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d612:	4618      	mov	r0, r3
 800d614:	f000 fbcc 	bl	800ddb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d61a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d61c:	e0fd      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d61e:	2300      	movs	r3, #0
 800d620:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d622:	e0fa      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d624:	4b0a      	ldr	r3, [pc, #40]	@ (800d650 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d62c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d630:	d107      	bne.n	800d642 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d632:	f107 0318 	add.w	r3, r7, #24
 800d636:	4618      	mov	r0, r3
 800d638:	f000 f912 	bl	800d860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d63c:	6a3b      	ldr	r3, [r7, #32]
 800d63e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d640:	e0eb      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d642:	2300      	movs	r3, #0
 800d644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d646:	e0e8      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d648:	2300      	movs	r3, #0
 800d64a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d64c:	e0e5      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d64e:	bf00      	nop
 800d650:	58024400 	.word	0x58024400
 800d654:	03d09000 	.word	0x03d09000
 800d658:	003d0900 	.word	0x003d0900
 800d65c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d660:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d664:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800d668:	430b      	orrs	r3, r1
 800d66a:	f040 8085 	bne.w	800d778 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d66e:	4b6d      	ldr	r3, [pc, #436]	@ (800d824 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d672:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800d676:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d67a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d67e:	d06b      	beq.n	800d758 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800d680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d682:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d686:	d874      	bhi.n	800d772 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d68a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d68e:	d056      	beq.n	800d73e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800d690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d696:	d86c      	bhi.n	800d772 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d69a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d69e:	d03b      	beq.n	800d718 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800d6a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d6a6:	d864      	bhi.n	800d772 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d6a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d6ae:	d021      	beq.n	800d6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800d6b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d6b6:	d85c      	bhi.n	800d772 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d6b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d004      	beq.n	800d6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800d6be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d6c4:	d004      	beq.n	800d6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800d6c6:	e054      	b.n	800d772 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d6c8:	f000 f8b4 	bl	800d834 <HAL_RCCEx_GetD3PCLK1Freq>
 800d6cc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d6ce:	e0a4      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d6d0:	4b54      	ldr	r3, [pc, #336]	@ (800d824 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d6d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d6dc:	d107      	bne.n	800d6ee <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d6de:	f107 0318 	add.w	r3, r7, #24
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f000 f8bc 	bl	800d860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d6e8:	69fb      	ldr	r3, [r7, #28]
 800d6ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d6ec:	e095      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d6f2:	e092      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d6f4:	4b4b      	ldr	r3, [pc, #300]	@ (800d824 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d6fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d700:	d107      	bne.n	800d712 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d702:	f107 030c 	add.w	r3, r7, #12
 800d706:	4618      	mov	r0, r3
 800d708:	f000 f9fe 	bl	800db08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d70c:	693b      	ldr	r3, [r7, #16]
 800d70e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d710:	e083      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d712:	2300      	movs	r3, #0
 800d714:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d716:	e080      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d718:	4b42      	ldr	r3, [pc, #264]	@ (800d824 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	f003 0304 	and.w	r3, r3, #4
 800d720:	2b04      	cmp	r3, #4
 800d722:	d109      	bne.n	800d738 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d724:	4b3f      	ldr	r3, [pc, #252]	@ (800d824 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	08db      	lsrs	r3, r3, #3
 800d72a:	f003 0303 	and.w	r3, r3, #3
 800d72e:	4a3e      	ldr	r2, [pc, #248]	@ (800d828 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800d730:	fa22 f303 	lsr.w	r3, r2, r3
 800d734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d736:	e070      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d738:	2300      	movs	r3, #0
 800d73a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d73c:	e06d      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d73e:	4b39      	ldr	r3, [pc, #228]	@ (800d824 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d746:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d74a:	d102      	bne.n	800d752 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800d74c:	4b37      	ldr	r3, [pc, #220]	@ (800d82c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d74e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d750:	e063      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d752:	2300      	movs	r3, #0
 800d754:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d756:	e060      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d758:	4b32      	ldr	r3, [pc, #200]	@ (800d824 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d760:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d764:	d102      	bne.n	800d76c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800d766:	4b32      	ldr	r3, [pc, #200]	@ (800d830 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d768:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d76a:	e056      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d76c:	2300      	movs	r3, #0
 800d76e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d770:	e053      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d772:	2300      	movs	r3, #0
 800d774:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d776:	e050      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d778:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d77c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800d780:	430b      	orrs	r3, r1
 800d782:	d148      	bne.n	800d816 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d784:	4b27      	ldr	r3, [pc, #156]	@ (800d824 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d788:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d78c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d78e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d790:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d794:	d02a      	beq.n	800d7ec <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800d796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d798:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d79c:	d838      	bhi.n	800d810 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800d79e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d004      	beq.n	800d7ae <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800d7a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d7aa:	d00d      	beq.n	800d7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800d7ac:	e030      	b.n	800d810 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d7ae:	4b1d      	ldr	r3, [pc, #116]	@ (800d824 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d7b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d7ba:	d102      	bne.n	800d7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800d7bc:	4b1c      	ldr	r3, [pc, #112]	@ (800d830 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d7be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d7c0:	e02b      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7c6:	e028      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d7c8:	4b16      	ldr	r3, [pc, #88]	@ (800d824 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d7d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d7d4:	d107      	bne.n	800d7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d7d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f000 fae8 	bl	800ddb0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d7e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d7e4:	e019      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7ea:	e016      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d7ec:	4b0d      	ldr	r3, [pc, #52]	@ (800d824 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d7f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d7f8:	d107      	bne.n	800d80a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d7fa:	f107 0318 	add.w	r3, r7, #24
 800d7fe:	4618      	mov	r0, r3
 800d800:	f000 f82e 	bl	800d860 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d804:	69fb      	ldr	r3, [r7, #28]
 800d806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d808:	e007      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d80a:	2300      	movs	r3, #0
 800d80c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d80e:	e004      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d810:	2300      	movs	r3, #0
 800d812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d814:	e001      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800d816:	2300      	movs	r3, #0
 800d818:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800d81a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3740      	adds	r7, #64	@ 0x40
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}
 800d824:	58024400 	.word	0x58024400
 800d828:	03d09000 	.word	0x03d09000
 800d82c:	003d0900 	.word	0x003d0900
 800d830:	007a1200 	.word	0x007a1200

0800d834 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d838:	f7fe f92e 	bl	800ba98 <HAL_RCC_GetHCLKFreq>
 800d83c:	4602      	mov	r2, r0
 800d83e:	4b06      	ldr	r3, [pc, #24]	@ (800d858 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d840:	6a1b      	ldr	r3, [r3, #32]
 800d842:	091b      	lsrs	r3, r3, #4
 800d844:	f003 0307 	and.w	r3, r3, #7
 800d848:	4904      	ldr	r1, [pc, #16]	@ (800d85c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d84a:	5ccb      	ldrb	r3, [r1, r3]
 800d84c:	f003 031f 	and.w	r3, r3, #31
 800d850:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d854:	4618      	mov	r0, r3
 800d856:	bd80      	pop	{r7, pc}
 800d858:	58024400 	.word	0x58024400
 800d85c:	08014c0c 	.word	0x08014c0c

0800d860 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d860:	b480      	push	{r7}
 800d862:	b089      	sub	sp, #36	@ 0x24
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d868:	4ba1      	ldr	r3, [pc, #644]	@ (800daf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d86a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d86c:	f003 0303 	and.w	r3, r3, #3
 800d870:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d872:	4b9f      	ldr	r3, [pc, #636]	@ (800daf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d876:	0b1b      	lsrs	r3, r3, #12
 800d878:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d87c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d87e:	4b9c      	ldr	r3, [pc, #624]	@ (800daf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d882:	091b      	lsrs	r3, r3, #4
 800d884:	f003 0301 	and.w	r3, r3, #1
 800d888:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d88a:	4b99      	ldr	r3, [pc, #612]	@ (800daf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d88c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d88e:	08db      	lsrs	r3, r3, #3
 800d890:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d894:	693a      	ldr	r2, [r7, #16]
 800d896:	fb02 f303 	mul.w	r3, r2, r3
 800d89a:	ee07 3a90 	vmov	s15, r3
 800d89e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d8a6:	697b      	ldr	r3, [r7, #20]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	f000 8111 	beq.w	800dad0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d8ae:	69bb      	ldr	r3, [r7, #24]
 800d8b0:	2b02      	cmp	r3, #2
 800d8b2:	f000 8083 	beq.w	800d9bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d8b6:	69bb      	ldr	r3, [r7, #24]
 800d8b8:	2b02      	cmp	r3, #2
 800d8ba:	f200 80a1 	bhi.w	800da00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d8be:	69bb      	ldr	r3, [r7, #24]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d003      	beq.n	800d8cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d8c4:	69bb      	ldr	r3, [r7, #24]
 800d8c6:	2b01      	cmp	r3, #1
 800d8c8:	d056      	beq.n	800d978 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d8ca:	e099      	b.n	800da00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d8cc:	4b88      	ldr	r3, [pc, #544]	@ (800daf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	f003 0320 	and.w	r3, r3, #32
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d02d      	beq.n	800d934 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d8d8:	4b85      	ldr	r3, [pc, #532]	@ (800daf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	08db      	lsrs	r3, r3, #3
 800d8de:	f003 0303 	and.w	r3, r3, #3
 800d8e2:	4a84      	ldr	r2, [pc, #528]	@ (800daf4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d8e4:	fa22 f303 	lsr.w	r3, r2, r3
 800d8e8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	ee07 3a90 	vmov	s15, r3
 800d8f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8f4:	697b      	ldr	r3, [r7, #20]
 800d8f6:	ee07 3a90 	vmov	s15, r3
 800d8fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d902:	4b7b      	ldr	r3, [pc, #492]	@ (800daf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d90a:	ee07 3a90 	vmov	s15, r3
 800d90e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d912:	ed97 6a03 	vldr	s12, [r7, #12]
 800d916:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800daf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d91a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d91e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d922:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d92a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d92e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d932:	e087      	b.n	800da44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	ee07 3a90 	vmov	s15, r3
 800d93a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d93e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800dafc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d946:	4b6a      	ldr	r3, [pc, #424]	@ (800daf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d94a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d94e:	ee07 3a90 	vmov	s15, r3
 800d952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d956:	ed97 6a03 	vldr	s12, [r7, #12]
 800d95a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800daf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d95e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d966:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d96a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d96e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d972:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d976:	e065      	b.n	800da44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	ee07 3a90 	vmov	s15, r3
 800d97e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d982:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800db00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d98a:	4b59      	ldr	r3, [pc, #356]	@ (800daf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d98c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d98e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d992:	ee07 3a90 	vmov	s15, r3
 800d996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d99a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d99e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800daf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d9a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d9ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d9ba:	e043      	b.n	800da44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	ee07 3a90 	vmov	s15, r3
 800d9c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9c6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800db04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d9ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9ce:	4b48      	ldr	r3, [pc, #288]	@ (800daf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d9d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9d6:	ee07 3a90 	vmov	s15, r3
 800d9da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9de:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9e2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800daf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d9e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d9f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d9fe:	e021      	b.n	800da44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	ee07 3a90 	vmov	s15, r3
 800da06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da0a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800db00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800da0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da12:	4b37      	ldr	r3, [pc, #220]	@ (800daf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da1a:	ee07 3a90 	vmov	s15, r3
 800da1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da22:	ed97 6a03 	vldr	s12, [r7, #12]
 800da26:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800daf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800da2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800da36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da42:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800da44:	4b2a      	ldr	r3, [pc, #168]	@ (800daf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da48:	0a5b      	lsrs	r3, r3, #9
 800da4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da4e:	ee07 3a90 	vmov	s15, r3
 800da52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800da5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da5e:	edd7 6a07 	vldr	s13, [r7, #28]
 800da62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da6a:	ee17 2a90 	vmov	r2, s15
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800da72:	4b1f      	ldr	r3, [pc, #124]	@ (800daf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da76:	0c1b      	lsrs	r3, r3, #16
 800da78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da7c:	ee07 3a90 	vmov	s15, r3
 800da80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800da88:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da8c:	edd7 6a07 	vldr	s13, [r7, #28]
 800da90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da98:	ee17 2a90 	vmov	r2, s15
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800daa0:	4b13      	ldr	r3, [pc, #76]	@ (800daf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800daa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800daa4:	0e1b      	lsrs	r3, r3, #24
 800daa6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800daaa:	ee07 3a90 	vmov	s15, r3
 800daae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dab2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dab6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800daba:	edd7 6a07 	vldr	s13, [r7, #28]
 800dabe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dac2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dac6:	ee17 2a90 	vmov	r2, s15
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800dace:	e008      	b.n	800dae2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2200      	movs	r2, #0
 800dad4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2200      	movs	r2, #0
 800dada:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2200      	movs	r2, #0
 800dae0:	609a      	str	r2, [r3, #8]
}
 800dae2:	bf00      	nop
 800dae4:	3724      	adds	r7, #36	@ 0x24
 800dae6:	46bd      	mov	sp, r7
 800dae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daec:	4770      	bx	lr
 800daee:	bf00      	nop
 800daf0:	58024400 	.word	0x58024400
 800daf4:	03d09000 	.word	0x03d09000
 800daf8:	46000000 	.word	0x46000000
 800dafc:	4c742400 	.word	0x4c742400
 800db00:	4a742400 	.word	0x4a742400
 800db04:	4af42400 	.word	0x4af42400

0800db08 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800db08:	b480      	push	{r7}
 800db0a:	b089      	sub	sp, #36	@ 0x24
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800db10:	4ba1      	ldr	r3, [pc, #644]	@ (800dd98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800db12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db14:	f003 0303 	and.w	r3, r3, #3
 800db18:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800db1a:	4b9f      	ldr	r3, [pc, #636]	@ (800dd98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800db1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db1e:	0d1b      	lsrs	r3, r3, #20
 800db20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800db24:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800db26:	4b9c      	ldr	r3, [pc, #624]	@ (800dd98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800db28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db2a:	0a1b      	lsrs	r3, r3, #8
 800db2c:	f003 0301 	and.w	r3, r3, #1
 800db30:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800db32:	4b99      	ldr	r3, [pc, #612]	@ (800dd98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800db34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db36:	08db      	lsrs	r3, r3, #3
 800db38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800db3c:	693a      	ldr	r2, [r7, #16]
 800db3e:	fb02 f303 	mul.w	r3, r2, r3
 800db42:	ee07 3a90 	vmov	s15, r3
 800db46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	2b00      	cmp	r3, #0
 800db52:	f000 8111 	beq.w	800dd78 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800db56:	69bb      	ldr	r3, [r7, #24]
 800db58:	2b02      	cmp	r3, #2
 800db5a:	f000 8083 	beq.w	800dc64 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800db5e:	69bb      	ldr	r3, [r7, #24]
 800db60:	2b02      	cmp	r3, #2
 800db62:	f200 80a1 	bhi.w	800dca8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800db66:	69bb      	ldr	r3, [r7, #24]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d003      	beq.n	800db74 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800db6c:	69bb      	ldr	r3, [r7, #24]
 800db6e:	2b01      	cmp	r3, #1
 800db70:	d056      	beq.n	800dc20 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800db72:	e099      	b.n	800dca8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800db74:	4b88      	ldr	r3, [pc, #544]	@ (800dd98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	f003 0320 	and.w	r3, r3, #32
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d02d      	beq.n	800dbdc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800db80:	4b85      	ldr	r3, [pc, #532]	@ (800dd98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	08db      	lsrs	r3, r3, #3
 800db86:	f003 0303 	and.w	r3, r3, #3
 800db8a:	4a84      	ldr	r2, [pc, #528]	@ (800dd9c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800db8c:	fa22 f303 	lsr.w	r3, r2, r3
 800db90:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	ee07 3a90 	vmov	s15, r3
 800db98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db9c:	697b      	ldr	r3, [r7, #20]
 800db9e:	ee07 3a90 	vmov	s15, r3
 800dba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dbaa:	4b7b      	ldr	r3, [pc, #492]	@ (800dd98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dbac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbb2:	ee07 3a90 	vmov	s15, r3
 800dbb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dbba:	ed97 6a03 	vldr	s12, [r7, #12]
 800dbbe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800dda0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dbc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dbc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dbca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dbce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dbd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dbd6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800dbda:	e087      	b.n	800dcec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	ee07 3a90 	vmov	s15, r3
 800dbe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbe6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800dda4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800dbea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dbee:	4b6a      	ldr	r3, [pc, #424]	@ (800dd98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dbf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbf6:	ee07 3a90 	vmov	s15, r3
 800dbfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dbfe:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc02:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800dda0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dc06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dc12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dc1e:	e065      	b.n	800dcec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dc20:	697b      	ldr	r3, [r7, #20]
 800dc22:	ee07 3a90 	vmov	s15, r3
 800dc26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc2a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800dda8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800dc2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc32:	4b59      	ldr	r3, [pc, #356]	@ (800dd98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc3a:	ee07 3a90 	vmov	s15, r3
 800dc3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc42:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc46:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800dda0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dc4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dc56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dc62:	e043      	b.n	800dcec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dc64:	697b      	ldr	r3, [r7, #20]
 800dc66:	ee07 3a90 	vmov	s15, r3
 800dc6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc6e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ddac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800dc72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc76:	4b48      	ldr	r3, [pc, #288]	@ (800dd98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc7e:	ee07 3a90 	vmov	s15, r3
 800dc82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc86:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc8a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800dda0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dc8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dc9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dca2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dca6:	e021      	b.n	800dcec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	ee07 3a90 	vmov	s15, r3
 800dcae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcb2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800dda8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800dcb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dcba:	4b37      	ldr	r3, [pc, #220]	@ (800dd98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dcbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcc2:	ee07 3a90 	vmov	s15, r3
 800dcc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dcca:	ed97 6a03 	vldr	s12, [r7, #12]
 800dcce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800dda0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dcd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dcd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dcda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dcde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dce6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dcea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800dcec:	4b2a      	ldr	r3, [pc, #168]	@ (800dd98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dcee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcf0:	0a5b      	lsrs	r3, r3, #9
 800dcf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dcf6:	ee07 3a90 	vmov	s15, r3
 800dcfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dd02:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dd06:	edd7 6a07 	vldr	s13, [r7, #28]
 800dd0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd12:	ee17 2a90 	vmov	r2, s15
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800dd1a:	4b1f      	ldr	r3, [pc, #124]	@ (800dd98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd1e:	0c1b      	lsrs	r3, r3, #16
 800dd20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd24:	ee07 3a90 	vmov	s15, r3
 800dd28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dd30:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dd34:	edd7 6a07 	vldr	s13, [r7, #28]
 800dd38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd40:	ee17 2a90 	vmov	r2, s15
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800dd48:	4b13      	ldr	r3, [pc, #76]	@ (800dd98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd4c:	0e1b      	lsrs	r3, r3, #24
 800dd4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd52:	ee07 3a90 	vmov	s15, r3
 800dd56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dd5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dd62:	edd7 6a07 	vldr	s13, [r7, #28]
 800dd66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd6e:	ee17 2a90 	vmov	r2, s15
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800dd76:	e008      	b.n	800dd8a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	2200      	movs	r2, #0
 800dd82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2200      	movs	r2, #0
 800dd88:	609a      	str	r2, [r3, #8]
}
 800dd8a:	bf00      	nop
 800dd8c:	3724      	adds	r7, #36	@ 0x24
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd94:	4770      	bx	lr
 800dd96:	bf00      	nop
 800dd98:	58024400 	.word	0x58024400
 800dd9c:	03d09000 	.word	0x03d09000
 800dda0:	46000000 	.word	0x46000000
 800dda4:	4c742400 	.word	0x4c742400
 800dda8:	4a742400 	.word	0x4a742400
 800ddac:	4af42400 	.word	0x4af42400

0800ddb0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ddb0:	b480      	push	{r7}
 800ddb2:	b089      	sub	sp, #36	@ 0x24
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ddb8:	4ba0      	ldr	r3, [pc, #640]	@ (800e03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ddba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddbc:	f003 0303 	and.w	r3, r3, #3
 800ddc0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ddc2:	4b9e      	ldr	r3, [pc, #632]	@ (800e03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ddc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddc6:	091b      	lsrs	r3, r3, #4
 800ddc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ddcc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ddce:	4b9b      	ldr	r3, [pc, #620]	@ (800e03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ddd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddd2:	f003 0301 	and.w	r3, r3, #1
 800ddd6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ddd8:	4b98      	ldr	r3, [pc, #608]	@ (800e03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ddda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dddc:	08db      	lsrs	r3, r3, #3
 800ddde:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dde2:	693a      	ldr	r2, [r7, #16]
 800dde4:	fb02 f303 	mul.w	r3, r2, r3
 800dde8:	ee07 3a90 	vmov	s15, r3
 800ddec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddf0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	f000 8111 	beq.w	800e01e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ddfc:	69bb      	ldr	r3, [r7, #24]
 800ddfe:	2b02      	cmp	r3, #2
 800de00:	f000 8083 	beq.w	800df0a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800de04:	69bb      	ldr	r3, [r7, #24]
 800de06:	2b02      	cmp	r3, #2
 800de08:	f200 80a1 	bhi.w	800df4e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800de0c:	69bb      	ldr	r3, [r7, #24]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d003      	beq.n	800de1a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800de12:	69bb      	ldr	r3, [r7, #24]
 800de14:	2b01      	cmp	r3, #1
 800de16:	d056      	beq.n	800dec6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800de18:	e099      	b.n	800df4e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de1a:	4b88      	ldr	r3, [pc, #544]	@ (800e03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	f003 0320 	and.w	r3, r3, #32
 800de22:	2b00      	cmp	r3, #0
 800de24:	d02d      	beq.n	800de82 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800de26:	4b85      	ldr	r3, [pc, #532]	@ (800e03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	08db      	lsrs	r3, r3, #3
 800de2c:	f003 0303 	and.w	r3, r3, #3
 800de30:	4a83      	ldr	r2, [pc, #524]	@ (800e040 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800de32:	fa22 f303 	lsr.w	r3, r2, r3
 800de36:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	ee07 3a90 	vmov	s15, r3
 800de3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de42:	697b      	ldr	r3, [r7, #20]
 800de44:	ee07 3a90 	vmov	s15, r3
 800de48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800de50:	4b7a      	ldr	r3, [pc, #488]	@ (800e03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800de52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de58:	ee07 3a90 	vmov	s15, r3
 800de5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de60:	ed97 6a03 	vldr	s12, [r7, #12]
 800de64:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800e044 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800de68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800de6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800de70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800de74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800de78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de7c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800de80:	e087      	b.n	800df92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	ee07 3a90 	vmov	s15, r3
 800de88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de8c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800e048 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800de90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800de94:	4b69      	ldr	r3, [pc, #420]	@ (800e03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800de96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de9c:	ee07 3a90 	vmov	s15, r3
 800dea0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dea4:	ed97 6a03 	vldr	s12, [r7, #12]
 800dea8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800e044 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800deac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800deb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800deb4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800deb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800debc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dec0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dec4:	e065      	b.n	800df92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	ee07 3a90 	vmov	s15, r3
 800decc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ded0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800e04c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800ded4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ded8:	4b58      	ldr	r3, [pc, #352]	@ (800e03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800deda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dedc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dee0:	ee07 3a90 	vmov	s15, r3
 800dee4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dee8:	ed97 6a03 	vldr	s12, [r7, #12]
 800deec:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800e044 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800def0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800def4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800def8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800defc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800df08:	e043      	b.n	800df92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	ee07 3a90 	vmov	s15, r3
 800df10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df14:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800e050 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800df18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df1c:	4b47      	ldr	r3, [pc, #284]	@ (800e03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800df1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df24:	ee07 3a90 	vmov	s15, r3
 800df28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df2c:	ed97 6a03 	vldr	s12, [r7, #12]
 800df30:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800e044 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800df34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800df40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800df4c:	e021      	b.n	800df92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800df4e:	697b      	ldr	r3, [r7, #20]
 800df50:	ee07 3a90 	vmov	s15, r3
 800df54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df58:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800e048 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800df5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df60:	4b36      	ldr	r3, [pc, #216]	@ (800e03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800df62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df68:	ee07 3a90 	vmov	s15, r3
 800df6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df70:	ed97 6a03 	vldr	s12, [r7, #12]
 800df74:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800e044 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800df78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800df84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800df90:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800df92:	4b2a      	ldr	r3, [pc, #168]	@ (800e03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800df94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df96:	0a5b      	lsrs	r3, r3, #9
 800df98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800df9c:	ee07 3a90 	vmov	s15, r3
 800dfa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfa4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dfa8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dfac:	edd7 6a07 	vldr	s13, [r7, #28]
 800dfb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dfb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dfb8:	ee17 2a90 	vmov	r2, s15
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800dfc0:	4b1e      	ldr	r3, [pc, #120]	@ (800e03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dfc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfc4:	0c1b      	lsrs	r3, r3, #16
 800dfc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dfca:	ee07 3a90 	vmov	s15, r3
 800dfce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dfd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dfda:	edd7 6a07 	vldr	s13, [r7, #28]
 800dfde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dfe2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dfe6:	ee17 2a90 	vmov	r2, s15
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800dfee:	4b13      	ldr	r3, [pc, #76]	@ (800e03c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dff2:	0e1b      	lsrs	r3, r3, #24
 800dff4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dff8:	ee07 3a90 	vmov	s15, r3
 800dffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e000:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e004:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e008:	edd7 6a07 	vldr	s13, [r7, #28]
 800e00c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e010:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e014:	ee17 2a90 	vmov	r2, s15
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800e01c:	e008      	b.n	800e030 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	2200      	movs	r2, #0
 800e022:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2200      	movs	r2, #0
 800e028:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2200      	movs	r2, #0
 800e02e:	609a      	str	r2, [r3, #8]
}
 800e030:	bf00      	nop
 800e032:	3724      	adds	r7, #36	@ 0x24
 800e034:	46bd      	mov	sp, r7
 800e036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03a:	4770      	bx	lr
 800e03c:	58024400 	.word	0x58024400
 800e040:	03d09000 	.word	0x03d09000
 800e044:	46000000 	.word	0x46000000
 800e048:	4c742400 	.word	0x4c742400
 800e04c:	4a742400 	.word	0x4a742400
 800e050:	4af42400 	.word	0x4af42400

0800e054 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b084      	sub	sp, #16
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
 800e05c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e05e:	2300      	movs	r3, #0
 800e060:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e062:	4b53      	ldr	r3, [pc, #332]	@ (800e1b0 <RCCEx_PLL2_Config+0x15c>)
 800e064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e066:	f003 0303 	and.w	r3, r3, #3
 800e06a:	2b03      	cmp	r3, #3
 800e06c:	d101      	bne.n	800e072 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800e06e:	2301      	movs	r3, #1
 800e070:	e099      	b.n	800e1a6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800e072:	4b4f      	ldr	r3, [pc, #316]	@ (800e1b0 <RCCEx_PLL2_Config+0x15c>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	4a4e      	ldr	r2, [pc, #312]	@ (800e1b0 <RCCEx_PLL2_Config+0x15c>)
 800e078:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e07c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e07e:	f7f6 fb51 	bl	8004724 <HAL_GetTick>
 800e082:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e084:	e008      	b.n	800e098 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e086:	f7f6 fb4d 	bl	8004724 <HAL_GetTick>
 800e08a:	4602      	mov	r2, r0
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	1ad3      	subs	r3, r2, r3
 800e090:	2b02      	cmp	r3, #2
 800e092:	d901      	bls.n	800e098 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e094:	2303      	movs	r3, #3
 800e096:	e086      	b.n	800e1a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e098:	4b45      	ldr	r3, [pc, #276]	@ (800e1b0 <RCCEx_PLL2_Config+0x15c>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d1f0      	bne.n	800e086 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800e0a4:	4b42      	ldr	r3, [pc, #264]	@ (800e1b0 <RCCEx_PLL2_Config+0x15c>)
 800e0a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0a8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	031b      	lsls	r3, r3, #12
 800e0b2:	493f      	ldr	r1, [pc, #252]	@ (800e1b0 <RCCEx_PLL2_Config+0x15c>)
 800e0b4:	4313      	orrs	r3, r2
 800e0b6:	628b      	str	r3, [r1, #40]	@ 0x28
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	685b      	ldr	r3, [r3, #4]
 800e0bc:	3b01      	subs	r3, #1
 800e0be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	689b      	ldr	r3, [r3, #8]
 800e0c6:	3b01      	subs	r3, #1
 800e0c8:	025b      	lsls	r3, r3, #9
 800e0ca:	b29b      	uxth	r3, r3
 800e0cc:	431a      	orrs	r2, r3
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	68db      	ldr	r3, [r3, #12]
 800e0d2:	3b01      	subs	r3, #1
 800e0d4:	041b      	lsls	r3, r3, #16
 800e0d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e0da:	431a      	orrs	r2, r3
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	691b      	ldr	r3, [r3, #16]
 800e0e0:	3b01      	subs	r3, #1
 800e0e2:	061b      	lsls	r3, r3, #24
 800e0e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e0e8:	4931      	ldr	r1, [pc, #196]	@ (800e1b0 <RCCEx_PLL2_Config+0x15c>)
 800e0ea:	4313      	orrs	r3, r2
 800e0ec:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800e0ee:	4b30      	ldr	r3, [pc, #192]	@ (800e1b0 <RCCEx_PLL2_Config+0x15c>)
 800e0f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	695b      	ldr	r3, [r3, #20]
 800e0fa:	492d      	ldr	r1, [pc, #180]	@ (800e1b0 <RCCEx_PLL2_Config+0x15c>)
 800e0fc:	4313      	orrs	r3, r2
 800e0fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800e100:	4b2b      	ldr	r3, [pc, #172]	@ (800e1b0 <RCCEx_PLL2_Config+0x15c>)
 800e102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e104:	f023 0220 	bic.w	r2, r3, #32
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	699b      	ldr	r3, [r3, #24]
 800e10c:	4928      	ldr	r1, [pc, #160]	@ (800e1b0 <RCCEx_PLL2_Config+0x15c>)
 800e10e:	4313      	orrs	r3, r2
 800e110:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800e112:	4b27      	ldr	r3, [pc, #156]	@ (800e1b0 <RCCEx_PLL2_Config+0x15c>)
 800e114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e116:	4a26      	ldr	r2, [pc, #152]	@ (800e1b0 <RCCEx_PLL2_Config+0x15c>)
 800e118:	f023 0310 	bic.w	r3, r3, #16
 800e11c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e11e:	4b24      	ldr	r3, [pc, #144]	@ (800e1b0 <RCCEx_PLL2_Config+0x15c>)
 800e120:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e122:	4b24      	ldr	r3, [pc, #144]	@ (800e1b4 <RCCEx_PLL2_Config+0x160>)
 800e124:	4013      	ands	r3, r2
 800e126:	687a      	ldr	r2, [r7, #4]
 800e128:	69d2      	ldr	r2, [r2, #28]
 800e12a:	00d2      	lsls	r2, r2, #3
 800e12c:	4920      	ldr	r1, [pc, #128]	@ (800e1b0 <RCCEx_PLL2_Config+0x15c>)
 800e12e:	4313      	orrs	r3, r2
 800e130:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800e132:	4b1f      	ldr	r3, [pc, #124]	@ (800e1b0 <RCCEx_PLL2_Config+0x15c>)
 800e134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e136:	4a1e      	ldr	r2, [pc, #120]	@ (800e1b0 <RCCEx_PLL2_Config+0x15c>)
 800e138:	f043 0310 	orr.w	r3, r3, #16
 800e13c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d106      	bne.n	800e152 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e144:	4b1a      	ldr	r3, [pc, #104]	@ (800e1b0 <RCCEx_PLL2_Config+0x15c>)
 800e146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e148:	4a19      	ldr	r2, [pc, #100]	@ (800e1b0 <RCCEx_PLL2_Config+0x15c>)
 800e14a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e14e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e150:	e00f      	b.n	800e172 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	2b01      	cmp	r3, #1
 800e156:	d106      	bne.n	800e166 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800e158:	4b15      	ldr	r3, [pc, #84]	@ (800e1b0 <RCCEx_PLL2_Config+0x15c>)
 800e15a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e15c:	4a14      	ldr	r2, [pc, #80]	@ (800e1b0 <RCCEx_PLL2_Config+0x15c>)
 800e15e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e162:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e164:	e005      	b.n	800e172 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e166:	4b12      	ldr	r3, [pc, #72]	@ (800e1b0 <RCCEx_PLL2_Config+0x15c>)
 800e168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e16a:	4a11      	ldr	r2, [pc, #68]	@ (800e1b0 <RCCEx_PLL2_Config+0x15c>)
 800e16c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e170:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800e172:	4b0f      	ldr	r3, [pc, #60]	@ (800e1b0 <RCCEx_PLL2_Config+0x15c>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	4a0e      	ldr	r2, [pc, #56]	@ (800e1b0 <RCCEx_PLL2_Config+0x15c>)
 800e178:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e17c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e17e:	f7f6 fad1 	bl	8004724 <HAL_GetTick>
 800e182:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e184:	e008      	b.n	800e198 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e186:	f7f6 facd 	bl	8004724 <HAL_GetTick>
 800e18a:	4602      	mov	r2, r0
 800e18c:	68bb      	ldr	r3, [r7, #8]
 800e18e:	1ad3      	subs	r3, r2, r3
 800e190:	2b02      	cmp	r3, #2
 800e192:	d901      	bls.n	800e198 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e194:	2303      	movs	r3, #3
 800e196:	e006      	b.n	800e1a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e198:	4b05      	ldr	r3, [pc, #20]	@ (800e1b0 <RCCEx_PLL2_Config+0x15c>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d0f0      	beq.n	800e186 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800e1a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3710      	adds	r7, #16
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}
 800e1ae:	bf00      	nop
 800e1b0:	58024400 	.word	0x58024400
 800e1b4:	ffff0007 	.word	0xffff0007

0800e1b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b084      	sub	sp, #16
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
 800e1c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e1c6:	4b53      	ldr	r3, [pc, #332]	@ (800e314 <RCCEx_PLL3_Config+0x15c>)
 800e1c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1ca:	f003 0303 	and.w	r3, r3, #3
 800e1ce:	2b03      	cmp	r3, #3
 800e1d0:	d101      	bne.n	800e1d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	e099      	b.n	800e30a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800e1d6:	4b4f      	ldr	r3, [pc, #316]	@ (800e314 <RCCEx_PLL3_Config+0x15c>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	4a4e      	ldr	r2, [pc, #312]	@ (800e314 <RCCEx_PLL3_Config+0x15c>)
 800e1dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e1e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e1e2:	f7f6 fa9f 	bl	8004724 <HAL_GetTick>
 800e1e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e1e8:	e008      	b.n	800e1fc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e1ea:	f7f6 fa9b 	bl	8004724 <HAL_GetTick>
 800e1ee:	4602      	mov	r2, r0
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	1ad3      	subs	r3, r2, r3
 800e1f4:	2b02      	cmp	r3, #2
 800e1f6:	d901      	bls.n	800e1fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e1f8:	2303      	movs	r3, #3
 800e1fa:	e086      	b.n	800e30a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e1fc:	4b45      	ldr	r3, [pc, #276]	@ (800e314 <RCCEx_PLL3_Config+0x15c>)
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e204:	2b00      	cmp	r3, #0
 800e206:	d1f0      	bne.n	800e1ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800e208:	4b42      	ldr	r3, [pc, #264]	@ (800e314 <RCCEx_PLL3_Config+0x15c>)
 800e20a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e20c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	051b      	lsls	r3, r3, #20
 800e216:	493f      	ldr	r1, [pc, #252]	@ (800e314 <RCCEx_PLL3_Config+0x15c>)
 800e218:	4313      	orrs	r3, r2
 800e21a:	628b      	str	r3, [r1, #40]	@ 0x28
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	685b      	ldr	r3, [r3, #4]
 800e220:	3b01      	subs	r3, #1
 800e222:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	689b      	ldr	r3, [r3, #8]
 800e22a:	3b01      	subs	r3, #1
 800e22c:	025b      	lsls	r3, r3, #9
 800e22e:	b29b      	uxth	r3, r3
 800e230:	431a      	orrs	r2, r3
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	68db      	ldr	r3, [r3, #12]
 800e236:	3b01      	subs	r3, #1
 800e238:	041b      	lsls	r3, r3, #16
 800e23a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e23e:	431a      	orrs	r2, r3
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	691b      	ldr	r3, [r3, #16]
 800e244:	3b01      	subs	r3, #1
 800e246:	061b      	lsls	r3, r3, #24
 800e248:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e24c:	4931      	ldr	r1, [pc, #196]	@ (800e314 <RCCEx_PLL3_Config+0x15c>)
 800e24e:	4313      	orrs	r3, r2
 800e250:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e252:	4b30      	ldr	r3, [pc, #192]	@ (800e314 <RCCEx_PLL3_Config+0x15c>)
 800e254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e256:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	695b      	ldr	r3, [r3, #20]
 800e25e:	492d      	ldr	r1, [pc, #180]	@ (800e314 <RCCEx_PLL3_Config+0x15c>)
 800e260:	4313      	orrs	r3, r2
 800e262:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e264:	4b2b      	ldr	r3, [pc, #172]	@ (800e314 <RCCEx_PLL3_Config+0x15c>)
 800e266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e268:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	699b      	ldr	r3, [r3, #24]
 800e270:	4928      	ldr	r1, [pc, #160]	@ (800e314 <RCCEx_PLL3_Config+0x15c>)
 800e272:	4313      	orrs	r3, r2
 800e274:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e276:	4b27      	ldr	r3, [pc, #156]	@ (800e314 <RCCEx_PLL3_Config+0x15c>)
 800e278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e27a:	4a26      	ldr	r2, [pc, #152]	@ (800e314 <RCCEx_PLL3_Config+0x15c>)
 800e27c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e280:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e282:	4b24      	ldr	r3, [pc, #144]	@ (800e314 <RCCEx_PLL3_Config+0x15c>)
 800e284:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e286:	4b24      	ldr	r3, [pc, #144]	@ (800e318 <RCCEx_PLL3_Config+0x160>)
 800e288:	4013      	ands	r3, r2
 800e28a:	687a      	ldr	r2, [r7, #4]
 800e28c:	69d2      	ldr	r2, [r2, #28]
 800e28e:	00d2      	lsls	r2, r2, #3
 800e290:	4920      	ldr	r1, [pc, #128]	@ (800e314 <RCCEx_PLL3_Config+0x15c>)
 800e292:	4313      	orrs	r3, r2
 800e294:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e296:	4b1f      	ldr	r3, [pc, #124]	@ (800e314 <RCCEx_PLL3_Config+0x15c>)
 800e298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e29a:	4a1e      	ldr	r2, [pc, #120]	@ (800e314 <RCCEx_PLL3_Config+0x15c>)
 800e29c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e2a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d106      	bne.n	800e2b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e2a8:	4b1a      	ldr	r3, [pc, #104]	@ (800e314 <RCCEx_PLL3_Config+0x15c>)
 800e2aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2ac:	4a19      	ldr	r2, [pc, #100]	@ (800e314 <RCCEx_PLL3_Config+0x15c>)
 800e2ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800e2b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e2b4:	e00f      	b.n	800e2d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	2b01      	cmp	r3, #1
 800e2ba:	d106      	bne.n	800e2ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e2bc:	4b15      	ldr	r3, [pc, #84]	@ (800e314 <RCCEx_PLL3_Config+0x15c>)
 800e2be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2c0:	4a14      	ldr	r2, [pc, #80]	@ (800e314 <RCCEx_PLL3_Config+0x15c>)
 800e2c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e2c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e2c8:	e005      	b.n	800e2d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e2ca:	4b12      	ldr	r3, [pc, #72]	@ (800e314 <RCCEx_PLL3_Config+0x15c>)
 800e2cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2ce:	4a11      	ldr	r2, [pc, #68]	@ (800e314 <RCCEx_PLL3_Config+0x15c>)
 800e2d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e2d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e2d6:	4b0f      	ldr	r3, [pc, #60]	@ (800e314 <RCCEx_PLL3_Config+0x15c>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	4a0e      	ldr	r2, [pc, #56]	@ (800e314 <RCCEx_PLL3_Config+0x15c>)
 800e2dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e2e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e2e2:	f7f6 fa1f 	bl	8004724 <HAL_GetTick>
 800e2e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e2e8:	e008      	b.n	800e2fc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e2ea:	f7f6 fa1b 	bl	8004724 <HAL_GetTick>
 800e2ee:	4602      	mov	r2, r0
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	1ad3      	subs	r3, r2, r3
 800e2f4:	2b02      	cmp	r3, #2
 800e2f6:	d901      	bls.n	800e2fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e2f8:	2303      	movs	r3, #3
 800e2fa:	e006      	b.n	800e30a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e2fc:	4b05      	ldr	r3, [pc, #20]	@ (800e314 <RCCEx_PLL3_Config+0x15c>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e304:	2b00      	cmp	r3, #0
 800e306:	d0f0      	beq.n	800e2ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e308:	7bfb      	ldrb	r3, [r7, #15]
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3710      	adds	r7, #16
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}
 800e312:	bf00      	nop
 800e314:	58024400 	.word	0x58024400
 800e318:	ffff0007 	.word	0xffff0007

0800e31c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b082      	sub	sp, #8
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d101      	bne.n	800e32e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e32a:	2301      	movs	r3, #1
 800e32c:	e049      	b.n	800e3c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e334:	b2db      	uxtb	r3, r3
 800e336:	2b00      	cmp	r3, #0
 800e338:	d106      	bne.n	800e348 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2200      	movs	r2, #0
 800e33e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e342:	6878      	ldr	r0, [r7, #4]
 800e344:	f7f5 fef2 	bl	800412c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2202      	movs	r2, #2
 800e34c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681a      	ldr	r2, [r3, #0]
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	3304      	adds	r3, #4
 800e358:	4619      	mov	r1, r3
 800e35a:	4610      	mov	r0, r2
 800e35c:	f000 fdbe 	bl	800eedc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2201      	movs	r2, #1
 800e364:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2201      	movs	r2, #1
 800e36c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2201      	movs	r2, #1
 800e374:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2201      	movs	r2, #1
 800e37c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2201      	movs	r2, #1
 800e384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2201      	movs	r2, #1
 800e38c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2201      	movs	r2, #1
 800e394:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	2201      	movs	r2, #1
 800e39c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2201      	movs	r2, #1
 800e3a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2201      	movs	r2, #1
 800e3ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2201      	movs	r2, #1
 800e3b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2201      	movs	r2, #1
 800e3bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e3c0:	2300      	movs	r3, #0
}
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	3708      	adds	r7, #8
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}
	...

0800e3cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e3cc:	b480      	push	{r7}
 800e3ce:	b085      	sub	sp, #20
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e3da:	b2db      	uxtb	r3, r3
 800e3dc:	2b01      	cmp	r3, #1
 800e3de:	d001      	beq.n	800e3e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	e056      	b.n	800e492 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2202      	movs	r2, #2
 800e3e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	4a2b      	ldr	r2, [pc, #172]	@ (800e4a0 <HAL_TIM_Base_Start+0xd4>)
 800e3f2:	4293      	cmp	r3, r2
 800e3f4:	d02c      	beq.n	800e450 <HAL_TIM_Base_Start+0x84>
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e3fe:	d027      	beq.n	800e450 <HAL_TIM_Base_Start+0x84>
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	4a27      	ldr	r2, [pc, #156]	@ (800e4a4 <HAL_TIM_Base_Start+0xd8>)
 800e406:	4293      	cmp	r3, r2
 800e408:	d022      	beq.n	800e450 <HAL_TIM_Base_Start+0x84>
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	4a26      	ldr	r2, [pc, #152]	@ (800e4a8 <HAL_TIM_Base_Start+0xdc>)
 800e410:	4293      	cmp	r3, r2
 800e412:	d01d      	beq.n	800e450 <HAL_TIM_Base_Start+0x84>
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	4a24      	ldr	r2, [pc, #144]	@ (800e4ac <HAL_TIM_Base_Start+0xe0>)
 800e41a:	4293      	cmp	r3, r2
 800e41c:	d018      	beq.n	800e450 <HAL_TIM_Base_Start+0x84>
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	4a23      	ldr	r2, [pc, #140]	@ (800e4b0 <HAL_TIM_Base_Start+0xe4>)
 800e424:	4293      	cmp	r3, r2
 800e426:	d013      	beq.n	800e450 <HAL_TIM_Base_Start+0x84>
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	4a21      	ldr	r2, [pc, #132]	@ (800e4b4 <HAL_TIM_Base_Start+0xe8>)
 800e42e:	4293      	cmp	r3, r2
 800e430:	d00e      	beq.n	800e450 <HAL_TIM_Base_Start+0x84>
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	4a20      	ldr	r2, [pc, #128]	@ (800e4b8 <HAL_TIM_Base_Start+0xec>)
 800e438:	4293      	cmp	r3, r2
 800e43a:	d009      	beq.n	800e450 <HAL_TIM_Base_Start+0x84>
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	4a1e      	ldr	r2, [pc, #120]	@ (800e4bc <HAL_TIM_Base_Start+0xf0>)
 800e442:	4293      	cmp	r3, r2
 800e444:	d004      	beq.n	800e450 <HAL_TIM_Base_Start+0x84>
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	4a1d      	ldr	r2, [pc, #116]	@ (800e4c0 <HAL_TIM_Base_Start+0xf4>)
 800e44c:	4293      	cmp	r3, r2
 800e44e:	d115      	bne.n	800e47c <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	689a      	ldr	r2, [r3, #8]
 800e456:	4b1b      	ldr	r3, [pc, #108]	@ (800e4c4 <HAL_TIM_Base_Start+0xf8>)
 800e458:	4013      	ands	r3, r2
 800e45a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	2b06      	cmp	r3, #6
 800e460:	d015      	beq.n	800e48e <HAL_TIM_Base_Start+0xc2>
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e468:	d011      	beq.n	800e48e <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	681a      	ldr	r2, [r3, #0]
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	f042 0201 	orr.w	r2, r2, #1
 800e478:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e47a:	e008      	b.n	800e48e <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	681a      	ldr	r2, [r3, #0]
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	f042 0201 	orr.w	r2, r2, #1
 800e48a:	601a      	str	r2, [r3, #0]
 800e48c:	e000      	b.n	800e490 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e48e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e490:	2300      	movs	r3, #0
}
 800e492:	4618      	mov	r0, r3
 800e494:	3714      	adds	r7, #20
 800e496:	46bd      	mov	sp, r7
 800e498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49c:	4770      	bx	lr
 800e49e:	bf00      	nop
 800e4a0:	40010000 	.word	0x40010000
 800e4a4:	40000400 	.word	0x40000400
 800e4a8:	40000800 	.word	0x40000800
 800e4ac:	40000c00 	.word	0x40000c00
 800e4b0:	40010400 	.word	0x40010400
 800e4b4:	40001800 	.word	0x40001800
 800e4b8:	40014000 	.word	0x40014000
 800e4bc:	4000e000 	.word	0x4000e000
 800e4c0:	4000e400 	.word	0x4000e400
 800e4c4:	00010007 	.word	0x00010007

0800e4c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b082      	sub	sp, #8
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d101      	bne.n	800e4da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	e049      	b.n	800e56e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e4e0:	b2db      	uxtb	r3, r3
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d106      	bne.n	800e4f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	f7f5 fd4c 	bl	8003f8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2202      	movs	r2, #2
 800e4f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681a      	ldr	r2, [r3, #0]
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	3304      	adds	r3, #4
 800e504:	4619      	mov	r1, r3
 800e506:	4610      	mov	r0, r2
 800e508:	f000 fce8 	bl	800eedc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2201      	movs	r2, #1
 800e510:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2201      	movs	r2, #1
 800e518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	2201      	movs	r2, #1
 800e520:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2201      	movs	r2, #1
 800e528:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2201      	movs	r2, #1
 800e530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2201      	movs	r2, #1
 800e538:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2201      	movs	r2, #1
 800e540:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2201      	movs	r2, #1
 800e548:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2201      	movs	r2, #1
 800e550:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	2201      	movs	r2, #1
 800e558:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	2201      	movs	r2, #1
 800e560:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	2201      	movs	r2, #1
 800e568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e56c:	2300      	movs	r3, #0
}
 800e56e:	4618      	mov	r0, r3
 800e570:	3708      	adds	r7, #8
 800e572:	46bd      	mov	sp, r7
 800e574:	bd80      	pop	{r7, pc}
	...

0800e578 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b084      	sub	sp, #16
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
 800e580:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d109      	bne.n	800e59c <HAL_TIM_PWM_Start+0x24>
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e58e:	b2db      	uxtb	r3, r3
 800e590:	2b01      	cmp	r3, #1
 800e592:	bf14      	ite	ne
 800e594:	2301      	movne	r3, #1
 800e596:	2300      	moveq	r3, #0
 800e598:	b2db      	uxtb	r3, r3
 800e59a:	e03c      	b.n	800e616 <HAL_TIM_PWM_Start+0x9e>
 800e59c:	683b      	ldr	r3, [r7, #0]
 800e59e:	2b04      	cmp	r3, #4
 800e5a0:	d109      	bne.n	800e5b6 <HAL_TIM_PWM_Start+0x3e>
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e5a8:	b2db      	uxtb	r3, r3
 800e5aa:	2b01      	cmp	r3, #1
 800e5ac:	bf14      	ite	ne
 800e5ae:	2301      	movne	r3, #1
 800e5b0:	2300      	moveq	r3, #0
 800e5b2:	b2db      	uxtb	r3, r3
 800e5b4:	e02f      	b.n	800e616 <HAL_TIM_PWM_Start+0x9e>
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	2b08      	cmp	r3, #8
 800e5ba:	d109      	bne.n	800e5d0 <HAL_TIM_PWM_Start+0x58>
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e5c2:	b2db      	uxtb	r3, r3
 800e5c4:	2b01      	cmp	r3, #1
 800e5c6:	bf14      	ite	ne
 800e5c8:	2301      	movne	r3, #1
 800e5ca:	2300      	moveq	r3, #0
 800e5cc:	b2db      	uxtb	r3, r3
 800e5ce:	e022      	b.n	800e616 <HAL_TIM_PWM_Start+0x9e>
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	2b0c      	cmp	r3, #12
 800e5d4:	d109      	bne.n	800e5ea <HAL_TIM_PWM_Start+0x72>
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e5dc:	b2db      	uxtb	r3, r3
 800e5de:	2b01      	cmp	r3, #1
 800e5e0:	bf14      	ite	ne
 800e5e2:	2301      	movne	r3, #1
 800e5e4:	2300      	moveq	r3, #0
 800e5e6:	b2db      	uxtb	r3, r3
 800e5e8:	e015      	b.n	800e616 <HAL_TIM_PWM_Start+0x9e>
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	2b10      	cmp	r3, #16
 800e5ee:	d109      	bne.n	800e604 <HAL_TIM_PWM_Start+0x8c>
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e5f6:	b2db      	uxtb	r3, r3
 800e5f8:	2b01      	cmp	r3, #1
 800e5fa:	bf14      	ite	ne
 800e5fc:	2301      	movne	r3, #1
 800e5fe:	2300      	moveq	r3, #0
 800e600:	b2db      	uxtb	r3, r3
 800e602:	e008      	b.n	800e616 <HAL_TIM_PWM_Start+0x9e>
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e60a:	b2db      	uxtb	r3, r3
 800e60c:	2b01      	cmp	r3, #1
 800e60e:	bf14      	ite	ne
 800e610:	2301      	movne	r3, #1
 800e612:	2300      	moveq	r3, #0
 800e614:	b2db      	uxtb	r3, r3
 800e616:	2b00      	cmp	r3, #0
 800e618:	d001      	beq.n	800e61e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e61a:	2301      	movs	r3, #1
 800e61c:	e0ab      	b.n	800e776 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d104      	bne.n	800e62e <HAL_TIM_PWM_Start+0xb6>
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2202      	movs	r2, #2
 800e628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e62c:	e023      	b.n	800e676 <HAL_TIM_PWM_Start+0xfe>
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	2b04      	cmp	r3, #4
 800e632:	d104      	bne.n	800e63e <HAL_TIM_PWM_Start+0xc6>
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2202      	movs	r2, #2
 800e638:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e63c:	e01b      	b.n	800e676 <HAL_TIM_PWM_Start+0xfe>
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	2b08      	cmp	r3, #8
 800e642:	d104      	bne.n	800e64e <HAL_TIM_PWM_Start+0xd6>
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2202      	movs	r2, #2
 800e648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e64c:	e013      	b.n	800e676 <HAL_TIM_PWM_Start+0xfe>
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	2b0c      	cmp	r3, #12
 800e652:	d104      	bne.n	800e65e <HAL_TIM_PWM_Start+0xe6>
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2202      	movs	r2, #2
 800e658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e65c:	e00b      	b.n	800e676 <HAL_TIM_PWM_Start+0xfe>
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	2b10      	cmp	r3, #16
 800e662:	d104      	bne.n	800e66e <HAL_TIM_PWM_Start+0xf6>
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2202      	movs	r2, #2
 800e668:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e66c:	e003      	b.n	800e676 <HAL_TIM_PWM_Start+0xfe>
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	2202      	movs	r2, #2
 800e672:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	2201      	movs	r2, #1
 800e67c:	6839      	ldr	r1, [r7, #0]
 800e67e:	4618      	mov	r0, r3
 800e680:	f001 f97c 	bl	800f97c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	4a3d      	ldr	r2, [pc, #244]	@ (800e780 <HAL_TIM_PWM_Start+0x208>)
 800e68a:	4293      	cmp	r3, r2
 800e68c:	d013      	beq.n	800e6b6 <HAL_TIM_PWM_Start+0x13e>
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	4a3c      	ldr	r2, [pc, #240]	@ (800e784 <HAL_TIM_PWM_Start+0x20c>)
 800e694:	4293      	cmp	r3, r2
 800e696:	d00e      	beq.n	800e6b6 <HAL_TIM_PWM_Start+0x13e>
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	4a3a      	ldr	r2, [pc, #232]	@ (800e788 <HAL_TIM_PWM_Start+0x210>)
 800e69e:	4293      	cmp	r3, r2
 800e6a0:	d009      	beq.n	800e6b6 <HAL_TIM_PWM_Start+0x13e>
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	4a39      	ldr	r2, [pc, #228]	@ (800e78c <HAL_TIM_PWM_Start+0x214>)
 800e6a8:	4293      	cmp	r3, r2
 800e6aa:	d004      	beq.n	800e6b6 <HAL_TIM_PWM_Start+0x13e>
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	4a37      	ldr	r2, [pc, #220]	@ (800e790 <HAL_TIM_PWM_Start+0x218>)
 800e6b2:	4293      	cmp	r3, r2
 800e6b4:	d101      	bne.n	800e6ba <HAL_TIM_PWM_Start+0x142>
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	e000      	b.n	800e6bc <HAL_TIM_PWM_Start+0x144>
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d007      	beq.n	800e6d0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e6ce:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	4a2a      	ldr	r2, [pc, #168]	@ (800e780 <HAL_TIM_PWM_Start+0x208>)
 800e6d6:	4293      	cmp	r3, r2
 800e6d8:	d02c      	beq.n	800e734 <HAL_TIM_PWM_Start+0x1bc>
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e6e2:	d027      	beq.n	800e734 <HAL_TIM_PWM_Start+0x1bc>
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	4a2a      	ldr	r2, [pc, #168]	@ (800e794 <HAL_TIM_PWM_Start+0x21c>)
 800e6ea:	4293      	cmp	r3, r2
 800e6ec:	d022      	beq.n	800e734 <HAL_TIM_PWM_Start+0x1bc>
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	4a29      	ldr	r2, [pc, #164]	@ (800e798 <HAL_TIM_PWM_Start+0x220>)
 800e6f4:	4293      	cmp	r3, r2
 800e6f6:	d01d      	beq.n	800e734 <HAL_TIM_PWM_Start+0x1bc>
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	4a27      	ldr	r2, [pc, #156]	@ (800e79c <HAL_TIM_PWM_Start+0x224>)
 800e6fe:	4293      	cmp	r3, r2
 800e700:	d018      	beq.n	800e734 <HAL_TIM_PWM_Start+0x1bc>
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	4a1f      	ldr	r2, [pc, #124]	@ (800e784 <HAL_TIM_PWM_Start+0x20c>)
 800e708:	4293      	cmp	r3, r2
 800e70a:	d013      	beq.n	800e734 <HAL_TIM_PWM_Start+0x1bc>
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	4a23      	ldr	r2, [pc, #140]	@ (800e7a0 <HAL_TIM_PWM_Start+0x228>)
 800e712:	4293      	cmp	r3, r2
 800e714:	d00e      	beq.n	800e734 <HAL_TIM_PWM_Start+0x1bc>
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	4a1b      	ldr	r2, [pc, #108]	@ (800e788 <HAL_TIM_PWM_Start+0x210>)
 800e71c:	4293      	cmp	r3, r2
 800e71e:	d009      	beq.n	800e734 <HAL_TIM_PWM_Start+0x1bc>
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	4a1f      	ldr	r2, [pc, #124]	@ (800e7a4 <HAL_TIM_PWM_Start+0x22c>)
 800e726:	4293      	cmp	r3, r2
 800e728:	d004      	beq.n	800e734 <HAL_TIM_PWM_Start+0x1bc>
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	4a1e      	ldr	r2, [pc, #120]	@ (800e7a8 <HAL_TIM_PWM_Start+0x230>)
 800e730:	4293      	cmp	r3, r2
 800e732:	d115      	bne.n	800e760 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	689a      	ldr	r2, [r3, #8]
 800e73a:	4b1c      	ldr	r3, [pc, #112]	@ (800e7ac <HAL_TIM_PWM_Start+0x234>)
 800e73c:	4013      	ands	r3, r2
 800e73e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	2b06      	cmp	r3, #6
 800e744:	d015      	beq.n	800e772 <HAL_TIM_PWM_Start+0x1fa>
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e74c:	d011      	beq.n	800e772 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	681a      	ldr	r2, [r3, #0]
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	f042 0201 	orr.w	r2, r2, #1
 800e75c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e75e:	e008      	b.n	800e772 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	681a      	ldr	r2, [r3, #0]
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	f042 0201 	orr.w	r2, r2, #1
 800e76e:	601a      	str	r2, [r3, #0]
 800e770:	e000      	b.n	800e774 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e772:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e774:	2300      	movs	r3, #0
}
 800e776:	4618      	mov	r0, r3
 800e778:	3710      	adds	r7, #16
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bd80      	pop	{r7, pc}
 800e77e:	bf00      	nop
 800e780:	40010000 	.word	0x40010000
 800e784:	40010400 	.word	0x40010400
 800e788:	40014000 	.word	0x40014000
 800e78c:	40014400 	.word	0x40014400
 800e790:	40014800 	.word	0x40014800
 800e794:	40000400 	.word	0x40000400
 800e798:	40000800 	.word	0x40000800
 800e79c:	40000c00 	.word	0x40000c00
 800e7a0:	40001800 	.word	0x40001800
 800e7a4:	4000e000 	.word	0x4000e000
 800e7a8:	4000e400 	.word	0x4000e400
 800e7ac:	00010007 	.word	0x00010007

0800e7b0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b082      	sub	sp, #8
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
 800e7b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	2200      	movs	r2, #0
 800e7c0:	6839      	ldr	r1, [r7, #0]
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f001 f8da 	bl	800f97c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	4a3e      	ldr	r2, [pc, #248]	@ (800e8c8 <HAL_TIM_PWM_Stop+0x118>)
 800e7ce:	4293      	cmp	r3, r2
 800e7d0:	d013      	beq.n	800e7fa <HAL_TIM_PWM_Stop+0x4a>
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	4a3d      	ldr	r2, [pc, #244]	@ (800e8cc <HAL_TIM_PWM_Stop+0x11c>)
 800e7d8:	4293      	cmp	r3, r2
 800e7da:	d00e      	beq.n	800e7fa <HAL_TIM_PWM_Stop+0x4a>
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	4a3b      	ldr	r2, [pc, #236]	@ (800e8d0 <HAL_TIM_PWM_Stop+0x120>)
 800e7e2:	4293      	cmp	r3, r2
 800e7e4:	d009      	beq.n	800e7fa <HAL_TIM_PWM_Stop+0x4a>
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	4a3a      	ldr	r2, [pc, #232]	@ (800e8d4 <HAL_TIM_PWM_Stop+0x124>)
 800e7ec:	4293      	cmp	r3, r2
 800e7ee:	d004      	beq.n	800e7fa <HAL_TIM_PWM_Stop+0x4a>
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	4a38      	ldr	r2, [pc, #224]	@ (800e8d8 <HAL_TIM_PWM_Stop+0x128>)
 800e7f6:	4293      	cmp	r3, r2
 800e7f8:	d101      	bne.n	800e7fe <HAL_TIM_PWM_Stop+0x4e>
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	e000      	b.n	800e800 <HAL_TIM_PWM_Stop+0x50>
 800e7fe:	2300      	movs	r3, #0
 800e800:	2b00      	cmp	r3, #0
 800e802:	d017      	beq.n	800e834 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	6a1a      	ldr	r2, [r3, #32]
 800e80a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e80e:	4013      	ands	r3, r2
 800e810:	2b00      	cmp	r3, #0
 800e812:	d10f      	bne.n	800e834 <HAL_TIM_PWM_Stop+0x84>
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	6a1a      	ldr	r2, [r3, #32]
 800e81a:	f240 4344 	movw	r3, #1092	@ 0x444
 800e81e:	4013      	ands	r3, r2
 800e820:	2b00      	cmp	r3, #0
 800e822:	d107      	bne.n	800e834 <HAL_TIM_PWM_Stop+0x84>
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e832:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	6a1a      	ldr	r2, [r3, #32]
 800e83a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e83e:	4013      	ands	r3, r2
 800e840:	2b00      	cmp	r3, #0
 800e842:	d10f      	bne.n	800e864 <HAL_TIM_PWM_Stop+0xb4>
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	6a1a      	ldr	r2, [r3, #32]
 800e84a:	f240 4344 	movw	r3, #1092	@ 0x444
 800e84e:	4013      	ands	r3, r2
 800e850:	2b00      	cmp	r3, #0
 800e852:	d107      	bne.n	800e864 <HAL_TIM_PWM_Stop+0xb4>
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	681a      	ldr	r2, [r3, #0]
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f022 0201 	bic.w	r2, r2, #1
 800e862:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d104      	bne.n	800e874 <HAL_TIM_PWM_Stop+0xc4>
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2201      	movs	r2, #1
 800e86e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e872:	e023      	b.n	800e8bc <HAL_TIM_PWM_Stop+0x10c>
 800e874:	683b      	ldr	r3, [r7, #0]
 800e876:	2b04      	cmp	r3, #4
 800e878:	d104      	bne.n	800e884 <HAL_TIM_PWM_Stop+0xd4>
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	2201      	movs	r2, #1
 800e87e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e882:	e01b      	b.n	800e8bc <HAL_TIM_PWM_Stop+0x10c>
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	2b08      	cmp	r3, #8
 800e888:	d104      	bne.n	800e894 <HAL_TIM_PWM_Stop+0xe4>
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	2201      	movs	r2, #1
 800e88e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e892:	e013      	b.n	800e8bc <HAL_TIM_PWM_Stop+0x10c>
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	2b0c      	cmp	r3, #12
 800e898:	d104      	bne.n	800e8a4 <HAL_TIM_PWM_Stop+0xf4>
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2201      	movs	r2, #1
 800e89e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e8a2:	e00b      	b.n	800e8bc <HAL_TIM_PWM_Stop+0x10c>
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	2b10      	cmp	r3, #16
 800e8a8:	d104      	bne.n	800e8b4 <HAL_TIM_PWM_Stop+0x104>
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2201      	movs	r2, #1
 800e8ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e8b2:	e003      	b.n	800e8bc <HAL_TIM_PWM_Stop+0x10c>
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2201      	movs	r2, #1
 800e8b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800e8bc:	2300      	movs	r3, #0
}
 800e8be:	4618      	mov	r0, r3
 800e8c0:	3708      	adds	r7, #8
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	bd80      	pop	{r7, pc}
 800e8c6:	bf00      	nop
 800e8c8:	40010000 	.word	0x40010000
 800e8cc:	40010400 	.word	0x40010400
 800e8d0:	40014000 	.word	0x40014000
 800e8d4:	40014400 	.word	0x40014400
 800e8d8:	40014800 	.word	0x40014800

0800e8dc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b082      	sub	sp, #8
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d101      	bne.n	800e8ee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800e8ea:	2301      	movs	r3, #1
 800e8ec:	e049      	b.n	800e982 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e8f4:	b2db      	uxtb	r3, r3
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d106      	bne.n	800e908 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800e902:	6878      	ldr	r0, [r7, #4]
 800e904:	f7f5 fb90 	bl	8004028 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2202      	movs	r2, #2
 800e90c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681a      	ldr	r2, [r3, #0]
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	3304      	adds	r3, #4
 800e918:	4619      	mov	r1, r3
 800e91a:	4610      	mov	r0, r2
 800e91c:	f000 fade 	bl	800eedc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2201      	movs	r2, #1
 800e924:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2201      	movs	r2, #1
 800e92c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	2201      	movs	r2, #1
 800e934:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2201      	movs	r2, #1
 800e93c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2201      	movs	r2, #1
 800e944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2201      	movs	r2, #1
 800e94c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2201      	movs	r2, #1
 800e954:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2201      	movs	r2, #1
 800e95c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2201      	movs	r2, #1
 800e964:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2201      	movs	r2, #1
 800e96c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	2201      	movs	r2, #1
 800e974:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2201      	movs	r2, #1
 800e97c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e980:	2300      	movs	r3, #0
}
 800e982:	4618      	mov	r0, r3
 800e984:	3708      	adds	r7, #8
 800e986:	46bd      	mov	sp, r7
 800e988:	bd80      	pop	{r7, pc}

0800e98a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800e98a:	b580      	push	{r7, lr}
 800e98c:	b086      	sub	sp, #24
 800e98e:	af00      	add	r7, sp, #0
 800e990:	60f8      	str	r0, [r7, #12]
 800e992:	60b9      	str	r1, [r7, #8]
 800e994:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e996:	2300      	movs	r3, #0
 800e998:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e9a0:	2b01      	cmp	r3, #1
 800e9a2:	d101      	bne.n	800e9a8 <HAL_TIM_IC_ConfigChannel+0x1e>
 800e9a4:	2302      	movs	r3, #2
 800e9a6:	e088      	b.n	800eaba <HAL_TIM_IC_ConfigChannel+0x130>
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	2201      	movs	r2, #1
 800e9ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d11b      	bne.n	800e9ee <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e9ba:	68bb      	ldr	r3, [r7, #8]
 800e9bc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e9be:	68bb      	ldr	r3, [r7, #8]
 800e9c0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e9c2:	68bb      	ldr	r3, [r7, #8]
 800e9c4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800e9c6:	f000 fe05 	bl	800f5d4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	699a      	ldr	r2, [r3, #24]
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	f022 020c 	bic.w	r2, r2, #12
 800e9d8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	6999      	ldr	r1, [r3, #24]
 800e9e0:	68bb      	ldr	r3, [r7, #8]
 800e9e2:	689a      	ldr	r2, [r3, #8]
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	430a      	orrs	r2, r1
 800e9ea:	619a      	str	r2, [r3, #24]
 800e9ec:	e060      	b.n	800eab0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2b04      	cmp	r3, #4
 800e9f2:	d11c      	bne.n	800ea2e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ea00:	68bb      	ldr	r3, [r7, #8]
 800ea02:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800ea04:	f000 fe95 	bl	800f732 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	699a      	ldr	r2, [r3, #24]
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800ea16:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	6999      	ldr	r1, [r3, #24]
 800ea1e:	68bb      	ldr	r3, [r7, #8]
 800ea20:	689b      	ldr	r3, [r3, #8]
 800ea22:	021a      	lsls	r2, r3, #8
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	430a      	orrs	r2, r1
 800ea2a:	619a      	str	r2, [r3, #24]
 800ea2c:	e040      	b.n	800eab0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	2b08      	cmp	r3, #8
 800ea32:	d11b      	bne.n	800ea6c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ea38:	68bb      	ldr	r3, [r7, #8]
 800ea3a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ea3c:	68bb      	ldr	r3, [r7, #8]
 800ea3e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ea40:	68bb      	ldr	r3, [r7, #8]
 800ea42:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800ea44:	f000 fee2 	bl	800f80c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	69da      	ldr	r2, [r3, #28]
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	f022 020c 	bic.w	r2, r2, #12
 800ea56:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	69d9      	ldr	r1, [r3, #28]
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	689a      	ldr	r2, [r3, #8]
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	430a      	orrs	r2, r1
 800ea68:	61da      	str	r2, [r3, #28]
 800ea6a:	e021      	b.n	800eab0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2b0c      	cmp	r3, #12
 800ea70:	d11c      	bne.n	800eaac <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ea7e:	68bb      	ldr	r3, [r7, #8]
 800ea80:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800ea82:	f000 feff 	bl	800f884 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	69da      	ldr	r2, [r3, #28]
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800ea94:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	69d9      	ldr	r1, [r3, #28]
 800ea9c:	68bb      	ldr	r3, [r7, #8]
 800ea9e:	689b      	ldr	r3, [r3, #8]
 800eaa0:	021a      	lsls	r2, r3, #8
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	430a      	orrs	r2, r1
 800eaa8:	61da      	str	r2, [r3, #28]
 800eaaa:	e001      	b.n	800eab0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800eaac:	2301      	movs	r3, #1
 800eaae:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	2200      	movs	r2, #0
 800eab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800eab8:	7dfb      	ldrb	r3, [r7, #23]
}
 800eaba:	4618      	mov	r0, r3
 800eabc:	3718      	adds	r7, #24
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}
	...

0800eac4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b086      	sub	sp, #24
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	60f8      	str	r0, [r7, #12]
 800eacc:	60b9      	str	r1, [r7, #8]
 800eace:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ead0:	2300      	movs	r3, #0
 800ead2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800eada:	2b01      	cmp	r3, #1
 800eadc:	d101      	bne.n	800eae2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800eade:	2302      	movs	r3, #2
 800eae0:	e0ff      	b.n	800ece2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	2201      	movs	r2, #1
 800eae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	2b14      	cmp	r3, #20
 800eaee:	f200 80f0 	bhi.w	800ecd2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800eaf2:	a201      	add	r2, pc, #4	@ (adr r2, 800eaf8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800eaf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaf8:	0800eb4d 	.word	0x0800eb4d
 800eafc:	0800ecd3 	.word	0x0800ecd3
 800eb00:	0800ecd3 	.word	0x0800ecd3
 800eb04:	0800ecd3 	.word	0x0800ecd3
 800eb08:	0800eb8d 	.word	0x0800eb8d
 800eb0c:	0800ecd3 	.word	0x0800ecd3
 800eb10:	0800ecd3 	.word	0x0800ecd3
 800eb14:	0800ecd3 	.word	0x0800ecd3
 800eb18:	0800ebcf 	.word	0x0800ebcf
 800eb1c:	0800ecd3 	.word	0x0800ecd3
 800eb20:	0800ecd3 	.word	0x0800ecd3
 800eb24:	0800ecd3 	.word	0x0800ecd3
 800eb28:	0800ec0f 	.word	0x0800ec0f
 800eb2c:	0800ecd3 	.word	0x0800ecd3
 800eb30:	0800ecd3 	.word	0x0800ecd3
 800eb34:	0800ecd3 	.word	0x0800ecd3
 800eb38:	0800ec51 	.word	0x0800ec51
 800eb3c:	0800ecd3 	.word	0x0800ecd3
 800eb40:	0800ecd3 	.word	0x0800ecd3
 800eb44:	0800ecd3 	.word	0x0800ecd3
 800eb48:	0800ec91 	.word	0x0800ec91
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	68b9      	ldr	r1, [r7, #8]
 800eb52:	4618      	mov	r0, r3
 800eb54:	f000 fa68 	bl	800f028 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	699a      	ldr	r2, [r3, #24]
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	f042 0208 	orr.w	r2, r2, #8
 800eb66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	699a      	ldr	r2, [r3, #24]
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	f022 0204 	bic.w	r2, r2, #4
 800eb76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	6999      	ldr	r1, [r3, #24]
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	691a      	ldr	r2, [r3, #16]
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	430a      	orrs	r2, r1
 800eb88:	619a      	str	r2, [r3, #24]
      break;
 800eb8a:	e0a5      	b.n	800ecd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	68b9      	ldr	r1, [r7, #8]
 800eb92:	4618      	mov	r0, r3
 800eb94:	f000 fad8 	bl	800f148 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	699a      	ldr	r2, [r3, #24]
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800eba6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	699a      	ldr	r2, [r3, #24]
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ebb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	6999      	ldr	r1, [r3, #24]
 800ebbe:	68bb      	ldr	r3, [r7, #8]
 800ebc0:	691b      	ldr	r3, [r3, #16]
 800ebc2:	021a      	lsls	r2, r3, #8
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	430a      	orrs	r2, r1
 800ebca:	619a      	str	r2, [r3, #24]
      break;
 800ebcc:	e084      	b.n	800ecd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	68b9      	ldr	r1, [r7, #8]
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	f000 fb41 	bl	800f25c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	69da      	ldr	r2, [r3, #28]
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	f042 0208 	orr.w	r2, r2, #8
 800ebe8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	69da      	ldr	r2, [r3, #28]
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	f022 0204 	bic.w	r2, r2, #4
 800ebf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	69d9      	ldr	r1, [r3, #28]
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	691a      	ldr	r2, [r3, #16]
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	430a      	orrs	r2, r1
 800ec0a:	61da      	str	r2, [r3, #28]
      break;
 800ec0c:	e064      	b.n	800ecd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	68b9      	ldr	r1, [r7, #8]
 800ec14:	4618      	mov	r0, r3
 800ec16:	f000 fba9 	bl	800f36c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	69da      	ldr	r2, [r3, #28]
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ec28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	69da      	ldr	r2, [r3, #28]
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ec38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	69d9      	ldr	r1, [r3, #28]
 800ec40:	68bb      	ldr	r3, [r7, #8]
 800ec42:	691b      	ldr	r3, [r3, #16]
 800ec44:	021a      	lsls	r2, r3, #8
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	430a      	orrs	r2, r1
 800ec4c:	61da      	str	r2, [r3, #28]
      break;
 800ec4e:	e043      	b.n	800ecd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	68b9      	ldr	r1, [r7, #8]
 800ec56:	4618      	mov	r0, r3
 800ec58:	f000 fbf2 	bl	800f440 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	f042 0208 	orr.w	r2, r2, #8
 800ec6a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	f022 0204 	bic.w	r2, r2, #4
 800ec7a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ec82:	68bb      	ldr	r3, [r7, #8]
 800ec84:	691a      	ldr	r2, [r3, #16]
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	430a      	orrs	r2, r1
 800ec8c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ec8e:	e023      	b.n	800ecd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	68b9      	ldr	r1, [r7, #8]
 800ec96:	4618      	mov	r0, r3
 800ec98:	f000 fc36 	bl	800f508 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ecaa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ecba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ecc2:	68bb      	ldr	r3, [r7, #8]
 800ecc4:	691b      	ldr	r3, [r3, #16]
 800ecc6:	021a      	lsls	r2, r3, #8
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	430a      	orrs	r2, r1
 800ecce:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ecd0:	e002      	b.n	800ecd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ecd2:	2301      	movs	r3, #1
 800ecd4:	75fb      	strb	r3, [r7, #23]
      break;
 800ecd6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	2200      	movs	r2, #0
 800ecdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ece0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ece2:	4618      	mov	r0, r3
 800ece4:	3718      	adds	r7, #24
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}
 800ecea:	bf00      	nop

0800ecec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b084      	sub	sp, #16
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
 800ecf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ed00:	2b01      	cmp	r3, #1
 800ed02:	d101      	bne.n	800ed08 <HAL_TIM_ConfigClockSource+0x1c>
 800ed04:	2302      	movs	r3, #2
 800ed06:	e0dc      	b.n	800eec2 <HAL_TIM_ConfigClockSource+0x1d6>
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2201      	movs	r2, #1
 800ed0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2202      	movs	r2, #2
 800ed14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	689b      	ldr	r3, [r3, #8]
 800ed1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ed20:	68ba      	ldr	r2, [r7, #8]
 800ed22:	4b6a      	ldr	r3, [pc, #424]	@ (800eecc <HAL_TIM_ConfigClockSource+0x1e0>)
 800ed24:	4013      	ands	r3, r2
 800ed26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ed28:	68bb      	ldr	r3, [r7, #8]
 800ed2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ed2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	68ba      	ldr	r2, [r7, #8]
 800ed36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	4a64      	ldr	r2, [pc, #400]	@ (800eed0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ed3e:	4293      	cmp	r3, r2
 800ed40:	f000 80a9 	beq.w	800ee96 <HAL_TIM_ConfigClockSource+0x1aa>
 800ed44:	4a62      	ldr	r2, [pc, #392]	@ (800eed0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ed46:	4293      	cmp	r3, r2
 800ed48:	f200 80ae 	bhi.w	800eea8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed4c:	4a61      	ldr	r2, [pc, #388]	@ (800eed4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ed4e:	4293      	cmp	r3, r2
 800ed50:	f000 80a1 	beq.w	800ee96 <HAL_TIM_ConfigClockSource+0x1aa>
 800ed54:	4a5f      	ldr	r2, [pc, #380]	@ (800eed4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ed56:	4293      	cmp	r3, r2
 800ed58:	f200 80a6 	bhi.w	800eea8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed5c:	4a5e      	ldr	r2, [pc, #376]	@ (800eed8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ed5e:	4293      	cmp	r3, r2
 800ed60:	f000 8099 	beq.w	800ee96 <HAL_TIM_ConfigClockSource+0x1aa>
 800ed64:	4a5c      	ldr	r2, [pc, #368]	@ (800eed8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ed66:	4293      	cmp	r3, r2
 800ed68:	f200 809e 	bhi.w	800eea8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed6c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ed70:	f000 8091 	beq.w	800ee96 <HAL_TIM_ConfigClockSource+0x1aa>
 800ed74:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ed78:	f200 8096 	bhi.w	800eea8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ed80:	f000 8089 	beq.w	800ee96 <HAL_TIM_ConfigClockSource+0x1aa>
 800ed84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ed88:	f200 808e 	bhi.w	800eea8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ed90:	d03e      	beq.n	800ee10 <HAL_TIM_ConfigClockSource+0x124>
 800ed92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ed96:	f200 8087 	bhi.w	800eea8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ed9e:	f000 8086 	beq.w	800eeae <HAL_TIM_ConfigClockSource+0x1c2>
 800eda2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eda6:	d87f      	bhi.n	800eea8 <HAL_TIM_ConfigClockSource+0x1bc>
 800eda8:	2b70      	cmp	r3, #112	@ 0x70
 800edaa:	d01a      	beq.n	800ede2 <HAL_TIM_ConfigClockSource+0xf6>
 800edac:	2b70      	cmp	r3, #112	@ 0x70
 800edae:	d87b      	bhi.n	800eea8 <HAL_TIM_ConfigClockSource+0x1bc>
 800edb0:	2b60      	cmp	r3, #96	@ 0x60
 800edb2:	d050      	beq.n	800ee56 <HAL_TIM_ConfigClockSource+0x16a>
 800edb4:	2b60      	cmp	r3, #96	@ 0x60
 800edb6:	d877      	bhi.n	800eea8 <HAL_TIM_ConfigClockSource+0x1bc>
 800edb8:	2b50      	cmp	r3, #80	@ 0x50
 800edba:	d03c      	beq.n	800ee36 <HAL_TIM_ConfigClockSource+0x14a>
 800edbc:	2b50      	cmp	r3, #80	@ 0x50
 800edbe:	d873      	bhi.n	800eea8 <HAL_TIM_ConfigClockSource+0x1bc>
 800edc0:	2b40      	cmp	r3, #64	@ 0x40
 800edc2:	d058      	beq.n	800ee76 <HAL_TIM_ConfigClockSource+0x18a>
 800edc4:	2b40      	cmp	r3, #64	@ 0x40
 800edc6:	d86f      	bhi.n	800eea8 <HAL_TIM_ConfigClockSource+0x1bc>
 800edc8:	2b30      	cmp	r3, #48	@ 0x30
 800edca:	d064      	beq.n	800ee96 <HAL_TIM_ConfigClockSource+0x1aa>
 800edcc:	2b30      	cmp	r3, #48	@ 0x30
 800edce:	d86b      	bhi.n	800eea8 <HAL_TIM_ConfigClockSource+0x1bc>
 800edd0:	2b20      	cmp	r3, #32
 800edd2:	d060      	beq.n	800ee96 <HAL_TIM_ConfigClockSource+0x1aa>
 800edd4:	2b20      	cmp	r3, #32
 800edd6:	d867      	bhi.n	800eea8 <HAL_TIM_ConfigClockSource+0x1bc>
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d05c      	beq.n	800ee96 <HAL_TIM_ConfigClockSource+0x1aa>
 800eddc:	2b10      	cmp	r3, #16
 800edde:	d05a      	beq.n	800ee96 <HAL_TIM_ConfigClockSource+0x1aa>
 800ede0:	e062      	b.n	800eea8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800edea:	683b      	ldr	r3, [r7, #0]
 800edec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800edf2:	f000 fda3 	bl	800f93c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	689b      	ldr	r3, [r3, #8]
 800edfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ee04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	68ba      	ldr	r2, [r7, #8]
 800ee0c:	609a      	str	r2, [r3, #8]
      break;
 800ee0e:	e04f      	b.n	800eeb0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ee14:	683b      	ldr	r3, [r7, #0]
 800ee16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ee1c:	683b      	ldr	r3, [r7, #0]
 800ee1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ee20:	f000 fd8c 	bl	800f93c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	689a      	ldr	r2, [r3, #8]
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ee32:	609a      	str	r2, [r3, #8]
      break;
 800ee34:	e03c      	b.n	800eeb0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee42:	461a      	mov	r2, r3
 800ee44:	f000 fc46 	bl	800f6d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	2150      	movs	r1, #80	@ 0x50
 800ee4e:	4618      	mov	r0, r3
 800ee50:	f000 fd56 	bl	800f900 <TIM_ITRx_SetConfig>
      break;
 800ee54:	e02c      	b.n	800eeb0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ee62:	461a      	mov	r2, r3
 800ee64:	f000 fca2 	bl	800f7ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	2160      	movs	r1, #96	@ 0x60
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f000 fd46 	bl	800f900 <TIM_ITRx_SetConfig>
      break;
 800ee74:	e01c      	b.n	800eeb0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee82:	461a      	mov	r2, r3
 800ee84:	f000 fc26 	bl	800f6d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	2140      	movs	r1, #64	@ 0x40
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f000 fd36 	bl	800f900 <TIM_ITRx_SetConfig>
      break;
 800ee94:	e00c      	b.n	800eeb0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681a      	ldr	r2, [r3, #0]
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	4619      	mov	r1, r3
 800eea0:	4610      	mov	r0, r2
 800eea2:	f000 fd2d 	bl	800f900 <TIM_ITRx_SetConfig>
      break;
 800eea6:	e003      	b.n	800eeb0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800eea8:	2301      	movs	r3, #1
 800eeaa:	73fb      	strb	r3, [r7, #15]
      break;
 800eeac:	e000      	b.n	800eeb0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800eeae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2201      	movs	r2, #1
 800eeb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	2200      	movs	r2, #0
 800eebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800eec0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eec2:	4618      	mov	r0, r3
 800eec4:	3710      	adds	r7, #16
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}
 800eeca:	bf00      	nop
 800eecc:	ffceff88 	.word	0xffceff88
 800eed0:	00100040 	.word	0x00100040
 800eed4:	00100030 	.word	0x00100030
 800eed8:	00100020 	.word	0x00100020

0800eedc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800eedc:	b480      	push	{r7}
 800eede:	b085      	sub	sp, #20
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
 800eee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	4a44      	ldr	r2, [pc, #272]	@ (800f000 <TIM_Base_SetConfig+0x124>)
 800eef0:	4293      	cmp	r3, r2
 800eef2:	d013      	beq.n	800ef1c <TIM_Base_SetConfig+0x40>
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eefa:	d00f      	beq.n	800ef1c <TIM_Base_SetConfig+0x40>
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	4a41      	ldr	r2, [pc, #260]	@ (800f004 <TIM_Base_SetConfig+0x128>)
 800ef00:	4293      	cmp	r3, r2
 800ef02:	d00b      	beq.n	800ef1c <TIM_Base_SetConfig+0x40>
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	4a40      	ldr	r2, [pc, #256]	@ (800f008 <TIM_Base_SetConfig+0x12c>)
 800ef08:	4293      	cmp	r3, r2
 800ef0a:	d007      	beq.n	800ef1c <TIM_Base_SetConfig+0x40>
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	4a3f      	ldr	r2, [pc, #252]	@ (800f00c <TIM_Base_SetConfig+0x130>)
 800ef10:	4293      	cmp	r3, r2
 800ef12:	d003      	beq.n	800ef1c <TIM_Base_SetConfig+0x40>
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	4a3e      	ldr	r2, [pc, #248]	@ (800f010 <TIM_Base_SetConfig+0x134>)
 800ef18:	4293      	cmp	r3, r2
 800ef1a:	d108      	bne.n	800ef2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ef22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	685b      	ldr	r3, [r3, #4]
 800ef28:	68fa      	ldr	r2, [r7, #12]
 800ef2a:	4313      	orrs	r3, r2
 800ef2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	4a33      	ldr	r2, [pc, #204]	@ (800f000 <TIM_Base_SetConfig+0x124>)
 800ef32:	4293      	cmp	r3, r2
 800ef34:	d027      	beq.n	800ef86 <TIM_Base_SetConfig+0xaa>
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef3c:	d023      	beq.n	800ef86 <TIM_Base_SetConfig+0xaa>
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	4a30      	ldr	r2, [pc, #192]	@ (800f004 <TIM_Base_SetConfig+0x128>)
 800ef42:	4293      	cmp	r3, r2
 800ef44:	d01f      	beq.n	800ef86 <TIM_Base_SetConfig+0xaa>
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	4a2f      	ldr	r2, [pc, #188]	@ (800f008 <TIM_Base_SetConfig+0x12c>)
 800ef4a:	4293      	cmp	r3, r2
 800ef4c:	d01b      	beq.n	800ef86 <TIM_Base_SetConfig+0xaa>
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	4a2e      	ldr	r2, [pc, #184]	@ (800f00c <TIM_Base_SetConfig+0x130>)
 800ef52:	4293      	cmp	r3, r2
 800ef54:	d017      	beq.n	800ef86 <TIM_Base_SetConfig+0xaa>
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	4a2d      	ldr	r2, [pc, #180]	@ (800f010 <TIM_Base_SetConfig+0x134>)
 800ef5a:	4293      	cmp	r3, r2
 800ef5c:	d013      	beq.n	800ef86 <TIM_Base_SetConfig+0xaa>
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	4a2c      	ldr	r2, [pc, #176]	@ (800f014 <TIM_Base_SetConfig+0x138>)
 800ef62:	4293      	cmp	r3, r2
 800ef64:	d00f      	beq.n	800ef86 <TIM_Base_SetConfig+0xaa>
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	4a2b      	ldr	r2, [pc, #172]	@ (800f018 <TIM_Base_SetConfig+0x13c>)
 800ef6a:	4293      	cmp	r3, r2
 800ef6c:	d00b      	beq.n	800ef86 <TIM_Base_SetConfig+0xaa>
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	4a2a      	ldr	r2, [pc, #168]	@ (800f01c <TIM_Base_SetConfig+0x140>)
 800ef72:	4293      	cmp	r3, r2
 800ef74:	d007      	beq.n	800ef86 <TIM_Base_SetConfig+0xaa>
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	4a29      	ldr	r2, [pc, #164]	@ (800f020 <TIM_Base_SetConfig+0x144>)
 800ef7a:	4293      	cmp	r3, r2
 800ef7c:	d003      	beq.n	800ef86 <TIM_Base_SetConfig+0xaa>
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	4a28      	ldr	r2, [pc, #160]	@ (800f024 <TIM_Base_SetConfig+0x148>)
 800ef82:	4293      	cmp	r3, r2
 800ef84:	d108      	bne.n	800ef98 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ef8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ef8e:	683b      	ldr	r3, [r7, #0]
 800ef90:	68db      	ldr	r3, [r3, #12]
 800ef92:	68fa      	ldr	r2, [r7, #12]
 800ef94:	4313      	orrs	r3, r2
 800ef96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	695b      	ldr	r3, [r3, #20]
 800efa2:	4313      	orrs	r3, r2
 800efa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	68fa      	ldr	r2, [r7, #12]
 800efaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	689a      	ldr	r2, [r3, #8]
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	681a      	ldr	r2, [r3, #0]
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	4a10      	ldr	r2, [pc, #64]	@ (800f000 <TIM_Base_SetConfig+0x124>)
 800efc0:	4293      	cmp	r3, r2
 800efc2:	d00f      	beq.n	800efe4 <TIM_Base_SetConfig+0x108>
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	4a12      	ldr	r2, [pc, #72]	@ (800f010 <TIM_Base_SetConfig+0x134>)
 800efc8:	4293      	cmp	r3, r2
 800efca:	d00b      	beq.n	800efe4 <TIM_Base_SetConfig+0x108>
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	4a11      	ldr	r2, [pc, #68]	@ (800f014 <TIM_Base_SetConfig+0x138>)
 800efd0:	4293      	cmp	r3, r2
 800efd2:	d007      	beq.n	800efe4 <TIM_Base_SetConfig+0x108>
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	4a10      	ldr	r2, [pc, #64]	@ (800f018 <TIM_Base_SetConfig+0x13c>)
 800efd8:	4293      	cmp	r3, r2
 800efda:	d003      	beq.n	800efe4 <TIM_Base_SetConfig+0x108>
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	4a0f      	ldr	r2, [pc, #60]	@ (800f01c <TIM_Base_SetConfig+0x140>)
 800efe0:	4293      	cmp	r3, r2
 800efe2:	d103      	bne.n	800efec <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	691a      	ldr	r2, [r3, #16]
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2201      	movs	r2, #1
 800eff0:	615a      	str	r2, [r3, #20]
}
 800eff2:	bf00      	nop
 800eff4:	3714      	adds	r7, #20
 800eff6:	46bd      	mov	sp, r7
 800eff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effc:	4770      	bx	lr
 800effe:	bf00      	nop
 800f000:	40010000 	.word	0x40010000
 800f004:	40000400 	.word	0x40000400
 800f008:	40000800 	.word	0x40000800
 800f00c:	40000c00 	.word	0x40000c00
 800f010:	40010400 	.word	0x40010400
 800f014:	40014000 	.word	0x40014000
 800f018:	40014400 	.word	0x40014400
 800f01c:	40014800 	.word	0x40014800
 800f020:	4000e000 	.word	0x4000e000
 800f024:	4000e400 	.word	0x4000e400

0800f028 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f028:	b480      	push	{r7}
 800f02a:	b087      	sub	sp, #28
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
 800f030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	6a1b      	ldr	r3, [r3, #32]
 800f036:	f023 0201 	bic.w	r2, r3, #1
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	6a1b      	ldr	r3, [r3, #32]
 800f042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	685b      	ldr	r3, [r3, #4]
 800f048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	699b      	ldr	r3, [r3, #24]
 800f04e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f050:	68fa      	ldr	r2, [r7, #12]
 800f052:	4b37      	ldr	r3, [pc, #220]	@ (800f130 <TIM_OC1_SetConfig+0x108>)
 800f054:	4013      	ands	r3, r2
 800f056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	f023 0303 	bic.w	r3, r3, #3
 800f05e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	68fa      	ldr	r2, [r7, #12]
 800f066:	4313      	orrs	r3, r2
 800f068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f06a:	697b      	ldr	r3, [r7, #20]
 800f06c:	f023 0302 	bic.w	r3, r3, #2
 800f070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	689b      	ldr	r3, [r3, #8]
 800f076:	697a      	ldr	r2, [r7, #20]
 800f078:	4313      	orrs	r3, r2
 800f07a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	4a2d      	ldr	r2, [pc, #180]	@ (800f134 <TIM_OC1_SetConfig+0x10c>)
 800f080:	4293      	cmp	r3, r2
 800f082:	d00f      	beq.n	800f0a4 <TIM_OC1_SetConfig+0x7c>
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	4a2c      	ldr	r2, [pc, #176]	@ (800f138 <TIM_OC1_SetConfig+0x110>)
 800f088:	4293      	cmp	r3, r2
 800f08a:	d00b      	beq.n	800f0a4 <TIM_OC1_SetConfig+0x7c>
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	4a2b      	ldr	r2, [pc, #172]	@ (800f13c <TIM_OC1_SetConfig+0x114>)
 800f090:	4293      	cmp	r3, r2
 800f092:	d007      	beq.n	800f0a4 <TIM_OC1_SetConfig+0x7c>
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	4a2a      	ldr	r2, [pc, #168]	@ (800f140 <TIM_OC1_SetConfig+0x118>)
 800f098:	4293      	cmp	r3, r2
 800f09a:	d003      	beq.n	800f0a4 <TIM_OC1_SetConfig+0x7c>
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	4a29      	ldr	r2, [pc, #164]	@ (800f144 <TIM_OC1_SetConfig+0x11c>)
 800f0a0:	4293      	cmp	r3, r2
 800f0a2:	d10c      	bne.n	800f0be <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f0a4:	697b      	ldr	r3, [r7, #20]
 800f0a6:	f023 0308 	bic.w	r3, r3, #8
 800f0aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	68db      	ldr	r3, [r3, #12]
 800f0b0:	697a      	ldr	r2, [r7, #20]
 800f0b2:	4313      	orrs	r3, r2
 800f0b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f0b6:	697b      	ldr	r3, [r7, #20]
 800f0b8:	f023 0304 	bic.w	r3, r3, #4
 800f0bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	4a1c      	ldr	r2, [pc, #112]	@ (800f134 <TIM_OC1_SetConfig+0x10c>)
 800f0c2:	4293      	cmp	r3, r2
 800f0c4:	d00f      	beq.n	800f0e6 <TIM_OC1_SetConfig+0xbe>
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	4a1b      	ldr	r2, [pc, #108]	@ (800f138 <TIM_OC1_SetConfig+0x110>)
 800f0ca:	4293      	cmp	r3, r2
 800f0cc:	d00b      	beq.n	800f0e6 <TIM_OC1_SetConfig+0xbe>
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	4a1a      	ldr	r2, [pc, #104]	@ (800f13c <TIM_OC1_SetConfig+0x114>)
 800f0d2:	4293      	cmp	r3, r2
 800f0d4:	d007      	beq.n	800f0e6 <TIM_OC1_SetConfig+0xbe>
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	4a19      	ldr	r2, [pc, #100]	@ (800f140 <TIM_OC1_SetConfig+0x118>)
 800f0da:	4293      	cmp	r3, r2
 800f0dc:	d003      	beq.n	800f0e6 <TIM_OC1_SetConfig+0xbe>
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	4a18      	ldr	r2, [pc, #96]	@ (800f144 <TIM_OC1_SetConfig+0x11c>)
 800f0e2:	4293      	cmp	r3, r2
 800f0e4:	d111      	bne.n	800f10a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f0e6:	693b      	ldr	r3, [r7, #16]
 800f0e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f0ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f0ee:	693b      	ldr	r3, [r7, #16]
 800f0f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f0f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	695b      	ldr	r3, [r3, #20]
 800f0fa:	693a      	ldr	r2, [r7, #16]
 800f0fc:	4313      	orrs	r3, r2
 800f0fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	699b      	ldr	r3, [r3, #24]
 800f104:	693a      	ldr	r2, [r7, #16]
 800f106:	4313      	orrs	r3, r2
 800f108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	693a      	ldr	r2, [r7, #16]
 800f10e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	68fa      	ldr	r2, [r7, #12]
 800f114:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f116:	683b      	ldr	r3, [r7, #0]
 800f118:	685a      	ldr	r2, [r3, #4]
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	697a      	ldr	r2, [r7, #20]
 800f122:	621a      	str	r2, [r3, #32]
}
 800f124:	bf00      	nop
 800f126:	371c      	adds	r7, #28
 800f128:	46bd      	mov	sp, r7
 800f12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12e:	4770      	bx	lr
 800f130:	fffeff8f 	.word	0xfffeff8f
 800f134:	40010000 	.word	0x40010000
 800f138:	40010400 	.word	0x40010400
 800f13c:	40014000 	.word	0x40014000
 800f140:	40014400 	.word	0x40014400
 800f144:	40014800 	.word	0x40014800

0800f148 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f148:	b480      	push	{r7}
 800f14a:	b087      	sub	sp, #28
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
 800f150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	6a1b      	ldr	r3, [r3, #32]
 800f156:	f023 0210 	bic.w	r2, r3, #16
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6a1b      	ldr	r3, [r3, #32]
 800f162:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	685b      	ldr	r3, [r3, #4]
 800f168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	699b      	ldr	r3, [r3, #24]
 800f16e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f170:	68fa      	ldr	r2, [r7, #12]
 800f172:	4b34      	ldr	r3, [pc, #208]	@ (800f244 <TIM_OC2_SetConfig+0xfc>)
 800f174:	4013      	ands	r3, r2
 800f176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f17e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	021b      	lsls	r3, r3, #8
 800f186:	68fa      	ldr	r2, [r7, #12]
 800f188:	4313      	orrs	r3, r2
 800f18a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	f023 0320 	bic.w	r3, r3, #32
 800f192:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	689b      	ldr	r3, [r3, #8]
 800f198:	011b      	lsls	r3, r3, #4
 800f19a:	697a      	ldr	r2, [r7, #20]
 800f19c:	4313      	orrs	r3, r2
 800f19e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	4a29      	ldr	r2, [pc, #164]	@ (800f248 <TIM_OC2_SetConfig+0x100>)
 800f1a4:	4293      	cmp	r3, r2
 800f1a6:	d003      	beq.n	800f1b0 <TIM_OC2_SetConfig+0x68>
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	4a28      	ldr	r2, [pc, #160]	@ (800f24c <TIM_OC2_SetConfig+0x104>)
 800f1ac:	4293      	cmp	r3, r2
 800f1ae:	d10d      	bne.n	800f1cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f1b0:	697b      	ldr	r3, [r7, #20]
 800f1b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f1b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	68db      	ldr	r3, [r3, #12]
 800f1bc:	011b      	lsls	r3, r3, #4
 800f1be:	697a      	ldr	r2, [r7, #20]
 800f1c0:	4313      	orrs	r3, r2
 800f1c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f1c4:	697b      	ldr	r3, [r7, #20]
 800f1c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f1ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	4a1e      	ldr	r2, [pc, #120]	@ (800f248 <TIM_OC2_SetConfig+0x100>)
 800f1d0:	4293      	cmp	r3, r2
 800f1d2:	d00f      	beq.n	800f1f4 <TIM_OC2_SetConfig+0xac>
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	4a1d      	ldr	r2, [pc, #116]	@ (800f24c <TIM_OC2_SetConfig+0x104>)
 800f1d8:	4293      	cmp	r3, r2
 800f1da:	d00b      	beq.n	800f1f4 <TIM_OC2_SetConfig+0xac>
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	4a1c      	ldr	r2, [pc, #112]	@ (800f250 <TIM_OC2_SetConfig+0x108>)
 800f1e0:	4293      	cmp	r3, r2
 800f1e2:	d007      	beq.n	800f1f4 <TIM_OC2_SetConfig+0xac>
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	4a1b      	ldr	r2, [pc, #108]	@ (800f254 <TIM_OC2_SetConfig+0x10c>)
 800f1e8:	4293      	cmp	r3, r2
 800f1ea:	d003      	beq.n	800f1f4 <TIM_OC2_SetConfig+0xac>
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	4a1a      	ldr	r2, [pc, #104]	@ (800f258 <TIM_OC2_SetConfig+0x110>)
 800f1f0:	4293      	cmp	r3, r2
 800f1f2:	d113      	bne.n	800f21c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f1f4:	693b      	ldr	r3, [r7, #16]
 800f1f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f1fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f1fc:	693b      	ldr	r3, [r7, #16]
 800f1fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f202:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	695b      	ldr	r3, [r3, #20]
 800f208:	009b      	lsls	r3, r3, #2
 800f20a:	693a      	ldr	r2, [r7, #16]
 800f20c:	4313      	orrs	r3, r2
 800f20e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f210:	683b      	ldr	r3, [r7, #0]
 800f212:	699b      	ldr	r3, [r3, #24]
 800f214:	009b      	lsls	r3, r3, #2
 800f216:	693a      	ldr	r2, [r7, #16]
 800f218:	4313      	orrs	r3, r2
 800f21a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	693a      	ldr	r2, [r7, #16]
 800f220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	68fa      	ldr	r2, [r7, #12]
 800f226:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f228:	683b      	ldr	r3, [r7, #0]
 800f22a:	685a      	ldr	r2, [r3, #4]
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	697a      	ldr	r2, [r7, #20]
 800f234:	621a      	str	r2, [r3, #32]
}
 800f236:	bf00      	nop
 800f238:	371c      	adds	r7, #28
 800f23a:	46bd      	mov	sp, r7
 800f23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f240:	4770      	bx	lr
 800f242:	bf00      	nop
 800f244:	feff8fff 	.word	0xfeff8fff
 800f248:	40010000 	.word	0x40010000
 800f24c:	40010400 	.word	0x40010400
 800f250:	40014000 	.word	0x40014000
 800f254:	40014400 	.word	0x40014400
 800f258:	40014800 	.word	0x40014800

0800f25c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f25c:	b480      	push	{r7}
 800f25e:	b087      	sub	sp, #28
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
 800f264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	6a1b      	ldr	r3, [r3, #32]
 800f26a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	6a1b      	ldr	r3, [r3, #32]
 800f276:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	685b      	ldr	r3, [r3, #4]
 800f27c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	69db      	ldr	r3, [r3, #28]
 800f282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f284:	68fa      	ldr	r2, [r7, #12]
 800f286:	4b33      	ldr	r3, [pc, #204]	@ (800f354 <TIM_OC3_SetConfig+0xf8>)
 800f288:	4013      	ands	r3, r2
 800f28a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	f023 0303 	bic.w	r3, r3, #3
 800f292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	68fa      	ldr	r2, [r7, #12]
 800f29a:	4313      	orrs	r3, r2
 800f29c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f29e:	697b      	ldr	r3, [r7, #20]
 800f2a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f2a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f2a6:	683b      	ldr	r3, [r7, #0]
 800f2a8:	689b      	ldr	r3, [r3, #8]
 800f2aa:	021b      	lsls	r3, r3, #8
 800f2ac:	697a      	ldr	r2, [r7, #20]
 800f2ae:	4313      	orrs	r3, r2
 800f2b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	4a28      	ldr	r2, [pc, #160]	@ (800f358 <TIM_OC3_SetConfig+0xfc>)
 800f2b6:	4293      	cmp	r3, r2
 800f2b8:	d003      	beq.n	800f2c2 <TIM_OC3_SetConfig+0x66>
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	4a27      	ldr	r2, [pc, #156]	@ (800f35c <TIM_OC3_SetConfig+0x100>)
 800f2be:	4293      	cmp	r3, r2
 800f2c0:	d10d      	bne.n	800f2de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f2c2:	697b      	ldr	r3, [r7, #20]
 800f2c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f2c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	68db      	ldr	r3, [r3, #12]
 800f2ce:	021b      	lsls	r3, r3, #8
 800f2d0:	697a      	ldr	r2, [r7, #20]
 800f2d2:	4313      	orrs	r3, r2
 800f2d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f2d6:	697b      	ldr	r3, [r7, #20]
 800f2d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f2dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	4a1d      	ldr	r2, [pc, #116]	@ (800f358 <TIM_OC3_SetConfig+0xfc>)
 800f2e2:	4293      	cmp	r3, r2
 800f2e4:	d00f      	beq.n	800f306 <TIM_OC3_SetConfig+0xaa>
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	4a1c      	ldr	r2, [pc, #112]	@ (800f35c <TIM_OC3_SetConfig+0x100>)
 800f2ea:	4293      	cmp	r3, r2
 800f2ec:	d00b      	beq.n	800f306 <TIM_OC3_SetConfig+0xaa>
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	4a1b      	ldr	r2, [pc, #108]	@ (800f360 <TIM_OC3_SetConfig+0x104>)
 800f2f2:	4293      	cmp	r3, r2
 800f2f4:	d007      	beq.n	800f306 <TIM_OC3_SetConfig+0xaa>
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	4a1a      	ldr	r2, [pc, #104]	@ (800f364 <TIM_OC3_SetConfig+0x108>)
 800f2fa:	4293      	cmp	r3, r2
 800f2fc:	d003      	beq.n	800f306 <TIM_OC3_SetConfig+0xaa>
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	4a19      	ldr	r2, [pc, #100]	@ (800f368 <TIM_OC3_SetConfig+0x10c>)
 800f302:	4293      	cmp	r3, r2
 800f304:	d113      	bne.n	800f32e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f306:	693b      	ldr	r3, [r7, #16]
 800f308:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f30c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f30e:	693b      	ldr	r3, [r7, #16]
 800f310:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f314:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	695b      	ldr	r3, [r3, #20]
 800f31a:	011b      	lsls	r3, r3, #4
 800f31c:	693a      	ldr	r2, [r7, #16]
 800f31e:	4313      	orrs	r3, r2
 800f320:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	699b      	ldr	r3, [r3, #24]
 800f326:	011b      	lsls	r3, r3, #4
 800f328:	693a      	ldr	r2, [r7, #16]
 800f32a:	4313      	orrs	r3, r2
 800f32c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	693a      	ldr	r2, [r7, #16]
 800f332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	68fa      	ldr	r2, [r7, #12]
 800f338:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f33a:	683b      	ldr	r3, [r7, #0]
 800f33c:	685a      	ldr	r2, [r3, #4]
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	697a      	ldr	r2, [r7, #20]
 800f346:	621a      	str	r2, [r3, #32]
}
 800f348:	bf00      	nop
 800f34a:	371c      	adds	r7, #28
 800f34c:	46bd      	mov	sp, r7
 800f34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f352:	4770      	bx	lr
 800f354:	fffeff8f 	.word	0xfffeff8f
 800f358:	40010000 	.word	0x40010000
 800f35c:	40010400 	.word	0x40010400
 800f360:	40014000 	.word	0x40014000
 800f364:	40014400 	.word	0x40014400
 800f368:	40014800 	.word	0x40014800

0800f36c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f36c:	b480      	push	{r7}
 800f36e:	b087      	sub	sp, #28
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
 800f374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	6a1b      	ldr	r3, [r3, #32]
 800f37a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6a1b      	ldr	r3, [r3, #32]
 800f386:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	685b      	ldr	r3, [r3, #4]
 800f38c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	69db      	ldr	r3, [r3, #28]
 800f392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f394:	68fa      	ldr	r2, [r7, #12]
 800f396:	4b24      	ldr	r3, [pc, #144]	@ (800f428 <TIM_OC4_SetConfig+0xbc>)
 800f398:	4013      	ands	r3, r2
 800f39a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f3a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	021b      	lsls	r3, r3, #8
 800f3aa:	68fa      	ldr	r2, [r7, #12]
 800f3ac:	4313      	orrs	r3, r2
 800f3ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f3b0:	693b      	ldr	r3, [r7, #16]
 800f3b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f3b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	689b      	ldr	r3, [r3, #8]
 800f3bc:	031b      	lsls	r3, r3, #12
 800f3be:	693a      	ldr	r2, [r7, #16]
 800f3c0:	4313      	orrs	r3, r2
 800f3c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	4a19      	ldr	r2, [pc, #100]	@ (800f42c <TIM_OC4_SetConfig+0xc0>)
 800f3c8:	4293      	cmp	r3, r2
 800f3ca:	d00f      	beq.n	800f3ec <TIM_OC4_SetConfig+0x80>
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	4a18      	ldr	r2, [pc, #96]	@ (800f430 <TIM_OC4_SetConfig+0xc4>)
 800f3d0:	4293      	cmp	r3, r2
 800f3d2:	d00b      	beq.n	800f3ec <TIM_OC4_SetConfig+0x80>
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	4a17      	ldr	r2, [pc, #92]	@ (800f434 <TIM_OC4_SetConfig+0xc8>)
 800f3d8:	4293      	cmp	r3, r2
 800f3da:	d007      	beq.n	800f3ec <TIM_OC4_SetConfig+0x80>
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	4a16      	ldr	r2, [pc, #88]	@ (800f438 <TIM_OC4_SetConfig+0xcc>)
 800f3e0:	4293      	cmp	r3, r2
 800f3e2:	d003      	beq.n	800f3ec <TIM_OC4_SetConfig+0x80>
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	4a15      	ldr	r2, [pc, #84]	@ (800f43c <TIM_OC4_SetConfig+0xd0>)
 800f3e8:	4293      	cmp	r3, r2
 800f3ea:	d109      	bne.n	800f400 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f3ec:	697b      	ldr	r3, [r7, #20]
 800f3ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f3f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	695b      	ldr	r3, [r3, #20]
 800f3f8:	019b      	lsls	r3, r3, #6
 800f3fa:	697a      	ldr	r2, [r7, #20]
 800f3fc:	4313      	orrs	r3, r2
 800f3fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	697a      	ldr	r2, [r7, #20]
 800f404:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	68fa      	ldr	r2, [r7, #12]
 800f40a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	685a      	ldr	r2, [r3, #4]
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	693a      	ldr	r2, [r7, #16]
 800f418:	621a      	str	r2, [r3, #32]
}
 800f41a:	bf00      	nop
 800f41c:	371c      	adds	r7, #28
 800f41e:	46bd      	mov	sp, r7
 800f420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f424:	4770      	bx	lr
 800f426:	bf00      	nop
 800f428:	feff8fff 	.word	0xfeff8fff
 800f42c:	40010000 	.word	0x40010000
 800f430:	40010400 	.word	0x40010400
 800f434:	40014000 	.word	0x40014000
 800f438:	40014400 	.word	0x40014400
 800f43c:	40014800 	.word	0x40014800

0800f440 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f440:	b480      	push	{r7}
 800f442:	b087      	sub	sp, #28
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
 800f448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	6a1b      	ldr	r3, [r3, #32]
 800f44e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	6a1b      	ldr	r3, [r3, #32]
 800f45a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	685b      	ldr	r3, [r3, #4]
 800f460:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f468:	68fa      	ldr	r2, [r7, #12]
 800f46a:	4b21      	ldr	r3, [pc, #132]	@ (800f4f0 <TIM_OC5_SetConfig+0xb0>)
 800f46c:	4013      	ands	r3, r2
 800f46e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	68fa      	ldr	r2, [r7, #12]
 800f476:	4313      	orrs	r3, r2
 800f478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f47a:	693b      	ldr	r3, [r7, #16]
 800f47c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f480:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	689b      	ldr	r3, [r3, #8]
 800f486:	041b      	lsls	r3, r3, #16
 800f488:	693a      	ldr	r2, [r7, #16]
 800f48a:	4313      	orrs	r3, r2
 800f48c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	4a18      	ldr	r2, [pc, #96]	@ (800f4f4 <TIM_OC5_SetConfig+0xb4>)
 800f492:	4293      	cmp	r3, r2
 800f494:	d00f      	beq.n	800f4b6 <TIM_OC5_SetConfig+0x76>
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	4a17      	ldr	r2, [pc, #92]	@ (800f4f8 <TIM_OC5_SetConfig+0xb8>)
 800f49a:	4293      	cmp	r3, r2
 800f49c:	d00b      	beq.n	800f4b6 <TIM_OC5_SetConfig+0x76>
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	4a16      	ldr	r2, [pc, #88]	@ (800f4fc <TIM_OC5_SetConfig+0xbc>)
 800f4a2:	4293      	cmp	r3, r2
 800f4a4:	d007      	beq.n	800f4b6 <TIM_OC5_SetConfig+0x76>
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	4a15      	ldr	r2, [pc, #84]	@ (800f500 <TIM_OC5_SetConfig+0xc0>)
 800f4aa:	4293      	cmp	r3, r2
 800f4ac:	d003      	beq.n	800f4b6 <TIM_OC5_SetConfig+0x76>
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	4a14      	ldr	r2, [pc, #80]	@ (800f504 <TIM_OC5_SetConfig+0xc4>)
 800f4b2:	4293      	cmp	r3, r2
 800f4b4:	d109      	bne.n	800f4ca <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f4b6:	697b      	ldr	r3, [r7, #20]
 800f4b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f4bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	695b      	ldr	r3, [r3, #20]
 800f4c2:	021b      	lsls	r3, r3, #8
 800f4c4:	697a      	ldr	r2, [r7, #20]
 800f4c6:	4313      	orrs	r3, r2
 800f4c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	697a      	ldr	r2, [r7, #20]
 800f4ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	68fa      	ldr	r2, [r7, #12]
 800f4d4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	685a      	ldr	r2, [r3, #4]
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	693a      	ldr	r2, [r7, #16]
 800f4e2:	621a      	str	r2, [r3, #32]
}
 800f4e4:	bf00      	nop
 800f4e6:	371c      	adds	r7, #28
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ee:	4770      	bx	lr
 800f4f0:	fffeff8f 	.word	0xfffeff8f
 800f4f4:	40010000 	.word	0x40010000
 800f4f8:	40010400 	.word	0x40010400
 800f4fc:	40014000 	.word	0x40014000
 800f500:	40014400 	.word	0x40014400
 800f504:	40014800 	.word	0x40014800

0800f508 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f508:	b480      	push	{r7}
 800f50a:	b087      	sub	sp, #28
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
 800f510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	6a1b      	ldr	r3, [r3, #32]
 800f516:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	6a1b      	ldr	r3, [r3, #32]
 800f522:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	685b      	ldr	r3, [r3, #4]
 800f528:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f52e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f530:	68fa      	ldr	r2, [r7, #12]
 800f532:	4b22      	ldr	r3, [pc, #136]	@ (800f5bc <TIM_OC6_SetConfig+0xb4>)
 800f534:	4013      	ands	r3, r2
 800f536:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	021b      	lsls	r3, r3, #8
 800f53e:	68fa      	ldr	r2, [r7, #12]
 800f540:	4313      	orrs	r3, r2
 800f542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f544:	693b      	ldr	r3, [r7, #16]
 800f546:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f54a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	689b      	ldr	r3, [r3, #8]
 800f550:	051b      	lsls	r3, r3, #20
 800f552:	693a      	ldr	r2, [r7, #16]
 800f554:	4313      	orrs	r3, r2
 800f556:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	4a19      	ldr	r2, [pc, #100]	@ (800f5c0 <TIM_OC6_SetConfig+0xb8>)
 800f55c:	4293      	cmp	r3, r2
 800f55e:	d00f      	beq.n	800f580 <TIM_OC6_SetConfig+0x78>
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	4a18      	ldr	r2, [pc, #96]	@ (800f5c4 <TIM_OC6_SetConfig+0xbc>)
 800f564:	4293      	cmp	r3, r2
 800f566:	d00b      	beq.n	800f580 <TIM_OC6_SetConfig+0x78>
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	4a17      	ldr	r2, [pc, #92]	@ (800f5c8 <TIM_OC6_SetConfig+0xc0>)
 800f56c:	4293      	cmp	r3, r2
 800f56e:	d007      	beq.n	800f580 <TIM_OC6_SetConfig+0x78>
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	4a16      	ldr	r2, [pc, #88]	@ (800f5cc <TIM_OC6_SetConfig+0xc4>)
 800f574:	4293      	cmp	r3, r2
 800f576:	d003      	beq.n	800f580 <TIM_OC6_SetConfig+0x78>
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	4a15      	ldr	r2, [pc, #84]	@ (800f5d0 <TIM_OC6_SetConfig+0xc8>)
 800f57c:	4293      	cmp	r3, r2
 800f57e:	d109      	bne.n	800f594 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f580:	697b      	ldr	r3, [r7, #20]
 800f582:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f586:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	695b      	ldr	r3, [r3, #20]
 800f58c:	029b      	lsls	r3, r3, #10
 800f58e:	697a      	ldr	r2, [r7, #20]
 800f590:	4313      	orrs	r3, r2
 800f592:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	697a      	ldr	r2, [r7, #20]
 800f598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	68fa      	ldr	r2, [r7, #12]
 800f59e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	685a      	ldr	r2, [r3, #4]
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	693a      	ldr	r2, [r7, #16]
 800f5ac:	621a      	str	r2, [r3, #32]
}
 800f5ae:	bf00      	nop
 800f5b0:	371c      	adds	r7, #28
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b8:	4770      	bx	lr
 800f5ba:	bf00      	nop
 800f5bc:	feff8fff 	.word	0xfeff8fff
 800f5c0:	40010000 	.word	0x40010000
 800f5c4:	40010400 	.word	0x40010400
 800f5c8:	40014000 	.word	0x40014000
 800f5cc:	40014400 	.word	0x40014400
 800f5d0:	40014800 	.word	0x40014800

0800f5d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800f5d4:	b480      	push	{r7}
 800f5d6:	b087      	sub	sp, #28
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	60f8      	str	r0, [r7, #12]
 800f5dc:	60b9      	str	r1, [r7, #8]
 800f5de:	607a      	str	r2, [r7, #4]
 800f5e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	6a1b      	ldr	r3, [r3, #32]
 800f5e6:	f023 0201 	bic.w	r2, r3, #1
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	699b      	ldr	r3, [r3, #24]
 800f5f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	6a1b      	ldr	r3, [r3, #32]
 800f5f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	4a2c      	ldr	r2, [pc, #176]	@ (800f6b0 <TIM_TI1_SetConfig+0xdc>)
 800f5fe:	4293      	cmp	r3, r2
 800f600:	d023      	beq.n	800f64a <TIM_TI1_SetConfig+0x76>
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f608:	d01f      	beq.n	800f64a <TIM_TI1_SetConfig+0x76>
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	4a29      	ldr	r2, [pc, #164]	@ (800f6b4 <TIM_TI1_SetConfig+0xe0>)
 800f60e:	4293      	cmp	r3, r2
 800f610:	d01b      	beq.n	800f64a <TIM_TI1_SetConfig+0x76>
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	4a28      	ldr	r2, [pc, #160]	@ (800f6b8 <TIM_TI1_SetConfig+0xe4>)
 800f616:	4293      	cmp	r3, r2
 800f618:	d017      	beq.n	800f64a <TIM_TI1_SetConfig+0x76>
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	4a27      	ldr	r2, [pc, #156]	@ (800f6bc <TIM_TI1_SetConfig+0xe8>)
 800f61e:	4293      	cmp	r3, r2
 800f620:	d013      	beq.n	800f64a <TIM_TI1_SetConfig+0x76>
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	4a26      	ldr	r2, [pc, #152]	@ (800f6c0 <TIM_TI1_SetConfig+0xec>)
 800f626:	4293      	cmp	r3, r2
 800f628:	d00f      	beq.n	800f64a <TIM_TI1_SetConfig+0x76>
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	4a25      	ldr	r2, [pc, #148]	@ (800f6c4 <TIM_TI1_SetConfig+0xf0>)
 800f62e:	4293      	cmp	r3, r2
 800f630:	d00b      	beq.n	800f64a <TIM_TI1_SetConfig+0x76>
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	4a24      	ldr	r2, [pc, #144]	@ (800f6c8 <TIM_TI1_SetConfig+0xf4>)
 800f636:	4293      	cmp	r3, r2
 800f638:	d007      	beq.n	800f64a <TIM_TI1_SetConfig+0x76>
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	4a23      	ldr	r2, [pc, #140]	@ (800f6cc <TIM_TI1_SetConfig+0xf8>)
 800f63e:	4293      	cmp	r3, r2
 800f640:	d003      	beq.n	800f64a <TIM_TI1_SetConfig+0x76>
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	4a22      	ldr	r2, [pc, #136]	@ (800f6d0 <TIM_TI1_SetConfig+0xfc>)
 800f646:	4293      	cmp	r3, r2
 800f648:	d101      	bne.n	800f64e <TIM_TI1_SetConfig+0x7a>
 800f64a:	2301      	movs	r3, #1
 800f64c:	e000      	b.n	800f650 <TIM_TI1_SetConfig+0x7c>
 800f64e:	2300      	movs	r3, #0
 800f650:	2b00      	cmp	r3, #0
 800f652:	d008      	beq.n	800f666 <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800f654:	697b      	ldr	r3, [r7, #20]
 800f656:	f023 0303 	bic.w	r3, r3, #3
 800f65a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800f65c:	697a      	ldr	r2, [r7, #20]
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	4313      	orrs	r3, r2
 800f662:	617b      	str	r3, [r7, #20]
 800f664:	e003      	b.n	800f66e <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	f043 0301 	orr.w	r3, r3, #1
 800f66c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f66e:	697b      	ldr	r3, [r7, #20]
 800f670:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f674:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800f676:	683b      	ldr	r3, [r7, #0]
 800f678:	011b      	lsls	r3, r3, #4
 800f67a:	b2db      	uxtb	r3, r3
 800f67c:	697a      	ldr	r2, [r7, #20]
 800f67e:	4313      	orrs	r3, r2
 800f680:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f682:	693b      	ldr	r3, [r7, #16]
 800f684:	f023 030a 	bic.w	r3, r3, #10
 800f688:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800f68a:	68bb      	ldr	r3, [r7, #8]
 800f68c:	f003 030a 	and.w	r3, r3, #10
 800f690:	693a      	ldr	r2, [r7, #16]
 800f692:	4313      	orrs	r3, r2
 800f694:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	697a      	ldr	r2, [r7, #20]
 800f69a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	693a      	ldr	r2, [r7, #16]
 800f6a0:	621a      	str	r2, [r3, #32]
}
 800f6a2:	bf00      	nop
 800f6a4:	371c      	adds	r7, #28
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ac:	4770      	bx	lr
 800f6ae:	bf00      	nop
 800f6b0:	40010000 	.word	0x40010000
 800f6b4:	40000400 	.word	0x40000400
 800f6b8:	40000800 	.word	0x40000800
 800f6bc:	40000c00 	.word	0x40000c00
 800f6c0:	40010400 	.word	0x40010400
 800f6c4:	40001800 	.word	0x40001800
 800f6c8:	40014000 	.word	0x40014000
 800f6cc:	4000e000 	.word	0x4000e000
 800f6d0:	4000e400 	.word	0x4000e400

0800f6d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f6d4:	b480      	push	{r7}
 800f6d6:	b087      	sub	sp, #28
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	60f8      	str	r0, [r7, #12]
 800f6dc:	60b9      	str	r1, [r7, #8]
 800f6de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	6a1b      	ldr	r3, [r3, #32]
 800f6e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	6a1b      	ldr	r3, [r3, #32]
 800f6ea:	f023 0201 	bic.w	r2, r3, #1
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	699b      	ldr	r3, [r3, #24]
 800f6f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f6f8:	693b      	ldr	r3, [r7, #16]
 800f6fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f6fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	011b      	lsls	r3, r3, #4
 800f704:	693a      	ldr	r2, [r7, #16]
 800f706:	4313      	orrs	r3, r2
 800f708:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f70a:	697b      	ldr	r3, [r7, #20]
 800f70c:	f023 030a 	bic.w	r3, r3, #10
 800f710:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f712:	697a      	ldr	r2, [r7, #20]
 800f714:	68bb      	ldr	r3, [r7, #8]
 800f716:	4313      	orrs	r3, r2
 800f718:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	693a      	ldr	r2, [r7, #16]
 800f71e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	697a      	ldr	r2, [r7, #20]
 800f724:	621a      	str	r2, [r3, #32]
}
 800f726:	bf00      	nop
 800f728:	371c      	adds	r7, #28
 800f72a:	46bd      	mov	sp, r7
 800f72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f730:	4770      	bx	lr

0800f732 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f732:	b480      	push	{r7}
 800f734:	b087      	sub	sp, #28
 800f736:	af00      	add	r7, sp, #0
 800f738:	60f8      	str	r0, [r7, #12]
 800f73a:	60b9      	str	r1, [r7, #8]
 800f73c:	607a      	str	r2, [r7, #4]
 800f73e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	6a1b      	ldr	r3, [r3, #32]
 800f744:	f023 0210 	bic.w	r2, r3, #16
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	699b      	ldr	r3, [r3, #24]
 800f750:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	6a1b      	ldr	r3, [r3, #32]
 800f756:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800f758:	697b      	ldr	r3, [r7, #20]
 800f75a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f75e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	021b      	lsls	r3, r3, #8
 800f764:	697a      	ldr	r2, [r7, #20]
 800f766:	4313      	orrs	r3, r2
 800f768:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f76a:	697b      	ldr	r3, [r7, #20]
 800f76c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f770:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	031b      	lsls	r3, r3, #12
 800f776:	b29b      	uxth	r3, r3
 800f778:	697a      	ldr	r2, [r7, #20]
 800f77a:	4313      	orrs	r3, r2
 800f77c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f77e:	693b      	ldr	r3, [r7, #16]
 800f780:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f784:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800f786:	68bb      	ldr	r3, [r7, #8]
 800f788:	011b      	lsls	r3, r3, #4
 800f78a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800f78e:	693a      	ldr	r2, [r7, #16]
 800f790:	4313      	orrs	r3, r2
 800f792:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	697a      	ldr	r2, [r7, #20]
 800f798:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	693a      	ldr	r2, [r7, #16]
 800f79e:	621a      	str	r2, [r3, #32]
}
 800f7a0:	bf00      	nop
 800f7a2:	371c      	adds	r7, #28
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7aa:	4770      	bx	lr

0800f7ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f7ac:	b480      	push	{r7}
 800f7ae:	b087      	sub	sp, #28
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	60f8      	str	r0, [r7, #12]
 800f7b4:	60b9      	str	r1, [r7, #8]
 800f7b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	6a1b      	ldr	r3, [r3, #32]
 800f7bc:	f023 0210 	bic.w	r2, r3, #16
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	699b      	ldr	r3, [r3, #24]
 800f7c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	6a1b      	ldr	r3, [r3, #32]
 800f7ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f7d0:	697b      	ldr	r3, [r7, #20]
 800f7d2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f7d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	031b      	lsls	r3, r3, #12
 800f7dc:	697a      	ldr	r2, [r7, #20]
 800f7de:	4313      	orrs	r3, r2
 800f7e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f7e2:	693b      	ldr	r3, [r7, #16]
 800f7e4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f7e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f7ea:	68bb      	ldr	r3, [r7, #8]
 800f7ec:	011b      	lsls	r3, r3, #4
 800f7ee:	693a      	ldr	r2, [r7, #16]
 800f7f0:	4313      	orrs	r3, r2
 800f7f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	697a      	ldr	r2, [r7, #20]
 800f7f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	693a      	ldr	r2, [r7, #16]
 800f7fe:	621a      	str	r2, [r3, #32]
}
 800f800:	bf00      	nop
 800f802:	371c      	adds	r7, #28
 800f804:	46bd      	mov	sp, r7
 800f806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80a:	4770      	bx	lr

0800f80c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f80c:	b480      	push	{r7}
 800f80e:	b087      	sub	sp, #28
 800f810:	af00      	add	r7, sp, #0
 800f812:	60f8      	str	r0, [r7, #12]
 800f814:	60b9      	str	r1, [r7, #8]
 800f816:	607a      	str	r2, [r7, #4]
 800f818:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	6a1b      	ldr	r3, [r3, #32]
 800f81e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	69db      	ldr	r3, [r3, #28]
 800f82a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	6a1b      	ldr	r3, [r3, #32]
 800f830:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800f832:	697b      	ldr	r3, [r7, #20]
 800f834:	f023 0303 	bic.w	r3, r3, #3
 800f838:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800f83a:	697a      	ldr	r2, [r7, #20]
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	4313      	orrs	r3, r2
 800f840:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f848:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	011b      	lsls	r3, r3, #4
 800f84e:	b2db      	uxtb	r3, r3
 800f850:	697a      	ldr	r2, [r7, #20]
 800f852:	4313      	orrs	r3, r2
 800f854:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800f856:	693b      	ldr	r3, [r7, #16]
 800f858:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800f85c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800f85e:	68bb      	ldr	r3, [r7, #8]
 800f860:	021b      	lsls	r3, r3, #8
 800f862:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800f866:	693a      	ldr	r2, [r7, #16]
 800f868:	4313      	orrs	r3, r2
 800f86a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	697a      	ldr	r2, [r7, #20]
 800f870:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	693a      	ldr	r2, [r7, #16]
 800f876:	621a      	str	r2, [r3, #32]
}
 800f878:	bf00      	nop
 800f87a:	371c      	adds	r7, #28
 800f87c:	46bd      	mov	sp, r7
 800f87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f882:	4770      	bx	lr

0800f884 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f884:	b480      	push	{r7}
 800f886:	b087      	sub	sp, #28
 800f888:	af00      	add	r7, sp, #0
 800f88a:	60f8      	str	r0, [r7, #12]
 800f88c:	60b9      	str	r1, [r7, #8]
 800f88e:	607a      	str	r2, [r7, #4]
 800f890:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	6a1b      	ldr	r3, [r3, #32]
 800f896:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	69db      	ldr	r3, [r3, #28]
 800f8a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	6a1b      	ldr	r3, [r3, #32]
 800f8a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800f8aa:	697b      	ldr	r3, [r7, #20]
 800f8ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f8b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	021b      	lsls	r3, r3, #8
 800f8b6:	697a      	ldr	r2, [r7, #20]
 800f8b8:	4313      	orrs	r3, r2
 800f8ba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800f8bc:	697b      	ldr	r3, [r7, #20]
 800f8be:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f8c2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800f8c4:	683b      	ldr	r3, [r7, #0]
 800f8c6:	031b      	lsls	r3, r3, #12
 800f8c8:	b29b      	uxth	r3, r3
 800f8ca:	697a      	ldr	r2, [r7, #20]
 800f8cc:	4313      	orrs	r3, r2
 800f8ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800f8d0:	693b      	ldr	r3, [r7, #16]
 800f8d2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800f8d6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800f8d8:	68bb      	ldr	r3, [r7, #8]
 800f8da:	031b      	lsls	r3, r3, #12
 800f8dc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800f8e0:	693a      	ldr	r2, [r7, #16]
 800f8e2:	4313      	orrs	r3, r2
 800f8e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	697a      	ldr	r2, [r7, #20]
 800f8ea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	693a      	ldr	r2, [r7, #16]
 800f8f0:	621a      	str	r2, [r3, #32]
}
 800f8f2:	bf00      	nop
 800f8f4:	371c      	adds	r7, #28
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fc:	4770      	bx	lr
	...

0800f900 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f900:	b480      	push	{r7}
 800f902:	b085      	sub	sp, #20
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
 800f908:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	689b      	ldr	r3, [r3, #8]
 800f90e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f910:	68fa      	ldr	r2, [r7, #12]
 800f912:	4b09      	ldr	r3, [pc, #36]	@ (800f938 <TIM_ITRx_SetConfig+0x38>)
 800f914:	4013      	ands	r3, r2
 800f916:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f918:	683a      	ldr	r2, [r7, #0]
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	4313      	orrs	r3, r2
 800f91e:	f043 0307 	orr.w	r3, r3, #7
 800f922:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	68fa      	ldr	r2, [r7, #12]
 800f928:	609a      	str	r2, [r3, #8]
}
 800f92a:	bf00      	nop
 800f92c:	3714      	adds	r7, #20
 800f92e:	46bd      	mov	sp, r7
 800f930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f934:	4770      	bx	lr
 800f936:	bf00      	nop
 800f938:	ffcfff8f 	.word	0xffcfff8f

0800f93c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f93c:	b480      	push	{r7}
 800f93e:	b087      	sub	sp, #28
 800f940:	af00      	add	r7, sp, #0
 800f942:	60f8      	str	r0, [r7, #12]
 800f944:	60b9      	str	r1, [r7, #8]
 800f946:	607a      	str	r2, [r7, #4]
 800f948:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	689b      	ldr	r3, [r3, #8]
 800f94e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f950:	697b      	ldr	r3, [r7, #20]
 800f952:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f956:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f958:	683b      	ldr	r3, [r7, #0]
 800f95a:	021a      	lsls	r2, r3, #8
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	431a      	orrs	r2, r3
 800f960:	68bb      	ldr	r3, [r7, #8]
 800f962:	4313      	orrs	r3, r2
 800f964:	697a      	ldr	r2, [r7, #20]
 800f966:	4313      	orrs	r3, r2
 800f968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	697a      	ldr	r2, [r7, #20]
 800f96e:	609a      	str	r2, [r3, #8]
}
 800f970:	bf00      	nop
 800f972:	371c      	adds	r7, #28
 800f974:	46bd      	mov	sp, r7
 800f976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97a:	4770      	bx	lr

0800f97c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f97c:	b480      	push	{r7}
 800f97e:	b087      	sub	sp, #28
 800f980:	af00      	add	r7, sp, #0
 800f982:	60f8      	str	r0, [r7, #12]
 800f984:	60b9      	str	r1, [r7, #8]
 800f986:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f988:	68bb      	ldr	r3, [r7, #8]
 800f98a:	f003 031f 	and.w	r3, r3, #31
 800f98e:	2201      	movs	r2, #1
 800f990:	fa02 f303 	lsl.w	r3, r2, r3
 800f994:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	6a1a      	ldr	r2, [r3, #32]
 800f99a:	697b      	ldr	r3, [r7, #20]
 800f99c:	43db      	mvns	r3, r3
 800f99e:	401a      	ands	r2, r3
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	6a1a      	ldr	r2, [r3, #32]
 800f9a8:	68bb      	ldr	r3, [r7, #8]
 800f9aa:	f003 031f 	and.w	r3, r3, #31
 800f9ae:	6879      	ldr	r1, [r7, #4]
 800f9b0:	fa01 f303 	lsl.w	r3, r1, r3
 800f9b4:	431a      	orrs	r2, r3
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	621a      	str	r2, [r3, #32]
}
 800f9ba:	bf00      	nop
 800f9bc:	371c      	adds	r7, #28
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c4:	4770      	bx	lr
	...

0800f9c8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b084      	sub	sp, #16
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
 800f9d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d109      	bne.n	800f9ec <HAL_TIMEx_PWMN_Start+0x24>
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f9de:	b2db      	uxtb	r3, r3
 800f9e0:	2b01      	cmp	r3, #1
 800f9e2:	bf14      	ite	ne
 800f9e4:	2301      	movne	r3, #1
 800f9e6:	2300      	moveq	r3, #0
 800f9e8:	b2db      	uxtb	r3, r3
 800f9ea:	e022      	b.n	800fa32 <HAL_TIMEx_PWMN_Start+0x6a>
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	2b04      	cmp	r3, #4
 800f9f0:	d109      	bne.n	800fa06 <HAL_TIMEx_PWMN_Start+0x3e>
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f9f8:	b2db      	uxtb	r3, r3
 800f9fa:	2b01      	cmp	r3, #1
 800f9fc:	bf14      	ite	ne
 800f9fe:	2301      	movne	r3, #1
 800fa00:	2300      	moveq	r3, #0
 800fa02:	b2db      	uxtb	r3, r3
 800fa04:	e015      	b.n	800fa32 <HAL_TIMEx_PWMN_Start+0x6a>
 800fa06:	683b      	ldr	r3, [r7, #0]
 800fa08:	2b08      	cmp	r3, #8
 800fa0a:	d109      	bne.n	800fa20 <HAL_TIMEx_PWMN_Start+0x58>
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800fa12:	b2db      	uxtb	r3, r3
 800fa14:	2b01      	cmp	r3, #1
 800fa16:	bf14      	ite	ne
 800fa18:	2301      	movne	r3, #1
 800fa1a:	2300      	moveq	r3, #0
 800fa1c:	b2db      	uxtb	r3, r3
 800fa1e:	e008      	b.n	800fa32 <HAL_TIMEx_PWMN_Start+0x6a>
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800fa26:	b2db      	uxtb	r3, r3
 800fa28:	2b01      	cmp	r3, #1
 800fa2a:	bf14      	ite	ne
 800fa2c:	2301      	movne	r3, #1
 800fa2e:	2300      	moveq	r3, #0
 800fa30:	b2db      	uxtb	r3, r3
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d001      	beq.n	800fa3a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800fa36:	2301      	movs	r3, #1
 800fa38:	e07d      	b.n	800fb36 <HAL_TIMEx_PWMN_Start+0x16e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fa3a:	683b      	ldr	r3, [r7, #0]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d104      	bne.n	800fa4a <HAL_TIMEx_PWMN_Start+0x82>
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	2202      	movs	r2, #2
 800fa44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fa48:	e013      	b.n	800fa72 <HAL_TIMEx_PWMN_Start+0xaa>
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	2b04      	cmp	r3, #4
 800fa4e:	d104      	bne.n	800fa5a <HAL_TIMEx_PWMN_Start+0x92>
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	2202      	movs	r2, #2
 800fa54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fa58:	e00b      	b.n	800fa72 <HAL_TIMEx_PWMN_Start+0xaa>
 800fa5a:	683b      	ldr	r3, [r7, #0]
 800fa5c:	2b08      	cmp	r3, #8
 800fa5e:	d104      	bne.n	800fa6a <HAL_TIMEx_PWMN_Start+0xa2>
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2202      	movs	r2, #2
 800fa64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800fa68:	e003      	b.n	800fa72 <HAL_TIMEx_PWMN_Start+0xaa>
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	2202      	movs	r2, #2
 800fa6e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	2204      	movs	r2, #4
 800fa78:	6839      	ldr	r1, [r7, #0]
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	f000 fa0e 	bl	800fe9c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800fa8e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	4a2a      	ldr	r2, [pc, #168]	@ (800fb40 <HAL_TIMEx_PWMN_Start+0x178>)
 800fa96:	4293      	cmp	r3, r2
 800fa98:	d02c      	beq.n	800faf4 <HAL_TIMEx_PWMN_Start+0x12c>
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800faa2:	d027      	beq.n	800faf4 <HAL_TIMEx_PWMN_Start+0x12c>
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	4a26      	ldr	r2, [pc, #152]	@ (800fb44 <HAL_TIMEx_PWMN_Start+0x17c>)
 800faaa:	4293      	cmp	r3, r2
 800faac:	d022      	beq.n	800faf4 <HAL_TIMEx_PWMN_Start+0x12c>
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	4a25      	ldr	r2, [pc, #148]	@ (800fb48 <HAL_TIMEx_PWMN_Start+0x180>)
 800fab4:	4293      	cmp	r3, r2
 800fab6:	d01d      	beq.n	800faf4 <HAL_TIMEx_PWMN_Start+0x12c>
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	4a23      	ldr	r2, [pc, #140]	@ (800fb4c <HAL_TIMEx_PWMN_Start+0x184>)
 800fabe:	4293      	cmp	r3, r2
 800fac0:	d018      	beq.n	800faf4 <HAL_TIMEx_PWMN_Start+0x12c>
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	4a22      	ldr	r2, [pc, #136]	@ (800fb50 <HAL_TIMEx_PWMN_Start+0x188>)
 800fac8:	4293      	cmp	r3, r2
 800faca:	d013      	beq.n	800faf4 <HAL_TIMEx_PWMN_Start+0x12c>
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	4a20      	ldr	r2, [pc, #128]	@ (800fb54 <HAL_TIMEx_PWMN_Start+0x18c>)
 800fad2:	4293      	cmp	r3, r2
 800fad4:	d00e      	beq.n	800faf4 <HAL_TIMEx_PWMN_Start+0x12c>
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	4a1f      	ldr	r2, [pc, #124]	@ (800fb58 <HAL_TIMEx_PWMN_Start+0x190>)
 800fadc:	4293      	cmp	r3, r2
 800fade:	d009      	beq.n	800faf4 <HAL_TIMEx_PWMN_Start+0x12c>
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	4a1d      	ldr	r2, [pc, #116]	@ (800fb5c <HAL_TIMEx_PWMN_Start+0x194>)
 800fae6:	4293      	cmp	r3, r2
 800fae8:	d004      	beq.n	800faf4 <HAL_TIMEx_PWMN_Start+0x12c>
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	4a1c      	ldr	r2, [pc, #112]	@ (800fb60 <HAL_TIMEx_PWMN_Start+0x198>)
 800faf0:	4293      	cmp	r3, r2
 800faf2:	d115      	bne.n	800fb20 <HAL_TIMEx_PWMN_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	689a      	ldr	r2, [r3, #8]
 800fafa:	4b1a      	ldr	r3, [pc, #104]	@ (800fb64 <HAL_TIMEx_PWMN_Start+0x19c>)
 800fafc:	4013      	ands	r3, r2
 800fafe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	2b06      	cmp	r3, #6
 800fb04:	d015      	beq.n	800fb32 <HAL_TIMEx_PWMN_Start+0x16a>
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fb0c:	d011      	beq.n	800fb32 <HAL_TIMEx_PWMN_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	681a      	ldr	r2, [r3, #0]
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	f042 0201 	orr.w	r2, r2, #1
 800fb1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb1e:	e008      	b.n	800fb32 <HAL_TIMEx_PWMN_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	681a      	ldr	r2, [r3, #0]
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	f042 0201 	orr.w	r2, r2, #1
 800fb2e:	601a      	str	r2, [r3, #0]
 800fb30:	e000      	b.n	800fb34 <HAL_TIMEx_PWMN_Start+0x16c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fb34:	2300      	movs	r3, #0
}
 800fb36:	4618      	mov	r0, r3
 800fb38:	3710      	adds	r7, #16
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	bd80      	pop	{r7, pc}
 800fb3e:	bf00      	nop
 800fb40:	40010000 	.word	0x40010000
 800fb44:	40000400 	.word	0x40000400
 800fb48:	40000800 	.word	0x40000800
 800fb4c:	40000c00 	.word	0x40000c00
 800fb50:	40010400 	.word	0x40010400
 800fb54:	40001800 	.word	0x40001800
 800fb58:	40014000 	.word	0x40014000
 800fb5c:	4000e000 	.word	0x4000e000
 800fb60:	4000e400 	.word	0x4000e400
 800fb64:	00010007 	.word	0x00010007

0800fb68 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b082      	sub	sp, #8
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
 800fb70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	2200      	movs	r2, #0
 800fb78:	6839      	ldr	r1, [r7, #0]
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	f000 f98e 	bl	800fe9c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	6a1a      	ldr	r2, [r3, #32]
 800fb86:	f241 1311 	movw	r3, #4369	@ 0x1111
 800fb8a:	4013      	ands	r3, r2
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d10f      	bne.n	800fbb0 <HAL_TIMEx_PWMN_Stop+0x48>
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	6a1a      	ldr	r2, [r3, #32]
 800fb96:	f240 4344 	movw	r3, #1092	@ 0x444
 800fb9a:	4013      	ands	r3, r2
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d107      	bne.n	800fbb0 <HAL_TIMEx_PWMN_Stop+0x48>
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800fbae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	6a1a      	ldr	r2, [r3, #32]
 800fbb6:	f241 1311 	movw	r3, #4369	@ 0x1111
 800fbba:	4013      	ands	r3, r2
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d10f      	bne.n	800fbe0 <HAL_TIMEx_PWMN_Stop+0x78>
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	6a1a      	ldr	r2, [r3, #32]
 800fbc6:	f240 4344 	movw	r3, #1092	@ 0x444
 800fbca:	4013      	ands	r3, r2
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d107      	bne.n	800fbe0 <HAL_TIMEx_PWMN_Stop+0x78>
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	681a      	ldr	r2, [r3, #0]
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	f022 0201 	bic.w	r2, r2, #1
 800fbde:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d104      	bne.n	800fbf0 <HAL_TIMEx_PWMN_Stop+0x88>
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	2201      	movs	r2, #1
 800fbea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fbee:	e013      	b.n	800fc18 <HAL_TIMEx_PWMN_Stop+0xb0>
 800fbf0:	683b      	ldr	r3, [r7, #0]
 800fbf2:	2b04      	cmp	r3, #4
 800fbf4:	d104      	bne.n	800fc00 <HAL_TIMEx_PWMN_Stop+0x98>
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2201      	movs	r2, #1
 800fbfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fbfe:	e00b      	b.n	800fc18 <HAL_TIMEx_PWMN_Stop+0xb0>
 800fc00:	683b      	ldr	r3, [r7, #0]
 800fc02:	2b08      	cmp	r3, #8
 800fc04:	d104      	bne.n	800fc10 <HAL_TIMEx_PWMN_Stop+0xa8>
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	2201      	movs	r2, #1
 800fc0a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800fc0e:	e003      	b.n	800fc18 <HAL_TIMEx_PWMN_Stop+0xb0>
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	2201      	movs	r2, #1
 800fc14:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 800fc18:	2300      	movs	r3, #0
}
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	3708      	adds	r7, #8
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}
	...

0800fc24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fc24:	b480      	push	{r7}
 800fc26:	b085      	sub	sp, #20
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
 800fc2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fc34:	2b01      	cmp	r3, #1
 800fc36:	d101      	bne.n	800fc3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fc38:	2302      	movs	r3, #2
 800fc3a:	e077      	b.n	800fd2c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	2201      	movs	r2, #1
 800fc40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	2202      	movs	r2, #2
 800fc48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	685b      	ldr	r3, [r3, #4]
 800fc52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	689b      	ldr	r3, [r3, #8]
 800fc5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	4a35      	ldr	r2, [pc, #212]	@ (800fd38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fc62:	4293      	cmp	r3, r2
 800fc64:	d004      	beq.n	800fc70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	4a34      	ldr	r2, [pc, #208]	@ (800fd3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fc6c:	4293      	cmp	r3, r2
 800fc6e:	d108      	bne.n	800fc82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800fc76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fc78:	683b      	ldr	r3, [r7, #0]
 800fc7a:	685b      	ldr	r3, [r3, #4]
 800fc7c:	68fa      	ldr	r2, [r7, #12]
 800fc7e:	4313      	orrs	r3, r2
 800fc80:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fc88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	68fa      	ldr	r2, [r7, #12]
 800fc90:	4313      	orrs	r3, r2
 800fc92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	68fa      	ldr	r2, [r7, #12]
 800fc9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	4a25      	ldr	r2, [pc, #148]	@ (800fd38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fca2:	4293      	cmp	r3, r2
 800fca4:	d02c      	beq.n	800fd00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fcae:	d027      	beq.n	800fd00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	4a22      	ldr	r2, [pc, #136]	@ (800fd40 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800fcb6:	4293      	cmp	r3, r2
 800fcb8:	d022      	beq.n	800fd00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	4a21      	ldr	r2, [pc, #132]	@ (800fd44 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800fcc0:	4293      	cmp	r3, r2
 800fcc2:	d01d      	beq.n	800fd00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	4a1f      	ldr	r2, [pc, #124]	@ (800fd48 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800fcca:	4293      	cmp	r3, r2
 800fccc:	d018      	beq.n	800fd00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	4a1a      	ldr	r2, [pc, #104]	@ (800fd3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fcd4:	4293      	cmp	r3, r2
 800fcd6:	d013      	beq.n	800fd00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	4a1b      	ldr	r2, [pc, #108]	@ (800fd4c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800fcde:	4293      	cmp	r3, r2
 800fce0:	d00e      	beq.n	800fd00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	4a1a      	ldr	r2, [pc, #104]	@ (800fd50 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800fce8:	4293      	cmp	r3, r2
 800fcea:	d009      	beq.n	800fd00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	4a18      	ldr	r2, [pc, #96]	@ (800fd54 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800fcf2:	4293      	cmp	r3, r2
 800fcf4:	d004      	beq.n	800fd00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	4a17      	ldr	r2, [pc, #92]	@ (800fd58 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800fcfc:	4293      	cmp	r3, r2
 800fcfe:	d10c      	bne.n	800fd1a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fd00:	68bb      	ldr	r3, [r7, #8]
 800fd02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fd06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fd08:	683b      	ldr	r3, [r7, #0]
 800fd0a:	689b      	ldr	r3, [r3, #8]
 800fd0c:	68ba      	ldr	r2, [r7, #8]
 800fd0e:	4313      	orrs	r3, r2
 800fd10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	68ba      	ldr	r2, [r7, #8]
 800fd18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	2201      	movs	r2, #1
 800fd1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	2200      	movs	r2, #0
 800fd26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fd2a:	2300      	movs	r3, #0
}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	3714      	adds	r7, #20
 800fd30:	46bd      	mov	sp, r7
 800fd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd36:	4770      	bx	lr
 800fd38:	40010000 	.word	0x40010000
 800fd3c:	40010400 	.word	0x40010400
 800fd40:	40000400 	.word	0x40000400
 800fd44:	40000800 	.word	0x40000800
 800fd48:	40000c00 	.word	0x40000c00
 800fd4c:	40001800 	.word	0x40001800
 800fd50:	40014000 	.word	0x40014000
 800fd54:	4000e000 	.word	0x4000e000
 800fd58:	4000e400 	.word	0x4000e400

0800fd5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fd5c:	b480      	push	{r7}
 800fd5e:	b085      	sub	sp, #20
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
 800fd64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fd66:	2300      	movs	r3, #0
 800fd68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fd70:	2b01      	cmp	r3, #1
 800fd72:	d101      	bne.n	800fd78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fd74:	2302      	movs	r3, #2
 800fd76:	e087      	b.n	800fe88 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	2201      	movs	r2, #1
 800fd7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	68db      	ldr	r3, [r3, #12]
 800fd8a:	4313      	orrs	r3, r2
 800fd8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800fd94:	683b      	ldr	r3, [r7, #0]
 800fd96:	689b      	ldr	r3, [r3, #8]
 800fd98:	4313      	orrs	r3, r2
 800fd9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800fda2:	683b      	ldr	r3, [r7, #0]
 800fda4:	685b      	ldr	r3, [r3, #4]
 800fda6:	4313      	orrs	r3, r2
 800fda8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800fdb0:	683b      	ldr	r3, [r7, #0]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	4313      	orrs	r3, r2
 800fdb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800fdbe:	683b      	ldr	r3, [r7, #0]
 800fdc0:	691b      	ldr	r3, [r3, #16]
 800fdc2:	4313      	orrs	r3, r2
 800fdc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800fdcc:	683b      	ldr	r3, [r7, #0]
 800fdce:	695b      	ldr	r3, [r3, #20]
 800fdd0:	4313      	orrs	r3, r2
 800fdd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800fdda:	683b      	ldr	r3, [r7, #0]
 800fddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fdde:	4313      	orrs	r3, r2
 800fde0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800fde8:	683b      	ldr	r3, [r7, #0]
 800fdea:	699b      	ldr	r3, [r3, #24]
 800fdec:	041b      	lsls	r3, r3, #16
 800fdee:	4313      	orrs	r3, r2
 800fdf0:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	4a27      	ldr	r2, [pc, #156]	@ (800fe94 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800fdf8:	4293      	cmp	r3, r2
 800fdfa:	d004      	beq.n	800fe06 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	4a25      	ldr	r2, [pc, #148]	@ (800fe98 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800fe02:	4293      	cmp	r3, r2
 800fe04:	d106      	bne.n	800fe14 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	69db      	ldr	r3, [r3, #28]
 800fe10:	4313      	orrs	r3, r2
 800fe12:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	4a1e      	ldr	r2, [pc, #120]	@ (800fe94 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800fe1a:	4293      	cmp	r3, r2
 800fe1c:	d004      	beq.n	800fe28 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	4a1d      	ldr	r2, [pc, #116]	@ (800fe98 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800fe24:	4293      	cmp	r3, r2
 800fe26:	d126      	bne.n	800fe76 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800fe2e:	683b      	ldr	r3, [r7, #0]
 800fe30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe32:	051b      	lsls	r3, r3, #20
 800fe34:	4313      	orrs	r3, r2
 800fe36:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800fe3e:	683b      	ldr	r3, [r7, #0]
 800fe40:	6a1b      	ldr	r3, [r3, #32]
 800fe42:	4313      	orrs	r3, r2
 800fe44:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe50:	4313      	orrs	r3, r2
 800fe52:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	4a0e      	ldr	r2, [pc, #56]	@ (800fe94 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800fe5a:	4293      	cmp	r3, r2
 800fe5c:	d004      	beq.n	800fe68 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	4a0d      	ldr	r2, [pc, #52]	@ (800fe98 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800fe64:	4293      	cmp	r3, r2
 800fe66:	d106      	bne.n	800fe76 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800fe6e:	683b      	ldr	r3, [r7, #0]
 800fe70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe72:	4313      	orrs	r3, r2
 800fe74:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	68fa      	ldr	r2, [r7, #12]
 800fe7c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	2200      	movs	r2, #0
 800fe82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fe86:	2300      	movs	r3, #0
}
 800fe88:	4618      	mov	r0, r3
 800fe8a:	3714      	adds	r7, #20
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe92:	4770      	bx	lr
 800fe94:	40010000 	.word	0x40010000
 800fe98:	40010400 	.word	0x40010400

0800fe9c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800fe9c:	b480      	push	{r7}
 800fe9e:	b087      	sub	sp, #28
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	60f8      	str	r0, [r7, #12]
 800fea4:	60b9      	str	r1, [r7, #8]
 800fea6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	f003 031f 	and.w	r3, r3, #31
 800feae:	2204      	movs	r2, #4
 800feb0:	fa02 f303 	lsl.w	r3, r2, r3
 800feb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	6a1a      	ldr	r2, [r3, #32]
 800feba:	697b      	ldr	r3, [r7, #20]
 800febc:	43db      	mvns	r3, r3
 800febe:	401a      	ands	r2, r3
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	6a1a      	ldr	r2, [r3, #32]
 800fec8:	68bb      	ldr	r3, [r7, #8]
 800feca:	f003 031f 	and.w	r3, r3, #31
 800fece:	6879      	ldr	r1, [r7, #4]
 800fed0:	fa01 f303 	lsl.w	r3, r1, r3
 800fed4:	431a      	orrs	r2, r3
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	621a      	str	r2, [r3, #32]
}
 800feda:	bf00      	nop
 800fedc:	371c      	adds	r7, #28
 800fede:	46bd      	mov	sp, r7
 800fee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee4:	4770      	bx	lr

0800fee6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fee6:	b580      	push	{r7, lr}
 800fee8:	b082      	sub	sp, #8
 800feea:	af00      	add	r7, sp, #0
 800feec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d101      	bne.n	800fef8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fef4:	2301      	movs	r3, #1
 800fef6:	e042      	b.n	800ff7e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d106      	bne.n	800ff10 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2200      	movs	r2, #0
 800ff06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ff0a:	6878      	ldr	r0, [r7, #4]
 800ff0c:	f7f3 ff84 	bl	8003e18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	2224      	movs	r2, #36	@ 0x24
 800ff14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	681a      	ldr	r2, [r3, #0]
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	f022 0201 	bic.w	r2, r2, #1
 800ff26:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ff28:	6878      	ldr	r0, [r7, #4]
 800ff2a:	f000 f983 	bl	8010234 <UART_SetConfig>
 800ff2e:	4603      	mov	r3, r0
 800ff30:	2b01      	cmp	r3, #1
 800ff32:	d101      	bne.n	800ff38 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ff34:	2301      	movs	r3, #1
 800ff36:	e022      	b.n	800ff7e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d002      	beq.n	800ff46 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ff40:	6878      	ldr	r0, [r7, #4]
 800ff42:	f000 ffe3 	bl	8010f0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	685a      	ldr	r2, [r3, #4]
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ff54:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	689a      	ldr	r2, [r3, #8]
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ff64:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	681a      	ldr	r2, [r3, #0]
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	f042 0201 	orr.w	r2, r2, #1
 800ff74:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	f001 f86a 	bl	8011050 <UART_CheckIdleState>
 800ff7c:	4603      	mov	r3, r0
}
 800ff7e:	4618      	mov	r0, r3
 800ff80:	3708      	adds	r7, #8
 800ff82:	46bd      	mov	sp, r7
 800ff84:	bd80      	pop	{r7, pc}

0800ff86 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ff86:	b580      	push	{r7, lr}
 800ff88:	b08a      	sub	sp, #40	@ 0x28
 800ff8a:	af02      	add	r7, sp, #8
 800ff8c:	60f8      	str	r0, [r7, #12]
 800ff8e:	60b9      	str	r1, [r7, #8]
 800ff90:	603b      	str	r3, [r7, #0]
 800ff92:	4613      	mov	r3, r2
 800ff94:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ff9c:	2b20      	cmp	r3, #32
 800ff9e:	d17b      	bne.n	8010098 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d002      	beq.n	800ffac <HAL_UART_Transmit+0x26>
 800ffa6:	88fb      	ldrh	r3, [r7, #6]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d101      	bne.n	800ffb0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ffac:	2301      	movs	r3, #1
 800ffae:	e074      	b.n	801009a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	2221      	movs	r2, #33	@ 0x21
 800ffbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ffc0:	f7f4 fbb0 	bl	8004724 <HAL_GetTick>
 800ffc4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	88fa      	ldrh	r2, [r7, #6]
 800ffca:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	88fa      	ldrh	r2, [r7, #6]
 800ffd2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	689b      	ldr	r3, [r3, #8]
 800ffda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ffde:	d108      	bne.n	800fff2 <HAL_UART_Transmit+0x6c>
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	691b      	ldr	r3, [r3, #16]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d104      	bne.n	800fff2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ffe8:	2300      	movs	r3, #0
 800ffea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ffec:	68bb      	ldr	r3, [r7, #8]
 800ffee:	61bb      	str	r3, [r7, #24]
 800fff0:	e003      	b.n	800fffa <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800fff2:	68bb      	ldr	r3, [r7, #8]
 800fff4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fff6:	2300      	movs	r3, #0
 800fff8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800fffa:	e030      	b.n	801005e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fffc:	683b      	ldr	r3, [r7, #0]
 800fffe:	9300      	str	r3, [sp, #0]
 8010000:	697b      	ldr	r3, [r7, #20]
 8010002:	2200      	movs	r2, #0
 8010004:	2180      	movs	r1, #128	@ 0x80
 8010006:	68f8      	ldr	r0, [r7, #12]
 8010008:	f001 f8cc 	bl	80111a4 <UART_WaitOnFlagUntilTimeout>
 801000c:	4603      	mov	r3, r0
 801000e:	2b00      	cmp	r3, #0
 8010010:	d005      	beq.n	801001e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	2220      	movs	r2, #32
 8010016:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 801001a:	2303      	movs	r3, #3
 801001c:	e03d      	b.n	801009a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 801001e:	69fb      	ldr	r3, [r7, #28]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d10b      	bne.n	801003c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010024:	69bb      	ldr	r3, [r7, #24]
 8010026:	881b      	ldrh	r3, [r3, #0]
 8010028:	461a      	mov	r2, r3
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010032:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8010034:	69bb      	ldr	r3, [r7, #24]
 8010036:	3302      	adds	r3, #2
 8010038:	61bb      	str	r3, [r7, #24]
 801003a:	e007      	b.n	801004c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801003c:	69fb      	ldr	r3, [r7, #28]
 801003e:	781a      	ldrb	r2, [r3, #0]
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8010046:	69fb      	ldr	r3, [r7, #28]
 8010048:	3301      	adds	r3, #1
 801004a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010052:	b29b      	uxth	r3, r3
 8010054:	3b01      	subs	r3, #1
 8010056:	b29a      	uxth	r2, r3
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010064:	b29b      	uxth	r3, r3
 8010066:	2b00      	cmp	r3, #0
 8010068:	d1c8      	bne.n	800fffc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	9300      	str	r3, [sp, #0]
 801006e:	697b      	ldr	r3, [r7, #20]
 8010070:	2200      	movs	r2, #0
 8010072:	2140      	movs	r1, #64	@ 0x40
 8010074:	68f8      	ldr	r0, [r7, #12]
 8010076:	f001 f895 	bl	80111a4 <UART_WaitOnFlagUntilTimeout>
 801007a:	4603      	mov	r3, r0
 801007c:	2b00      	cmp	r3, #0
 801007e:	d005      	beq.n	801008c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	2220      	movs	r2, #32
 8010084:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8010088:	2303      	movs	r3, #3
 801008a:	e006      	b.n	801009a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	2220      	movs	r2, #32
 8010090:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8010094:	2300      	movs	r3, #0
 8010096:	e000      	b.n	801009a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8010098:	2302      	movs	r3, #2
  }
}
 801009a:	4618      	mov	r0, r3
 801009c:	3720      	adds	r7, #32
 801009e:	46bd      	mov	sp, r7
 80100a0:	bd80      	pop	{r7, pc}

080100a2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80100a2:	b580      	push	{r7, lr}
 80100a4:	b08a      	sub	sp, #40	@ 0x28
 80100a6:	af02      	add	r7, sp, #8
 80100a8:	60f8      	str	r0, [r7, #12]
 80100aa:	60b9      	str	r1, [r7, #8]
 80100ac:	603b      	str	r3, [r7, #0]
 80100ae:	4613      	mov	r3, r2
 80100b0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80100b8:	2b20      	cmp	r3, #32
 80100ba:	f040 80b5 	bne.w	8010228 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80100be:	68bb      	ldr	r3, [r7, #8]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d002      	beq.n	80100ca <HAL_UART_Receive+0x28>
 80100c4:	88fb      	ldrh	r3, [r7, #6]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d101      	bne.n	80100ce <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80100ca:	2301      	movs	r3, #1
 80100cc:	e0ad      	b.n	801022a <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	2200      	movs	r2, #0
 80100d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	2222      	movs	r2, #34	@ 0x22
 80100da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	2200      	movs	r2, #0
 80100e2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80100e4:	f7f4 fb1e 	bl	8004724 <HAL_GetTick>
 80100e8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	88fa      	ldrh	r2, [r7, #6]
 80100ee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	88fa      	ldrh	r2, [r7, #6]
 80100f6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	689b      	ldr	r3, [r3, #8]
 80100fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010102:	d10e      	bne.n	8010122 <HAL_UART_Receive+0x80>
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	691b      	ldr	r3, [r3, #16]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d105      	bne.n	8010118 <HAL_UART_Receive+0x76>
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8010112:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010116:	e02d      	b.n	8010174 <HAL_UART_Receive+0xd2>
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	22ff      	movs	r2, #255	@ 0xff
 801011c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010120:	e028      	b.n	8010174 <HAL_UART_Receive+0xd2>
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	689b      	ldr	r3, [r3, #8]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d10d      	bne.n	8010146 <HAL_UART_Receive+0xa4>
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	691b      	ldr	r3, [r3, #16]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d104      	bne.n	801013c <HAL_UART_Receive+0x9a>
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	22ff      	movs	r2, #255	@ 0xff
 8010136:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801013a:	e01b      	b.n	8010174 <HAL_UART_Receive+0xd2>
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	227f      	movs	r2, #127	@ 0x7f
 8010140:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010144:	e016      	b.n	8010174 <HAL_UART_Receive+0xd2>
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	689b      	ldr	r3, [r3, #8]
 801014a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801014e:	d10d      	bne.n	801016c <HAL_UART_Receive+0xca>
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	691b      	ldr	r3, [r3, #16]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d104      	bne.n	8010162 <HAL_UART_Receive+0xc0>
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	227f      	movs	r2, #127	@ 0x7f
 801015c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010160:	e008      	b.n	8010174 <HAL_UART_Receive+0xd2>
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	223f      	movs	r2, #63	@ 0x3f
 8010166:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801016a:	e003      	b.n	8010174 <HAL_UART_Receive+0xd2>
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	2200      	movs	r2, #0
 8010170:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801017a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	689b      	ldr	r3, [r3, #8]
 8010180:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010184:	d108      	bne.n	8010198 <HAL_UART_Receive+0xf6>
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	691b      	ldr	r3, [r3, #16]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d104      	bne.n	8010198 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 801018e:	2300      	movs	r3, #0
 8010190:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8010192:	68bb      	ldr	r3, [r7, #8]
 8010194:	61bb      	str	r3, [r7, #24]
 8010196:	e003      	b.n	80101a0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8010198:	68bb      	ldr	r3, [r7, #8]
 801019a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801019c:	2300      	movs	r3, #0
 801019e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80101a0:	e036      	b.n	8010210 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80101a2:	683b      	ldr	r3, [r7, #0]
 80101a4:	9300      	str	r3, [sp, #0]
 80101a6:	697b      	ldr	r3, [r7, #20]
 80101a8:	2200      	movs	r2, #0
 80101aa:	2120      	movs	r1, #32
 80101ac:	68f8      	ldr	r0, [r7, #12]
 80101ae:	f000 fff9 	bl	80111a4 <UART_WaitOnFlagUntilTimeout>
 80101b2:	4603      	mov	r3, r0
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d005      	beq.n	80101c4 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	2220      	movs	r2, #32
 80101bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80101c0:	2303      	movs	r3, #3
 80101c2:	e032      	b.n	801022a <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80101c4:	69fb      	ldr	r3, [r7, #28]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d10c      	bne.n	80101e4 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101d0:	b29a      	uxth	r2, r3
 80101d2:	8a7b      	ldrh	r3, [r7, #18]
 80101d4:	4013      	ands	r3, r2
 80101d6:	b29a      	uxth	r2, r3
 80101d8:	69bb      	ldr	r3, [r7, #24]
 80101da:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80101dc:	69bb      	ldr	r3, [r7, #24]
 80101de:	3302      	adds	r3, #2
 80101e0:	61bb      	str	r3, [r7, #24]
 80101e2:	e00c      	b.n	80101fe <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101ea:	b2da      	uxtb	r2, r3
 80101ec:	8a7b      	ldrh	r3, [r7, #18]
 80101ee:	b2db      	uxtb	r3, r3
 80101f0:	4013      	ands	r3, r2
 80101f2:	b2da      	uxtb	r2, r3
 80101f4:	69fb      	ldr	r3, [r7, #28]
 80101f6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80101f8:	69fb      	ldr	r3, [r7, #28]
 80101fa:	3301      	adds	r3, #1
 80101fc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010204:	b29b      	uxth	r3, r3
 8010206:	3b01      	subs	r3, #1
 8010208:	b29a      	uxth	r2, r3
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010216:	b29b      	uxth	r3, r3
 8010218:	2b00      	cmp	r3, #0
 801021a:	d1c2      	bne.n	80101a2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	2220      	movs	r2, #32
 8010220:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8010224:	2300      	movs	r3, #0
 8010226:	e000      	b.n	801022a <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8010228:	2302      	movs	r3, #2
  }
}
 801022a:	4618      	mov	r0, r3
 801022c:	3720      	adds	r7, #32
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}
	...

08010234 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010238:	b092      	sub	sp, #72	@ 0x48
 801023a:	af00      	add	r7, sp, #0
 801023c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801023e:	2300      	movs	r3, #0
 8010240:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010244:	697b      	ldr	r3, [r7, #20]
 8010246:	689a      	ldr	r2, [r3, #8]
 8010248:	697b      	ldr	r3, [r7, #20]
 801024a:	691b      	ldr	r3, [r3, #16]
 801024c:	431a      	orrs	r2, r3
 801024e:	697b      	ldr	r3, [r7, #20]
 8010250:	695b      	ldr	r3, [r3, #20]
 8010252:	431a      	orrs	r2, r3
 8010254:	697b      	ldr	r3, [r7, #20]
 8010256:	69db      	ldr	r3, [r3, #28]
 8010258:	4313      	orrs	r3, r2
 801025a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801025c:	697b      	ldr	r3, [r7, #20]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	681a      	ldr	r2, [r3, #0]
 8010262:	4bbe      	ldr	r3, [pc, #760]	@ (801055c <UART_SetConfig+0x328>)
 8010264:	4013      	ands	r3, r2
 8010266:	697a      	ldr	r2, [r7, #20]
 8010268:	6812      	ldr	r2, [r2, #0]
 801026a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801026c:	430b      	orrs	r3, r1
 801026e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010270:	697b      	ldr	r3, [r7, #20]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	685b      	ldr	r3, [r3, #4]
 8010276:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801027a:	697b      	ldr	r3, [r7, #20]
 801027c:	68da      	ldr	r2, [r3, #12]
 801027e:	697b      	ldr	r3, [r7, #20]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	430a      	orrs	r2, r1
 8010284:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010286:	697b      	ldr	r3, [r7, #20]
 8010288:	699b      	ldr	r3, [r3, #24]
 801028a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801028c:	697b      	ldr	r3, [r7, #20]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	4ab3      	ldr	r2, [pc, #716]	@ (8010560 <UART_SetConfig+0x32c>)
 8010292:	4293      	cmp	r3, r2
 8010294:	d004      	beq.n	80102a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010296:	697b      	ldr	r3, [r7, #20]
 8010298:	6a1b      	ldr	r3, [r3, #32]
 801029a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801029c:	4313      	orrs	r3, r2
 801029e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80102a0:	697b      	ldr	r3, [r7, #20]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	689a      	ldr	r2, [r3, #8]
 80102a6:	4baf      	ldr	r3, [pc, #700]	@ (8010564 <UART_SetConfig+0x330>)
 80102a8:	4013      	ands	r3, r2
 80102aa:	697a      	ldr	r2, [r7, #20]
 80102ac:	6812      	ldr	r2, [r2, #0]
 80102ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80102b0:	430b      	orrs	r3, r1
 80102b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80102b4:	697b      	ldr	r3, [r7, #20]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102ba:	f023 010f 	bic.w	r1, r3, #15
 80102be:	697b      	ldr	r3, [r7, #20]
 80102c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80102c2:	697b      	ldr	r3, [r7, #20]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	430a      	orrs	r2, r1
 80102c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80102ca:	697b      	ldr	r3, [r7, #20]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	4aa6      	ldr	r2, [pc, #664]	@ (8010568 <UART_SetConfig+0x334>)
 80102d0:	4293      	cmp	r3, r2
 80102d2:	d177      	bne.n	80103c4 <UART_SetConfig+0x190>
 80102d4:	4ba5      	ldr	r3, [pc, #660]	@ (801056c <UART_SetConfig+0x338>)
 80102d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80102d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80102dc:	2b28      	cmp	r3, #40	@ 0x28
 80102de:	d86d      	bhi.n	80103bc <UART_SetConfig+0x188>
 80102e0:	a201      	add	r2, pc, #4	@ (adr r2, 80102e8 <UART_SetConfig+0xb4>)
 80102e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102e6:	bf00      	nop
 80102e8:	0801038d 	.word	0x0801038d
 80102ec:	080103bd 	.word	0x080103bd
 80102f0:	080103bd 	.word	0x080103bd
 80102f4:	080103bd 	.word	0x080103bd
 80102f8:	080103bd 	.word	0x080103bd
 80102fc:	080103bd 	.word	0x080103bd
 8010300:	080103bd 	.word	0x080103bd
 8010304:	080103bd 	.word	0x080103bd
 8010308:	08010395 	.word	0x08010395
 801030c:	080103bd 	.word	0x080103bd
 8010310:	080103bd 	.word	0x080103bd
 8010314:	080103bd 	.word	0x080103bd
 8010318:	080103bd 	.word	0x080103bd
 801031c:	080103bd 	.word	0x080103bd
 8010320:	080103bd 	.word	0x080103bd
 8010324:	080103bd 	.word	0x080103bd
 8010328:	0801039d 	.word	0x0801039d
 801032c:	080103bd 	.word	0x080103bd
 8010330:	080103bd 	.word	0x080103bd
 8010334:	080103bd 	.word	0x080103bd
 8010338:	080103bd 	.word	0x080103bd
 801033c:	080103bd 	.word	0x080103bd
 8010340:	080103bd 	.word	0x080103bd
 8010344:	080103bd 	.word	0x080103bd
 8010348:	080103a5 	.word	0x080103a5
 801034c:	080103bd 	.word	0x080103bd
 8010350:	080103bd 	.word	0x080103bd
 8010354:	080103bd 	.word	0x080103bd
 8010358:	080103bd 	.word	0x080103bd
 801035c:	080103bd 	.word	0x080103bd
 8010360:	080103bd 	.word	0x080103bd
 8010364:	080103bd 	.word	0x080103bd
 8010368:	080103ad 	.word	0x080103ad
 801036c:	080103bd 	.word	0x080103bd
 8010370:	080103bd 	.word	0x080103bd
 8010374:	080103bd 	.word	0x080103bd
 8010378:	080103bd 	.word	0x080103bd
 801037c:	080103bd 	.word	0x080103bd
 8010380:	080103bd 	.word	0x080103bd
 8010384:	080103bd 	.word	0x080103bd
 8010388:	080103b5 	.word	0x080103b5
 801038c:	2301      	movs	r3, #1
 801038e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010392:	e326      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010394:	2304      	movs	r3, #4
 8010396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801039a:	e322      	b.n	80109e2 <UART_SetConfig+0x7ae>
 801039c:	2308      	movs	r3, #8
 801039e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80103a2:	e31e      	b.n	80109e2 <UART_SetConfig+0x7ae>
 80103a4:	2310      	movs	r3, #16
 80103a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80103aa:	e31a      	b.n	80109e2 <UART_SetConfig+0x7ae>
 80103ac:	2320      	movs	r3, #32
 80103ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80103b2:	e316      	b.n	80109e2 <UART_SetConfig+0x7ae>
 80103b4:	2340      	movs	r3, #64	@ 0x40
 80103b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80103ba:	e312      	b.n	80109e2 <UART_SetConfig+0x7ae>
 80103bc:	2380      	movs	r3, #128	@ 0x80
 80103be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80103c2:	e30e      	b.n	80109e2 <UART_SetConfig+0x7ae>
 80103c4:	697b      	ldr	r3, [r7, #20]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	4a69      	ldr	r2, [pc, #420]	@ (8010570 <UART_SetConfig+0x33c>)
 80103ca:	4293      	cmp	r3, r2
 80103cc:	d130      	bne.n	8010430 <UART_SetConfig+0x1fc>
 80103ce:	4b67      	ldr	r3, [pc, #412]	@ (801056c <UART_SetConfig+0x338>)
 80103d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80103d2:	f003 0307 	and.w	r3, r3, #7
 80103d6:	2b05      	cmp	r3, #5
 80103d8:	d826      	bhi.n	8010428 <UART_SetConfig+0x1f4>
 80103da:	a201      	add	r2, pc, #4	@ (adr r2, 80103e0 <UART_SetConfig+0x1ac>)
 80103dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103e0:	080103f9 	.word	0x080103f9
 80103e4:	08010401 	.word	0x08010401
 80103e8:	08010409 	.word	0x08010409
 80103ec:	08010411 	.word	0x08010411
 80103f0:	08010419 	.word	0x08010419
 80103f4:	08010421 	.word	0x08010421
 80103f8:	2300      	movs	r3, #0
 80103fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80103fe:	e2f0      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010400:	2304      	movs	r3, #4
 8010402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010406:	e2ec      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010408:	2308      	movs	r3, #8
 801040a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801040e:	e2e8      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010410:	2310      	movs	r3, #16
 8010412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010416:	e2e4      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010418:	2320      	movs	r3, #32
 801041a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801041e:	e2e0      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010420:	2340      	movs	r3, #64	@ 0x40
 8010422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010426:	e2dc      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010428:	2380      	movs	r3, #128	@ 0x80
 801042a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801042e:	e2d8      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010430:	697b      	ldr	r3, [r7, #20]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	4a4f      	ldr	r2, [pc, #316]	@ (8010574 <UART_SetConfig+0x340>)
 8010436:	4293      	cmp	r3, r2
 8010438:	d130      	bne.n	801049c <UART_SetConfig+0x268>
 801043a:	4b4c      	ldr	r3, [pc, #304]	@ (801056c <UART_SetConfig+0x338>)
 801043c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801043e:	f003 0307 	and.w	r3, r3, #7
 8010442:	2b05      	cmp	r3, #5
 8010444:	d826      	bhi.n	8010494 <UART_SetConfig+0x260>
 8010446:	a201      	add	r2, pc, #4	@ (adr r2, 801044c <UART_SetConfig+0x218>)
 8010448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801044c:	08010465 	.word	0x08010465
 8010450:	0801046d 	.word	0x0801046d
 8010454:	08010475 	.word	0x08010475
 8010458:	0801047d 	.word	0x0801047d
 801045c:	08010485 	.word	0x08010485
 8010460:	0801048d 	.word	0x0801048d
 8010464:	2300      	movs	r3, #0
 8010466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801046a:	e2ba      	b.n	80109e2 <UART_SetConfig+0x7ae>
 801046c:	2304      	movs	r3, #4
 801046e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010472:	e2b6      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010474:	2308      	movs	r3, #8
 8010476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801047a:	e2b2      	b.n	80109e2 <UART_SetConfig+0x7ae>
 801047c:	2310      	movs	r3, #16
 801047e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010482:	e2ae      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010484:	2320      	movs	r3, #32
 8010486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801048a:	e2aa      	b.n	80109e2 <UART_SetConfig+0x7ae>
 801048c:	2340      	movs	r3, #64	@ 0x40
 801048e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010492:	e2a6      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010494:	2380      	movs	r3, #128	@ 0x80
 8010496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801049a:	e2a2      	b.n	80109e2 <UART_SetConfig+0x7ae>
 801049c:	697b      	ldr	r3, [r7, #20]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	4a35      	ldr	r2, [pc, #212]	@ (8010578 <UART_SetConfig+0x344>)
 80104a2:	4293      	cmp	r3, r2
 80104a4:	d130      	bne.n	8010508 <UART_SetConfig+0x2d4>
 80104a6:	4b31      	ldr	r3, [pc, #196]	@ (801056c <UART_SetConfig+0x338>)
 80104a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80104aa:	f003 0307 	and.w	r3, r3, #7
 80104ae:	2b05      	cmp	r3, #5
 80104b0:	d826      	bhi.n	8010500 <UART_SetConfig+0x2cc>
 80104b2:	a201      	add	r2, pc, #4	@ (adr r2, 80104b8 <UART_SetConfig+0x284>)
 80104b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104b8:	080104d1 	.word	0x080104d1
 80104bc:	080104d9 	.word	0x080104d9
 80104c0:	080104e1 	.word	0x080104e1
 80104c4:	080104e9 	.word	0x080104e9
 80104c8:	080104f1 	.word	0x080104f1
 80104cc:	080104f9 	.word	0x080104f9
 80104d0:	2300      	movs	r3, #0
 80104d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104d6:	e284      	b.n	80109e2 <UART_SetConfig+0x7ae>
 80104d8:	2304      	movs	r3, #4
 80104da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104de:	e280      	b.n	80109e2 <UART_SetConfig+0x7ae>
 80104e0:	2308      	movs	r3, #8
 80104e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104e6:	e27c      	b.n	80109e2 <UART_SetConfig+0x7ae>
 80104e8:	2310      	movs	r3, #16
 80104ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104ee:	e278      	b.n	80109e2 <UART_SetConfig+0x7ae>
 80104f0:	2320      	movs	r3, #32
 80104f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104f6:	e274      	b.n	80109e2 <UART_SetConfig+0x7ae>
 80104f8:	2340      	movs	r3, #64	@ 0x40
 80104fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104fe:	e270      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010500:	2380      	movs	r3, #128	@ 0x80
 8010502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010506:	e26c      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010508:	697b      	ldr	r3, [r7, #20]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	4a1b      	ldr	r2, [pc, #108]	@ (801057c <UART_SetConfig+0x348>)
 801050e:	4293      	cmp	r3, r2
 8010510:	d142      	bne.n	8010598 <UART_SetConfig+0x364>
 8010512:	4b16      	ldr	r3, [pc, #88]	@ (801056c <UART_SetConfig+0x338>)
 8010514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010516:	f003 0307 	and.w	r3, r3, #7
 801051a:	2b05      	cmp	r3, #5
 801051c:	d838      	bhi.n	8010590 <UART_SetConfig+0x35c>
 801051e:	a201      	add	r2, pc, #4	@ (adr r2, 8010524 <UART_SetConfig+0x2f0>)
 8010520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010524:	0801053d 	.word	0x0801053d
 8010528:	08010545 	.word	0x08010545
 801052c:	0801054d 	.word	0x0801054d
 8010530:	08010555 	.word	0x08010555
 8010534:	08010581 	.word	0x08010581
 8010538:	08010589 	.word	0x08010589
 801053c:	2300      	movs	r3, #0
 801053e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010542:	e24e      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010544:	2304      	movs	r3, #4
 8010546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801054a:	e24a      	b.n	80109e2 <UART_SetConfig+0x7ae>
 801054c:	2308      	movs	r3, #8
 801054e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010552:	e246      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010554:	2310      	movs	r3, #16
 8010556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801055a:	e242      	b.n	80109e2 <UART_SetConfig+0x7ae>
 801055c:	cfff69f3 	.word	0xcfff69f3
 8010560:	58000c00 	.word	0x58000c00
 8010564:	11fff4ff 	.word	0x11fff4ff
 8010568:	40011000 	.word	0x40011000
 801056c:	58024400 	.word	0x58024400
 8010570:	40004400 	.word	0x40004400
 8010574:	40004800 	.word	0x40004800
 8010578:	40004c00 	.word	0x40004c00
 801057c:	40005000 	.word	0x40005000
 8010580:	2320      	movs	r3, #32
 8010582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010586:	e22c      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010588:	2340      	movs	r3, #64	@ 0x40
 801058a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801058e:	e228      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010590:	2380      	movs	r3, #128	@ 0x80
 8010592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010596:	e224      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010598:	697b      	ldr	r3, [r7, #20]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	4ab1      	ldr	r2, [pc, #708]	@ (8010864 <UART_SetConfig+0x630>)
 801059e:	4293      	cmp	r3, r2
 80105a0:	d176      	bne.n	8010690 <UART_SetConfig+0x45c>
 80105a2:	4bb1      	ldr	r3, [pc, #708]	@ (8010868 <UART_SetConfig+0x634>)
 80105a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80105a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80105aa:	2b28      	cmp	r3, #40	@ 0x28
 80105ac:	d86c      	bhi.n	8010688 <UART_SetConfig+0x454>
 80105ae:	a201      	add	r2, pc, #4	@ (adr r2, 80105b4 <UART_SetConfig+0x380>)
 80105b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105b4:	08010659 	.word	0x08010659
 80105b8:	08010689 	.word	0x08010689
 80105bc:	08010689 	.word	0x08010689
 80105c0:	08010689 	.word	0x08010689
 80105c4:	08010689 	.word	0x08010689
 80105c8:	08010689 	.word	0x08010689
 80105cc:	08010689 	.word	0x08010689
 80105d0:	08010689 	.word	0x08010689
 80105d4:	08010661 	.word	0x08010661
 80105d8:	08010689 	.word	0x08010689
 80105dc:	08010689 	.word	0x08010689
 80105e0:	08010689 	.word	0x08010689
 80105e4:	08010689 	.word	0x08010689
 80105e8:	08010689 	.word	0x08010689
 80105ec:	08010689 	.word	0x08010689
 80105f0:	08010689 	.word	0x08010689
 80105f4:	08010669 	.word	0x08010669
 80105f8:	08010689 	.word	0x08010689
 80105fc:	08010689 	.word	0x08010689
 8010600:	08010689 	.word	0x08010689
 8010604:	08010689 	.word	0x08010689
 8010608:	08010689 	.word	0x08010689
 801060c:	08010689 	.word	0x08010689
 8010610:	08010689 	.word	0x08010689
 8010614:	08010671 	.word	0x08010671
 8010618:	08010689 	.word	0x08010689
 801061c:	08010689 	.word	0x08010689
 8010620:	08010689 	.word	0x08010689
 8010624:	08010689 	.word	0x08010689
 8010628:	08010689 	.word	0x08010689
 801062c:	08010689 	.word	0x08010689
 8010630:	08010689 	.word	0x08010689
 8010634:	08010679 	.word	0x08010679
 8010638:	08010689 	.word	0x08010689
 801063c:	08010689 	.word	0x08010689
 8010640:	08010689 	.word	0x08010689
 8010644:	08010689 	.word	0x08010689
 8010648:	08010689 	.word	0x08010689
 801064c:	08010689 	.word	0x08010689
 8010650:	08010689 	.word	0x08010689
 8010654:	08010681 	.word	0x08010681
 8010658:	2301      	movs	r3, #1
 801065a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801065e:	e1c0      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010660:	2304      	movs	r3, #4
 8010662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010666:	e1bc      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010668:	2308      	movs	r3, #8
 801066a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801066e:	e1b8      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010670:	2310      	movs	r3, #16
 8010672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010676:	e1b4      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010678:	2320      	movs	r3, #32
 801067a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801067e:	e1b0      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010680:	2340      	movs	r3, #64	@ 0x40
 8010682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010686:	e1ac      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010688:	2380      	movs	r3, #128	@ 0x80
 801068a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801068e:	e1a8      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010690:	697b      	ldr	r3, [r7, #20]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	4a75      	ldr	r2, [pc, #468]	@ (801086c <UART_SetConfig+0x638>)
 8010696:	4293      	cmp	r3, r2
 8010698:	d130      	bne.n	80106fc <UART_SetConfig+0x4c8>
 801069a:	4b73      	ldr	r3, [pc, #460]	@ (8010868 <UART_SetConfig+0x634>)
 801069c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801069e:	f003 0307 	and.w	r3, r3, #7
 80106a2:	2b05      	cmp	r3, #5
 80106a4:	d826      	bhi.n	80106f4 <UART_SetConfig+0x4c0>
 80106a6:	a201      	add	r2, pc, #4	@ (adr r2, 80106ac <UART_SetConfig+0x478>)
 80106a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106ac:	080106c5 	.word	0x080106c5
 80106b0:	080106cd 	.word	0x080106cd
 80106b4:	080106d5 	.word	0x080106d5
 80106b8:	080106dd 	.word	0x080106dd
 80106bc:	080106e5 	.word	0x080106e5
 80106c0:	080106ed 	.word	0x080106ed
 80106c4:	2300      	movs	r3, #0
 80106c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106ca:	e18a      	b.n	80109e2 <UART_SetConfig+0x7ae>
 80106cc:	2304      	movs	r3, #4
 80106ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106d2:	e186      	b.n	80109e2 <UART_SetConfig+0x7ae>
 80106d4:	2308      	movs	r3, #8
 80106d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106da:	e182      	b.n	80109e2 <UART_SetConfig+0x7ae>
 80106dc:	2310      	movs	r3, #16
 80106de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106e2:	e17e      	b.n	80109e2 <UART_SetConfig+0x7ae>
 80106e4:	2320      	movs	r3, #32
 80106e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106ea:	e17a      	b.n	80109e2 <UART_SetConfig+0x7ae>
 80106ec:	2340      	movs	r3, #64	@ 0x40
 80106ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106f2:	e176      	b.n	80109e2 <UART_SetConfig+0x7ae>
 80106f4:	2380      	movs	r3, #128	@ 0x80
 80106f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106fa:	e172      	b.n	80109e2 <UART_SetConfig+0x7ae>
 80106fc:	697b      	ldr	r3, [r7, #20]
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	4a5b      	ldr	r2, [pc, #364]	@ (8010870 <UART_SetConfig+0x63c>)
 8010702:	4293      	cmp	r3, r2
 8010704:	d130      	bne.n	8010768 <UART_SetConfig+0x534>
 8010706:	4b58      	ldr	r3, [pc, #352]	@ (8010868 <UART_SetConfig+0x634>)
 8010708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801070a:	f003 0307 	and.w	r3, r3, #7
 801070e:	2b05      	cmp	r3, #5
 8010710:	d826      	bhi.n	8010760 <UART_SetConfig+0x52c>
 8010712:	a201      	add	r2, pc, #4	@ (adr r2, 8010718 <UART_SetConfig+0x4e4>)
 8010714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010718:	08010731 	.word	0x08010731
 801071c:	08010739 	.word	0x08010739
 8010720:	08010741 	.word	0x08010741
 8010724:	08010749 	.word	0x08010749
 8010728:	08010751 	.word	0x08010751
 801072c:	08010759 	.word	0x08010759
 8010730:	2300      	movs	r3, #0
 8010732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010736:	e154      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010738:	2304      	movs	r3, #4
 801073a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801073e:	e150      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010740:	2308      	movs	r3, #8
 8010742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010746:	e14c      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010748:	2310      	movs	r3, #16
 801074a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801074e:	e148      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010750:	2320      	movs	r3, #32
 8010752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010756:	e144      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010758:	2340      	movs	r3, #64	@ 0x40
 801075a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801075e:	e140      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010760:	2380      	movs	r3, #128	@ 0x80
 8010762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010766:	e13c      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010768:	697b      	ldr	r3, [r7, #20]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	4a41      	ldr	r2, [pc, #260]	@ (8010874 <UART_SetConfig+0x640>)
 801076e:	4293      	cmp	r3, r2
 8010770:	f040 8082 	bne.w	8010878 <UART_SetConfig+0x644>
 8010774:	4b3c      	ldr	r3, [pc, #240]	@ (8010868 <UART_SetConfig+0x634>)
 8010776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010778:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801077c:	2b28      	cmp	r3, #40	@ 0x28
 801077e:	d86d      	bhi.n	801085c <UART_SetConfig+0x628>
 8010780:	a201      	add	r2, pc, #4	@ (adr r2, 8010788 <UART_SetConfig+0x554>)
 8010782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010786:	bf00      	nop
 8010788:	0801082d 	.word	0x0801082d
 801078c:	0801085d 	.word	0x0801085d
 8010790:	0801085d 	.word	0x0801085d
 8010794:	0801085d 	.word	0x0801085d
 8010798:	0801085d 	.word	0x0801085d
 801079c:	0801085d 	.word	0x0801085d
 80107a0:	0801085d 	.word	0x0801085d
 80107a4:	0801085d 	.word	0x0801085d
 80107a8:	08010835 	.word	0x08010835
 80107ac:	0801085d 	.word	0x0801085d
 80107b0:	0801085d 	.word	0x0801085d
 80107b4:	0801085d 	.word	0x0801085d
 80107b8:	0801085d 	.word	0x0801085d
 80107bc:	0801085d 	.word	0x0801085d
 80107c0:	0801085d 	.word	0x0801085d
 80107c4:	0801085d 	.word	0x0801085d
 80107c8:	0801083d 	.word	0x0801083d
 80107cc:	0801085d 	.word	0x0801085d
 80107d0:	0801085d 	.word	0x0801085d
 80107d4:	0801085d 	.word	0x0801085d
 80107d8:	0801085d 	.word	0x0801085d
 80107dc:	0801085d 	.word	0x0801085d
 80107e0:	0801085d 	.word	0x0801085d
 80107e4:	0801085d 	.word	0x0801085d
 80107e8:	08010845 	.word	0x08010845
 80107ec:	0801085d 	.word	0x0801085d
 80107f0:	0801085d 	.word	0x0801085d
 80107f4:	0801085d 	.word	0x0801085d
 80107f8:	0801085d 	.word	0x0801085d
 80107fc:	0801085d 	.word	0x0801085d
 8010800:	0801085d 	.word	0x0801085d
 8010804:	0801085d 	.word	0x0801085d
 8010808:	0801084d 	.word	0x0801084d
 801080c:	0801085d 	.word	0x0801085d
 8010810:	0801085d 	.word	0x0801085d
 8010814:	0801085d 	.word	0x0801085d
 8010818:	0801085d 	.word	0x0801085d
 801081c:	0801085d 	.word	0x0801085d
 8010820:	0801085d 	.word	0x0801085d
 8010824:	0801085d 	.word	0x0801085d
 8010828:	08010855 	.word	0x08010855
 801082c:	2301      	movs	r3, #1
 801082e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010832:	e0d6      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010834:	2304      	movs	r3, #4
 8010836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801083a:	e0d2      	b.n	80109e2 <UART_SetConfig+0x7ae>
 801083c:	2308      	movs	r3, #8
 801083e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010842:	e0ce      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010844:	2310      	movs	r3, #16
 8010846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801084a:	e0ca      	b.n	80109e2 <UART_SetConfig+0x7ae>
 801084c:	2320      	movs	r3, #32
 801084e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010852:	e0c6      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010854:	2340      	movs	r3, #64	@ 0x40
 8010856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801085a:	e0c2      	b.n	80109e2 <UART_SetConfig+0x7ae>
 801085c:	2380      	movs	r3, #128	@ 0x80
 801085e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010862:	e0be      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010864:	40011400 	.word	0x40011400
 8010868:	58024400 	.word	0x58024400
 801086c:	40007800 	.word	0x40007800
 8010870:	40007c00 	.word	0x40007c00
 8010874:	40011800 	.word	0x40011800
 8010878:	697b      	ldr	r3, [r7, #20]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	4aad      	ldr	r2, [pc, #692]	@ (8010b34 <UART_SetConfig+0x900>)
 801087e:	4293      	cmp	r3, r2
 8010880:	d176      	bne.n	8010970 <UART_SetConfig+0x73c>
 8010882:	4bad      	ldr	r3, [pc, #692]	@ (8010b38 <UART_SetConfig+0x904>)
 8010884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010886:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801088a:	2b28      	cmp	r3, #40	@ 0x28
 801088c:	d86c      	bhi.n	8010968 <UART_SetConfig+0x734>
 801088e:	a201      	add	r2, pc, #4	@ (adr r2, 8010894 <UART_SetConfig+0x660>)
 8010890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010894:	08010939 	.word	0x08010939
 8010898:	08010969 	.word	0x08010969
 801089c:	08010969 	.word	0x08010969
 80108a0:	08010969 	.word	0x08010969
 80108a4:	08010969 	.word	0x08010969
 80108a8:	08010969 	.word	0x08010969
 80108ac:	08010969 	.word	0x08010969
 80108b0:	08010969 	.word	0x08010969
 80108b4:	08010941 	.word	0x08010941
 80108b8:	08010969 	.word	0x08010969
 80108bc:	08010969 	.word	0x08010969
 80108c0:	08010969 	.word	0x08010969
 80108c4:	08010969 	.word	0x08010969
 80108c8:	08010969 	.word	0x08010969
 80108cc:	08010969 	.word	0x08010969
 80108d0:	08010969 	.word	0x08010969
 80108d4:	08010949 	.word	0x08010949
 80108d8:	08010969 	.word	0x08010969
 80108dc:	08010969 	.word	0x08010969
 80108e0:	08010969 	.word	0x08010969
 80108e4:	08010969 	.word	0x08010969
 80108e8:	08010969 	.word	0x08010969
 80108ec:	08010969 	.word	0x08010969
 80108f0:	08010969 	.word	0x08010969
 80108f4:	08010951 	.word	0x08010951
 80108f8:	08010969 	.word	0x08010969
 80108fc:	08010969 	.word	0x08010969
 8010900:	08010969 	.word	0x08010969
 8010904:	08010969 	.word	0x08010969
 8010908:	08010969 	.word	0x08010969
 801090c:	08010969 	.word	0x08010969
 8010910:	08010969 	.word	0x08010969
 8010914:	08010959 	.word	0x08010959
 8010918:	08010969 	.word	0x08010969
 801091c:	08010969 	.word	0x08010969
 8010920:	08010969 	.word	0x08010969
 8010924:	08010969 	.word	0x08010969
 8010928:	08010969 	.word	0x08010969
 801092c:	08010969 	.word	0x08010969
 8010930:	08010969 	.word	0x08010969
 8010934:	08010961 	.word	0x08010961
 8010938:	2301      	movs	r3, #1
 801093a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801093e:	e050      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010940:	2304      	movs	r3, #4
 8010942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010946:	e04c      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010948:	2308      	movs	r3, #8
 801094a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801094e:	e048      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010950:	2310      	movs	r3, #16
 8010952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010956:	e044      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010958:	2320      	movs	r3, #32
 801095a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801095e:	e040      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010960:	2340      	movs	r3, #64	@ 0x40
 8010962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010966:	e03c      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010968:	2380      	movs	r3, #128	@ 0x80
 801096a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801096e:	e038      	b.n	80109e2 <UART_SetConfig+0x7ae>
 8010970:	697b      	ldr	r3, [r7, #20]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	4a71      	ldr	r2, [pc, #452]	@ (8010b3c <UART_SetConfig+0x908>)
 8010976:	4293      	cmp	r3, r2
 8010978:	d130      	bne.n	80109dc <UART_SetConfig+0x7a8>
 801097a:	4b6f      	ldr	r3, [pc, #444]	@ (8010b38 <UART_SetConfig+0x904>)
 801097c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801097e:	f003 0307 	and.w	r3, r3, #7
 8010982:	2b05      	cmp	r3, #5
 8010984:	d826      	bhi.n	80109d4 <UART_SetConfig+0x7a0>
 8010986:	a201      	add	r2, pc, #4	@ (adr r2, 801098c <UART_SetConfig+0x758>)
 8010988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801098c:	080109a5 	.word	0x080109a5
 8010990:	080109ad 	.word	0x080109ad
 8010994:	080109b5 	.word	0x080109b5
 8010998:	080109bd 	.word	0x080109bd
 801099c:	080109c5 	.word	0x080109c5
 80109a0:	080109cd 	.word	0x080109cd
 80109a4:	2302      	movs	r3, #2
 80109a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109aa:	e01a      	b.n	80109e2 <UART_SetConfig+0x7ae>
 80109ac:	2304      	movs	r3, #4
 80109ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109b2:	e016      	b.n	80109e2 <UART_SetConfig+0x7ae>
 80109b4:	2308      	movs	r3, #8
 80109b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109ba:	e012      	b.n	80109e2 <UART_SetConfig+0x7ae>
 80109bc:	2310      	movs	r3, #16
 80109be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109c2:	e00e      	b.n	80109e2 <UART_SetConfig+0x7ae>
 80109c4:	2320      	movs	r3, #32
 80109c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109ca:	e00a      	b.n	80109e2 <UART_SetConfig+0x7ae>
 80109cc:	2340      	movs	r3, #64	@ 0x40
 80109ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109d2:	e006      	b.n	80109e2 <UART_SetConfig+0x7ae>
 80109d4:	2380      	movs	r3, #128	@ 0x80
 80109d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109da:	e002      	b.n	80109e2 <UART_SetConfig+0x7ae>
 80109dc:	2380      	movs	r3, #128	@ 0x80
 80109de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80109e2:	697b      	ldr	r3, [r7, #20]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	4a55      	ldr	r2, [pc, #340]	@ (8010b3c <UART_SetConfig+0x908>)
 80109e8:	4293      	cmp	r3, r2
 80109ea:	f040 80f8 	bne.w	8010bde <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80109ee:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80109f2:	2b20      	cmp	r3, #32
 80109f4:	dc46      	bgt.n	8010a84 <UART_SetConfig+0x850>
 80109f6:	2b02      	cmp	r3, #2
 80109f8:	db75      	blt.n	8010ae6 <UART_SetConfig+0x8b2>
 80109fa:	3b02      	subs	r3, #2
 80109fc:	2b1e      	cmp	r3, #30
 80109fe:	d872      	bhi.n	8010ae6 <UART_SetConfig+0x8b2>
 8010a00:	a201      	add	r2, pc, #4	@ (adr r2, 8010a08 <UART_SetConfig+0x7d4>)
 8010a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a06:	bf00      	nop
 8010a08:	08010a8b 	.word	0x08010a8b
 8010a0c:	08010ae7 	.word	0x08010ae7
 8010a10:	08010a93 	.word	0x08010a93
 8010a14:	08010ae7 	.word	0x08010ae7
 8010a18:	08010ae7 	.word	0x08010ae7
 8010a1c:	08010ae7 	.word	0x08010ae7
 8010a20:	08010aa3 	.word	0x08010aa3
 8010a24:	08010ae7 	.word	0x08010ae7
 8010a28:	08010ae7 	.word	0x08010ae7
 8010a2c:	08010ae7 	.word	0x08010ae7
 8010a30:	08010ae7 	.word	0x08010ae7
 8010a34:	08010ae7 	.word	0x08010ae7
 8010a38:	08010ae7 	.word	0x08010ae7
 8010a3c:	08010ae7 	.word	0x08010ae7
 8010a40:	08010ab3 	.word	0x08010ab3
 8010a44:	08010ae7 	.word	0x08010ae7
 8010a48:	08010ae7 	.word	0x08010ae7
 8010a4c:	08010ae7 	.word	0x08010ae7
 8010a50:	08010ae7 	.word	0x08010ae7
 8010a54:	08010ae7 	.word	0x08010ae7
 8010a58:	08010ae7 	.word	0x08010ae7
 8010a5c:	08010ae7 	.word	0x08010ae7
 8010a60:	08010ae7 	.word	0x08010ae7
 8010a64:	08010ae7 	.word	0x08010ae7
 8010a68:	08010ae7 	.word	0x08010ae7
 8010a6c:	08010ae7 	.word	0x08010ae7
 8010a70:	08010ae7 	.word	0x08010ae7
 8010a74:	08010ae7 	.word	0x08010ae7
 8010a78:	08010ae7 	.word	0x08010ae7
 8010a7c:	08010ae7 	.word	0x08010ae7
 8010a80:	08010ad9 	.word	0x08010ad9
 8010a84:	2b40      	cmp	r3, #64	@ 0x40
 8010a86:	d02a      	beq.n	8010ade <UART_SetConfig+0x8aa>
 8010a88:	e02d      	b.n	8010ae6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010a8a:	f7fc fed3 	bl	800d834 <HAL_RCCEx_GetD3PCLK1Freq>
 8010a8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010a90:	e02f      	b.n	8010af2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010a92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010a96:	4618      	mov	r0, r3
 8010a98:	f7fc fee2 	bl	800d860 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010aa0:	e027      	b.n	8010af2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010aa2:	f107 0318 	add.w	r3, r7, #24
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	f7fd f82e 	bl	800db08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010aac:	69fb      	ldr	r3, [r7, #28]
 8010aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010ab0:	e01f      	b.n	8010af2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010ab2:	4b21      	ldr	r3, [pc, #132]	@ (8010b38 <UART_SetConfig+0x904>)
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	f003 0320 	and.w	r3, r3, #32
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d009      	beq.n	8010ad2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010abe:	4b1e      	ldr	r3, [pc, #120]	@ (8010b38 <UART_SetConfig+0x904>)
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	08db      	lsrs	r3, r3, #3
 8010ac4:	f003 0303 	and.w	r3, r3, #3
 8010ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8010b40 <UART_SetConfig+0x90c>)
 8010aca:	fa22 f303 	lsr.w	r3, r2, r3
 8010ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010ad0:	e00f      	b.n	8010af2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8010b40 <UART_SetConfig+0x90c>)
 8010ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010ad6:	e00c      	b.n	8010af2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8010b44 <UART_SetConfig+0x910>)
 8010ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010adc:	e009      	b.n	8010af2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010ade:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010ae4:	e005      	b.n	8010af2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010aea:	2301      	movs	r3, #1
 8010aec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010af0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010af2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	f000 81ee 	beq.w	8010ed6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010afa:	697b      	ldr	r3, [r7, #20]
 8010afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010afe:	4a12      	ldr	r2, [pc, #72]	@ (8010b48 <UART_SetConfig+0x914>)
 8010b00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b04:	461a      	mov	r2, r3
 8010b06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b08:	fbb3 f3f2 	udiv	r3, r3, r2
 8010b0c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010b0e:	697b      	ldr	r3, [r7, #20]
 8010b10:	685a      	ldr	r2, [r3, #4]
 8010b12:	4613      	mov	r3, r2
 8010b14:	005b      	lsls	r3, r3, #1
 8010b16:	4413      	add	r3, r2
 8010b18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010b1a:	429a      	cmp	r2, r3
 8010b1c:	d305      	bcc.n	8010b2a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010b1e:	697b      	ldr	r3, [r7, #20]
 8010b20:	685b      	ldr	r3, [r3, #4]
 8010b22:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010b24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010b26:	429a      	cmp	r2, r3
 8010b28:	d910      	bls.n	8010b4c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8010b2a:	2301      	movs	r3, #1
 8010b2c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010b30:	e1d1      	b.n	8010ed6 <UART_SetConfig+0xca2>
 8010b32:	bf00      	nop
 8010b34:	40011c00 	.word	0x40011c00
 8010b38:	58024400 	.word	0x58024400
 8010b3c:	58000c00 	.word	0x58000c00
 8010b40:	03d09000 	.word	0x03d09000
 8010b44:	003d0900 	.word	0x003d0900
 8010b48:	08014c24 	.word	0x08014c24
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010b4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b4e:	2200      	movs	r2, #0
 8010b50:	60bb      	str	r3, [r7, #8]
 8010b52:	60fa      	str	r2, [r7, #12]
 8010b54:	697b      	ldr	r3, [r7, #20]
 8010b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b58:	4ac0      	ldr	r2, [pc, #768]	@ (8010e5c <UART_SetConfig+0xc28>)
 8010b5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b5e:	b29b      	uxth	r3, r3
 8010b60:	2200      	movs	r2, #0
 8010b62:	603b      	str	r3, [r7, #0]
 8010b64:	607a      	str	r2, [r7, #4]
 8010b66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010b6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010b6e:	f7ef fc27 	bl	80003c0 <__aeabi_uldivmod>
 8010b72:	4602      	mov	r2, r0
 8010b74:	460b      	mov	r3, r1
 8010b76:	4610      	mov	r0, r2
 8010b78:	4619      	mov	r1, r3
 8010b7a:	f04f 0200 	mov.w	r2, #0
 8010b7e:	f04f 0300 	mov.w	r3, #0
 8010b82:	020b      	lsls	r3, r1, #8
 8010b84:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010b88:	0202      	lsls	r2, r0, #8
 8010b8a:	6979      	ldr	r1, [r7, #20]
 8010b8c:	6849      	ldr	r1, [r1, #4]
 8010b8e:	0849      	lsrs	r1, r1, #1
 8010b90:	2000      	movs	r0, #0
 8010b92:	460c      	mov	r4, r1
 8010b94:	4605      	mov	r5, r0
 8010b96:	eb12 0804 	adds.w	r8, r2, r4
 8010b9a:	eb43 0905 	adc.w	r9, r3, r5
 8010b9e:	697b      	ldr	r3, [r7, #20]
 8010ba0:	685b      	ldr	r3, [r3, #4]
 8010ba2:	2200      	movs	r2, #0
 8010ba4:	469a      	mov	sl, r3
 8010ba6:	4693      	mov	fp, r2
 8010ba8:	4652      	mov	r2, sl
 8010baa:	465b      	mov	r3, fp
 8010bac:	4640      	mov	r0, r8
 8010bae:	4649      	mov	r1, r9
 8010bb0:	f7ef fc06 	bl	80003c0 <__aeabi_uldivmod>
 8010bb4:	4602      	mov	r2, r0
 8010bb6:	460b      	mov	r3, r1
 8010bb8:	4613      	mov	r3, r2
 8010bba:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010bc2:	d308      	bcc.n	8010bd6 <UART_SetConfig+0x9a2>
 8010bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010bca:	d204      	bcs.n	8010bd6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8010bcc:	697b      	ldr	r3, [r7, #20]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010bd2:	60da      	str	r2, [r3, #12]
 8010bd4:	e17f      	b.n	8010ed6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8010bd6:	2301      	movs	r3, #1
 8010bd8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010bdc:	e17b      	b.n	8010ed6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010bde:	697b      	ldr	r3, [r7, #20]
 8010be0:	69db      	ldr	r3, [r3, #28]
 8010be2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010be6:	f040 80bd 	bne.w	8010d64 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8010bea:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010bee:	2b20      	cmp	r3, #32
 8010bf0:	dc48      	bgt.n	8010c84 <UART_SetConfig+0xa50>
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	db7b      	blt.n	8010cee <UART_SetConfig+0xaba>
 8010bf6:	2b20      	cmp	r3, #32
 8010bf8:	d879      	bhi.n	8010cee <UART_SetConfig+0xaba>
 8010bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8010c00 <UART_SetConfig+0x9cc>)
 8010bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c00:	08010c8b 	.word	0x08010c8b
 8010c04:	08010c93 	.word	0x08010c93
 8010c08:	08010cef 	.word	0x08010cef
 8010c0c:	08010cef 	.word	0x08010cef
 8010c10:	08010c9b 	.word	0x08010c9b
 8010c14:	08010cef 	.word	0x08010cef
 8010c18:	08010cef 	.word	0x08010cef
 8010c1c:	08010cef 	.word	0x08010cef
 8010c20:	08010cab 	.word	0x08010cab
 8010c24:	08010cef 	.word	0x08010cef
 8010c28:	08010cef 	.word	0x08010cef
 8010c2c:	08010cef 	.word	0x08010cef
 8010c30:	08010cef 	.word	0x08010cef
 8010c34:	08010cef 	.word	0x08010cef
 8010c38:	08010cef 	.word	0x08010cef
 8010c3c:	08010cef 	.word	0x08010cef
 8010c40:	08010cbb 	.word	0x08010cbb
 8010c44:	08010cef 	.word	0x08010cef
 8010c48:	08010cef 	.word	0x08010cef
 8010c4c:	08010cef 	.word	0x08010cef
 8010c50:	08010cef 	.word	0x08010cef
 8010c54:	08010cef 	.word	0x08010cef
 8010c58:	08010cef 	.word	0x08010cef
 8010c5c:	08010cef 	.word	0x08010cef
 8010c60:	08010cef 	.word	0x08010cef
 8010c64:	08010cef 	.word	0x08010cef
 8010c68:	08010cef 	.word	0x08010cef
 8010c6c:	08010cef 	.word	0x08010cef
 8010c70:	08010cef 	.word	0x08010cef
 8010c74:	08010cef 	.word	0x08010cef
 8010c78:	08010cef 	.word	0x08010cef
 8010c7c:	08010cef 	.word	0x08010cef
 8010c80:	08010ce1 	.word	0x08010ce1
 8010c84:	2b40      	cmp	r3, #64	@ 0x40
 8010c86:	d02e      	beq.n	8010ce6 <UART_SetConfig+0xab2>
 8010c88:	e031      	b.n	8010cee <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010c8a:	f7fa ff35 	bl	800baf8 <HAL_RCC_GetPCLK1Freq>
 8010c8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010c90:	e033      	b.n	8010cfa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010c92:	f7fa ff47 	bl	800bb24 <HAL_RCC_GetPCLK2Freq>
 8010c96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010c98:	e02f      	b.n	8010cfa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010c9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	f7fc fdde 	bl	800d860 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010ca8:	e027      	b.n	8010cfa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010caa:	f107 0318 	add.w	r3, r7, #24
 8010cae:	4618      	mov	r0, r3
 8010cb0:	f7fc ff2a 	bl	800db08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010cb4:	69fb      	ldr	r3, [r7, #28]
 8010cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010cb8:	e01f      	b.n	8010cfa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010cba:	4b69      	ldr	r3, [pc, #420]	@ (8010e60 <UART_SetConfig+0xc2c>)
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	f003 0320 	and.w	r3, r3, #32
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d009      	beq.n	8010cda <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010cc6:	4b66      	ldr	r3, [pc, #408]	@ (8010e60 <UART_SetConfig+0xc2c>)
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	08db      	lsrs	r3, r3, #3
 8010ccc:	f003 0303 	and.w	r3, r3, #3
 8010cd0:	4a64      	ldr	r2, [pc, #400]	@ (8010e64 <UART_SetConfig+0xc30>)
 8010cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8010cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010cd8:	e00f      	b.n	8010cfa <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8010cda:	4b62      	ldr	r3, [pc, #392]	@ (8010e64 <UART_SetConfig+0xc30>)
 8010cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010cde:	e00c      	b.n	8010cfa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010ce0:	4b61      	ldr	r3, [pc, #388]	@ (8010e68 <UART_SetConfig+0xc34>)
 8010ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010ce4:	e009      	b.n	8010cfa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010ce6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010cec:	e005      	b.n	8010cfa <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8010cee:	2300      	movs	r3, #0
 8010cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010cf2:	2301      	movs	r3, #1
 8010cf4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010cf8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	f000 80ea 	beq.w	8010ed6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010d02:	697b      	ldr	r3, [r7, #20]
 8010d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d06:	4a55      	ldr	r2, [pc, #340]	@ (8010e5c <UART_SetConfig+0xc28>)
 8010d08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d0c:	461a      	mov	r2, r3
 8010d0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d10:	fbb3 f3f2 	udiv	r3, r3, r2
 8010d14:	005a      	lsls	r2, r3, #1
 8010d16:	697b      	ldr	r3, [r7, #20]
 8010d18:	685b      	ldr	r3, [r3, #4]
 8010d1a:	085b      	lsrs	r3, r3, #1
 8010d1c:	441a      	add	r2, r3
 8010d1e:	697b      	ldr	r3, [r7, #20]
 8010d20:	685b      	ldr	r3, [r3, #4]
 8010d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8010d26:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d2a:	2b0f      	cmp	r3, #15
 8010d2c:	d916      	bls.n	8010d5c <UART_SetConfig+0xb28>
 8010d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010d34:	d212      	bcs.n	8010d5c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d38:	b29b      	uxth	r3, r3
 8010d3a:	f023 030f 	bic.w	r3, r3, #15
 8010d3e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d42:	085b      	lsrs	r3, r3, #1
 8010d44:	b29b      	uxth	r3, r3
 8010d46:	f003 0307 	and.w	r3, r3, #7
 8010d4a:	b29a      	uxth	r2, r3
 8010d4c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010d4e:	4313      	orrs	r3, r2
 8010d50:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8010d52:	697b      	ldr	r3, [r7, #20]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010d58:	60da      	str	r2, [r3, #12]
 8010d5a:	e0bc      	b.n	8010ed6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8010d5c:	2301      	movs	r3, #1
 8010d5e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010d62:	e0b8      	b.n	8010ed6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010d64:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010d68:	2b20      	cmp	r3, #32
 8010d6a:	dc4b      	bgt.n	8010e04 <UART_SetConfig+0xbd0>
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	f2c0 8087 	blt.w	8010e80 <UART_SetConfig+0xc4c>
 8010d72:	2b20      	cmp	r3, #32
 8010d74:	f200 8084 	bhi.w	8010e80 <UART_SetConfig+0xc4c>
 8010d78:	a201      	add	r2, pc, #4	@ (adr r2, 8010d80 <UART_SetConfig+0xb4c>)
 8010d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d7e:	bf00      	nop
 8010d80:	08010e0b 	.word	0x08010e0b
 8010d84:	08010e13 	.word	0x08010e13
 8010d88:	08010e81 	.word	0x08010e81
 8010d8c:	08010e81 	.word	0x08010e81
 8010d90:	08010e1b 	.word	0x08010e1b
 8010d94:	08010e81 	.word	0x08010e81
 8010d98:	08010e81 	.word	0x08010e81
 8010d9c:	08010e81 	.word	0x08010e81
 8010da0:	08010e2b 	.word	0x08010e2b
 8010da4:	08010e81 	.word	0x08010e81
 8010da8:	08010e81 	.word	0x08010e81
 8010dac:	08010e81 	.word	0x08010e81
 8010db0:	08010e81 	.word	0x08010e81
 8010db4:	08010e81 	.word	0x08010e81
 8010db8:	08010e81 	.word	0x08010e81
 8010dbc:	08010e81 	.word	0x08010e81
 8010dc0:	08010e3b 	.word	0x08010e3b
 8010dc4:	08010e81 	.word	0x08010e81
 8010dc8:	08010e81 	.word	0x08010e81
 8010dcc:	08010e81 	.word	0x08010e81
 8010dd0:	08010e81 	.word	0x08010e81
 8010dd4:	08010e81 	.word	0x08010e81
 8010dd8:	08010e81 	.word	0x08010e81
 8010ddc:	08010e81 	.word	0x08010e81
 8010de0:	08010e81 	.word	0x08010e81
 8010de4:	08010e81 	.word	0x08010e81
 8010de8:	08010e81 	.word	0x08010e81
 8010dec:	08010e81 	.word	0x08010e81
 8010df0:	08010e81 	.word	0x08010e81
 8010df4:	08010e81 	.word	0x08010e81
 8010df8:	08010e81 	.word	0x08010e81
 8010dfc:	08010e81 	.word	0x08010e81
 8010e00:	08010e73 	.word	0x08010e73
 8010e04:	2b40      	cmp	r3, #64	@ 0x40
 8010e06:	d037      	beq.n	8010e78 <UART_SetConfig+0xc44>
 8010e08:	e03a      	b.n	8010e80 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010e0a:	f7fa fe75 	bl	800baf8 <HAL_RCC_GetPCLK1Freq>
 8010e0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010e10:	e03c      	b.n	8010e8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010e12:	f7fa fe87 	bl	800bb24 <HAL_RCC_GetPCLK2Freq>
 8010e16:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010e18:	e038      	b.n	8010e8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010e1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010e1e:	4618      	mov	r0, r3
 8010e20:	f7fc fd1e 	bl	800d860 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010e28:	e030      	b.n	8010e8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010e2a:	f107 0318 	add.w	r3, r7, #24
 8010e2e:	4618      	mov	r0, r3
 8010e30:	f7fc fe6a 	bl	800db08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010e34:	69fb      	ldr	r3, [r7, #28]
 8010e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010e38:	e028      	b.n	8010e8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010e3a:	4b09      	ldr	r3, [pc, #36]	@ (8010e60 <UART_SetConfig+0xc2c>)
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	f003 0320 	and.w	r3, r3, #32
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d012      	beq.n	8010e6c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010e46:	4b06      	ldr	r3, [pc, #24]	@ (8010e60 <UART_SetConfig+0xc2c>)
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	08db      	lsrs	r3, r3, #3
 8010e4c:	f003 0303 	and.w	r3, r3, #3
 8010e50:	4a04      	ldr	r2, [pc, #16]	@ (8010e64 <UART_SetConfig+0xc30>)
 8010e52:	fa22 f303 	lsr.w	r3, r2, r3
 8010e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010e58:	e018      	b.n	8010e8c <UART_SetConfig+0xc58>
 8010e5a:	bf00      	nop
 8010e5c:	08014c24 	.word	0x08014c24
 8010e60:	58024400 	.word	0x58024400
 8010e64:	03d09000 	.word	0x03d09000
 8010e68:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8010e6c:	4b24      	ldr	r3, [pc, #144]	@ (8010f00 <UART_SetConfig+0xccc>)
 8010e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010e70:	e00c      	b.n	8010e8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010e72:	4b24      	ldr	r3, [pc, #144]	@ (8010f04 <UART_SetConfig+0xcd0>)
 8010e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010e76:	e009      	b.n	8010e8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010e78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010e7e:	e005      	b.n	8010e8c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8010e80:	2300      	movs	r3, #0
 8010e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010e84:	2301      	movs	r3, #1
 8010e86:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010e8a:	bf00      	nop
    }

    if (pclk != 0U)
 8010e8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d021      	beq.n	8010ed6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010e92:	697b      	ldr	r3, [r7, #20]
 8010e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e96:	4a1c      	ldr	r2, [pc, #112]	@ (8010f08 <UART_SetConfig+0xcd4>)
 8010e98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010e9c:	461a      	mov	r2, r3
 8010e9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ea0:	fbb3 f2f2 	udiv	r2, r3, r2
 8010ea4:	697b      	ldr	r3, [r7, #20]
 8010ea6:	685b      	ldr	r3, [r3, #4]
 8010ea8:	085b      	lsrs	r3, r3, #1
 8010eaa:	441a      	add	r2, r3
 8010eac:	697b      	ldr	r3, [r7, #20]
 8010eae:	685b      	ldr	r3, [r3, #4]
 8010eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8010eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010eb8:	2b0f      	cmp	r3, #15
 8010eba:	d909      	bls.n	8010ed0 <UART_SetConfig+0xc9c>
 8010ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ebe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010ec2:	d205      	bcs.n	8010ed0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ec6:	b29a      	uxth	r2, r3
 8010ec8:	697b      	ldr	r3, [r7, #20]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	60da      	str	r2, [r3, #12]
 8010ece:	e002      	b.n	8010ed6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8010ed0:	2301      	movs	r3, #1
 8010ed2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010ed6:	697b      	ldr	r3, [r7, #20]
 8010ed8:	2201      	movs	r2, #1
 8010eda:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010ede:	697b      	ldr	r3, [r7, #20]
 8010ee0:	2201      	movs	r2, #1
 8010ee2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010ee6:	697b      	ldr	r3, [r7, #20]
 8010ee8:	2200      	movs	r2, #0
 8010eea:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010eec:	697b      	ldr	r3, [r7, #20]
 8010eee:	2200      	movs	r2, #0
 8010ef0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010ef2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	3748      	adds	r7, #72	@ 0x48
 8010efa:	46bd      	mov	sp, r7
 8010efc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010f00:	03d09000 	.word	0x03d09000
 8010f04:	003d0900 	.word	0x003d0900
 8010f08:	08014c24 	.word	0x08014c24

08010f0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010f0c:	b480      	push	{r7}
 8010f0e:	b083      	sub	sp, #12
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f18:	f003 0301 	and.w	r3, r3, #1
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d00a      	beq.n	8010f36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	685b      	ldr	r3, [r3, #4]
 8010f26:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	430a      	orrs	r2, r1
 8010f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f3a:	f003 0302 	and.w	r3, r3, #2
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d00a      	beq.n	8010f58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	685b      	ldr	r3, [r3, #4]
 8010f48:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	430a      	orrs	r2, r1
 8010f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f5c:	f003 0304 	and.w	r3, r3, #4
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d00a      	beq.n	8010f7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	685b      	ldr	r3, [r3, #4]
 8010f6a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	430a      	orrs	r2, r1
 8010f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f7e:	f003 0308 	and.w	r3, r3, #8
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d00a      	beq.n	8010f9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	685b      	ldr	r3, [r3, #4]
 8010f8c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	430a      	orrs	r2, r1
 8010f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010fa0:	f003 0310 	and.w	r3, r3, #16
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d00a      	beq.n	8010fbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	689b      	ldr	r3, [r3, #8]
 8010fae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	430a      	orrs	r2, r1
 8010fbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010fc2:	f003 0320 	and.w	r3, r3, #32
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d00a      	beq.n	8010fe0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	689b      	ldr	r3, [r3, #8]
 8010fd0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	430a      	orrs	r2, r1
 8010fde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d01a      	beq.n	8011022 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	685b      	ldr	r3, [r3, #4]
 8010ff2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	430a      	orrs	r2, r1
 8011000:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011006:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801100a:	d10a      	bne.n	8011022 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	685b      	ldr	r3, [r3, #4]
 8011012:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	430a      	orrs	r2, r1
 8011020:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801102a:	2b00      	cmp	r3, #0
 801102c:	d00a      	beq.n	8011044 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	685b      	ldr	r3, [r3, #4]
 8011034:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	430a      	orrs	r2, r1
 8011042:	605a      	str	r2, [r3, #4]
  }
}
 8011044:	bf00      	nop
 8011046:	370c      	adds	r7, #12
 8011048:	46bd      	mov	sp, r7
 801104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104e:	4770      	bx	lr

08011050 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b098      	sub	sp, #96	@ 0x60
 8011054:	af02      	add	r7, sp, #8
 8011056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	2200      	movs	r2, #0
 801105c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011060:	f7f3 fb60 	bl	8004724 <HAL_GetTick>
 8011064:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	f003 0308 	and.w	r3, r3, #8
 8011070:	2b08      	cmp	r3, #8
 8011072:	d12f      	bne.n	80110d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011074:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011078:	9300      	str	r3, [sp, #0]
 801107a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801107c:	2200      	movs	r2, #0
 801107e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8011082:	6878      	ldr	r0, [r7, #4]
 8011084:	f000 f88e 	bl	80111a4 <UART_WaitOnFlagUntilTimeout>
 8011088:	4603      	mov	r3, r0
 801108a:	2b00      	cmp	r3, #0
 801108c:	d022      	beq.n	80110d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011096:	e853 3f00 	ldrex	r3, [r3]
 801109a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801109c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801109e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80110a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	461a      	mov	r2, r3
 80110aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80110ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80110ae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80110b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80110b4:	e841 2300 	strex	r3, r2, [r1]
 80110b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80110ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d1e6      	bne.n	801108e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	2220      	movs	r2, #32
 80110c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	2200      	movs	r2, #0
 80110cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80110d0:	2303      	movs	r3, #3
 80110d2:	e063      	b.n	801119c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	f003 0304 	and.w	r3, r3, #4
 80110de:	2b04      	cmp	r3, #4
 80110e0:	d149      	bne.n	8011176 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80110e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80110e6:	9300      	str	r3, [sp, #0]
 80110e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80110ea:	2200      	movs	r2, #0
 80110ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80110f0:	6878      	ldr	r0, [r7, #4]
 80110f2:	f000 f857 	bl	80111a4 <UART_WaitOnFlagUntilTimeout>
 80110f6:	4603      	mov	r3, r0
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d03c      	beq.n	8011176 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011104:	e853 3f00 	ldrex	r3, [r3]
 8011108:	623b      	str	r3, [r7, #32]
   return(result);
 801110a:	6a3b      	ldr	r3, [r7, #32]
 801110c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011110:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	461a      	mov	r2, r3
 8011118:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801111a:	633b      	str	r3, [r7, #48]	@ 0x30
 801111c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801111e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011120:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011122:	e841 2300 	strex	r3, r2, [r1]
 8011126:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801112a:	2b00      	cmp	r3, #0
 801112c:	d1e6      	bne.n	80110fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	3308      	adds	r3, #8
 8011134:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011136:	693b      	ldr	r3, [r7, #16]
 8011138:	e853 3f00 	ldrex	r3, [r3]
 801113c:	60fb      	str	r3, [r7, #12]
   return(result);
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	f023 0301 	bic.w	r3, r3, #1
 8011144:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	3308      	adds	r3, #8
 801114c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801114e:	61fa      	str	r2, [r7, #28]
 8011150:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011152:	69b9      	ldr	r1, [r7, #24]
 8011154:	69fa      	ldr	r2, [r7, #28]
 8011156:	e841 2300 	strex	r3, r2, [r1]
 801115a:	617b      	str	r3, [r7, #20]
   return(result);
 801115c:	697b      	ldr	r3, [r7, #20]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d1e5      	bne.n	801112e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	2220      	movs	r2, #32
 8011166:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	2200      	movs	r2, #0
 801116e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011172:	2303      	movs	r3, #3
 8011174:	e012      	b.n	801119c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	2220      	movs	r2, #32
 801117a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	2220      	movs	r2, #32
 8011182:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	2200      	movs	r2, #0
 801118a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	2200      	movs	r2, #0
 8011190:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	2200      	movs	r2, #0
 8011196:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801119a:	2300      	movs	r3, #0
}
 801119c:	4618      	mov	r0, r3
 801119e:	3758      	adds	r7, #88	@ 0x58
 80111a0:	46bd      	mov	sp, r7
 80111a2:	bd80      	pop	{r7, pc}

080111a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b084      	sub	sp, #16
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	60f8      	str	r0, [r7, #12]
 80111ac:	60b9      	str	r1, [r7, #8]
 80111ae:	603b      	str	r3, [r7, #0]
 80111b0:	4613      	mov	r3, r2
 80111b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80111b4:	e049      	b.n	801124a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80111b6:	69bb      	ldr	r3, [r7, #24]
 80111b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80111bc:	d045      	beq.n	801124a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80111be:	f7f3 fab1 	bl	8004724 <HAL_GetTick>
 80111c2:	4602      	mov	r2, r0
 80111c4:	683b      	ldr	r3, [r7, #0]
 80111c6:	1ad3      	subs	r3, r2, r3
 80111c8:	69ba      	ldr	r2, [r7, #24]
 80111ca:	429a      	cmp	r2, r3
 80111cc:	d302      	bcc.n	80111d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80111ce:	69bb      	ldr	r3, [r7, #24]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d101      	bne.n	80111d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80111d4:	2303      	movs	r3, #3
 80111d6:	e048      	b.n	801126a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	f003 0304 	and.w	r3, r3, #4
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d031      	beq.n	801124a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	69db      	ldr	r3, [r3, #28]
 80111ec:	f003 0308 	and.w	r3, r3, #8
 80111f0:	2b08      	cmp	r3, #8
 80111f2:	d110      	bne.n	8011216 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	2208      	movs	r2, #8
 80111fa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80111fc:	68f8      	ldr	r0, [r7, #12]
 80111fe:	f000 f839 	bl	8011274 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	2208      	movs	r2, #8
 8011206:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	2200      	movs	r2, #0
 801120e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 8011212:	2301      	movs	r3, #1
 8011214:	e029      	b.n	801126a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	69db      	ldr	r3, [r3, #28]
 801121c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011220:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011224:	d111      	bne.n	801124a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801122e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011230:	68f8      	ldr	r0, [r7, #12]
 8011232:	f000 f81f 	bl	8011274 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	2220      	movs	r2, #32
 801123a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	2200      	movs	r2, #0
 8011242:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8011246:	2303      	movs	r3, #3
 8011248:	e00f      	b.n	801126a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	69da      	ldr	r2, [r3, #28]
 8011250:	68bb      	ldr	r3, [r7, #8]
 8011252:	4013      	ands	r3, r2
 8011254:	68ba      	ldr	r2, [r7, #8]
 8011256:	429a      	cmp	r2, r3
 8011258:	bf0c      	ite	eq
 801125a:	2301      	moveq	r3, #1
 801125c:	2300      	movne	r3, #0
 801125e:	b2db      	uxtb	r3, r3
 8011260:	461a      	mov	r2, r3
 8011262:	79fb      	ldrb	r3, [r7, #7]
 8011264:	429a      	cmp	r2, r3
 8011266:	d0a6      	beq.n	80111b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011268:	2300      	movs	r3, #0
}
 801126a:	4618      	mov	r0, r3
 801126c:	3710      	adds	r7, #16
 801126e:	46bd      	mov	sp, r7
 8011270:	bd80      	pop	{r7, pc}
	...

08011274 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011274:	b480      	push	{r7}
 8011276:	b095      	sub	sp, #84	@ 0x54
 8011278:	af00      	add	r7, sp, #0
 801127a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011284:	e853 3f00 	ldrex	r3, [r3]
 8011288:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801128a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801128c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011290:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	461a      	mov	r2, r3
 8011298:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801129a:	643b      	str	r3, [r7, #64]	@ 0x40
 801129c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801129e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80112a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80112a2:	e841 2300 	strex	r3, r2, [r1]
 80112a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80112a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d1e6      	bne.n	801127c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	3308      	adds	r3, #8
 80112b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112b6:	6a3b      	ldr	r3, [r7, #32]
 80112b8:	e853 3f00 	ldrex	r3, [r3]
 80112bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80112be:	69fa      	ldr	r2, [r7, #28]
 80112c0:	4b1e      	ldr	r3, [pc, #120]	@ (801133c <UART_EndRxTransfer+0xc8>)
 80112c2:	4013      	ands	r3, r2
 80112c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	3308      	adds	r3, #8
 80112cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80112ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80112d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80112d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80112d6:	e841 2300 	strex	r3, r2, [r1]
 80112da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80112dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d1e5      	bne.n	80112ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80112e6:	2b01      	cmp	r3, #1
 80112e8:	d118      	bne.n	801131c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	e853 3f00 	ldrex	r3, [r3]
 80112f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80112f8:	68bb      	ldr	r3, [r7, #8]
 80112fa:	f023 0310 	bic.w	r3, r3, #16
 80112fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	461a      	mov	r2, r3
 8011306:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011308:	61bb      	str	r3, [r7, #24]
 801130a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801130c:	6979      	ldr	r1, [r7, #20]
 801130e:	69ba      	ldr	r2, [r7, #24]
 8011310:	e841 2300 	strex	r3, r2, [r1]
 8011314:	613b      	str	r3, [r7, #16]
   return(result);
 8011316:	693b      	ldr	r3, [r7, #16]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d1e6      	bne.n	80112ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	2220      	movs	r2, #32
 8011320:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	2200      	movs	r2, #0
 8011328:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	2200      	movs	r2, #0
 801132e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8011330:	bf00      	nop
 8011332:	3754      	adds	r7, #84	@ 0x54
 8011334:	46bd      	mov	sp, r7
 8011336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133a:	4770      	bx	lr
 801133c:	effffffe 	.word	0xeffffffe

08011340 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011340:	b480      	push	{r7}
 8011342:	b085      	sub	sp, #20
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801134e:	2b01      	cmp	r3, #1
 8011350:	d101      	bne.n	8011356 <HAL_UARTEx_DisableFifoMode+0x16>
 8011352:	2302      	movs	r3, #2
 8011354:	e027      	b.n	80113a6 <HAL_UARTEx_DisableFifoMode+0x66>
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	2201      	movs	r2, #1
 801135a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	2224      	movs	r2, #36	@ 0x24
 8011362:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	681a      	ldr	r2, [r3, #0]
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	f022 0201 	bic.w	r2, r2, #1
 801137c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011384:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	2200      	movs	r2, #0
 801138a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	68fa      	ldr	r2, [r7, #12]
 8011392:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	2220      	movs	r2, #32
 8011398:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	2200      	movs	r2, #0
 80113a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80113a4:	2300      	movs	r3, #0
}
 80113a6:	4618      	mov	r0, r3
 80113a8:	3714      	adds	r7, #20
 80113aa:	46bd      	mov	sp, r7
 80113ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b0:	4770      	bx	lr

080113b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80113b2:	b580      	push	{r7, lr}
 80113b4:	b084      	sub	sp, #16
 80113b6:	af00      	add	r7, sp, #0
 80113b8:	6078      	str	r0, [r7, #4]
 80113ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80113c2:	2b01      	cmp	r3, #1
 80113c4:	d101      	bne.n	80113ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80113c6:	2302      	movs	r3, #2
 80113c8:	e02d      	b.n	8011426 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	2201      	movs	r2, #1
 80113ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	2224      	movs	r2, #36	@ 0x24
 80113d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	681a      	ldr	r2, [r3, #0]
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	f022 0201 	bic.w	r2, r2, #1
 80113f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	689b      	ldr	r3, [r3, #8]
 80113f8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	683a      	ldr	r2, [r7, #0]
 8011402:	430a      	orrs	r2, r1
 8011404:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011406:	6878      	ldr	r0, [r7, #4]
 8011408:	f000 f850 	bl	80114ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	68fa      	ldr	r2, [r7, #12]
 8011412:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	2220      	movs	r2, #32
 8011418:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	2200      	movs	r2, #0
 8011420:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011424:	2300      	movs	r3, #0
}
 8011426:	4618      	mov	r0, r3
 8011428:	3710      	adds	r7, #16
 801142a:	46bd      	mov	sp, r7
 801142c:	bd80      	pop	{r7, pc}

0801142e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801142e:	b580      	push	{r7, lr}
 8011430:	b084      	sub	sp, #16
 8011432:	af00      	add	r7, sp, #0
 8011434:	6078      	str	r0, [r7, #4]
 8011436:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801143e:	2b01      	cmp	r3, #1
 8011440:	d101      	bne.n	8011446 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011442:	2302      	movs	r3, #2
 8011444:	e02d      	b.n	80114a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	2201      	movs	r2, #1
 801144a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	2224      	movs	r2, #36	@ 0x24
 8011452:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	681a      	ldr	r2, [r3, #0]
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	f022 0201 	bic.w	r2, r2, #1
 801146c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	689b      	ldr	r3, [r3, #8]
 8011474:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	683a      	ldr	r2, [r7, #0]
 801147e:	430a      	orrs	r2, r1
 8011480:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011482:	6878      	ldr	r0, [r7, #4]
 8011484:	f000 f812 	bl	80114ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	68fa      	ldr	r2, [r7, #12]
 801148e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	2220      	movs	r2, #32
 8011494:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	2200      	movs	r2, #0
 801149c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80114a0:	2300      	movs	r3, #0
}
 80114a2:	4618      	mov	r0, r3
 80114a4:	3710      	adds	r7, #16
 80114a6:	46bd      	mov	sp, r7
 80114a8:	bd80      	pop	{r7, pc}
	...

080114ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80114ac:	b480      	push	{r7}
 80114ae:	b085      	sub	sp, #20
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d108      	bne.n	80114ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	2201      	movs	r2, #1
 80114c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	2201      	movs	r2, #1
 80114c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80114cc:	e031      	b.n	8011532 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80114ce:	2310      	movs	r3, #16
 80114d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80114d2:	2310      	movs	r3, #16
 80114d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	689b      	ldr	r3, [r3, #8]
 80114dc:	0e5b      	lsrs	r3, r3, #25
 80114de:	b2db      	uxtb	r3, r3
 80114e0:	f003 0307 	and.w	r3, r3, #7
 80114e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	689b      	ldr	r3, [r3, #8]
 80114ec:	0f5b      	lsrs	r3, r3, #29
 80114ee:	b2db      	uxtb	r3, r3
 80114f0:	f003 0307 	and.w	r3, r3, #7
 80114f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80114f6:	7bbb      	ldrb	r3, [r7, #14]
 80114f8:	7b3a      	ldrb	r2, [r7, #12]
 80114fa:	4911      	ldr	r1, [pc, #68]	@ (8011540 <UARTEx_SetNbDataToProcess+0x94>)
 80114fc:	5c8a      	ldrb	r2, [r1, r2]
 80114fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011502:	7b3a      	ldrb	r2, [r7, #12]
 8011504:	490f      	ldr	r1, [pc, #60]	@ (8011544 <UARTEx_SetNbDataToProcess+0x98>)
 8011506:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011508:	fb93 f3f2 	sdiv	r3, r3, r2
 801150c:	b29a      	uxth	r2, r3
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011514:	7bfb      	ldrb	r3, [r7, #15]
 8011516:	7b7a      	ldrb	r2, [r7, #13]
 8011518:	4909      	ldr	r1, [pc, #36]	@ (8011540 <UARTEx_SetNbDataToProcess+0x94>)
 801151a:	5c8a      	ldrb	r2, [r1, r2]
 801151c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011520:	7b7a      	ldrb	r2, [r7, #13]
 8011522:	4908      	ldr	r1, [pc, #32]	@ (8011544 <UARTEx_SetNbDataToProcess+0x98>)
 8011524:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011526:	fb93 f3f2 	sdiv	r3, r3, r2
 801152a:	b29a      	uxth	r2, r3
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8011532:	bf00      	nop
 8011534:	3714      	adds	r7, #20
 8011536:	46bd      	mov	sp, r7
 8011538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153c:	4770      	bx	lr
 801153e:	bf00      	nop
 8011540:	08014c3c 	.word	0x08014c3c
 8011544:	08014c44 	.word	0x08014c44

08011548 <atoi>:
 8011548:	220a      	movs	r2, #10
 801154a:	2100      	movs	r1, #0
 801154c:	f000 b894 	b.w	8011678 <strtol>

08011550 <__itoa>:
 8011550:	1e93      	subs	r3, r2, #2
 8011552:	2b22      	cmp	r3, #34	@ 0x22
 8011554:	b510      	push	{r4, lr}
 8011556:	460c      	mov	r4, r1
 8011558:	d904      	bls.n	8011564 <__itoa+0x14>
 801155a:	2300      	movs	r3, #0
 801155c:	700b      	strb	r3, [r1, #0]
 801155e:	461c      	mov	r4, r3
 8011560:	4620      	mov	r0, r4
 8011562:	bd10      	pop	{r4, pc}
 8011564:	2a0a      	cmp	r2, #10
 8011566:	d109      	bne.n	801157c <__itoa+0x2c>
 8011568:	2800      	cmp	r0, #0
 801156a:	da07      	bge.n	801157c <__itoa+0x2c>
 801156c:	232d      	movs	r3, #45	@ 0x2d
 801156e:	700b      	strb	r3, [r1, #0]
 8011570:	4240      	negs	r0, r0
 8011572:	2101      	movs	r1, #1
 8011574:	4421      	add	r1, r4
 8011576:	f000 f889 	bl	801168c <__utoa>
 801157a:	e7f1      	b.n	8011560 <__itoa+0x10>
 801157c:	2100      	movs	r1, #0
 801157e:	e7f9      	b.n	8011574 <__itoa+0x24>

08011580 <itoa>:
 8011580:	f7ff bfe6 	b.w	8011550 <__itoa>

08011584 <_strtol_l.constprop.0>:
 8011584:	2b24      	cmp	r3, #36	@ 0x24
 8011586:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801158a:	4686      	mov	lr, r0
 801158c:	4690      	mov	r8, r2
 801158e:	d801      	bhi.n	8011594 <_strtol_l.constprop.0+0x10>
 8011590:	2b01      	cmp	r3, #1
 8011592:	d106      	bne.n	80115a2 <_strtol_l.constprop.0+0x1e>
 8011594:	f000 fe7a 	bl	801228c <__errno>
 8011598:	2316      	movs	r3, #22
 801159a:	6003      	str	r3, [r0, #0]
 801159c:	2000      	movs	r0, #0
 801159e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115a2:	4834      	ldr	r0, [pc, #208]	@ (8011674 <_strtol_l.constprop.0+0xf0>)
 80115a4:	460d      	mov	r5, r1
 80115a6:	462a      	mov	r2, r5
 80115a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80115ac:	5d06      	ldrb	r6, [r0, r4]
 80115ae:	f016 0608 	ands.w	r6, r6, #8
 80115b2:	d1f8      	bne.n	80115a6 <_strtol_l.constprop.0+0x22>
 80115b4:	2c2d      	cmp	r4, #45	@ 0x2d
 80115b6:	d12d      	bne.n	8011614 <_strtol_l.constprop.0+0x90>
 80115b8:	782c      	ldrb	r4, [r5, #0]
 80115ba:	2601      	movs	r6, #1
 80115bc:	1c95      	adds	r5, r2, #2
 80115be:	f033 0210 	bics.w	r2, r3, #16
 80115c2:	d109      	bne.n	80115d8 <_strtol_l.constprop.0+0x54>
 80115c4:	2c30      	cmp	r4, #48	@ 0x30
 80115c6:	d12a      	bne.n	801161e <_strtol_l.constprop.0+0x9a>
 80115c8:	782a      	ldrb	r2, [r5, #0]
 80115ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80115ce:	2a58      	cmp	r2, #88	@ 0x58
 80115d0:	d125      	bne.n	801161e <_strtol_l.constprop.0+0x9a>
 80115d2:	786c      	ldrb	r4, [r5, #1]
 80115d4:	2310      	movs	r3, #16
 80115d6:	3502      	adds	r5, #2
 80115d8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80115dc:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80115e0:	2200      	movs	r2, #0
 80115e2:	fbbc f9f3 	udiv	r9, ip, r3
 80115e6:	4610      	mov	r0, r2
 80115e8:	fb03 ca19 	mls	sl, r3, r9, ip
 80115ec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80115f0:	2f09      	cmp	r7, #9
 80115f2:	d81b      	bhi.n	801162c <_strtol_l.constprop.0+0xa8>
 80115f4:	463c      	mov	r4, r7
 80115f6:	42a3      	cmp	r3, r4
 80115f8:	dd27      	ble.n	801164a <_strtol_l.constprop.0+0xc6>
 80115fa:	1c57      	adds	r7, r2, #1
 80115fc:	d007      	beq.n	801160e <_strtol_l.constprop.0+0x8a>
 80115fe:	4581      	cmp	r9, r0
 8011600:	d320      	bcc.n	8011644 <_strtol_l.constprop.0+0xc0>
 8011602:	d101      	bne.n	8011608 <_strtol_l.constprop.0+0x84>
 8011604:	45a2      	cmp	sl, r4
 8011606:	db1d      	blt.n	8011644 <_strtol_l.constprop.0+0xc0>
 8011608:	fb00 4003 	mla	r0, r0, r3, r4
 801160c:	2201      	movs	r2, #1
 801160e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011612:	e7eb      	b.n	80115ec <_strtol_l.constprop.0+0x68>
 8011614:	2c2b      	cmp	r4, #43	@ 0x2b
 8011616:	bf04      	itt	eq
 8011618:	782c      	ldrbeq	r4, [r5, #0]
 801161a:	1c95      	addeq	r5, r2, #2
 801161c:	e7cf      	b.n	80115be <_strtol_l.constprop.0+0x3a>
 801161e:	2b00      	cmp	r3, #0
 8011620:	d1da      	bne.n	80115d8 <_strtol_l.constprop.0+0x54>
 8011622:	2c30      	cmp	r4, #48	@ 0x30
 8011624:	bf0c      	ite	eq
 8011626:	2308      	moveq	r3, #8
 8011628:	230a      	movne	r3, #10
 801162a:	e7d5      	b.n	80115d8 <_strtol_l.constprop.0+0x54>
 801162c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011630:	2f19      	cmp	r7, #25
 8011632:	d801      	bhi.n	8011638 <_strtol_l.constprop.0+0xb4>
 8011634:	3c37      	subs	r4, #55	@ 0x37
 8011636:	e7de      	b.n	80115f6 <_strtol_l.constprop.0+0x72>
 8011638:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801163c:	2f19      	cmp	r7, #25
 801163e:	d804      	bhi.n	801164a <_strtol_l.constprop.0+0xc6>
 8011640:	3c57      	subs	r4, #87	@ 0x57
 8011642:	e7d8      	b.n	80115f6 <_strtol_l.constprop.0+0x72>
 8011644:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011648:	e7e1      	b.n	801160e <_strtol_l.constprop.0+0x8a>
 801164a:	1c53      	adds	r3, r2, #1
 801164c:	d108      	bne.n	8011660 <_strtol_l.constprop.0+0xdc>
 801164e:	2322      	movs	r3, #34	@ 0x22
 8011650:	f8ce 3000 	str.w	r3, [lr]
 8011654:	4660      	mov	r0, ip
 8011656:	f1b8 0f00 	cmp.w	r8, #0
 801165a:	d0a0      	beq.n	801159e <_strtol_l.constprop.0+0x1a>
 801165c:	1e69      	subs	r1, r5, #1
 801165e:	e006      	b.n	801166e <_strtol_l.constprop.0+0xea>
 8011660:	b106      	cbz	r6, 8011664 <_strtol_l.constprop.0+0xe0>
 8011662:	4240      	negs	r0, r0
 8011664:	f1b8 0f00 	cmp.w	r8, #0
 8011668:	d099      	beq.n	801159e <_strtol_l.constprop.0+0x1a>
 801166a:	2a00      	cmp	r2, #0
 801166c:	d1f6      	bne.n	801165c <_strtol_l.constprop.0+0xd8>
 801166e:	f8c8 1000 	str.w	r1, [r8]
 8011672:	e794      	b.n	801159e <_strtol_l.constprop.0+0x1a>
 8011674:	08014c72 	.word	0x08014c72

08011678 <strtol>:
 8011678:	4613      	mov	r3, r2
 801167a:	460a      	mov	r2, r1
 801167c:	4601      	mov	r1, r0
 801167e:	4802      	ldr	r0, [pc, #8]	@ (8011688 <strtol+0x10>)
 8011680:	6800      	ldr	r0, [r0, #0]
 8011682:	f7ff bf7f 	b.w	8011584 <_strtol_l.constprop.0>
 8011686:	bf00      	nop
 8011688:	24000054 	.word	0x24000054

0801168c <__utoa>:
 801168c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801168e:	4c1f      	ldr	r4, [pc, #124]	@ (801170c <__utoa+0x80>)
 8011690:	b08b      	sub	sp, #44	@ 0x2c
 8011692:	4605      	mov	r5, r0
 8011694:	460b      	mov	r3, r1
 8011696:	466e      	mov	r6, sp
 8011698:	f104 0c20 	add.w	ip, r4, #32
 801169c:	6820      	ldr	r0, [r4, #0]
 801169e:	6861      	ldr	r1, [r4, #4]
 80116a0:	4637      	mov	r7, r6
 80116a2:	c703      	stmia	r7!, {r0, r1}
 80116a4:	3408      	adds	r4, #8
 80116a6:	4564      	cmp	r4, ip
 80116a8:	463e      	mov	r6, r7
 80116aa:	d1f7      	bne.n	801169c <__utoa+0x10>
 80116ac:	7921      	ldrb	r1, [r4, #4]
 80116ae:	7139      	strb	r1, [r7, #4]
 80116b0:	1e91      	subs	r1, r2, #2
 80116b2:	6820      	ldr	r0, [r4, #0]
 80116b4:	6038      	str	r0, [r7, #0]
 80116b6:	2922      	cmp	r1, #34	@ 0x22
 80116b8:	f04f 0100 	mov.w	r1, #0
 80116bc:	d904      	bls.n	80116c8 <__utoa+0x3c>
 80116be:	7019      	strb	r1, [r3, #0]
 80116c0:	460b      	mov	r3, r1
 80116c2:	4618      	mov	r0, r3
 80116c4:	b00b      	add	sp, #44	@ 0x2c
 80116c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116c8:	1e58      	subs	r0, r3, #1
 80116ca:	4684      	mov	ip, r0
 80116cc:	fbb5 f7f2 	udiv	r7, r5, r2
 80116d0:	fb02 5617 	mls	r6, r2, r7, r5
 80116d4:	3628      	adds	r6, #40	@ 0x28
 80116d6:	446e      	add	r6, sp
 80116d8:	460c      	mov	r4, r1
 80116da:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80116de:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80116e2:	462e      	mov	r6, r5
 80116e4:	42b2      	cmp	r2, r6
 80116e6:	f101 0101 	add.w	r1, r1, #1
 80116ea:	463d      	mov	r5, r7
 80116ec:	d9ee      	bls.n	80116cc <__utoa+0x40>
 80116ee:	2200      	movs	r2, #0
 80116f0:	545a      	strb	r2, [r3, r1]
 80116f2:	1919      	adds	r1, r3, r4
 80116f4:	1aa5      	subs	r5, r4, r2
 80116f6:	42aa      	cmp	r2, r5
 80116f8:	dae3      	bge.n	80116c2 <__utoa+0x36>
 80116fa:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80116fe:	780e      	ldrb	r6, [r1, #0]
 8011700:	7006      	strb	r6, [r0, #0]
 8011702:	3201      	adds	r2, #1
 8011704:	f801 5901 	strb.w	r5, [r1], #-1
 8011708:	e7f4      	b.n	80116f4 <__utoa+0x68>
 801170a:	bf00      	nop
 801170c:	08014c4c 	.word	0x08014c4c

08011710 <__cvt>:
 8011710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011712:	ed2d 8b02 	vpush	{d8}
 8011716:	eeb0 8b40 	vmov.f64	d8, d0
 801171a:	b085      	sub	sp, #20
 801171c:	4617      	mov	r7, r2
 801171e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8011720:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011722:	ee18 2a90 	vmov	r2, s17
 8011726:	f025 0520 	bic.w	r5, r5, #32
 801172a:	2a00      	cmp	r2, #0
 801172c:	bfb6      	itet	lt
 801172e:	222d      	movlt	r2, #45	@ 0x2d
 8011730:	2200      	movge	r2, #0
 8011732:	eeb1 8b40 	vneglt.f64	d8, d0
 8011736:	2d46      	cmp	r5, #70	@ 0x46
 8011738:	460c      	mov	r4, r1
 801173a:	701a      	strb	r2, [r3, #0]
 801173c:	d004      	beq.n	8011748 <__cvt+0x38>
 801173e:	2d45      	cmp	r5, #69	@ 0x45
 8011740:	d100      	bne.n	8011744 <__cvt+0x34>
 8011742:	3401      	adds	r4, #1
 8011744:	2102      	movs	r1, #2
 8011746:	e000      	b.n	801174a <__cvt+0x3a>
 8011748:	2103      	movs	r1, #3
 801174a:	ab03      	add	r3, sp, #12
 801174c:	9301      	str	r3, [sp, #4]
 801174e:	ab02      	add	r3, sp, #8
 8011750:	9300      	str	r3, [sp, #0]
 8011752:	4622      	mov	r2, r4
 8011754:	4633      	mov	r3, r6
 8011756:	eeb0 0b48 	vmov.f64	d0, d8
 801175a:	f000 fe55 	bl	8012408 <_dtoa_r>
 801175e:	2d47      	cmp	r5, #71	@ 0x47
 8011760:	d114      	bne.n	801178c <__cvt+0x7c>
 8011762:	07fb      	lsls	r3, r7, #31
 8011764:	d50a      	bpl.n	801177c <__cvt+0x6c>
 8011766:	1902      	adds	r2, r0, r4
 8011768:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801176c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011770:	bf08      	it	eq
 8011772:	9203      	streq	r2, [sp, #12]
 8011774:	2130      	movs	r1, #48	@ 0x30
 8011776:	9b03      	ldr	r3, [sp, #12]
 8011778:	4293      	cmp	r3, r2
 801177a:	d319      	bcc.n	80117b0 <__cvt+0xa0>
 801177c:	9b03      	ldr	r3, [sp, #12]
 801177e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011780:	1a1b      	subs	r3, r3, r0
 8011782:	6013      	str	r3, [r2, #0]
 8011784:	b005      	add	sp, #20
 8011786:	ecbd 8b02 	vpop	{d8}
 801178a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801178c:	2d46      	cmp	r5, #70	@ 0x46
 801178e:	eb00 0204 	add.w	r2, r0, r4
 8011792:	d1e9      	bne.n	8011768 <__cvt+0x58>
 8011794:	7803      	ldrb	r3, [r0, #0]
 8011796:	2b30      	cmp	r3, #48	@ 0x30
 8011798:	d107      	bne.n	80117aa <__cvt+0x9a>
 801179a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801179e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117a2:	bf1c      	itt	ne
 80117a4:	f1c4 0401 	rsbne	r4, r4, #1
 80117a8:	6034      	strne	r4, [r6, #0]
 80117aa:	6833      	ldr	r3, [r6, #0]
 80117ac:	441a      	add	r2, r3
 80117ae:	e7db      	b.n	8011768 <__cvt+0x58>
 80117b0:	1c5c      	adds	r4, r3, #1
 80117b2:	9403      	str	r4, [sp, #12]
 80117b4:	7019      	strb	r1, [r3, #0]
 80117b6:	e7de      	b.n	8011776 <__cvt+0x66>

080117b8 <__exponent>:
 80117b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80117ba:	2900      	cmp	r1, #0
 80117bc:	bfba      	itte	lt
 80117be:	4249      	neglt	r1, r1
 80117c0:	232d      	movlt	r3, #45	@ 0x2d
 80117c2:	232b      	movge	r3, #43	@ 0x2b
 80117c4:	2909      	cmp	r1, #9
 80117c6:	7002      	strb	r2, [r0, #0]
 80117c8:	7043      	strb	r3, [r0, #1]
 80117ca:	dd29      	ble.n	8011820 <__exponent+0x68>
 80117cc:	f10d 0307 	add.w	r3, sp, #7
 80117d0:	461d      	mov	r5, r3
 80117d2:	270a      	movs	r7, #10
 80117d4:	461a      	mov	r2, r3
 80117d6:	fbb1 f6f7 	udiv	r6, r1, r7
 80117da:	fb07 1416 	mls	r4, r7, r6, r1
 80117de:	3430      	adds	r4, #48	@ 0x30
 80117e0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80117e4:	460c      	mov	r4, r1
 80117e6:	2c63      	cmp	r4, #99	@ 0x63
 80117e8:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80117ec:	4631      	mov	r1, r6
 80117ee:	dcf1      	bgt.n	80117d4 <__exponent+0x1c>
 80117f0:	3130      	adds	r1, #48	@ 0x30
 80117f2:	1e94      	subs	r4, r2, #2
 80117f4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80117f8:	1c41      	adds	r1, r0, #1
 80117fa:	4623      	mov	r3, r4
 80117fc:	42ab      	cmp	r3, r5
 80117fe:	d30a      	bcc.n	8011816 <__exponent+0x5e>
 8011800:	f10d 0309 	add.w	r3, sp, #9
 8011804:	1a9b      	subs	r3, r3, r2
 8011806:	42ac      	cmp	r4, r5
 8011808:	bf88      	it	hi
 801180a:	2300      	movhi	r3, #0
 801180c:	3302      	adds	r3, #2
 801180e:	4403      	add	r3, r0
 8011810:	1a18      	subs	r0, r3, r0
 8011812:	b003      	add	sp, #12
 8011814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011816:	f813 6b01 	ldrb.w	r6, [r3], #1
 801181a:	f801 6f01 	strb.w	r6, [r1, #1]!
 801181e:	e7ed      	b.n	80117fc <__exponent+0x44>
 8011820:	2330      	movs	r3, #48	@ 0x30
 8011822:	3130      	adds	r1, #48	@ 0x30
 8011824:	7083      	strb	r3, [r0, #2]
 8011826:	70c1      	strb	r1, [r0, #3]
 8011828:	1d03      	adds	r3, r0, #4
 801182a:	e7f1      	b.n	8011810 <__exponent+0x58>
 801182c:	0000      	movs	r0, r0
	...

08011830 <_printf_float>:
 8011830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011834:	b08d      	sub	sp, #52	@ 0x34
 8011836:	460c      	mov	r4, r1
 8011838:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801183c:	4616      	mov	r6, r2
 801183e:	461f      	mov	r7, r3
 8011840:	4605      	mov	r5, r0
 8011842:	f000 fcd9 	bl	80121f8 <_localeconv_r>
 8011846:	f8d0 b000 	ldr.w	fp, [r0]
 801184a:	4658      	mov	r0, fp
 801184c:	f7ee fdb0 	bl	80003b0 <strlen>
 8011850:	2300      	movs	r3, #0
 8011852:	930a      	str	r3, [sp, #40]	@ 0x28
 8011854:	f8d8 3000 	ldr.w	r3, [r8]
 8011858:	f894 9018 	ldrb.w	r9, [r4, #24]
 801185c:	6822      	ldr	r2, [r4, #0]
 801185e:	9005      	str	r0, [sp, #20]
 8011860:	3307      	adds	r3, #7
 8011862:	f023 0307 	bic.w	r3, r3, #7
 8011866:	f103 0108 	add.w	r1, r3, #8
 801186a:	f8c8 1000 	str.w	r1, [r8]
 801186e:	ed93 0b00 	vldr	d0, [r3]
 8011872:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8011ad0 <_printf_float+0x2a0>
 8011876:	eeb0 7bc0 	vabs.f64	d7, d0
 801187a:	eeb4 7b46 	vcmp.f64	d7, d6
 801187e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011882:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8011886:	dd24      	ble.n	80118d2 <_printf_float+0xa2>
 8011888:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801188c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011890:	d502      	bpl.n	8011898 <_printf_float+0x68>
 8011892:	232d      	movs	r3, #45	@ 0x2d
 8011894:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011898:	498f      	ldr	r1, [pc, #572]	@ (8011ad8 <_printf_float+0x2a8>)
 801189a:	4b90      	ldr	r3, [pc, #576]	@ (8011adc <_printf_float+0x2ac>)
 801189c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80118a0:	bf94      	ite	ls
 80118a2:	4688      	movls	r8, r1
 80118a4:	4698      	movhi	r8, r3
 80118a6:	f022 0204 	bic.w	r2, r2, #4
 80118aa:	2303      	movs	r3, #3
 80118ac:	6123      	str	r3, [r4, #16]
 80118ae:	6022      	str	r2, [r4, #0]
 80118b0:	f04f 0a00 	mov.w	sl, #0
 80118b4:	9700      	str	r7, [sp, #0]
 80118b6:	4633      	mov	r3, r6
 80118b8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80118ba:	4621      	mov	r1, r4
 80118bc:	4628      	mov	r0, r5
 80118be:	f000 f9d1 	bl	8011c64 <_printf_common>
 80118c2:	3001      	adds	r0, #1
 80118c4:	f040 8089 	bne.w	80119da <_printf_float+0x1aa>
 80118c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80118cc:	b00d      	add	sp, #52	@ 0x34
 80118ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118d2:	eeb4 0b40 	vcmp.f64	d0, d0
 80118d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118da:	d709      	bvc.n	80118f0 <_printf_float+0xc0>
 80118dc:	ee10 3a90 	vmov	r3, s1
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	bfbc      	itt	lt
 80118e4:	232d      	movlt	r3, #45	@ 0x2d
 80118e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80118ea:	497d      	ldr	r1, [pc, #500]	@ (8011ae0 <_printf_float+0x2b0>)
 80118ec:	4b7d      	ldr	r3, [pc, #500]	@ (8011ae4 <_printf_float+0x2b4>)
 80118ee:	e7d5      	b.n	801189c <_printf_float+0x6c>
 80118f0:	6863      	ldr	r3, [r4, #4]
 80118f2:	1c59      	adds	r1, r3, #1
 80118f4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80118f8:	d139      	bne.n	801196e <_printf_float+0x13e>
 80118fa:	2306      	movs	r3, #6
 80118fc:	6063      	str	r3, [r4, #4]
 80118fe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8011902:	2300      	movs	r3, #0
 8011904:	6022      	str	r2, [r4, #0]
 8011906:	9303      	str	r3, [sp, #12]
 8011908:	ab0a      	add	r3, sp, #40	@ 0x28
 801190a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801190e:	ab09      	add	r3, sp, #36	@ 0x24
 8011910:	9300      	str	r3, [sp, #0]
 8011912:	6861      	ldr	r1, [r4, #4]
 8011914:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011918:	4628      	mov	r0, r5
 801191a:	f7ff fef9 	bl	8011710 <__cvt>
 801191e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011922:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011924:	4680      	mov	r8, r0
 8011926:	d129      	bne.n	801197c <_printf_float+0x14c>
 8011928:	1cc8      	adds	r0, r1, #3
 801192a:	db02      	blt.n	8011932 <_printf_float+0x102>
 801192c:	6863      	ldr	r3, [r4, #4]
 801192e:	4299      	cmp	r1, r3
 8011930:	dd41      	ble.n	80119b6 <_printf_float+0x186>
 8011932:	f1a9 0902 	sub.w	r9, r9, #2
 8011936:	fa5f f989 	uxtb.w	r9, r9
 801193a:	3901      	subs	r1, #1
 801193c:	464a      	mov	r2, r9
 801193e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011942:	9109      	str	r1, [sp, #36]	@ 0x24
 8011944:	f7ff ff38 	bl	80117b8 <__exponent>
 8011948:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801194a:	1813      	adds	r3, r2, r0
 801194c:	2a01      	cmp	r2, #1
 801194e:	4682      	mov	sl, r0
 8011950:	6123      	str	r3, [r4, #16]
 8011952:	dc02      	bgt.n	801195a <_printf_float+0x12a>
 8011954:	6822      	ldr	r2, [r4, #0]
 8011956:	07d2      	lsls	r2, r2, #31
 8011958:	d501      	bpl.n	801195e <_printf_float+0x12e>
 801195a:	3301      	adds	r3, #1
 801195c:	6123      	str	r3, [r4, #16]
 801195e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011962:	2b00      	cmp	r3, #0
 8011964:	d0a6      	beq.n	80118b4 <_printf_float+0x84>
 8011966:	232d      	movs	r3, #45	@ 0x2d
 8011968:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801196c:	e7a2      	b.n	80118b4 <_printf_float+0x84>
 801196e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011972:	d1c4      	bne.n	80118fe <_printf_float+0xce>
 8011974:	2b00      	cmp	r3, #0
 8011976:	d1c2      	bne.n	80118fe <_printf_float+0xce>
 8011978:	2301      	movs	r3, #1
 801197a:	e7bf      	b.n	80118fc <_printf_float+0xcc>
 801197c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8011980:	d9db      	bls.n	801193a <_printf_float+0x10a>
 8011982:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8011986:	d118      	bne.n	80119ba <_printf_float+0x18a>
 8011988:	2900      	cmp	r1, #0
 801198a:	6863      	ldr	r3, [r4, #4]
 801198c:	dd0b      	ble.n	80119a6 <_printf_float+0x176>
 801198e:	6121      	str	r1, [r4, #16]
 8011990:	b913      	cbnz	r3, 8011998 <_printf_float+0x168>
 8011992:	6822      	ldr	r2, [r4, #0]
 8011994:	07d0      	lsls	r0, r2, #31
 8011996:	d502      	bpl.n	801199e <_printf_float+0x16e>
 8011998:	3301      	adds	r3, #1
 801199a:	440b      	add	r3, r1
 801199c:	6123      	str	r3, [r4, #16]
 801199e:	65a1      	str	r1, [r4, #88]	@ 0x58
 80119a0:	f04f 0a00 	mov.w	sl, #0
 80119a4:	e7db      	b.n	801195e <_printf_float+0x12e>
 80119a6:	b913      	cbnz	r3, 80119ae <_printf_float+0x17e>
 80119a8:	6822      	ldr	r2, [r4, #0]
 80119aa:	07d2      	lsls	r2, r2, #31
 80119ac:	d501      	bpl.n	80119b2 <_printf_float+0x182>
 80119ae:	3302      	adds	r3, #2
 80119b0:	e7f4      	b.n	801199c <_printf_float+0x16c>
 80119b2:	2301      	movs	r3, #1
 80119b4:	e7f2      	b.n	801199c <_printf_float+0x16c>
 80119b6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80119ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80119bc:	4299      	cmp	r1, r3
 80119be:	db05      	blt.n	80119cc <_printf_float+0x19c>
 80119c0:	6823      	ldr	r3, [r4, #0]
 80119c2:	6121      	str	r1, [r4, #16]
 80119c4:	07d8      	lsls	r0, r3, #31
 80119c6:	d5ea      	bpl.n	801199e <_printf_float+0x16e>
 80119c8:	1c4b      	adds	r3, r1, #1
 80119ca:	e7e7      	b.n	801199c <_printf_float+0x16c>
 80119cc:	2900      	cmp	r1, #0
 80119ce:	bfd4      	ite	le
 80119d0:	f1c1 0202 	rsble	r2, r1, #2
 80119d4:	2201      	movgt	r2, #1
 80119d6:	4413      	add	r3, r2
 80119d8:	e7e0      	b.n	801199c <_printf_float+0x16c>
 80119da:	6823      	ldr	r3, [r4, #0]
 80119dc:	055a      	lsls	r2, r3, #21
 80119de:	d407      	bmi.n	80119f0 <_printf_float+0x1c0>
 80119e0:	6923      	ldr	r3, [r4, #16]
 80119e2:	4642      	mov	r2, r8
 80119e4:	4631      	mov	r1, r6
 80119e6:	4628      	mov	r0, r5
 80119e8:	47b8      	blx	r7
 80119ea:	3001      	adds	r0, #1
 80119ec:	d12a      	bne.n	8011a44 <_printf_float+0x214>
 80119ee:	e76b      	b.n	80118c8 <_printf_float+0x98>
 80119f0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80119f4:	f240 80e0 	bls.w	8011bb8 <_printf_float+0x388>
 80119f8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80119fc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a04:	d133      	bne.n	8011a6e <_printf_float+0x23e>
 8011a06:	4a38      	ldr	r2, [pc, #224]	@ (8011ae8 <_printf_float+0x2b8>)
 8011a08:	2301      	movs	r3, #1
 8011a0a:	4631      	mov	r1, r6
 8011a0c:	4628      	mov	r0, r5
 8011a0e:	47b8      	blx	r7
 8011a10:	3001      	adds	r0, #1
 8011a12:	f43f af59 	beq.w	80118c8 <_printf_float+0x98>
 8011a16:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011a1a:	4543      	cmp	r3, r8
 8011a1c:	db02      	blt.n	8011a24 <_printf_float+0x1f4>
 8011a1e:	6823      	ldr	r3, [r4, #0]
 8011a20:	07d8      	lsls	r0, r3, #31
 8011a22:	d50f      	bpl.n	8011a44 <_printf_float+0x214>
 8011a24:	9b05      	ldr	r3, [sp, #20]
 8011a26:	465a      	mov	r2, fp
 8011a28:	4631      	mov	r1, r6
 8011a2a:	4628      	mov	r0, r5
 8011a2c:	47b8      	blx	r7
 8011a2e:	3001      	adds	r0, #1
 8011a30:	f43f af4a 	beq.w	80118c8 <_printf_float+0x98>
 8011a34:	f04f 0900 	mov.w	r9, #0
 8011a38:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8011a3c:	f104 0a1a 	add.w	sl, r4, #26
 8011a40:	45c8      	cmp	r8, r9
 8011a42:	dc09      	bgt.n	8011a58 <_printf_float+0x228>
 8011a44:	6823      	ldr	r3, [r4, #0]
 8011a46:	079b      	lsls	r3, r3, #30
 8011a48:	f100 8107 	bmi.w	8011c5a <_printf_float+0x42a>
 8011a4c:	68e0      	ldr	r0, [r4, #12]
 8011a4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011a50:	4298      	cmp	r0, r3
 8011a52:	bfb8      	it	lt
 8011a54:	4618      	movlt	r0, r3
 8011a56:	e739      	b.n	80118cc <_printf_float+0x9c>
 8011a58:	2301      	movs	r3, #1
 8011a5a:	4652      	mov	r2, sl
 8011a5c:	4631      	mov	r1, r6
 8011a5e:	4628      	mov	r0, r5
 8011a60:	47b8      	blx	r7
 8011a62:	3001      	adds	r0, #1
 8011a64:	f43f af30 	beq.w	80118c8 <_printf_float+0x98>
 8011a68:	f109 0901 	add.w	r9, r9, #1
 8011a6c:	e7e8      	b.n	8011a40 <_printf_float+0x210>
 8011a6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	dc3b      	bgt.n	8011aec <_printf_float+0x2bc>
 8011a74:	4a1c      	ldr	r2, [pc, #112]	@ (8011ae8 <_printf_float+0x2b8>)
 8011a76:	2301      	movs	r3, #1
 8011a78:	4631      	mov	r1, r6
 8011a7a:	4628      	mov	r0, r5
 8011a7c:	47b8      	blx	r7
 8011a7e:	3001      	adds	r0, #1
 8011a80:	f43f af22 	beq.w	80118c8 <_printf_float+0x98>
 8011a84:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011a88:	ea59 0303 	orrs.w	r3, r9, r3
 8011a8c:	d102      	bne.n	8011a94 <_printf_float+0x264>
 8011a8e:	6823      	ldr	r3, [r4, #0]
 8011a90:	07d9      	lsls	r1, r3, #31
 8011a92:	d5d7      	bpl.n	8011a44 <_printf_float+0x214>
 8011a94:	9b05      	ldr	r3, [sp, #20]
 8011a96:	465a      	mov	r2, fp
 8011a98:	4631      	mov	r1, r6
 8011a9a:	4628      	mov	r0, r5
 8011a9c:	47b8      	blx	r7
 8011a9e:	3001      	adds	r0, #1
 8011aa0:	f43f af12 	beq.w	80118c8 <_printf_float+0x98>
 8011aa4:	f04f 0a00 	mov.w	sl, #0
 8011aa8:	f104 0b1a 	add.w	fp, r4, #26
 8011aac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011aae:	425b      	negs	r3, r3
 8011ab0:	4553      	cmp	r3, sl
 8011ab2:	dc01      	bgt.n	8011ab8 <_printf_float+0x288>
 8011ab4:	464b      	mov	r3, r9
 8011ab6:	e794      	b.n	80119e2 <_printf_float+0x1b2>
 8011ab8:	2301      	movs	r3, #1
 8011aba:	465a      	mov	r2, fp
 8011abc:	4631      	mov	r1, r6
 8011abe:	4628      	mov	r0, r5
 8011ac0:	47b8      	blx	r7
 8011ac2:	3001      	adds	r0, #1
 8011ac4:	f43f af00 	beq.w	80118c8 <_printf_float+0x98>
 8011ac8:	f10a 0a01 	add.w	sl, sl, #1
 8011acc:	e7ee      	b.n	8011aac <_printf_float+0x27c>
 8011ace:	bf00      	nop
 8011ad0:	ffffffff 	.word	0xffffffff
 8011ad4:	7fefffff 	.word	0x7fefffff
 8011ad8:	08014d72 	.word	0x08014d72
 8011adc:	08014d76 	.word	0x08014d76
 8011ae0:	08014d7a 	.word	0x08014d7a
 8011ae4:	08014d7e 	.word	0x08014d7e
 8011ae8:	08014d82 	.word	0x08014d82
 8011aec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011aee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011af2:	4553      	cmp	r3, sl
 8011af4:	bfa8      	it	ge
 8011af6:	4653      	movge	r3, sl
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	4699      	mov	r9, r3
 8011afc:	dc37      	bgt.n	8011b6e <_printf_float+0x33e>
 8011afe:	2300      	movs	r3, #0
 8011b00:	9307      	str	r3, [sp, #28]
 8011b02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011b06:	f104 021a 	add.w	r2, r4, #26
 8011b0a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011b0c:	9907      	ldr	r1, [sp, #28]
 8011b0e:	9306      	str	r3, [sp, #24]
 8011b10:	eba3 0309 	sub.w	r3, r3, r9
 8011b14:	428b      	cmp	r3, r1
 8011b16:	dc31      	bgt.n	8011b7c <_printf_float+0x34c>
 8011b18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b1a:	459a      	cmp	sl, r3
 8011b1c:	dc3b      	bgt.n	8011b96 <_printf_float+0x366>
 8011b1e:	6823      	ldr	r3, [r4, #0]
 8011b20:	07da      	lsls	r2, r3, #31
 8011b22:	d438      	bmi.n	8011b96 <_printf_float+0x366>
 8011b24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b26:	ebaa 0903 	sub.w	r9, sl, r3
 8011b2a:	9b06      	ldr	r3, [sp, #24]
 8011b2c:	ebaa 0303 	sub.w	r3, sl, r3
 8011b30:	4599      	cmp	r9, r3
 8011b32:	bfa8      	it	ge
 8011b34:	4699      	movge	r9, r3
 8011b36:	f1b9 0f00 	cmp.w	r9, #0
 8011b3a:	dc34      	bgt.n	8011ba6 <_printf_float+0x376>
 8011b3c:	f04f 0800 	mov.w	r8, #0
 8011b40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011b44:	f104 0b1a 	add.w	fp, r4, #26
 8011b48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b4a:	ebaa 0303 	sub.w	r3, sl, r3
 8011b4e:	eba3 0309 	sub.w	r3, r3, r9
 8011b52:	4543      	cmp	r3, r8
 8011b54:	f77f af76 	ble.w	8011a44 <_printf_float+0x214>
 8011b58:	2301      	movs	r3, #1
 8011b5a:	465a      	mov	r2, fp
 8011b5c:	4631      	mov	r1, r6
 8011b5e:	4628      	mov	r0, r5
 8011b60:	47b8      	blx	r7
 8011b62:	3001      	adds	r0, #1
 8011b64:	f43f aeb0 	beq.w	80118c8 <_printf_float+0x98>
 8011b68:	f108 0801 	add.w	r8, r8, #1
 8011b6c:	e7ec      	b.n	8011b48 <_printf_float+0x318>
 8011b6e:	4642      	mov	r2, r8
 8011b70:	4631      	mov	r1, r6
 8011b72:	4628      	mov	r0, r5
 8011b74:	47b8      	blx	r7
 8011b76:	3001      	adds	r0, #1
 8011b78:	d1c1      	bne.n	8011afe <_printf_float+0x2ce>
 8011b7a:	e6a5      	b.n	80118c8 <_printf_float+0x98>
 8011b7c:	2301      	movs	r3, #1
 8011b7e:	4631      	mov	r1, r6
 8011b80:	4628      	mov	r0, r5
 8011b82:	9206      	str	r2, [sp, #24]
 8011b84:	47b8      	blx	r7
 8011b86:	3001      	adds	r0, #1
 8011b88:	f43f ae9e 	beq.w	80118c8 <_printf_float+0x98>
 8011b8c:	9b07      	ldr	r3, [sp, #28]
 8011b8e:	9a06      	ldr	r2, [sp, #24]
 8011b90:	3301      	adds	r3, #1
 8011b92:	9307      	str	r3, [sp, #28]
 8011b94:	e7b9      	b.n	8011b0a <_printf_float+0x2da>
 8011b96:	9b05      	ldr	r3, [sp, #20]
 8011b98:	465a      	mov	r2, fp
 8011b9a:	4631      	mov	r1, r6
 8011b9c:	4628      	mov	r0, r5
 8011b9e:	47b8      	blx	r7
 8011ba0:	3001      	adds	r0, #1
 8011ba2:	d1bf      	bne.n	8011b24 <_printf_float+0x2f4>
 8011ba4:	e690      	b.n	80118c8 <_printf_float+0x98>
 8011ba6:	9a06      	ldr	r2, [sp, #24]
 8011ba8:	464b      	mov	r3, r9
 8011baa:	4442      	add	r2, r8
 8011bac:	4631      	mov	r1, r6
 8011bae:	4628      	mov	r0, r5
 8011bb0:	47b8      	blx	r7
 8011bb2:	3001      	adds	r0, #1
 8011bb4:	d1c2      	bne.n	8011b3c <_printf_float+0x30c>
 8011bb6:	e687      	b.n	80118c8 <_printf_float+0x98>
 8011bb8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8011bbc:	f1b9 0f01 	cmp.w	r9, #1
 8011bc0:	dc01      	bgt.n	8011bc6 <_printf_float+0x396>
 8011bc2:	07db      	lsls	r3, r3, #31
 8011bc4:	d536      	bpl.n	8011c34 <_printf_float+0x404>
 8011bc6:	2301      	movs	r3, #1
 8011bc8:	4642      	mov	r2, r8
 8011bca:	4631      	mov	r1, r6
 8011bcc:	4628      	mov	r0, r5
 8011bce:	47b8      	blx	r7
 8011bd0:	3001      	adds	r0, #1
 8011bd2:	f43f ae79 	beq.w	80118c8 <_printf_float+0x98>
 8011bd6:	9b05      	ldr	r3, [sp, #20]
 8011bd8:	465a      	mov	r2, fp
 8011bda:	4631      	mov	r1, r6
 8011bdc:	4628      	mov	r0, r5
 8011bde:	47b8      	blx	r7
 8011be0:	3001      	adds	r0, #1
 8011be2:	f43f ae71 	beq.w	80118c8 <_printf_float+0x98>
 8011be6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8011bea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bf2:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8011bf6:	d018      	beq.n	8011c2a <_printf_float+0x3fa>
 8011bf8:	464b      	mov	r3, r9
 8011bfa:	f108 0201 	add.w	r2, r8, #1
 8011bfe:	4631      	mov	r1, r6
 8011c00:	4628      	mov	r0, r5
 8011c02:	47b8      	blx	r7
 8011c04:	3001      	adds	r0, #1
 8011c06:	d10c      	bne.n	8011c22 <_printf_float+0x3f2>
 8011c08:	e65e      	b.n	80118c8 <_printf_float+0x98>
 8011c0a:	2301      	movs	r3, #1
 8011c0c:	465a      	mov	r2, fp
 8011c0e:	4631      	mov	r1, r6
 8011c10:	4628      	mov	r0, r5
 8011c12:	47b8      	blx	r7
 8011c14:	3001      	adds	r0, #1
 8011c16:	f43f ae57 	beq.w	80118c8 <_printf_float+0x98>
 8011c1a:	f108 0801 	add.w	r8, r8, #1
 8011c1e:	45c8      	cmp	r8, r9
 8011c20:	dbf3      	blt.n	8011c0a <_printf_float+0x3da>
 8011c22:	4653      	mov	r3, sl
 8011c24:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011c28:	e6dc      	b.n	80119e4 <_printf_float+0x1b4>
 8011c2a:	f04f 0800 	mov.w	r8, #0
 8011c2e:	f104 0b1a 	add.w	fp, r4, #26
 8011c32:	e7f4      	b.n	8011c1e <_printf_float+0x3ee>
 8011c34:	2301      	movs	r3, #1
 8011c36:	4642      	mov	r2, r8
 8011c38:	e7e1      	b.n	8011bfe <_printf_float+0x3ce>
 8011c3a:	2301      	movs	r3, #1
 8011c3c:	464a      	mov	r2, r9
 8011c3e:	4631      	mov	r1, r6
 8011c40:	4628      	mov	r0, r5
 8011c42:	47b8      	blx	r7
 8011c44:	3001      	adds	r0, #1
 8011c46:	f43f ae3f 	beq.w	80118c8 <_printf_float+0x98>
 8011c4a:	f108 0801 	add.w	r8, r8, #1
 8011c4e:	68e3      	ldr	r3, [r4, #12]
 8011c50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011c52:	1a5b      	subs	r3, r3, r1
 8011c54:	4543      	cmp	r3, r8
 8011c56:	dcf0      	bgt.n	8011c3a <_printf_float+0x40a>
 8011c58:	e6f8      	b.n	8011a4c <_printf_float+0x21c>
 8011c5a:	f04f 0800 	mov.w	r8, #0
 8011c5e:	f104 0919 	add.w	r9, r4, #25
 8011c62:	e7f4      	b.n	8011c4e <_printf_float+0x41e>

08011c64 <_printf_common>:
 8011c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c68:	4616      	mov	r6, r2
 8011c6a:	4698      	mov	r8, r3
 8011c6c:	688a      	ldr	r2, [r1, #8]
 8011c6e:	690b      	ldr	r3, [r1, #16]
 8011c70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011c74:	4293      	cmp	r3, r2
 8011c76:	bfb8      	it	lt
 8011c78:	4613      	movlt	r3, r2
 8011c7a:	6033      	str	r3, [r6, #0]
 8011c7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011c80:	4607      	mov	r7, r0
 8011c82:	460c      	mov	r4, r1
 8011c84:	b10a      	cbz	r2, 8011c8a <_printf_common+0x26>
 8011c86:	3301      	adds	r3, #1
 8011c88:	6033      	str	r3, [r6, #0]
 8011c8a:	6823      	ldr	r3, [r4, #0]
 8011c8c:	0699      	lsls	r1, r3, #26
 8011c8e:	bf42      	ittt	mi
 8011c90:	6833      	ldrmi	r3, [r6, #0]
 8011c92:	3302      	addmi	r3, #2
 8011c94:	6033      	strmi	r3, [r6, #0]
 8011c96:	6825      	ldr	r5, [r4, #0]
 8011c98:	f015 0506 	ands.w	r5, r5, #6
 8011c9c:	d106      	bne.n	8011cac <_printf_common+0x48>
 8011c9e:	f104 0a19 	add.w	sl, r4, #25
 8011ca2:	68e3      	ldr	r3, [r4, #12]
 8011ca4:	6832      	ldr	r2, [r6, #0]
 8011ca6:	1a9b      	subs	r3, r3, r2
 8011ca8:	42ab      	cmp	r3, r5
 8011caa:	dc26      	bgt.n	8011cfa <_printf_common+0x96>
 8011cac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011cb0:	6822      	ldr	r2, [r4, #0]
 8011cb2:	3b00      	subs	r3, #0
 8011cb4:	bf18      	it	ne
 8011cb6:	2301      	movne	r3, #1
 8011cb8:	0692      	lsls	r2, r2, #26
 8011cba:	d42b      	bmi.n	8011d14 <_printf_common+0xb0>
 8011cbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011cc0:	4641      	mov	r1, r8
 8011cc2:	4638      	mov	r0, r7
 8011cc4:	47c8      	blx	r9
 8011cc6:	3001      	adds	r0, #1
 8011cc8:	d01e      	beq.n	8011d08 <_printf_common+0xa4>
 8011cca:	6823      	ldr	r3, [r4, #0]
 8011ccc:	6922      	ldr	r2, [r4, #16]
 8011cce:	f003 0306 	and.w	r3, r3, #6
 8011cd2:	2b04      	cmp	r3, #4
 8011cd4:	bf02      	ittt	eq
 8011cd6:	68e5      	ldreq	r5, [r4, #12]
 8011cd8:	6833      	ldreq	r3, [r6, #0]
 8011cda:	1aed      	subeq	r5, r5, r3
 8011cdc:	68a3      	ldr	r3, [r4, #8]
 8011cde:	bf0c      	ite	eq
 8011ce0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011ce4:	2500      	movne	r5, #0
 8011ce6:	4293      	cmp	r3, r2
 8011ce8:	bfc4      	itt	gt
 8011cea:	1a9b      	subgt	r3, r3, r2
 8011cec:	18ed      	addgt	r5, r5, r3
 8011cee:	2600      	movs	r6, #0
 8011cf0:	341a      	adds	r4, #26
 8011cf2:	42b5      	cmp	r5, r6
 8011cf4:	d11a      	bne.n	8011d2c <_printf_common+0xc8>
 8011cf6:	2000      	movs	r0, #0
 8011cf8:	e008      	b.n	8011d0c <_printf_common+0xa8>
 8011cfa:	2301      	movs	r3, #1
 8011cfc:	4652      	mov	r2, sl
 8011cfe:	4641      	mov	r1, r8
 8011d00:	4638      	mov	r0, r7
 8011d02:	47c8      	blx	r9
 8011d04:	3001      	adds	r0, #1
 8011d06:	d103      	bne.n	8011d10 <_printf_common+0xac>
 8011d08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d10:	3501      	adds	r5, #1
 8011d12:	e7c6      	b.n	8011ca2 <_printf_common+0x3e>
 8011d14:	18e1      	adds	r1, r4, r3
 8011d16:	1c5a      	adds	r2, r3, #1
 8011d18:	2030      	movs	r0, #48	@ 0x30
 8011d1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011d1e:	4422      	add	r2, r4
 8011d20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011d24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011d28:	3302      	adds	r3, #2
 8011d2a:	e7c7      	b.n	8011cbc <_printf_common+0x58>
 8011d2c:	2301      	movs	r3, #1
 8011d2e:	4622      	mov	r2, r4
 8011d30:	4641      	mov	r1, r8
 8011d32:	4638      	mov	r0, r7
 8011d34:	47c8      	blx	r9
 8011d36:	3001      	adds	r0, #1
 8011d38:	d0e6      	beq.n	8011d08 <_printf_common+0xa4>
 8011d3a:	3601      	adds	r6, #1
 8011d3c:	e7d9      	b.n	8011cf2 <_printf_common+0x8e>
	...

08011d40 <_printf_i>:
 8011d40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011d44:	7e0f      	ldrb	r7, [r1, #24]
 8011d46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011d48:	2f78      	cmp	r7, #120	@ 0x78
 8011d4a:	4691      	mov	r9, r2
 8011d4c:	4680      	mov	r8, r0
 8011d4e:	460c      	mov	r4, r1
 8011d50:	469a      	mov	sl, r3
 8011d52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011d56:	d807      	bhi.n	8011d68 <_printf_i+0x28>
 8011d58:	2f62      	cmp	r7, #98	@ 0x62
 8011d5a:	d80a      	bhi.n	8011d72 <_printf_i+0x32>
 8011d5c:	2f00      	cmp	r7, #0
 8011d5e:	f000 80d2 	beq.w	8011f06 <_printf_i+0x1c6>
 8011d62:	2f58      	cmp	r7, #88	@ 0x58
 8011d64:	f000 80b9 	beq.w	8011eda <_printf_i+0x19a>
 8011d68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011d6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011d70:	e03a      	b.n	8011de8 <_printf_i+0xa8>
 8011d72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011d76:	2b15      	cmp	r3, #21
 8011d78:	d8f6      	bhi.n	8011d68 <_printf_i+0x28>
 8011d7a:	a101      	add	r1, pc, #4	@ (adr r1, 8011d80 <_printf_i+0x40>)
 8011d7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011d80:	08011dd9 	.word	0x08011dd9
 8011d84:	08011ded 	.word	0x08011ded
 8011d88:	08011d69 	.word	0x08011d69
 8011d8c:	08011d69 	.word	0x08011d69
 8011d90:	08011d69 	.word	0x08011d69
 8011d94:	08011d69 	.word	0x08011d69
 8011d98:	08011ded 	.word	0x08011ded
 8011d9c:	08011d69 	.word	0x08011d69
 8011da0:	08011d69 	.word	0x08011d69
 8011da4:	08011d69 	.word	0x08011d69
 8011da8:	08011d69 	.word	0x08011d69
 8011dac:	08011eed 	.word	0x08011eed
 8011db0:	08011e17 	.word	0x08011e17
 8011db4:	08011ea7 	.word	0x08011ea7
 8011db8:	08011d69 	.word	0x08011d69
 8011dbc:	08011d69 	.word	0x08011d69
 8011dc0:	08011f0f 	.word	0x08011f0f
 8011dc4:	08011d69 	.word	0x08011d69
 8011dc8:	08011e17 	.word	0x08011e17
 8011dcc:	08011d69 	.word	0x08011d69
 8011dd0:	08011d69 	.word	0x08011d69
 8011dd4:	08011eaf 	.word	0x08011eaf
 8011dd8:	6833      	ldr	r3, [r6, #0]
 8011dda:	1d1a      	adds	r2, r3, #4
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	6032      	str	r2, [r6, #0]
 8011de0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011de4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011de8:	2301      	movs	r3, #1
 8011dea:	e09d      	b.n	8011f28 <_printf_i+0x1e8>
 8011dec:	6833      	ldr	r3, [r6, #0]
 8011dee:	6820      	ldr	r0, [r4, #0]
 8011df0:	1d19      	adds	r1, r3, #4
 8011df2:	6031      	str	r1, [r6, #0]
 8011df4:	0606      	lsls	r6, r0, #24
 8011df6:	d501      	bpl.n	8011dfc <_printf_i+0xbc>
 8011df8:	681d      	ldr	r5, [r3, #0]
 8011dfa:	e003      	b.n	8011e04 <_printf_i+0xc4>
 8011dfc:	0645      	lsls	r5, r0, #25
 8011dfe:	d5fb      	bpl.n	8011df8 <_printf_i+0xb8>
 8011e00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011e04:	2d00      	cmp	r5, #0
 8011e06:	da03      	bge.n	8011e10 <_printf_i+0xd0>
 8011e08:	232d      	movs	r3, #45	@ 0x2d
 8011e0a:	426d      	negs	r5, r5
 8011e0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011e10:	4859      	ldr	r0, [pc, #356]	@ (8011f78 <_printf_i+0x238>)
 8011e12:	230a      	movs	r3, #10
 8011e14:	e011      	b.n	8011e3a <_printf_i+0xfa>
 8011e16:	6821      	ldr	r1, [r4, #0]
 8011e18:	6833      	ldr	r3, [r6, #0]
 8011e1a:	0608      	lsls	r0, r1, #24
 8011e1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8011e20:	d402      	bmi.n	8011e28 <_printf_i+0xe8>
 8011e22:	0649      	lsls	r1, r1, #25
 8011e24:	bf48      	it	mi
 8011e26:	b2ad      	uxthmi	r5, r5
 8011e28:	2f6f      	cmp	r7, #111	@ 0x6f
 8011e2a:	4853      	ldr	r0, [pc, #332]	@ (8011f78 <_printf_i+0x238>)
 8011e2c:	6033      	str	r3, [r6, #0]
 8011e2e:	bf14      	ite	ne
 8011e30:	230a      	movne	r3, #10
 8011e32:	2308      	moveq	r3, #8
 8011e34:	2100      	movs	r1, #0
 8011e36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011e3a:	6866      	ldr	r6, [r4, #4]
 8011e3c:	60a6      	str	r6, [r4, #8]
 8011e3e:	2e00      	cmp	r6, #0
 8011e40:	bfa2      	ittt	ge
 8011e42:	6821      	ldrge	r1, [r4, #0]
 8011e44:	f021 0104 	bicge.w	r1, r1, #4
 8011e48:	6021      	strge	r1, [r4, #0]
 8011e4a:	b90d      	cbnz	r5, 8011e50 <_printf_i+0x110>
 8011e4c:	2e00      	cmp	r6, #0
 8011e4e:	d04b      	beq.n	8011ee8 <_printf_i+0x1a8>
 8011e50:	4616      	mov	r6, r2
 8011e52:	fbb5 f1f3 	udiv	r1, r5, r3
 8011e56:	fb03 5711 	mls	r7, r3, r1, r5
 8011e5a:	5dc7      	ldrb	r7, [r0, r7]
 8011e5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011e60:	462f      	mov	r7, r5
 8011e62:	42bb      	cmp	r3, r7
 8011e64:	460d      	mov	r5, r1
 8011e66:	d9f4      	bls.n	8011e52 <_printf_i+0x112>
 8011e68:	2b08      	cmp	r3, #8
 8011e6a:	d10b      	bne.n	8011e84 <_printf_i+0x144>
 8011e6c:	6823      	ldr	r3, [r4, #0]
 8011e6e:	07df      	lsls	r7, r3, #31
 8011e70:	d508      	bpl.n	8011e84 <_printf_i+0x144>
 8011e72:	6923      	ldr	r3, [r4, #16]
 8011e74:	6861      	ldr	r1, [r4, #4]
 8011e76:	4299      	cmp	r1, r3
 8011e78:	bfde      	ittt	le
 8011e7a:	2330      	movle	r3, #48	@ 0x30
 8011e7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011e80:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8011e84:	1b92      	subs	r2, r2, r6
 8011e86:	6122      	str	r2, [r4, #16]
 8011e88:	f8cd a000 	str.w	sl, [sp]
 8011e8c:	464b      	mov	r3, r9
 8011e8e:	aa03      	add	r2, sp, #12
 8011e90:	4621      	mov	r1, r4
 8011e92:	4640      	mov	r0, r8
 8011e94:	f7ff fee6 	bl	8011c64 <_printf_common>
 8011e98:	3001      	adds	r0, #1
 8011e9a:	d14a      	bne.n	8011f32 <_printf_i+0x1f2>
 8011e9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011ea0:	b004      	add	sp, #16
 8011ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ea6:	6823      	ldr	r3, [r4, #0]
 8011ea8:	f043 0320 	orr.w	r3, r3, #32
 8011eac:	6023      	str	r3, [r4, #0]
 8011eae:	4833      	ldr	r0, [pc, #204]	@ (8011f7c <_printf_i+0x23c>)
 8011eb0:	2778      	movs	r7, #120	@ 0x78
 8011eb2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011eb6:	6823      	ldr	r3, [r4, #0]
 8011eb8:	6831      	ldr	r1, [r6, #0]
 8011eba:	061f      	lsls	r7, r3, #24
 8011ebc:	f851 5b04 	ldr.w	r5, [r1], #4
 8011ec0:	d402      	bmi.n	8011ec8 <_printf_i+0x188>
 8011ec2:	065f      	lsls	r7, r3, #25
 8011ec4:	bf48      	it	mi
 8011ec6:	b2ad      	uxthmi	r5, r5
 8011ec8:	6031      	str	r1, [r6, #0]
 8011eca:	07d9      	lsls	r1, r3, #31
 8011ecc:	bf44      	itt	mi
 8011ece:	f043 0320 	orrmi.w	r3, r3, #32
 8011ed2:	6023      	strmi	r3, [r4, #0]
 8011ed4:	b11d      	cbz	r5, 8011ede <_printf_i+0x19e>
 8011ed6:	2310      	movs	r3, #16
 8011ed8:	e7ac      	b.n	8011e34 <_printf_i+0xf4>
 8011eda:	4827      	ldr	r0, [pc, #156]	@ (8011f78 <_printf_i+0x238>)
 8011edc:	e7e9      	b.n	8011eb2 <_printf_i+0x172>
 8011ede:	6823      	ldr	r3, [r4, #0]
 8011ee0:	f023 0320 	bic.w	r3, r3, #32
 8011ee4:	6023      	str	r3, [r4, #0]
 8011ee6:	e7f6      	b.n	8011ed6 <_printf_i+0x196>
 8011ee8:	4616      	mov	r6, r2
 8011eea:	e7bd      	b.n	8011e68 <_printf_i+0x128>
 8011eec:	6833      	ldr	r3, [r6, #0]
 8011eee:	6825      	ldr	r5, [r4, #0]
 8011ef0:	6961      	ldr	r1, [r4, #20]
 8011ef2:	1d18      	adds	r0, r3, #4
 8011ef4:	6030      	str	r0, [r6, #0]
 8011ef6:	062e      	lsls	r6, r5, #24
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	d501      	bpl.n	8011f00 <_printf_i+0x1c0>
 8011efc:	6019      	str	r1, [r3, #0]
 8011efe:	e002      	b.n	8011f06 <_printf_i+0x1c6>
 8011f00:	0668      	lsls	r0, r5, #25
 8011f02:	d5fb      	bpl.n	8011efc <_printf_i+0x1bc>
 8011f04:	8019      	strh	r1, [r3, #0]
 8011f06:	2300      	movs	r3, #0
 8011f08:	6123      	str	r3, [r4, #16]
 8011f0a:	4616      	mov	r6, r2
 8011f0c:	e7bc      	b.n	8011e88 <_printf_i+0x148>
 8011f0e:	6833      	ldr	r3, [r6, #0]
 8011f10:	1d1a      	adds	r2, r3, #4
 8011f12:	6032      	str	r2, [r6, #0]
 8011f14:	681e      	ldr	r6, [r3, #0]
 8011f16:	6862      	ldr	r2, [r4, #4]
 8011f18:	2100      	movs	r1, #0
 8011f1a:	4630      	mov	r0, r6
 8011f1c:	f7ee f9f8 	bl	8000310 <memchr>
 8011f20:	b108      	cbz	r0, 8011f26 <_printf_i+0x1e6>
 8011f22:	1b80      	subs	r0, r0, r6
 8011f24:	6060      	str	r0, [r4, #4]
 8011f26:	6863      	ldr	r3, [r4, #4]
 8011f28:	6123      	str	r3, [r4, #16]
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011f30:	e7aa      	b.n	8011e88 <_printf_i+0x148>
 8011f32:	6923      	ldr	r3, [r4, #16]
 8011f34:	4632      	mov	r2, r6
 8011f36:	4649      	mov	r1, r9
 8011f38:	4640      	mov	r0, r8
 8011f3a:	47d0      	blx	sl
 8011f3c:	3001      	adds	r0, #1
 8011f3e:	d0ad      	beq.n	8011e9c <_printf_i+0x15c>
 8011f40:	6823      	ldr	r3, [r4, #0]
 8011f42:	079b      	lsls	r3, r3, #30
 8011f44:	d413      	bmi.n	8011f6e <_printf_i+0x22e>
 8011f46:	68e0      	ldr	r0, [r4, #12]
 8011f48:	9b03      	ldr	r3, [sp, #12]
 8011f4a:	4298      	cmp	r0, r3
 8011f4c:	bfb8      	it	lt
 8011f4e:	4618      	movlt	r0, r3
 8011f50:	e7a6      	b.n	8011ea0 <_printf_i+0x160>
 8011f52:	2301      	movs	r3, #1
 8011f54:	4632      	mov	r2, r6
 8011f56:	4649      	mov	r1, r9
 8011f58:	4640      	mov	r0, r8
 8011f5a:	47d0      	blx	sl
 8011f5c:	3001      	adds	r0, #1
 8011f5e:	d09d      	beq.n	8011e9c <_printf_i+0x15c>
 8011f60:	3501      	adds	r5, #1
 8011f62:	68e3      	ldr	r3, [r4, #12]
 8011f64:	9903      	ldr	r1, [sp, #12]
 8011f66:	1a5b      	subs	r3, r3, r1
 8011f68:	42ab      	cmp	r3, r5
 8011f6a:	dcf2      	bgt.n	8011f52 <_printf_i+0x212>
 8011f6c:	e7eb      	b.n	8011f46 <_printf_i+0x206>
 8011f6e:	2500      	movs	r5, #0
 8011f70:	f104 0619 	add.w	r6, r4, #25
 8011f74:	e7f5      	b.n	8011f62 <_printf_i+0x222>
 8011f76:	bf00      	nop
 8011f78:	08014d84 	.word	0x08014d84
 8011f7c:	08014d95 	.word	0x08014d95

08011f80 <std>:
 8011f80:	2300      	movs	r3, #0
 8011f82:	b510      	push	{r4, lr}
 8011f84:	4604      	mov	r4, r0
 8011f86:	e9c0 3300 	strd	r3, r3, [r0]
 8011f8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011f8e:	6083      	str	r3, [r0, #8]
 8011f90:	8181      	strh	r1, [r0, #12]
 8011f92:	6643      	str	r3, [r0, #100]	@ 0x64
 8011f94:	81c2      	strh	r2, [r0, #14]
 8011f96:	6183      	str	r3, [r0, #24]
 8011f98:	4619      	mov	r1, r3
 8011f9a:	2208      	movs	r2, #8
 8011f9c:	305c      	adds	r0, #92	@ 0x5c
 8011f9e:	f000 f914 	bl	80121ca <memset>
 8011fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8011fd8 <std+0x58>)
 8011fa4:	6263      	str	r3, [r4, #36]	@ 0x24
 8011fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8011fdc <std+0x5c>)
 8011fa8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011faa:	4b0d      	ldr	r3, [pc, #52]	@ (8011fe0 <std+0x60>)
 8011fac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011fae:	4b0d      	ldr	r3, [pc, #52]	@ (8011fe4 <std+0x64>)
 8011fb0:	6323      	str	r3, [r4, #48]	@ 0x30
 8011fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8011fe8 <std+0x68>)
 8011fb4:	6224      	str	r4, [r4, #32]
 8011fb6:	429c      	cmp	r4, r3
 8011fb8:	d006      	beq.n	8011fc8 <std+0x48>
 8011fba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011fbe:	4294      	cmp	r4, r2
 8011fc0:	d002      	beq.n	8011fc8 <std+0x48>
 8011fc2:	33d0      	adds	r3, #208	@ 0xd0
 8011fc4:	429c      	cmp	r4, r3
 8011fc6:	d105      	bne.n	8011fd4 <std+0x54>
 8011fc8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011fd0:	f000 b986 	b.w	80122e0 <__retarget_lock_init_recursive>
 8011fd4:	bd10      	pop	{r4, pc}
 8011fd6:	bf00      	nop
 8011fd8:	08012145 	.word	0x08012145
 8011fdc:	08012167 	.word	0x08012167
 8011fe0:	0801219f 	.word	0x0801219f
 8011fe4:	080121c3 	.word	0x080121c3
 8011fe8:	240010c0 	.word	0x240010c0

08011fec <stdio_exit_handler>:
 8011fec:	4a02      	ldr	r2, [pc, #8]	@ (8011ff8 <stdio_exit_handler+0xc>)
 8011fee:	4903      	ldr	r1, [pc, #12]	@ (8011ffc <stdio_exit_handler+0x10>)
 8011ff0:	4803      	ldr	r0, [pc, #12]	@ (8012000 <stdio_exit_handler+0x14>)
 8011ff2:	f000 b869 	b.w	80120c8 <_fwalk_sglue>
 8011ff6:	bf00      	nop
 8011ff8:	24000048 	.word	0x24000048
 8011ffc:	08013b71 	.word	0x08013b71
 8012000:	24000058 	.word	0x24000058

08012004 <cleanup_stdio>:
 8012004:	6841      	ldr	r1, [r0, #4]
 8012006:	4b0c      	ldr	r3, [pc, #48]	@ (8012038 <cleanup_stdio+0x34>)
 8012008:	4299      	cmp	r1, r3
 801200a:	b510      	push	{r4, lr}
 801200c:	4604      	mov	r4, r0
 801200e:	d001      	beq.n	8012014 <cleanup_stdio+0x10>
 8012010:	f001 fdae 	bl	8013b70 <_fflush_r>
 8012014:	68a1      	ldr	r1, [r4, #8]
 8012016:	4b09      	ldr	r3, [pc, #36]	@ (801203c <cleanup_stdio+0x38>)
 8012018:	4299      	cmp	r1, r3
 801201a:	d002      	beq.n	8012022 <cleanup_stdio+0x1e>
 801201c:	4620      	mov	r0, r4
 801201e:	f001 fda7 	bl	8013b70 <_fflush_r>
 8012022:	68e1      	ldr	r1, [r4, #12]
 8012024:	4b06      	ldr	r3, [pc, #24]	@ (8012040 <cleanup_stdio+0x3c>)
 8012026:	4299      	cmp	r1, r3
 8012028:	d004      	beq.n	8012034 <cleanup_stdio+0x30>
 801202a:	4620      	mov	r0, r4
 801202c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012030:	f001 bd9e 	b.w	8013b70 <_fflush_r>
 8012034:	bd10      	pop	{r4, pc}
 8012036:	bf00      	nop
 8012038:	240010c0 	.word	0x240010c0
 801203c:	24001128 	.word	0x24001128
 8012040:	24001190 	.word	0x24001190

08012044 <global_stdio_init.part.0>:
 8012044:	b510      	push	{r4, lr}
 8012046:	4b0b      	ldr	r3, [pc, #44]	@ (8012074 <global_stdio_init.part.0+0x30>)
 8012048:	4c0b      	ldr	r4, [pc, #44]	@ (8012078 <global_stdio_init.part.0+0x34>)
 801204a:	4a0c      	ldr	r2, [pc, #48]	@ (801207c <global_stdio_init.part.0+0x38>)
 801204c:	601a      	str	r2, [r3, #0]
 801204e:	4620      	mov	r0, r4
 8012050:	2200      	movs	r2, #0
 8012052:	2104      	movs	r1, #4
 8012054:	f7ff ff94 	bl	8011f80 <std>
 8012058:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801205c:	2201      	movs	r2, #1
 801205e:	2109      	movs	r1, #9
 8012060:	f7ff ff8e 	bl	8011f80 <std>
 8012064:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012068:	2202      	movs	r2, #2
 801206a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801206e:	2112      	movs	r1, #18
 8012070:	f7ff bf86 	b.w	8011f80 <std>
 8012074:	240011f8 	.word	0x240011f8
 8012078:	240010c0 	.word	0x240010c0
 801207c:	08011fed 	.word	0x08011fed

08012080 <__sfp_lock_acquire>:
 8012080:	4801      	ldr	r0, [pc, #4]	@ (8012088 <__sfp_lock_acquire+0x8>)
 8012082:	f000 b92e 	b.w	80122e2 <__retarget_lock_acquire_recursive>
 8012086:	bf00      	nop
 8012088:	24001201 	.word	0x24001201

0801208c <__sfp_lock_release>:
 801208c:	4801      	ldr	r0, [pc, #4]	@ (8012094 <__sfp_lock_release+0x8>)
 801208e:	f000 b929 	b.w	80122e4 <__retarget_lock_release_recursive>
 8012092:	bf00      	nop
 8012094:	24001201 	.word	0x24001201

08012098 <__sinit>:
 8012098:	b510      	push	{r4, lr}
 801209a:	4604      	mov	r4, r0
 801209c:	f7ff fff0 	bl	8012080 <__sfp_lock_acquire>
 80120a0:	6a23      	ldr	r3, [r4, #32]
 80120a2:	b11b      	cbz	r3, 80120ac <__sinit+0x14>
 80120a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120a8:	f7ff bff0 	b.w	801208c <__sfp_lock_release>
 80120ac:	4b04      	ldr	r3, [pc, #16]	@ (80120c0 <__sinit+0x28>)
 80120ae:	6223      	str	r3, [r4, #32]
 80120b0:	4b04      	ldr	r3, [pc, #16]	@ (80120c4 <__sinit+0x2c>)
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d1f5      	bne.n	80120a4 <__sinit+0xc>
 80120b8:	f7ff ffc4 	bl	8012044 <global_stdio_init.part.0>
 80120bc:	e7f2      	b.n	80120a4 <__sinit+0xc>
 80120be:	bf00      	nop
 80120c0:	08012005 	.word	0x08012005
 80120c4:	240011f8 	.word	0x240011f8

080120c8 <_fwalk_sglue>:
 80120c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120cc:	4607      	mov	r7, r0
 80120ce:	4688      	mov	r8, r1
 80120d0:	4614      	mov	r4, r2
 80120d2:	2600      	movs	r6, #0
 80120d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80120d8:	f1b9 0901 	subs.w	r9, r9, #1
 80120dc:	d505      	bpl.n	80120ea <_fwalk_sglue+0x22>
 80120de:	6824      	ldr	r4, [r4, #0]
 80120e0:	2c00      	cmp	r4, #0
 80120e2:	d1f7      	bne.n	80120d4 <_fwalk_sglue+0xc>
 80120e4:	4630      	mov	r0, r6
 80120e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120ea:	89ab      	ldrh	r3, [r5, #12]
 80120ec:	2b01      	cmp	r3, #1
 80120ee:	d907      	bls.n	8012100 <_fwalk_sglue+0x38>
 80120f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80120f4:	3301      	adds	r3, #1
 80120f6:	d003      	beq.n	8012100 <_fwalk_sglue+0x38>
 80120f8:	4629      	mov	r1, r5
 80120fa:	4638      	mov	r0, r7
 80120fc:	47c0      	blx	r8
 80120fe:	4306      	orrs	r6, r0
 8012100:	3568      	adds	r5, #104	@ 0x68
 8012102:	e7e9      	b.n	80120d8 <_fwalk_sglue+0x10>

08012104 <siprintf>:
 8012104:	b40e      	push	{r1, r2, r3}
 8012106:	b500      	push	{lr}
 8012108:	b09c      	sub	sp, #112	@ 0x70
 801210a:	ab1d      	add	r3, sp, #116	@ 0x74
 801210c:	9002      	str	r0, [sp, #8]
 801210e:	9006      	str	r0, [sp, #24]
 8012110:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012114:	4809      	ldr	r0, [pc, #36]	@ (801213c <siprintf+0x38>)
 8012116:	9107      	str	r1, [sp, #28]
 8012118:	9104      	str	r1, [sp, #16]
 801211a:	4909      	ldr	r1, [pc, #36]	@ (8012140 <siprintf+0x3c>)
 801211c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012120:	9105      	str	r1, [sp, #20]
 8012122:	6800      	ldr	r0, [r0, #0]
 8012124:	9301      	str	r3, [sp, #4]
 8012126:	a902      	add	r1, sp, #8
 8012128:	f001 fba2 	bl	8013870 <_svfiprintf_r>
 801212c:	9b02      	ldr	r3, [sp, #8]
 801212e:	2200      	movs	r2, #0
 8012130:	701a      	strb	r2, [r3, #0]
 8012132:	b01c      	add	sp, #112	@ 0x70
 8012134:	f85d eb04 	ldr.w	lr, [sp], #4
 8012138:	b003      	add	sp, #12
 801213a:	4770      	bx	lr
 801213c:	24000054 	.word	0x24000054
 8012140:	ffff0208 	.word	0xffff0208

08012144 <__sread>:
 8012144:	b510      	push	{r4, lr}
 8012146:	460c      	mov	r4, r1
 8012148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801214c:	f000 f87a 	bl	8012244 <_read_r>
 8012150:	2800      	cmp	r0, #0
 8012152:	bfab      	itete	ge
 8012154:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012156:	89a3      	ldrhlt	r3, [r4, #12]
 8012158:	181b      	addge	r3, r3, r0
 801215a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801215e:	bfac      	ite	ge
 8012160:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012162:	81a3      	strhlt	r3, [r4, #12]
 8012164:	bd10      	pop	{r4, pc}

08012166 <__swrite>:
 8012166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801216a:	461f      	mov	r7, r3
 801216c:	898b      	ldrh	r3, [r1, #12]
 801216e:	05db      	lsls	r3, r3, #23
 8012170:	4605      	mov	r5, r0
 8012172:	460c      	mov	r4, r1
 8012174:	4616      	mov	r6, r2
 8012176:	d505      	bpl.n	8012184 <__swrite+0x1e>
 8012178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801217c:	2302      	movs	r3, #2
 801217e:	2200      	movs	r2, #0
 8012180:	f000 f84e 	bl	8012220 <_lseek_r>
 8012184:	89a3      	ldrh	r3, [r4, #12]
 8012186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801218a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801218e:	81a3      	strh	r3, [r4, #12]
 8012190:	4632      	mov	r2, r6
 8012192:	463b      	mov	r3, r7
 8012194:	4628      	mov	r0, r5
 8012196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801219a:	f000 b865 	b.w	8012268 <_write_r>

0801219e <__sseek>:
 801219e:	b510      	push	{r4, lr}
 80121a0:	460c      	mov	r4, r1
 80121a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121a6:	f000 f83b 	bl	8012220 <_lseek_r>
 80121aa:	1c43      	adds	r3, r0, #1
 80121ac:	89a3      	ldrh	r3, [r4, #12]
 80121ae:	bf15      	itete	ne
 80121b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80121b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80121b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80121ba:	81a3      	strheq	r3, [r4, #12]
 80121bc:	bf18      	it	ne
 80121be:	81a3      	strhne	r3, [r4, #12]
 80121c0:	bd10      	pop	{r4, pc}

080121c2 <__sclose>:
 80121c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121c6:	f000 b81b 	b.w	8012200 <_close_r>

080121ca <memset>:
 80121ca:	4402      	add	r2, r0
 80121cc:	4603      	mov	r3, r0
 80121ce:	4293      	cmp	r3, r2
 80121d0:	d100      	bne.n	80121d4 <memset+0xa>
 80121d2:	4770      	bx	lr
 80121d4:	f803 1b01 	strb.w	r1, [r3], #1
 80121d8:	e7f9      	b.n	80121ce <memset+0x4>

080121da <strcat>:
 80121da:	b510      	push	{r4, lr}
 80121dc:	4602      	mov	r2, r0
 80121de:	7814      	ldrb	r4, [r2, #0]
 80121e0:	4613      	mov	r3, r2
 80121e2:	3201      	adds	r2, #1
 80121e4:	2c00      	cmp	r4, #0
 80121e6:	d1fa      	bne.n	80121de <strcat+0x4>
 80121e8:	3b01      	subs	r3, #1
 80121ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80121ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80121f2:	2a00      	cmp	r2, #0
 80121f4:	d1f9      	bne.n	80121ea <strcat+0x10>
 80121f6:	bd10      	pop	{r4, pc}

080121f8 <_localeconv_r>:
 80121f8:	4800      	ldr	r0, [pc, #0]	@ (80121fc <_localeconv_r+0x4>)
 80121fa:	4770      	bx	lr
 80121fc:	24000194 	.word	0x24000194

08012200 <_close_r>:
 8012200:	b538      	push	{r3, r4, r5, lr}
 8012202:	4d06      	ldr	r5, [pc, #24]	@ (801221c <_close_r+0x1c>)
 8012204:	2300      	movs	r3, #0
 8012206:	4604      	mov	r4, r0
 8012208:	4608      	mov	r0, r1
 801220a:	602b      	str	r3, [r5, #0]
 801220c:	f7f2 f8f8 	bl	8004400 <_close>
 8012210:	1c43      	adds	r3, r0, #1
 8012212:	d102      	bne.n	801221a <_close_r+0x1a>
 8012214:	682b      	ldr	r3, [r5, #0]
 8012216:	b103      	cbz	r3, 801221a <_close_r+0x1a>
 8012218:	6023      	str	r3, [r4, #0]
 801221a:	bd38      	pop	{r3, r4, r5, pc}
 801221c:	240011fc 	.word	0x240011fc

08012220 <_lseek_r>:
 8012220:	b538      	push	{r3, r4, r5, lr}
 8012222:	4d07      	ldr	r5, [pc, #28]	@ (8012240 <_lseek_r+0x20>)
 8012224:	4604      	mov	r4, r0
 8012226:	4608      	mov	r0, r1
 8012228:	4611      	mov	r1, r2
 801222a:	2200      	movs	r2, #0
 801222c:	602a      	str	r2, [r5, #0]
 801222e:	461a      	mov	r2, r3
 8012230:	f7f2 f90d 	bl	800444e <_lseek>
 8012234:	1c43      	adds	r3, r0, #1
 8012236:	d102      	bne.n	801223e <_lseek_r+0x1e>
 8012238:	682b      	ldr	r3, [r5, #0]
 801223a:	b103      	cbz	r3, 801223e <_lseek_r+0x1e>
 801223c:	6023      	str	r3, [r4, #0]
 801223e:	bd38      	pop	{r3, r4, r5, pc}
 8012240:	240011fc 	.word	0x240011fc

08012244 <_read_r>:
 8012244:	b538      	push	{r3, r4, r5, lr}
 8012246:	4d07      	ldr	r5, [pc, #28]	@ (8012264 <_read_r+0x20>)
 8012248:	4604      	mov	r4, r0
 801224a:	4608      	mov	r0, r1
 801224c:	4611      	mov	r1, r2
 801224e:	2200      	movs	r2, #0
 8012250:	602a      	str	r2, [r5, #0]
 8012252:	461a      	mov	r2, r3
 8012254:	f7f2 f89b 	bl	800438e <_read>
 8012258:	1c43      	adds	r3, r0, #1
 801225a:	d102      	bne.n	8012262 <_read_r+0x1e>
 801225c:	682b      	ldr	r3, [r5, #0]
 801225e:	b103      	cbz	r3, 8012262 <_read_r+0x1e>
 8012260:	6023      	str	r3, [r4, #0]
 8012262:	bd38      	pop	{r3, r4, r5, pc}
 8012264:	240011fc 	.word	0x240011fc

08012268 <_write_r>:
 8012268:	b538      	push	{r3, r4, r5, lr}
 801226a:	4d07      	ldr	r5, [pc, #28]	@ (8012288 <_write_r+0x20>)
 801226c:	4604      	mov	r4, r0
 801226e:	4608      	mov	r0, r1
 8012270:	4611      	mov	r1, r2
 8012272:	2200      	movs	r2, #0
 8012274:	602a      	str	r2, [r5, #0]
 8012276:	461a      	mov	r2, r3
 8012278:	f7f2 f8a6 	bl	80043c8 <_write>
 801227c:	1c43      	adds	r3, r0, #1
 801227e:	d102      	bne.n	8012286 <_write_r+0x1e>
 8012280:	682b      	ldr	r3, [r5, #0]
 8012282:	b103      	cbz	r3, 8012286 <_write_r+0x1e>
 8012284:	6023      	str	r3, [r4, #0]
 8012286:	bd38      	pop	{r3, r4, r5, pc}
 8012288:	240011fc 	.word	0x240011fc

0801228c <__errno>:
 801228c:	4b01      	ldr	r3, [pc, #4]	@ (8012294 <__errno+0x8>)
 801228e:	6818      	ldr	r0, [r3, #0]
 8012290:	4770      	bx	lr
 8012292:	bf00      	nop
 8012294:	24000054 	.word	0x24000054

08012298 <__libc_init_array>:
 8012298:	b570      	push	{r4, r5, r6, lr}
 801229a:	4d0d      	ldr	r5, [pc, #52]	@ (80122d0 <__libc_init_array+0x38>)
 801229c:	4c0d      	ldr	r4, [pc, #52]	@ (80122d4 <__libc_init_array+0x3c>)
 801229e:	1b64      	subs	r4, r4, r5
 80122a0:	10a4      	asrs	r4, r4, #2
 80122a2:	2600      	movs	r6, #0
 80122a4:	42a6      	cmp	r6, r4
 80122a6:	d109      	bne.n	80122bc <__libc_init_array+0x24>
 80122a8:	4d0b      	ldr	r5, [pc, #44]	@ (80122d8 <__libc_init_array+0x40>)
 80122aa:	4c0c      	ldr	r4, [pc, #48]	@ (80122dc <__libc_init_array+0x44>)
 80122ac:	f001 fffe 	bl	80142ac <_init>
 80122b0:	1b64      	subs	r4, r4, r5
 80122b2:	10a4      	asrs	r4, r4, #2
 80122b4:	2600      	movs	r6, #0
 80122b6:	42a6      	cmp	r6, r4
 80122b8:	d105      	bne.n	80122c6 <__libc_init_array+0x2e>
 80122ba:	bd70      	pop	{r4, r5, r6, pc}
 80122bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80122c0:	4798      	blx	r3
 80122c2:	3601      	adds	r6, #1
 80122c4:	e7ee      	b.n	80122a4 <__libc_init_array+0xc>
 80122c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80122ca:	4798      	blx	r3
 80122cc:	3601      	adds	r6, #1
 80122ce:	e7f2      	b.n	80122b6 <__libc_init_array+0x1e>
 80122d0:	08014fe8 	.word	0x08014fe8
 80122d4:	08014fe8 	.word	0x08014fe8
 80122d8:	08014fe8 	.word	0x08014fe8
 80122dc:	08014fec 	.word	0x08014fec

080122e0 <__retarget_lock_init_recursive>:
 80122e0:	4770      	bx	lr

080122e2 <__retarget_lock_acquire_recursive>:
 80122e2:	4770      	bx	lr

080122e4 <__retarget_lock_release_recursive>:
 80122e4:	4770      	bx	lr

080122e6 <strcpy>:
 80122e6:	4603      	mov	r3, r0
 80122e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80122ec:	f803 2b01 	strb.w	r2, [r3], #1
 80122f0:	2a00      	cmp	r2, #0
 80122f2:	d1f9      	bne.n	80122e8 <strcpy+0x2>
 80122f4:	4770      	bx	lr

080122f6 <quorem>:
 80122f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122fa:	6903      	ldr	r3, [r0, #16]
 80122fc:	690c      	ldr	r4, [r1, #16]
 80122fe:	42a3      	cmp	r3, r4
 8012300:	4607      	mov	r7, r0
 8012302:	db7e      	blt.n	8012402 <quorem+0x10c>
 8012304:	3c01      	subs	r4, #1
 8012306:	f101 0814 	add.w	r8, r1, #20
 801230a:	00a3      	lsls	r3, r4, #2
 801230c:	f100 0514 	add.w	r5, r0, #20
 8012310:	9300      	str	r3, [sp, #0]
 8012312:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012316:	9301      	str	r3, [sp, #4]
 8012318:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801231c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012320:	3301      	adds	r3, #1
 8012322:	429a      	cmp	r2, r3
 8012324:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012328:	fbb2 f6f3 	udiv	r6, r2, r3
 801232c:	d32e      	bcc.n	801238c <quorem+0x96>
 801232e:	f04f 0a00 	mov.w	sl, #0
 8012332:	46c4      	mov	ip, r8
 8012334:	46ae      	mov	lr, r5
 8012336:	46d3      	mov	fp, sl
 8012338:	f85c 3b04 	ldr.w	r3, [ip], #4
 801233c:	b298      	uxth	r0, r3
 801233e:	fb06 a000 	mla	r0, r6, r0, sl
 8012342:	0c02      	lsrs	r2, r0, #16
 8012344:	0c1b      	lsrs	r3, r3, #16
 8012346:	fb06 2303 	mla	r3, r6, r3, r2
 801234a:	f8de 2000 	ldr.w	r2, [lr]
 801234e:	b280      	uxth	r0, r0
 8012350:	b292      	uxth	r2, r2
 8012352:	1a12      	subs	r2, r2, r0
 8012354:	445a      	add	r2, fp
 8012356:	f8de 0000 	ldr.w	r0, [lr]
 801235a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801235e:	b29b      	uxth	r3, r3
 8012360:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012364:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012368:	b292      	uxth	r2, r2
 801236a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801236e:	45e1      	cmp	r9, ip
 8012370:	f84e 2b04 	str.w	r2, [lr], #4
 8012374:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012378:	d2de      	bcs.n	8012338 <quorem+0x42>
 801237a:	9b00      	ldr	r3, [sp, #0]
 801237c:	58eb      	ldr	r3, [r5, r3]
 801237e:	b92b      	cbnz	r3, 801238c <quorem+0x96>
 8012380:	9b01      	ldr	r3, [sp, #4]
 8012382:	3b04      	subs	r3, #4
 8012384:	429d      	cmp	r5, r3
 8012386:	461a      	mov	r2, r3
 8012388:	d32f      	bcc.n	80123ea <quorem+0xf4>
 801238a:	613c      	str	r4, [r7, #16]
 801238c:	4638      	mov	r0, r7
 801238e:	f001 f90b 	bl	80135a8 <__mcmp>
 8012392:	2800      	cmp	r0, #0
 8012394:	db25      	blt.n	80123e2 <quorem+0xec>
 8012396:	4629      	mov	r1, r5
 8012398:	2000      	movs	r0, #0
 801239a:	f858 2b04 	ldr.w	r2, [r8], #4
 801239e:	f8d1 c000 	ldr.w	ip, [r1]
 80123a2:	fa1f fe82 	uxth.w	lr, r2
 80123a6:	fa1f f38c 	uxth.w	r3, ip
 80123aa:	eba3 030e 	sub.w	r3, r3, lr
 80123ae:	4403      	add	r3, r0
 80123b0:	0c12      	lsrs	r2, r2, #16
 80123b2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80123b6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80123ba:	b29b      	uxth	r3, r3
 80123bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80123c0:	45c1      	cmp	r9, r8
 80123c2:	f841 3b04 	str.w	r3, [r1], #4
 80123c6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80123ca:	d2e6      	bcs.n	801239a <quorem+0xa4>
 80123cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80123d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80123d4:	b922      	cbnz	r2, 80123e0 <quorem+0xea>
 80123d6:	3b04      	subs	r3, #4
 80123d8:	429d      	cmp	r5, r3
 80123da:	461a      	mov	r2, r3
 80123dc:	d30b      	bcc.n	80123f6 <quorem+0x100>
 80123de:	613c      	str	r4, [r7, #16]
 80123e0:	3601      	adds	r6, #1
 80123e2:	4630      	mov	r0, r6
 80123e4:	b003      	add	sp, #12
 80123e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123ea:	6812      	ldr	r2, [r2, #0]
 80123ec:	3b04      	subs	r3, #4
 80123ee:	2a00      	cmp	r2, #0
 80123f0:	d1cb      	bne.n	801238a <quorem+0x94>
 80123f2:	3c01      	subs	r4, #1
 80123f4:	e7c6      	b.n	8012384 <quorem+0x8e>
 80123f6:	6812      	ldr	r2, [r2, #0]
 80123f8:	3b04      	subs	r3, #4
 80123fa:	2a00      	cmp	r2, #0
 80123fc:	d1ef      	bne.n	80123de <quorem+0xe8>
 80123fe:	3c01      	subs	r4, #1
 8012400:	e7ea      	b.n	80123d8 <quorem+0xe2>
 8012402:	2000      	movs	r0, #0
 8012404:	e7ee      	b.n	80123e4 <quorem+0xee>
	...

08012408 <_dtoa_r>:
 8012408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801240c:	ed2d 8b02 	vpush	{d8}
 8012410:	69c7      	ldr	r7, [r0, #28]
 8012412:	b091      	sub	sp, #68	@ 0x44
 8012414:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012418:	ec55 4b10 	vmov	r4, r5, d0
 801241c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801241e:	9107      	str	r1, [sp, #28]
 8012420:	4681      	mov	r9, r0
 8012422:	9209      	str	r2, [sp, #36]	@ 0x24
 8012424:	930d      	str	r3, [sp, #52]	@ 0x34
 8012426:	b97f      	cbnz	r7, 8012448 <_dtoa_r+0x40>
 8012428:	2010      	movs	r0, #16
 801242a:	f000 fd8d 	bl	8012f48 <malloc>
 801242e:	4602      	mov	r2, r0
 8012430:	f8c9 001c 	str.w	r0, [r9, #28]
 8012434:	b920      	cbnz	r0, 8012440 <_dtoa_r+0x38>
 8012436:	4ba0      	ldr	r3, [pc, #640]	@ (80126b8 <_dtoa_r+0x2b0>)
 8012438:	21ef      	movs	r1, #239	@ 0xef
 801243a:	48a0      	ldr	r0, [pc, #640]	@ (80126bc <_dtoa_r+0x2b4>)
 801243c:	f001 fbf8 	bl	8013c30 <__assert_func>
 8012440:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012444:	6007      	str	r7, [r0, #0]
 8012446:	60c7      	str	r7, [r0, #12]
 8012448:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801244c:	6819      	ldr	r1, [r3, #0]
 801244e:	b159      	cbz	r1, 8012468 <_dtoa_r+0x60>
 8012450:	685a      	ldr	r2, [r3, #4]
 8012452:	604a      	str	r2, [r1, #4]
 8012454:	2301      	movs	r3, #1
 8012456:	4093      	lsls	r3, r2
 8012458:	608b      	str	r3, [r1, #8]
 801245a:	4648      	mov	r0, r9
 801245c:	f000 fe6a 	bl	8013134 <_Bfree>
 8012460:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012464:	2200      	movs	r2, #0
 8012466:	601a      	str	r2, [r3, #0]
 8012468:	1e2b      	subs	r3, r5, #0
 801246a:	bfbb      	ittet	lt
 801246c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012470:	9303      	strlt	r3, [sp, #12]
 8012472:	2300      	movge	r3, #0
 8012474:	2201      	movlt	r2, #1
 8012476:	bfac      	ite	ge
 8012478:	6033      	strge	r3, [r6, #0]
 801247a:	6032      	strlt	r2, [r6, #0]
 801247c:	4b90      	ldr	r3, [pc, #576]	@ (80126c0 <_dtoa_r+0x2b8>)
 801247e:	9e03      	ldr	r6, [sp, #12]
 8012480:	43b3      	bics	r3, r6
 8012482:	d110      	bne.n	80124a6 <_dtoa_r+0x9e>
 8012484:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012486:	f242 730f 	movw	r3, #9999	@ 0x270f
 801248a:	6013      	str	r3, [r2, #0]
 801248c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8012490:	4323      	orrs	r3, r4
 8012492:	f000 84de 	beq.w	8012e52 <_dtoa_r+0xa4a>
 8012496:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012498:	4f8a      	ldr	r7, [pc, #552]	@ (80126c4 <_dtoa_r+0x2bc>)
 801249a:	2b00      	cmp	r3, #0
 801249c:	f000 84e0 	beq.w	8012e60 <_dtoa_r+0xa58>
 80124a0:	1cfb      	adds	r3, r7, #3
 80124a2:	f000 bcdb 	b.w	8012e5c <_dtoa_r+0xa54>
 80124a6:	ed9d 8b02 	vldr	d8, [sp, #8]
 80124aa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80124ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124b2:	d10a      	bne.n	80124ca <_dtoa_r+0xc2>
 80124b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80124b6:	2301      	movs	r3, #1
 80124b8:	6013      	str	r3, [r2, #0]
 80124ba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80124bc:	b113      	cbz	r3, 80124c4 <_dtoa_r+0xbc>
 80124be:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80124c0:	4b81      	ldr	r3, [pc, #516]	@ (80126c8 <_dtoa_r+0x2c0>)
 80124c2:	6013      	str	r3, [r2, #0]
 80124c4:	4f81      	ldr	r7, [pc, #516]	@ (80126cc <_dtoa_r+0x2c4>)
 80124c6:	f000 bccb 	b.w	8012e60 <_dtoa_r+0xa58>
 80124ca:	aa0e      	add	r2, sp, #56	@ 0x38
 80124cc:	a90f      	add	r1, sp, #60	@ 0x3c
 80124ce:	4648      	mov	r0, r9
 80124d0:	eeb0 0b48 	vmov.f64	d0, d8
 80124d4:	f001 f918 	bl	8013708 <__d2b>
 80124d8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80124dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80124de:	9001      	str	r0, [sp, #4]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d045      	beq.n	8012570 <_dtoa_r+0x168>
 80124e4:	eeb0 7b48 	vmov.f64	d7, d8
 80124e8:	ee18 1a90 	vmov	r1, s17
 80124ec:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80124f0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80124f4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80124f8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80124fc:	2500      	movs	r5, #0
 80124fe:	ee07 1a90 	vmov	s15, r1
 8012502:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8012506:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80126a0 <_dtoa_r+0x298>
 801250a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801250e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80126a8 <_dtoa_r+0x2a0>
 8012512:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012516:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80126b0 <_dtoa_r+0x2a8>
 801251a:	ee07 3a90 	vmov	s15, r3
 801251e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8012522:	eeb0 7b46 	vmov.f64	d7, d6
 8012526:	eea4 7b05 	vfma.f64	d7, d4, d5
 801252a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801252e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012536:	ee16 8a90 	vmov	r8, s13
 801253a:	d508      	bpl.n	801254e <_dtoa_r+0x146>
 801253c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012540:	eeb4 6b47 	vcmp.f64	d6, d7
 8012544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012548:	bf18      	it	ne
 801254a:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 801254e:	f1b8 0f16 	cmp.w	r8, #22
 8012552:	d82b      	bhi.n	80125ac <_dtoa_r+0x1a4>
 8012554:	495e      	ldr	r1, [pc, #376]	@ (80126d0 <_dtoa_r+0x2c8>)
 8012556:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801255a:	ed91 7b00 	vldr	d7, [r1]
 801255e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012566:	d501      	bpl.n	801256c <_dtoa_r+0x164>
 8012568:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801256c:	2100      	movs	r1, #0
 801256e:	e01e      	b.n	80125ae <_dtoa_r+0x1a6>
 8012570:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012572:	4413      	add	r3, r2
 8012574:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8012578:	2920      	cmp	r1, #32
 801257a:	bfc1      	itttt	gt
 801257c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8012580:	408e      	lslgt	r6, r1
 8012582:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8012586:	fa24 f101 	lsrgt.w	r1, r4, r1
 801258a:	bfd6      	itet	le
 801258c:	f1c1 0120 	rsble	r1, r1, #32
 8012590:	4331      	orrgt	r1, r6
 8012592:	fa04 f101 	lslle.w	r1, r4, r1
 8012596:	ee07 1a90 	vmov	s15, r1
 801259a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801259e:	3b01      	subs	r3, #1
 80125a0:	ee17 1a90 	vmov	r1, s15
 80125a4:	2501      	movs	r5, #1
 80125a6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80125aa:	e7a8      	b.n	80124fe <_dtoa_r+0xf6>
 80125ac:	2101      	movs	r1, #1
 80125ae:	1ad2      	subs	r2, r2, r3
 80125b0:	1e53      	subs	r3, r2, #1
 80125b2:	9306      	str	r3, [sp, #24]
 80125b4:	bf45      	ittet	mi
 80125b6:	f1c2 0301 	rsbmi	r3, r2, #1
 80125ba:	9305      	strmi	r3, [sp, #20]
 80125bc:	2300      	movpl	r3, #0
 80125be:	2300      	movmi	r3, #0
 80125c0:	bf4c      	ite	mi
 80125c2:	9306      	strmi	r3, [sp, #24]
 80125c4:	9305      	strpl	r3, [sp, #20]
 80125c6:	f1b8 0f00 	cmp.w	r8, #0
 80125ca:	910c      	str	r1, [sp, #48]	@ 0x30
 80125cc:	db18      	blt.n	8012600 <_dtoa_r+0x1f8>
 80125ce:	9b06      	ldr	r3, [sp, #24]
 80125d0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80125d4:	4443      	add	r3, r8
 80125d6:	9306      	str	r3, [sp, #24]
 80125d8:	2300      	movs	r3, #0
 80125da:	9a07      	ldr	r2, [sp, #28]
 80125dc:	2a09      	cmp	r2, #9
 80125de:	d849      	bhi.n	8012674 <_dtoa_r+0x26c>
 80125e0:	2a05      	cmp	r2, #5
 80125e2:	bfc4      	itt	gt
 80125e4:	3a04      	subgt	r2, #4
 80125e6:	9207      	strgt	r2, [sp, #28]
 80125e8:	9a07      	ldr	r2, [sp, #28]
 80125ea:	f1a2 0202 	sub.w	r2, r2, #2
 80125ee:	bfcc      	ite	gt
 80125f0:	2400      	movgt	r4, #0
 80125f2:	2401      	movle	r4, #1
 80125f4:	2a03      	cmp	r2, #3
 80125f6:	d848      	bhi.n	801268a <_dtoa_r+0x282>
 80125f8:	e8df f002 	tbb	[pc, r2]
 80125fc:	3a2c2e0b 	.word	0x3a2c2e0b
 8012600:	9b05      	ldr	r3, [sp, #20]
 8012602:	2200      	movs	r2, #0
 8012604:	eba3 0308 	sub.w	r3, r3, r8
 8012608:	9305      	str	r3, [sp, #20]
 801260a:	920a      	str	r2, [sp, #40]	@ 0x28
 801260c:	f1c8 0300 	rsb	r3, r8, #0
 8012610:	e7e3      	b.n	80125da <_dtoa_r+0x1d2>
 8012612:	2200      	movs	r2, #0
 8012614:	9208      	str	r2, [sp, #32]
 8012616:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012618:	2a00      	cmp	r2, #0
 801261a:	dc39      	bgt.n	8012690 <_dtoa_r+0x288>
 801261c:	f04f 0b01 	mov.w	fp, #1
 8012620:	46da      	mov	sl, fp
 8012622:	465a      	mov	r2, fp
 8012624:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8012628:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801262c:	2100      	movs	r1, #0
 801262e:	2004      	movs	r0, #4
 8012630:	f100 0614 	add.w	r6, r0, #20
 8012634:	4296      	cmp	r6, r2
 8012636:	d930      	bls.n	801269a <_dtoa_r+0x292>
 8012638:	6079      	str	r1, [r7, #4]
 801263a:	4648      	mov	r0, r9
 801263c:	9304      	str	r3, [sp, #16]
 801263e:	f000 fd39 	bl	80130b4 <_Balloc>
 8012642:	9b04      	ldr	r3, [sp, #16]
 8012644:	4607      	mov	r7, r0
 8012646:	2800      	cmp	r0, #0
 8012648:	d146      	bne.n	80126d8 <_dtoa_r+0x2d0>
 801264a:	4b22      	ldr	r3, [pc, #136]	@ (80126d4 <_dtoa_r+0x2cc>)
 801264c:	4602      	mov	r2, r0
 801264e:	f240 11af 	movw	r1, #431	@ 0x1af
 8012652:	e6f2      	b.n	801243a <_dtoa_r+0x32>
 8012654:	2201      	movs	r2, #1
 8012656:	e7dd      	b.n	8012614 <_dtoa_r+0x20c>
 8012658:	2200      	movs	r2, #0
 801265a:	9208      	str	r2, [sp, #32]
 801265c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801265e:	eb08 0b02 	add.w	fp, r8, r2
 8012662:	f10b 0a01 	add.w	sl, fp, #1
 8012666:	4652      	mov	r2, sl
 8012668:	2a01      	cmp	r2, #1
 801266a:	bfb8      	it	lt
 801266c:	2201      	movlt	r2, #1
 801266e:	e7db      	b.n	8012628 <_dtoa_r+0x220>
 8012670:	2201      	movs	r2, #1
 8012672:	e7f2      	b.n	801265a <_dtoa_r+0x252>
 8012674:	2401      	movs	r4, #1
 8012676:	2200      	movs	r2, #0
 8012678:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801267c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8012680:	2100      	movs	r1, #0
 8012682:	46da      	mov	sl, fp
 8012684:	2212      	movs	r2, #18
 8012686:	9109      	str	r1, [sp, #36]	@ 0x24
 8012688:	e7ce      	b.n	8012628 <_dtoa_r+0x220>
 801268a:	2201      	movs	r2, #1
 801268c:	9208      	str	r2, [sp, #32]
 801268e:	e7f5      	b.n	801267c <_dtoa_r+0x274>
 8012690:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8012694:	46da      	mov	sl, fp
 8012696:	465a      	mov	r2, fp
 8012698:	e7c6      	b.n	8012628 <_dtoa_r+0x220>
 801269a:	3101      	adds	r1, #1
 801269c:	0040      	lsls	r0, r0, #1
 801269e:	e7c7      	b.n	8012630 <_dtoa_r+0x228>
 80126a0:	636f4361 	.word	0x636f4361
 80126a4:	3fd287a7 	.word	0x3fd287a7
 80126a8:	8b60c8b3 	.word	0x8b60c8b3
 80126ac:	3fc68a28 	.word	0x3fc68a28
 80126b0:	509f79fb 	.word	0x509f79fb
 80126b4:	3fd34413 	.word	0x3fd34413
 80126b8:	08014db3 	.word	0x08014db3
 80126bc:	08014dca 	.word	0x08014dca
 80126c0:	7ff00000 	.word	0x7ff00000
 80126c4:	08014daf 	.word	0x08014daf
 80126c8:	08014d83 	.word	0x08014d83
 80126cc:	08014d82 	.word	0x08014d82
 80126d0:	08014ec0 	.word	0x08014ec0
 80126d4:	08014e22 	.word	0x08014e22
 80126d8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80126dc:	f1ba 0f0e 	cmp.w	sl, #14
 80126e0:	6010      	str	r0, [r2, #0]
 80126e2:	d86f      	bhi.n	80127c4 <_dtoa_r+0x3bc>
 80126e4:	2c00      	cmp	r4, #0
 80126e6:	d06d      	beq.n	80127c4 <_dtoa_r+0x3bc>
 80126e8:	f1b8 0f00 	cmp.w	r8, #0
 80126ec:	f340 80c2 	ble.w	8012874 <_dtoa_r+0x46c>
 80126f0:	4aca      	ldr	r2, [pc, #808]	@ (8012a1c <_dtoa_r+0x614>)
 80126f2:	f008 010f 	and.w	r1, r8, #15
 80126f6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80126fa:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80126fe:	ed92 7b00 	vldr	d7, [r2]
 8012702:	ea4f 1128 	mov.w	r1, r8, asr #4
 8012706:	f000 80a9 	beq.w	801285c <_dtoa_r+0x454>
 801270a:	4ac5      	ldr	r2, [pc, #788]	@ (8012a20 <_dtoa_r+0x618>)
 801270c:	ed92 6b08 	vldr	d6, [r2, #32]
 8012710:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8012714:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012718:	f001 010f 	and.w	r1, r1, #15
 801271c:	2203      	movs	r2, #3
 801271e:	48c0      	ldr	r0, [pc, #768]	@ (8012a20 <_dtoa_r+0x618>)
 8012720:	2900      	cmp	r1, #0
 8012722:	f040 809d 	bne.w	8012860 <_dtoa_r+0x458>
 8012726:	ed9d 6b02 	vldr	d6, [sp, #8]
 801272a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801272e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012732:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012734:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012738:	2900      	cmp	r1, #0
 801273a:	f000 80c1 	beq.w	80128c0 <_dtoa_r+0x4b8>
 801273e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8012742:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801274a:	f140 80b9 	bpl.w	80128c0 <_dtoa_r+0x4b8>
 801274e:	f1ba 0f00 	cmp.w	sl, #0
 8012752:	f000 80b5 	beq.w	80128c0 <_dtoa_r+0x4b8>
 8012756:	f1bb 0f00 	cmp.w	fp, #0
 801275a:	dd31      	ble.n	80127c0 <_dtoa_r+0x3b8>
 801275c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8012760:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012764:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012768:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 801276c:	9104      	str	r1, [sp, #16]
 801276e:	3201      	adds	r2, #1
 8012770:	465c      	mov	r4, fp
 8012772:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012776:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801277a:	ee07 2a90 	vmov	s15, r2
 801277e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012782:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012786:	ee15 2a90 	vmov	r2, s11
 801278a:	ec51 0b15 	vmov	r0, r1, d5
 801278e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8012792:	2c00      	cmp	r4, #0
 8012794:	f040 8098 	bne.w	80128c8 <_dtoa_r+0x4c0>
 8012798:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801279c:	ee36 6b47 	vsub.f64	d6, d6, d7
 80127a0:	ec41 0b17 	vmov	d7, r0, r1
 80127a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80127a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127ac:	f300 8261 	bgt.w	8012c72 <_dtoa_r+0x86a>
 80127b0:	eeb1 7b47 	vneg.f64	d7, d7
 80127b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80127b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127bc:	f100 80f5 	bmi.w	80129aa <_dtoa_r+0x5a2>
 80127c0:	ed8d 8b02 	vstr	d8, [sp, #8]
 80127c4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80127c6:	2a00      	cmp	r2, #0
 80127c8:	f2c0 812c 	blt.w	8012a24 <_dtoa_r+0x61c>
 80127cc:	f1b8 0f0e 	cmp.w	r8, #14
 80127d0:	f300 8128 	bgt.w	8012a24 <_dtoa_r+0x61c>
 80127d4:	4b91      	ldr	r3, [pc, #580]	@ (8012a1c <_dtoa_r+0x614>)
 80127d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80127da:	ed93 6b00 	vldr	d6, [r3]
 80127de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	da03      	bge.n	80127ec <_dtoa_r+0x3e4>
 80127e4:	f1ba 0f00 	cmp.w	sl, #0
 80127e8:	f340 80d2 	ble.w	8012990 <_dtoa_r+0x588>
 80127ec:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80127f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80127f4:	463e      	mov	r6, r7
 80127f6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80127fa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80127fe:	ee15 3a10 	vmov	r3, s10
 8012802:	3330      	adds	r3, #48	@ 0x30
 8012804:	f806 3b01 	strb.w	r3, [r6], #1
 8012808:	1bf3      	subs	r3, r6, r7
 801280a:	459a      	cmp	sl, r3
 801280c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012810:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012814:	f040 80f8 	bne.w	8012a08 <_dtoa_r+0x600>
 8012818:	ee37 7b07 	vadd.f64	d7, d7, d7
 801281c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012824:	f300 80dd 	bgt.w	80129e2 <_dtoa_r+0x5da>
 8012828:	eeb4 7b46 	vcmp.f64	d7, d6
 801282c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012830:	d104      	bne.n	801283c <_dtoa_r+0x434>
 8012832:	ee15 3a10 	vmov	r3, s10
 8012836:	07db      	lsls	r3, r3, #31
 8012838:	f100 80d3 	bmi.w	80129e2 <_dtoa_r+0x5da>
 801283c:	9901      	ldr	r1, [sp, #4]
 801283e:	4648      	mov	r0, r9
 8012840:	f000 fc78 	bl	8013134 <_Bfree>
 8012844:	2300      	movs	r3, #0
 8012846:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012848:	7033      	strb	r3, [r6, #0]
 801284a:	f108 0301 	add.w	r3, r8, #1
 801284e:	6013      	str	r3, [r2, #0]
 8012850:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012852:	2b00      	cmp	r3, #0
 8012854:	f000 8304 	beq.w	8012e60 <_dtoa_r+0xa58>
 8012858:	601e      	str	r6, [r3, #0]
 801285a:	e301      	b.n	8012e60 <_dtoa_r+0xa58>
 801285c:	2202      	movs	r2, #2
 801285e:	e75e      	b.n	801271e <_dtoa_r+0x316>
 8012860:	07cc      	lsls	r4, r1, #31
 8012862:	d504      	bpl.n	801286e <_dtoa_r+0x466>
 8012864:	ed90 6b00 	vldr	d6, [r0]
 8012868:	3201      	adds	r2, #1
 801286a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801286e:	1049      	asrs	r1, r1, #1
 8012870:	3008      	adds	r0, #8
 8012872:	e755      	b.n	8012720 <_dtoa_r+0x318>
 8012874:	d022      	beq.n	80128bc <_dtoa_r+0x4b4>
 8012876:	f1c8 0100 	rsb	r1, r8, #0
 801287a:	4a68      	ldr	r2, [pc, #416]	@ (8012a1c <_dtoa_r+0x614>)
 801287c:	f001 000f 	and.w	r0, r1, #15
 8012880:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012884:	ed92 7b00 	vldr	d7, [r2]
 8012888:	ee28 7b07 	vmul.f64	d7, d8, d7
 801288c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012890:	4863      	ldr	r0, [pc, #396]	@ (8012a20 <_dtoa_r+0x618>)
 8012892:	1109      	asrs	r1, r1, #4
 8012894:	2400      	movs	r4, #0
 8012896:	2202      	movs	r2, #2
 8012898:	b929      	cbnz	r1, 80128a6 <_dtoa_r+0x49e>
 801289a:	2c00      	cmp	r4, #0
 801289c:	f43f af49 	beq.w	8012732 <_dtoa_r+0x32a>
 80128a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80128a4:	e745      	b.n	8012732 <_dtoa_r+0x32a>
 80128a6:	07ce      	lsls	r6, r1, #31
 80128a8:	d505      	bpl.n	80128b6 <_dtoa_r+0x4ae>
 80128aa:	ed90 6b00 	vldr	d6, [r0]
 80128ae:	3201      	adds	r2, #1
 80128b0:	2401      	movs	r4, #1
 80128b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80128b6:	1049      	asrs	r1, r1, #1
 80128b8:	3008      	adds	r0, #8
 80128ba:	e7ed      	b.n	8012898 <_dtoa_r+0x490>
 80128bc:	2202      	movs	r2, #2
 80128be:	e738      	b.n	8012732 <_dtoa_r+0x32a>
 80128c0:	f8cd 8010 	str.w	r8, [sp, #16]
 80128c4:	4654      	mov	r4, sl
 80128c6:	e754      	b.n	8012772 <_dtoa_r+0x36a>
 80128c8:	4a54      	ldr	r2, [pc, #336]	@ (8012a1c <_dtoa_r+0x614>)
 80128ca:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80128ce:	ed12 4b02 	vldr	d4, [r2, #-8]
 80128d2:	9a08      	ldr	r2, [sp, #32]
 80128d4:	ec41 0b17 	vmov	d7, r0, r1
 80128d8:	443c      	add	r4, r7
 80128da:	b34a      	cbz	r2, 8012930 <_dtoa_r+0x528>
 80128dc:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80128e0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80128e4:	463e      	mov	r6, r7
 80128e6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80128ea:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80128ee:	ee35 7b47 	vsub.f64	d7, d5, d7
 80128f2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80128f6:	ee14 2a90 	vmov	r2, s9
 80128fa:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80128fe:	3230      	adds	r2, #48	@ 0x30
 8012900:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012904:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801290c:	f806 2b01 	strb.w	r2, [r6], #1
 8012910:	d438      	bmi.n	8012984 <_dtoa_r+0x57c>
 8012912:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012916:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801291a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801291e:	d462      	bmi.n	80129e6 <_dtoa_r+0x5de>
 8012920:	42a6      	cmp	r6, r4
 8012922:	f43f af4d 	beq.w	80127c0 <_dtoa_r+0x3b8>
 8012926:	ee27 7b03 	vmul.f64	d7, d7, d3
 801292a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801292e:	e7e0      	b.n	80128f2 <_dtoa_r+0x4ea>
 8012930:	4621      	mov	r1, r4
 8012932:	463e      	mov	r6, r7
 8012934:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012938:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801293c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012940:	ee14 2a90 	vmov	r2, s9
 8012944:	3230      	adds	r2, #48	@ 0x30
 8012946:	f806 2b01 	strb.w	r2, [r6], #1
 801294a:	42a6      	cmp	r6, r4
 801294c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012950:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012954:	d119      	bne.n	801298a <_dtoa_r+0x582>
 8012956:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801295a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801295e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012966:	dc3e      	bgt.n	80129e6 <_dtoa_r+0x5de>
 8012968:	ee35 5b47 	vsub.f64	d5, d5, d7
 801296c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8012970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012974:	f57f af24 	bpl.w	80127c0 <_dtoa_r+0x3b8>
 8012978:	460e      	mov	r6, r1
 801297a:	3901      	subs	r1, #1
 801297c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012980:	2b30      	cmp	r3, #48	@ 0x30
 8012982:	d0f9      	beq.n	8012978 <_dtoa_r+0x570>
 8012984:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012988:	e758      	b.n	801283c <_dtoa_r+0x434>
 801298a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801298e:	e7d5      	b.n	801293c <_dtoa_r+0x534>
 8012990:	d10b      	bne.n	80129aa <_dtoa_r+0x5a2>
 8012992:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8012996:	ee26 6b07 	vmul.f64	d6, d6, d7
 801299a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801299e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80129a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129a6:	f2c0 8161 	blt.w	8012c6c <_dtoa_r+0x864>
 80129aa:	2400      	movs	r4, #0
 80129ac:	4625      	mov	r5, r4
 80129ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80129b0:	43db      	mvns	r3, r3
 80129b2:	9304      	str	r3, [sp, #16]
 80129b4:	463e      	mov	r6, r7
 80129b6:	f04f 0800 	mov.w	r8, #0
 80129ba:	4621      	mov	r1, r4
 80129bc:	4648      	mov	r0, r9
 80129be:	f000 fbb9 	bl	8013134 <_Bfree>
 80129c2:	2d00      	cmp	r5, #0
 80129c4:	d0de      	beq.n	8012984 <_dtoa_r+0x57c>
 80129c6:	f1b8 0f00 	cmp.w	r8, #0
 80129ca:	d005      	beq.n	80129d8 <_dtoa_r+0x5d0>
 80129cc:	45a8      	cmp	r8, r5
 80129ce:	d003      	beq.n	80129d8 <_dtoa_r+0x5d0>
 80129d0:	4641      	mov	r1, r8
 80129d2:	4648      	mov	r0, r9
 80129d4:	f000 fbae 	bl	8013134 <_Bfree>
 80129d8:	4629      	mov	r1, r5
 80129da:	4648      	mov	r0, r9
 80129dc:	f000 fbaa 	bl	8013134 <_Bfree>
 80129e0:	e7d0      	b.n	8012984 <_dtoa_r+0x57c>
 80129e2:	f8cd 8010 	str.w	r8, [sp, #16]
 80129e6:	4633      	mov	r3, r6
 80129e8:	461e      	mov	r6, r3
 80129ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80129ee:	2a39      	cmp	r2, #57	@ 0x39
 80129f0:	d106      	bne.n	8012a00 <_dtoa_r+0x5f8>
 80129f2:	429f      	cmp	r7, r3
 80129f4:	d1f8      	bne.n	80129e8 <_dtoa_r+0x5e0>
 80129f6:	9a04      	ldr	r2, [sp, #16]
 80129f8:	3201      	adds	r2, #1
 80129fa:	9204      	str	r2, [sp, #16]
 80129fc:	2230      	movs	r2, #48	@ 0x30
 80129fe:	703a      	strb	r2, [r7, #0]
 8012a00:	781a      	ldrb	r2, [r3, #0]
 8012a02:	3201      	adds	r2, #1
 8012a04:	701a      	strb	r2, [r3, #0]
 8012a06:	e7bd      	b.n	8012984 <_dtoa_r+0x57c>
 8012a08:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012a0c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a14:	f47f aeef 	bne.w	80127f6 <_dtoa_r+0x3ee>
 8012a18:	e710      	b.n	801283c <_dtoa_r+0x434>
 8012a1a:	bf00      	nop
 8012a1c:	08014ec0 	.word	0x08014ec0
 8012a20:	08014e98 	.word	0x08014e98
 8012a24:	9908      	ldr	r1, [sp, #32]
 8012a26:	2900      	cmp	r1, #0
 8012a28:	f000 80e3 	beq.w	8012bf2 <_dtoa_r+0x7ea>
 8012a2c:	9907      	ldr	r1, [sp, #28]
 8012a2e:	2901      	cmp	r1, #1
 8012a30:	f300 80c8 	bgt.w	8012bc4 <_dtoa_r+0x7bc>
 8012a34:	2d00      	cmp	r5, #0
 8012a36:	f000 80c1 	beq.w	8012bbc <_dtoa_r+0x7b4>
 8012a3a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8012a3e:	9e05      	ldr	r6, [sp, #20]
 8012a40:	461c      	mov	r4, r3
 8012a42:	9304      	str	r3, [sp, #16]
 8012a44:	9b05      	ldr	r3, [sp, #20]
 8012a46:	4413      	add	r3, r2
 8012a48:	9305      	str	r3, [sp, #20]
 8012a4a:	9b06      	ldr	r3, [sp, #24]
 8012a4c:	2101      	movs	r1, #1
 8012a4e:	4413      	add	r3, r2
 8012a50:	4648      	mov	r0, r9
 8012a52:	9306      	str	r3, [sp, #24]
 8012a54:	f000 fc22 	bl	801329c <__i2b>
 8012a58:	9b04      	ldr	r3, [sp, #16]
 8012a5a:	4605      	mov	r5, r0
 8012a5c:	b166      	cbz	r6, 8012a78 <_dtoa_r+0x670>
 8012a5e:	9a06      	ldr	r2, [sp, #24]
 8012a60:	2a00      	cmp	r2, #0
 8012a62:	dd09      	ble.n	8012a78 <_dtoa_r+0x670>
 8012a64:	42b2      	cmp	r2, r6
 8012a66:	9905      	ldr	r1, [sp, #20]
 8012a68:	bfa8      	it	ge
 8012a6a:	4632      	movge	r2, r6
 8012a6c:	1a89      	subs	r1, r1, r2
 8012a6e:	9105      	str	r1, [sp, #20]
 8012a70:	9906      	ldr	r1, [sp, #24]
 8012a72:	1ab6      	subs	r6, r6, r2
 8012a74:	1a8a      	subs	r2, r1, r2
 8012a76:	9206      	str	r2, [sp, #24]
 8012a78:	b1fb      	cbz	r3, 8012aba <_dtoa_r+0x6b2>
 8012a7a:	9a08      	ldr	r2, [sp, #32]
 8012a7c:	2a00      	cmp	r2, #0
 8012a7e:	f000 80bc 	beq.w	8012bfa <_dtoa_r+0x7f2>
 8012a82:	b19c      	cbz	r4, 8012aac <_dtoa_r+0x6a4>
 8012a84:	4629      	mov	r1, r5
 8012a86:	4622      	mov	r2, r4
 8012a88:	4648      	mov	r0, r9
 8012a8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012a8c:	f000 fcc6 	bl	801341c <__pow5mult>
 8012a90:	9a01      	ldr	r2, [sp, #4]
 8012a92:	4601      	mov	r1, r0
 8012a94:	4605      	mov	r5, r0
 8012a96:	4648      	mov	r0, r9
 8012a98:	f000 fc16 	bl	80132c8 <__multiply>
 8012a9c:	9901      	ldr	r1, [sp, #4]
 8012a9e:	9004      	str	r0, [sp, #16]
 8012aa0:	4648      	mov	r0, r9
 8012aa2:	f000 fb47 	bl	8013134 <_Bfree>
 8012aa6:	9a04      	ldr	r2, [sp, #16]
 8012aa8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012aaa:	9201      	str	r2, [sp, #4]
 8012aac:	1b1a      	subs	r2, r3, r4
 8012aae:	d004      	beq.n	8012aba <_dtoa_r+0x6b2>
 8012ab0:	9901      	ldr	r1, [sp, #4]
 8012ab2:	4648      	mov	r0, r9
 8012ab4:	f000 fcb2 	bl	801341c <__pow5mult>
 8012ab8:	9001      	str	r0, [sp, #4]
 8012aba:	2101      	movs	r1, #1
 8012abc:	4648      	mov	r0, r9
 8012abe:	f000 fbed 	bl	801329c <__i2b>
 8012ac2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012ac4:	4604      	mov	r4, r0
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	f000 81d0 	beq.w	8012e6c <_dtoa_r+0xa64>
 8012acc:	461a      	mov	r2, r3
 8012ace:	4601      	mov	r1, r0
 8012ad0:	4648      	mov	r0, r9
 8012ad2:	f000 fca3 	bl	801341c <__pow5mult>
 8012ad6:	9b07      	ldr	r3, [sp, #28]
 8012ad8:	2b01      	cmp	r3, #1
 8012ada:	4604      	mov	r4, r0
 8012adc:	f300 8095 	bgt.w	8012c0a <_dtoa_r+0x802>
 8012ae0:	9b02      	ldr	r3, [sp, #8]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	f040 808b 	bne.w	8012bfe <_dtoa_r+0x7f6>
 8012ae8:	9b03      	ldr	r3, [sp, #12]
 8012aea:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8012aee:	2a00      	cmp	r2, #0
 8012af0:	f040 8087 	bne.w	8012c02 <_dtoa_r+0x7fa>
 8012af4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8012af8:	0d12      	lsrs	r2, r2, #20
 8012afa:	0512      	lsls	r2, r2, #20
 8012afc:	2a00      	cmp	r2, #0
 8012afe:	f000 8082 	beq.w	8012c06 <_dtoa_r+0x7fe>
 8012b02:	9b05      	ldr	r3, [sp, #20]
 8012b04:	3301      	adds	r3, #1
 8012b06:	9305      	str	r3, [sp, #20]
 8012b08:	9b06      	ldr	r3, [sp, #24]
 8012b0a:	3301      	adds	r3, #1
 8012b0c:	9306      	str	r3, [sp, #24]
 8012b0e:	2301      	movs	r3, #1
 8012b10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012b12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	f000 81af 	beq.w	8012e78 <_dtoa_r+0xa70>
 8012b1a:	6922      	ldr	r2, [r4, #16]
 8012b1c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012b20:	6910      	ldr	r0, [r2, #16]
 8012b22:	f000 fb6f 	bl	8013204 <__hi0bits>
 8012b26:	f1c0 0020 	rsb	r0, r0, #32
 8012b2a:	9b06      	ldr	r3, [sp, #24]
 8012b2c:	4418      	add	r0, r3
 8012b2e:	f010 001f 	ands.w	r0, r0, #31
 8012b32:	d076      	beq.n	8012c22 <_dtoa_r+0x81a>
 8012b34:	f1c0 0220 	rsb	r2, r0, #32
 8012b38:	2a04      	cmp	r2, #4
 8012b3a:	dd69      	ble.n	8012c10 <_dtoa_r+0x808>
 8012b3c:	9b05      	ldr	r3, [sp, #20]
 8012b3e:	f1c0 001c 	rsb	r0, r0, #28
 8012b42:	4403      	add	r3, r0
 8012b44:	9305      	str	r3, [sp, #20]
 8012b46:	9b06      	ldr	r3, [sp, #24]
 8012b48:	4406      	add	r6, r0
 8012b4a:	4403      	add	r3, r0
 8012b4c:	9306      	str	r3, [sp, #24]
 8012b4e:	9b05      	ldr	r3, [sp, #20]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	dd05      	ble.n	8012b60 <_dtoa_r+0x758>
 8012b54:	9901      	ldr	r1, [sp, #4]
 8012b56:	461a      	mov	r2, r3
 8012b58:	4648      	mov	r0, r9
 8012b5a:	f000 fcb9 	bl	80134d0 <__lshift>
 8012b5e:	9001      	str	r0, [sp, #4]
 8012b60:	9b06      	ldr	r3, [sp, #24]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	dd05      	ble.n	8012b72 <_dtoa_r+0x76a>
 8012b66:	4621      	mov	r1, r4
 8012b68:	461a      	mov	r2, r3
 8012b6a:	4648      	mov	r0, r9
 8012b6c:	f000 fcb0 	bl	80134d0 <__lshift>
 8012b70:	4604      	mov	r4, r0
 8012b72:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d056      	beq.n	8012c26 <_dtoa_r+0x81e>
 8012b78:	9801      	ldr	r0, [sp, #4]
 8012b7a:	4621      	mov	r1, r4
 8012b7c:	f000 fd14 	bl	80135a8 <__mcmp>
 8012b80:	2800      	cmp	r0, #0
 8012b82:	da50      	bge.n	8012c26 <_dtoa_r+0x81e>
 8012b84:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8012b88:	9304      	str	r3, [sp, #16]
 8012b8a:	9901      	ldr	r1, [sp, #4]
 8012b8c:	2300      	movs	r3, #0
 8012b8e:	220a      	movs	r2, #10
 8012b90:	4648      	mov	r0, r9
 8012b92:	f000 faf1 	bl	8013178 <__multadd>
 8012b96:	9b08      	ldr	r3, [sp, #32]
 8012b98:	9001      	str	r0, [sp, #4]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	f000 816e 	beq.w	8012e7c <_dtoa_r+0xa74>
 8012ba0:	4629      	mov	r1, r5
 8012ba2:	2300      	movs	r3, #0
 8012ba4:	220a      	movs	r2, #10
 8012ba6:	4648      	mov	r0, r9
 8012ba8:	f000 fae6 	bl	8013178 <__multadd>
 8012bac:	f1bb 0f00 	cmp.w	fp, #0
 8012bb0:	4605      	mov	r5, r0
 8012bb2:	dc64      	bgt.n	8012c7e <_dtoa_r+0x876>
 8012bb4:	9b07      	ldr	r3, [sp, #28]
 8012bb6:	2b02      	cmp	r3, #2
 8012bb8:	dc3e      	bgt.n	8012c38 <_dtoa_r+0x830>
 8012bba:	e060      	b.n	8012c7e <_dtoa_r+0x876>
 8012bbc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012bbe:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8012bc2:	e73c      	b.n	8012a3e <_dtoa_r+0x636>
 8012bc4:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 8012bc8:	42a3      	cmp	r3, r4
 8012bca:	bfbf      	itttt	lt
 8012bcc:	1ae2      	sublt	r2, r4, r3
 8012bce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8012bd0:	189b      	addlt	r3, r3, r2
 8012bd2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8012bd4:	bfae      	itee	ge
 8012bd6:	1b1c      	subge	r4, r3, r4
 8012bd8:	4623      	movlt	r3, r4
 8012bda:	2400      	movlt	r4, #0
 8012bdc:	f1ba 0f00 	cmp.w	sl, #0
 8012be0:	bfb5      	itete	lt
 8012be2:	9a05      	ldrlt	r2, [sp, #20]
 8012be4:	9e05      	ldrge	r6, [sp, #20]
 8012be6:	eba2 060a 	sublt.w	r6, r2, sl
 8012bea:	4652      	movge	r2, sl
 8012bec:	bfb8      	it	lt
 8012bee:	2200      	movlt	r2, #0
 8012bf0:	e727      	b.n	8012a42 <_dtoa_r+0x63a>
 8012bf2:	9e05      	ldr	r6, [sp, #20]
 8012bf4:	9d08      	ldr	r5, [sp, #32]
 8012bf6:	461c      	mov	r4, r3
 8012bf8:	e730      	b.n	8012a5c <_dtoa_r+0x654>
 8012bfa:	461a      	mov	r2, r3
 8012bfc:	e758      	b.n	8012ab0 <_dtoa_r+0x6a8>
 8012bfe:	2300      	movs	r3, #0
 8012c00:	e786      	b.n	8012b10 <_dtoa_r+0x708>
 8012c02:	9b02      	ldr	r3, [sp, #8]
 8012c04:	e784      	b.n	8012b10 <_dtoa_r+0x708>
 8012c06:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012c08:	e783      	b.n	8012b12 <_dtoa_r+0x70a>
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012c0e:	e784      	b.n	8012b1a <_dtoa_r+0x712>
 8012c10:	d09d      	beq.n	8012b4e <_dtoa_r+0x746>
 8012c12:	9b05      	ldr	r3, [sp, #20]
 8012c14:	321c      	adds	r2, #28
 8012c16:	4413      	add	r3, r2
 8012c18:	9305      	str	r3, [sp, #20]
 8012c1a:	9b06      	ldr	r3, [sp, #24]
 8012c1c:	4416      	add	r6, r2
 8012c1e:	4413      	add	r3, r2
 8012c20:	e794      	b.n	8012b4c <_dtoa_r+0x744>
 8012c22:	4602      	mov	r2, r0
 8012c24:	e7f5      	b.n	8012c12 <_dtoa_r+0x80a>
 8012c26:	f1ba 0f00 	cmp.w	sl, #0
 8012c2a:	f8cd 8010 	str.w	r8, [sp, #16]
 8012c2e:	46d3      	mov	fp, sl
 8012c30:	dc21      	bgt.n	8012c76 <_dtoa_r+0x86e>
 8012c32:	9b07      	ldr	r3, [sp, #28]
 8012c34:	2b02      	cmp	r3, #2
 8012c36:	dd1e      	ble.n	8012c76 <_dtoa_r+0x86e>
 8012c38:	f1bb 0f00 	cmp.w	fp, #0
 8012c3c:	f47f aeb7 	bne.w	80129ae <_dtoa_r+0x5a6>
 8012c40:	4621      	mov	r1, r4
 8012c42:	465b      	mov	r3, fp
 8012c44:	2205      	movs	r2, #5
 8012c46:	4648      	mov	r0, r9
 8012c48:	f000 fa96 	bl	8013178 <__multadd>
 8012c4c:	4601      	mov	r1, r0
 8012c4e:	4604      	mov	r4, r0
 8012c50:	9801      	ldr	r0, [sp, #4]
 8012c52:	f000 fca9 	bl	80135a8 <__mcmp>
 8012c56:	2800      	cmp	r0, #0
 8012c58:	f77f aea9 	ble.w	80129ae <_dtoa_r+0x5a6>
 8012c5c:	463e      	mov	r6, r7
 8012c5e:	2331      	movs	r3, #49	@ 0x31
 8012c60:	f806 3b01 	strb.w	r3, [r6], #1
 8012c64:	9b04      	ldr	r3, [sp, #16]
 8012c66:	3301      	adds	r3, #1
 8012c68:	9304      	str	r3, [sp, #16]
 8012c6a:	e6a4      	b.n	80129b6 <_dtoa_r+0x5ae>
 8012c6c:	f8cd 8010 	str.w	r8, [sp, #16]
 8012c70:	4654      	mov	r4, sl
 8012c72:	4625      	mov	r5, r4
 8012c74:	e7f2      	b.n	8012c5c <_dtoa_r+0x854>
 8012c76:	9b08      	ldr	r3, [sp, #32]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	f000 8103 	beq.w	8012e84 <_dtoa_r+0xa7c>
 8012c7e:	2e00      	cmp	r6, #0
 8012c80:	dd05      	ble.n	8012c8e <_dtoa_r+0x886>
 8012c82:	4629      	mov	r1, r5
 8012c84:	4632      	mov	r2, r6
 8012c86:	4648      	mov	r0, r9
 8012c88:	f000 fc22 	bl	80134d0 <__lshift>
 8012c8c:	4605      	mov	r5, r0
 8012c8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d058      	beq.n	8012d46 <_dtoa_r+0x93e>
 8012c94:	6869      	ldr	r1, [r5, #4]
 8012c96:	4648      	mov	r0, r9
 8012c98:	f000 fa0c 	bl	80130b4 <_Balloc>
 8012c9c:	4606      	mov	r6, r0
 8012c9e:	b928      	cbnz	r0, 8012cac <_dtoa_r+0x8a4>
 8012ca0:	4b82      	ldr	r3, [pc, #520]	@ (8012eac <_dtoa_r+0xaa4>)
 8012ca2:	4602      	mov	r2, r0
 8012ca4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012ca8:	f7ff bbc7 	b.w	801243a <_dtoa_r+0x32>
 8012cac:	692a      	ldr	r2, [r5, #16]
 8012cae:	3202      	adds	r2, #2
 8012cb0:	0092      	lsls	r2, r2, #2
 8012cb2:	f105 010c 	add.w	r1, r5, #12
 8012cb6:	300c      	adds	r0, #12
 8012cb8:	f000 ffac 	bl	8013c14 <memcpy>
 8012cbc:	2201      	movs	r2, #1
 8012cbe:	4631      	mov	r1, r6
 8012cc0:	4648      	mov	r0, r9
 8012cc2:	f000 fc05 	bl	80134d0 <__lshift>
 8012cc6:	1c7b      	adds	r3, r7, #1
 8012cc8:	9305      	str	r3, [sp, #20]
 8012cca:	eb07 030b 	add.w	r3, r7, fp
 8012cce:	9309      	str	r3, [sp, #36]	@ 0x24
 8012cd0:	9b02      	ldr	r3, [sp, #8]
 8012cd2:	f003 0301 	and.w	r3, r3, #1
 8012cd6:	46a8      	mov	r8, r5
 8012cd8:	9308      	str	r3, [sp, #32]
 8012cda:	4605      	mov	r5, r0
 8012cdc:	9b05      	ldr	r3, [sp, #20]
 8012cde:	9801      	ldr	r0, [sp, #4]
 8012ce0:	4621      	mov	r1, r4
 8012ce2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8012ce6:	f7ff fb06 	bl	80122f6 <quorem>
 8012cea:	4641      	mov	r1, r8
 8012cec:	9002      	str	r0, [sp, #8]
 8012cee:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8012cf2:	9801      	ldr	r0, [sp, #4]
 8012cf4:	f000 fc58 	bl	80135a8 <__mcmp>
 8012cf8:	462a      	mov	r2, r5
 8012cfa:	9006      	str	r0, [sp, #24]
 8012cfc:	4621      	mov	r1, r4
 8012cfe:	4648      	mov	r0, r9
 8012d00:	f000 fc6e 	bl	80135e0 <__mdiff>
 8012d04:	68c2      	ldr	r2, [r0, #12]
 8012d06:	4606      	mov	r6, r0
 8012d08:	b9fa      	cbnz	r2, 8012d4a <_dtoa_r+0x942>
 8012d0a:	4601      	mov	r1, r0
 8012d0c:	9801      	ldr	r0, [sp, #4]
 8012d0e:	f000 fc4b 	bl	80135a8 <__mcmp>
 8012d12:	4602      	mov	r2, r0
 8012d14:	4631      	mov	r1, r6
 8012d16:	4648      	mov	r0, r9
 8012d18:	920a      	str	r2, [sp, #40]	@ 0x28
 8012d1a:	f000 fa0b 	bl	8013134 <_Bfree>
 8012d1e:	9b07      	ldr	r3, [sp, #28]
 8012d20:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012d22:	9e05      	ldr	r6, [sp, #20]
 8012d24:	ea43 0102 	orr.w	r1, r3, r2
 8012d28:	9b08      	ldr	r3, [sp, #32]
 8012d2a:	4319      	orrs	r1, r3
 8012d2c:	d10f      	bne.n	8012d4e <_dtoa_r+0x946>
 8012d2e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012d32:	d028      	beq.n	8012d86 <_dtoa_r+0x97e>
 8012d34:	9b06      	ldr	r3, [sp, #24]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	dd02      	ble.n	8012d40 <_dtoa_r+0x938>
 8012d3a:	9b02      	ldr	r3, [sp, #8]
 8012d3c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8012d40:	f88b a000 	strb.w	sl, [fp]
 8012d44:	e639      	b.n	80129ba <_dtoa_r+0x5b2>
 8012d46:	4628      	mov	r0, r5
 8012d48:	e7bd      	b.n	8012cc6 <_dtoa_r+0x8be>
 8012d4a:	2201      	movs	r2, #1
 8012d4c:	e7e2      	b.n	8012d14 <_dtoa_r+0x90c>
 8012d4e:	9b06      	ldr	r3, [sp, #24]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	db04      	blt.n	8012d5e <_dtoa_r+0x956>
 8012d54:	9907      	ldr	r1, [sp, #28]
 8012d56:	430b      	orrs	r3, r1
 8012d58:	9908      	ldr	r1, [sp, #32]
 8012d5a:	430b      	orrs	r3, r1
 8012d5c:	d120      	bne.n	8012da0 <_dtoa_r+0x998>
 8012d5e:	2a00      	cmp	r2, #0
 8012d60:	ddee      	ble.n	8012d40 <_dtoa_r+0x938>
 8012d62:	9901      	ldr	r1, [sp, #4]
 8012d64:	2201      	movs	r2, #1
 8012d66:	4648      	mov	r0, r9
 8012d68:	f000 fbb2 	bl	80134d0 <__lshift>
 8012d6c:	4621      	mov	r1, r4
 8012d6e:	9001      	str	r0, [sp, #4]
 8012d70:	f000 fc1a 	bl	80135a8 <__mcmp>
 8012d74:	2800      	cmp	r0, #0
 8012d76:	dc03      	bgt.n	8012d80 <_dtoa_r+0x978>
 8012d78:	d1e2      	bne.n	8012d40 <_dtoa_r+0x938>
 8012d7a:	f01a 0f01 	tst.w	sl, #1
 8012d7e:	d0df      	beq.n	8012d40 <_dtoa_r+0x938>
 8012d80:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012d84:	d1d9      	bne.n	8012d3a <_dtoa_r+0x932>
 8012d86:	2339      	movs	r3, #57	@ 0x39
 8012d88:	f88b 3000 	strb.w	r3, [fp]
 8012d8c:	4633      	mov	r3, r6
 8012d8e:	461e      	mov	r6, r3
 8012d90:	3b01      	subs	r3, #1
 8012d92:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012d96:	2a39      	cmp	r2, #57	@ 0x39
 8012d98:	d053      	beq.n	8012e42 <_dtoa_r+0xa3a>
 8012d9a:	3201      	adds	r2, #1
 8012d9c:	701a      	strb	r2, [r3, #0]
 8012d9e:	e60c      	b.n	80129ba <_dtoa_r+0x5b2>
 8012da0:	2a00      	cmp	r2, #0
 8012da2:	dd07      	ble.n	8012db4 <_dtoa_r+0x9ac>
 8012da4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012da8:	d0ed      	beq.n	8012d86 <_dtoa_r+0x97e>
 8012daa:	f10a 0301 	add.w	r3, sl, #1
 8012dae:	f88b 3000 	strb.w	r3, [fp]
 8012db2:	e602      	b.n	80129ba <_dtoa_r+0x5b2>
 8012db4:	9b05      	ldr	r3, [sp, #20]
 8012db6:	9a05      	ldr	r2, [sp, #20]
 8012db8:	f803 ac01 	strb.w	sl, [r3, #-1]
 8012dbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012dbe:	4293      	cmp	r3, r2
 8012dc0:	d029      	beq.n	8012e16 <_dtoa_r+0xa0e>
 8012dc2:	9901      	ldr	r1, [sp, #4]
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	220a      	movs	r2, #10
 8012dc8:	4648      	mov	r0, r9
 8012dca:	f000 f9d5 	bl	8013178 <__multadd>
 8012dce:	45a8      	cmp	r8, r5
 8012dd0:	9001      	str	r0, [sp, #4]
 8012dd2:	f04f 0300 	mov.w	r3, #0
 8012dd6:	f04f 020a 	mov.w	r2, #10
 8012dda:	4641      	mov	r1, r8
 8012ddc:	4648      	mov	r0, r9
 8012dde:	d107      	bne.n	8012df0 <_dtoa_r+0x9e8>
 8012de0:	f000 f9ca 	bl	8013178 <__multadd>
 8012de4:	4680      	mov	r8, r0
 8012de6:	4605      	mov	r5, r0
 8012de8:	9b05      	ldr	r3, [sp, #20]
 8012dea:	3301      	adds	r3, #1
 8012dec:	9305      	str	r3, [sp, #20]
 8012dee:	e775      	b.n	8012cdc <_dtoa_r+0x8d4>
 8012df0:	f000 f9c2 	bl	8013178 <__multadd>
 8012df4:	4629      	mov	r1, r5
 8012df6:	4680      	mov	r8, r0
 8012df8:	2300      	movs	r3, #0
 8012dfa:	220a      	movs	r2, #10
 8012dfc:	4648      	mov	r0, r9
 8012dfe:	f000 f9bb 	bl	8013178 <__multadd>
 8012e02:	4605      	mov	r5, r0
 8012e04:	e7f0      	b.n	8012de8 <_dtoa_r+0x9e0>
 8012e06:	f1bb 0f00 	cmp.w	fp, #0
 8012e0a:	bfcc      	ite	gt
 8012e0c:	465e      	movgt	r6, fp
 8012e0e:	2601      	movle	r6, #1
 8012e10:	443e      	add	r6, r7
 8012e12:	f04f 0800 	mov.w	r8, #0
 8012e16:	9901      	ldr	r1, [sp, #4]
 8012e18:	2201      	movs	r2, #1
 8012e1a:	4648      	mov	r0, r9
 8012e1c:	f000 fb58 	bl	80134d0 <__lshift>
 8012e20:	4621      	mov	r1, r4
 8012e22:	9001      	str	r0, [sp, #4]
 8012e24:	f000 fbc0 	bl	80135a8 <__mcmp>
 8012e28:	2800      	cmp	r0, #0
 8012e2a:	dcaf      	bgt.n	8012d8c <_dtoa_r+0x984>
 8012e2c:	d102      	bne.n	8012e34 <_dtoa_r+0xa2c>
 8012e2e:	f01a 0f01 	tst.w	sl, #1
 8012e32:	d1ab      	bne.n	8012d8c <_dtoa_r+0x984>
 8012e34:	4633      	mov	r3, r6
 8012e36:	461e      	mov	r6, r3
 8012e38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012e3c:	2a30      	cmp	r2, #48	@ 0x30
 8012e3e:	d0fa      	beq.n	8012e36 <_dtoa_r+0xa2e>
 8012e40:	e5bb      	b.n	80129ba <_dtoa_r+0x5b2>
 8012e42:	429f      	cmp	r7, r3
 8012e44:	d1a3      	bne.n	8012d8e <_dtoa_r+0x986>
 8012e46:	9b04      	ldr	r3, [sp, #16]
 8012e48:	3301      	adds	r3, #1
 8012e4a:	9304      	str	r3, [sp, #16]
 8012e4c:	2331      	movs	r3, #49	@ 0x31
 8012e4e:	703b      	strb	r3, [r7, #0]
 8012e50:	e5b3      	b.n	80129ba <_dtoa_r+0x5b2>
 8012e52:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012e54:	4f16      	ldr	r7, [pc, #88]	@ (8012eb0 <_dtoa_r+0xaa8>)
 8012e56:	b11b      	cbz	r3, 8012e60 <_dtoa_r+0xa58>
 8012e58:	f107 0308 	add.w	r3, r7, #8
 8012e5c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012e5e:	6013      	str	r3, [r2, #0]
 8012e60:	4638      	mov	r0, r7
 8012e62:	b011      	add	sp, #68	@ 0x44
 8012e64:	ecbd 8b02 	vpop	{d8}
 8012e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e6c:	9b07      	ldr	r3, [sp, #28]
 8012e6e:	2b01      	cmp	r3, #1
 8012e70:	f77f ae36 	ble.w	8012ae0 <_dtoa_r+0x6d8>
 8012e74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012e76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012e78:	2001      	movs	r0, #1
 8012e7a:	e656      	b.n	8012b2a <_dtoa_r+0x722>
 8012e7c:	f1bb 0f00 	cmp.w	fp, #0
 8012e80:	f77f aed7 	ble.w	8012c32 <_dtoa_r+0x82a>
 8012e84:	463e      	mov	r6, r7
 8012e86:	9801      	ldr	r0, [sp, #4]
 8012e88:	4621      	mov	r1, r4
 8012e8a:	f7ff fa34 	bl	80122f6 <quorem>
 8012e8e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8012e92:	f806 ab01 	strb.w	sl, [r6], #1
 8012e96:	1bf2      	subs	r2, r6, r7
 8012e98:	4593      	cmp	fp, r2
 8012e9a:	ddb4      	ble.n	8012e06 <_dtoa_r+0x9fe>
 8012e9c:	9901      	ldr	r1, [sp, #4]
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	220a      	movs	r2, #10
 8012ea2:	4648      	mov	r0, r9
 8012ea4:	f000 f968 	bl	8013178 <__multadd>
 8012ea8:	9001      	str	r0, [sp, #4]
 8012eaa:	e7ec      	b.n	8012e86 <_dtoa_r+0xa7e>
 8012eac:	08014e22 	.word	0x08014e22
 8012eb0:	08014da6 	.word	0x08014da6

08012eb4 <_free_r>:
 8012eb4:	b538      	push	{r3, r4, r5, lr}
 8012eb6:	4605      	mov	r5, r0
 8012eb8:	2900      	cmp	r1, #0
 8012eba:	d041      	beq.n	8012f40 <_free_r+0x8c>
 8012ebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012ec0:	1f0c      	subs	r4, r1, #4
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	bfb8      	it	lt
 8012ec6:	18e4      	addlt	r4, r4, r3
 8012ec8:	f000 f8e8 	bl	801309c <__malloc_lock>
 8012ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8012f44 <_free_r+0x90>)
 8012ece:	6813      	ldr	r3, [r2, #0]
 8012ed0:	b933      	cbnz	r3, 8012ee0 <_free_r+0x2c>
 8012ed2:	6063      	str	r3, [r4, #4]
 8012ed4:	6014      	str	r4, [r2, #0]
 8012ed6:	4628      	mov	r0, r5
 8012ed8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012edc:	f000 b8e4 	b.w	80130a8 <__malloc_unlock>
 8012ee0:	42a3      	cmp	r3, r4
 8012ee2:	d908      	bls.n	8012ef6 <_free_r+0x42>
 8012ee4:	6820      	ldr	r0, [r4, #0]
 8012ee6:	1821      	adds	r1, r4, r0
 8012ee8:	428b      	cmp	r3, r1
 8012eea:	bf01      	itttt	eq
 8012eec:	6819      	ldreq	r1, [r3, #0]
 8012eee:	685b      	ldreq	r3, [r3, #4]
 8012ef0:	1809      	addeq	r1, r1, r0
 8012ef2:	6021      	streq	r1, [r4, #0]
 8012ef4:	e7ed      	b.n	8012ed2 <_free_r+0x1e>
 8012ef6:	461a      	mov	r2, r3
 8012ef8:	685b      	ldr	r3, [r3, #4]
 8012efa:	b10b      	cbz	r3, 8012f00 <_free_r+0x4c>
 8012efc:	42a3      	cmp	r3, r4
 8012efe:	d9fa      	bls.n	8012ef6 <_free_r+0x42>
 8012f00:	6811      	ldr	r1, [r2, #0]
 8012f02:	1850      	adds	r0, r2, r1
 8012f04:	42a0      	cmp	r0, r4
 8012f06:	d10b      	bne.n	8012f20 <_free_r+0x6c>
 8012f08:	6820      	ldr	r0, [r4, #0]
 8012f0a:	4401      	add	r1, r0
 8012f0c:	1850      	adds	r0, r2, r1
 8012f0e:	4283      	cmp	r3, r0
 8012f10:	6011      	str	r1, [r2, #0]
 8012f12:	d1e0      	bne.n	8012ed6 <_free_r+0x22>
 8012f14:	6818      	ldr	r0, [r3, #0]
 8012f16:	685b      	ldr	r3, [r3, #4]
 8012f18:	6053      	str	r3, [r2, #4]
 8012f1a:	4408      	add	r0, r1
 8012f1c:	6010      	str	r0, [r2, #0]
 8012f1e:	e7da      	b.n	8012ed6 <_free_r+0x22>
 8012f20:	d902      	bls.n	8012f28 <_free_r+0x74>
 8012f22:	230c      	movs	r3, #12
 8012f24:	602b      	str	r3, [r5, #0]
 8012f26:	e7d6      	b.n	8012ed6 <_free_r+0x22>
 8012f28:	6820      	ldr	r0, [r4, #0]
 8012f2a:	1821      	adds	r1, r4, r0
 8012f2c:	428b      	cmp	r3, r1
 8012f2e:	bf04      	itt	eq
 8012f30:	6819      	ldreq	r1, [r3, #0]
 8012f32:	685b      	ldreq	r3, [r3, #4]
 8012f34:	6063      	str	r3, [r4, #4]
 8012f36:	bf04      	itt	eq
 8012f38:	1809      	addeq	r1, r1, r0
 8012f3a:	6021      	streq	r1, [r4, #0]
 8012f3c:	6054      	str	r4, [r2, #4]
 8012f3e:	e7ca      	b.n	8012ed6 <_free_r+0x22>
 8012f40:	bd38      	pop	{r3, r4, r5, pc}
 8012f42:	bf00      	nop
 8012f44:	24001208 	.word	0x24001208

08012f48 <malloc>:
 8012f48:	4b02      	ldr	r3, [pc, #8]	@ (8012f54 <malloc+0xc>)
 8012f4a:	4601      	mov	r1, r0
 8012f4c:	6818      	ldr	r0, [r3, #0]
 8012f4e:	f000 b825 	b.w	8012f9c <_malloc_r>
 8012f52:	bf00      	nop
 8012f54:	24000054 	.word	0x24000054

08012f58 <sbrk_aligned>:
 8012f58:	b570      	push	{r4, r5, r6, lr}
 8012f5a:	4e0f      	ldr	r6, [pc, #60]	@ (8012f98 <sbrk_aligned+0x40>)
 8012f5c:	460c      	mov	r4, r1
 8012f5e:	6831      	ldr	r1, [r6, #0]
 8012f60:	4605      	mov	r5, r0
 8012f62:	b911      	cbnz	r1, 8012f6a <sbrk_aligned+0x12>
 8012f64:	f000 fe46 	bl	8013bf4 <_sbrk_r>
 8012f68:	6030      	str	r0, [r6, #0]
 8012f6a:	4621      	mov	r1, r4
 8012f6c:	4628      	mov	r0, r5
 8012f6e:	f000 fe41 	bl	8013bf4 <_sbrk_r>
 8012f72:	1c43      	adds	r3, r0, #1
 8012f74:	d103      	bne.n	8012f7e <sbrk_aligned+0x26>
 8012f76:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8012f7a:	4620      	mov	r0, r4
 8012f7c:	bd70      	pop	{r4, r5, r6, pc}
 8012f7e:	1cc4      	adds	r4, r0, #3
 8012f80:	f024 0403 	bic.w	r4, r4, #3
 8012f84:	42a0      	cmp	r0, r4
 8012f86:	d0f8      	beq.n	8012f7a <sbrk_aligned+0x22>
 8012f88:	1a21      	subs	r1, r4, r0
 8012f8a:	4628      	mov	r0, r5
 8012f8c:	f000 fe32 	bl	8013bf4 <_sbrk_r>
 8012f90:	3001      	adds	r0, #1
 8012f92:	d1f2      	bne.n	8012f7a <sbrk_aligned+0x22>
 8012f94:	e7ef      	b.n	8012f76 <sbrk_aligned+0x1e>
 8012f96:	bf00      	nop
 8012f98:	24001204 	.word	0x24001204

08012f9c <_malloc_r>:
 8012f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fa0:	1ccd      	adds	r5, r1, #3
 8012fa2:	f025 0503 	bic.w	r5, r5, #3
 8012fa6:	3508      	adds	r5, #8
 8012fa8:	2d0c      	cmp	r5, #12
 8012faa:	bf38      	it	cc
 8012fac:	250c      	movcc	r5, #12
 8012fae:	2d00      	cmp	r5, #0
 8012fb0:	4606      	mov	r6, r0
 8012fb2:	db01      	blt.n	8012fb8 <_malloc_r+0x1c>
 8012fb4:	42a9      	cmp	r1, r5
 8012fb6:	d904      	bls.n	8012fc2 <_malloc_r+0x26>
 8012fb8:	230c      	movs	r3, #12
 8012fba:	6033      	str	r3, [r6, #0]
 8012fbc:	2000      	movs	r0, #0
 8012fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013098 <_malloc_r+0xfc>
 8012fc6:	f000 f869 	bl	801309c <__malloc_lock>
 8012fca:	f8d8 3000 	ldr.w	r3, [r8]
 8012fce:	461c      	mov	r4, r3
 8012fd0:	bb44      	cbnz	r4, 8013024 <_malloc_r+0x88>
 8012fd2:	4629      	mov	r1, r5
 8012fd4:	4630      	mov	r0, r6
 8012fd6:	f7ff ffbf 	bl	8012f58 <sbrk_aligned>
 8012fda:	1c43      	adds	r3, r0, #1
 8012fdc:	4604      	mov	r4, r0
 8012fde:	d158      	bne.n	8013092 <_malloc_r+0xf6>
 8012fe0:	f8d8 4000 	ldr.w	r4, [r8]
 8012fe4:	4627      	mov	r7, r4
 8012fe6:	2f00      	cmp	r7, #0
 8012fe8:	d143      	bne.n	8013072 <_malloc_r+0xd6>
 8012fea:	2c00      	cmp	r4, #0
 8012fec:	d04b      	beq.n	8013086 <_malloc_r+0xea>
 8012fee:	6823      	ldr	r3, [r4, #0]
 8012ff0:	4639      	mov	r1, r7
 8012ff2:	4630      	mov	r0, r6
 8012ff4:	eb04 0903 	add.w	r9, r4, r3
 8012ff8:	f000 fdfc 	bl	8013bf4 <_sbrk_r>
 8012ffc:	4581      	cmp	r9, r0
 8012ffe:	d142      	bne.n	8013086 <_malloc_r+0xea>
 8013000:	6821      	ldr	r1, [r4, #0]
 8013002:	1a6d      	subs	r5, r5, r1
 8013004:	4629      	mov	r1, r5
 8013006:	4630      	mov	r0, r6
 8013008:	f7ff ffa6 	bl	8012f58 <sbrk_aligned>
 801300c:	3001      	adds	r0, #1
 801300e:	d03a      	beq.n	8013086 <_malloc_r+0xea>
 8013010:	6823      	ldr	r3, [r4, #0]
 8013012:	442b      	add	r3, r5
 8013014:	6023      	str	r3, [r4, #0]
 8013016:	f8d8 3000 	ldr.w	r3, [r8]
 801301a:	685a      	ldr	r2, [r3, #4]
 801301c:	bb62      	cbnz	r2, 8013078 <_malloc_r+0xdc>
 801301e:	f8c8 7000 	str.w	r7, [r8]
 8013022:	e00f      	b.n	8013044 <_malloc_r+0xa8>
 8013024:	6822      	ldr	r2, [r4, #0]
 8013026:	1b52      	subs	r2, r2, r5
 8013028:	d420      	bmi.n	801306c <_malloc_r+0xd0>
 801302a:	2a0b      	cmp	r2, #11
 801302c:	d917      	bls.n	801305e <_malloc_r+0xc2>
 801302e:	1961      	adds	r1, r4, r5
 8013030:	42a3      	cmp	r3, r4
 8013032:	6025      	str	r5, [r4, #0]
 8013034:	bf18      	it	ne
 8013036:	6059      	strne	r1, [r3, #4]
 8013038:	6863      	ldr	r3, [r4, #4]
 801303a:	bf08      	it	eq
 801303c:	f8c8 1000 	streq.w	r1, [r8]
 8013040:	5162      	str	r2, [r4, r5]
 8013042:	604b      	str	r3, [r1, #4]
 8013044:	4630      	mov	r0, r6
 8013046:	f000 f82f 	bl	80130a8 <__malloc_unlock>
 801304a:	f104 000b 	add.w	r0, r4, #11
 801304e:	1d23      	adds	r3, r4, #4
 8013050:	f020 0007 	bic.w	r0, r0, #7
 8013054:	1ac2      	subs	r2, r0, r3
 8013056:	bf1c      	itt	ne
 8013058:	1a1b      	subne	r3, r3, r0
 801305a:	50a3      	strne	r3, [r4, r2]
 801305c:	e7af      	b.n	8012fbe <_malloc_r+0x22>
 801305e:	6862      	ldr	r2, [r4, #4]
 8013060:	42a3      	cmp	r3, r4
 8013062:	bf0c      	ite	eq
 8013064:	f8c8 2000 	streq.w	r2, [r8]
 8013068:	605a      	strne	r2, [r3, #4]
 801306a:	e7eb      	b.n	8013044 <_malloc_r+0xa8>
 801306c:	4623      	mov	r3, r4
 801306e:	6864      	ldr	r4, [r4, #4]
 8013070:	e7ae      	b.n	8012fd0 <_malloc_r+0x34>
 8013072:	463c      	mov	r4, r7
 8013074:	687f      	ldr	r7, [r7, #4]
 8013076:	e7b6      	b.n	8012fe6 <_malloc_r+0x4a>
 8013078:	461a      	mov	r2, r3
 801307a:	685b      	ldr	r3, [r3, #4]
 801307c:	42a3      	cmp	r3, r4
 801307e:	d1fb      	bne.n	8013078 <_malloc_r+0xdc>
 8013080:	2300      	movs	r3, #0
 8013082:	6053      	str	r3, [r2, #4]
 8013084:	e7de      	b.n	8013044 <_malloc_r+0xa8>
 8013086:	230c      	movs	r3, #12
 8013088:	6033      	str	r3, [r6, #0]
 801308a:	4630      	mov	r0, r6
 801308c:	f000 f80c 	bl	80130a8 <__malloc_unlock>
 8013090:	e794      	b.n	8012fbc <_malloc_r+0x20>
 8013092:	6005      	str	r5, [r0, #0]
 8013094:	e7d6      	b.n	8013044 <_malloc_r+0xa8>
 8013096:	bf00      	nop
 8013098:	24001208 	.word	0x24001208

0801309c <__malloc_lock>:
 801309c:	4801      	ldr	r0, [pc, #4]	@ (80130a4 <__malloc_lock+0x8>)
 801309e:	f7ff b920 	b.w	80122e2 <__retarget_lock_acquire_recursive>
 80130a2:	bf00      	nop
 80130a4:	24001200 	.word	0x24001200

080130a8 <__malloc_unlock>:
 80130a8:	4801      	ldr	r0, [pc, #4]	@ (80130b0 <__malloc_unlock+0x8>)
 80130aa:	f7ff b91b 	b.w	80122e4 <__retarget_lock_release_recursive>
 80130ae:	bf00      	nop
 80130b0:	24001200 	.word	0x24001200

080130b4 <_Balloc>:
 80130b4:	b570      	push	{r4, r5, r6, lr}
 80130b6:	69c6      	ldr	r6, [r0, #28]
 80130b8:	4604      	mov	r4, r0
 80130ba:	460d      	mov	r5, r1
 80130bc:	b976      	cbnz	r6, 80130dc <_Balloc+0x28>
 80130be:	2010      	movs	r0, #16
 80130c0:	f7ff ff42 	bl	8012f48 <malloc>
 80130c4:	4602      	mov	r2, r0
 80130c6:	61e0      	str	r0, [r4, #28]
 80130c8:	b920      	cbnz	r0, 80130d4 <_Balloc+0x20>
 80130ca:	4b18      	ldr	r3, [pc, #96]	@ (801312c <_Balloc+0x78>)
 80130cc:	4818      	ldr	r0, [pc, #96]	@ (8013130 <_Balloc+0x7c>)
 80130ce:	216b      	movs	r1, #107	@ 0x6b
 80130d0:	f000 fdae 	bl	8013c30 <__assert_func>
 80130d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80130d8:	6006      	str	r6, [r0, #0]
 80130da:	60c6      	str	r6, [r0, #12]
 80130dc:	69e6      	ldr	r6, [r4, #28]
 80130de:	68f3      	ldr	r3, [r6, #12]
 80130e0:	b183      	cbz	r3, 8013104 <_Balloc+0x50>
 80130e2:	69e3      	ldr	r3, [r4, #28]
 80130e4:	68db      	ldr	r3, [r3, #12]
 80130e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80130ea:	b9b8      	cbnz	r0, 801311c <_Balloc+0x68>
 80130ec:	2101      	movs	r1, #1
 80130ee:	fa01 f605 	lsl.w	r6, r1, r5
 80130f2:	1d72      	adds	r2, r6, #5
 80130f4:	0092      	lsls	r2, r2, #2
 80130f6:	4620      	mov	r0, r4
 80130f8:	f000 fdb8 	bl	8013c6c <_calloc_r>
 80130fc:	b160      	cbz	r0, 8013118 <_Balloc+0x64>
 80130fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013102:	e00e      	b.n	8013122 <_Balloc+0x6e>
 8013104:	2221      	movs	r2, #33	@ 0x21
 8013106:	2104      	movs	r1, #4
 8013108:	4620      	mov	r0, r4
 801310a:	f000 fdaf 	bl	8013c6c <_calloc_r>
 801310e:	69e3      	ldr	r3, [r4, #28]
 8013110:	60f0      	str	r0, [r6, #12]
 8013112:	68db      	ldr	r3, [r3, #12]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d1e4      	bne.n	80130e2 <_Balloc+0x2e>
 8013118:	2000      	movs	r0, #0
 801311a:	bd70      	pop	{r4, r5, r6, pc}
 801311c:	6802      	ldr	r2, [r0, #0]
 801311e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013122:	2300      	movs	r3, #0
 8013124:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013128:	e7f7      	b.n	801311a <_Balloc+0x66>
 801312a:	bf00      	nop
 801312c:	08014db3 	.word	0x08014db3
 8013130:	08014e33 	.word	0x08014e33

08013134 <_Bfree>:
 8013134:	b570      	push	{r4, r5, r6, lr}
 8013136:	69c6      	ldr	r6, [r0, #28]
 8013138:	4605      	mov	r5, r0
 801313a:	460c      	mov	r4, r1
 801313c:	b976      	cbnz	r6, 801315c <_Bfree+0x28>
 801313e:	2010      	movs	r0, #16
 8013140:	f7ff ff02 	bl	8012f48 <malloc>
 8013144:	4602      	mov	r2, r0
 8013146:	61e8      	str	r0, [r5, #28]
 8013148:	b920      	cbnz	r0, 8013154 <_Bfree+0x20>
 801314a:	4b09      	ldr	r3, [pc, #36]	@ (8013170 <_Bfree+0x3c>)
 801314c:	4809      	ldr	r0, [pc, #36]	@ (8013174 <_Bfree+0x40>)
 801314e:	218f      	movs	r1, #143	@ 0x8f
 8013150:	f000 fd6e 	bl	8013c30 <__assert_func>
 8013154:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013158:	6006      	str	r6, [r0, #0]
 801315a:	60c6      	str	r6, [r0, #12]
 801315c:	b13c      	cbz	r4, 801316e <_Bfree+0x3a>
 801315e:	69eb      	ldr	r3, [r5, #28]
 8013160:	6862      	ldr	r2, [r4, #4]
 8013162:	68db      	ldr	r3, [r3, #12]
 8013164:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013168:	6021      	str	r1, [r4, #0]
 801316a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801316e:	bd70      	pop	{r4, r5, r6, pc}
 8013170:	08014db3 	.word	0x08014db3
 8013174:	08014e33 	.word	0x08014e33

08013178 <__multadd>:
 8013178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801317c:	690d      	ldr	r5, [r1, #16]
 801317e:	4607      	mov	r7, r0
 8013180:	460c      	mov	r4, r1
 8013182:	461e      	mov	r6, r3
 8013184:	f101 0c14 	add.w	ip, r1, #20
 8013188:	2000      	movs	r0, #0
 801318a:	f8dc 3000 	ldr.w	r3, [ip]
 801318e:	b299      	uxth	r1, r3
 8013190:	fb02 6101 	mla	r1, r2, r1, r6
 8013194:	0c1e      	lsrs	r6, r3, #16
 8013196:	0c0b      	lsrs	r3, r1, #16
 8013198:	fb02 3306 	mla	r3, r2, r6, r3
 801319c:	b289      	uxth	r1, r1
 801319e:	3001      	adds	r0, #1
 80131a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80131a4:	4285      	cmp	r5, r0
 80131a6:	f84c 1b04 	str.w	r1, [ip], #4
 80131aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80131ae:	dcec      	bgt.n	801318a <__multadd+0x12>
 80131b0:	b30e      	cbz	r6, 80131f6 <__multadd+0x7e>
 80131b2:	68a3      	ldr	r3, [r4, #8]
 80131b4:	42ab      	cmp	r3, r5
 80131b6:	dc19      	bgt.n	80131ec <__multadd+0x74>
 80131b8:	6861      	ldr	r1, [r4, #4]
 80131ba:	4638      	mov	r0, r7
 80131bc:	3101      	adds	r1, #1
 80131be:	f7ff ff79 	bl	80130b4 <_Balloc>
 80131c2:	4680      	mov	r8, r0
 80131c4:	b928      	cbnz	r0, 80131d2 <__multadd+0x5a>
 80131c6:	4602      	mov	r2, r0
 80131c8:	4b0c      	ldr	r3, [pc, #48]	@ (80131fc <__multadd+0x84>)
 80131ca:	480d      	ldr	r0, [pc, #52]	@ (8013200 <__multadd+0x88>)
 80131cc:	21ba      	movs	r1, #186	@ 0xba
 80131ce:	f000 fd2f 	bl	8013c30 <__assert_func>
 80131d2:	6922      	ldr	r2, [r4, #16]
 80131d4:	3202      	adds	r2, #2
 80131d6:	f104 010c 	add.w	r1, r4, #12
 80131da:	0092      	lsls	r2, r2, #2
 80131dc:	300c      	adds	r0, #12
 80131de:	f000 fd19 	bl	8013c14 <memcpy>
 80131e2:	4621      	mov	r1, r4
 80131e4:	4638      	mov	r0, r7
 80131e6:	f7ff ffa5 	bl	8013134 <_Bfree>
 80131ea:	4644      	mov	r4, r8
 80131ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80131f0:	3501      	adds	r5, #1
 80131f2:	615e      	str	r6, [r3, #20]
 80131f4:	6125      	str	r5, [r4, #16]
 80131f6:	4620      	mov	r0, r4
 80131f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131fc:	08014e22 	.word	0x08014e22
 8013200:	08014e33 	.word	0x08014e33

08013204 <__hi0bits>:
 8013204:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013208:	4603      	mov	r3, r0
 801320a:	bf36      	itet	cc
 801320c:	0403      	lslcc	r3, r0, #16
 801320e:	2000      	movcs	r0, #0
 8013210:	2010      	movcc	r0, #16
 8013212:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013216:	bf3c      	itt	cc
 8013218:	021b      	lslcc	r3, r3, #8
 801321a:	3008      	addcc	r0, #8
 801321c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013220:	bf3c      	itt	cc
 8013222:	011b      	lslcc	r3, r3, #4
 8013224:	3004      	addcc	r0, #4
 8013226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801322a:	bf3c      	itt	cc
 801322c:	009b      	lslcc	r3, r3, #2
 801322e:	3002      	addcc	r0, #2
 8013230:	2b00      	cmp	r3, #0
 8013232:	db05      	blt.n	8013240 <__hi0bits+0x3c>
 8013234:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013238:	f100 0001 	add.w	r0, r0, #1
 801323c:	bf08      	it	eq
 801323e:	2020      	moveq	r0, #32
 8013240:	4770      	bx	lr

08013242 <__lo0bits>:
 8013242:	6803      	ldr	r3, [r0, #0]
 8013244:	4602      	mov	r2, r0
 8013246:	f013 0007 	ands.w	r0, r3, #7
 801324a:	d00b      	beq.n	8013264 <__lo0bits+0x22>
 801324c:	07d9      	lsls	r1, r3, #31
 801324e:	d421      	bmi.n	8013294 <__lo0bits+0x52>
 8013250:	0798      	lsls	r0, r3, #30
 8013252:	bf49      	itett	mi
 8013254:	085b      	lsrmi	r3, r3, #1
 8013256:	089b      	lsrpl	r3, r3, #2
 8013258:	2001      	movmi	r0, #1
 801325a:	6013      	strmi	r3, [r2, #0]
 801325c:	bf5c      	itt	pl
 801325e:	6013      	strpl	r3, [r2, #0]
 8013260:	2002      	movpl	r0, #2
 8013262:	4770      	bx	lr
 8013264:	b299      	uxth	r1, r3
 8013266:	b909      	cbnz	r1, 801326c <__lo0bits+0x2a>
 8013268:	0c1b      	lsrs	r3, r3, #16
 801326a:	2010      	movs	r0, #16
 801326c:	b2d9      	uxtb	r1, r3
 801326e:	b909      	cbnz	r1, 8013274 <__lo0bits+0x32>
 8013270:	3008      	adds	r0, #8
 8013272:	0a1b      	lsrs	r3, r3, #8
 8013274:	0719      	lsls	r1, r3, #28
 8013276:	bf04      	itt	eq
 8013278:	091b      	lsreq	r3, r3, #4
 801327a:	3004      	addeq	r0, #4
 801327c:	0799      	lsls	r1, r3, #30
 801327e:	bf04      	itt	eq
 8013280:	089b      	lsreq	r3, r3, #2
 8013282:	3002      	addeq	r0, #2
 8013284:	07d9      	lsls	r1, r3, #31
 8013286:	d403      	bmi.n	8013290 <__lo0bits+0x4e>
 8013288:	085b      	lsrs	r3, r3, #1
 801328a:	f100 0001 	add.w	r0, r0, #1
 801328e:	d003      	beq.n	8013298 <__lo0bits+0x56>
 8013290:	6013      	str	r3, [r2, #0]
 8013292:	4770      	bx	lr
 8013294:	2000      	movs	r0, #0
 8013296:	4770      	bx	lr
 8013298:	2020      	movs	r0, #32
 801329a:	4770      	bx	lr

0801329c <__i2b>:
 801329c:	b510      	push	{r4, lr}
 801329e:	460c      	mov	r4, r1
 80132a0:	2101      	movs	r1, #1
 80132a2:	f7ff ff07 	bl	80130b4 <_Balloc>
 80132a6:	4602      	mov	r2, r0
 80132a8:	b928      	cbnz	r0, 80132b6 <__i2b+0x1a>
 80132aa:	4b05      	ldr	r3, [pc, #20]	@ (80132c0 <__i2b+0x24>)
 80132ac:	4805      	ldr	r0, [pc, #20]	@ (80132c4 <__i2b+0x28>)
 80132ae:	f240 1145 	movw	r1, #325	@ 0x145
 80132b2:	f000 fcbd 	bl	8013c30 <__assert_func>
 80132b6:	2301      	movs	r3, #1
 80132b8:	6144      	str	r4, [r0, #20]
 80132ba:	6103      	str	r3, [r0, #16]
 80132bc:	bd10      	pop	{r4, pc}
 80132be:	bf00      	nop
 80132c0:	08014e22 	.word	0x08014e22
 80132c4:	08014e33 	.word	0x08014e33

080132c8 <__multiply>:
 80132c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132cc:	4614      	mov	r4, r2
 80132ce:	690a      	ldr	r2, [r1, #16]
 80132d0:	6923      	ldr	r3, [r4, #16]
 80132d2:	429a      	cmp	r2, r3
 80132d4:	bfa8      	it	ge
 80132d6:	4623      	movge	r3, r4
 80132d8:	460f      	mov	r7, r1
 80132da:	bfa4      	itt	ge
 80132dc:	460c      	movge	r4, r1
 80132de:	461f      	movge	r7, r3
 80132e0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80132e4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80132e8:	68a3      	ldr	r3, [r4, #8]
 80132ea:	6861      	ldr	r1, [r4, #4]
 80132ec:	eb0a 0609 	add.w	r6, sl, r9
 80132f0:	42b3      	cmp	r3, r6
 80132f2:	b085      	sub	sp, #20
 80132f4:	bfb8      	it	lt
 80132f6:	3101      	addlt	r1, #1
 80132f8:	f7ff fedc 	bl	80130b4 <_Balloc>
 80132fc:	b930      	cbnz	r0, 801330c <__multiply+0x44>
 80132fe:	4602      	mov	r2, r0
 8013300:	4b44      	ldr	r3, [pc, #272]	@ (8013414 <__multiply+0x14c>)
 8013302:	4845      	ldr	r0, [pc, #276]	@ (8013418 <__multiply+0x150>)
 8013304:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013308:	f000 fc92 	bl	8013c30 <__assert_func>
 801330c:	f100 0514 	add.w	r5, r0, #20
 8013310:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013314:	462b      	mov	r3, r5
 8013316:	2200      	movs	r2, #0
 8013318:	4543      	cmp	r3, r8
 801331a:	d321      	bcc.n	8013360 <__multiply+0x98>
 801331c:	f107 0114 	add.w	r1, r7, #20
 8013320:	f104 0214 	add.w	r2, r4, #20
 8013324:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013328:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801332c:	9302      	str	r3, [sp, #8]
 801332e:	1b13      	subs	r3, r2, r4
 8013330:	3b15      	subs	r3, #21
 8013332:	f023 0303 	bic.w	r3, r3, #3
 8013336:	3304      	adds	r3, #4
 8013338:	f104 0715 	add.w	r7, r4, #21
 801333c:	42ba      	cmp	r2, r7
 801333e:	bf38      	it	cc
 8013340:	2304      	movcc	r3, #4
 8013342:	9301      	str	r3, [sp, #4]
 8013344:	9b02      	ldr	r3, [sp, #8]
 8013346:	9103      	str	r1, [sp, #12]
 8013348:	428b      	cmp	r3, r1
 801334a:	d80c      	bhi.n	8013366 <__multiply+0x9e>
 801334c:	2e00      	cmp	r6, #0
 801334e:	dd03      	ble.n	8013358 <__multiply+0x90>
 8013350:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013354:	2b00      	cmp	r3, #0
 8013356:	d05b      	beq.n	8013410 <__multiply+0x148>
 8013358:	6106      	str	r6, [r0, #16]
 801335a:	b005      	add	sp, #20
 801335c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013360:	f843 2b04 	str.w	r2, [r3], #4
 8013364:	e7d8      	b.n	8013318 <__multiply+0x50>
 8013366:	f8b1 a000 	ldrh.w	sl, [r1]
 801336a:	f1ba 0f00 	cmp.w	sl, #0
 801336e:	d024      	beq.n	80133ba <__multiply+0xf2>
 8013370:	f104 0e14 	add.w	lr, r4, #20
 8013374:	46a9      	mov	r9, r5
 8013376:	f04f 0c00 	mov.w	ip, #0
 801337a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801337e:	f8d9 3000 	ldr.w	r3, [r9]
 8013382:	fa1f fb87 	uxth.w	fp, r7
 8013386:	b29b      	uxth	r3, r3
 8013388:	fb0a 330b 	mla	r3, sl, fp, r3
 801338c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013390:	f8d9 7000 	ldr.w	r7, [r9]
 8013394:	4463      	add	r3, ip
 8013396:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801339a:	fb0a c70b 	mla	r7, sl, fp, ip
 801339e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80133a2:	b29b      	uxth	r3, r3
 80133a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80133a8:	4572      	cmp	r2, lr
 80133aa:	f849 3b04 	str.w	r3, [r9], #4
 80133ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80133b2:	d8e2      	bhi.n	801337a <__multiply+0xb2>
 80133b4:	9b01      	ldr	r3, [sp, #4]
 80133b6:	f845 c003 	str.w	ip, [r5, r3]
 80133ba:	9b03      	ldr	r3, [sp, #12]
 80133bc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80133c0:	3104      	adds	r1, #4
 80133c2:	f1b9 0f00 	cmp.w	r9, #0
 80133c6:	d021      	beq.n	801340c <__multiply+0x144>
 80133c8:	682b      	ldr	r3, [r5, #0]
 80133ca:	f104 0c14 	add.w	ip, r4, #20
 80133ce:	46ae      	mov	lr, r5
 80133d0:	f04f 0a00 	mov.w	sl, #0
 80133d4:	f8bc b000 	ldrh.w	fp, [ip]
 80133d8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80133dc:	fb09 770b 	mla	r7, r9, fp, r7
 80133e0:	4457      	add	r7, sl
 80133e2:	b29b      	uxth	r3, r3
 80133e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80133e8:	f84e 3b04 	str.w	r3, [lr], #4
 80133ec:	f85c 3b04 	ldr.w	r3, [ip], #4
 80133f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80133f4:	f8be 3000 	ldrh.w	r3, [lr]
 80133f8:	fb09 330a 	mla	r3, r9, sl, r3
 80133fc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013400:	4562      	cmp	r2, ip
 8013402:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013406:	d8e5      	bhi.n	80133d4 <__multiply+0x10c>
 8013408:	9f01      	ldr	r7, [sp, #4]
 801340a:	51eb      	str	r3, [r5, r7]
 801340c:	3504      	adds	r5, #4
 801340e:	e799      	b.n	8013344 <__multiply+0x7c>
 8013410:	3e01      	subs	r6, #1
 8013412:	e79b      	b.n	801334c <__multiply+0x84>
 8013414:	08014e22 	.word	0x08014e22
 8013418:	08014e33 	.word	0x08014e33

0801341c <__pow5mult>:
 801341c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013420:	4615      	mov	r5, r2
 8013422:	f012 0203 	ands.w	r2, r2, #3
 8013426:	4607      	mov	r7, r0
 8013428:	460e      	mov	r6, r1
 801342a:	d007      	beq.n	801343c <__pow5mult+0x20>
 801342c:	4c25      	ldr	r4, [pc, #148]	@ (80134c4 <__pow5mult+0xa8>)
 801342e:	3a01      	subs	r2, #1
 8013430:	2300      	movs	r3, #0
 8013432:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013436:	f7ff fe9f 	bl	8013178 <__multadd>
 801343a:	4606      	mov	r6, r0
 801343c:	10ad      	asrs	r5, r5, #2
 801343e:	d03d      	beq.n	80134bc <__pow5mult+0xa0>
 8013440:	69fc      	ldr	r4, [r7, #28]
 8013442:	b97c      	cbnz	r4, 8013464 <__pow5mult+0x48>
 8013444:	2010      	movs	r0, #16
 8013446:	f7ff fd7f 	bl	8012f48 <malloc>
 801344a:	4602      	mov	r2, r0
 801344c:	61f8      	str	r0, [r7, #28]
 801344e:	b928      	cbnz	r0, 801345c <__pow5mult+0x40>
 8013450:	4b1d      	ldr	r3, [pc, #116]	@ (80134c8 <__pow5mult+0xac>)
 8013452:	481e      	ldr	r0, [pc, #120]	@ (80134cc <__pow5mult+0xb0>)
 8013454:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013458:	f000 fbea 	bl	8013c30 <__assert_func>
 801345c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013460:	6004      	str	r4, [r0, #0]
 8013462:	60c4      	str	r4, [r0, #12]
 8013464:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013468:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801346c:	b94c      	cbnz	r4, 8013482 <__pow5mult+0x66>
 801346e:	f240 2171 	movw	r1, #625	@ 0x271
 8013472:	4638      	mov	r0, r7
 8013474:	f7ff ff12 	bl	801329c <__i2b>
 8013478:	2300      	movs	r3, #0
 801347a:	f8c8 0008 	str.w	r0, [r8, #8]
 801347e:	4604      	mov	r4, r0
 8013480:	6003      	str	r3, [r0, #0]
 8013482:	f04f 0900 	mov.w	r9, #0
 8013486:	07eb      	lsls	r3, r5, #31
 8013488:	d50a      	bpl.n	80134a0 <__pow5mult+0x84>
 801348a:	4631      	mov	r1, r6
 801348c:	4622      	mov	r2, r4
 801348e:	4638      	mov	r0, r7
 8013490:	f7ff ff1a 	bl	80132c8 <__multiply>
 8013494:	4631      	mov	r1, r6
 8013496:	4680      	mov	r8, r0
 8013498:	4638      	mov	r0, r7
 801349a:	f7ff fe4b 	bl	8013134 <_Bfree>
 801349e:	4646      	mov	r6, r8
 80134a0:	106d      	asrs	r5, r5, #1
 80134a2:	d00b      	beq.n	80134bc <__pow5mult+0xa0>
 80134a4:	6820      	ldr	r0, [r4, #0]
 80134a6:	b938      	cbnz	r0, 80134b8 <__pow5mult+0x9c>
 80134a8:	4622      	mov	r2, r4
 80134aa:	4621      	mov	r1, r4
 80134ac:	4638      	mov	r0, r7
 80134ae:	f7ff ff0b 	bl	80132c8 <__multiply>
 80134b2:	6020      	str	r0, [r4, #0]
 80134b4:	f8c0 9000 	str.w	r9, [r0]
 80134b8:	4604      	mov	r4, r0
 80134ba:	e7e4      	b.n	8013486 <__pow5mult+0x6a>
 80134bc:	4630      	mov	r0, r6
 80134be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134c2:	bf00      	nop
 80134c4:	08014e8c 	.word	0x08014e8c
 80134c8:	08014db3 	.word	0x08014db3
 80134cc:	08014e33 	.word	0x08014e33

080134d0 <__lshift>:
 80134d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80134d4:	460c      	mov	r4, r1
 80134d6:	6849      	ldr	r1, [r1, #4]
 80134d8:	6923      	ldr	r3, [r4, #16]
 80134da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80134de:	68a3      	ldr	r3, [r4, #8]
 80134e0:	4607      	mov	r7, r0
 80134e2:	4691      	mov	r9, r2
 80134e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80134e8:	f108 0601 	add.w	r6, r8, #1
 80134ec:	42b3      	cmp	r3, r6
 80134ee:	db0b      	blt.n	8013508 <__lshift+0x38>
 80134f0:	4638      	mov	r0, r7
 80134f2:	f7ff fddf 	bl	80130b4 <_Balloc>
 80134f6:	4605      	mov	r5, r0
 80134f8:	b948      	cbnz	r0, 801350e <__lshift+0x3e>
 80134fa:	4602      	mov	r2, r0
 80134fc:	4b28      	ldr	r3, [pc, #160]	@ (80135a0 <__lshift+0xd0>)
 80134fe:	4829      	ldr	r0, [pc, #164]	@ (80135a4 <__lshift+0xd4>)
 8013500:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013504:	f000 fb94 	bl	8013c30 <__assert_func>
 8013508:	3101      	adds	r1, #1
 801350a:	005b      	lsls	r3, r3, #1
 801350c:	e7ee      	b.n	80134ec <__lshift+0x1c>
 801350e:	2300      	movs	r3, #0
 8013510:	f100 0114 	add.w	r1, r0, #20
 8013514:	f100 0210 	add.w	r2, r0, #16
 8013518:	4618      	mov	r0, r3
 801351a:	4553      	cmp	r3, sl
 801351c:	db33      	blt.n	8013586 <__lshift+0xb6>
 801351e:	6920      	ldr	r0, [r4, #16]
 8013520:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013524:	f104 0314 	add.w	r3, r4, #20
 8013528:	f019 091f 	ands.w	r9, r9, #31
 801352c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013530:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013534:	d02b      	beq.n	801358e <__lshift+0xbe>
 8013536:	f1c9 0e20 	rsb	lr, r9, #32
 801353a:	468a      	mov	sl, r1
 801353c:	2200      	movs	r2, #0
 801353e:	6818      	ldr	r0, [r3, #0]
 8013540:	fa00 f009 	lsl.w	r0, r0, r9
 8013544:	4310      	orrs	r0, r2
 8013546:	f84a 0b04 	str.w	r0, [sl], #4
 801354a:	f853 2b04 	ldr.w	r2, [r3], #4
 801354e:	459c      	cmp	ip, r3
 8013550:	fa22 f20e 	lsr.w	r2, r2, lr
 8013554:	d8f3      	bhi.n	801353e <__lshift+0x6e>
 8013556:	ebac 0304 	sub.w	r3, ip, r4
 801355a:	3b15      	subs	r3, #21
 801355c:	f023 0303 	bic.w	r3, r3, #3
 8013560:	3304      	adds	r3, #4
 8013562:	f104 0015 	add.w	r0, r4, #21
 8013566:	4584      	cmp	ip, r0
 8013568:	bf38      	it	cc
 801356a:	2304      	movcc	r3, #4
 801356c:	50ca      	str	r2, [r1, r3]
 801356e:	b10a      	cbz	r2, 8013574 <__lshift+0xa4>
 8013570:	f108 0602 	add.w	r6, r8, #2
 8013574:	3e01      	subs	r6, #1
 8013576:	4638      	mov	r0, r7
 8013578:	612e      	str	r6, [r5, #16]
 801357a:	4621      	mov	r1, r4
 801357c:	f7ff fdda 	bl	8013134 <_Bfree>
 8013580:	4628      	mov	r0, r5
 8013582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013586:	f842 0f04 	str.w	r0, [r2, #4]!
 801358a:	3301      	adds	r3, #1
 801358c:	e7c5      	b.n	801351a <__lshift+0x4a>
 801358e:	3904      	subs	r1, #4
 8013590:	f853 2b04 	ldr.w	r2, [r3], #4
 8013594:	f841 2f04 	str.w	r2, [r1, #4]!
 8013598:	459c      	cmp	ip, r3
 801359a:	d8f9      	bhi.n	8013590 <__lshift+0xc0>
 801359c:	e7ea      	b.n	8013574 <__lshift+0xa4>
 801359e:	bf00      	nop
 80135a0:	08014e22 	.word	0x08014e22
 80135a4:	08014e33 	.word	0x08014e33

080135a8 <__mcmp>:
 80135a8:	690a      	ldr	r2, [r1, #16]
 80135aa:	4603      	mov	r3, r0
 80135ac:	6900      	ldr	r0, [r0, #16]
 80135ae:	1a80      	subs	r0, r0, r2
 80135b0:	b530      	push	{r4, r5, lr}
 80135b2:	d10e      	bne.n	80135d2 <__mcmp+0x2a>
 80135b4:	3314      	adds	r3, #20
 80135b6:	3114      	adds	r1, #20
 80135b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80135bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80135c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80135c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80135c8:	4295      	cmp	r5, r2
 80135ca:	d003      	beq.n	80135d4 <__mcmp+0x2c>
 80135cc:	d205      	bcs.n	80135da <__mcmp+0x32>
 80135ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80135d2:	bd30      	pop	{r4, r5, pc}
 80135d4:	42a3      	cmp	r3, r4
 80135d6:	d3f3      	bcc.n	80135c0 <__mcmp+0x18>
 80135d8:	e7fb      	b.n	80135d2 <__mcmp+0x2a>
 80135da:	2001      	movs	r0, #1
 80135dc:	e7f9      	b.n	80135d2 <__mcmp+0x2a>
	...

080135e0 <__mdiff>:
 80135e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135e4:	4689      	mov	r9, r1
 80135e6:	4606      	mov	r6, r0
 80135e8:	4611      	mov	r1, r2
 80135ea:	4648      	mov	r0, r9
 80135ec:	4614      	mov	r4, r2
 80135ee:	f7ff ffdb 	bl	80135a8 <__mcmp>
 80135f2:	1e05      	subs	r5, r0, #0
 80135f4:	d112      	bne.n	801361c <__mdiff+0x3c>
 80135f6:	4629      	mov	r1, r5
 80135f8:	4630      	mov	r0, r6
 80135fa:	f7ff fd5b 	bl	80130b4 <_Balloc>
 80135fe:	4602      	mov	r2, r0
 8013600:	b928      	cbnz	r0, 801360e <__mdiff+0x2e>
 8013602:	4b3f      	ldr	r3, [pc, #252]	@ (8013700 <__mdiff+0x120>)
 8013604:	f240 2137 	movw	r1, #567	@ 0x237
 8013608:	483e      	ldr	r0, [pc, #248]	@ (8013704 <__mdiff+0x124>)
 801360a:	f000 fb11 	bl	8013c30 <__assert_func>
 801360e:	2301      	movs	r3, #1
 8013610:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013614:	4610      	mov	r0, r2
 8013616:	b003      	add	sp, #12
 8013618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801361c:	bfbc      	itt	lt
 801361e:	464b      	movlt	r3, r9
 8013620:	46a1      	movlt	r9, r4
 8013622:	4630      	mov	r0, r6
 8013624:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013628:	bfba      	itte	lt
 801362a:	461c      	movlt	r4, r3
 801362c:	2501      	movlt	r5, #1
 801362e:	2500      	movge	r5, #0
 8013630:	f7ff fd40 	bl	80130b4 <_Balloc>
 8013634:	4602      	mov	r2, r0
 8013636:	b918      	cbnz	r0, 8013640 <__mdiff+0x60>
 8013638:	4b31      	ldr	r3, [pc, #196]	@ (8013700 <__mdiff+0x120>)
 801363a:	f240 2145 	movw	r1, #581	@ 0x245
 801363e:	e7e3      	b.n	8013608 <__mdiff+0x28>
 8013640:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013644:	6926      	ldr	r6, [r4, #16]
 8013646:	60c5      	str	r5, [r0, #12]
 8013648:	f109 0310 	add.w	r3, r9, #16
 801364c:	f109 0514 	add.w	r5, r9, #20
 8013650:	f104 0e14 	add.w	lr, r4, #20
 8013654:	f100 0b14 	add.w	fp, r0, #20
 8013658:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801365c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013660:	9301      	str	r3, [sp, #4]
 8013662:	46d9      	mov	r9, fp
 8013664:	f04f 0c00 	mov.w	ip, #0
 8013668:	9b01      	ldr	r3, [sp, #4]
 801366a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801366e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013672:	9301      	str	r3, [sp, #4]
 8013674:	fa1f f38a 	uxth.w	r3, sl
 8013678:	4619      	mov	r1, r3
 801367a:	b283      	uxth	r3, r0
 801367c:	1acb      	subs	r3, r1, r3
 801367e:	0c00      	lsrs	r0, r0, #16
 8013680:	4463      	add	r3, ip
 8013682:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013686:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801368a:	b29b      	uxth	r3, r3
 801368c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013690:	4576      	cmp	r6, lr
 8013692:	f849 3b04 	str.w	r3, [r9], #4
 8013696:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801369a:	d8e5      	bhi.n	8013668 <__mdiff+0x88>
 801369c:	1b33      	subs	r3, r6, r4
 801369e:	3b15      	subs	r3, #21
 80136a0:	f023 0303 	bic.w	r3, r3, #3
 80136a4:	3415      	adds	r4, #21
 80136a6:	3304      	adds	r3, #4
 80136a8:	42a6      	cmp	r6, r4
 80136aa:	bf38      	it	cc
 80136ac:	2304      	movcc	r3, #4
 80136ae:	441d      	add	r5, r3
 80136b0:	445b      	add	r3, fp
 80136b2:	461e      	mov	r6, r3
 80136b4:	462c      	mov	r4, r5
 80136b6:	4544      	cmp	r4, r8
 80136b8:	d30e      	bcc.n	80136d8 <__mdiff+0xf8>
 80136ba:	f108 0103 	add.w	r1, r8, #3
 80136be:	1b49      	subs	r1, r1, r5
 80136c0:	f021 0103 	bic.w	r1, r1, #3
 80136c4:	3d03      	subs	r5, #3
 80136c6:	45a8      	cmp	r8, r5
 80136c8:	bf38      	it	cc
 80136ca:	2100      	movcc	r1, #0
 80136cc:	440b      	add	r3, r1
 80136ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80136d2:	b191      	cbz	r1, 80136fa <__mdiff+0x11a>
 80136d4:	6117      	str	r7, [r2, #16]
 80136d6:	e79d      	b.n	8013614 <__mdiff+0x34>
 80136d8:	f854 1b04 	ldr.w	r1, [r4], #4
 80136dc:	46e6      	mov	lr, ip
 80136de:	0c08      	lsrs	r0, r1, #16
 80136e0:	fa1c fc81 	uxtah	ip, ip, r1
 80136e4:	4471      	add	r1, lr
 80136e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80136ea:	b289      	uxth	r1, r1
 80136ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80136f0:	f846 1b04 	str.w	r1, [r6], #4
 80136f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80136f8:	e7dd      	b.n	80136b6 <__mdiff+0xd6>
 80136fa:	3f01      	subs	r7, #1
 80136fc:	e7e7      	b.n	80136ce <__mdiff+0xee>
 80136fe:	bf00      	nop
 8013700:	08014e22 	.word	0x08014e22
 8013704:	08014e33 	.word	0x08014e33

08013708 <__d2b>:
 8013708:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801370c:	460f      	mov	r7, r1
 801370e:	2101      	movs	r1, #1
 8013710:	ec59 8b10 	vmov	r8, r9, d0
 8013714:	4616      	mov	r6, r2
 8013716:	f7ff fccd 	bl	80130b4 <_Balloc>
 801371a:	4604      	mov	r4, r0
 801371c:	b930      	cbnz	r0, 801372c <__d2b+0x24>
 801371e:	4602      	mov	r2, r0
 8013720:	4b23      	ldr	r3, [pc, #140]	@ (80137b0 <__d2b+0xa8>)
 8013722:	4824      	ldr	r0, [pc, #144]	@ (80137b4 <__d2b+0xac>)
 8013724:	f240 310f 	movw	r1, #783	@ 0x30f
 8013728:	f000 fa82 	bl	8013c30 <__assert_func>
 801372c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013730:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013734:	b10d      	cbz	r5, 801373a <__d2b+0x32>
 8013736:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801373a:	9301      	str	r3, [sp, #4]
 801373c:	f1b8 0300 	subs.w	r3, r8, #0
 8013740:	d023      	beq.n	801378a <__d2b+0x82>
 8013742:	4668      	mov	r0, sp
 8013744:	9300      	str	r3, [sp, #0]
 8013746:	f7ff fd7c 	bl	8013242 <__lo0bits>
 801374a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801374e:	b1d0      	cbz	r0, 8013786 <__d2b+0x7e>
 8013750:	f1c0 0320 	rsb	r3, r0, #32
 8013754:	fa02 f303 	lsl.w	r3, r2, r3
 8013758:	430b      	orrs	r3, r1
 801375a:	40c2      	lsrs	r2, r0
 801375c:	6163      	str	r3, [r4, #20]
 801375e:	9201      	str	r2, [sp, #4]
 8013760:	9b01      	ldr	r3, [sp, #4]
 8013762:	61a3      	str	r3, [r4, #24]
 8013764:	2b00      	cmp	r3, #0
 8013766:	bf0c      	ite	eq
 8013768:	2201      	moveq	r2, #1
 801376a:	2202      	movne	r2, #2
 801376c:	6122      	str	r2, [r4, #16]
 801376e:	b1a5      	cbz	r5, 801379a <__d2b+0x92>
 8013770:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013774:	4405      	add	r5, r0
 8013776:	603d      	str	r5, [r7, #0]
 8013778:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801377c:	6030      	str	r0, [r6, #0]
 801377e:	4620      	mov	r0, r4
 8013780:	b003      	add	sp, #12
 8013782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013786:	6161      	str	r1, [r4, #20]
 8013788:	e7ea      	b.n	8013760 <__d2b+0x58>
 801378a:	a801      	add	r0, sp, #4
 801378c:	f7ff fd59 	bl	8013242 <__lo0bits>
 8013790:	9b01      	ldr	r3, [sp, #4]
 8013792:	6163      	str	r3, [r4, #20]
 8013794:	3020      	adds	r0, #32
 8013796:	2201      	movs	r2, #1
 8013798:	e7e8      	b.n	801376c <__d2b+0x64>
 801379a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801379e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80137a2:	6038      	str	r0, [r7, #0]
 80137a4:	6918      	ldr	r0, [r3, #16]
 80137a6:	f7ff fd2d 	bl	8013204 <__hi0bits>
 80137aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80137ae:	e7e5      	b.n	801377c <__d2b+0x74>
 80137b0:	08014e22 	.word	0x08014e22
 80137b4:	08014e33 	.word	0x08014e33

080137b8 <__ssputs_r>:
 80137b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137bc:	688e      	ldr	r6, [r1, #8]
 80137be:	461f      	mov	r7, r3
 80137c0:	42be      	cmp	r6, r7
 80137c2:	680b      	ldr	r3, [r1, #0]
 80137c4:	4682      	mov	sl, r0
 80137c6:	460c      	mov	r4, r1
 80137c8:	4690      	mov	r8, r2
 80137ca:	d82d      	bhi.n	8013828 <__ssputs_r+0x70>
 80137cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80137d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80137d4:	d026      	beq.n	8013824 <__ssputs_r+0x6c>
 80137d6:	6965      	ldr	r5, [r4, #20]
 80137d8:	6909      	ldr	r1, [r1, #16]
 80137da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80137de:	eba3 0901 	sub.w	r9, r3, r1
 80137e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80137e6:	1c7b      	adds	r3, r7, #1
 80137e8:	444b      	add	r3, r9
 80137ea:	106d      	asrs	r5, r5, #1
 80137ec:	429d      	cmp	r5, r3
 80137ee:	bf38      	it	cc
 80137f0:	461d      	movcc	r5, r3
 80137f2:	0553      	lsls	r3, r2, #21
 80137f4:	d527      	bpl.n	8013846 <__ssputs_r+0x8e>
 80137f6:	4629      	mov	r1, r5
 80137f8:	f7ff fbd0 	bl	8012f9c <_malloc_r>
 80137fc:	4606      	mov	r6, r0
 80137fe:	b360      	cbz	r0, 801385a <__ssputs_r+0xa2>
 8013800:	6921      	ldr	r1, [r4, #16]
 8013802:	464a      	mov	r2, r9
 8013804:	f000 fa06 	bl	8013c14 <memcpy>
 8013808:	89a3      	ldrh	r3, [r4, #12]
 801380a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801380e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013812:	81a3      	strh	r3, [r4, #12]
 8013814:	6126      	str	r6, [r4, #16]
 8013816:	6165      	str	r5, [r4, #20]
 8013818:	444e      	add	r6, r9
 801381a:	eba5 0509 	sub.w	r5, r5, r9
 801381e:	6026      	str	r6, [r4, #0]
 8013820:	60a5      	str	r5, [r4, #8]
 8013822:	463e      	mov	r6, r7
 8013824:	42be      	cmp	r6, r7
 8013826:	d900      	bls.n	801382a <__ssputs_r+0x72>
 8013828:	463e      	mov	r6, r7
 801382a:	6820      	ldr	r0, [r4, #0]
 801382c:	4632      	mov	r2, r6
 801382e:	4641      	mov	r1, r8
 8013830:	f000 f9c6 	bl	8013bc0 <memmove>
 8013834:	68a3      	ldr	r3, [r4, #8]
 8013836:	1b9b      	subs	r3, r3, r6
 8013838:	60a3      	str	r3, [r4, #8]
 801383a:	6823      	ldr	r3, [r4, #0]
 801383c:	4433      	add	r3, r6
 801383e:	6023      	str	r3, [r4, #0]
 8013840:	2000      	movs	r0, #0
 8013842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013846:	462a      	mov	r2, r5
 8013848:	f000 fa36 	bl	8013cb8 <_realloc_r>
 801384c:	4606      	mov	r6, r0
 801384e:	2800      	cmp	r0, #0
 8013850:	d1e0      	bne.n	8013814 <__ssputs_r+0x5c>
 8013852:	6921      	ldr	r1, [r4, #16]
 8013854:	4650      	mov	r0, sl
 8013856:	f7ff fb2d 	bl	8012eb4 <_free_r>
 801385a:	230c      	movs	r3, #12
 801385c:	f8ca 3000 	str.w	r3, [sl]
 8013860:	89a3      	ldrh	r3, [r4, #12]
 8013862:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013866:	81a3      	strh	r3, [r4, #12]
 8013868:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801386c:	e7e9      	b.n	8013842 <__ssputs_r+0x8a>
	...

08013870 <_svfiprintf_r>:
 8013870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013874:	4698      	mov	r8, r3
 8013876:	898b      	ldrh	r3, [r1, #12]
 8013878:	061b      	lsls	r3, r3, #24
 801387a:	b09d      	sub	sp, #116	@ 0x74
 801387c:	4607      	mov	r7, r0
 801387e:	460d      	mov	r5, r1
 8013880:	4614      	mov	r4, r2
 8013882:	d510      	bpl.n	80138a6 <_svfiprintf_r+0x36>
 8013884:	690b      	ldr	r3, [r1, #16]
 8013886:	b973      	cbnz	r3, 80138a6 <_svfiprintf_r+0x36>
 8013888:	2140      	movs	r1, #64	@ 0x40
 801388a:	f7ff fb87 	bl	8012f9c <_malloc_r>
 801388e:	6028      	str	r0, [r5, #0]
 8013890:	6128      	str	r0, [r5, #16]
 8013892:	b930      	cbnz	r0, 80138a2 <_svfiprintf_r+0x32>
 8013894:	230c      	movs	r3, #12
 8013896:	603b      	str	r3, [r7, #0]
 8013898:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801389c:	b01d      	add	sp, #116	@ 0x74
 801389e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138a2:	2340      	movs	r3, #64	@ 0x40
 80138a4:	616b      	str	r3, [r5, #20]
 80138a6:	2300      	movs	r3, #0
 80138a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80138aa:	2320      	movs	r3, #32
 80138ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80138b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80138b4:	2330      	movs	r3, #48	@ 0x30
 80138b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013a54 <_svfiprintf_r+0x1e4>
 80138ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80138be:	f04f 0901 	mov.w	r9, #1
 80138c2:	4623      	mov	r3, r4
 80138c4:	469a      	mov	sl, r3
 80138c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80138ca:	b10a      	cbz	r2, 80138d0 <_svfiprintf_r+0x60>
 80138cc:	2a25      	cmp	r2, #37	@ 0x25
 80138ce:	d1f9      	bne.n	80138c4 <_svfiprintf_r+0x54>
 80138d0:	ebba 0b04 	subs.w	fp, sl, r4
 80138d4:	d00b      	beq.n	80138ee <_svfiprintf_r+0x7e>
 80138d6:	465b      	mov	r3, fp
 80138d8:	4622      	mov	r2, r4
 80138da:	4629      	mov	r1, r5
 80138dc:	4638      	mov	r0, r7
 80138de:	f7ff ff6b 	bl	80137b8 <__ssputs_r>
 80138e2:	3001      	adds	r0, #1
 80138e4:	f000 80a7 	beq.w	8013a36 <_svfiprintf_r+0x1c6>
 80138e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80138ea:	445a      	add	r2, fp
 80138ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80138ee:	f89a 3000 	ldrb.w	r3, [sl]
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	f000 809f 	beq.w	8013a36 <_svfiprintf_r+0x1c6>
 80138f8:	2300      	movs	r3, #0
 80138fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80138fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013902:	f10a 0a01 	add.w	sl, sl, #1
 8013906:	9304      	str	r3, [sp, #16]
 8013908:	9307      	str	r3, [sp, #28]
 801390a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801390e:	931a      	str	r3, [sp, #104]	@ 0x68
 8013910:	4654      	mov	r4, sl
 8013912:	2205      	movs	r2, #5
 8013914:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013918:	484e      	ldr	r0, [pc, #312]	@ (8013a54 <_svfiprintf_r+0x1e4>)
 801391a:	f7ec fcf9 	bl	8000310 <memchr>
 801391e:	9a04      	ldr	r2, [sp, #16]
 8013920:	b9d8      	cbnz	r0, 801395a <_svfiprintf_r+0xea>
 8013922:	06d0      	lsls	r0, r2, #27
 8013924:	bf44      	itt	mi
 8013926:	2320      	movmi	r3, #32
 8013928:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801392c:	0711      	lsls	r1, r2, #28
 801392e:	bf44      	itt	mi
 8013930:	232b      	movmi	r3, #43	@ 0x2b
 8013932:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013936:	f89a 3000 	ldrb.w	r3, [sl]
 801393a:	2b2a      	cmp	r3, #42	@ 0x2a
 801393c:	d015      	beq.n	801396a <_svfiprintf_r+0xfa>
 801393e:	9a07      	ldr	r2, [sp, #28]
 8013940:	4654      	mov	r4, sl
 8013942:	2000      	movs	r0, #0
 8013944:	f04f 0c0a 	mov.w	ip, #10
 8013948:	4621      	mov	r1, r4
 801394a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801394e:	3b30      	subs	r3, #48	@ 0x30
 8013950:	2b09      	cmp	r3, #9
 8013952:	d94b      	bls.n	80139ec <_svfiprintf_r+0x17c>
 8013954:	b1b0      	cbz	r0, 8013984 <_svfiprintf_r+0x114>
 8013956:	9207      	str	r2, [sp, #28]
 8013958:	e014      	b.n	8013984 <_svfiprintf_r+0x114>
 801395a:	eba0 0308 	sub.w	r3, r0, r8
 801395e:	fa09 f303 	lsl.w	r3, r9, r3
 8013962:	4313      	orrs	r3, r2
 8013964:	9304      	str	r3, [sp, #16]
 8013966:	46a2      	mov	sl, r4
 8013968:	e7d2      	b.n	8013910 <_svfiprintf_r+0xa0>
 801396a:	9b03      	ldr	r3, [sp, #12]
 801396c:	1d19      	adds	r1, r3, #4
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	9103      	str	r1, [sp, #12]
 8013972:	2b00      	cmp	r3, #0
 8013974:	bfbb      	ittet	lt
 8013976:	425b      	neglt	r3, r3
 8013978:	f042 0202 	orrlt.w	r2, r2, #2
 801397c:	9307      	strge	r3, [sp, #28]
 801397e:	9307      	strlt	r3, [sp, #28]
 8013980:	bfb8      	it	lt
 8013982:	9204      	strlt	r2, [sp, #16]
 8013984:	7823      	ldrb	r3, [r4, #0]
 8013986:	2b2e      	cmp	r3, #46	@ 0x2e
 8013988:	d10a      	bne.n	80139a0 <_svfiprintf_r+0x130>
 801398a:	7863      	ldrb	r3, [r4, #1]
 801398c:	2b2a      	cmp	r3, #42	@ 0x2a
 801398e:	d132      	bne.n	80139f6 <_svfiprintf_r+0x186>
 8013990:	9b03      	ldr	r3, [sp, #12]
 8013992:	1d1a      	adds	r2, r3, #4
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	9203      	str	r2, [sp, #12]
 8013998:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801399c:	3402      	adds	r4, #2
 801399e:	9305      	str	r3, [sp, #20]
 80139a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013a64 <_svfiprintf_r+0x1f4>
 80139a4:	7821      	ldrb	r1, [r4, #0]
 80139a6:	2203      	movs	r2, #3
 80139a8:	4650      	mov	r0, sl
 80139aa:	f7ec fcb1 	bl	8000310 <memchr>
 80139ae:	b138      	cbz	r0, 80139c0 <_svfiprintf_r+0x150>
 80139b0:	9b04      	ldr	r3, [sp, #16]
 80139b2:	eba0 000a 	sub.w	r0, r0, sl
 80139b6:	2240      	movs	r2, #64	@ 0x40
 80139b8:	4082      	lsls	r2, r0
 80139ba:	4313      	orrs	r3, r2
 80139bc:	3401      	adds	r4, #1
 80139be:	9304      	str	r3, [sp, #16]
 80139c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139c4:	4824      	ldr	r0, [pc, #144]	@ (8013a58 <_svfiprintf_r+0x1e8>)
 80139c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80139ca:	2206      	movs	r2, #6
 80139cc:	f7ec fca0 	bl	8000310 <memchr>
 80139d0:	2800      	cmp	r0, #0
 80139d2:	d036      	beq.n	8013a42 <_svfiprintf_r+0x1d2>
 80139d4:	4b21      	ldr	r3, [pc, #132]	@ (8013a5c <_svfiprintf_r+0x1ec>)
 80139d6:	bb1b      	cbnz	r3, 8013a20 <_svfiprintf_r+0x1b0>
 80139d8:	9b03      	ldr	r3, [sp, #12]
 80139da:	3307      	adds	r3, #7
 80139dc:	f023 0307 	bic.w	r3, r3, #7
 80139e0:	3308      	adds	r3, #8
 80139e2:	9303      	str	r3, [sp, #12]
 80139e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80139e6:	4433      	add	r3, r6
 80139e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80139ea:	e76a      	b.n	80138c2 <_svfiprintf_r+0x52>
 80139ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80139f0:	460c      	mov	r4, r1
 80139f2:	2001      	movs	r0, #1
 80139f4:	e7a8      	b.n	8013948 <_svfiprintf_r+0xd8>
 80139f6:	2300      	movs	r3, #0
 80139f8:	3401      	adds	r4, #1
 80139fa:	9305      	str	r3, [sp, #20]
 80139fc:	4619      	mov	r1, r3
 80139fe:	f04f 0c0a 	mov.w	ip, #10
 8013a02:	4620      	mov	r0, r4
 8013a04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013a08:	3a30      	subs	r2, #48	@ 0x30
 8013a0a:	2a09      	cmp	r2, #9
 8013a0c:	d903      	bls.n	8013a16 <_svfiprintf_r+0x1a6>
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d0c6      	beq.n	80139a0 <_svfiprintf_r+0x130>
 8013a12:	9105      	str	r1, [sp, #20]
 8013a14:	e7c4      	b.n	80139a0 <_svfiprintf_r+0x130>
 8013a16:	fb0c 2101 	mla	r1, ip, r1, r2
 8013a1a:	4604      	mov	r4, r0
 8013a1c:	2301      	movs	r3, #1
 8013a1e:	e7f0      	b.n	8013a02 <_svfiprintf_r+0x192>
 8013a20:	ab03      	add	r3, sp, #12
 8013a22:	9300      	str	r3, [sp, #0]
 8013a24:	462a      	mov	r2, r5
 8013a26:	4b0e      	ldr	r3, [pc, #56]	@ (8013a60 <_svfiprintf_r+0x1f0>)
 8013a28:	a904      	add	r1, sp, #16
 8013a2a:	4638      	mov	r0, r7
 8013a2c:	f7fd ff00 	bl	8011830 <_printf_float>
 8013a30:	1c42      	adds	r2, r0, #1
 8013a32:	4606      	mov	r6, r0
 8013a34:	d1d6      	bne.n	80139e4 <_svfiprintf_r+0x174>
 8013a36:	89ab      	ldrh	r3, [r5, #12]
 8013a38:	065b      	lsls	r3, r3, #25
 8013a3a:	f53f af2d 	bmi.w	8013898 <_svfiprintf_r+0x28>
 8013a3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013a40:	e72c      	b.n	801389c <_svfiprintf_r+0x2c>
 8013a42:	ab03      	add	r3, sp, #12
 8013a44:	9300      	str	r3, [sp, #0]
 8013a46:	462a      	mov	r2, r5
 8013a48:	4b05      	ldr	r3, [pc, #20]	@ (8013a60 <_svfiprintf_r+0x1f0>)
 8013a4a:	a904      	add	r1, sp, #16
 8013a4c:	4638      	mov	r0, r7
 8013a4e:	f7fe f977 	bl	8011d40 <_printf_i>
 8013a52:	e7ed      	b.n	8013a30 <_svfiprintf_r+0x1c0>
 8013a54:	08014f88 	.word	0x08014f88
 8013a58:	08014f92 	.word	0x08014f92
 8013a5c:	08011831 	.word	0x08011831
 8013a60:	080137b9 	.word	0x080137b9
 8013a64:	08014f8e 	.word	0x08014f8e

08013a68 <__sflush_r>:
 8013a68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a70:	0716      	lsls	r6, r2, #28
 8013a72:	4605      	mov	r5, r0
 8013a74:	460c      	mov	r4, r1
 8013a76:	d454      	bmi.n	8013b22 <__sflush_r+0xba>
 8013a78:	684b      	ldr	r3, [r1, #4]
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	dc02      	bgt.n	8013a84 <__sflush_r+0x1c>
 8013a7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	dd48      	ble.n	8013b16 <__sflush_r+0xae>
 8013a84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013a86:	2e00      	cmp	r6, #0
 8013a88:	d045      	beq.n	8013b16 <__sflush_r+0xae>
 8013a8a:	2300      	movs	r3, #0
 8013a8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013a90:	682f      	ldr	r7, [r5, #0]
 8013a92:	6a21      	ldr	r1, [r4, #32]
 8013a94:	602b      	str	r3, [r5, #0]
 8013a96:	d030      	beq.n	8013afa <__sflush_r+0x92>
 8013a98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013a9a:	89a3      	ldrh	r3, [r4, #12]
 8013a9c:	0759      	lsls	r1, r3, #29
 8013a9e:	d505      	bpl.n	8013aac <__sflush_r+0x44>
 8013aa0:	6863      	ldr	r3, [r4, #4]
 8013aa2:	1ad2      	subs	r2, r2, r3
 8013aa4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013aa6:	b10b      	cbz	r3, 8013aac <__sflush_r+0x44>
 8013aa8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013aaa:	1ad2      	subs	r2, r2, r3
 8013aac:	2300      	movs	r3, #0
 8013aae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013ab0:	6a21      	ldr	r1, [r4, #32]
 8013ab2:	4628      	mov	r0, r5
 8013ab4:	47b0      	blx	r6
 8013ab6:	1c43      	adds	r3, r0, #1
 8013ab8:	89a3      	ldrh	r3, [r4, #12]
 8013aba:	d106      	bne.n	8013aca <__sflush_r+0x62>
 8013abc:	6829      	ldr	r1, [r5, #0]
 8013abe:	291d      	cmp	r1, #29
 8013ac0:	d82b      	bhi.n	8013b1a <__sflush_r+0xb2>
 8013ac2:	4a2a      	ldr	r2, [pc, #168]	@ (8013b6c <__sflush_r+0x104>)
 8013ac4:	410a      	asrs	r2, r1
 8013ac6:	07d6      	lsls	r6, r2, #31
 8013ac8:	d427      	bmi.n	8013b1a <__sflush_r+0xb2>
 8013aca:	2200      	movs	r2, #0
 8013acc:	6062      	str	r2, [r4, #4]
 8013ace:	04d9      	lsls	r1, r3, #19
 8013ad0:	6922      	ldr	r2, [r4, #16]
 8013ad2:	6022      	str	r2, [r4, #0]
 8013ad4:	d504      	bpl.n	8013ae0 <__sflush_r+0x78>
 8013ad6:	1c42      	adds	r2, r0, #1
 8013ad8:	d101      	bne.n	8013ade <__sflush_r+0x76>
 8013ada:	682b      	ldr	r3, [r5, #0]
 8013adc:	b903      	cbnz	r3, 8013ae0 <__sflush_r+0x78>
 8013ade:	6560      	str	r0, [r4, #84]	@ 0x54
 8013ae0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013ae2:	602f      	str	r7, [r5, #0]
 8013ae4:	b1b9      	cbz	r1, 8013b16 <__sflush_r+0xae>
 8013ae6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013aea:	4299      	cmp	r1, r3
 8013aec:	d002      	beq.n	8013af4 <__sflush_r+0x8c>
 8013aee:	4628      	mov	r0, r5
 8013af0:	f7ff f9e0 	bl	8012eb4 <_free_r>
 8013af4:	2300      	movs	r3, #0
 8013af6:	6363      	str	r3, [r4, #52]	@ 0x34
 8013af8:	e00d      	b.n	8013b16 <__sflush_r+0xae>
 8013afa:	2301      	movs	r3, #1
 8013afc:	4628      	mov	r0, r5
 8013afe:	47b0      	blx	r6
 8013b00:	4602      	mov	r2, r0
 8013b02:	1c50      	adds	r0, r2, #1
 8013b04:	d1c9      	bne.n	8013a9a <__sflush_r+0x32>
 8013b06:	682b      	ldr	r3, [r5, #0]
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d0c6      	beq.n	8013a9a <__sflush_r+0x32>
 8013b0c:	2b1d      	cmp	r3, #29
 8013b0e:	d001      	beq.n	8013b14 <__sflush_r+0xac>
 8013b10:	2b16      	cmp	r3, #22
 8013b12:	d11e      	bne.n	8013b52 <__sflush_r+0xea>
 8013b14:	602f      	str	r7, [r5, #0]
 8013b16:	2000      	movs	r0, #0
 8013b18:	e022      	b.n	8013b60 <__sflush_r+0xf8>
 8013b1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013b1e:	b21b      	sxth	r3, r3
 8013b20:	e01b      	b.n	8013b5a <__sflush_r+0xf2>
 8013b22:	690f      	ldr	r7, [r1, #16]
 8013b24:	2f00      	cmp	r7, #0
 8013b26:	d0f6      	beq.n	8013b16 <__sflush_r+0xae>
 8013b28:	0793      	lsls	r3, r2, #30
 8013b2a:	680e      	ldr	r6, [r1, #0]
 8013b2c:	bf08      	it	eq
 8013b2e:	694b      	ldreq	r3, [r1, #20]
 8013b30:	600f      	str	r7, [r1, #0]
 8013b32:	bf18      	it	ne
 8013b34:	2300      	movne	r3, #0
 8013b36:	eba6 0807 	sub.w	r8, r6, r7
 8013b3a:	608b      	str	r3, [r1, #8]
 8013b3c:	f1b8 0f00 	cmp.w	r8, #0
 8013b40:	dde9      	ble.n	8013b16 <__sflush_r+0xae>
 8013b42:	6a21      	ldr	r1, [r4, #32]
 8013b44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013b46:	4643      	mov	r3, r8
 8013b48:	463a      	mov	r2, r7
 8013b4a:	4628      	mov	r0, r5
 8013b4c:	47b0      	blx	r6
 8013b4e:	2800      	cmp	r0, #0
 8013b50:	dc08      	bgt.n	8013b64 <__sflush_r+0xfc>
 8013b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013b5a:	81a3      	strh	r3, [r4, #12]
 8013b5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b64:	4407      	add	r7, r0
 8013b66:	eba8 0800 	sub.w	r8, r8, r0
 8013b6a:	e7e7      	b.n	8013b3c <__sflush_r+0xd4>
 8013b6c:	dfbffffe 	.word	0xdfbffffe

08013b70 <_fflush_r>:
 8013b70:	b538      	push	{r3, r4, r5, lr}
 8013b72:	690b      	ldr	r3, [r1, #16]
 8013b74:	4605      	mov	r5, r0
 8013b76:	460c      	mov	r4, r1
 8013b78:	b913      	cbnz	r3, 8013b80 <_fflush_r+0x10>
 8013b7a:	2500      	movs	r5, #0
 8013b7c:	4628      	mov	r0, r5
 8013b7e:	bd38      	pop	{r3, r4, r5, pc}
 8013b80:	b118      	cbz	r0, 8013b8a <_fflush_r+0x1a>
 8013b82:	6a03      	ldr	r3, [r0, #32]
 8013b84:	b90b      	cbnz	r3, 8013b8a <_fflush_r+0x1a>
 8013b86:	f7fe fa87 	bl	8012098 <__sinit>
 8013b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d0f3      	beq.n	8013b7a <_fflush_r+0xa>
 8013b92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013b94:	07d0      	lsls	r0, r2, #31
 8013b96:	d404      	bmi.n	8013ba2 <_fflush_r+0x32>
 8013b98:	0599      	lsls	r1, r3, #22
 8013b9a:	d402      	bmi.n	8013ba2 <_fflush_r+0x32>
 8013b9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013b9e:	f7fe fba0 	bl	80122e2 <__retarget_lock_acquire_recursive>
 8013ba2:	4628      	mov	r0, r5
 8013ba4:	4621      	mov	r1, r4
 8013ba6:	f7ff ff5f 	bl	8013a68 <__sflush_r>
 8013baa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013bac:	07da      	lsls	r2, r3, #31
 8013bae:	4605      	mov	r5, r0
 8013bb0:	d4e4      	bmi.n	8013b7c <_fflush_r+0xc>
 8013bb2:	89a3      	ldrh	r3, [r4, #12]
 8013bb4:	059b      	lsls	r3, r3, #22
 8013bb6:	d4e1      	bmi.n	8013b7c <_fflush_r+0xc>
 8013bb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013bba:	f7fe fb93 	bl	80122e4 <__retarget_lock_release_recursive>
 8013bbe:	e7dd      	b.n	8013b7c <_fflush_r+0xc>

08013bc0 <memmove>:
 8013bc0:	4288      	cmp	r0, r1
 8013bc2:	b510      	push	{r4, lr}
 8013bc4:	eb01 0402 	add.w	r4, r1, r2
 8013bc8:	d902      	bls.n	8013bd0 <memmove+0x10>
 8013bca:	4284      	cmp	r4, r0
 8013bcc:	4623      	mov	r3, r4
 8013bce:	d807      	bhi.n	8013be0 <memmove+0x20>
 8013bd0:	1e43      	subs	r3, r0, #1
 8013bd2:	42a1      	cmp	r1, r4
 8013bd4:	d008      	beq.n	8013be8 <memmove+0x28>
 8013bd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013bda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013bde:	e7f8      	b.n	8013bd2 <memmove+0x12>
 8013be0:	4402      	add	r2, r0
 8013be2:	4601      	mov	r1, r0
 8013be4:	428a      	cmp	r2, r1
 8013be6:	d100      	bne.n	8013bea <memmove+0x2a>
 8013be8:	bd10      	pop	{r4, pc}
 8013bea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013bee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013bf2:	e7f7      	b.n	8013be4 <memmove+0x24>

08013bf4 <_sbrk_r>:
 8013bf4:	b538      	push	{r3, r4, r5, lr}
 8013bf6:	4d06      	ldr	r5, [pc, #24]	@ (8013c10 <_sbrk_r+0x1c>)
 8013bf8:	2300      	movs	r3, #0
 8013bfa:	4604      	mov	r4, r0
 8013bfc:	4608      	mov	r0, r1
 8013bfe:	602b      	str	r3, [r5, #0]
 8013c00:	f7f0 fc32 	bl	8004468 <_sbrk>
 8013c04:	1c43      	adds	r3, r0, #1
 8013c06:	d102      	bne.n	8013c0e <_sbrk_r+0x1a>
 8013c08:	682b      	ldr	r3, [r5, #0]
 8013c0a:	b103      	cbz	r3, 8013c0e <_sbrk_r+0x1a>
 8013c0c:	6023      	str	r3, [r4, #0]
 8013c0e:	bd38      	pop	{r3, r4, r5, pc}
 8013c10:	240011fc 	.word	0x240011fc

08013c14 <memcpy>:
 8013c14:	440a      	add	r2, r1
 8013c16:	4291      	cmp	r1, r2
 8013c18:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8013c1c:	d100      	bne.n	8013c20 <memcpy+0xc>
 8013c1e:	4770      	bx	lr
 8013c20:	b510      	push	{r4, lr}
 8013c22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013c26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013c2a:	4291      	cmp	r1, r2
 8013c2c:	d1f9      	bne.n	8013c22 <memcpy+0xe>
 8013c2e:	bd10      	pop	{r4, pc}

08013c30 <__assert_func>:
 8013c30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013c32:	4614      	mov	r4, r2
 8013c34:	461a      	mov	r2, r3
 8013c36:	4b09      	ldr	r3, [pc, #36]	@ (8013c5c <__assert_func+0x2c>)
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	4605      	mov	r5, r0
 8013c3c:	68d8      	ldr	r0, [r3, #12]
 8013c3e:	b954      	cbnz	r4, 8013c56 <__assert_func+0x26>
 8013c40:	4b07      	ldr	r3, [pc, #28]	@ (8013c60 <__assert_func+0x30>)
 8013c42:	461c      	mov	r4, r3
 8013c44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013c48:	9100      	str	r1, [sp, #0]
 8013c4a:	462b      	mov	r3, r5
 8013c4c:	4905      	ldr	r1, [pc, #20]	@ (8013c64 <__assert_func+0x34>)
 8013c4e:	f000 f86f 	bl	8013d30 <fiprintf>
 8013c52:	f000 f87f 	bl	8013d54 <abort>
 8013c56:	4b04      	ldr	r3, [pc, #16]	@ (8013c68 <__assert_func+0x38>)
 8013c58:	e7f4      	b.n	8013c44 <__assert_func+0x14>
 8013c5a:	bf00      	nop
 8013c5c:	24000054 	.word	0x24000054
 8013c60:	08014fde 	.word	0x08014fde
 8013c64:	08014fb0 	.word	0x08014fb0
 8013c68:	08014fa3 	.word	0x08014fa3

08013c6c <_calloc_r>:
 8013c6c:	b570      	push	{r4, r5, r6, lr}
 8013c6e:	fba1 5402 	umull	r5, r4, r1, r2
 8013c72:	b93c      	cbnz	r4, 8013c84 <_calloc_r+0x18>
 8013c74:	4629      	mov	r1, r5
 8013c76:	f7ff f991 	bl	8012f9c <_malloc_r>
 8013c7a:	4606      	mov	r6, r0
 8013c7c:	b928      	cbnz	r0, 8013c8a <_calloc_r+0x1e>
 8013c7e:	2600      	movs	r6, #0
 8013c80:	4630      	mov	r0, r6
 8013c82:	bd70      	pop	{r4, r5, r6, pc}
 8013c84:	220c      	movs	r2, #12
 8013c86:	6002      	str	r2, [r0, #0]
 8013c88:	e7f9      	b.n	8013c7e <_calloc_r+0x12>
 8013c8a:	462a      	mov	r2, r5
 8013c8c:	4621      	mov	r1, r4
 8013c8e:	f7fe fa9c 	bl	80121ca <memset>
 8013c92:	e7f5      	b.n	8013c80 <_calloc_r+0x14>

08013c94 <__ascii_mbtowc>:
 8013c94:	b082      	sub	sp, #8
 8013c96:	b901      	cbnz	r1, 8013c9a <__ascii_mbtowc+0x6>
 8013c98:	a901      	add	r1, sp, #4
 8013c9a:	b142      	cbz	r2, 8013cae <__ascii_mbtowc+0x1a>
 8013c9c:	b14b      	cbz	r3, 8013cb2 <__ascii_mbtowc+0x1e>
 8013c9e:	7813      	ldrb	r3, [r2, #0]
 8013ca0:	600b      	str	r3, [r1, #0]
 8013ca2:	7812      	ldrb	r2, [r2, #0]
 8013ca4:	1e10      	subs	r0, r2, #0
 8013ca6:	bf18      	it	ne
 8013ca8:	2001      	movne	r0, #1
 8013caa:	b002      	add	sp, #8
 8013cac:	4770      	bx	lr
 8013cae:	4610      	mov	r0, r2
 8013cb0:	e7fb      	b.n	8013caa <__ascii_mbtowc+0x16>
 8013cb2:	f06f 0001 	mvn.w	r0, #1
 8013cb6:	e7f8      	b.n	8013caa <__ascii_mbtowc+0x16>

08013cb8 <_realloc_r>:
 8013cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cbc:	4680      	mov	r8, r0
 8013cbe:	4615      	mov	r5, r2
 8013cc0:	460c      	mov	r4, r1
 8013cc2:	b921      	cbnz	r1, 8013cce <_realloc_r+0x16>
 8013cc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013cc8:	4611      	mov	r1, r2
 8013cca:	f7ff b967 	b.w	8012f9c <_malloc_r>
 8013cce:	b92a      	cbnz	r2, 8013cdc <_realloc_r+0x24>
 8013cd0:	f7ff f8f0 	bl	8012eb4 <_free_r>
 8013cd4:	2400      	movs	r4, #0
 8013cd6:	4620      	mov	r0, r4
 8013cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cdc:	f000 f841 	bl	8013d62 <_malloc_usable_size_r>
 8013ce0:	4285      	cmp	r5, r0
 8013ce2:	4606      	mov	r6, r0
 8013ce4:	d802      	bhi.n	8013cec <_realloc_r+0x34>
 8013ce6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8013cea:	d8f4      	bhi.n	8013cd6 <_realloc_r+0x1e>
 8013cec:	4629      	mov	r1, r5
 8013cee:	4640      	mov	r0, r8
 8013cf0:	f7ff f954 	bl	8012f9c <_malloc_r>
 8013cf4:	4607      	mov	r7, r0
 8013cf6:	2800      	cmp	r0, #0
 8013cf8:	d0ec      	beq.n	8013cd4 <_realloc_r+0x1c>
 8013cfa:	42b5      	cmp	r5, r6
 8013cfc:	462a      	mov	r2, r5
 8013cfe:	4621      	mov	r1, r4
 8013d00:	bf28      	it	cs
 8013d02:	4632      	movcs	r2, r6
 8013d04:	f7ff ff86 	bl	8013c14 <memcpy>
 8013d08:	4621      	mov	r1, r4
 8013d0a:	4640      	mov	r0, r8
 8013d0c:	f7ff f8d2 	bl	8012eb4 <_free_r>
 8013d10:	463c      	mov	r4, r7
 8013d12:	e7e0      	b.n	8013cd6 <_realloc_r+0x1e>

08013d14 <__ascii_wctomb>:
 8013d14:	4603      	mov	r3, r0
 8013d16:	4608      	mov	r0, r1
 8013d18:	b141      	cbz	r1, 8013d2c <__ascii_wctomb+0x18>
 8013d1a:	2aff      	cmp	r2, #255	@ 0xff
 8013d1c:	d904      	bls.n	8013d28 <__ascii_wctomb+0x14>
 8013d1e:	228a      	movs	r2, #138	@ 0x8a
 8013d20:	601a      	str	r2, [r3, #0]
 8013d22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013d26:	4770      	bx	lr
 8013d28:	700a      	strb	r2, [r1, #0]
 8013d2a:	2001      	movs	r0, #1
 8013d2c:	4770      	bx	lr
	...

08013d30 <fiprintf>:
 8013d30:	b40e      	push	{r1, r2, r3}
 8013d32:	b503      	push	{r0, r1, lr}
 8013d34:	4601      	mov	r1, r0
 8013d36:	ab03      	add	r3, sp, #12
 8013d38:	4805      	ldr	r0, [pc, #20]	@ (8013d50 <fiprintf+0x20>)
 8013d3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d3e:	6800      	ldr	r0, [r0, #0]
 8013d40:	9301      	str	r3, [sp, #4]
 8013d42:	f000 f83f 	bl	8013dc4 <_vfiprintf_r>
 8013d46:	b002      	add	sp, #8
 8013d48:	f85d eb04 	ldr.w	lr, [sp], #4
 8013d4c:	b003      	add	sp, #12
 8013d4e:	4770      	bx	lr
 8013d50:	24000054 	.word	0x24000054

08013d54 <abort>:
 8013d54:	b508      	push	{r3, lr}
 8013d56:	2006      	movs	r0, #6
 8013d58:	f000 fa08 	bl	801416c <raise>
 8013d5c:	2001      	movs	r0, #1
 8013d5e:	f7f0 fb0b 	bl	8004378 <_exit>

08013d62 <_malloc_usable_size_r>:
 8013d62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013d66:	1f18      	subs	r0, r3, #4
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	bfbc      	itt	lt
 8013d6c:	580b      	ldrlt	r3, [r1, r0]
 8013d6e:	18c0      	addlt	r0, r0, r3
 8013d70:	4770      	bx	lr

08013d72 <__sfputc_r>:
 8013d72:	6893      	ldr	r3, [r2, #8]
 8013d74:	3b01      	subs	r3, #1
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	b410      	push	{r4}
 8013d7a:	6093      	str	r3, [r2, #8]
 8013d7c:	da08      	bge.n	8013d90 <__sfputc_r+0x1e>
 8013d7e:	6994      	ldr	r4, [r2, #24]
 8013d80:	42a3      	cmp	r3, r4
 8013d82:	db01      	blt.n	8013d88 <__sfputc_r+0x16>
 8013d84:	290a      	cmp	r1, #10
 8013d86:	d103      	bne.n	8013d90 <__sfputc_r+0x1e>
 8013d88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d8c:	f000 b932 	b.w	8013ff4 <__swbuf_r>
 8013d90:	6813      	ldr	r3, [r2, #0]
 8013d92:	1c58      	adds	r0, r3, #1
 8013d94:	6010      	str	r0, [r2, #0]
 8013d96:	7019      	strb	r1, [r3, #0]
 8013d98:	4608      	mov	r0, r1
 8013d9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d9e:	4770      	bx	lr

08013da0 <__sfputs_r>:
 8013da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013da2:	4606      	mov	r6, r0
 8013da4:	460f      	mov	r7, r1
 8013da6:	4614      	mov	r4, r2
 8013da8:	18d5      	adds	r5, r2, r3
 8013daa:	42ac      	cmp	r4, r5
 8013dac:	d101      	bne.n	8013db2 <__sfputs_r+0x12>
 8013dae:	2000      	movs	r0, #0
 8013db0:	e007      	b.n	8013dc2 <__sfputs_r+0x22>
 8013db2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013db6:	463a      	mov	r2, r7
 8013db8:	4630      	mov	r0, r6
 8013dba:	f7ff ffda 	bl	8013d72 <__sfputc_r>
 8013dbe:	1c43      	adds	r3, r0, #1
 8013dc0:	d1f3      	bne.n	8013daa <__sfputs_r+0xa>
 8013dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013dc4 <_vfiprintf_r>:
 8013dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dc8:	460d      	mov	r5, r1
 8013dca:	b09d      	sub	sp, #116	@ 0x74
 8013dcc:	4614      	mov	r4, r2
 8013dce:	4698      	mov	r8, r3
 8013dd0:	4606      	mov	r6, r0
 8013dd2:	b118      	cbz	r0, 8013ddc <_vfiprintf_r+0x18>
 8013dd4:	6a03      	ldr	r3, [r0, #32]
 8013dd6:	b90b      	cbnz	r3, 8013ddc <_vfiprintf_r+0x18>
 8013dd8:	f7fe f95e 	bl	8012098 <__sinit>
 8013ddc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013dde:	07d9      	lsls	r1, r3, #31
 8013de0:	d405      	bmi.n	8013dee <_vfiprintf_r+0x2a>
 8013de2:	89ab      	ldrh	r3, [r5, #12]
 8013de4:	059a      	lsls	r2, r3, #22
 8013de6:	d402      	bmi.n	8013dee <_vfiprintf_r+0x2a>
 8013de8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013dea:	f7fe fa7a 	bl	80122e2 <__retarget_lock_acquire_recursive>
 8013dee:	89ab      	ldrh	r3, [r5, #12]
 8013df0:	071b      	lsls	r3, r3, #28
 8013df2:	d501      	bpl.n	8013df8 <_vfiprintf_r+0x34>
 8013df4:	692b      	ldr	r3, [r5, #16]
 8013df6:	b99b      	cbnz	r3, 8013e20 <_vfiprintf_r+0x5c>
 8013df8:	4629      	mov	r1, r5
 8013dfa:	4630      	mov	r0, r6
 8013dfc:	f000 f938 	bl	8014070 <__swsetup_r>
 8013e00:	b170      	cbz	r0, 8013e20 <_vfiprintf_r+0x5c>
 8013e02:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013e04:	07dc      	lsls	r4, r3, #31
 8013e06:	d504      	bpl.n	8013e12 <_vfiprintf_r+0x4e>
 8013e08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013e0c:	b01d      	add	sp, #116	@ 0x74
 8013e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e12:	89ab      	ldrh	r3, [r5, #12]
 8013e14:	0598      	lsls	r0, r3, #22
 8013e16:	d4f7      	bmi.n	8013e08 <_vfiprintf_r+0x44>
 8013e18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013e1a:	f7fe fa63 	bl	80122e4 <__retarget_lock_release_recursive>
 8013e1e:	e7f3      	b.n	8013e08 <_vfiprintf_r+0x44>
 8013e20:	2300      	movs	r3, #0
 8013e22:	9309      	str	r3, [sp, #36]	@ 0x24
 8013e24:	2320      	movs	r3, #32
 8013e26:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013e2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8013e2e:	2330      	movs	r3, #48	@ 0x30
 8013e30:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013fe0 <_vfiprintf_r+0x21c>
 8013e34:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013e38:	f04f 0901 	mov.w	r9, #1
 8013e3c:	4623      	mov	r3, r4
 8013e3e:	469a      	mov	sl, r3
 8013e40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013e44:	b10a      	cbz	r2, 8013e4a <_vfiprintf_r+0x86>
 8013e46:	2a25      	cmp	r2, #37	@ 0x25
 8013e48:	d1f9      	bne.n	8013e3e <_vfiprintf_r+0x7a>
 8013e4a:	ebba 0b04 	subs.w	fp, sl, r4
 8013e4e:	d00b      	beq.n	8013e68 <_vfiprintf_r+0xa4>
 8013e50:	465b      	mov	r3, fp
 8013e52:	4622      	mov	r2, r4
 8013e54:	4629      	mov	r1, r5
 8013e56:	4630      	mov	r0, r6
 8013e58:	f7ff ffa2 	bl	8013da0 <__sfputs_r>
 8013e5c:	3001      	adds	r0, #1
 8013e5e:	f000 80a7 	beq.w	8013fb0 <_vfiprintf_r+0x1ec>
 8013e62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013e64:	445a      	add	r2, fp
 8013e66:	9209      	str	r2, [sp, #36]	@ 0x24
 8013e68:	f89a 3000 	ldrb.w	r3, [sl]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	f000 809f 	beq.w	8013fb0 <_vfiprintf_r+0x1ec>
 8013e72:	2300      	movs	r3, #0
 8013e74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013e78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013e7c:	f10a 0a01 	add.w	sl, sl, #1
 8013e80:	9304      	str	r3, [sp, #16]
 8013e82:	9307      	str	r3, [sp, #28]
 8013e84:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013e88:	931a      	str	r3, [sp, #104]	@ 0x68
 8013e8a:	4654      	mov	r4, sl
 8013e8c:	2205      	movs	r2, #5
 8013e8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e92:	4853      	ldr	r0, [pc, #332]	@ (8013fe0 <_vfiprintf_r+0x21c>)
 8013e94:	f7ec fa3c 	bl	8000310 <memchr>
 8013e98:	9a04      	ldr	r2, [sp, #16]
 8013e9a:	b9d8      	cbnz	r0, 8013ed4 <_vfiprintf_r+0x110>
 8013e9c:	06d1      	lsls	r1, r2, #27
 8013e9e:	bf44      	itt	mi
 8013ea0:	2320      	movmi	r3, #32
 8013ea2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013ea6:	0713      	lsls	r3, r2, #28
 8013ea8:	bf44      	itt	mi
 8013eaa:	232b      	movmi	r3, #43	@ 0x2b
 8013eac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013eb0:	f89a 3000 	ldrb.w	r3, [sl]
 8013eb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8013eb6:	d015      	beq.n	8013ee4 <_vfiprintf_r+0x120>
 8013eb8:	9a07      	ldr	r2, [sp, #28]
 8013eba:	4654      	mov	r4, sl
 8013ebc:	2000      	movs	r0, #0
 8013ebe:	f04f 0c0a 	mov.w	ip, #10
 8013ec2:	4621      	mov	r1, r4
 8013ec4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013ec8:	3b30      	subs	r3, #48	@ 0x30
 8013eca:	2b09      	cmp	r3, #9
 8013ecc:	d94b      	bls.n	8013f66 <_vfiprintf_r+0x1a2>
 8013ece:	b1b0      	cbz	r0, 8013efe <_vfiprintf_r+0x13a>
 8013ed0:	9207      	str	r2, [sp, #28]
 8013ed2:	e014      	b.n	8013efe <_vfiprintf_r+0x13a>
 8013ed4:	eba0 0308 	sub.w	r3, r0, r8
 8013ed8:	fa09 f303 	lsl.w	r3, r9, r3
 8013edc:	4313      	orrs	r3, r2
 8013ede:	9304      	str	r3, [sp, #16]
 8013ee0:	46a2      	mov	sl, r4
 8013ee2:	e7d2      	b.n	8013e8a <_vfiprintf_r+0xc6>
 8013ee4:	9b03      	ldr	r3, [sp, #12]
 8013ee6:	1d19      	adds	r1, r3, #4
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	9103      	str	r1, [sp, #12]
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	bfbb      	ittet	lt
 8013ef0:	425b      	neglt	r3, r3
 8013ef2:	f042 0202 	orrlt.w	r2, r2, #2
 8013ef6:	9307      	strge	r3, [sp, #28]
 8013ef8:	9307      	strlt	r3, [sp, #28]
 8013efa:	bfb8      	it	lt
 8013efc:	9204      	strlt	r2, [sp, #16]
 8013efe:	7823      	ldrb	r3, [r4, #0]
 8013f00:	2b2e      	cmp	r3, #46	@ 0x2e
 8013f02:	d10a      	bne.n	8013f1a <_vfiprintf_r+0x156>
 8013f04:	7863      	ldrb	r3, [r4, #1]
 8013f06:	2b2a      	cmp	r3, #42	@ 0x2a
 8013f08:	d132      	bne.n	8013f70 <_vfiprintf_r+0x1ac>
 8013f0a:	9b03      	ldr	r3, [sp, #12]
 8013f0c:	1d1a      	adds	r2, r3, #4
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	9203      	str	r2, [sp, #12]
 8013f12:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013f16:	3402      	adds	r4, #2
 8013f18:	9305      	str	r3, [sp, #20]
 8013f1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013ff0 <_vfiprintf_r+0x22c>
 8013f1e:	7821      	ldrb	r1, [r4, #0]
 8013f20:	2203      	movs	r2, #3
 8013f22:	4650      	mov	r0, sl
 8013f24:	f7ec f9f4 	bl	8000310 <memchr>
 8013f28:	b138      	cbz	r0, 8013f3a <_vfiprintf_r+0x176>
 8013f2a:	9b04      	ldr	r3, [sp, #16]
 8013f2c:	eba0 000a 	sub.w	r0, r0, sl
 8013f30:	2240      	movs	r2, #64	@ 0x40
 8013f32:	4082      	lsls	r2, r0
 8013f34:	4313      	orrs	r3, r2
 8013f36:	3401      	adds	r4, #1
 8013f38:	9304      	str	r3, [sp, #16]
 8013f3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f3e:	4829      	ldr	r0, [pc, #164]	@ (8013fe4 <_vfiprintf_r+0x220>)
 8013f40:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013f44:	2206      	movs	r2, #6
 8013f46:	f7ec f9e3 	bl	8000310 <memchr>
 8013f4a:	2800      	cmp	r0, #0
 8013f4c:	d03f      	beq.n	8013fce <_vfiprintf_r+0x20a>
 8013f4e:	4b26      	ldr	r3, [pc, #152]	@ (8013fe8 <_vfiprintf_r+0x224>)
 8013f50:	bb1b      	cbnz	r3, 8013f9a <_vfiprintf_r+0x1d6>
 8013f52:	9b03      	ldr	r3, [sp, #12]
 8013f54:	3307      	adds	r3, #7
 8013f56:	f023 0307 	bic.w	r3, r3, #7
 8013f5a:	3308      	adds	r3, #8
 8013f5c:	9303      	str	r3, [sp, #12]
 8013f5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f60:	443b      	add	r3, r7
 8013f62:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f64:	e76a      	b.n	8013e3c <_vfiprintf_r+0x78>
 8013f66:	fb0c 3202 	mla	r2, ip, r2, r3
 8013f6a:	460c      	mov	r4, r1
 8013f6c:	2001      	movs	r0, #1
 8013f6e:	e7a8      	b.n	8013ec2 <_vfiprintf_r+0xfe>
 8013f70:	2300      	movs	r3, #0
 8013f72:	3401      	adds	r4, #1
 8013f74:	9305      	str	r3, [sp, #20]
 8013f76:	4619      	mov	r1, r3
 8013f78:	f04f 0c0a 	mov.w	ip, #10
 8013f7c:	4620      	mov	r0, r4
 8013f7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013f82:	3a30      	subs	r2, #48	@ 0x30
 8013f84:	2a09      	cmp	r2, #9
 8013f86:	d903      	bls.n	8013f90 <_vfiprintf_r+0x1cc>
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d0c6      	beq.n	8013f1a <_vfiprintf_r+0x156>
 8013f8c:	9105      	str	r1, [sp, #20]
 8013f8e:	e7c4      	b.n	8013f1a <_vfiprintf_r+0x156>
 8013f90:	fb0c 2101 	mla	r1, ip, r1, r2
 8013f94:	4604      	mov	r4, r0
 8013f96:	2301      	movs	r3, #1
 8013f98:	e7f0      	b.n	8013f7c <_vfiprintf_r+0x1b8>
 8013f9a:	ab03      	add	r3, sp, #12
 8013f9c:	9300      	str	r3, [sp, #0]
 8013f9e:	462a      	mov	r2, r5
 8013fa0:	4b12      	ldr	r3, [pc, #72]	@ (8013fec <_vfiprintf_r+0x228>)
 8013fa2:	a904      	add	r1, sp, #16
 8013fa4:	4630      	mov	r0, r6
 8013fa6:	f7fd fc43 	bl	8011830 <_printf_float>
 8013faa:	4607      	mov	r7, r0
 8013fac:	1c78      	adds	r0, r7, #1
 8013fae:	d1d6      	bne.n	8013f5e <_vfiprintf_r+0x19a>
 8013fb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013fb2:	07d9      	lsls	r1, r3, #31
 8013fb4:	d405      	bmi.n	8013fc2 <_vfiprintf_r+0x1fe>
 8013fb6:	89ab      	ldrh	r3, [r5, #12]
 8013fb8:	059a      	lsls	r2, r3, #22
 8013fba:	d402      	bmi.n	8013fc2 <_vfiprintf_r+0x1fe>
 8013fbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013fbe:	f7fe f991 	bl	80122e4 <__retarget_lock_release_recursive>
 8013fc2:	89ab      	ldrh	r3, [r5, #12]
 8013fc4:	065b      	lsls	r3, r3, #25
 8013fc6:	f53f af1f 	bmi.w	8013e08 <_vfiprintf_r+0x44>
 8013fca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013fcc:	e71e      	b.n	8013e0c <_vfiprintf_r+0x48>
 8013fce:	ab03      	add	r3, sp, #12
 8013fd0:	9300      	str	r3, [sp, #0]
 8013fd2:	462a      	mov	r2, r5
 8013fd4:	4b05      	ldr	r3, [pc, #20]	@ (8013fec <_vfiprintf_r+0x228>)
 8013fd6:	a904      	add	r1, sp, #16
 8013fd8:	4630      	mov	r0, r6
 8013fda:	f7fd feb1 	bl	8011d40 <_printf_i>
 8013fde:	e7e4      	b.n	8013faa <_vfiprintf_r+0x1e6>
 8013fe0:	08014f88 	.word	0x08014f88
 8013fe4:	08014f92 	.word	0x08014f92
 8013fe8:	08011831 	.word	0x08011831
 8013fec:	08013da1 	.word	0x08013da1
 8013ff0:	08014f8e 	.word	0x08014f8e

08013ff4 <__swbuf_r>:
 8013ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ff6:	460e      	mov	r6, r1
 8013ff8:	4614      	mov	r4, r2
 8013ffa:	4605      	mov	r5, r0
 8013ffc:	b118      	cbz	r0, 8014006 <__swbuf_r+0x12>
 8013ffe:	6a03      	ldr	r3, [r0, #32]
 8014000:	b90b      	cbnz	r3, 8014006 <__swbuf_r+0x12>
 8014002:	f7fe f849 	bl	8012098 <__sinit>
 8014006:	69a3      	ldr	r3, [r4, #24]
 8014008:	60a3      	str	r3, [r4, #8]
 801400a:	89a3      	ldrh	r3, [r4, #12]
 801400c:	071a      	lsls	r2, r3, #28
 801400e:	d501      	bpl.n	8014014 <__swbuf_r+0x20>
 8014010:	6923      	ldr	r3, [r4, #16]
 8014012:	b943      	cbnz	r3, 8014026 <__swbuf_r+0x32>
 8014014:	4621      	mov	r1, r4
 8014016:	4628      	mov	r0, r5
 8014018:	f000 f82a 	bl	8014070 <__swsetup_r>
 801401c:	b118      	cbz	r0, 8014026 <__swbuf_r+0x32>
 801401e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8014022:	4638      	mov	r0, r7
 8014024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014026:	6823      	ldr	r3, [r4, #0]
 8014028:	6922      	ldr	r2, [r4, #16]
 801402a:	1a98      	subs	r0, r3, r2
 801402c:	6963      	ldr	r3, [r4, #20]
 801402e:	b2f6      	uxtb	r6, r6
 8014030:	4283      	cmp	r3, r0
 8014032:	4637      	mov	r7, r6
 8014034:	dc05      	bgt.n	8014042 <__swbuf_r+0x4e>
 8014036:	4621      	mov	r1, r4
 8014038:	4628      	mov	r0, r5
 801403a:	f7ff fd99 	bl	8013b70 <_fflush_r>
 801403e:	2800      	cmp	r0, #0
 8014040:	d1ed      	bne.n	801401e <__swbuf_r+0x2a>
 8014042:	68a3      	ldr	r3, [r4, #8]
 8014044:	3b01      	subs	r3, #1
 8014046:	60a3      	str	r3, [r4, #8]
 8014048:	6823      	ldr	r3, [r4, #0]
 801404a:	1c5a      	adds	r2, r3, #1
 801404c:	6022      	str	r2, [r4, #0]
 801404e:	701e      	strb	r6, [r3, #0]
 8014050:	6962      	ldr	r2, [r4, #20]
 8014052:	1c43      	adds	r3, r0, #1
 8014054:	429a      	cmp	r2, r3
 8014056:	d004      	beq.n	8014062 <__swbuf_r+0x6e>
 8014058:	89a3      	ldrh	r3, [r4, #12]
 801405a:	07db      	lsls	r3, r3, #31
 801405c:	d5e1      	bpl.n	8014022 <__swbuf_r+0x2e>
 801405e:	2e0a      	cmp	r6, #10
 8014060:	d1df      	bne.n	8014022 <__swbuf_r+0x2e>
 8014062:	4621      	mov	r1, r4
 8014064:	4628      	mov	r0, r5
 8014066:	f7ff fd83 	bl	8013b70 <_fflush_r>
 801406a:	2800      	cmp	r0, #0
 801406c:	d0d9      	beq.n	8014022 <__swbuf_r+0x2e>
 801406e:	e7d6      	b.n	801401e <__swbuf_r+0x2a>

08014070 <__swsetup_r>:
 8014070:	b538      	push	{r3, r4, r5, lr}
 8014072:	4b29      	ldr	r3, [pc, #164]	@ (8014118 <__swsetup_r+0xa8>)
 8014074:	4605      	mov	r5, r0
 8014076:	6818      	ldr	r0, [r3, #0]
 8014078:	460c      	mov	r4, r1
 801407a:	b118      	cbz	r0, 8014084 <__swsetup_r+0x14>
 801407c:	6a03      	ldr	r3, [r0, #32]
 801407e:	b90b      	cbnz	r3, 8014084 <__swsetup_r+0x14>
 8014080:	f7fe f80a 	bl	8012098 <__sinit>
 8014084:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014088:	0719      	lsls	r1, r3, #28
 801408a:	d422      	bmi.n	80140d2 <__swsetup_r+0x62>
 801408c:	06da      	lsls	r2, r3, #27
 801408e:	d407      	bmi.n	80140a0 <__swsetup_r+0x30>
 8014090:	2209      	movs	r2, #9
 8014092:	602a      	str	r2, [r5, #0]
 8014094:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014098:	81a3      	strh	r3, [r4, #12]
 801409a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801409e:	e033      	b.n	8014108 <__swsetup_r+0x98>
 80140a0:	0758      	lsls	r0, r3, #29
 80140a2:	d512      	bpl.n	80140ca <__swsetup_r+0x5a>
 80140a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80140a6:	b141      	cbz	r1, 80140ba <__swsetup_r+0x4a>
 80140a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80140ac:	4299      	cmp	r1, r3
 80140ae:	d002      	beq.n	80140b6 <__swsetup_r+0x46>
 80140b0:	4628      	mov	r0, r5
 80140b2:	f7fe feff 	bl	8012eb4 <_free_r>
 80140b6:	2300      	movs	r3, #0
 80140b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80140ba:	89a3      	ldrh	r3, [r4, #12]
 80140bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80140c0:	81a3      	strh	r3, [r4, #12]
 80140c2:	2300      	movs	r3, #0
 80140c4:	6063      	str	r3, [r4, #4]
 80140c6:	6923      	ldr	r3, [r4, #16]
 80140c8:	6023      	str	r3, [r4, #0]
 80140ca:	89a3      	ldrh	r3, [r4, #12]
 80140cc:	f043 0308 	orr.w	r3, r3, #8
 80140d0:	81a3      	strh	r3, [r4, #12]
 80140d2:	6923      	ldr	r3, [r4, #16]
 80140d4:	b94b      	cbnz	r3, 80140ea <__swsetup_r+0x7a>
 80140d6:	89a3      	ldrh	r3, [r4, #12]
 80140d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80140dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80140e0:	d003      	beq.n	80140ea <__swsetup_r+0x7a>
 80140e2:	4621      	mov	r1, r4
 80140e4:	4628      	mov	r0, r5
 80140e6:	f000 f883 	bl	80141f0 <__smakebuf_r>
 80140ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80140ee:	f013 0201 	ands.w	r2, r3, #1
 80140f2:	d00a      	beq.n	801410a <__swsetup_r+0x9a>
 80140f4:	2200      	movs	r2, #0
 80140f6:	60a2      	str	r2, [r4, #8]
 80140f8:	6962      	ldr	r2, [r4, #20]
 80140fa:	4252      	negs	r2, r2
 80140fc:	61a2      	str	r2, [r4, #24]
 80140fe:	6922      	ldr	r2, [r4, #16]
 8014100:	b942      	cbnz	r2, 8014114 <__swsetup_r+0xa4>
 8014102:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014106:	d1c5      	bne.n	8014094 <__swsetup_r+0x24>
 8014108:	bd38      	pop	{r3, r4, r5, pc}
 801410a:	0799      	lsls	r1, r3, #30
 801410c:	bf58      	it	pl
 801410e:	6962      	ldrpl	r2, [r4, #20]
 8014110:	60a2      	str	r2, [r4, #8]
 8014112:	e7f4      	b.n	80140fe <__swsetup_r+0x8e>
 8014114:	2000      	movs	r0, #0
 8014116:	e7f7      	b.n	8014108 <__swsetup_r+0x98>
 8014118:	24000054 	.word	0x24000054

0801411c <_raise_r>:
 801411c:	291f      	cmp	r1, #31
 801411e:	b538      	push	{r3, r4, r5, lr}
 8014120:	4605      	mov	r5, r0
 8014122:	460c      	mov	r4, r1
 8014124:	d904      	bls.n	8014130 <_raise_r+0x14>
 8014126:	2316      	movs	r3, #22
 8014128:	6003      	str	r3, [r0, #0]
 801412a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801412e:	bd38      	pop	{r3, r4, r5, pc}
 8014130:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014132:	b112      	cbz	r2, 801413a <_raise_r+0x1e>
 8014134:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014138:	b94b      	cbnz	r3, 801414e <_raise_r+0x32>
 801413a:	4628      	mov	r0, r5
 801413c:	f000 f830 	bl	80141a0 <_getpid_r>
 8014140:	4622      	mov	r2, r4
 8014142:	4601      	mov	r1, r0
 8014144:	4628      	mov	r0, r5
 8014146:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801414a:	f000 b817 	b.w	801417c <_kill_r>
 801414e:	2b01      	cmp	r3, #1
 8014150:	d00a      	beq.n	8014168 <_raise_r+0x4c>
 8014152:	1c59      	adds	r1, r3, #1
 8014154:	d103      	bne.n	801415e <_raise_r+0x42>
 8014156:	2316      	movs	r3, #22
 8014158:	6003      	str	r3, [r0, #0]
 801415a:	2001      	movs	r0, #1
 801415c:	e7e7      	b.n	801412e <_raise_r+0x12>
 801415e:	2100      	movs	r1, #0
 8014160:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014164:	4620      	mov	r0, r4
 8014166:	4798      	blx	r3
 8014168:	2000      	movs	r0, #0
 801416a:	e7e0      	b.n	801412e <_raise_r+0x12>

0801416c <raise>:
 801416c:	4b02      	ldr	r3, [pc, #8]	@ (8014178 <raise+0xc>)
 801416e:	4601      	mov	r1, r0
 8014170:	6818      	ldr	r0, [r3, #0]
 8014172:	f7ff bfd3 	b.w	801411c <_raise_r>
 8014176:	bf00      	nop
 8014178:	24000054 	.word	0x24000054

0801417c <_kill_r>:
 801417c:	b538      	push	{r3, r4, r5, lr}
 801417e:	4d07      	ldr	r5, [pc, #28]	@ (801419c <_kill_r+0x20>)
 8014180:	2300      	movs	r3, #0
 8014182:	4604      	mov	r4, r0
 8014184:	4608      	mov	r0, r1
 8014186:	4611      	mov	r1, r2
 8014188:	602b      	str	r3, [r5, #0]
 801418a:	f7f0 f8e5 	bl	8004358 <_kill>
 801418e:	1c43      	adds	r3, r0, #1
 8014190:	d102      	bne.n	8014198 <_kill_r+0x1c>
 8014192:	682b      	ldr	r3, [r5, #0]
 8014194:	b103      	cbz	r3, 8014198 <_kill_r+0x1c>
 8014196:	6023      	str	r3, [r4, #0]
 8014198:	bd38      	pop	{r3, r4, r5, pc}
 801419a:	bf00      	nop
 801419c:	240011fc 	.word	0x240011fc

080141a0 <_getpid_r>:
 80141a0:	f7f0 b8d2 	b.w	8004348 <_getpid>

080141a4 <__swhatbuf_r>:
 80141a4:	b570      	push	{r4, r5, r6, lr}
 80141a6:	460c      	mov	r4, r1
 80141a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141ac:	2900      	cmp	r1, #0
 80141ae:	b096      	sub	sp, #88	@ 0x58
 80141b0:	4615      	mov	r5, r2
 80141b2:	461e      	mov	r6, r3
 80141b4:	da0d      	bge.n	80141d2 <__swhatbuf_r+0x2e>
 80141b6:	89a3      	ldrh	r3, [r4, #12]
 80141b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80141bc:	f04f 0100 	mov.w	r1, #0
 80141c0:	bf14      	ite	ne
 80141c2:	2340      	movne	r3, #64	@ 0x40
 80141c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80141c8:	2000      	movs	r0, #0
 80141ca:	6031      	str	r1, [r6, #0]
 80141cc:	602b      	str	r3, [r5, #0]
 80141ce:	b016      	add	sp, #88	@ 0x58
 80141d0:	bd70      	pop	{r4, r5, r6, pc}
 80141d2:	466a      	mov	r2, sp
 80141d4:	f000 f848 	bl	8014268 <_fstat_r>
 80141d8:	2800      	cmp	r0, #0
 80141da:	dbec      	blt.n	80141b6 <__swhatbuf_r+0x12>
 80141dc:	9901      	ldr	r1, [sp, #4]
 80141de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80141e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80141e6:	4259      	negs	r1, r3
 80141e8:	4159      	adcs	r1, r3
 80141ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80141ee:	e7eb      	b.n	80141c8 <__swhatbuf_r+0x24>

080141f0 <__smakebuf_r>:
 80141f0:	898b      	ldrh	r3, [r1, #12]
 80141f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80141f4:	079d      	lsls	r5, r3, #30
 80141f6:	4606      	mov	r6, r0
 80141f8:	460c      	mov	r4, r1
 80141fa:	d507      	bpl.n	801420c <__smakebuf_r+0x1c>
 80141fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014200:	6023      	str	r3, [r4, #0]
 8014202:	6123      	str	r3, [r4, #16]
 8014204:	2301      	movs	r3, #1
 8014206:	6163      	str	r3, [r4, #20]
 8014208:	b003      	add	sp, #12
 801420a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801420c:	ab01      	add	r3, sp, #4
 801420e:	466a      	mov	r2, sp
 8014210:	f7ff ffc8 	bl	80141a4 <__swhatbuf_r>
 8014214:	9f00      	ldr	r7, [sp, #0]
 8014216:	4605      	mov	r5, r0
 8014218:	4639      	mov	r1, r7
 801421a:	4630      	mov	r0, r6
 801421c:	f7fe febe 	bl	8012f9c <_malloc_r>
 8014220:	b948      	cbnz	r0, 8014236 <__smakebuf_r+0x46>
 8014222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014226:	059a      	lsls	r2, r3, #22
 8014228:	d4ee      	bmi.n	8014208 <__smakebuf_r+0x18>
 801422a:	f023 0303 	bic.w	r3, r3, #3
 801422e:	f043 0302 	orr.w	r3, r3, #2
 8014232:	81a3      	strh	r3, [r4, #12]
 8014234:	e7e2      	b.n	80141fc <__smakebuf_r+0xc>
 8014236:	89a3      	ldrh	r3, [r4, #12]
 8014238:	6020      	str	r0, [r4, #0]
 801423a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801423e:	81a3      	strh	r3, [r4, #12]
 8014240:	9b01      	ldr	r3, [sp, #4]
 8014242:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014246:	b15b      	cbz	r3, 8014260 <__smakebuf_r+0x70>
 8014248:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801424c:	4630      	mov	r0, r6
 801424e:	f000 f81d 	bl	801428c <_isatty_r>
 8014252:	b128      	cbz	r0, 8014260 <__smakebuf_r+0x70>
 8014254:	89a3      	ldrh	r3, [r4, #12]
 8014256:	f023 0303 	bic.w	r3, r3, #3
 801425a:	f043 0301 	orr.w	r3, r3, #1
 801425e:	81a3      	strh	r3, [r4, #12]
 8014260:	89a3      	ldrh	r3, [r4, #12]
 8014262:	431d      	orrs	r5, r3
 8014264:	81a5      	strh	r5, [r4, #12]
 8014266:	e7cf      	b.n	8014208 <__smakebuf_r+0x18>

08014268 <_fstat_r>:
 8014268:	b538      	push	{r3, r4, r5, lr}
 801426a:	4d07      	ldr	r5, [pc, #28]	@ (8014288 <_fstat_r+0x20>)
 801426c:	2300      	movs	r3, #0
 801426e:	4604      	mov	r4, r0
 8014270:	4608      	mov	r0, r1
 8014272:	4611      	mov	r1, r2
 8014274:	602b      	str	r3, [r5, #0]
 8014276:	f7f0 f8cf 	bl	8004418 <_fstat>
 801427a:	1c43      	adds	r3, r0, #1
 801427c:	d102      	bne.n	8014284 <_fstat_r+0x1c>
 801427e:	682b      	ldr	r3, [r5, #0]
 8014280:	b103      	cbz	r3, 8014284 <_fstat_r+0x1c>
 8014282:	6023      	str	r3, [r4, #0]
 8014284:	bd38      	pop	{r3, r4, r5, pc}
 8014286:	bf00      	nop
 8014288:	240011fc 	.word	0x240011fc

0801428c <_isatty_r>:
 801428c:	b538      	push	{r3, r4, r5, lr}
 801428e:	4d06      	ldr	r5, [pc, #24]	@ (80142a8 <_isatty_r+0x1c>)
 8014290:	2300      	movs	r3, #0
 8014292:	4604      	mov	r4, r0
 8014294:	4608      	mov	r0, r1
 8014296:	602b      	str	r3, [r5, #0]
 8014298:	f7f0 f8ce 	bl	8004438 <_isatty>
 801429c:	1c43      	adds	r3, r0, #1
 801429e:	d102      	bne.n	80142a6 <_isatty_r+0x1a>
 80142a0:	682b      	ldr	r3, [r5, #0]
 80142a2:	b103      	cbz	r3, 80142a6 <_isatty_r+0x1a>
 80142a4:	6023      	str	r3, [r4, #0]
 80142a6:	bd38      	pop	{r3, r4, r5, pc}
 80142a8:	240011fc 	.word	0x240011fc

080142ac <_init>:
 80142ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142ae:	bf00      	nop
 80142b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80142b2:	bc08      	pop	{r3}
 80142b4:	469e      	mov	lr, r3
 80142b6:	4770      	bx	lr

080142b8 <_fini>:
 80142b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142ba:	bf00      	nop
 80142bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80142be:	bc08      	pop	{r3}
 80142c0:	469e      	mov	lr, r3
 80142c2:	4770      	bx	lr
