
PlasmaDriver_NucleoH723ZG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000145dc  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d38  080148b0  080148b0  000158b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080155e8  080155e8  000165e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080155f0  080155f0  000165f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080155f4  080155f4  000165f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000210  24000000  080155f8  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000210  08015808  00017210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000270  08015868  00017270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f40  240002d0  080158c8  000172d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24001210  080158c8  00018210  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000172d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024673  00000000  00000000  000172fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bb7  00000000  00000000  0003b971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bf8  00000000  00000000  0003f528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015de  00000000  00000000  00041120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038050  00000000  00000000  000426fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000228ec  00000000  00000000  0007a74e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016e21d  00000000  00000000  0009d03a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0020b257  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a30  00000000  00000000  0020b29c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00213ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002d0 	.word	0x240002d0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08014894 	.word	0x08014894

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002d4 	.word	0x240002d4
 800030c:	08014894 	.word	0x08014894

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <init_supply_struct>:
	char sHV;
} supply_struct;
static supply_struct supply_status;

static void init_supply_struct()
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
	supply_status.s15V = 0;
 80006b4:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <init_supply_struct+0x20>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	705a      	strb	r2, [r3, #1]
	supply_status.s3_3V = 0;
 80006ba:	4b05      	ldr	r3, [pc, #20]	@ (80006d0 <init_supply_struct+0x20>)
 80006bc:	2200      	movs	r2, #0
 80006be:	701a      	strb	r2, [r3, #0]
	supply_status.sHV = 0;
 80006c0:	4b03      	ldr	r3, [pc, #12]	@ (80006d0 <init_supply_struct+0x20>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	709a      	strb	r2, [r3, #2]
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	24000a40 	.word	0x24000a40

080006d4 <writeConfigFlash>:
// Prototypes
void measureVoltagesTemperaturesADC3(void);

// Write configuration to flash
static uint32_t writeConfigFlash(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
	uint32_t faultySector;	//Contains error code for faulty sector
	uint32_t error_code = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]

	// Unlock Flash
	HAL_FLASH_Unlock();
 80006de:	f00a fa11 	bl	800ab04 <HAL_FLASH_Unlock>

	// Erase flash sector 7
	if (HAL_FLASHEx_Erase(&sFlashErase, &faultySector) == HAL_OK)
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4619      	mov	r1, r3
 80006e6:	4815      	ldr	r0, [pc, #84]	@ (800073c <writeConfigFlash+0x68>)
 80006e8:	f00a faa8 	bl	800ac3c <HAL_FLASHEx_Erase>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d119      	bne.n	8000726 <writeConfigFlash+0x52>
	{
		for (uint32_t offset = 0; offset < sizeof(sFlashConfig); offset += FLASH_WORD)
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	e012      	b.n	800071e <writeConfigFlash+0x4a>
		{
			// Program one flash word (8*4 bytes)
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, FLASH_SECTOR7_START_ADDR + offset, ((uint32_t) &sFlashConfig) + offset) != HAL_OK)
 80006f8:	68ba      	ldr	r2, [r7, #8]
 80006fa:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <writeConfigFlash+0x6c>)
 80006fc:	4413      	add	r3, r2
 80006fe:	4911      	ldr	r1, [pc, #68]	@ (8000744 <writeConfigFlash+0x70>)
 8000700:	68ba      	ldr	r2, [r7, #8]
 8000702:	440a      	add	r2, r1
 8000704:	4619      	mov	r1, r3
 8000706:	2001      	movs	r0, #1
 8000708:	f00a f98e 	bl	800aa28 <HAL_FLASH_Program>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d002      	beq.n	8000718 <writeConfigFlash+0x44>
			{
				// Error during flash write
				error_code = HAL_FLASH_GetError();
 8000712:	f00a fa31 	bl	800ab78 <HAL_FLASH_GetError>
 8000716:	60f8      	str	r0, [r7, #12]
		for (uint32_t offset = 0; offset < sizeof(sFlashConfig); offset += FLASH_WORD)
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	3320      	adds	r3, #32
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d0e9      	beq.n	80006f8 <writeConfigFlash+0x24>
 8000724:	e002      	b.n	800072c <writeConfigFlash+0x58>
			}
		}
	}
	else
	{
		error_code = HAL_FLASH_GetError();
 8000726:	f00a fa27 	bl	800ab78 <HAL_FLASH_GetError>
 800072a:	60f8      	str	r0, [r7, #12]
	}

	  // Lock Flash
	  HAL_FLASH_Lock();
 800072c:	f00a fa0c 	bl	800ab48 <HAL_FLASH_Lock>

	  return error_code;
 8000730:	68fb      	ldr	r3, [r7, #12]
}
 8000732:	4618      	mov	r0, r3
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	24000024 	.word	0x24000024
 8000740:	080e0000 	.word	0x080e0000
 8000744:	24000a48 	.word	0x24000a48

08000748 <readConfigFlash>:

// Read configuration from flash
static void readConfigFlash(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
	// Read configuration from flash
	memcpy(&sFlashConfig, (void *) FLASH_SECTOR7_START_ADDR, sizeof(sFlashConfig));
 800074c:	4b04      	ldr	r3, [pc, #16]	@ (8000760 <readConfigFlash+0x18>)
 800074e:	781a      	ldrb	r2, [r3, #0]
 8000750:	4b04      	ldr	r3, [pc, #16]	@ (8000764 <readConfigFlash+0x1c>)
 8000752:	701a      	strb	r2, [r3, #0]
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	080e0000 	.word	0x080e0000
 8000764:	24000a48 	.word	0x24000a48

08000768 <printCR>:

// Print CR
static void printCR(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, (uint8_t *) "\n\r", 2, 1000);
 800076c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000770:	2202      	movs	r2, #2
 8000772:	4903      	ldr	r1, [pc, #12]	@ (8000780 <printCR+0x18>)
 8000774:	4803      	ldr	r0, [pc, #12]	@ (8000784 <printCR+0x1c>)
 8000776:	f00f fee4 	bl	8010542 <HAL_UART_Transmit>
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	080148b0 	.word	0x080148b0
 8000784:	24000e38 	.word	0x24000e38

08000788 <printString>:

// Print string on UART3
static void printString(char *str)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) str, strlen(str), 1000);
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f7ff fe0d 	bl	80003b0 <strlen>
 8000796:	4603      	mov	r3, r0
 8000798:	b29a      	uxth	r2, r3
 800079a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800079e:	6879      	ldr	r1, [r7, #4]
 80007a0:	4803      	ldr	r0, [pc, #12]	@ (80007b0 <printString+0x28>)
 80007a2:	f00f fece 	bl	8010542 <HAL_UART_Transmit>
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	24000e38 	.word	0x24000e38

080007b4 <printConfigFlash>:

// Print configuration on UART3
static void printConfigFlash(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	printString("\n\rCurrent configuration:");
 80007b8:	480e      	ldr	r0, [pc, #56]	@ (80007f4 <printConfigFlash+0x40>)
 80007ba:	f7ff ffe5 	bl	8000788 <printString>
	printString("\n\r  Mode = ");
 80007be:	480e      	ldr	r0, [pc, #56]	@ (80007f8 <printConfigFlash+0x44>)
 80007c0:	f7ff ffe2 	bl	8000788 <printString>
	if (sFlashConfig.mode == TEST_MODE)
 80007c4:	4b0d      	ldr	r3, [pc, #52]	@ (80007fc <printConfigFlash+0x48>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d103      	bne.n	80007d4 <printConfigFlash+0x20>
		printString("TEST");
 80007cc:	480c      	ldr	r0, [pc, #48]	@ (8000800 <printConfigFlash+0x4c>)
 80007ce:	f7ff ffdb 	bl	8000788 <printString>
 80007d2:	e00a      	b.n	80007ea <printConfigFlash+0x36>
	else if (sFlashConfig.mode == RUN_MODE)
 80007d4:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <printConfigFlash+0x48>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d103      	bne.n	80007e4 <printConfigFlash+0x30>
		printString("RUN");
 80007dc:	4809      	ldr	r0, [pc, #36]	@ (8000804 <printConfigFlash+0x50>)
 80007de:	f7ff ffd3 	bl	8000788 <printString>
 80007e2:	e002      	b.n	80007ea <printConfigFlash+0x36>
	else
		printString("UNKNOWN");
 80007e4:	4808      	ldr	r0, [pc, #32]	@ (8000808 <printConfigFlash+0x54>)
 80007e6:	f7ff ffcf 	bl	8000788 <printString>
	printCR();
 80007ea:	f7ff ffbd 	bl	8000768 <printCR>
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	080148b4 	.word	0x080148b4
 80007f8:	080148d0 	.word	0x080148d0
 80007fc:	24000a48 	.word	0x24000a48
 8000800:	080148dc 	.word	0x080148dc
 8000804:	080148e4 	.word	0x080148e4
 8000808:	080148e8 	.word	0x080148e8

0800080c <printNumber>:

// Print 16bit unsigned integer on UART3
static void printNumber(const char *text, uint16_t number, uint8_t CR)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b09e      	sub	sp, #120	@ 0x78
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	460b      	mov	r3, r1
 8000816:	807b      	strh	r3, [r7, #2]
 8000818:	4613      	mov	r3, r2
 800081a:	707b      	strb	r3, [r7, #1]
	char s_output[100];
	char s_number[7];
	strcpy(s_output, text);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	6879      	ldr	r1, [r7, #4]
 8000822:	4618      	mov	r0, r3
 8000824:	f012 f851 	bl	80128ca <strcpy>
	itoa(number, s_number, 10);
 8000828:	887b      	ldrh	r3, [r7, #2]
 800082a:	f107 010c 	add.w	r1, r7, #12
 800082e:	220a      	movs	r2, #10
 8000830:	4618      	mov	r0, r3
 8000832:	f011 f983 	bl	8011b3c <itoa>
	strcat(s_output, s_number);
 8000836:	f107 020c 	add.w	r2, r7, #12
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4611      	mov	r1, r2
 8000840:	4618      	mov	r0, r3
 8000842:	f011 ffa6 	bl	8012792 <strcat>
	if (CR)
 8000846:	787b      	ldrb	r3, [r7, #1]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d00e      	beq.n	800086a <printNumber+0x5e>
	{
		strcat(s_output, "\n\r");
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fdad 	bl	80003b0 <strlen>
 8000856:	4603      	mov	r3, r0
 8000858:	461a      	mov	r2, r3
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	4413      	add	r3, r2
 8000860:	4a0b      	ldr	r2, [pc, #44]	@ (8000890 <printNumber+0x84>)
 8000862:	8811      	ldrh	r1, [r2, #0]
 8000864:	7892      	ldrb	r2, [r2, #2]
 8000866:	8019      	strh	r1, [r3, #0]
 8000868:	709a      	strb	r2, [r3, #2]
	}
	HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff fd9e 	bl	80003b0 <strlen>
 8000874:	4603      	mov	r3, r0
 8000876:	b29a      	uxth	r2, r3
 8000878:	f107 0114 	add.w	r1, r7, #20
 800087c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000880:	4804      	ldr	r0, [pc, #16]	@ (8000894 <printNumber+0x88>)
 8000882:	f00f fe5e 	bl	8010542 <HAL_UART_Transmit>
}
 8000886:	bf00      	nop
 8000888:	3778      	adds	r7, #120	@ 0x78
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	080148b0 	.word	0x080148b0
 8000894:	24000e38 	.word	0x24000e38

08000898 <printHALErrorStatus>:

// Print HAL error status on UART3
static void	printHALErrorStatus(HAL_StatusTypeDef HALresp, const char *text)
{
 8000898:	b5b0      	push	{r4, r5, r7, lr}
 800089a:	b09c      	sub	sp, #112	@ 0x70
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	6039      	str	r1, [r7, #0]
 80008a2:	71fb      	strb	r3, [r7, #7]
	char s_output[100];

	switch (HALresp)
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	2b03      	cmp	r3, #3
 80008a8:	d828      	bhi.n	80008fc <printHALErrorStatus+0x64>
 80008aa:	a201      	add	r2, pc, #4	@ (adr r2, 80008b0 <printHALErrorStatus+0x18>)
 80008ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b0:	080008fd 	.word	0x080008fd
 80008b4:	080008c1 	.word	0x080008c1
 80008b8:	080008d5 	.word	0x080008d5
 80008bc:	080008e9 	.word	0x080008e9
	{
		case HAL_ERROR:
			strcpy(s_output, "** HAL ERROR **: ");
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	4a15      	ldr	r2, [pc, #84]	@ (800091c <printHALErrorStatus+0x84>)
 80008c6:	461c      	mov	r4, r3
 80008c8:	4615      	mov	r5, r2
 80008ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ce:	682b      	ldr	r3, [r5, #0]
 80008d0:	8023      	strh	r3, [r4, #0]
		break;
 80008d2:	e013      	b.n	80008fc <printHALErrorStatus+0x64>

		case HAL_BUSY:
			strcpy(s_output, "** HAL BUSY **: ");
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	4a11      	ldr	r2, [pc, #68]	@ (8000920 <printHALErrorStatus+0x88>)
 80008da:	461c      	mov	r4, r3
 80008dc:	4615      	mov	r5, r2
 80008de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008e2:	682b      	ldr	r3, [r5, #0]
 80008e4:	7023      	strb	r3, [r4, #0]
		break;
 80008e6:	e009      	b.n	80008fc <printHALErrorStatus+0x64>

		case HAL_TIMEOUT:
			strcpy(s_output, "** HAL TIMEOUT **: ");
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000924 <printHALErrorStatus+0x8c>)
 80008ee:	461c      	mov	r4, r3
 80008f0:	4615      	mov	r5, r2
 80008f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008f6:	682b      	ldr	r3, [r5, #0]
 80008f8:	6023      	str	r3, [r4, #0]
		break;
 80008fa:	bf00      	nop

		case HAL_OK:
		break;
	}
	strcat(s_output, text);
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	6839      	ldr	r1, [r7, #0]
 8000902:	4618      	mov	r0, r3
 8000904:	f011 ff45 	bl	8012792 <strcat>
	printString(s_output);
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ff3b 	bl	8000788 <printString>
}
 8000912:	bf00      	nop
 8000914:	3770      	adds	r7, #112	@ 0x70
 8000916:	46bd      	mov	sp, r7
 8000918:	bdb0      	pop	{r4, r5, r7, pc}
 800091a:	bf00      	nop
 800091c:	080148f0 	.word	0x080148f0
 8000920:	08014904 	.word	0x08014904
 8000924:	08014918 	.word	0x08014918

08000928 <stopHbridge>:

void stopHbridge(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]

	//Stop TIMER 1 PWM & interrupts
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);  //This will stop channel PWM1
 800093c:	2100      	movs	r1, #0
 800093e:	480f      	ldr	r0, [pc, #60]	@ (800097c <stopHbridge+0x54>)
 8000940:	f00e fa14 	bl	800ed6c <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); //This will stop channel PWM1N
 8000944:	2100      	movs	r1, #0
 8000946:	480d      	ldr	r0, [pc, #52]	@ (800097c <stopHbridge+0x54>)
 8000948:	f00f fbec 	bl	8010124 <HAL_TIMEx_PWMN_Stop>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, TIM1_CH1N_Pin|TIM1_CH1_Pin, GPIO_PIN_SET);
 800094c:	2201      	movs	r2, #1
 800094e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000952:	480b      	ldr	r0, [pc, #44]	@ (8000980 <stopHbridge+0x58>)
 8000954:	f00a fc06 	bl	800b164 <HAL_GPIO_WritePin>
	/*Configure GPIO pins : LED_GREEN_Pin LINE_DRIVER1_ENABLE_Pin LINE_DRIVER2_ENABLE_Pin LED_RED_Pin */
	GPIO_InitStruct.Pin = TIM1_CH1N_Pin|TIM1_CH1_Pin;
 8000958:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800095c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	2301      	movs	r3, #1
 8000960:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	4619      	mov	r1, r3
 800096e:	4804      	ldr	r0, [pc, #16]	@ (8000980 <stopHbridge+0x58>)
 8000970:	f00a fa38 	bl	800ade4 <HAL_GPIO_Init>

}
 8000974:	bf00      	nop
 8000976:	3718      	adds	r7, #24
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	24000ecc 	.word	0x24000ecc
 8000980:	58021000 	.word	0x58021000

08000984 <printHbridgeData>:

// Print H-bridge data on UART3
static void printHbridgeData(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b09c      	sub	sp, #112	@ 0x70
 8000988:	af02      	add	r7, sp, #8
	char s_output[100];
	sprintf(s_output, "\n\rH-bridge 1=On 0=Off: %u, Frequency: %u (Hz), Dead time: %u (%%)\n\r", sHbridge.on, sHbridge.frequency, sHbridge.deadtime);
 800098a:	4b0f      	ldr	r3, [pc, #60]	@ (80009c8 <printHbridgeData+0x44>)
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	461a      	mov	r2, r3
 8000990:	4b0d      	ldr	r3, [pc, #52]	@ (80009c8 <printHbridgeData+0x44>)
 8000992:	885b      	ldrh	r3, [r3, #2]
 8000994:	4619      	mov	r1, r3
 8000996:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <printHbridgeData+0x44>)
 8000998:	889b      	ldrh	r3, [r3, #4]
 800099a:	1d38      	adds	r0, r7, #4
 800099c:	9300      	str	r3, [sp, #0]
 800099e:	460b      	mov	r3, r1
 80009a0:	490a      	ldr	r1, [pc, #40]	@ (80009cc <printHbridgeData+0x48>)
 80009a2:	f011 fe8b 	bl	80126bc <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fd01 	bl	80003b0 <strlen>
 80009ae:	4603      	mov	r3, r0
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	1d39      	adds	r1, r7, #4
 80009b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009b8:	4805      	ldr	r0, [pc, #20]	@ (80009d0 <printHbridgeData+0x4c>)
 80009ba:	f00f fdc2 	bl	8010542 <HAL_UART_Transmit>
}
 80009be:	bf00      	nop
 80009c0:	3768      	adds	r7, #104	@ 0x68
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	2400001c 	.word	0x2400001c
 80009cc:	0801492c 	.word	0x0801492c
 80009d0:	24000e38 	.word	0x24000e38
 80009d4:	00000000 	.word	0x00000000

080009d8 <programHbridge>:



// Program TIMER 1 controlling the H-bridge
static void programHbridge()
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b0a6      	sub	sp, #152	@ 0x98
 80009dc:	af00      	add	r7, sp, #0
	uint8_t DT, DTG;
	float tDTS = 1E6/((float) TIMER_BASE_CLOCK);  //Minimum step in usec
 80009de:	4b90      	ldr	r3, [pc, #576]	@ (8000c20 <programHbridge+0x248>)
 80009e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	// TIMER 1 has already been initialized using HAL.
	// Program the H-bridge TIMER 1 - Clock TIMER_BASE_CLOCK

	// Calculate the period and duty cycle based on the frequency requested.
	timARR_f = ((float) TIMER_BASE_CLOCK) / ((float) sHbridge.frequency);
 80009e4:	4b8f      	ldr	r3, [pc, #572]	@ (8000c24 <programHbridge+0x24c>)
 80009e6:	885b      	ldrh	r3, [r3, #2]
 80009e8:	ee07 3a90 	vmov	s15, r3
 80009ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009f0:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8000c28 <programHbridge+0x250>
 80009f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009f8:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
	timARR = (uint32_t) (timARR_f + 0.5);							// Set period counter
 80009fc:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8000a00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a04:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000a08:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000a0c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a10:	ee17 3a90 	vmov	r3, s15
 8000a14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	timCCR1 = timARR / 2;  											// 50% duty cycle
 8000a18:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a1c:	085b      	lsrs	r3, r3, #1
 8000a1e:	67fb      	str	r3, [r7, #124]	@ 0x7c

	// Print out the set frequency
	if (debug == 1)
 8000a20:	4b82      	ldr	r3, [pc, #520]	@ (8000c2c <programHbridge+0x254>)
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d105      	bne.n	8000a34 <programHbridge+0x5c>
	{
		value_int = ((uint32_t) TIMER_BASE_CLOCK) / timARR;
 8000a28:	4a81      	ldr	r2, [pc, #516]	@ (8000c30 <programHbridge+0x258>)
 8000a2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a32:	67bb      	str	r3, [r7, #120]	@ 0x78
	//  DTG[7:5] = 10x => DT = (64 + DTG[5:0]) x tDTG with tDTG =2xtDTS.	 max (64 + 63)*2*tDTS  	: 3.7236 usec - 7.3890 usec
	//  DTG[7:5] = 110 => DT = (32 + DTG[4:0]) x tDTG with tDTG =8xtDTS.     max (32 + 31)*8*tDTS   : 7.4472 usec - 14.662 usec
	//  DTG[7:5] = 111 => DT = (32 + DTG[4:0]) x tDTG with tDTG = 16 x tDTS. max (32 + 31)*16*tDTS 	: 14.895 usec - 29.324 usec

	// Calculate dead time in usec
	req_dtime_us = (((float) sHbridge.deadtime))*(10000./(float) sHbridge.frequency);
 8000a34:	4b7b      	ldr	r3, [pc, #492]	@ (8000c24 <programHbridge+0x24c>)
 8000a36:	889b      	ldrh	r3, [r3, #4]
 8000a38:	ee07 3a90 	vmov	s15, r3
 8000a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a40:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000a44:	4b77      	ldr	r3, [pc, #476]	@ (8000c24 <programHbridge+0x24c>)
 8000a46:	885b      	ldrh	r3, [r3, #2]
 8000a48:	ee07 3a90 	vmov	s15, r3
 8000a4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a50:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000a54:	ed9f 4b70 	vldr	d4, [pc, #448]	@ 8000c18 <programHbridge+0x240>
 8000a58:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000a5c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000a60:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a64:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
		printString(s_output);
	}
*/

	// Minimum allowed dead time is 1 usec.
	if (req_dtime_us < 1.0)
 8000a68:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8000a6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000a70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a78:	d503      	bpl.n	8000a82 <programHbridge+0xaa>
		req_dtime_us = 1.0;
 8000a7a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000a7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	if (req_dtime_us <= 127*tDTS) //3.6946
 8000a82:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000a86:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8000c34 <programHbridge+0x25c>
 8000a8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a8e:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000a92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a9a:	d81e      	bhi.n	8000ada <programHbridge+0x102>
	{
		DT = (uint8_t) (req_dtime_us/tDTS + 0.5);
 8000a9c:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000aa0:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000aa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000aa8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000aac:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000ab0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ab4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ab8:	edc7 7a01 	vstr	s15, [r7, #4]
 8000abc:	793b      	ldrb	r3, [r7, #4]
 8000abe:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 127)
 8000ac2:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	da02      	bge.n	8000ad0 <programHbridge+0xf8>
			DT = 127;
 8000aca:	237f      	movs	r3, #127	@ 0x7f
 8000acc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT;
 8000ad0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000ad4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000ad8:	e0bb      	b.n	8000c52 <programHbridge+0x27a>
	}
	else if (req_dtime_us <= 127*2*tDTS) //7.3890
 8000ada:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000ade:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8000c38 <programHbridge+0x260>
 8000ae2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ae6:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000aea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000af2:	d825      	bhi.n	8000b40 <programHbridge+0x168>
	{
		DT = (uint8_t) ((req_dtime_us/(2*tDTS)) - 64 + 0.5);
 8000af4:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000af8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000afc:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000b00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b04:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8000c3c <programHbridge+0x264>
 8000b08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b0c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b10:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000b14:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b18:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b1c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000b20:	793b      	ldrb	r3, [r7, #4]
 8000b22:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 63)
 8000b26:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000b2a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b2c:	d902      	bls.n	8000b34 <programHbridge+0x15c>
			DT = 63;
 8000b2e:	233f      	movs	r3, #63	@ 0x3f
 8000b30:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT + 0x80;
 8000b34:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000b38:	3b80      	subs	r3, #128	@ 0x80
 8000b3a:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000b3e:	e088      	b.n	8000c52 <programHbridge+0x27a>
	}
	else if (req_dtime_us <= 63*8*tDTS) //14.662
 8000b40:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000b44:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8000c40 <programHbridge+0x268>
 8000b48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b4c:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000b50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b58:	d827      	bhi.n	8000baa <programHbridge+0x1d2>
	{
		DT = (uint8_t) ((req_dtime_us/(8*tDTS)) - 32 + 0.5);
 8000b5a:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000b5e:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8000b62:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b66:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b6e:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8000c44 <programHbridge+0x26c>
 8000b72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b76:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b7a:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000b7e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b82:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b86:	edc7 7a01 	vstr	s15, [r7, #4]
 8000b8a:	793b      	ldrb	r3, [r7, #4]
 8000b8c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 31)
 8000b90:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000b94:	2b1f      	cmp	r3, #31
 8000b96:	d902      	bls.n	8000b9e <programHbridge+0x1c6>
			DT = 31;
 8000b98:	231f      	movs	r3, #31
 8000b9a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT + 0xC0;
 8000b9e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000ba2:	3b40      	subs	r3, #64	@ 0x40
 8000ba4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000ba8:	e053      	b.n	8000c52 <programHbridge+0x27a>
	}
	else if (req_dtime_us <= 63*16*tDTS) //29.324
 8000baa:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000bae:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8000c48 <programHbridge+0x270>
 8000bb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bb6:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000bba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bc2:	d843      	bhi.n	8000c4c <programHbridge+0x274>
	{
		DT = (uint8_t) ((req_dtime_us/(16*tDTS)) - 32 + 0.5);
 8000bc4:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000bc8:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8000bcc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000bd0:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000bd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bd8:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000c44 <programHbridge+0x26c>
 8000bdc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000be0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000be4:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000be8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000bec:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000bf0:	edc7 7a01 	vstr	s15, [r7, #4]
 8000bf4:	793b      	ldrb	r3, [r7, #4]
 8000bf6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 31)
 8000bfa:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000bfe:	2b1f      	cmp	r3, #31
 8000c00:	d902      	bls.n	8000c08 <programHbridge+0x230>
			DT = 31;
 8000c02:	231f      	movs	r3, #31
 8000c04:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT + 0xE0;
 8000c08:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000c0c:	3b20      	subs	r3, #32
 8000c0e:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000c12:	e01e      	b.n	8000c52 <programHbridge+0x27a>
 8000c14:	f3af 8000 	nop.w
 8000c18:	00000000 	.word	0x00000000
 8000c1c:	40c38800 	.word	0x40c38800
 8000c20:	3cee500f 	.word	0x3cee500f
 8000c24:	2400001c 	.word	0x2400001c
 8000c28:	4c032156 	.word	0x4c032156
 8000c2c:	24000000 	.word	0x24000000
 8000c30:	020c8558 	.word	0x020c8558
 8000c34:	42fe0000 	.word	0x42fe0000
 8000c38:	437e0000 	.word	0x437e0000
 8000c3c:	42800000 	.word	0x42800000
 8000c40:	43fc0000 	.word	0x43fc0000
 8000c44:	42000000 	.word	0x42000000
 8000c48:	447c0000 	.word	0x447c0000
	}
	else
		DTG = 255;
 8000c4c:	23ff      	movs	r3, #255	@ 0xff
 8000c4e:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96

	uint32_t temp = TIM1->BDTR & 0xFFFFFF00;		//Mask out DTG
 8000c52:	4b4e      	ldr	r3, [pc, #312]	@ (8000d8c <programHbridge+0x3b4>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c56:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000c5a:	677b      	str	r3, [r7, #116]	@ 0x74
	timBDTR = temp | DTG;							//Add new DTG
 8000c5c:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000c60:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000c62:	4313      	orrs	r3, r2
 8000c64:	673b      	str	r3, [r7, #112]	@ 0x70

	//Change timer1 settings
	htim1.Init.Period = timARR;   // Updating internal structure for timer
 8000c66:	4a4a      	ldr	r2, [pc, #296]	@ (8000d90 <programHbridge+0x3b8>)
 8000c68:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000c6c:	60d3      	str	r3, [r2, #12]
	TIM1->ARR = timARR;			  // Update period
 8000c6e:	4a47      	ldr	r2, [pc, #284]	@ (8000d8c <programHbridge+0x3b4>)
 8000c70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000c74:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM1->CCR1 = timCCR1;		  // Update duty cycle
 8000c76:	4a45      	ldr	r2, [pc, #276]	@ (8000d8c <programHbridge+0x3b4>)
 8000c78:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000c7a:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM1->BDTR = timBDTR;	      // Update dead time
 8000c7c:	4a43      	ldr	r2, [pc, #268]	@ (8000d8c <programHbridge+0x3b4>)
 8000c7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000c80:	6453      	str	r3, [r2, #68]	@ 0x44

	if (debug == 1) {
 8000c82:	4b44      	ldr	r3, [pc, #272]	@ (8000d94 <programHbridge+0x3bc>)
 8000c84:	881b      	ldrh	r3, [r3, #0]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d160      	bne.n	8000d4c <programHbridge+0x374>
		//sprintf(s_output, "ARR %lu CCR1 %lu BDTR %lu", timARR, timCCR1, timBDTR & 0xFF);
		//printString(s_output);

		float calcDT = 0;
 8000c8a:	f04f 0300 	mov.w	r3, #0
 8000c8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		//  DTG[7:5] = 0xx => DT = DTG[7:0] x tDTG with tDTG = tDTS.			 max 127*tDTS   		: 0.0000 usec - 3.6946 usec
		if ((DTG & 0x80) == 0) {
 8000c92:	f997 3096 	ldrsb.w	r3, [r7, #150]	@ 0x96
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db0b      	blt.n	8000cb2 <programHbridge+0x2da>
			calcDT = DTG*tDTS;
 8000c9a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000c9e:	ee07 3a90 	vmov	s15, r3
 8000ca2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ca6:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cae:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		//  DTG[7:5] = 10x => DT = (64 + DTG[5:0]) x tDTG with tDTG =2xtDTS.	 max (64 + 63)*2*tDTS  	: 3.7236 usec - 7.3890 usec
		if ((DTG & 0xC0) == 0x80) {
 8000cb2:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000cb6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000cba:	2b80      	cmp	r3, #128	@ 0x80
 8000cbc:	d10f      	bne.n	8000cde <programHbridge+0x306>
			calcDT = (64 + (DTG & 0x3F))*2*tDTS;
 8000cbe:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000cc2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000cc6:	3340      	adds	r3, #64	@ 0x40
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	ee07 3a90 	vmov	s15, r3
 8000cce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cd2:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cda:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		//  DTG[7:5] = 110 => DT = (32 + DTG[4:0]) x tDTG with tDTG =8xtDTS.     max (32 + 31)*8*tDTS   : 7.4472 usec - 14.662 usec
		if ((DTG & 0xE0) == 0xC0) {
 8000cde:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000ce2:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000ce6:	2bc0      	cmp	r3, #192	@ 0xc0
 8000ce8:	d10f      	bne.n	8000d0a <programHbridge+0x332>
			calcDT = (32 + (DTG & 0x1F))*8*tDTS;
 8000cea:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000cee:	f003 031f 	and.w	r3, r3, #31
 8000cf2:	3320      	adds	r3, #32
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	ee07 3a90 	vmov	s15, r3
 8000cfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cfe:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d06:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		//  DTG[7:5] = 111 => DT = (32 + DTG[4:0]) x tDTG with tDTG = 16 x tDTS. max (32 + 31)*16*tDTS 	: 14.895 usec - 29.324 usec
		if ((DTG & 0xE0) == 0xE0) {
 8000d0a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000d0e:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000d12:	2be0      	cmp	r3, #224	@ 0xe0
 8000d14:	d10f      	bne.n	8000d36 <programHbridge+0x35e>
			calcDT = (32 + (DTG & 0x1F))*16*tDTS;
 8000d16:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000d1a:	f003 031f 	and.w	r3, r3, #31
 8000d1e:	3320      	adds	r3, #32
 8000d20:	011b      	lsls	r3, r3, #4
 8000d22:	ee07 3a90 	vmov	s15, r3
 8000d26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d2a:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d32:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		value_int = (uint32_t) 1000*calcDT;
 8000d36:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8000d3a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000d98 <programHbridge+0x3c0>
 8000d3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d46:	ee17 3a90 	vmov	r3, s15
 8000d4a:	67bb      	str	r3, [r7, #120]	@ 0x78
		//sprintf(s_output, "\n\rSet dead time: %lu (ns)\n\r", value_int);
		//printString(s_output);
	}

	//Start driving the H-bridge
	if (sHbridge.on && (TIM_CHANNEL_STATE_GET(&htim1, TIM_CHANNEL_1) == HAL_TIM_CHANNEL_STATE_READY))
 8000d4c:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <programHbridge+0x3c4>)
 8000d4e:	881b      	ldrh	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d010      	beq.n	8000d76 <programHbridge+0x39e>
 8000d54:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <programHbridge+0x3b8>)
 8000d56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d10a      	bne.n	8000d76 <programHbridge+0x39e>
	{
		HAL_TIM_MspPostInit(&htim1);	//Setup GPIO for timer alternate function
 8000d60:	480b      	ldr	r0, [pc, #44]	@ (8000d90 <programHbridge+0x3b8>)
 8000d62:	f003 fce3 	bl	800472c <HAL_TIM_MspPostInit>
		//Start TIMER 1 PWM & interrupts
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  //This will start channel PWM1
 8000d66:	2100      	movs	r1, #0
 8000d68:	4809      	ldr	r0, [pc, #36]	@ (8000d90 <programHbridge+0x3b8>)
 8000d6a:	f00d fee3 	bl	800eb34 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); //This will start channel PWM1N
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4807      	ldr	r0, [pc, #28]	@ (8000d90 <programHbridge+0x3b8>)
 8000d72:	f00f f907 	bl	800ff84 <HAL_TIMEx_PWMN_Start>
	}

	//Stop driving the H-bridge
	if (!sHbridge.on)
 8000d76:	4b09      	ldr	r3, [pc, #36]	@ (8000d9c <programHbridge+0x3c4>)
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d101      	bne.n	8000d82 <programHbridge+0x3aa>
	{
		stopHbridge();
 8000d7e:	f7ff fdd3 	bl	8000928 <stopHbridge>
	}

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);

}
 8000d82:	bf00      	nop
 8000d84:	3798      	adds	r7, #152	@ 0x98
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40010000 	.word	0x40010000
 8000d90:	24000ecc 	.word	0x24000ecc
 8000d94:	24000000 	.word	0x24000000
 8000d98:	447a0000 	.word	0x447a0000
 8000d9c:	2400001c 	.word	0x2400001c

08000da0 <convertADC12data>:
#define ADC1_VplaL1			4	//Plasma voltage L1
#define ADC2_VplaL2			5	//Plasma voltage L2

//Convert ADC1 & ADC2 data to voltages and current
float convertADC12data(uint32_t item, char **text)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
	float result = 0;
 8000daa:	f04f 0300 	mov.w	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
* 3.3           *   (ADCData/65536.0)       *    1000
*   ^                   ^       ^                  ^
*   |                   |       |                  |
 * full scale V      Raw Data   Max ADC Value    Convert to mV
 */
	switch (item % (2*ADC12_NO_CHANNELS)) {
 8000db0:	6879      	ldr	r1, [r7, #4]
 8000db2:	4ba3      	ldr	r3, [pc, #652]	@ (8001040 <convertADC12data+0x2a0>)
 8000db4:	fba3 2301 	umull	r2, r3, r3, r1
 8000db8:	089a      	lsrs	r2, r3, #2
 8000dba:	4613      	mov	r3, r2
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	4413      	add	r3, r2
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	1aca      	subs	r2, r1, r3
 8000dc4:	2a05      	cmp	r2, #5
 8000dc6:	f200 8107 	bhi.w	8000fd8 <convertADC12data+0x238>
 8000dca:	a301      	add	r3, pc, #4	@ (adr r3, 8000dd0 <convertADC12data+0x30>)
 8000dcc:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8000dd0:	08000de9 	.word	0x08000de9
 8000dd4:	08000e0d 	.word	0x08000e0d
 8000dd8:	08000e79 	.word	0x08000e79
 8000ddc:	08000eb5 	.word	0x08000eb5
 8000de0:	08000eef 	.word	0x08000eef
 8000de4:	08000f59 	.word	0x08000f59
		case ADC1_TIM1_CH1:
			result = sADC.adc12_data[item];
 8000de8:	4a96      	ldr	r2, [pc, #600]	@ (8001044 <convertADC12data+0x2a4>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000df0:	ee07 3a90 	vmov	s15, r3
 8000df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000df8:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f000 80df 	beq.w	8000fc2 <convertADC12data+0x222>
				*text ="ADC1_TIM1_CH1";
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	4a90      	ldr	r2, [pc, #576]	@ (8001048 <convertADC12data+0x2a8>)
 8000e08:	601a      	str	r2, [r3, #0]
			break;
 8000e0a:	e0da      	b.n	8000fc2 <convertADC12data+0x222>

		case ADC2_Is:
			V = 3.3*(((float) sADC.adc12_data[item])/65536.0)*1000;
 8000e0c:	4a8d      	ldr	r2, [pc, #564]	@ (8001044 <convertADC12data+0x2a4>)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e14:	ee07 3a90 	vmov	s15, r3
 8000e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e1c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e20:	ed9f 5b73 	vldr	d5, [pc, #460]	@ 8000ff0 <convertADC12data+0x250>
 8000e24:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e28:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8000ff8 <convertADC12data+0x258>
 8000e2c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e30:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8001000 <convertADC12data+0x260>
 8000e34:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e38:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e3c:	edc7 7a02 	vstr	s15, [r7, #8]
			result =  2000*(V - 1.585714)/3.594286; //V;
 8000e40:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e44:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e48:	ed9f 6b6f 	vldr	d6, [pc, #444]	@ 8001008 <convertADC12data+0x268>
 8000e4c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e50:	ed9f 6b6f 	vldr	d6, [pc, #444]	@ 8001010 <convertADC12data+0x270>
 8000e54:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000e58:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8001018 <convertADC12data+0x278>
 8000e5c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e60:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e64:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f000 80ab 	beq.w	8000fc6 <convertADC12data+0x226>
				*text ="ADC2_Is(mA)";
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	4a76      	ldr	r2, [pc, #472]	@ (800104c <convertADC12data+0x2ac>)
 8000e74:	601a      	str	r2, [r3, #0]
			break;
 8000e76:	e0a6      	b.n	8000fc6 <convertADC12data+0x226>

		case ADC1_VbriS1:
			result =  1000*((12.0+2000.0)/12.0)*3.3*(((float) sADC.adc12_data[item])/65536.0); // 3.3*(((float) sADC.adc12_data[item])/65536.0)*1000;
 8000e78:	4a72      	ldr	r2, [pc, #456]	@ (8001044 <convertADC12data+0x2a4>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e80:	ee07 3a90 	vmov	s15, r3
 8000e84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e88:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e8c:	ed9f 5b58 	vldr	d5, [pc, #352]	@ 8000ff0 <convertADC12data+0x250>
 8000e90:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e94:	ed9f 6b62 	vldr	d6, [pc, #392]	@ 8001020 <convertADC12data+0x280>
 8000e98:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e9c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ea0:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f000 808f 	beq.w	8000fca <convertADC12data+0x22a>
				*text ="ADC1_VbriS1(mV)";
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	4a68      	ldr	r2, [pc, #416]	@ (8001050 <convertADC12data+0x2b0>)
 8000eb0:	601a      	str	r2, [r3, #0]
			break;
 8000eb2:	e08a      	b.n	8000fca <convertADC12data+0x22a>

		case ADC2_VbriS2:
			result =  1000*((12.0+2000.0)/12.0)*3.3*(((float) sADC.adc12_data[item])/65536.0); //3.3*(((float) sADC.adc12_data[item])/65536.0) * 1000;
 8000eb4:	4a63      	ldr	r2, [pc, #396]	@ (8001044 <convertADC12data+0x2a4>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ebc:	ee07 3a90 	vmov	s15, r3
 8000ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ec4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000ec8:	ed9f 5b49 	vldr	d5, [pc, #292]	@ 8000ff0 <convertADC12data+0x250>
 8000ecc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ed0:	ed9f 6b53 	vldr	d6, [pc, #332]	@ 8001020 <convertADC12data+0x280>
 8000ed4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ed8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000edc:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d073      	beq.n	8000fce <convertADC12data+0x22e>
				*text ="ADC2_VbriS2(mV)";
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	4a5a      	ldr	r2, [pc, #360]	@ (8001054 <convertADC12data+0x2b4>)
 8000eea:	601a      	str	r2, [r3, #0]
			break;
 8000eec:	e06f      	b.n	8000fce <convertADC12data+0x22e>

		case ADC1_VplaL1:
			V = 3.3*(((float) sADC.adc12_data[item])/65536.0) * 1000;
 8000eee:	4a55      	ldr	r2, [pc, #340]	@ (8001044 <convertADC12data+0x2a4>)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ef6:	ee07 3a90 	vmov	s15, r3
 8000efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000efe:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000f02:	ed9f 5b3b 	vldr	d5, [pc, #236]	@ 8000ff0 <convertADC12data+0x250>
 8000f06:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f0a:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 8000ff8 <convertADC12data+0x258>
 8000f0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f12:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 8001000 <convertADC12data+0x260>
 8000f16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f1a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f1e:	edc7 7a02 	vstr	s15, [r7, #8]
			result =  1E6*(V-1.648348)/0.999; //V;//
 8000f22:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f2a:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 8001028 <convertADC12data+0x288>
 8000f2e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f32:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 8001030 <convertADC12data+0x290>
 8000f36:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f3a:	ed9f 5b3f 	vldr	d5, [pc, #252]	@ 8001038 <convertADC12data+0x298>
 8000f3e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f42:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f46:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d040      	beq.n	8000fd2 <convertADC12data+0x232>
				*text ="ADC1_VplaL1(mV)";
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	4a41      	ldr	r2, [pc, #260]	@ (8001058 <convertADC12data+0x2b8>)
 8000f54:	601a      	str	r2, [r3, #0]
			break;
 8000f56:	e03c      	b.n	8000fd2 <convertADC12data+0x232>

		case ADC2_VplaL2:
			//V is the directly measured voltage from the ADC in mV
			V = 3.3*(((float) sADC.adc12_data[item])/65536.0) * 1000;
 8000f58:	4a3a      	ldr	r2, [pc, #232]	@ (8001044 <convertADC12data+0x2a4>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f60:	ee07 3a90 	vmov	s15, r3
 8000f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f68:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000f6c:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 8000ff0 <convertADC12data+0x250>
 8000f70:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f74:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 8000ff8 <convertADC12data+0x258>
 8000f78:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f7c:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 8001000 <convertADC12data+0x260>
 8000f80:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f84:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f88:	edc7 7a02 	vstr	s15, [r7, #8]
			//result is the True voltage at L2 (corrected for voltage divider)
			result =  1E6*(V-1.648348)/0.999;
 8000f8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f94:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8001028 <convertADC12data+0x288>
 8000f98:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f9c:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8001030 <convertADC12data+0x290>
 8000fa0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000fa4:	ed9f 5b24 	vldr	d5, [pc, #144]	@ 8001038 <convertADC12data+0x298>
 8000fa8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fb0:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d00d      	beq.n	8000fd6 <convertADC12data+0x236>
				*text ="ADC2_VplaL2(mV)";
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	4a27      	ldr	r2, [pc, #156]	@ (800105c <convertADC12data+0x2bc>)
 8000fbe:	601a      	str	r2, [r3, #0]
			break;
 8000fc0:	e009      	b.n	8000fd6 <convertADC12data+0x236>
			break;
 8000fc2:	bf00      	nop
 8000fc4:	e008      	b.n	8000fd8 <convertADC12data+0x238>
			break;
 8000fc6:	bf00      	nop
 8000fc8:	e006      	b.n	8000fd8 <convertADC12data+0x238>
			break;
 8000fca:	bf00      	nop
 8000fcc:	e004      	b.n	8000fd8 <convertADC12data+0x238>
			break;
 8000fce:	bf00      	nop
 8000fd0:	e002      	b.n	8000fd8 <convertADC12data+0x238>
			break;
 8000fd2:	bf00      	nop
 8000fd4:	e000      	b.n	8000fd8 <convertADC12data+0x238>
			break;
 8000fd6:	bf00      	nop
	}

	return(result);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	ee07 3a90 	vmov	s15, r3
}
 8000fde:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	f3af 8000 	nop.w
 8000ff0:	00000000 	.word	0x00000000
 8000ff4:	40f00000 	.word	0x40f00000
 8000ff8:	66666666 	.word	0x66666666
 8000ffc:	400a6666 	.word	0x400a6666
 8001000:	00000000 	.word	0x00000000
 8001004:	408f4000 	.word	0x408f4000
 8001008:	a4acf313 	.word	0xa4acf313
 800100c:	3ff95f15 	.word	0x3ff95f15
 8001010:	00000000 	.word	0x00000000
 8001014:	409f4000 	.word	0x409f4000
 8001018:	04b3c3e7 	.word	0x04b3c3e7
 800101c:	400cc119 	.word	0x400cc119
 8001020:	ffffffff 	.word	0xffffffff
 8001024:	4120e2a7 	.word	0x4120e2a7
 8001028:	2706d506 	.word	0x2706d506
 800102c:	3ffa5fa2 	.word	0x3ffa5fa2
 8001030:	00000000 	.word	0x00000000
 8001034:	412e8480 	.word	0x412e8480
 8001038:	d916872b 	.word	0xd916872b
 800103c:	3feff7ce 	.word	0x3feff7ce
 8001040:	aaaaaaab 	.word	0xaaaaaaab
 8001044:	24000330 	.word	0x24000330
 8001048:	08014970 	.word	0x08014970
 800104c:	08014980 	.word	0x08014980
 8001050:	0801498c 	.word	0x0801498c
 8001054:	0801499c 	.word	0x0801499c
 8001058:	080149ac 	.word	0x080149ac
 800105c:	080149bc 	.word	0x080149bc

08001060 <printADC12data>:

//Print measured ADC1 and ADC2 data on UART3
void printADC12data(void)
{
 8001060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001062:	b0f7      	sub	sp, #476	@ 0x1dc
 8001064:	af10      	add	r7, sp, #64	@ 0x40
	char *p_text[2*ADC12_NO_CHANNELS];
	float result[2*ADC12_NO_CHANNELS];

	if (debug == 1)
 8001066:	4ba0      	ldr	r3, [pc, #640]	@ (80012e8 <printADC12data+0x288>)
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	2b01      	cmp	r3, #1
 800106c:	f040 8136 	bne.w	80012dc <printADC12data+0x27c>
	{
		printCR();
 8001070:	f7ff fb7a 	bl	8000768 <printCR>
		printNumber("No data: ", sADC.nADC12Read, 1);
 8001074:	4b9d      	ldr	r3, [pc, #628]	@ (80012ec <printADC12data+0x28c>)
 8001076:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 800107a:	b29b      	uxth	r3, r3
 800107c:	2201      	movs	r2, #1
 800107e:	4619      	mov	r1, r3
 8001080:	489b      	ldr	r0, [pc, #620]	@ (80012f0 <printADC12data+0x290>)
 8001082:	f7ff fbc3 	bl	800080c <printNumber>
		for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i++)
 8001086:	2300      	movs	r3, #0
 8001088:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 800108c:	e119      	b.n	80012c2 <printADC12data+0x262>
		{
			int ii = i % (2*ADC12_NO_CHANNELS);
 800108e:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001092:	4b98      	ldr	r3, [pc, #608]	@ (80012f4 <printADC12data+0x294>)
 8001094:	fb83 3102 	smull	r3, r1, r3, r2
 8001098:	17d3      	asrs	r3, r2, #31
 800109a:	1ac9      	subs	r1, r1, r3
 800109c:	460b      	mov	r3, r1
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	440b      	add	r3, r1
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
			result[ii] = convertADC12data(i, &p_text[ii]);
 80010aa:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 80010ae:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 80010b2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	4619      	mov	r1, r3
 80010bc:	f7ff fe70 	bl	8000da0 <convertADC12data>
 80010c0:	eef0 7a40 	vmov.f32	s15, s0
 80010c4:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80010ce:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80010d2:	4413      	add	r3, r2
 80010d4:	3b38      	subs	r3, #56	@ 0x38
 80010d6:	edc3 7a00 	vstr	s15, [r3]
			char text[300];
			if (ii == 5)
 80010da:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80010de:	2b05      	cmp	r3, #5
 80010e0:	f040 80ea 	bne.w	80012b8 <printADC12data+0x258>
			{
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80010e4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80010e8:	4a82      	ldr	r2, [pc, #520]	@ (80012f4 <printADC12data+0x294>)
 80010ea:	fb82 1203 	smull	r1, r2, r2, r3
 80010ee:	17db      	asrs	r3, r3, #31
 80010f0:	eba2 0c03 	sub.w	ip, r2, r3
						p_text[ii-5],                     sADC.adc12_data[i-5],
 80010f4:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80010f8:	3b05      	subs	r3, #5
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001100:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001104:	4413      	add	r3, r2
 8001106:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800110a:	62fb      	str	r3, [r7, #44]	@ 0x2c
						p_text[ii-5],                     sADC.adc12_data[i-5],
 800110c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001110:	3b05      	subs	r3, #5
 8001112:	4a76      	ldr	r2, [pc, #472]	@ (80012ec <printADC12data+0x28c>)
 8001114:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001118:	62bb      	str	r3, [r7, #40]	@ 0x28
						p_text[ii-4], (int) result[ii-4], sADC.adc12_data[i-4],
 800111a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800111e:	3b04      	subs	r3, #4
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 8001126:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800112a:	18d3      	adds	r3, r2, r3
 800112c:	f853 5c20 	ldr.w	r5, [r3, #-32]
						p_text[ii-4], (int) result[ii-4], sADC.adc12_data[i-4],
 8001130:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001134:	3b04      	subs	r3, #4
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 800113c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001140:	18d3      	adds	r3, r2, r3
 8001142:	3b38      	subs	r3, #56	@ 0x38
 8001144:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001148:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800114c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
						p_text[ii-4], (int) result[ii-4], sADC.adc12_data[i-4],
 8001150:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001154:	3b04      	subs	r3, #4
 8001156:	4a65      	ldr	r2, [pc, #404]	@ (80012ec <printADC12data+0x28c>)
 8001158:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800115c:	623b      	str	r3, [r7, #32]
						p_text[ii-3], (int) result[ii-3], sADC.adc12_data[i-3],
 800115e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001162:	3b03      	subs	r3, #3
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 800116a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800116e:	18d3      	adds	r3, r2, r3
 8001170:	f853 6c20 	ldr.w	r6, [r3, #-32]
						p_text[ii-3], (int) result[ii-3], sADC.adc12_data[i-3],
 8001174:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001178:	3b03      	subs	r3, #3
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 8001180:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001184:	18d3      	adds	r3, r2, r3
 8001186:	3b38      	subs	r3, #56	@ 0x38
 8001188:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800118c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001190:	edc7 7a07 	vstr	s15, [r7, #28]
						p_text[ii-3], (int) result[ii-3], sADC.adc12_data[i-3],
 8001194:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001198:	3b03      	subs	r3, #3
 800119a:	4a54      	ldr	r2, [pc, #336]	@ (80012ec <printADC12data+0x28c>)
 800119c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011a0:	61bb      	str	r3, [r7, #24]
						p_text[ii-2], (int) result[ii-2], sADC.adc12_data[i-2],
 80011a2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80011a6:	3b02      	subs	r3, #2
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 80011ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011b2:	18d3      	adds	r3, r2, r3
 80011b4:	f853 2c20 	ldr.w	r2, [r3, #-32]
 80011b8:	617a      	str	r2, [r7, #20]
						p_text[ii-2], (int) result[ii-2], sADC.adc12_data[i-2],
 80011ba:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80011be:	3b02      	subs	r3, #2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	f503 71b4 	add.w	r1, r3, #360	@ 0x168
 80011c6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011ca:	18cb      	adds	r3, r1, r3
 80011cc:	3b38      	subs	r3, #56	@ 0x38
 80011ce:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011d6:	edc7 7a04 	vstr	s15, [r7, #16]
						p_text[ii-2], (int) result[ii-2], sADC.adc12_data[i-2],
 80011da:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80011de:	3b02      	subs	r3, #2
 80011e0:	4a42      	ldr	r2, [pc, #264]	@ (80012ec <printADC12data+0x28c>)
 80011e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011e6:	60fb      	str	r3, [r7, #12]
						p_text[ii-1], (int) result[ii-1], sADC.adc12_data[i-1],
 80011e8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80011ec:	3b01      	subs	r3, #1
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	f503 71b4 	add.w	r1, r3, #360	@ 0x168
 80011f4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011f8:	18cb      	adds	r3, r1, r3
 80011fa:	f853 1c20 	ldr.w	r1, [r3, #-32]
 80011fe:	60b9      	str	r1, [r7, #8]
						p_text[ii-1], (int) result[ii-1], sADC.adc12_data[i-1],
 8001200:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001204:	3b01      	subs	r3, #1
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	f503 70b4 	add.w	r0, r3, #360	@ 0x168
 800120c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001210:	18c3      	adds	r3, r0, r3
 8001212:	3b38      	subs	r3, #56	@ 0x38
 8001214:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001218:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800121c:	edc7 7a01 	vstr	s15, [r7, #4]
						p_text[ii-1], (int) result[ii-1], sADC.adc12_data[i-1],
 8001220:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001224:	1e5a      	subs	r2, r3, #1
 8001226:	4b31      	ldr	r3, [pc, #196]	@ (80012ec <printADC12data+0x28c>)
 8001228:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800122c:	603b      	str	r3, [r7, #0]
 800122e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	f503 70b4 	add.w	r0, r3, #360	@ 0x168
 8001238:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800123c:	18c3      	adds	r3, r0, r3
 800123e:	f853 1c20 	ldr.w	r1, [r3, #-32]
						p_text[ii],   (int) result[ii],   sADC.adc12_data[i]);
 8001242:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	f503 70b4 	add.w	r0, r3, #360	@ 0x168
 800124c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001250:	18c3      	adds	r3, r0, r3
 8001252:	3b38      	subs	r3, #56	@ 0x38
 8001254:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001258:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800125c:	ee17 4a90 	vmov	r4, s15
						p_text[ii],   (int) result[ii],   sADC.adc12_data[i]);
 8001260:	4a22      	ldr	r2, [pc, #136]	@ (80012ec <printADC12data+0x28c>)
 8001262:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001266:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800126a:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800126e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8001270:	940e      	str	r4, [sp, #56]	@ 0x38
 8001272:	910d      	str	r1, [sp, #52]	@ 0x34
 8001274:	683c      	ldr	r4, [r7, #0]
 8001276:	940c      	str	r4, [sp, #48]	@ 0x30
 8001278:	687c      	ldr	r4, [r7, #4]
 800127a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800127c:	68b9      	ldr	r1, [r7, #8]
 800127e:	910a      	str	r1, [sp, #40]	@ 0x28
 8001280:	68f9      	ldr	r1, [r7, #12]
 8001282:	9109      	str	r1, [sp, #36]	@ 0x24
 8001284:	6939      	ldr	r1, [r7, #16]
 8001286:	9108      	str	r1, [sp, #32]
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	9207      	str	r2, [sp, #28]
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	9206      	str	r2, [sp, #24]
 8001290:	69fa      	ldr	r2, [r7, #28]
 8001292:	9205      	str	r2, [sp, #20]
 8001294:	9604      	str	r6, [sp, #16]
 8001296:	6a3a      	ldr	r2, [r7, #32]
 8001298:	9203      	str	r2, [sp, #12]
 800129a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800129c:	9202      	str	r2, [sp, #8]
 800129e:	9501      	str	r5, [sp, #4]
 80012a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012a2:	9200      	str	r2, [sp, #0]
 80012a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012a6:	4662      	mov	r2, ip
 80012a8:	4913      	ldr	r1, [pc, #76]	@ (80012f8 <printADC12data+0x298>)
 80012aa:	f011 fa07 	bl	80126bc <siprintf>
				printString(text);
 80012ae:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fa68 	bl	8000788 <printString>
		for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i++)
 80012b8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80012bc:	3301      	adds	r3, #1
 80012be:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 80012c2:	4b0a      	ldr	r3, [pc, #40]	@ (80012ec <printADC12data+0x28c>)
 80012c4:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 80012c8:	4613      	mov	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	461a      	mov	r2, r3
 80012d2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80012d6:	429a      	cmp	r2, r3
 80012d8:	f63f aed9 	bhi.w	800108e <printADC12data+0x2e>
			}
		}
	}
}
 80012dc:	bf00      	nop
 80012de:	f507 77ce 	add.w	r7, r7, #412	@ 0x19c
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012e6:	bf00      	nop
 80012e8:	24000000 	.word	0x24000000
 80012ec:	24000330 	.word	0x24000330
 80012f0:	080149cc 	.word	0x080149cc
 80012f4:	2aaaaaab 	.word	0x2aaaaaab
 80012f8:	080149d8 	.word	0x080149d8

080012fc <freqCorrection>:

//Calculate frequency correction
//Returns 1 if a valid frequency correction is calculated, otherwise 0
uint8_t freqCorrection(int16_t *freqCorr)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08e      	sub	sp, #56	@ 0x38
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	int start_index=0;
 8001304:	2300      	movs	r3, #0
 8001306:	637b      	str	r3, [r7, #52]	@ 0x34
	int stop_index=0;
 8001308:	2300      	movs	r3, #0
 800130a:	633b      	str	r3, [r7, #48]	@ 0x30
	int number_of_lows=0;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
	int lowDetected = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int highDetected = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	62bb      	str	r3, [r7, #40]	@ 0x28
	float min = 100000;
 8001318:	4b54      	ldr	r3, [pc, #336]	@ (800146c <freqCorrection+0x170>)
 800131a:	627b      	str	r3, [r7, #36]	@ 0x24
	float max = -100000;
 800131c:	4b54      	ldr	r3, [pc, #336]	@ (8001470 <freqCorrection+0x174>)
 800131e:	623b      	str	r3, [r7, #32]
	float norm = 0;
 8001320:	f04f 0300 	mov.w	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]

	//Find when MOSFET branch is on (start and stop time)
	//Find minimum and maximum value of bridge current
 	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 8001326:	2300      	movs	r3, #0
 8001328:	61bb      	str	r3, [r7, #24]
 800132a:	e041      	b.n	80013b0 <freqCorrection+0xb4>
	{
		// Find minimum of bridge current
		float data = convertADC12data(i+ADC2_Is, NULL);
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	3301      	adds	r3, #1
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fd34 	bl	8000da0 <convertADC12data>
 8001338:	ed87 0a02 	vstr	s0, [r7, #8]
		if (data < min)
 800133c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001340:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001344:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134c:	d501      	bpl.n	8001352 <freqCorrection+0x56>
		{
			min = data;
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	627b      	str	r3, [r7, #36]	@ 0x24
			//HAL_UART_Transmit(huart3, min);
			//printCR();
		}
		// Find maximum
		if (data > max)
 8001352:	ed97 7a02 	vldr	s14, [r7, #8]
 8001356:	edd7 7a08 	vldr	s15, [r7, #32]
 800135a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800135e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001362:	dd01      	ble.n	8001368 <freqCorrection+0x6c>
		{
			max = data;
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	623b      	str	r3, [r7, #32]
		}
		// Check for low
		if (!lowDetected && sADC.adc12_data[i+ADC1_TIM1_CH1] < 500)
 8001368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800136a:	2b00      	cmp	r3, #0
 800136c:	d10a      	bne.n	8001384 <freqCorrection+0x88>
 800136e:	4a41      	ldr	r2, [pc, #260]	@ (8001474 <freqCorrection+0x178>)
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001376:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800137a:	d203      	bcs.n	8001384 <freqCorrection+0x88>
		{
			//First low detected
			start_index = i; 		// Store index of first low detected
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	637b      	str	r3, [r7, #52]	@ 0x34
			lowDetected = 1;
 8001380:	2301      	movs	r3, #1
 8001382:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
		//Check for high
		if (!highDetected && lowDetected && sADC.adc12_data[i+ADC1_TIM1_CH1] > 65000)
 8001384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10f      	bne.n	80013aa <freqCorrection+0xae>
 800138a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800138c:	2b00      	cmp	r3, #0
 800138e:	d00c      	beq.n	80013aa <freqCorrection+0xae>
 8001390:	4a38      	ldr	r2, [pc, #224]	@ (8001474 <freqCorrection+0x178>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001398:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 800139c:	4293      	cmp	r3, r2
 800139e:	d904      	bls.n	80013aa <freqCorrection+0xae>
		{
			//High after first low detected
			stop_index = i-6;		// Store index of last low
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	3b06      	subs	r3, #6
 80013a4:	633b      	str	r3, [r7, #48]	@ 0x30
			highDetected = 1;
 80013a6:	2301      	movs	r3, #1
 80013a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	3306      	adds	r3, #6
 80013ae:	61bb      	str	r3, [r7, #24]
 80013b0:	4b30      	ldr	r3, [pc, #192]	@ (8001474 <freqCorrection+0x178>)
 80013b2:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 80013b6:	4613      	mov	r3, r2
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4413      	add	r3, r2
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	461a      	mov	r2, r3
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d8b2      	bhi.n	800132c <freqCorrection+0x30>
		}
	}

	// Check maximum and minimum difference
	norm = max - min;
 80013c6:	ed97 7a08 	vldr	s14, [r7, #32]
 80013ca:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80013ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d2:	edc7 7a07 	vstr	s15, [r7, #28]
	if (norm < 10)
 80013d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80013da:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80013de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e6:	d501      	bpl.n	80013ec <freqCorrection+0xf0>
		norm = max;
 80013e8:	6a3b      	ldr	r3, [r7, #32]
 80013ea:	61fb      	str	r3, [r7, #28]

	number_of_lows = (stop_index - start_index)/6 + 1;
 80013ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	4a21      	ldr	r2, [pc, #132]	@ (8001478 <freqCorrection+0x17c>)
 80013f4:	fb82 1203 	smull	r1, r2, r2, r3
 80013f8:	17db      	asrs	r3, r3, #31
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	3301      	adds	r3, #1
 80013fe:	617b      	str	r3, [r7, #20]
	if (lowDetected && highDetected && (number_of_lows >= 5))
 8001400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001402:	2b00      	cmp	r3, #0
 8001404:	d02c      	beq.n	8001460 <freqCorrection+0x164>
 8001406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001408:	2b00      	cmp	r3, #0
 800140a:	d029      	beq.n	8001460 <freqCorrection+0x164>
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	2b04      	cmp	r3, #4
 8001410:	dd26      	ble.n	8001460 <freqCorrection+0x164>
	{
		float upper = convertADC12data(start_index+ADC2_Is+6, NULL);
 8001412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001414:	3307      	adds	r3, #7
 8001416:	2100      	movs	r1, #0
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fcc1 	bl	8000da0 <convertADC12data>
 800141e:	ed87 0a04 	vstr	s0, [r7, #16]
		float lower = convertADC12data(stop_index+ADC2_Is-6, NULL);
 8001422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001424:	3b05      	subs	r3, #5
 8001426:	2100      	movs	r1, #0
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fcb9 	bl	8000da0 <convertADC12data>
 800142e:	ed87 0a03 	vstr	s0, [r7, #12]
		*freqCorr = (int16_t) 1000*(upper - lower)/norm;
 8001432:	ed97 7a04 	vldr	s14, [r7, #16]
 8001436:	edd7 7a03 	vldr	s15, [r7, #12]
 800143a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800147c <freqCorrection+0x180>
 8001442:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001446:	ed97 7a07 	vldr	s14, [r7, #28]
 800144a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800144e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001452:	ee17 3a90 	vmov	r3, s15
 8001456:	b21a      	sxth	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	801a      	strh	r2, [r3, #0]
		return(1);
 800145c:	2301      	movs	r3, #1
 800145e:	e000      	b.n	8001462 <freqCorrection+0x166>
	}
	else
		return(0);
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3738      	adds	r7, #56	@ 0x38
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	47c35000 	.word	0x47c35000
 8001470:	c7c35000 	.word	0xc7c35000
 8001474:	24000330 	.word	0x24000330
 8001478:	2aaaaaab 	.word	0x2aaaaaab
 800147c:	447a0000 	.word	0x447a0000

08001480 <voltageCorrection>:


//Calculate voltage correction base on a desired RMS voltage
//Returns 1 if a valid frequency correction is calculated, otherwise 0
uint8_t voltageCorrection(int16_t Vdesired, int16_t *vCorr)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	6039      	str	r1, [r7, #0]
 800148a:	80fb      	strh	r3, [r7, #6]
	float max = -100000;
 800148c:	4b32      	ldr	r3, [pc, #200]	@ (8001558 <voltageCorrection+0xd8>)
 800148e:	61fb      	str	r3, [r7, #28]

	//Find maximum value of bridge voltage
	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 8001490:	2300      	movs	r3, #0
 8001492:	61bb      	str	r3, [r7, #24]
 8001494:	e031      	b.n	80014fa <voltageCorrection+0x7a>
	{
		// Find minimum of bridge current
		float VL1 = convertADC12data(i+ADC1_VplaL1, NULL);
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	3304      	adds	r3, #4
 800149a:	2100      	movs	r1, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fc7f 	bl	8000da0 <convertADC12data>
 80014a2:	ed87 0a05 	vstr	s0, [r7, #20]
		float VL2 = convertADC12data(i+ADC2_VplaL2, NULL);
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	3305      	adds	r3, #5
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fc77 	bl	8000da0 <convertADC12data>
 80014b2:	ed87 0a04 	vstr	s0, [r7, #16]
		float VL = VL1 - VL2;
 80014b6:	ed97 7a05 	vldr	s14, [r7, #20]
 80014ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80014be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014c2:	edc7 7a03 	vstr	s15, [r7, #12]
		VL = sqrt(2) * VL;
 80014c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80014ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014ce:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 8001550 <voltageCorrection+0xd0>
 80014d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80014d6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014da:	edc7 7a03 	vstr	s15, [r7, #12]
		if (VL > max)
 80014de:	ed97 7a03 	vldr	s14, [r7, #12]
 80014e2:	edd7 7a07 	vldr	s15, [r7, #28]
 80014e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ee:	dd01      	ble.n	80014f4 <voltageCorrection+0x74>
		{
			max = VL;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	61fb      	str	r3, [r7, #28]
	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	3306      	adds	r3, #6
 80014f8:	61bb      	str	r3, [r7, #24]
 80014fa:	4b18      	ldr	r3, [pc, #96]	@ (800155c <voltageCorrection+0xdc>)
 80014fc:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 8001500:	4613      	mov	r3, r2
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	4413      	add	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	461a      	mov	r2, r3
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	429a      	cmp	r2, r3
 800150e:	d8c2      	bhi.n	8001496 <voltageCorrection+0x16>
		}
	}
	*vCorr = (int16_t) (Vdesired-max)/100;
 8001510:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001514:	ee07 3a90 	vmov	s15, r3
 8001518:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800151c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001520:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001524:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001528:	ee17 3a90 	vmov	r3, s15
 800152c:	b21b      	sxth	r3, r3
 800152e:	4a0c      	ldr	r2, [pc, #48]	@ (8001560 <voltageCorrection+0xe0>)
 8001530:	fb82 1203 	smull	r1, r2, r2, r3
 8001534:	1152      	asrs	r2, r2, #5
 8001536:	17db      	asrs	r3, r3, #31
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	b21a      	sxth	r2, r3
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	801a      	strh	r2, [r3, #0]
	return 1;
 8001540:	2301      	movs	r3, #1
}
 8001542:	4618      	mov	r0, r3
 8001544:	3720      	adds	r7, #32
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	f3af 8000 	nop.w
 8001550:	667f3bcd 	.word	0x667f3bcd
 8001554:	3ff6a09e 	.word	0x3ff6a09e
 8001558:	c7c35000 	.word	0xc7c35000
 800155c:	24000330 	.word	0x24000330
 8001560:	51eb851f 	.word	0x51eb851f
 8001564:	00000000 	.word	0x00000000

08001568 <measureBridgePlasmaADC12>:


// Measure bridge current, plasma voltage, and bridge current using ADC1 and ADC2 for one period
// After the measurement is done the function doneMeasuringBridgePlasmaADC12 is called
void measureBridgePlasmaADC12(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	//Calculate number of reads needed for one period
	sADC.nADC12Read = ((uint32_t) ((1/(float) sHbridge.frequency)/ADC12_GROUP_READTIME));//* 2; //Multiplied by two to grab two periods
 800156e:	4b24      	ldr	r3, [pc, #144]	@ (8001600 <measureBridgePlasmaADC12+0x98>)
 8001570:	885b      	ldrh	r3, [r3, #2]
 8001572:	ee07 3a90 	vmov	s15, r3
 8001576:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800157a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800157e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001582:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001586:	ed9f 5b1c 	vldr	d5, [pc, #112]	@ 80015f8 <measureBridgePlasmaADC12+0x90>
 800158a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800158e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001592:	ee17 2a90 	vmov	r2, s15
 8001596:	4b1b      	ldr	r3, [pc, #108]	@ (8001604 <measureBridgePlasmaADC12+0x9c>)
 8001598:	f8c3 2708 	str.w	r2, [r3, #1800]	@ 0x708
	sADC.nADC12Read +=2; //Add to see the start of next period
 800159c:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <measureBridgePlasmaADC12+0x9c>)
 800159e:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 80015a2:	3302      	adds	r3, #2
 80015a4:	4a17      	ldr	r2, [pc, #92]	@ (8001604 <measureBridgePlasmaADC12+0x9c>)
 80015a6:	f8c2 3708 	str.w	r3, [r2, #1800]	@ 0x708

	//Start ADC1 and ADC2 measurements
	if (sADC.nADC12Read <= ADC12_MAX_GROUP)
 80015aa:	4b16      	ldr	r3, [pc, #88]	@ (8001604 <measureBridgePlasmaADC12+0x9c>)
 80015ac:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 80015b0:	2b64      	cmp	r3, #100	@ 0x64
 80015b2:	d81a      	bhi.n	80015ea <measureBridgePlasmaADC12+0x82>
	{
		//Calculate the number DMA transfers needed
		uint32_t noDMARequests = ADC12_NO_CHANNELS*sADC.nADC12Read;
 80015b4:	4b13      	ldr	r3, [pc, #76]	@ (8001604 <measureBridgePlasmaADC12+0x9c>)
 80015b6:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 80015ba:	4613      	mov	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4413      	add	r3, r2
 80015c0:	607b      	str	r3, [r7, #4]

		// Start reading ADC1 and ADC2
		sADC.adc12_reading = 1;
 80015c2:	4b10      	ldr	r3, [pc, #64]	@ (8001604 <measureBridgePlasmaADC12+0x9c>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	f8a3 270e 	strh.w	r2, [r3, #1806]	@ 0x70e

		//This will start the ADC1 and ADC2 measurements when H-BRIDGE_B_CTRL (TIM1_CH1) goes from 0 to 1.
		//When the measurements are done doneMeasuringBridgePlasmaADC12 is called.
		HAL_StatusTypeDef HALresp = HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t *) sADC.adc12_data, noDMARequests);
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	490d      	ldr	r1, [pc, #52]	@ (8001604 <measureBridgePlasmaADC12+0x9c>)
 80015ce:	480e      	ldr	r0, [pc, #56]	@ (8001608 <measureBridgePlasmaADC12+0xa0>)
 80015d0:	f006 f932 	bl	8007838 <HAL_ADCEx_MultiModeStart_DMA>
 80015d4:	4603      	mov	r3, r0
 80015d6:	70fb      	strb	r3, [r7, #3]
		if (HALresp != HAL_OK)
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d008      	beq.n	80015f0 <measureBridgePlasmaADC12+0x88>
		{
			printHALErrorStatus(HALresp, "measureBridgePlasmaADC12");
 80015de:	78fb      	ldrb	r3, [r7, #3]
 80015e0:	490a      	ldr	r1, [pc, #40]	@ (800160c <measureBridgePlasmaADC12+0xa4>)
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff f958 	bl	8000898 <printHALErrorStatus>
	}
	else
		printString("** ERROR ** pADC.nRead > ADC12_MAX_GROUP");

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 80015e8:	e002      	b.n	80015f0 <measureBridgePlasmaADC12+0x88>
		printString("** ERROR ** pADC.nRead > ADC12_MAX_GROUP");
 80015ea:	4809      	ldr	r0, [pc, #36]	@ (8001610 <measureBridgePlasmaADC12+0xa8>)
 80015ec:	f7ff f8cc 	bl	8000788 <printString>
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	a0b5ed8d 	.word	0xa0b5ed8d
 80015fc:	3eb0c6f7 	.word	0x3eb0c6f7
 8001600:	2400001c 	.word	0x2400001c
 8001604:	24000330 	.word	0x24000330
 8001608:	24000a88 	.word	0x24000a88
 800160c:	08014a30 	.word	0x08014a30
 8001610:	08014a4c 	.word	0x08014a4c

08001614 <doneMeasuringBridgePlasmaADC12>:

// Done measuring bridge current, plasma voltage, and bridge current
void doneMeasuringBridgePlasmaADC12(uint32_t errorCode)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	static uint32_t count = 0;

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	count++;
 800161c:	4b22      	ldr	r3, [pc, #136]	@ (80016a8 <doneMeasuringBridgePlasmaADC12+0x94>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	3301      	adds	r3, #1
 8001622:	4a21      	ldr	r2, [pc, #132]	@ (80016a8 <doneMeasuringBridgePlasmaADC12+0x94>)
 8001624:	6013      	str	r3, [r2, #0]

	// Done reading ADC1 and ADC2
	sADC.adc12_reading = 0;
 8001626:	4b21      	ldr	r3, [pc, #132]	@ (80016ac <doneMeasuringBridgePlasmaADC12+0x98>)
 8001628:	2200      	movs	r2, #0
 800162a:	f8a3 270e 	strh.w	r2, [r3, #1806]	@ 0x70e

	if (errorCode == HAL_ADC_ERROR_NONE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d128      	bne.n	8001686 <doneMeasuringBridgePlasmaADC12+0x72>
	{
		if (sFlashConfig.mode == RUN_MODE)
 8001634:	4b1e      	ldr	r3, [pc, #120]	@ (80016b0 <doneMeasuringBridgePlasmaADC12+0x9c>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d12b      	bne.n	8001694 <doneMeasuringBridgePlasmaADC12+0x80>

			//TODO Check plasma voltage VplaL1 and VplaL2 (To high? Not present?)
			//TODO Calculate plasma voltage Vrms, Vmax and Vmin

			//Adjust H-bridge frequency
			if (powerStatus == V500_ON)
 800163c:	4b1d      	ldr	r3, [pc, #116]	@ (80016b4 <doneMeasuringBridgePlasmaADC12+0xa0>)
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d127      	bne.n	8001694 <doneMeasuringBridgePlasmaADC12+0x80>
			{
				//Adjust H-bridge frequency
				int16_t freqCorr = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	81fb      	strh	r3, [r7, #14]
				if (freqCorrection(&freqCorr))
 8001648:	f107 030e 	add.w	r3, r7, #14
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fe55 	bl	80012fc <freqCorrection>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d008      	beq.n	800166a <doneMeasuringBridgePlasmaADC12+0x56>
					sHbridge.frequency += freqCorr;
 8001658:	4b17      	ldr	r3, [pc, #92]	@ (80016b8 <doneMeasuringBridgePlasmaADC12+0xa4>)
 800165a:	885a      	ldrh	r2, [r3, #2]
 800165c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001660:	b29b      	uxth	r3, r3
 8001662:	4413      	add	r3, r2
 8001664:	b29a      	uxth	r2, r3
 8001666:	4b14      	ldr	r3, [pc, #80]	@ (80016b8 <doneMeasuringBridgePlasmaADC12+0xa4>)
 8001668:	805a      	strh	r2, [r3, #2]
				//TODO Adjust H-bridge dead time
				//sHbridge.deadtime = new setting;
				programHbridge();
 800166a:	f7ff f9b5 	bl	80009d8 <programHbridge>
					HAL_Delay(1);	//Allow H-bridge to settle with new settings
 800166e:	2001      	movs	r0, #1
 8001670:	f003 fb42 	bl	8004cf8 <HAL_Delay>
				if (count % 2048)
 8001674:	4b0c      	ldr	r3, [pc, #48]	@ (80016a8 <doneMeasuringBridgePlasmaADC12+0x94>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800167c:	2b00      	cmp	r3, #0
 800167e:	d009      	beq.n	8001694 <doneMeasuringBridgePlasmaADC12+0x80>
					printHbridgeData();
 8001680:	f7ff f980 	bl	8000984 <printHbridgeData>
 8001684:	e006      	b.n	8001694 <doneMeasuringBridgePlasmaADC12+0x80>
			}
		}
	}
	else
	{
		printNumber("ADC12 Error Code: ", errorCode, 1);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	b29b      	uxth	r3, r3
 800168a:	2201      	movs	r2, #1
 800168c:	4619      	mov	r1, r3
 800168e:	480b      	ldr	r0, [pc, #44]	@ (80016bc <doneMeasuringBridgePlasmaADC12+0xa8>)
 8001690:	f7ff f8bc 	bl	800080c <printNumber>
	}

	//Measure ADC3 voltages
	if (sFlashConfig.mode == RUN_MODE)
 8001694:	4b06      	ldr	r3, [pc, #24]	@ (80016b0 <doneMeasuringBridgePlasmaADC12+0x9c>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d101      	bne.n	80016a0 <doneMeasuringBridgePlasmaADC12+0x8c>
		measureVoltagesTemperaturesADC3();
 800169c:	f000 fb14 	bl	8001cc8 <measureVoltagesTemperaturesADC3>

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 80016a0:	bf00      	nop
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	24000a4c 	.word	0x24000a4c
 80016ac:	24000330 	.word	0x24000330
 80016b0:	24000a48 	.word	0x24000a48
 80016b4:	24000a44 	.word	0x24000a44
 80016b8:	2400001c 	.word	0x2400001c
 80016bc:	08014a78 	.word	0x08014a78

080016c0 <printHbridgeDatalogging>:
// Print H-bridge data on UART3 formatted for CSV datalogging
// Prints: Hbridge Freq, Deadtime, Is, VplaL1, VplaL2, VbrS1, VbriS2
// Parameter:
//		startTime: denotes the system time when ADC measurement was started
static void printHbridgeDatalogging(uint32_t startTime, uint32_t stopTime)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	f5ad 6d8a 	sub.w	sp, sp, #1104	@ 0x450
 80016c6:	af0c      	add	r7, sp, #48	@ 0x30
 80016c8:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80016cc:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 80016d0:	6018      	str	r0, [r3, #0]
 80016d2:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80016d6:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 80016da:	6019      	str	r1, [r3, #0]
	char s_output[1000];
	//Convert from ms to sec: time elapsed / number of adc reads
	//This assumes that the time taken for each adc read is approx. equal
	double interval = (double) (stopTime - startTime) / (double) sADC.nADC12Read;
 80016dc:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80016e0:	f5a3 6284 	sub.w	r2, r3, #1056	@ 0x420
 80016e4:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80016e8:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 80016ec:	6812      	ldr	r2, [r2, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	ee07 3a90 	vmov	s15, r3
 80016f6:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 80016fa:	4b5c      	ldr	r3, [pc, #368]	@ (800186c <printHbridgeDatalogging+0x1ac>)
 80016fc:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 8001700:	ee07 3a90 	vmov	s15, r3
 8001704:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001708:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800170c:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001710:	ed83 7b00 	vstr	d7, [r3]

	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 8001714:	2300      	movs	r3, #0
 8001716:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 800171a:	e093      	b.n	8001844 <printHbridgeDatalogging+0x184>
		{
			//calculate time of current measurement (start time + ADC sample rate)
			//TODO: This is likely not exactly accurate. Better way to record time of measurement accounting for conversion/DMA time?
			double measTime = startTime + (interval * i);
 800171c:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001720:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	ee07 3a90 	vmov	s15, r3
 800172a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800172e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001732:	ee07 3a90 	vmov	s15, r3
 8001736:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800173a:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800173e:	ed93 7b00 	vldr	d7, [r3]
 8001742:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001746:	ee36 7b07 	vadd.f64	d7, d6, d7
 800174a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 800174e:	ed83 7b00 	vstr	d7, [r3]

			float Is = convertADC12data(i+ADC2_Is, NULL);
 8001752:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001756:	3301      	adds	r3, #1
 8001758:	2100      	movs	r1, #0
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fb20 	bl	8000da0 <convertADC12data>
 8001760:	f207 4304 	addw	r3, r7, #1028	@ 0x404
 8001764:	ed83 0a00 	vstr	s0, [r3]
			float VplaL1 = convertADC12data(i+ADC1_VplaL1, NULL);
 8001768:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 800176c:	3304      	adds	r3, #4
 800176e:	2100      	movs	r1, #0
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fb15 	bl	8000da0 <convertADC12data>
 8001776:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 800177a:	ed83 0a00 	vstr	s0, [r3]
			float VplaL2 = convertADC12data(i+ADC2_VplaL2, NULL);
 800177e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001782:	3305      	adds	r3, #5
 8001784:	2100      	movs	r1, #0
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fb0a 	bl	8000da0 <convertADC12data>
 800178c:	ed87 0aff 	vstr	s0, [r7, #1020]	@ 0x3fc
			float VbriS1 = convertADC12data(i+ADC1_VbriS1, NULL);
 8001790:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001794:	3302      	adds	r3, #2
 8001796:	2100      	movs	r1, #0
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fb01 	bl	8000da0 <convertADC12data>
 800179e:	ed87 0afe 	vstr	s0, [r7, #1016]	@ 0x3f8
			float VbriS2 = convertADC12data(i+ADC2_VbriS2, NULL);
 80017a2:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 80017a6:	3303      	adds	r3, #3
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff faf8 	bl	8000da0 <convertADC12data>
 80017b0:	ed87 0afd 	vstr	s0, [r7, #1012]	@ 0x3f4

			sprintf(s_output, "%.2lf,%u,%u,%f,%f,%f,%f,%f", measTime, sHbridge.frequency, sHbridge.deadtime,Is,VplaL1,VplaL2,VbriS1,VbriS2);
 80017b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001870 <printHbridgeDatalogging+0x1b0>)
 80017b6:	885b      	ldrh	r3, [r3, #2]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001870 <printHbridgeDatalogging+0x1b0>)
 80017bc:	889b      	ldrh	r3, [r3, #4]
 80017be:	f207 4104 	addw	r1, r7, #1028	@ 0x404
 80017c2:	edd1 7a00 	vldr	s15, [r1]
 80017c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017ca:	f507 6180 	add.w	r1, r7, #1024	@ 0x400
 80017ce:	edd1 6a00 	vldr	s13, [r1]
 80017d2:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80017d6:	edd7 5aff 	vldr	s11, [r7, #1020]	@ 0x3fc
 80017da:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 80017de:	edd7 4afe 	vldr	s9, [r7, #1016]	@ 0x3f8
 80017e2:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 80017e6:	edd7 3afd 	vldr	s7, [r7, #1012]	@ 0x3f4
 80017ea:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 80017ee:	f107 000c 	add.w	r0, r7, #12
 80017f2:	ed8d 3b0a 	vstr	d3, [sp, #40]	@ 0x28
 80017f6:	ed8d 4b08 	vstr	d4, [sp, #32]
 80017fa:	ed8d 5b06 	vstr	d5, [sp, #24]
 80017fe:	ed8d 6b04 	vstr	d6, [sp, #16]
 8001802:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001806:	9301      	str	r3, [sp, #4]
 8001808:	9200      	str	r2, [sp, #0]
 800180a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 800180e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001812:	4918      	ldr	r1, [pc, #96]	@ (8001874 <printHbridgeDatalogging+0x1b4>)
 8001814:	f010 ff52 	bl	80126bc <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fdc7 	bl	80003b0 <strlen>
 8001822:	4603      	mov	r3, r0
 8001824:	b29a      	uxth	r2, r3
 8001826:	f107 010c 	add.w	r1, r7, #12
 800182a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800182e:	4812      	ldr	r0, [pc, #72]	@ (8001878 <printHbridgeDatalogging+0x1b8>)
 8001830:	f00e fe87 	bl	8010542 <HAL_UART_Transmit>
			printString("\n");
 8001834:	4811      	ldr	r0, [pc, #68]	@ (800187c <printHbridgeDatalogging+0x1bc>)
 8001836:	f7fe ffa7 	bl	8000788 <printString>
	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 800183a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 800183e:	3306      	adds	r3, #6
 8001840:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 8001844:	4b09      	ldr	r3, [pc, #36]	@ (800186c <printHbridgeDatalogging+0x1ac>)
 8001846:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 800184a:	4613      	mov	r3, r2
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	4413      	add	r3, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	461a      	mov	r2, r3
 8001854:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001858:	429a      	cmp	r2, r3
 800185a:	f63f af5f 	bhi.w	800171c <printHbridgeDatalogging+0x5c>
		}
}
 800185e:	bf00      	nop
 8001860:	bf00      	nop
 8001862:	f507 6784 	add.w	r7, r7, #1056	@ 0x420
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	24000330 	.word	0x24000330
 8001870:	2400001c 	.word	0x2400001c
 8001874:	08014a8c 	.word	0x08014a8c
 8001878:	24000e38 	.word	0x24000e38
 800187c:	08014aa8 	.word	0x08014aa8

08001880 <autoFreqAdj>:

// Automatically Correct the Drive Frequency until user presses any key
void autoFreqAdj(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
	char input;


	//printString("\n\r%Press any key to exit"); //Commented out to allow for automated remote serial control (datalogging)

	printString("Time(us),Freq (Hz),Deadtime (%),Bridge I,VplaL1,VplaL2,VbriS1,VbriS2");
 8001886:	482c      	ldr	r0, [pc, #176]	@ (8001938 <autoFreqAdj+0xb8>)
 8001888:	f7fe ff7e 	bl	8000788 <printString>
	printCR();
 800188c:	f7fe ff6c 	bl	8000768 <printCR>

	//Start timer24 which is used to time when each ADC measurement is captured
	HAL_TIM_Base_Start(&htim24);
 8001890:	482a      	ldr	r0, [pc, #168]	@ (800193c <autoFreqAdj+0xbc>)
 8001892:	f00d f879 	bl	800e988 <HAL_TIM_Base_Start>


	while (!(HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK))
 8001896:	e041      	b.n	800191c <autoFreqAdj+0x9c>
	{
		uint32_t startTime = __HAL_TIM_GET_COUNTER(&htim24);//TIM24->CNT;
 8001898:	4b28      	ldr	r3, [pc, #160]	@ (800193c <autoFreqAdj+0xbc>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800189e:	60fb      	str	r3, [r7, #12]
		measureBridgePlasmaADC12();
 80018a0:	f7ff fe62 	bl	8001568 <measureBridgePlasmaADC12>
		//Wait until ADC3 reading is done
		while (sADC.adc12_reading);
 80018a4:	bf00      	nop
 80018a6:	4b26      	ldr	r3, [pc, #152]	@ (8001940 <autoFreqAdj+0xc0>)
 80018a8:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	@ 0x70e
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f9      	bne.n	80018a6 <autoFreqAdj+0x26>
		uint32_t stopTime = __HAL_TIM_GET_COUNTER(&htim24);//TIM24->CNT;
 80018b2:	4b22      	ldr	r3, [pc, #136]	@ (800193c <autoFreqAdj+0xbc>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b8:	60bb      	str	r3, [r7, #8]
		//printADC12data();

		//Calculate delta f
		int16_t freqCorr;
		freqCorrection(&freqCorr);
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fd1d 	bl	80012fc <freqCorrection>

		//char text[100];
		//sprintf(text, "\n\rFrequency correction: %i", (int) freqCorr);
		//printString(text);

		if (sHbridge.frequency + freqCorr > MAX_FREQUENCY) //GetUint16Input(&sHbridge.frequency, 1, MIN_FREQUENCY, MAX_FREQUENCY))
 80018c2:	4b20      	ldr	r3, [pc, #128]	@ (8001944 <autoFreqAdj+0xc4>)
 80018c4:	885b      	ldrh	r3, [r3, #2]
 80018c6:	461a      	mov	r2, r3
 80018c8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018cc:	4413      	add	r3, r2
 80018ce:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 80018d2:	4293      	cmp	r3, r2
 80018d4:	dd04      	ble.n	80018e0 <autoFreqAdj+0x60>
		{   // Calculated freq is higher than max

			//sprintf(text, "\n\r%i is higher than max freq", (int) sHbridge.frequency + freqCorr);
			//printString(text);
			sHbridge.frequency = MAX_FREQUENCY;
 80018d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001944 <autoFreqAdj+0xc4>)
 80018d8:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 80018dc:	805a      	strh	r2, [r3, #2]
 80018de:	e017      	b.n	8001910 <autoFreqAdj+0x90>
		}
		else if (sHbridge.frequency + freqCorr < MIN_FREQUENCY)
 80018e0:	4b18      	ldr	r3, [pc, #96]	@ (8001944 <autoFreqAdj+0xc4>)
 80018e2:	885b      	ldrh	r3, [r3, #2]
 80018e4:	461a      	mov	r2, r3
 80018e6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018ea:	4413      	add	r3, r2
 80018ec:	f643 2297 	movw	r2, #14999	@ 0x3a97
 80018f0:	4293      	cmp	r3, r2
 80018f2:	dc04      	bgt.n	80018fe <autoFreqAdj+0x7e>
		{
			//sprintf(text, "\n\r%i is lower than min freq", (int) sHbridge.frequency + freqCorr);
			//printString(text);

			sHbridge.frequency = MIN_FREQUENCY;
 80018f4:	4b13      	ldr	r3, [pc, #76]	@ (8001944 <autoFreqAdj+0xc4>)
 80018f6:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80018fa:	805a      	strh	r2, [r3, #2]
 80018fc:	e008      	b.n	8001910 <autoFreqAdj+0x90>

		}
		else
		{
			sHbridge.frequency = sHbridge.frequency + freqCorr;
 80018fe:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <autoFreqAdj+0xc4>)
 8001900:	885a      	ldrh	r2, [r3, #2]
 8001902:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001906:	b29b      	uxth	r3, r3
 8001908:	4413      	add	r3, r2
 800190a:	b29a      	uxth	r2, r3
 800190c:	4b0d      	ldr	r3, [pc, #52]	@ (8001944 <autoFreqAdj+0xc4>)
 800190e:	805a      	strh	r2, [r3, #2]
		}

		programHbridge();
 8001910:	f7ff f862 	bl	80009d8 <programHbridge>

		//Print current ADC data
		printHbridgeDatalogging(startTime, stopTime);
 8001914:	68b9      	ldr	r1, [r7, #8]
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f7ff fed2 	bl	80016c0 <printHbridgeDatalogging>
	while (!(HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK))
 800191c:	1df9      	adds	r1, r7, #7
 800191e:	2301      	movs	r3, #1
 8001920:	2201      	movs	r2, #1
 8001922:	4809      	ldr	r0, [pc, #36]	@ (8001948 <autoFreqAdj+0xc8>)
 8001924:	f00e fe9b 	bl	801065e <HAL_UART_Receive>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1b4      	bne.n	8001898 <autoFreqAdj+0x18>


	}
}
 800192e:	bf00      	nop
 8001930:	bf00      	nop
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	08014aac 	.word	0x08014aac
 800193c:	24001048 	.word	0x24001048
 8001940:	24000330 	.word	0x24000330
 8001944:	2400001c 	.word	0x2400001c
 8001948:	24000e38 	.word	0x24000e38

0800194c <autoVoltageAdj>:


void autoVoltageAdj(int16_t userVoltage)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	80fb      	strh	r3, [r7, #6]
	char input;


	//printString("\n\r%Press any key to exit"); //Commented out to allow for automated remote serial control (datalogging)

	printString("Time(us),Freq (Hz),Deadtime (%),Bridge I,VplaL1,VplaL2,VbriS1,VbriS2");
 8001956:	482c      	ldr	r0, [pc, #176]	@ (8001a08 <autoVoltageAdj+0xbc>)
 8001958:	f7fe ff16 	bl	8000788 <printString>
	printCR();
 800195c:	f7fe ff04 	bl	8000768 <printCR>

	//Start timer24 which is used to time when each ADC measurement is captured
	HAL_TIM_Base_Start(&htim24);
 8001960:	482a      	ldr	r0, [pc, #168]	@ (8001a0c <autoVoltageAdj+0xc0>)
 8001962:	f00d f811 	bl	800e988 <HAL_TIM_Base_Start>


	while (!(HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK))
 8001966:	e03f      	b.n	80019e8 <autoVoltageAdj+0x9c>
	{
		uint32_t startTime = __HAL_TIM_GET_COUNTER(&htim24);//TIM24->CNT;
 8001968:	4b28      	ldr	r3, [pc, #160]	@ (8001a0c <autoVoltageAdj+0xc0>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196e:	617b      	str	r3, [r7, #20]
		measureBridgePlasmaADC12();
 8001970:	f7ff fdfa 	bl	8001568 <measureBridgePlasmaADC12>
		//Wait until ADC3 reading is done
		while (sADC.adc12_reading);
 8001974:	bf00      	nop
 8001976:	4b26      	ldr	r3, [pc, #152]	@ (8001a10 <autoVoltageAdj+0xc4>)
 8001978:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	@ 0x70e
 800197c:	b29b      	uxth	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f9      	bne.n	8001976 <autoVoltageAdj+0x2a>
		uint32_t stopTime = __HAL_TIM_GET_COUNTER(&htim24);//TIM24->CNT;
 8001982:	4b22      	ldr	r3, [pc, #136]	@ (8001a0c <autoVoltageAdj+0xc0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001988:	613b      	str	r3, [r7, #16]
		//printADC12data();

		//Calculate delta f
		int16_t voltageCorr;
		voltageCorrection(userVoltage, &voltageCorr);
 800198a:	f107 020c 	add.w	r2, r7, #12
 800198e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001992:	4611      	mov	r1, r2
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fd73 	bl	8001480 <voltageCorrection>

		//char text[100];
		//sprintf(text, "\n\rFrequency correction: %i", (int) freqCorr);
		//printString(text);

		if (sHbridge.deadtime + voltageCorr > MAX_DEADTIME) //GetUint16Input(&sHbridge.frequency, 1, MIN_FREQUENCY, MAX_FREQUENCY))
 800199a:	4b1e      	ldr	r3, [pc, #120]	@ (8001a14 <autoVoltageAdj+0xc8>)
 800199c:	889b      	ldrh	r3, [r3, #4]
 800199e:	461a      	mov	r2, r3
 80019a0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019a4:	4413      	add	r3, r2
 80019a6:	2b28      	cmp	r3, #40	@ 0x28
 80019a8:	dd03      	ble.n	80019b2 <autoVoltageAdj+0x66>
		{   // Calculated freq is higher than max

			//sprintf(text, "\n\r%i is higher than max freq", (int) sHbridge.frequency + freqCorr);
			//printString(text);
			sHbridge.deadtime = MAX_DEADTIME;
 80019aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001a14 <autoVoltageAdj+0xc8>)
 80019ac:	2228      	movs	r2, #40	@ 0x28
 80019ae:	809a      	strh	r2, [r3, #4]
 80019b0:	e014      	b.n	80019dc <autoVoltageAdj+0x90>
		}
		else if (sHbridge.deadtime + voltageCorr < MIN_DEADTIME)
 80019b2:	4b18      	ldr	r3, [pc, #96]	@ (8001a14 <autoVoltageAdj+0xc8>)
 80019b4:	889b      	ldrh	r3, [r3, #4]
 80019b6:	461a      	mov	r2, r3
 80019b8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019bc:	4413      	add	r3, r2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	dc03      	bgt.n	80019ca <autoVoltageAdj+0x7e>
		{
			//sprintf(text, "\n\r%i is lower than min freq", (int) sHbridge.frequency + freqCorr);
			//printString(text);

			sHbridge.deadtime = MIN_DEADTIME;
 80019c2:	4b14      	ldr	r3, [pc, #80]	@ (8001a14 <autoVoltageAdj+0xc8>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	809a      	strh	r2, [r3, #4]
 80019c8:	e008      	b.n	80019dc <autoVoltageAdj+0x90>

		}
		else
		{
			sHbridge.deadtime = sHbridge.deadtime + voltageCorr;
 80019ca:	4b12      	ldr	r3, [pc, #72]	@ (8001a14 <autoVoltageAdj+0xc8>)
 80019cc:	889a      	ldrh	r2, [r3, #4]
 80019ce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	4413      	add	r3, r2
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a14 <autoVoltageAdj+0xc8>)
 80019da:	809a      	strh	r2, [r3, #4]
		}

		programHbridge();
 80019dc:	f7fe fffc 	bl	80009d8 <programHbridge>

		//Print current ADC data
		printHbridgeDatalogging(startTime, stopTime);
 80019e0:	6939      	ldr	r1, [r7, #16]
 80019e2:	6978      	ldr	r0, [r7, #20]
 80019e4:	f7ff fe6c 	bl	80016c0 <printHbridgeDatalogging>
	while (!(HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK))
 80019e8:	f107 010f 	add.w	r1, r7, #15
 80019ec:	2301      	movs	r3, #1
 80019ee:	2201      	movs	r2, #1
 80019f0:	4809      	ldr	r0, [pc, #36]	@ (8001a18 <autoVoltageAdj+0xcc>)
 80019f2:	f00e fe34 	bl	801065e <HAL_UART_Receive>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1b5      	bne.n	8001968 <autoVoltageAdj+0x1c>


	}
}
 80019fc:	bf00      	nop
 80019fe:	bf00      	nop
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	08014aac 	.word	0x08014aac
 8001a0c:	24001048 	.word	0x24001048
 8001a10:	24000330 	.word	0x24000330
 8001a14:	2400001c 	.word	0x2400001c
 8001a18:	24000e38 	.word	0x24000e38
 8001a1c:	00000000 	.word	0x00000000

08001a20 <convertADC3data>:


//Convert ADC3 data to voltages
float convertADC3data(uint32_t item, char **text)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
	float result = 0;
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	60fb      	str	r3, [r7, #12]

	switch (item) {
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b0a      	cmp	r3, #10
 8001a34:	f200 80c5 	bhi.w	8001bc2 <convertADC3data+0x1a2>
 8001a38:	a201      	add	r2, pc, #4	@ (adr r2, 8001a40 <convertADC3data+0x20>)
 8001a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3e:	bf00      	nop
 8001a40:	08001a6d 	.word	0x08001a6d
 8001a44:	08001a9f 	.word	0x08001a9f
 8001a48:	08001ad1 	.word	0x08001ad1
 8001a4c:	08001b03 	.word	0x08001b03
 8001a50:	08001b11 	.word	0x08001b11
 8001a54:	08001b4b 	.word	0x08001b4b
 8001a58:	08001b7d 	.word	0x08001b7d
 8001a5c:	08001b8b 	.word	0x08001b8b
 8001a60:	08001b99 	.word	0x08001b99
 8001a64:	08001ba7 	.word	0x08001ba7
 8001a68:	08001bb5 	.word	0x08001bb5
		case ADC3_VBAT:
			result =  1000*((9.76+169.0)/9.76)*3.3*(((float) sADC.adc3_data[ADC3_VBAT])/4096.0);
 8001a6c:	4b66      	ldr	r3, [pc, #408]	@ (8001c08 <convertADC3data+0x1e8>)
 8001a6e:	f8b3 34b0 	ldrh.w	r3, [r3, #1200]	@ 0x4b0
 8001a72:	ee07 3a90 	vmov	s15, r3
 8001a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a7a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001a7e:	ed9f 5b56 	vldr	d5, [pc, #344]	@ 8001bd8 <convertADC3data+0x1b8>
 8001a82:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a86:	ed9f 6b56 	vldr	d6, [pc, #344]	@ 8001be0 <convertADC3data+0x1c0>
 8001a8a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a8e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a92:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_VBAT (mV)";
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	4a5c      	ldr	r2, [pc, #368]	@ (8001c0c <convertADC3data+0x1ec>)
 8001a9a:	601a      	str	r2, [r3, #0]
			break;
 8001a9c:	e091      	b.n	8001bc2 <convertADC3data+0x1a2>
		case ADC3_15V:
			result =  1000*((30.0+120.0)/30.0)*3.3*(((float) sADC.adc3_data[ADC3_15V])/4096.0);
 8001a9e:	4b5a      	ldr	r3, [pc, #360]	@ (8001c08 <convertADC3data+0x1e8>)
 8001aa0:	f8b3 34b2 	ldrh.w	r3, [r3, #1202]	@ 0x4b2
 8001aa4:	ee07 3a90 	vmov	s15, r3
 8001aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aac:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001ab0:	ed9f 5b49 	vldr	d5, [pc, #292]	@ 8001bd8 <convertADC3data+0x1b8>
 8001ab4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ab8:	ed9f 6b4b 	vldr	d6, [pc, #300]	@ 8001be8 <convertADC3data+0x1c8>
 8001abc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ac0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ac4:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_15V (mV)";
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	4a51      	ldr	r2, [pc, #324]	@ (8001c10 <convertADC3data+0x1f0>)
 8001acc:	601a      	str	r2, [r3, #0]
			break;
 8001ace:	e078      	b.n	8001bc2 <convertADC3data+0x1a2>
		case ADC3_3_3V:
			result =  1000*((30.0+3.0)/30.0)*3.3*(((float) sADC.adc3_data[ADC3_3_3V])/4096.0);
 8001ad0:	4b4d      	ldr	r3, [pc, #308]	@ (8001c08 <convertADC3data+0x1e8>)
 8001ad2:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	@ 0x4b4
 8001ad6:	ee07 3a90 	vmov	s15, r3
 8001ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ade:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001ae2:	ed9f 5b3d 	vldr	d5, [pc, #244]	@ 8001bd8 <convertADC3data+0x1b8>
 8001ae6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001aea:	ed9f 6b41 	vldr	d6, [pc, #260]	@ 8001bf0 <convertADC3data+0x1d0>
 8001aee:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001af2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001af6:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_3_3V (mV)";
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	4a45      	ldr	r2, [pc, #276]	@ (8001c14 <convertADC3data+0x1f4>)
 8001afe:	601a      	str	r2, [r3, #0]
			break;
 8001b00:	e05f      	b.n	8001bc2 <convertADC3data+0x1a2>
		case ADC3_NC3:
			result = 0;
 8001b02:	f04f 0300 	mov.w	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_NC3";
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	4a43      	ldr	r2, [pc, #268]	@ (8001c18 <convertADC3data+0x1f8>)
 8001b0c:	601a      	str	r2, [r3, #0]
			break;
 8001b0e:	e058      	b.n	8001bc2 <convertADC3data+0x1a2>
		case ADC3_BridgeTemp:
			result = 1000*((float) sADC.adc3_data[ADC3_BridgeTemp])*3.3/4096.0;
 8001b10:	4b3d      	ldr	r3, [pc, #244]	@ (8001c08 <convertADC3data+0x1e8>)
 8001b12:	f8b3 34b8 	ldrh.w	r3, [r3, #1208]	@ 0x4b8
 8001b16:	ee07 3a90 	vmov	s15, r3
 8001b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b1e:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8001c1c <convertADC3data+0x1fc>
 8001b22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b2a:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 8001bf8 <convertADC3data+0x1d8>
 8001b2e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001b32:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 8001bd8 <convertADC3data+0x1b8>
 8001b36:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b3a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b3e:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_BridgeTemp (mV)";
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	4a36      	ldr	r2, [pc, #216]	@ (8001c20 <convertADC3data+0x200>)
 8001b46:	601a      	str	r2, [r3, #0]
			break;
 8001b48:	e03b      	b.n	8001bc2 <convertADC3data+0x1a2>
		case ADC3_500VDC:
			result =  1000*((12.0+2000.0)/12.0)*3.3*(((float) sADC.adc3_data[ADC3_500VDC])/4096.0);
 8001b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8001c08 <convertADC3data+0x1e8>)
 8001b4c:	f8b3 34ba 	ldrh.w	r3, [r3, #1210]	@ 0x4ba
 8001b50:	ee07 3a90 	vmov	s15, r3
 8001b54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b58:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001b5c:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8001bd8 <convertADC3data+0x1b8>
 8001b60:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b64:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 8001c00 <convertADC3data+0x1e0>
 8001b68:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b6c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b70:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_500VDC (mV)";
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	4a2b      	ldr	r2, [pc, #172]	@ (8001c24 <convertADC3data+0x204>)
 8001b78:	601a      	str	r2, [r3, #0]
			break;
 8001b7a:	e022      	b.n	8001bc2 <convertADC3data+0x1a2>
		case ADC3_Thermistor1:
			result = 0;
 8001b7c:	f04f 0300 	mov.w	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor1";
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	4a28      	ldr	r2, [pc, #160]	@ (8001c28 <convertADC3data+0x208>)
 8001b86:	601a      	str	r2, [r3, #0]
			break;
 8001b88:	e01b      	b.n	8001bc2 <convertADC3data+0x1a2>
		case ADC3_Thermistor2:
			result = 0;
 8001b8a:	f04f 0300 	mov.w	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor2";
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	4a26      	ldr	r2, [pc, #152]	@ (8001c2c <convertADC3data+0x20c>)
 8001b94:	601a      	str	r2, [r3, #0]
			break;
 8001b96:	e014      	b.n	8001bc2 <convertADC3data+0x1a2>
		case ADC3_Thermistor3:
			result = 0;
 8001b98:	f04f 0300 	mov.w	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor3";
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	4a23      	ldr	r2, [pc, #140]	@ (8001c30 <convertADC3data+0x210>)
 8001ba2:	601a      	str	r2, [r3, #0]
			break;
 8001ba4:	e00d      	b.n	8001bc2 <convertADC3data+0x1a2>
		case ADC3_Thermistor4:
			result = 0;
 8001ba6:	f04f 0300 	mov.w	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor4";
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	4a21      	ldr	r2, [pc, #132]	@ (8001c34 <convertADC3data+0x214>)
 8001bb0:	601a      	str	r2, [r3, #0]
			break;
 8001bb2:	e006      	b.n	8001bc2 <convertADC3data+0x1a2>
		case ADC3_NC10:
			result = 0;
 8001bb4:	f04f 0300 	mov.w	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_NC10";
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	4a1e      	ldr	r2, [pc, #120]	@ (8001c38 <convertADC3data+0x218>)
 8001bbe:	601a      	str	r2, [r3, #0]
			break;
 8001bc0:	bf00      	nop
	}

	return(result);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	ee07 3a90 	vmov	s15, r3
}
 8001bc8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	00000000 	.word	0x00000000
 8001bdc:	40b00000 	.word	0x40b00000
 8001be0:	9714fbcd 	.word	0x9714fbcd
 8001be4:	40ed832c 	.word	0x40ed832c
 8001be8:	00000000 	.word	0x00000000
 8001bec:	40d01d00 	.word	0x40d01d00
 8001bf0:	00000000 	.word	0x00000000
 8001bf4:	40ac5c00 	.word	0x40ac5c00
 8001bf8:	66666666 	.word	0x66666666
 8001bfc:	400a6666 	.word	0x400a6666
 8001c00:	ffffffff 	.word	0xffffffff
 8001c04:	4120e2a7 	.word	0x4120e2a7
 8001c08:	24000330 	.word	0x24000330
 8001c0c:	08014af4 	.word	0x08014af4
 8001c10:	08014b04 	.word	0x08014b04
 8001c14:	08014b14 	.word	0x08014b14
 8001c18:	08014b24 	.word	0x08014b24
 8001c1c:	447a0000 	.word	0x447a0000
 8001c20:	08014b30 	.word	0x08014b30
 8001c24:	08014b48 	.word	0x08014b48
 8001c28:	08014b5c 	.word	0x08014b5c
 8001c2c:	08014b70 	.word	0x08014b70
 8001c30:	08014b84 	.word	0x08014b84
 8001c34:	08014b98 	.word	0x08014b98
 8001c38:	08014bac 	.word	0x08014bac

08001c3c <printADC3data>:

//Print measured ADC3 data on UART3
void printADC3data(void)
{
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b09f      	sub	sp, #124	@ 0x7c
 8001c40:	af02      	add	r7, sp, #8
	if (debug == 1)
 8001c42:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb8 <printADC3data+0x7c>)
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d131      	bne.n	8001cae <printADC3data+0x72>
	{
		printCR();
 8001c4a:	f7fe fd8d 	bl	8000768 <printCR>
		printNumber("No data: ", ADC3_DMA_REQUESTS, 1);
 8001c4e:	2201      	movs	r2, #1
 8001c50:	210b      	movs	r1, #11
 8001c52:	481a      	ldr	r0, [pc, #104]	@ (8001cbc <printADC3data+0x80>)
 8001c54:	f7fe fdda 	bl	800080c <printNumber>
		for (int i=0; i<ADC3_DMA_REQUESTS; i++)
 8001c58:	2300      	movs	r3, #0
 8001c5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001c5c:	e024      	b.n	8001ca8 <printADC3data+0x6c>
		{
			char text[100];
			char *p_text;
			float result = convertADC3data(i, &p_text);
 8001c5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c60:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8001c64:	4611      	mov	r1, r2
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff feda 	bl	8001a20 <convertADC3data>
 8001c6c:	ed87 0a1a 	vstr	s0, [r7, #104]	@ 0x68
			sprintf(text, "%2u %20s: %7u    (%6u)\n\r", i, p_text, (int) result, sADC.adc3_data[i]);
 8001c70:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001c72:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001c76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c7a:	ee17 4a90 	vmov	r4, s15
 8001c7e:	4910      	ldr	r1, [pc, #64]	@ (8001cc0 <printADC3data+0x84>)
 8001c80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c82:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001c86:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001c8a:	4638      	mov	r0, r7
 8001c8c:	9301      	str	r3, [sp, #4]
 8001c8e:	9400      	str	r4, [sp, #0]
 8001c90:	4613      	mov	r3, r2
 8001c92:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001c94:	490b      	ldr	r1, [pc, #44]	@ (8001cc4 <printADC3data+0x88>)
 8001c96:	f010 fd11 	bl	80126bc <siprintf>
			printString(text);
 8001c9a:	463b      	mov	r3, r7
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fd73 	bl	8000788 <printString>
		for (int i=0; i<ADC3_DMA_REQUESTS; i++)
 8001ca2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001ca8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001caa:	2b0a      	cmp	r3, #10
 8001cac:	ddd7      	ble.n	8001c5e <printADC3data+0x22>
		}
	}
}
 8001cae:	bf00      	nop
 8001cb0:	3774      	adds	r7, #116	@ 0x74
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd90      	pop	{r4, r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	24000000 	.word	0x24000000
 8001cbc:	080149cc 	.word	0x080149cc
 8001cc0:	24000330 	.word	0x24000330
 8001cc4:	08014bb8 	.word	0x08014bb8

08001cc8 <measureVoltagesTemperaturesADC3>:

// Measure voltages and temperatures using ADC3
// After the measurement is done the function doneMeasuringVoltagesTemperaturesADC3 is called
void measureVoltagesTemperaturesADC3(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	// This will start the measurement of voltages and temperatures using ADC3
	sADC.adc3_reading = 1; //Started to read ADC3
 8001ccc:	4b05      	ldr	r3, [pc, #20]	@ (8001ce4 <measureVoltagesTemperaturesADC3+0x1c>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f8a3 270c 	strh.w	r2, [r3, #1804]	@ 0x70c
	HAL_ADC_Start_DMA(&hadc3, (uint32_t *) sADC.adc3_data, ADC3_DMA_REQUESTS);
 8001cd4:	220b      	movs	r2, #11
 8001cd6:	4904      	ldr	r1, [pc, #16]	@ (8001ce8 <measureVoltagesTemperaturesADC3+0x20>)
 8001cd8:	4804      	ldr	r0, [pc, #16]	@ (8001cec <measureVoltagesTemperaturesADC3+0x24>)
 8001cda:	f003 fe8b 	bl	80059f4 <HAL_ADC_Start_DMA>

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	24000330 	.word	0x24000330
 8001ce8:	240007e0 	.word	0x240007e0
 8001cec:	24000b68 	.word	0x24000b68

08001cf0 <doneMeasuringVoltagesTemperaturesADC3>:


// Done measuring voltages and temperatures
void doneMeasuringVoltagesTemperaturesADC3(uint32_t errorCode)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	sADC.adc3_reading = 0; //Done reading ADC3
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d28 <doneMeasuringVoltagesTemperaturesADC3+0x38>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f8a3 270c 	strh.w	r2, [r3, #1804]	@ 0x70c

	if (errorCode == HAL_ADC_ERROR_NONE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d006      	beq.n	8001d14 <doneMeasuringVoltagesTemperaturesADC3+0x24>
		// TODO Check temperatures

	}
	else
	{
		printNumber("ADC12 Error Code: ", errorCode, 1);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4807      	ldr	r0, [pc, #28]	@ (8001d2c <doneMeasuringVoltagesTemperaturesADC3+0x3c>)
 8001d10:	f7fe fd7c 	bl	800080c <printNumber>
	}


	//Start ADC1 and ADC2 measurements
	if (sFlashConfig.mode == RUN_MODE)
 8001d14:	4b06      	ldr	r3, [pc, #24]	@ (8001d30 <doneMeasuringVoltagesTemperaturesADC3+0x40>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d101      	bne.n	8001d20 <doneMeasuringVoltagesTemperaturesADC3+0x30>
		measureBridgePlasmaADC12();
 8001d1c:	f7ff fc24 	bl	8001568 <measureBridgePlasmaADC12>

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	24000330 	.word	0x24000330
 8001d2c:	08014a78 	.word	0x08014a78
 8001d30:	24000a48 	.word	0x24000a48

08001d34 <GetNumber>:

// Get an integer number from UART3. If the number is valid, the function returns 1, otherwise 0.
static uint8_t GetNumber(int *number)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	@ 0x28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
	char input;
	char s_input[MAX_INPUT];
	int pos = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	627b      	str	r3, [r7, #36]	@ 0x24
	//Wait for user input
	HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 100000);
 8001d40:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8001d44:	4b2f      	ldr	r3, [pc, #188]	@ (8001e04 <GetNumber+0xd0>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	482f      	ldr	r0, [pc, #188]	@ (8001e08 <GetNumber+0xd4>)
 8001d4a:	f00e fc88 	bl	801065e <HAL_UART_Receive>
	while (input != 13)
 8001d4e:	e039      	b.n	8001dc4 <GetNumber+0x90>
	{
		// Backspace?
		if ((input == 127) && (pos > 0))
 8001d50:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d54:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d56:	d10e      	bne.n	8001d76 <GetNumber+0x42>
 8001d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	dd0b      	ble.n	8001d76 <GetNumber+0x42>
		{
			// Delete digit
			HAL_UART_Transmit(&huart3, (uint8_t *) &input, 1, 1000);
 8001d5e:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8001d62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d66:	2201      	movs	r2, #1
 8001d68:	4827      	ldr	r0, [pc, #156]	@ (8001e08 <GetNumber+0xd4>)
 8001d6a:	f00e fbea 	bl	8010542 <HAL_UART_Transmit>
			pos--;
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d70:	3b01      	subs	r3, #1
 8001d72:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d74:	e018      	b.n	8001da8 <GetNumber+0x74>
		}
		// A digit?
		else if ((input >= 48) && (input <=57))
 8001d76:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d7a:	2b2f      	cmp	r3, #47	@ 0x2f
 8001d7c:	d914      	bls.n	8001da8 <GetNumber+0x74>
 8001d7e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d82:	2b39      	cmp	r3, #57	@ 0x39
 8001d84:	d810      	bhi.n	8001da8 <GetNumber+0x74>
		{
			// Echo digit and store it
			HAL_UART_Transmit(&huart3, (uint8_t *) &input, 1, 1000);
 8001d86:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8001d8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d8e:	2201      	movs	r2, #1
 8001d90:	481d      	ldr	r0, [pc, #116]	@ (8001e08 <GetNumber+0xd4>)
 8001d92:	f00e fbd6 	bl	8010542 <HAL_UART_Transmit>
			s_input[pos++] = input;
 8001d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d98:	1c5a      	adds	r2, r3, #1
 8001d9a:	627a      	str	r2, [r7, #36]	@ 0x24
 8001d9c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001da0:	3328      	adds	r3, #40	@ 0x28
 8001da2:	443b      	add	r3, r7
 8001da4:	f803 2c1c 	strb.w	r2, [r3, #-28]
		}

		// Get next character
		if (pos < MAX_INPUT-1)
 8001da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001daa:	2b12      	cmp	r3, #18
 8001dac:	dc07      	bgt.n	8001dbe <GetNumber+0x8a>
		{
			HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 100000);
 8001dae:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8001db2:	4b14      	ldr	r3, [pc, #80]	@ (8001e04 <GetNumber+0xd0>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	4814      	ldr	r0, [pc, #80]	@ (8001e08 <GetNumber+0xd4>)
 8001db8:	f00e fc51 	bl	801065e <HAL_UART_Receive>
 8001dbc:	e002      	b.n	8001dc4 <GetNumber+0x90>
		}
		else
		{
			input = 13; // Terminate while loop
 8001dbe:	230d      	movs	r3, #13
 8001dc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	while (input != 13)
 8001dc4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001dc8:	2b0d      	cmp	r3, #13
 8001dca:	d1c1      	bne.n	8001d50 <GetNumber+0x1c>
		}
	}
	s_input[pos] = 0;
 8001dcc:	f107 020c 	add.w	r2, r7, #12
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd2:	4413      	add	r3, r2
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
	if (pos > 0)
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	dd07      	ble.n	8001dee <GetNumber+0xba>
		*number = atoi(s_input);
 8001dde:	f107 030c 	add.w	r3, r7, #12
 8001de2:	4618      	mov	r0, r3
 8001de4:	f00f fe8e 	bl	8011b04 <atoi>
 8001de8:	4602      	mov	r2, r0
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	601a      	str	r2, [r3, #0]
	return(pos > 0);
 8001dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	bfcc      	ite	gt
 8001df4:	2301      	movgt	r3, #1
 8001df6:	2300      	movle	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3728      	adds	r7, #40	@ 0x28
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	000186a0 	.word	0x000186a0
 8001e08:	24000e38 	.word	0x24000e38

08001e0c <GetUint16Input>:

// Get an 16bit unsigned number from UAR3 and validate the input againts min and max values
static uint8_t GetUint16Input(uint16_t *input, uint8_t bValidate, uint16_t min, uint16_t max)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b0a0      	sub	sp, #128	@ 0x80
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	4608      	mov	r0, r1
 8001e16:	4611      	mov	r1, r2
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	72fb      	strb	r3, [r7, #11]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	813b      	strh	r3, [r7, #8]
 8001e22:	4613      	mov	r3, r2
 8001e24:	80fb      	strh	r3, [r7, #6]
	int number;
	char s_output[100];
	uint8_t result;

	result = GetNumber(&number);
 8001e26:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff ff82 	bl	8001d34 <GetNumber>
 8001e30:	4603      	mov	r3, r0
 8001e32:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (bValidate)
 8001e36:	7afb      	ldrb	r3, [r7, #11]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d02f      	beq.n	8001e9c <GetUint16Input+0x90>
	{
		if (result && (number >= min) && (number <= max))
 8001e3c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d013      	beq.n	8001e6c <GetUint16Input+0x60>
 8001e44:	893a      	ldrh	r2, [r7, #8]
 8001e46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	dc0f      	bgt.n	8001e6c <GetUint16Input+0x60>
 8001e4c:	88fa      	ldrh	r2, [r7, #6]
 8001e4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e50:	429a      	cmp	r2, r3
 8001e52:	db0b      	blt.n	8001e6c <GetUint16Input+0x60>
		{
			*input =  number;
 8001e54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, (uint8_t *) " - Ok\n\r", 7, 1000);
 8001e5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e60:	2207      	movs	r2, #7
 8001e62:	4911      	ldr	r1, [pc, #68]	@ (8001ea8 <GetUint16Input+0x9c>)
 8001e64:	4811      	ldr	r0, [pc, #68]	@ (8001eac <GetUint16Input+0xa0>)
 8001e66:	f00e fb6c 	bl	8010542 <HAL_UART_Transmit>
 8001e6a:	e017      	b.n	8001e9c <GetUint16Input+0x90>
		}
		else
		{
			result = 0; //Indicate failure
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			sprintf(s_output, " - Invalid number, valid range %u - %u\n\r", min, max);
 8001e72:	893a      	ldrh	r2, [r7, #8]
 8001e74:	88fb      	ldrh	r3, [r7, #6]
 8001e76:	f107 0014 	add.w	r0, r7, #20
 8001e7a:	490d      	ldr	r1, [pc, #52]	@ (8001eb0 <GetUint16Input+0xa4>)
 8001e7c:	f010 fc1e 	bl	80126bc <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe fa93 	bl	80003b0 <strlen>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	f107 0114 	add.w	r1, r7, #20
 8001e92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e96:	4805      	ldr	r0, [pc, #20]	@ (8001eac <GetUint16Input+0xa0>)
 8001e98:	f00e fb53 	bl	8010542 <HAL_UART_Transmit>
		}
	}
	return(result);
 8001e9c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3780      	adds	r7, #128	@ 0x80
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	08014bd4 	.word	0x08014bd4
 8001eac:	24000e38 	.word	0x24000e38
 8001eb0:	08014bdc 	.word	0x08014bdc

08001eb4 <HAL_ADC_ErrorCallback>:
//		*number = atoi(s_input);
//	return(pos > 0);
//}

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef* hadc)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
	// ADC1 is master and ADC2 is slave
	if (hadc->Instance == ADC1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a0e      	ldr	r2, [pc, #56]	@ (8001efc <HAL_ADC_ErrorCallback+0x48>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d108      	bne.n	8001ed8 <HAL_ADC_ErrorCallback+0x24>
	{
		printNumber("** ERROR ** ADC12 Error Code: ", hadc->ErrorCode, 1);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	2201      	movs	r2, #1
 8001ece:	4619      	mov	r1, r3
 8001ed0:	480b      	ldr	r0, [pc, #44]	@ (8001f00 <HAL_ADC_ErrorCallback+0x4c>)
 8001ed2:	f7fe fc9b 	bl	800080c <printNumber>
	}
	else if ((hadc->Instance == ADC3))
	{
		printNumber("** ERROR ** ADC3 Error Code: ", hadc->ErrorCode, 1);
	}
}
 8001ed6:	e00c      	b.n	8001ef2 <HAL_ADC_ErrorCallback+0x3e>
	else if ((hadc->Instance == ADC3))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a09      	ldr	r2, [pc, #36]	@ (8001f04 <HAL_ADC_ErrorCallback+0x50>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d107      	bne.n	8001ef2 <HAL_ADC_ErrorCallback+0x3e>
		printNumber("** ERROR ** ADC3 Error Code: ", hadc->ErrorCode, 1);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	2201      	movs	r2, #1
 8001eea:	4619      	mov	r1, r3
 8001eec:	4806      	ldr	r0, [pc, #24]	@ (8001f08 <HAL_ADC_ErrorCallback+0x54>)
 8001eee:	f7fe fc8d 	bl	800080c <printNumber>
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40022000 	.word	0x40022000
 8001f00:	08014c08 	.word	0x08014c08
 8001f04:	58026000 	.word	0x58026000
 8001f08:	08014c28 	.word	0x08014c28

08001f0c <HAL_ADC_ConvCpltCallback>:

// ADC conversion and DMA transfer complete
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]

	// ADC1 is master and ADC2 is slave
	if (hadc->Instance == ADC1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a10      	ldr	r2, [pc, #64]	@ (8001f5c <HAL_ADC_ConvCpltCallback+0x50>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d105      	bne.n	8001f2a <HAL_ADC_ConvCpltCallback+0x1e>
	{
		//HAL_ADCEx_MultiModeStop_DMA(&hadc1);
		doneMeasuringBridgePlasmaADC12(hadc->ErrorCode);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fb76 	bl	8001614 <doneMeasuringBridgePlasmaADC12>
	else
	{
		HAL_UART_Transmit(&huart3, (uint8_t *) "** ERROR ** Unknown ADC\n\r", 25, 1000);
		printCR();
	}
}
 8001f28:	e013      	b.n	8001f52 <HAL_ADC_ConvCpltCallback+0x46>
	else if (hadc->Instance == ADC3)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a0c      	ldr	r2, [pc, #48]	@ (8001f60 <HAL_ADC_ConvCpltCallback+0x54>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d105      	bne.n	8001f40 <HAL_ADC_ConvCpltCallback+0x34>
		doneMeasuringVoltagesTemperaturesADC3(hadc->ErrorCode);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff fed9 	bl	8001cf0 <doneMeasuringVoltagesTemperaturesADC3>
}
 8001f3e:	e008      	b.n	8001f52 <HAL_ADC_ConvCpltCallback+0x46>
		HAL_UART_Transmit(&huart3, (uint8_t *) "** ERROR ** Unknown ADC\n\r", 25, 1000);
 8001f40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f44:	2219      	movs	r2, #25
 8001f46:	4907      	ldr	r1, [pc, #28]	@ (8001f64 <HAL_ADC_ConvCpltCallback+0x58>)
 8001f48:	4807      	ldr	r0, [pc, #28]	@ (8001f68 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001f4a:	f00e fafa 	bl	8010542 <HAL_UART_Transmit>
		printCR();
 8001f4e:	f7fe fc0b 	bl	8000768 <printCR>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40022000 	.word	0x40022000
 8001f60:	58026000 	.word	0x58026000
 8001f64:	08014c48 	.word	0x08014c48
 8001f68:	24000e38 	.word	0x24000e38

08001f6c <PowerOffLowSupplies>:
//Power Off Supplies in order3.3V switch and 15V
/**
 * returns 1 if power off unsuccessful. 0 on success
 */
char PowerOffLowSupplies(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
	char status;
	if (powerStatus == V500_OFF)
 8001f72:	4b14      	ldr	r3, [pc, #80]	@ (8001fc4 <PowerOffLowSupplies+0x58>)
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d118      	bne.n	8001fac <PowerOffLowSupplies+0x40>
	{
		//Power off 3.3V switch voltage
		HAL_GPIO_WritePin(OUT_3V3_SWITCH_GPIO_Port, OUT_3V3_SWITCH_Pin, GPIO_PIN_SET);
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	4812      	ldr	r0, [pc, #72]	@ (8001fc8 <PowerOffLowSupplies+0x5c>)
 8001f80:	f009 f8f0 	bl	800b164 <HAL_GPIO_WritePin>
		supply_status.s3_3V = 0;
 8001f84:	4b11      	ldr	r3, [pc, #68]	@ (8001fcc <PowerOffLowSupplies+0x60>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	f002 feb4 	bl	8004cf8 <HAL_Delay>

		//Power off 15V
		HAL_GPIO_WritePin(OUT_15V_ENABLE_GPIO_Port, OUT_15V_ENABLE_Pin, GPIO_PIN_SET);		//There is an inverter between MCU and the output, thus SET
 8001f90:	2201      	movs	r2, #1
 8001f92:	2102      	movs	r1, #2
 8001f94:	480c      	ldr	r0, [pc, #48]	@ (8001fc8 <PowerOffLowSupplies+0x5c>)
 8001f96:	f009 f8e5 	bl	800b164 <HAL_GPIO_WritePin>
		supply_status.s15V = 0;
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001fcc <PowerOffLowSupplies+0x60>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	705a      	strb	r2, [r3, #1]
		HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	f002 fea9 	bl	8004cf8 <HAL_Delay>
		status = 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	71fb      	strb	r3, [r7, #7]
 8001faa:	e006      	b.n	8001fba <PowerOffLowSupplies+0x4e>
	}
	else
	{
		printString("** ERROR ** PowerOffLowSupplies: 500V is On\n\r");
 8001fac:	4808      	ldr	r0, [pc, #32]	@ (8001fd0 <PowerOffLowSupplies+0x64>)
 8001fae:	f7fe fbeb 	bl	8000788 <printString>
		printCR();
 8001fb2:	f7fe fbd9 	bl	8000768 <printCR>
		status = 1;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	71fb      	strb	r3, [r7, #7]
	}
	return status;
 8001fba:	79fb      	ldrb	r3, [r7, #7]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	24000a44 	.word	0x24000a44
 8001fc8:	58020c00 	.word	0x58020c00
 8001fcc:	24000a40 	.word	0x24000a40
 8001fd0:	08014c64 	.word	0x08014c64

08001fd4 <PowerOffHighSupplies>:
//Power Off Supply 500V
/**
 * Returns 1 if power off unsuccessful. 0 on success
 */
char PowerOffHighSupplies(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
	char status;
	//Make sure the H-bridge outputs are zero before turning off power
	stopHbridge();
 8001fd8:	f7fe fca6 	bl	8000928 <stopHbridge>

	//Power off 500V
	HAL_GPIO_WritePin(OUT_500V_ENABLE_GPIO_Port, OUT_500V_ENABLE_Pin, GPIO_PIN_SET);	//There is an inverter between MCU and the output, thus SET
 8001fdc:	2201      	movs	r2, #1
 8001fde:	2101      	movs	r1, #1
 8001fe0:	480d      	ldr	r0, [pc, #52]	@ (8002018 <PowerOffHighSupplies+0x44>)
 8001fe2:	f009 f8bf 	bl	800b164 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001fe6:	2001      	movs	r0, #1
 8001fe8:	f002 fe86 	bl	8004cf8 <HAL_Delay>

	//Disable Line Drive 1
	HAL_GPIO_WritePin(LINE_DRIVER1_ENABLE_GPIO_Port, LINE_DRIVER1_ENABLE_Pin, GPIO_PIN_SET);
 8001fec:	2201      	movs	r2, #1
 8001fee:	2104      	movs	r1, #4
 8001ff0:	480a      	ldr	r0, [pc, #40]	@ (800201c <PowerOffHighSupplies+0x48>)
 8001ff2:	f009 f8b7 	bl	800b164 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001ff6:	2001      	movs	r0, #1
 8001ff8:	f002 fe7e 	bl	8004cf8 <HAL_Delay>

	//Signal to robot controller all power supplies are inactive.
	HAL_GPIO_WritePin(LED_ACTIVE_GPIO_Port, LED_ACTIVE_Pin, GPIO_PIN_SET);			//There is an inverter between MCU and the output, thus SET
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	2101      	movs	r1, #1
 8002000:	4807      	ldr	r0, [pc, #28]	@ (8002020 <PowerOffHighSupplies+0x4c>)
 8002002:	f009 f8af 	bl	800b164 <HAL_GPIO_WritePin>

	powerStatus = V500_OFF;
 8002006:	4b07      	ldr	r3, [pc, #28]	@ (8002024 <PowerOffHighSupplies+0x50>)
 8002008:	2200      	movs	r2, #0
 800200a:	801a      	strh	r2, [r3, #0]
	supply_status.sHV = 0;
 800200c:	4b06      	ldr	r3, [pc, #24]	@ (8002028 <PowerOffHighSupplies+0x54>)
 800200e:	2200      	movs	r2, #0
 8002010:	709a      	strb	r2, [r3, #2]
	return 0;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	bd80      	pop	{r7, pc}
 8002018:	58021800 	.word	0x58021800
 800201c:	58020400 	.word	0x58020400
 8002020:	58021000 	.word	0x58021000
 8002024:	24000a44 	.word	0x24000a44
 8002028:	24000a40 	.word	0x24000a40

0800202c <PowerOffSupplies>:

void PowerOffSupplies(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
	PowerOffHighSupplies();
 8002030:	f7ff ffd0 	bl	8001fd4 <PowerOffHighSupplies>
	PowerOffLowSupplies();
 8002034:	f7ff ff9a 	bl	8001f6c <PowerOffLowSupplies>
}
 8002038:	bf00      	nop
 800203a:	bd80      	pop	{r7, pc}

0800203c <PowerOnLowSupplies>:

//Power On Supplies in order 15V, 3.3V switch
//Returns 1 if the power up sequence was successful, and 0 if it failed
int PowerOnLowSupplies(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
	//Power on 15V
	//printString("\n\rPower on 15V - ");
	HAL_GPIO_WritePin(OUT_15V_ENABLE_GPIO_Port, OUT_15V_ENABLE_Pin, GPIO_PIN_RESET);	//There is an inverter between MCU and the output, thus RESET
 8002040:	2200      	movs	r2, #0
 8002042:	2102      	movs	r1, #2
 8002044:	4819      	ldr	r0, [pc, #100]	@ (80020ac <PowerOnLowSupplies+0x70>)
 8002046:	f009 f88d 	bl	800b164 <HAL_GPIO_WritePin>
	printString("\n\rPower on 15V - ");
 800204a:	4819      	ldr	r0, [pc, #100]	@ (80020b0 <PowerOnLowSupplies+0x74>)
 800204c:	f7fe fb9c 	bl	8000788 <printString>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8002050:	2001      	movs	r0, #1
 8002052:	f002 fe51 	bl	8004cf8 <HAL_Delay>

	//Start reading ADC3 channels
	measureVoltagesTemperaturesADC3();
 8002056:	f7ff fe37 	bl	8001cc8 <measureVoltagesTemperaturesADC3>
	//Wait until ADC3 reading is done
	while (sADC.adc3_reading) ;
 800205a:	bf00      	nop
 800205c:	4b15      	ldr	r3, [pc, #84]	@ (80020b4 <PowerOnLowSupplies+0x78>)
 800205e:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	@ 0x70c
 8002062:	b29b      	uxth	r3, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1f9      	bne.n	800205c <PowerOnLowSupplies+0x20>

	//Check 15V voltage
	if (sADC.adc3_data[ADC3_15V] >= sADC3threshold[ADC3_15V])
 8002068:	4b12      	ldr	r3, [pc, #72]	@ (80020b4 <PowerOnLowSupplies+0x78>)
 800206a:	f8b3 24b2 	ldrh.w	r2, [r3, #1202]	@ 0x4b2
 800206e:	4b12      	ldr	r3, [pc, #72]	@ (80020b8 <PowerOnLowSupplies+0x7c>)
 8002070:	885b      	ldrh	r3, [r3, #2]
 8002072:	429a      	cmp	r2, r3
 8002074:	d312      	bcc.n	800209c <PowerOnLowSupplies+0x60>
	{
		printString("Ok");
 8002076:	4811      	ldr	r0, [pc, #68]	@ (80020bc <PowerOnLowSupplies+0x80>)
 8002078:	f7fe fb86 	bl	8000788 <printString>
		supply_status.s15V = 1;
 800207c:	4b10      	ldr	r3, [pc, #64]	@ (80020c0 <PowerOnLowSupplies+0x84>)
 800207e:	2201      	movs	r2, #1
 8002080:	705a      	strb	r2, [r3, #1]
		PowerOffLowSupplies();
		return(0);
	}

	//Power on 3.3V switch voltage
	printString("\n\rPower on 3.3V switch");
 8002082:	4810      	ldr	r0, [pc, #64]	@ (80020c4 <PowerOnLowSupplies+0x88>)
 8002084:	f7fe fb80 	bl	8000788 <printString>
	HAL_GPIO_WritePin(OUT_3V3_SWITCH_GPIO_Port, OUT_3V3_SWITCH_Pin, GPIO_PIN_RESET);
 8002088:	2200      	movs	r2, #0
 800208a:	2101      	movs	r1, #1
 800208c:	4807      	ldr	r0, [pc, #28]	@ (80020ac <PowerOnLowSupplies+0x70>)
 800208e:	f009 f869 	bl	800b164 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8002092:	2001      	movs	r0, #1
 8002094:	f002 fe30 	bl	8004cf8 <HAL_Delay>

	return(1);
 8002098:	2301      	movs	r3, #1
 800209a:	e005      	b.n	80020a8 <PowerOnLowSupplies+0x6c>
		printString("Fail");
 800209c:	480a      	ldr	r0, [pc, #40]	@ (80020c8 <PowerOnLowSupplies+0x8c>)
 800209e:	f7fe fb73 	bl	8000788 <printString>
		PowerOffLowSupplies();
 80020a2:	f7ff ff63 	bl	8001f6c <PowerOffLowSupplies>
		return(0);
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	58020c00 	.word	0x58020c00
 80020b0:	08014c94 	.word	0x08014c94
 80020b4:	24000330 	.word	0x24000330
 80020b8:	24000004 	.word	0x24000004
 80020bc:	08014ca8 	.word	0x08014ca8
 80020c0:	24000a40 	.word	0x24000a40
 80020c4:	08014cb4 	.word	0x08014cb4
 80020c8:	08014cac 	.word	0x08014cac

080020cc <PowerOnLowSupplies_rc>:

//Power On Supplies in order 15V, 3.3V switch
//Returns 1 if the power up sequence was successful, and 0 if it failed
//modified to remove echo info
int PowerOnLowSupplies_rc(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
	//Power on 15V
	//printString("\n\rPower on 15V - ");
	HAL_GPIO_WritePin(OUT_15V_ENABLE_GPIO_Port, OUT_15V_ENABLE_Pin, GPIO_PIN_RESET);	//There is an inverter between MCU and the output, thus RESET
 80020d0:	2200      	movs	r2, #0
 80020d2:	2102      	movs	r1, #2
 80020d4:	4813      	ldr	r0, [pc, #76]	@ (8002124 <PowerOnLowSupplies_rc+0x58>)
 80020d6:	f009 f845 	bl	800b164 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 80020da:	2001      	movs	r0, #1
 80020dc:	f002 fe0c 	bl	8004cf8 <HAL_Delay>

	//Start reading ADC3 channels
	measureVoltagesTemperaturesADC3();
 80020e0:	f7ff fdf2 	bl	8001cc8 <measureVoltagesTemperaturesADC3>
	//Wait until ADC3 reading is done
	while (sADC.adc3_reading) ;
 80020e4:	bf00      	nop
 80020e6:	4b10      	ldr	r3, [pc, #64]	@ (8002128 <PowerOnLowSupplies_rc+0x5c>)
 80020e8:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	@ 0x70c
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f9      	bne.n	80020e6 <PowerOnLowSupplies_rc+0x1a>

	//Check 15V voltage
	if (sADC.adc3_data[ADC3_15V] >= sADC3threshold[ADC3_15V])
 80020f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002128 <PowerOnLowSupplies_rc+0x5c>)
 80020f4:	f8b3 24b2 	ldrh.w	r2, [r3, #1202]	@ 0x4b2
 80020f8:	4b0c      	ldr	r3, [pc, #48]	@ (800212c <PowerOnLowSupplies_rc+0x60>)
 80020fa:	885b      	ldrh	r3, [r3, #2]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d30c      	bcc.n	800211a <PowerOnLowSupplies_rc+0x4e>
	{
		supply_status.s15V = 1;
 8002100:	4b0b      	ldr	r3, [pc, #44]	@ (8002130 <PowerOnLowSupplies_rc+0x64>)
 8002102:	2201      	movs	r2, #1
 8002104:	705a      	strb	r2, [r3, #1]
		PowerOffLowSupplies();
		return(0);
	}

	//Power on 3.3V switch voltage
	HAL_GPIO_WritePin(OUT_3V3_SWITCH_GPIO_Port, OUT_3V3_SWITCH_Pin, GPIO_PIN_RESET);
 8002106:	2200      	movs	r2, #0
 8002108:	2101      	movs	r1, #1
 800210a:	4806      	ldr	r0, [pc, #24]	@ (8002124 <PowerOnLowSupplies_rc+0x58>)
 800210c:	f009 f82a 	bl	800b164 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8002110:	2001      	movs	r0, #1
 8002112:	f002 fdf1 	bl	8004cf8 <HAL_Delay>

	return(1);
 8002116:	2301      	movs	r3, #1
 8002118:	e002      	b.n	8002120 <PowerOnLowSupplies_rc+0x54>
		PowerOffLowSupplies();
 800211a:	f7ff ff27 	bl	8001f6c <PowerOffLowSupplies>
		return(0);
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	bd80      	pop	{r7, pc}
 8002124:	58020c00 	.word	0x58020c00
 8002128:	24000330 	.word	0x24000330
 800212c:	24000004 	.word	0x24000004
 8002130:	24000a40 	.word	0x24000a40

08002134 <PowerOnHighSupplies>:

//Power On Supply 500V
//Returns 1 if the power up was successful, and 0 if it failed
int PowerOnHighSupplies(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
	stopHbridge(); 	//Make sure the H-bridge outputs are zero before enabling the line driver
 8002138:	f7fe fbf6 	bl	8000928 <stopHbridge>

	//Enable Line Drive 1
	printString("\n\rEnable Line Drive 1");
 800213c:	481d      	ldr	r0, [pc, #116]	@ (80021b4 <PowerOnHighSupplies+0x80>)
 800213e:	f7fe fb23 	bl	8000788 <printString>
	HAL_GPIO_WritePin(LINE_DRIVER1_ENABLE_GPIO_Port, LINE_DRIVER1_ENABLE_Pin, GPIO_PIN_RESET);
 8002142:	2200      	movs	r2, #0
 8002144:	2104      	movs	r1, #4
 8002146:	481c      	ldr	r0, [pc, #112]	@ (80021b8 <PowerOnHighSupplies+0x84>)
 8002148:	f009 f80c 	bl	800b164 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 800214c:	2001      	movs	r0, #1
 800214e:	f002 fdd3 	bl	8004cf8 <HAL_Delay>

	//Power on 500V
	printString("\n\rPower on 500V - ");
 8002152:	481a      	ldr	r0, [pc, #104]	@ (80021bc <PowerOnHighSupplies+0x88>)
 8002154:	f7fe fb18 	bl	8000788 <printString>
	HAL_GPIO_WritePin(OUT_500V_ENABLE_GPIO_Port, OUT_500V_ENABLE_Pin, GPIO_PIN_RESET);	//There is an inverter between MCU and the output, thus RESET
 8002158:	2200      	movs	r2, #0
 800215a:	2101      	movs	r1, #1
 800215c:	4818      	ldr	r0, [pc, #96]	@ (80021c0 <PowerOnHighSupplies+0x8c>)
 800215e:	f009 f801 	bl	800b164 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8002162:	2001      	movs	r0, #1
 8002164:	f002 fdc8 	bl	8004cf8 <HAL_Delay>

	//Start reading ADC3 channels
	measureVoltagesTemperaturesADC3();
 8002168:	f7ff fdae 	bl	8001cc8 <measureVoltagesTemperaturesADC3>
	//Wait until ADC reading is done
	while (sADC.adc3_reading) ;
 800216c:	bf00      	nop
 800216e:	4b15      	ldr	r3, [pc, #84]	@ (80021c4 <PowerOnHighSupplies+0x90>)
 8002170:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	@ 0x70c
 8002174:	b29b      	uxth	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f9      	bne.n	800216e <PowerOnHighSupplies+0x3a>

	//Check 500V voltage
	if (sADC.adc3_data[ADC3_500VDC] >= sADC3threshold[ADC3_500VDC])
 800217a:	4b12      	ldr	r3, [pc, #72]	@ (80021c4 <PowerOnHighSupplies+0x90>)
 800217c:	f8b3 24ba 	ldrh.w	r2, [r3, #1210]	@ 0x4ba
 8002180:	4b11      	ldr	r3, [pc, #68]	@ (80021c8 <PowerOnHighSupplies+0x94>)
 8002182:	895b      	ldrh	r3, [r3, #10]
 8002184:	429a      	cmp	r2, r3
 8002186:	d306      	bcc.n	8002196 <PowerOnHighSupplies+0x62>
	{
		printString("Ok");
 8002188:	4810      	ldr	r0, [pc, #64]	@ (80021cc <PowerOnHighSupplies+0x98>)
 800218a:	f7fe fafd 	bl	8000788 <printString>
		supply_status.sHV = 1;
 800218e:	4b10      	ldr	r3, [pc, #64]	@ (80021d0 <PowerOnHighSupplies+0x9c>)
 8002190:	2201      	movs	r2, #1
 8002192:	709a      	strb	r2, [r3, #2]
 8002194:	e002      	b.n	800219c <PowerOnHighSupplies+0x68>
	}
	else
	{
		//printString("Fail");
		printString("debug");
 8002196:	480f      	ldr	r0, [pc, #60]	@ (80021d4 <PowerOnHighSupplies+0xa0>)
 8002198:	f7fe faf6 	bl	8000788 <printString>
		//PowerOffHighSupplies();
		//return(0);
	}

	//Signal to robot controller all power supplies are active
	HAL_GPIO_WritePin(LED_ACTIVE_GPIO_Port, LED_ACTIVE_Pin, GPIO_PIN_RESET);	//There is an inverter between MCU and the output, thus RESET
 800219c:	2200      	movs	r2, #0
 800219e:	2101      	movs	r1, #1
 80021a0:	480d      	ldr	r0, [pc, #52]	@ (80021d8 <PowerOnHighSupplies+0xa4>)
 80021a2:	f008 ffdf 	bl	800b164 <HAL_GPIO_WritePin>

	powerStatus = V500_ON;
 80021a6:	4b0d      	ldr	r3, [pc, #52]	@ (80021dc <PowerOnHighSupplies+0xa8>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	801a      	strh	r2, [r3, #0]

	return(1);
 80021ac:	2301      	movs	r3, #1
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	08014ccc 	.word	0x08014ccc
 80021b8:	58020400 	.word	0x58020400
 80021bc:	08014ce4 	.word	0x08014ce4
 80021c0:	58021800 	.word	0x58021800
 80021c4:	24000330 	.word	0x24000330
 80021c8:	24000004 	.word	0x24000004
 80021cc:	08014ca8 	.word	0x08014ca8
 80021d0:	24000a40 	.word	0x24000a40
 80021d4:	08014cf8 	.word	0x08014cf8
 80021d8:	58021000 	.word	0x58021000
 80021dc:	24000a44 	.word	0x24000a44

080021e0 <PowerOnHighSupplies_rc>:

//Power On Supply 500V
//Returns 1 if the power up was successful, and 0 if it failed
//modifed to remove echo info
int PowerOnHighSupplies_rc(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
	stopHbridge(); 	//Make sure the H-bridge outputs are zero before enabling the line driver
 80021e4:	f7fe fba0 	bl	8000928 <stopHbridge>

	//Enable Line Drive 1
	HAL_GPIO_WritePin(LINE_DRIVER1_ENABLE_GPIO_Port, LINE_DRIVER1_ENABLE_Pin, GPIO_PIN_RESET);
 80021e8:	2200      	movs	r2, #0
 80021ea:	2104      	movs	r1, #4
 80021ec:	4817      	ldr	r0, [pc, #92]	@ (800224c <PowerOnHighSupplies_rc+0x6c>)
 80021ee:	f008 ffb9 	bl	800b164 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 80021f2:	2001      	movs	r0, #1
 80021f4:	f002 fd80 	bl	8004cf8 <HAL_Delay>

	//Power on 500V
	HAL_GPIO_WritePin(OUT_500V_ENABLE_GPIO_Port, OUT_500V_ENABLE_Pin, GPIO_PIN_RESET);	//There is an inverter between MCU and the output, thus RESET
 80021f8:	2200      	movs	r2, #0
 80021fa:	2101      	movs	r1, #1
 80021fc:	4814      	ldr	r0, [pc, #80]	@ (8002250 <PowerOnHighSupplies_rc+0x70>)
 80021fe:	f008 ffb1 	bl	800b164 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8002202:	2001      	movs	r0, #1
 8002204:	f002 fd78 	bl	8004cf8 <HAL_Delay>

	//Start reading ADC3 channels
	measureVoltagesTemperaturesADC3();
 8002208:	f7ff fd5e 	bl	8001cc8 <measureVoltagesTemperaturesADC3>
	//Wait until ADC reading is done
	while (sADC.adc3_reading) ;
 800220c:	bf00      	nop
 800220e:	4b11      	ldr	r3, [pc, #68]	@ (8002254 <PowerOnHighSupplies_rc+0x74>)
 8002210:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	@ 0x70c
 8002214:	b29b      	uxth	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f9      	bne.n	800220e <PowerOnHighSupplies_rc+0x2e>

	//Check 500V voltage
	if (sADC.adc3_data[ADC3_500VDC] >= sADC3threshold[ADC3_500VDC])
 800221a:	4b0e      	ldr	r3, [pc, #56]	@ (8002254 <PowerOnHighSupplies_rc+0x74>)
 800221c:	f8b3 24ba 	ldrh.w	r2, [r3, #1210]	@ 0x4ba
 8002220:	4b0d      	ldr	r3, [pc, #52]	@ (8002258 <PowerOnHighSupplies_rc+0x78>)
 8002222:	895b      	ldrh	r3, [r3, #10]
 8002224:	429a      	cmp	r2, r3
 8002226:	d30c      	bcc.n	8002242 <PowerOnHighSupplies_rc+0x62>
	{
		supply_status.sHV = 1;
 8002228:	4b0c      	ldr	r3, [pc, #48]	@ (800225c <PowerOnHighSupplies_rc+0x7c>)
 800222a:	2201      	movs	r2, #1
 800222c:	709a      	strb	r2, [r3, #2]
		PowerOffHighSupplies();
		return(0);
	}

	//Signal to robot controller all power supplies are active
	HAL_GPIO_WritePin(LED_ACTIVE_GPIO_Port, LED_ACTIVE_Pin, GPIO_PIN_RESET);	//There is an inverter between MCU and the output, thus RESET
 800222e:	2200      	movs	r2, #0
 8002230:	2101      	movs	r1, #1
 8002232:	480b      	ldr	r0, [pc, #44]	@ (8002260 <PowerOnHighSupplies_rc+0x80>)
 8002234:	f008 ff96 	bl	800b164 <HAL_GPIO_WritePin>

	powerStatus = V500_ON;
 8002238:	4b0a      	ldr	r3, [pc, #40]	@ (8002264 <PowerOnHighSupplies_rc+0x84>)
 800223a:	2201      	movs	r2, #1
 800223c:	801a      	strh	r2, [r3, #0]

	return(1);
 800223e:	2301      	movs	r3, #1
 8002240:	e002      	b.n	8002248 <PowerOnHighSupplies_rc+0x68>
		PowerOffHighSupplies();
 8002242:	f7ff fec7 	bl	8001fd4 <PowerOffHighSupplies>
		return(0);
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	bd80      	pop	{r7, pc}
 800224c:	58020400 	.word	0x58020400
 8002250:	58021800 	.word	0x58021800
 8002254:	24000330 	.word	0x24000330
 8002258:	24000004 	.word	0x24000004
 800225c:	24000a40 	.word	0x24000a40
 8002260:	58021000 	.word	0x58021000
 8002264:	24000a44 	.word	0x24000a44

08002268 <HAL_GPIO_EXTI_Callback>:



// GPIO interrupt handler
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	80fb      	strh	r3, [r7, #6]
	if (sFlashConfig.mode == RUN_MODE)
 8002272:	4b07      	ldr	r3, [pc, #28]	@ (8002290 <HAL_GPIO_EXTI_Callback+0x28>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d105      	bne.n	8002286 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		// Power off request received
		if(GPIO_Pin == POWER_OFF_IRQ_Pin)
 800227a:	88fb      	ldrh	r3, [r7, #6]
 800227c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002280:	d101      	bne.n	8002286 <HAL_GPIO_EXTI_Callback+0x1e>
			PowerOffSupplies();
 8002282:	f7ff fed3 	bl	800202c <PowerOffSupplies>
	}
}
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	24000a48 	.word	0x24000a48

08002294 <InitializeConfigMenu>:

// Initialize the UART3 configuration menu
static void InitializeConfigMenu(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
	int item = 0;
 800229a:	2300      	movs	r3, #0
 800229c:	607b      	str	r3, [r7, #4]

	config_menu[item++] = "\n\rPlasma Driver Configuration Menu";
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	607a      	str	r2, [r7, #4]
 80022a4:	4a0c      	ldr	r2, [pc, #48]	@ (80022d8 <InitializeConfigMenu+0x44>)
 80022a6:	490d      	ldr	r1, [pc, #52]	@ (80022dc <InitializeConfigMenu+0x48>)
 80022a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	config_menu[item++] = "   m: Change mode (Test/Run)";
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	1c5a      	adds	r2, r3, #1
 80022b0:	607a      	str	r2, [r7, #4]
 80022b2:	4a09      	ldr	r2, [pc, #36]	@ (80022d8 <InitializeConfigMenu+0x44>)
 80022b4:	490a      	ldr	r1, [pc, #40]	@ (80022e0 <InitializeConfigMenu+0x4c>)
 80022b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if (item > CONFIG_MENU_SIZE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b02      	cmp	r3, #2
 80022be:	dd06      	ble.n	80022ce <InitializeConfigMenu+0x3a>
		HAL_UART_Transmit(&huart3, (uint8_t *) "\n\rIncrease CONFIG_MENU_SIZE", 20, 1000);
 80022c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022c4:	2214      	movs	r2, #20
 80022c6:	4907      	ldr	r1, [pc, #28]	@ (80022e4 <InitializeConfigMenu+0x50>)
 80022c8:	4807      	ldr	r0, [pc, #28]	@ (80022e8 <InitializeConfigMenu+0x54>)
 80022ca:	f00e f93a 	bl	8010542 <HAL_UART_Transmit>

}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	24000328 	.word	0x24000328
 80022dc:	08014d00 	.word	0x08014d00
 80022e0:	08014d24 	.word	0x08014d24
 80022e4:	08014d44 	.word	0x08014d44
 80022e8:	24000e38 	.word	0x24000e38

080022ec <InitializeMenu>:

// Initialize the UART3 menu
static void InitializeMenu(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
	int item = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	607b      	str	r3, [r7, #4]

	//Clear previous menu
	for (int i=0; i < MAX_MENU_SIZE; ++i)
 80022f6:	2300      	movs	r3, #0
 80022f8:	603b      	str	r3, [r7, #0]
 80022fa:	e007      	b.n	800230c <InitializeMenu+0x20>
	{
		menu[i] = "";
 80022fc:	4a4f      	ldr	r2, [pc, #316]	@ (800243c <InitializeMenu+0x150>)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	494f      	ldr	r1, [pc, #316]	@ (8002440 <InitializeMenu+0x154>)
 8002302:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0; i < MAX_MENU_SIZE; ++i)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	3301      	adds	r3, #1
 800230a:	603b      	str	r3, [r7, #0]
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	2b0d      	cmp	r3, #13
 8002310:	ddf4      	ble.n	80022fc <InitializeMenu+0x10>
	}

	if (sFlashConfig.mode == TEST_MODE)
 8002312:	4b4c      	ldr	r3, [pc, #304]	@ (8002444 <InitializeMenu+0x158>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d162      	bne.n	80023e0 <InitializeMenu+0xf4>
	{
		menu[item++] = "\n\rPlasma Driver TEST Menu";
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	607a      	str	r2, [r7, #4]
 8002320:	4a46      	ldr	r2, [pc, #280]	@ (800243c <InitializeMenu+0x150>)
 8002322:	4949      	ldr	r1, [pc, #292]	@ (8002448 <InitializeMenu+0x15c>)
 8002324:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   p: Power on supplies";
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	1c5a      	adds	r2, r3, #1
 800232c:	607a      	str	r2, [r7, #4]
 800232e:	4a43      	ldr	r2, [pc, #268]	@ (800243c <InitializeMenu+0x150>)
 8002330:	4946      	ldr	r1, [pc, #280]	@ (800244c <InitializeMenu+0x160>)
 8002332:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   o: Power off supplies";
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	607a      	str	r2, [r7, #4]
 800233c:	4a3f      	ldr	r2, [pc, #252]	@ (800243c <InitializeMenu+0x150>)
 800233e:	4944      	ldr	r1, [pc, #272]	@ (8002450 <InitializeMenu+0x164>)
 8002340:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   s: Start/stop driving H-Bridge";
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	607a      	str	r2, [r7, #4]
 800234a:	4a3c      	ldr	r2, [pc, #240]	@ (800243c <InitializeMenu+0x150>)
 800234c:	4941      	ldr	r1, [pc, #260]	@ (8002454 <InitializeMenu+0x168>)
 800234e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   f: Set H-bridge frequency (Hz)";
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	1c5a      	adds	r2, r3, #1
 8002356:	607a      	str	r2, [r7, #4]
 8002358:	4a38      	ldr	r2, [pc, #224]	@ (800243c <InitializeMenu+0x150>)
 800235a:	493f      	ldr	r1, [pc, #252]	@ (8002458 <InitializeMenu+0x16c>)
 800235c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   d: Set H-bridge dead time (%)";
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	607a      	str	r2, [r7, #4]
 8002366:	4a35      	ldr	r2, [pc, #212]	@ (800243c <InitializeMenu+0x150>)
 8002368:	493c      	ldr	r1, [pc, #240]	@ (800245c <InitializeMenu+0x170>)
 800236a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   a: Start ADC1 and ADC2 measurement";
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	607a      	str	r2, [r7, #4]
 8002374:	4a31      	ldr	r2, [pc, #196]	@ (800243c <InitializeMenu+0x150>)
 8002376:	493a      	ldr	r1, [pc, #232]	@ (8002460 <InitializeMenu+0x174>)
 8002378:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   b: Start ADC3 measurement";
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	1c5a      	adds	r2, r3, #1
 8002380:	607a      	str	r2, [r7, #4]
 8002382:	4a2e      	ldr	r2, [pc, #184]	@ (800243c <InitializeMenu+0x150>)
 8002384:	4937      	ldr	r1, [pc, #220]	@ (8002464 <InitializeMenu+0x178>)
 8002386:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   q: Frequency correction";
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	607a      	str	r2, [r7, #4]
 8002390:	4a2a      	ldr	r2, [pc, #168]	@ (800243c <InitializeMenu+0x150>)
 8002392:	4935      	ldr	r1, [pc, #212]	@ (8002468 <InitializeMenu+0x17c>)
 8002394:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   z: Debug output (On/Off)";
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	607a      	str	r2, [r7, #4]
 800239e:	4a27      	ldr	r2, [pc, #156]	@ (800243c <InitializeMenu+0x150>)
 80023a0:	4932      	ldr	r1, [pc, #200]	@ (800246c <InitializeMenu+0x180>)
 80023a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   c: Show/Change configuration";
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	607a      	str	r2, [r7, #4]
 80023ac:	4a23      	ldr	r2, [pc, #140]	@ (800243c <InitializeMenu+0x150>)
 80023ae:	4930      	ldr	r1, [pc, #192]	@ (8002470 <InitializeMenu+0x184>)
 80023b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   t: Test GPIO";
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	1c5a      	adds	r2, r3, #1
 80023b8:	607a      	str	r2, [r7, #4]
 80023ba:	4a20      	ldr	r2, [pc, #128]	@ (800243c <InitializeMenu+0x150>)
 80023bc:	492d      	ldr	r1, [pc, #180]	@ (8002474 <InitializeMenu+0x188>)
 80023be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   y: Auto Frequency Adjustment";
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	607a      	str	r2, [r7, #4]
 80023c8:	4a1c      	ldr	r2, [pc, #112]	@ (800243c <InitializeMenu+0x150>)
 80023ca:	492b      	ldr	r1, [pc, #172]	@ (8002478 <InitializeMenu+0x18c>)
 80023cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   u: Auto Voltage Adjustment";
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	1c5a      	adds	r2, r3, #1
 80023d4:	607a      	str	r2, [r7, #4]
 80023d6:	4a19      	ldr	r2, [pc, #100]	@ (800243c <InitializeMenu+0x150>)
 80023d8:	4928      	ldr	r1, [pc, #160]	@ (800247c <InitializeMenu+0x190>)
 80023da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80023de:	e019      	b.n	8002414 <InitializeMenu+0x128>
	}
	else if ((sFlashConfig.mode == RUN_MODE))
 80023e0:	4b18      	ldr	r3, [pc, #96]	@ (8002444 <InitializeMenu+0x158>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d10e      	bne.n	8002406 <InitializeMenu+0x11a>
	{
		menu[item++] = "\n\rPlasma Driver RUN Menu";
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	607a      	str	r2, [r7, #4]
 80023ee:	4a13      	ldr	r2, [pc, #76]	@ (800243c <InitializeMenu+0x150>)
 80023f0:	4923      	ldr	r1, [pc, #140]	@ (8002480 <InitializeMenu+0x194>)
 80023f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   c: Show/Change current configuration";
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	1c5a      	adds	r2, r3, #1
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	4a0f      	ldr	r2, [pc, #60]	@ (800243c <InitializeMenu+0x150>)
 80023fe:	4921      	ldr	r1, [pc, #132]	@ (8002484 <InitializeMenu+0x198>)
 8002400:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8002404:	e006      	b.n	8002414 <InitializeMenu+0x128>
	}
	else
	{
		menu[item++] = "\n\rERROR SETTING UP MENU";
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	1c5a      	adds	r2, r3, #1
 800240a:	607a      	str	r2, [r7, #4]
 800240c:	4a0b      	ldr	r2, [pc, #44]	@ (800243c <InitializeMenu+0x150>)
 800240e:	491e      	ldr	r1, [pc, #120]	@ (8002488 <InitializeMenu+0x19c>)
 8002410:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	menu_size = item;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	b29a      	uxth	r2, r3
 8002418:	4b1c      	ldr	r3, [pc, #112]	@ (800248c <InitializeMenu+0x1a0>)
 800241a:	801a      	strh	r2, [r3, #0]

	if (menu_size> MAX_MENU_SIZE)
 800241c:	4b1b      	ldr	r3, [pc, #108]	@ (800248c <InitializeMenu+0x1a0>)
 800241e:	881b      	ldrh	r3, [r3, #0]
 8002420:	2b0e      	cmp	r3, #14
 8002422:	d906      	bls.n	8002432 <InitializeMenu+0x146>
		HAL_UART_Transmit(&huart3, (uint8_t *) "\n\rIncrease MENU_SIZE", 20, 1000);
 8002424:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002428:	2214      	movs	r2, #20
 800242a:	4919      	ldr	r1, [pc, #100]	@ (8002490 <InitializeMenu+0x1a4>)
 800242c:	4819      	ldr	r0, [pc, #100]	@ (8002494 <InitializeMenu+0x1a8>)
 800242e:	f00e f888 	bl	8010542 <HAL_UART_Transmit>

}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	240002ec 	.word	0x240002ec
 8002440:	08014d60 	.word	0x08014d60
 8002444:	24000a48 	.word	0x24000a48
 8002448:	08014d64 	.word	0x08014d64
 800244c:	08014d80 	.word	0x08014d80
 8002450:	08014d98 	.word	0x08014d98
 8002454:	08014db4 	.word	0x08014db4
 8002458:	08014dd8 	.word	0x08014dd8
 800245c:	08014dfc 	.word	0x08014dfc
 8002460:	08014e20 	.word	0x08014e20
 8002464:	08014e48 	.word	0x08014e48
 8002468:	08014e68 	.word	0x08014e68
 800246c:	08014e84 	.word	0x08014e84
 8002470:	08014ea0 	.word	0x08014ea0
 8002474:	08014ec0 	.word	0x08014ec0
 8002478:	08014ed0 	.word	0x08014ed0
 800247c:	08014ef0 	.word	0x08014ef0
 8002480:	08014f10 	.word	0x08014f10
 8002484:	08014f2c 	.word	0x08014f2c
 8002488:	08014f54 	.word	0x08014f54
 800248c:	24000324 	.word	0x24000324
 8002490:	08014f6c 	.word	0x08014f6c
 8002494:	24000e38 	.word	0x24000e38

08002498 <ShowChangeConfigFlash>:

// Show configuration. Add option to change configuration
void ShowChangeConfigFlash(void)
{
 8002498:	b590      	push	{r4, r7, lr}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
	uint16_t aYes;
	uint16_t mode;
	char input;

	printConfigFlash();
 800249e:	f7fe f989 	bl	80007b4 <printConfigFlash>
	printString("\n\rChange configuration (0:No 1:Yes)? ");
 80024a2:	482e      	ldr	r0, [pc, #184]	@ (800255c <ShowChangeConfigFlash+0xc4>)
 80024a4:	f7fe f970 	bl	8000788 <printString>
	if (GetUint16Input(&aYes, 1, 0, 1))
 80024a8:	f107 000a 	add.w	r0, r7, #10
 80024ac:	2301      	movs	r3, #1
 80024ae:	2200      	movs	r2, #0
 80024b0:	2101      	movs	r1, #1
 80024b2:	f7ff fcab 	bl	8001e0c <GetUint16Input>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d04b      	beq.n	8002554 <ShowChangeConfigFlash+0xbc>
	{
		if (aYes)
 80024bc:	897b      	ldrh	r3, [r7, #10]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d048      	beq.n	8002554 <ShowChangeConfigFlash+0xbc>
		{
			for (int i=0; i<CONFIG_MENU_SIZE; i++)
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	e017      	b.n	80024f8 <ShowChangeConfigFlash+0x60>
			{
				HAL_UART_Transmit(&huart3, (uint8_t *) config_menu[i], strlen(config_menu[i]), 1000);
 80024c8:	4a25      	ldr	r2, [pc, #148]	@ (8002560 <ShowChangeConfigFlash+0xc8>)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80024d0:	4a23      	ldr	r2, [pc, #140]	@ (8002560 <ShowChangeConfigFlash+0xc8>)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fd ff69 	bl	80003b0 <strlen>
 80024de:	4603      	mov	r3, r0
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024e6:	4621      	mov	r1, r4
 80024e8:	481e      	ldr	r0, [pc, #120]	@ (8002564 <ShowChangeConfigFlash+0xcc>)
 80024ea:	f00e f82a 	bl	8010542 <HAL_UART_Transmit>
				printCR();
 80024ee:	f7fe f93b 	bl	8000768 <printCR>
			for (int i=0; i<CONFIG_MENU_SIZE; i++)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	3301      	adds	r3, #1
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	dde4      	ble.n	80024c8 <ShowChangeConfigFlash+0x30>
			}
			printCR();
 80024fe:	f7fe f933 	bl	8000768 <printCR>

			//Wait for user input
			if (HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 60000) == HAL_OK)
 8002502:	1df9      	adds	r1, r7, #7
 8002504:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8002508:	2201      	movs	r2, #1
 800250a:	4816      	ldr	r0, [pc, #88]	@ (8002564 <ShowChangeConfigFlash+0xcc>)
 800250c:	f00e f8a7 	bl	801065e <HAL_UART_Receive>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d11e      	bne.n	8002554 <ShowChangeConfigFlash+0xbc>
			{
				switch (input)
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	2b6d      	cmp	r3, #109	@ 0x6d
 800251a:	d11b      	bne.n	8002554 <ShowChangeConfigFlash+0xbc>
				{
					case 'm': //Change mode
						printString("\n\rChange mode (0:Test 1:Run)? ");
 800251c:	4812      	ldr	r0, [pc, #72]	@ (8002568 <ShowChangeConfigFlash+0xd0>)
 800251e:	f7fe f933 	bl	8000788 <printString>
						if (GetUint16Input(&mode, 1, 0, 1))
 8002522:	f107 0008 	add.w	r0, r7, #8
 8002526:	2301      	movs	r3, #1
 8002528:	2200      	movs	r2, #0
 800252a:	2101      	movs	r1, #1
 800252c:	f7ff fc6e 	bl	8001e0c <GetUint16Input>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00d      	beq.n	8002552 <ShowChangeConfigFlash+0xba>
						{   // Data entry valid
							if (sFlashConfig.mode != mode)
 8002536:	4b0d      	ldr	r3, [pc, #52]	@ (800256c <ShowChangeConfigFlash+0xd4>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	893b      	ldrh	r3, [r7, #8]
 800253e:	429a      	cmp	r2, r3
 8002540:	d007      	beq.n	8002552 <ShowChangeConfigFlash+0xba>
							{
								sFlashConfig.mode = mode;
 8002542:	893b      	ldrh	r3, [r7, #8]
 8002544:	b2da      	uxtb	r2, r3
 8002546:	4b09      	ldr	r3, [pc, #36]	@ (800256c <ShowChangeConfigFlash+0xd4>)
 8002548:	701a      	strb	r2, [r3, #0]
								InitializeMenu();
 800254a:	f7ff fecf 	bl	80022ec <InitializeMenu>
								writeConfigFlash();
 800254e:	f7fe f8c1 	bl	80006d4 <writeConfigFlash>
							}
						}
					break;
 8002552:	bf00      	nop
				}
			}
		}
	}
}
 8002554:	bf00      	nop
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	bd90      	pop	{r4, r7, pc}
 800255c:	08014f84 	.word	0x08014f84
 8002560:	24000328 	.word	0x24000328
 8002564:	24000e38 	.word	0x24000e38
 8002568:	08014fac 	.word	0x08014fac
 800256c:	24000a48 	.word	0x24000a48

08002570 <testGPIO>:

//Test GPIO settings
void testGPIO(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0

		printString("\n\rClear LED_GREEN");
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
		GetUint16Input(&aYes, 1, 0, 1);
*/
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <RunModeAction>:

// Action table for the run mode menu
static void RunModeAction(char input)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	4603      	mov	r3, r0
 8002586:	71fb      	strb	r3, [r7, #7]
	switch (input)
 8002588:	79fb      	ldrb	r3, [r7, #7]
 800258a:	2b63      	cmp	r3, #99	@ 0x63
 800258c:	d102      	bne.n	8002594 <RunModeAction+0x16>
	{
		case 'c': //Show/Change current configuration
			ShowChangeConfigFlash();
 800258e:	f7ff ff83 	bl	8002498 <ShowChangeConfigFlash>
			break;
 8002592:	bf00      	nop
	}
}
 8002594:	bf00      	nop
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <TestModeAction>:

// Action table for the test mode menu
static void TestModeAction(char input)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b09c      	sub	sp, #112	@ 0x70
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	71fb      	strb	r3, [r7, #7]
	switch (input)
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	3b61      	subs	r3, #97	@ 0x61
 80025aa:	2b19      	cmp	r3, #25
 80025ac:	f200 80fd 	bhi.w	80027aa <TestModeAction+0x20e>
 80025b0:	a201      	add	r2, pc, #4	@ (adr r2, 80025b8 <TestModeAction+0x1c>)
 80025b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b6:	bf00      	nop
 80025b8:	08002657 	.word	0x08002657
 80025bc:	0800267f 	.word	0x0800267f
 80025c0:	0800275d 	.word	0x0800275d
 80025c4:	080026c1 	.word	0x080026c1
 80025c8:	080027ab 	.word	0x080027ab
 80025cc:	08002697 	.word	0x08002697
 80025d0:	080027ab 	.word	0x080027ab
 80025d4:	080027ab 	.word	0x080027ab
 80025d8:	080027ab 	.word	0x080027ab
 80025dc:	080027ab 	.word	0x080027ab
 80025e0:	080027ab 	.word	0x080027ab
 80025e4:	080027ab 	.word	0x080027ab
 80025e8:	080027ab 	.word	0x080027ab
 80025ec:	080027ab 	.word	0x080027ab
 80025f0:	0800264b 	.word	0x0800264b
 80025f4:	08002621 	.word	0x08002621
 80025f8:	0800270d 	.word	0x0800270d
 80025fc:	080027ab 	.word	0x080027ab
 8002600:	080026e7 	.word	0x080026e7
 8002604:	08002763 	.word	0x08002763
 8002608:	0800276f 	.word	0x0800276f
 800260c:	080027ab 	.word	0x080027ab
 8002610:	080027ab 	.word	0x080027ab
 8002614:	080027ab 	.word	0x080027ab
 8002618:	08002769 	.word	0x08002769
 800261c:	0800273b 	.word	0x0800273b
	{
		case 'p': //Power supplies on
			if (powerStatus == V500_OFF)
 8002620:	4b64      	ldr	r3, [pc, #400]	@ (80027b4 <TestModeAction+0x218>)
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10c      	bne.n	8002642 <TestModeAction+0xa6>
			{
				if (PowerOnHighSupplies() == POWERON_FAILED)
 8002628:	f7ff fd84 	bl	8002134 <PowerOnHighSupplies>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d103      	bne.n	800263a <TestModeAction+0x9e>
				{
					printString("\n\rPower on failed\n\r");
 8002632:	4861      	ldr	r0, [pc, #388]	@ (80027b8 <TestModeAction+0x21c>)
 8002634:	f7fe f8a8 	bl	8000788 <printString>
			}
			else
			{
				printString("\n\rPower supplies are on\n\r");
			}
			break;
 8002638:	e0b7      	b.n	80027aa <TestModeAction+0x20e>
					printString("\n\rPower on succeeded\n\r");
 800263a:	4860      	ldr	r0, [pc, #384]	@ (80027bc <TestModeAction+0x220>)
 800263c:	f7fe f8a4 	bl	8000788 <printString>
			break;
 8002640:	e0b3      	b.n	80027aa <TestModeAction+0x20e>
				printString("\n\rPower supplies are on\n\r");
 8002642:	485f      	ldr	r0, [pc, #380]	@ (80027c0 <TestModeAction+0x224>)
 8002644:	f7fe f8a0 	bl	8000788 <printString>
			break;
 8002648:	e0af      	b.n	80027aa <TestModeAction+0x20e>

		case 'o': //Power supplies off
			printString("\n\rPower off supplies\n\r");
 800264a:	485e      	ldr	r0, [pc, #376]	@ (80027c4 <TestModeAction+0x228>)
 800264c:	f7fe f89c 	bl	8000788 <printString>
			PowerOffHighSupplies();
 8002650:	f7ff fcc0 	bl	8001fd4 <PowerOffHighSupplies>
			break;
 8002654:	e0a9      	b.n	80027aa <TestModeAction+0x20e>

		case 'a': //Start ADC1 and ADC2 analog voltage measurement
			if (sHbridge.on)
 8002656:	4b5c      	ldr	r3, [pc, #368]	@ (80027c8 <TestModeAction+0x22c>)
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00b      	beq.n	8002676 <TestModeAction+0xda>
			{
				//Setup to read ADC1 and ADC2 channels
				//Reading will start at TIM1 CH1 0->1 interrupt
				measureBridgePlasmaADC12();
 800265e:	f7fe ff83 	bl	8001568 <measureBridgePlasmaADC12>
				//Wait until ADC3 reading is done
				while (sADC.adc12_reading) ;
 8002662:	bf00      	nop
 8002664:	4b59      	ldr	r3, [pc, #356]	@ (80027cc <TestModeAction+0x230>)
 8002666:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	@ 0x70e
 800266a:	b29b      	uxth	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1f9      	bne.n	8002664 <TestModeAction+0xc8>
				//Print ADC3 data on UART3
				printADC12data();
 8002670:	f7fe fcf6 	bl	8001060 <printADC12data>
			}
			else
			{
				printString("\n\r ---- H-Bridge needs to be on");
			}
			break;
 8002674:	e099      	b.n	80027aa <TestModeAction+0x20e>
				printString("\n\r ---- H-Bridge needs to be on");
 8002676:	4856      	ldr	r0, [pc, #344]	@ (80027d0 <TestModeAction+0x234>)
 8002678:	f7fe f886 	bl	8000788 <printString>
			break;
 800267c:	e095      	b.n	80027aa <TestModeAction+0x20e>

		case 'b': //Start ADC3 analog voltage measurement
				//Start reading ADC3 channels
				measureVoltagesTemperaturesADC3();
 800267e:	f7ff fb23 	bl	8001cc8 <measureVoltagesTemperaturesADC3>
				//Wait until ADC3 reading is done
				while (sADC.adc3_reading) ;
 8002682:	bf00      	nop
 8002684:	4b51      	ldr	r3, [pc, #324]	@ (80027cc <TestModeAction+0x230>)
 8002686:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	@ 0x70c
 800268a:	b29b      	uxth	r3, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1f9      	bne.n	8002684 <TestModeAction+0xe8>
				//Print ADC3 data on UART3
				printADC3data();
 8002690:	f7ff fad4 	bl	8001c3c <printADC3data>
			break;
 8002694:	e089      	b.n	80027aa <TestModeAction+0x20e>

		case 'f': //Enter frequency (Hz)
			printHbridgeData();
 8002696:	f7fe f975 	bl	8000984 <printHbridgeData>
			printString("\n\rEnter frequency (Hz): ");
 800269a:	484e      	ldr	r0, [pc, #312]	@ (80027d4 <TestModeAction+0x238>)
 800269c:	f7fe f874 	bl	8000788 <printString>
			if (GetUint16Input(&sHbridge.frequency, 1, MIN_FREQUENCY, MAX_FREQUENCY))
 80026a0:	f64f 53e8 	movw	r3, #65000	@ 0xfde8
 80026a4:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80026a8:	2101      	movs	r1, #1
 80026aa:	484b      	ldr	r0, [pc, #300]	@ (80027d8 <TestModeAction+0x23c>)
 80026ac:	f7ff fbae 	bl	8001e0c <GetUint16Input>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d070      	beq.n	8002798 <TestModeAction+0x1fc>
			{   // Data entry valid
				programHbridge();
 80026b6:	f7fe f98f 	bl	80009d8 <programHbridge>
				printHbridgeData();
 80026ba:	f7fe f963 	bl	8000984 <printHbridgeData>
			}
			break;
 80026be:	e06b      	b.n	8002798 <TestModeAction+0x1fc>

		case 'd': //Enter dead time (%)
			printHbridgeData();
 80026c0:	f7fe f960 	bl	8000984 <printHbridgeData>
			printString("\n\rEnter dead time (%): ");
 80026c4:	4845      	ldr	r0, [pc, #276]	@ (80027dc <TestModeAction+0x240>)
 80026c6:	f7fe f85f 	bl	8000788 <printString>
			if (GetUint16Input(&sHbridge.deadtime, 1, MIN_DEADTIME, MAX_DEADTIME))
 80026ca:	2328      	movs	r3, #40	@ 0x28
 80026cc:	2201      	movs	r2, #1
 80026ce:	2101      	movs	r1, #1
 80026d0:	4843      	ldr	r0, [pc, #268]	@ (80027e0 <TestModeAction+0x244>)
 80026d2:	f7ff fb9b 	bl	8001e0c <GetUint16Input>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d05f      	beq.n	800279c <TestModeAction+0x200>
			{   // Data entry valid
				programHbridge();
 80026dc:	f7fe f97c 	bl	80009d8 <programHbridge>
				printHbridgeData();
 80026e0:	f7fe f950 	bl	8000984 <printHbridgeData>
			}
			break;
 80026e4:	e05a      	b.n	800279c <TestModeAction+0x200>

		case 's': //Start/stop driving H-bridge
			printHbridgeData();
 80026e6:	f7fe f94d 	bl	8000984 <printHbridgeData>
			printString("\n\rDrive H-bridge 1:Yes 0:No : ");
 80026ea:	483e      	ldr	r0, [pc, #248]	@ (80027e4 <TestModeAction+0x248>)
 80026ec:	f7fe f84c 	bl	8000788 <printString>
			if (GetUint16Input(&sHbridge.on, 1, 0, 1))
 80026f0:	2301      	movs	r3, #1
 80026f2:	2200      	movs	r2, #0
 80026f4:	2101      	movs	r1, #1
 80026f6:	4834      	ldr	r0, [pc, #208]	@ (80027c8 <TestModeAction+0x22c>)
 80026f8:	f7ff fb88 	bl	8001e0c <GetUint16Input>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d04e      	beq.n	80027a0 <TestModeAction+0x204>
			{   // Data entry valid
				programHbridge();
 8002702:	f7fe f969 	bl	80009d8 <programHbridge>
				printHbridgeData();
 8002706:	f7fe f93d 	bl	8000984 <printHbridgeData>
			}
			break;
 800270a:	e049      	b.n	80027a0 <TestModeAction+0x204>

		case 'q': //Frequency correction
			int16_t freqCorr;
			if (freqCorrection(&freqCorr))
 800270c:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 8002710:	4618      	mov	r0, r3
 8002712:	f7fe fdf3 	bl	80012fc <freqCorrection>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d043      	beq.n	80027a4 <TestModeAction+0x208>
			{
				char text[100];
				sprintf(text, "\n\rFrequency correction: %i", (int) freqCorr);
 800271c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8002720:	461a      	mov	r2, r3
 8002722:	f107 0308 	add.w	r3, r7, #8
 8002726:	4930      	ldr	r1, [pc, #192]	@ (80027e8 <TestModeAction+0x24c>)
 8002728:	4618      	mov	r0, r3
 800272a:	f00f ffc7 	bl	80126bc <siprintf>
				printString(text);
 800272e:	f107 0308 	add.w	r3, r7, #8
 8002732:	4618      	mov	r0, r3
 8002734:	f7fe f828 	bl	8000788 <printString>
			}
			break;
 8002738:	e034      	b.n	80027a4 <TestModeAction+0x208>

		case 'z': //Debug output
			printNumber("\n\rCurrent Debug output: ", debug, 0);
 800273a:	4b2c      	ldr	r3, [pc, #176]	@ (80027ec <TestModeAction+0x250>)
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	2200      	movs	r2, #0
 8002740:	4619      	mov	r1, r3
 8002742:	482b      	ldr	r0, [pc, #172]	@ (80027f0 <TestModeAction+0x254>)
 8002744:	f7fe f862 	bl	800080c <printNumber>
			printString("\n\rSet Debug output 1:On 0:Off : ");
 8002748:	482a      	ldr	r0, [pc, #168]	@ (80027f4 <TestModeAction+0x258>)
 800274a:	f7fe f81d 	bl	8000788 <printString>
			GetUint16Input(&debug, 1, 0, 1);
 800274e:	2301      	movs	r3, #1
 8002750:	2200      	movs	r2, #0
 8002752:	2101      	movs	r1, #1
 8002754:	4825      	ldr	r0, [pc, #148]	@ (80027ec <TestModeAction+0x250>)
 8002756:	f7ff fb59 	bl	8001e0c <GetUint16Input>
			break;
 800275a:	e026      	b.n	80027aa <TestModeAction+0x20e>

		case 'c': //Show/Change current configuration
			ShowChangeConfigFlash();
 800275c:	f7ff fe9c 	bl	8002498 <ShowChangeConfigFlash>
			break;
 8002760:	e023      	b.n	80027aa <TestModeAction+0x20e>

		case 't': //Test GPIO
			testGPIO();
 8002762:	f7ff ff05 	bl	8002570 <testGPIO>
			break;
 8002766:	e020      	b.n	80027aa <TestModeAction+0x20e>

		case 'y': //Auto Freq Adjust
			autoFreqAdj();
 8002768:	f7ff f88a 	bl	8001880 <autoFreqAdj>
			break;
 800276c:	e01d      	b.n	80027aa <TestModeAction+0x20e>
		case 'u': //Auto Freq Adjust
			printString("Desired Voltage: ");
 800276e:	4822      	ldr	r0, [pc, #136]	@ (80027f8 <TestModeAction+0x25c>)
 8002770:	f7fe f80a 	bl	8000788 <printString>
			uint16_t userVoltage;
			//Max and min valid voltages
			if (GetUint16Input(&userVoltage, 1, 0, 5000))
 8002774:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 8002778:	f241 3388 	movw	r3, #5000	@ 0x1388
 800277c:	2200      	movs	r2, #0
 800277e:	2101      	movs	r1, #1
 8002780:	f7ff fb44 	bl	8001e0c <GetUint16Input>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00e      	beq.n	80027a8 <TestModeAction+0x20c>
			{   // Data entry valid
				autoVoltageAdj(userVoltage);
 800278a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800278e:	b21b      	sxth	r3, r3
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff f8db 	bl	800194c <autoVoltageAdj>
			}
			break;
 8002796:	e007      	b.n	80027a8 <TestModeAction+0x20c>
			break;
 8002798:	bf00      	nop
 800279a:	e006      	b.n	80027aa <TestModeAction+0x20e>
			break;
 800279c:	bf00      	nop
 800279e:	e004      	b.n	80027aa <TestModeAction+0x20e>
			break;
 80027a0:	bf00      	nop
 80027a2:	e002      	b.n	80027aa <TestModeAction+0x20e>
			break;
 80027a4:	bf00      	nop
 80027a6:	e000      	b.n	80027aa <TestModeAction+0x20e>
			break;
 80027a8:	bf00      	nop
	}
}
 80027aa:	bf00      	nop
 80027ac:	3770      	adds	r7, #112	@ 0x70
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	24000a44 	.word	0x24000a44
 80027b8:	08014fcc 	.word	0x08014fcc
 80027bc:	08014fe0 	.word	0x08014fe0
 80027c0:	08014ff8 	.word	0x08014ff8
 80027c4:	08015014 	.word	0x08015014
 80027c8:	2400001c 	.word	0x2400001c
 80027cc:	24000330 	.word	0x24000330
 80027d0:	0801502c 	.word	0x0801502c
 80027d4:	0801504c 	.word	0x0801504c
 80027d8:	2400001e 	.word	0x2400001e
 80027dc:	08015068 	.word	0x08015068
 80027e0:	24000020 	.word	0x24000020
 80027e4:	08015080 	.word	0x08015080
 80027e8:	080150a0 	.word	0x080150a0
 80027ec:	24000000 	.word	0x24000000
 80027f0:	080150bc 	.word	0x080150bc
 80027f4:	080150d8 	.word	0x080150d8
 80027f8:	080150fc 	.word	0x080150fc

080027fc <init_rc_state>:
typedef struct rc_state rc_state;

/**
 * Creates and returns an initialized rc_state
 */
static rc_state init_rc_state() {
 80027fc:	b490      	push	{r4, r7}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
	rc_state ret_state;
	ret_state.state = IDLE;
 8002804:	2300      	movs	r3, #0
 8002806:	723b      	strb	r3, [r7, #8]
	ret_state.logging = 0;
 8002808:	2300      	movs	r3, #0
 800280a:	727b      	strb	r3, [r7, #9]
	ret_state.log_rate = 0; //no limit on log rate
 800280c:	2300      	movs	r3, #0
 800280e:	60fb      	str	r3, [r7, #12]
	ret_state.rate_counter = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	613b      	str	r3, [r7, #16]
	ret_state.voltage = -1; //-1 means no voltage correction
 8002814:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002818:	617b      	str	r3, [r7, #20]

	return ret_state;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	461c      	mov	r4, r3
 800281e:	f107 0308 	add.w	r3, r7, #8
 8002822:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002824:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bc90      	pop	{r4, r7}
 8002830:	4770      	bx	lr
	...

08002834 <init_rc>:


/**
 * Print a string to UART acknowledging remote control
 */
static void init_rc() {
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
	printString("~");
 8002838:	4802      	ldr	r0, [pc, #8]	@ (8002844 <init_rc+0x10>)
 800283a:	f7fd ffa5 	bl	8000788 <printString>
}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	08015110 	.word	0x08015110

08002848 <querySupply>:

/**
 * Checks status of queried power supply. Prints status to UART
 */
static void querySupply(char *input) {
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
	if (strstr(input, "15") != NULL)
 8002850:	491d      	ldr	r1, [pc, #116]	@ (80028c8 <querySupply+0x80>)
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f00f ffac 	bl	80127b0 <strstr>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00b      	beq.n	8002876 <querySupply+0x2e>
	{
		if (supply_status.s15V) {
 800285e:	4b1b      	ldr	r3, [pc, #108]	@ (80028cc <querySupply+0x84>)
 8002860:	785b      	ldrb	r3, [r3, #1]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <querySupply+0x26>
			printString("on");
 8002866:	481a      	ldr	r0, [pc, #104]	@ (80028d0 <querySupply+0x88>)
 8002868:	f7fd ff8e 	bl	8000788 <printString>
		} else {
			printString("off");
		}

	}
}
 800286c:	e028      	b.n	80028c0 <querySupply+0x78>
			printString("off");
 800286e:	4819      	ldr	r0, [pc, #100]	@ (80028d4 <querySupply+0x8c>)
 8002870:	f7fd ff8a 	bl	8000788 <printString>
}
 8002874:	e024      	b.n	80028c0 <querySupply+0x78>
	} else if (strstr(input, "3.3") != NULL) {
 8002876:	4918      	ldr	r1, [pc, #96]	@ (80028d8 <querySupply+0x90>)
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f00f ff99 	bl	80127b0 <strstr>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00b      	beq.n	800289c <querySupply+0x54>
		if (supply_status.s3_3V) {
 8002884:	4b11      	ldr	r3, [pc, #68]	@ (80028cc <querySupply+0x84>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <querySupply+0x4c>
			printString("on");
 800288c:	4810      	ldr	r0, [pc, #64]	@ (80028d0 <querySupply+0x88>)
 800288e:	f7fd ff7b 	bl	8000788 <printString>
}
 8002892:	e015      	b.n	80028c0 <querySupply+0x78>
			printString("off");
 8002894:	480f      	ldr	r0, [pc, #60]	@ (80028d4 <querySupply+0x8c>)
 8002896:	f7fd ff77 	bl	8000788 <printString>
}
 800289a:	e011      	b.n	80028c0 <querySupply+0x78>
	} else if (strstr(input, "hv") != NULL) {
 800289c:	490f      	ldr	r1, [pc, #60]	@ (80028dc <querySupply+0x94>)
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f00f ff86 	bl	80127b0 <strstr>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00a      	beq.n	80028c0 <querySupply+0x78>
		if (supply_status.sHV) {
 80028aa:	4b08      	ldr	r3, [pc, #32]	@ (80028cc <querySupply+0x84>)
 80028ac:	789b      	ldrb	r3, [r3, #2]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <querySupply+0x72>
			printString("on");
 80028b2:	4807      	ldr	r0, [pc, #28]	@ (80028d0 <querySupply+0x88>)
 80028b4:	f7fd ff68 	bl	8000788 <printString>
}
 80028b8:	e002      	b.n	80028c0 <querySupply+0x78>
			printString("off");
 80028ba:	4806      	ldr	r0, [pc, #24]	@ (80028d4 <querySupply+0x8c>)
 80028bc:	f7fd ff64 	bl	8000788 <printString>
}
 80028c0:	bf00      	nop
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	08015114 	.word	0x08015114
 80028cc:	24000a40 	.word	0x24000a40
 80028d0:	08015118 	.word	0x08015118
 80028d4:	0801511c 	.word	0x0801511c
 80028d8:	08015120 	.word	0x08015120
 80028dc:	08015124 	.word	0x08015124

080028e0 <toggleSupply>:

/**
 * Toggles the specified supply, returns the new
 * status of the supply via a char = {0, 1}
 */
static char toggleSupply(char *input) {
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
	char status;
	if (strstr(input, "lv") != NULL)
 80028e8:	4916      	ldr	r1, [pc, #88]	@ (8002944 <toggleSupply+0x64>)
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f00f ff60 	bl	80127b0 <strstr>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00d      	beq.n	8002912 <toggleSupply+0x32>
	{
		if (supply_status.s3_3V) {
 80028f6:	4b14      	ldr	r3, [pc, #80]	@ (8002948 <toggleSupply+0x68>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d004      	beq.n	8002908 <toggleSupply+0x28>
			status = PowerOffLowSupplies();
 80028fe:	f7ff fb35 	bl	8001f6c <PowerOffLowSupplies>
 8002902:	4603      	mov	r3, r0
 8002904:	73fb      	strb	r3, [r7, #15]
 8002906:	e018      	b.n	800293a <toggleSupply+0x5a>
		} else {
			status = PowerOnLowSupplies_rc();
 8002908:	f7ff fbe0 	bl	80020cc <PowerOnLowSupplies_rc>
 800290c:	4603      	mov	r3, r0
 800290e:	73fb      	strb	r3, [r7, #15]
 8002910:	e013      	b.n	800293a <toggleSupply+0x5a>
		}

	} else if (strstr(input, "hv") != NULL) {
 8002912:	490e      	ldr	r1, [pc, #56]	@ (800294c <toggleSupply+0x6c>)
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f00f ff4b 	bl	80127b0 <strstr>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00c      	beq.n	800293a <toggleSupply+0x5a>
		if (supply_status.sHV) {
 8002920:	4b09      	ldr	r3, [pc, #36]	@ (8002948 <toggleSupply+0x68>)
 8002922:	789b      	ldrb	r3, [r3, #2]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d004      	beq.n	8002932 <toggleSupply+0x52>
			status = PowerOffHighSupplies();
 8002928:	f7ff fb54 	bl	8001fd4 <PowerOffHighSupplies>
 800292c:	4603      	mov	r3, r0
 800292e:	73fb      	strb	r3, [r7, #15]
 8002930:	e003      	b.n	800293a <toggleSupply+0x5a>
		} else {
			status = PowerOnHighSupplies_rc();
 8002932:	f7ff fc55 	bl	80021e0 <PowerOnHighSupplies_rc>
 8002936:	4603      	mov	r3, r0
 8002938:	73fb      	strb	r3, [r7, #15]
		}

	}

	return status;
 800293a:	7bfb      	ldrb	r3, [r7, #15]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	08015128 	.word	0x08015128
 8002948:	24000a40 	.word	0x24000a40
 800294c:	08015124 	.word	0x08015124

08002950 <remoteControl>:
/**
 * This routine is entered when the remote control signal is received
 * handles datalogging and accepting control commands from uart
 */
static void remoteControl()
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b098      	sub	sp, #96	@ 0x60
 8002954:	af00      	add	r7, sp, #0
	rc_state current_state = init_rc_state();
 8002956:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff ff4e 	bl	80027fc <init_rc_state>
	while (1)
	{

		char inchar;
		char input[MAX_INPUT];
		int pos = 0;
 8002960:	2300      	movs	r3, #0
 8002962:	64fb      	str	r3, [r7, #76]	@ 0x4c
		//Check for input and update state accordingly
		if (HAL_UART_Receive(&huart3, (uint8_t *) &inchar, 1, 100000) == HAL_OK)
 8002964:	f107 0133 	add.w	r1, r7, #51	@ 0x33
 8002968:	4bb3      	ldr	r3, [pc, #716]	@ (8002c38 <remoteControl+0x2e8>)
 800296a:	2201      	movs	r2, #1
 800296c:	48b3      	ldr	r0, [pc, #716]	@ (8002c3c <remoteControl+0x2ec>)
 800296e:	f00d fe76 	bl	801065e <HAL_UART_Receive>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d11b      	bne.n	80029b0 <remoteControl+0x60>
		{
			while (inchar != 13) //continue to grab input chars until LF (\r) is found
 8002978:	e016      	b.n	80029a8 <remoteControl+0x58>
			{

				//store input char
				input[pos++] = inchar;
 800297a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800297c:	1c5a      	adds	r2, r3, #1
 800297e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002980:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8002984:	3360      	adds	r3, #96	@ 0x60
 8002986:	443b      	add	r3, r7
 8002988:	f803 2c44 	strb.w	r2, [r3, #-68]


				// Get next character
				if (pos < MAX_INPUT-1)
 800298c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800298e:	2b12      	cmp	r3, #18
 8002990:	dc07      	bgt.n	80029a2 <remoteControl+0x52>
				{
					HAL_UART_Receive(&huart3, (uint8_t *) &inchar, 1, 100000);
 8002992:	f107 0133 	add.w	r1, r7, #51	@ 0x33
 8002996:	4ba8      	ldr	r3, [pc, #672]	@ (8002c38 <remoteControl+0x2e8>)
 8002998:	2201      	movs	r2, #1
 800299a:	48a8      	ldr	r0, [pc, #672]	@ (8002c3c <remoteControl+0x2ec>)
 800299c:	f00d fe5f 	bl	801065e <HAL_UART_Receive>
 80029a0:	e002      	b.n	80029a8 <remoteControl+0x58>
				}
				else
				{
					inchar = 13; // Terminate while loop
 80029a2:	230d      	movs	r3, #13
 80029a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			while (inchar != 13) //continue to grab input chars until LF (\r) is found
 80029a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80029ac:	2b0d      	cmp	r3, #13
 80029ae:	d1e4      	bne.n	800297a <remoteControl+0x2a>
				}

			}
		}
		switch (input[0])
 80029b0:	7f3b      	ldrb	r3, [r7, #28]
 80029b2:	3b61      	subs	r3, #97	@ 0x61
 80029b4:	2b1d      	cmp	r3, #29
 80029b6:	d8d3      	bhi.n	8002960 <remoteControl+0x10>
 80029b8:	a201      	add	r2, pc, #4	@ (adr r2, 80029c0 <remoteControl+0x70>)
 80029ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029be:	bf00      	nop
 80029c0:	08002bfb 	.word	0x08002bfb
 80029c4:	08002961 	.word	0x08002961
 80029c8:	08002961 	.word	0x08002961
 80029cc:	08002ac5 	.word	0x08002ac5
 80029d0:	08002961 	.word	0x08002961
 80029d4:	08002b95 	.word	0x08002b95
 80029d8:	08002961 	.word	0x08002961
 80029dc:	08002961 	.word	0x08002961
 80029e0:	08002961 	.word	0x08002961
 80029e4:	08002961 	.word	0x08002961
 80029e8:	08002961 	.word	0x08002961
 80029ec:	08002c01 	.word	0x08002c01
 80029f0:	08002961 	.word	0x08002961
 80029f4:	08002961 	.word	0x08002961
 80029f8:	08002961 	.word	0x08002961
 80029fc:	08002a3f 	.word	0x08002a3f
 8002a00:	08002c1d 	.word	0x08002c1d
 8002a04:	08002961 	.word	0x08002961
 8002a08:	08002a87 	.word	0x08002a87
 8002a0c:	08002961 	.word	0x08002961
 8002a10:	08002961 	.word	0x08002961
 8002a14:	08002b3d 	.word	0x08002b3d
 8002a18:	08002961 	.word	0x08002961
 8002a1c:	08002961 	.word	0x08002961
 8002a20:	08002961 	.word	0x08002961
 8002a24:	08002961 	.word	0x08002961
 8002a28:	08002961 	.word	0x08002961
 8002a2c:	08002961 	.word	0x08002961
 8002a30:	08002961 	.word	0x08002961
 8002a34:	08002a39 	.word	0x08002a39
		{
		//Initialization Query
		case '~':
			init_rc();
 8002a38:	f7ff fefc 	bl	8002834 <init_rc>
			break;
 8002a3c:	e0fa      	b.n	8002c34 <remoteControl+0x2e4>

			//power supply related query/command
		case 'p':
			char supply[3];
			supply[0] = input[2];
 8002a3e:	7fbb      	ldrb	r3, [r7, #30]
 8002a40:	763b      	strb	r3, [r7, #24]
			supply[1] = input[3];
 8002a42:	7ffb      	ldrb	r3, [r7, #31]
 8002a44:	767b      	strb	r3, [r7, #25]
			supply[2] = input[4];
 8002a46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a4a:	76bb      	strb	r3, [r7, #26]
			if (input[1] == '?')
 8002a4c:	7f7b      	ldrb	r3, [r7, #29]
 8002a4e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a50:	d105      	bne.n	8002a5e <remoteControl+0x10e>
			{
				querySupply(supply);
 8002a52:	f107 0318 	add.w	r3, r7, #24
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fef6 	bl	8002848 <querySupply>
					printString("on");
				} else {
					printString("off");
				}
			}
			break;
 8002a5c:	e0e2      	b.n	8002c24 <remoteControl+0x2d4>
			} else if (input[1] ==  '!')
 8002a5e:	7f7b      	ldrb	r3, [r7, #29]
 8002a60:	2b21      	cmp	r3, #33	@ 0x21
 8002a62:	f040 80df 	bne.w	8002c24 <remoteControl+0x2d4>
				if (toggleSupply(supply)) {
 8002a66:	f107 0318 	add.w	r3, r7, #24
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff ff38 	bl	80028e0 <toggleSupply>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <remoteControl+0x12e>
					printString("on");
 8002a76:	4872      	ldr	r0, [pc, #456]	@ (8002c40 <remoteControl+0x2f0>)
 8002a78:	f7fd fe86 	bl	8000788 <printString>
			break;
 8002a7c:	e0d2      	b.n	8002c24 <remoteControl+0x2d4>
					printString("off");
 8002a7e:	4871      	ldr	r0, [pc, #452]	@ (8002c44 <remoteControl+0x2f4>)
 8002a80:	f7fd fe82 	bl	8000788 <printString>
			break;
 8002a84:	e0ce      	b.n	8002c24 <remoteControl+0x2d4>

			//start plasma related command
		case 's':

			//Query plasma status
			if (input[1] == '?') {
 8002a86:	7f7b      	ldrb	r3, [r7, #29]
 8002a88:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a8a:	d10b      	bne.n	8002aa4 <remoteControl+0x154>
				if (current_state.state != IDLE) {
 8002a8c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <remoteControl+0x14c>
					printString("on");
 8002a94:	486a      	ldr	r0, [pc, #424]	@ (8002c40 <remoteControl+0x2f0>)
 8002a96:	f7fd fe77 	bl	8000788 <printString>
				} else {
					current_state.state = STOP;
				}
			}

			break;
 8002a9a:	e0c5      	b.n	8002c28 <remoteControl+0x2d8>
					printString("off");
 8002a9c:	4869      	ldr	r0, [pc, #420]	@ (8002c44 <remoteControl+0x2f4>)
 8002a9e:	f7fd fe73 	bl	8000788 <printString>
			break;
 8002aa2:	e0c1      	b.n	8002c28 <remoteControl+0x2d8>
			} else if (input[1] == '!') { //Toggle plasma state
 8002aa4:	7f7b      	ldrb	r3, [r7, #29]
 8002aa6:	2b21      	cmp	r3, #33	@ 0x21
 8002aa8:	f040 80be 	bne.w	8002c28 <remoteControl+0x2d8>
				if (current_state.state == IDLE) {
 8002aac:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d103      	bne.n	8002abc <remoteControl+0x16c>
					current_state.state = STRIKE;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
			break;
 8002aba:	e0b5      	b.n	8002c28 <remoteControl+0x2d8>
					current_state.state = STOP;
 8002abc:	2303      	movs	r3, #3
 8002abe:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
			break;
 8002ac2:	e0b1      	b.n	8002c28 <remoteControl+0x2d8>

			//query/modify deadtime
		case 'd':

			if (input[1] == '?'){
 8002ac4:	7f7b      	ldrb	r3, [r7, #29]
 8002ac6:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ac8:	d10e      	bne.n	8002ae8 <remoteControl+0x198>
				char output[2];
				sprintf(output, "%d", sHbridge.deadtime);
 8002aca:	4b5f      	ldr	r3, [pc, #380]	@ (8002c48 <remoteControl+0x2f8>)
 8002acc:	889b      	ldrh	r3, [r3, #4]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	f107 0314 	add.w	r3, r7, #20
 8002ad4:	495d      	ldr	r1, [pc, #372]	@ (8002c4c <remoteControl+0x2fc>)
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f00f fdf0 	bl	80126bc <siprintf>
				printString(output);
 8002adc:	f107 0314 	add.w	r3, r7, #20
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fd fe51 	bl	8000788 <printString>
				break;
 8002ae6:	e0a5      	b.n	8002c34 <remoteControl+0x2e4>
			} else if (input[1] == '!') {
 8002ae8:	7f7b      	ldrb	r3, [r7, #29]
 8002aea:	2b21      	cmp	r3, #33	@ 0x21
 8002aec:	f040 809e 	bne.w	8002c2c <remoteControl+0x2dc>

				//Convert the string deadtime % input into an integer
				int new_deadtime;
				for (int i = 2; i < strlen(input)-2; i++) {
 8002af0:	2302      	movs	r3, #2
 8002af2:	657b      	str	r3, [r7, #84]	@ 0x54
 8002af4:	e011      	b.n	8002b1a <remoteControl+0x1ca>
					new_deadtime += i * atoi(input[i]);
 8002af6:	f107 021c 	add.w	r2, r7, #28
 8002afa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002afc:	4413      	add	r3, r2
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f00e ffff 	bl	8011b04 <atoi>
 8002b06:	4602      	mov	r2, r0
 8002b08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b0a:	fb02 f303 	mul.w	r3, r2, r3
 8002b0e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002b10:	4413      	add	r3, r2
 8002b12:	653b      	str	r3, [r7, #80]	@ 0x50
				for (int i = 2; i < strlen(input)-2; i++) {
 8002b14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b16:	3301      	adds	r3, #1
 8002b18:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b1a:	f107 031c 	add.w	r3, r7, #28
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fd fc46 	bl	80003b0 <strlen>
 8002b24:	4603      	mov	r3, r0
 8002b26:	1e9a      	subs	r2, r3, #2
 8002b28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d8e3      	bhi.n	8002af6 <remoteControl+0x1a6>
				}

				sHbridge.deadtime = new_deadtime;
 8002b2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	4b45      	ldr	r3, [pc, #276]	@ (8002c48 <remoteControl+0x2f8>)
 8002b34:	809a      	strh	r2, [r3, #4]
				programHbridge();
 8002b36:	f7fd ff4f 	bl	80009d8 <programHbridge>
			}
			break;
 8002b3a:	e077      	b.n	8002c2c <remoteControl+0x2dc>

			//query/set voltage
		case 'v':
			if (input[1] == '?') {
 8002b3c:	7f7b      	ldrb	r3, [r7, #29]
 8002b3e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b40:	d10c      	bne.n	8002b5c <remoteControl+0x20c>
				char output[10];
				sprintf(output, "%d", current_state.voltage);
 8002b42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b44:	f107 0308 	add.w	r3, r7, #8
 8002b48:	4940      	ldr	r1, [pc, #256]	@ (8002c4c <remoteControl+0x2fc>)
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f00f fdb6 	bl	80126bc <siprintf>
				printString(output);
 8002b50:	f107 0308 	add.w	r3, r7, #8
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fd fe17 	bl	8000788 <printString>
					new_voltage += i * atoi(input[i]);
				}
				current_state.voltage = new_voltage;
			}

			break;
 8002b5a:	e06b      	b.n	8002c34 <remoteControl+0x2e4>
				int i = 1;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	647b      	str	r3, [r7, #68]	@ 0x44
				while (input[i] != '\0') {
 8002b60:	e00e      	b.n	8002b80 <remoteControl+0x230>
					new_voltage += i * atoi(input[i]);
 8002b62:	f107 021c 	add.w	r2, r7, #28
 8002b66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b68:	4413      	add	r3, r2
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f00e ffc9 	bl	8011b04 <atoi>
 8002b72:	4602      	mov	r2, r0
 8002b74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b76:	fb02 f303 	mul.w	r3, r2, r3
 8002b7a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002b7c:	4413      	add	r3, r2
 8002b7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
				while (input[i] != '\0') {
 8002b80:	f107 021c 	add.w	r2, r7, #28
 8002b84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b86:	4413      	add	r3, r2
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1e9      	bne.n	8002b62 <remoteControl+0x212>
				current_state.voltage = new_voltage;
 8002b8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b90:	643b      	str	r3, [r7, #64]	@ 0x40
			break;
 8002b92:	e04f      	b.n	8002c34 <remoteControl+0x2e4>

			//query/set frequency
		case 'f':
			if (input[1] == '?') {
 8002b94:	7f7b      	ldrb	r3, [r7, #29]
 8002b96:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b98:	d10c      	bne.n	8002bb4 <remoteControl+0x264>
				char output[5];
				sprintf(output, "%d", sHbridge.frequency);
 8002b9a:	4b2b      	ldr	r3, [pc, #172]	@ (8002c48 <remoteControl+0x2f8>)
 8002b9c:	885b      	ldrh	r3, [r3, #2]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	463b      	mov	r3, r7
 8002ba2:	492a      	ldr	r1, [pc, #168]	@ (8002c4c <remoteControl+0x2fc>)
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f00f fd89 	bl	80126bc <siprintf>
				printString(output);
 8002baa:	463b      	mov	r3, r7
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7fd fdeb 	bl	8000788 <printString>
				}
				sHbridge.frequency = new_freq;
				programHbridge();
			}

			break;
 8002bb2:	e03f      	b.n	8002c34 <remoteControl+0x2e4>
				int i = 1;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	65bb      	str	r3, [r7, #88]	@ 0x58
				while (input[i] != '\0') {
 8002bb8:	e011      	b.n	8002bde <remoteControl+0x28e>
					new_freq += i * atoi(input[i]);
 8002bba:	f107 021c 	add.w	r2, r7, #28
 8002bbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bc0:	4413      	add	r3, r2
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f00e ff9d 	bl	8011b04 <atoi>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bce:	fb02 f303 	mul.w	r3, r2, r3
 8002bd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002bd4:	4413      	add	r3, r2
 8002bd6:	64bb      	str	r3, [r7, #72]	@ 0x48
					i++;
 8002bd8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bda:	3301      	adds	r3, #1
 8002bdc:	65bb      	str	r3, [r7, #88]	@ 0x58
				while (input[i] != '\0') {
 8002bde:	f107 021c 	add.w	r2, r7, #28
 8002be2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002be4:	4413      	add	r3, r2
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1e6      	bne.n	8002bba <remoteControl+0x26a>
				sHbridge.frequency = new_freq;
 8002bec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	4b15      	ldr	r3, [pc, #84]	@ (8002c48 <remoteControl+0x2f8>)
 8002bf2:	805a      	strh	r2, [r3, #2]
				programHbridge();
 8002bf4:	f7fd fef0 	bl	80009d8 <programHbridge>
			break;
 8002bf8:	e01c      	b.n	8002c34 <remoteControl+0x2e4>

			//query adc 3 (supplies/temp)
		case 'a':
			//TODO: this needs to use a modified function that prints csv format
			printADC3data();
 8002bfa:	f7ff f81f 	bl	8001c3c <printADC3data>
			break;
 8002bfe:	e019      	b.n	8002c34 <remoteControl+0x2e4>

			//modify datalogging flag
		case 'l':
			//Enable or disable datalogging flag in struct
			if (input[1] == '1') {
 8002c00:	7f7b      	ldrb	r3, [r7, #29]
 8002c02:	2b31      	cmp	r3, #49	@ 0x31
 8002c04:	d103      	bne.n	8002c0e <remoteControl+0x2be>
				current_state.logging = 1;
 8002c06:	2301      	movs	r3, #1
 8002c08:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
			} else if (input[1] == '0') {
				current_state.logging = 0;
			}
			break;
 8002c0c:	e010      	b.n	8002c30 <remoteControl+0x2e0>
			} else if (input[1] == '0') {
 8002c0e:	7f7b      	ldrb	r3, [r7, #29]
 8002c10:	2b30      	cmp	r3, #48	@ 0x30
 8002c12:	d10d      	bne.n	8002c30 <remoteControl+0x2e0>
				current_state.logging = 0;
 8002c14:	2300      	movs	r3, #0
 8002c16:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
			break;
 8002c1a:	e009      	b.n	8002c30 <remoteControl+0x2e0>

			//Stop plasma (can also be stopped by toggling using 's!'
		case 'q':
			current_state.state = STOP;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8002c22:	e69d      	b.n	8002960 <remoteControl+0x10>
			break;
 8002c24:	bf00      	nop
 8002c26:	e69b      	b.n	8002960 <remoteControl+0x10>
			break;
 8002c28:	bf00      	nop
 8002c2a:	e699      	b.n	8002960 <remoteControl+0x10>
			break;
 8002c2c:	bf00      	nop
 8002c2e:	e697      	b.n	8002960 <remoteControl+0x10>
			break;
 8002c30:	bf00      	nop
 8002c32:	e695      	b.n	8002960 <remoteControl+0x10>
	{
 8002c34:	e694      	b.n	8002960 <remoteControl+0x10>
 8002c36:	bf00      	nop
 8002c38:	000186a0 	.word	0x000186a0
 8002c3c:	24000e38 	.word	0x24000e38
 8002c40:	08015118 	.word	0x08015118
 8002c44:	0801511c 	.word	0x0801511c
 8002c48:	2400001c 	.word	0x2400001c
 8002c4c:	0801512c 	.word	0x0801512c

08002c50 <PlasmaDriverMenu>:



// Print the plasma driver menu on UART3, and execute entered command.
static void PlasmaDriverMenu(void)
{
 8002c50:	b590      	push	{r4, r7, lr}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
	char input;

	//Wait for user input
	if (HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK)
 8002c56:	1cf9      	adds	r1, r7, #3
 8002c58:	2301      	movs	r3, #1
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	4825      	ldr	r0, [pc, #148]	@ (8002cf4 <PlasmaDriverMenu+0xa4>)
 8002c5e:	f00d fcfe 	bl	801065e <HAL_UART_Receive>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d141      	bne.n	8002cec <PlasmaDriverMenu+0x9c>
	{
		// Return pressed -- Display Menu
		if (input == 13)
 8002c68:	78fb      	ldrb	r3, [r7, #3]
 8002c6a:	2b0d      	cmp	r3, #13
 8002c6c:	d123      	bne.n	8002cb6 <PlasmaDriverMenu+0x66>
		{
			for (int i=0; i<menu_size; i++)
 8002c6e:	2300      	movs	r3, #0
 8002c70:	607b      	str	r3, [r7, #4]
 8002c72:	e017      	b.n	8002ca4 <PlasmaDriverMenu+0x54>
			{
				HAL_UART_Transmit(&huart3, (uint8_t *) menu[i], strlen(menu[i]), 1000);
 8002c74:	4a20      	ldr	r2, [pc, #128]	@ (8002cf8 <PlasmaDriverMenu+0xa8>)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002c7c:	4a1e      	ldr	r2, [pc, #120]	@ (8002cf8 <PlasmaDriverMenu+0xa8>)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7fd fb93 	bl	80003b0 <strlen>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c92:	4621      	mov	r1, r4
 8002c94:	4817      	ldr	r0, [pc, #92]	@ (8002cf4 <PlasmaDriverMenu+0xa4>)
 8002c96:	f00d fc54 	bl	8010542 <HAL_UART_Transmit>
				printCR();
 8002c9a:	f7fd fd65 	bl	8000768 <printCR>
			for (int i=0; i<menu_size; i++)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	607b      	str	r3, [r7, #4]
 8002ca4:	4b15      	ldr	r3, [pc, #84]	@ (8002cfc <PlasmaDriverMenu+0xac>)
 8002ca6:	881b      	ldrh	r3, [r3, #0]
 8002ca8:	461a      	mov	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4293      	cmp	r3, r2
 8002cae:	dbe1      	blt.n	8002c74 <PlasmaDriverMenu+0x24>
			}
			printCR();
 8002cb0:	f7fd fd5a 	bl	8000768 <printCR>
				RunModeAction(input);
			else
				printString("\n\r*** ERROR *** Invalid mode");
		}
	}
}
 8002cb4:	e01a      	b.n	8002cec <PlasmaDriverMenu+0x9c>
		else if (input == '~')
 8002cb6:	78fb      	ldrb	r3, [r7, #3]
 8002cb8:	2b7e      	cmp	r3, #126	@ 0x7e
 8002cba:	d102      	bne.n	8002cc2 <PlasmaDriverMenu+0x72>
			remoteControl();
 8002cbc:	f7ff fe48 	bl	8002950 <remoteControl>
}
 8002cc0:	e014      	b.n	8002cec <PlasmaDriverMenu+0x9c>
			if (sFlashConfig.mode == TEST_MODE)
 8002cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8002d00 <PlasmaDriverMenu+0xb0>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d104      	bne.n	8002cd4 <PlasmaDriverMenu+0x84>
				TestModeAction(input);
 8002cca:	78fb      	ldrb	r3, [r7, #3]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff fc65 	bl	800259c <TestModeAction>
}
 8002cd2:	e00b      	b.n	8002cec <PlasmaDriverMenu+0x9c>
			else if (sFlashConfig.mode == RUN_MODE)
 8002cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8002d00 <PlasmaDriverMenu+0xb0>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d104      	bne.n	8002ce6 <PlasmaDriverMenu+0x96>
				RunModeAction(input);
 8002cdc:	78fb      	ldrb	r3, [r7, #3]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff fc4d 	bl	800257e <RunModeAction>
}
 8002ce4:	e002      	b.n	8002cec <PlasmaDriverMenu+0x9c>
				printString("\n\r*** ERROR *** Invalid mode");
 8002ce6:	4807      	ldr	r0, [pc, #28]	@ (8002d04 <PlasmaDriverMenu+0xb4>)
 8002ce8:	f7fd fd4e 	bl	8000788 <printString>
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd90      	pop	{r4, r7, pc}
 8002cf4:	24000e38 	.word	0x24000e38
 8002cf8:	240002ec 	.word	0x240002ec
 8002cfc:	24000324 	.word	0x24000324
 8002d00:	24000a48 	.word	0x24000a48
 8002d04:	08015130 	.word	0x08015130

08002d08 <PlasmaDriverInit>:

// Initialize the plasma driver
void PlasmaDriverInit(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
	//Initialie power supply struct
	init_supply_struct();
 8002d0c:	f7fd fcd0 	bl	80006b0 <init_supply_struct>

	//Enable line driver 2 (HAL has initialized all GPIO)
	HAL_GPIO_WritePin(LINE_DRIVER2_ENABLE_GPIO_Port, LINE_DRIVER2_ENABLE_Pin, GPIO_PIN_RESET);  //Enable = Low
 8002d10:	2200      	movs	r2, #0
 8002d12:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002d16:	4821      	ldr	r0, [pc, #132]	@ (8002d9c <PlasmaDriverInit+0x94>)
 8002d18:	f008 fa24 	bl	800b164 <HAL_GPIO_WritePin>
	printString("\n\rEnable Line Drive 2");
 8002d1c:	4820      	ldr	r0, [pc, #128]	@ (8002da0 <PlasmaDriverInit+0x98>)
 8002d1e:	f7fd fd33 	bl	8000788 <printString>

	//Power On Supplies in order 15V, 3.3V switch
	PowerOnLowSupplies();
 8002d22:	f7ff f98b 	bl	800203c <PowerOnLowSupplies>

	//Read configuration from flash
	readConfigFlash();
 8002d26:	f7fd fd0f 	bl	8000748 <readConfigFlash>

	//Has the flash configuration been initialized?
	if (sFlashConfig.mode == 0xFF)
 8002d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002da4 <PlasmaDriverInit+0x9c>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2bff      	cmp	r3, #255	@ 0xff
 8002d30:	d107      	bne.n	8002d42 <PlasmaDriverInit+0x3a>
	{
		// write default configuration to flash
		if (writeConfigFlash() != 0)
 8002d32:	f7fd fccf 	bl	80006d4 <writeConfigFlash>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <PlasmaDriverInit+0x3a>
			printString("\n\r*** ERROR FLASH");
 8002d3c:	481a      	ldr	r0, [pc, #104]	@ (8002da8 <PlasmaDriverInit+0xa0>)
 8002d3e:	f7fd fd23 	bl	8000788 <printString>
	}

	//Initialize menu and configuration menu
	InitializeMenu();
 8002d42:	f7ff fad3 	bl	80022ec <InitializeMenu>
	InitializeConfigMenu();
 8002d46:	f7ff faa5 	bl	8002294 <InitializeConfigMenu>

	//Calibrate ADC1, ADC2 and ADC3
	printString("\n\rCalibrate ADC1, ADC2 and ADC3");
 8002d4a:	4818      	ldr	r0, [pc, #96]	@ (8002dac <PlasmaDriverInit+0xa4>)
 8002d4c:	f7fd fd1c 	bl	8000788 <printString>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8002d50:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002d54:	2100      	movs	r1, #0
 8002d56:	4816      	ldr	r0, [pc, #88]	@ (8002db0 <PlasmaDriverInit+0xa8>)
 8002d58:	f004 fd0a 	bl	8007770 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8002d5c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002d60:	2100      	movs	r1, #0
 8002d62:	4814      	ldr	r0, [pc, #80]	@ (8002db4 <PlasmaDriverInit+0xac>)
 8002d64:	f004 fd04 	bl	8007770 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8002d68:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	4812      	ldr	r0, [pc, #72]	@ (8002db8 <PlasmaDriverInit+0xb0>)
 8002d70:	f004 fcfe 	bl	8007770 <HAL_ADCEx_Calibration_Start>

	//Power On Supply 500V
	if (sFlashConfig.mode == RUN_MODE)
 8002d74:	4b0b      	ldr	r3, [pc, #44]	@ (8002da4 <PlasmaDriverInit+0x9c>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d10d      	bne.n	8002d98 <PlasmaDriverInit+0x90>
	{
		//POWER_OFF_IRQ needs to be high before powering On
		if (HAL_GPIO_ReadPin(POWER_OFF_IRQ_GPIO_Port, POWER_OFF_IRQ_Pin) == GPIO_PIN_RESET)		//There is an inverter between MCU and the input, thus check RESET
 8002d7c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d80:	480e      	ldr	r0, [pc, #56]	@ (8002dbc <PlasmaDriverInit+0xb4>)
 8002d82:	f008 f9d7 	bl	800b134 <HAL_GPIO_ReadPin>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d102      	bne.n	8002d92 <PlasmaDriverInit+0x8a>
			PowerOnHighSupplies();
 8002d8c:	f7ff f9d2 	bl	8002134 <PowerOnHighSupplies>
		else
		printString("\n\rPOWER_OFF_IRQ line is not high - 500V is not powered on");
	}
}
 8002d90:	e002      	b.n	8002d98 <PlasmaDriverInit+0x90>
		printString("\n\rPOWER_OFF_IRQ line is not high - 500V is not powered on");
 8002d92:	480b      	ldr	r0, [pc, #44]	@ (8002dc0 <PlasmaDriverInit+0xb8>)
 8002d94:	f7fd fcf8 	bl	8000788 <printString>
}
 8002d98:	bf00      	nop
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	58020400 	.word	0x58020400
 8002da0:	08015150 	.word	0x08015150
 8002da4:	24000a48 	.word	0x24000a48
 8002da8:	08015168 	.word	0x08015168
 8002dac:	0801517c 	.word	0x0801517c
 8002db0:	24000a88 	.word	0x24000a88
 8002db4:	24000af8 	.word	0x24000af8
 8002db8:	24000b68 	.word	0x24000b68
 8002dbc:	58021000 	.word	0x58021000
 8002dc0:	0801519c 	.word	0x0801519c

08002dc4 <PlasmaDoTask>:

// This command is called from a while loop, and will execute any needed task.
void PlasmaDoTask(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
	PlasmaDriverMenu(); //Check UART3 and execute command
 8002dc8:	f7ff ff42 	bl	8002c50 <PlasmaDriverMenu>

	if (sFlashConfig.mode == RUN_MODE)
 8002dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8002e04 <PlasmaDoTask+0x40>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d114      	bne.n	8002dfe <PlasmaDoTask+0x3a>
	{
		//Check if robot controller requested the plasma On or Off
		if (HAL_GPIO_ReadPin(TURN_PLASMA_ON_GPIO_Port, TURN_PLASMA_ON_Pin) == GPIO_PIN_RESET)		//There is an inverter between MCU and the input, thus check RESET
 8002dd4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002dd8:	480b      	ldr	r0, [pc, #44]	@ (8002e08 <PlasmaDoTask+0x44>)
 8002dda:	f008 f9ab 	bl	800b134 <HAL_GPIO_ReadPin>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10c      	bne.n	8002dfe <PlasmaDoTask+0x3a>
		{
			if (powerStatus == V500_ON)
 8002de4:	4b09      	ldr	r3, [pc, #36]	@ (8002e0c <PlasmaDoTask+0x48>)
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d105      	bne.n	8002df8 <PlasmaDoTask+0x34>
			{
				//TODO: add auto frequency adjustment here. "RUN_MODE" is only used when the system is headless, i.e. not controlled over UART
				sHbridge.on = 1; // Turn Hbridge on
 8002dec:	4b08      	ldr	r3, [pc, #32]	@ (8002e10 <PlasmaDoTask+0x4c>)
 8002dee:	2201      	movs	r2, #1
 8002df0:	801a      	strh	r2, [r3, #0]
				programHbridge();
 8002df2:	f7fd fdf1 	bl	80009d8 <programHbridge>
			}
			else
				printString("\n\rUnable to turn H-bridge on, since 500V is not powered on");
		}
	}
}
 8002df6:	e002      	b.n	8002dfe <PlasmaDoTask+0x3a>
				printString("\n\rUnable to turn H-bridge on, since 500V is not powered on");
 8002df8:	4806      	ldr	r0, [pc, #24]	@ (8002e14 <PlasmaDoTask+0x50>)
 8002dfa:	f7fd fcc5 	bl	8000788 <printString>
}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	24000a48 	.word	0x24000a48
 8002e08:	58021000 	.word	0x58021000
 8002e0c:	24000a44 	.word	0x24000a44
 8002e10:	2400001c 	.word	0x2400001c
 8002e14:	080151d8 	.word	0x080151d8

08002e18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e1c:	f001 feda 	bl	8004bd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e20:	f000 f828 	bl	8002e74 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002e24:	f000 f896 	bl	8002f54 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e28:	f000 fea0 	bl	8003b6c <MX_GPIO_Init>
  MX_DMA_Init();
 8002e2c:	f000 fe76 	bl	8003b1c <MX_DMA_Init>
  MX_TIM1_Init();
 8002e30:	f000 fc2a 	bl	8003688 <MX_TIM1_Init>
  MX_ETH_Init();
 8002e34:	f000 fb40 	bl	80034b8 <MX_ETH_Init>
  MX_ADC2_Init();
 8002e38:	f000 f95a 	bl	80030f0 <MX_ADC2_Init>
  MX_USB_OTG_HS_USB_Init();
 8002e3c:	f000 fe66 	bl	8003b0c <MX_USB_OTG_HS_USB_Init>
  MX_ADC3_Init();
 8002e40:	f000 f9fa 	bl	8003238 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 8002e44:	f000 fbd2 	bl	80035ec <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8002e48:	f000 f8b4 	bl	8002fb4 <MX_ADC1_Init>
  MX_COMP2_Init();
 8002e4c:	f000 fb06 	bl	800345c <MX_COMP2_Init>
  MX_TIM2_Init();
 8002e50:	f000 fcac 	bl	80037ac <MX_TIM2_Init>
  MX_LPUART1_UART_Init();
 8002e54:	f000 fb7c 	bl	8003550 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8002e58:	f000 fd02 	bl	8003860 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002e5c:	f000 fd54 	bl	8003908 <MX_TIM4_Init>
  MX_TIM15_Init();
 8002e60:	f000 fdac 	bl	80039bc <MX_TIM15_Init>
  MX_TIM24_Init();
 8002e64:	f000 fe02 	bl	8003a6c <MX_TIM24_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  PlasmaDriverInit();  			//Initialize plasma driver
 8002e68:	f7ff ff4e 	bl	8002d08 <PlasmaDriverInit>


  while (1)
  {
	PlasmaDoTask();     	    //Handle plasma driver task
 8002e6c:	f7ff ffaa 	bl	8002dc4 <PlasmaDoTask>
 8002e70:	e7fc      	b.n	8002e6c <main+0x54>
	...

08002e74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b09c      	sub	sp, #112	@ 0x70
 8002e78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e7e:	224c      	movs	r2, #76	@ 0x4c
 8002e80:	2100      	movs	r1, #0
 8002e82:	4618      	mov	r0, r3
 8002e84:	f00f fc7d 	bl	8012782 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e88:	1d3b      	adds	r3, r7, #4
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f00f fc77 	bl	8012782 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002e94:	2002      	movs	r0, #2
 8002e96:	f008 f999 	bl	800b1cc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	603b      	str	r3, [r7, #0]
 8002e9e:	4b2c      	ldr	r3, [pc, #176]	@ (8002f50 <SystemClock_Config+0xdc>)
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	4a2b      	ldr	r2, [pc, #172]	@ (8002f50 <SystemClock_Config+0xdc>)
 8002ea4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002ea8:	6193      	str	r3, [r2, #24]
 8002eaa:	4b29      	ldr	r3, [pc, #164]	@ (8002f50 <SystemClock_Config+0xdc>)
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002eb6:	bf00      	nop
 8002eb8:	4b25      	ldr	r3, [pc, #148]	@ (8002f50 <SystemClock_Config+0xdc>)
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ec0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ec4:	d1f8      	bne.n	8002eb8 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8002ec6:	2321      	movs	r3, #33	@ 0x21
 8002ec8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002eca:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002ece:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ed8:	2302      	movs	r3, #2
 8002eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002edc:	2304      	movs	r3, #4
 8002ede:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8002ee0:	f240 1313 	movw	r3, #275	@ 0x113
 8002ee4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002eea:	2304      	movs	r3, #4
 8002eec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8002ef2:	2304      	movs	r3, #4
 8002ef4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002efa:	2300      	movs	r3, #0
 8002efc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002efe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f02:	4618      	mov	r0, r3
 8002f04:	f008 f99c 	bl	800b240 <HAL_RCC_OscConfig>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002f0e:	f000 ff9d 	bl	8003e4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f12:	233f      	movs	r3, #63	@ 0x3f
 8002f14:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f16:	2303      	movs	r3, #3
 8002f18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002f1e:	2308      	movs	r3, #8
 8002f20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002f22:	2340      	movs	r3, #64	@ 0x40
 8002f24:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002f26:	2340      	movs	r3, #64	@ 0x40
 8002f28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 8002f2a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002f2e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002f30:	2340      	movs	r3, #64	@ 0x40
 8002f32:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002f34:	1d3b      	adds	r3, r7, #4
 8002f36:	2103      	movs	r1, #3
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f008 fd5b 	bl	800b9f4 <HAL_RCC_ClockConfig>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002f44:	f000 ff82 	bl	8003e4c <Error_Handler>
  }
}
 8002f48:	bf00      	nop
 8002f4a:	3770      	adds	r7, #112	@ 0x70
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	58024800 	.word	0x58024800

08002f54 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b0ae      	sub	sp, #184	@ 0xb8
 8002f58:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f5a:	463b      	mov	r3, r7
 8002f5c:	22b8      	movs	r2, #184	@ 0xb8
 8002f5e:	2100      	movs	r1, #0
 8002f60:	4618      	mov	r0, r3
 8002f62:	f00f fc0e 	bl	8012782 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002f66:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002f6a:	f04f 0300 	mov.w	r3, #0
 8002f6e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8002f72:	2301      	movs	r3, #1
 8002f74:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 8002f76:	2318      	movs	r3, #24
 8002f78:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002f7e:	2302      	movs	r3, #2
 8002f80:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002f82:	2302      	movs	r3, #2
 8002f84:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8002f86:	23c0      	movs	r3, #192	@ 0xc0
 8002f88:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002f92:	2300      	movs	r3, #0
 8002f94:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f98:	463b      	mov	r3, r7
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f009 f8b6 	bl	800c10c <HAL_RCCEx_PeriphCLKConfig>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8002fa6:	f000 ff51 	bl	8003e4c <Error_Handler>
  }
}
 8002faa:	bf00      	nop
 8002fac:	37b8      	adds	r7, #184	@ 0xb8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08c      	sub	sp, #48	@ 0x30
 8002fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002fba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	605a      	str	r2, [r3, #4]
 8002fc4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002fc6:	463b      	mov	r3, r7
 8002fc8:	2224      	movs	r2, #36	@ 0x24
 8002fca:	2100      	movs	r1, #0
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f00f fbd8 	bl	8012782 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002fd2:	4b42      	ldr	r3, [pc, #264]	@ (80030dc <MX_ADC1_Init+0x128>)
 8002fd4:	4a42      	ldr	r2, [pc, #264]	@ (80030e0 <MX_ADC1_Init+0x12c>)
 8002fd6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002fd8:	4b40      	ldr	r3, [pc, #256]	@ (80030dc <MX_ADC1_Init+0x128>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8002fde:	4b3f      	ldr	r3, [pc, #252]	@ (80030dc <MX_ADC1_Init+0x128>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002fe4:	4b3d      	ldr	r3, [pc, #244]	@ (80030dc <MX_ADC1_Init+0x128>)
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002fea:	4b3c      	ldr	r3, [pc, #240]	@ (80030dc <MX_ADC1_Init+0x128>)
 8002fec:	2208      	movs	r2, #8
 8002fee:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002ff0:	4b3a      	ldr	r3, [pc, #232]	@ (80030dc <MX_ADC1_Init+0x128>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002ff6:	4b39      	ldr	r3, [pc, #228]	@ (80030dc <MX_ADC1_Init+0x128>)
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8002ffc:	4b37      	ldr	r3, [pc, #220]	@ (80030dc <MX_ADC1_Init+0x128>)
 8002ffe:	2203      	movs	r2, #3
 8003000:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003002:	4b36      	ldr	r3, [pc, #216]	@ (80030dc <MX_ADC1_Init+0x128>)
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 800300a:	4b34      	ldr	r3, [pc, #208]	@ (80030dc <MX_ADC1_Init+0x128>)
 800300c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003010:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003012:	4b32      	ldr	r3, [pc, #200]	@ (80030dc <MX_ADC1_Init+0x128>)
 8003014:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003018:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 800301a:	4b30      	ldr	r3, [pc, #192]	@ (80030dc <MX_ADC1_Init+0x128>)
 800301c:	2201      	movs	r2, #1
 800301e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003020:	4b2e      	ldr	r3, [pc, #184]	@ (80030dc <MX_ADC1_Init+0x128>)
 8003022:	2200      	movs	r2, #0
 8003024:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8003026:	4b2d      	ldr	r3, [pc, #180]	@ (80030dc <MX_ADC1_Init+0x128>)
 8003028:	2200      	movs	r2, #0
 800302a:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800302c:	4b2b      	ldr	r3, [pc, #172]	@ (80030dc <MX_ADC1_Init+0x128>)
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003034:	4829      	ldr	r0, [pc, #164]	@ (80030dc <MX_ADC1_Init+0x128>)
 8003036:	f002 fad5 	bl	80055e4 <HAL_ADC_Init>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003040:	f000 ff04 	bl	8003e4c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8003044:	2306      	movs	r3, #6
 8003046:	627b      	str	r3, [r7, #36]	@ 0x24
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 8003048:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800304c:	62bb      	str	r3, [r7, #40]	@ 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 800304e:	2300      	movs	r3, #0
 8003050:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003052:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003056:	4619      	mov	r1, r3
 8003058:	4820      	ldr	r0, [pc, #128]	@ (80030dc <MX_ADC1_Init+0x128>)
 800305a:	f004 fcd1 	bl	8007a00 <HAL_ADCEx_MultiModeConfigChannel>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8003064:	f000 fef2 	bl	8003e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8003068:	4b1e      	ldr	r3, [pc, #120]	@ (80030e4 <MX_ADC1_Init+0x130>)
 800306a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800306c:	2306      	movs	r3, #6
 800306e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8003070:	2302      	movs	r3, #2
 8003072:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003074:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003078:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800307a:	2304      	movs	r3, #4
 800307c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8003082:	2300      	movs	r3, #0
 8003084:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003088:	463b      	mov	r3, r7
 800308a:	4619      	mov	r1, r3
 800308c:	4813      	ldr	r0, [pc, #76]	@ (80030dc <MX_ADC1_Init+0x128>)
 800308e:	f002 ffdb 	bl	8006048 <HAL_ADC_ConfigChannel>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8003098:	f000 fed8 	bl	8003e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 800309c:	4b12      	ldr	r3, [pc, #72]	@ (80030e8 <MX_ADC1_Init+0x134>)
 800309e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80030a0:	230c      	movs	r3, #12
 80030a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030a4:	463b      	mov	r3, r7
 80030a6:	4619      	mov	r1, r3
 80030a8:	480c      	ldr	r0, [pc, #48]	@ (80030dc <MX_ADC1_Init+0x128>)
 80030aa:	f002 ffcd 	bl	8006048 <HAL_ADC_ConfigChannel>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 80030b4:	f000 feca 	bl	8003e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80030b8:	4b0c      	ldr	r3, [pc, #48]	@ (80030ec <MX_ADC1_Init+0x138>)
 80030ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80030bc:	2312      	movs	r3, #18
 80030be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030c0:	463b      	mov	r3, r7
 80030c2:	4619      	mov	r1, r3
 80030c4:	4805      	ldr	r0, [pc, #20]	@ (80030dc <MX_ADC1_Init+0x128>)
 80030c6:	f002 ffbf 	bl	8006048 <HAL_ADC_ConfigChannel>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 80030d0:	f000 febc 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80030d4:	bf00      	nop
 80030d6:	3730      	adds	r7, #48	@ 0x30
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	24000a88 	.word	0x24000a88
 80030e0:	40022000 	.word	0x40022000
 80030e4:	3ef08000 	.word	0x3ef08000
 80030e8:	4b840000 	.word	0x4b840000
 80030ec:	43210000 	.word	0x43210000

080030f0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b090      	sub	sp, #64	@ 0x40
 80030f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80030f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	605a      	str	r2, [r3, #4]
 8003100:	609a      	str	r2, [r3, #8]
 8003102:	60da      	str	r2, [r3, #12]
 8003104:	611a      	str	r2, [r3, #16]
 8003106:	615a      	str	r2, [r3, #20]
 8003108:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 800310a:	463b      	mov	r3, r7
 800310c:	2224      	movs	r2, #36	@ 0x24
 800310e:	2100      	movs	r1, #0
 8003110:	4618      	mov	r0, r3
 8003112:	f00f fb36 	bl	8012782 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8003116:	4b42      	ldr	r3, [pc, #264]	@ (8003220 <MX_ADC2_Init+0x130>)
 8003118:	4a42      	ldr	r2, [pc, #264]	@ (8003224 <MX_ADC2_Init+0x134>)
 800311a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800311c:	4b40      	ldr	r3, [pc, #256]	@ (8003220 <MX_ADC2_Init+0x130>)
 800311e:	2200      	movs	r2, #0
 8003120:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8003122:	4b3f      	ldr	r3, [pc, #252]	@ (8003220 <MX_ADC2_Init+0x130>)
 8003124:	2200      	movs	r2, #0
 8003126:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003128:	4b3d      	ldr	r3, [pc, #244]	@ (8003220 <MX_ADC2_Init+0x130>)
 800312a:	2201      	movs	r2, #1
 800312c:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800312e:	4b3c      	ldr	r3, [pc, #240]	@ (8003220 <MX_ADC2_Init+0x130>)
 8003130:	2208      	movs	r2, #8
 8003132:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003134:	4b3a      	ldr	r3, [pc, #232]	@ (8003220 <MX_ADC2_Init+0x130>)
 8003136:	2200      	movs	r2, #0
 8003138:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800313a:	4b39      	ldr	r3, [pc, #228]	@ (8003220 <MX_ADC2_Init+0x130>)
 800313c:	2201      	movs	r2, #1
 800313e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 3;
 8003140:	4b37      	ldr	r3, [pc, #220]	@ (8003220 <MX_ADC2_Init+0x130>)
 8003142:	2203      	movs	r2, #3
 8003144:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003146:	4b36      	ldr	r3, [pc, #216]	@ (8003220 <MX_ADC2_Init+0x130>)
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800314e:	4b34      	ldr	r3, [pc, #208]	@ (8003220 <MX_ADC2_Init+0x130>)
 8003150:	2200      	movs	r2, #0
 8003152:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003154:	4b32      	ldr	r3, [pc, #200]	@ (8003220 <MX_ADC2_Init+0x130>)
 8003156:	2200      	movs	r2, #0
 8003158:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800315a:	4b31      	ldr	r3, [pc, #196]	@ (8003220 <MX_ADC2_Init+0x130>)
 800315c:	2200      	movs	r2, #0
 800315e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8003160:	4b2f      	ldr	r3, [pc, #188]	@ (8003220 <MX_ADC2_Init+0x130>)
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003168:	482d      	ldr	r0, [pc, #180]	@ (8003220 <MX_ADC2_Init+0x130>)
 800316a:	f002 fa3b 	bl	80055e4 <HAL_ADC_Init>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8003174:	f000 fe6a 	bl	8003e4c <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8003178:	4b2b      	ldr	r3, [pc, #172]	@ (8003228 <MX_ADC2_Init+0x138>)
 800317a:	627b      	str	r3, [r7, #36]	@ 0x24
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 800317c:	f44f 0340 	mov.w	r3, #12582912	@ 0xc00000
 8003180:	62bb      	str	r3, [r7, #40]	@ 0x28
  AnalogWDGConfig.Channel = ADC_CHANNEL_3;
 8003182:	4b2a      	ldr	r3, [pc, #168]	@ (800322c <MX_ADC2_Init+0x13c>)
 8003184:	62fb      	str	r3, [r7, #44]	@ 0x2c
  AnalogWDGConfig.ITMode = DISABLE;
 8003186:	2300      	movs	r3, #0
 8003188:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  AnalogWDGConfig.HighThreshold = 0;
 800318c:	2300      	movs	r3, #0
 800318e:	637b      	str	r3, [r7, #52]	@ 0x34
  AnalogWDGConfig.LowThreshold = 0;
 8003190:	2300      	movs	r3, #0
 8003192:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 8003194:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003198:	4619      	mov	r1, r3
 800319a:	4821      	ldr	r0, [pc, #132]	@ (8003220 <MX_ADC2_Init+0x130>)
 800319c:	f003 fc80 	bl	8006aa0 <HAL_ADC_AnalogWDGConfig>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80031a6:	f000 fe51 	bl	8003e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80031aa:	4b20      	ldr	r3, [pc, #128]	@ (800322c <MX_ADC2_Init+0x13c>)
 80031ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80031ae:	2306      	movs	r3, #6
 80031b0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 80031b2:	2302      	movs	r3, #2
 80031b4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80031b6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80031ba:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80031bc:	2304      	movs	r3, #4
 80031be:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80031c0:	2300      	movs	r3, #0
 80031c2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80031c4:	2300      	movs	r3, #0
 80031c6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80031ca:	463b      	mov	r3, r7
 80031cc:	4619      	mov	r1, r3
 80031ce:	4814      	ldr	r0, [pc, #80]	@ (8003220 <MX_ADC2_Init+0x130>)
 80031d0:	f002 ff3a 	bl	8006048 <HAL_ADC_ConfigChannel>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 80031da:	f000 fe37 	bl	8003e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 80031de:	4b14      	ldr	r3, [pc, #80]	@ (8003230 <MX_ADC2_Init+0x140>)
 80031e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80031e2:	230c      	movs	r3, #12
 80031e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80031e6:	463b      	mov	r3, r7
 80031e8:	4619      	mov	r1, r3
 80031ea:	480d      	ldr	r0, [pc, #52]	@ (8003220 <MX_ADC2_Init+0x130>)
 80031ec:	f002 ff2c 	bl	8006048 <HAL_ADC_ConfigChannel>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <MX_ADC2_Init+0x10a>
  {
    Error_Handler();
 80031f6:	f000 fe29 	bl	8003e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80031fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003234 <MX_ADC2_Init+0x144>)
 80031fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80031fe:	2312      	movs	r3, #18
 8003200:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003202:	463b      	mov	r3, r7
 8003204:	4619      	mov	r1, r3
 8003206:	4806      	ldr	r0, [pc, #24]	@ (8003220 <MX_ADC2_Init+0x130>)
 8003208:	f002 ff1e 	bl	8006048 <HAL_ADC_ConfigChannel>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <MX_ADC2_Init+0x126>
  {
    Error_Handler();
 8003212:	f000 fe1b 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003216:	bf00      	nop
 8003218:	3740      	adds	r7, #64	@ 0x40
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	24000af8 	.word	0x24000af8
 8003224:	40022100 	.word	0x40022100
 8003228:	7dc00000 	.word	0x7dc00000
 800322c:	0c900008 	.word	0x0c900008
 8003230:	4fb80000 	.word	0x4fb80000
 8003234:	14f00020 	.word	0x14f00020

08003238 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b08a      	sub	sp, #40	@ 0x28
 800323c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800323e:	1d3b      	adds	r3, r7, #4
 8003240:	2224      	movs	r2, #36	@ 0x24
 8003242:	2100      	movs	r1, #0
 8003244:	4618      	mov	r0, r3
 8003246:	f00f fa9c 	bl	8012782 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800324a:	4b78      	ldr	r3, [pc, #480]	@ (800342c <MX_ADC3_Init+0x1f4>)
 800324c:	4a78      	ldr	r2, [pc, #480]	@ (8003430 <MX_ADC3_Init+0x1f8>)
 800324e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003250:	4b76      	ldr	r3, [pc, #472]	@ (800342c <MX_ADC3_Init+0x1f4>)
 8003252:	2200      	movs	r2, #0
 8003254:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8003256:	4b75      	ldr	r3, [pc, #468]	@ (800342c <MX_ADC3_Init+0x1f4>)
 8003258:	2208      	movs	r2, #8
 800325a:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 800325c:	4b73      	ldr	r3, [pc, #460]	@ (800342c <MX_ADC3_Init+0x1f4>)
 800325e:	2200      	movs	r2, #0
 8003260:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003262:	4b72      	ldr	r3, [pc, #456]	@ (800342c <MX_ADC3_Init+0x1f4>)
 8003264:	2201      	movs	r2, #1
 8003266:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003268:	4b70      	ldr	r3, [pc, #448]	@ (800342c <MX_ADC3_Init+0x1f4>)
 800326a:	2208      	movs	r2, #8
 800326c:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800326e:	4b6f      	ldr	r3, [pc, #444]	@ (800342c <MX_ADC3_Init+0x1f4>)
 8003270:	2200      	movs	r2, #0
 8003272:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8003274:	4b6d      	ldr	r3, [pc, #436]	@ (800342c <MX_ADC3_Init+0x1f4>)
 8003276:	2200      	movs	r2, #0
 8003278:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 11;
 800327a:	4b6c      	ldr	r3, [pc, #432]	@ (800342c <MX_ADC3_Init+0x1f4>)
 800327c:	220b      	movs	r2, #11
 800327e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003280:	4b6a      	ldr	r3, [pc, #424]	@ (800342c <MX_ADC3_Init+0x1f4>)
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003288:	4b68      	ldr	r3, [pc, #416]	@ (800342c <MX_ADC3_Init+0x1f4>)
 800328a:	2200      	movs	r2, #0
 800328c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800328e:	4b67      	ldr	r3, [pc, #412]	@ (800342c <MX_ADC3_Init+0x1f4>)
 8003290:	2200      	movs	r2, #0
 8003292:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8003294:	4b65      	ldr	r3, [pc, #404]	@ (800342c <MX_ADC3_Init+0x1f4>)
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800329c:	4b63      	ldr	r3, [pc, #396]	@ (800342c <MX_ADC3_Init+0x1f4>)
 800329e:	2200      	movs	r2, #0
 80032a0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 80032a2:	4b62      	ldr	r3, [pc, #392]	@ (800342c <MX_ADC3_Init+0x1f4>)
 80032a4:	2201      	movs	r2, #1
 80032a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80032a8:	4b60      	ldr	r3, [pc, #384]	@ (800342c <MX_ADC3_Init+0x1f4>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80032ae:	4b5f      	ldr	r3, [pc, #380]	@ (800342c <MX_ADC3_Init+0x1f4>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 80032b4:	4b5d      	ldr	r3, [pc, #372]	@ (800342c <MX_ADC3_Init+0x1f4>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80032bc:	485b      	ldr	r0, [pc, #364]	@ (800342c <MX_ADC3_Init+0x1f4>)
 80032be:	f002 f991 	bl	80055e4 <HAL_ADC_Init>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 80032c8:	f000 fdc0 	bl	8003e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80032cc:	2301      	movs	r3, #1
 80032ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80032d0:	2306      	movs	r3, #6
 80032d2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_6CYCLES_5;
 80032d4:	2301      	movs	r3, #1
 80032d6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80032d8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80032dc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80032de:	2304      	movs	r3, #4
 80032e0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80032e2:	2300      	movs	r3, #0
 80032e4:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80032e6:	2300      	movs	r3, #0
 80032e8:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80032ea:	1d3b      	adds	r3, r7, #4
 80032ec:	4619      	mov	r1, r3
 80032ee:	484f      	ldr	r0, [pc, #316]	@ (800342c <MX_ADC3_Init+0x1f4>)
 80032f0:	f002 feaa 	bl	8006048 <HAL_ADC_ConfigChannel>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <MX_ADC3_Init+0xc6>
  {
    Error_Handler();
 80032fa:	f000 fda7 	bl	8003e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80032fe:	4b4d      	ldr	r3, [pc, #308]	@ (8003434 <MX_ADC3_Init+0x1fc>)
 8003300:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003302:	230c      	movs	r3, #12
 8003304:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003306:	1d3b      	adds	r3, r7, #4
 8003308:	4619      	mov	r1, r3
 800330a:	4848      	ldr	r0, [pc, #288]	@ (800342c <MX_ADC3_Init+0x1f4>)
 800330c:	f002 fe9c 	bl	8006048 <HAL_ADC_ConfigChannel>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <MX_ADC3_Init+0xe2>
  {
    Error_Handler();
 8003316:	f000 fd99 	bl	8003e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800331a:	4b47      	ldr	r3, [pc, #284]	@ (8003438 <MX_ADC3_Init+0x200>)
 800331c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800331e:	2312      	movs	r3, #18
 8003320:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003322:	1d3b      	adds	r3, r7, #4
 8003324:	4619      	mov	r1, r3
 8003326:	4841      	ldr	r0, [pc, #260]	@ (800342c <MX_ADC3_Init+0x1f4>)
 8003328:	f002 fe8e 	bl	8006048 <HAL_ADC_ConfigChannel>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <MX_ADC3_Init+0xfe>
  {
    Error_Handler();
 8003332:	f000 fd8b 	bl	8003e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003336:	4b41      	ldr	r3, [pc, #260]	@ (800343c <MX_ADC3_Init+0x204>)
 8003338:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800333a:	2318      	movs	r3, #24
 800333c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800333e:	1d3b      	adds	r3, r7, #4
 8003340:	4619      	mov	r1, r3
 8003342:	483a      	ldr	r0, [pc, #232]	@ (800342c <MX_ADC3_Init+0x1f4>)
 8003344:	f002 fe80 	bl	8006048 <HAL_ADC_ConfigChannel>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <MX_ADC3_Init+0x11a>
  {
    Error_Handler();
 800334e:	f000 fd7d 	bl	8003e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003352:	4b3b      	ldr	r3, [pc, #236]	@ (8003440 <MX_ADC3_Init+0x208>)
 8003354:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8003356:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800335a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800335c:	1d3b      	adds	r3, r7, #4
 800335e:	4619      	mov	r1, r3
 8003360:	4832      	ldr	r0, [pc, #200]	@ (800342c <MX_ADC3_Init+0x1f4>)
 8003362:	f002 fe71 	bl	8006048 <HAL_ADC_ConfigChannel>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <MX_ADC3_Init+0x138>
  {
    Error_Handler();
 800336c:	f000 fd6e 	bl	8003e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003370:	4b34      	ldr	r3, [pc, #208]	@ (8003444 <MX_ADC3_Init+0x20c>)
 8003372:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8003374:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8003378:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800337a:	1d3b      	adds	r3, r7, #4
 800337c:	4619      	mov	r1, r3
 800337e:	482b      	ldr	r0, [pc, #172]	@ (800342c <MX_ADC3_Init+0x1f4>)
 8003380:	f002 fe62 	bl	8006048 <HAL_ADC_ConfigChannel>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <MX_ADC3_Init+0x156>
  {
    Error_Handler();
 800338a:	f000 fd5f 	bl	8003e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800338e:	4b2e      	ldr	r3, [pc, #184]	@ (8003448 <MX_ADC3_Init+0x210>)
 8003390:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8003392:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8003396:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003398:	1d3b      	adds	r3, r7, #4
 800339a:	4619      	mov	r1, r3
 800339c:	4823      	ldr	r0, [pc, #140]	@ (800342c <MX_ADC3_Init+0x1f4>)
 800339e:	f002 fe53 	bl	8006048 <HAL_ADC_ConfigChannel>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <MX_ADC3_Init+0x174>
  {
    Error_Handler();
 80033a8:	f000 fd50 	bl	8003e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80033ac:	4b27      	ldr	r3, [pc, #156]	@ (800344c <MX_ADC3_Init+0x214>)
 80033ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80033b0:	f44f 7389 	mov.w	r3, #274	@ 0x112
 80033b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80033b6:	1d3b      	adds	r3, r7, #4
 80033b8:	4619      	mov	r1, r3
 80033ba:	481c      	ldr	r0, [pc, #112]	@ (800342c <MX_ADC3_Init+0x1f4>)
 80033bc:	f002 fe44 	bl	8006048 <HAL_ADC_ConfigChannel>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <MX_ADC3_Init+0x192>
  {
    Error_Handler();
 80033c6:	f000 fd41 	bl	8003e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80033ca:	4b21      	ldr	r3, [pc, #132]	@ (8003450 <MX_ADC3_Init+0x218>)
 80033cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80033ce:	f44f 738c 	mov.w	r3, #280	@ 0x118
 80033d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80033d4:	1d3b      	adds	r3, r7, #4
 80033d6:	4619      	mov	r1, r3
 80033d8:	4814      	ldr	r0, [pc, #80]	@ (800342c <MX_ADC3_Init+0x1f4>)
 80033da:	f002 fe35 	bl	8006048 <HAL_ADC_ConfigChannel>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <MX_ADC3_Init+0x1b0>
  {
    Error_Handler();
 80033e4:	f000 fd32 	bl	8003e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80033e8:	4b1a      	ldr	r3, [pc, #104]	@ (8003454 <MX_ADC3_Init+0x21c>)
 80033ea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80033ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80033f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80033f2:	1d3b      	adds	r3, r7, #4
 80033f4:	4619      	mov	r1, r3
 80033f6:	480d      	ldr	r0, [pc, #52]	@ (800342c <MX_ADC3_Init+0x1f4>)
 80033f8:	f002 fe26 	bl	8006048 <HAL_ADC_ConfigChannel>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <MX_ADC3_Init+0x1ce>
  {
    Error_Handler();
 8003402:	f000 fd23 	bl	8003e4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003406:	4b14      	ldr	r3, [pc, #80]	@ (8003458 <MX_ADC3_Init+0x220>)
 8003408:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800340a:	f240 2306 	movw	r3, #518	@ 0x206
 800340e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003410:	1d3b      	adds	r3, r7, #4
 8003412:	4619      	mov	r1, r3
 8003414:	4805      	ldr	r0, [pc, #20]	@ (800342c <MX_ADC3_Init+0x1f4>)
 8003416:	f002 fe17 	bl	8006048 <HAL_ADC_ConfigChannel>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <MX_ADC3_Init+0x1ec>
  {
    Error_Handler();
 8003420:	f000 fd14 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8003424:	bf00      	nop
 8003426:	3728      	adds	r7, #40	@ 0x28
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	24000b68 	.word	0x24000b68
 8003430:	58026000 	.word	0x58026000
 8003434:	04300002 	.word	0x04300002
 8003438:	08600004 	.word	0x08600004
 800343c:	0c900008 	.word	0x0c900008
 8003440:	10c00010 	.word	0x10c00010
 8003444:	14f00020 	.word	0x14f00020
 8003448:	19200040 	.word	0x19200040
 800344c:	1d500080 	.word	0x1d500080
 8003450:	21800100 	.word	0x21800100
 8003454:	25b00200 	.word	0x25b00200
 8003458:	2a000400 	.word	0x2a000400

0800345c <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8003460:	4b13      	ldr	r3, [pc, #76]	@ (80034b0 <MX_COMP2_Init+0x54>)
 8003462:	4a14      	ldr	r2, [pc, #80]	@ (80034b4 <MX_COMP2_Init+0x58>)
 8003464:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 8003466:	4b12      	ldr	r3, [pc, #72]	@ (80034b0 <MX_COMP2_Init+0x54>)
 8003468:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800346c:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 800346e:	4b10      	ldr	r3, [pc, #64]	@ (80034b0 <MX_COMP2_Init+0x54>)
 8003470:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003474:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8003476:	4b0e      	ldr	r3, [pc, #56]	@ (80034b0 <MX_COMP2_Init+0x54>)
 8003478:	2200      	movs	r2, #0
 800347a:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800347c:	4b0c      	ldr	r3, [pc, #48]	@ (80034b0 <MX_COMP2_Init+0x54>)
 800347e:	2200      	movs	r2, #0
 8003480:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8003482:	4b0b      	ldr	r3, [pc, #44]	@ (80034b0 <MX_COMP2_Init+0x54>)
 8003484:	2200      	movs	r2, #0
 8003486:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8003488:	4b09      	ldr	r3, [pc, #36]	@ (80034b0 <MX_COMP2_Init+0x54>)
 800348a:	2200      	movs	r2, #0
 800348c:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800348e:	4b08      	ldr	r3, [pc, #32]	@ (80034b0 <MX_COMP2_Init+0x54>)
 8003490:	2200      	movs	r2, #0
 8003492:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8003494:	4b06      	ldr	r3, [pc, #24]	@ (80034b0 <MX_COMP2_Init+0x54>)
 8003496:	2200      	movs	r2, #0
 8003498:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 800349a:	4805      	ldr	r0, [pc, #20]	@ (80034b0 <MX_COMP2_Init+0x54>)
 800349c:	f004 fb92 	bl	8007bc4 <HAL_COMP_Init>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <MX_COMP2_Init+0x4e>
  {
    Error_Handler();
 80034a6:	f000 fcd1 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 80034aa:	bf00      	nop
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	24000cc8 	.word	0x24000cc8
 80034b4:	58003810 	.word	0x58003810

080034b8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80034bc:	4b1e      	ldr	r3, [pc, #120]	@ (8003538 <MX_ETH_Init+0x80>)
 80034be:	4a1f      	ldr	r2, [pc, #124]	@ (800353c <MX_ETH_Init+0x84>)
 80034c0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80034c2:	4b1f      	ldr	r3, [pc, #124]	@ (8003540 <MX_ETH_Init+0x88>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80034c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003540 <MX_ETH_Init+0x88>)
 80034ca:	2280      	movs	r2, #128	@ 0x80
 80034cc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80034ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003540 <MX_ETH_Init+0x88>)
 80034d0:	22e1      	movs	r2, #225	@ 0xe1
 80034d2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80034d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003540 <MX_ETH_Init+0x88>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80034da:	4b19      	ldr	r3, [pc, #100]	@ (8003540 <MX_ETH_Init+0x88>)
 80034dc:	2200      	movs	r2, #0
 80034de:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80034e0:	4b17      	ldr	r3, [pc, #92]	@ (8003540 <MX_ETH_Init+0x88>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80034e6:	4b14      	ldr	r3, [pc, #80]	@ (8003538 <MX_ETH_Init+0x80>)
 80034e8:	4a15      	ldr	r2, [pc, #84]	@ (8003540 <MX_ETH_Init+0x88>)
 80034ea:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80034ec:	4b12      	ldr	r3, [pc, #72]	@ (8003538 <MX_ETH_Init+0x80>)
 80034ee:	2201      	movs	r2, #1
 80034f0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80034f2:	4b11      	ldr	r3, [pc, #68]	@ (8003538 <MX_ETH_Init+0x80>)
 80034f4:	4a13      	ldr	r2, [pc, #76]	@ (8003544 <MX_ETH_Init+0x8c>)
 80034f6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80034f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003538 <MX_ETH_Init+0x80>)
 80034fa:	4a13      	ldr	r2, [pc, #76]	@ (8003548 <MX_ETH_Init+0x90>)
 80034fc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80034fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003538 <MX_ETH_Init+0x80>)
 8003500:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8003504:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8003506:	480c      	ldr	r0, [pc, #48]	@ (8003538 <MX_ETH_Init+0x80>)
 8003508:	f006 fe6a 	bl	800a1e0 <HAL_ETH_Init>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8003512:	f000 fc9b 	bl	8003e4c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003516:	2238      	movs	r2, #56	@ 0x38
 8003518:	2100      	movs	r1, #0
 800351a:	480c      	ldr	r0, [pc, #48]	@ (800354c <MX_ETH_Init+0x94>)
 800351c:	f00f f931 	bl	8012782 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003520:	4b0a      	ldr	r3, [pc, #40]	@ (800354c <MX_ETH_Init+0x94>)
 8003522:	2221      	movs	r2, #33	@ 0x21
 8003524:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003526:	4b09      	ldr	r3, [pc, #36]	@ (800354c <MX_ETH_Init+0x94>)
 8003528:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800352c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800352e:	4b07      	ldr	r3, [pc, #28]	@ (800354c <MX_ETH_Init+0x94>)
 8003530:	2200      	movs	r2, #0
 8003532:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8003534:	bf00      	nop
 8003536:	bd80      	pop	{r7, pc}
 8003538:	24000cf4 	.word	0x24000cf4
 800353c:	40028000 	.word	0x40028000
 8003540:	24001094 	.word	0x24001094
 8003544:	24000270 	.word	0x24000270
 8003548:	24000210 	.word	0x24000210
 800354c:	24000a50 	.word	0x24000a50

08003550 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003554:	4b22      	ldr	r3, [pc, #136]	@ (80035e0 <MX_LPUART1_UART_Init+0x90>)
 8003556:	4a23      	ldr	r2, [pc, #140]	@ (80035e4 <MX_LPUART1_UART_Init+0x94>)
 8003558:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800355a:	4b21      	ldr	r3, [pc, #132]	@ (80035e0 <MX_LPUART1_UART_Init+0x90>)
 800355c:	4a22      	ldr	r2, [pc, #136]	@ (80035e8 <MX_LPUART1_UART_Init+0x98>)
 800355e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003560:	4b1f      	ldr	r3, [pc, #124]	@ (80035e0 <MX_LPUART1_UART_Init+0x90>)
 8003562:	2200      	movs	r2, #0
 8003564:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003566:	4b1e      	ldr	r3, [pc, #120]	@ (80035e0 <MX_LPUART1_UART_Init+0x90>)
 8003568:	2200      	movs	r2, #0
 800356a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800356c:	4b1c      	ldr	r3, [pc, #112]	@ (80035e0 <MX_LPUART1_UART_Init+0x90>)
 800356e:	2200      	movs	r2, #0
 8003570:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003572:	4b1b      	ldr	r3, [pc, #108]	@ (80035e0 <MX_LPUART1_UART_Init+0x90>)
 8003574:	220c      	movs	r2, #12
 8003576:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003578:	4b19      	ldr	r3, [pc, #100]	@ (80035e0 <MX_LPUART1_UART_Init+0x90>)
 800357a:	2200      	movs	r2, #0
 800357c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800357e:	4b18      	ldr	r3, [pc, #96]	@ (80035e0 <MX_LPUART1_UART_Init+0x90>)
 8003580:	2200      	movs	r2, #0
 8003582:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003584:	4b16      	ldr	r3, [pc, #88]	@ (80035e0 <MX_LPUART1_UART_Init+0x90>)
 8003586:	2200      	movs	r2, #0
 8003588:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800358a:	4b15      	ldr	r3, [pc, #84]	@ (80035e0 <MX_LPUART1_UART_Init+0x90>)
 800358c:	2200      	movs	r2, #0
 800358e:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8003590:	4b13      	ldr	r3, [pc, #76]	@ (80035e0 <MX_LPUART1_UART_Init+0x90>)
 8003592:	2200      	movs	r2, #0
 8003594:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003596:	4812      	ldr	r0, [pc, #72]	@ (80035e0 <MX_LPUART1_UART_Init+0x90>)
 8003598:	f00c ff83 	bl	80104a2 <HAL_UART_Init>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 80035a2:	f000 fc53 	bl	8003e4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80035a6:	2100      	movs	r1, #0
 80035a8:	480d      	ldr	r0, [pc, #52]	@ (80035e0 <MX_LPUART1_UART_Init+0x90>)
 80035aa:	f00e f9e0 	bl	801196e <HAL_UARTEx_SetTxFifoThreshold>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 80035b4:	f000 fc4a 	bl	8003e4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80035b8:	2100      	movs	r1, #0
 80035ba:	4809      	ldr	r0, [pc, #36]	@ (80035e0 <MX_LPUART1_UART_Init+0x90>)
 80035bc:	f00e fa15 	bl	80119ea <HAL_UARTEx_SetRxFifoThreshold>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 80035c6:	f000 fc41 	bl	8003e4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80035ca:	4805      	ldr	r0, [pc, #20]	@ (80035e0 <MX_LPUART1_UART_Init+0x90>)
 80035cc:	f00e f996 	bl	80118fc <HAL_UARTEx_DisableFifoMode>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 80035d6:	f000 fc39 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80035da:	bf00      	nop
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	24000da4 	.word	0x24000da4
 80035e4:	58000c00 	.word	0x58000c00
 80035e8:	00033324 	.word	0x00033324

080035ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80035f0:	4b22      	ldr	r3, [pc, #136]	@ (800367c <MX_USART3_UART_Init+0x90>)
 80035f2:	4a23      	ldr	r2, [pc, #140]	@ (8003680 <MX_USART3_UART_Init+0x94>)
 80035f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 8593750;
 80035f6:	4b21      	ldr	r3, [pc, #132]	@ (800367c <MX_USART3_UART_Init+0x90>)
 80035f8:	4a22      	ldr	r2, [pc, #136]	@ (8003684 <MX_USART3_UART_Init+0x98>)
 80035fa:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80035fc:	4b1f      	ldr	r3, [pc, #124]	@ (800367c <MX_USART3_UART_Init+0x90>)
 80035fe:	2200      	movs	r2, #0
 8003600:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003602:	4b1e      	ldr	r3, [pc, #120]	@ (800367c <MX_USART3_UART_Init+0x90>)
 8003604:	2200      	movs	r2, #0
 8003606:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003608:	4b1c      	ldr	r3, [pc, #112]	@ (800367c <MX_USART3_UART_Init+0x90>)
 800360a:	2200      	movs	r2, #0
 800360c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800360e:	4b1b      	ldr	r3, [pc, #108]	@ (800367c <MX_USART3_UART_Init+0x90>)
 8003610:	220c      	movs	r2, #12
 8003612:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003614:	4b19      	ldr	r3, [pc, #100]	@ (800367c <MX_USART3_UART_Init+0x90>)
 8003616:	2200      	movs	r2, #0
 8003618:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800361a:	4b18      	ldr	r3, [pc, #96]	@ (800367c <MX_USART3_UART_Init+0x90>)
 800361c:	2200      	movs	r2, #0
 800361e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003620:	4b16      	ldr	r3, [pc, #88]	@ (800367c <MX_USART3_UART_Init+0x90>)
 8003622:	2200      	movs	r2, #0
 8003624:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003626:	4b15      	ldr	r3, [pc, #84]	@ (800367c <MX_USART3_UART_Init+0x90>)
 8003628:	2200      	movs	r2, #0
 800362a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800362c:	4b13      	ldr	r3, [pc, #76]	@ (800367c <MX_USART3_UART_Init+0x90>)
 800362e:	2200      	movs	r2, #0
 8003630:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003632:	4812      	ldr	r0, [pc, #72]	@ (800367c <MX_USART3_UART_Init+0x90>)
 8003634:	f00c ff35 	bl	80104a2 <HAL_UART_Init>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 800363e:	f000 fc05 	bl	8003e4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003642:	2100      	movs	r1, #0
 8003644:	480d      	ldr	r0, [pc, #52]	@ (800367c <MX_USART3_UART_Init+0x90>)
 8003646:	f00e f992 	bl	801196e <HAL_UARTEx_SetTxFifoThreshold>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8003650:	f000 fbfc 	bl	8003e4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003654:	2100      	movs	r1, #0
 8003656:	4809      	ldr	r0, [pc, #36]	@ (800367c <MX_USART3_UART_Init+0x90>)
 8003658:	f00e f9c7 	bl	80119ea <HAL_UARTEx_SetRxFifoThreshold>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8003662:	f000 fbf3 	bl	8003e4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003666:	4805      	ldr	r0, [pc, #20]	@ (800367c <MX_USART3_UART_Init+0x90>)
 8003668:	f00e f948 	bl	80118fc <HAL_UARTEx_DisableFifoMode>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8003672:	f000 fbeb 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003676:	bf00      	nop
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	24000e38 	.word	0x24000e38
 8003680:	40004800 	.word	0x40004800
 8003684:	00832156 	.word	0x00832156

08003688 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b098      	sub	sp, #96	@ 0x60
 800368c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800368e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003692:	2200      	movs	r2, #0
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	605a      	str	r2, [r3, #4]
 8003698:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800369a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	605a      	str	r2, [r3, #4]
 80036a4:	609a      	str	r2, [r3, #8]
 80036a6:	60da      	str	r2, [r3, #12]
 80036a8:	611a      	str	r2, [r3, #16]
 80036aa:	615a      	str	r2, [r3, #20]
 80036ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80036ae:	1d3b      	adds	r3, r7, #4
 80036b0:	2234      	movs	r2, #52	@ 0x34
 80036b2:	2100      	movs	r1, #0
 80036b4:	4618      	mov	r0, r3
 80036b6:	f00f f864 	bl	8012782 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80036ba:	4b3a      	ldr	r3, [pc, #232]	@ (80037a4 <MX_TIM1_Init+0x11c>)
 80036bc:	4a3a      	ldr	r2, [pc, #232]	@ (80037a8 <MX_TIM1_Init+0x120>)
 80036be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80036c0:	4b38      	ldr	r3, [pc, #224]	@ (80037a4 <MX_TIM1_Init+0x11c>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036c6:	4b37      	ldr	r3, [pc, #220]	@ (80037a4 <MX_TIM1_Init+0x11c>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3240;
 80036cc:	4b35      	ldr	r3, [pc, #212]	@ (80037a4 <MX_TIM1_Init+0x11c>)
 80036ce:	f640 42a8 	movw	r2, #3240	@ 0xca8
 80036d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036d4:	4b33      	ldr	r3, [pc, #204]	@ (80037a4 <MX_TIM1_Init+0x11c>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80036da:	4b32      	ldr	r3, [pc, #200]	@ (80037a4 <MX_TIM1_Init+0x11c>)
 80036dc:	2200      	movs	r2, #0
 80036de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036e0:	4b30      	ldr	r3, [pc, #192]	@ (80037a4 <MX_TIM1_Init+0x11c>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80036e6:	482f      	ldr	r0, [pc, #188]	@ (80037a4 <MX_TIM1_Init+0x11c>)
 80036e8:	f00b f9cc 	bl	800ea84 <HAL_TIM_PWM_Init>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80036f2:	f000 fbab 	bl	8003e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036f6:	2300      	movs	r3, #0
 80036f8:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80036fa:	2300      	movs	r3, #0
 80036fc:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036fe:	2300      	movs	r3, #0
 8003700:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003702:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003706:	4619      	mov	r1, r3
 8003708:	4826      	ldr	r0, [pc, #152]	@ (80037a4 <MX_TIM1_Init+0x11c>)
 800370a:	f00c fd69 	bl	80101e0 <HAL_TIMEx_MasterConfigSynchronization>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003714:	f000 fb9a 	bl	8003e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003718:	2360      	movs	r3, #96	@ 0x60
 800371a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 1620;
 800371c:	f240 6354 	movw	r3, #1620	@ 0x654
 8003720:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003722:	2302      	movs	r3, #2
 8003724:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8003726:	2308      	movs	r3, #8
 8003728:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800372a:	2300      	movs	r3, #0
 800372c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 800372e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003732:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8003734:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003738:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800373a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800373e:	2200      	movs	r2, #0
 8003740:	4619      	mov	r1, r3
 8003742:	4818      	ldr	r0, [pc, #96]	@ (80037a4 <MX_TIM1_Init+0x11c>)
 8003744:	f00b fc9c 	bl	800f080 <HAL_TIM_PWM_ConfigChannel>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800374e:	f000 fb7d 	bl	8003e4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003752:	2300      	movs	r3, #0
 8003754:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003756:	2300      	movs	r3, #0
 8003758:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800375a:	2300      	movs	r3, #0
 800375c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0xFF;
 800375e:	23ff      	movs	r3, #255	@ 0xff
 8003760:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003762:	2300      	movs	r3, #0
 8003764:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003766:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800376a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800376c:	2300      	movs	r3, #0
 800376e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003770:	2300      	movs	r3, #0
 8003772:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003774:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003778:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800377a:	2300      	movs	r3, #0
 800377c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800377e:	2300      	movs	r3, #0
 8003780:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003782:	1d3b      	adds	r3, r7, #4
 8003784:	4619      	mov	r1, r3
 8003786:	4807      	ldr	r0, [pc, #28]	@ (80037a4 <MX_TIM1_Init+0x11c>)
 8003788:	f00c fdc6 	bl	8010318 <HAL_TIMEx_ConfigBreakDeadTime>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8003792:	f000 fb5b 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003796:	4803      	ldr	r0, [pc, #12]	@ (80037a4 <MX_TIM1_Init+0x11c>)
 8003798:	f000 ffc8 	bl	800472c <HAL_TIM_MspPostInit>

}
 800379c:	bf00      	nop
 800379e:	3760      	adds	r7, #96	@ 0x60
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	24000ecc 	.word	0x24000ecc
 80037a8:	40010000 	.word	0x40010000

080037ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08a      	sub	sp, #40	@ 0x28
 80037b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037b2:	f107 031c 	add.w	r3, r7, #28
 80037b6:	2200      	movs	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	605a      	str	r2, [r3, #4]
 80037bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037be:	463b      	mov	r3, r7
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	605a      	str	r2, [r3, #4]
 80037c6:	609a      	str	r2, [r3, #8]
 80037c8:	60da      	str	r2, [r3, #12]
 80037ca:	611a      	str	r2, [r3, #16]
 80037cc:	615a      	str	r2, [r3, #20]
 80037ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80037d0:	4b22      	ldr	r3, [pc, #136]	@ (800385c <MX_TIM2_Init+0xb0>)
 80037d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80037d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80037d8:	4b20      	ldr	r3, [pc, #128]	@ (800385c <MX_TIM2_Init+0xb0>)
 80037da:	2200      	movs	r2, #0
 80037dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037de:	4b1f      	ldr	r3, [pc, #124]	@ (800385c <MX_TIM2_Init+0xb0>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80037e4:	4b1d      	ldr	r3, [pc, #116]	@ (800385c <MX_TIM2_Init+0xb0>)
 80037e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80037ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037ec:	4b1b      	ldr	r3, [pc, #108]	@ (800385c <MX_TIM2_Init+0xb0>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037f2:	4b1a      	ldr	r3, [pc, #104]	@ (800385c <MX_TIM2_Init+0xb0>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80037f8:	4818      	ldr	r0, [pc, #96]	@ (800385c <MX_TIM2_Init+0xb0>)
 80037fa:	f00b f943 	bl	800ea84 <HAL_TIM_PWM_Init>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8003804:	f000 fb22 	bl	8003e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003808:	2300      	movs	r3, #0
 800380a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800380c:	2300      	movs	r3, #0
 800380e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003810:	f107 031c 	add.w	r3, r7, #28
 8003814:	4619      	mov	r1, r3
 8003816:	4811      	ldr	r0, [pc, #68]	@ (800385c <MX_TIM2_Init+0xb0>)
 8003818:	f00c fce2 	bl	80101e0 <HAL_TIMEx_MasterConfigSynchronization>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8003822:	f000 fb13 	bl	8003e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003826:	2360      	movs	r3, #96	@ 0x60
 8003828:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800382a:	2300      	movs	r3, #0
 800382c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800382e:	2300      	movs	r3, #0
 8003830:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003832:	2300      	movs	r3, #0
 8003834:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003836:	463b      	mov	r3, r7
 8003838:	2200      	movs	r2, #0
 800383a:	4619      	mov	r1, r3
 800383c:	4807      	ldr	r0, [pc, #28]	@ (800385c <MX_TIM2_Init+0xb0>)
 800383e:	f00b fc1f 	bl	800f080 <HAL_TIM_PWM_ConfigChannel>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8003848:	f000 fb00 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800384c:	4803      	ldr	r0, [pc, #12]	@ (800385c <MX_TIM2_Init+0xb0>)
 800384e:	f000 ff6d 	bl	800472c <HAL_TIM_MspPostInit>

}
 8003852:	bf00      	nop
 8003854:	3728      	adds	r7, #40	@ 0x28
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	24000f18 	.word	0x24000f18

08003860 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003866:	f107 0314 	add.w	r3, r7, #20
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	605a      	str	r2, [r3, #4]
 8003870:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003872:	1d3b      	adds	r3, r7, #4
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	609a      	str	r2, [r3, #8]
 800387c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800387e:	4b20      	ldr	r3, [pc, #128]	@ (8003900 <MX_TIM3_Init+0xa0>)
 8003880:	4a20      	ldr	r2, [pc, #128]	@ (8003904 <MX_TIM3_Init+0xa4>)
 8003882:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003884:	4b1e      	ldr	r3, [pc, #120]	@ (8003900 <MX_TIM3_Init+0xa0>)
 8003886:	2200      	movs	r2, #0
 8003888:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800388a:	4b1d      	ldr	r3, [pc, #116]	@ (8003900 <MX_TIM3_Init+0xa0>)
 800388c:	2200      	movs	r2, #0
 800388e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003890:	4b1b      	ldr	r3, [pc, #108]	@ (8003900 <MX_TIM3_Init+0xa0>)
 8003892:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003896:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003898:	4b19      	ldr	r3, [pc, #100]	@ (8003900 <MX_TIM3_Init+0xa0>)
 800389a:	2200      	movs	r2, #0
 800389c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800389e:	4b18      	ldr	r3, [pc, #96]	@ (8003900 <MX_TIM3_Init+0xa0>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80038a4:	4816      	ldr	r0, [pc, #88]	@ (8003900 <MX_TIM3_Init+0xa0>)
 80038a6:	f00b faf7 	bl	800ee98 <HAL_TIM_IC_Init>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80038b0:	f000 facc 	bl	8003e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038b4:	2300      	movs	r3, #0
 80038b6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038b8:	2300      	movs	r3, #0
 80038ba:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80038bc:	f107 0314 	add.w	r3, r7, #20
 80038c0:	4619      	mov	r1, r3
 80038c2:	480f      	ldr	r0, [pc, #60]	@ (8003900 <MX_TIM3_Init+0xa0>)
 80038c4:	f00c fc8c 	bl	80101e0 <HAL_TIMEx_MasterConfigSynchronization>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80038ce:	f000 fabd 	bl	8003e4c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80038d2:	2300      	movs	r3, #0
 80038d4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80038d6:	2301      	movs	r3, #1
 80038d8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80038de:	2300      	movs	r3, #0
 80038e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80038e2:	1d3b      	adds	r3, r7, #4
 80038e4:	2200      	movs	r2, #0
 80038e6:	4619      	mov	r1, r3
 80038e8:	4805      	ldr	r0, [pc, #20]	@ (8003900 <MX_TIM3_Init+0xa0>)
 80038ea:	f00b fb2c 	bl	800ef46 <HAL_TIM_IC_ConfigChannel>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80038f4:	f000 faaa 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80038f8:	bf00      	nop
 80038fa:	3720      	adds	r7, #32
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	24000f64 	.word	0x24000f64
 8003904:	40000400 	.word	0x40000400

08003908 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b08a      	sub	sp, #40	@ 0x28
 800390c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800390e:	f107 031c 	add.w	r3, r7, #28
 8003912:	2200      	movs	r2, #0
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	605a      	str	r2, [r3, #4]
 8003918:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800391a:	463b      	mov	r3, r7
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	605a      	str	r2, [r3, #4]
 8003922:	609a      	str	r2, [r3, #8]
 8003924:	60da      	str	r2, [r3, #12]
 8003926:	611a      	str	r2, [r3, #16]
 8003928:	615a      	str	r2, [r3, #20]
 800392a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800392c:	4b21      	ldr	r3, [pc, #132]	@ (80039b4 <MX_TIM4_Init+0xac>)
 800392e:	4a22      	ldr	r2, [pc, #136]	@ (80039b8 <MX_TIM4_Init+0xb0>)
 8003930:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003932:	4b20      	ldr	r3, [pc, #128]	@ (80039b4 <MX_TIM4_Init+0xac>)
 8003934:	2200      	movs	r2, #0
 8003936:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003938:	4b1e      	ldr	r3, [pc, #120]	@ (80039b4 <MX_TIM4_Init+0xac>)
 800393a:	2200      	movs	r2, #0
 800393c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800393e:	4b1d      	ldr	r3, [pc, #116]	@ (80039b4 <MX_TIM4_Init+0xac>)
 8003940:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003944:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003946:	4b1b      	ldr	r3, [pc, #108]	@ (80039b4 <MX_TIM4_Init+0xac>)
 8003948:	2200      	movs	r2, #0
 800394a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800394c:	4b19      	ldr	r3, [pc, #100]	@ (80039b4 <MX_TIM4_Init+0xac>)
 800394e:	2200      	movs	r2, #0
 8003950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003952:	4818      	ldr	r0, [pc, #96]	@ (80039b4 <MX_TIM4_Init+0xac>)
 8003954:	f00b f896 	bl	800ea84 <HAL_TIM_PWM_Init>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800395e:	f000 fa75 	bl	8003e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003962:	2300      	movs	r3, #0
 8003964:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003966:	2300      	movs	r3, #0
 8003968:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800396a:	f107 031c 	add.w	r3, r7, #28
 800396e:	4619      	mov	r1, r3
 8003970:	4810      	ldr	r0, [pc, #64]	@ (80039b4 <MX_TIM4_Init+0xac>)
 8003972:	f00c fc35 	bl	80101e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800397c:	f000 fa66 	bl	8003e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003980:	2360      	movs	r3, #96	@ 0x60
 8003982:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003984:	2300      	movs	r3, #0
 8003986:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003988:	2300      	movs	r3, #0
 800398a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800398c:	2300      	movs	r3, #0
 800398e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003990:	463b      	mov	r3, r7
 8003992:	2200      	movs	r2, #0
 8003994:	4619      	mov	r1, r3
 8003996:	4807      	ldr	r0, [pc, #28]	@ (80039b4 <MX_TIM4_Init+0xac>)
 8003998:	f00b fb72 	bl	800f080 <HAL_TIM_PWM_ConfigChannel>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80039a2:	f000 fa53 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80039a6:	4803      	ldr	r0, [pc, #12]	@ (80039b4 <MX_TIM4_Init+0xac>)
 80039a8:	f000 fec0 	bl	800472c <HAL_TIM_MspPostInit>

}
 80039ac:	bf00      	nop
 80039ae:	3728      	adds	r7, #40	@ 0x28
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	24000fb0 	.word	0x24000fb0
 80039b8:	40000800 	.word	0x40000800

080039bc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b088      	sub	sp, #32
 80039c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039c2:	f107 0314 	add.w	r3, r7, #20
 80039c6:	2200      	movs	r2, #0
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	605a      	str	r2, [r3, #4]
 80039cc:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80039ce:	1d3b      	adds	r3, r7, #4
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	605a      	str	r2, [r3, #4]
 80039d6:	609a      	str	r2, [r3, #8]
 80039d8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80039da:	4b22      	ldr	r3, [pc, #136]	@ (8003a64 <MX_TIM15_Init+0xa8>)
 80039dc:	4a22      	ldr	r2, [pc, #136]	@ (8003a68 <MX_TIM15_Init+0xac>)
 80039de:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80039e0:	4b20      	ldr	r3, [pc, #128]	@ (8003a64 <MX_TIM15_Init+0xa8>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039e6:	4b1f      	ldr	r3, [pc, #124]	@ (8003a64 <MX_TIM15_Init+0xa8>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80039ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003a64 <MX_TIM15_Init+0xa8>)
 80039ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80039f2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003a64 <MX_TIM15_Init+0xa8>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80039fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003a64 <MX_TIM15_Init+0xa8>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a00:	4b18      	ldr	r3, [pc, #96]	@ (8003a64 <MX_TIM15_Init+0xa8>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8003a06:	4817      	ldr	r0, [pc, #92]	@ (8003a64 <MX_TIM15_Init+0xa8>)
 8003a08:	f00b fa46 	bl	800ee98 <HAL_TIM_IC_Init>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8003a12:	f000 fa1b 	bl	8003e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a16:	2300      	movs	r3, #0
 8003a18:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003a1e:	f107 0314 	add.w	r3, r7, #20
 8003a22:	4619      	mov	r1, r3
 8003a24:	480f      	ldr	r0, [pc, #60]	@ (8003a64 <MX_TIM15_Init+0xa8>)
 8003a26:	f00c fbdb 	bl	80101e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8003a30:	f000 fa0c 	bl	8003e4c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003a34:	2300      	movs	r3, #0
 8003a36:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003a40:	2300      	movs	r3, #0
 8003a42:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003a44:	1d3b      	adds	r3, r7, #4
 8003a46:	2200      	movs	r2, #0
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4806      	ldr	r0, [pc, #24]	@ (8003a64 <MX_TIM15_Init+0xa8>)
 8003a4c:	f00b fa7b 	bl	800ef46 <HAL_TIM_IC_ConfigChannel>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <MX_TIM15_Init+0x9e>
  {
    Error_Handler();
 8003a56:	f000 f9f9 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8003a5a:	bf00      	nop
 8003a5c:	3720      	adds	r7, #32
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	24000ffc 	.word	0x24000ffc
 8003a68:	40014000 	.word	0x40014000

08003a6c <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b088      	sub	sp, #32
 8003a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a72:	f107 0310 	add.w	r3, r7, #16
 8003a76:	2200      	movs	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	605a      	str	r2, [r3, #4]
 8003a7c:	609a      	str	r2, [r3, #8]
 8003a7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a80:	1d3b      	adds	r3, r7, #4
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	605a      	str	r2, [r3, #4]
 8003a88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 8003a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8003b04 <MX_TIM24_Init+0x98>)
 8003a8c:	4a1e      	ldr	r2, [pc, #120]	@ (8003b08 <MX_TIM24_Init+0x9c>)
 8003a8e:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 275 - 1;
 8003a90:	4b1c      	ldr	r3, [pc, #112]	@ (8003b04 <MX_TIM24_Init+0x98>)
 8003a92:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8003a96:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a98:	4b1a      	ldr	r3, [pc, #104]	@ (8003b04 <MX_TIM24_Init+0x98>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 8003a9e:	4b19      	ldr	r3, [pc, #100]	@ (8003b04 <MX_TIM24_Init+0x98>)
 8003aa0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003aa4:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003aa6:	4b17      	ldr	r3, [pc, #92]	@ (8003b04 <MX_TIM24_Init+0x98>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003aac:	4b15      	ldr	r3, [pc, #84]	@ (8003b04 <MX_TIM24_Init+0x98>)
 8003aae:	2280      	movs	r2, #128	@ 0x80
 8003ab0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 8003ab2:	4814      	ldr	r0, [pc, #80]	@ (8003b04 <MX_TIM24_Init+0x98>)
 8003ab4:	f00a ff10 	bl	800e8d8 <HAL_TIM_Base_Init>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <MX_TIM24_Init+0x56>
  {
    Error_Handler();
 8003abe:	f000 f9c5 	bl	8003e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ac2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ac6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 8003ac8:	f107 0310 	add.w	r3, r7, #16
 8003acc:	4619      	mov	r1, r3
 8003ace:	480d      	ldr	r0, [pc, #52]	@ (8003b04 <MX_TIM24_Init+0x98>)
 8003ad0:	f00b fbea 	bl	800f2a8 <HAL_TIM_ConfigClockSource>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <MX_TIM24_Init+0x72>
  {
    Error_Handler();
 8003ada:	f000 f9b7 	bl	8003e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8003ae6:	1d3b      	adds	r3, r7, #4
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4806      	ldr	r0, [pc, #24]	@ (8003b04 <MX_TIM24_Init+0x98>)
 8003aec:	f00c fb78 	bl	80101e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <MX_TIM24_Init+0x8e>
  {
    Error_Handler();
 8003af6:	f000 f9a9 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8003afa:	bf00      	nop
 8003afc:	3720      	adds	r7, #32
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	24001048 	.word	0x24001048
 8003b08:	4000e400 	.word	0x4000e400

08003b0c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8003b10:	bf00      	nop
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
	...

08003b1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b22:	4b11      	ldr	r3, [pc, #68]	@ (8003b68 <MX_DMA_Init+0x4c>)
 8003b24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003b28:	4a0f      	ldr	r2, [pc, #60]	@ (8003b68 <MX_DMA_Init+0x4c>)
 8003b2a:	f043 0301 	orr.w	r3, r3, #1
 8003b2e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003b32:	4b0d      	ldr	r3, [pc, #52]	@ (8003b68 <MX_DMA_Init+0x4c>)
 8003b34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	607b      	str	r3, [r7, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003b40:	2200      	movs	r2, #0
 8003b42:	2100      	movs	r1, #0
 8003b44:	200c      	movs	r0, #12
 8003b46:	f004 fa42 	bl	8007fce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003b4a:	200c      	movs	r0, #12
 8003b4c:	f004 fa59 	bl	8008002 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8003b50:	2200      	movs	r2, #0
 8003b52:	2100      	movs	r1, #0
 8003b54:	200d      	movs	r0, #13
 8003b56:	f004 fa3a 	bl	8007fce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8003b5a:	200d      	movs	r0, #13
 8003b5c:	f004 fa51 	bl	8008002 <HAL_NVIC_EnableIRQ>

}
 8003b60:	bf00      	nop
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	58024400 	.word	0x58024400

08003b6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08e      	sub	sp, #56	@ 0x38
 8003b70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	605a      	str	r2, [r3, #4]
 8003b7c:	609a      	str	r2, [r3, #8]
 8003b7e:	60da      	str	r2, [r3, #12]
 8003b80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b82:	4bab      	ldr	r3, [pc, #684]	@ (8003e30 <MX_GPIO_Init+0x2c4>)
 8003b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b88:	4aa9      	ldr	r2, [pc, #676]	@ (8003e30 <MX_GPIO_Init+0x2c4>)
 8003b8a:	f043 0310 	orr.w	r3, r3, #16
 8003b8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003b92:	4ba7      	ldr	r3, [pc, #668]	@ (8003e30 <MX_GPIO_Init+0x2c4>)
 8003b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b98:	f003 0310 	and.w	r3, r3, #16
 8003b9c:	623b      	str	r3, [r7, #32]
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ba0:	4ba3      	ldr	r3, [pc, #652]	@ (8003e30 <MX_GPIO_Init+0x2c4>)
 8003ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ba6:	4aa2      	ldr	r2, [pc, #648]	@ (8003e30 <MX_GPIO_Init+0x2c4>)
 8003ba8:	f043 0304 	orr.w	r3, r3, #4
 8003bac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003bb0:	4b9f      	ldr	r3, [pc, #636]	@ (8003e30 <MX_GPIO_Init+0x2c4>)
 8003bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bb6:	f003 0304 	and.w	r3, r3, #4
 8003bba:	61fb      	str	r3, [r7, #28]
 8003bbc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003bbe:	4b9c      	ldr	r3, [pc, #624]	@ (8003e30 <MX_GPIO_Init+0x2c4>)
 8003bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bc4:	4a9a      	ldr	r2, [pc, #616]	@ (8003e30 <MX_GPIO_Init+0x2c4>)
 8003bc6:	f043 0320 	orr.w	r3, r3, #32
 8003bca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003bce:	4b98      	ldr	r3, [pc, #608]	@ (8003e30 <MX_GPIO_Init+0x2c4>)
 8003bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bd4:	f003 0320 	and.w	r3, r3, #32
 8003bd8:	61bb      	str	r3, [r7, #24]
 8003bda:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003bdc:	4b94      	ldr	r3, [pc, #592]	@ (8003e30 <MX_GPIO_Init+0x2c4>)
 8003bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003be2:	4a93      	ldr	r2, [pc, #588]	@ (8003e30 <MX_GPIO_Init+0x2c4>)
 8003be4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003be8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003bec:	4b90      	ldr	r3, [pc, #576]	@ (8003e30 <MX_GPIO_Init+0x2c4>)
 8003bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bfa:	4b8d      	ldr	r3, [pc, #564]	@ (8003e30 <MX_GPIO_Init+0x2c4>)
 8003bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c00:	4a8b      	ldr	r2, [pc, #556]	@ (8003e30 <MX_GPIO_Init+0x2c4>)
 8003c02:	f043 0301 	orr.w	r3, r3, #1
 8003c06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c0a:	4b89      	ldr	r3, [pc, #548]	@ (8003e30 <MX_GPIO_Init+0x2c4>)
 8003c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	613b      	str	r3, [r7, #16]
 8003c16:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c18:	4b85      	ldr	r3, [pc, #532]	@ (8003e30 <MX_GPIO_Init+0x2c4>)
 8003c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c1e:	4a84      	ldr	r2, [pc, #528]	@ (8003e30 <MX_GPIO_Init+0x2c4>)
 8003c20:	f043 0302 	orr.w	r3, r3, #2
 8003c24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c28:	4b81      	ldr	r3, [pc, #516]	@ (8003e30 <MX_GPIO_Init+0x2c4>)
 8003c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c36:	4b7e      	ldr	r3, [pc, #504]	@ (8003e30 <MX_GPIO_Init+0x2c4>)
 8003c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c3c:	4a7c      	ldr	r2, [pc, #496]	@ (8003e30 <MX_GPIO_Init+0x2c4>)
 8003c3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c46:	4b7a      	ldr	r3, [pc, #488]	@ (8003e30 <MX_GPIO_Init+0x2c4>)
 8003c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c50:	60bb      	str	r3, [r7, #8]
 8003c52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c54:	4b76      	ldr	r3, [pc, #472]	@ (8003e30 <MX_GPIO_Init+0x2c4>)
 8003c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c5a:	4a75      	ldr	r2, [pc, #468]	@ (8003e30 <MX_GPIO_Init+0x2c4>)
 8003c5c:	f043 0308 	orr.w	r3, r3, #8
 8003c60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c64:	4b72      	ldr	r3, [pc, #456]	@ (8003e30 <MX_GPIO_Init+0x2c4>)
 8003c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	607b      	str	r3, [r7, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LINE_DRIVER1_ENABLE_Pin|LINE_DRIVER2_ENABLE_Pin, GPIO_PIN_SET);
 8003c72:	2201      	movs	r2, #1
 8003c74:	f640 0105 	movw	r1, #2053	@ 0x805
 8003c78:	486e      	ldr	r0, [pc, #440]	@ (8003e34 <MX_GPIO_Init+0x2c8>)
 8003c7a:	f007 fa73 	bl	800b164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
 8003c7e:	2200      	movs	r2, #0
 8003c80:	2102      	movs	r1, #2
 8003c82:	486d      	ldr	r0, [pc, #436]	@ (8003e38 <MX_GPIO_Init+0x2cc>)
 8003c84:	f007 fa6e 	bl	800b164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003c8e:	4869      	ldr	r0, [pc, #420]	@ (8003e34 <MX_GPIO_Init+0x2c8>)
 8003c90:	f007 fa68 	bl	800b164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_3V3_SWITCH_GPIO_Port, OUT_3V3_SWITCH_Pin, GPIO_PIN_SET);
 8003c94:	2201      	movs	r2, #1
 8003c96:	2101      	movs	r1, #1
 8003c98:	4868      	ldr	r0, [pc, #416]	@ (8003e3c <MX_GPIO_Init+0x2d0>)
 8003c9a:	f007 fa63 	bl	800b164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ACTIVE_GPIO_Port, LED_ACTIVE_Pin, GPIO_PIN_SET);
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	4867      	ldr	r0, [pc, #412]	@ (8003e40 <MX_GPIO_Init+0x2d4>)
 8003ca4:	f007 fa5e 	bl	800b164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8003ca8:	2200      	movs	r2, #0
 8003caa:	2102      	movs	r1, #2
 8003cac:	4864      	ldr	r0, [pc, #400]	@ (8003e40 <MX_GPIO_Init+0x2d4>)
 8003cae:	f007 fa59 	bl	800b164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003cb2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003cc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	485f      	ldr	r0, [pc, #380]	@ (8003e44 <MX_GPIO_Init+0x2d8>)
 8003cc8:	f007 f88c 	bl	800ade4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LINE_DRIVER1_ENABLE_Pin LINE_DRIVER2_ENABLE_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LINE_DRIVER1_ENABLE_Pin|LINE_DRIVER2_ENABLE_Pin|LED_RED_Pin;
 8003ccc:	f644 0305 	movw	r3, #18437	@ 0x4805
 8003cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	4853      	ldr	r0, [pc, #332]	@ (8003e34 <MX_GPIO_Init+0x2c8>)
 8003ce6:	f007 f87d 	bl	800ade4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_500V_ENABLE_Pin */
  GPIO_InitStruct.Pin = OUT_500V_ENABLE_Pin;
 8003cea:	2301      	movs	r3, #1
 8003cec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OUT_500V_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003cf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	484e      	ldr	r0, [pc, #312]	@ (8003e38 <MX_GPIO_Init+0x2cc>)
 8003cfe:	f007 f871 	bl	800ade4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_OUTPUT_Pin */
  GPIO_InitStruct.Pin = TEST_OUTPUT_Pin;
 8003d02:	2302      	movs	r3, #2
 8003d04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d06:	2301      	movs	r3, #1
 8003d08:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TEST_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 8003d12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d16:	4619      	mov	r1, r3
 8003d18:	4847      	ldr	r0, [pc, #284]	@ (8003e38 <MX_GPIO_Init+0x2cc>)
 8003d1a:	f007 f863 	bl	800ade4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TURN_PLASMA_ON_Pin */
  GPIO_InitStruct.Pin = TURN_PLASMA_ON_Pin;
 8003d1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d24:	2300      	movs	r3, #0
 8003d26:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TURN_PLASMA_ON_GPIO_Port, &GPIO_InitStruct);
 8003d2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d30:	4619      	mov	r1, r3
 8003d32:	4843      	ldr	r0, [pc, #268]	@ (8003e40 <MX_GPIO_Init+0x2d4>)
 8003d34:	f007 f856 	bl	800ade4 <HAL_GPIO_Init>

  /*Configure GPIO pin : INP_COMP_IRQ_Pin */
  GPIO_InitStruct.Pin = INP_COMP_IRQ_Pin;
 8003d38:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003d3e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003d42:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d44:	2300      	movs	r3, #0
 8003d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(INP_COMP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003d48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	483c      	ldr	r0, [pc, #240]	@ (8003e40 <MX_GPIO_Init+0x2d4>)
 8003d50:	f007 f848 	bl	800ade4 <HAL_GPIO_Init>

  /*Configure GPIO pin : POWER_OFF_IRQ_Pin */
  GPIO_InitStruct.Pin = POWER_OFF_IRQ_Pin;
 8003d54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003d5a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d60:	2300      	movs	r3, #0
 8003d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(POWER_OFF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003d64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d68:	4619      	mov	r1, r3
 8003d6a:	4835      	ldr	r0, [pc, #212]	@ (8003e40 <MX_GPIO_Init+0x2d4>)
 8003d6c:	f007 f83a 	bl	800ade4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8003d70:	2380      	movs	r3, #128	@ 0x80
 8003d72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003d74:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003d78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8003d7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d82:	4619      	mov	r1, r3
 8003d84:	482c      	ldr	r0, [pc, #176]	@ (8003e38 <MX_GPIO_Init+0x2cc>)
 8003d86:	f007 f82d 	bl	800ade4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8003d8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d90:	2300      	movs	r3, #0
 8003d92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d94:	2300      	movs	r3, #0
 8003d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003d98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	482a      	ldr	r0, [pc, #168]	@ (8003e48 <MX_GPIO_Init+0x2dc>)
 8003da0:	f007 f820 	bl	800ade4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8003da4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003da8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003daa:	2302      	movs	r3, #2
 8003dac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dae:	2300      	movs	r3, #0
 8003db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003db2:	2300      	movs	r3, #0
 8003db4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8003db6:	230a      	movs	r3, #10
 8003db8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8003dba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	4821      	ldr	r0, [pc, #132]	@ (8003e48 <MX_GPIO_Init+0x2dc>)
 8003dc2:	f007 f80f 	bl	800ade4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_3V3_SWITCH_Pin */
  GPIO_InitStruct.Pin = OUT_3V3_SWITCH_Pin;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(OUT_3V3_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8003dd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003dda:	4619      	mov	r1, r3
 8003ddc:	4817      	ldr	r0, [pc, #92]	@ (8003e3c <MX_GPIO_Init+0x2d0>)
 8003dde:	f007 f801 	bl	800ade4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_15V_ENABLE_Pin */
  GPIO_InitStruct.Pin = OUT_15V_ENABLE_Pin;
 8003de2:	2302      	movs	r3, #2
 8003de4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003de6:	2300      	movs	r3, #0
 8003de8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dea:	2300      	movs	r3, #0
 8003dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OUT_15V_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003dee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003df2:	4619      	mov	r1, r3
 8003df4:	4811      	ldr	r0, [pc, #68]	@ (8003e3c <MX_GPIO_Init+0x2d0>)
 8003df6:	f006 fff5 	bl	800ade4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ACTIVE_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_ACTIVE_Pin|LED_YELLOW_Pin;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e02:	2300      	movs	r3, #0
 8003e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e06:	2300      	movs	r3, #0
 8003e08:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e0e:	4619      	mov	r1, r3
 8003e10:	480b      	ldr	r0, [pc, #44]	@ (8003e40 <MX_GPIO_Init+0x2d4>)
 8003e12:	f006 ffe7 	bl	800ade4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003e16:	2200      	movs	r2, #0
 8003e18:	2100      	movs	r1, #0
 8003e1a:	2028      	movs	r0, #40	@ 0x28
 8003e1c:	f004 f8d7 	bl	8007fce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003e20:	2028      	movs	r0, #40	@ 0x28
 8003e22:	f004 f8ee 	bl	8008002 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003e26:	bf00      	nop
 8003e28:	3738      	adds	r7, #56	@ 0x38
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	58024400 	.word	0x58024400
 8003e34:	58020400 	.word	0x58020400
 8003e38:	58021800 	.word	0x58021800
 8003e3c:	58020c00 	.word	0x58020c00
 8003e40:	58021000 	.word	0x58021000
 8003e44:	58020800 	.word	0x58020800
 8003e48:	58020000 	.word	0x58020000

08003e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e50:	b672      	cpsid	i
}
 8003e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e54:	bf00      	nop
 8003e56:	e7fd      	b.n	8003e54 <Error_Handler+0x8>

08003e58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e88 <HAL_MspInit+0x30>)
 8003e60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003e64:	4a08      	ldr	r2, [pc, #32]	@ (8003e88 <HAL_MspInit+0x30>)
 8003e66:	f043 0302 	orr.w	r3, r3, #2
 8003e6a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003e6e:	4b06      	ldr	r3, [pc, #24]	@ (8003e88 <HAL_MspInit+0x30>)
 8003e70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	607b      	str	r3, [r7, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	58024400 	.word	0x58024400

08003e8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b090      	sub	sp, #64	@ 0x40
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	605a      	str	r2, [r3, #4]
 8003e9e:	609a      	str	r2, [r3, #8]
 8003ea0:	60da      	str	r2, [r3, #12]
 8003ea2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4aaa      	ldr	r2, [pc, #680]	@ (8004154 <HAL_ADC_MspInit+0x2c8>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d16b      	bne.n	8003f86 <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003eae:	4baa      	ldr	r3, [pc, #680]	@ (8004158 <HAL_ADC_MspInit+0x2cc>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	4aa8      	ldr	r2, [pc, #672]	@ (8004158 <HAL_ADC_MspInit+0x2cc>)
 8003eb6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003eb8:	4ba7      	ldr	r3, [pc, #668]	@ (8004158 <HAL_ADC_MspInit+0x2cc>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d10e      	bne.n	8003ede <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003ec0:	4ba6      	ldr	r3, [pc, #664]	@ (800415c <HAL_ADC_MspInit+0x2d0>)
 8003ec2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003ec6:	4aa5      	ldr	r2, [pc, #660]	@ (800415c <HAL_ADC_MspInit+0x2d0>)
 8003ec8:	f043 0320 	orr.w	r3, r3, #32
 8003ecc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003ed0:	4ba2      	ldr	r3, [pc, #648]	@ (800415c <HAL_ADC_MspInit+0x2d0>)
 8003ed2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003ed6:	f003 0320 	and.w	r3, r3, #32
 8003eda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ede:	4b9f      	ldr	r3, [pc, #636]	@ (800415c <HAL_ADC_MspInit+0x2d0>)
 8003ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ee4:	4a9d      	ldr	r2, [pc, #628]	@ (800415c <HAL_ADC_MspInit+0x2d0>)
 8003ee6:	f043 0301 	orr.w	r3, r3, #1
 8003eea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003eee:	4b9b      	ldr	r3, [pc, #620]	@ (800415c <HAL_ADC_MspInit+0x2d0>)
 8003ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    PA3     ------> ADC1_INP15
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8003efc:	2319      	movs	r3, #25
 8003efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f00:	2303      	movs	r3, #3
 8003f02:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f04:	2300      	movs	r3, #0
 8003f06:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	4894      	ldr	r0, [pc, #592]	@ (8004160 <HAL_ADC_MspInit+0x2d4>)
 8003f10:	f006 ff68 	bl	800ade4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream2;
 8003f14:	4b93      	ldr	r3, [pc, #588]	@ (8004164 <HAL_ADC_MspInit+0x2d8>)
 8003f16:	4a94      	ldr	r2, [pc, #592]	@ (8004168 <HAL_ADC_MspInit+0x2dc>)
 8003f18:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003f1a:	4b92      	ldr	r3, [pc, #584]	@ (8004164 <HAL_ADC_MspInit+0x2d8>)
 8003f1c:	2209      	movs	r2, #9
 8003f1e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f20:	4b90      	ldr	r3, [pc, #576]	@ (8004164 <HAL_ADC_MspInit+0x2d8>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f26:	4b8f      	ldr	r3, [pc, #572]	@ (8004164 <HAL_ADC_MspInit+0x2d8>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003f2c:	4b8d      	ldr	r3, [pc, #564]	@ (8004164 <HAL_ADC_MspInit+0x2d8>)
 8003f2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f32:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003f34:	4b8b      	ldr	r3, [pc, #556]	@ (8004164 <HAL_ADC_MspInit+0x2d8>)
 8003f36:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003f3a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003f3c:	4b89      	ldr	r3, [pc, #548]	@ (8004164 <HAL_ADC_MspInit+0x2d8>)
 8003f3e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003f42:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003f44:	4b87      	ldr	r3, [pc, #540]	@ (8004164 <HAL_ADC_MspInit+0x2d8>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8003f4a:	4b86      	ldr	r3, [pc, #536]	@ (8004164 <HAL_ADC_MspInit+0x2d8>)
 8003f4c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003f50:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f52:	4b84      	ldr	r3, [pc, #528]	@ (8004164 <HAL_ADC_MspInit+0x2d8>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003f58:	4882      	ldr	r0, [pc, #520]	@ (8004164 <HAL_ADC_MspInit+0x2d8>)
 8003f5a:	f004 f86d 	bl	8008038 <HAL_DMA_Init>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <HAL_ADC_MspInit+0xdc>
    {
      Error_Handler();
 8003f64:	f7ff ff72 	bl	8003e4c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a7e      	ldr	r2, [pc, #504]	@ (8004164 <HAL_ADC_MspInit+0x2d8>)
 8003f6c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003f6e:	4a7d      	ldr	r2, [pc, #500]	@ (8004164 <HAL_ADC_MspInit+0x2d8>)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003f74:	2200      	movs	r2, #0
 8003f76:	2100      	movs	r1, #0
 8003f78:	2012      	movs	r0, #18
 8003f7a:	f004 f828 	bl	8007fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003f7e:	2012      	movs	r0, #18
 8003f80:	f004 f83f 	bl	8008002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003f84:	e0e2      	b.n	800414c <HAL_ADC_MspInit+0x2c0>
  else if(hadc->Instance==ADC2)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a78      	ldr	r2, [pc, #480]	@ (800416c <HAL_ADC_MspInit+0x2e0>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d156      	bne.n	800403e <HAL_ADC_MspInit+0x1b2>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003f90:	4b71      	ldr	r3, [pc, #452]	@ (8004158 <HAL_ADC_MspInit+0x2cc>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	3301      	adds	r3, #1
 8003f96:	4a70      	ldr	r2, [pc, #448]	@ (8004158 <HAL_ADC_MspInit+0x2cc>)
 8003f98:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003f9a:	4b6f      	ldr	r3, [pc, #444]	@ (8004158 <HAL_ADC_MspInit+0x2cc>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d10e      	bne.n	8003fc0 <HAL_ADC_MspInit+0x134>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003fa2:	4b6e      	ldr	r3, [pc, #440]	@ (800415c <HAL_ADC_MspInit+0x2d0>)
 8003fa4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003fa8:	4a6c      	ldr	r2, [pc, #432]	@ (800415c <HAL_ADC_MspInit+0x2d0>)
 8003faa:	f043 0320 	orr.w	r3, r3, #32
 8003fae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003fb2:	4b6a      	ldr	r3, [pc, #424]	@ (800415c <HAL_ADC_MspInit+0x2d0>)
 8003fb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003fb8:	f003 0320 	and.w	r3, r3, #32
 8003fbc:	623b      	str	r3, [r7, #32]
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fc0:	4b66      	ldr	r3, [pc, #408]	@ (800415c <HAL_ADC_MspInit+0x2d0>)
 8003fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003fc6:	4a65      	ldr	r2, [pc, #404]	@ (800415c <HAL_ADC_MspInit+0x2d0>)
 8003fc8:	f043 0301 	orr.w	r3, r3, #1
 8003fcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003fd0:	4b62      	ldr	r3, [pc, #392]	@ (800415c <HAL_ADC_MspInit+0x2d0>)
 8003fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	61fb      	str	r3, [r7, #28]
 8003fdc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fde:	4b5f      	ldr	r3, [pc, #380]	@ (800415c <HAL_ADC_MspInit+0x2d0>)
 8003fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003fe4:	4a5d      	ldr	r2, [pc, #372]	@ (800415c <HAL_ADC_MspInit+0x2d0>)
 8003fe6:	f043 0302 	orr.w	r3, r3, #2
 8003fea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003fee:	4b5b      	ldr	r3, [pc, #364]	@ (800415c <HAL_ADC_MspInit+0x2d0>)
 8003ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	61bb      	str	r3, [r7, #24]
 8003ffa:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003ffc:	2360      	movs	r3, #96	@ 0x60
 8003ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004000:	2303      	movs	r3, #3
 8004002:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004004:	2300      	movs	r3, #0
 8004006:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004008:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800400c:	4619      	mov	r1, r3
 800400e:	4854      	ldr	r0, [pc, #336]	@ (8004160 <HAL_ADC_MspInit+0x2d4>)
 8004010:	f006 fee8 	bl	800ade4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004014:	2302      	movs	r3, #2
 8004016:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004018:	2303      	movs	r3, #3
 800401a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800401c:	2300      	movs	r3, #0
 800401e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004020:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004024:	4619      	mov	r1, r3
 8004026:	4852      	ldr	r0, [pc, #328]	@ (8004170 <HAL_ADC_MspInit+0x2e4>)
 8004028:	f006 fedc 	bl	800ade4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800402c:	2200      	movs	r2, #0
 800402e:	2100      	movs	r1, #0
 8004030:	2012      	movs	r0, #18
 8004032:	f003 ffcc 	bl	8007fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8004036:	2012      	movs	r0, #18
 8004038:	f003 ffe3 	bl	8008002 <HAL_NVIC_EnableIRQ>
}
 800403c:	e086      	b.n	800414c <HAL_ADC_MspInit+0x2c0>
  else if(hadc->Instance==ADC3)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a4c      	ldr	r2, [pc, #304]	@ (8004174 <HAL_ADC_MspInit+0x2e8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	f040 8081 	bne.w	800414c <HAL_ADC_MspInit+0x2c0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800404a:	4b44      	ldr	r3, [pc, #272]	@ (800415c <HAL_ADC_MspInit+0x2d0>)
 800404c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004050:	4a42      	ldr	r2, [pc, #264]	@ (800415c <HAL_ADC_MspInit+0x2d0>)
 8004052:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004056:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800405a:	4b40      	ldr	r3, [pc, #256]	@ (800415c <HAL_ADC_MspInit+0x2d0>)
 800405c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004060:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004064:	617b      	str	r3, [r7, #20]
 8004066:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004068:	4b3c      	ldr	r3, [pc, #240]	@ (800415c <HAL_ADC_MspInit+0x2d0>)
 800406a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800406e:	4a3b      	ldr	r2, [pc, #236]	@ (800415c <HAL_ADC_MspInit+0x2d0>)
 8004070:	f043 0320 	orr.w	r3, r3, #32
 8004074:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004078:	4b38      	ldr	r3, [pc, #224]	@ (800415c <HAL_ADC_MspInit+0x2d0>)
 800407a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800407e:	f003 0320 	and.w	r3, r3, #32
 8004082:	613b      	str	r3, [r7, #16]
 8004084:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004086:	4b35      	ldr	r3, [pc, #212]	@ (800415c <HAL_ADC_MspInit+0x2d0>)
 8004088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800408c:	4a33      	ldr	r2, [pc, #204]	@ (800415c <HAL_ADC_MspInit+0x2d0>)
 800408e:	f043 0304 	orr.w	r3, r3, #4
 8004092:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004096:	4b31      	ldr	r3, [pc, #196]	@ (800415c <HAL_ADC_MspInit+0x2d0>)
 8004098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80040a4:	f44f 63ff 	mov.w	r3, #2040	@ 0x7f8
 80040a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040aa:	2303      	movs	r3, #3
 80040ac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ae:	2300      	movs	r3, #0
 80040b0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80040b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80040b6:	4619      	mov	r1, r3
 80040b8:	482f      	ldr	r0, [pc, #188]	@ (8004178 <HAL_ADC_MspInit+0x2ec>)
 80040ba:	f006 fe93 	bl	800ade4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80040be:	2301      	movs	r3, #1
 80040c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040c2:	2303      	movs	r3, #3
 80040c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c6:	2300      	movs	r3, #0
 80040c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80040ce:	4619      	mov	r1, r3
 80040d0:	482a      	ldr	r0, [pc, #168]	@ (800417c <HAL_ADC_MspInit+0x2f0>)
 80040d2:	f006 fe87 	bl	800ade4 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80040d6:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 80040da:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80040de:	f000 fe43 	bl	8004d68 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80040e2:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 80040e6:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 80040ea:	f000 fe3d 	bl	8004d68 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 80040ee:	4b24      	ldr	r3, [pc, #144]	@ (8004180 <HAL_ADC_MspInit+0x2f4>)
 80040f0:	4a24      	ldr	r2, [pc, #144]	@ (8004184 <HAL_ADC_MspInit+0x2f8>)
 80040f2:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80040f4:	4b22      	ldr	r3, [pc, #136]	@ (8004180 <HAL_ADC_MspInit+0x2f4>)
 80040f6:	2273      	movs	r2, #115	@ 0x73
 80040f8:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040fa:	4b21      	ldr	r3, [pc, #132]	@ (8004180 <HAL_ADC_MspInit+0x2f4>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8004100:	4b1f      	ldr	r3, [pc, #124]	@ (8004180 <HAL_ADC_MspInit+0x2f4>)
 8004102:	2200      	movs	r2, #0
 8004104:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8004106:	4b1e      	ldr	r3, [pc, #120]	@ (8004180 <HAL_ADC_MspInit+0x2f4>)
 8004108:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800410c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800410e:	4b1c      	ldr	r3, [pc, #112]	@ (8004180 <HAL_ADC_MspInit+0x2f4>)
 8004110:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004114:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004116:	4b1a      	ldr	r3, [pc, #104]	@ (8004180 <HAL_ADC_MspInit+0x2f4>)
 8004118:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800411c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 800411e:	4b18      	ldr	r3, [pc, #96]	@ (8004180 <HAL_ADC_MspInit+0x2f4>)
 8004120:	2200      	movs	r2, #0
 8004122:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8004124:	4b16      	ldr	r3, [pc, #88]	@ (8004180 <HAL_ADC_MspInit+0x2f4>)
 8004126:	2200      	movs	r2, #0
 8004128:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800412a:	4b15      	ldr	r3, [pc, #84]	@ (8004180 <HAL_ADC_MspInit+0x2f4>)
 800412c:	2200      	movs	r2, #0
 800412e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8004130:	4813      	ldr	r0, [pc, #76]	@ (8004180 <HAL_ADC_MspInit+0x2f4>)
 8004132:	f003 ff81 	bl	8008038 <HAL_DMA_Init>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <HAL_ADC_MspInit+0x2b4>
      Error_Handler();
 800413c:	f7ff fe86 	bl	8003e4c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a0f      	ldr	r2, [pc, #60]	@ (8004180 <HAL_ADC_MspInit+0x2f4>)
 8004144:	659a      	str	r2, [r3, #88]	@ 0x58
 8004146:	4a0e      	ldr	r2, [pc, #56]	@ (8004180 <HAL_ADC_MspInit+0x2f4>)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800414c:	bf00      	nop
 800414e:	3740      	adds	r7, #64	@ 0x40
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	40022000 	.word	0x40022000
 8004158:	2400109c 	.word	0x2400109c
 800415c:	58024400 	.word	0x58024400
 8004160:	58020000 	.word	0x58020000
 8004164:	24000bd8 	.word	0x24000bd8
 8004168:	40020040 	.word	0x40020040
 800416c:	40022100 	.word	0x40022100
 8004170:	58020400 	.word	0x58020400
 8004174:	58026000 	.word	0x58026000
 8004178:	58021400 	.word	0x58021400
 800417c:	58020800 	.word	0x58020800
 8004180:	24000c50 	.word	0x24000c50
 8004184:	40020028 	.word	0x40020028

08004188 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b08a      	sub	sp, #40	@ 0x28
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004190:	f107 0314 	add.w	r3, r7, #20
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	605a      	str	r2, [r3, #4]
 800419a:	609a      	str	r2, [r3, #8]
 800419c:	60da      	str	r2, [r3, #12]
 800419e:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a21      	ldr	r2, [pc, #132]	@ (800422c <HAL_COMP_MspInit+0xa4>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d13b      	bne.n	8004222 <HAL_COMP_MspInit+0x9a>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 80041aa:	4b21      	ldr	r3, [pc, #132]	@ (8004230 <HAL_COMP_MspInit+0xa8>)
 80041ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80041b0:	4a1f      	ldr	r2, [pc, #124]	@ (8004230 <HAL_COMP_MspInit+0xa8>)
 80041b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041b6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80041ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004230 <HAL_COMP_MspInit+0xa8>)
 80041bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80041c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041c4:	613b      	str	r3, [r7, #16]
 80041c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80041c8:	4b19      	ldr	r3, [pc, #100]	@ (8004230 <HAL_COMP_MspInit+0xa8>)
 80041ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041ce:	4a18      	ldr	r2, [pc, #96]	@ (8004230 <HAL_COMP_MspInit+0xa8>)
 80041d0:	f043 0310 	orr.w	r3, r3, #16
 80041d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80041d8:	4b15      	ldr	r3, [pc, #84]	@ (8004230 <HAL_COMP_MspInit+0xa8>)
 80041da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041de:	f003 0310 	and.w	r3, r3, #16
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PE7     ------> COMP2_INM
    PE11     ------> COMP2_INP
    PE13     ------> COMP2_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_11;
 80041e6:	f44f 6308 	mov.w	r3, #2176	@ 0x880
 80041ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041ec:	2303      	movs	r3, #3
 80041ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f0:	2300      	movs	r3, #0
 80041f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80041f4:	f107 0314 	add.w	r3, r7, #20
 80041f8:	4619      	mov	r1, r3
 80041fa:	480e      	ldr	r0, [pc, #56]	@ (8004234 <HAL_COMP_MspInit+0xac>)
 80041fc:	f006 fdf2 	bl	800ade4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004200:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004206:	2302      	movs	r3, #2
 8004208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800420a:	2300      	movs	r3, #0
 800420c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800420e:	2300      	movs	r3, #0
 8004210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_COMP2;
 8004212:	230d      	movs	r3, #13
 8004214:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004216:	f107 0314 	add.w	r3, r7, #20
 800421a:	4619      	mov	r1, r3
 800421c:	4805      	ldr	r0, [pc, #20]	@ (8004234 <HAL_COMP_MspInit+0xac>)
 800421e:	f006 fde1 	bl	800ade4 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8004222:	bf00      	nop
 8004224:	3728      	adds	r7, #40	@ 0x28
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	58003810 	.word	0x58003810
 8004230:	58024400 	.word	0x58024400
 8004234:	58021000 	.word	0x58021000

08004238 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b08e      	sub	sp, #56	@ 0x38
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004240:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	605a      	str	r2, [r3, #4]
 800424a:	609a      	str	r2, [r3, #8]
 800424c:	60da      	str	r2, [r3, #12]
 800424e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a59      	ldr	r2, [pc, #356]	@ (80043bc <HAL_ETH_MspInit+0x184>)
 8004256:	4293      	cmp	r3, r2
 8004258:	f040 80ab 	bne.w	80043b2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800425c:	4b58      	ldr	r3, [pc, #352]	@ (80043c0 <HAL_ETH_MspInit+0x188>)
 800425e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004262:	4a57      	ldr	r2, [pc, #348]	@ (80043c0 <HAL_ETH_MspInit+0x188>)
 8004264:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004268:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800426c:	4b54      	ldr	r3, [pc, #336]	@ (80043c0 <HAL_ETH_MspInit+0x188>)
 800426e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004272:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004276:	623b      	str	r3, [r7, #32]
 8004278:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800427a:	4b51      	ldr	r3, [pc, #324]	@ (80043c0 <HAL_ETH_MspInit+0x188>)
 800427c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004280:	4a4f      	ldr	r2, [pc, #316]	@ (80043c0 <HAL_ETH_MspInit+0x188>)
 8004282:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004286:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800428a:	4b4d      	ldr	r3, [pc, #308]	@ (80043c0 <HAL_ETH_MspInit+0x188>)
 800428c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004290:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004294:	61fb      	str	r3, [r7, #28]
 8004296:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8004298:	4b49      	ldr	r3, [pc, #292]	@ (80043c0 <HAL_ETH_MspInit+0x188>)
 800429a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800429e:	4a48      	ldr	r2, [pc, #288]	@ (80043c0 <HAL_ETH_MspInit+0x188>)
 80042a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042a4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80042a8:	4b45      	ldr	r3, [pc, #276]	@ (80043c0 <HAL_ETH_MspInit+0x188>)
 80042aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80042ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042b2:	61bb      	str	r3, [r7, #24]
 80042b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042b6:	4b42      	ldr	r3, [pc, #264]	@ (80043c0 <HAL_ETH_MspInit+0x188>)
 80042b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042bc:	4a40      	ldr	r2, [pc, #256]	@ (80043c0 <HAL_ETH_MspInit+0x188>)
 80042be:	f043 0304 	orr.w	r3, r3, #4
 80042c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80042c6:	4b3e      	ldr	r3, [pc, #248]	@ (80043c0 <HAL_ETH_MspInit+0x188>)
 80042c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	617b      	str	r3, [r7, #20]
 80042d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042d4:	4b3a      	ldr	r3, [pc, #232]	@ (80043c0 <HAL_ETH_MspInit+0x188>)
 80042d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042da:	4a39      	ldr	r2, [pc, #228]	@ (80043c0 <HAL_ETH_MspInit+0x188>)
 80042dc:	f043 0301 	orr.w	r3, r3, #1
 80042e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80042e4:	4b36      	ldr	r3, [pc, #216]	@ (80043c0 <HAL_ETH_MspInit+0x188>)
 80042e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	613b      	str	r3, [r7, #16]
 80042f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042f2:	4b33      	ldr	r3, [pc, #204]	@ (80043c0 <HAL_ETH_MspInit+0x188>)
 80042f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042f8:	4a31      	ldr	r2, [pc, #196]	@ (80043c0 <HAL_ETH_MspInit+0x188>)
 80042fa:	f043 0302 	orr.w	r3, r3, #2
 80042fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004302:	4b2f      	ldr	r3, [pc, #188]	@ (80043c0 <HAL_ETH_MspInit+0x188>)
 8004304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004310:	4b2b      	ldr	r3, [pc, #172]	@ (80043c0 <HAL_ETH_MspInit+0x188>)
 8004312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004316:	4a2a      	ldr	r2, [pc, #168]	@ (80043c0 <HAL_ETH_MspInit+0x188>)
 8004318:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800431c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004320:	4b27      	ldr	r3, [pc, #156]	@ (80043c0 <HAL_ETH_MspInit+0x188>)
 8004322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800432a:	60bb      	str	r3, [r7, #8]
 800432c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800432e:	2332      	movs	r3, #50	@ 0x32
 8004330:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004332:	2302      	movs	r3, #2
 8004334:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004336:	2300      	movs	r3, #0
 8004338:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800433a:	2300      	movs	r3, #0
 800433c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800433e:	230b      	movs	r3, #11
 8004340:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004342:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004346:	4619      	mov	r1, r3
 8004348:	481e      	ldr	r0, [pc, #120]	@ (80043c4 <HAL_ETH_MspInit+0x18c>)
 800434a:	f006 fd4b 	bl	800ade4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800434e:	2386      	movs	r3, #134	@ 0x86
 8004350:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004352:	2302      	movs	r3, #2
 8004354:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004356:	2300      	movs	r3, #0
 8004358:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800435a:	2300      	movs	r3, #0
 800435c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800435e:	230b      	movs	r3, #11
 8004360:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004362:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004366:	4619      	mov	r1, r3
 8004368:	4817      	ldr	r0, [pc, #92]	@ (80043c8 <HAL_ETH_MspInit+0x190>)
 800436a:	f006 fd3b 	bl	800ade4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800436e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004372:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004374:	2302      	movs	r3, #2
 8004376:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004378:	2300      	movs	r3, #0
 800437a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800437c:	2300      	movs	r3, #0
 800437e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004380:	230b      	movs	r3, #11
 8004382:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004384:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004388:	4619      	mov	r1, r3
 800438a:	4810      	ldr	r0, [pc, #64]	@ (80043cc <HAL_ETH_MspInit+0x194>)
 800438c:	f006 fd2a 	bl	800ade4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004390:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8004394:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004396:	2302      	movs	r3, #2
 8004398:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800439a:	2300      	movs	r3, #0
 800439c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800439e:	2300      	movs	r3, #0
 80043a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80043a2:	230b      	movs	r3, #11
 80043a4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80043a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043aa:	4619      	mov	r1, r3
 80043ac:	4808      	ldr	r0, [pc, #32]	@ (80043d0 <HAL_ETH_MspInit+0x198>)
 80043ae:	f006 fd19 	bl	800ade4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80043b2:	bf00      	nop
 80043b4:	3738      	adds	r7, #56	@ 0x38
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	40028000 	.word	0x40028000
 80043c0:	58024400 	.word	0x58024400
 80043c4:	58020800 	.word	0x58020800
 80043c8:	58020000 	.word	0x58020000
 80043cc:	58020400 	.word	0x58020400
 80043d0:	58021800 	.word	0x58021800

080043d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b0ba      	sub	sp, #232	@ 0xe8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043dc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	605a      	str	r2, [r3, #4]
 80043e6:	609a      	str	r2, [r3, #8]
 80043e8:	60da      	str	r2, [r3, #12]
 80043ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80043ec:	f107 0318 	add.w	r3, r7, #24
 80043f0:	22b8      	movs	r2, #184	@ 0xb8
 80043f2:	2100      	movs	r1, #0
 80043f4:	4618      	mov	r0, r3
 80043f6:	f00e f9c4 	bl	8012782 <memset>
  if(huart->Instance==LPUART1)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a4d      	ldr	r2, [pc, #308]	@ (8004534 <HAL_UART_MspInit+0x160>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d146      	bne.n	8004492 <HAL_UART_MspInit+0xbe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004404:	f04f 0204 	mov.w	r2, #4
 8004408:	f04f 0300 	mov.w	r3, #0
 800440c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8004410:	2300      	movs	r3, #0
 8004412:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004416:	f107 0318 	add.w	r3, r7, #24
 800441a:	4618      	mov	r0, r3
 800441c:	f007 fe76 	bl	800c10c <HAL_RCCEx_PeriphCLKConfig>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8004426:	f7ff fd11 	bl	8003e4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800442a:	4b43      	ldr	r3, [pc, #268]	@ (8004538 <HAL_UART_MspInit+0x164>)
 800442c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004430:	4a41      	ldr	r2, [pc, #260]	@ (8004538 <HAL_UART_MspInit+0x164>)
 8004432:	f043 0308 	orr.w	r3, r3, #8
 8004436:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800443a:	4b3f      	ldr	r3, [pc, #252]	@ (8004538 <HAL_UART_MspInit+0x164>)
 800443c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004440:	f003 0308 	and.w	r3, r3, #8
 8004444:	617b      	str	r3, [r7, #20]
 8004446:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004448:	4b3b      	ldr	r3, [pc, #236]	@ (8004538 <HAL_UART_MspInit+0x164>)
 800444a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800444e:	4a3a      	ldr	r2, [pc, #232]	@ (8004538 <HAL_UART_MspInit+0x164>)
 8004450:	f043 0302 	orr.w	r3, r3, #2
 8004454:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004458:	4b37      	ldr	r3, [pc, #220]	@ (8004538 <HAL_UART_MspInit+0x164>)
 800445a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	613b      	str	r3, [r7, #16]
 8004464:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004466:	23c0      	movs	r3, #192	@ 0xc0
 8004468:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800446c:	2302      	movs	r3, #2
 800446e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004472:	2300      	movs	r3, #0
 8004474:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004478:	2300      	movs	r3, #0
 800447a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART;
 800447e:	2308      	movs	r3, #8
 8004480:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004484:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004488:	4619      	mov	r1, r3
 800448a:	482c      	ldr	r0, [pc, #176]	@ (800453c <HAL_UART_MspInit+0x168>)
 800448c:	f006 fcaa 	bl	800ade4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004490:	e04b      	b.n	800452a <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART3)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a2a      	ldr	r2, [pc, #168]	@ (8004540 <HAL_UART_MspInit+0x16c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d146      	bne.n	800452a <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800449c:	f04f 0202 	mov.w	r2, #2
 80044a0:	f04f 0300 	mov.w	r3, #0
 80044a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80044a8:	2300      	movs	r3, #0
 80044aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80044ae:	f107 0318 	add.w	r3, r7, #24
 80044b2:	4618      	mov	r0, r3
 80044b4:	f007 fe2a 	bl	800c10c <HAL_RCCEx_PeriphCLKConfig>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <HAL_UART_MspInit+0xee>
      Error_Handler();
 80044be:	f7ff fcc5 	bl	8003e4c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80044c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004538 <HAL_UART_MspInit+0x164>)
 80044c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80044c8:	4a1b      	ldr	r2, [pc, #108]	@ (8004538 <HAL_UART_MspInit+0x164>)
 80044ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044ce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80044d2:	4b19      	ldr	r3, [pc, #100]	@ (8004538 <HAL_UART_MspInit+0x164>)
 80044d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80044d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044dc:	60fb      	str	r3, [r7, #12]
 80044de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80044e0:	4b15      	ldr	r3, [pc, #84]	@ (8004538 <HAL_UART_MspInit+0x164>)
 80044e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80044e6:	4a14      	ldr	r2, [pc, #80]	@ (8004538 <HAL_UART_MspInit+0x164>)
 80044e8:	f043 0308 	orr.w	r3, r3, #8
 80044ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80044f0:	4b11      	ldr	r3, [pc, #68]	@ (8004538 <HAL_UART_MspInit+0x164>)
 80044f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	60bb      	str	r3, [r7, #8]
 80044fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80044fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004502:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004506:	2302      	movs	r3, #2
 8004508:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800450c:	2300      	movs	r3, #0
 800450e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004512:	2300      	movs	r3, #0
 8004514:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004518:	2307      	movs	r3, #7
 800451a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800451e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004522:	4619      	mov	r1, r3
 8004524:	4807      	ldr	r0, [pc, #28]	@ (8004544 <HAL_UART_MspInit+0x170>)
 8004526:	f006 fc5d 	bl	800ade4 <HAL_GPIO_Init>
}
 800452a:	bf00      	nop
 800452c:	37e8      	adds	r7, #232	@ 0xe8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	58000c00 	.word	0x58000c00
 8004538:	58024400 	.word	0x58024400
 800453c:	58020400 	.word	0x58020400
 8004540:	40004800 	.word	0x40004800
 8004544:	58020c00 	.word	0x58020c00

08004548 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004548:	b480      	push	{r7}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a20      	ldr	r2, [pc, #128]	@ (80045d8 <HAL_TIM_PWM_MspInit+0x90>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d10f      	bne.n	800457a <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800455a:	4b20      	ldr	r3, [pc, #128]	@ (80045dc <HAL_TIM_PWM_MspInit+0x94>)
 800455c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004560:	4a1e      	ldr	r2, [pc, #120]	@ (80045dc <HAL_TIM_PWM_MspInit+0x94>)
 8004562:	f043 0301 	orr.w	r3, r3, #1
 8004566:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800456a:	4b1c      	ldr	r3, [pc, #112]	@ (80045dc <HAL_TIM_PWM_MspInit+0x94>)
 800456c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	617b      	str	r3, [r7, #20]
 8004576:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004578:	e028      	b.n	80045cc <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM2)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004582:	d10f      	bne.n	80045a4 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004584:	4b15      	ldr	r3, [pc, #84]	@ (80045dc <HAL_TIM_PWM_MspInit+0x94>)
 8004586:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800458a:	4a14      	ldr	r2, [pc, #80]	@ (80045dc <HAL_TIM_PWM_MspInit+0x94>)
 800458c:	f043 0301 	orr.w	r3, r3, #1
 8004590:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004594:	4b11      	ldr	r3, [pc, #68]	@ (80045dc <HAL_TIM_PWM_MspInit+0x94>)
 8004596:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	613b      	str	r3, [r7, #16]
 80045a0:	693b      	ldr	r3, [r7, #16]
}
 80045a2:	e013      	b.n	80045cc <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM4)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a0d      	ldr	r2, [pc, #52]	@ (80045e0 <HAL_TIM_PWM_MspInit+0x98>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d10e      	bne.n	80045cc <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80045ae:	4b0b      	ldr	r3, [pc, #44]	@ (80045dc <HAL_TIM_PWM_MspInit+0x94>)
 80045b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80045b4:	4a09      	ldr	r2, [pc, #36]	@ (80045dc <HAL_TIM_PWM_MspInit+0x94>)
 80045b6:	f043 0304 	orr.w	r3, r3, #4
 80045ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80045be:	4b07      	ldr	r3, [pc, #28]	@ (80045dc <HAL_TIM_PWM_MspInit+0x94>)
 80045c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80045c4:	f003 0304 	and.w	r3, r3, #4
 80045c8:	60fb      	str	r3, [r7, #12]
 80045ca:	68fb      	ldr	r3, [r7, #12]
}
 80045cc:	bf00      	nop
 80045ce:	371c      	adds	r7, #28
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	40010000 	.word	0x40010000
 80045dc:	58024400 	.word	0x58024400
 80045e0:	40000800 	.word	0x40000800

080045e4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b08c      	sub	sp, #48	@ 0x30
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045ec:	f107 031c 	add.w	r3, r7, #28
 80045f0:	2200      	movs	r2, #0
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	605a      	str	r2, [r3, #4]
 80045f6:	609a      	str	r2, [r3, #8]
 80045f8:	60da      	str	r2, [r3, #12]
 80045fa:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a34      	ldr	r2, [pc, #208]	@ (80046d4 <HAL_TIM_IC_MspInit+0xf0>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d12e      	bne.n	8004664 <HAL_TIM_IC_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004606:	4b34      	ldr	r3, [pc, #208]	@ (80046d8 <HAL_TIM_IC_MspInit+0xf4>)
 8004608:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800460c:	4a32      	ldr	r2, [pc, #200]	@ (80046d8 <HAL_TIM_IC_MspInit+0xf4>)
 800460e:	f043 0302 	orr.w	r3, r3, #2
 8004612:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004616:	4b30      	ldr	r3, [pc, #192]	@ (80046d8 <HAL_TIM_IC_MspInit+0xf4>)
 8004618:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	61bb      	str	r3, [r7, #24]
 8004622:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004624:	4b2c      	ldr	r3, [pc, #176]	@ (80046d8 <HAL_TIM_IC_MspInit+0xf4>)
 8004626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800462a:	4a2b      	ldr	r2, [pc, #172]	@ (80046d8 <HAL_TIM_IC_MspInit+0xf4>)
 800462c:	f043 0304 	orr.w	r3, r3, #4
 8004630:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004634:	4b28      	ldr	r3, [pc, #160]	@ (80046d8 <HAL_TIM_IC_MspInit+0xf4>)
 8004636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800463a:	f003 0304 	and.w	r3, r3, #4
 800463e:	617b      	str	r3, [r7, #20]
 8004640:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004642:	2340      	movs	r3, #64	@ 0x40
 8004644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004646:	2302      	movs	r3, #2
 8004648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800464a:	2301      	movs	r3, #1
 800464c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800464e:	2300      	movs	r3, #0
 8004650:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004652:	2302      	movs	r3, #2
 8004654:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004656:	f107 031c 	add.w	r3, r7, #28
 800465a:	4619      	mov	r1, r3
 800465c:	481f      	ldr	r0, [pc, #124]	@ (80046dc <HAL_TIM_IC_MspInit+0xf8>)
 800465e:	f006 fbc1 	bl	800ade4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8004662:	e032      	b.n	80046ca <HAL_TIM_IC_MspInit+0xe6>
  else if(htim_ic->Instance==TIM15)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a1d      	ldr	r2, [pc, #116]	@ (80046e0 <HAL_TIM_IC_MspInit+0xfc>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d12d      	bne.n	80046ca <HAL_TIM_IC_MspInit+0xe6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800466e:	4b1a      	ldr	r3, [pc, #104]	@ (80046d8 <HAL_TIM_IC_MspInit+0xf4>)
 8004670:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004674:	4a18      	ldr	r2, [pc, #96]	@ (80046d8 <HAL_TIM_IC_MspInit+0xf4>)
 8004676:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800467a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800467e:	4b16      	ldr	r3, [pc, #88]	@ (80046d8 <HAL_TIM_IC_MspInit+0xf4>)
 8004680:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004684:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004688:	613b      	str	r3, [r7, #16]
 800468a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800468c:	4b12      	ldr	r3, [pc, #72]	@ (80046d8 <HAL_TIM_IC_MspInit+0xf4>)
 800468e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004692:	4a11      	ldr	r2, [pc, #68]	@ (80046d8 <HAL_TIM_IC_MspInit+0xf4>)
 8004694:	f043 0310 	orr.w	r3, r3, #16
 8004698:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800469c:	4b0e      	ldr	r3, [pc, #56]	@ (80046d8 <HAL_TIM_IC_MspInit+0xf4>)
 800469e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046a2:	f003 0310 	and.w	r3, r3, #16
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80046aa:	2320      	movs	r3, #32
 80046ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ae:	2302      	movs	r3, #2
 80046b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80046b2:	2301      	movs	r3, #1
 80046b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046b6:	2300      	movs	r3, #0
 80046b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80046ba:	2304      	movs	r3, #4
 80046bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80046be:	f107 031c 	add.w	r3, r7, #28
 80046c2:	4619      	mov	r1, r3
 80046c4:	4807      	ldr	r0, [pc, #28]	@ (80046e4 <HAL_TIM_IC_MspInit+0x100>)
 80046c6:	f006 fb8d 	bl	800ade4 <HAL_GPIO_Init>
}
 80046ca:	bf00      	nop
 80046cc:	3730      	adds	r7, #48	@ 0x30
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	40000400 	.word	0x40000400
 80046d8:	58024400 	.word	0x58024400
 80046dc:	58020800 	.word	0x58020800
 80046e0:	40014000 	.word	0x40014000
 80046e4:	58021000 	.word	0x58021000

080046e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM24)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a0b      	ldr	r2, [pc, #44]	@ (8004724 <HAL_TIM_Base_MspInit+0x3c>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d10e      	bne.n	8004718 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM24_MspInit 0 */

  /* USER CODE END TIM24_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM24_CLK_ENABLE();
 80046fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004728 <HAL_TIM_Base_MspInit+0x40>)
 80046fc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004700:	4a09      	ldr	r2, [pc, #36]	@ (8004728 <HAL_TIM_Base_MspInit+0x40>)
 8004702:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004706:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800470a:	4b07      	ldr	r3, [pc, #28]	@ (8004728 <HAL_TIM_Base_MspInit+0x40>)
 800470c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004710:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 8004718:	bf00      	nop
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	4000e400 	.word	0x4000e400
 8004728:	58024400 	.word	0x58024400

0800472c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b08a      	sub	sp, #40	@ 0x28
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004734:	f107 0314 	add.w	r3, r7, #20
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]
 800473c:	605a      	str	r2, [r3, #4]
 800473e:	609a      	str	r2, [r3, #8]
 8004740:	60da      	str	r2, [r3, #12]
 8004742:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a39      	ldr	r2, [pc, #228]	@ (8004830 <HAL_TIM_MspPostInit+0x104>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d120      	bne.n	8004790 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800474e:	4b39      	ldr	r3, [pc, #228]	@ (8004834 <HAL_TIM_MspPostInit+0x108>)
 8004750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004754:	4a37      	ldr	r2, [pc, #220]	@ (8004834 <HAL_TIM_MspPostInit+0x108>)
 8004756:	f043 0310 	orr.w	r3, r3, #16
 800475a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800475e:	4b35      	ldr	r3, [pc, #212]	@ (8004834 <HAL_TIM_MspPostInit+0x108>)
 8004760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004764:	f003 0310 	and.w	r3, r3, #16
 8004768:	613b      	str	r3, [r7, #16]
 800476a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_CH1N_Pin|TIM1_CH1_Pin;
 800476c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004772:	2302      	movs	r3, #2
 8004774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004776:	2300      	movs	r3, #0
 8004778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800477a:	2300      	movs	r3, #0
 800477c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800477e:	2301      	movs	r3, #1
 8004780:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004782:	f107 0314 	add.w	r3, r7, #20
 8004786:	4619      	mov	r1, r3
 8004788:	482b      	ldr	r0, [pc, #172]	@ (8004838 <HAL_TIM_MspPostInit+0x10c>)
 800478a:	f006 fb2b 	bl	800ade4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800478e:	e04a      	b.n	8004826 <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM2)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004798:	d120      	bne.n	80047dc <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800479a:	4b26      	ldr	r3, [pc, #152]	@ (8004834 <HAL_TIM_MspPostInit+0x108>)
 800479c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047a0:	4a24      	ldr	r2, [pc, #144]	@ (8004834 <HAL_TIM_MspPostInit+0x108>)
 80047a2:	f043 0301 	orr.w	r3, r3, #1
 80047a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80047aa:	4b22      	ldr	r3, [pc, #136]	@ (8004834 <HAL_TIM_MspPostInit+0x108>)
 80047ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80047b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047be:	2312      	movs	r3, #18
 80047c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c2:	2300      	movs	r3, #0
 80047c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047c6:	2300      	movs	r3, #0
 80047c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80047ca:	2301      	movs	r3, #1
 80047cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047ce:	f107 0314 	add.w	r3, r7, #20
 80047d2:	4619      	mov	r1, r3
 80047d4:	4819      	ldr	r0, [pc, #100]	@ (800483c <HAL_TIM_MspPostInit+0x110>)
 80047d6:	f006 fb05 	bl	800ade4 <HAL_GPIO_Init>
}
 80047da:	e024      	b.n	8004826 <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM4)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a17      	ldr	r2, [pc, #92]	@ (8004840 <HAL_TIM_MspPostInit+0x114>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d11f      	bne.n	8004826 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80047e6:	4b13      	ldr	r3, [pc, #76]	@ (8004834 <HAL_TIM_MspPostInit+0x108>)
 80047e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047ec:	4a11      	ldr	r2, [pc, #68]	@ (8004834 <HAL_TIM_MspPostInit+0x108>)
 80047ee:	f043 0308 	orr.w	r3, r3, #8
 80047f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80047f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004834 <HAL_TIM_MspPostInit+0x108>)
 80047f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	60bb      	str	r3, [r7, #8]
 8004802:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004804:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800480a:	2312      	movs	r3, #18
 800480c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800480e:	2300      	movs	r3, #0
 8004810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004812:	2300      	movs	r3, #0
 8004814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004816:	2302      	movs	r3, #2
 8004818:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800481a:	f107 0314 	add.w	r3, r7, #20
 800481e:	4619      	mov	r1, r3
 8004820:	4808      	ldr	r0, [pc, #32]	@ (8004844 <HAL_TIM_MspPostInit+0x118>)
 8004822:	f006 fadf 	bl	800ade4 <HAL_GPIO_Init>
}
 8004826:	bf00      	nop
 8004828:	3728      	adds	r7, #40	@ 0x28
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	40010000 	.word	0x40010000
 8004834:	58024400 	.word	0x58024400
 8004838:	58021000 	.word	0x58021000
 800483c:	58020000 	.word	0x58020000
 8004840:	40000800 	.word	0x40000800
 8004844:	58020c00 	.word	0x58020c00

08004848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800484c:	bf00      	nop
 800484e:	e7fd      	b.n	800484c <NMI_Handler+0x4>

08004850 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004854:	bf00      	nop
 8004856:	e7fd      	b.n	8004854 <HardFault_Handler+0x4>

08004858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004858:	b480      	push	{r7}
 800485a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800485c:	bf00      	nop
 800485e:	e7fd      	b.n	800485c <MemManage_Handler+0x4>

08004860 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004864:	bf00      	nop
 8004866:	e7fd      	b.n	8004864 <BusFault_Handler+0x4>

08004868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800486c:	bf00      	nop
 800486e:	e7fd      	b.n	800486c <UsageFault_Handler+0x4>

08004870 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004874:	bf00      	nop
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800487e:	b480      	push	{r7}
 8004880:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004882:	bf00      	nop
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004890:	bf00      	nop
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800489e:	f000 fa0b 	bl	8004cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048a2:	bf00      	nop
 80048a4:	bd80      	pop	{r7, pc}
	...

080048a8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80048ac:	4802      	ldr	r0, [pc, #8]	@ (80048b8 <DMA1_Stream1_IRQHandler+0x10>)
 80048ae:	f004 f985 	bl	8008bbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80048b2:	bf00      	nop
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	24000c50 	.word	0x24000c50

080048bc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80048c0:	4802      	ldr	r0, [pc, #8]	@ (80048cc <DMA1_Stream2_IRQHandler+0x10>)
 80048c2:	f004 f97b 	bl	8008bbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80048c6:	bf00      	nop
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	24000bd8 	.word	0x24000bd8

080048d0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80048d4:	4803      	ldr	r0, [pc, #12]	@ (80048e4 <ADC_IRQHandler+0x14>)
 80048d6:	f001 f969 	bl	8005bac <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80048da:	4803      	ldr	r0, [pc, #12]	@ (80048e8 <ADC_IRQHandler+0x18>)
 80048dc:	f001 f966 	bl	8005bac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80048e0:	bf00      	nop
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	24000a88 	.word	0x24000a88
 80048e8:	24000af8 	.word	0x24000af8

080048ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INP_COMP_IRQ_Pin);
 80048f0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80048f4:	f006 fc4f 	bl	800b196 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(POWER_OFF_IRQ_Pin);
 80048f8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80048fc:	f006 fc4b 	bl	800b196 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004900:	bf00      	nop
 8004902:	bd80      	pop	{r7, pc}

08004904 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
  return 1;
 8004908:	2301      	movs	r3, #1
}
 800490a:	4618      	mov	r0, r3
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <_kill>:

int _kill(int pid, int sig)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800491e:	f00d ffa7 	bl	8012870 <__errno>
 8004922:	4603      	mov	r3, r0
 8004924:	2216      	movs	r2, #22
 8004926:	601a      	str	r2, [r3, #0]
  return -1;
 8004928:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800492c:	4618      	mov	r0, r3
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <_exit>:

void _exit (int status)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800493c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f7ff ffe7 	bl	8004914 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004946:	bf00      	nop
 8004948:	e7fd      	b.n	8004946 <_exit+0x12>

0800494a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b086      	sub	sp, #24
 800494e:	af00      	add	r7, sp, #0
 8004950:	60f8      	str	r0, [r7, #12]
 8004952:	60b9      	str	r1, [r7, #8]
 8004954:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004956:	2300      	movs	r3, #0
 8004958:	617b      	str	r3, [r7, #20]
 800495a:	e00a      	b.n	8004972 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800495c:	f3af 8000 	nop.w
 8004960:	4601      	mov	r1, r0
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	60ba      	str	r2, [r7, #8]
 8004968:	b2ca      	uxtb	r2, r1
 800496a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	3301      	adds	r3, #1
 8004970:	617b      	str	r3, [r7, #20]
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	429a      	cmp	r2, r3
 8004978:	dbf0      	blt.n	800495c <_read+0x12>
  }

  return len;
 800497a:	687b      	ldr	r3, [r7, #4]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004990:	2300      	movs	r3, #0
 8004992:	617b      	str	r3, [r7, #20]
 8004994:	e009      	b.n	80049aa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	60ba      	str	r2, [r7, #8]
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	4618      	mov	r0, r3
 80049a0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	3301      	adds	r3, #1
 80049a8:	617b      	str	r3, [r7, #20]
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	dbf1      	blt.n	8004996 <_write+0x12>
  }
  return len;
 80049b2:	687b      	ldr	r3, [r7, #4]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3718      	adds	r7, #24
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <_close>:

int _close(int file)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80049c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80049e4:	605a      	str	r2, [r3, #4]
  return 0;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <_isatty>:

int _isatty(int file)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80049fc:	2301      	movs	r3, #1
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b085      	sub	sp, #20
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3714      	adds	r7, #20
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a2c:	4a14      	ldr	r2, [pc, #80]	@ (8004a80 <_sbrk+0x5c>)
 8004a2e:	4b15      	ldr	r3, [pc, #84]	@ (8004a84 <_sbrk+0x60>)
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a38:	4b13      	ldr	r3, [pc, #76]	@ (8004a88 <_sbrk+0x64>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d102      	bne.n	8004a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a40:	4b11      	ldr	r3, [pc, #68]	@ (8004a88 <_sbrk+0x64>)
 8004a42:	4a12      	ldr	r2, [pc, #72]	@ (8004a8c <_sbrk+0x68>)
 8004a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a46:	4b10      	ldr	r3, [pc, #64]	@ (8004a88 <_sbrk+0x64>)
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d207      	bcs.n	8004a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a54:	f00d ff0c 	bl	8012870 <__errno>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	220c      	movs	r2, #12
 8004a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004a62:	e009      	b.n	8004a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a64:	4b08      	ldr	r3, [pc, #32]	@ (8004a88 <_sbrk+0x64>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a6a:	4b07      	ldr	r3, [pc, #28]	@ (8004a88 <_sbrk+0x64>)
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4413      	add	r3, r2
 8004a72:	4a05      	ldr	r2, [pc, #20]	@ (8004a88 <_sbrk+0x64>)
 8004a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a76:	68fb      	ldr	r3, [r7, #12]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	24050000 	.word	0x24050000
 8004a84:	00000400 	.word	0x00000400
 8004a88:	240010a0 	.word	0x240010a0
 8004a8c:	24001210 	.word	0x24001210

08004a90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004a94:	4b32      	ldr	r3, [pc, #200]	@ (8004b60 <SystemInit+0xd0>)
 8004a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a9a:	4a31      	ldr	r2, [pc, #196]	@ (8004b60 <SystemInit+0xd0>)
 8004a9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004aa0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004aa4:	4b2f      	ldr	r3, [pc, #188]	@ (8004b64 <SystemInit+0xd4>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 030f 	and.w	r3, r3, #15
 8004aac:	2b06      	cmp	r3, #6
 8004aae:	d807      	bhi.n	8004ac0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004ab0:	4b2c      	ldr	r3, [pc, #176]	@ (8004b64 <SystemInit+0xd4>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f023 030f 	bic.w	r3, r3, #15
 8004ab8:	4a2a      	ldr	r2, [pc, #168]	@ (8004b64 <SystemInit+0xd4>)
 8004aba:	f043 0307 	orr.w	r3, r3, #7
 8004abe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004ac0:	4b29      	ldr	r3, [pc, #164]	@ (8004b68 <SystemInit+0xd8>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a28      	ldr	r2, [pc, #160]	@ (8004b68 <SystemInit+0xd8>)
 8004ac6:	f043 0301 	orr.w	r3, r3, #1
 8004aca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004acc:	4b26      	ldr	r3, [pc, #152]	@ (8004b68 <SystemInit+0xd8>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004ad2:	4b25      	ldr	r3, [pc, #148]	@ (8004b68 <SystemInit+0xd8>)
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	4924      	ldr	r1, [pc, #144]	@ (8004b68 <SystemInit+0xd8>)
 8004ad8:	4b24      	ldr	r3, [pc, #144]	@ (8004b6c <SystemInit+0xdc>)
 8004ada:	4013      	ands	r3, r2
 8004adc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004ade:	4b21      	ldr	r3, [pc, #132]	@ (8004b64 <SystemInit+0xd4>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0308 	and.w	r3, r3, #8
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d007      	beq.n	8004afa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004aea:	4b1e      	ldr	r3, [pc, #120]	@ (8004b64 <SystemInit+0xd4>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f023 030f 	bic.w	r3, r3, #15
 8004af2:	4a1c      	ldr	r2, [pc, #112]	@ (8004b64 <SystemInit+0xd4>)
 8004af4:	f043 0307 	orr.w	r3, r3, #7
 8004af8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004afa:	4b1b      	ldr	r3, [pc, #108]	@ (8004b68 <SystemInit+0xd8>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004b00:	4b19      	ldr	r3, [pc, #100]	@ (8004b68 <SystemInit+0xd8>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004b06:	4b18      	ldr	r3, [pc, #96]	@ (8004b68 <SystemInit+0xd8>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004b0c:	4b16      	ldr	r3, [pc, #88]	@ (8004b68 <SystemInit+0xd8>)
 8004b0e:	4a18      	ldr	r2, [pc, #96]	@ (8004b70 <SystemInit+0xe0>)
 8004b10:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004b12:	4b15      	ldr	r3, [pc, #84]	@ (8004b68 <SystemInit+0xd8>)
 8004b14:	4a17      	ldr	r2, [pc, #92]	@ (8004b74 <SystemInit+0xe4>)
 8004b16:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004b18:	4b13      	ldr	r3, [pc, #76]	@ (8004b68 <SystemInit+0xd8>)
 8004b1a:	4a17      	ldr	r2, [pc, #92]	@ (8004b78 <SystemInit+0xe8>)
 8004b1c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004b1e:	4b12      	ldr	r3, [pc, #72]	@ (8004b68 <SystemInit+0xd8>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004b24:	4b10      	ldr	r3, [pc, #64]	@ (8004b68 <SystemInit+0xd8>)
 8004b26:	4a14      	ldr	r2, [pc, #80]	@ (8004b78 <SystemInit+0xe8>)
 8004b28:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8004b68 <SystemInit+0xd8>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004b30:	4b0d      	ldr	r3, [pc, #52]	@ (8004b68 <SystemInit+0xd8>)
 8004b32:	4a11      	ldr	r2, [pc, #68]	@ (8004b78 <SystemInit+0xe8>)
 8004b34:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004b36:	4b0c      	ldr	r3, [pc, #48]	@ (8004b68 <SystemInit+0xd8>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b68 <SystemInit+0xd8>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a09      	ldr	r2, [pc, #36]	@ (8004b68 <SystemInit+0xd8>)
 8004b42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b46:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004b48:	4b07      	ldr	r3, [pc, #28]	@ (8004b68 <SystemInit+0xd8>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b7c <SystemInit+0xec>)
 8004b50:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8004b54:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004b56:	bf00      	nop
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	e000ed00 	.word	0xe000ed00
 8004b64:	52002000 	.word	0x52002000
 8004b68:	58024400 	.word	0x58024400
 8004b6c:	eaf6ed7f 	.word	0xeaf6ed7f
 8004b70:	02020200 	.word	0x02020200
 8004b74:	01ff0000 	.word	0x01ff0000
 8004b78:	01010280 	.word	0x01010280
 8004b7c:	52004000 	.word	0x52004000

08004b80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004b80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004bb8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004b84:	f7ff ff84 	bl	8004a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004b88:	480c      	ldr	r0, [pc, #48]	@ (8004bbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004b8a:	490d      	ldr	r1, [pc, #52]	@ (8004bc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8004bc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b90:	e002      	b.n	8004b98 <LoopCopyDataInit>

08004b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b96:	3304      	adds	r3, #4

08004b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b9c:	d3f9      	bcc.n	8004b92 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8004bc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004ba0:	4c0a      	ldr	r4, [pc, #40]	@ (8004bcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8004ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ba4:	e001      	b.n	8004baa <LoopFillZerobss>

08004ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ba8:	3204      	adds	r2, #4

08004baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004bac:	d3fb      	bcc.n	8004ba6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004bae:	f00d fe65 	bl	801287c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004bb2:	f7fe f931 	bl	8002e18 <main>
  bx  lr
 8004bb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004bb8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004bbc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004bc0:	24000210 	.word	0x24000210
  ldr r2, =_sidata
 8004bc4:	080155f8 	.word	0x080155f8
  ldr r2, =_sbss
 8004bc8:	240002d0 	.word	0x240002d0
  ldr r4, =_ebss
 8004bcc:	24001210 	.word	0x24001210

08004bd0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004bd0:	e7fe      	b.n	8004bd0 <ADC3_IRQHandler>
	...

08004bd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bda:	2003      	movs	r0, #3
 8004bdc:	f003 f9ec 	bl	8007fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004be0:	f007 f8be 	bl	800bd60 <HAL_RCC_GetSysClockFreq>
 8004be4:	4602      	mov	r2, r0
 8004be6:	4b15      	ldr	r3, [pc, #84]	@ (8004c3c <HAL_Init+0x68>)
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	0a1b      	lsrs	r3, r3, #8
 8004bec:	f003 030f 	and.w	r3, r3, #15
 8004bf0:	4913      	ldr	r1, [pc, #76]	@ (8004c40 <HAL_Init+0x6c>)
 8004bf2:	5ccb      	ldrb	r3, [r1, r3]
 8004bf4:	f003 031f 	and.w	r3, r3, #31
 8004bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bfc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8004c3c <HAL_Init+0x68>)
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	f003 030f 	and.w	r3, r3, #15
 8004c06:	4a0e      	ldr	r2, [pc, #56]	@ (8004c40 <HAL_Init+0x6c>)
 8004c08:	5cd3      	ldrb	r3, [r2, r3]
 8004c0a:	f003 031f 	and.w	r3, r3, #31
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	fa22 f303 	lsr.w	r3, r2, r3
 8004c14:	4a0b      	ldr	r2, [pc, #44]	@ (8004c44 <HAL_Init+0x70>)
 8004c16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c18:	4a0b      	ldr	r2, [pc, #44]	@ (8004c48 <HAL_Init+0x74>)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004c1e:	2000      	movs	r0, #0
 8004c20:	f000 f814 	bl	8004c4c <HAL_InitTick>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e002      	b.n	8004c34 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004c2e:	f7ff f913 	bl	8003e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	58024400 	.word	0x58024400
 8004c40:	08015214 	.word	0x08015214
 8004c44:	2400003c 	.word	0x2400003c
 8004c48:	24000038 	.word	0x24000038

08004c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004c54:	4b15      	ldr	r3, [pc, #84]	@ (8004cac <HAL_InitTick+0x60>)
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e021      	b.n	8004ca4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004c60:	4b13      	ldr	r3, [pc, #76]	@ (8004cb0 <HAL_InitTick+0x64>)
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	4b11      	ldr	r3, [pc, #68]	@ (8004cac <HAL_InitTick+0x60>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	4619      	mov	r1, r3
 8004c6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c76:	4618      	mov	r0, r3
 8004c78:	f003 f9d1 	bl	800801e <HAL_SYSTICK_Config>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e00e      	b.n	8004ca4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b0f      	cmp	r3, #15
 8004c8a:	d80a      	bhi.n	8004ca2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	6879      	ldr	r1, [r7, #4]
 8004c90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004c94:	f003 f99b 	bl	8007fce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c98:	4a06      	ldr	r2, [pc, #24]	@ (8004cb4 <HAL_InitTick+0x68>)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	e000      	b.n	8004ca4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3708      	adds	r7, #8
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	24000044 	.word	0x24000044
 8004cb0:	24000038 	.word	0x24000038
 8004cb4:	24000040 	.word	0x24000040

08004cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004cbc:	4b06      	ldr	r3, [pc, #24]	@ (8004cd8 <HAL_IncTick+0x20>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	4b06      	ldr	r3, [pc, #24]	@ (8004cdc <HAL_IncTick+0x24>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	4a04      	ldr	r2, [pc, #16]	@ (8004cdc <HAL_IncTick+0x24>)
 8004cca:	6013      	str	r3, [r2, #0]
}
 8004ccc:	bf00      	nop
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	24000044 	.word	0x24000044
 8004cdc:	240010a4 	.word	0x240010a4

08004ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8004ce4:	4b03      	ldr	r3, [pc, #12]	@ (8004cf4 <HAL_GetTick+0x14>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	240010a4 	.word	0x240010a4

08004cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d00:	f7ff ffee 	bl	8004ce0 <HAL_GetTick>
 8004d04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d10:	d005      	beq.n	8004d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d12:	4b0a      	ldr	r3, [pc, #40]	@ (8004d3c <HAL_Delay+0x44>)
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	461a      	mov	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004d1e:	bf00      	nop
 8004d20:	f7ff ffde 	bl	8004ce0 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d8f7      	bhi.n	8004d20 <HAL_Delay+0x28>
  {
  }
}
 8004d30:	bf00      	nop
 8004d32:	bf00      	nop
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	24000044 	.word	0x24000044

08004d40 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8004d48:	4b06      	ldr	r3, [pc, #24]	@ (8004d64 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8004d50:	4904      	ldr	r1, [pc, #16]	@ (8004d64 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	604b      	str	r3, [r1, #4]
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr
 8004d64:	58000400 	.word	0x58000400

08004d68 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004d72:	4b07      	ldr	r3, [pc, #28]	@ (8004d90 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	43db      	mvns	r3, r3
 8004d7a:	401a      	ands	r2, r3
 8004d7c:	4904      	ldr	r1, [pc, #16]	@ (8004d90 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	604b      	str	r3, [r1, #4]
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr
 8004d90:	58000400 	.word	0x58000400

08004d94 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	431a      	orrs	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	609a      	str	r2, [r3, #8]
}
 8004dae:	bf00      	nop
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b083      	sub	sp, #12
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
 8004dc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	609a      	str	r2, [r3, #8]
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
 8004e08:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	3360      	adds	r3, #96	@ 0x60
 8004e0e:	461a      	mov	r2, r3
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	4a10      	ldr	r2, [pc, #64]	@ (8004e5c <LL_ADC_SetOffset+0x60>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d10b      	bne.n	8004e38 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004e36:	e00b      	b.n	8004e50 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	430b      	orrs	r3, r1
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	601a      	str	r2, [r3, #0]
}
 8004e50:	bf00      	nop
 8004e52:	371c      	adds	r7, #28
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	58026000 	.word	0x58026000

08004e60 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	3360      	adds	r3, #96	@ 0x60
 8004e6e:	461a      	mov	r2, r3
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	f003 031f 	and.w	r3, r3, #31
 8004ea6:	6879      	ldr	r1, [r7, #4]
 8004ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8004eac:	431a      	orrs	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	611a      	str	r2, [r3, #16]
}
 8004eb2:	bf00      	nop
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
	...

08004ec0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4a0c      	ldr	r2, [pc, #48]	@ (8004f00 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d00e      	beq.n	8004ef2 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	3360      	adds	r3, #96	@ 0x60
 8004ed8:	461a      	mov	r2, r3
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	431a      	orrs	r2, r3
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	601a      	str	r2, [r3, #0]
  }
}
 8004ef2:	bf00      	nop
 8004ef4:	371c      	adds	r7, #28
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	58026000 	.word	0x58026000

08004f04 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b087      	sub	sp, #28
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4a0c      	ldr	r2, [pc, #48]	@ (8004f44 <LL_ADC_SetOffsetSaturation+0x40>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d10e      	bne.n	8004f36 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	3360      	adds	r3, #96	@ 0x60
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	431a      	orrs	r2, r3
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8004f36:	bf00      	nop
 8004f38:	371c      	adds	r7, #28
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	58026000 	.word	0x58026000

08004f48 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4a0c      	ldr	r2, [pc, #48]	@ (8004f88 <LL_ADC_SetOffsetSign+0x40>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d10e      	bne.n	8004f7a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	3360      	adds	r3, #96	@ 0x60
 8004f60:	461a      	mov	r2, r3
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	431a      	orrs	r2, r3
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8004f7a:	bf00      	nop
 8004f7c:	371c      	adds	r7, #28
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	58026000 	.word	0x58026000

08004f8c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b087      	sub	sp, #28
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	3360      	adds	r3, #96	@ 0x60
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4413      	add	r3, r2
 8004fa4:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	4a0c      	ldr	r2, [pc, #48]	@ (8004fdc <LL_ADC_SetOffsetState+0x50>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d108      	bne.n	8004fc0 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8004fbe:	e007      	b.n	8004fd0 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	601a      	str	r2, [r3, #0]
}
 8004fd0:	bf00      	nop
 8004fd2:	371c      	adds	r7, #28
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	58026000 	.word	0x58026000

08004fe0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e000      	b.n	8004ffa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005006:	b480      	push	{r7}
 8005008:	b087      	sub	sp, #28
 800500a:	af00      	add	r7, sp, #0
 800500c:	60f8      	str	r0, [r7, #12]
 800500e:	60b9      	str	r1, [r7, #8]
 8005010:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	3330      	adds	r3, #48	@ 0x30
 8005016:	461a      	mov	r2, r3
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	0a1b      	lsrs	r3, r3, #8
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	f003 030c 	and.w	r3, r3, #12
 8005022:	4413      	add	r3, r2
 8005024:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	f003 031f 	and.w	r3, r3, #31
 8005030:	211f      	movs	r1, #31
 8005032:	fa01 f303 	lsl.w	r3, r1, r3
 8005036:	43db      	mvns	r3, r3
 8005038:	401a      	ands	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	0e9b      	lsrs	r3, r3, #26
 800503e:	f003 011f 	and.w	r1, r3, #31
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	f003 031f 	and.w	r3, r3, #31
 8005048:	fa01 f303 	lsl.w	r3, r1, r3
 800504c:	431a      	orrs	r2, r3
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005052:	bf00      	nop
 8005054:	371c      	adds	r7, #28
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800505e:	b480      	push	{r7}
 8005060:	b083      	sub	sp, #12
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
 8005066:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f023 0203 	bic.w	r2, r3, #3
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	60da      	str	r2, [r3, #12]
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f043 0201 	orr.w	r2, r3, #1
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	60da      	str	r2, [r3, #12]
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a08      	ldr	r2, [pc, #32]	@ (80050d4 <LL_ADC_REG_SetDMATransferMode+0x30>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d107      	bne.n	80050c6 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	f023 0203 	bic.w	r2, r3, #3
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	431a      	orrs	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	60da      	str	r2, [r3, #12]
  }
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	58026000 	.word	0x58026000

080050d8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050e4:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80050ec:	2301      	movs	r3, #1
 80050ee:	e000      	b.n	80050f2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80050fe:	b480      	push	{r7}
 8005100:	b087      	sub	sp, #28
 8005102:	af00      	add	r7, sp, #0
 8005104:	60f8      	str	r0, [r7, #12]
 8005106:	60b9      	str	r1, [r7, #8]
 8005108:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	3314      	adds	r3, #20
 800510e:	461a      	mov	r2, r3
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	0e5b      	lsrs	r3, r3, #25
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	f003 0304 	and.w	r3, r3, #4
 800511a:	4413      	add	r3, r2
 800511c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	0d1b      	lsrs	r3, r3, #20
 8005126:	f003 031f 	and.w	r3, r3, #31
 800512a:	2107      	movs	r1, #7
 800512c:	fa01 f303 	lsl.w	r3, r1, r3
 8005130:	43db      	mvns	r3, r3
 8005132:	401a      	ands	r2, r3
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	0d1b      	lsrs	r3, r3, #20
 8005138:	f003 031f 	and.w	r3, r3, #31
 800513c:	6879      	ldr	r1, [r7, #4]
 800513e:	fa01 f303 	lsl.w	r3, r1, r3
 8005142:	431a      	orrs	r2, r3
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005148:	bf00      	nop
 800514a:	371c      	adds	r7, #28
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4a1a      	ldr	r2, [pc, #104]	@ (80051cc <LL_ADC_SetChannelSingleDiff+0x78>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d115      	bne.n	8005194 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005174:	43db      	mvns	r3, r3
 8005176:	401a      	ands	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f003 0318 	and.w	r3, r3, #24
 800517e:	4914      	ldr	r1, [pc, #80]	@ (80051d0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8005180:	40d9      	lsrs	r1, r3
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	400b      	ands	r3, r1
 8005186:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800518a:	431a      	orrs	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8005192:	e014      	b.n	80051be <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051a0:	43db      	mvns	r3, r3
 80051a2:	401a      	ands	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f003 0318 	and.w	r3, r3, #24
 80051aa:	4909      	ldr	r1, [pc, #36]	@ (80051d0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80051ac:	40d9      	lsrs	r1, r3
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	400b      	ands	r3, r1
 80051b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051b6:	431a      	orrs	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 80051be:	bf00      	nop
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	58026000 	.word	0x58026000
 80051d0:	000fffff 	.word	0x000fffff

080051d4 <LL_ADC_SetAnalogWDMonitChannels>:
  *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
  *         (2) On STM32H7, parameter available only on ADC instance: ADC2.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b087      	sub	sp, #28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	330c      	adds	r3, #12
 80051e4:	4618      	mov	r0, r3
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	0d1b      	lsrs	r3, r3, #20
 80051ea:	f003 0103 	and.w	r1, r3, #3
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	f003 0201 	and.w	r2, r3, #1
 80051f4:	4613      	mov	r3, r2
 80051f6:	00db      	lsls	r3, r3, #3
 80051f8:	4413      	add	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	440b      	add	r3, r1
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	4403      	add	r3, r0
 8005202:	617b      	str	r3, [r7, #20]
                                                      + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68b9      	ldr	r1, [r7, #8]
 800520a:	4b08      	ldr	r3, [pc, #32]	@ (800522c <LL_ADC_SetAnalogWDMonitChannels+0x58>)
 800520c:	400b      	ands	r3, r1
 800520e:	43db      	mvns	r3, r3
 8005210:	401a      	ands	r2, r3
 8005212:	6879      	ldr	r1, [r7, #4]
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	400b      	ands	r3, r1
 8005218:	431a      	orrs	r2, r3
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 800521e:	bf00      	nop
 8005220:	371c      	adds	r7, #28
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	7dcfffff 	.word	0x7dcfffff

08005230 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdHighValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue, uint32_t AWDThresholdLowValue)
{
 8005230:	b480      	push	{r7}
 8005232:	b089      	sub	sp, #36	@ 0x24
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
 800523c:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  if (ADCx == ADC3)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	4a29      	ldr	r2, [pc, #164]	@ (80052e8 <LL_ADC_ConfigAnalogWDThresholds+0xb8>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d115      	bne.n	8005272 <LL_ADC_ConfigAnalogWDThresholds+0x42>
  {
    uint32_t __IO *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	3320      	adds	r3, #32
 800524a:	461a      	mov	r2, r3
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	0d1b      	lsrs	r3, r3, #20
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	f003 030c 	and.w	r3, r3, #12
 8005256:	4413      	add	r3, r2
 8005258:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 22f0 	and.w	r2, r3, #4026593280	@ 0xf000f000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	0419      	lsls	r1, r3, #16
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	430b      	orrs	r3, r1
 800526a:	431a      	orrs	r2, r3
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	601a      	str	r2, [r3, #0]
                                                         + (LL_ADC_AWD_THRESHOLD_HIGH));

    MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdLowValue);
    MODIFY_REG(*preg2, ADC_HTR_HT, AWDThresholdHighValue);
  }
}
 8005270:	e034      	b.n	80052dc <LL_ADC_ConfigAnalogWDThresholds+0xac>
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS) * 2UL)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	3320      	adds	r3, #32
 8005276:	4618      	mov	r0, r3
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	0d1b      	lsrs	r3, r3, #20
 800527c:	f003 0103 	and.w	r1, r3, #3
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	f003 0201 	and.w	r2, r3, #1
 8005286:	4613      	mov	r3, r2
 8005288:	011b      	lsls	r3, r3, #4
 800528a:	4413      	add	r3, r2
 800528c:	440b      	add	r3, r1
 800528e:	005b      	lsls	r3, r3, #1
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4403      	add	r3, r0
 8005294:	61fb      	str	r3, [r7, #28]
    __IO uint32_t *preg2 = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS) * 2UL)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	3320      	adds	r3, #32
 800529a:	4618      	mov	r0, r3
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	0d1b      	lsrs	r3, r3, #20
 80052a0:	f003 0103 	and.w	r1, r3, #3
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	f003 0201 	and.w	r2, r3, #1
 80052aa:	4613      	mov	r3, r2
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	4413      	add	r3, r2
 80052b0:	440b      	add	r3, r1
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	3301      	adds	r3, #1
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4403      	add	r3, r0
 80052ba:	61bb      	str	r3, [r7, #24]
    MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdLowValue);
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 427c 	and.w	r2, r3, #4227858432	@ 0xfc000000
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	431a      	orrs	r2, r3
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	601a      	str	r2, [r3, #0]
    MODIFY_REG(*preg2, ADC_HTR_HT, AWDThresholdHighValue);
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 427c 	and.w	r2, r3, #4227858432	@ 0xfc000000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	431a      	orrs	r2, r3
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	601a      	str	r2, [r3, #0]
}
 80052dc:	bf00      	nop
 80052de:	3724      	adds	r7, #36	@ 0x24
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr
 80052e8:	58026000 	.word	0x58026000

080052ec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f003 031f 	and.w	r3, r3, #31
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8005318:	4618      	mov	r0, r3
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689a      	ldr	r2, [r3, #8]
 8005330:	4b04      	ldr	r3, [pc, #16]	@ (8005344 <LL_ADC_DisableDeepPowerDown+0x20>)
 8005332:	4013      	ands	r3, r2
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	6093      	str	r3, [r2, #8]
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	5fffffc0 	.word	0x5fffffc0

08005348 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005358:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800535c:	d101      	bne.n	8005362 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800535e:	2301      	movs	r3, #1
 8005360:	e000      	b.n	8005364 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	4b05      	ldr	r3, [pc, #20]	@ (8005394 <LL_ADC_EnableInternalRegulator+0x24>)
 800537e:	4013      	ands	r3, r2
 8005380:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	6fffffc0 	.word	0x6fffffc0

08005398 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053ac:	d101      	bne.n	80053b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80053ae:	2301      	movs	r3, #1
 80053b0:	e000      	b.n	80053b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	4b05      	ldr	r3, [pc, #20]	@ (80053e4 <LL_ADC_Enable+0x24>)
 80053ce:	4013      	ands	r3, r2
 80053d0:	f043 0201 	orr.w	r2, r3, #1
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr
 80053e4:	7fffffc0 	.word	0x7fffffc0

080053e8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	4b05      	ldr	r3, [pc, #20]	@ (800540c <LL_ADC_Disable+0x24>)
 80053f6:	4013      	ands	r3, r2
 80053f8:	f043 0202 	orr.w	r2, r3, #2
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	7fffffc0 	.word	0x7fffffc0

08005410 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	2b01      	cmp	r3, #1
 8005422:	d101      	bne.n	8005428 <LL_ADC_IsEnabled+0x18>
 8005424:	2301      	movs	r3, #1
 8005426:	e000      	b.n	800542a <LL_ADC_IsEnabled+0x1a>
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005436:	b480      	push	{r7}
 8005438:	b083      	sub	sp, #12
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b02      	cmp	r3, #2
 8005448:	d101      	bne.n	800544e <LL_ADC_IsDisableOngoing+0x18>
 800544a:	2301      	movs	r3, #1
 800544c:	e000      	b.n	8005450 <LL_ADC_IsDisableOngoing+0x1a>
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689a      	ldr	r2, [r3, #8]
 8005468:	4b05      	ldr	r3, [pc, #20]	@ (8005480 <LL_ADC_REG_StartConversion+0x24>)
 800546a:	4013      	ands	r3, r2
 800546c:	f043 0204 	orr.w	r2, r3, #4
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr
 8005480:	7fffffc0 	.word	0x7fffffc0

08005484 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f003 0304 	and.w	r3, r3, #4
 8005494:	2b04      	cmp	r3, #4
 8005496:	d101      	bne.n	800549c <LL_ADC_REG_IsConversionOngoing+0x18>
 8005498:	2301      	movs	r3, #1
 800549a:	e000      	b.n	800549e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	370c      	adds	r7, #12
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b083      	sub	sp, #12
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f003 0308 	and.w	r3, r3, #8
 80054ba:	2b08      	cmp	r3, #8
 80054bc:	d101      	bne.n	80054c2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80054be:	2301      	movs	r3, #1
 80054c0:	e000      	b.n	80054c4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2280      	movs	r2, #128	@ 0x80
 80054dc:	601a      	str	r2, [r3, #0]
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b083      	sub	sp, #12
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80054f8:	601a      	str	r2, [r3, #0]
}
 80054fa:	bf00      	nop
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005514:	601a      	str	r2, [r3, #0]
}
 8005516:	bf00      	nop
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8005522:	b480      	push	{r7}
 8005524:	b083      	sub	sp, #12
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	605a      	str	r2, [r3, #4]
}
 8005536:	bf00      	nop
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8005542:	b480      	push	{r7}
 8005544:	b083      	sub	sp, #12
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	605a      	str	r2, [r3, #4]
}
 8005556:	bf00      	nop
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8005562:	b480      	push	{r7}
 8005564:	b083      	sub	sp, #12
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	605a      	str	r2, [r3, #4]
}
 8005576:	bf00      	nop
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	605a      	str	r2, [r3, #4]
}
 8005596:	bf00      	nop
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	605a      	str	r2, [r3, #4]
}
 80055b6:	bf00      	nop
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b083      	sub	sp, #12
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	605a      	str	r2, [r3, #4]
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
	...

080055e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80055e4:	b590      	push	{r4, r7, lr}
 80055e6:	b089      	sub	sp, #36	@ 0x24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055ec:	2300      	movs	r3, #0
 80055ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80055f0:	2300      	movs	r3, #0
 80055f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e1ee      	b.n	80059dc <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005608:	2b00      	cmp	r3, #0
 800560a:	d109      	bne.n	8005620 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f7fe fc3d 	bl	8003e8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4618      	mov	r0, r3
 8005626:	f7ff fe8f 	bl	8005348 <LL_ADC_IsDeepPowerDownEnabled>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d004      	beq.n	800563a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4618      	mov	r0, r3
 8005636:	f7ff fe75 	bl	8005324 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4618      	mov	r0, r3
 8005640:	f7ff feaa 	bl	8005398 <LL_ADC_IsInternalRegulatorEnabled>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d114      	bne.n	8005674 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4618      	mov	r0, r3
 8005650:	f7ff fe8e 	bl	8005370 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005654:	4b8e      	ldr	r3, [pc, #568]	@ (8005890 <HAL_ADC_Init+0x2ac>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	099b      	lsrs	r3, r3, #6
 800565a:	4a8e      	ldr	r2, [pc, #568]	@ (8005894 <HAL_ADC_Init+0x2b0>)
 800565c:	fba2 2303 	umull	r2, r3, r2, r3
 8005660:	099b      	lsrs	r3, r3, #6
 8005662:	3301      	adds	r3, #1
 8005664:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005666:	e002      	b.n	800566e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	3b01      	subs	r3, #1
 800566c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1f9      	bne.n	8005668 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4618      	mov	r0, r3
 800567a:	f7ff fe8d 	bl	8005398 <LL_ADC_IsInternalRegulatorEnabled>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10d      	bne.n	80056a0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005688:	f043 0210 	orr.w	r2, r3, #16
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005694:	f043 0201 	orr.w	r2, r3, #1
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7ff feed 	bl	8005484 <LL_ADC_REG_IsConversionOngoing>
 80056aa:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056b0:	f003 0310 	and.w	r3, r3, #16
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f040 8188 	bne.w	80059ca <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f040 8184 	bne.w	80059ca <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056c6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80056ca:	f043 0202 	orr.w	r2, r3, #2
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7ff fe9a 	bl	8005410 <LL_ADC_IsEnabled>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d136      	bne.n	8005750 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a6c      	ldr	r2, [pc, #432]	@ (8005898 <HAL_ADC_Init+0x2b4>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d004      	beq.n	80056f6 <HAL_ADC_Init+0x112>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a6a      	ldr	r2, [pc, #424]	@ (800589c <HAL_ADC_Init+0x2b8>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d10e      	bne.n	8005714 <HAL_ADC_Init+0x130>
 80056f6:	4868      	ldr	r0, [pc, #416]	@ (8005898 <HAL_ADC_Init+0x2b4>)
 80056f8:	f7ff fe8a 	bl	8005410 <LL_ADC_IsEnabled>
 80056fc:	4604      	mov	r4, r0
 80056fe:	4867      	ldr	r0, [pc, #412]	@ (800589c <HAL_ADC_Init+0x2b8>)
 8005700:	f7ff fe86 	bl	8005410 <LL_ADC_IsEnabled>
 8005704:	4603      	mov	r3, r0
 8005706:	4323      	orrs	r3, r4
 8005708:	2b00      	cmp	r3, #0
 800570a:	bf0c      	ite	eq
 800570c:	2301      	moveq	r3, #1
 800570e:	2300      	movne	r3, #0
 8005710:	b2db      	uxtb	r3, r3
 8005712:	e008      	b.n	8005726 <HAL_ADC_Init+0x142>
 8005714:	4862      	ldr	r0, [pc, #392]	@ (80058a0 <HAL_ADC_Init+0x2bc>)
 8005716:	f7ff fe7b 	bl	8005410 <LL_ADC_IsEnabled>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	bf0c      	ite	eq
 8005720:	2301      	moveq	r3, #1
 8005722:	2300      	movne	r3, #0
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d012      	beq.n	8005750 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a5a      	ldr	r2, [pc, #360]	@ (8005898 <HAL_ADC_Init+0x2b4>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d004      	beq.n	800573e <HAL_ADC_Init+0x15a>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a58      	ldr	r2, [pc, #352]	@ (800589c <HAL_ADC_Init+0x2b8>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d101      	bne.n	8005742 <HAL_ADC_Init+0x15e>
 800573e:	4a59      	ldr	r2, [pc, #356]	@ (80058a4 <HAL_ADC_Init+0x2c0>)
 8005740:	e000      	b.n	8005744 <HAL_ADC_Init+0x160>
 8005742:	4a59      	ldr	r2, [pc, #356]	@ (80058a8 <HAL_ADC_Init+0x2c4>)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	4619      	mov	r1, r3
 800574a:	4610      	mov	r0, r2
 800574c:	f7ff fb22 	bl	8004d94 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a52      	ldr	r2, [pc, #328]	@ (80058a0 <HAL_ADC_Init+0x2bc>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d129      	bne.n	80057ae <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	7e5b      	ldrb	r3, [r3, #25]
 800575e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8005764:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800576a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	2b08      	cmp	r3, #8
 8005772:	d013      	beq.n	800579c <HAL_ADC_Init+0x1b8>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	2b0c      	cmp	r3, #12
 800577a:	d00d      	beq.n	8005798 <HAL_ADC_Init+0x1b4>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	2b1c      	cmp	r3, #28
 8005782:	d007      	beq.n	8005794 <HAL_ADC_Init+0x1b0>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	2b18      	cmp	r3, #24
 800578a:	d101      	bne.n	8005790 <HAL_ADC_Init+0x1ac>
 800578c:	2318      	movs	r3, #24
 800578e:	e006      	b.n	800579e <HAL_ADC_Init+0x1ba>
 8005790:	2300      	movs	r3, #0
 8005792:	e004      	b.n	800579e <HAL_ADC_Init+0x1ba>
 8005794:	2310      	movs	r3, #16
 8005796:	e002      	b.n	800579e <HAL_ADC_Init+0x1ba>
 8005798:	2308      	movs	r3, #8
 800579a:	e000      	b.n	800579e <HAL_ADC_Init+0x1ba>
 800579c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800579e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057a6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80057a8:	4313      	orrs	r3, r2
 80057aa:	61bb      	str	r3, [r7, #24]
 80057ac:	e00e      	b.n	80057cc <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	7e5b      	ldrb	r3, [r3, #25]
 80057b2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80057b8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80057be:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057c6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80057c8:	4313      	orrs	r3, r2
 80057ca:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d106      	bne.n	80057e4 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057da:	3b01      	subs	r3, #1
 80057dc:	045b      	lsls	r3, r3, #17
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d009      	beq.n	8005800 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a26      	ldr	r2, [pc, #152]	@ (80058a0 <HAL_ADC_Init+0x2bc>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d115      	bne.n	8005836 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	4b26      	ldr	r3, [pc, #152]	@ (80058ac <HAL_ADC_Init+0x2c8>)
 8005812:	4013      	ands	r3, r2
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	6812      	ldr	r2, [r2, #0]
 8005818:	69b9      	ldr	r1, [r7, #24]
 800581a:	430b      	orrs	r3, r1
 800581c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	430a      	orrs	r2, r1
 8005832:	611a      	str	r2, [r3, #16]
 8005834:	e009      	b.n	800584a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68da      	ldr	r2, [r3, #12]
 800583c:	4b1c      	ldr	r3, [pc, #112]	@ (80058b0 <HAL_ADC_Init+0x2cc>)
 800583e:	4013      	ands	r3, r2
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	6812      	ldr	r2, [r2, #0]
 8005844:	69b9      	ldr	r1, [r7, #24]
 8005846:	430b      	orrs	r3, r1
 8005848:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4618      	mov	r0, r3
 8005850:	f7ff fe18 	bl	8005484 <LL_ADC_REG_IsConversionOngoing>
 8005854:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4618      	mov	r0, r3
 800585c:	f7ff fe25 	bl	80054aa <LL_ADC_INJ_IsConversionOngoing>
 8005860:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	2b00      	cmp	r3, #0
 8005866:	f040 808e 	bne.w	8005986 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2b00      	cmp	r3, #0
 800586e:	f040 808a 	bne.w	8005986 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a0a      	ldr	r2, [pc, #40]	@ (80058a0 <HAL_ADC_Init+0x2bc>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d11b      	bne.n	80058b4 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	7e1b      	ldrb	r3, [r3, #24]
 8005880:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005888:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800588a:	4313      	orrs	r3, r2
 800588c:	61bb      	str	r3, [r7, #24]
 800588e:	e018      	b.n	80058c2 <HAL_ADC_Init+0x2de>
 8005890:	24000038 	.word	0x24000038
 8005894:	053e2d63 	.word	0x053e2d63
 8005898:	40022000 	.word	0x40022000
 800589c:	40022100 	.word	0x40022100
 80058a0:	58026000 	.word	0x58026000
 80058a4:	40022300 	.word	0x40022300
 80058a8:	58026300 	.word	0x58026300
 80058ac:	fff04007 	.word	0xfff04007
 80058b0:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	7e1b      	ldrb	r3, [r3, #24]
 80058b8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80058be:	4313      	orrs	r3, r2
 80058c0:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	4b46      	ldr	r3, [pc, #280]	@ (80059e4 <HAL_ADC_Init+0x400>)
 80058ca:	4013      	ands	r3, r2
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	6812      	ldr	r2, [r2, #0]
 80058d0:	69b9      	ldr	r1, [r7, #24]
 80058d2:	430b      	orrs	r3, r1
 80058d4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d137      	bne.n	8005950 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e4:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a3f      	ldr	r2, [pc, #252]	@ (80059e8 <HAL_ADC_Init+0x404>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d116      	bne.n	800591e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	691a      	ldr	r2, [r3, #16]
 80058f6:	4b3d      	ldr	r3, [pc, #244]	@ (80059ec <HAL_ADC_Init+0x408>)
 80058f8:	4013      	ands	r3, r2
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005902:	4311      	orrs	r1, r2
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005908:	4311      	orrs	r1, r2
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800590e:	430a      	orrs	r2, r1
 8005910:	431a      	orrs	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f042 0201 	orr.w	r2, r2, #1
 800591a:	611a      	str	r2, [r3, #16]
 800591c:	e020      	b.n	8005960 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	4b32      	ldr	r3, [pc, #200]	@ (80059f0 <HAL_ADC_Init+0x40c>)
 8005926:	4013      	ands	r3, r2
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800592c:	3a01      	subs	r2, #1
 800592e:	0411      	lsls	r1, r2, #16
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005934:	4311      	orrs	r1, r2
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800593a:	4311      	orrs	r1, r2
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005940:	430a      	orrs	r2, r1
 8005942:	431a      	orrs	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f042 0201 	orr.w	r2, r2, #1
 800594c:	611a      	str	r2, [r3, #16]
 800594e:	e007      	b.n	8005960 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	691a      	ldr	r2, [r3, #16]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 0201 	bic.w	r2, r2, #1
 800595e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	430a      	orrs	r2, r1
 8005974:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a1b      	ldr	r2, [pc, #108]	@ (80059e8 <HAL_ADC_Init+0x404>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d002      	beq.n	8005986 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f001 fd99 	bl	80074b8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d10c      	bne.n	80059a8 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005994:	f023 010f 	bic.w	r1, r3, #15
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	69db      	ldr	r3, [r3, #28]
 800599c:	1e5a      	subs	r2, r3, #1
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80059a6:	e007      	b.n	80059b8 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 020f 	bic.w	r2, r2, #15
 80059b6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059bc:	f023 0303 	bic.w	r3, r3, #3
 80059c0:	f043 0201 	orr.w	r2, r3, #1
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	661a      	str	r2, [r3, #96]	@ 0x60
 80059c8:	e007      	b.n	80059da <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059ce:	f043 0210 	orr.w	r2, r3, #16
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80059da:	7ffb      	ldrb	r3, [r7, #31]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3724      	adds	r7, #36	@ 0x24
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd90      	pop	{r4, r7, pc}
 80059e4:	ffffbffc 	.word	0xffffbffc
 80059e8:	58026000 	.word	0x58026000
 80059ec:	fc00f81f 	.word	0xfc00f81f
 80059f0:	fc00f81e 	.word	0xfc00f81e

080059f4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a60      	ldr	r2, [pc, #384]	@ (8005b88 <HAL_ADC_Start_DMA+0x194>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d004      	beq.n	8005a14 <HAL_ADC_Start_DMA+0x20>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a5f      	ldr	r2, [pc, #380]	@ (8005b8c <HAL_ADC_Start_DMA+0x198>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d101      	bne.n	8005a18 <HAL_ADC_Start_DMA+0x24>
 8005a14:	4b5e      	ldr	r3, [pc, #376]	@ (8005b90 <HAL_ADC_Start_DMA+0x19c>)
 8005a16:	e000      	b.n	8005a1a <HAL_ADC_Start_DMA+0x26>
 8005a18:	4b5e      	ldr	r3, [pc, #376]	@ (8005b94 <HAL_ADC_Start_DMA+0x1a0>)
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7ff fc66 	bl	80052ec <LL_ADC_GetMultimode>
 8005a20:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7ff fd2c 	bl	8005484 <LL_ADC_REG_IsConversionOngoing>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f040 80a2 	bne.w	8005b78 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d101      	bne.n	8005a42 <HAL_ADC_Start_DMA+0x4e>
 8005a3e:	2302      	movs	r3, #2
 8005a40:	e09d      	b.n	8005b7e <HAL_ADC_Start_DMA+0x18a>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d006      	beq.n	8005a5e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	2b05      	cmp	r3, #5
 8005a54:	d003      	beq.n	8005a5e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	2b09      	cmp	r3, #9
 8005a5a:	f040 8086 	bne.w	8005b6a <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f001 fbac 	bl	80071bc <ADC_Enable>
 8005a64:	4603      	mov	r3, r0
 8005a66:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005a68:	7dfb      	ldrb	r3, [r7, #23]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d178      	bne.n	8005b60 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005a72:	4b49      	ldr	r3, [pc, #292]	@ (8005b98 <HAL_ADC_Start_DMA+0x1a4>)
 8005a74:	4013      	ands	r3, r2
 8005a76:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a42      	ldr	r2, [pc, #264]	@ (8005b8c <HAL_ADC_Start_DMA+0x198>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d002      	beq.n	8005a8e <HAL_ADC_Start_DMA+0x9a>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	e000      	b.n	8005a90 <HAL_ADC_Start_DMA+0x9c>
 8005a8e:	4b3e      	ldr	r3, [pc, #248]	@ (8005b88 <HAL_ADC_Start_DMA+0x194>)
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	6812      	ldr	r2, [r2, #0]
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d002      	beq.n	8005a9e <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d105      	bne.n	8005aaa <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aa2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d006      	beq.n	8005ac4 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005aba:	f023 0206 	bic.w	r2, r3, #6
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	665a      	str	r2, [r3, #100]	@ 0x64
 8005ac2:	e002      	b.n	8005aca <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ace:	4a33      	ldr	r2, [pc, #204]	@ (8005b9c <HAL_ADC_Start_DMA+0x1a8>)
 8005ad0:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ad6:	4a32      	ldr	r2, [pc, #200]	@ (8005ba0 <HAL_ADC_Start_DMA+0x1ac>)
 8005ad8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ade:	4a31      	ldr	r2, [pc, #196]	@ (8005ba4 <HAL_ADC_Start_DMA+0x1b0>)
 8005ae0:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	221c      	movs	r2, #28
 8005ae8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f042 0210 	orr.w	r2, r2, #16
 8005b00:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a28      	ldr	r2, [pc, #160]	@ (8005ba8 <HAL_ADC_Start_DMA+0x1b4>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d10f      	bne.n	8005b2c <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005b16:	005b      	lsls	r3, r3, #1
 8005b18:	4619      	mov	r1, r3
 8005b1a:	4610      	mov	r0, r2
 8005b1c:	f7ff fac2 	bl	80050a4 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7ff faad 	bl	8005084 <LL_ADC_EnableDMAReq>
 8005b2a:	e007      	b.n	8005b3c <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b34:	4619      	mov	r1, r3
 8005b36:	4610      	mov	r0, r2
 8005b38:	f7ff fa91 	bl	800505e <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	3340      	adds	r3, #64	@ 0x40
 8005b46:	4619      	mov	r1, r3
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f002 fdcc 	bl	80086e8 <HAL_DMA_Start_IT>
 8005b50:	4603      	mov	r3, r0
 8005b52:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7ff fc7f 	bl	800545c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005b5e:	e00d      	b.n	8005b7c <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8005b68:	e008      	b.n	8005b7c <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8005b76:	e001      	b.n	8005b7c <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005b78:	2302      	movs	r3, #2
 8005b7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3718      	adds	r7, #24
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	40022000 	.word	0x40022000
 8005b8c:	40022100 	.word	0x40022100
 8005b90:	40022300 	.word	0x40022300
 8005b94:	58026300 	.word	0x58026300
 8005b98:	fffff0fe 	.word	0xfffff0fe
 8005b9c:	0800738f 	.word	0x0800738f
 8005ba0:	08007467 	.word	0x08007467
 8005ba4:	08007483 	.word	0x08007483
 8005ba8:	58026000 	.word	0x58026000

08005bac <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b08a      	sub	sp, #40	@ 0x28
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a87      	ldr	r2, [pc, #540]	@ (8005dec <HAL_ADC_IRQHandler+0x240>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d004      	beq.n	8005bdc <HAL_ADC_IRQHandler+0x30>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a86      	ldr	r2, [pc, #536]	@ (8005df0 <HAL_ADC_IRQHandler+0x244>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d101      	bne.n	8005be0 <HAL_ADC_IRQHandler+0x34>
 8005bdc:	4b85      	ldr	r3, [pc, #532]	@ (8005df4 <HAL_ADC_IRQHandler+0x248>)
 8005bde:	e000      	b.n	8005be2 <HAL_ADC_IRQHandler+0x36>
 8005be0:	4b85      	ldr	r3, [pc, #532]	@ (8005df8 <HAL_ADC_IRQHandler+0x24c>)
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7ff fb82 	bl	80052ec <LL_ADC_GetMultimode>
 8005be8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d017      	beq.n	8005c24 <HAL_ADC_IRQHandler+0x78>
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	f003 0302 	and.w	r3, r3, #2
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d012      	beq.n	8005c24 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c02:	f003 0310 	and.w	r3, r3, #16
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d105      	bne.n	8005c16 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c0e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f001 fee8 	bl	80079ec <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2202      	movs	r2, #2
 8005c22:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	f003 0304 	and.w	r3, r3, #4
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d004      	beq.n	8005c38 <HAL_ADC_IRQHandler+0x8c>
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10a      	bne.n	8005c4e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f000 8083 	beq.w	8005d4a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	f003 0308 	and.w	r3, r3, #8
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d07d      	beq.n	8005d4a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c52:	f003 0310 	and.w	r3, r3, #16
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d105      	bne.n	8005c66 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c5e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7ff f9b8 	bl	8004fe0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d062      	beq.n	8005d3c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a5d      	ldr	r2, [pc, #372]	@ (8005df0 <HAL_ADC_IRQHandler+0x244>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d002      	beq.n	8005c86 <HAL_ADC_IRQHandler+0xda>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	e000      	b.n	8005c88 <HAL_ADC_IRQHandler+0xdc>
 8005c86:	4b59      	ldr	r3, [pc, #356]	@ (8005dec <HAL_ADC_IRQHandler+0x240>)
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	6812      	ldr	r2, [r2, #0]
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d008      	beq.n	8005ca2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d005      	beq.n	8005ca2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	2b05      	cmp	r3, #5
 8005c9a:	d002      	beq.n	8005ca2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	2b09      	cmp	r3, #9
 8005ca0:	d104      	bne.n	8005cac <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	623b      	str	r3, [r7, #32]
 8005caa:	e00c      	b.n	8005cc6 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a4f      	ldr	r2, [pc, #316]	@ (8005df0 <HAL_ADC_IRQHandler+0x244>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d002      	beq.n	8005cbc <HAL_ADC_IRQHandler+0x110>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	e000      	b.n	8005cbe <HAL_ADC_IRQHandler+0x112>
 8005cbc:	4b4b      	ldr	r3, [pc, #300]	@ (8005dec <HAL_ADC_IRQHandler+0x240>)
 8005cbe:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005cc6:	6a3b      	ldr	r3, [r7, #32]
 8005cc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d135      	bne.n	8005d3c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0308 	and.w	r3, r3, #8
 8005cda:	2b08      	cmp	r3, #8
 8005cdc:	d12e      	bne.n	8005d3c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7ff fbce 	bl	8005484 <LL_ADC_REG_IsConversionOngoing>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d11a      	bne.n	8005d24 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	685a      	ldr	r2, [r3, #4]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 020c 	bic.w	r2, r2, #12
 8005cfc:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d02:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d112      	bne.n	8005d3c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d1a:	f043 0201 	orr.w	r2, r3, #1
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	661a      	str	r2, [r3, #96]	@ 0x60
 8005d22:	e00b      	b.n	8005d3c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d28:	f043 0210 	orr.w	r2, r3, #16
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d34:	f043 0201 	orr.w	r2, r3, #1
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f7fc f8e5 	bl	8001f0c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	220c      	movs	r2, #12
 8005d48:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	f003 0320 	and.w	r3, r3, #32
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d004      	beq.n	8005d5e <HAL_ADC_IRQHandler+0x1b2>
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	f003 0320 	and.w	r3, r3, #32
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10b      	bne.n	8005d76 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f000 80a0 	beq.w	8005eaa <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 809a 	beq.w	8005eaa <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d7a:	f003 0310 	and.w	r3, r3, #16
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d105      	bne.n	8005d8e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d86:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7ff f9a0 	bl	80050d8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005d98:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7ff f91e 	bl	8004fe0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005da4:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a11      	ldr	r2, [pc, #68]	@ (8005df0 <HAL_ADC_IRQHandler+0x244>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d002      	beq.n	8005db6 <HAL_ADC_IRQHandler+0x20a>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	e000      	b.n	8005db8 <HAL_ADC_IRQHandler+0x20c>
 8005db6:	4b0d      	ldr	r3, [pc, #52]	@ (8005dec <HAL_ADC_IRQHandler+0x240>)
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	6812      	ldr	r2, [r2, #0]
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d008      	beq.n	8005dd2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d005      	beq.n	8005dd2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	2b06      	cmp	r3, #6
 8005dca:	d002      	beq.n	8005dd2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	2b07      	cmp	r3, #7
 8005dd0:	d104      	bne.n	8005ddc <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	623b      	str	r3, [r7, #32]
 8005dda:	e014      	b.n	8005e06 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a03      	ldr	r2, [pc, #12]	@ (8005df0 <HAL_ADC_IRQHandler+0x244>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d00a      	beq.n	8005dfc <HAL_ADC_IRQHandler+0x250>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	e008      	b.n	8005dfe <HAL_ADC_IRQHandler+0x252>
 8005dec:	40022000 	.word	0x40022000
 8005df0:	40022100 	.word	0x40022100
 8005df4:	40022300 	.word	0x40022300
 8005df8:	58026300 	.word	0x58026300
 8005dfc:	4b84      	ldr	r3, [pc, #528]	@ (8006010 <HAL_ADC_IRQHandler+0x464>)
 8005dfe:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d047      	beq.n	8005e9c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005e0c:	6a3b      	ldr	r3, [r7, #32]
 8005e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d007      	beq.n	8005e26 <HAL_ADC_IRQHandler+0x27a>
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d03f      	beq.n	8005e9c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d13a      	bne.n	8005e9c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e30:	2b40      	cmp	r3, #64	@ 0x40
 8005e32:	d133      	bne.n	8005e9c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005e34:	6a3b      	ldr	r3, [r7, #32]
 8005e36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d12e      	bne.n	8005e9c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7ff fb31 	bl	80054aa <LL_ADC_INJ_IsConversionOngoing>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d11a      	bne.n	8005e84 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	685a      	ldr	r2, [r3, #4]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005e5c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e62:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d112      	bne.n	8005e9c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e7a:	f043 0201 	orr.w	r2, r3, #1
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	661a      	str	r2, [r3, #96]	@ 0x60
 8005e82:	e00b      	b.n	8005e9c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e88:	f043 0210 	orr.w	r2, r3, #16
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e94:	f043 0201 	orr.w	r2, r3, #1
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f001 fd7d 	bl	800799c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2260      	movs	r2, #96	@ 0x60
 8005ea8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d011      	beq.n	8005ed8 <HAL_ADC_IRQHandler+0x32c>
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00c      	beq.n	8005ed8 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ec2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f8b2 	bl	8006034 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2280      	movs	r2, #128	@ 0x80
 8005ed6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d012      	beq.n	8005f08 <HAL_ADC_IRQHandler+0x35c>
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00d      	beq.n	8005f08 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ef0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f001 fd63 	bl	80079c4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f06:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d012      	beq.n	8005f38 <HAL_ADC_IRQHandler+0x38c>
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00d      	beq.n	8005f38 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f20:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f001 fd55 	bl	80079d8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f36:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	f003 0310 	and.w	r3, r3, #16
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d043      	beq.n	8005fca <HAL_ADC_IRQHandler+0x41e>
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	f003 0310 	and.w	r3, r3, #16
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d03e      	beq.n	8005fca <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d102      	bne.n	8005f5a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8005f54:	2301      	movs	r3, #1
 8005f56:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f58:	e021      	b.n	8005f9e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d015      	beq.n	8005f8c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a2a      	ldr	r2, [pc, #168]	@ (8006010 <HAL_ADC_IRQHandler+0x464>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d004      	beq.n	8005f74 <HAL_ADC_IRQHandler+0x3c8>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a29      	ldr	r2, [pc, #164]	@ (8006014 <HAL_ADC_IRQHandler+0x468>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d101      	bne.n	8005f78 <HAL_ADC_IRQHandler+0x3cc>
 8005f74:	4b28      	ldr	r3, [pc, #160]	@ (8006018 <HAL_ADC_IRQHandler+0x46c>)
 8005f76:	e000      	b.n	8005f7a <HAL_ADC_IRQHandler+0x3ce>
 8005f78:	4b28      	ldr	r3, [pc, #160]	@ (800601c <HAL_ADC_IRQHandler+0x470>)
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7ff f9c4 	bl	8005308 <LL_ADC_GetMultiDMATransfer>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00b      	beq.n	8005f9e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8005f86:	2301      	movs	r3, #1
 8005f88:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f8a:	e008      	b.n	8005f9e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	f003 0303 	and.w	r3, r3, #3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d001      	beq.n	8005f9e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d10e      	bne.n	8005fc2 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fa8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fb4:	f043 0202 	orr.w	r2, r3, #2
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7fb ff79 	bl	8001eb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2210      	movs	r2, #16
 8005fc8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d018      	beq.n	8006006 <HAL_ADC_IRQHandler+0x45a>
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d013      	beq.n	8006006 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fe2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fee:	f043 0208 	orr.w	r2, r3, #8
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005ffe:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f001 fcd5 	bl	80079b0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8006006:	bf00      	nop
 8006008:	3728      	adds	r7, #40	@ 0x28
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	40022000 	.word	0x40022000
 8006014:	40022100 	.word	0x40022100
 8006018:	40022300 	.word	0x40022300
 800601c:	58026300 	.word	0x58026300

08006020 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006048:	b590      	push	{r4, r7, lr}
 800604a:	b0b9      	sub	sp, #228	@ 0xe4
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006052:	2300      	movs	r3, #0
 8006054:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006058:	2300      	movs	r3, #0
 800605a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006062:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	4aa9      	ldr	r2, [pc, #676]	@ (8006310 <HAL_ADC_ConfigChannel+0x2c8>)
 800606a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006072:	2b01      	cmp	r3, #1
 8006074:	d102      	bne.n	800607c <HAL_ADC_ConfigChannel+0x34>
 8006076:	2302      	movs	r3, #2
 8006078:	f000 bcfa 	b.w	8006a70 <HAL_ADC_ConfigChannel+0xa28>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4618      	mov	r0, r3
 800608a:	f7ff f9fb 	bl	8005484 <LL_ADC_REG_IsConversionOngoing>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	f040 84de 	bne.w	8006a52 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a9e      	ldr	r2, [pc, #632]	@ (8006314 <HAL_ADC_ConfigChannel+0x2cc>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d033      	beq.n	8006108 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d108      	bne.n	80060be <HAL_ADC_ConfigChannel+0x76>
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	0e9b      	lsrs	r3, r3, #26
 80060b2:	f003 031f 	and.w	r3, r3, #31
 80060b6:	2201      	movs	r2, #1
 80060b8:	fa02 f303 	lsl.w	r3, r2, r3
 80060bc:	e01d      	b.n	80060fa <HAL_ADC_ConfigChannel+0xb2>
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80060ca:	fa93 f3a3 	rbit	r3, r3
 80060ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80060d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80060d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80060da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80060e2:	2320      	movs	r3, #32
 80060e4:	e004      	b.n	80060f0 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80060e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80060ea:	fab3 f383 	clz	r3, r3
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	f003 031f 	and.w	r3, r3, #31
 80060f4:	2201      	movs	r2, #1
 80060f6:	fa02 f303 	lsl.w	r3, r2, r3
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	6812      	ldr	r2, [r2, #0]
 80060fe:	69d1      	ldr	r1, [r2, #28]
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	6812      	ldr	r2, [r2, #0]
 8006104:	430b      	orrs	r3, r1
 8006106:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6818      	ldr	r0, [r3, #0]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	6859      	ldr	r1, [r3, #4]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	461a      	mov	r2, r3
 8006116:	f7fe ff76 	bl	8005006 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4618      	mov	r0, r3
 8006120:	f7ff f9b0 	bl	8005484 <LL_ADC_REG_IsConversionOngoing>
 8006124:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4618      	mov	r0, r3
 800612e:	f7ff f9bc 	bl	80054aa <LL_ADC_INJ_IsConversionOngoing>
 8006132:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006136:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800613a:	2b00      	cmp	r3, #0
 800613c:	f040 8270 	bne.w	8006620 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006140:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006144:	2b00      	cmp	r3, #0
 8006146:	f040 826b 	bne.w	8006620 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6818      	ldr	r0, [r3, #0]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	6819      	ldr	r1, [r3, #0]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	461a      	mov	r2, r3
 8006158:	f7fe ffd1 	bl	80050fe <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a6c      	ldr	r2, [pc, #432]	@ (8006314 <HAL_ADC_ConfigChannel+0x2cc>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d10d      	bne.n	8006182 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	695a      	ldr	r2, [r3, #20]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	08db      	lsrs	r3, r3, #3
 8006172:	f003 0303 	and.w	r3, r3, #3
 8006176:	005b      	lsls	r3, r3, #1
 8006178:	fa02 f303 	lsl.w	r3, r2, r3
 800617c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006180:	e032      	b.n	80061e8 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006182:	4b65      	ldr	r3, [pc, #404]	@ (8006318 <HAL_ADC_ConfigChannel+0x2d0>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800618a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800618e:	d10b      	bne.n	80061a8 <HAL_ADC_ConfigChannel+0x160>
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	695a      	ldr	r2, [r3, #20]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	089b      	lsrs	r3, r3, #2
 800619c:	f003 0307 	and.w	r3, r3, #7
 80061a0:	005b      	lsls	r3, r3, #1
 80061a2:	fa02 f303 	lsl.w	r3, r2, r3
 80061a6:	e01d      	b.n	80061e4 <HAL_ADC_ConfigChannel+0x19c>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	f003 0310 	and.w	r3, r3, #16
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10b      	bne.n	80061ce <HAL_ADC_ConfigChannel+0x186>
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	695a      	ldr	r2, [r3, #20]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	089b      	lsrs	r3, r3, #2
 80061c2:	f003 0307 	and.w	r3, r3, #7
 80061c6:	005b      	lsls	r3, r3, #1
 80061c8:	fa02 f303 	lsl.w	r3, r2, r3
 80061cc:	e00a      	b.n	80061e4 <HAL_ADC_ConfigChannel+0x19c>
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	695a      	ldr	r2, [r3, #20]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	089b      	lsrs	r3, r3, #2
 80061da:	f003 0304 	and.w	r3, r3, #4
 80061de:	005b      	lsls	r3, r3, #1
 80061e0:	fa02 f303 	lsl.w	r3, r2, r3
 80061e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	2b04      	cmp	r3, #4
 80061ee:	d048      	beq.n	8006282 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6818      	ldr	r0, [r3, #0]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	6919      	ldr	r1, [r3, #16]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006200:	f7fe fdfc 	bl	8004dfc <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a42      	ldr	r2, [pc, #264]	@ (8006314 <HAL_ADC_ConfigChannel+0x2cc>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d119      	bne.n	8006242 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6818      	ldr	r0, [r3, #0]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	6919      	ldr	r1, [r3, #16]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	69db      	ldr	r3, [r3, #28]
 800621a:	461a      	mov	r2, r3
 800621c:	f7fe fe94 	bl	8004f48 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6818      	ldr	r0, [r3, #0]
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	6919      	ldr	r1, [r3, #16]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d102      	bne.n	8006238 <HAL_ADC_ConfigChannel+0x1f0>
 8006232:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006236:	e000      	b.n	800623a <HAL_ADC_ConfigChannel+0x1f2>
 8006238:	2300      	movs	r3, #0
 800623a:	461a      	mov	r2, r3
 800623c:	f7fe fe62 	bl	8004f04 <LL_ADC_SetOffsetSaturation>
 8006240:	e1ee      	b.n	8006620 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6818      	ldr	r0, [r3, #0]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	6919      	ldr	r1, [r3, #16]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006250:	2b01      	cmp	r3, #1
 8006252:	d102      	bne.n	800625a <HAL_ADC_ConfigChannel+0x212>
 8006254:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006258:	e000      	b.n	800625c <HAL_ADC_ConfigChannel+0x214>
 800625a:	2300      	movs	r3, #0
 800625c:	461a      	mov	r2, r3
 800625e:	f7fe fe2f 	bl	8004ec0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6818      	ldr	r0, [r3, #0]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	6919      	ldr	r1, [r3, #16]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	7e1b      	ldrb	r3, [r3, #24]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d102      	bne.n	8006278 <HAL_ADC_ConfigChannel+0x230>
 8006272:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006276:	e000      	b.n	800627a <HAL_ADC_ConfigChannel+0x232>
 8006278:	2300      	movs	r3, #0
 800627a:	461a      	mov	r2, r3
 800627c:	f7fe fe06 	bl	8004e8c <LL_ADC_SetDataRightShift>
 8006280:	e1ce      	b.n	8006620 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a23      	ldr	r2, [pc, #140]	@ (8006314 <HAL_ADC_ConfigChannel+0x2cc>)
 8006288:	4293      	cmp	r3, r2
 800628a:	f040 8181 	bne.w	8006590 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2100      	movs	r1, #0
 8006294:	4618      	mov	r0, r3
 8006296:	f7fe fde3 	bl	8004e60 <LL_ADC_GetOffsetChannel>
 800629a:	4603      	mov	r3, r0
 800629c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10a      	bne.n	80062ba <HAL_ADC_ConfigChannel+0x272>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2100      	movs	r1, #0
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fe fdd8 	bl	8004e60 <LL_ADC_GetOffsetChannel>
 80062b0:	4603      	mov	r3, r0
 80062b2:	0e9b      	lsrs	r3, r3, #26
 80062b4:	f003 021f 	and.w	r2, r3, #31
 80062b8:	e01e      	b.n	80062f8 <HAL_ADC_ConfigChannel+0x2b0>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2100      	movs	r1, #0
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7fe fdcd 	bl	8004e60 <LL_ADC_GetOffsetChannel>
 80062c6:	4603      	mov	r3, r0
 80062c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80062d0:	fa93 f3a3 	rbit	r3, r3
 80062d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80062d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80062dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80062e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d101      	bne.n	80062ec <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80062e8:	2320      	movs	r3, #32
 80062ea:	e004      	b.n	80062f6 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80062ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80062f0:	fab3 f383 	clz	r3, r3
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	461a      	mov	r2, r3
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10b      	bne.n	800631c <HAL_ADC_ConfigChannel+0x2d4>
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	0e9b      	lsrs	r3, r3, #26
 800630a:	f003 031f 	and.w	r3, r3, #31
 800630e:	e01e      	b.n	800634e <HAL_ADC_ConfigChannel+0x306>
 8006310:	47ff0000 	.word	0x47ff0000
 8006314:	58026000 	.word	0x58026000
 8006318:	5c001000 	.word	0x5c001000
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006324:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006328:	fa93 f3a3 	rbit	r3, r3
 800632c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8006330:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006334:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8006338:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d101      	bne.n	8006344 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8006340:	2320      	movs	r3, #32
 8006342:	e004      	b.n	800634e <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8006344:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006348:	fab3 f383 	clz	r3, r3
 800634c:	b2db      	uxtb	r3, r3
 800634e:	429a      	cmp	r2, r3
 8006350:	d106      	bne.n	8006360 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2200      	movs	r2, #0
 8006358:	2100      	movs	r1, #0
 800635a:	4618      	mov	r0, r3
 800635c:	f7fe fe16 	bl	8004f8c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2101      	movs	r1, #1
 8006366:	4618      	mov	r0, r3
 8006368:	f7fe fd7a 	bl	8004e60 <LL_ADC_GetOffsetChannel>
 800636c:	4603      	mov	r3, r0
 800636e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10a      	bne.n	800638c <HAL_ADC_ConfigChannel+0x344>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2101      	movs	r1, #1
 800637c:	4618      	mov	r0, r3
 800637e:	f7fe fd6f 	bl	8004e60 <LL_ADC_GetOffsetChannel>
 8006382:	4603      	mov	r3, r0
 8006384:	0e9b      	lsrs	r3, r3, #26
 8006386:	f003 021f 	and.w	r2, r3, #31
 800638a:	e01e      	b.n	80063ca <HAL_ADC_ConfigChannel+0x382>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2101      	movs	r1, #1
 8006392:	4618      	mov	r0, r3
 8006394:	f7fe fd64 	bl	8004e60 <LL_ADC_GetOffsetChannel>
 8006398:	4603      	mov	r3, r0
 800639a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800639e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80063a2:	fa93 f3a3 	rbit	r3, r3
 80063a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80063aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80063b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d101      	bne.n	80063be <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80063ba:	2320      	movs	r3, #32
 80063bc:	e004      	b.n	80063c8 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80063be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80063c2:	fab3 f383 	clz	r3, r3
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	461a      	mov	r2, r3
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d105      	bne.n	80063e2 <HAL_ADC_ConfigChannel+0x39a>
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	0e9b      	lsrs	r3, r3, #26
 80063dc:	f003 031f 	and.w	r3, r3, #31
 80063e0:	e018      	b.n	8006414 <HAL_ADC_ConfigChannel+0x3cc>
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80063ee:	fa93 f3a3 	rbit	r3, r3
 80063f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80063f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80063fa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80063fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8006406:	2320      	movs	r3, #32
 8006408:	e004      	b.n	8006414 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 800640a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800640e:	fab3 f383 	clz	r3, r3
 8006412:	b2db      	uxtb	r3, r3
 8006414:	429a      	cmp	r2, r3
 8006416:	d106      	bne.n	8006426 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2200      	movs	r2, #0
 800641e:	2101      	movs	r1, #1
 8006420:	4618      	mov	r0, r3
 8006422:	f7fe fdb3 	bl	8004f8c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2102      	movs	r1, #2
 800642c:	4618      	mov	r0, r3
 800642e:	f7fe fd17 	bl	8004e60 <LL_ADC_GetOffsetChannel>
 8006432:	4603      	mov	r3, r0
 8006434:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006438:	2b00      	cmp	r3, #0
 800643a:	d10a      	bne.n	8006452 <HAL_ADC_ConfigChannel+0x40a>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2102      	movs	r1, #2
 8006442:	4618      	mov	r0, r3
 8006444:	f7fe fd0c 	bl	8004e60 <LL_ADC_GetOffsetChannel>
 8006448:	4603      	mov	r3, r0
 800644a:	0e9b      	lsrs	r3, r3, #26
 800644c:	f003 021f 	and.w	r2, r3, #31
 8006450:	e01e      	b.n	8006490 <HAL_ADC_ConfigChannel+0x448>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2102      	movs	r1, #2
 8006458:	4618      	mov	r0, r3
 800645a:	f7fe fd01 	bl	8004e60 <LL_ADC_GetOffsetChannel>
 800645e:	4603      	mov	r3, r0
 8006460:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006464:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006468:	fa93 f3a3 	rbit	r3, r3
 800646c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8006470:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006474:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8006478:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800647c:	2b00      	cmp	r3, #0
 800647e:	d101      	bne.n	8006484 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8006480:	2320      	movs	r3, #32
 8006482:	e004      	b.n	800648e <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8006484:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006488:	fab3 f383 	clz	r3, r3
 800648c:	b2db      	uxtb	r3, r3
 800648e:	461a      	mov	r2, r3
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006498:	2b00      	cmp	r3, #0
 800649a:	d105      	bne.n	80064a8 <HAL_ADC_ConfigChannel+0x460>
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	0e9b      	lsrs	r3, r3, #26
 80064a2:	f003 031f 	and.w	r3, r3, #31
 80064a6:	e014      	b.n	80064d2 <HAL_ADC_ConfigChannel+0x48a>
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80064b0:	fa93 f3a3 	rbit	r3, r3
 80064b4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80064b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80064bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80064c4:	2320      	movs	r3, #32
 80064c6:	e004      	b.n	80064d2 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80064c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80064cc:	fab3 f383 	clz	r3, r3
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d106      	bne.n	80064e4 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2200      	movs	r2, #0
 80064dc:	2102      	movs	r1, #2
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fe fd54 	bl	8004f8c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2103      	movs	r1, #3
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7fe fcb8 	bl	8004e60 <LL_ADC_GetOffsetChannel>
 80064f0:	4603      	mov	r3, r0
 80064f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10a      	bne.n	8006510 <HAL_ADC_ConfigChannel+0x4c8>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2103      	movs	r1, #3
 8006500:	4618      	mov	r0, r3
 8006502:	f7fe fcad 	bl	8004e60 <LL_ADC_GetOffsetChannel>
 8006506:	4603      	mov	r3, r0
 8006508:	0e9b      	lsrs	r3, r3, #26
 800650a:	f003 021f 	and.w	r2, r3, #31
 800650e:	e017      	b.n	8006540 <HAL_ADC_ConfigChannel+0x4f8>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2103      	movs	r1, #3
 8006516:	4618      	mov	r0, r3
 8006518:	f7fe fca2 	bl	8004e60 <LL_ADC_GetOffsetChannel>
 800651c:	4603      	mov	r3, r0
 800651e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006520:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006522:	fa93 f3a3 	rbit	r3, r3
 8006526:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8006528:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800652a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800652c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800652e:	2b00      	cmp	r3, #0
 8006530:	d101      	bne.n	8006536 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8006532:	2320      	movs	r3, #32
 8006534:	e003      	b.n	800653e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8006536:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006538:	fab3 f383 	clz	r3, r3
 800653c:	b2db      	uxtb	r3, r3
 800653e:	461a      	mov	r2, r3
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006548:	2b00      	cmp	r3, #0
 800654a:	d105      	bne.n	8006558 <HAL_ADC_ConfigChannel+0x510>
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	0e9b      	lsrs	r3, r3, #26
 8006552:	f003 031f 	and.w	r3, r3, #31
 8006556:	e011      	b.n	800657c <HAL_ADC_ConfigChannel+0x534>
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800655e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006560:	fa93 f3a3 	rbit	r3, r3
 8006564:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8006566:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006568:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800656a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8006570:	2320      	movs	r3, #32
 8006572:	e003      	b.n	800657c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8006574:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006576:	fab3 f383 	clz	r3, r3
 800657a:	b2db      	uxtb	r3, r3
 800657c:	429a      	cmp	r2, r3
 800657e:	d14f      	bne.n	8006620 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2200      	movs	r2, #0
 8006586:	2103      	movs	r1, #3
 8006588:	4618      	mov	r0, r3
 800658a:	f7fe fcff 	bl	8004f8c <LL_ADC_SetOffsetState>
 800658e:	e047      	b.n	8006620 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006596:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	069b      	lsls	r3, r3, #26
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d107      	bne.n	80065b4 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80065b2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	069b      	lsls	r3, r3, #26
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d107      	bne.n	80065d8 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80065d6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	069b      	lsls	r3, r3, #26
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d107      	bne.n	80065fc <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80065fa:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006602:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	069b      	lsls	r3, r3, #26
 800660c:	429a      	cmp	r2, r3
 800660e:	d107      	bne.n	8006620 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800661e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4618      	mov	r0, r3
 8006626:	f7fe fef3 	bl	8005410 <LL_ADC_IsEnabled>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	f040 8219 	bne.w	8006a64 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6818      	ldr	r0, [r3, #0]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	6819      	ldr	r1, [r3, #0]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	461a      	mov	r2, r3
 8006640:	f7fe fd88 	bl	8005154 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	4aa1      	ldr	r2, [pc, #644]	@ (80068d0 <HAL_ADC_ConfigChannel+0x888>)
 800664a:	4293      	cmp	r3, r2
 800664c:	f040 812e 	bne.w	80068ac <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10b      	bne.n	8006678 <HAL_ADC_ConfigChannel+0x630>
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	0e9b      	lsrs	r3, r3, #26
 8006666:	3301      	adds	r3, #1
 8006668:	f003 031f 	and.w	r3, r3, #31
 800666c:	2b09      	cmp	r3, #9
 800666e:	bf94      	ite	ls
 8006670:	2301      	movls	r3, #1
 8006672:	2300      	movhi	r3, #0
 8006674:	b2db      	uxtb	r3, r3
 8006676:	e019      	b.n	80066ac <HAL_ADC_ConfigChannel+0x664>
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800667e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006680:	fa93 f3a3 	rbit	r3, r3
 8006684:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8006686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006688:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800668a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800668c:	2b00      	cmp	r3, #0
 800668e:	d101      	bne.n	8006694 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8006690:	2320      	movs	r3, #32
 8006692:	e003      	b.n	800669c <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8006694:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006696:	fab3 f383 	clz	r3, r3
 800669a:	b2db      	uxtb	r3, r3
 800669c:	3301      	adds	r3, #1
 800669e:	f003 031f 	and.w	r3, r3, #31
 80066a2:	2b09      	cmp	r3, #9
 80066a4:	bf94      	ite	ls
 80066a6:	2301      	movls	r3, #1
 80066a8:	2300      	movhi	r3, #0
 80066aa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d079      	beq.n	80067a4 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d107      	bne.n	80066cc <HAL_ADC_ConfigChannel+0x684>
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	0e9b      	lsrs	r3, r3, #26
 80066c2:	3301      	adds	r3, #1
 80066c4:	069b      	lsls	r3, r3, #26
 80066c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80066ca:	e015      	b.n	80066f8 <HAL_ADC_ConfigChannel+0x6b0>
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066d4:	fa93 f3a3 	rbit	r3, r3
 80066d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80066da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066dc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80066de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d101      	bne.n	80066e8 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80066e4:	2320      	movs	r3, #32
 80066e6:	e003      	b.n	80066f0 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80066e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066ea:	fab3 f383 	clz	r3, r3
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	3301      	adds	r3, #1
 80066f2:	069b      	lsls	r3, r3, #26
 80066f4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006700:	2b00      	cmp	r3, #0
 8006702:	d109      	bne.n	8006718 <HAL_ADC_ConfigChannel+0x6d0>
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	0e9b      	lsrs	r3, r3, #26
 800670a:	3301      	adds	r3, #1
 800670c:	f003 031f 	and.w	r3, r3, #31
 8006710:	2101      	movs	r1, #1
 8006712:	fa01 f303 	lsl.w	r3, r1, r3
 8006716:	e017      	b.n	8006748 <HAL_ADC_ConfigChannel+0x700>
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800671e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006720:	fa93 f3a3 	rbit	r3, r3
 8006724:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8006726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006728:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800672a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800672c:	2b00      	cmp	r3, #0
 800672e:	d101      	bne.n	8006734 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8006730:	2320      	movs	r3, #32
 8006732:	e003      	b.n	800673c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8006734:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006736:	fab3 f383 	clz	r3, r3
 800673a:	b2db      	uxtb	r3, r3
 800673c:	3301      	adds	r3, #1
 800673e:	f003 031f 	and.w	r3, r3, #31
 8006742:	2101      	movs	r1, #1
 8006744:	fa01 f303 	lsl.w	r3, r1, r3
 8006748:	ea42 0103 	orr.w	r1, r2, r3
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10a      	bne.n	800676e <HAL_ADC_ConfigChannel+0x726>
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	0e9b      	lsrs	r3, r3, #26
 800675e:	3301      	adds	r3, #1
 8006760:	f003 021f 	and.w	r2, r3, #31
 8006764:	4613      	mov	r3, r2
 8006766:	005b      	lsls	r3, r3, #1
 8006768:	4413      	add	r3, r2
 800676a:	051b      	lsls	r3, r3, #20
 800676c:	e018      	b.n	80067a0 <HAL_ADC_ConfigChannel+0x758>
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006776:	fa93 f3a3 	rbit	r3, r3
 800677a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800677c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800677e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8006780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8006786:	2320      	movs	r3, #32
 8006788:	e003      	b.n	8006792 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 800678a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800678c:	fab3 f383 	clz	r3, r3
 8006790:	b2db      	uxtb	r3, r3
 8006792:	3301      	adds	r3, #1
 8006794:	f003 021f 	and.w	r2, r3, #31
 8006798:	4613      	mov	r3, r2
 800679a:	005b      	lsls	r3, r3, #1
 800679c:	4413      	add	r3, r2
 800679e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80067a0:	430b      	orrs	r3, r1
 80067a2:	e07e      	b.n	80068a2 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d107      	bne.n	80067c0 <HAL_ADC_ConfigChannel+0x778>
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	0e9b      	lsrs	r3, r3, #26
 80067b6:	3301      	adds	r3, #1
 80067b8:	069b      	lsls	r3, r3, #26
 80067ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80067be:	e015      	b.n	80067ec <HAL_ADC_ConfigChannel+0x7a4>
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c8:	fa93 f3a3 	rbit	r3, r3
 80067cc:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80067ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80067d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d101      	bne.n	80067dc <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80067d8:	2320      	movs	r3, #32
 80067da:	e003      	b.n	80067e4 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80067dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067de:	fab3 f383 	clz	r3, r3
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	3301      	adds	r3, #1
 80067e6:	069b      	lsls	r3, r3, #26
 80067e8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d109      	bne.n	800680c <HAL_ADC_ConfigChannel+0x7c4>
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	0e9b      	lsrs	r3, r3, #26
 80067fe:	3301      	adds	r3, #1
 8006800:	f003 031f 	and.w	r3, r3, #31
 8006804:	2101      	movs	r1, #1
 8006806:	fa01 f303 	lsl.w	r3, r1, r3
 800680a:	e017      	b.n	800683c <HAL_ADC_ConfigChannel+0x7f4>
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	fa93 f3a3 	rbit	r3, r3
 8006818:	61bb      	str	r3, [r7, #24]
  return result;
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800681e:	6a3b      	ldr	r3, [r7, #32]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d101      	bne.n	8006828 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8006824:	2320      	movs	r3, #32
 8006826:	e003      	b.n	8006830 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8006828:	6a3b      	ldr	r3, [r7, #32]
 800682a:	fab3 f383 	clz	r3, r3
 800682e:	b2db      	uxtb	r3, r3
 8006830:	3301      	adds	r3, #1
 8006832:	f003 031f 	and.w	r3, r3, #31
 8006836:	2101      	movs	r1, #1
 8006838:	fa01 f303 	lsl.w	r3, r1, r3
 800683c:	ea42 0103 	orr.w	r1, r2, r3
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006848:	2b00      	cmp	r3, #0
 800684a:	d10d      	bne.n	8006868 <HAL_ADC_ConfigChannel+0x820>
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	0e9b      	lsrs	r3, r3, #26
 8006852:	3301      	adds	r3, #1
 8006854:	f003 021f 	and.w	r2, r3, #31
 8006858:	4613      	mov	r3, r2
 800685a:	005b      	lsls	r3, r3, #1
 800685c:	4413      	add	r3, r2
 800685e:	3b1e      	subs	r3, #30
 8006860:	051b      	lsls	r3, r3, #20
 8006862:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006866:	e01b      	b.n	80068a0 <HAL_ADC_ConfigChannel+0x858>
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	fa93 f3a3 	rbit	r3, r3
 8006874:	60fb      	str	r3, [r7, #12]
  return result;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8006880:	2320      	movs	r3, #32
 8006882:	e003      	b.n	800688c <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	fab3 f383 	clz	r3, r3
 800688a:	b2db      	uxtb	r3, r3
 800688c:	3301      	adds	r3, #1
 800688e:	f003 021f 	and.w	r2, r3, #31
 8006892:	4613      	mov	r3, r2
 8006894:	005b      	lsls	r3, r3, #1
 8006896:	4413      	add	r3, r2
 8006898:	3b1e      	subs	r3, #30
 800689a:	051b      	lsls	r3, r3, #20
 800689c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80068a0:	430b      	orrs	r3, r1
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	6892      	ldr	r2, [r2, #8]
 80068a6:	4619      	mov	r1, r3
 80068a8:	f7fe fc29 	bl	80050fe <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f280 80d7 	bge.w	8006a64 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a06      	ldr	r2, [pc, #24]	@ (80068d4 <HAL_ADC_ConfigChannel+0x88c>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d004      	beq.n	80068ca <HAL_ADC_ConfigChannel+0x882>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a04      	ldr	r2, [pc, #16]	@ (80068d8 <HAL_ADC_ConfigChannel+0x890>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d10a      	bne.n	80068e0 <HAL_ADC_ConfigChannel+0x898>
 80068ca:	4b04      	ldr	r3, [pc, #16]	@ (80068dc <HAL_ADC_ConfigChannel+0x894>)
 80068cc:	e009      	b.n	80068e2 <HAL_ADC_ConfigChannel+0x89a>
 80068ce:	bf00      	nop
 80068d0:	47ff0000 	.word	0x47ff0000
 80068d4:	40022000 	.word	0x40022000
 80068d8:	40022100 	.word	0x40022100
 80068dc:	40022300 	.word	0x40022300
 80068e0:	4b65      	ldr	r3, [pc, #404]	@ (8006a78 <HAL_ADC_ConfigChannel+0xa30>)
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7fe fa7c 	bl	8004de0 <LL_ADC_GetCommonPathInternalCh>
 80068e8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a62      	ldr	r2, [pc, #392]	@ (8006a7c <HAL_ADC_ConfigChannel+0xa34>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d004      	beq.n	8006900 <HAL_ADC_ConfigChannel+0x8b8>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a61      	ldr	r2, [pc, #388]	@ (8006a80 <HAL_ADC_ConfigChannel+0xa38>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d10e      	bne.n	800691e <HAL_ADC_ConfigChannel+0x8d6>
 8006900:	485e      	ldr	r0, [pc, #376]	@ (8006a7c <HAL_ADC_ConfigChannel+0xa34>)
 8006902:	f7fe fd85 	bl	8005410 <LL_ADC_IsEnabled>
 8006906:	4604      	mov	r4, r0
 8006908:	485d      	ldr	r0, [pc, #372]	@ (8006a80 <HAL_ADC_ConfigChannel+0xa38>)
 800690a:	f7fe fd81 	bl	8005410 <LL_ADC_IsEnabled>
 800690e:	4603      	mov	r3, r0
 8006910:	4323      	orrs	r3, r4
 8006912:	2b00      	cmp	r3, #0
 8006914:	bf0c      	ite	eq
 8006916:	2301      	moveq	r3, #1
 8006918:	2300      	movne	r3, #0
 800691a:	b2db      	uxtb	r3, r3
 800691c:	e008      	b.n	8006930 <HAL_ADC_ConfigChannel+0x8e8>
 800691e:	4859      	ldr	r0, [pc, #356]	@ (8006a84 <HAL_ADC_ConfigChannel+0xa3c>)
 8006920:	f7fe fd76 	bl	8005410 <LL_ADC_IsEnabled>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	bf0c      	ite	eq
 800692a:	2301      	moveq	r3, #1
 800692c:	2300      	movne	r3, #0
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b00      	cmp	r3, #0
 8006932:	f000 8084 	beq.w	8006a3e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a53      	ldr	r2, [pc, #332]	@ (8006a88 <HAL_ADC_ConfigChannel+0xa40>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d132      	bne.n	80069a6 <HAL_ADC_ConfigChannel+0x95e>
 8006940:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006944:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d12c      	bne.n	80069a6 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a4c      	ldr	r2, [pc, #304]	@ (8006a84 <HAL_ADC_ConfigChannel+0xa3c>)
 8006952:	4293      	cmp	r3, r2
 8006954:	f040 8086 	bne.w	8006a64 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a47      	ldr	r2, [pc, #284]	@ (8006a7c <HAL_ADC_ConfigChannel+0xa34>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d004      	beq.n	800696c <HAL_ADC_ConfigChannel+0x924>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a46      	ldr	r2, [pc, #280]	@ (8006a80 <HAL_ADC_ConfigChannel+0xa38>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d101      	bne.n	8006970 <HAL_ADC_ConfigChannel+0x928>
 800696c:	4a47      	ldr	r2, [pc, #284]	@ (8006a8c <HAL_ADC_ConfigChannel+0xa44>)
 800696e:	e000      	b.n	8006972 <HAL_ADC_ConfigChannel+0x92a>
 8006970:	4a41      	ldr	r2, [pc, #260]	@ (8006a78 <HAL_ADC_ConfigChannel+0xa30>)
 8006972:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006976:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800697a:	4619      	mov	r1, r3
 800697c:	4610      	mov	r0, r2
 800697e:	f7fe fa1c 	bl	8004dba <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006982:	4b43      	ldr	r3, [pc, #268]	@ (8006a90 <HAL_ADC_ConfigChannel+0xa48>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	099b      	lsrs	r3, r3, #6
 8006988:	4a42      	ldr	r2, [pc, #264]	@ (8006a94 <HAL_ADC_ConfigChannel+0xa4c>)
 800698a:	fba2 2303 	umull	r2, r3, r2, r3
 800698e:	099b      	lsrs	r3, r3, #6
 8006990:	3301      	adds	r3, #1
 8006992:	005b      	lsls	r3, r3, #1
 8006994:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006996:	e002      	b.n	800699e <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	3b01      	subs	r3, #1
 800699c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1f9      	bne.n	8006998 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80069a4:	e05e      	b.n	8006a64 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a3b      	ldr	r2, [pc, #236]	@ (8006a98 <HAL_ADC_ConfigChannel+0xa50>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d120      	bne.n	80069f2 <HAL_ADC_ConfigChannel+0x9aa>
 80069b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80069b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d11a      	bne.n	80069f2 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a30      	ldr	r2, [pc, #192]	@ (8006a84 <HAL_ADC_ConfigChannel+0xa3c>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d14e      	bne.n	8006a64 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a2c      	ldr	r2, [pc, #176]	@ (8006a7c <HAL_ADC_ConfigChannel+0xa34>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d004      	beq.n	80069da <HAL_ADC_ConfigChannel+0x992>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a2a      	ldr	r2, [pc, #168]	@ (8006a80 <HAL_ADC_ConfigChannel+0xa38>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d101      	bne.n	80069de <HAL_ADC_ConfigChannel+0x996>
 80069da:	4a2c      	ldr	r2, [pc, #176]	@ (8006a8c <HAL_ADC_ConfigChannel+0xa44>)
 80069dc:	e000      	b.n	80069e0 <HAL_ADC_ConfigChannel+0x998>
 80069de:	4a26      	ldr	r2, [pc, #152]	@ (8006a78 <HAL_ADC_ConfigChannel+0xa30>)
 80069e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80069e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069e8:	4619      	mov	r1, r3
 80069ea:	4610      	mov	r0, r2
 80069ec:	f7fe f9e5 	bl	8004dba <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80069f0:	e038      	b.n	8006a64 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a29      	ldr	r2, [pc, #164]	@ (8006a9c <HAL_ADC_ConfigChannel+0xa54>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d133      	bne.n	8006a64 <HAL_ADC_ConfigChannel+0xa1c>
 80069fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d12d      	bne.n	8006a64 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8006a84 <HAL_ADC_ConfigChannel+0xa3c>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d128      	bne.n	8006a64 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a19      	ldr	r2, [pc, #100]	@ (8006a7c <HAL_ADC_ConfigChannel+0xa34>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d004      	beq.n	8006a26 <HAL_ADC_ConfigChannel+0x9de>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a17      	ldr	r2, [pc, #92]	@ (8006a80 <HAL_ADC_ConfigChannel+0xa38>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d101      	bne.n	8006a2a <HAL_ADC_ConfigChannel+0x9e2>
 8006a26:	4a19      	ldr	r2, [pc, #100]	@ (8006a8c <HAL_ADC_ConfigChannel+0xa44>)
 8006a28:	e000      	b.n	8006a2c <HAL_ADC_ConfigChannel+0x9e4>
 8006a2a:	4a13      	ldr	r2, [pc, #76]	@ (8006a78 <HAL_ADC_ConfigChannel+0xa30>)
 8006a2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a30:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006a34:	4619      	mov	r1, r3
 8006a36:	4610      	mov	r0, r2
 8006a38:	f7fe f9bf 	bl	8004dba <LL_ADC_SetCommonPathInternalCh>
 8006a3c:	e012      	b.n	8006a64 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a42:	f043 0220 	orr.w	r2, r3, #32
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8006a50:	e008      	b.n	8006a64 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a56:	f043 0220 	orr.w	r2, r3, #32
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8006a6c:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	37e4      	adds	r7, #228	@ 0xe4
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd90      	pop	{r4, r7, pc}
 8006a78:	58026300 	.word	0x58026300
 8006a7c:	40022000 	.word	0x40022000
 8006a80:	40022100 	.word	0x40022100
 8006a84:	58026000 	.word	0x58026000
 8006a88:	c7520000 	.word	0xc7520000
 8006a8c:	40022300 	.word	0x40022300
 8006a90:	24000038 	.word	0x24000038
 8006a94:	053e2d63 	.word	0x053e2d63
 8006a98:	c3210000 	.word	0xc3210000
 8006a9c:	cb840000 	.word	0xcb840000

08006aa0 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b094      	sub	sp, #80	@ 0x50
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006ab8:	d003      	beq.n	8006ac2 <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8006abe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }

#if defined(ADC_VER_V5_V90)

  if (hadc->Instance == ADC3)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a8c      	ldr	r2, [pc, #560]	@ (8006cf8 <HAL_ADC_AnalogWDGConfig+0x258>)
 8006ac8:	4293      	cmp	r3, r2
      assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d101      	bne.n	8006ad8 <HAL_ADC_AnalogWDGConfig+0x38>
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	e36b      	b.n	80071b0 <HAL_ADC_AnalogWDGConfig+0x710>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7fe fccd 	bl	8005484 <LL_ADC_REG_IsConversionOngoing>
 8006aea:	6438      	str	r0, [r7, #64]	@ 0x40
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7fe fcda 	bl	80054aa <LL_ADC_INJ_IsConversionOngoing>
 8006af6:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006af8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f040 8349 	bne.w	8007192 <HAL_ADC_AnalogWDGConfig+0x6f2>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006b00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f040 8345 	bne.w	8007192 <HAL_ADC_AnalogWDGConfig+0x6f2>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a7b      	ldr	r2, [pc, #492]	@ (8006cfc <HAL_ADC_AnalogWDGConfig+0x25c>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	f040 8131 	bne.w	8006d76 <HAL_ADC_AnalogWDGConfig+0x2d6>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8006b1c:	d034      	beq.n	8006b88 <HAL_ADC_AnalogWDGConfig+0xe8>
 8006b1e:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8006b22:	d856      	bhi.n	8006bd2 <HAL_ADC_AnalogWDGConfig+0x132>
 8006b24:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006b28:	d04b      	beq.n	8006bc2 <HAL_ADC_AnalogWDGConfig+0x122>
 8006b2a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006b2e:	d850      	bhi.n	8006bd2 <HAL_ADC_AnalogWDGConfig+0x132>
 8006b30:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006b34:	d01b      	beq.n	8006b6e <HAL_ADC_AnalogWDGConfig+0xce>
 8006b36:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006b3a:	d84a      	bhi.n	8006bd2 <HAL_ADC_AnalogWDGConfig+0x132>
 8006b3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b40:	d037      	beq.n	8006bb2 <HAL_ADC_AnalogWDGConfig+0x112>
 8006b42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b46:	d844      	bhi.n	8006bd2 <HAL_ADC_AnalogWDGConfig+0x132>
 8006b48:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006b4c:	d029      	beq.n	8006ba2 <HAL_ADC_AnalogWDGConfig+0x102>
 8006b4e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006b52:	d13e      	bne.n	8006bd2 <HAL_ADC_AnalogWDGConfig+0x132>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6818      	ldr	r0, [r3, #0]
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8006b60:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 8006b64:	461a      	mov	r2, r3
 8006b66:	4965      	ldr	r1, [pc, #404]	@ (8006cfc <HAL_ADC_AnalogWDGConfig+0x25c>)
 8006b68:	f7fe fb34 	bl	80051d4 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 8006b6c:	e039      	b.n	8006be2 <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6818      	ldr	r0, [r3, #0]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8006b7a:	f043 73a0 	orr.w	r3, r3, #20971520	@ 0x1400000
 8006b7e:	461a      	mov	r2, r3
 8006b80:	495e      	ldr	r1, [pc, #376]	@ (8006cfc <HAL_ADC_AnalogWDGConfig+0x25c>)
 8006b82:	f7fe fb27 	bl	80051d4 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 8006b86:	e02c      	b.n	8006be2 <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6818      	ldr	r0, [r3, #0]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8006b94:	f043 73e0 	orr.w	r3, r3, #29360128	@ 0x1c00000
 8006b98:	461a      	mov	r2, r3
 8006b9a:	4958      	ldr	r1, [pc, #352]	@ (8006cfc <HAL_ADC_AnalogWDGConfig+0x25c>)
 8006b9c:	f7fe fb1a 	bl	80051d4 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8006ba0:	e01f      	b.n	8006be2 <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a56      	ldr	r2, [pc, #344]	@ (8006d00 <HAL_ADC_AnalogWDGConfig+0x260>)
 8006ba8:	4954      	ldr	r1, [pc, #336]	@ (8006cfc <HAL_ADC_AnalogWDGConfig+0x25c>)
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7fe fb12 	bl	80051d4 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006bb0:	e017      	b.n	8006be2 <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a53      	ldr	r2, [pc, #332]	@ (8006d04 <HAL_ADC_AnalogWDGConfig+0x264>)
 8006bb8:	4950      	ldr	r1, [pc, #320]	@ (8006cfc <HAL_ADC_AnalogWDGConfig+0x25c>)
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7fe fb0a 	bl	80051d4 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006bc0:	e00f      	b.n	8006be2 <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a50      	ldr	r2, [pc, #320]	@ (8006d08 <HAL_ADC_AnalogWDGConfig+0x268>)
 8006bc8:	494c      	ldr	r1, [pc, #304]	@ (8006cfc <HAL_ADC_AnalogWDGConfig+0x25c>)
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7fe fb02 	bl	80051d4 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006bd0:	e007      	b.n	8006be2 <HAL_ADC_AnalogWDGConfig+0x142>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	4948      	ldr	r1, [pc, #288]	@ (8006cfc <HAL_ADC_AnalogWDGConfig+0x25c>)
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7fe fafa 	bl	80051d4 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006be0:	bf00      	nop
      }

      /* Shift the offset in function of the selected ADC resolution:         */
      /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
      /* are set to 0                                                         */
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8006be2:	4b4a      	ldr	r3, [pc, #296]	@ (8006d0c <HAL_ADC_AnalogWDGConfig+0x26c>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006bea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006bee:	d10b      	bne.n	8006c08 <HAL_ADC_AnalogWDGConfig+0x168>
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	691a      	ldr	r2, [r3, #16]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	089b      	lsrs	r3, r3, #2
 8006bfc:	f003 0307 	and.w	r3, r3, #7
 8006c00:	005b      	lsls	r3, r3, #1
 8006c02:	fa02 f303 	lsl.w	r3, r2, r3
 8006c06:	e01d      	b.n	8006c44 <HAL_ADC_AnalogWDGConfig+0x1a4>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	f003 0310 	and.w	r3, r3, #16
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10b      	bne.n	8006c2e <HAL_ADC_AnalogWDGConfig+0x18e>
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	691a      	ldr	r2, [r3, #16]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	089b      	lsrs	r3, r3, #2
 8006c22:	f003 0307 	and.w	r3, r3, #7
 8006c26:	005b      	lsls	r3, r3, #1
 8006c28:	fa02 f303 	lsl.w	r3, r2, r3
 8006c2c:	e00a      	b.n	8006c44 <HAL_ADC_AnalogWDGConfig+0x1a4>
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	691a      	ldr	r2, [r3, #16]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	089b      	lsrs	r3, r3, #2
 8006c3a:	f003 0304 	and.w	r3, r3, #4
 8006c3e:	005b      	lsls	r3, r3, #1
 8006c40:	fa02 f303 	lsl.w	r3, r2, r3
 8006c44:	64bb      	str	r3, [r7, #72]	@ 0x48
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8006c46:	4b31      	ldr	r3, [pc, #196]	@ (8006d0c <HAL_ADC_AnalogWDGConfig+0x26c>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006c4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c52:	d10b      	bne.n	8006c6c <HAL_ADC_AnalogWDGConfig+0x1cc>
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	695a      	ldr	r2, [r3, #20]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	089b      	lsrs	r3, r3, #2
 8006c60:	f003 0307 	and.w	r3, r3, #7
 8006c64:	005b      	lsls	r3, r3, #1
 8006c66:	fa02 f303 	lsl.w	r3, r2, r3
 8006c6a:	e01d      	b.n	8006ca8 <HAL_ADC_AnalogWDGConfig+0x208>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	f003 0310 	and.w	r3, r3, #16
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d10b      	bne.n	8006c92 <HAL_ADC_AnalogWDGConfig+0x1f2>
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	695a      	ldr	r2, [r3, #20]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	089b      	lsrs	r3, r3, #2
 8006c86:	f003 0307 	and.w	r3, r3, #7
 8006c8a:	005b      	lsls	r3, r3, #1
 8006c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c90:	e00a      	b.n	8006ca8 <HAL_ADC_AnalogWDGConfig+0x208>
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	695a      	ldr	r2, [r3, #20]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	089b      	lsrs	r3, r3, #2
 8006c9e:	f003 0304 	and.w	r3, r3, #4
 8006ca2:	005b      	lsls	r3, r3, #1
 8006ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca8:	647b      	str	r3, [r7, #68]	@ 0x44

      /* Set the high and low thresholds */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a12      	ldr	r2, [pc, #72]	@ (8006cf8 <HAL_ADC_AnalogWDGConfig+0x258>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d131      	bne.n	8006d18 <HAL_ADC_AnalogWDGConfig+0x278>
      {
        MODIFY_REG(hadc->Instance->LTR1_TR1,
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	699a      	ldr	r2, [r3, #24]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	621a      	str	r2, [r3, #32]
                   ADC3_TR1_AWDFILT,
                   AnalogWDGConfig->FilteringConfig);
        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC3_TR1_LT1, tmpAWDLowThresholdShifted);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	6a1a      	ldr	r2, [r3, #32]
 8006cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8006d10 <HAL_ADC_AnalogWDGConfig+0x270>)
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	6812      	ldr	r2, [r2, #0]
 8006cd8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006cda:	430b      	orrs	r3, r1
 8006cdc:	6213      	str	r3, [r2, #32]
        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC3_TR1_HT1, (tmpAWDHighThresholdShifted << ADC3_TR1_HT1_Pos));
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	6a1a      	ldr	r2, [r3, #32]
 8006ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8006d14 <HAL_ADC_AnalogWDGConfig+0x274>)
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cea:	0411      	lsls	r1, r2, #16
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	6812      	ldr	r2, [r2, #0]
 8006cf0:	430b      	orrs	r3, r1
 8006cf2:	6213      	str	r3, [r2, #32]
 8006cf4:	e024      	b.n	8006d40 <HAL_ADC_AnalogWDGConfig+0x2a0>
 8006cf6:	bf00      	nop
 8006cf8:	58026000 	.word	0x58026000
 8006cfc:	7dc00000 	.word	0x7dc00000
 8006d00:	008fffff 	.word	0x008fffff
 8006d04:	010fffff 	.word	0x010fffff
 8006d08:	018fffff 	.word	0x018fffff
 8006d0c:	5c001000 	.word	0x5c001000
 8006d10:	fffff000 	.word	0xfffff000
 8006d14:	f000ffff 	.word	0xf000ffff
      }
      else
      {

        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d28:	430a      	orrs	r2, r1
 8006d2a:	621a      	str	r2, [r3, #32]
        MODIFY_REG(hadc->Instance->HTR1_TR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d32:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	625a      	str	r2, [r3, #36]	@ 0x24
      MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
      MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
#endif

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d44:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7fe fbbd 	bl	80054d0 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	7b1b      	ldrb	r3, [r3, #12]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d105      	bne.n	8006d6a <HAL_ADC_AnalogWDGConfig+0x2ca>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7fe fbdd 	bl	8005522 <LL_ADC_EnableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006d68:	e21c      	b.n	80071a4 <HAL_ADC_AnalogWDGConfig+0x704>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7fe fc07 	bl	8005582 <LL_ADC_DisableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006d74:	e216      	b.n	80071a4 <HAL_ADC_AnalogWDGConfig+0x704>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8006d7e:	d01f      	beq.n	8006dc0 <HAL_ADC_AnalogWDGConfig+0x320>
 8006d80:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8006d84:	f200 80f4 	bhi.w	8006f70 <HAL_ADC_AnalogWDGConfig+0x4d0>
 8006d88:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006d8c:	d07d      	beq.n	8006e8a <HAL_ADC_AnalogWDGConfig+0x3ea>
 8006d8e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006d92:	f200 80ed 	bhi.w	8006f70 <HAL_ADC_AnalogWDGConfig+0x4d0>
 8006d96:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006d9a:	d011      	beq.n	8006dc0 <HAL_ADC_AnalogWDGConfig+0x320>
 8006d9c:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006da0:	f200 80e6 	bhi.w	8006f70 <HAL_ADC_AnalogWDGConfig+0x4d0>
 8006da4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006da8:	d06f      	beq.n	8006e8a <HAL_ADC_AnalogWDGConfig+0x3ea>
 8006daa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006dae:	f200 80df 	bhi.w	8006f70 <HAL_ADC_AnalogWDGConfig+0x4d0>
 8006db2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006db6:	d068      	beq.n	8006e8a <HAL_ADC_AnalogWDGConfig+0x3ea>
 8006db8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006dbc:	f040 80d8 	bne.w	8006f70 <HAL_ADC_AnalogWDGConfig+0x4d0>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a9c      	ldr	r2, [pc, #624]	@ (8007038 <HAL_ADC_AnalogWDGConfig+0x598>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d12f      	bne.n	8006e2a <HAL_ADC_AnalogWDGConfig+0x38a>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d108      	bne.n	8006de8 <HAL_ADC_AnalogWDGConfig+0x348>
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	0e9b      	lsrs	r3, r3, #26
 8006ddc:	f003 031f 	and.w	r3, r3, #31
 8006de0:	2201      	movs	r2, #1
 8006de2:	fa02 f303 	lsl.w	r3, r2, r3
 8006de6:	e016      	b.n	8006e16 <HAL_ADC_AnalogWDGConfig+0x376>
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006df0:	fa93 f3a3 	rbit	r3, r3
 8006df4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8006df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8006dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d101      	bne.n	8006e04 <HAL_ADC_AnalogWDGConfig+0x364>
    return 32U;
 8006e00:	2320      	movs	r3, #32
 8006e02:	e003      	b.n	8006e0c <HAL_ADC_AnalogWDGConfig+0x36c>
  return __builtin_clz(value);
 8006e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e06:	fab3 f383 	clz	r3, r3
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	f003 031f 	and.w	r3, r3, #31
 8006e10:	2201      	movs	r2, #1
 8006e12:	fa02 f303 	lsl.w	r3, r2, r3
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	6812      	ldr	r2, [r2, #0]
 8006e1a:	f8d2 10a0 	ldr.w	r1, [r2, #160]	@ 0xa0
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	6812      	ldr	r2, [r2, #0]
 8006e22:	430b      	orrs	r3, r1
 8006e24:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8006e28:	e0ab      	b.n	8006f82 <HAL_ADC_AnalogWDGConfig+0x4e2>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d108      	bne.n	8006e48 <HAL_ADC_AnalogWDGConfig+0x3a8>
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	0e9b      	lsrs	r3, r3, #26
 8006e3c:	f003 031f 	and.w	r3, r3, #31
 8006e40:	2201      	movs	r2, #1
 8006e42:	fa02 f303 	lsl.w	r3, r2, r3
 8006e46:	e016      	b.n	8006e76 <HAL_ADC_AnalogWDGConfig+0x3d6>
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e50:	fa93 f3a3 	rbit	r3, r3
 8006e54:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8006e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8006e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d101      	bne.n	8006e64 <HAL_ADC_AnalogWDGConfig+0x3c4>
    return 32U;
 8006e60:	2320      	movs	r3, #32
 8006e62:	e003      	b.n	8006e6c <HAL_ADC_AnalogWDGConfig+0x3cc>
  return __builtin_clz(value);
 8006e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e66:	fab3 f383 	clz	r3, r3
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	f003 031f 	and.w	r3, r3, #31
 8006e70:	2201      	movs	r2, #1
 8006e72:	fa02 f303 	lsl.w	r3, r2, r3
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	6812      	ldr	r2, [r2, #0]
 8006e7a:	f8d2 10a4 	ldr.w	r1, [r2, #164]	@ 0xa4
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	6812      	ldr	r2, [r2, #0]
 8006e82:	430b      	orrs	r3, r1
 8006e84:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
          break;
 8006e88:	e07b      	b.n	8006f82 <HAL_ADC_AnalogWDGConfig+0x4e2>
        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:

#if defined(ADC_VER_V5_V90)
          if (hadc->Instance == ADC3)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a6b      	ldr	r2, [pc, #428]	@ (800703c <HAL_ADC_AnalogWDGConfig+0x59c>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d108      	bne.n	8006ea6 <HAL_ADC_AnalogWDGConfig+0x406>
          {

            LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6818      	ldr	r0, [r3, #0]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a68      	ldr	r2, [pc, #416]	@ (8007040 <HAL_ADC_AnalogWDGConfig+0x5a0>)
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	f7fe f998 	bl	80051d4 <LL_ADC_SetAnalogWDMonitChannels>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
            }
#if defined(ADC_VER_V5_V90)
          }
#endif  /*ADC_VER_V5_V90*/
          break;
 8006ea4:	e06d      	b.n	8006f82 <HAL_ADC_AnalogWDGConfig+0x4e2>
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a63      	ldr	r2, [pc, #396]	@ (8007038 <HAL_ADC_AnalogWDGConfig+0x598>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d12f      	bne.n	8006f10 <HAL_ADC_AnalogWDGConfig+0x470>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d108      	bne.n	8006ece <HAL_ADC_AnalogWDGConfig+0x42e>
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	0e9b      	lsrs	r3, r3, #26
 8006ec2:	f003 031f 	and.w	r3, r3, #31
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ecc:	e016      	b.n	8006efc <HAL_ADC_AnalogWDGConfig+0x45c>
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	fa93 f3a3 	rbit	r3, r3
 8006eda:	61bb      	str	r3, [r7, #24]
  return result;
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d101      	bne.n	8006eea <HAL_ADC_AnalogWDGConfig+0x44a>
    return 32U;
 8006ee6:	2320      	movs	r3, #32
 8006ee8:	e003      	b.n	8006ef2 <HAL_ADC_AnalogWDGConfig+0x452>
  return __builtin_clz(value);
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	fab3 f383 	clz	r3, r3
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	f003 031f 	and.w	r3, r3, #31
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	6812      	ldr	r2, [r2, #0]
 8006f00:	f8d2 10a0 	ldr.w	r1, [r2, #160]	@ 0xa0
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	6812      	ldr	r2, [r2, #0]
 8006f08:	430b      	orrs	r3, r1
 8006f0a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
          break;
 8006f0e:	e038      	b.n	8006f82 <HAL_ADC_AnalogWDGConfig+0x4e2>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d108      	bne.n	8006f2e <HAL_ADC_AnalogWDGConfig+0x48e>
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	0e9b      	lsrs	r3, r3, #26
 8006f22:	f003 031f 	and.w	r3, r3, #31
 8006f26:	2201      	movs	r2, #1
 8006f28:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2c:	e016      	b.n	8006f5c <HAL_ADC_AnalogWDGConfig+0x4bc>
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	fa93 f3a3 	rbit	r3, r3
 8006f3a:	60fb      	str	r3, [r7, #12]
  return result;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d101      	bne.n	8006f4a <HAL_ADC_AnalogWDGConfig+0x4aa>
    return 32U;
 8006f46:	2320      	movs	r3, #32
 8006f48:	e003      	b.n	8006f52 <HAL_ADC_AnalogWDGConfig+0x4b2>
  return __builtin_clz(value);
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	fab3 f383 	clz	r3, r3
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	f003 031f 	and.w	r3, r3, #31
 8006f56:	2201      	movs	r2, #1
 8006f58:	fa02 f303 	lsl.w	r3, r2, r3
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	6812      	ldr	r2, [r2, #0]
 8006f60:	f8d2 10a4 	ldr.w	r1, [r2, #164]	@ 0xa4
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	6812      	ldr	r2, [r2, #0]
 8006f68:	430b      	orrs	r3, r1
 8006f6a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
          break;
 8006f6e:	e008      	b.n	8006f82 <HAL_ADC_AnalogWDGConfig+0x4e2>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6818      	ldr	r0, [r3, #0]
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	f7fe f92a 	bl	80051d4 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006f80:	bf00      	nop
      }

      /* Shift the thresholds in function of the selected ADC resolution      */
      /* have to be left-aligned on bit 15, the LSB (right bits) are set to 0 */
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	f003 0310 	and.w	r3, r3, #16
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10b      	bne.n	8006fa8 <HAL_ADC_AnalogWDGConfig+0x508>
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	691a      	ldr	r2, [r3, #16]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	089b      	lsrs	r3, r3, #2
 8006f9c:	f003 0307 	and.w	r3, r3, #7
 8006fa0:	005b      	lsls	r3, r3, #1
 8006fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa6:	e00a      	b.n	8006fbe <HAL_ADC_AnalogWDGConfig+0x51e>
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	691a      	ldr	r2, [r3, #16]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	089b      	lsrs	r3, r3, #2
 8006fb4:	f003 0304 	and.w	r3, r3, #4
 8006fb8:	005b      	lsls	r3, r3, #1
 8006fba:	fa02 f303 	lsl.w	r3, r2, r3
 8006fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	f003 0310 	and.w	r3, r3, #16
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10b      	bne.n	8006fe6 <HAL_ADC_AnalogWDGConfig+0x546>
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	695a      	ldr	r2, [r3, #20]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	089b      	lsrs	r3, r3, #2
 8006fda:	f003 0307 	and.w	r3, r3, #7
 8006fde:	005b      	lsls	r3, r3, #1
 8006fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe4:	e00a      	b.n	8006ffc <HAL_ADC_AnalogWDGConfig+0x55c>
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	695a      	ldr	r2, [r3, #20]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	089b      	lsrs	r3, r3, #2
 8006ff2:	f003 0304 	and.w	r3, r3, #4
 8006ff6:	005b      	lsls	r3, r3, #1
 8006ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffc:	647b      	str	r3, [r7, #68]	@ 0x44

#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a0e      	ldr	r2, [pc, #56]	@ (800703c <HAL_ADC_AnalogWDGConfig+0x59c>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d153      	bne.n	80070b0 <HAL_ADC_AnalogWDGConfig+0x610>
      {

        /* Analog watchdog thresholds configuration */
        if (AnalogWDGConfig->WatchdogNumber != ADC_ANALOGWATCHDOG_1)
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a0d      	ldr	r2, [pc, #52]	@ (8007044 <HAL_ADC_AnalogWDGConfig+0x5a4>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d045      	beq.n	800709e <HAL_ADC_AnalogWDGConfig+0x5fe>
        {
          /* Shift the offset with respect to the selected ADC resolution:        */
          /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
          /* are set to 0.                                                        */
          tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	f003 0310 	and.w	r3, r3, #16
 800701c:	2b00      	cmp	r3, #0
 800701e:	d113      	bne.n	8007048 <HAL_ADC_AnalogWDGConfig+0x5a8>
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	691a      	ldr	r2, [r3, #16]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	089b      	lsrs	r3, r3, #2
 800702c:	f003 0307 	and.w	r3, r3, #7
 8007030:	005b      	lsls	r3, r3, #1
 8007032:	fa02 f303 	lsl.w	r3, r2, r3
 8007036:	e012      	b.n	800705e <HAL_ADC_AnalogWDGConfig+0x5be>
 8007038:	001fffff 	.word	0x001fffff
 800703c:	58026000 	.word	0x58026000
 8007040:	018fffff 	.word	0x018fffff
 8007044:	7dc00000 	.word	0x7dc00000
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	691a      	ldr	r2, [r3, #16]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	089b      	lsrs	r3, r3, #2
 8007054:	f003 0304 	and.w	r3, r3, #4
 8007058:	005b      	lsls	r3, r3, #1
 800705a:	fa02 f303 	lsl.w	r3, r2, r3
 800705e:	64bb      	str	r3, [r7, #72]	@ 0x48
          tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	f003 0310 	and.w	r3, r3, #16
 800706a:	2b00      	cmp	r3, #0
 800706c:	d10b      	bne.n	8007086 <HAL_ADC_AnalogWDGConfig+0x5e6>
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	695a      	ldr	r2, [r3, #20]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	089b      	lsrs	r3, r3, #2
 800707a:	f003 0307 	and.w	r3, r3, #7
 800707e:	005b      	lsls	r3, r3, #1
 8007080:	fa02 f303 	lsl.w	r3, r2, r3
 8007084:	e00a      	b.n	800709c <HAL_ADC_AnalogWDGConfig+0x5fc>
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	695a      	ldr	r2, [r3, #20]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	089b      	lsrs	r3, r3, #2
 8007092:	f003 0304 	and.w	r3, r3, #4
 8007096:	005b      	lsls	r3, r3, #1
 8007098:	fa02 f303 	lsl.w	r3, r2, r3
 800709c:	647b      	str	r3, [r7, #68]	@ 0x44
        }

        /* Set ADC analog watchdog thresholds value of both thresholds high and low */
        LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted, tmpAWDLowThresholdShifted);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6818      	ldr	r0, [r3, #0]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	6819      	ldr	r1, [r3, #0]
 80070a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070aa:	f7fe f8c1 	bl	8005230 <LL_ADC_ConfigAnalogWDThresholds>
 80070ae:	e035      	b.n	800711c <HAL_ADC_AnalogWDGConfig+0x67c>

      }
      else
      {

        if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a40      	ldr	r2, [pc, #256]	@ (80071b8 <HAL_ADC_AnalogWDGConfig+0x718>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d118      	bne.n	80070ec <HAL_ADC_AnalogWDGConfig+0x64c>
        {
          /* Set ADC analog watchdog thresholds value of both thresholds high and low */
          MODIFY_REG(hadc->Instance->LTR2_DIFSEL,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80070c2:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070cc:	430a      	orrs	r2, r1
 80070ce:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
          MODIFY_REG(hadc->Instance->HTR2_CALFACT,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80070da:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070e4:	430a      	orrs	r2, r1
 80070e6:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 80070ea:	e017      	b.n	800711c <HAL_ADC_AnalogWDGConfig+0x67c>
        }
        else
        {
          /* Set ADC analog watchdog thresholds value of both thresholds high and low */
          MODIFY_REG(hadc->Instance->LTR3_RES10,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80070f4:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070fe:	430a      	orrs	r2, r1
 8007100:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
          MODIFY_REG(hadc->Instance->HTR3_RES11,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800710c:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007116:	430a      	orrs	r2, r1
 8007118:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
        MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
      }

#endif
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a25      	ldr	r2, [pc, #148]	@ (80071b8 <HAL_ADC_AnalogWDGConfig+0x718>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d11a      	bne.n	800715c <HAL_ADC_AnalogWDGConfig+0x6bc>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800712a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4618      	mov	r0, r3
 8007138:	f7fe f9d7 	bl	80054ea <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	7b1b      	ldrb	r3, [r3, #12]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d105      	bne.n	8007150 <HAL_ADC_AnalogWDGConfig+0x6b0>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4618      	mov	r0, r3
 800714a:	f7fe f9fa 	bl	8005542 <LL_ADC_EnableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800714e:	e029      	b.n	80071a4 <HAL_ADC_AnalogWDGConfig+0x704>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4618      	mov	r0, r3
 8007156:	f7fe fa24 	bl	80055a2 <LL_ADC_DisableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800715a:	e023      	b.n	80071a4 <HAL_ADC_AnalogWDGConfig+0x704>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007160:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4618      	mov	r0, r3
 800716e:	f7fe f9ca 	bl	8005506 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	7b1b      	ldrb	r3, [r3, #12]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d105      	bne.n	8007186 <HAL_ADC_AnalogWDGConfig+0x6e6>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4618      	mov	r0, r3
 8007180:	f7fe f9ef 	bl	8005562 <LL_ADC_EnableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8007184:	e00e      	b.n	80071a4 <HAL_ADC_AnalogWDGConfig+0x704>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4618      	mov	r0, r3
 800718c:	f7fe fa19 	bl	80055c2 <LL_ADC_DisableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8007190:	e008      	b.n	80071a4 <HAL_ADC_AnalogWDGConfig+0x704>
  /* If a conversion is on going on ADC group regular or injected, no update  */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007196:	f043 0220 	orr.w	r2, r3, #32
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80071ac:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3750      	adds	r7, #80	@ 0x50
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	001fffff 	.word	0x001fffff

080071bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7fe f921 	bl	8005410 <LL_ADC_IsEnabled>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d16e      	bne.n	80072b2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	689a      	ldr	r2, [r3, #8]
 80071da:	4b38      	ldr	r3, [pc, #224]	@ (80072bc <ADC_Enable+0x100>)
 80071dc:	4013      	ands	r3, r2
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00d      	beq.n	80071fe <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071e6:	f043 0210 	orr.w	r2, r3, #16
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071f2:	f043 0201 	orr.w	r2, r3, #1
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e05a      	b.n	80072b4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4618      	mov	r0, r3
 8007204:	f7fe f8dc 	bl	80053c0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007208:	f7fd fd6a 	bl	8004ce0 <HAL_GetTick>
 800720c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a2b      	ldr	r2, [pc, #172]	@ (80072c0 <ADC_Enable+0x104>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d004      	beq.n	8007222 <ADC_Enable+0x66>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a29      	ldr	r2, [pc, #164]	@ (80072c4 <ADC_Enable+0x108>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d101      	bne.n	8007226 <ADC_Enable+0x6a>
 8007222:	4b29      	ldr	r3, [pc, #164]	@ (80072c8 <ADC_Enable+0x10c>)
 8007224:	e000      	b.n	8007228 <ADC_Enable+0x6c>
 8007226:	4b29      	ldr	r3, [pc, #164]	@ (80072cc <ADC_Enable+0x110>)
 8007228:	4618      	mov	r0, r3
 800722a:	f7fe f85f 	bl	80052ec <LL_ADC_GetMultimode>
 800722e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a23      	ldr	r2, [pc, #140]	@ (80072c4 <ADC_Enable+0x108>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d002      	beq.n	8007240 <ADC_Enable+0x84>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	e000      	b.n	8007242 <ADC_Enable+0x86>
 8007240:	4b1f      	ldr	r3, [pc, #124]	@ (80072c0 <ADC_Enable+0x104>)
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	6812      	ldr	r2, [r2, #0]
 8007246:	4293      	cmp	r3, r2
 8007248:	d02c      	beq.n	80072a4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d130      	bne.n	80072b2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007250:	e028      	b.n	80072a4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4618      	mov	r0, r3
 8007258:	f7fe f8da 	bl	8005410 <LL_ADC_IsEnabled>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d104      	bne.n	800726c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4618      	mov	r0, r3
 8007268:	f7fe f8aa 	bl	80053c0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800726c:	f7fd fd38 	bl	8004ce0 <HAL_GetTick>
 8007270:	4602      	mov	r2, r0
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	2b02      	cmp	r3, #2
 8007278:	d914      	bls.n	80072a4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0301 	and.w	r3, r3, #1
 8007284:	2b01      	cmp	r3, #1
 8007286:	d00d      	beq.n	80072a4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800728c:	f043 0210 	orr.w	r2, r3, #16
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007298:	f043 0201 	orr.w	r2, r3, #1
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e007      	b.n	80072b4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 0301 	and.w	r3, r3, #1
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d1cf      	bne.n	8007252 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3710      	adds	r7, #16
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	8000003f 	.word	0x8000003f
 80072c0:	40022000 	.word	0x40022000
 80072c4:	40022100 	.word	0x40022100
 80072c8:	40022300 	.word	0x40022300
 80072cc:	58026300 	.word	0x58026300

080072d0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4618      	mov	r0, r3
 80072de:	f7fe f8aa 	bl	8005436 <LL_ADC_IsDisableOngoing>
 80072e2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7fe f891 	bl	8005410 <LL_ADC_IsEnabled>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d047      	beq.n	8007384 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d144      	bne.n	8007384 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	f003 030d 	and.w	r3, r3, #13
 8007304:	2b01      	cmp	r3, #1
 8007306:	d10c      	bne.n	8007322 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4618      	mov	r0, r3
 800730e:	f7fe f86b 	bl	80053e8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2203      	movs	r2, #3
 8007318:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800731a:	f7fd fce1 	bl	8004ce0 <HAL_GetTick>
 800731e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007320:	e029      	b.n	8007376 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007326:	f043 0210 	orr.w	r2, r3, #16
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007332:	f043 0201 	orr.w	r2, r3, #1
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e023      	b.n	8007386 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800733e:	f7fd fccf 	bl	8004ce0 <HAL_GetTick>
 8007342:	4602      	mov	r2, r0
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	2b02      	cmp	r3, #2
 800734a:	d914      	bls.n	8007376 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f003 0301 	and.w	r3, r3, #1
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00d      	beq.n	8007376 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800735e:	f043 0210 	orr.w	r2, r3, #16
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800736a:	f043 0201 	orr.w	r2, r3, #1
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e007      	b.n	8007386 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	f003 0301 	and.w	r3, r3, #1
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1dc      	bne.n	800733e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}

0800738e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b084      	sub	sp, #16
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800739a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073a0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d14b      	bne.n	8007440 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073ac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 0308 	and.w	r3, r3, #8
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d021      	beq.n	8007406 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7fd fe0a 	bl	8004fe0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d032      	beq.n	8007438 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d12b      	bne.n	8007438 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d11f      	bne.n	8007438 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073fc:	f043 0201 	orr.w	r2, r3, #1
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	661a      	str	r2, [r3, #96]	@ 0x60
 8007404:	e018      	b.n	8007438 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	f003 0303 	and.w	r3, r3, #3
 8007410:	2b00      	cmp	r3, #0
 8007412:	d111      	bne.n	8007438 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007418:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007424:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007428:	2b00      	cmp	r3, #0
 800742a:	d105      	bne.n	8007438 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007430:	f043 0201 	orr.w	r2, r3, #1
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f7fa fd67 	bl	8001f0c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800743e:	e00e      	b.n	800745e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007444:	f003 0310 	and.w	r3, r3, #16
 8007448:	2b00      	cmp	r3, #0
 800744a:	d003      	beq.n	8007454 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	f7fa fd31 	bl	8001eb4 <HAL_ADC_ErrorCallback>
}
 8007452:	e004      	b.n	800745e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	4798      	blx	r3
}
 800745e:	bf00      	nop
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b084      	sub	sp, #16
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007472:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f7fe fdd3 	bl	8006020 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800747a:	bf00      	nop
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b084      	sub	sp, #16
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800748e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007494:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074a0:	f043 0204 	orr.w	r2, r3, #4
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f7fa fd03 	bl	8001eb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80074ae:	bf00      	nop
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
	...

080074b8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a6c      	ldr	r2, [pc, #432]	@ (8007678 <ADC_ConfigureBoostMode+0x1c0>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d004      	beq.n	80074d4 <ADC_ConfigureBoostMode+0x1c>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a6b      	ldr	r2, [pc, #428]	@ (800767c <ADC_ConfigureBoostMode+0x1c4>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d109      	bne.n	80074e8 <ADC_ConfigureBoostMode+0x30>
 80074d4:	4b6a      	ldr	r3, [pc, #424]	@ (8007680 <ADC_ConfigureBoostMode+0x1c8>)
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	bf14      	ite	ne
 80074e0:	2301      	movne	r3, #1
 80074e2:	2300      	moveq	r3, #0
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	e008      	b.n	80074fa <ADC_ConfigureBoostMode+0x42>
 80074e8:	4b66      	ldr	r3, [pc, #408]	@ (8007684 <ADC_ConfigureBoostMode+0x1cc>)
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	bf14      	ite	ne
 80074f4:	2301      	movne	r3, #1
 80074f6:	2300      	moveq	r3, #0
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d01c      	beq.n	8007538 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80074fe:	f004 fda9 	bl	800c054 <HAL_RCC_GetHCLKFreq>
 8007502:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800750c:	d010      	beq.n	8007530 <ADC_ConfigureBoostMode+0x78>
 800750e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007512:	d873      	bhi.n	80075fc <ADC_ConfigureBoostMode+0x144>
 8007514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007518:	d002      	beq.n	8007520 <ADC_ConfigureBoostMode+0x68>
 800751a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800751e:	d16d      	bne.n	80075fc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	0c1b      	lsrs	r3, r3, #16
 8007526:	68fa      	ldr	r2, [r7, #12]
 8007528:	fbb2 f3f3 	udiv	r3, r2, r3
 800752c:	60fb      	str	r3, [r7, #12]
        break;
 800752e:	e068      	b.n	8007602 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	089b      	lsrs	r3, r3, #2
 8007534:	60fb      	str	r3, [r7, #12]
        break;
 8007536:	e064      	b.n	8007602 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8007538:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800753c:	f04f 0100 	mov.w	r1, #0
 8007540:	f005 ff84 	bl	800d44c <HAL_RCCEx_GetPeriphCLKFreq>
 8007544:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800754e:	d051      	beq.n	80075f4 <ADC_ConfigureBoostMode+0x13c>
 8007550:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8007554:	d854      	bhi.n	8007600 <ADC_ConfigureBoostMode+0x148>
 8007556:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800755a:	d047      	beq.n	80075ec <ADC_ConfigureBoostMode+0x134>
 800755c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8007560:	d84e      	bhi.n	8007600 <ADC_ConfigureBoostMode+0x148>
 8007562:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8007566:	d03d      	beq.n	80075e4 <ADC_ConfigureBoostMode+0x12c>
 8007568:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800756c:	d848      	bhi.n	8007600 <ADC_ConfigureBoostMode+0x148>
 800756e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007572:	d033      	beq.n	80075dc <ADC_ConfigureBoostMode+0x124>
 8007574:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007578:	d842      	bhi.n	8007600 <ADC_ConfigureBoostMode+0x148>
 800757a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800757e:	d029      	beq.n	80075d4 <ADC_ConfigureBoostMode+0x11c>
 8007580:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8007584:	d83c      	bhi.n	8007600 <ADC_ConfigureBoostMode+0x148>
 8007586:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800758a:	d01a      	beq.n	80075c2 <ADC_ConfigureBoostMode+0x10a>
 800758c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007590:	d836      	bhi.n	8007600 <ADC_ConfigureBoostMode+0x148>
 8007592:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8007596:	d014      	beq.n	80075c2 <ADC_ConfigureBoostMode+0x10a>
 8007598:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800759c:	d830      	bhi.n	8007600 <ADC_ConfigureBoostMode+0x148>
 800759e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075a2:	d00e      	beq.n	80075c2 <ADC_ConfigureBoostMode+0x10a>
 80075a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075a8:	d82a      	bhi.n	8007600 <ADC_ConfigureBoostMode+0x148>
 80075aa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80075ae:	d008      	beq.n	80075c2 <ADC_ConfigureBoostMode+0x10a>
 80075b0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80075b4:	d824      	bhi.n	8007600 <ADC_ConfigureBoostMode+0x148>
 80075b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80075ba:	d002      	beq.n	80075c2 <ADC_ConfigureBoostMode+0x10a>
 80075bc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80075c0:	d11e      	bne.n	8007600 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	0c9b      	lsrs	r3, r3, #18
 80075c8:	005b      	lsls	r3, r3, #1
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80075d0:	60fb      	str	r3, [r7, #12]
        break;
 80075d2:	e016      	b.n	8007602 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	091b      	lsrs	r3, r3, #4
 80075d8:	60fb      	str	r3, [r7, #12]
        break;
 80075da:	e012      	b.n	8007602 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	095b      	lsrs	r3, r3, #5
 80075e0:	60fb      	str	r3, [r7, #12]
        break;
 80075e2:	e00e      	b.n	8007602 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	099b      	lsrs	r3, r3, #6
 80075e8:	60fb      	str	r3, [r7, #12]
        break;
 80075ea:	e00a      	b.n	8007602 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	09db      	lsrs	r3, r3, #7
 80075f0:	60fb      	str	r3, [r7, #12]
        break;
 80075f2:	e006      	b.n	8007602 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	0a1b      	lsrs	r3, r3, #8
 80075f8:	60fb      	str	r3, [r7, #12]
        break;
 80075fa:	e002      	b.n	8007602 <ADC_ConfigureBoostMode+0x14a>
        break;
 80075fc:	bf00      	nop
 80075fe:	e000      	b.n	8007602 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8007600:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	085b      	lsrs	r3, r3, #1
 8007606:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	4a1f      	ldr	r2, [pc, #124]	@ (8007688 <ADC_ConfigureBoostMode+0x1d0>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d808      	bhi.n	8007622 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	689a      	ldr	r2, [r3, #8]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800761e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8007620:	e025      	b.n	800766e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	4a19      	ldr	r2, [pc, #100]	@ (800768c <ADC_ConfigureBoostMode+0x1d4>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d80a      	bhi.n	8007640 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800763c:	609a      	str	r2, [r3, #8]
}
 800763e:	e016      	b.n	800766e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	4a13      	ldr	r2, [pc, #76]	@ (8007690 <ADC_ConfigureBoostMode+0x1d8>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d80a      	bhi.n	800765e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800765a:	609a      	str	r2, [r3, #8]
}
 800765c:	e007      	b.n	800766e <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	689a      	ldr	r2, [r3, #8]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800766c:	609a      	str	r2, [r3, #8]
}
 800766e:	bf00      	nop
 8007670:	3710      	adds	r7, #16
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	40022000 	.word	0x40022000
 800767c:	40022100 	.word	0x40022100
 8007680:	40022300 	.word	0x40022300
 8007684:	58026300 	.word	0x58026300
 8007688:	005f5e10 	.word	0x005f5e10
 800768c:	00bebc20 	.word	0x00bebc20
 8007690:	017d7840 	.word	0x017d7840

08007694 <LL_ADC_IsEnabled>:
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f003 0301 	and.w	r3, r3, #1
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d101      	bne.n	80076ac <LL_ADC_IsEnabled+0x18>
 80076a8:	2301      	movs	r3, #1
 80076aa:	e000      	b.n	80076ae <LL_ADC_IsEnabled+0x1a>
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	370c      	adds	r7, #12
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
	...

080076bc <LL_ADC_StartCalibration>:
{
 80076bc:	b480      	push	{r7}
 80076be:	b085      	sub	sp, #20
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	689a      	ldr	r2, [r3, #8]
 80076cc:	4b09      	ldr	r3, [pc, #36]	@ (80076f4 <LL_ADC_StartCalibration+0x38>)
 80076ce:	4013      	ands	r3, r2
 80076d0:	68ba      	ldr	r2, [r7, #8]
 80076d2:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80076dc:	430a      	orrs	r2, r1
 80076de:	4313      	orrs	r3, r2
 80076e0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	609a      	str	r2, [r3, #8]
}
 80076e8:	bf00      	nop
 80076ea:	3714      	adds	r7, #20
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr
 80076f4:	3ffeffc0 	.word	0x3ffeffc0

080076f8 <LL_ADC_IsCalibrationOnGoing>:
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007708:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800770c:	d101      	bne.n	8007712 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800770e:	2301      	movs	r3, #1
 8007710:	e000      	b.n	8007714 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <LL_ADC_REG_StartConversion>:
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	689a      	ldr	r2, [r3, #8]
 800772c:	4b05      	ldr	r3, [pc, #20]	@ (8007744 <LL_ADC_REG_StartConversion+0x24>)
 800772e:	4013      	ands	r3, r2
 8007730:	f043 0204 	orr.w	r2, r3, #4
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	609a      	str	r2, [r3, #8]
}
 8007738:	bf00      	nop
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr
 8007744:	7fffffc0 	.word	0x7fffffc0

08007748 <LL_ADC_REG_IsConversionOngoing>:
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	f003 0304 	and.w	r3, r3, #4
 8007758:	2b04      	cmp	r3, #4
 800775a:	d101      	bne.n	8007760 <LL_ADC_REG_IsConversionOngoing+0x18>
 800775c:	2301      	movs	r3, #1
 800775e:	e000      	b.n	8007762 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	370c      	adds	r7, #12
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
	...

08007770 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800777c:	2300      	movs	r3, #0
 800777e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007786:	2b01      	cmp	r3, #1
 8007788:	d101      	bne.n	800778e <HAL_ADCEx_Calibration_Start+0x1e>
 800778a:	2302      	movs	r3, #2
 800778c:	e04c      	b.n	8007828 <HAL_ADCEx_Calibration_Start+0xb8>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2201      	movs	r2, #1
 8007792:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f7ff fd9a 	bl	80072d0 <ADC_Disable>
 800779c:	4603      	mov	r3, r0
 800779e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80077a0:	7dfb      	ldrb	r3, [r7, #23]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d135      	bne.n	8007812 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80077aa:	4b21      	ldr	r3, [pc, #132]	@ (8007830 <HAL_ADCEx_Calibration_Start+0xc0>)
 80077ac:	4013      	ands	r3, r2
 80077ae:	f043 0202 	orr.w	r2, r3, #2
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	661a      	str	r2, [r3, #96]	@ 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	68b9      	ldr	r1, [r7, #8]
 80077be:	4618      	mov	r0, r3
 80077c0:	f7ff ff7c 	bl	80076bc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80077c4:	e014      	b.n	80077f0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	3301      	adds	r3, #1
 80077ca:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	4a19      	ldr	r2, [pc, #100]	@ (8007834 <HAL_ADCEx_Calibration_Start+0xc4>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d30d      	bcc.n	80077f0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077d8:	f023 0312 	bic.w	r3, r3, #18
 80077dc:	f043 0210 	orr.w	r2, r3, #16
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e01b      	b.n	8007828 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7ff ff7f 	bl	80076f8 <LL_ADC_IsCalibrationOnGoing>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1e2      	bne.n	80077c6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007804:	f023 0303 	bic.w	r3, r3, #3
 8007808:	f043 0201 	orr.w	r2, r3, #1
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	661a      	str	r2, [r3, #96]	@ 0x60
 8007810:	e005      	b.n	800781e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007816:	f043 0210 	orr.w	r2, r3, #16
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8007826:	7dfb      	ldrb	r3, [r7, #23]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3718      	adds	r7, #24
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	ffffeefd 	.word	0xffffeefd
 8007834:	25c3f800 	.word	0x25c3f800

08007838 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b0a2      	sub	sp, #136	@ 0x88
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4618      	mov	r0, r3
 800784a:	f7ff ff7d 	bl	8007748 <LL_ADC_REG_IsConversionOngoing>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d001      	beq.n	8007858 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8007854:	2302      	movs	r3, #2
 8007856:	e08c      	b.n	8007972 <HAL_ADCEx_MultiModeStart_DMA+0x13a>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800785e:	2b01      	cmp	r3, #1
 8007860:	d101      	bne.n	8007866 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8007862:	2302      	movs	r3, #2
 8007864:	e085      	b.n	8007972 <HAL_ADCEx_MultiModeStart_DMA+0x13a>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2201      	movs	r2, #1
 800786a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800786e:	2300      	movs	r3, #0
 8007870:	673b      	str	r3, [r7, #112]	@ 0x70
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8007872:	2300      	movs	r3, #0
 8007874:	677b      	str	r3, [r7, #116]	@ 0x74
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a40      	ldr	r2, [pc, #256]	@ (800797c <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d102      	bne.n	8007886 <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 8007880:	4b3f      	ldr	r3, [pc, #252]	@ (8007980 <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 8007882:	613b      	str	r3, [r7, #16]
 8007884:	e001      	b.n	800788a <HAL_ADCEx_MultiModeStart_DMA+0x52>
 8007886:	2300      	movs	r3, #0
 8007888:	613b      	str	r3, [r7, #16]

    if (tmphadcSlave.Instance == NULL)
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10b      	bne.n	80078a8 <HAL_ADCEx_MultiModeStart_DMA+0x70>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007894:	f043 0220 	orr.w	r2, r3, #32
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e064      	b.n	8007972 <HAL_ADCEx_MultiModeStart_DMA+0x13a>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f7ff fc87 	bl	80071bc <ADC_Enable>
 80078ae:	4603      	mov	r3, r0
 80078b0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    if (tmp_hal_status == HAL_OK)
 80078b4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d107      	bne.n	80078cc <HAL_ADCEx_MultiModeStart_DMA+0x94>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 80078bc:	f107 0310 	add.w	r3, r7, #16
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7ff fc7b 	bl	80071bc <ADC_Enable>
 80078c6:	4603      	mov	r3, r0
 80078c8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 80078cc:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d148      	bne.n	8007966 <HAL_ADCEx_MultiModeStart_DMA+0x12e>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80078d8:	4b2a      	ldr	r3, [pc, #168]	@ (8007984 <HAL_ADCEx_MultiModeStart_DMA+0x14c>)
 80078da:	4013      	ands	r3, r2
 80078dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	661a      	str	r2, [r3, #96]	@ 0x60
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2200      	movs	r2, #0
 80078e8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078ee:	4a26      	ldr	r2, [pc, #152]	@ (8007988 <HAL_ADCEx_MultiModeStart_DMA+0x150>)
 80078f0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078f6:	4a25      	ldr	r2, [pc, #148]	@ (800798c <HAL_ADCEx_MultiModeStart_DMA+0x154>)
 80078f8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078fe:	4a24      	ldr	r2, [pc, #144]	@ (8007990 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 8007900:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a1d      	ldr	r2, [pc, #116]	@ (800797c <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d004      	beq.n	8007916 <HAL_ADCEx_MultiModeStart_DMA+0xde>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a1b      	ldr	r2, [pc, #108]	@ (8007980 <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d101      	bne.n	800791a <HAL_ADCEx_MultiModeStart_DMA+0xe2>
 8007916:	4b1f      	ldr	r3, [pc, #124]	@ (8007994 <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 8007918:	e000      	b.n	800791c <HAL_ADCEx_MultiModeStart_DMA+0xe4>
 800791a:	4b1f      	ldr	r3, [pc, #124]	@ (8007998 <HAL_ADCEx_MultiModeStart_DMA+0x160>)
 800791c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	221c      	movs	r2, #28
 8007926:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2200      	movs	r2, #0
 800792c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	685a      	ldr	r2, [r3, #4]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f042 0210 	orr.w	r2, r2, #16
 800793e:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8007944:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007948:	330c      	adds	r3, #12
 800794a:	4619      	mov	r1, r3
 800794c:	68ba      	ldr	r2, [r7, #8]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f000 feca 	bl	80086e8 <HAL_DMA_Start_IT>
 8007954:	4603      	mov	r3, r0
 8007956:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4618      	mov	r0, r3
 8007960:	f7ff fede 	bl	8007720 <LL_ADC_REG_StartConversion>
 8007964:	e003      	b.n	800796e <HAL_ADCEx_MultiModeStart_DMA+0x136>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2200      	movs	r2, #0
 800796a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    }

    /* Return function status */
    return tmp_hal_status;
 800796e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
  }
}
 8007972:	4618      	mov	r0, r3
 8007974:	3788      	adds	r7, #136	@ 0x88
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	40022000 	.word	0x40022000
 8007980:	40022100 	.word	0x40022100
 8007984:	fffff0fe 	.word	0xfffff0fe
 8007988:	0800738f 	.word	0x0800738f
 800798c:	08007467 	.word	0x08007467
 8007990:	08007483 	.word	0x08007483
 8007994:	40022300 	.word	0x40022300
 8007998:	58026300 	.word	0x58026300

0800799c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80079a4:	bf00      	nop
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80079b8:	bf00      	nop
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80079cc:	bf00      	nop
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80079e0:	bf00      	nop
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80079f4:	bf00      	nop
 80079f6:	370c      	adds	r7, #12
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8007a00:	b590      	push	{r4, r7, lr}
 8007a02:	b0a3      	sub	sp, #140	@ 0x8c
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d101      	bne.n	8007a1e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007a1a:	2302      	movs	r3, #2
 8007a1c:	e0c1      	b.n	8007ba2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8007a26:	2300      	movs	r3, #0
 8007a28:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a5e      	ldr	r2, [pc, #376]	@ (8007bac <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d102      	bne.n	8007a3e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007a38:	4b5d      	ldr	r3, [pc, #372]	@ (8007bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007a3a:	60fb      	str	r3, [r7, #12]
 8007a3c:	e001      	b.n	8007a42 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8007a3e:	2300      	movs	r3, #0
 8007a40:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d10b      	bne.n	8007a60 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a4c:	f043 0220 	orr.w	r2, r3, #32
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e0a0      	b.n	8007ba2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7ff fe70 	bl	8007748 <LL_ADC_REG_IsConversionOngoing>
 8007a68:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7ff fe69 	bl	8007748 <LL_ADC_REG_IsConversionOngoing>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f040 8081 	bne.w	8007b80 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8007a7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d17c      	bne.n	8007b80 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a48      	ldr	r2, [pc, #288]	@ (8007bac <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d004      	beq.n	8007a9a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a46      	ldr	r2, [pc, #280]	@ (8007bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d101      	bne.n	8007a9e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8007a9a:	4b46      	ldr	r3, [pc, #280]	@ (8007bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8007a9c:	e000      	b.n	8007aa0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8007a9e:	4b46      	ldr	r3, [pc, #280]	@ (8007bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8007aa0:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d039      	beq.n	8007b1e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8007aaa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007aba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a3a      	ldr	r2, [pc, #232]	@ (8007bac <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d004      	beq.n	8007ad0 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a39      	ldr	r2, [pc, #228]	@ (8007bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d10e      	bne.n	8007aee <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8007ad0:	4836      	ldr	r0, [pc, #216]	@ (8007bac <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007ad2:	f7ff fddf 	bl	8007694 <LL_ADC_IsEnabled>
 8007ad6:	4604      	mov	r4, r0
 8007ad8:	4835      	ldr	r0, [pc, #212]	@ (8007bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007ada:	f7ff fddb 	bl	8007694 <LL_ADC_IsEnabled>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	4323      	orrs	r3, r4
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	bf0c      	ite	eq
 8007ae6:	2301      	moveq	r3, #1
 8007ae8:	2300      	movne	r3, #0
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	e008      	b.n	8007b00 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8007aee:	4833      	ldr	r0, [pc, #204]	@ (8007bbc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8007af0:	f7ff fdd0 	bl	8007694 <LL_ADC_IsEnabled>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	bf0c      	ite	eq
 8007afa:	2301      	moveq	r3, #1
 8007afc:	2300      	movne	r3, #0
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d047      	beq.n	8007b94 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007b04:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007b06:	689a      	ldr	r2, [r3, #8]
 8007b08:	4b2d      	ldr	r3, [pc, #180]	@ (8007bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	683a      	ldr	r2, [r7, #0]
 8007b0e:	6811      	ldr	r1, [r2, #0]
 8007b10:	683a      	ldr	r2, [r7, #0]
 8007b12:	6892      	ldr	r2, [r2, #8]
 8007b14:	430a      	orrs	r2, r1
 8007b16:	431a      	orrs	r2, r3
 8007b18:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007b1a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007b1c:	e03a      	b.n	8007b94 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8007b1e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007b26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007b28:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a1f      	ldr	r2, [pc, #124]	@ (8007bac <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d004      	beq.n	8007b3e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a1d      	ldr	r2, [pc, #116]	@ (8007bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d10e      	bne.n	8007b5c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8007b3e:	481b      	ldr	r0, [pc, #108]	@ (8007bac <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007b40:	f7ff fda8 	bl	8007694 <LL_ADC_IsEnabled>
 8007b44:	4604      	mov	r4, r0
 8007b46:	481a      	ldr	r0, [pc, #104]	@ (8007bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007b48:	f7ff fda4 	bl	8007694 <LL_ADC_IsEnabled>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	4323      	orrs	r3, r4
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	bf0c      	ite	eq
 8007b54:	2301      	moveq	r3, #1
 8007b56:	2300      	movne	r3, #0
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	e008      	b.n	8007b6e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8007b5c:	4817      	ldr	r0, [pc, #92]	@ (8007bbc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8007b5e:	f7ff fd99 	bl	8007694 <LL_ADC_IsEnabled>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	bf0c      	ite	eq
 8007b68:	2301      	moveq	r3, #1
 8007b6a:	2300      	movne	r3, #0
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d010      	beq.n	8007b94 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007b72:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007b74:	689a      	ldr	r2, [r3, #8]
 8007b76:	4b12      	ldr	r3, [pc, #72]	@ (8007bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007b78:	4013      	ands	r3, r2
 8007b7a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007b7c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007b7e:	e009      	b.n	8007b94 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b84:	f043 0220 	orr.w	r2, r3, #32
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8007b92:	e000      	b.n	8007b96 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007b94:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8007b9e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	378c      	adds	r7, #140	@ 0x8c
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd90      	pop	{r4, r7, pc}
 8007baa:	bf00      	nop
 8007bac:	40022000 	.word	0x40022000
 8007bb0:	40022100 	.word	0x40022100
 8007bb4:	40022300 	.word	0x40022300
 8007bb8:	58026300 	.word	0x58026300
 8007bbc:	58026000 	.word	0x58026000
 8007bc0:	fffff0e0 	.word	0xfffff0e0

08007bc4 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b088      	sub	sp, #32
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d102      	bne.n	8007be0 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	77fb      	strb	r3, [r7, #31]
 8007bde:	e10e      	b.n	8007dfe <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007bea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007bee:	d102      	bne.n	8007bf6 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	77fb      	strb	r3, [r7, #31]
 8007bf4:	e103      	b.n	8007dfe <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d109      	bne.n	8007c16 <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f7fc fab9 	bl	8004188 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f003 0304 	and.w	r3, r3, #4
 8007c20:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8007c2a:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 8007c30:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 8007c36:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 8007c3c:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8007c42:	4313      	orrs	r3, r2
 8007c44:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	4b6e      	ldr	r3, [pc, #440]	@ (8007e08 <HAL_COMP_Init+0x244>)
 8007c4e:	4013      	ands	r3, r2
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	6812      	ldr	r2, [r2, #0]
 8007c54:	6979      	ldr	r1, [r7, #20]
 8007c56:	430b      	orrs	r3, r1
 8007c58:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	2b10      	cmp	r3, #16
 8007c60:	d108      	bne.n	8007c74 <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f042 0210 	orr.w	r2, r2, #16
 8007c70:	601a      	str	r2, [r3, #0]
 8007c72:	e007      	b.n	8007c84 <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f022 0210 	bic.w	r2, r2, #16
 8007c82:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f003 0304 	and.w	r3, r3, #4
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d016      	beq.n	8007cc0 <HAL_COMP_Init+0xfc>
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d013      	beq.n	8007cc0 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007c98:	4b5c      	ldr	r3, [pc, #368]	@ (8007e0c <HAL_COMP_Init+0x248>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	099b      	lsrs	r3, r3, #6
 8007c9e:	4a5c      	ldr	r2, [pc, #368]	@ (8007e10 <HAL_COMP_Init+0x24c>)
 8007ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca4:	099b      	lsrs	r3, r3, #6
 8007ca6:	1c5a      	adds	r2, r3, #1
 8007ca8:	4613      	mov	r3, r2
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	4413      	add	r3, r2
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 8007cb2:	e002      	b.n	8007cba <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1f9      	bne.n	8007cb4 <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a53      	ldr	r2, [pc, #332]	@ (8007e14 <HAL_COMP_Init+0x250>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d102      	bne.n	8007cd0 <HAL_COMP_Init+0x10c>
 8007cca:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007cce:	e001      	b.n	8007cd4 <HAL_COMP_Init+0x110>
 8007cd0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007cd4:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a1b      	ldr	r3, [r3, #32]
 8007cda:	f003 0303 	and.w	r3, r3, #3
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d06d      	beq.n	8007dbe <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
 8007ce6:	f003 0310 	and.w	r3, r3, #16
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d008      	beq.n	8007d00 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 8007cee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	600b      	str	r3, [r1, #0]
 8007cfe:	e008      	b.n	8007d12 <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 8007d00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	43db      	mvns	r3, r3
 8007d0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007d0e:	4013      	ands	r3, r2
 8007d10:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a1b      	ldr	r3, [r3, #32]
 8007d16:	f003 0320 	and.w	r3, r3, #32
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d008      	beq.n	8007d30 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 8007d1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d22:	685a      	ldr	r2, [r3, #4]
 8007d24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	604b      	str	r3, [r1, #4]
 8007d2e:	e008      	b.n	8007d42 <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 8007d30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d34:	685a      	ldr	r2, [r3, #4]
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	43db      	mvns	r3, r3
 8007d3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007d3e:	4013      	ands	r3, r2
 8007d40:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 8007d42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6a1b      	ldr	r3, [r3, #32]
 8007d50:	f003 0302 	and.w	r3, r3, #2
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00a      	beq.n	8007d6e <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 8007d58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d5c:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007d60:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 8007d6c:	e00a      	b.n	8007d84 <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 8007d6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d72:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	43db      	mvns	r3, r3
 8007d7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007d7e:	4013      	ands	r3, r2
 8007d80:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6a1b      	ldr	r3, [r3, #32]
 8007d88:	f003 0301 	and.w	r3, r3, #1
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00a      	beq.n	8007da6 <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 8007d90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d94:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8007d98:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 8007da4:	e021      	b.n	8007dea <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 8007da6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007daa:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	43db      	mvns	r3, r3
 8007db2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007db6:	4013      	ands	r3, r2
 8007db8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 8007dbc:	e015      	b.n	8007dea <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 8007dbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007dc2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	43db      	mvns	r3, r3
 8007dca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007dce:	4013      	ands	r3, r2
 8007dd0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 8007dd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007dd8:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	43db      	mvns	r3, r3
 8007de0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007de4:	4013      	ands	r3, r2
 8007de6:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d103      	bne.n	8007dfe <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
   
  }
  
  return status;
 8007dfe:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3720      	adds	r7, #32
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	f0e8cce1 	.word	0xf0e8cce1
 8007e0c:	24000038 	.word	0x24000038
 8007e10:	053e2d63 	.word	0x053e2d63
 8007e14:	5800380c 	.word	0x5800380c

08007e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f003 0307 	and.w	r3, r3, #7
 8007e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e28:	4b0b      	ldr	r3, [pc, #44]	@ (8007e58 <__NVIC_SetPriorityGrouping+0x40>)
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007e2e:	68ba      	ldr	r2, [r7, #8]
 8007e30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007e34:	4013      	ands	r3, r2
 8007e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007e40:	4b06      	ldr	r3, [pc, #24]	@ (8007e5c <__NVIC_SetPriorityGrouping+0x44>)
 8007e42:	4313      	orrs	r3, r2
 8007e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007e46:	4a04      	ldr	r2, [pc, #16]	@ (8007e58 <__NVIC_SetPriorityGrouping+0x40>)
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	60d3      	str	r3, [r2, #12]
}
 8007e4c:	bf00      	nop
 8007e4e:	3714      	adds	r7, #20
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr
 8007e58:	e000ed00 	.word	0xe000ed00
 8007e5c:	05fa0000 	.word	0x05fa0000

08007e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007e60:	b480      	push	{r7}
 8007e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e64:	4b04      	ldr	r3, [pc, #16]	@ (8007e78 <__NVIC_GetPriorityGrouping+0x18>)
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	0a1b      	lsrs	r3, r3, #8
 8007e6a:	f003 0307 	and.w	r3, r3, #7
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr
 8007e78:	e000ed00 	.word	0xe000ed00

08007e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	4603      	mov	r3, r0
 8007e84:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007e86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	db0b      	blt.n	8007ea6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e8e:	88fb      	ldrh	r3, [r7, #6]
 8007e90:	f003 021f 	and.w	r2, r3, #31
 8007e94:	4907      	ldr	r1, [pc, #28]	@ (8007eb4 <__NVIC_EnableIRQ+0x38>)
 8007e96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e9a:	095b      	lsrs	r3, r3, #5
 8007e9c:	2001      	movs	r0, #1
 8007e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8007ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007ea6:	bf00      	nop
 8007ea8:	370c      	adds	r7, #12
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	e000e100 	.word	0xe000e100

08007eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	6039      	str	r1, [r7, #0]
 8007ec2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007ec4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	db0a      	blt.n	8007ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	b2da      	uxtb	r2, r3
 8007ed0:	490c      	ldr	r1, [pc, #48]	@ (8007f04 <__NVIC_SetPriority+0x4c>)
 8007ed2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ed6:	0112      	lsls	r2, r2, #4
 8007ed8:	b2d2      	uxtb	r2, r2
 8007eda:	440b      	add	r3, r1
 8007edc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007ee0:	e00a      	b.n	8007ef8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	b2da      	uxtb	r2, r3
 8007ee6:	4908      	ldr	r1, [pc, #32]	@ (8007f08 <__NVIC_SetPriority+0x50>)
 8007ee8:	88fb      	ldrh	r3, [r7, #6]
 8007eea:	f003 030f 	and.w	r3, r3, #15
 8007eee:	3b04      	subs	r3, #4
 8007ef0:	0112      	lsls	r2, r2, #4
 8007ef2:	b2d2      	uxtb	r2, r2
 8007ef4:	440b      	add	r3, r1
 8007ef6:	761a      	strb	r2, [r3, #24]
}
 8007ef8:	bf00      	nop
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr
 8007f04:	e000e100 	.word	0xe000e100
 8007f08:	e000ed00 	.word	0xe000ed00

08007f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b089      	sub	sp, #36	@ 0x24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f003 0307 	and.w	r3, r3, #7
 8007f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	f1c3 0307 	rsb	r3, r3, #7
 8007f26:	2b04      	cmp	r3, #4
 8007f28:	bf28      	it	cs
 8007f2a:	2304      	movcs	r3, #4
 8007f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	3304      	adds	r3, #4
 8007f32:	2b06      	cmp	r3, #6
 8007f34:	d902      	bls.n	8007f3c <NVIC_EncodePriority+0x30>
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	3b03      	subs	r3, #3
 8007f3a:	e000      	b.n	8007f3e <NVIC_EncodePriority+0x32>
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	fa02 f303 	lsl.w	r3, r2, r3
 8007f4a:	43da      	mvns	r2, r3
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	401a      	ands	r2, r3
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f54:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f5e:	43d9      	mvns	r1, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f64:	4313      	orrs	r3, r2
         );
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3724      	adds	r7, #36	@ 0x24
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
	...

08007f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	3b01      	subs	r3, #1
 8007f80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f84:	d301      	bcc.n	8007f8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007f86:	2301      	movs	r3, #1
 8007f88:	e00f      	b.n	8007faa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8007fb4 <SysTick_Config+0x40>)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007f92:	210f      	movs	r1, #15
 8007f94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f98:	f7ff ff8e 	bl	8007eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007f9c:	4b05      	ldr	r3, [pc, #20]	@ (8007fb4 <SysTick_Config+0x40>)
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007fa2:	4b04      	ldr	r3, [pc, #16]	@ (8007fb4 <SysTick_Config+0x40>)
 8007fa4:	2207      	movs	r2, #7
 8007fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3708      	adds	r7, #8
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	e000e010 	.word	0xe000e010

08007fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f7ff ff29 	bl	8007e18 <__NVIC_SetPriorityGrouping>
}
 8007fc6:	bf00      	nop
 8007fc8:	3708      	adds	r7, #8
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b086      	sub	sp, #24
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	60b9      	str	r1, [r7, #8]
 8007fd8:	607a      	str	r2, [r7, #4]
 8007fda:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007fdc:	f7ff ff40 	bl	8007e60 <__NVIC_GetPriorityGrouping>
 8007fe0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	68b9      	ldr	r1, [r7, #8]
 8007fe6:	6978      	ldr	r0, [r7, #20]
 8007fe8:	f7ff ff90 	bl	8007f0c <NVIC_EncodePriority>
 8007fec:	4602      	mov	r2, r0
 8007fee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007ff2:	4611      	mov	r1, r2
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7ff ff5f 	bl	8007eb8 <__NVIC_SetPriority>
}
 8007ffa:	bf00      	nop
 8007ffc:	3718      	adds	r7, #24
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b082      	sub	sp, #8
 8008006:	af00      	add	r7, sp, #0
 8008008:	4603      	mov	r3, r0
 800800a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800800c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008010:	4618      	mov	r0, r3
 8008012:	f7ff ff33 	bl	8007e7c <__NVIC_EnableIRQ>
}
 8008016:	bf00      	nop
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b082      	sub	sp, #8
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f7ff ffa4 	bl	8007f74 <SysTick_Config>
 800802c:	4603      	mov	r3, r0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3708      	adds	r7, #8
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
	...

08008038 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b086      	sub	sp, #24
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8008040:	f7fc fe4e 	bl	8004ce0 <HAL_GetTick>
 8008044:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d101      	bne.n	8008050 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	e312      	b.n	8008676 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a66      	ldr	r2, [pc, #408]	@ (80081f0 <HAL_DMA_Init+0x1b8>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d04a      	beq.n	80080f0 <HAL_DMA_Init+0xb8>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a65      	ldr	r2, [pc, #404]	@ (80081f4 <HAL_DMA_Init+0x1bc>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d045      	beq.n	80080f0 <HAL_DMA_Init+0xb8>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a63      	ldr	r2, [pc, #396]	@ (80081f8 <HAL_DMA_Init+0x1c0>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d040      	beq.n	80080f0 <HAL_DMA_Init+0xb8>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a62      	ldr	r2, [pc, #392]	@ (80081fc <HAL_DMA_Init+0x1c4>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d03b      	beq.n	80080f0 <HAL_DMA_Init+0xb8>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a60      	ldr	r2, [pc, #384]	@ (8008200 <HAL_DMA_Init+0x1c8>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d036      	beq.n	80080f0 <HAL_DMA_Init+0xb8>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a5f      	ldr	r2, [pc, #380]	@ (8008204 <HAL_DMA_Init+0x1cc>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d031      	beq.n	80080f0 <HAL_DMA_Init+0xb8>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a5d      	ldr	r2, [pc, #372]	@ (8008208 <HAL_DMA_Init+0x1d0>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d02c      	beq.n	80080f0 <HAL_DMA_Init+0xb8>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a5c      	ldr	r2, [pc, #368]	@ (800820c <HAL_DMA_Init+0x1d4>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d027      	beq.n	80080f0 <HAL_DMA_Init+0xb8>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a5a      	ldr	r2, [pc, #360]	@ (8008210 <HAL_DMA_Init+0x1d8>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d022      	beq.n	80080f0 <HAL_DMA_Init+0xb8>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a59      	ldr	r2, [pc, #356]	@ (8008214 <HAL_DMA_Init+0x1dc>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d01d      	beq.n	80080f0 <HAL_DMA_Init+0xb8>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a57      	ldr	r2, [pc, #348]	@ (8008218 <HAL_DMA_Init+0x1e0>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d018      	beq.n	80080f0 <HAL_DMA_Init+0xb8>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a56      	ldr	r2, [pc, #344]	@ (800821c <HAL_DMA_Init+0x1e4>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d013      	beq.n	80080f0 <HAL_DMA_Init+0xb8>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a54      	ldr	r2, [pc, #336]	@ (8008220 <HAL_DMA_Init+0x1e8>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d00e      	beq.n	80080f0 <HAL_DMA_Init+0xb8>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a53      	ldr	r2, [pc, #332]	@ (8008224 <HAL_DMA_Init+0x1ec>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d009      	beq.n	80080f0 <HAL_DMA_Init+0xb8>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a51      	ldr	r2, [pc, #324]	@ (8008228 <HAL_DMA_Init+0x1f0>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d004      	beq.n	80080f0 <HAL_DMA_Init+0xb8>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a50      	ldr	r2, [pc, #320]	@ (800822c <HAL_DMA_Init+0x1f4>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d101      	bne.n	80080f4 <HAL_DMA_Init+0xbc>
 80080f0:	2301      	movs	r3, #1
 80080f2:	e000      	b.n	80080f6 <HAL_DMA_Init+0xbe>
 80080f4:	2300      	movs	r3, #0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f000 813c 	beq.w	8008374 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2202      	movs	r2, #2
 8008100:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a37      	ldr	r2, [pc, #220]	@ (80081f0 <HAL_DMA_Init+0x1b8>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d04a      	beq.n	80081ac <HAL_DMA_Init+0x174>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a36      	ldr	r2, [pc, #216]	@ (80081f4 <HAL_DMA_Init+0x1bc>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d045      	beq.n	80081ac <HAL_DMA_Init+0x174>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a34      	ldr	r2, [pc, #208]	@ (80081f8 <HAL_DMA_Init+0x1c0>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d040      	beq.n	80081ac <HAL_DMA_Init+0x174>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a33      	ldr	r2, [pc, #204]	@ (80081fc <HAL_DMA_Init+0x1c4>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d03b      	beq.n	80081ac <HAL_DMA_Init+0x174>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a31      	ldr	r2, [pc, #196]	@ (8008200 <HAL_DMA_Init+0x1c8>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d036      	beq.n	80081ac <HAL_DMA_Init+0x174>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a30      	ldr	r2, [pc, #192]	@ (8008204 <HAL_DMA_Init+0x1cc>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d031      	beq.n	80081ac <HAL_DMA_Init+0x174>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a2e      	ldr	r2, [pc, #184]	@ (8008208 <HAL_DMA_Init+0x1d0>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d02c      	beq.n	80081ac <HAL_DMA_Init+0x174>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a2d      	ldr	r2, [pc, #180]	@ (800820c <HAL_DMA_Init+0x1d4>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d027      	beq.n	80081ac <HAL_DMA_Init+0x174>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a2b      	ldr	r2, [pc, #172]	@ (8008210 <HAL_DMA_Init+0x1d8>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d022      	beq.n	80081ac <HAL_DMA_Init+0x174>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a2a      	ldr	r2, [pc, #168]	@ (8008214 <HAL_DMA_Init+0x1dc>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d01d      	beq.n	80081ac <HAL_DMA_Init+0x174>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a28      	ldr	r2, [pc, #160]	@ (8008218 <HAL_DMA_Init+0x1e0>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d018      	beq.n	80081ac <HAL_DMA_Init+0x174>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a27      	ldr	r2, [pc, #156]	@ (800821c <HAL_DMA_Init+0x1e4>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d013      	beq.n	80081ac <HAL_DMA_Init+0x174>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a25      	ldr	r2, [pc, #148]	@ (8008220 <HAL_DMA_Init+0x1e8>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d00e      	beq.n	80081ac <HAL_DMA_Init+0x174>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a24      	ldr	r2, [pc, #144]	@ (8008224 <HAL_DMA_Init+0x1ec>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d009      	beq.n	80081ac <HAL_DMA_Init+0x174>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a22      	ldr	r2, [pc, #136]	@ (8008228 <HAL_DMA_Init+0x1f0>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d004      	beq.n	80081ac <HAL_DMA_Init+0x174>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a21      	ldr	r2, [pc, #132]	@ (800822c <HAL_DMA_Init+0x1f4>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d108      	bne.n	80081be <HAL_DMA_Init+0x186>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f022 0201 	bic.w	r2, r2, #1
 80081ba:	601a      	str	r2, [r3, #0]
 80081bc:	e007      	b.n	80081ce <HAL_DMA_Init+0x196>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f022 0201 	bic.w	r2, r2, #1
 80081cc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80081ce:	e02f      	b.n	8008230 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80081d0:	f7fc fd86 	bl	8004ce0 <HAL_GetTick>
 80081d4:	4602      	mov	r2, r0
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	1ad3      	subs	r3, r2, r3
 80081da:	2b05      	cmp	r3, #5
 80081dc:	d928      	bls.n	8008230 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2220      	movs	r2, #32
 80081e2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2203      	movs	r2, #3
 80081e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e242      	b.n	8008676 <HAL_DMA_Init+0x63e>
 80081f0:	40020010 	.word	0x40020010
 80081f4:	40020028 	.word	0x40020028
 80081f8:	40020040 	.word	0x40020040
 80081fc:	40020058 	.word	0x40020058
 8008200:	40020070 	.word	0x40020070
 8008204:	40020088 	.word	0x40020088
 8008208:	400200a0 	.word	0x400200a0
 800820c:	400200b8 	.word	0x400200b8
 8008210:	40020410 	.word	0x40020410
 8008214:	40020428 	.word	0x40020428
 8008218:	40020440 	.word	0x40020440
 800821c:	40020458 	.word	0x40020458
 8008220:	40020470 	.word	0x40020470
 8008224:	40020488 	.word	0x40020488
 8008228:	400204a0 	.word	0x400204a0
 800822c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f003 0301 	and.w	r3, r3, #1
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1c8      	bne.n	80081d0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	4b83      	ldr	r3, [pc, #524]	@ (8008458 <HAL_DMA_Init+0x420>)
 800824a:	4013      	ands	r3, r2
 800824c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8008256:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008262:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	699b      	ldr	r3, [r3, #24]
 8008268:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800826e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6a1b      	ldr	r3, [r3, #32]
 8008274:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8008276:	697a      	ldr	r2, [r7, #20]
 8008278:	4313      	orrs	r3, r2
 800827a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008280:	2b04      	cmp	r3, #4
 8008282:	d107      	bne.n	8008294 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800828c:	4313      	orrs	r3, r2
 800828e:	697a      	ldr	r2, [r7, #20]
 8008290:	4313      	orrs	r3, r2
 8008292:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	2b28      	cmp	r3, #40	@ 0x28
 800829a:	d903      	bls.n	80082a4 <HAL_DMA_Init+0x26c>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80082a2:	d91f      	bls.n	80082e4 <HAL_DMA_Init+0x2ac>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80082aa:	d903      	bls.n	80082b4 <HAL_DMA_Init+0x27c>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	2b42      	cmp	r3, #66	@ 0x42
 80082b2:	d917      	bls.n	80082e4 <HAL_DMA_Init+0x2ac>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	2b46      	cmp	r3, #70	@ 0x46
 80082ba:	d903      	bls.n	80082c4 <HAL_DMA_Init+0x28c>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	2b48      	cmp	r3, #72	@ 0x48
 80082c2:	d90f      	bls.n	80082e4 <HAL_DMA_Init+0x2ac>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	2b4e      	cmp	r3, #78	@ 0x4e
 80082ca:	d903      	bls.n	80082d4 <HAL_DMA_Init+0x29c>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	2b52      	cmp	r3, #82	@ 0x52
 80082d2:	d907      	bls.n	80082e4 <HAL_DMA_Init+0x2ac>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	2b73      	cmp	r3, #115	@ 0x73
 80082da:	d905      	bls.n	80082e8 <HAL_DMA_Init+0x2b0>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	2b77      	cmp	r3, #119	@ 0x77
 80082e2:	d801      	bhi.n	80082e8 <HAL_DMA_Init+0x2b0>
 80082e4:	2301      	movs	r3, #1
 80082e6:	e000      	b.n	80082ea <HAL_DMA_Init+0x2b2>
 80082e8:	2300      	movs	r3, #0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d003      	beq.n	80082f6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80082f4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	697a      	ldr	r2, [r7, #20]
 80082fc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	695b      	ldr	r3, [r3, #20]
 8008304:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	f023 0307 	bic.w	r3, r3, #7
 800830c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008312:	697a      	ldr	r2, [r7, #20]
 8008314:	4313      	orrs	r3, r2
 8008316:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800831c:	2b04      	cmp	r3, #4
 800831e:	d117      	bne.n	8008350 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008324:	697a      	ldr	r2, [r7, #20]
 8008326:	4313      	orrs	r3, r2
 8008328:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00e      	beq.n	8008350 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f001 fdca 	bl	8009ecc <DMA_CheckFifoParam>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d008      	beq.n	8008350 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2240      	movs	r2, #64	@ 0x40
 8008342:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	e192      	b.n	8008676 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	697a      	ldr	r2, [r7, #20]
 8008356:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f001 fd05 	bl	8009d68 <DMA_CalcBaseAndBitshift>
 800835e:	4603      	mov	r3, r0
 8008360:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008366:	f003 031f 	and.w	r3, r3, #31
 800836a:	223f      	movs	r2, #63	@ 0x3f
 800836c:	409a      	lsls	r2, r3
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	609a      	str	r2, [r3, #8]
 8008372:	e0c8      	b.n	8008506 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a38      	ldr	r2, [pc, #224]	@ (800845c <HAL_DMA_Init+0x424>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d022      	beq.n	80083c4 <HAL_DMA_Init+0x38c>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a37      	ldr	r2, [pc, #220]	@ (8008460 <HAL_DMA_Init+0x428>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d01d      	beq.n	80083c4 <HAL_DMA_Init+0x38c>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a35      	ldr	r2, [pc, #212]	@ (8008464 <HAL_DMA_Init+0x42c>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d018      	beq.n	80083c4 <HAL_DMA_Init+0x38c>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a34      	ldr	r2, [pc, #208]	@ (8008468 <HAL_DMA_Init+0x430>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d013      	beq.n	80083c4 <HAL_DMA_Init+0x38c>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a32      	ldr	r2, [pc, #200]	@ (800846c <HAL_DMA_Init+0x434>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d00e      	beq.n	80083c4 <HAL_DMA_Init+0x38c>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a31      	ldr	r2, [pc, #196]	@ (8008470 <HAL_DMA_Init+0x438>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d009      	beq.n	80083c4 <HAL_DMA_Init+0x38c>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a2f      	ldr	r2, [pc, #188]	@ (8008474 <HAL_DMA_Init+0x43c>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d004      	beq.n	80083c4 <HAL_DMA_Init+0x38c>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a2e      	ldr	r2, [pc, #184]	@ (8008478 <HAL_DMA_Init+0x440>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d101      	bne.n	80083c8 <HAL_DMA_Init+0x390>
 80083c4:	2301      	movs	r3, #1
 80083c6:	e000      	b.n	80083ca <HAL_DMA_Init+0x392>
 80083c8:	2300      	movs	r3, #0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f000 8092 	beq.w	80084f4 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a21      	ldr	r2, [pc, #132]	@ (800845c <HAL_DMA_Init+0x424>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d021      	beq.n	800841e <HAL_DMA_Init+0x3e6>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a20      	ldr	r2, [pc, #128]	@ (8008460 <HAL_DMA_Init+0x428>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d01c      	beq.n	800841e <HAL_DMA_Init+0x3e6>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a1e      	ldr	r2, [pc, #120]	@ (8008464 <HAL_DMA_Init+0x42c>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d017      	beq.n	800841e <HAL_DMA_Init+0x3e6>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a1d      	ldr	r2, [pc, #116]	@ (8008468 <HAL_DMA_Init+0x430>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d012      	beq.n	800841e <HAL_DMA_Init+0x3e6>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a1b      	ldr	r2, [pc, #108]	@ (800846c <HAL_DMA_Init+0x434>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d00d      	beq.n	800841e <HAL_DMA_Init+0x3e6>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a1a      	ldr	r2, [pc, #104]	@ (8008470 <HAL_DMA_Init+0x438>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d008      	beq.n	800841e <HAL_DMA_Init+0x3e6>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a18      	ldr	r2, [pc, #96]	@ (8008474 <HAL_DMA_Init+0x43c>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d003      	beq.n	800841e <HAL_DMA_Init+0x3e6>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a17      	ldr	r2, [pc, #92]	@ (8008478 <HAL_DMA_Init+0x440>)
 800841c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2202      	movs	r2, #2
 8008422:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8008436:	697a      	ldr	r2, [r7, #20]
 8008438:	4b10      	ldr	r3, [pc, #64]	@ (800847c <HAL_DMA_Init+0x444>)
 800843a:	4013      	ands	r3, r2
 800843c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	2b40      	cmp	r3, #64	@ 0x40
 8008444:	d01c      	beq.n	8008480 <HAL_DMA_Init+0x448>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	2b80      	cmp	r3, #128	@ 0x80
 800844c:	d102      	bne.n	8008454 <HAL_DMA_Init+0x41c>
 800844e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008452:	e016      	b.n	8008482 <HAL_DMA_Init+0x44a>
 8008454:	2300      	movs	r3, #0
 8008456:	e014      	b.n	8008482 <HAL_DMA_Init+0x44a>
 8008458:	fe10803f 	.word	0xfe10803f
 800845c:	58025408 	.word	0x58025408
 8008460:	5802541c 	.word	0x5802541c
 8008464:	58025430 	.word	0x58025430
 8008468:	58025444 	.word	0x58025444
 800846c:	58025458 	.word	0x58025458
 8008470:	5802546c 	.word	0x5802546c
 8008474:	58025480 	.word	0x58025480
 8008478:	58025494 	.word	0x58025494
 800847c:	fffe000f 	.word	0xfffe000f
 8008480:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	68d2      	ldr	r2, [r2, #12]
 8008486:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008488:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8008490:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	695b      	ldr	r3, [r3, #20]
 8008496:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8008498:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	699b      	ldr	r3, [r3, #24]
 800849e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80084a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	69db      	ldr	r3, [r3, #28]
 80084a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80084a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a1b      	ldr	r3, [r3, #32]
 80084ae:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80084b0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80084b2:	697a      	ldr	r2, [r7, #20]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	697a      	ldr	r2, [r7, #20]
 80084be:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	461a      	mov	r2, r3
 80084c6:	4b6e      	ldr	r3, [pc, #440]	@ (8008680 <HAL_DMA_Init+0x648>)
 80084c8:	4413      	add	r3, r2
 80084ca:	4a6e      	ldr	r2, [pc, #440]	@ (8008684 <HAL_DMA_Init+0x64c>)
 80084cc:	fba2 2303 	umull	r2, r3, r2, r3
 80084d0:	091b      	lsrs	r3, r3, #4
 80084d2:	009a      	lsls	r2, r3, #2
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f001 fc45 	bl	8009d68 <DMA_CalcBaseAndBitshift>
 80084de:	4603      	mov	r3, r0
 80084e0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084e6:	f003 031f 	and.w	r3, r3, #31
 80084ea:	2201      	movs	r2, #1
 80084ec:	409a      	lsls	r2, r3
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	605a      	str	r2, [r3, #4]
 80084f2:	e008      	b.n	8008506 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2240      	movs	r2, #64	@ 0x40
 80084f8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2203      	movs	r2, #3
 80084fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8008502:	2301      	movs	r3, #1
 8008504:	e0b7      	b.n	8008676 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a5f      	ldr	r2, [pc, #380]	@ (8008688 <HAL_DMA_Init+0x650>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d072      	beq.n	80085f6 <HAL_DMA_Init+0x5be>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a5d      	ldr	r2, [pc, #372]	@ (800868c <HAL_DMA_Init+0x654>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d06d      	beq.n	80085f6 <HAL_DMA_Init+0x5be>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a5c      	ldr	r2, [pc, #368]	@ (8008690 <HAL_DMA_Init+0x658>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d068      	beq.n	80085f6 <HAL_DMA_Init+0x5be>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a5a      	ldr	r2, [pc, #360]	@ (8008694 <HAL_DMA_Init+0x65c>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d063      	beq.n	80085f6 <HAL_DMA_Init+0x5be>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a59      	ldr	r2, [pc, #356]	@ (8008698 <HAL_DMA_Init+0x660>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d05e      	beq.n	80085f6 <HAL_DMA_Init+0x5be>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a57      	ldr	r2, [pc, #348]	@ (800869c <HAL_DMA_Init+0x664>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d059      	beq.n	80085f6 <HAL_DMA_Init+0x5be>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a56      	ldr	r2, [pc, #344]	@ (80086a0 <HAL_DMA_Init+0x668>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d054      	beq.n	80085f6 <HAL_DMA_Init+0x5be>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a54      	ldr	r2, [pc, #336]	@ (80086a4 <HAL_DMA_Init+0x66c>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d04f      	beq.n	80085f6 <HAL_DMA_Init+0x5be>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a53      	ldr	r2, [pc, #332]	@ (80086a8 <HAL_DMA_Init+0x670>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d04a      	beq.n	80085f6 <HAL_DMA_Init+0x5be>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a51      	ldr	r2, [pc, #324]	@ (80086ac <HAL_DMA_Init+0x674>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d045      	beq.n	80085f6 <HAL_DMA_Init+0x5be>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a50      	ldr	r2, [pc, #320]	@ (80086b0 <HAL_DMA_Init+0x678>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d040      	beq.n	80085f6 <HAL_DMA_Init+0x5be>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a4e      	ldr	r2, [pc, #312]	@ (80086b4 <HAL_DMA_Init+0x67c>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d03b      	beq.n	80085f6 <HAL_DMA_Init+0x5be>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a4d      	ldr	r2, [pc, #308]	@ (80086b8 <HAL_DMA_Init+0x680>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d036      	beq.n	80085f6 <HAL_DMA_Init+0x5be>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a4b      	ldr	r2, [pc, #300]	@ (80086bc <HAL_DMA_Init+0x684>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d031      	beq.n	80085f6 <HAL_DMA_Init+0x5be>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a4a      	ldr	r2, [pc, #296]	@ (80086c0 <HAL_DMA_Init+0x688>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d02c      	beq.n	80085f6 <HAL_DMA_Init+0x5be>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a48      	ldr	r2, [pc, #288]	@ (80086c4 <HAL_DMA_Init+0x68c>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d027      	beq.n	80085f6 <HAL_DMA_Init+0x5be>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a47      	ldr	r2, [pc, #284]	@ (80086c8 <HAL_DMA_Init+0x690>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d022      	beq.n	80085f6 <HAL_DMA_Init+0x5be>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a45      	ldr	r2, [pc, #276]	@ (80086cc <HAL_DMA_Init+0x694>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d01d      	beq.n	80085f6 <HAL_DMA_Init+0x5be>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a44      	ldr	r2, [pc, #272]	@ (80086d0 <HAL_DMA_Init+0x698>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d018      	beq.n	80085f6 <HAL_DMA_Init+0x5be>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a42      	ldr	r2, [pc, #264]	@ (80086d4 <HAL_DMA_Init+0x69c>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d013      	beq.n	80085f6 <HAL_DMA_Init+0x5be>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a41      	ldr	r2, [pc, #260]	@ (80086d8 <HAL_DMA_Init+0x6a0>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d00e      	beq.n	80085f6 <HAL_DMA_Init+0x5be>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a3f      	ldr	r2, [pc, #252]	@ (80086dc <HAL_DMA_Init+0x6a4>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d009      	beq.n	80085f6 <HAL_DMA_Init+0x5be>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a3e      	ldr	r2, [pc, #248]	@ (80086e0 <HAL_DMA_Init+0x6a8>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d004      	beq.n	80085f6 <HAL_DMA_Init+0x5be>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a3c      	ldr	r2, [pc, #240]	@ (80086e4 <HAL_DMA_Init+0x6ac>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d101      	bne.n	80085fa <HAL_DMA_Init+0x5c2>
 80085f6:	2301      	movs	r3, #1
 80085f8:	e000      	b.n	80085fc <HAL_DMA_Init+0x5c4>
 80085fa:	2300      	movs	r3, #0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d032      	beq.n	8008666 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f001 fcdf 	bl	8009fc4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	2b80      	cmp	r3, #128	@ 0x80
 800860c:	d102      	bne.n	8008614 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685a      	ldr	r2, [r3, #4]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800861c:	b2d2      	uxtb	r2, r2
 800861e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008628:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d010      	beq.n	8008654 <HAL_DMA_Init+0x61c>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	2b08      	cmp	r3, #8
 8008638:	d80c      	bhi.n	8008654 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f001 fd5c 	bl	800a0f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008644:	2200      	movs	r2, #0
 8008646:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008650:	605a      	str	r2, [r3, #4]
 8008652:	e008      	b.n	8008666 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3718      	adds	r7, #24
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	a7fdabf8 	.word	0xa7fdabf8
 8008684:	cccccccd 	.word	0xcccccccd
 8008688:	40020010 	.word	0x40020010
 800868c:	40020028 	.word	0x40020028
 8008690:	40020040 	.word	0x40020040
 8008694:	40020058 	.word	0x40020058
 8008698:	40020070 	.word	0x40020070
 800869c:	40020088 	.word	0x40020088
 80086a0:	400200a0 	.word	0x400200a0
 80086a4:	400200b8 	.word	0x400200b8
 80086a8:	40020410 	.word	0x40020410
 80086ac:	40020428 	.word	0x40020428
 80086b0:	40020440 	.word	0x40020440
 80086b4:	40020458 	.word	0x40020458
 80086b8:	40020470 	.word	0x40020470
 80086bc:	40020488 	.word	0x40020488
 80086c0:	400204a0 	.word	0x400204a0
 80086c4:	400204b8 	.word	0x400204b8
 80086c8:	58025408 	.word	0x58025408
 80086cc:	5802541c 	.word	0x5802541c
 80086d0:	58025430 	.word	0x58025430
 80086d4:	58025444 	.word	0x58025444
 80086d8:	58025458 	.word	0x58025458
 80086dc:	5802546c 	.word	0x5802546c
 80086e0:	58025480 	.word	0x58025480
 80086e4:	58025494 	.word	0x58025494

080086e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b086      	sub	sp, #24
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	607a      	str	r2, [r7, #4]
 80086f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086f6:	2300      	movs	r3, #0
 80086f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d101      	bne.n	8008704 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	e226      	b.n	8008b52 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800870a:	2b01      	cmp	r3, #1
 800870c:	d101      	bne.n	8008712 <HAL_DMA_Start_IT+0x2a>
 800870e:	2302      	movs	r3, #2
 8008710:	e21f      	b.n	8008b52 <HAL_DMA_Start_IT+0x46a>
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2201      	movs	r2, #1
 8008716:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008720:	b2db      	uxtb	r3, r3
 8008722:	2b01      	cmp	r3, #1
 8008724:	f040 820a 	bne.w	8008b3c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2202      	movs	r2, #2
 800872c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2200      	movs	r2, #0
 8008734:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a68      	ldr	r2, [pc, #416]	@ (80088dc <HAL_DMA_Start_IT+0x1f4>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d04a      	beq.n	80087d6 <HAL_DMA_Start_IT+0xee>
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a66      	ldr	r2, [pc, #408]	@ (80088e0 <HAL_DMA_Start_IT+0x1f8>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d045      	beq.n	80087d6 <HAL_DMA_Start_IT+0xee>
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a65      	ldr	r2, [pc, #404]	@ (80088e4 <HAL_DMA_Start_IT+0x1fc>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d040      	beq.n	80087d6 <HAL_DMA_Start_IT+0xee>
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a63      	ldr	r2, [pc, #396]	@ (80088e8 <HAL_DMA_Start_IT+0x200>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d03b      	beq.n	80087d6 <HAL_DMA_Start_IT+0xee>
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a62      	ldr	r2, [pc, #392]	@ (80088ec <HAL_DMA_Start_IT+0x204>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d036      	beq.n	80087d6 <HAL_DMA_Start_IT+0xee>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a60      	ldr	r2, [pc, #384]	@ (80088f0 <HAL_DMA_Start_IT+0x208>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d031      	beq.n	80087d6 <HAL_DMA_Start_IT+0xee>
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a5f      	ldr	r2, [pc, #380]	@ (80088f4 <HAL_DMA_Start_IT+0x20c>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d02c      	beq.n	80087d6 <HAL_DMA_Start_IT+0xee>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a5d      	ldr	r2, [pc, #372]	@ (80088f8 <HAL_DMA_Start_IT+0x210>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d027      	beq.n	80087d6 <HAL_DMA_Start_IT+0xee>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a5c      	ldr	r2, [pc, #368]	@ (80088fc <HAL_DMA_Start_IT+0x214>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d022      	beq.n	80087d6 <HAL_DMA_Start_IT+0xee>
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a5a      	ldr	r2, [pc, #360]	@ (8008900 <HAL_DMA_Start_IT+0x218>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d01d      	beq.n	80087d6 <HAL_DMA_Start_IT+0xee>
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a59      	ldr	r2, [pc, #356]	@ (8008904 <HAL_DMA_Start_IT+0x21c>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d018      	beq.n	80087d6 <HAL_DMA_Start_IT+0xee>
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a57      	ldr	r2, [pc, #348]	@ (8008908 <HAL_DMA_Start_IT+0x220>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d013      	beq.n	80087d6 <HAL_DMA_Start_IT+0xee>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a56      	ldr	r2, [pc, #344]	@ (800890c <HAL_DMA_Start_IT+0x224>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d00e      	beq.n	80087d6 <HAL_DMA_Start_IT+0xee>
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a54      	ldr	r2, [pc, #336]	@ (8008910 <HAL_DMA_Start_IT+0x228>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d009      	beq.n	80087d6 <HAL_DMA_Start_IT+0xee>
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a53      	ldr	r2, [pc, #332]	@ (8008914 <HAL_DMA_Start_IT+0x22c>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d004      	beq.n	80087d6 <HAL_DMA_Start_IT+0xee>
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a51      	ldr	r2, [pc, #324]	@ (8008918 <HAL_DMA_Start_IT+0x230>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d108      	bne.n	80087e8 <HAL_DMA_Start_IT+0x100>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f022 0201 	bic.w	r2, r2, #1
 80087e4:	601a      	str	r2, [r3, #0]
 80087e6:	e007      	b.n	80087f8 <HAL_DMA_Start_IT+0x110>
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f022 0201 	bic.w	r2, r2, #1
 80087f6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	68b9      	ldr	r1, [r7, #8]
 80087fe:	68f8      	ldr	r0, [r7, #12]
 8008800:	f001 f906 	bl	8009a10 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a34      	ldr	r2, [pc, #208]	@ (80088dc <HAL_DMA_Start_IT+0x1f4>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d04a      	beq.n	80088a4 <HAL_DMA_Start_IT+0x1bc>
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a33      	ldr	r2, [pc, #204]	@ (80088e0 <HAL_DMA_Start_IT+0x1f8>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d045      	beq.n	80088a4 <HAL_DMA_Start_IT+0x1bc>
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a31      	ldr	r2, [pc, #196]	@ (80088e4 <HAL_DMA_Start_IT+0x1fc>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d040      	beq.n	80088a4 <HAL_DMA_Start_IT+0x1bc>
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a30      	ldr	r2, [pc, #192]	@ (80088e8 <HAL_DMA_Start_IT+0x200>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d03b      	beq.n	80088a4 <HAL_DMA_Start_IT+0x1bc>
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a2e      	ldr	r2, [pc, #184]	@ (80088ec <HAL_DMA_Start_IT+0x204>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d036      	beq.n	80088a4 <HAL_DMA_Start_IT+0x1bc>
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a2d      	ldr	r2, [pc, #180]	@ (80088f0 <HAL_DMA_Start_IT+0x208>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d031      	beq.n	80088a4 <HAL_DMA_Start_IT+0x1bc>
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a2b      	ldr	r2, [pc, #172]	@ (80088f4 <HAL_DMA_Start_IT+0x20c>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d02c      	beq.n	80088a4 <HAL_DMA_Start_IT+0x1bc>
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a2a      	ldr	r2, [pc, #168]	@ (80088f8 <HAL_DMA_Start_IT+0x210>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d027      	beq.n	80088a4 <HAL_DMA_Start_IT+0x1bc>
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a28      	ldr	r2, [pc, #160]	@ (80088fc <HAL_DMA_Start_IT+0x214>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d022      	beq.n	80088a4 <HAL_DMA_Start_IT+0x1bc>
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a27      	ldr	r2, [pc, #156]	@ (8008900 <HAL_DMA_Start_IT+0x218>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d01d      	beq.n	80088a4 <HAL_DMA_Start_IT+0x1bc>
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a25      	ldr	r2, [pc, #148]	@ (8008904 <HAL_DMA_Start_IT+0x21c>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d018      	beq.n	80088a4 <HAL_DMA_Start_IT+0x1bc>
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a24      	ldr	r2, [pc, #144]	@ (8008908 <HAL_DMA_Start_IT+0x220>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d013      	beq.n	80088a4 <HAL_DMA_Start_IT+0x1bc>
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a22      	ldr	r2, [pc, #136]	@ (800890c <HAL_DMA_Start_IT+0x224>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d00e      	beq.n	80088a4 <HAL_DMA_Start_IT+0x1bc>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a21      	ldr	r2, [pc, #132]	@ (8008910 <HAL_DMA_Start_IT+0x228>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d009      	beq.n	80088a4 <HAL_DMA_Start_IT+0x1bc>
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a1f      	ldr	r2, [pc, #124]	@ (8008914 <HAL_DMA_Start_IT+0x22c>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d004      	beq.n	80088a4 <HAL_DMA_Start_IT+0x1bc>
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a1e      	ldr	r2, [pc, #120]	@ (8008918 <HAL_DMA_Start_IT+0x230>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d101      	bne.n	80088a8 <HAL_DMA_Start_IT+0x1c0>
 80088a4:	2301      	movs	r3, #1
 80088a6:	e000      	b.n	80088aa <HAL_DMA_Start_IT+0x1c2>
 80088a8:	2300      	movs	r3, #0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d036      	beq.n	800891c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f023 021e 	bic.w	r2, r3, #30
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f042 0216 	orr.w	r2, r2, #22
 80088c0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d03e      	beq.n	8008948 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f042 0208 	orr.w	r2, r2, #8
 80088d8:	601a      	str	r2, [r3, #0]
 80088da:	e035      	b.n	8008948 <HAL_DMA_Start_IT+0x260>
 80088dc:	40020010 	.word	0x40020010
 80088e0:	40020028 	.word	0x40020028
 80088e4:	40020040 	.word	0x40020040
 80088e8:	40020058 	.word	0x40020058
 80088ec:	40020070 	.word	0x40020070
 80088f0:	40020088 	.word	0x40020088
 80088f4:	400200a0 	.word	0x400200a0
 80088f8:	400200b8 	.word	0x400200b8
 80088fc:	40020410 	.word	0x40020410
 8008900:	40020428 	.word	0x40020428
 8008904:	40020440 	.word	0x40020440
 8008908:	40020458 	.word	0x40020458
 800890c:	40020470 	.word	0x40020470
 8008910:	40020488 	.word	0x40020488
 8008914:	400204a0 	.word	0x400204a0
 8008918:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f023 020e 	bic.w	r2, r3, #14
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f042 020a 	orr.w	r2, r2, #10
 800892e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008934:	2b00      	cmp	r3, #0
 8008936:	d007      	beq.n	8008948 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f042 0204 	orr.w	r2, r2, #4
 8008946:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a83      	ldr	r2, [pc, #524]	@ (8008b5c <HAL_DMA_Start_IT+0x474>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d072      	beq.n	8008a38 <HAL_DMA_Start_IT+0x350>
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a82      	ldr	r2, [pc, #520]	@ (8008b60 <HAL_DMA_Start_IT+0x478>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d06d      	beq.n	8008a38 <HAL_DMA_Start_IT+0x350>
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a80      	ldr	r2, [pc, #512]	@ (8008b64 <HAL_DMA_Start_IT+0x47c>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d068      	beq.n	8008a38 <HAL_DMA_Start_IT+0x350>
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a7f      	ldr	r2, [pc, #508]	@ (8008b68 <HAL_DMA_Start_IT+0x480>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d063      	beq.n	8008a38 <HAL_DMA_Start_IT+0x350>
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a7d      	ldr	r2, [pc, #500]	@ (8008b6c <HAL_DMA_Start_IT+0x484>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d05e      	beq.n	8008a38 <HAL_DMA_Start_IT+0x350>
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a7c      	ldr	r2, [pc, #496]	@ (8008b70 <HAL_DMA_Start_IT+0x488>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d059      	beq.n	8008a38 <HAL_DMA_Start_IT+0x350>
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a7a      	ldr	r2, [pc, #488]	@ (8008b74 <HAL_DMA_Start_IT+0x48c>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d054      	beq.n	8008a38 <HAL_DMA_Start_IT+0x350>
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a79      	ldr	r2, [pc, #484]	@ (8008b78 <HAL_DMA_Start_IT+0x490>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d04f      	beq.n	8008a38 <HAL_DMA_Start_IT+0x350>
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a77      	ldr	r2, [pc, #476]	@ (8008b7c <HAL_DMA_Start_IT+0x494>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d04a      	beq.n	8008a38 <HAL_DMA_Start_IT+0x350>
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a76      	ldr	r2, [pc, #472]	@ (8008b80 <HAL_DMA_Start_IT+0x498>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d045      	beq.n	8008a38 <HAL_DMA_Start_IT+0x350>
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a74      	ldr	r2, [pc, #464]	@ (8008b84 <HAL_DMA_Start_IT+0x49c>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d040      	beq.n	8008a38 <HAL_DMA_Start_IT+0x350>
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a73      	ldr	r2, [pc, #460]	@ (8008b88 <HAL_DMA_Start_IT+0x4a0>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d03b      	beq.n	8008a38 <HAL_DMA_Start_IT+0x350>
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a71      	ldr	r2, [pc, #452]	@ (8008b8c <HAL_DMA_Start_IT+0x4a4>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d036      	beq.n	8008a38 <HAL_DMA_Start_IT+0x350>
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a70      	ldr	r2, [pc, #448]	@ (8008b90 <HAL_DMA_Start_IT+0x4a8>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d031      	beq.n	8008a38 <HAL_DMA_Start_IT+0x350>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a6e      	ldr	r2, [pc, #440]	@ (8008b94 <HAL_DMA_Start_IT+0x4ac>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d02c      	beq.n	8008a38 <HAL_DMA_Start_IT+0x350>
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a6d      	ldr	r2, [pc, #436]	@ (8008b98 <HAL_DMA_Start_IT+0x4b0>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d027      	beq.n	8008a38 <HAL_DMA_Start_IT+0x350>
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a6b      	ldr	r2, [pc, #428]	@ (8008b9c <HAL_DMA_Start_IT+0x4b4>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d022      	beq.n	8008a38 <HAL_DMA_Start_IT+0x350>
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a6a      	ldr	r2, [pc, #424]	@ (8008ba0 <HAL_DMA_Start_IT+0x4b8>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d01d      	beq.n	8008a38 <HAL_DMA_Start_IT+0x350>
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a68      	ldr	r2, [pc, #416]	@ (8008ba4 <HAL_DMA_Start_IT+0x4bc>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d018      	beq.n	8008a38 <HAL_DMA_Start_IT+0x350>
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a67      	ldr	r2, [pc, #412]	@ (8008ba8 <HAL_DMA_Start_IT+0x4c0>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d013      	beq.n	8008a38 <HAL_DMA_Start_IT+0x350>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a65      	ldr	r2, [pc, #404]	@ (8008bac <HAL_DMA_Start_IT+0x4c4>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d00e      	beq.n	8008a38 <HAL_DMA_Start_IT+0x350>
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a64      	ldr	r2, [pc, #400]	@ (8008bb0 <HAL_DMA_Start_IT+0x4c8>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d009      	beq.n	8008a38 <HAL_DMA_Start_IT+0x350>
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a62      	ldr	r2, [pc, #392]	@ (8008bb4 <HAL_DMA_Start_IT+0x4cc>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d004      	beq.n	8008a38 <HAL_DMA_Start_IT+0x350>
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a61      	ldr	r2, [pc, #388]	@ (8008bb8 <HAL_DMA_Start_IT+0x4d0>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d101      	bne.n	8008a3c <HAL_DMA_Start_IT+0x354>
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e000      	b.n	8008a3e <HAL_DMA_Start_IT+0x356>
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d01a      	beq.n	8008a78 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d007      	beq.n	8008a60 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008a5e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d007      	beq.n	8008a78 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008a76:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a37      	ldr	r2, [pc, #220]	@ (8008b5c <HAL_DMA_Start_IT+0x474>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d04a      	beq.n	8008b18 <HAL_DMA_Start_IT+0x430>
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a36      	ldr	r2, [pc, #216]	@ (8008b60 <HAL_DMA_Start_IT+0x478>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d045      	beq.n	8008b18 <HAL_DMA_Start_IT+0x430>
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a34      	ldr	r2, [pc, #208]	@ (8008b64 <HAL_DMA_Start_IT+0x47c>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d040      	beq.n	8008b18 <HAL_DMA_Start_IT+0x430>
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a33      	ldr	r2, [pc, #204]	@ (8008b68 <HAL_DMA_Start_IT+0x480>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d03b      	beq.n	8008b18 <HAL_DMA_Start_IT+0x430>
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a31      	ldr	r2, [pc, #196]	@ (8008b6c <HAL_DMA_Start_IT+0x484>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d036      	beq.n	8008b18 <HAL_DMA_Start_IT+0x430>
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a30      	ldr	r2, [pc, #192]	@ (8008b70 <HAL_DMA_Start_IT+0x488>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d031      	beq.n	8008b18 <HAL_DMA_Start_IT+0x430>
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a2e      	ldr	r2, [pc, #184]	@ (8008b74 <HAL_DMA_Start_IT+0x48c>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d02c      	beq.n	8008b18 <HAL_DMA_Start_IT+0x430>
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a2d      	ldr	r2, [pc, #180]	@ (8008b78 <HAL_DMA_Start_IT+0x490>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d027      	beq.n	8008b18 <HAL_DMA_Start_IT+0x430>
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a2b      	ldr	r2, [pc, #172]	@ (8008b7c <HAL_DMA_Start_IT+0x494>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d022      	beq.n	8008b18 <HAL_DMA_Start_IT+0x430>
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a2a      	ldr	r2, [pc, #168]	@ (8008b80 <HAL_DMA_Start_IT+0x498>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d01d      	beq.n	8008b18 <HAL_DMA_Start_IT+0x430>
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a28      	ldr	r2, [pc, #160]	@ (8008b84 <HAL_DMA_Start_IT+0x49c>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d018      	beq.n	8008b18 <HAL_DMA_Start_IT+0x430>
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a27      	ldr	r2, [pc, #156]	@ (8008b88 <HAL_DMA_Start_IT+0x4a0>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d013      	beq.n	8008b18 <HAL_DMA_Start_IT+0x430>
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a25      	ldr	r2, [pc, #148]	@ (8008b8c <HAL_DMA_Start_IT+0x4a4>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d00e      	beq.n	8008b18 <HAL_DMA_Start_IT+0x430>
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a24      	ldr	r2, [pc, #144]	@ (8008b90 <HAL_DMA_Start_IT+0x4a8>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d009      	beq.n	8008b18 <HAL_DMA_Start_IT+0x430>
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a22      	ldr	r2, [pc, #136]	@ (8008b94 <HAL_DMA_Start_IT+0x4ac>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d004      	beq.n	8008b18 <HAL_DMA_Start_IT+0x430>
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a21      	ldr	r2, [pc, #132]	@ (8008b98 <HAL_DMA_Start_IT+0x4b0>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d108      	bne.n	8008b2a <HAL_DMA_Start_IT+0x442>
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f042 0201 	orr.w	r2, r2, #1
 8008b26:	601a      	str	r2, [r3, #0]
 8008b28:	e012      	b.n	8008b50 <HAL_DMA_Start_IT+0x468>
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f042 0201 	orr.w	r2, r2, #1
 8008b38:	601a      	str	r2, [r3, #0]
 8008b3a:	e009      	b.n	8008b50 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008b42:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2200      	movs	r2, #0
 8008b48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3718      	adds	r7, #24
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop
 8008b5c:	40020010 	.word	0x40020010
 8008b60:	40020028 	.word	0x40020028
 8008b64:	40020040 	.word	0x40020040
 8008b68:	40020058 	.word	0x40020058
 8008b6c:	40020070 	.word	0x40020070
 8008b70:	40020088 	.word	0x40020088
 8008b74:	400200a0 	.word	0x400200a0
 8008b78:	400200b8 	.word	0x400200b8
 8008b7c:	40020410 	.word	0x40020410
 8008b80:	40020428 	.word	0x40020428
 8008b84:	40020440 	.word	0x40020440
 8008b88:	40020458 	.word	0x40020458
 8008b8c:	40020470 	.word	0x40020470
 8008b90:	40020488 	.word	0x40020488
 8008b94:	400204a0 	.word	0x400204a0
 8008b98:	400204b8 	.word	0x400204b8
 8008b9c:	58025408 	.word	0x58025408
 8008ba0:	5802541c 	.word	0x5802541c
 8008ba4:	58025430 	.word	0x58025430
 8008ba8:	58025444 	.word	0x58025444
 8008bac:	58025458 	.word	0x58025458
 8008bb0:	5802546c 	.word	0x5802546c
 8008bb4:	58025480 	.word	0x58025480
 8008bb8:	58025494 	.word	0x58025494

08008bbc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b08a      	sub	sp, #40	@ 0x28
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008bc8:	4b67      	ldr	r3, [pc, #412]	@ (8008d68 <HAL_DMA_IRQHandler+0x1ac>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a67      	ldr	r2, [pc, #412]	@ (8008d6c <HAL_DMA_IRQHandler+0x1b0>)
 8008bce:	fba2 2303 	umull	r2, r3, r2, r3
 8008bd2:	0a9b      	lsrs	r3, r3, #10
 8008bd4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bda:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008be0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008be2:	6a3b      	ldr	r3, [r7, #32]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a5f      	ldr	r2, [pc, #380]	@ (8008d70 <HAL_DMA_IRQHandler+0x1b4>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d04a      	beq.n	8008c8e <HAL_DMA_IRQHandler+0xd2>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a5d      	ldr	r2, [pc, #372]	@ (8008d74 <HAL_DMA_IRQHandler+0x1b8>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d045      	beq.n	8008c8e <HAL_DMA_IRQHandler+0xd2>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a5c      	ldr	r2, [pc, #368]	@ (8008d78 <HAL_DMA_IRQHandler+0x1bc>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d040      	beq.n	8008c8e <HAL_DMA_IRQHandler+0xd2>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a5a      	ldr	r2, [pc, #360]	@ (8008d7c <HAL_DMA_IRQHandler+0x1c0>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d03b      	beq.n	8008c8e <HAL_DMA_IRQHandler+0xd2>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a59      	ldr	r2, [pc, #356]	@ (8008d80 <HAL_DMA_IRQHandler+0x1c4>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d036      	beq.n	8008c8e <HAL_DMA_IRQHandler+0xd2>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a57      	ldr	r2, [pc, #348]	@ (8008d84 <HAL_DMA_IRQHandler+0x1c8>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d031      	beq.n	8008c8e <HAL_DMA_IRQHandler+0xd2>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a56      	ldr	r2, [pc, #344]	@ (8008d88 <HAL_DMA_IRQHandler+0x1cc>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d02c      	beq.n	8008c8e <HAL_DMA_IRQHandler+0xd2>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a54      	ldr	r2, [pc, #336]	@ (8008d8c <HAL_DMA_IRQHandler+0x1d0>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d027      	beq.n	8008c8e <HAL_DMA_IRQHandler+0xd2>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a53      	ldr	r2, [pc, #332]	@ (8008d90 <HAL_DMA_IRQHandler+0x1d4>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d022      	beq.n	8008c8e <HAL_DMA_IRQHandler+0xd2>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a51      	ldr	r2, [pc, #324]	@ (8008d94 <HAL_DMA_IRQHandler+0x1d8>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d01d      	beq.n	8008c8e <HAL_DMA_IRQHandler+0xd2>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a50      	ldr	r2, [pc, #320]	@ (8008d98 <HAL_DMA_IRQHandler+0x1dc>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d018      	beq.n	8008c8e <HAL_DMA_IRQHandler+0xd2>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a4e      	ldr	r2, [pc, #312]	@ (8008d9c <HAL_DMA_IRQHandler+0x1e0>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d013      	beq.n	8008c8e <HAL_DMA_IRQHandler+0xd2>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a4d      	ldr	r2, [pc, #308]	@ (8008da0 <HAL_DMA_IRQHandler+0x1e4>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d00e      	beq.n	8008c8e <HAL_DMA_IRQHandler+0xd2>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a4b      	ldr	r2, [pc, #300]	@ (8008da4 <HAL_DMA_IRQHandler+0x1e8>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d009      	beq.n	8008c8e <HAL_DMA_IRQHandler+0xd2>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a4a      	ldr	r2, [pc, #296]	@ (8008da8 <HAL_DMA_IRQHandler+0x1ec>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d004      	beq.n	8008c8e <HAL_DMA_IRQHandler+0xd2>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a48      	ldr	r2, [pc, #288]	@ (8008dac <HAL_DMA_IRQHandler+0x1f0>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d101      	bne.n	8008c92 <HAL_DMA_IRQHandler+0xd6>
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e000      	b.n	8008c94 <HAL_DMA_IRQHandler+0xd8>
 8008c92:	2300      	movs	r3, #0
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f000 842b 	beq.w	80094f0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c9e:	f003 031f 	and.w	r3, r3, #31
 8008ca2:	2208      	movs	r2, #8
 8008ca4:	409a      	lsls	r2, r3
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	4013      	ands	r3, r2
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f000 80a2 	beq.w	8008df4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a2e      	ldr	r2, [pc, #184]	@ (8008d70 <HAL_DMA_IRQHandler+0x1b4>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d04a      	beq.n	8008d50 <HAL_DMA_IRQHandler+0x194>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a2d      	ldr	r2, [pc, #180]	@ (8008d74 <HAL_DMA_IRQHandler+0x1b8>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d045      	beq.n	8008d50 <HAL_DMA_IRQHandler+0x194>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a2b      	ldr	r2, [pc, #172]	@ (8008d78 <HAL_DMA_IRQHandler+0x1bc>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d040      	beq.n	8008d50 <HAL_DMA_IRQHandler+0x194>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a2a      	ldr	r2, [pc, #168]	@ (8008d7c <HAL_DMA_IRQHandler+0x1c0>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d03b      	beq.n	8008d50 <HAL_DMA_IRQHandler+0x194>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a28      	ldr	r2, [pc, #160]	@ (8008d80 <HAL_DMA_IRQHandler+0x1c4>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d036      	beq.n	8008d50 <HAL_DMA_IRQHandler+0x194>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a27      	ldr	r2, [pc, #156]	@ (8008d84 <HAL_DMA_IRQHandler+0x1c8>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d031      	beq.n	8008d50 <HAL_DMA_IRQHandler+0x194>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a25      	ldr	r2, [pc, #148]	@ (8008d88 <HAL_DMA_IRQHandler+0x1cc>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d02c      	beq.n	8008d50 <HAL_DMA_IRQHandler+0x194>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a24      	ldr	r2, [pc, #144]	@ (8008d8c <HAL_DMA_IRQHandler+0x1d0>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d027      	beq.n	8008d50 <HAL_DMA_IRQHandler+0x194>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a22      	ldr	r2, [pc, #136]	@ (8008d90 <HAL_DMA_IRQHandler+0x1d4>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d022      	beq.n	8008d50 <HAL_DMA_IRQHandler+0x194>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a21      	ldr	r2, [pc, #132]	@ (8008d94 <HAL_DMA_IRQHandler+0x1d8>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d01d      	beq.n	8008d50 <HAL_DMA_IRQHandler+0x194>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a1f      	ldr	r2, [pc, #124]	@ (8008d98 <HAL_DMA_IRQHandler+0x1dc>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d018      	beq.n	8008d50 <HAL_DMA_IRQHandler+0x194>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a1e      	ldr	r2, [pc, #120]	@ (8008d9c <HAL_DMA_IRQHandler+0x1e0>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d013      	beq.n	8008d50 <HAL_DMA_IRQHandler+0x194>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a1c      	ldr	r2, [pc, #112]	@ (8008da0 <HAL_DMA_IRQHandler+0x1e4>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d00e      	beq.n	8008d50 <HAL_DMA_IRQHandler+0x194>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a1b      	ldr	r2, [pc, #108]	@ (8008da4 <HAL_DMA_IRQHandler+0x1e8>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d009      	beq.n	8008d50 <HAL_DMA_IRQHandler+0x194>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a19      	ldr	r2, [pc, #100]	@ (8008da8 <HAL_DMA_IRQHandler+0x1ec>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d004      	beq.n	8008d50 <HAL_DMA_IRQHandler+0x194>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a18      	ldr	r2, [pc, #96]	@ (8008dac <HAL_DMA_IRQHandler+0x1f0>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d12f      	bne.n	8008db0 <HAL_DMA_IRQHandler+0x1f4>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f003 0304 	and.w	r3, r3, #4
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	bf14      	ite	ne
 8008d5e:	2301      	movne	r3, #1
 8008d60:	2300      	moveq	r3, #0
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	e02e      	b.n	8008dc4 <HAL_DMA_IRQHandler+0x208>
 8008d66:	bf00      	nop
 8008d68:	24000038 	.word	0x24000038
 8008d6c:	1b4e81b5 	.word	0x1b4e81b5
 8008d70:	40020010 	.word	0x40020010
 8008d74:	40020028 	.word	0x40020028
 8008d78:	40020040 	.word	0x40020040
 8008d7c:	40020058 	.word	0x40020058
 8008d80:	40020070 	.word	0x40020070
 8008d84:	40020088 	.word	0x40020088
 8008d88:	400200a0 	.word	0x400200a0
 8008d8c:	400200b8 	.word	0x400200b8
 8008d90:	40020410 	.word	0x40020410
 8008d94:	40020428 	.word	0x40020428
 8008d98:	40020440 	.word	0x40020440
 8008d9c:	40020458 	.word	0x40020458
 8008da0:	40020470 	.word	0x40020470
 8008da4:	40020488 	.word	0x40020488
 8008da8:	400204a0 	.word	0x400204a0
 8008dac:	400204b8 	.word	0x400204b8
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 0308 	and.w	r3, r3, #8
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	bf14      	ite	ne
 8008dbe:	2301      	movne	r3, #1
 8008dc0:	2300      	moveq	r3, #0
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d015      	beq.n	8008df4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f022 0204 	bic.w	r2, r2, #4
 8008dd6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ddc:	f003 031f 	and.w	r3, r3, #31
 8008de0:	2208      	movs	r2, #8
 8008de2:	409a      	lsls	r2, r3
 8008de4:	6a3b      	ldr	r3, [r7, #32]
 8008de6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dec:	f043 0201 	orr.w	r2, r3, #1
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008df8:	f003 031f 	and.w	r3, r3, #31
 8008dfc:	69ba      	ldr	r2, [r7, #24]
 8008dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8008e02:	f003 0301 	and.w	r3, r3, #1
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d06e      	beq.n	8008ee8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a69      	ldr	r2, [pc, #420]	@ (8008fb4 <HAL_DMA_IRQHandler+0x3f8>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d04a      	beq.n	8008eaa <HAL_DMA_IRQHandler+0x2ee>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a67      	ldr	r2, [pc, #412]	@ (8008fb8 <HAL_DMA_IRQHandler+0x3fc>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d045      	beq.n	8008eaa <HAL_DMA_IRQHandler+0x2ee>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a66      	ldr	r2, [pc, #408]	@ (8008fbc <HAL_DMA_IRQHandler+0x400>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d040      	beq.n	8008eaa <HAL_DMA_IRQHandler+0x2ee>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a64      	ldr	r2, [pc, #400]	@ (8008fc0 <HAL_DMA_IRQHandler+0x404>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d03b      	beq.n	8008eaa <HAL_DMA_IRQHandler+0x2ee>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a63      	ldr	r2, [pc, #396]	@ (8008fc4 <HAL_DMA_IRQHandler+0x408>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d036      	beq.n	8008eaa <HAL_DMA_IRQHandler+0x2ee>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a61      	ldr	r2, [pc, #388]	@ (8008fc8 <HAL_DMA_IRQHandler+0x40c>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d031      	beq.n	8008eaa <HAL_DMA_IRQHandler+0x2ee>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a60      	ldr	r2, [pc, #384]	@ (8008fcc <HAL_DMA_IRQHandler+0x410>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d02c      	beq.n	8008eaa <HAL_DMA_IRQHandler+0x2ee>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a5e      	ldr	r2, [pc, #376]	@ (8008fd0 <HAL_DMA_IRQHandler+0x414>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d027      	beq.n	8008eaa <HAL_DMA_IRQHandler+0x2ee>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a5d      	ldr	r2, [pc, #372]	@ (8008fd4 <HAL_DMA_IRQHandler+0x418>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d022      	beq.n	8008eaa <HAL_DMA_IRQHandler+0x2ee>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a5b      	ldr	r2, [pc, #364]	@ (8008fd8 <HAL_DMA_IRQHandler+0x41c>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d01d      	beq.n	8008eaa <HAL_DMA_IRQHandler+0x2ee>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a5a      	ldr	r2, [pc, #360]	@ (8008fdc <HAL_DMA_IRQHandler+0x420>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d018      	beq.n	8008eaa <HAL_DMA_IRQHandler+0x2ee>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a58      	ldr	r2, [pc, #352]	@ (8008fe0 <HAL_DMA_IRQHandler+0x424>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d013      	beq.n	8008eaa <HAL_DMA_IRQHandler+0x2ee>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a57      	ldr	r2, [pc, #348]	@ (8008fe4 <HAL_DMA_IRQHandler+0x428>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d00e      	beq.n	8008eaa <HAL_DMA_IRQHandler+0x2ee>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a55      	ldr	r2, [pc, #340]	@ (8008fe8 <HAL_DMA_IRQHandler+0x42c>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d009      	beq.n	8008eaa <HAL_DMA_IRQHandler+0x2ee>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a54      	ldr	r2, [pc, #336]	@ (8008fec <HAL_DMA_IRQHandler+0x430>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d004      	beq.n	8008eaa <HAL_DMA_IRQHandler+0x2ee>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a52      	ldr	r2, [pc, #328]	@ (8008ff0 <HAL_DMA_IRQHandler+0x434>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d10a      	bne.n	8008ec0 <HAL_DMA_IRQHandler+0x304>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	695b      	ldr	r3, [r3, #20]
 8008eb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	bf14      	ite	ne
 8008eb8:	2301      	movne	r3, #1
 8008eba:	2300      	moveq	r3, #0
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	e003      	b.n	8008ec8 <HAL_DMA_IRQHandler+0x30c>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00d      	beq.n	8008ee8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ed0:	f003 031f 	and.w	r3, r3, #31
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	409a      	lsls	r2, r3
 8008ed8:	6a3b      	ldr	r3, [r7, #32]
 8008eda:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ee0:	f043 0202 	orr.w	r2, r3, #2
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008eec:	f003 031f 	and.w	r3, r3, #31
 8008ef0:	2204      	movs	r2, #4
 8008ef2:	409a      	lsls	r2, r3
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	4013      	ands	r3, r2
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	f000 808f 	beq.w	800901c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a2c      	ldr	r2, [pc, #176]	@ (8008fb4 <HAL_DMA_IRQHandler+0x3f8>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d04a      	beq.n	8008f9e <HAL_DMA_IRQHandler+0x3e2>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a2a      	ldr	r2, [pc, #168]	@ (8008fb8 <HAL_DMA_IRQHandler+0x3fc>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d045      	beq.n	8008f9e <HAL_DMA_IRQHandler+0x3e2>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a29      	ldr	r2, [pc, #164]	@ (8008fbc <HAL_DMA_IRQHandler+0x400>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d040      	beq.n	8008f9e <HAL_DMA_IRQHandler+0x3e2>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a27      	ldr	r2, [pc, #156]	@ (8008fc0 <HAL_DMA_IRQHandler+0x404>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d03b      	beq.n	8008f9e <HAL_DMA_IRQHandler+0x3e2>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a26      	ldr	r2, [pc, #152]	@ (8008fc4 <HAL_DMA_IRQHandler+0x408>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d036      	beq.n	8008f9e <HAL_DMA_IRQHandler+0x3e2>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a24      	ldr	r2, [pc, #144]	@ (8008fc8 <HAL_DMA_IRQHandler+0x40c>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d031      	beq.n	8008f9e <HAL_DMA_IRQHandler+0x3e2>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a23      	ldr	r2, [pc, #140]	@ (8008fcc <HAL_DMA_IRQHandler+0x410>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d02c      	beq.n	8008f9e <HAL_DMA_IRQHandler+0x3e2>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a21      	ldr	r2, [pc, #132]	@ (8008fd0 <HAL_DMA_IRQHandler+0x414>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d027      	beq.n	8008f9e <HAL_DMA_IRQHandler+0x3e2>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a20      	ldr	r2, [pc, #128]	@ (8008fd4 <HAL_DMA_IRQHandler+0x418>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d022      	beq.n	8008f9e <HAL_DMA_IRQHandler+0x3e2>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a1e      	ldr	r2, [pc, #120]	@ (8008fd8 <HAL_DMA_IRQHandler+0x41c>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d01d      	beq.n	8008f9e <HAL_DMA_IRQHandler+0x3e2>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a1d      	ldr	r2, [pc, #116]	@ (8008fdc <HAL_DMA_IRQHandler+0x420>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d018      	beq.n	8008f9e <HAL_DMA_IRQHandler+0x3e2>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a1b      	ldr	r2, [pc, #108]	@ (8008fe0 <HAL_DMA_IRQHandler+0x424>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d013      	beq.n	8008f9e <HAL_DMA_IRQHandler+0x3e2>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a1a      	ldr	r2, [pc, #104]	@ (8008fe4 <HAL_DMA_IRQHandler+0x428>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d00e      	beq.n	8008f9e <HAL_DMA_IRQHandler+0x3e2>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a18      	ldr	r2, [pc, #96]	@ (8008fe8 <HAL_DMA_IRQHandler+0x42c>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d009      	beq.n	8008f9e <HAL_DMA_IRQHandler+0x3e2>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a17      	ldr	r2, [pc, #92]	@ (8008fec <HAL_DMA_IRQHandler+0x430>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d004      	beq.n	8008f9e <HAL_DMA_IRQHandler+0x3e2>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a15      	ldr	r2, [pc, #84]	@ (8008ff0 <HAL_DMA_IRQHandler+0x434>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d12a      	bne.n	8008ff4 <HAL_DMA_IRQHandler+0x438>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 0302 	and.w	r3, r3, #2
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	bf14      	ite	ne
 8008fac:	2301      	movne	r3, #1
 8008fae:	2300      	moveq	r3, #0
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	e023      	b.n	8008ffc <HAL_DMA_IRQHandler+0x440>
 8008fb4:	40020010 	.word	0x40020010
 8008fb8:	40020028 	.word	0x40020028
 8008fbc:	40020040 	.word	0x40020040
 8008fc0:	40020058 	.word	0x40020058
 8008fc4:	40020070 	.word	0x40020070
 8008fc8:	40020088 	.word	0x40020088
 8008fcc:	400200a0 	.word	0x400200a0
 8008fd0:	400200b8 	.word	0x400200b8
 8008fd4:	40020410 	.word	0x40020410
 8008fd8:	40020428 	.word	0x40020428
 8008fdc:	40020440 	.word	0x40020440
 8008fe0:	40020458 	.word	0x40020458
 8008fe4:	40020470 	.word	0x40020470
 8008fe8:	40020488 	.word	0x40020488
 8008fec:	400204a0 	.word	0x400204a0
 8008ff0:	400204b8 	.word	0x400204b8
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d00d      	beq.n	800901c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009004:	f003 031f 	and.w	r3, r3, #31
 8009008:	2204      	movs	r2, #4
 800900a:	409a      	lsls	r2, r3
 800900c:	6a3b      	ldr	r3, [r7, #32]
 800900e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009014:	f043 0204 	orr.w	r2, r3, #4
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009020:	f003 031f 	and.w	r3, r3, #31
 8009024:	2210      	movs	r2, #16
 8009026:	409a      	lsls	r2, r3
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	4013      	ands	r3, r2
 800902c:	2b00      	cmp	r3, #0
 800902e:	f000 80a6 	beq.w	800917e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a85      	ldr	r2, [pc, #532]	@ (800924c <HAL_DMA_IRQHandler+0x690>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d04a      	beq.n	80090d2 <HAL_DMA_IRQHandler+0x516>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a83      	ldr	r2, [pc, #524]	@ (8009250 <HAL_DMA_IRQHandler+0x694>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d045      	beq.n	80090d2 <HAL_DMA_IRQHandler+0x516>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a82      	ldr	r2, [pc, #520]	@ (8009254 <HAL_DMA_IRQHandler+0x698>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d040      	beq.n	80090d2 <HAL_DMA_IRQHandler+0x516>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a80      	ldr	r2, [pc, #512]	@ (8009258 <HAL_DMA_IRQHandler+0x69c>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d03b      	beq.n	80090d2 <HAL_DMA_IRQHandler+0x516>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a7f      	ldr	r2, [pc, #508]	@ (800925c <HAL_DMA_IRQHandler+0x6a0>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d036      	beq.n	80090d2 <HAL_DMA_IRQHandler+0x516>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a7d      	ldr	r2, [pc, #500]	@ (8009260 <HAL_DMA_IRQHandler+0x6a4>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d031      	beq.n	80090d2 <HAL_DMA_IRQHandler+0x516>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a7c      	ldr	r2, [pc, #496]	@ (8009264 <HAL_DMA_IRQHandler+0x6a8>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d02c      	beq.n	80090d2 <HAL_DMA_IRQHandler+0x516>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a7a      	ldr	r2, [pc, #488]	@ (8009268 <HAL_DMA_IRQHandler+0x6ac>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d027      	beq.n	80090d2 <HAL_DMA_IRQHandler+0x516>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a79      	ldr	r2, [pc, #484]	@ (800926c <HAL_DMA_IRQHandler+0x6b0>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d022      	beq.n	80090d2 <HAL_DMA_IRQHandler+0x516>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a77      	ldr	r2, [pc, #476]	@ (8009270 <HAL_DMA_IRQHandler+0x6b4>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d01d      	beq.n	80090d2 <HAL_DMA_IRQHandler+0x516>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a76      	ldr	r2, [pc, #472]	@ (8009274 <HAL_DMA_IRQHandler+0x6b8>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d018      	beq.n	80090d2 <HAL_DMA_IRQHandler+0x516>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a74      	ldr	r2, [pc, #464]	@ (8009278 <HAL_DMA_IRQHandler+0x6bc>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d013      	beq.n	80090d2 <HAL_DMA_IRQHandler+0x516>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a73      	ldr	r2, [pc, #460]	@ (800927c <HAL_DMA_IRQHandler+0x6c0>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d00e      	beq.n	80090d2 <HAL_DMA_IRQHandler+0x516>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a71      	ldr	r2, [pc, #452]	@ (8009280 <HAL_DMA_IRQHandler+0x6c4>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d009      	beq.n	80090d2 <HAL_DMA_IRQHandler+0x516>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a70      	ldr	r2, [pc, #448]	@ (8009284 <HAL_DMA_IRQHandler+0x6c8>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d004      	beq.n	80090d2 <HAL_DMA_IRQHandler+0x516>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a6e      	ldr	r2, [pc, #440]	@ (8009288 <HAL_DMA_IRQHandler+0x6cc>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d10a      	bne.n	80090e8 <HAL_DMA_IRQHandler+0x52c>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f003 0308 	and.w	r3, r3, #8
 80090dc:	2b00      	cmp	r3, #0
 80090de:	bf14      	ite	ne
 80090e0:	2301      	movne	r3, #1
 80090e2:	2300      	moveq	r3, #0
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	e009      	b.n	80090fc <HAL_DMA_IRQHandler+0x540>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f003 0304 	and.w	r3, r3, #4
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	bf14      	ite	ne
 80090f6:	2301      	movne	r3, #1
 80090f8:	2300      	moveq	r3, #0
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d03e      	beq.n	800917e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009104:	f003 031f 	and.w	r3, r3, #31
 8009108:	2210      	movs	r2, #16
 800910a:	409a      	lsls	r2, r3
 800910c:	6a3b      	ldr	r3, [r7, #32]
 800910e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800911a:	2b00      	cmp	r3, #0
 800911c:	d018      	beq.n	8009150 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009128:	2b00      	cmp	r3, #0
 800912a:	d108      	bne.n	800913e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009130:	2b00      	cmp	r3, #0
 8009132:	d024      	beq.n	800917e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	4798      	blx	r3
 800913c:	e01f      	b.n	800917e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009142:	2b00      	cmp	r3, #0
 8009144:	d01b      	beq.n	800917e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	4798      	blx	r3
 800914e:	e016      	b.n	800917e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800915a:	2b00      	cmp	r3, #0
 800915c:	d107      	bne.n	800916e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f022 0208 	bic.w	r2, r2, #8
 800916c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009172:	2b00      	cmp	r3, #0
 8009174:	d003      	beq.n	800917e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009182:	f003 031f 	and.w	r3, r3, #31
 8009186:	2220      	movs	r2, #32
 8009188:	409a      	lsls	r2, r3
 800918a:	69bb      	ldr	r3, [r7, #24]
 800918c:	4013      	ands	r3, r2
 800918e:	2b00      	cmp	r3, #0
 8009190:	f000 8110 	beq.w	80093b4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a2c      	ldr	r2, [pc, #176]	@ (800924c <HAL_DMA_IRQHandler+0x690>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d04a      	beq.n	8009234 <HAL_DMA_IRQHandler+0x678>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a2b      	ldr	r2, [pc, #172]	@ (8009250 <HAL_DMA_IRQHandler+0x694>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d045      	beq.n	8009234 <HAL_DMA_IRQHandler+0x678>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a29      	ldr	r2, [pc, #164]	@ (8009254 <HAL_DMA_IRQHandler+0x698>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d040      	beq.n	8009234 <HAL_DMA_IRQHandler+0x678>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a28      	ldr	r2, [pc, #160]	@ (8009258 <HAL_DMA_IRQHandler+0x69c>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d03b      	beq.n	8009234 <HAL_DMA_IRQHandler+0x678>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a26      	ldr	r2, [pc, #152]	@ (800925c <HAL_DMA_IRQHandler+0x6a0>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d036      	beq.n	8009234 <HAL_DMA_IRQHandler+0x678>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a25      	ldr	r2, [pc, #148]	@ (8009260 <HAL_DMA_IRQHandler+0x6a4>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d031      	beq.n	8009234 <HAL_DMA_IRQHandler+0x678>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a23      	ldr	r2, [pc, #140]	@ (8009264 <HAL_DMA_IRQHandler+0x6a8>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d02c      	beq.n	8009234 <HAL_DMA_IRQHandler+0x678>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a22      	ldr	r2, [pc, #136]	@ (8009268 <HAL_DMA_IRQHandler+0x6ac>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d027      	beq.n	8009234 <HAL_DMA_IRQHandler+0x678>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a20      	ldr	r2, [pc, #128]	@ (800926c <HAL_DMA_IRQHandler+0x6b0>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d022      	beq.n	8009234 <HAL_DMA_IRQHandler+0x678>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a1f      	ldr	r2, [pc, #124]	@ (8009270 <HAL_DMA_IRQHandler+0x6b4>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d01d      	beq.n	8009234 <HAL_DMA_IRQHandler+0x678>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a1d      	ldr	r2, [pc, #116]	@ (8009274 <HAL_DMA_IRQHandler+0x6b8>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d018      	beq.n	8009234 <HAL_DMA_IRQHandler+0x678>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a1c      	ldr	r2, [pc, #112]	@ (8009278 <HAL_DMA_IRQHandler+0x6bc>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d013      	beq.n	8009234 <HAL_DMA_IRQHandler+0x678>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a1a      	ldr	r2, [pc, #104]	@ (800927c <HAL_DMA_IRQHandler+0x6c0>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d00e      	beq.n	8009234 <HAL_DMA_IRQHandler+0x678>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a19      	ldr	r2, [pc, #100]	@ (8009280 <HAL_DMA_IRQHandler+0x6c4>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d009      	beq.n	8009234 <HAL_DMA_IRQHandler+0x678>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a17      	ldr	r2, [pc, #92]	@ (8009284 <HAL_DMA_IRQHandler+0x6c8>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d004      	beq.n	8009234 <HAL_DMA_IRQHandler+0x678>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a16      	ldr	r2, [pc, #88]	@ (8009288 <HAL_DMA_IRQHandler+0x6cc>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d12b      	bne.n	800928c <HAL_DMA_IRQHandler+0x6d0>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f003 0310 	and.w	r3, r3, #16
 800923e:	2b00      	cmp	r3, #0
 8009240:	bf14      	ite	ne
 8009242:	2301      	movne	r3, #1
 8009244:	2300      	moveq	r3, #0
 8009246:	b2db      	uxtb	r3, r3
 8009248:	e02a      	b.n	80092a0 <HAL_DMA_IRQHandler+0x6e4>
 800924a:	bf00      	nop
 800924c:	40020010 	.word	0x40020010
 8009250:	40020028 	.word	0x40020028
 8009254:	40020040 	.word	0x40020040
 8009258:	40020058 	.word	0x40020058
 800925c:	40020070 	.word	0x40020070
 8009260:	40020088 	.word	0x40020088
 8009264:	400200a0 	.word	0x400200a0
 8009268:	400200b8 	.word	0x400200b8
 800926c:	40020410 	.word	0x40020410
 8009270:	40020428 	.word	0x40020428
 8009274:	40020440 	.word	0x40020440
 8009278:	40020458 	.word	0x40020458
 800927c:	40020470 	.word	0x40020470
 8009280:	40020488 	.word	0x40020488
 8009284:	400204a0 	.word	0x400204a0
 8009288:	400204b8 	.word	0x400204b8
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f003 0302 	and.w	r3, r3, #2
 8009296:	2b00      	cmp	r3, #0
 8009298:	bf14      	ite	ne
 800929a:	2301      	movne	r3, #1
 800929c:	2300      	moveq	r3, #0
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f000 8087 	beq.w	80093b4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092aa:	f003 031f 	and.w	r3, r3, #31
 80092ae:	2220      	movs	r2, #32
 80092b0:	409a      	lsls	r2, r3
 80092b2:	6a3b      	ldr	r3, [r7, #32]
 80092b4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	2b04      	cmp	r3, #4
 80092c0:	d139      	bne.n	8009336 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f022 0216 	bic.w	r2, r2, #22
 80092d0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	695a      	ldr	r2, [r3, #20]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80092e0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d103      	bne.n	80092f2 <HAL_DMA_IRQHandler+0x736>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d007      	beq.n	8009302 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f022 0208 	bic.w	r2, r2, #8
 8009300:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009306:	f003 031f 	and.w	r3, r3, #31
 800930a:	223f      	movs	r2, #63	@ 0x3f
 800930c:	409a      	lsls	r2, r3
 800930e:	6a3b      	ldr	r3, [r7, #32]
 8009310:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2201      	movs	r2, #1
 8009316:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009326:	2b00      	cmp	r3, #0
 8009328:	f000 834a 	beq.w	80099c0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	4798      	blx	r3
          }
          return;
 8009334:	e344      	b.n	80099c0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009340:	2b00      	cmp	r3, #0
 8009342:	d018      	beq.n	8009376 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800934e:	2b00      	cmp	r3, #0
 8009350:	d108      	bne.n	8009364 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009356:	2b00      	cmp	r3, #0
 8009358:	d02c      	beq.n	80093b4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	4798      	blx	r3
 8009362:	e027      	b.n	80093b4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009368:	2b00      	cmp	r3, #0
 800936a:	d023      	beq.n	80093b4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	4798      	blx	r3
 8009374:	e01e      	b.n	80093b4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009380:	2b00      	cmp	r3, #0
 8009382:	d10f      	bne.n	80093a4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f022 0210 	bic.w	r2, r2, #16
 8009392:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2201      	movs	r2, #1
 8009398:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d003      	beq.n	80093b4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	f000 8306 	beq.w	80099ca <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093c2:	f003 0301 	and.w	r3, r3, #1
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	f000 8088 	beq.w	80094dc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2204      	movs	r2, #4
 80093d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a7a      	ldr	r2, [pc, #488]	@ (80095c4 <HAL_DMA_IRQHandler+0xa08>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d04a      	beq.n	8009474 <HAL_DMA_IRQHandler+0x8b8>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a79      	ldr	r2, [pc, #484]	@ (80095c8 <HAL_DMA_IRQHandler+0xa0c>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d045      	beq.n	8009474 <HAL_DMA_IRQHandler+0x8b8>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a77      	ldr	r2, [pc, #476]	@ (80095cc <HAL_DMA_IRQHandler+0xa10>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d040      	beq.n	8009474 <HAL_DMA_IRQHandler+0x8b8>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a76      	ldr	r2, [pc, #472]	@ (80095d0 <HAL_DMA_IRQHandler+0xa14>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d03b      	beq.n	8009474 <HAL_DMA_IRQHandler+0x8b8>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a74      	ldr	r2, [pc, #464]	@ (80095d4 <HAL_DMA_IRQHandler+0xa18>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d036      	beq.n	8009474 <HAL_DMA_IRQHandler+0x8b8>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a73      	ldr	r2, [pc, #460]	@ (80095d8 <HAL_DMA_IRQHandler+0xa1c>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d031      	beq.n	8009474 <HAL_DMA_IRQHandler+0x8b8>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a71      	ldr	r2, [pc, #452]	@ (80095dc <HAL_DMA_IRQHandler+0xa20>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d02c      	beq.n	8009474 <HAL_DMA_IRQHandler+0x8b8>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a70      	ldr	r2, [pc, #448]	@ (80095e0 <HAL_DMA_IRQHandler+0xa24>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d027      	beq.n	8009474 <HAL_DMA_IRQHandler+0x8b8>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a6e      	ldr	r2, [pc, #440]	@ (80095e4 <HAL_DMA_IRQHandler+0xa28>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d022      	beq.n	8009474 <HAL_DMA_IRQHandler+0x8b8>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a6d      	ldr	r2, [pc, #436]	@ (80095e8 <HAL_DMA_IRQHandler+0xa2c>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d01d      	beq.n	8009474 <HAL_DMA_IRQHandler+0x8b8>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a6b      	ldr	r2, [pc, #428]	@ (80095ec <HAL_DMA_IRQHandler+0xa30>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d018      	beq.n	8009474 <HAL_DMA_IRQHandler+0x8b8>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a6a      	ldr	r2, [pc, #424]	@ (80095f0 <HAL_DMA_IRQHandler+0xa34>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d013      	beq.n	8009474 <HAL_DMA_IRQHandler+0x8b8>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a68      	ldr	r2, [pc, #416]	@ (80095f4 <HAL_DMA_IRQHandler+0xa38>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d00e      	beq.n	8009474 <HAL_DMA_IRQHandler+0x8b8>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a67      	ldr	r2, [pc, #412]	@ (80095f8 <HAL_DMA_IRQHandler+0xa3c>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d009      	beq.n	8009474 <HAL_DMA_IRQHandler+0x8b8>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a65      	ldr	r2, [pc, #404]	@ (80095fc <HAL_DMA_IRQHandler+0xa40>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d004      	beq.n	8009474 <HAL_DMA_IRQHandler+0x8b8>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a64      	ldr	r2, [pc, #400]	@ (8009600 <HAL_DMA_IRQHandler+0xa44>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d108      	bne.n	8009486 <HAL_DMA_IRQHandler+0x8ca>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f022 0201 	bic.w	r2, r2, #1
 8009482:	601a      	str	r2, [r3, #0]
 8009484:	e007      	b.n	8009496 <HAL_DMA_IRQHandler+0x8da>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f022 0201 	bic.w	r2, r2, #1
 8009494:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	3301      	adds	r3, #1
 800949a:	60fb      	str	r3, [r7, #12]
 800949c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800949e:	429a      	cmp	r2, r3
 80094a0:	d307      	bcc.n	80094b2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f003 0301 	and.w	r3, r3, #1
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d1f2      	bne.n	8009496 <HAL_DMA_IRQHandler+0x8da>
 80094b0:	e000      	b.n	80094b4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80094b2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f003 0301 	and.w	r3, r3, #1
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d004      	beq.n	80094cc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2203      	movs	r2, #3
 80094c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80094ca:	e003      	b.n	80094d4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2200      	movs	r2, #0
 80094d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	f000 8272 	beq.w	80099ca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	4798      	blx	r3
 80094ee:	e26c      	b.n	80099ca <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a43      	ldr	r2, [pc, #268]	@ (8009604 <HAL_DMA_IRQHandler+0xa48>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d022      	beq.n	8009540 <HAL_DMA_IRQHandler+0x984>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a42      	ldr	r2, [pc, #264]	@ (8009608 <HAL_DMA_IRQHandler+0xa4c>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d01d      	beq.n	8009540 <HAL_DMA_IRQHandler+0x984>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a40      	ldr	r2, [pc, #256]	@ (800960c <HAL_DMA_IRQHandler+0xa50>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d018      	beq.n	8009540 <HAL_DMA_IRQHandler+0x984>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a3f      	ldr	r2, [pc, #252]	@ (8009610 <HAL_DMA_IRQHandler+0xa54>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d013      	beq.n	8009540 <HAL_DMA_IRQHandler+0x984>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a3d      	ldr	r2, [pc, #244]	@ (8009614 <HAL_DMA_IRQHandler+0xa58>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d00e      	beq.n	8009540 <HAL_DMA_IRQHandler+0x984>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4a3c      	ldr	r2, [pc, #240]	@ (8009618 <HAL_DMA_IRQHandler+0xa5c>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d009      	beq.n	8009540 <HAL_DMA_IRQHandler+0x984>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a3a      	ldr	r2, [pc, #232]	@ (800961c <HAL_DMA_IRQHandler+0xa60>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d004      	beq.n	8009540 <HAL_DMA_IRQHandler+0x984>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a39      	ldr	r2, [pc, #228]	@ (8009620 <HAL_DMA_IRQHandler+0xa64>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d101      	bne.n	8009544 <HAL_DMA_IRQHandler+0x988>
 8009540:	2301      	movs	r3, #1
 8009542:	e000      	b.n	8009546 <HAL_DMA_IRQHandler+0x98a>
 8009544:	2300      	movs	r3, #0
 8009546:	2b00      	cmp	r3, #0
 8009548:	f000 823f 	beq.w	80099ca <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009558:	f003 031f 	and.w	r3, r3, #31
 800955c:	2204      	movs	r2, #4
 800955e:	409a      	lsls	r2, r3
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	4013      	ands	r3, r2
 8009564:	2b00      	cmp	r3, #0
 8009566:	f000 80cd 	beq.w	8009704 <HAL_DMA_IRQHandler+0xb48>
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	f003 0304 	and.w	r3, r3, #4
 8009570:	2b00      	cmp	r3, #0
 8009572:	f000 80c7 	beq.w	8009704 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800957a:	f003 031f 	and.w	r3, r3, #31
 800957e:	2204      	movs	r2, #4
 8009580:	409a      	lsls	r2, r3
 8009582:	69fb      	ldr	r3, [r7, #28]
 8009584:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800958c:	2b00      	cmp	r3, #0
 800958e:	d049      	beq.n	8009624 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009596:	2b00      	cmp	r3, #0
 8009598:	d109      	bne.n	80095ae <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800959e:	2b00      	cmp	r3, #0
 80095a0:	f000 8210 	beq.w	80099c4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80095ac:	e20a      	b.n	80099c4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f000 8206 	beq.w	80099c4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80095c0:	e200      	b.n	80099c4 <HAL_DMA_IRQHandler+0xe08>
 80095c2:	bf00      	nop
 80095c4:	40020010 	.word	0x40020010
 80095c8:	40020028 	.word	0x40020028
 80095cc:	40020040 	.word	0x40020040
 80095d0:	40020058 	.word	0x40020058
 80095d4:	40020070 	.word	0x40020070
 80095d8:	40020088 	.word	0x40020088
 80095dc:	400200a0 	.word	0x400200a0
 80095e0:	400200b8 	.word	0x400200b8
 80095e4:	40020410 	.word	0x40020410
 80095e8:	40020428 	.word	0x40020428
 80095ec:	40020440 	.word	0x40020440
 80095f0:	40020458 	.word	0x40020458
 80095f4:	40020470 	.word	0x40020470
 80095f8:	40020488 	.word	0x40020488
 80095fc:	400204a0 	.word	0x400204a0
 8009600:	400204b8 	.word	0x400204b8
 8009604:	58025408 	.word	0x58025408
 8009608:	5802541c 	.word	0x5802541c
 800960c:	58025430 	.word	0x58025430
 8009610:	58025444 	.word	0x58025444
 8009614:	58025458 	.word	0x58025458
 8009618:	5802546c 	.word	0x5802546c
 800961c:	58025480 	.word	0x58025480
 8009620:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	f003 0320 	and.w	r3, r3, #32
 800962a:	2b00      	cmp	r3, #0
 800962c:	d160      	bne.n	80096f0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a7f      	ldr	r2, [pc, #508]	@ (8009830 <HAL_DMA_IRQHandler+0xc74>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d04a      	beq.n	80096ce <HAL_DMA_IRQHandler+0xb12>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a7d      	ldr	r2, [pc, #500]	@ (8009834 <HAL_DMA_IRQHandler+0xc78>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d045      	beq.n	80096ce <HAL_DMA_IRQHandler+0xb12>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a7c      	ldr	r2, [pc, #496]	@ (8009838 <HAL_DMA_IRQHandler+0xc7c>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d040      	beq.n	80096ce <HAL_DMA_IRQHandler+0xb12>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a7a      	ldr	r2, [pc, #488]	@ (800983c <HAL_DMA_IRQHandler+0xc80>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d03b      	beq.n	80096ce <HAL_DMA_IRQHandler+0xb12>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a79      	ldr	r2, [pc, #484]	@ (8009840 <HAL_DMA_IRQHandler+0xc84>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d036      	beq.n	80096ce <HAL_DMA_IRQHandler+0xb12>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a77      	ldr	r2, [pc, #476]	@ (8009844 <HAL_DMA_IRQHandler+0xc88>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d031      	beq.n	80096ce <HAL_DMA_IRQHandler+0xb12>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a76      	ldr	r2, [pc, #472]	@ (8009848 <HAL_DMA_IRQHandler+0xc8c>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d02c      	beq.n	80096ce <HAL_DMA_IRQHandler+0xb12>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a74      	ldr	r2, [pc, #464]	@ (800984c <HAL_DMA_IRQHandler+0xc90>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d027      	beq.n	80096ce <HAL_DMA_IRQHandler+0xb12>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a73      	ldr	r2, [pc, #460]	@ (8009850 <HAL_DMA_IRQHandler+0xc94>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d022      	beq.n	80096ce <HAL_DMA_IRQHandler+0xb12>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a71      	ldr	r2, [pc, #452]	@ (8009854 <HAL_DMA_IRQHandler+0xc98>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d01d      	beq.n	80096ce <HAL_DMA_IRQHandler+0xb12>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a70      	ldr	r2, [pc, #448]	@ (8009858 <HAL_DMA_IRQHandler+0xc9c>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d018      	beq.n	80096ce <HAL_DMA_IRQHandler+0xb12>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a6e      	ldr	r2, [pc, #440]	@ (800985c <HAL_DMA_IRQHandler+0xca0>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d013      	beq.n	80096ce <HAL_DMA_IRQHandler+0xb12>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a6d      	ldr	r2, [pc, #436]	@ (8009860 <HAL_DMA_IRQHandler+0xca4>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d00e      	beq.n	80096ce <HAL_DMA_IRQHandler+0xb12>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a6b      	ldr	r2, [pc, #428]	@ (8009864 <HAL_DMA_IRQHandler+0xca8>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d009      	beq.n	80096ce <HAL_DMA_IRQHandler+0xb12>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a6a      	ldr	r2, [pc, #424]	@ (8009868 <HAL_DMA_IRQHandler+0xcac>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d004      	beq.n	80096ce <HAL_DMA_IRQHandler+0xb12>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a68      	ldr	r2, [pc, #416]	@ (800986c <HAL_DMA_IRQHandler+0xcb0>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d108      	bne.n	80096e0 <HAL_DMA_IRQHandler+0xb24>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f022 0208 	bic.w	r2, r2, #8
 80096dc:	601a      	str	r2, [r3, #0]
 80096de:	e007      	b.n	80096f0 <HAL_DMA_IRQHandler+0xb34>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	681a      	ldr	r2, [r3, #0]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f022 0204 	bic.w	r2, r2, #4
 80096ee:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f000 8165 	beq.w	80099c4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009702:	e15f      	b.n	80099c4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009708:	f003 031f 	and.w	r3, r3, #31
 800970c:	2202      	movs	r2, #2
 800970e:	409a      	lsls	r2, r3
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	4013      	ands	r3, r2
 8009714:	2b00      	cmp	r3, #0
 8009716:	f000 80c5 	beq.w	80098a4 <HAL_DMA_IRQHandler+0xce8>
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	f003 0302 	and.w	r3, r3, #2
 8009720:	2b00      	cmp	r3, #0
 8009722:	f000 80bf 	beq.w	80098a4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800972a:	f003 031f 	and.w	r3, r3, #31
 800972e:	2202      	movs	r2, #2
 8009730:	409a      	lsls	r2, r3
 8009732:	69fb      	ldr	r3, [r7, #28]
 8009734:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800973c:	2b00      	cmp	r3, #0
 800973e:	d018      	beq.n	8009772 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009746:	2b00      	cmp	r3, #0
 8009748:	d109      	bne.n	800975e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800974e:	2b00      	cmp	r3, #0
 8009750:	f000 813a 	beq.w	80099c8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800975c:	e134      	b.n	80099c8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009762:	2b00      	cmp	r3, #0
 8009764:	f000 8130 	beq.w	80099c8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009770:	e12a      	b.n	80099c8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	f003 0320 	and.w	r3, r3, #32
 8009778:	2b00      	cmp	r3, #0
 800977a:	f040 8089 	bne.w	8009890 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a2b      	ldr	r2, [pc, #172]	@ (8009830 <HAL_DMA_IRQHandler+0xc74>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d04a      	beq.n	800981e <HAL_DMA_IRQHandler+0xc62>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a29      	ldr	r2, [pc, #164]	@ (8009834 <HAL_DMA_IRQHandler+0xc78>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d045      	beq.n	800981e <HAL_DMA_IRQHandler+0xc62>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a28      	ldr	r2, [pc, #160]	@ (8009838 <HAL_DMA_IRQHandler+0xc7c>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d040      	beq.n	800981e <HAL_DMA_IRQHandler+0xc62>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a26      	ldr	r2, [pc, #152]	@ (800983c <HAL_DMA_IRQHandler+0xc80>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d03b      	beq.n	800981e <HAL_DMA_IRQHandler+0xc62>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a25      	ldr	r2, [pc, #148]	@ (8009840 <HAL_DMA_IRQHandler+0xc84>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d036      	beq.n	800981e <HAL_DMA_IRQHandler+0xc62>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a23      	ldr	r2, [pc, #140]	@ (8009844 <HAL_DMA_IRQHandler+0xc88>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d031      	beq.n	800981e <HAL_DMA_IRQHandler+0xc62>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a22      	ldr	r2, [pc, #136]	@ (8009848 <HAL_DMA_IRQHandler+0xc8c>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d02c      	beq.n	800981e <HAL_DMA_IRQHandler+0xc62>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a20      	ldr	r2, [pc, #128]	@ (800984c <HAL_DMA_IRQHandler+0xc90>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d027      	beq.n	800981e <HAL_DMA_IRQHandler+0xc62>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a1f      	ldr	r2, [pc, #124]	@ (8009850 <HAL_DMA_IRQHandler+0xc94>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d022      	beq.n	800981e <HAL_DMA_IRQHandler+0xc62>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4a1d      	ldr	r2, [pc, #116]	@ (8009854 <HAL_DMA_IRQHandler+0xc98>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d01d      	beq.n	800981e <HAL_DMA_IRQHandler+0xc62>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a1c      	ldr	r2, [pc, #112]	@ (8009858 <HAL_DMA_IRQHandler+0xc9c>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d018      	beq.n	800981e <HAL_DMA_IRQHandler+0xc62>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a1a      	ldr	r2, [pc, #104]	@ (800985c <HAL_DMA_IRQHandler+0xca0>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d013      	beq.n	800981e <HAL_DMA_IRQHandler+0xc62>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a19      	ldr	r2, [pc, #100]	@ (8009860 <HAL_DMA_IRQHandler+0xca4>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d00e      	beq.n	800981e <HAL_DMA_IRQHandler+0xc62>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a17      	ldr	r2, [pc, #92]	@ (8009864 <HAL_DMA_IRQHandler+0xca8>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d009      	beq.n	800981e <HAL_DMA_IRQHandler+0xc62>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a16      	ldr	r2, [pc, #88]	@ (8009868 <HAL_DMA_IRQHandler+0xcac>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d004      	beq.n	800981e <HAL_DMA_IRQHandler+0xc62>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a14      	ldr	r2, [pc, #80]	@ (800986c <HAL_DMA_IRQHandler+0xcb0>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d128      	bne.n	8009870 <HAL_DMA_IRQHandler+0xcb4>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f022 0214 	bic.w	r2, r2, #20
 800982c:	601a      	str	r2, [r3, #0]
 800982e:	e027      	b.n	8009880 <HAL_DMA_IRQHandler+0xcc4>
 8009830:	40020010 	.word	0x40020010
 8009834:	40020028 	.word	0x40020028
 8009838:	40020040 	.word	0x40020040
 800983c:	40020058 	.word	0x40020058
 8009840:	40020070 	.word	0x40020070
 8009844:	40020088 	.word	0x40020088
 8009848:	400200a0 	.word	0x400200a0
 800984c:	400200b8 	.word	0x400200b8
 8009850:	40020410 	.word	0x40020410
 8009854:	40020428 	.word	0x40020428
 8009858:	40020440 	.word	0x40020440
 800985c:	40020458 	.word	0x40020458
 8009860:	40020470 	.word	0x40020470
 8009864:	40020488 	.word	0x40020488
 8009868:	400204a0 	.word	0x400204a0
 800986c:	400204b8 	.word	0x400204b8
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f022 020a 	bic.w	r2, r2, #10
 800987e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2201      	movs	r2, #1
 8009884:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009894:	2b00      	cmp	r3, #0
 8009896:	f000 8097 	beq.w	80099c8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80098a2:	e091      	b.n	80099c8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098a8:	f003 031f 	and.w	r3, r3, #31
 80098ac:	2208      	movs	r2, #8
 80098ae:	409a      	lsls	r2, r3
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	4013      	ands	r3, r2
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	f000 8088 	beq.w	80099ca <HAL_DMA_IRQHandler+0xe0e>
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	f003 0308 	and.w	r3, r3, #8
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	f000 8082 	beq.w	80099ca <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a41      	ldr	r2, [pc, #260]	@ (80099d0 <HAL_DMA_IRQHandler+0xe14>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d04a      	beq.n	8009966 <HAL_DMA_IRQHandler+0xdaa>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a3f      	ldr	r2, [pc, #252]	@ (80099d4 <HAL_DMA_IRQHandler+0xe18>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d045      	beq.n	8009966 <HAL_DMA_IRQHandler+0xdaa>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a3e      	ldr	r2, [pc, #248]	@ (80099d8 <HAL_DMA_IRQHandler+0xe1c>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d040      	beq.n	8009966 <HAL_DMA_IRQHandler+0xdaa>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a3c      	ldr	r2, [pc, #240]	@ (80099dc <HAL_DMA_IRQHandler+0xe20>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d03b      	beq.n	8009966 <HAL_DMA_IRQHandler+0xdaa>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a3b      	ldr	r2, [pc, #236]	@ (80099e0 <HAL_DMA_IRQHandler+0xe24>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d036      	beq.n	8009966 <HAL_DMA_IRQHandler+0xdaa>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a39      	ldr	r2, [pc, #228]	@ (80099e4 <HAL_DMA_IRQHandler+0xe28>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d031      	beq.n	8009966 <HAL_DMA_IRQHandler+0xdaa>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a38      	ldr	r2, [pc, #224]	@ (80099e8 <HAL_DMA_IRQHandler+0xe2c>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d02c      	beq.n	8009966 <HAL_DMA_IRQHandler+0xdaa>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a36      	ldr	r2, [pc, #216]	@ (80099ec <HAL_DMA_IRQHandler+0xe30>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d027      	beq.n	8009966 <HAL_DMA_IRQHandler+0xdaa>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a35      	ldr	r2, [pc, #212]	@ (80099f0 <HAL_DMA_IRQHandler+0xe34>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d022      	beq.n	8009966 <HAL_DMA_IRQHandler+0xdaa>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a33      	ldr	r2, [pc, #204]	@ (80099f4 <HAL_DMA_IRQHandler+0xe38>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d01d      	beq.n	8009966 <HAL_DMA_IRQHandler+0xdaa>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a32      	ldr	r2, [pc, #200]	@ (80099f8 <HAL_DMA_IRQHandler+0xe3c>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d018      	beq.n	8009966 <HAL_DMA_IRQHandler+0xdaa>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a30      	ldr	r2, [pc, #192]	@ (80099fc <HAL_DMA_IRQHandler+0xe40>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d013      	beq.n	8009966 <HAL_DMA_IRQHandler+0xdaa>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a2f      	ldr	r2, [pc, #188]	@ (8009a00 <HAL_DMA_IRQHandler+0xe44>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d00e      	beq.n	8009966 <HAL_DMA_IRQHandler+0xdaa>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a2d      	ldr	r2, [pc, #180]	@ (8009a04 <HAL_DMA_IRQHandler+0xe48>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d009      	beq.n	8009966 <HAL_DMA_IRQHandler+0xdaa>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a2c      	ldr	r2, [pc, #176]	@ (8009a08 <HAL_DMA_IRQHandler+0xe4c>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d004      	beq.n	8009966 <HAL_DMA_IRQHandler+0xdaa>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a2a      	ldr	r2, [pc, #168]	@ (8009a0c <HAL_DMA_IRQHandler+0xe50>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d108      	bne.n	8009978 <HAL_DMA_IRQHandler+0xdbc>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f022 021c 	bic.w	r2, r2, #28
 8009974:	601a      	str	r2, [r3, #0]
 8009976:	e007      	b.n	8009988 <HAL_DMA_IRQHandler+0xdcc>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f022 020e 	bic.w	r2, r2, #14
 8009986:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800998c:	f003 031f 	and.w	r3, r3, #31
 8009990:	2201      	movs	r2, #1
 8009992:	409a      	lsls	r2, r3
 8009994:	69fb      	ldr	r3, [r7, #28]
 8009996:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2201      	movs	r2, #1
 80099a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2200      	movs	r2, #0
 80099aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d009      	beq.n	80099ca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	4798      	blx	r3
 80099be:	e004      	b.n	80099ca <HAL_DMA_IRQHandler+0xe0e>
          return;
 80099c0:	bf00      	nop
 80099c2:	e002      	b.n	80099ca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80099c4:	bf00      	nop
 80099c6:	e000      	b.n	80099ca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80099c8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80099ca:	3728      	adds	r7, #40	@ 0x28
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	40020010 	.word	0x40020010
 80099d4:	40020028 	.word	0x40020028
 80099d8:	40020040 	.word	0x40020040
 80099dc:	40020058 	.word	0x40020058
 80099e0:	40020070 	.word	0x40020070
 80099e4:	40020088 	.word	0x40020088
 80099e8:	400200a0 	.word	0x400200a0
 80099ec:	400200b8 	.word	0x400200b8
 80099f0:	40020410 	.word	0x40020410
 80099f4:	40020428 	.word	0x40020428
 80099f8:	40020440 	.word	0x40020440
 80099fc:	40020458 	.word	0x40020458
 8009a00:	40020470 	.word	0x40020470
 8009a04:	40020488 	.word	0x40020488
 8009a08:	400204a0 	.word	0x400204a0
 8009a0c:	400204b8 	.word	0x400204b8

08009a10 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b087      	sub	sp, #28
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	60b9      	str	r1, [r7, #8]
 8009a1a:	607a      	str	r2, [r7, #4]
 8009a1c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a22:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a28:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a7f      	ldr	r2, [pc, #508]	@ (8009c2c <DMA_SetConfig+0x21c>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d072      	beq.n	8009b1a <DMA_SetConfig+0x10a>
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a7d      	ldr	r2, [pc, #500]	@ (8009c30 <DMA_SetConfig+0x220>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d06d      	beq.n	8009b1a <DMA_SetConfig+0x10a>
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a7c      	ldr	r2, [pc, #496]	@ (8009c34 <DMA_SetConfig+0x224>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d068      	beq.n	8009b1a <DMA_SetConfig+0x10a>
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a7a      	ldr	r2, [pc, #488]	@ (8009c38 <DMA_SetConfig+0x228>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d063      	beq.n	8009b1a <DMA_SetConfig+0x10a>
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a79      	ldr	r2, [pc, #484]	@ (8009c3c <DMA_SetConfig+0x22c>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d05e      	beq.n	8009b1a <DMA_SetConfig+0x10a>
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a77      	ldr	r2, [pc, #476]	@ (8009c40 <DMA_SetConfig+0x230>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d059      	beq.n	8009b1a <DMA_SetConfig+0x10a>
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a76      	ldr	r2, [pc, #472]	@ (8009c44 <DMA_SetConfig+0x234>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d054      	beq.n	8009b1a <DMA_SetConfig+0x10a>
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a74      	ldr	r2, [pc, #464]	@ (8009c48 <DMA_SetConfig+0x238>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d04f      	beq.n	8009b1a <DMA_SetConfig+0x10a>
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a73      	ldr	r2, [pc, #460]	@ (8009c4c <DMA_SetConfig+0x23c>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d04a      	beq.n	8009b1a <DMA_SetConfig+0x10a>
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a71      	ldr	r2, [pc, #452]	@ (8009c50 <DMA_SetConfig+0x240>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d045      	beq.n	8009b1a <DMA_SetConfig+0x10a>
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a70      	ldr	r2, [pc, #448]	@ (8009c54 <DMA_SetConfig+0x244>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d040      	beq.n	8009b1a <DMA_SetConfig+0x10a>
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a6e      	ldr	r2, [pc, #440]	@ (8009c58 <DMA_SetConfig+0x248>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d03b      	beq.n	8009b1a <DMA_SetConfig+0x10a>
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a6d      	ldr	r2, [pc, #436]	@ (8009c5c <DMA_SetConfig+0x24c>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d036      	beq.n	8009b1a <DMA_SetConfig+0x10a>
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a6b      	ldr	r2, [pc, #428]	@ (8009c60 <DMA_SetConfig+0x250>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d031      	beq.n	8009b1a <DMA_SetConfig+0x10a>
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a6a      	ldr	r2, [pc, #424]	@ (8009c64 <DMA_SetConfig+0x254>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d02c      	beq.n	8009b1a <DMA_SetConfig+0x10a>
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a68      	ldr	r2, [pc, #416]	@ (8009c68 <DMA_SetConfig+0x258>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d027      	beq.n	8009b1a <DMA_SetConfig+0x10a>
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4a67      	ldr	r2, [pc, #412]	@ (8009c6c <DMA_SetConfig+0x25c>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d022      	beq.n	8009b1a <DMA_SetConfig+0x10a>
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a65      	ldr	r2, [pc, #404]	@ (8009c70 <DMA_SetConfig+0x260>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d01d      	beq.n	8009b1a <DMA_SetConfig+0x10a>
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a64      	ldr	r2, [pc, #400]	@ (8009c74 <DMA_SetConfig+0x264>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d018      	beq.n	8009b1a <DMA_SetConfig+0x10a>
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a62      	ldr	r2, [pc, #392]	@ (8009c78 <DMA_SetConfig+0x268>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d013      	beq.n	8009b1a <DMA_SetConfig+0x10a>
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a61      	ldr	r2, [pc, #388]	@ (8009c7c <DMA_SetConfig+0x26c>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d00e      	beq.n	8009b1a <DMA_SetConfig+0x10a>
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a5f      	ldr	r2, [pc, #380]	@ (8009c80 <DMA_SetConfig+0x270>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d009      	beq.n	8009b1a <DMA_SetConfig+0x10a>
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a5e      	ldr	r2, [pc, #376]	@ (8009c84 <DMA_SetConfig+0x274>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d004      	beq.n	8009b1a <DMA_SetConfig+0x10a>
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a5c      	ldr	r2, [pc, #368]	@ (8009c88 <DMA_SetConfig+0x278>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d101      	bne.n	8009b1e <DMA_SetConfig+0x10e>
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e000      	b.n	8009b20 <DMA_SetConfig+0x110>
 8009b1e:	2300      	movs	r3, #0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d00d      	beq.n	8009b40 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b28:	68fa      	ldr	r2, [r7, #12]
 8009b2a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009b2c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d004      	beq.n	8009b40 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b3a:	68fa      	ldr	r2, [r7, #12]
 8009b3c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009b3e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a39      	ldr	r2, [pc, #228]	@ (8009c2c <DMA_SetConfig+0x21c>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d04a      	beq.n	8009be0 <DMA_SetConfig+0x1d0>
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a38      	ldr	r2, [pc, #224]	@ (8009c30 <DMA_SetConfig+0x220>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d045      	beq.n	8009be0 <DMA_SetConfig+0x1d0>
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a36      	ldr	r2, [pc, #216]	@ (8009c34 <DMA_SetConfig+0x224>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d040      	beq.n	8009be0 <DMA_SetConfig+0x1d0>
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a35      	ldr	r2, [pc, #212]	@ (8009c38 <DMA_SetConfig+0x228>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d03b      	beq.n	8009be0 <DMA_SetConfig+0x1d0>
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a33      	ldr	r2, [pc, #204]	@ (8009c3c <DMA_SetConfig+0x22c>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d036      	beq.n	8009be0 <DMA_SetConfig+0x1d0>
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a32      	ldr	r2, [pc, #200]	@ (8009c40 <DMA_SetConfig+0x230>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d031      	beq.n	8009be0 <DMA_SetConfig+0x1d0>
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a30      	ldr	r2, [pc, #192]	@ (8009c44 <DMA_SetConfig+0x234>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d02c      	beq.n	8009be0 <DMA_SetConfig+0x1d0>
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a2f      	ldr	r2, [pc, #188]	@ (8009c48 <DMA_SetConfig+0x238>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d027      	beq.n	8009be0 <DMA_SetConfig+0x1d0>
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a2d      	ldr	r2, [pc, #180]	@ (8009c4c <DMA_SetConfig+0x23c>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d022      	beq.n	8009be0 <DMA_SetConfig+0x1d0>
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a2c      	ldr	r2, [pc, #176]	@ (8009c50 <DMA_SetConfig+0x240>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d01d      	beq.n	8009be0 <DMA_SetConfig+0x1d0>
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a2a      	ldr	r2, [pc, #168]	@ (8009c54 <DMA_SetConfig+0x244>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d018      	beq.n	8009be0 <DMA_SetConfig+0x1d0>
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a29      	ldr	r2, [pc, #164]	@ (8009c58 <DMA_SetConfig+0x248>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d013      	beq.n	8009be0 <DMA_SetConfig+0x1d0>
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a27      	ldr	r2, [pc, #156]	@ (8009c5c <DMA_SetConfig+0x24c>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d00e      	beq.n	8009be0 <DMA_SetConfig+0x1d0>
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a26      	ldr	r2, [pc, #152]	@ (8009c60 <DMA_SetConfig+0x250>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d009      	beq.n	8009be0 <DMA_SetConfig+0x1d0>
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a24      	ldr	r2, [pc, #144]	@ (8009c64 <DMA_SetConfig+0x254>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d004      	beq.n	8009be0 <DMA_SetConfig+0x1d0>
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a23      	ldr	r2, [pc, #140]	@ (8009c68 <DMA_SetConfig+0x258>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d101      	bne.n	8009be4 <DMA_SetConfig+0x1d4>
 8009be0:	2301      	movs	r3, #1
 8009be2:	e000      	b.n	8009be6 <DMA_SetConfig+0x1d6>
 8009be4:	2300      	movs	r3, #0
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d059      	beq.n	8009c9e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bee:	f003 031f 	and.w	r3, r3, #31
 8009bf2:	223f      	movs	r2, #63	@ 0x3f
 8009bf4:	409a      	lsls	r2, r3
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009c08:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	683a      	ldr	r2, [r7, #0]
 8009c10:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	2b40      	cmp	r3, #64	@ 0x40
 8009c18:	d138      	bne.n	8009c8c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	68ba      	ldr	r2, [r7, #8]
 8009c28:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009c2a:	e086      	b.n	8009d3a <DMA_SetConfig+0x32a>
 8009c2c:	40020010 	.word	0x40020010
 8009c30:	40020028 	.word	0x40020028
 8009c34:	40020040 	.word	0x40020040
 8009c38:	40020058 	.word	0x40020058
 8009c3c:	40020070 	.word	0x40020070
 8009c40:	40020088 	.word	0x40020088
 8009c44:	400200a0 	.word	0x400200a0
 8009c48:	400200b8 	.word	0x400200b8
 8009c4c:	40020410 	.word	0x40020410
 8009c50:	40020428 	.word	0x40020428
 8009c54:	40020440 	.word	0x40020440
 8009c58:	40020458 	.word	0x40020458
 8009c5c:	40020470 	.word	0x40020470
 8009c60:	40020488 	.word	0x40020488
 8009c64:	400204a0 	.word	0x400204a0
 8009c68:	400204b8 	.word	0x400204b8
 8009c6c:	58025408 	.word	0x58025408
 8009c70:	5802541c 	.word	0x5802541c
 8009c74:	58025430 	.word	0x58025430
 8009c78:	58025444 	.word	0x58025444
 8009c7c:	58025458 	.word	0x58025458
 8009c80:	5802546c 	.word	0x5802546c
 8009c84:	58025480 	.word	0x58025480
 8009c88:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	68ba      	ldr	r2, [r7, #8]
 8009c92:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	60da      	str	r2, [r3, #12]
}
 8009c9c:	e04d      	b.n	8009d3a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4a29      	ldr	r2, [pc, #164]	@ (8009d48 <DMA_SetConfig+0x338>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d022      	beq.n	8009cee <DMA_SetConfig+0x2de>
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a27      	ldr	r2, [pc, #156]	@ (8009d4c <DMA_SetConfig+0x33c>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d01d      	beq.n	8009cee <DMA_SetConfig+0x2de>
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a26      	ldr	r2, [pc, #152]	@ (8009d50 <DMA_SetConfig+0x340>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d018      	beq.n	8009cee <DMA_SetConfig+0x2de>
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a24      	ldr	r2, [pc, #144]	@ (8009d54 <DMA_SetConfig+0x344>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d013      	beq.n	8009cee <DMA_SetConfig+0x2de>
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a23      	ldr	r2, [pc, #140]	@ (8009d58 <DMA_SetConfig+0x348>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d00e      	beq.n	8009cee <DMA_SetConfig+0x2de>
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a21      	ldr	r2, [pc, #132]	@ (8009d5c <DMA_SetConfig+0x34c>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d009      	beq.n	8009cee <DMA_SetConfig+0x2de>
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a20      	ldr	r2, [pc, #128]	@ (8009d60 <DMA_SetConfig+0x350>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d004      	beq.n	8009cee <DMA_SetConfig+0x2de>
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a1e      	ldr	r2, [pc, #120]	@ (8009d64 <DMA_SetConfig+0x354>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d101      	bne.n	8009cf2 <DMA_SetConfig+0x2e2>
 8009cee:	2301      	movs	r3, #1
 8009cf0:	e000      	b.n	8009cf4 <DMA_SetConfig+0x2e4>
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d020      	beq.n	8009d3a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009cfc:	f003 031f 	and.w	r3, r3, #31
 8009d00:	2201      	movs	r2, #1
 8009d02:	409a      	lsls	r2, r3
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	683a      	ldr	r2, [r7, #0]
 8009d0e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	689b      	ldr	r3, [r3, #8]
 8009d14:	2b40      	cmp	r3, #64	@ 0x40
 8009d16:	d108      	bne.n	8009d2a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	68ba      	ldr	r2, [r7, #8]
 8009d26:	60da      	str	r2, [r3, #12]
}
 8009d28:	e007      	b.n	8009d3a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	68ba      	ldr	r2, [r7, #8]
 8009d30:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	60da      	str	r2, [r3, #12]
}
 8009d3a:	bf00      	nop
 8009d3c:	371c      	adds	r7, #28
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr
 8009d46:	bf00      	nop
 8009d48:	58025408 	.word	0x58025408
 8009d4c:	5802541c 	.word	0x5802541c
 8009d50:	58025430 	.word	0x58025430
 8009d54:	58025444 	.word	0x58025444
 8009d58:	58025458 	.word	0x58025458
 8009d5c:	5802546c 	.word	0x5802546c
 8009d60:	58025480 	.word	0x58025480
 8009d64:	58025494 	.word	0x58025494

08009d68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b085      	sub	sp, #20
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a42      	ldr	r2, [pc, #264]	@ (8009e80 <DMA_CalcBaseAndBitshift+0x118>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d04a      	beq.n	8009e10 <DMA_CalcBaseAndBitshift+0xa8>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a41      	ldr	r2, [pc, #260]	@ (8009e84 <DMA_CalcBaseAndBitshift+0x11c>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d045      	beq.n	8009e10 <DMA_CalcBaseAndBitshift+0xa8>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a3f      	ldr	r2, [pc, #252]	@ (8009e88 <DMA_CalcBaseAndBitshift+0x120>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d040      	beq.n	8009e10 <DMA_CalcBaseAndBitshift+0xa8>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a3e      	ldr	r2, [pc, #248]	@ (8009e8c <DMA_CalcBaseAndBitshift+0x124>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d03b      	beq.n	8009e10 <DMA_CalcBaseAndBitshift+0xa8>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a3c      	ldr	r2, [pc, #240]	@ (8009e90 <DMA_CalcBaseAndBitshift+0x128>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d036      	beq.n	8009e10 <DMA_CalcBaseAndBitshift+0xa8>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a3b      	ldr	r2, [pc, #236]	@ (8009e94 <DMA_CalcBaseAndBitshift+0x12c>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d031      	beq.n	8009e10 <DMA_CalcBaseAndBitshift+0xa8>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a39      	ldr	r2, [pc, #228]	@ (8009e98 <DMA_CalcBaseAndBitshift+0x130>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d02c      	beq.n	8009e10 <DMA_CalcBaseAndBitshift+0xa8>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a38      	ldr	r2, [pc, #224]	@ (8009e9c <DMA_CalcBaseAndBitshift+0x134>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d027      	beq.n	8009e10 <DMA_CalcBaseAndBitshift+0xa8>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4a36      	ldr	r2, [pc, #216]	@ (8009ea0 <DMA_CalcBaseAndBitshift+0x138>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d022      	beq.n	8009e10 <DMA_CalcBaseAndBitshift+0xa8>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4a35      	ldr	r2, [pc, #212]	@ (8009ea4 <DMA_CalcBaseAndBitshift+0x13c>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d01d      	beq.n	8009e10 <DMA_CalcBaseAndBitshift+0xa8>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a33      	ldr	r2, [pc, #204]	@ (8009ea8 <DMA_CalcBaseAndBitshift+0x140>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d018      	beq.n	8009e10 <DMA_CalcBaseAndBitshift+0xa8>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4a32      	ldr	r2, [pc, #200]	@ (8009eac <DMA_CalcBaseAndBitshift+0x144>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d013      	beq.n	8009e10 <DMA_CalcBaseAndBitshift+0xa8>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a30      	ldr	r2, [pc, #192]	@ (8009eb0 <DMA_CalcBaseAndBitshift+0x148>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d00e      	beq.n	8009e10 <DMA_CalcBaseAndBitshift+0xa8>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a2f      	ldr	r2, [pc, #188]	@ (8009eb4 <DMA_CalcBaseAndBitshift+0x14c>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d009      	beq.n	8009e10 <DMA_CalcBaseAndBitshift+0xa8>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a2d      	ldr	r2, [pc, #180]	@ (8009eb8 <DMA_CalcBaseAndBitshift+0x150>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d004      	beq.n	8009e10 <DMA_CalcBaseAndBitshift+0xa8>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a2c      	ldr	r2, [pc, #176]	@ (8009ebc <DMA_CalcBaseAndBitshift+0x154>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d101      	bne.n	8009e14 <DMA_CalcBaseAndBitshift+0xac>
 8009e10:	2301      	movs	r3, #1
 8009e12:	e000      	b.n	8009e16 <DMA_CalcBaseAndBitshift+0xae>
 8009e14:	2300      	movs	r3, #0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d024      	beq.n	8009e64 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	b2db      	uxtb	r3, r3
 8009e20:	3b10      	subs	r3, #16
 8009e22:	4a27      	ldr	r2, [pc, #156]	@ (8009ec0 <DMA_CalcBaseAndBitshift+0x158>)
 8009e24:	fba2 2303 	umull	r2, r3, r2, r3
 8009e28:	091b      	lsrs	r3, r3, #4
 8009e2a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f003 0307 	and.w	r3, r3, #7
 8009e32:	4a24      	ldr	r2, [pc, #144]	@ (8009ec4 <DMA_CalcBaseAndBitshift+0x15c>)
 8009e34:	5cd3      	ldrb	r3, [r2, r3]
 8009e36:	461a      	mov	r2, r3
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2b03      	cmp	r3, #3
 8009e40:	d908      	bls.n	8009e54 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	461a      	mov	r2, r3
 8009e48:	4b1f      	ldr	r3, [pc, #124]	@ (8009ec8 <DMA_CalcBaseAndBitshift+0x160>)
 8009e4a:	4013      	ands	r3, r2
 8009e4c:	1d1a      	adds	r2, r3, #4
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	659a      	str	r2, [r3, #88]	@ 0x58
 8009e52:	e00d      	b.n	8009e70 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	461a      	mov	r2, r3
 8009e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8009ec8 <DMA_CalcBaseAndBitshift+0x160>)
 8009e5c:	4013      	ands	r3, r2
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e62:	e005      	b.n	8009e70 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3714      	adds	r7, #20
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr
 8009e80:	40020010 	.word	0x40020010
 8009e84:	40020028 	.word	0x40020028
 8009e88:	40020040 	.word	0x40020040
 8009e8c:	40020058 	.word	0x40020058
 8009e90:	40020070 	.word	0x40020070
 8009e94:	40020088 	.word	0x40020088
 8009e98:	400200a0 	.word	0x400200a0
 8009e9c:	400200b8 	.word	0x400200b8
 8009ea0:	40020410 	.word	0x40020410
 8009ea4:	40020428 	.word	0x40020428
 8009ea8:	40020440 	.word	0x40020440
 8009eac:	40020458 	.word	0x40020458
 8009eb0:	40020470 	.word	0x40020470
 8009eb4:	40020488 	.word	0x40020488
 8009eb8:	400204a0 	.word	0x400204a0
 8009ebc:	400204b8 	.word	0x400204b8
 8009ec0:	aaaaaaab 	.word	0xaaaaaaab
 8009ec4:	08015224 	.word	0x08015224
 8009ec8:	fffffc00 	.word	0xfffffc00

08009ecc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b085      	sub	sp, #20
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	699b      	ldr	r3, [r3, #24]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d120      	bne.n	8009f22 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ee4:	2b03      	cmp	r3, #3
 8009ee6:	d858      	bhi.n	8009f9a <DMA_CheckFifoParam+0xce>
 8009ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8009ef0 <DMA_CheckFifoParam+0x24>)
 8009eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eee:	bf00      	nop
 8009ef0:	08009f01 	.word	0x08009f01
 8009ef4:	08009f13 	.word	0x08009f13
 8009ef8:	08009f01 	.word	0x08009f01
 8009efc:	08009f9b 	.word	0x08009f9b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d048      	beq.n	8009f9e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009f10:	e045      	b.n	8009f9e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f16:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009f1a:	d142      	bne.n	8009fa2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009f20:	e03f      	b.n	8009fa2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	699b      	ldr	r3, [r3, #24]
 8009f26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f2a:	d123      	bne.n	8009f74 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f30:	2b03      	cmp	r3, #3
 8009f32:	d838      	bhi.n	8009fa6 <DMA_CheckFifoParam+0xda>
 8009f34:	a201      	add	r2, pc, #4	@ (adr r2, 8009f3c <DMA_CheckFifoParam+0x70>)
 8009f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f3a:	bf00      	nop
 8009f3c:	08009f4d 	.word	0x08009f4d
 8009f40:	08009f53 	.word	0x08009f53
 8009f44:	08009f4d 	.word	0x08009f4d
 8009f48:	08009f65 	.word	0x08009f65
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	73fb      	strb	r3, [r7, #15]
        break;
 8009f50:	e030      	b.n	8009fb4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f56:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d025      	beq.n	8009faa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009f62:	e022      	b.n	8009faa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f68:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009f6c:	d11f      	bne.n	8009fae <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009f72:	e01c      	b.n	8009fae <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f78:	2b02      	cmp	r3, #2
 8009f7a:	d902      	bls.n	8009f82 <DMA_CheckFifoParam+0xb6>
 8009f7c:	2b03      	cmp	r3, #3
 8009f7e:	d003      	beq.n	8009f88 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009f80:	e018      	b.n	8009fb4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009f82:	2301      	movs	r3, #1
 8009f84:	73fb      	strb	r3, [r7, #15]
        break;
 8009f86:	e015      	b.n	8009fb4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d00e      	beq.n	8009fb2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009f94:	2301      	movs	r3, #1
 8009f96:	73fb      	strb	r3, [r7, #15]
    break;
 8009f98:	e00b      	b.n	8009fb2 <DMA_CheckFifoParam+0xe6>
        break;
 8009f9a:	bf00      	nop
 8009f9c:	e00a      	b.n	8009fb4 <DMA_CheckFifoParam+0xe8>
        break;
 8009f9e:	bf00      	nop
 8009fa0:	e008      	b.n	8009fb4 <DMA_CheckFifoParam+0xe8>
        break;
 8009fa2:	bf00      	nop
 8009fa4:	e006      	b.n	8009fb4 <DMA_CheckFifoParam+0xe8>
        break;
 8009fa6:	bf00      	nop
 8009fa8:	e004      	b.n	8009fb4 <DMA_CheckFifoParam+0xe8>
        break;
 8009faa:	bf00      	nop
 8009fac:	e002      	b.n	8009fb4 <DMA_CheckFifoParam+0xe8>
        break;
 8009fae:	bf00      	nop
 8009fb0:	e000      	b.n	8009fb4 <DMA_CheckFifoParam+0xe8>
    break;
 8009fb2:	bf00      	nop
    }
  }

  return status;
 8009fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3714      	adds	r7, #20
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop

08009fc4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b085      	sub	sp, #20
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a38      	ldr	r2, [pc, #224]	@ (800a0b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d022      	beq.n	800a022 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a36      	ldr	r2, [pc, #216]	@ (800a0bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d01d      	beq.n	800a022 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a35      	ldr	r2, [pc, #212]	@ (800a0c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d018      	beq.n	800a022 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a33      	ldr	r2, [pc, #204]	@ (800a0c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d013      	beq.n	800a022 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a32      	ldr	r2, [pc, #200]	@ (800a0c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d00e      	beq.n	800a022 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a30      	ldr	r2, [pc, #192]	@ (800a0cc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d009      	beq.n	800a022 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4a2f      	ldr	r2, [pc, #188]	@ (800a0d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d004      	beq.n	800a022 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a2d      	ldr	r2, [pc, #180]	@ (800a0d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d101      	bne.n	800a026 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800a022:	2301      	movs	r3, #1
 800a024:	e000      	b.n	800a028 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800a026:	2300      	movs	r3, #0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d01a      	beq.n	800a062 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	b2db      	uxtb	r3, r3
 800a032:	3b08      	subs	r3, #8
 800a034:	4a28      	ldr	r2, [pc, #160]	@ (800a0d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800a036:	fba2 2303 	umull	r2, r3, r2, r3
 800a03a:	091b      	lsrs	r3, r3, #4
 800a03c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800a03e:	68fa      	ldr	r2, [r7, #12]
 800a040:	4b26      	ldr	r3, [pc, #152]	@ (800a0dc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800a042:	4413      	add	r3, r2
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	461a      	mov	r2, r3
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	4a24      	ldr	r2, [pc, #144]	@ (800a0e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800a050:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f003 031f 	and.w	r3, r3, #31
 800a058:	2201      	movs	r2, #1
 800a05a:	409a      	lsls	r2, r3
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800a060:	e024      	b.n	800a0ac <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	b2db      	uxtb	r3, r3
 800a068:	3b10      	subs	r3, #16
 800a06a:	4a1e      	ldr	r2, [pc, #120]	@ (800a0e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800a06c:	fba2 2303 	umull	r2, r3, r2, r3
 800a070:	091b      	lsrs	r3, r3, #4
 800a072:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	4a1c      	ldr	r2, [pc, #112]	@ (800a0e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d806      	bhi.n	800a08a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	4a1b      	ldr	r2, [pc, #108]	@ (800a0ec <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d902      	bls.n	800a08a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	3308      	adds	r3, #8
 800a088:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800a08a:	68fa      	ldr	r2, [r7, #12]
 800a08c:	4b18      	ldr	r3, [pc, #96]	@ (800a0f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800a08e:	4413      	add	r3, r2
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	461a      	mov	r2, r3
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	4a16      	ldr	r2, [pc, #88]	@ (800a0f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800a09c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f003 031f 	and.w	r3, r3, #31
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	409a      	lsls	r2, r3
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a0ac:	bf00      	nop
 800a0ae:	3714      	adds	r7, #20
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr
 800a0b8:	58025408 	.word	0x58025408
 800a0bc:	5802541c 	.word	0x5802541c
 800a0c0:	58025430 	.word	0x58025430
 800a0c4:	58025444 	.word	0x58025444
 800a0c8:	58025458 	.word	0x58025458
 800a0cc:	5802546c 	.word	0x5802546c
 800a0d0:	58025480 	.word	0x58025480
 800a0d4:	58025494 	.word	0x58025494
 800a0d8:	cccccccd 	.word	0xcccccccd
 800a0dc:	16009600 	.word	0x16009600
 800a0e0:	58025880 	.word	0x58025880
 800a0e4:	aaaaaaab 	.word	0xaaaaaaab
 800a0e8:	400204b8 	.word	0x400204b8
 800a0ec:	4002040f 	.word	0x4002040f
 800a0f0:	10008200 	.word	0x10008200
 800a0f4:	40020880 	.word	0x40020880

0800a0f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b085      	sub	sp, #20
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	b2db      	uxtb	r3, r3
 800a106:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d04a      	beq.n	800a1a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2b08      	cmp	r3, #8
 800a112:	d847      	bhi.n	800a1a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a25      	ldr	r2, [pc, #148]	@ (800a1b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d022      	beq.n	800a164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a24      	ldr	r2, [pc, #144]	@ (800a1b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d01d      	beq.n	800a164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a22      	ldr	r2, [pc, #136]	@ (800a1b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d018      	beq.n	800a164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4a21      	ldr	r2, [pc, #132]	@ (800a1bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d013      	beq.n	800a164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a1f      	ldr	r2, [pc, #124]	@ (800a1c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d00e      	beq.n	800a164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a1e      	ldr	r2, [pc, #120]	@ (800a1c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d009      	beq.n	800a164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a1c      	ldr	r2, [pc, #112]	@ (800a1c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d004      	beq.n	800a164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a1b      	ldr	r2, [pc, #108]	@ (800a1cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d101      	bne.n	800a168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800a164:	2301      	movs	r3, #1
 800a166:	e000      	b.n	800a16a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800a168:	2300      	movs	r3, #0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00a      	beq.n	800a184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800a16e:	68fa      	ldr	r2, [r7, #12]
 800a170:	4b17      	ldr	r3, [pc, #92]	@ (800a1d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800a172:	4413      	add	r3, r2
 800a174:	009b      	lsls	r3, r3, #2
 800a176:	461a      	mov	r2, r3
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	4a15      	ldr	r2, [pc, #84]	@ (800a1d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800a180:	671a      	str	r2, [r3, #112]	@ 0x70
 800a182:	e009      	b.n	800a198 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a184:	68fa      	ldr	r2, [r7, #12]
 800a186:	4b14      	ldr	r3, [pc, #80]	@ (800a1d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800a188:	4413      	add	r3, r2
 800a18a:	009b      	lsls	r3, r3, #2
 800a18c:	461a      	mov	r2, r3
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	4a11      	ldr	r2, [pc, #68]	@ (800a1dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800a196:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	3b01      	subs	r3, #1
 800a19c:	2201      	movs	r2, #1
 800a19e:	409a      	lsls	r2, r3
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800a1a4:	bf00      	nop
 800a1a6:	3714      	adds	r7, #20
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr
 800a1b0:	58025408 	.word	0x58025408
 800a1b4:	5802541c 	.word	0x5802541c
 800a1b8:	58025430 	.word	0x58025430
 800a1bc:	58025444 	.word	0x58025444
 800a1c0:	58025458 	.word	0x58025458
 800a1c4:	5802546c 	.word	0x5802546c
 800a1c8:	58025480 	.word	0x58025480
 800a1cc:	58025494 	.word	0x58025494
 800a1d0:	1600963f 	.word	0x1600963f
 800a1d4:	58025940 	.word	0x58025940
 800a1d8:	1000823f 	.word	0x1000823f
 800a1dc:	40020940 	.word	0x40020940

0800a1e0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d101      	bne.n	800a1f2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e0cf      	b.n	800a392 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d106      	bne.n	800a20a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2223      	movs	r2, #35	@ 0x23
 800a200:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f7fa f817 	bl	8004238 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a20a:	4b64      	ldr	r3, [pc, #400]	@ (800a39c <HAL_ETH_Init+0x1bc>)
 800a20c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a210:	4a62      	ldr	r2, [pc, #392]	@ (800a39c <HAL_ETH_Init+0x1bc>)
 800a212:	f043 0302 	orr.w	r3, r3, #2
 800a216:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800a21a:	4b60      	ldr	r3, [pc, #384]	@ (800a39c <HAL_ETH_Init+0x1bc>)
 800a21c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a220:	f003 0302 	and.w	r3, r3, #2
 800a224:	60bb      	str	r3, [r7, #8]
 800a226:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	7a1b      	ldrb	r3, [r3, #8]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d103      	bne.n	800a238 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800a230:	2000      	movs	r0, #0
 800a232:	f7fa fd85 	bl	8004d40 <HAL_SYSCFG_ETHInterfaceSelect>
 800a236:	e003      	b.n	800a240 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800a238:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800a23c:	f7fa fd80 	bl	8004d40 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800a240:	4b57      	ldr	r3, [pc, #348]	@ (800a3a0 <HAL_ETH_Init+0x1c0>)
 800a242:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	6812      	ldr	r2, [r2, #0]
 800a252:	f043 0301 	orr.w	r3, r3, #1
 800a256:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a25a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a25c:	f7fa fd40 	bl	8004ce0 <HAL_GetTick>
 800a260:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800a262:	e011      	b.n	800a288 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800a264:	f7fa fd3c 	bl	8004ce0 <HAL_GetTick>
 800a268:	4602      	mov	r2, r0
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	1ad3      	subs	r3, r2, r3
 800a26e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800a272:	d909      	bls.n	800a288 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2204      	movs	r2, #4
 800a278:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	22e0      	movs	r2, #224	@ 0xe0
 800a280:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800a284:	2301      	movs	r3, #1
 800a286:	e084      	b.n	800a392 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f003 0301 	and.w	r3, r3, #1
 800a296:	2b00      	cmp	r3, #0
 800a298:	d1e4      	bne.n	800a264 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 f886 	bl	800a3ac <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800a2a0:	f001 fed8 	bl	800c054 <HAL_RCC_GetHCLKFreq>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	4a3f      	ldr	r2, [pc, #252]	@ (800a3a4 <HAL_ETH_Init+0x1c4>)
 800a2a8:	fba2 2303 	umull	r2, r3, r2, r3
 800a2ac:	0c9a      	lsrs	r2, r3, #18
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	3a01      	subs	r2, #1
 800a2b4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f000 fa71 	bl	800a7a0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a2c6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800a2ca:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	6812      	ldr	r2, [r2, #0]
 800a2d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a2d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a2da:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	695b      	ldr	r3, [r3, #20]
 800a2e2:	f003 0303 	and.w	r3, r3, #3
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d009      	beq.n	800a2fe <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	22e0      	movs	r2, #224	@ 0xe0
 800a2f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	e049      	b.n	800a392 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a306:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800a30a:	4b27      	ldr	r3, [pc, #156]	@ (800a3a8 <HAL_ETH_Init+0x1c8>)
 800a30c:	4013      	ands	r3, r2
 800a30e:	687a      	ldr	r2, [r7, #4]
 800a310:	6952      	ldr	r2, [r2, #20]
 800a312:	0051      	lsls	r1, r2, #1
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	6812      	ldr	r2, [r2, #0]
 800a318:	430b      	orrs	r3, r1
 800a31a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a31e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 fad9 	bl	800a8da <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 fb1f 	bl	800a96c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	3305      	adds	r3, #5
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	021a      	lsls	r2, r3, #8
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	3304      	adds	r3, #4
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	4619      	mov	r1, r3
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	430a      	orrs	r2, r1
 800a348:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	3303      	adds	r3, #3
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	061a      	lsls	r2, r3, #24
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	3302      	adds	r3, #2
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	041b      	lsls	r3, r3, #16
 800a360:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	3301      	adds	r3, #1
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800a36c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800a37a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800a37c:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2210      	movs	r2, #16
 800a38c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a390:	2300      	movs	r3, #0
}
 800a392:	4618      	mov	r0, r3
 800a394:	3710      	adds	r7, #16
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
 800a39a:	bf00      	nop
 800a39c:	58024400 	.word	0x58024400
 800a3a0:	58000400 	.word	0x58000400
 800a3a4:	431bde83 	.word	0x431bde83
 800a3a8:	ffff8001 	.word	0xffff8001

0800a3ac <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a3bc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a3c4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800a3c6:	f001 fe45 	bl	800c054 <HAL_RCC_GetHCLKFreq>
 800a3ca:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	4a1e      	ldr	r2, [pc, #120]	@ (800a448 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d908      	bls.n	800a3e6 <HAL_ETH_SetMDIOClockRange+0x3a>
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	4a1d      	ldr	r2, [pc, #116]	@ (800a44c <HAL_ETH_SetMDIOClockRange+0xa0>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d804      	bhi.n	800a3e6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a3e2:	60fb      	str	r3, [r7, #12]
 800a3e4:	e027      	b.n	800a436 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	4a18      	ldr	r2, [pc, #96]	@ (800a44c <HAL_ETH_SetMDIOClockRange+0xa0>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d908      	bls.n	800a400 <HAL_ETH_SetMDIOClockRange+0x54>
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	4a17      	ldr	r2, [pc, #92]	@ (800a450 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d204      	bcs.n	800a400 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800a3fc:	60fb      	str	r3, [r7, #12]
 800a3fe:	e01a      	b.n	800a436 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	4a13      	ldr	r2, [pc, #76]	@ (800a450 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d303      	bcc.n	800a410 <HAL_ETH_SetMDIOClockRange+0x64>
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	4a12      	ldr	r2, [pc, #72]	@ (800a454 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d911      	bls.n	800a434 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	4a10      	ldr	r2, [pc, #64]	@ (800a454 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d908      	bls.n	800a42a <HAL_ETH_SetMDIOClockRange+0x7e>
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	4a0f      	ldr	r2, [pc, #60]	@ (800a458 <HAL_ETH_SetMDIOClockRange+0xac>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d804      	bhi.n	800a42a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a426:	60fb      	str	r3, [r7, #12]
 800a428:	e005      	b.n	800a436 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a430:	60fb      	str	r3, [r7, #12]
 800a432:	e000      	b.n	800a436 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800a434:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	68fa      	ldr	r2, [r7, #12]
 800a43c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800a440:	bf00      	nop
 800a442:	3710      	adds	r7, #16
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}
 800a448:	01312cff 	.word	0x01312cff
 800a44c:	02160ebf 	.word	0x02160ebf
 800a450:	03938700 	.word	0x03938700
 800a454:	05f5e0ff 	.word	0x05f5e0ff
 800a458:	08f0d17f 	.word	0x08f0d17f

0800a45c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b085      	sub	sp, #20
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800a46e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	791b      	ldrb	r3, [r3, #4]
 800a474:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800a476:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	7b1b      	ldrb	r3, [r3, #12]
 800a47c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800a47e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	7b5b      	ldrb	r3, [r3, #13]
 800a484:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800a486:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	7b9b      	ldrb	r3, [r3, #14]
 800a48c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800a48e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	7bdb      	ldrb	r3, [r3, #15]
 800a494:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800a496:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800a498:	683a      	ldr	r2, [r7, #0]
 800a49a:	7c12      	ldrb	r2, [r2, #16]
 800a49c:	2a00      	cmp	r2, #0
 800a49e:	d102      	bne.n	800a4a6 <ETH_SetMACConfig+0x4a>
 800a4a0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800a4a4:	e000      	b.n	800a4a8 <ETH_SetMACConfig+0x4c>
 800a4a6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800a4a8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800a4aa:	683a      	ldr	r2, [r7, #0]
 800a4ac:	7c52      	ldrb	r2, [r2, #17]
 800a4ae:	2a00      	cmp	r2, #0
 800a4b0:	d102      	bne.n	800a4b8 <ETH_SetMACConfig+0x5c>
 800a4b2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800a4b6:	e000      	b.n	800a4ba <ETH_SetMACConfig+0x5e>
 800a4b8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800a4ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	7c9b      	ldrb	r3, [r3, #18]
 800a4c0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800a4c2:	431a      	orrs	r2, r3
               macconf->Speed |
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800a4c8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800a4ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	7f1b      	ldrb	r3, [r3, #28]
 800a4d4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800a4d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	7f5b      	ldrb	r3, [r3, #29]
 800a4dc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800a4de:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800a4e0:	683a      	ldr	r2, [r7, #0]
 800a4e2:	7f92      	ldrb	r2, [r2, #30]
 800a4e4:	2a00      	cmp	r2, #0
 800a4e6:	d102      	bne.n	800a4ee <ETH_SetMACConfig+0x92>
 800a4e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a4ec:	e000      	b.n	800a4f0 <ETH_SetMACConfig+0x94>
 800a4ee:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800a4f0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	7fdb      	ldrb	r3, [r3, #31]
 800a4f6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800a4f8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800a4fa:	683a      	ldr	r2, [r7, #0]
 800a4fc:	f892 2020 	ldrb.w	r2, [r2, #32]
 800a500:	2a00      	cmp	r2, #0
 800a502:	d102      	bne.n	800a50a <ETH_SetMACConfig+0xae>
 800a504:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a508:	e000      	b.n	800a50c <ETH_SetMACConfig+0xb0>
 800a50a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800a50c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800a512:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a51a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800a51c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800a522:	4313      	orrs	r3, r2
 800a524:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	4b56      	ldr	r3, [pc, #344]	@ (800a688 <ETH_SetMACConfig+0x22c>)
 800a52e:	4013      	ands	r3, r2
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	6812      	ldr	r2, [r2, #0]
 800a534:	68f9      	ldr	r1, [r7, #12]
 800a536:	430b      	orrs	r3, r1
 800a538:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a53e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a546:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a548:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a550:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800a552:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a55a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800a55c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800a55e:	683a      	ldr	r2, [r7, #0]
 800a560:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 800a564:	2a00      	cmp	r2, #0
 800a566:	d102      	bne.n	800a56e <ETH_SetMACConfig+0x112>
 800a568:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800a56c:	e000      	b.n	800a570 <ETH_SetMACConfig+0x114>
 800a56e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800a570:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a576:	4313      	orrs	r3, r2
 800a578:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	685a      	ldr	r2, [r3, #4]
 800a580:	4b42      	ldr	r3, [pc, #264]	@ (800a68c <ETH_SetMACConfig+0x230>)
 800a582:	4013      	ands	r3, r2
 800a584:	687a      	ldr	r2, [r7, #4]
 800a586:	6812      	ldr	r2, [r2, #0]
 800a588:	68f9      	ldr	r1, [r7, #12]
 800a58a:	430b      	orrs	r3, r1
 800a58c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a594:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800a59a:	4313      	orrs	r3, r2
 800a59c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	68da      	ldr	r2, [r3, #12]
 800a5a4:	4b3a      	ldr	r3, [pc, #232]	@ (800a690 <ETH_SetMACConfig+0x234>)
 800a5a6:	4013      	ands	r3, r2
 800a5a8:	687a      	ldr	r2, [r7, #4]
 800a5aa:	6812      	ldr	r2, [r2, #0]
 800a5ac:	68f9      	ldr	r1, [r7, #12]
 800a5ae:	430b      	orrs	r3, r1
 800a5b0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800a5b8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a5be:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800a5c0:	683a      	ldr	r2, [r7, #0]
 800a5c2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800a5c6:	2a00      	cmp	r2, #0
 800a5c8:	d101      	bne.n	800a5ce <ETH_SetMACConfig+0x172>
 800a5ca:	2280      	movs	r2, #128	@ 0x80
 800a5cc:	e000      	b.n	800a5d0 <ETH_SetMACConfig+0x174>
 800a5ce:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800a5d0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a5d6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a5e2:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800a5e6:	4013      	ands	r3, r2
 800a5e8:	687a      	ldr	r2, [r7, #4]
 800a5ea:	6812      	ldr	r2, [r2, #0]
 800a5ec:	68f9      	ldr	r1, [r7, #12]
 800a5ee:	430b      	orrs	r3, r1
 800a5f0:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800a5f8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800a600:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800a602:	4313      	orrs	r3, r2
 800a604:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a60e:	f023 0103 	bic.w	r1, r3, #3
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	68fa      	ldr	r2, [r7, #12]
 800a618:	430a      	orrs	r2, r1
 800a61a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800a626:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	430a      	orrs	r2, r1
 800a634:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800a63c:	683a      	ldr	r2, [r7, #0]
 800a63e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800a642:	2a00      	cmp	r2, #0
 800a644:	d101      	bne.n	800a64a <ETH_SetMACConfig+0x1ee>
 800a646:	2240      	movs	r2, #64	@ 0x40
 800a648:	e000      	b.n	800a64c <ETH_SetMACConfig+0x1f0>
 800a64a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800a64c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800a654:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800a656:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800a65e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800a660:	4313      	orrs	r3, r2
 800a662:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800a66c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	68fa      	ldr	r2, [r7, #12]
 800a676:	430a      	orrs	r2, r1
 800a678:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 800a67c:	bf00      	nop
 800a67e:	3714      	adds	r7, #20
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr
 800a688:	00048083 	.word	0x00048083
 800a68c:	c0f88000 	.word	0xc0f88000
 800a690:	fffffef0 	.word	0xfffffef0

0800a694 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800a694:	b480      	push	{r7}
 800a696:	b085      	sub	sp, #20
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	4b38      	ldr	r3, [pc, #224]	@ (800a78c <ETH_SetDMAConfig+0xf8>)
 800a6aa:	4013      	ands	r3, r2
 800a6ac:	683a      	ldr	r2, [r7, #0]
 800a6ae:	6811      	ldr	r1, [r2, #0]
 800a6b0:	687a      	ldr	r2, [r7, #4]
 800a6b2:	6812      	ldr	r2, [r2, #0]
 800a6b4:	430b      	orrs	r3, r1
 800a6b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a6ba:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	791b      	ldrb	r3, [r3, #4]
 800a6c0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a6c6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	7b1b      	ldrb	r3, [r3, #12]
 800a6cc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a6da:	685a      	ldr	r2, [r3, #4]
 800a6dc:	4b2c      	ldr	r3, [pc, #176]	@ (800a790 <ETH_SetDMAConfig+0xfc>)
 800a6de:	4013      	ands	r3, r2
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	6812      	ldr	r2, [r2, #0]
 800a6e4:	68f9      	ldr	r1, [r7, #12]
 800a6e6:	430b      	orrs	r3, r1
 800a6e8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a6ec:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	7b5b      	ldrb	r3, [r3, #13]
 800a6f2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a704:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800a708:	4b22      	ldr	r3, [pc, #136]	@ (800a794 <ETH_SetDMAConfig+0x100>)
 800a70a:	4013      	ands	r3, r2
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	6812      	ldr	r2, [r2, #0]
 800a710:	68f9      	ldr	r1, [r7, #12]
 800a712:	430b      	orrs	r3, r1
 800a714:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a718:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	7d1b      	ldrb	r3, [r3, #20]
 800a724:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800a726:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	7f5b      	ldrb	r3, [r3, #29]
 800a72c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800a72e:	4313      	orrs	r3, r2
 800a730:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a73a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800a73e:	4b16      	ldr	r3, [pc, #88]	@ (800a798 <ETH_SetDMAConfig+0x104>)
 800a740:	4013      	ands	r3, r2
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	6812      	ldr	r2, [r2, #0]
 800a746:	68f9      	ldr	r1, [r7, #12]
 800a748:	430b      	orrs	r3, r1
 800a74a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a74e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	7f1b      	ldrb	r3, [r3, #28]
 800a756:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800a75c:	4313      	orrs	r3, r2
 800a75e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a768:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800a76c:	4b0b      	ldr	r3, [pc, #44]	@ (800a79c <ETH_SetDMAConfig+0x108>)
 800a76e:	4013      	ands	r3, r2
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	6812      	ldr	r2, [r2, #0]
 800a774:	68f9      	ldr	r1, [r7, #12]
 800a776:	430b      	orrs	r3, r1
 800a778:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a77c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 800a780:	bf00      	nop
 800a782:	3714      	adds	r7, #20
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr
 800a78c:	ffff87fd 	.word	0xffff87fd
 800a790:	ffff2ffe 	.word	0xffff2ffe
 800a794:	fffec000 	.word	0xfffec000
 800a798:	ffc0efef 	.word	0xffc0efef
 800a79c:	7fc0ffff 	.word	0x7fc0ffff

0800a7a0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b0a4      	sub	sp, #144	@ 0x90
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800a7dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a7e0:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800a7f8:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 800a7fc:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800a7fe:	2300      	movs	r3, #0
 800a800:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800a804:	2300      	movs	r3, #0
 800a806:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 800a808:	2301      	movs	r3, #1
 800a80a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800a80e:	2300      	movs	r3, #0
 800a810:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800a814:	2300      	movs	r3, #0
 800a816:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800a81a:	2300      	movs	r3, #0
 800a81c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0;
 800a81e:	2300      	movs	r3, #0
 800a820:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800a822:	2300      	movs	r3, #0
 800a824:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800a826:	2300      	movs	r3, #0
 800a828:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800a82c:	2300      	movs	r3, #0
 800a82e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800a832:	2301      	movs	r3, #1
 800a834:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800a838:	2320      	movs	r3, #32
 800a83a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800a83e:	2301      	movs	r3, #1
 800a840:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800a844:	2300      	movs	r3, #0
 800a846:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800a84a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800a84e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800a850:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a854:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800a856:	2300      	movs	r3, #0
 800a858:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800a85c:	2302      	movs	r3, #2
 800a85e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800a862:	2300      	movs	r3, #0
 800a864:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800a868:	2300      	movs	r3, #0
 800a86a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800a86e:	2300      	movs	r3, #0
 800a870:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800a874:	2301      	movs	r3, #1
 800a876:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800a87a:	2300      	movs	r3, #0
 800a87c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800a87e:	2301      	movs	r3, #1
 800a880:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800a884:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a888:	4619      	mov	r1, r3
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f7ff fde6 	bl	800a45c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800a890:	2301      	movs	r3, #1
 800a892:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800a894:	2301      	movs	r3, #1
 800a896:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800a898:	2300      	movs	r3, #0
 800a89a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800a89c:	2300      	movs	r3, #0
 800a89e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800a8aa:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a8ae:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800a8b4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a8b8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800a8c0:	f44f 7306 	mov.w	r3, #536	@ 0x218
 800a8c4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800a8c6:	f107 0308 	add.w	r3, r7, #8
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f7ff fee1 	bl	800a694 <ETH_SetDMAConfig>
}
 800a8d2:	bf00      	nop
 800a8d4:	3790      	adds	r7, #144	@ 0x90
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}

0800a8da <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800a8da:	b480      	push	{r7}
 800a8dc:	b085      	sub	sp, #20
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	60fb      	str	r3, [r7, #12]
 800a8e6:	e01d      	b.n	800a924 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	68d9      	ldr	r1, [r3, #12]
 800a8ec:	68fa      	ldr	r2, [r7, #12]
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	005b      	lsls	r3, r3, #1
 800a8f2:	4413      	add	r3, r2
 800a8f4:	00db      	lsls	r3, r3, #3
 800a8f6:	440b      	add	r3, r1
 800a8f8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	2200      	movs	r2, #0
 800a904:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	2200      	movs	r2, #0
 800a90a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	2200      	movs	r2, #0
 800a910:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800a912:	68b9      	ldr	r1, [r7, #8]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	68fa      	ldr	r2, [r7, #12]
 800a918:	3206      	adds	r2, #6
 800a91a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	3301      	adds	r3, #1
 800a922:	60fb      	str	r3, [r7, #12]
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2b03      	cmp	r3, #3
 800a928:	d9de      	bls.n	800a8e8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2200      	movs	r2, #0
 800a92e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a938:	461a      	mov	r2, r3
 800a93a:	2303      	movs	r3, #3
 800a93c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	68da      	ldr	r2, [r3, #12]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a94c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	68da      	ldr	r2, [r3, #12]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a95c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 800a960:	bf00      	nop
 800a962:	3714      	adds	r7, #20
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr

0800a96c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b085      	sub	sp, #20
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800a974:	2300      	movs	r3, #0
 800a976:	60fb      	str	r3, [r7, #12]
 800a978:	e023      	b.n	800a9c2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6919      	ldr	r1, [r3, #16]
 800a97e:	68fa      	ldr	r2, [r7, #12]
 800a980:	4613      	mov	r3, r2
 800a982:	005b      	lsls	r3, r3, #1
 800a984:	4413      	add	r3, r2
 800a986:	00db      	lsls	r3, r3, #3
 800a988:	440b      	add	r3, r1
 800a98a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	2200      	movs	r2, #0
 800a990:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	2200      	movs	r2, #0
 800a996:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	2200      	movs	r2, #0
 800a99c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800a9b0:	68b9      	ldr	r1, [r7, #8]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	68fa      	ldr	r2, [r7, #12]
 800a9b6:	3212      	adds	r2, #18
 800a9b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	3301      	adds	r3, #1
 800a9c0:	60fb      	str	r3, [r7, #12]
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2b03      	cmp	r3, #3
 800a9c6:	d9d8      	bls.n	800a97a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	2303      	movs	r3, #3
 800a9f2:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	691a      	ldr	r2, [r3, #16]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa02:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	691b      	ldr	r3, [r3, #16]
 800aa0a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa16:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800aa1a:	bf00      	nop
 800aa1c:	3714      	adds	r7, #20
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr
	...

0800aa28 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b08a      	sub	sp, #40	@ 0x28
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 800aa3c:	2308      	movs	r3, #8
 800aa3e:	76fb      	strb	r3, [r7, #27]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800aa40:	4b2e      	ldr	r3, [pc, #184]	@ (800aafc <HAL_FLASH_Program+0xd4>)
 800aa42:	7d1b      	ldrb	r3, [r3, #20]
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d101      	bne.n	800aa4c <HAL_FLASH_Program+0x24>
 800aa48:	2302      	movs	r3, #2
 800aa4a:	e053      	b.n	800aaf4 <HAL_FLASH_Program+0xcc>
 800aa4c:	4b2b      	ldr	r3, [pc, #172]	@ (800aafc <HAL_FLASH_Program+0xd4>)
 800aa4e:	2201      	movs	r2, #1
 800aa50:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa58:	d315      	bcc.n	800aa86 <HAL_FLASH_Program+0x5e>
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 800aa60:	d211      	bcs.n	800aa86 <HAL_FLASH_Program+0x5e>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 800aa62:	2301      	movs	r3, #1
 800aa64:	617b      	str	r3, [r7, #20]
  {
    return HAL_ERROR;
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800aa66:	4b25      	ldr	r3, [pc, #148]	@ (800aafc <HAL_FLASH_Program+0xd4>)
 800aa68:	2200      	movs	r2, #0
 800aa6a:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800aa6c:	6979      	ldr	r1, [r7, #20]
 800aa6e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800aa72:	f000 f88d 	bl	800ab90 <FLASH_WaitForLastOperation>
 800aa76:	4603      	mov	r3, r0
 800aa78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if(status == HAL_OK)
 800aa7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d002      	beq.n	800aa8a <HAL_FLASH_Program+0x62>
 800aa84:	e031      	b.n	800aaea <HAL_FLASH_Program+0xc2>
    return HAL_ERROR;
 800aa86:	2301      	movs	r3, #1
 800aa88:	e034      	b.n	800aaf4 <HAL_FLASH_Program+0xcc>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800aa8a:	4b1d      	ldr	r3, [pc, #116]	@ (800ab00 <HAL_FLASH_Program+0xd8>)
 800aa8c:	68db      	ldr	r3, [r3, #12]
 800aa8e:	4a1c      	ldr	r2, [pc, #112]	@ (800ab00 <HAL_FLASH_Program+0xd8>)
 800aa90:	f043 0302 	orr.w	r3, r3, #2
 800aa94:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("isb 0xF":::"memory");
 800aa96:	f3bf 8f6f 	isb	sy
}
 800aa9a:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800aa9c:	f3bf 8f4f 	dsb	sy
}
 800aaa0:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 800aaa2:	69fb      	ldr	r3, [r7, #28]
 800aaa4:	681a      	ldr	r2, [r3, #0]
 800aaa6:	6a3b      	ldr	r3, [r7, #32]
 800aaa8:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800aaaa:	6a3b      	ldr	r3, [r7, #32]
 800aaac:	3304      	adds	r3, #4
 800aaae:	623b      	str	r3, [r7, #32]
        src_addr++;
 800aab0:	69fb      	ldr	r3, [r7, #28]
 800aab2:	3304      	adds	r3, #4
 800aab4:	61fb      	str	r3, [r7, #28]
        row_index--;
 800aab6:	7efb      	ldrb	r3, [r7, #27]
 800aab8:	3b01      	subs	r3, #1
 800aaba:	76fb      	strb	r3, [r7, #27]
     } while (row_index != 0U);
 800aabc:	7efb      	ldrb	r3, [r7, #27]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d1ef      	bne.n	800aaa2 <HAL_FLASH_Program+0x7a>
  __ASM volatile ("isb 0xF":::"memory");
 800aac2:	f3bf 8f6f 	isb	sy
}
 800aac6:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800aac8:	f3bf 8f4f 	dsb	sy
}
 800aacc:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800aace:	6979      	ldr	r1, [r7, #20]
 800aad0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800aad4:	f000 f85c 	bl	800ab90 <FLASH_WaitForLastOperation>
 800aad8:	4603      	mov	r3, r0
 800aada:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* If the program operation is completed, disable the PG */
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 800aade:	4b08      	ldr	r3, [pc, #32]	@ (800ab00 <HAL_FLASH_Program+0xd8>)
 800aae0:	68db      	ldr	r3, [r3, #12]
 800aae2:	4a07      	ldr	r2, [pc, #28]	@ (800ab00 <HAL_FLASH_Program+0xd8>)
 800aae4:	f023 0302 	bic.w	r3, r3, #2
 800aae8:	60d3      	str	r3, [r2, #12]
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800aaea:	4b04      	ldr	r3, [pc, #16]	@ (800aafc <HAL_FLASH_Program+0xd4>)
 800aaec:	2200      	movs	r2, #0
 800aaee:	751a      	strb	r2, [r3, #20]

  return status;
 800aaf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3728      	adds	r7, #40	@ 0x28
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}
 800aafc:	240010a8 	.word	0x240010a8
 800ab00:	52002000 	.word	0x52002000

0800ab04 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800ab04:	b480      	push	{r7}
 800ab06:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800ab08:	4b0c      	ldr	r3, [pc, #48]	@ (800ab3c <HAL_FLASH_Unlock+0x38>)
 800ab0a:	68db      	ldr	r3, [r3, #12]
 800ab0c:	f003 0301 	and.w	r3, r3, #1
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d00d      	beq.n	800ab30 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 800ab14:	4b09      	ldr	r3, [pc, #36]	@ (800ab3c <HAL_FLASH_Unlock+0x38>)
 800ab16:	4a0a      	ldr	r2, [pc, #40]	@ (800ab40 <HAL_FLASH_Unlock+0x3c>)
 800ab18:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800ab1a:	4b08      	ldr	r3, [pc, #32]	@ (800ab3c <HAL_FLASH_Unlock+0x38>)
 800ab1c:	4a09      	ldr	r2, [pc, #36]	@ (800ab44 <HAL_FLASH_Unlock+0x40>)
 800ab1e:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800ab20:	4b06      	ldr	r3, [pc, #24]	@ (800ab3c <HAL_FLASH_Unlock+0x38>)
 800ab22:	68db      	ldr	r3, [r3, #12]
 800ab24:	f003 0301 	and.w	r3, r3, #1
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d001      	beq.n	800ab30 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	e000      	b.n	800ab32 <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800ab30:	2300      	movs	r3, #0
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr
 800ab3c:	52002000 	.word	0x52002000
 800ab40:	45670123 	.word	0x45670123
 800ab44:	cdef89ab 	.word	0xcdef89ab

0800ab48 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 800ab4c:	4b09      	ldr	r3, [pc, #36]	@ (800ab74 <HAL_FLASH_Lock+0x2c>)
 800ab4e:	68db      	ldr	r3, [r3, #12]
 800ab50:	4a08      	ldr	r2, [pc, #32]	@ (800ab74 <HAL_FLASH_Lock+0x2c>)
 800ab52:	f043 0301 	orr.w	r3, r3, #1
 800ab56:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 800ab58:	4b06      	ldr	r3, [pc, #24]	@ (800ab74 <HAL_FLASH_Lock+0x2c>)
 800ab5a:	68db      	ldr	r3, [r3, #12]
 800ab5c:	f003 0301 	and.w	r3, r3, #1
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d101      	bne.n	800ab68 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 800ab64:	2301      	movs	r3, #1
 800ab66:	e000      	b.n	800ab6a <HAL_FLASH_Lock+0x22>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800ab68:	2300      	movs	r3, #0
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr
 800ab74:	52002000 	.word	0x52002000

0800ab78 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_DBECC_BANK2: Double Detection ECC on Bank 2
  *            @arg HAL_FLASH_ERROR_CRCRD_BANK2: CRC Read Error on Bank 2
*/

uint32_t HAL_FLASH_GetError(void)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800ab7c:	4b03      	ldr	r3, [pc, #12]	@ (800ab8c <HAL_FLASH_GetError+0x14>)
 800ab7e:	699b      	ldr	r3, [r3, #24]
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr
 800ab8a:	bf00      	nop
 800ab8c:	240010a8 	.word	0x240010a8

0800ab90 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b086      	sub	sp, #24
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800ab9a:	2304      	movs	r3, #4
 800ab9c:	613b      	str	r3, [r7, #16]
  uint32_t errorflag = 0;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800aba2:	f7fa f89d 	bl	8004ce0 <HAL_GetTick>
 800aba6:	60f8      	str	r0, [r7, #12]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800aba8:	e010      	b.n	800abcc <FLASH_WaitForLastOperation+0x3c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800abb0:	d00c      	beq.n	800abcc <FLASH_WaitForLastOperation+0x3c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800abb2:	f7fa f895 	bl	8004ce0 <HAL_GetTick>
 800abb6:	4602      	mov	r2, r0
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	1ad3      	subs	r3, r2, r3
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d302      	bcc.n	800abc8 <FLASH_WaitForLastOperation+0x38>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d101      	bne.n	800abcc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800abc8:	2303      	movs	r3, #3
 800abca:	e02d      	b.n	800ac28 <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800abcc:	4b18      	ldr	r3, [pc, #96]	@ (800ac30 <FLASH_WaitForLastOperation+0xa0>)
 800abce:	691a      	ldr	r2, [r3, #16]
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	4013      	ands	r3, r2
 800abd4:	693a      	ldr	r2, [r7, #16]
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d0e7      	beq.n	800abaa <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d104      	bne.n	800abea <FLASH_WaitForLastOperation+0x5a>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800abe0:	4b13      	ldr	r3, [pc, #76]	@ (800ac30 <FLASH_WaitForLastOperation+0xa0>)
 800abe2:	691a      	ldr	r2, [r3, #16]
 800abe4:	4b13      	ldr	r3, [pc, #76]	@ (800ac34 <FLASH_WaitForLastOperation+0xa4>)
 800abe6:	4013      	ands	r3, r2
 800abe8:	617b      	str	r3, [r7, #20]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d00a      	beq.n	800ac0a <FLASH_WaitForLastOperation+0x7a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800abf4:	4b10      	ldr	r3, [pc, #64]	@ (800ac38 <FLASH_WaitForLastOperation+0xa8>)
 800abf6:	699a      	ldr	r2, [r3, #24]
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	4313      	orrs	r3, r2
 800abfc:	4a0e      	ldr	r2, [pc, #56]	@ (800ac38 <FLASH_WaitForLastOperation+0xa8>)
 800abfe:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800ac00:	4a0b      	ldr	r2, [pc, #44]	@ (800ac30 <FLASH_WaitForLastOperation+0xa0>)
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
 800ac06:	2301      	movs	r3, #1
 800ac08:	e00e      	b.n	800ac28 <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d10a      	bne.n	800ac26 <FLASH_WaitForLastOperation+0x96>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800ac10:	4b07      	ldr	r3, [pc, #28]	@ (800ac30 <FLASH_WaitForLastOperation+0xa0>)
 800ac12:	691b      	ldr	r3, [r3, #16]
 800ac14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ac18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac1c:	d103      	bne.n	800ac26 <FLASH_WaitForLastOperation+0x96>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800ac1e:	4b04      	ldr	r3, [pc, #16]	@ (800ac30 <FLASH_WaitForLastOperation+0xa0>)
 800ac20:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800ac24:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800ac26:	2300      	movs	r3, #0
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3718      	adds	r7, #24
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}
 800ac30:	52002000 	.word	0x52002000
 800ac34:	17ee0000 	.word	0x17ee0000
 800ac38:	240010a8 	.word	0x240010a8

0800ac3c <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b084      	sub	sp, #16
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ac46:	2300      	movs	r3, #0
 800ac48:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ac4a:	4b3f      	ldr	r3, [pc, #252]	@ (800ad48 <HAL_FLASHEx_Erase+0x10c>)
 800ac4c:	7d1b      	ldrb	r3, [r3, #20]
 800ac4e:	2b01      	cmp	r3, #1
 800ac50:	d101      	bne.n	800ac56 <HAL_FLASHEx_Erase+0x1a>
 800ac52:	2302      	movs	r3, #2
 800ac54:	e074      	b.n	800ad40 <HAL_FLASHEx_Erase+0x104>
 800ac56:	4b3c      	ldr	r3, [pc, #240]	@ (800ad48 <HAL_FLASHEx_Erase+0x10c>)
 800ac58:	2201      	movs	r2, #1
 800ac5a:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ac5c:	4b3a      	ldr	r3, [pc, #232]	@ (800ad48 <HAL_FLASHEx_Erase+0x10c>)
 800ac5e:	2200      	movs	r2, #0
 800ac60:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	f003 0301 	and.w	r3, r3, #1
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d009      	beq.n	800ac82 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800ac6e:	2101      	movs	r1, #1
 800ac70:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800ac74:	f7ff ff8c 	bl	800ab90 <FLASH_WaitForLastOperation>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d001      	beq.n	800ac82 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800ac82:	7bfb      	ldrb	r3, [r7, #15]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d157      	bne.n	800ad38 <HAL_FLASHEx_Erase+0xfc>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d11e      	bne.n	800acce <HAL_FLASHEx_Erase+0x92>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	691a      	ldr	r2, [r3, #16]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	4619      	mov	r1, r3
 800ac9a:	4610      	mov	r0, r2
 800ac9c:	f000 f85a 	bl	800ad54 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	f003 0301 	and.w	r3, r3, #1
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d045      	beq.n	800ad38 <HAL_FLASHEx_Erase+0xfc>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800acac:	2101      	movs	r1, #1
 800acae:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800acb2:	f7ff ff6d 	bl	800ab90 <FLASH_WaitForLastOperation>
 800acb6:	4603      	mov	r3, r0
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d001      	beq.n	800acc0 <HAL_FLASHEx_Erase+0x84>
        {
          status = HAL_ERROR;
 800acbc:	2301      	movs	r3, #1
 800acbe:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800acc0:	4b22      	ldr	r3, [pc, #136]	@ (800ad4c <HAL_FLASHEx_Erase+0x110>)
 800acc2:	68db      	ldr	r3, [r3, #12]
 800acc4:	4a21      	ldr	r2, [pc, #132]	@ (800ad4c <HAL_FLASHEx_Erase+0x110>)
 800acc6:	f023 0308 	bic.w	r3, r3, #8
 800acca:	60d3      	str	r3, [r2, #12]
 800accc:	e034      	b.n	800ad38 <HAL_FLASHEx_Erase+0xfc>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800acd4:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	689b      	ldr	r3, [r3, #8]
 800acda:	60bb      	str	r3, [r7, #8]
 800acdc:	e024      	b.n	800ad28 <HAL_FLASHEx_Erase+0xec>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6859      	ldr	r1, [r3, #4]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	691b      	ldr	r3, [r3, #16]
 800ace6:	461a      	mov	r2, r3
 800ace8:	68b8      	ldr	r0, [r7, #8]
 800acea:	f000 f857 	bl	800ad9c <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	f003 0301 	and.w	r3, r3, #1
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d00c      	beq.n	800ad14 <HAL_FLASHEx_Erase+0xd8>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800acfa:	2101      	movs	r1, #1
 800acfc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800ad00:	f7ff ff46 	bl	800ab90 <FLASH_WaitForLastOperation>
 800ad04:	4603      	mov	r3, r0
 800ad06:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800ad08:	4b10      	ldr	r3, [pc, #64]	@ (800ad4c <HAL_FLASHEx_Erase+0x110>)
 800ad0a:	68da      	ldr	r2, [r3, #12]
 800ad0c:	490f      	ldr	r1, [pc, #60]	@ (800ad4c <HAL_FLASHEx_Erase+0x110>)
 800ad0e:	4b10      	ldr	r3, [pc, #64]	@ (800ad50 <HAL_FLASHEx_Erase+0x114>)
 800ad10:	4013      	ands	r3, r2
 800ad12:	60cb      	str	r3, [r1, #12]
          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800ad14:	7bfb      	ldrb	r3, [r7, #15]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d003      	beq.n	800ad22 <HAL_FLASHEx_Erase+0xe6>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	68ba      	ldr	r2, [r7, #8]
 800ad1e:	601a      	str	r2, [r3, #0]
          break;
 800ad20:	e00a      	b.n	800ad38 <HAL_FLASHEx_Erase+0xfc>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	3301      	adds	r3, #1
 800ad26:	60bb      	str	r3, [r7, #8]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	68da      	ldr	r2, [r3, #12]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	4413      	add	r3, r2
 800ad32:	68ba      	ldr	r2, [r7, #8]
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d3d2      	bcc.n	800acde <HAL_FLASHEx_Erase+0xa2>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ad38:	4b03      	ldr	r3, [pc, #12]	@ (800ad48 <HAL_FLASHEx_Erase+0x10c>)
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	751a      	strb	r2, [r3, #20]

  return status;
 800ad3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3710      	adds	r7, #16
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}
 800ad48:	240010a8 	.word	0x240010a8
 800ad4c:	52002000 	.word	0x52002000
 800ad50:	fffff8fb 	.word	0xfffff8fb

0800ad54 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b083      	sub	sp, #12
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	6039      	str	r1, [r7, #0]
  }
  else
#endif /* DUAL_BANK */
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	f003 0301 	and.w	r3, r3, #1
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d011      	beq.n	800ad8c <FLASH_MassErase+0x38>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank1 */
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800ad68:	4b0b      	ldr	r3, [pc, #44]	@ (800ad98 <FLASH_MassErase+0x44>)
 800ad6a:	68db      	ldr	r3, [r3, #12]
 800ad6c:	4a0a      	ldr	r2, [pc, #40]	@ (800ad98 <FLASH_MassErase+0x44>)
 800ad6e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800ad72:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800ad74:	4b08      	ldr	r3, [pc, #32]	@ (800ad98 <FLASH_MassErase+0x44>)
 800ad76:	68da      	ldr	r2, [r3, #12]
 800ad78:	4907      	ldr	r1, [pc, #28]	@ (800ad98 <FLASH_MassErase+0x44>)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	60cb      	str	r3, [r1, #12]
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800ad80:	4b05      	ldr	r3, [pc, #20]	@ (800ad98 <FLASH_MassErase+0x44>)
 800ad82:	68db      	ldr	r3, [r3, #12]
 800ad84:	4a04      	ldr	r2, [pc, #16]	@ (800ad98 <FLASH_MassErase+0x44>)
 800ad86:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 800ad8a:	60d3      	str	r3, [r2, #12]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800ad8c:	bf00      	nop
 800ad8e:	370c      	adds	r7, #12
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr
 800ad98:	52002000 	.word	0x52002000

0800ad9c <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b085      	sub	sp, #20
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	60f8      	str	r0, [r7, #12]
 800ada4:	60b9      	str	r1, [r7, #8]
 800ada6:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	f003 0301 	and.w	r3, r3, #1
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d010      	beq.n	800add4 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800adb2:	4b0b      	ldr	r3, [pc, #44]	@ (800ade0 <FLASH_Erase_Sector+0x44>)
 800adb4:	68db      	ldr	r3, [r3, #12]
 800adb6:	4a0a      	ldr	r2, [pc, #40]	@ (800ade0 <FLASH_Erase_Sector+0x44>)
 800adb8:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 800adbc:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800adbe:	4b08      	ldr	r3, [pc, #32]	@ (800ade0 <FLASH_Erase_Sector+0x44>)
 800adc0:	68da      	ldr	r2, [r3, #12]
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	0219      	lsls	r1, r3, #8
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	430b      	orrs	r3, r1
 800adca:	4313      	orrs	r3, r2
 800adcc:	4a04      	ldr	r2, [pc, #16]	@ (800ade0 <FLASH_Erase_Sector+0x44>)
 800adce:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 800add2:	60d3      	str	r3, [r2, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800add4:	bf00      	nop
 800add6:	3714      	adds	r7, #20
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr
 800ade0:	52002000 	.word	0x52002000

0800ade4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b089      	sub	sp, #36	@ 0x24
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800adee:	2300      	movs	r3, #0
 800adf0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800adf2:	4b86      	ldr	r3, [pc, #536]	@ (800b00c <HAL_GPIO_Init+0x228>)
 800adf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800adf6:	e18c      	b.n	800b112 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	681a      	ldr	r2, [r3, #0]
 800adfc:	2101      	movs	r1, #1
 800adfe:	69fb      	ldr	r3, [r7, #28]
 800ae00:	fa01 f303 	lsl.w	r3, r1, r3
 800ae04:	4013      	ands	r3, r2
 800ae06:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	f000 817e 	beq.w	800b10c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	f003 0303 	and.w	r3, r3, #3
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d005      	beq.n	800ae28 <HAL_GPIO_Init+0x44>
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	f003 0303 	and.w	r3, r3, #3
 800ae24:	2b02      	cmp	r3, #2
 800ae26:	d130      	bne.n	800ae8a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ae2e:	69fb      	ldr	r3, [r7, #28]
 800ae30:	005b      	lsls	r3, r3, #1
 800ae32:	2203      	movs	r2, #3
 800ae34:	fa02 f303 	lsl.w	r3, r2, r3
 800ae38:	43db      	mvns	r3, r3
 800ae3a:	69ba      	ldr	r2, [r7, #24]
 800ae3c:	4013      	ands	r3, r2
 800ae3e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	68da      	ldr	r2, [r3, #12]
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	005b      	lsls	r3, r3, #1
 800ae48:	fa02 f303 	lsl.w	r3, r2, r3
 800ae4c:	69ba      	ldr	r2, [r7, #24]
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	69ba      	ldr	r2, [r7, #24]
 800ae56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ae5e:	2201      	movs	r2, #1
 800ae60:	69fb      	ldr	r3, [r7, #28]
 800ae62:	fa02 f303 	lsl.w	r3, r2, r3
 800ae66:	43db      	mvns	r3, r3
 800ae68:	69ba      	ldr	r2, [r7, #24]
 800ae6a:	4013      	ands	r3, r2
 800ae6c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	091b      	lsrs	r3, r3, #4
 800ae74:	f003 0201 	and.w	r2, r3, #1
 800ae78:	69fb      	ldr	r3, [r7, #28]
 800ae7a:	fa02 f303 	lsl.w	r3, r2, r3
 800ae7e:	69ba      	ldr	r2, [r7, #24]
 800ae80:	4313      	orrs	r3, r2
 800ae82:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	69ba      	ldr	r2, [r7, #24]
 800ae88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	f003 0303 	and.w	r3, r3, #3
 800ae92:	2b03      	cmp	r3, #3
 800ae94:	d017      	beq.n	800aec6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	68db      	ldr	r3, [r3, #12]
 800ae9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ae9c:	69fb      	ldr	r3, [r7, #28]
 800ae9e:	005b      	lsls	r3, r3, #1
 800aea0:	2203      	movs	r2, #3
 800aea2:	fa02 f303 	lsl.w	r3, r2, r3
 800aea6:	43db      	mvns	r3, r3
 800aea8:	69ba      	ldr	r2, [r7, #24]
 800aeaa:	4013      	ands	r3, r2
 800aeac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	689a      	ldr	r2, [r3, #8]
 800aeb2:	69fb      	ldr	r3, [r7, #28]
 800aeb4:	005b      	lsls	r3, r3, #1
 800aeb6:	fa02 f303 	lsl.w	r3, r2, r3
 800aeba:	69ba      	ldr	r2, [r7, #24]
 800aebc:	4313      	orrs	r3, r2
 800aebe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	69ba      	ldr	r2, [r7, #24]
 800aec4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	f003 0303 	and.w	r3, r3, #3
 800aece:	2b02      	cmp	r3, #2
 800aed0:	d123      	bne.n	800af1a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800aed2:	69fb      	ldr	r3, [r7, #28]
 800aed4:	08da      	lsrs	r2, r3, #3
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	3208      	adds	r2, #8
 800aeda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800aee0:	69fb      	ldr	r3, [r7, #28]
 800aee2:	f003 0307 	and.w	r3, r3, #7
 800aee6:	009b      	lsls	r3, r3, #2
 800aee8:	220f      	movs	r2, #15
 800aeea:	fa02 f303 	lsl.w	r3, r2, r3
 800aeee:	43db      	mvns	r3, r3
 800aef0:	69ba      	ldr	r2, [r7, #24]
 800aef2:	4013      	ands	r3, r2
 800aef4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	691a      	ldr	r2, [r3, #16]
 800aefa:	69fb      	ldr	r3, [r7, #28]
 800aefc:	f003 0307 	and.w	r3, r3, #7
 800af00:	009b      	lsls	r3, r3, #2
 800af02:	fa02 f303 	lsl.w	r3, r2, r3
 800af06:	69ba      	ldr	r2, [r7, #24]
 800af08:	4313      	orrs	r3, r2
 800af0a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	08da      	lsrs	r2, r3, #3
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	3208      	adds	r2, #8
 800af14:	69b9      	ldr	r1, [r7, #24]
 800af16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800af20:	69fb      	ldr	r3, [r7, #28]
 800af22:	005b      	lsls	r3, r3, #1
 800af24:	2203      	movs	r2, #3
 800af26:	fa02 f303 	lsl.w	r3, r2, r3
 800af2a:	43db      	mvns	r3, r3
 800af2c:	69ba      	ldr	r2, [r7, #24]
 800af2e:	4013      	ands	r3, r2
 800af30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	685b      	ldr	r3, [r3, #4]
 800af36:	f003 0203 	and.w	r2, r3, #3
 800af3a:	69fb      	ldr	r3, [r7, #28]
 800af3c:	005b      	lsls	r3, r3, #1
 800af3e:	fa02 f303 	lsl.w	r3, r2, r3
 800af42:	69ba      	ldr	r2, [r7, #24]
 800af44:	4313      	orrs	r3, r2
 800af46:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	69ba      	ldr	r2, [r7, #24]
 800af4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800af56:	2b00      	cmp	r3, #0
 800af58:	f000 80d8 	beq.w	800b10c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800af5c:	4b2c      	ldr	r3, [pc, #176]	@ (800b010 <HAL_GPIO_Init+0x22c>)
 800af5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800af62:	4a2b      	ldr	r2, [pc, #172]	@ (800b010 <HAL_GPIO_Init+0x22c>)
 800af64:	f043 0302 	orr.w	r3, r3, #2
 800af68:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800af6c:	4b28      	ldr	r3, [pc, #160]	@ (800b010 <HAL_GPIO_Init+0x22c>)
 800af6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800af72:	f003 0302 	and.w	r3, r3, #2
 800af76:	60fb      	str	r3, [r7, #12]
 800af78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800af7a:	4a26      	ldr	r2, [pc, #152]	@ (800b014 <HAL_GPIO_Init+0x230>)
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	089b      	lsrs	r3, r3, #2
 800af80:	3302      	adds	r3, #2
 800af82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800af88:	69fb      	ldr	r3, [r7, #28]
 800af8a:	f003 0303 	and.w	r3, r3, #3
 800af8e:	009b      	lsls	r3, r3, #2
 800af90:	220f      	movs	r2, #15
 800af92:	fa02 f303 	lsl.w	r3, r2, r3
 800af96:	43db      	mvns	r3, r3
 800af98:	69ba      	ldr	r2, [r7, #24]
 800af9a:	4013      	ands	r3, r2
 800af9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	4a1d      	ldr	r2, [pc, #116]	@ (800b018 <HAL_GPIO_Init+0x234>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d04a      	beq.n	800b03c <HAL_GPIO_Init+0x258>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	4a1c      	ldr	r2, [pc, #112]	@ (800b01c <HAL_GPIO_Init+0x238>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d02b      	beq.n	800b006 <HAL_GPIO_Init+0x222>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	4a1b      	ldr	r2, [pc, #108]	@ (800b020 <HAL_GPIO_Init+0x23c>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d025      	beq.n	800b002 <HAL_GPIO_Init+0x21e>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	4a1a      	ldr	r2, [pc, #104]	@ (800b024 <HAL_GPIO_Init+0x240>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d01f      	beq.n	800affe <HAL_GPIO_Init+0x21a>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	4a19      	ldr	r2, [pc, #100]	@ (800b028 <HAL_GPIO_Init+0x244>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d019      	beq.n	800affa <HAL_GPIO_Init+0x216>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	4a18      	ldr	r2, [pc, #96]	@ (800b02c <HAL_GPIO_Init+0x248>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d013      	beq.n	800aff6 <HAL_GPIO_Init+0x212>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	4a17      	ldr	r2, [pc, #92]	@ (800b030 <HAL_GPIO_Init+0x24c>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d00d      	beq.n	800aff2 <HAL_GPIO_Init+0x20e>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	4a16      	ldr	r2, [pc, #88]	@ (800b034 <HAL_GPIO_Init+0x250>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	d007      	beq.n	800afee <HAL_GPIO_Init+0x20a>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	4a15      	ldr	r2, [pc, #84]	@ (800b038 <HAL_GPIO_Init+0x254>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d101      	bne.n	800afea <HAL_GPIO_Init+0x206>
 800afe6:	2309      	movs	r3, #9
 800afe8:	e029      	b.n	800b03e <HAL_GPIO_Init+0x25a>
 800afea:	230a      	movs	r3, #10
 800afec:	e027      	b.n	800b03e <HAL_GPIO_Init+0x25a>
 800afee:	2307      	movs	r3, #7
 800aff0:	e025      	b.n	800b03e <HAL_GPIO_Init+0x25a>
 800aff2:	2306      	movs	r3, #6
 800aff4:	e023      	b.n	800b03e <HAL_GPIO_Init+0x25a>
 800aff6:	2305      	movs	r3, #5
 800aff8:	e021      	b.n	800b03e <HAL_GPIO_Init+0x25a>
 800affa:	2304      	movs	r3, #4
 800affc:	e01f      	b.n	800b03e <HAL_GPIO_Init+0x25a>
 800affe:	2303      	movs	r3, #3
 800b000:	e01d      	b.n	800b03e <HAL_GPIO_Init+0x25a>
 800b002:	2302      	movs	r3, #2
 800b004:	e01b      	b.n	800b03e <HAL_GPIO_Init+0x25a>
 800b006:	2301      	movs	r3, #1
 800b008:	e019      	b.n	800b03e <HAL_GPIO_Init+0x25a>
 800b00a:	bf00      	nop
 800b00c:	58000080 	.word	0x58000080
 800b010:	58024400 	.word	0x58024400
 800b014:	58000400 	.word	0x58000400
 800b018:	58020000 	.word	0x58020000
 800b01c:	58020400 	.word	0x58020400
 800b020:	58020800 	.word	0x58020800
 800b024:	58020c00 	.word	0x58020c00
 800b028:	58021000 	.word	0x58021000
 800b02c:	58021400 	.word	0x58021400
 800b030:	58021800 	.word	0x58021800
 800b034:	58021c00 	.word	0x58021c00
 800b038:	58022400 	.word	0x58022400
 800b03c:	2300      	movs	r3, #0
 800b03e:	69fa      	ldr	r2, [r7, #28]
 800b040:	f002 0203 	and.w	r2, r2, #3
 800b044:	0092      	lsls	r2, r2, #2
 800b046:	4093      	lsls	r3, r2
 800b048:	69ba      	ldr	r2, [r7, #24]
 800b04a:	4313      	orrs	r3, r2
 800b04c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b04e:	4938      	ldr	r1, [pc, #224]	@ (800b130 <HAL_GPIO_Init+0x34c>)
 800b050:	69fb      	ldr	r3, [r7, #28]
 800b052:	089b      	lsrs	r3, r3, #2
 800b054:	3302      	adds	r3, #2
 800b056:	69ba      	ldr	r2, [r7, #24]
 800b058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b05c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	43db      	mvns	r3, r3
 800b068:	69ba      	ldr	r2, [r7, #24]
 800b06a:	4013      	ands	r3, r2
 800b06c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b076:	2b00      	cmp	r3, #0
 800b078:	d003      	beq.n	800b082 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800b07a:	69ba      	ldr	r2, [r7, #24]
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	4313      	orrs	r3, r2
 800b080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b082:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b086:	69bb      	ldr	r3, [r7, #24]
 800b088:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b08a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	43db      	mvns	r3, r3
 800b096:	69ba      	ldr	r2, [r7, #24]
 800b098:	4013      	ands	r3, r2
 800b09a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d003      	beq.n	800b0b0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800b0a8:	69ba      	ldr	r2, [r7, #24]
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b0b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b0b4:	69bb      	ldr	r3, [r7, #24]
 800b0b6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	43db      	mvns	r3, r3
 800b0c2:	69ba      	ldr	r2, [r7, #24]
 800b0c4:	4013      	ands	r3, r2
 800b0c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d003      	beq.n	800b0dc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800b0d4:	69ba      	ldr	r2, [r7, #24]
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	69ba      	ldr	r2, [r7, #24]
 800b0e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	43db      	mvns	r3, r3
 800b0ec:	69ba      	ldr	r2, [r7, #24]
 800b0ee:	4013      	ands	r3, r2
 800b0f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d003      	beq.n	800b106 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800b0fe:	69ba      	ldr	r2, [r7, #24]
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	4313      	orrs	r3, r2
 800b104:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	69ba      	ldr	r2, [r7, #24]
 800b10a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b10c:	69fb      	ldr	r3, [r7, #28]
 800b10e:	3301      	adds	r3, #1
 800b110:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	681a      	ldr	r2, [r3, #0]
 800b116:	69fb      	ldr	r3, [r7, #28]
 800b118:	fa22 f303 	lsr.w	r3, r2, r3
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	f47f ae6b 	bne.w	800adf8 <HAL_GPIO_Init+0x14>
  }
}
 800b122:	bf00      	nop
 800b124:	bf00      	nop
 800b126:	3724      	adds	r7, #36	@ 0x24
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr
 800b130:	58000400 	.word	0x58000400

0800b134 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b134:	b480      	push	{r7}
 800b136:	b085      	sub	sp, #20
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	460b      	mov	r3, r1
 800b13e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	691a      	ldr	r2, [r3, #16]
 800b144:	887b      	ldrh	r3, [r7, #2]
 800b146:	4013      	ands	r3, r2
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d002      	beq.n	800b152 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b14c:	2301      	movs	r3, #1
 800b14e:	73fb      	strb	r3, [r7, #15]
 800b150:	e001      	b.n	800b156 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b152:	2300      	movs	r3, #0
 800b154:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b156:	7bfb      	ldrb	r3, [r7, #15]
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3714      	adds	r7, #20
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr

0800b164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b164:	b480      	push	{r7}
 800b166:	b083      	sub	sp, #12
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	460b      	mov	r3, r1
 800b16e:	807b      	strh	r3, [r7, #2]
 800b170:	4613      	mov	r3, r2
 800b172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b174:	787b      	ldrb	r3, [r7, #1]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d003      	beq.n	800b182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b17a:	887a      	ldrh	r2, [r7, #2]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b180:	e003      	b.n	800b18a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b182:	887b      	ldrh	r3, [r7, #2]
 800b184:	041a      	lsls	r2, r3, #16
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	619a      	str	r2, [r3, #24]
}
 800b18a:	bf00      	nop
 800b18c:	370c      	adds	r7, #12
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr

0800b196 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b196:	b580      	push	{r7, lr}
 800b198:	b082      	sub	sp, #8
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	4603      	mov	r3, r0
 800b19e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800b1a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b1a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b1a8:	88fb      	ldrh	r3, [r7, #6]
 800b1aa:	4013      	ands	r3, r2
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d008      	beq.n	800b1c2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b1b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b1b4:	88fb      	ldrh	r3, [r7, #6]
 800b1b6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b1ba:	88fb      	ldrh	r3, [r7, #6]
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f7f7 f853 	bl	8002268 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800b1c2:	bf00      	nop
 800b1c4:	3708      	adds	r7, #8
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
	...

0800b1cc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b084      	sub	sp, #16
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b1d4:	4b19      	ldr	r3, [pc, #100]	@ (800b23c <HAL_PWREx_ConfigSupply+0x70>)
 800b1d6:	68db      	ldr	r3, [r3, #12]
 800b1d8:	f003 0304 	and.w	r3, r3, #4
 800b1dc:	2b04      	cmp	r3, #4
 800b1de:	d00a      	beq.n	800b1f6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b1e0:	4b16      	ldr	r3, [pc, #88]	@ (800b23c <HAL_PWREx_ConfigSupply+0x70>)
 800b1e2:	68db      	ldr	r3, [r3, #12]
 800b1e4:	f003 0307 	and.w	r3, r3, #7
 800b1e8:	687a      	ldr	r2, [r7, #4]
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d001      	beq.n	800b1f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	e01f      	b.n	800b232 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	e01d      	b.n	800b232 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b1f6:	4b11      	ldr	r3, [pc, #68]	@ (800b23c <HAL_PWREx_ConfigSupply+0x70>)
 800b1f8:	68db      	ldr	r3, [r3, #12]
 800b1fa:	f023 0207 	bic.w	r2, r3, #7
 800b1fe:	490f      	ldr	r1, [pc, #60]	@ (800b23c <HAL_PWREx_ConfigSupply+0x70>)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	4313      	orrs	r3, r2
 800b204:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b206:	f7f9 fd6b 	bl	8004ce0 <HAL_GetTick>
 800b20a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b20c:	e009      	b.n	800b222 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b20e:	f7f9 fd67 	bl	8004ce0 <HAL_GetTick>
 800b212:	4602      	mov	r2, r0
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	1ad3      	subs	r3, r2, r3
 800b218:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b21c:	d901      	bls.n	800b222 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b21e:	2301      	movs	r3, #1
 800b220:	e007      	b.n	800b232 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b222:	4b06      	ldr	r3, [pc, #24]	@ (800b23c <HAL_PWREx_ConfigSupply+0x70>)
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b22a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b22e:	d1ee      	bne.n	800b20e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b230:	2300      	movs	r3, #0
}
 800b232:	4618      	mov	r0, r3
 800b234:	3710      	adds	r7, #16
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	58024800 	.word	0x58024800

0800b240 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b08c      	sub	sp, #48	@ 0x30
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d101      	bne.n	800b252 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b24e:	2301      	movs	r3, #1
 800b250:	e3c8      	b.n	800b9e4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f003 0301 	and.w	r3, r3, #1
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	f000 8087 	beq.w	800b36e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b260:	4b88      	ldr	r3, [pc, #544]	@ (800b484 <HAL_RCC_OscConfig+0x244>)
 800b262:	691b      	ldr	r3, [r3, #16]
 800b264:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b268:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b26a:	4b86      	ldr	r3, [pc, #536]	@ (800b484 <HAL_RCC_OscConfig+0x244>)
 800b26c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b26e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b272:	2b10      	cmp	r3, #16
 800b274:	d007      	beq.n	800b286 <HAL_RCC_OscConfig+0x46>
 800b276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b278:	2b18      	cmp	r3, #24
 800b27a:	d110      	bne.n	800b29e <HAL_RCC_OscConfig+0x5e>
 800b27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b27e:	f003 0303 	and.w	r3, r3, #3
 800b282:	2b02      	cmp	r3, #2
 800b284:	d10b      	bne.n	800b29e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b286:	4b7f      	ldr	r3, [pc, #508]	@ (800b484 <HAL_RCC_OscConfig+0x244>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d06c      	beq.n	800b36c <HAL_RCC_OscConfig+0x12c>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	685b      	ldr	r3, [r3, #4]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d168      	bne.n	800b36c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b29a:	2301      	movs	r3, #1
 800b29c:	e3a2      	b.n	800b9e4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b2a6:	d106      	bne.n	800b2b6 <HAL_RCC_OscConfig+0x76>
 800b2a8:	4b76      	ldr	r3, [pc, #472]	@ (800b484 <HAL_RCC_OscConfig+0x244>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	4a75      	ldr	r2, [pc, #468]	@ (800b484 <HAL_RCC_OscConfig+0x244>)
 800b2ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b2b2:	6013      	str	r3, [r2, #0]
 800b2b4:	e02e      	b.n	800b314 <HAL_RCC_OscConfig+0xd4>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d10c      	bne.n	800b2d8 <HAL_RCC_OscConfig+0x98>
 800b2be:	4b71      	ldr	r3, [pc, #452]	@ (800b484 <HAL_RCC_OscConfig+0x244>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	4a70      	ldr	r2, [pc, #448]	@ (800b484 <HAL_RCC_OscConfig+0x244>)
 800b2c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b2c8:	6013      	str	r3, [r2, #0]
 800b2ca:	4b6e      	ldr	r3, [pc, #440]	@ (800b484 <HAL_RCC_OscConfig+0x244>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	4a6d      	ldr	r2, [pc, #436]	@ (800b484 <HAL_RCC_OscConfig+0x244>)
 800b2d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b2d4:	6013      	str	r3, [r2, #0]
 800b2d6:	e01d      	b.n	800b314 <HAL_RCC_OscConfig+0xd4>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b2e0:	d10c      	bne.n	800b2fc <HAL_RCC_OscConfig+0xbc>
 800b2e2:	4b68      	ldr	r3, [pc, #416]	@ (800b484 <HAL_RCC_OscConfig+0x244>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	4a67      	ldr	r2, [pc, #412]	@ (800b484 <HAL_RCC_OscConfig+0x244>)
 800b2e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b2ec:	6013      	str	r3, [r2, #0]
 800b2ee:	4b65      	ldr	r3, [pc, #404]	@ (800b484 <HAL_RCC_OscConfig+0x244>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4a64      	ldr	r2, [pc, #400]	@ (800b484 <HAL_RCC_OscConfig+0x244>)
 800b2f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b2f8:	6013      	str	r3, [r2, #0]
 800b2fa:	e00b      	b.n	800b314 <HAL_RCC_OscConfig+0xd4>
 800b2fc:	4b61      	ldr	r3, [pc, #388]	@ (800b484 <HAL_RCC_OscConfig+0x244>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4a60      	ldr	r2, [pc, #384]	@ (800b484 <HAL_RCC_OscConfig+0x244>)
 800b302:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b306:	6013      	str	r3, [r2, #0]
 800b308:	4b5e      	ldr	r3, [pc, #376]	@ (800b484 <HAL_RCC_OscConfig+0x244>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4a5d      	ldr	r2, [pc, #372]	@ (800b484 <HAL_RCC_OscConfig+0x244>)
 800b30e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d013      	beq.n	800b344 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b31c:	f7f9 fce0 	bl	8004ce0 <HAL_GetTick>
 800b320:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b322:	e008      	b.n	800b336 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b324:	f7f9 fcdc 	bl	8004ce0 <HAL_GetTick>
 800b328:	4602      	mov	r2, r0
 800b32a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b32c:	1ad3      	subs	r3, r2, r3
 800b32e:	2b64      	cmp	r3, #100	@ 0x64
 800b330:	d901      	bls.n	800b336 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b332:	2303      	movs	r3, #3
 800b334:	e356      	b.n	800b9e4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b336:	4b53      	ldr	r3, [pc, #332]	@ (800b484 <HAL_RCC_OscConfig+0x244>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d0f0      	beq.n	800b324 <HAL_RCC_OscConfig+0xe4>
 800b342:	e014      	b.n	800b36e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b344:	f7f9 fccc 	bl	8004ce0 <HAL_GetTick>
 800b348:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b34a:	e008      	b.n	800b35e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b34c:	f7f9 fcc8 	bl	8004ce0 <HAL_GetTick>
 800b350:	4602      	mov	r2, r0
 800b352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b354:	1ad3      	subs	r3, r2, r3
 800b356:	2b64      	cmp	r3, #100	@ 0x64
 800b358:	d901      	bls.n	800b35e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b35a:	2303      	movs	r3, #3
 800b35c:	e342      	b.n	800b9e4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b35e:	4b49      	ldr	r3, [pc, #292]	@ (800b484 <HAL_RCC_OscConfig+0x244>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b366:	2b00      	cmp	r3, #0
 800b368:	d1f0      	bne.n	800b34c <HAL_RCC_OscConfig+0x10c>
 800b36a:	e000      	b.n	800b36e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b36c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f003 0302 	and.w	r3, r3, #2
 800b376:	2b00      	cmp	r3, #0
 800b378:	f000 808c 	beq.w	800b494 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b37c:	4b41      	ldr	r3, [pc, #260]	@ (800b484 <HAL_RCC_OscConfig+0x244>)
 800b37e:	691b      	ldr	r3, [r3, #16]
 800b380:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b384:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b386:	4b3f      	ldr	r3, [pc, #252]	@ (800b484 <HAL_RCC_OscConfig+0x244>)
 800b388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b38a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b38c:	6a3b      	ldr	r3, [r7, #32]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d007      	beq.n	800b3a2 <HAL_RCC_OscConfig+0x162>
 800b392:	6a3b      	ldr	r3, [r7, #32]
 800b394:	2b18      	cmp	r3, #24
 800b396:	d137      	bne.n	800b408 <HAL_RCC_OscConfig+0x1c8>
 800b398:	69fb      	ldr	r3, [r7, #28]
 800b39a:	f003 0303 	and.w	r3, r3, #3
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d132      	bne.n	800b408 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b3a2:	4b38      	ldr	r3, [pc, #224]	@ (800b484 <HAL_RCC_OscConfig+0x244>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f003 0304 	and.w	r3, r3, #4
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d005      	beq.n	800b3ba <HAL_RCC_OscConfig+0x17a>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	68db      	ldr	r3, [r3, #12]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d101      	bne.n	800b3ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	e314      	b.n	800b9e4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b3ba:	4b32      	ldr	r3, [pc, #200]	@ (800b484 <HAL_RCC_OscConfig+0x244>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f023 0219 	bic.w	r2, r3, #25
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	68db      	ldr	r3, [r3, #12]
 800b3c6:	492f      	ldr	r1, [pc, #188]	@ (800b484 <HAL_RCC_OscConfig+0x244>)
 800b3c8:	4313      	orrs	r3, r2
 800b3ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3cc:	f7f9 fc88 	bl	8004ce0 <HAL_GetTick>
 800b3d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b3d2:	e008      	b.n	800b3e6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b3d4:	f7f9 fc84 	bl	8004ce0 <HAL_GetTick>
 800b3d8:	4602      	mov	r2, r0
 800b3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3dc:	1ad3      	subs	r3, r2, r3
 800b3de:	2b02      	cmp	r3, #2
 800b3e0:	d901      	bls.n	800b3e6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800b3e2:	2303      	movs	r3, #3
 800b3e4:	e2fe      	b.n	800b9e4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b3e6:	4b27      	ldr	r3, [pc, #156]	@ (800b484 <HAL_RCC_OscConfig+0x244>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f003 0304 	and.w	r3, r3, #4
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d0f0      	beq.n	800b3d4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b3f2:	4b24      	ldr	r3, [pc, #144]	@ (800b484 <HAL_RCC_OscConfig+0x244>)
 800b3f4:	685b      	ldr	r3, [r3, #4]
 800b3f6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	691b      	ldr	r3, [r3, #16]
 800b3fe:	061b      	lsls	r3, r3, #24
 800b400:	4920      	ldr	r1, [pc, #128]	@ (800b484 <HAL_RCC_OscConfig+0x244>)
 800b402:	4313      	orrs	r3, r2
 800b404:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b406:	e045      	b.n	800b494 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	68db      	ldr	r3, [r3, #12]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d026      	beq.n	800b45e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b410:	4b1c      	ldr	r3, [pc, #112]	@ (800b484 <HAL_RCC_OscConfig+0x244>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f023 0219 	bic.w	r2, r3, #25
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	68db      	ldr	r3, [r3, #12]
 800b41c:	4919      	ldr	r1, [pc, #100]	@ (800b484 <HAL_RCC_OscConfig+0x244>)
 800b41e:	4313      	orrs	r3, r2
 800b420:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b422:	f7f9 fc5d 	bl	8004ce0 <HAL_GetTick>
 800b426:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b428:	e008      	b.n	800b43c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b42a:	f7f9 fc59 	bl	8004ce0 <HAL_GetTick>
 800b42e:	4602      	mov	r2, r0
 800b430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b432:	1ad3      	subs	r3, r2, r3
 800b434:	2b02      	cmp	r3, #2
 800b436:	d901      	bls.n	800b43c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800b438:	2303      	movs	r3, #3
 800b43a:	e2d3      	b.n	800b9e4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b43c:	4b11      	ldr	r3, [pc, #68]	@ (800b484 <HAL_RCC_OscConfig+0x244>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f003 0304 	and.w	r3, r3, #4
 800b444:	2b00      	cmp	r3, #0
 800b446:	d0f0      	beq.n	800b42a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b448:	4b0e      	ldr	r3, [pc, #56]	@ (800b484 <HAL_RCC_OscConfig+0x244>)
 800b44a:	685b      	ldr	r3, [r3, #4]
 800b44c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	691b      	ldr	r3, [r3, #16]
 800b454:	061b      	lsls	r3, r3, #24
 800b456:	490b      	ldr	r1, [pc, #44]	@ (800b484 <HAL_RCC_OscConfig+0x244>)
 800b458:	4313      	orrs	r3, r2
 800b45a:	604b      	str	r3, [r1, #4]
 800b45c:	e01a      	b.n	800b494 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b45e:	4b09      	ldr	r3, [pc, #36]	@ (800b484 <HAL_RCC_OscConfig+0x244>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4a08      	ldr	r2, [pc, #32]	@ (800b484 <HAL_RCC_OscConfig+0x244>)
 800b464:	f023 0301 	bic.w	r3, r3, #1
 800b468:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b46a:	f7f9 fc39 	bl	8004ce0 <HAL_GetTick>
 800b46e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b470:	e00a      	b.n	800b488 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b472:	f7f9 fc35 	bl	8004ce0 <HAL_GetTick>
 800b476:	4602      	mov	r2, r0
 800b478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b47a:	1ad3      	subs	r3, r2, r3
 800b47c:	2b02      	cmp	r3, #2
 800b47e:	d903      	bls.n	800b488 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800b480:	2303      	movs	r3, #3
 800b482:	e2af      	b.n	800b9e4 <HAL_RCC_OscConfig+0x7a4>
 800b484:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b488:	4b96      	ldr	r3, [pc, #600]	@ (800b6e4 <HAL_RCC_OscConfig+0x4a4>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f003 0304 	and.w	r3, r3, #4
 800b490:	2b00      	cmp	r3, #0
 800b492:	d1ee      	bne.n	800b472 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f003 0310 	and.w	r3, r3, #16
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d06a      	beq.n	800b576 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b4a0:	4b90      	ldr	r3, [pc, #576]	@ (800b6e4 <HAL_RCC_OscConfig+0x4a4>)
 800b4a2:	691b      	ldr	r3, [r3, #16]
 800b4a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b4a8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b4aa:	4b8e      	ldr	r3, [pc, #568]	@ (800b6e4 <HAL_RCC_OscConfig+0x4a4>)
 800b4ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4ae:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b4b0:	69bb      	ldr	r3, [r7, #24]
 800b4b2:	2b08      	cmp	r3, #8
 800b4b4:	d007      	beq.n	800b4c6 <HAL_RCC_OscConfig+0x286>
 800b4b6:	69bb      	ldr	r3, [r7, #24]
 800b4b8:	2b18      	cmp	r3, #24
 800b4ba:	d11b      	bne.n	800b4f4 <HAL_RCC_OscConfig+0x2b4>
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	f003 0303 	and.w	r3, r3, #3
 800b4c2:	2b01      	cmp	r3, #1
 800b4c4:	d116      	bne.n	800b4f4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b4c6:	4b87      	ldr	r3, [pc, #540]	@ (800b6e4 <HAL_RCC_OscConfig+0x4a4>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d005      	beq.n	800b4de <HAL_RCC_OscConfig+0x29e>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	69db      	ldr	r3, [r3, #28]
 800b4d6:	2b80      	cmp	r3, #128	@ 0x80
 800b4d8:	d001      	beq.n	800b4de <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800b4da:	2301      	movs	r3, #1
 800b4dc:	e282      	b.n	800b9e4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b4de:	4b81      	ldr	r3, [pc, #516]	@ (800b6e4 <HAL_RCC_OscConfig+0x4a4>)
 800b4e0:	68db      	ldr	r3, [r3, #12]
 800b4e2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6a1b      	ldr	r3, [r3, #32]
 800b4ea:	061b      	lsls	r3, r3, #24
 800b4ec:	497d      	ldr	r1, [pc, #500]	@ (800b6e4 <HAL_RCC_OscConfig+0x4a4>)
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b4f2:	e040      	b.n	800b576 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	69db      	ldr	r3, [r3, #28]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d023      	beq.n	800b544 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b4fc:	4b79      	ldr	r3, [pc, #484]	@ (800b6e4 <HAL_RCC_OscConfig+0x4a4>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4a78      	ldr	r2, [pc, #480]	@ (800b6e4 <HAL_RCC_OscConfig+0x4a4>)
 800b502:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b508:	f7f9 fbea 	bl	8004ce0 <HAL_GetTick>
 800b50c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b50e:	e008      	b.n	800b522 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b510:	f7f9 fbe6 	bl	8004ce0 <HAL_GetTick>
 800b514:	4602      	mov	r2, r0
 800b516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b518:	1ad3      	subs	r3, r2, r3
 800b51a:	2b02      	cmp	r3, #2
 800b51c:	d901      	bls.n	800b522 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800b51e:	2303      	movs	r3, #3
 800b520:	e260      	b.n	800b9e4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b522:	4b70      	ldr	r3, [pc, #448]	@ (800b6e4 <HAL_RCC_OscConfig+0x4a4>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d0f0      	beq.n	800b510 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b52e:	4b6d      	ldr	r3, [pc, #436]	@ (800b6e4 <HAL_RCC_OscConfig+0x4a4>)
 800b530:	68db      	ldr	r3, [r3, #12]
 800b532:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6a1b      	ldr	r3, [r3, #32]
 800b53a:	061b      	lsls	r3, r3, #24
 800b53c:	4969      	ldr	r1, [pc, #420]	@ (800b6e4 <HAL_RCC_OscConfig+0x4a4>)
 800b53e:	4313      	orrs	r3, r2
 800b540:	60cb      	str	r3, [r1, #12]
 800b542:	e018      	b.n	800b576 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b544:	4b67      	ldr	r3, [pc, #412]	@ (800b6e4 <HAL_RCC_OscConfig+0x4a4>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	4a66      	ldr	r2, [pc, #408]	@ (800b6e4 <HAL_RCC_OscConfig+0x4a4>)
 800b54a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b54e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b550:	f7f9 fbc6 	bl	8004ce0 <HAL_GetTick>
 800b554:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b556:	e008      	b.n	800b56a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b558:	f7f9 fbc2 	bl	8004ce0 <HAL_GetTick>
 800b55c:	4602      	mov	r2, r0
 800b55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b560:	1ad3      	subs	r3, r2, r3
 800b562:	2b02      	cmp	r3, #2
 800b564:	d901      	bls.n	800b56a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800b566:	2303      	movs	r3, #3
 800b568:	e23c      	b.n	800b9e4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b56a:	4b5e      	ldr	r3, [pc, #376]	@ (800b6e4 <HAL_RCC_OscConfig+0x4a4>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b572:	2b00      	cmp	r3, #0
 800b574:	d1f0      	bne.n	800b558 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f003 0308 	and.w	r3, r3, #8
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d036      	beq.n	800b5f0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	695b      	ldr	r3, [r3, #20]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d019      	beq.n	800b5be <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b58a:	4b56      	ldr	r3, [pc, #344]	@ (800b6e4 <HAL_RCC_OscConfig+0x4a4>)
 800b58c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b58e:	4a55      	ldr	r2, [pc, #340]	@ (800b6e4 <HAL_RCC_OscConfig+0x4a4>)
 800b590:	f043 0301 	orr.w	r3, r3, #1
 800b594:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b596:	f7f9 fba3 	bl	8004ce0 <HAL_GetTick>
 800b59a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b59c:	e008      	b.n	800b5b0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b59e:	f7f9 fb9f 	bl	8004ce0 <HAL_GetTick>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5a6:	1ad3      	subs	r3, r2, r3
 800b5a8:	2b02      	cmp	r3, #2
 800b5aa:	d901      	bls.n	800b5b0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800b5ac:	2303      	movs	r3, #3
 800b5ae:	e219      	b.n	800b9e4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b5b0:	4b4c      	ldr	r3, [pc, #304]	@ (800b6e4 <HAL_RCC_OscConfig+0x4a4>)
 800b5b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5b4:	f003 0302 	and.w	r3, r3, #2
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d0f0      	beq.n	800b59e <HAL_RCC_OscConfig+0x35e>
 800b5bc:	e018      	b.n	800b5f0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b5be:	4b49      	ldr	r3, [pc, #292]	@ (800b6e4 <HAL_RCC_OscConfig+0x4a4>)
 800b5c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5c2:	4a48      	ldr	r2, [pc, #288]	@ (800b6e4 <HAL_RCC_OscConfig+0x4a4>)
 800b5c4:	f023 0301 	bic.w	r3, r3, #1
 800b5c8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5ca:	f7f9 fb89 	bl	8004ce0 <HAL_GetTick>
 800b5ce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b5d0:	e008      	b.n	800b5e4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b5d2:	f7f9 fb85 	bl	8004ce0 <HAL_GetTick>
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5da:	1ad3      	subs	r3, r2, r3
 800b5dc:	2b02      	cmp	r3, #2
 800b5de:	d901      	bls.n	800b5e4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800b5e0:	2303      	movs	r3, #3
 800b5e2:	e1ff      	b.n	800b9e4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b5e4:	4b3f      	ldr	r3, [pc, #252]	@ (800b6e4 <HAL_RCC_OscConfig+0x4a4>)
 800b5e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5e8:	f003 0302 	and.w	r3, r3, #2
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d1f0      	bne.n	800b5d2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f003 0320 	and.w	r3, r3, #32
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d036      	beq.n	800b66a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	699b      	ldr	r3, [r3, #24]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d019      	beq.n	800b638 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b604:	4b37      	ldr	r3, [pc, #220]	@ (800b6e4 <HAL_RCC_OscConfig+0x4a4>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	4a36      	ldr	r2, [pc, #216]	@ (800b6e4 <HAL_RCC_OscConfig+0x4a4>)
 800b60a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b60e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b610:	f7f9 fb66 	bl	8004ce0 <HAL_GetTick>
 800b614:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b616:	e008      	b.n	800b62a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b618:	f7f9 fb62 	bl	8004ce0 <HAL_GetTick>
 800b61c:	4602      	mov	r2, r0
 800b61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b620:	1ad3      	subs	r3, r2, r3
 800b622:	2b02      	cmp	r3, #2
 800b624:	d901      	bls.n	800b62a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800b626:	2303      	movs	r3, #3
 800b628:	e1dc      	b.n	800b9e4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b62a:	4b2e      	ldr	r3, [pc, #184]	@ (800b6e4 <HAL_RCC_OscConfig+0x4a4>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b632:	2b00      	cmp	r3, #0
 800b634:	d0f0      	beq.n	800b618 <HAL_RCC_OscConfig+0x3d8>
 800b636:	e018      	b.n	800b66a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b638:	4b2a      	ldr	r3, [pc, #168]	@ (800b6e4 <HAL_RCC_OscConfig+0x4a4>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4a29      	ldr	r2, [pc, #164]	@ (800b6e4 <HAL_RCC_OscConfig+0x4a4>)
 800b63e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b642:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b644:	f7f9 fb4c 	bl	8004ce0 <HAL_GetTick>
 800b648:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b64a:	e008      	b.n	800b65e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b64c:	f7f9 fb48 	bl	8004ce0 <HAL_GetTick>
 800b650:	4602      	mov	r2, r0
 800b652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b654:	1ad3      	subs	r3, r2, r3
 800b656:	2b02      	cmp	r3, #2
 800b658:	d901      	bls.n	800b65e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800b65a:	2303      	movs	r3, #3
 800b65c:	e1c2      	b.n	800b9e4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b65e:	4b21      	ldr	r3, [pc, #132]	@ (800b6e4 <HAL_RCC_OscConfig+0x4a4>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b666:	2b00      	cmp	r3, #0
 800b668:	d1f0      	bne.n	800b64c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f003 0304 	and.w	r3, r3, #4
 800b672:	2b00      	cmp	r3, #0
 800b674:	f000 8086 	beq.w	800b784 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b678:	4b1b      	ldr	r3, [pc, #108]	@ (800b6e8 <HAL_RCC_OscConfig+0x4a8>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	4a1a      	ldr	r2, [pc, #104]	@ (800b6e8 <HAL_RCC_OscConfig+0x4a8>)
 800b67e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b682:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b684:	f7f9 fb2c 	bl	8004ce0 <HAL_GetTick>
 800b688:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b68a:	e008      	b.n	800b69e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b68c:	f7f9 fb28 	bl	8004ce0 <HAL_GetTick>
 800b690:	4602      	mov	r2, r0
 800b692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b694:	1ad3      	subs	r3, r2, r3
 800b696:	2b64      	cmp	r3, #100	@ 0x64
 800b698:	d901      	bls.n	800b69e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800b69a:	2303      	movs	r3, #3
 800b69c:	e1a2      	b.n	800b9e4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b69e:	4b12      	ldr	r3, [pc, #72]	@ (800b6e8 <HAL_RCC_OscConfig+0x4a8>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d0f0      	beq.n	800b68c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	689b      	ldr	r3, [r3, #8]
 800b6ae:	2b01      	cmp	r3, #1
 800b6b0:	d106      	bne.n	800b6c0 <HAL_RCC_OscConfig+0x480>
 800b6b2:	4b0c      	ldr	r3, [pc, #48]	@ (800b6e4 <HAL_RCC_OscConfig+0x4a4>)
 800b6b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6b6:	4a0b      	ldr	r2, [pc, #44]	@ (800b6e4 <HAL_RCC_OscConfig+0x4a4>)
 800b6b8:	f043 0301 	orr.w	r3, r3, #1
 800b6bc:	6713      	str	r3, [r2, #112]	@ 0x70
 800b6be:	e032      	b.n	800b726 <HAL_RCC_OscConfig+0x4e6>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	689b      	ldr	r3, [r3, #8]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d111      	bne.n	800b6ec <HAL_RCC_OscConfig+0x4ac>
 800b6c8:	4b06      	ldr	r3, [pc, #24]	@ (800b6e4 <HAL_RCC_OscConfig+0x4a4>)
 800b6ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6cc:	4a05      	ldr	r2, [pc, #20]	@ (800b6e4 <HAL_RCC_OscConfig+0x4a4>)
 800b6ce:	f023 0301 	bic.w	r3, r3, #1
 800b6d2:	6713      	str	r3, [r2, #112]	@ 0x70
 800b6d4:	4b03      	ldr	r3, [pc, #12]	@ (800b6e4 <HAL_RCC_OscConfig+0x4a4>)
 800b6d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6d8:	4a02      	ldr	r2, [pc, #8]	@ (800b6e4 <HAL_RCC_OscConfig+0x4a4>)
 800b6da:	f023 0304 	bic.w	r3, r3, #4
 800b6de:	6713      	str	r3, [r2, #112]	@ 0x70
 800b6e0:	e021      	b.n	800b726 <HAL_RCC_OscConfig+0x4e6>
 800b6e2:	bf00      	nop
 800b6e4:	58024400 	.word	0x58024400
 800b6e8:	58024800 	.word	0x58024800
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	689b      	ldr	r3, [r3, #8]
 800b6f0:	2b05      	cmp	r3, #5
 800b6f2:	d10c      	bne.n	800b70e <HAL_RCC_OscConfig+0x4ce>
 800b6f4:	4b83      	ldr	r3, [pc, #524]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b6f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6f8:	4a82      	ldr	r2, [pc, #520]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b6fa:	f043 0304 	orr.w	r3, r3, #4
 800b6fe:	6713      	str	r3, [r2, #112]	@ 0x70
 800b700:	4b80      	ldr	r3, [pc, #512]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b704:	4a7f      	ldr	r2, [pc, #508]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b706:	f043 0301 	orr.w	r3, r3, #1
 800b70a:	6713      	str	r3, [r2, #112]	@ 0x70
 800b70c:	e00b      	b.n	800b726 <HAL_RCC_OscConfig+0x4e6>
 800b70e:	4b7d      	ldr	r3, [pc, #500]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b712:	4a7c      	ldr	r2, [pc, #496]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b714:	f023 0301 	bic.w	r3, r3, #1
 800b718:	6713      	str	r3, [r2, #112]	@ 0x70
 800b71a:	4b7a      	ldr	r3, [pc, #488]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b71c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b71e:	4a79      	ldr	r2, [pc, #484]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b720:	f023 0304 	bic.w	r3, r3, #4
 800b724:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	689b      	ldr	r3, [r3, #8]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d015      	beq.n	800b75a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b72e:	f7f9 fad7 	bl	8004ce0 <HAL_GetTick>
 800b732:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b734:	e00a      	b.n	800b74c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b736:	f7f9 fad3 	bl	8004ce0 <HAL_GetTick>
 800b73a:	4602      	mov	r2, r0
 800b73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b73e:	1ad3      	subs	r3, r2, r3
 800b740:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b744:	4293      	cmp	r3, r2
 800b746:	d901      	bls.n	800b74c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800b748:	2303      	movs	r3, #3
 800b74a:	e14b      	b.n	800b9e4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b74c:	4b6d      	ldr	r3, [pc, #436]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b74e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b750:	f003 0302 	and.w	r3, r3, #2
 800b754:	2b00      	cmp	r3, #0
 800b756:	d0ee      	beq.n	800b736 <HAL_RCC_OscConfig+0x4f6>
 800b758:	e014      	b.n	800b784 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b75a:	f7f9 fac1 	bl	8004ce0 <HAL_GetTick>
 800b75e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b760:	e00a      	b.n	800b778 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b762:	f7f9 fabd 	bl	8004ce0 <HAL_GetTick>
 800b766:	4602      	mov	r2, r0
 800b768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b76a:	1ad3      	subs	r3, r2, r3
 800b76c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b770:	4293      	cmp	r3, r2
 800b772:	d901      	bls.n	800b778 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800b774:	2303      	movs	r3, #3
 800b776:	e135      	b.n	800b9e4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b778:	4b62      	ldr	r3, [pc, #392]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b77a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b77c:	f003 0302 	and.w	r3, r3, #2
 800b780:	2b00      	cmp	r3, #0
 800b782:	d1ee      	bne.n	800b762 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b788:	2b00      	cmp	r3, #0
 800b78a:	f000 812a 	beq.w	800b9e2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b78e:	4b5d      	ldr	r3, [pc, #372]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b790:	691b      	ldr	r3, [r3, #16]
 800b792:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b796:	2b18      	cmp	r3, #24
 800b798:	f000 80ba 	beq.w	800b910 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7a0:	2b02      	cmp	r3, #2
 800b7a2:	f040 8095 	bne.w	800b8d0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b7a6:	4b57      	ldr	r3, [pc, #348]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4a56      	ldr	r2, [pc, #344]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b7ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b7b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7b2:	f7f9 fa95 	bl	8004ce0 <HAL_GetTick>
 800b7b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b7b8:	e008      	b.n	800b7cc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b7ba:	f7f9 fa91 	bl	8004ce0 <HAL_GetTick>
 800b7be:	4602      	mov	r2, r0
 800b7c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7c2:	1ad3      	subs	r3, r2, r3
 800b7c4:	2b02      	cmp	r3, #2
 800b7c6:	d901      	bls.n	800b7cc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800b7c8:	2303      	movs	r3, #3
 800b7ca:	e10b      	b.n	800b9e4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b7cc:	4b4d      	ldr	r3, [pc, #308]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d1f0      	bne.n	800b7ba <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b7d8:	4b4a      	ldr	r3, [pc, #296]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b7da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b7dc:	4b4a      	ldr	r3, [pc, #296]	@ (800b908 <HAL_RCC_OscConfig+0x6c8>)
 800b7de:	4013      	ands	r3, r2
 800b7e0:	687a      	ldr	r2, [r7, #4]
 800b7e2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b7e8:	0112      	lsls	r2, r2, #4
 800b7ea:	430a      	orrs	r2, r1
 800b7ec:	4945      	ldr	r1, [pc, #276]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b7ee:	4313      	orrs	r3, r2
 800b7f0:	628b      	str	r3, [r1, #40]	@ 0x28
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7f6:	3b01      	subs	r3, #1
 800b7f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b800:	3b01      	subs	r3, #1
 800b802:	025b      	lsls	r3, r3, #9
 800b804:	b29b      	uxth	r3, r3
 800b806:	431a      	orrs	r2, r3
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b80c:	3b01      	subs	r3, #1
 800b80e:	041b      	lsls	r3, r3, #16
 800b810:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b814:	431a      	orrs	r2, r3
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b81a:	3b01      	subs	r3, #1
 800b81c:	061b      	lsls	r3, r3, #24
 800b81e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b822:	4938      	ldr	r1, [pc, #224]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b824:	4313      	orrs	r3, r2
 800b826:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800b828:	4b36      	ldr	r3, [pc, #216]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b82a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b82c:	4a35      	ldr	r2, [pc, #212]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b82e:	f023 0301 	bic.w	r3, r3, #1
 800b832:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b834:	4b33      	ldr	r3, [pc, #204]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b836:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b838:	4b34      	ldr	r3, [pc, #208]	@ (800b90c <HAL_RCC_OscConfig+0x6cc>)
 800b83a:	4013      	ands	r3, r2
 800b83c:	687a      	ldr	r2, [r7, #4]
 800b83e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b840:	00d2      	lsls	r2, r2, #3
 800b842:	4930      	ldr	r1, [pc, #192]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b844:	4313      	orrs	r3, r2
 800b846:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b848:	4b2e      	ldr	r3, [pc, #184]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b84a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b84c:	f023 020c 	bic.w	r2, r3, #12
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b854:	492b      	ldr	r1, [pc, #172]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b856:	4313      	orrs	r3, r2
 800b858:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b85a:	4b2a      	ldr	r3, [pc, #168]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b85c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b85e:	f023 0202 	bic.w	r2, r3, #2
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b866:	4927      	ldr	r1, [pc, #156]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b868:	4313      	orrs	r3, r2
 800b86a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b86c:	4b25      	ldr	r3, [pc, #148]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b86e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b870:	4a24      	ldr	r2, [pc, #144]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b872:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b876:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b878:	4b22      	ldr	r3, [pc, #136]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b87a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b87c:	4a21      	ldr	r2, [pc, #132]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b87e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b882:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b884:	4b1f      	ldr	r3, [pc, #124]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b888:	4a1e      	ldr	r2, [pc, #120]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b88a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b88e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800b890:	4b1c      	ldr	r3, [pc, #112]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b894:	4a1b      	ldr	r2, [pc, #108]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b896:	f043 0301 	orr.w	r3, r3, #1
 800b89a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b89c:	4b19      	ldr	r3, [pc, #100]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4a18      	ldr	r2, [pc, #96]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b8a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b8a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8a8:	f7f9 fa1a 	bl	8004ce0 <HAL_GetTick>
 800b8ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b8ae:	e008      	b.n	800b8c2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b8b0:	f7f9 fa16 	bl	8004ce0 <HAL_GetTick>
 800b8b4:	4602      	mov	r2, r0
 800b8b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8b8:	1ad3      	subs	r3, r2, r3
 800b8ba:	2b02      	cmp	r3, #2
 800b8bc:	d901      	bls.n	800b8c2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800b8be:	2303      	movs	r3, #3
 800b8c0:	e090      	b.n	800b9e4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b8c2:	4b10      	ldr	r3, [pc, #64]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d0f0      	beq.n	800b8b0 <HAL_RCC_OscConfig+0x670>
 800b8ce:	e088      	b.n	800b9e2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b8d0:	4b0c      	ldr	r3, [pc, #48]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4a0b      	ldr	r2, [pc, #44]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b8d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b8da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8dc:	f7f9 fa00 	bl	8004ce0 <HAL_GetTick>
 800b8e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b8e2:	e008      	b.n	800b8f6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b8e4:	f7f9 f9fc 	bl	8004ce0 <HAL_GetTick>
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ec:	1ad3      	subs	r3, r2, r3
 800b8ee:	2b02      	cmp	r3, #2
 800b8f0:	d901      	bls.n	800b8f6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800b8f2:	2303      	movs	r3, #3
 800b8f4:	e076      	b.n	800b9e4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b8f6:	4b03      	ldr	r3, [pc, #12]	@ (800b904 <HAL_RCC_OscConfig+0x6c4>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d1f0      	bne.n	800b8e4 <HAL_RCC_OscConfig+0x6a4>
 800b902:	e06e      	b.n	800b9e2 <HAL_RCC_OscConfig+0x7a2>
 800b904:	58024400 	.word	0x58024400
 800b908:	fffffc0c 	.word	0xfffffc0c
 800b90c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b910:	4b36      	ldr	r3, [pc, #216]	@ (800b9ec <HAL_RCC_OscConfig+0x7ac>)
 800b912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b914:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b916:	4b35      	ldr	r3, [pc, #212]	@ (800b9ec <HAL_RCC_OscConfig+0x7ac>)
 800b918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b91a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b920:	2b01      	cmp	r3, #1
 800b922:	d031      	beq.n	800b988 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	f003 0203 	and.w	r2, r3, #3
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b92e:	429a      	cmp	r2, r3
 800b930:	d12a      	bne.n	800b988 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	091b      	lsrs	r3, r3, #4
 800b936:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b93e:	429a      	cmp	r2, r3
 800b940:	d122      	bne.n	800b988 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b94c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b94e:	429a      	cmp	r2, r3
 800b950:	d11a      	bne.n	800b988 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	0a5b      	lsrs	r3, r3, #9
 800b956:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b95e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b960:	429a      	cmp	r2, r3
 800b962:	d111      	bne.n	800b988 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	0c1b      	lsrs	r3, r3, #16
 800b968:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b970:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b972:	429a      	cmp	r2, r3
 800b974:	d108      	bne.n	800b988 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	0e1b      	lsrs	r3, r3, #24
 800b97a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b982:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b984:	429a      	cmp	r2, r3
 800b986:	d001      	beq.n	800b98c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800b988:	2301      	movs	r3, #1
 800b98a:	e02b      	b.n	800b9e4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b98c:	4b17      	ldr	r3, [pc, #92]	@ (800b9ec <HAL_RCC_OscConfig+0x7ac>)
 800b98e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b990:	08db      	lsrs	r3, r3, #3
 800b992:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b996:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b99c:	693a      	ldr	r2, [r7, #16]
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d01f      	beq.n	800b9e2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800b9a2:	4b12      	ldr	r3, [pc, #72]	@ (800b9ec <HAL_RCC_OscConfig+0x7ac>)
 800b9a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9a6:	4a11      	ldr	r2, [pc, #68]	@ (800b9ec <HAL_RCC_OscConfig+0x7ac>)
 800b9a8:	f023 0301 	bic.w	r3, r3, #1
 800b9ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b9ae:	f7f9 f997 	bl	8004ce0 <HAL_GetTick>
 800b9b2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b9b4:	bf00      	nop
 800b9b6:	f7f9 f993 	bl	8004ce0 <HAL_GetTick>
 800b9ba:	4602      	mov	r2, r0
 800b9bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d0f9      	beq.n	800b9b6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b9c2:	4b0a      	ldr	r3, [pc, #40]	@ (800b9ec <HAL_RCC_OscConfig+0x7ac>)
 800b9c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b9c6:	4b0a      	ldr	r3, [pc, #40]	@ (800b9f0 <HAL_RCC_OscConfig+0x7b0>)
 800b9c8:	4013      	ands	r3, r2
 800b9ca:	687a      	ldr	r2, [r7, #4]
 800b9cc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b9ce:	00d2      	lsls	r2, r2, #3
 800b9d0:	4906      	ldr	r1, [pc, #24]	@ (800b9ec <HAL_RCC_OscConfig+0x7ac>)
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800b9d6:	4b05      	ldr	r3, [pc, #20]	@ (800b9ec <HAL_RCC_OscConfig+0x7ac>)
 800b9d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9da:	4a04      	ldr	r2, [pc, #16]	@ (800b9ec <HAL_RCC_OscConfig+0x7ac>)
 800b9dc:	f043 0301 	orr.w	r3, r3, #1
 800b9e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800b9e2:	2300      	movs	r3, #0
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3730      	adds	r7, #48	@ 0x30
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}
 800b9ec:	58024400 	.word	0x58024400
 800b9f0:	ffff0007 	.word	0xffff0007

0800b9f4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b086      	sub	sp, #24
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d101      	bne.n	800ba08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ba04:	2301      	movs	r3, #1
 800ba06:	e19c      	b.n	800bd42 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ba08:	4b8a      	ldr	r3, [pc, #552]	@ (800bc34 <HAL_RCC_ClockConfig+0x240>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f003 030f 	and.w	r3, r3, #15
 800ba10:	683a      	ldr	r2, [r7, #0]
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d910      	bls.n	800ba38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ba16:	4b87      	ldr	r3, [pc, #540]	@ (800bc34 <HAL_RCC_ClockConfig+0x240>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f023 020f 	bic.w	r2, r3, #15
 800ba1e:	4985      	ldr	r1, [pc, #532]	@ (800bc34 <HAL_RCC_ClockConfig+0x240>)
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	4313      	orrs	r3, r2
 800ba24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ba26:	4b83      	ldr	r3, [pc, #524]	@ (800bc34 <HAL_RCC_ClockConfig+0x240>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f003 030f 	and.w	r3, r3, #15
 800ba2e:	683a      	ldr	r2, [r7, #0]
 800ba30:	429a      	cmp	r2, r3
 800ba32:	d001      	beq.n	800ba38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ba34:	2301      	movs	r3, #1
 800ba36:	e184      	b.n	800bd42 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f003 0304 	and.w	r3, r3, #4
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d010      	beq.n	800ba66 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	691a      	ldr	r2, [r3, #16]
 800ba48:	4b7b      	ldr	r3, [pc, #492]	@ (800bc38 <HAL_RCC_ClockConfig+0x244>)
 800ba4a:	699b      	ldr	r3, [r3, #24]
 800ba4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d908      	bls.n	800ba66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ba54:	4b78      	ldr	r3, [pc, #480]	@ (800bc38 <HAL_RCC_ClockConfig+0x244>)
 800ba56:	699b      	ldr	r3, [r3, #24]
 800ba58:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	691b      	ldr	r3, [r3, #16]
 800ba60:	4975      	ldr	r1, [pc, #468]	@ (800bc38 <HAL_RCC_ClockConfig+0x244>)
 800ba62:	4313      	orrs	r3, r2
 800ba64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f003 0308 	and.w	r3, r3, #8
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d010      	beq.n	800ba94 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	695a      	ldr	r2, [r3, #20]
 800ba76:	4b70      	ldr	r3, [pc, #448]	@ (800bc38 <HAL_RCC_ClockConfig+0x244>)
 800ba78:	69db      	ldr	r3, [r3, #28]
 800ba7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d908      	bls.n	800ba94 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ba82:	4b6d      	ldr	r3, [pc, #436]	@ (800bc38 <HAL_RCC_ClockConfig+0x244>)
 800ba84:	69db      	ldr	r3, [r3, #28]
 800ba86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	695b      	ldr	r3, [r3, #20]
 800ba8e:	496a      	ldr	r1, [pc, #424]	@ (800bc38 <HAL_RCC_ClockConfig+0x244>)
 800ba90:	4313      	orrs	r3, r2
 800ba92:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f003 0310 	and.w	r3, r3, #16
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d010      	beq.n	800bac2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	699a      	ldr	r2, [r3, #24]
 800baa4:	4b64      	ldr	r3, [pc, #400]	@ (800bc38 <HAL_RCC_ClockConfig+0x244>)
 800baa6:	69db      	ldr	r3, [r3, #28]
 800baa8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800baac:	429a      	cmp	r2, r3
 800baae:	d908      	bls.n	800bac2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bab0:	4b61      	ldr	r3, [pc, #388]	@ (800bc38 <HAL_RCC_ClockConfig+0x244>)
 800bab2:	69db      	ldr	r3, [r3, #28]
 800bab4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	699b      	ldr	r3, [r3, #24]
 800babc:	495e      	ldr	r1, [pc, #376]	@ (800bc38 <HAL_RCC_ClockConfig+0x244>)
 800babe:	4313      	orrs	r3, r2
 800bac0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f003 0320 	and.w	r3, r3, #32
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d010      	beq.n	800baf0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	69da      	ldr	r2, [r3, #28]
 800bad2:	4b59      	ldr	r3, [pc, #356]	@ (800bc38 <HAL_RCC_ClockConfig+0x244>)
 800bad4:	6a1b      	ldr	r3, [r3, #32]
 800bad6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bada:	429a      	cmp	r2, r3
 800badc:	d908      	bls.n	800baf0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800bade:	4b56      	ldr	r3, [pc, #344]	@ (800bc38 <HAL_RCC_ClockConfig+0x244>)
 800bae0:	6a1b      	ldr	r3, [r3, #32]
 800bae2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	69db      	ldr	r3, [r3, #28]
 800baea:	4953      	ldr	r1, [pc, #332]	@ (800bc38 <HAL_RCC_ClockConfig+0x244>)
 800baec:	4313      	orrs	r3, r2
 800baee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f003 0302 	and.w	r3, r3, #2
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d010      	beq.n	800bb1e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	68da      	ldr	r2, [r3, #12]
 800bb00:	4b4d      	ldr	r3, [pc, #308]	@ (800bc38 <HAL_RCC_ClockConfig+0x244>)
 800bb02:	699b      	ldr	r3, [r3, #24]
 800bb04:	f003 030f 	and.w	r3, r3, #15
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	d908      	bls.n	800bb1e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bb0c:	4b4a      	ldr	r3, [pc, #296]	@ (800bc38 <HAL_RCC_ClockConfig+0x244>)
 800bb0e:	699b      	ldr	r3, [r3, #24]
 800bb10:	f023 020f 	bic.w	r2, r3, #15
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	68db      	ldr	r3, [r3, #12]
 800bb18:	4947      	ldr	r1, [pc, #284]	@ (800bc38 <HAL_RCC_ClockConfig+0x244>)
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	f003 0301 	and.w	r3, r3, #1
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d055      	beq.n	800bbd6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800bb2a:	4b43      	ldr	r3, [pc, #268]	@ (800bc38 <HAL_RCC_ClockConfig+0x244>)
 800bb2c:	699b      	ldr	r3, [r3, #24]
 800bb2e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	689b      	ldr	r3, [r3, #8]
 800bb36:	4940      	ldr	r1, [pc, #256]	@ (800bc38 <HAL_RCC_ClockConfig+0x244>)
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	685b      	ldr	r3, [r3, #4]
 800bb40:	2b02      	cmp	r3, #2
 800bb42:	d107      	bne.n	800bb54 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bb44:	4b3c      	ldr	r3, [pc, #240]	@ (800bc38 <HAL_RCC_ClockConfig+0x244>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d121      	bne.n	800bb94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bb50:	2301      	movs	r3, #1
 800bb52:	e0f6      	b.n	800bd42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	685b      	ldr	r3, [r3, #4]
 800bb58:	2b03      	cmp	r3, #3
 800bb5a:	d107      	bne.n	800bb6c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bb5c:	4b36      	ldr	r3, [pc, #216]	@ (800bc38 <HAL_RCC_ClockConfig+0x244>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d115      	bne.n	800bb94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bb68:	2301      	movs	r3, #1
 800bb6a:	e0ea      	b.n	800bd42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	2b01      	cmp	r3, #1
 800bb72:	d107      	bne.n	800bb84 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bb74:	4b30      	ldr	r3, [pc, #192]	@ (800bc38 <HAL_RCC_ClockConfig+0x244>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d109      	bne.n	800bb94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bb80:	2301      	movs	r3, #1
 800bb82:	e0de      	b.n	800bd42 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bb84:	4b2c      	ldr	r3, [pc, #176]	@ (800bc38 <HAL_RCC_ClockConfig+0x244>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f003 0304 	and.w	r3, r3, #4
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d101      	bne.n	800bb94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bb90:	2301      	movs	r3, #1
 800bb92:	e0d6      	b.n	800bd42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bb94:	4b28      	ldr	r3, [pc, #160]	@ (800bc38 <HAL_RCC_ClockConfig+0x244>)
 800bb96:	691b      	ldr	r3, [r3, #16]
 800bb98:	f023 0207 	bic.w	r2, r3, #7
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	685b      	ldr	r3, [r3, #4]
 800bba0:	4925      	ldr	r1, [pc, #148]	@ (800bc38 <HAL_RCC_ClockConfig+0x244>)
 800bba2:	4313      	orrs	r3, r2
 800bba4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bba6:	f7f9 f89b 	bl	8004ce0 <HAL_GetTick>
 800bbaa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bbac:	e00a      	b.n	800bbc4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bbae:	f7f9 f897 	bl	8004ce0 <HAL_GetTick>
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	1ad3      	subs	r3, r2, r3
 800bbb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	d901      	bls.n	800bbc4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800bbc0:	2303      	movs	r3, #3
 800bbc2:	e0be      	b.n	800bd42 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bbc4:	4b1c      	ldr	r3, [pc, #112]	@ (800bc38 <HAL_RCC_ClockConfig+0x244>)
 800bbc6:	691b      	ldr	r3, [r3, #16]
 800bbc8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	685b      	ldr	r3, [r3, #4]
 800bbd0:	00db      	lsls	r3, r3, #3
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d1eb      	bne.n	800bbae <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f003 0302 	and.w	r3, r3, #2
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d010      	beq.n	800bc04 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	68da      	ldr	r2, [r3, #12]
 800bbe6:	4b14      	ldr	r3, [pc, #80]	@ (800bc38 <HAL_RCC_ClockConfig+0x244>)
 800bbe8:	699b      	ldr	r3, [r3, #24]
 800bbea:	f003 030f 	and.w	r3, r3, #15
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d208      	bcs.n	800bc04 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bbf2:	4b11      	ldr	r3, [pc, #68]	@ (800bc38 <HAL_RCC_ClockConfig+0x244>)
 800bbf4:	699b      	ldr	r3, [r3, #24]
 800bbf6:	f023 020f 	bic.w	r2, r3, #15
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	68db      	ldr	r3, [r3, #12]
 800bbfe:	490e      	ldr	r1, [pc, #56]	@ (800bc38 <HAL_RCC_ClockConfig+0x244>)
 800bc00:	4313      	orrs	r3, r2
 800bc02:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bc04:	4b0b      	ldr	r3, [pc, #44]	@ (800bc34 <HAL_RCC_ClockConfig+0x240>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	f003 030f 	and.w	r3, r3, #15
 800bc0c:	683a      	ldr	r2, [r7, #0]
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d214      	bcs.n	800bc3c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bc12:	4b08      	ldr	r3, [pc, #32]	@ (800bc34 <HAL_RCC_ClockConfig+0x240>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f023 020f 	bic.w	r2, r3, #15
 800bc1a:	4906      	ldr	r1, [pc, #24]	@ (800bc34 <HAL_RCC_ClockConfig+0x240>)
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bc22:	4b04      	ldr	r3, [pc, #16]	@ (800bc34 <HAL_RCC_ClockConfig+0x240>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f003 030f 	and.w	r3, r3, #15
 800bc2a:	683a      	ldr	r2, [r7, #0]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d005      	beq.n	800bc3c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800bc30:	2301      	movs	r3, #1
 800bc32:	e086      	b.n	800bd42 <HAL_RCC_ClockConfig+0x34e>
 800bc34:	52002000 	.word	0x52002000
 800bc38:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f003 0304 	and.w	r3, r3, #4
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d010      	beq.n	800bc6a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	691a      	ldr	r2, [r3, #16]
 800bc4c:	4b3f      	ldr	r3, [pc, #252]	@ (800bd4c <HAL_RCC_ClockConfig+0x358>)
 800bc4e:	699b      	ldr	r3, [r3, #24]
 800bc50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d208      	bcs.n	800bc6a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bc58:	4b3c      	ldr	r3, [pc, #240]	@ (800bd4c <HAL_RCC_ClockConfig+0x358>)
 800bc5a:	699b      	ldr	r3, [r3, #24]
 800bc5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	691b      	ldr	r3, [r3, #16]
 800bc64:	4939      	ldr	r1, [pc, #228]	@ (800bd4c <HAL_RCC_ClockConfig+0x358>)
 800bc66:	4313      	orrs	r3, r2
 800bc68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f003 0308 	and.w	r3, r3, #8
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d010      	beq.n	800bc98 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	695a      	ldr	r2, [r3, #20]
 800bc7a:	4b34      	ldr	r3, [pc, #208]	@ (800bd4c <HAL_RCC_ClockConfig+0x358>)
 800bc7c:	69db      	ldr	r3, [r3, #28]
 800bc7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bc82:	429a      	cmp	r2, r3
 800bc84:	d208      	bcs.n	800bc98 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bc86:	4b31      	ldr	r3, [pc, #196]	@ (800bd4c <HAL_RCC_ClockConfig+0x358>)
 800bc88:	69db      	ldr	r3, [r3, #28]
 800bc8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	695b      	ldr	r3, [r3, #20]
 800bc92:	492e      	ldr	r1, [pc, #184]	@ (800bd4c <HAL_RCC_ClockConfig+0x358>)
 800bc94:	4313      	orrs	r3, r2
 800bc96:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f003 0310 	and.w	r3, r3, #16
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d010      	beq.n	800bcc6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	699a      	ldr	r2, [r3, #24]
 800bca8:	4b28      	ldr	r3, [pc, #160]	@ (800bd4c <HAL_RCC_ClockConfig+0x358>)
 800bcaa:	69db      	ldr	r3, [r3, #28]
 800bcac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d208      	bcs.n	800bcc6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bcb4:	4b25      	ldr	r3, [pc, #148]	@ (800bd4c <HAL_RCC_ClockConfig+0x358>)
 800bcb6:	69db      	ldr	r3, [r3, #28]
 800bcb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	699b      	ldr	r3, [r3, #24]
 800bcc0:	4922      	ldr	r1, [pc, #136]	@ (800bd4c <HAL_RCC_ClockConfig+0x358>)
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f003 0320 	and.w	r3, r3, #32
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d010      	beq.n	800bcf4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	69da      	ldr	r2, [r3, #28]
 800bcd6:	4b1d      	ldr	r3, [pc, #116]	@ (800bd4c <HAL_RCC_ClockConfig+0x358>)
 800bcd8:	6a1b      	ldr	r3, [r3, #32]
 800bcda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bcde:	429a      	cmp	r2, r3
 800bce0:	d208      	bcs.n	800bcf4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800bce2:	4b1a      	ldr	r3, [pc, #104]	@ (800bd4c <HAL_RCC_ClockConfig+0x358>)
 800bce4:	6a1b      	ldr	r3, [r3, #32]
 800bce6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	69db      	ldr	r3, [r3, #28]
 800bcee:	4917      	ldr	r1, [pc, #92]	@ (800bd4c <HAL_RCC_ClockConfig+0x358>)
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800bcf4:	f000 f834 	bl	800bd60 <HAL_RCC_GetSysClockFreq>
 800bcf8:	4602      	mov	r2, r0
 800bcfa:	4b14      	ldr	r3, [pc, #80]	@ (800bd4c <HAL_RCC_ClockConfig+0x358>)
 800bcfc:	699b      	ldr	r3, [r3, #24]
 800bcfe:	0a1b      	lsrs	r3, r3, #8
 800bd00:	f003 030f 	and.w	r3, r3, #15
 800bd04:	4912      	ldr	r1, [pc, #72]	@ (800bd50 <HAL_RCC_ClockConfig+0x35c>)
 800bd06:	5ccb      	ldrb	r3, [r1, r3]
 800bd08:	f003 031f 	and.w	r3, r3, #31
 800bd0c:	fa22 f303 	lsr.w	r3, r2, r3
 800bd10:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bd12:	4b0e      	ldr	r3, [pc, #56]	@ (800bd4c <HAL_RCC_ClockConfig+0x358>)
 800bd14:	699b      	ldr	r3, [r3, #24]
 800bd16:	f003 030f 	and.w	r3, r3, #15
 800bd1a:	4a0d      	ldr	r2, [pc, #52]	@ (800bd50 <HAL_RCC_ClockConfig+0x35c>)
 800bd1c:	5cd3      	ldrb	r3, [r2, r3]
 800bd1e:	f003 031f 	and.w	r3, r3, #31
 800bd22:	693a      	ldr	r2, [r7, #16]
 800bd24:	fa22 f303 	lsr.w	r3, r2, r3
 800bd28:	4a0a      	ldr	r2, [pc, #40]	@ (800bd54 <HAL_RCC_ClockConfig+0x360>)
 800bd2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800bd2c:	4a0a      	ldr	r2, [pc, #40]	@ (800bd58 <HAL_RCC_ClockConfig+0x364>)
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800bd32:	4b0a      	ldr	r3, [pc, #40]	@ (800bd5c <HAL_RCC_ClockConfig+0x368>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7f8 ff88 	bl	8004c4c <HAL_InitTick>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800bd40:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3718      	adds	r7, #24
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
 800bd4a:	bf00      	nop
 800bd4c:	58024400 	.word	0x58024400
 800bd50:	08015214 	.word	0x08015214
 800bd54:	2400003c 	.word	0x2400003c
 800bd58:	24000038 	.word	0x24000038
 800bd5c:	24000040 	.word	0x24000040

0800bd60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b089      	sub	sp, #36	@ 0x24
 800bd64:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bd66:	4bb3      	ldr	r3, [pc, #716]	@ (800c034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bd68:	691b      	ldr	r3, [r3, #16]
 800bd6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bd6e:	2b18      	cmp	r3, #24
 800bd70:	f200 8155 	bhi.w	800c01e <HAL_RCC_GetSysClockFreq+0x2be>
 800bd74:	a201      	add	r2, pc, #4	@ (adr r2, 800bd7c <HAL_RCC_GetSysClockFreq+0x1c>)
 800bd76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd7a:	bf00      	nop
 800bd7c:	0800bde1 	.word	0x0800bde1
 800bd80:	0800c01f 	.word	0x0800c01f
 800bd84:	0800c01f 	.word	0x0800c01f
 800bd88:	0800c01f 	.word	0x0800c01f
 800bd8c:	0800c01f 	.word	0x0800c01f
 800bd90:	0800c01f 	.word	0x0800c01f
 800bd94:	0800c01f 	.word	0x0800c01f
 800bd98:	0800c01f 	.word	0x0800c01f
 800bd9c:	0800be07 	.word	0x0800be07
 800bda0:	0800c01f 	.word	0x0800c01f
 800bda4:	0800c01f 	.word	0x0800c01f
 800bda8:	0800c01f 	.word	0x0800c01f
 800bdac:	0800c01f 	.word	0x0800c01f
 800bdb0:	0800c01f 	.word	0x0800c01f
 800bdb4:	0800c01f 	.word	0x0800c01f
 800bdb8:	0800c01f 	.word	0x0800c01f
 800bdbc:	0800be0d 	.word	0x0800be0d
 800bdc0:	0800c01f 	.word	0x0800c01f
 800bdc4:	0800c01f 	.word	0x0800c01f
 800bdc8:	0800c01f 	.word	0x0800c01f
 800bdcc:	0800c01f 	.word	0x0800c01f
 800bdd0:	0800c01f 	.word	0x0800c01f
 800bdd4:	0800c01f 	.word	0x0800c01f
 800bdd8:	0800c01f 	.word	0x0800c01f
 800bddc:	0800be13 	.word	0x0800be13
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bde0:	4b94      	ldr	r3, [pc, #592]	@ (800c034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f003 0320 	and.w	r3, r3, #32
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d009      	beq.n	800be00 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bdec:	4b91      	ldr	r3, [pc, #580]	@ (800c034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	08db      	lsrs	r3, r3, #3
 800bdf2:	f003 0303 	and.w	r3, r3, #3
 800bdf6:	4a90      	ldr	r2, [pc, #576]	@ (800c038 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bdf8:	fa22 f303 	lsr.w	r3, r2, r3
 800bdfc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800bdfe:	e111      	b.n	800c024 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800be00:	4b8d      	ldr	r3, [pc, #564]	@ (800c038 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800be02:	61bb      	str	r3, [r7, #24]
      break;
 800be04:	e10e      	b.n	800c024 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800be06:	4b8d      	ldr	r3, [pc, #564]	@ (800c03c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800be08:	61bb      	str	r3, [r7, #24]
      break;
 800be0a:	e10b      	b.n	800c024 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800be0c:	4b8c      	ldr	r3, [pc, #560]	@ (800c040 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800be0e:	61bb      	str	r3, [r7, #24]
      break;
 800be10:	e108      	b.n	800c024 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800be12:	4b88      	ldr	r3, [pc, #544]	@ (800c034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800be14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be16:	f003 0303 	and.w	r3, r3, #3
 800be1a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800be1c:	4b85      	ldr	r3, [pc, #532]	@ (800c034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800be1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be20:	091b      	lsrs	r3, r3, #4
 800be22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800be26:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800be28:	4b82      	ldr	r3, [pc, #520]	@ (800c034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800be2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be2c:	f003 0301 	and.w	r3, r3, #1
 800be30:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800be32:	4b80      	ldr	r3, [pc, #512]	@ (800c034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800be34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be36:	08db      	lsrs	r3, r3, #3
 800be38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800be3c:	68fa      	ldr	r2, [r7, #12]
 800be3e:	fb02 f303 	mul.w	r3, r2, r3
 800be42:	ee07 3a90 	vmov	s15, r3
 800be46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be4a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	2b00      	cmp	r3, #0
 800be52:	f000 80e1 	beq.w	800c018 <HAL_RCC_GetSysClockFreq+0x2b8>
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	2b02      	cmp	r3, #2
 800be5a:	f000 8083 	beq.w	800bf64 <HAL_RCC_GetSysClockFreq+0x204>
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	2b02      	cmp	r3, #2
 800be62:	f200 80a1 	bhi.w	800bfa8 <HAL_RCC_GetSysClockFreq+0x248>
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d003      	beq.n	800be74 <HAL_RCC_GetSysClockFreq+0x114>
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	2b01      	cmp	r3, #1
 800be70:	d056      	beq.n	800bf20 <HAL_RCC_GetSysClockFreq+0x1c0>
 800be72:	e099      	b.n	800bfa8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be74:	4b6f      	ldr	r3, [pc, #444]	@ (800c034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f003 0320 	and.w	r3, r3, #32
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d02d      	beq.n	800bedc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be80:	4b6c      	ldr	r3, [pc, #432]	@ (800c034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	08db      	lsrs	r3, r3, #3
 800be86:	f003 0303 	and.w	r3, r3, #3
 800be8a:	4a6b      	ldr	r2, [pc, #428]	@ (800c038 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800be8c:	fa22 f303 	lsr.w	r3, r2, r3
 800be90:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	ee07 3a90 	vmov	s15, r3
 800be98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	ee07 3a90 	vmov	s15, r3
 800bea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800beaa:	4b62      	ldr	r3, [pc, #392]	@ (800c034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800beac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800beae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beb2:	ee07 3a90 	vmov	s15, r3
 800beb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800beba:	ed97 6a02 	vldr	s12, [r7, #8]
 800bebe:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800c044 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800beca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bed6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800beda:	e087      	b.n	800bfec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	ee07 3a90 	vmov	s15, r3
 800bee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bee6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800c048 <HAL_RCC_GetSysClockFreq+0x2e8>
 800beea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800beee:	4b51      	ldr	r3, [pc, #324]	@ (800c034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bef6:	ee07 3a90 	vmov	s15, r3
 800befa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800befe:	ed97 6a02 	vldr	s12, [r7, #8]
 800bf02:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800c044 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bf06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800bf1e:	e065      	b.n	800bfec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	ee07 3a90 	vmov	s15, r3
 800bf26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf2a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800c04c <HAL_RCC_GetSysClockFreq+0x2ec>
 800bf2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf32:	4b40      	ldr	r3, [pc, #256]	@ (800c034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf3a:	ee07 3a90 	vmov	s15, r3
 800bf3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf42:	ed97 6a02 	vldr	s12, [r7, #8]
 800bf46:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800c044 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bf4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800bf62:	e043      	b.n	800bfec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	ee07 3a90 	vmov	s15, r3
 800bf6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf6e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800c050 <HAL_RCC_GetSysClockFreq+0x2f0>
 800bf72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf76:	4b2f      	ldr	r3, [pc, #188]	@ (800c034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf7e:	ee07 3a90 	vmov	s15, r3
 800bf82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf86:	ed97 6a02 	vldr	s12, [r7, #8]
 800bf8a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800c044 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bf8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfa2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800bfa6:	e021      	b.n	800bfec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	ee07 3a90 	vmov	s15, r3
 800bfae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfb2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800c04c <HAL_RCC_GetSysClockFreq+0x2ec>
 800bfb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfba:	4b1e      	ldr	r3, [pc, #120]	@ (800c034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bfbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfc2:	ee07 3a90 	vmov	s15, r3
 800bfc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfca:	ed97 6a02 	vldr	s12, [r7, #8]
 800bfce:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800c044 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bfd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bfde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfe6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800bfea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800bfec:	4b11      	ldr	r3, [pc, #68]	@ (800c034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bfee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bff0:	0a5b      	lsrs	r3, r3, #9
 800bff2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bff6:	3301      	adds	r3, #1
 800bff8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	ee07 3a90 	vmov	s15, r3
 800c000:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c004:	edd7 6a07 	vldr	s13, [r7, #28]
 800c008:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c00c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c010:	ee17 3a90 	vmov	r3, s15
 800c014:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800c016:	e005      	b.n	800c024 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800c018:	2300      	movs	r3, #0
 800c01a:	61bb      	str	r3, [r7, #24]
      break;
 800c01c:	e002      	b.n	800c024 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800c01e:	4b07      	ldr	r3, [pc, #28]	@ (800c03c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c020:	61bb      	str	r3, [r7, #24]
      break;
 800c022:	bf00      	nop
  }

  return sysclockfreq;
 800c024:	69bb      	ldr	r3, [r7, #24]
}
 800c026:	4618      	mov	r0, r3
 800c028:	3724      	adds	r7, #36	@ 0x24
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr
 800c032:	bf00      	nop
 800c034:	58024400 	.word	0x58024400
 800c038:	03d09000 	.word	0x03d09000
 800c03c:	003d0900 	.word	0x003d0900
 800c040:	007a1200 	.word	0x007a1200
 800c044:	46000000 	.word	0x46000000
 800c048:	4c742400 	.word	0x4c742400
 800c04c:	4a742400 	.word	0x4a742400
 800c050:	4af42400 	.word	0x4af42400

0800c054 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b082      	sub	sp, #8
 800c058:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c05a:	f7ff fe81 	bl	800bd60 <HAL_RCC_GetSysClockFreq>
 800c05e:	4602      	mov	r2, r0
 800c060:	4b10      	ldr	r3, [pc, #64]	@ (800c0a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800c062:	699b      	ldr	r3, [r3, #24]
 800c064:	0a1b      	lsrs	r3, r3, #8
 800c066:	f003 030f 	and.w	r3, r3, #15
 800c06a:	490f      	ldr	r1, [pc, #60]	@ (800c0a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800c06c:	5ccb      	ldrb	r3, [r1, r3]
 800c06e:	f003 031f 	and.w	r3, r3, #31
 800c072:	fa22 f303 	lsr.w	r3, r2, r3
 800c076:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c078:	4b0a      	ldr	r3, [pc, #40]	@ (800c0a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800c07a:	699b      	ldr	r3, [r3, #24]
 800c07c:	f003 030f 	and.w	r3, r3, #15
 800c080:	4a09      	ldr	r2, [pc, #36]	@ (800c0a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800c082:	5cd3      	ldrb	r3, [r2, r3]
 800c084:	f003 031f 	and.w	r3, r3, #31
 800c088:	687a      	ldr	r2, [r7, #4]
 800c08a:	fa22 f303 	lsr.w	r3, r2, r3
 800c08e:	4a07      	ldr	r2, [pc, #28]	@ (800c0ac <HAL_RCC_GetHCLKFreq+0x58>)
 800c090:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c092:	4a07      	ldr	r2, [pc, #28]	@ (800c0b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c098:	4b04      	ldr	r3, [pc, #16]	@ (800c0ac <HAL_RCC_GetHCLKFreq+0x58>)
 800c09a:	681b      	ldr	r3, [r3, #0]
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3708      	adds	r7, #8
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}
 800c0a4:	58024400 	.word	0x58024400
 800c0a8:	08015214 	.word	0x08015214
 800c0ac:	2400003c 	.word	0x2400003c
 800c0b0:	24000038 	.word	0x24000038

0800c0b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c0b8:	f7ff ffcc 	bl	800c054 <HAL_RCC_GetHCLKFreq>
 800c0bc:	4602      	mov	r2, r0
 800c0be:	4b06      	ldr	r3, [pc, #24]	@ (800c0d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c0c0:	69db      	ldr	r3, [r3, #28]
 800c0c2:	091b      	lsrs	r3, r3, #4
 800c0c4:	f003 0307 	and.w	r3, r3, #7
 800c0c8:	4904      	ldr	r1, [pc, #16]	@ (800c0dc <HAL_RCC_GetPCLK1Freq+0x28>)
 800c0ca:	5ccb      	ldrb	r3, [r1, r3]
 800c0cc:	f003 031f 	and.w	r3, r3, #31
 800c0d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	bd80      	pop	{r7, pc}
 800c0d8:	58024400 	.word	0x58024400
 800c0dc:	08015214 	.word	0x08015214

0800c0e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c0e4:	f7ff ffb6 	bl	800c054 <HAL_RCC_GetHCLKFreq>
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	4b06      	ldr	r3, [pc, #24]	@ (800c104 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c0ec:	69db      	ldr	r3, [r3, #28]
 800c0ee:	0a1b      	lsrs	r3, r3, #8
 800c0f0:	f003 0307 	and.w	r3, r3, #7
 800c0f4:	4904      	ldr	r1, [pc, #16]	@ (800c108 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c0f6:	5ccb      	ldrb	r3, [r1, r3]
 800c0f8:	f003 031f 	and.w	r3, r3, #31
 800c0fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c100:	4618      	mov	r0, r3
 800c102:	bd80      	pop	{r7, pc}
 800c104:	58024400 	.word	0x58024400
 800c108:	08015214 	.word	0x08015214

0800c10c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c10c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c110:	b0c6      	sub	sp, #280	@ 0x118
 800c112:	af00      	add	r7, sp, #0
 800c114:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c118:	2300      	movs	r3, #0
 800c11a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c11e:	2300      	movs	r3, #0
 800c120:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800c130:	2500      	movs	r5, #0
 800c132:	ea54 0305 	orrs.w	r3, r4, r5
 800c136:	d049      	beq.n	800c1cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800c138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c13c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c13e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c142:	d02f      	beq.n	800c1a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800c144:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c148:	d828      	bhi.n	800c19c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c14a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c14e:	d01a      	beq.n	800c186 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800c150:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c154:	d822      	bhi.n	800c19c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c156:	2b00      	cmp	r3, #0
 800c158:	d003      	beq.n	800c162 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c15a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c15e:	d007      	beq.n	800c170 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c160:	e01c      	b.n	800c19c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c162:	4bab      	ldr	r3, [pc, #684]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c166:	4aaa      	ldr	r2, [pc, #680]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c168:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c16c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c16e:	e01a      	b.n	800c1a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c174:	3308      	adds	r3, #8
 800c176:	2102      	movs	r1, #2
 800c178:	4618      	mov	r0, r3
 800c17a:	f002 fa49 	bl	800e610 <RCCEx_PLL2_Config>
 800c17e:	4603      	mov	r3, r0
 800c180:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c184:	e00f      	b.n	800c1a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c18a:	3328      	adds	r3, #40	@ 0x28
 800c18c:	2102      	movs	r1, #2
 800c18e:	4618      	mov	r0, r3
 800c190:	f002 faf0 	bl	800e774 <RCCEx_PLL3_Config>
 800c194:	4603      	mov	r3, r0
 800c196:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c19a:	e004      	b.n	800c1a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c19c:	2301      	movs	r3, #1
 800c19e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c1a2:	e000      	b.n	800c1a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800c1a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d10a      	bne.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c1ae:	4b98      	ldr	r3, [pc, #608]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c1b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c1b2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c1b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c1bc:	4a94      	ldr	r2, [pc, #592]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c1be:	430b      	orrs	r3, r1
 800c1c0:	6513      	str	r3, [r2, #80]	@ 0x50
 800c1c2:	e003      	b.n	800c1cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c1c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c1cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800c1d8:	f04f 0900 	mov.w	r9, #0
 800c1dc:	ea58 0309 	orrs.w	r3, r8, r9
 800c1e0:	d047      	beq.n	800c272 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800c1e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c1e8:	2b04      	cmp	r3, #4
 800c1ea:	d82a      	bhi.n	800c242 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800c1ec:	a201      	add	r2, pc, #4	@ (adr r2, 800c1f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800c1ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1f2:	bf00      	nop
 800c1f4:	0800c209 	.word	0x0800c209
 800c1f8:	0800c217 	.word	0x0800c217
 800c1fc:	0800c22d 	.word	0x0800c22d
 800c200:	0800c24b 	.word	0x0800c24b
 800c204:	0800c24b 	.word	0x0800c24b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c208:	4b81      	ldr	r3, [pc, #516]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c20a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c20c:	4a80      	ldr	r2, [pc, #512]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c20e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c212:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c214:	e01a      	b.n	800c24c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c216:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c21a:	3308      	adds	r3, #8
 800c21c:	2100      	movs	r1, #0
 800c21e:	4618      	mov	r0, r3
 800c220:	f002 f9f6 	bl	800e610 <RCCEx_PLL2_Config>
 800c224:	4603      	mov	r3, r0
 800c226:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c22a:	e00f      	b.n	800c24c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c22c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c230:	3328      	adds	r3, #40	@ 0x28
 800c232:	2100      	movs	r1, #0
 800c234:	4618      	mov	r0, r3
 800c236:	f002 fa9d 	bl	800e774 <RCCEx_PLL3_Config>
 800c23a:	4603      	mov	r3, r0
 800c23c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c240:	e004      	b.n	800c24c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c242:	2301      	movs	r3, #1
 800c244:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c248:	e000      	b.n	800c24c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800c24a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c24c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c250:	2b00      	cmp	r3, #0
 800c252:	d10a      	bne.n	800c26a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c254:	4b6e      	ldr	r3, [pc, #440]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c258:	f023 0107 	bic.w	r1, r3, #7
 800c25c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c262:	4a6b      	ldr	r2, [pc, #428]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c264:	430b      	orrs	r3, r1
 800c266:	6513      	str	r3, [r2, #80]	@ 0x50
 800c268:	e003      	b.n	800c272 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c26a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c26e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800c27e:	f04f 0b00 	mov.w	fp, #0
 800c282:	ea5a 030b 	orrs.w	r3, sl, fp
 800c286:	d05b      	beq.n	800c340 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800c288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c28c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c290:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800c294:	d03b      	beq.n	800c30e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800c296:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800c29a:	d834      	bhi.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c29c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c2a0:	d037      	beq.n	800c312 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800c2a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c2a6:	d82e      	bhi.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c2a8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c2ac:	d033      	beq.n	800c316 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800c2ae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c2b2:	d828      	bhi.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c2b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c2b8:	d01a      	beq.n	800c2f0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800c2ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c2be:	d822      	bhi.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d003      	beq.n	800c2cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800c2c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c2c8:	d007      	beq.n	800c2da <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800c2ca:	e01c      	b.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c2cc:	4b50      	ldr	r3, [pc, #320]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c2ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2d0:	4a4f      	ldr	r2, [pc, #316]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c2d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c2d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c2d8:	e01e      	b.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c2da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2de:	3308      	adds	r3, #8
 800c2e0:	2100      	movs	r1, #0
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f002 f994 	bl	800e610 <RCCEx_PLL2_Config>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c2ee:	e013      	b.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c2f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2f4:	3328      	adds	r3, #40	@ 0x28
 800c2f6:	2100      	movs	r1, #0
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f002 fa3b 	bl	800e774 <RCCEx_PLL3_Config>
 800c2fe:	4603      	mov	r3, r0
 800c300:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c304:	e008      	b.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c306:	2301      	movs	r3, #1
 800c308:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c30c:	e004      	b.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c30e:	bf00      	nop
 800c310:	e002      	b.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c312:	bf00      	nop
 800c314:	e000      	b.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c316:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c318:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d10b      	bne.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c320:	4b3b      	ldr	r3, [pc, #236]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c324:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800c328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c32c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c330:	4a37      	ldr	r2, [pc, #220]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c332:	430b      	orrs	r3, r1
 800c334:	6593      	str	r3, [r2, #88]	@ 0x58
 800c336:	e003      	b.n	800c340 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c338:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c33c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c348:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800c34c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c350:	2300      	movs	r3, #0
 800c352:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c356:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800c35a:	460b      	mov	r3, r1
 800c35c:	4313      	orrs	r3, r2
 800c35e:	d05d      	beq.n	800c41c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800c360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c364:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c368:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800c36c:	d03b      	beq.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800c36e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800c372:	d834      	bhi.n	800c3de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c374:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c378:	d037      	beq.n	800c3ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800c37a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c37e:	d82e      	bhi.n	800c3de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c380:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c384:	d033      	beq.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800c386:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c38a:	d828      	bhi.n	800c3de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c38c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c390:	d01a      	beq.n	800c3c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800c392:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c396:	d822      	bhi.n	800c3de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d003      	beq.n	800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800c39c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c3a0:	d007      	beq.n	800c3b2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800c3a2:	e01c      	b.n	800c3de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3a4:	4b1a      	ldr	r3, [pc, #104]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c3a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3a8:	4a19      	ldr	r2, [pc, #100]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c3aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c3ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c3b0:	e01e      	b.n	800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c3b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3b6:	3308      	adds	r3, #8
 800c3b8:	2100      	movs	r1, #0
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f002 f928 	bl	800e610 <RCCEx_PLL2_Config>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c3c6:	e013      	b.n	800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c3c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3cc:	3328      	adds	r3, #40	@ 0x28
 800c3ce:	2100      	movs	r1, #0
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f002 f9cf 	bl	800e774 <RCCEx_PLL3_Config>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c3dc:	e008      	b.n	800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c3de:	2301      	movs	r3, #1
 800c3e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c3e4:	e004      	b.n	800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c3e6:	bf00      	nop
 800c3e8:	e002      	b.n	800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c3ea:	bf00      	nop
 800c3ec:	e000      	b.n	800c3f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c3ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d10d      	bne.n	800c414 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c3f8:	4b05      	ldr	r3, [pc, #20]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c3fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c3fc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800c400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c404:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c408:	4a01      	ldr	r2, [pc, #4]	@ (800c410 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c40a:	430b      	orrs	r3, r1
 800c40c:	6593      	str	r3, [r2, #88]	@ 0x58
 800c40e:	e005      	b.n	800c41c <HAL_RCCEx_PeriphCLKConfig+0x310>
 800c410:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c414:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c418:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800c41c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c424:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800c428:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c42c:	2300      	movs	r3, #0
 800c42e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c432:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800c436:	460b      	mov	r3, r1
 800c438:	4313      	orrs	r3, r2
 800c43a:	d03a      	beq.n	800c4b2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800c43c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c442:	2b30      	cmp	r3, #48	@ 0x30
 800c444:	d01f      	beq.n	800c486 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800c446:	2b30      	cmp	r3, #48	@ 0x30
 800c448:	d819      	bhi.n	800c47e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800c44a:	2b20      	cmp	r3, #32
 800c44c:	d00c      	beq.n	800c468 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800c44e:	2b20      	cmp	r3, #32
 800c450:	d815      	bhi.n	800c47e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800c452:	2b00      	cmp	r3, #0
 800c454:	d019      	beq.n	800c48a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800c456:	2b10      	cmp	r3, #16
 800c458:	d111      	bne.n	800c47e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c45a:	4baa      	ldr	r3, [pc, #680]	@ (800c704 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c45c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c45e:	4aa9      	ldr	r2, [pc, #676]	@ (800c704 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c460:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c464:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800c466:	e011      	b.n	800c48c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c46c:	3308      	adds	r3, #8
 800c46e:	2102      	movs	r1, #2
 800c470:	4618      	mov	r0, r3
 800c472:	f002 f8cd 	bl	800e610 <RCCEx_PLL2_Config>
 800c476:	4603      	mov	r3, r0
 800c478:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800c47c:	e006      	b.n	800c48c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c47e:	2301      	movs	r3, #1
 800c480:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c484:	e002      	b.n	800c48c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800c486:	bf00      	nop
 800c488:	e000      	b.n	800c48c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800c48a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c48c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c490:	2b00      	cmp	r3, #0
 800c492:	d10a      	bne.n	800c4aa <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800c494:	4b9b      	ldr	r3, [pc, #620]	@ (800c704 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c498:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800c49c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c4a2:	4a98      	ldr	r2, [pc, #608]	@ (800c704 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c4a4:	430b      	orrs	r3, r1
 800c4a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c4a8:	e003      	b.n	800c4b2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c4ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c4b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ba:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800c4be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c4c8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	d051      	beq.n	800c576 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800c4d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c4dc:	d035      	beq.n	800c54a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800c4de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c4e2:	d82e      	bhi.n	800c542 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c4e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c4e8:	d031      	beq.n	800c54e <HAL_RCCEx_PeriphCLKConfig+0x442>
 800c4ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c4ee:	d828      	bhi.n	800c542 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c4f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c4f4:	d01a      	beq.n	800c52c <HAL_RCCEx_PeriphCLKConfig+0x420>
 800c4f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c4fa:	d822      	bhi.n	800c542 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d003      	beq.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800c500:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c504:	d007      	beq.n	800c516 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800c506:	e01c      	b.n	800c542 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c508:	4b7e      	ldr	r3, [pc, #504]	@ (800c704 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c50a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c50c:	4a7d      	ldr	r2, [pc, #500]	@ (800c704 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c50e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c512:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c514:	e01c      	b.n	800c550 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c51a:	3308      	adds	r3, #8
 800c51c:	2100      	movs	r1, #0
 800c51e:	4618      	mov	r0, r3
 800c520:	f002 f876 	bl	800e610 <RCCEx_PLL2_Config>
 800c524:	4603      	mov	r3, r0
 800c526:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c52a:	e011      	b.n	800c550 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c52c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c530:	3328      	adds	r3, #40	@ 0x28
 800c532:	2100      	movs	r1, #0
 800c534:	4618      	mov	r0, r3
 800c536:	f002 f91d 	bl	800e774 <RCCEx_PLL3_Config>
 800c53a:	4603      	mov	r3, r0
 800c53c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c540:	e006      	b.n	800c550 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c542:	2301      	movs	r3, #1
 800c544:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c548:	e002      	b.n	800c550 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800c54a:	bf00      	nop
 800c54c:	e000      	b.n	800c550 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800c54e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c550:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c554:	2b00      	cmp	r3, #0
 800c556:	d10a      	bne.n	800c56e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c558:	4b6a      	ldr	r3, [pc, #424]	@ (800c704 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c55a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c55c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800c560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c566:	4a67      	ldr	r2, [pc, #412]	@ (800c704 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c568:	430b      	orrs	r3, r1
 800c56a:	6513      	str	r3, [r2, #80]	@ 0x50
 800c56c:	e003      	b.n	800c576 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c56e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c572:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c576:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800c582:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c586:	2300      	movs	r3, #0
 800c588:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c58c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800c590:	460b      	mov	r3, r1
 800c592:	4313      	orrs	r3, r2
 800c594:	d053      	beq.n	800c63e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800c596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c59a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c59c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c5a0:	d033      	beq.n	800c60a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800c5a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c5a6:	d82c      	bhi.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c5a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c5ac:	d02f      	beq.n	800c60e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800c5ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c5b2:	d826      	bhi.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c5b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c5b8:	d02b      	beq.n	800c612 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800c5ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c5be:	d820      	bhi.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c5c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c5c4:	d012      	beq.n	800c5ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800c5c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c5ca:	d81a      	bhi.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d022      	beq.n	800c616 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800c5d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c5d4:	d115      	bne.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c5d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5da:	3308      	adds	r3, #8
 800c5dc:	2101      	movs	r1, #1
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f002 f816 	bl	800e610 <RCCEx_PLL2_Config>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c5ea:	e015      	b.n	800c618 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c5ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5f0:	3328      	adds	r3, #40	@ 0x28
 800c5f2:	2101      	movs	r1, #1
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f002 f8bd 	bl	800e774 <RCCEx_PLL3_Config>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c600:	e00a      	b.n	800c618 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c602:	2301      	movs	r3, #1
 800c604:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c608:	e006      	b.n	800c618 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c60a:	bf00      	nop
 800c60c:	e004      	b.n	800c618 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c60e:	bf00      	nop
 800c610:	e002      	b.n	800c618 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c612:	bf00      	nop
 800c614:	e000      	b.n	800c618 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c616:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c618:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d10a      	bne.n	800c636 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c620:	4b38      	ldr	r3, [pc, #224]	@ (800c704 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c622:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c624:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800c628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c62c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c62e:	4a35      	ldr	r2, [pc, #212]	@ (800c704 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c630:	430b      	orrs	r3, r1
 800c632:	6513      	str	r3, [r2, #80]	@ 0x50
 800c634:	e003      	b.n	800c63e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c636:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c63a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c63e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c646:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800c64a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c64e:	2300      	movs	r3, #0
 800c650:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c654:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c658:	460b      	mov	r3, r1
 800c65a:	4313      	orrs	r3, r2
 800c65c:	d058      	beq.n	800c710 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800c65e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c662:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c666:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c66a:	d033      	beq.n	800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800c66c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c670:	d82c      	bhi.n	800c6cc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c676:	d02f      	beq.n	800c6d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800c678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c67c:	d826      	bhi.n	800c6cc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c67e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c682:	d02b      	beq.n	800c6dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800c684:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c688:	d820      	bhi.n	800c6cc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c68a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c68e:	d012      	beq.n	800c6b6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800c690:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c694:	d81a      	bhi.n	800c6cc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c696:	2b00      	cmp	r3, #0
 800c698:	d022      	beq.n	800c6e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800c69a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c69e:	d115      	bne.n	800c6cc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c6a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6a4:	3308      	adds	r3, #8
 800c6a6:	2101      	movs	r1, #1
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f001 ffb1 	bl	800e610 <RCCEx_PLL2_Config>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c6b4:	e015      	b.n	800c6e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c6b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6ba:	3328      	adds	r3, #40	@ 0x28
 800c6bc:	2101      	movs	r1, #1
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f002 f858 	bl	800e774 <RCCEx_PLL3_Config>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c6ca:	e00a      	b.n	800c6e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c6d2:	e006      	b.n	800c6e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c6d4:	bf00      	nop
 800c6d6:	e004      	b.n	800c6e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c6d8:	bf00      	nop
 800c6da:	e002      	b.n	800c6e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c6dc:	bf00      	nop
 800c6de:	e000      	b.n	800c6e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c6e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c6e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d10e      	bne.n	800c708 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c6ea:	4b06      	ldr	r3, [pc, #24]	@ (800c704 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c6ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c6ee:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c6f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c6fa:	4a02      	ldr	r2, [pc, #8]	@ (800c704 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c6fc:	430b      	orrs	r3, r1
 800c6fe:	6593      	str	r3, [r2, #88]	@ 0x58
 800c700:	e006      	b.n	800c710 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800c702:	bf00      	nop
 800c704:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c708:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c70c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c718:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800c71c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c720:	2300      	movs	r3, #0
 800c722:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c726:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800c72a:	460b      	mov	r3, r1
 800c72c:	4313      	orrs	r3, r2
 800c72e:	d037      	beq.n	800c7a0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800c730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c734:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c736:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c73a:	d00e      	beq.n	800c75a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800c73c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c740:	d816      	bhi.n	800c770 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800c742:	2b00      	cmp	r3, #0
 800c744:	d018      	beq.n	800c778 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800c746:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c74a:	d111      	bne.n	800c770 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c74c:	4bc4      	ldr	r3, [pc, #784]	@ (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c74e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c750:	4ac3      	ldr	r2, [pc, #780]	@ (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c752:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c756:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c758:	e00f      	b.n	800c77a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c75a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c75e:	3308      	adds	r3, #8
 800c760:	2101      	movs	r1, #1
 800c762:	4618      	mov	r0, r3
 800c764:	f001 ff54 	bl	800e610 <RCCEx_PLL2_Config>
 800c768:	4603      	mov	r3, r0
 800c76a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c76e:	e004      	b.n	800c77a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c770:	2301      	movs	r3, #1
 800c772:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c776:	e000      	b.n	800c77a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800c778:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c77a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d10a      	bne.n	800c798 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c782:	4bb7      	ldr	r3, [pc, #732]	@ (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c786:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c78a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c78e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c790:	4ab3      	ldr	r2, [pc, #716]	@ (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c792:	430b      	orrs	r3, r1
 800c794:	6513      	str	r3, [r2, #80]	@ 0x50
 800c796:	e003      	b.n	800c7a0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c798:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c79c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c7a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800c7ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c7b6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800c7ba:	460b      	mov	r3, r1
 800c7bc:	4313      	orrs	r3, r2
 800c7be:	d039      	beq.n	800c834 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800c7c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c7c6:	2b03      	cmp	r3, #3
 800c7c8:	d81c      	bhi.n	800c804 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800c7ca:	a201      	add	r2, pc, #4	@ (adr r2, 800c7d0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800c7cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7d0:	0800c80d 	.word	0x0800c80d
 800c7d4:	0800c7e1 	.word	0x0800c7e1
 800c7d8:	0800c7ef 	.word	0x0800c7ef
 800c7dc:	0800c80d 	.word	0x0800c80d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c7e0:	4b9f      	ldr	r3, [pc, #636]	@ (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c7e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7e4:	4a9e      	ldr	r2, [pc, #632]	@ (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c7e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c7ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c7ec:	e00f      	b.n	800c80e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c7ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7f2:	3308      	adds	r3, #8
 800c7f4:	2102      	movs	r1, #2
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f001 ff0a 	bl	800e610 <RCCEx_PLL2_Config>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c802:	e004      	b.n	800c80e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c804:	2301      	movs	r3, #1
 800c806:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c80a:	e000      	b.n	800c80e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800c80c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c80e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c812:	2b00      	cmp	r3, #0
 800c814:	d10a      	bne.n	800c82c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c816:	4b92      	ldr	r3, [pc, #584]	@ (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c81a:	f023 0103 	bic.w	r1, r3, #3
 800c81e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c824:	4a8e      	ldr	r2, [pc, #568]	@ (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c826:	430b      	orrs	r3, r1
 800c828:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c82a:	e003      	b.n	800c834 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c82c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c830:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800c840:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c844:	2300      	movs	r3, #0
 800c846:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c84a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c84e:	460b      	mov	r3, r1
 800c850:	4313      	orrs	r3, r2
 800c852:	f000 8099 	beq.w	800c988 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c856:	4b83      	ldr	r3, [pc, #524]	@ (800ca64 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	4a82      	ldr	r2, [pc, #520]	@ (800ca64 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c85c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c860:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c862:	f7f8 fa3d 	bl	8004ce0 <HAL_GetTick>
 800c866:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c86a:	e00b      	b.n	800c884 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c86c:	f7f8 fa38 	bl	8004ce0 <HAL_GetTick>
 800c870:	4602      	mov	r2, r0
 800c872:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c876:	1ad3      	subs	r3, r2, r3
 800c878:	2b64      	cmp	r3, #100	@ 0x64
 800c87a:	d903      	bls.n	800c884 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800c87c:	2303      	movs	r3, #3
 800c87e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c882:	e005      	b.n	800c890 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c884:	4b77      	ldr	r3, [pc, #476]	@ (800ca64 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d0ed      	beq.n	800c86c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800c890:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c894:	2b00      	cmp	r3, #0
 800c896:	d173      	bne.n	800c980 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c898:	4b71      	ldr	r3, [pc, #452]	@ (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c89a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c89c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c8a4:	4053      	eors	r3, r2
 800c8a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d015      	beq.n	800c8da <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c8ae:	4b6c      	ldr	r3, [pc, #432]	@ (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c8b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c8b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c8b6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c8ba:	4b69      	ldr	r3, [pc, #420]	@ (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c8bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c8be:	4a68      	ldr	r2, [pc, #416]	@ (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c8c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c8c4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c8c6:	4b66      	ldr	r3, [pc, #408]	@ (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c8c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c8ca:	4a65      	ldr	r2, [pc, #404]	@ (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c8cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c8d0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c8d2:	4a63      	ldr	r2, [pc, #396]	@ (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c8d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8d8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c8da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c8e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c8e6:	d118      	bne.n	800c91a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8e8:	f7f8 f9fa 	bl	8004ce0 <HAL_GetTick>
 800c8ec:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c8f0:	e00d      	b.n	800c90e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c8f2:	f7f8 f9f5 	bl	8004ce0 <HAL_GetTick>
 800c8f6:	4602      	mov	r2, r0
 800c8f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c8fc:	1ad2      	subs	r2, r2, r3
 800c8fe:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c902:	429a      	cmp	r2, r3
 800c904:	d903      	bls.n	800c90e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800c906:	2303      	movs	r3, #3
 800c908:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800c90c:	e005      	b.n	800c91a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c90e:	4b54      	ldr	r3, [pc, #336]	@ (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c912:	f003 0302 	and.w	r3, r3, #2
 800c916:	2b00      	cmp	r3, #0
 800c918:	d0eb      	beq.n	800c8f2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800c91a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d129      	bne.n	800c976 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c926:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c92a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c92e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c932:	d10e      	bne.n	800c952 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800c934:	4b4a      	ldr	r3, [pc, #296]	@ (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c936:	691b      	ldr	r3, [r3, #16]
 800c938:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800c93c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c940:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c944:	091a      	lsrs	r2, r3, #4
 800c946:	4b48      	ldr	r3, [pc, #288]	@ (800ca68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800c948:	4013      	ands	r3, r2
 800c94a:	4a45      	ldr	r2, [pc, #276]	@ (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c94c:	430b      	orrs	r3, r1
 800c94e:	6113      	str	r3, [r2, #16]
 800c950:	e005      	b.n	800c95e <HAL_RCCEx_PeriphCLKConfig+0x852>
 800c952:	4b43      	ldr	r3, [pc, #268]	@ (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c954:	691b      	ldr	r3, [r3, #16]
 800c956:	4a42      	ldr	r2, [pc, #264]	@ (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c958:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c95c:	6113      	str	r3, [r2, #16]
 800c95e:	4b40      	ldr	r3, [pc, #256]	@ (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c960:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800c962:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c966:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c96a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c96e:	4a3c      	ldr	r2, [pc, #240]	@ (800ca60 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c970:	430b      	orrs	r3, r1
 800c972:	6713      	str	r3, [r2, #112]	@ 0x70
 800c974:	e008      	b.n	800c988 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c976:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c97a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800c97e:	e003      	b.n	800c988 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c980:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c984:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c990:	f002 0301 	and.w	r3, r2, #1
 800c994:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c998:	2300      	movs	r3, #0
 800c99a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c99e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800c9a2:	460b      	mov	r3, r1
 800c9a4:	4313      	orrs	r3, r2
 800c9a6:	f000 808f 	beq.w	800cac8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c9aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c9b0:	2b28      	cmp	r3, #40	@ 0x28
 800c9b2:	d871      	bhi.n	800ca98 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800c9b4:	a201      	add	r2, pc, #4	@ (adr r2, 800c9bc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800c9b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9ba:	bf00      	nop
 800c9bc:	0800caa1 	.word	0x0800caa1
 800c9c0:	0800ca99 	.word	0x0800ca99
 800c9c4:	0800ca99 	.word	0x0800ca99
 800c9c8:	0800ca99 	.word	0x0800ca99
 800c9cc:	0800ca99 	.word	0x0800ca99
 800c9d0:	0800ca99 	.word	0x0800ca99
 800c9d4:	0800ca99 	.word	0x0800ca99
 800c9d8:	0800ca99 	.word	0x0800ca99
 800c9dc:	0800ca6d 	.word	0x0800ca6d
 800c9e0:	0800ca99 	.word	0x0800ca99
 800c9e4:	0800ca99 	.word	0x0800ca99
 800c9e8:	0800ca99 	.word	0x0800ca99
 800c9ec:	0800ca99 	.word	0x0800ca99
 800c9f0:	0800ca99 	.word	0x0800ca99
 800c9f4:	0800ca99 	.word	0x0800ca99
 800c9f8:	0800ca99 	.word	0x0800ca99
 800c9fc:	0800ca83 	.word	0x0800ca83
 800ca00:	0800ca99 	.word	0x0800ca99
 800ca04:	0800ca99 	.word	0x0800ca99
 800ca08:	0800ca99 	.word	0x0800ca99
 800ca0c:	0800ca99 	.word	0x0800ca99
 800ca10:	0800ca99 	.word	0x0800ca99
 800ca14:	0800ca99 	.word	0x0800ca99
 800ca18:	0800ca99 	.word	0x0800ca99
 800ca1c:	0800caa1 	.word	0x0800caa1
 800ca20:	0800ca99 	.word	0x0800ca99
 800ca24:	0800ca99 	.word	0x0800ca99
 800ca28:	0800ca99 	.word	0x0800ca99
 800ca2c:	0800ca99 	.word	0x0800ca99
 800ca30:	0800ca99 	.word	0x0800ca99
 800ca34:	0800ca99 	.word	0x0800ca99
 800ca38:	0800ca99 	.word	0x0800ca99
 800ca3c:	0800caa1 	.word	0x0800caa1
 800ca40:	0800ca99 	.word	0x0800ca99
 800ca44:	0800ca99 	.word	0x0800ca99
 800ca48:	0800ca99 	.word	0x0800ca99
 800ca4c:	0800ca99 	.word	0x0800ca99
 800ca50:	0800ca99 	.word	0x0800ca99
 800ca54:	0800ca99 	.word	0x0800ca99
 800ca58:	0800ca99 	.word	0x0800ca99
 800ca5c:	0800caa1 	.word	0x0800caa1
 800ca60:	58024400 	.word	0x58024400
 800ca64:	58024800 	.word	0x58024800
 800ca68:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ca6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca70:	3308      	adds	r3, #8
 800ca72:	2101      	movs	r1, #1
 800ca74:	4618      	mov	r0, r3
 800ca76:	f001 fdcb 	bl	800e610 <RCCEx_PLL2_Config>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ca80:	e00f      	b.n	800caa2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ca82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca86:	3328      	adds	r3, #40	@ 0x28
 800ca88:	2101      	movs	r1, #1
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f001 fe72 	bl	800e774 <RCCEx_PLL3_Config>
 800ca90:	4603      	mov	r3, r0
 800ca92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ca96:	e004      	b.n	800caa2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ca98:	2301      	movs	r3, #1
 800ca9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ca9e:	e000      	b.n	800caa2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800caa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800caa2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d10a      	bne.n	800cac0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800caaa:	4bbf      	ldr	r3, [pc, #764]	@ (800cda8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800caac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800caae:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800cab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cab6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cab8:	4abb      	ldr	r2, [pc, #748]	@ (800cda8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800caba:	430b      	orrs	r3, r1
 800cabc:	6553      	str	r3, [r2, #84]	@ 0x54
 800cabe:	e003      	b.n	800cac8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cac0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cac4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800cac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad0:	f002 0302 	and.w	r3, r2, #2
 800cad4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cad8:	2300      	movs	r3, #0
 800cada:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cade:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800cae2:	460b      	mov	r3, r1
 800cae4:	4313      	orrs	r3, r2
 800cae6:	d041      	beq.n	800cb6c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800cae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800caee:	2b05      	cmp	r3, #5
 800caf0:	d824      	bhi.n	800cb3c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800caf2:	a201      	add	r2, pc, #4	@ (adr r2, 800caf8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800caf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caf8:	0800cb45 	.word	0x0800cb45
 800cafc:	0800cb11 	.word	0x0800cb11
 800cb00:	0800cb27 	.word	0x0800cb27
 800cb04:	0800cb45 	.word	0x0800cb45
 800cb08:	0800cb45 	.word	0x0800cb45
 800cb0c:	0800cb45 	.word	0x0800cb45
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cb10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb14:	3308      	adds	r3, #8
 800cb16:	2101      	movs	r1, #1
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f001 fd79 	bl	800e610 <RCCEx_PLL2_Config>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800cb24:	e00f      	b.n	800cb46 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cb26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb2a:	3328      	adds	r3, #40	@ 0x28
 800cb2c:	2101      	movs	r1, #1
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f001 fe20 	bl	800e774 <RCCEx_PLL3_Config>
 800cb34:	4603      	mov	r3, r0
 800cb36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800cb3a:	e004      	b.n	800cb46 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cb42:	e000      	b.n	800cb46 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800cb44:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d10a      	bne.n	800cb64 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800cb4e:	4b96      	ldr	r3, [pc, #600]	@ (800cda8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cb50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb52:	f023 0107 	bic.w	r1, r3, #7
 800cb56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb5c:	4a92      	ldr	r2, [pc, #584]	@ (800cda8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cb5e:	430b      	orrs	r3, r1
 800cb60:	6553      	str	r3, [r2, #84]	@ 0x54
 800cb62:	e003      	b.n	800cb6c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cb6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb74:	f002 0304 	and.w	r3, r2, #4
 800cb78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cb82:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800cb86:	460b      	mov	r3, r1
 800cb88:	4313      	orrs	r3, r2
 800cb8a:	d044      	beq.n	800cc16 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800cb8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb94:	2b05      	cmp	r3, #5
 800cb96:	d825      	bhi.n	800cbe4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800cb98:	a201      	add	r2, pc, #4	@ (adr r2, 800cba0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800cb9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb9e:	bf00      	nop
 800cba0:	0800cbed 	.word	0x0800cbed
 800cba4:	0800cbb9 	.word	0x0800cbb9
 800cba8:	0800cbcf 	.word	0x0800cbcf
 800cbac:	0800cbed 	.word	0x0800cbed
 800cbb0:	0800cbed 	.word	0x0800cbed
 800cbb4:	0800cbed 	.word	0x0800cbed
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cbb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbbc:	3308      	adds	r3, #8
 800cbbe:	2101      	movs	r1, #1
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f001 fd25 	bl	800e610 <RCCEx_PLL2_Config>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800cbcc:	e00f      	b.n	800cbee <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cbce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbd2:	3328      	adds	r3, #40	@ 0x28
 800cbd4:	2101      	movs	r1, #1
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f001 fdcc 	bl	800e774 <RCCEx_PLL3_Config>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800cbe2:	e004      	b.n	800cbee <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cbea:	e000      	b.n	800cbee <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800cbec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cbee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d10b      	bne.n	800cc0e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cbf6:	4b6c      	ldr	r3, [pc, #432]	@ (800cda8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cbf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cbfa:	f023 0107 	bic.w	r1, r3, #7
 800cbfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc06:	4a68      	ldr	r2, [pc, #416]	@ (800cda8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cc08:	430b      	orrs	r3, r1
 800cc0a:	6593      	str	r3, [r2, #88]	@ 0x58
 800cc0c:	e003      	b.n	800cc16 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc12:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800cc16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc1e:	f002 0320 	and.w	r3, r2, #32
 800cc22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cc26:	2300      	movs	r3, #0
 800cc28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cc2c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800cc30:	460b      	mov	r3, r1
 800cc32:	4313      	orrs	r3, r2
 800cc34:	d055      	beq.n	800cce2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800cc36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cc3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cc42:	d033      	beq.n	800ccac <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800cc44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cc48:	d82c      	bhi.n	800cca4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800cc4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc4e:	d02f      	beq.n	800ccb0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800cc50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc54:	d826      	bhi.n	800cca4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800cc56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cc5a:	d02b      	beq.n	800ccb4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800cc5c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cc60:	d820      	bhi.n	800cca4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800cc62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cc66:	d012      	beq.n	800cc8e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800cc68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cc6c:	d81a      	bhi.n	800cca4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d022      	beq.n	800ccb8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800cc72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cc76:	d115      	bne.n	800cca4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cc78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc7c:	3308      	adds	r3, #8
 800cc7e:	2100      	movs	r1, #0
 800cc80:	4618      	mov	r0, r3
 800cc82:	f001 fcc5 	bl	800e610 <RCCEx_PLL2_Config>
 800cc86:	4603      	mov	r3, r0
 800cc88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800cc8c:	e015      	b.n	800ccba <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cc8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc92:	3328      	adds	r3, #40	@ 0x28
 800cc94:	2102      	movs	r1, #2
 800cc96:	4618      	mov	r0, r3
 800cc98:	f001 fd6c 	bl	800e774 <RCCEx_PLL3_Config>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800cca2:	e00a      	b.n	800ccba <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cca4:	2301      	movs	r3, #1
 800cca6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ccaa:	e006      	b.n	800ccba <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ccac:	bf00      	nop
 800ccae:	e004      	b.n	800ccba <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ccb0:	bf00      	nop
 800ccb2:	e002      	b.n	800ccba <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ccb4:	bf00      	nop
 800ccb6:	e000      	b.n	800ccba <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ccb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ccba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d10b      	bne.n	800ccda <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ccc2:	4b39      	ldr	r3, [pc, #228]	@ (800cda8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ccc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ccc6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800ccca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ccd2:	4a35      	ldr	r2, [pc, #212]	@ (800cda8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ccd4:	430b      	orrs	r3, r1
 800ccd6:	6553      	str	r3, [r2, #84]	@ 0x54
 800ccd8:	e003      	b.n	800cce2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ccde:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800cce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccea:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800ccee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ccf8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800ccfc:	460b      	mov	r3, r1
 800ccfe:	4313      	orrs	r3, r2
 800cd00:	d058      	beq.n	800cdb4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800cd02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cd0a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800cd0e:	d033      	beq.n	800cd78 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800cd10:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800cd14:	d82c      	bhi.n	800cd70 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800cd16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd1a:	d02f      	beq.n	800cd7c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800cd1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd20:	d826      	bhi.n	800cd70 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800cd22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cd26:	d02b      	beq.n	800cd80 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800cd28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cd2c:	d820      	bhi.n	800cd70 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800cd2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cd32:	d012      	beq.n	800cd5a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800cd34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cd38:	d81a      	bhi.n	800cd70 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d022      	beq.n	800cd84 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800cd3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd42:	d115      	bne.n	800cd70 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cd44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd48:	3308      	adds	r3, #8
 800cd4a:	2100      	movs	r1, #0
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f001 fc5f 	bl	800e610 <RCCEx_PLL2_Config>
 800cd52:	4603      	mov	r3, r0
 800cd54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800cd58:	e015      	b.n	800cd86 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cd5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd5e:	3328      	adds	r3, #40	@ 0x28
 800cd60:	2102      	movs	r1, #2
 800cd62:	4618      	mov	r0, r3
 800cd64:	f001 fd06 	bl	800e774 <RCCEx_PLL3_Config>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800cd6e:	e00a      	b.n	800cd86 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cd70:	2301      	movs	r3, #1
 800cd72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cd76:	e006      	b.n	800cd86 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800cd78:	bf00      	nop
 800cd7a:	e004      	b.n	800cd86 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800cd7c:	bf00      	nop
 800cd7e:	e002      	b.n	800cd86 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800cd80:	bf00      	nop
 800cd82:	e000      	b.n	800cd86 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800cd84:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d10e      	bne.n	800cdac <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cd8e:	4b06      	ldr	r3, [pc, #24]	@ (800cda8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cd90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd92:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800cd96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cd9e:	4a02      	ldr	r2, [pc, #8]	@ (800cda8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cda0:	430b      	orrs	r3, r1
 800cda2:	6593      	str	r3, [r2, #88]	@ 0x58
 800cda4:	e006      	b.n	800cdb4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800cda6:	bf00      	nop
 800cda8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cdb0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800cdb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdbc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800cdc0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cdca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800cdce:	460b      	mov	r3, r1
 800cdd0:	4313      	orrs	r3, r2
 800cdd2:	d055      	beq.n	800ce80 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800cdd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800cddc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800cde0:	d033      	beq.n	800ce4a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800cde2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800cde6:	d82c      	bhi.n	800ce42 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800cde8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cdec:	d02f      	beq.n	800ce4e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800cdee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cdf2:	d826      	bhi.n	800ce42 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800cdf4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800cdf8:	d02b      	beq.n	800ce52 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800cdfa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800cdfe:	d820      	bhi.n	800ce42 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ce00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ce04:	d012      	beq.n	800ce2c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800ce06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ce0a:	d81a      	bhi.n	800ce42 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d022      	beq.n	800ce56 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800ce10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ce14:	d115      	bne.n	800ce42 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ce16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce1a:	3308      	adds	r3, #8
 800ce1c:	2100      	movs	r1, #0
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f001 fbf6 	bl	800e610 <RCCEx_PLL2_Config>
 800ce24:	4603      	mov	r3, r0
 800ce26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ce2a:	e015      	b.n	800ce58 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ce2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce30:	3328      	adds	r3, #40	@ 0x28
 800ce32:	2102      	movs	r1, #2
 800ce34:	4618      	mov	r0, r3
 800ce36:	f001 fc9d 	bl	800e774 <RCCEx_PLL3_Config>
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ce40:	e00a      	b.n	800ce58 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ce42:	2301      	movs	r3, #1
 800ce44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ce48:	e006      	b.n	800ce58 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ce4a:	bf00      	nop
 800ce4c:	e004      	b.n	800ce58 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ce4e:	bf00      	nop
 800ce50:	e002      	b.n	800ce58 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ce52:	bf00      	nop
 800ce54:	e000      	b.n	800ce58 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ce56:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ce58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d10b      	bne.n	800ce78 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ce60:	4ba0      	ldr	r3, [pc, #640]	@ (800d0e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ce62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce64:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800ce68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ce70:	4a9c      	ldr	r2, [pc, #624]	@ (800d0e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ce72:	430b      	orrs	r3, r1
 800ce74:	6593      	str	r3, [r2, #88]	@ 0x58
 800ce76:	e003      	b.n	800ce80 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ce7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800ce80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce88:	f002 0308 	and.w	r3, r2, #8
 800ce8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ce90:	2300      	movs	r3, #0
 800ce92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ce96:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800ce9a:	460b      	mov	r3, r1
 800ce9c:	4313      	orrs	r3, r2
 800ce9e:	d01e      	beq.n	800cede <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800cea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cea8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ceac:	d10c      	bne.n	800cec8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ceae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ceb2:	3328      	adds	r3, #40	@ 0x28
 800ceb4:	2102      	movs	r1, #2
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f001 fc5c 	bl	800e774 <RCCEx_PLL3_Config>
 800cebc:	4603      	mov	r3, r0
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d002      	beq.n	800cec8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800cec2:	2301      	movs	r3, #1
 800cec4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800cec8:	4b86      	ldr	r3, [pc, #536]	@ (800d0e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ceca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cecc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ced0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ced4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ced8:	4a82      	ldr	r2, [pc, #520]	@ (800d0e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ceda:	430b      	orrs	r3, r1
 800cedc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee6:	f002 0310 	and.w	r3, r2, #16
 800ceea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ceee:	2300      	movs	r3, #0
 800cef0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cef4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800cef8:	460b      	mov	r3, r1
 800cefa:	4313      	orrs	r3, r2
 800cefc:	d01e      	beq.n	800cf3c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800cefe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cf06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cf0a:	d10c      	bne.n	800cf26 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800cf0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf10:	3328      	adds	r3, #40	@ 0x28
 800cf12:	2102      	movs	r1, #2
 800cf14:	4618      	mov	r0, r3
 800cf16:	f001 fc2d 	bl	800e774 <RCCEx_PLL3_Config>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d002      	beq.n	800cf26 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800cf20:	2301      	movs	r3, #1
 800cf22:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cf26:	4b6f      	ldr	r3, [pc, #444]	@ (800d0e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cf28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf2a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800cf2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cf36:	4a6b      	ldr	r2, [pc, #428]	@ (800d0e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cf38:	430b      	orrs	r3, r1
 800cf3a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cf3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf44:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800cf48:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cf4e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800cf52:	460b      	mov	r3, r1
 800cf54:	4313      	orrs	r3, r2
 800cf56:	d03e      	beq.n	800cfd6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800cf58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800cf60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cf64:	d022      	beq.n	800cfac <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800cf66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cf6a:	d81b      	bhi.n	800cfa4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d003      	beq.n	800cf78 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800cf70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cf74:	d00b      	beq.n	800cf8e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800cf76:	e015      	b.n	800cfa4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cf78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf7c:	3308      	adds	r3, #8
 800cf7e:	2100      	movs	r1, #0
 800cf80:	4618      	mov	r0, r3
 800cf82:	f001 fb45 	bl	800e610 <RCCEx_PLL2_Config>
 800cf86:	4603      	mov	r3, r0
 800cf88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800cf8c:	e00f      	b.n	800cfae <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cf8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf92:	3328      	adds	r3, #40	@ 0x28
 800cf94:	2102      	movs	r1, #2
 800cf96:	4618      	mov	r0, r3
 800cf98:	f001 fbec 	bl	800e774 <RCCEx_PLL3_Config>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800cfa2:	e004      	b.n	800cfae <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cfaa:	e000      	b.n	800cfae <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800cfac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cfae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d10b      	bne.n	800cfce <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cfb6:	4b4b      	ldr	r3, [pc, #300]	@ (800d0e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cfb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cfba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800cfbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfc2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800cfc6:	4a47      	ldr	r2, [pc, #284]	@ (800d0e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cfc8:	430b      	orrs	r3, r1
 800cfca:	6593      	str	r3, [r2, #88]	@ 0x58
 800cfcc:	e003      	b.n	800cfd6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cfce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cfd2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800cfd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfde:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800cfe2:	673b      	str	r3, [r7, #112]	@ 0x70
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	677b      	str	r3, [r7, #116]	@ 0x74
 800cfe8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800cfec:	460b      	mov	r3, r1
 800cfee:	4313      	orrs	r3, r2
 800cff0:	d03b      	beq.n	800d06a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800cff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cffa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800cffe:	d01f      	beq.n	800d040 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800d000:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d004:	d818      	bhi.n	800d038 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800d006:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d00a:	d003      	beq.n	800d014 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800d00c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d010:	d007      	beq.n	800d022 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800d012:	e011      	b.n	800d038 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d014:	4b33      	ldr	r3, [pc, #204]	@ (800d0e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d018:	4a32      	ldr	r2, [pc, #200]	@ (800d0e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d01a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d01e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800d020:	e00f      	b.n	800d042 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d022:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d026:	3328      	adds	r3, #40	@ 0x28
 800d028:	2101      	movs	r1, #1
 800d02a:	4618      	mov	r0, r3
 800d02c:	f001 fba2 	bl	800e774 <RCCEx_PLL3_Config>
 800d030:	4603      	mov	r3, r0
 800d032:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800d036:	e004      	b.n	800d042 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d038:	2301      	movs	r3, #1
 800d03a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d03e:	e000      	b.n	800d042 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800d040:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d042:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d046:	2b00      	cmp	r3, #0
 800d048:	d10b      	bne.n	800d062 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d04a:	4b26      	ldr	r3, [pc, #152]	@ (800d0e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d04c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d04e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800d052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d056:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d05a:	4a22      	ldr	r2, [pc, #136]	@ (800d0e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d05c:	430b      	orrs	r3, r1
 800d05e:	6553      	str	r3, [r2, #84]	@ 0x54
 800d060:	e003      	b.n	800d06a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d062:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d066:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d06a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d072:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800d076:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d078:	2300      	movs	r3, #0
 800d07a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d07c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800d080:	460b      	mov	r3, r1
 800d082:	4313      	orrs	r3, r2
 800d084:	d034      	beq.n	800d0f0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800d086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d08a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d003      	beq.n	800d098 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800d090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d094:	d007      	beq.n	800d0a6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800d096:	e011      	b.n	800d0bc <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d098:	4b12      	ldr	r3, [pc, #72]	@ (800d0e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d09a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d09c:	4a11      	ldr	r2, [pc, #68]	@ (800d0e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d09e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d0a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d0a4:	e00e      	b.n	800d0c4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d0a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0aa:	3308      	adds	r3, #8
 800d0ac:	2102      	movs	r1, #2
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f001 faae 	bl	800e610 <RCCEx_PLL2_Config>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d0ba:	e003      	b.n	800d0c4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800d0bc:	2301      	movs	r3, #1
 800d0be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d0c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d0c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d10d      	bne.n	800d0e8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d0cc:	4b05      	ldr	r3, [pc, #20]	@ (800d0e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d0ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d0d0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d0d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d0da:	4a02      	ldr	r2, [pc, #8]	@ (800d0e4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d0dc:	430b      	orrs	r3, r1
 800d0de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d0e0:	e006      	b.n	800d0f0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800d0e2:	bf00      	nop
 800d0e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d0ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d0f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800d0fc:	663b      	str	r3, [r7, #96]	@ 0x60
 800d0fe:	2300      	movs	r3, #0
 800d100:	667b      	str	r3, [r7, #100]	@ 0x64
 800d102:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800d106:	460b      	mov	r3, r1
 800d108:	4313      	orrs	r3, r2
 800d10a:	d00c      	beq.n	800d126 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d10c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d110:	3328      	adds	r3, #40	@ 0x28
 800d112:	2102      	movs	r1, #2
 800d114:	4618      	mov	r0, r3
 800d116:	f001 fb2d 	bl	800e774 <RCCEx_PLL3_Config>
 800d11a:	4603      	mov	r3, r0
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d002      	beq.n	800d126 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800d120:	2301      	movs	r3, #1
 800d122:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d12e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800d132:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d134:	2300      	movs	r3, #0
 800d136:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d138:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800d13c:	460b      	mov	r3, r1
 800d13e:	4313      	orrs	r3, r2
 800d140:	d036      	beq.n	800d1b0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800d142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d146:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d148:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d14c:	d018      	beq.n	800d180 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800d14e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d152:	d811      	bhi.n	800d178 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800d154:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d158:	d014      	beq.n	800d184 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800d15a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d15e:	d80b      	bhi.n	800d178 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800d160:	2b00      	cmp	r3, #0
 800d162:	d011      	beq.n	800d188 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800d164:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d168:	d106      	bne.n	800d178 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d16a:	4bb7      	ldr	r3, [pc, #732]	@ (800d448 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d16c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d16e:	4ab6      	ldr	r2, [pc, #728]	@ (800d448 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d170:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d174:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800d176:	e008      	b.n	800d18a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d178:	2301      	movs	r3, #1
 800d17a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d17e:	e004      	b.n	800d18a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800d180:	bf00      	nop
 800d182:	e002      	b.n	800d18a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800d184:	bf00      	nop
 800d186:	e000      	b.n	800d18a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800d188:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d18a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d10a      	bne.n	800d1a8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d192:	4bad      	ldr	r3, [pc, #692]	@ (800d448 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d196:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d19a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d19e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d1a0:	4aa9      	ldr	r2, [pc, #676]	@ (800d448 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d1a2:	430b      	orrs	r3, r1
 800d1a4:	6553      	str	r3, [r2, #84]	@ 0x54
 800d1a6:	e003      	b.n	800d1b0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d1a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d1ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d1b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800d1bc:	653b      	str	r3, [r7, #80]	@ 0x50
 800d1be:	2300      	movs	r3, #0
 800d1c0:	657b      	str	r3, [r7, #84]	@ 0x54
 800d1c2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800d1c6:	460b      	mov	r3, r1
 800d1c8:	4313      	orrs	r3, r2
 800d1ca:	d009      	beq.n	800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d1cc:	4b9e      	ldr	r3, [pc, #632]	@ (800d448 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d1ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d1d0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d1d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d1da:	4a9b      	ldr	r2, [pc, #620]	@ (800d448 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d1dc:	430b      	orrs	r3, r1
 800d1de:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d1e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800d1ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d1f2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800d1f6:	460b      	mov	r3, r1
 800d1f8:	4313      	orrs	r3, r2
 800d1fa:	d009      	beq.n	800d210 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d1fc:	4b92      	ldr	r3, [pc, #584]	@ (800d448 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d1fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d200:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800d204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d208:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d20a:	4a8f      	ldr	r2, [pc, #572]	@ (800d448 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d20c:	430b      	orrs	r3, r1
 800d20e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d218:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800d21c:	643b      	str	r3, [r7, #64]	@ 0x40
 800d21e:	2300      	movs	r3, #0
 800d220:	647b      	str	r3, [r7, #68]	@ 0x44
 800d222:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800d226:	460b      	mov	r3, r1
 800d228:	4313      	orrs	r3, r2
 800d22a:	d00e      	beq.n	800d24a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d22c:	4b86      	ldr	r3, [pc, #536]	@ (800d448 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d22e:	691b      	ldr	r3, [r3, #16]
 800d230:	4a85      	ldr	r2, [pc, #532]	@ (800d448 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d232:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d236:	6113      	str	r3, [r2, #16]
 800d238:	4b83      	ldr	r3, [pc, #524]	@ (800d448 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d23a:	6919      	ldr	r1, [r3, #16]
 800d23c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d240:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d244:	4a80      	ldr	r2, [pc, #512]	@ (800d448 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d246:	430b      	orrs	r3, r1
 800d248:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d24a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d252:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800d256:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d258:	2300      	movs	r3, #0
 800d25a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d25c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800d260:	460b      	mov	r3, r1
 800d262:	4313      	orrs	r3, r2
 800d264:	d009      	beq.n	800d27a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d266:	4b78      	ldr	r3, [pc, #480]	@ (800d448 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d26a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800d26e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d274:	4a74      	ldr	r2, [pc, #464]	@ (800d448 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d276:	430b      	orrs	r3, r1
 800d278:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d27a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d282:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800d286:	633b      	str	r3, [r7, #48]	@ 0x30
 800d288:	2300      	movs	r3, #0
 800d28a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d28c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800d290:	460b      	mov	r3, r1
 800d292:	4313      	orrs	r3, r2
 800d294:	d00a      	beq.n	800d2ac <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d296:	4b6c      	ldr	r3, [pc, #432]	@ (800d448 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d29a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800d29e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d2a6:	4a68      	ldr	r2, [pc, #416]	@ (800d448 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d2a8:	430b      	orrs	r3, r1
 800d2aa:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800d2ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b4:	2100      	movs	r1, #0
 800d2b6:	62b9      	str	r1, [r7, #40]	@ 0x28
 800d2b8:	f003 0301 	and.w	r3, r3, #1
 800d2bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d2be:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800d2c2:	460b      	mov	r3, r1
 800d2c4:	4313      	orrs	r3, r2
 800d2c6:	d011      	beq.n	800d2ec <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d2c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2cc:	3308      	adds	r3, #8
 800d2ce:	2100      	movs	r1, #0
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f001 f99d 	bl	800e610 <RCCEx_PLL2_Config>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d2dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d003      	beq.n	800d2ec <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d2e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800d2ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2f4:	2100      	movs	r1, #0
 800d2f6:	6239      	str	r1, [r7, #32]
 800d2f8:	f003 0302 	and.w	r3, r3, #2
 800d2fc:	627b      	str	r3, [r7, #36]	@ 0x24
 800d2fe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d302:	460b      	mov	r3, r1
 800d304:	4313      	orrs	r3, r2
 800d306:	d011      	beq.n	800d32c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d30c:	3308      	adds	r3, #8
 800d30e:	2101      	movs	r1, #1
 800d310:	4618      	mov	r0, r3
 800d312:	f001 f97d 	bl	800e610 <RCCEx_PLL2_Config>
 800d316:	4603      	mov	r3, r0
 800d318:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d31c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d320:	2b00      	cmp	r3, #0
 800d322:	d003      	beq.n	800d32c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d324:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d328:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800d32c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d334:	2100      	movs	r1, #0
 800d336:	61b9      	str	r1, [r7, #24]
 800d338:	f003 0304 	and.w	r3, r3, #4
 800d33c:	61fb      	str	r3, [r7, #28]
 800d33e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d342:	460b      	mov	r3, r1
 800d344:	4313      	orrs	r3, r2
 800d346:	d011      	beq.n	800d36c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d34c:	3308      	adds	r3, #8
 800d34e:	2102      	movs	r1, #2
 800d350:	4618      	mov	r0, r3
 800d352:	f001 f95d 	bl	800e610 <RCCEx_PLL2_Config>
 800d356:	4603      	mov	r3, r0
 800d358:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d35c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d360:	2b00      	cmp	r3, #0
 800d362:	d003      	beq.n	800d36c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d364:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d368:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800d36c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d374:	2100      	movs	r1, #0
 800d376:	6139      	str	r1, [r7, #16]
 800d378:	f003 0308 	and.w	r3, r3, #8
 800d37c:	617b      	str	r3, [r7, #20]
 800d37e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d382:	460b      	mov	r3, r1
 800d384:	4313      	orrs	r3, r2
 800d386:	d011      	beq.n	800d3ac <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d38c:	3328      	adds	r3, #40	@ 0x28
 800d38e:	2100      	movs	r1, #0
 800d390:	4618      	mov	r0, r3
 800d392:	f001 f9ef 	bl	800e774 <RCCEx_PLL3_Config>
 800d396:	4603      	mov	r3, r0
 800d398:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800d39c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d003      	beq.n	800d3ac <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d3a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800d3ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b4:	2100      	movs	r1, #0
 800d3b6:	60b9      	str	r1, [r7, #8]
 800d3b8:	f003 0310 	and.w	r3, r3, #16
 800d3bc:	60fb      	str	r3, [r7, #12]
 800d3be:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d3c2:	460b      	mov	r3, r1
 800d3c4:	4313      	orrs	r3, r2
 800d3c6:	d011      	beq.n	800d3ec <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d3c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3cc:	3328      	adds	r3, #40	@ 0x28
 800d3ce:	2101      	movs	r1, #1
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f001 f9cf 	bl	800e774 <RCCEx_PLL3_Config>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d3dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d003      	beq.n	800d3ec <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d3e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800d3ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f4:	2100      	movs	r1, #0
 800d3f6:	6039      	str	r1, [r7, #0]
 800d3f8:	f003 0320 	and.w	r3, r3, #32
 800d3fc:	607b      	str	r3, [r7, #4]
 800d3fe:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d402:	460b      	mov	r3, r1
 800d404:	4313      	orrs	r3, r2
 800d406:	d011      	beq.n	800d42c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d40c:	3328      	adds	r3, #40	@ 0x28
 800d40e:	2102      	movs	r1, #2
 800d410:	4618      	mov	r0, r3
 800d412:	f001 f9af 	bl	800e774 <RCCEx_PLL3_Config>
 800d416:	4603      	mov	r3, r0
 800d418:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d41c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d420:	2b00      	cmp	r3, #0
 800d422:	d003      	beq.n	800d42c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d424:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d428:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800d42c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800d430:	2b00      	cmp	r3, #0
 800d432:	d101      	bne.n	800d438 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800d434:	2300      	movs	r3, #0
 800d436:	e000      	b.n	800d43a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800d438:	2301      	movs	r3, #1
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800d440:	46bd      	mov	sp, r7
 800d442:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d446:	bf00      	nop
 800d448:	58024400 	.word	0x58024400

0800d44c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b090      	sub	sp, #64	@ 0x40
 800d450:	af00      	add	r7, sp, #0
 800d452:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d456:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d45a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800d45e:	430b      	orrs	r3, r1
 800d460:	f040 8094 	bne.w	800d58c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800d464:	4b9b      	ldr	r3, [pc, #620]	@ (800d6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d468:	f003 0307 	and.w	r3, r3, #7
 800d46c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800d46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d470:	2b04      	cmp	r3, #4
 800d472:	f200 8087 	bhi.w	800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800d476:	a201      	add	r2, pc, #4	@ (adr r2, 800d47c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800d478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d47c:	0800d491 	.word	0x0800d491
 800d480:	0800d4b9 	.word	0x0800d4b9
 800d484:	0800d4e1 	.word	0x0800d4e1
 800d488:	0800d57d 	.word	0x0800d57d
 800d48c:	0800d509 	.word	0x0800d509
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d490:	4b90      	ldr	r3, [pc, #576]	@ (800d6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d498:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d49c:	d108      	bne.n	800d4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d49e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f000 ff62 	bl	800e36c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d4a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d4ac:	f000 bc93 	b.w	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4b4:	f000 bc8f 	b.w	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d4b8:	4b86      	ldr	r3, [pc, #536]	@ (800d6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d4c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d4c4:	d108      	bne.n	800d4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d4c6:	f107 0318 	add.w	r3, r7, #24
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f000 fca6 	bl	800de1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d4d0:	69bb      	ldr	r3, [r7, #24]
 800d4d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d4d4:	f000 bc7f 	b.w	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4dc:	f000 bc7b 	b.w	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d4e0:	4b7c      	ldr	r3, [pc, #496]	@ (800d6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d4e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d4ec:	d108      	bne.n	800d500 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d4ee:	f107 030c 	add.w	r3, r7, #12
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f000 fde6 	bl	800e0c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d4fc:	f000 bc6b 	b.w	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d500:	2300      	movs	r3, #0
 800d502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d504:	f000 bc67 	b.w	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d508:	4b72      	ldr	r3, [pc, #456]	@ (800d6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d50a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d50c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d510:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d512:	4b70      	ldr	r3, [pc, #448]	@ (800d6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	f003 0304 	and.w	r3, r3, #4
 800d51a:	2b04      	cmp	r3, #4
 800d51c:	d10c      	bne.n	800d538 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800d51e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d520:	2b00      	cmp	r3, #0
 800d522:	d109      	bne.n	800d538 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d524:	4b6b      	ldr	r3, [pc, #428]	@ (800d6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	08db      	lsrs	r3, r3, #3
 800d52a:	f003 0303 	and.w	r3, r3, #3
 800d52e:	4a6a      	ldr	r2, [pc, #424]	@ (800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800d530:	fa22 f303 	lsr.w	r3, r2, r3
 800d534:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d536:	e01f      	b.n	800d578 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d538:	4b66      	ldr	r3, [pc, #408]	@ (800d6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d540:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d544:	d106      	bne.n	800d554 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800d546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d548:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d54c:	d102      	bne.n	800d554 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d54e:	4b63      	ldr	r3, [pc, #396]	@ (800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800d550:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d552:	e011      	b.n	800d578 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d554:	4b5f      	ldr	r3, [pc, #380]	@ (800d6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d55c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d560:	d106      	bne.n	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800d562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d564:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d568:	d102      	bne.n	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d56a:	4b5d      	ldr	r3, [pc, #372]	@ (800d6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d56c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d56e:	e003      	b.n	800d578 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d570:	2300      	movs	r3, #0
 800d572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d574:	f000 bc2f 	b.w	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d578:	f000 bc2d 	b.w	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d57c:	4b59      	ldr	r3, [pc, #356]	@ (800d6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800d57e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d580:	f000 bc29 	b.w	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d584:	2300      	movs	r3, #0
 800d586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d588:	f000 bc25 	b.w	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800d58c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d590:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800d594:	430b      	orrs	r3, r1
 800d596:	f040 80a7 	bne.w	800d6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800d59a:	4b4e      	ldr	r3, [pc, #312]	@ (800d6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d59c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d59e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800d5a2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800d5a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d5aa:	d054      	beq.n	800d656 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800d5ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d5b2:	f200 808b 	bhi.w	800d6cc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800d5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5b8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d5bc:	f000 8083 	beq.w	800d6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800d5c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5c2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d5c6:	f200 8081 	bhi.w	800d6cc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800d5ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d5d0:	d02f      	beq.n	800d632 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800d5d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d5d8:	d878      	bhi.n	800d6cc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800d5da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d004      	beq.n	800d5ea <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800d5e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d5e6:	d012      	beq.n	800d60e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800d5e8:	e070      	b.n	800d6cc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d5ea:	4b3a      	ldr	r3, [pc, #232]	@ (800d6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d5f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d5f6:	d107      	bne.n	800d608 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d5f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f000 feb5 	bl	800e36c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d604:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d606:	e3e6      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d608:	2300      	movs	r3, #0
 800d60a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d60c:	e3e3      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d60e:	4b31      	ldr	r3, [pc, #196]	@ (800d6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d616:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d61a:	d107      	bne.n	800d62c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d61c:	f107 0318 	add.w	r3, r7, #24
 800d620:	4618      	mov	r0, r3
 800d622:	f000 fbfb 	bl	800de1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d626:	69bb      	ldr	r3, [r7, #24]
 800d628:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d62a:	e3d4      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d62c:	2300      	movs	r3, #0
 800d62e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d630:	e3d1      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d632:	4b28      	ldr	r3, [pc, #160]	@ (800d6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d63a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d63e:	d107      	bne.n	800d650 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d640:	f107 030c 	add.w	r3, r7, #12
 800d644:	4618      	mov	r0, r3
 800d646:	f000 fd3d 	bl	800e0c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d64e:	e3c2      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d650:	2300      	movs	r3, #0
 800d652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d654:	e3bf      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d656:	4b1f      	ldr	r3, [pc, #124]	@ (800d6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d65a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d65e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d660:	4b1c      	ldr	r3, [pc, #112]	@ (800d6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	f003 0304 	and.w	r3, r3, #4
 800d668:	2b04      	cmp	r3, #4
 800d66a:	d10c      	bne.n	800d686 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800d66c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d109      	bne.n	800d686 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d672:	4b18      	ldr	r3, [pc, #96]	@ (800d6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	08db      	lsrs	r3, r3, #3
 800d678:	f003 0303 	and.w	r3, r3, #3
 800d67c:	4a16      	ldr	r2, [pc, #88]	@ (800d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800d67e:	fa22 f303 	lsr.w	r3, r2, r3
 800d682:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d684:	e01e      	b.n	800d6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d686:	4b13      	ldr	r3, [pc, #76]	@ (800d6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d68e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d692:	d106      	bne.n	800d6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800d694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d696:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d69a:	d102      	bne.n	800d6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d69c:	4b0f      	ldr	r3, [pc, #60]	@ (800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800d69e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d6a0:	e010      	b.n	800d6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d6a2:	4b0c      	ldr	r3, [pc, #48]	@ (800d6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d6aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d6ae:	d106      	bne.n	800d6be <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800d6b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d6b6:	d102      	bne.n	800d6be <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d6b8:	4b09      	ldr	r3, [pc, #36]	@ (800d6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d6ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d6bc:	e002      	b.n	800d6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d6c2:	e388      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d6c4:	e387      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d6c6:	4b07      	ldr	r3, [pc, #28]	@ (800d6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800d6c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d6ca:	e384      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d6d0:	e381      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d6d2:	bf00      	nop
 800d6d4:	58024400 	.word	0x58024400
 800d6d8:	03d09000 	.word	0x03d09000
 800d6dc:	003d0900 	.word	0x003d0900
 800d6e0:	007a1200 	.word	0x007a1200
 800d6e4:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800d6e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6ec:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800d6f0:	430b      	orrs	r3, r1
 800d6f2:	f040 809c 	bne.w	800d82e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800d6f6:	4b9e      	ldr	r3, [pc, #632]	@ (800d970 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d6f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d6fa:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800d6fe:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800d700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d702:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d706:	d054      	beq.n	800d7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800d708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d70a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d70e:	f200 808b 	bhi.w	800d828 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800d712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d714:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d718:	f000 8083 	beq.w	800d822 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800d71c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d71e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d722:	f200 8081 	bhi.w	800d828 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800d726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d728:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d72c:	d02f      	beq.n	800d78e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800d72e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d730:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d734:	d878      	bhi.n	800d828 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800d736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d004      	beq.n	800d746 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800d73c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d73e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d742:	d012      	beq.n	800d76a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800d744:	e070      	b.n	800d828 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d746:	4b8a      	ldr	r3, [pc, #552]	@ (800d970 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d74e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d752:	d107      	bne.n	800d764 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d754:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d758:	4618      	mov	r0, r3
 800d75a:	f000 fe07 	bl	800e36c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d75e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d760:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d762:	e338      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d764:	2300      	movs	r3, #0
 800d766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d768:	e335      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d76a:	4b81      	ldr	r3, [pc, #516]	@ (800d970 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d772:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d776:	d107      	bne.n	800d788 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d778:	f107 0318 	add.w	r3, r7, #24
 800d77c:	4618      	mov	r0, r3
 800d77e:	f000 fb4d 	bl	800de1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d782:	69bb      	ldr	r3, [r7, #24]
 800d784:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d786:	e326      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d788:	2300      	movs	r3, #0
 800d78a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d78c:	e323      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d78e:	4b78      	ldr	r3, [pc, #480]	@ (800d970 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d796:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d79a:	d107      	bne.n	800d7ac <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d79c:	f107 030c 	add.w	r3, r7, #12
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f000 fc8f 	bl	800e0c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d7aa:	e314      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7b0:	e311      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d7b2:	4b6f      	ldr	r3, [pc, #444]	@ (800d970 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d7b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d7b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d7ba:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d7bc:	4b6c      	ldr	r3, [pc, #432]	@ (800d970 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	f003 0304 	and.w	r3, r3, #4
 800d7c4:	2b04      	cmp	r3, #4
 800d7c6:	d10c      	bne.n	800d7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800d7c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d109      	bne.n	800d7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d7ce:	4b68      	ldr	r3, [pc, #416]	@ (800d970 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	08db      	lsrs	r3, r3, #3
 800d7d4:	f003 0303 	and.w	r3, r3, #3
 800d7d8:	4a66      	ldr	r2, [pc, #408]	@ (800d974 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800d7da:	fa22 f303 	lsr.w	r3, r2, r3
 800d7de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d7e0:	e01e      	b.n	800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d7e2:	4b63      	ldr	r3, [pc, #396]	@ (800d970 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d7ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d7ee:	d106      	bne.n	800d7fe <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800d7f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d7f6:	d102      	bne.n	800d7fe <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d7f8:	4b5f      	ldr	r3, [pc, #380]	@ (800d978 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800d7fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d7fc:	e010      	b.n	800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d7fe:	4b5c      	ldr	r3, [pc, #368]	@ (800d970 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d806:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d80a:	d106      	bne.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800d80c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d80e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d812:	d102      	bne.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d814:	4b59      	ldr	r3, [pc, #356]	@ (800d97c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d816:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d818:	e002      	b.n	800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d81a:	2300      	movs	r3, #0
 800d81c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d81e:	e2da      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d820:	e2d9      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d822:	4b57      	ldr	r3, [pc, #348]	@ (800d980 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800d824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d826:	e2d6      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d828:	2300      	movs	r3, #0
 800d82a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d82c:	e2d3      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800d82e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d832:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800d836:	430b      	orrs	r3, r1
 800d838:	f040 80a7 	bne.w	800d98a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800d83c:	4b4c      	ldr	r3, [pc, #304]	@ (800d970 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d83e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d840:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800d844:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d848:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d84c:	d055      	beq.n	800d8fa <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800d84e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d850:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d854:	f200 8096 	bhi.w	800d984 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d85a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d85e:	f000 8084 	beq.w	800d96a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800d862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d864:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d868:	f200 808c 	bhi.w	800d984 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d86c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d86e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d872:	d030      	beq.n	800d8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800d874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d876:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d87a:	f200 8083 	bhi.w	800d984 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d87e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d880:	2b00      	cmp	r3, #0
 800d882:	d004      	beq.n	800d88e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800d884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d886:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d88a:	d012      	beq.n	800d8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800d88c:	e07a      	b.n	800d984 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d88e:	4b38      	ldr	r3, [pc, #224]	@ (800d970 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d896:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d89a:	d107      	bne.n	800d8ac <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d89c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f000 fd63 	bl	800e36c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d8a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d8aa:	e294      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d8b0:	e291      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d8b2:	4b2f      	ldr	r3, [pc, #188]	@ (800d970 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d8ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d8be:	d107      	bne.n	800d8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d8c0:	f107 0318 	add.w	r3, r7, #24
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f000 faa9 	bl	800de1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d8ca:	69bb      	ldr	r3, [r7, #24]
 800d8cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d8ce:	e282      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d8d4:	e27f      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d8d6:	4b26      	ldr	r3, [pc, #152]	@ (800d970 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d8de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d8e2:	d107      	bne.n	800d8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d8e4:	f107 030c 	add.w	r3, r7, #12
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f000 fbeb 	bl	800e0c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d8f2:	e270      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d8f8:	e26d      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d8fa:	4b1d      	ldr	r3, [pc, #116]	@ (800d970 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d8fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d8fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d902:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d904:	4b1a      	ldr	r3, [pc, #104]	@ (800d970 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	f003 0304 	and.w	r3, r3, #4
 800d90c:	2b04      	cmp	r3, #4
 800d90e:	d10c      	bne.n	800d92a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800d910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d912:	2b00      	cmp	r3, #0
 800d914:	d109      	bne.n	800d92a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d916:	4b16      	ldr	r3, [pc, #88]	@ (800d970 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	08db      	lsrs	r3, r3, #3
 800d91c:	f003 0303 	and.w	r3, r3, #3
 800d920:	4a14      	ldr	r2, [pc, #80]	@ (800d974 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800d922:	fa22 f303 	lsr.w	r3, r2, r3
 800d926:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d928:	e01e      	b.n	800d968 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d92a:	4b11      	ldr	r3, [pc, #68]	@ (800d970 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d932:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d936:	d106      	bne.n	800d946 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800d938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d93a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d93e:	d102      	bne.n	800d946 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d940:	4b0d      	ldr	r3, [pc, #52]	@ (800d978 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800d942:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d944:	e010      	b.n	800d968 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d946:	4b0a      	ldr	r3, [pc, #40]	@ (800d970 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d94e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d952:	d106      	bne.n	800d962 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800d954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d956:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d95a:	d102      	bne.n	800d962 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d95c:	4b07      	ldr	r3, [pc, #28]	@ (800d97c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d95e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d960:	e002      	b.n	800d968 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d962:	2300      	movs	r3, #0
 800d964:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d966:	e236      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d968:	e235      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d96a:	4b05      	ldr	r3, [pc, #20]	@ (800d980 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800d96c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d96e:	e232      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d970:	58024400 	.word	0x58024400
 800d974:	03d09000 	.word	0x03d09000
 800d978:	003d0900 	.word	0x003d0900
 800d97c:	007a1200 	.word	0x007a1200
 800d980:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800d984:	2300      	movs	r3, #0
 800d986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d988:	e225      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800d98a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d98e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800d992:	430b      	orrs	r3, r1
 800d994:	f040 8085 	bne.w	800daa2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800d998:	4b9c      	ldr	r3, [pc, #624]	@ (800dc0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d99a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d99c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800d9a0:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800d9a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d9a8:	d06b      	beq.n	800da82 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800d9aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d9b0:	d874      	bhi.n	800da9c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d9b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d9b8:	d056      	beq.n	800da68 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800d9ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d9c0:	d86c      	bhi.n	800da9c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d9c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d9c8:	d03b      	beq.n	800da42 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800d9ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d9d0:	d864      	bhi.n	800da9c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d9d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d9d8:	d021      	beq.n	800da1e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800d9da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d9e0:	d85c      	bhi.n	800da9c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d9e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d004      	beq.n	800d9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800d9e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d9ee:	d004      	beq.n	800d9fa <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800d9f0:	e054      	b.n	800da9c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800d9f2:	f7fe fb5f 	bl	800c0b4 <HAL_RCC_GetPCLK1Freq>
 800d9f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d9f8:	e1ed      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d9fa:	4b84      	ldr	r3, [pc, #528]	@ (800dc0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800da02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800da06:	d107      	bne.n	800da18 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800da08:	f107 0318 	add.w	r3, r7, #24
 800da0c:	4618      	mov	r0, r3
 800da0e:	f000 fa05 	bl	800de1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800da12:	69fb      	ldr	r3, [r7, #28]
 800da14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800da16:	e1de      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800da18:	2300      	movs	r3, #0
 800da1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da1c:	e1db      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800da1e:	4b7b      	ldr	r3, [pc, #492]	@ (800dc0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800da26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800da2a:	d107      	bne.n	800da3c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800da2c:	f107 030c 	add.w	r3, r7, #12
 800da30:	4618      	mov	r0, r3
 800da32:	f000 fb47 	bl	800e0c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800da3a:	e1cc      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800da3c:	2300      	movs	r3, #0
 800da3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da40:	e1c9      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800da42:	4b72      	ldr	r3, [pc, #456]	@ (800dc0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	f003 0304 	and.w	r3, r3, #4
 800da4a:	2b04      	cmp	r3, #4
 800da4c:	d109      	bne.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800da4e:	4b6f      	ldr	r3, [pc, #444]	@ (800dc0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	08db      	lsrs	r3, r3, #3
 800da54:	f003 0303 	and.w	r3, r3, #3
 800da58:	4a6d      	ldr	r2, [pc, #436]	@ (800dc10 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800da5a:	fa22 f303 	lsr.w	r3, r2, r3
 800da5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800da60:	e1b9      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800da62:	2300      	movs	r3, #0
 800da64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da66:	e1b6      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800da68:	4b68      	ldr	r3, [pc, #416]	@ (800dc0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800da70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800da74:	d102      	bne.n	800da7c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800da76:	4b67      	ldr	r3, [pc, #412]	@ (800dc14 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800da78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800da7a:	e1ac      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800da7c:	2300      	movs	r3, #0
 800da7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da80:	e1a9      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800da82:	4b62      	ldr	r3, [pc, #392]	@ (800dc0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800da8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800da8e:	d102      	bne.n	800da96 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800da90:	4b61      	ldr	r3, [pc, #388]	@ (800dc18 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800da92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800da94:	e19f      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800da96:	2300      	movs	r3, #0
 800da98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da9a:	e19c      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800da9c:	2300      	movs	r3, #0
 800da9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800daa0:	e199      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800daa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800daa6:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800daaa:	430b      	orrs	r3, r1
 800daac:	d173      	bne.n	800db96 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800daae:	4b57      	ldr	r3, [pc, #348]	@ (800dc0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dab2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800dab6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800dab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dabe:	d02f      	beq.n	800db20 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800dac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dac2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dac6:	d863      	bhi.n	800db90 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800dac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d004      	beq.n	800dad8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800dace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dad0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dad4:	d012      	beq.n	800dafc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800dad6:	e05b      	b.n	800db90 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dad8:	4b4c      	ldr	r3, [pc, #304]	@ (800dc0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dae0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dae4:	d107      	bne.n	800daf6 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dae6:	f107 0318 	add.w	r3, r7, #24
 800daea:	4618      	mov	r0, r3
 800daec:	f000 f996 	bl	800de1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800daf0:	69bb      	ldr	r3, [r7, #24]
 800daf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800daf4:	e16f      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800daf6:	2300      	movs	r3, #0
 800daf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dafa:	e16c      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dafc:	4b43      	ldr	r3, [pc, #268]	@ (800dc0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800db04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800db08:	d107      	bne.n	800db1a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db0a:	f107 030c 	add.w	r3, r7, #12
 800db0e:	4618      	mov	r0, r3
 800db10:	f000 fad8 	bl	800e0c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800db14:	697b      	ldr	r3, [r7, #20]
 800db16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800db18:	e15d      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800db1a:	2300      	movs	r3, #0
 800db1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db1e:	e15a      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800db20:	4b3a      	ldr	r3, [pc, #232]	@ (800dc0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800db22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800db24:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800db28:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800db2a:	4b38      	ldr	r3, [pc, #224]	@ (800dc0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	f003 0304 	and.w	r3, r3, #4
 800db32:	2b04      	cmp	r3, #4
 800db34:	d10c      	bne.n	800db50 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800db36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d109      	bne.n	800db50 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800db3c:	4b33      	ldr	r3, [pc, #204]	@ (800dc0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	08db      	lsrs	r3, r3, #3
 800db42:	f003 0303 	and.w	r3, r3, #3
 800db46:	4a32      	ldr	r2, [pc, #200]	@ (800dc10 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800db48:	fa22 f303 	lsr.w	r3, r2, r3
 800db4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800db4e:	e01e      	b.n	800db8e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800db50:	4b2e      	ldr	r3, [pc, #184]	@ (800dc0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800db58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800db5c:	d106      	bne.n	800db6c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800db5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800db64:	d102      	bne.n	800db6c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800db66:	4b2b      	ldr	r3, [pc, #172]	@ (800dc14 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800db68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800db6a:	e010      	b.n	800db8e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800db6c:	4b27      	ldr	r3, [pc, #156]	@ (800dc0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800db74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800db78:	d106      	bne.n	800db88 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800db7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800db80:	d102      	bne.n	800db88 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800db82:	4b25      	ldr	r3, [pc, #148]	@ (800dc18 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800db84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800db86:	e002      	b.n	800db8e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800db88:	2300      	movs	r3, #0
 800db8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800db8c:	e123      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800db8e:	e122      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800db90:	2300      	movs	r3, #0
 800db92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db94:	e11f      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800db96:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db9a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800db9e:	430b      	orrs	r3, r1
 800dba0:	d13c      	bne.n	800dc1c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800dba2:	4b1a      	ldr	r3, [pc, #104]	@ (800dc0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dba6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dbaa:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800dbac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d004      	beq.n	800dbbc <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800dbb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dbb8:	d012      	beq.n	800dbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800dbba:	e023      	b.n	800dc04 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800dbbc:	4b13      	ldr	r3, [pc, #76]	@ (800dc0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dbc4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dbc8:	d107      	bne.n	800dbda <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dbca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f000 fbcc 	bl	800e36c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800dbd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dbd8:	e0fd      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dbde:	e0fa      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dbe0:	4b0a      	ldr	r3, [pc, #40]	@ (800dc0c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dbe8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dbec:	d107      	bne.n	800dbfe <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dbee:	f107 0318 	add.w	r3, r7, #24
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f000 f912 	bl	800de1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800dbf8:	6a3b      	ldr	r3, [r7, #32]
 800dbfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dbfc:	e0eb      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc02:	e0e8      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800dc04:	2300      	movs	r3, #0
 800dc06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc08:	e0e5      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800dc0a:	bf00      	nop
 800dc0c:	58024400 	.word	0x58024400
 800dc10:	03d09000 	.word	0x03d09000
 800dc14:	003d0900 	.word	0x003d0900
 800dc18:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800dc1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc20:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800dc24:	430b      	orrs	r3, r1
 800dc26:	f040 8085 	bne.w	800dd34 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800dc2a:	4b6d      	ldr	r3, [pc, #436]	@ (800dde0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dc2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc2e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800dc32:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800dc34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dc3a:	d06b      	beq.n	800dd14 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800dc3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dc42:	d874      	bhi.n	800dd2e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800dc44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc4a:	d056      	beq.n	800dcfa <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800dc4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc52:	d86c      	bhi.n	800dd2e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800dc54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800dc5a:	d03b      	beq.n	800dcd4 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800dc5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc5e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800dc62:	d864      	bhi.n	800dd2e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800dc64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dc6a:	d021      	beq.n	800dcb0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800dc6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dc72:	d85c      	bhi.n	800dd2e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800dc74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d004      	beq.n	800dc84 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800dc7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dc80:	d004      	beq.n	800dc8c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800dc82:	e054      	b.n	800dd2e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800dc84:	f000 f8b4 	bl	800ddf0 <HAL_RCCEx_GetD3PCLK1Freq>
 800dc88:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dc8a:	e0a4      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dc8c:	4b54      	ldr	r3, [pc, #336]	@ (800dde0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dc94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dc98:	d107      	bne.n	800dcaa <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dc9a:	f107 0318 	add.w	r3, r7, #24
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f000 f8bc 	bl	800de1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800dca4:	69fb      	ldr	r3, [r7, #28]
 800dca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dca8:	e095      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dcae:	e092      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dcb0:	4b4b      	ldr	r3, [pc, #300]	@ (800dde0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dcb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dcbc:	d107      	bne.n	800dcce <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dcbe:	f107 030c 	add.w	r3, r7, #12
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f000 f9fe 	bl	800e0c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800dcc8:	693b      	ldr	r3, [r7, #16]
 800dcca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dccc:	e083      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dcd2:	e080      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800dcd4:	4b42      	ldr	r3, [pc, #264]	@ (800dde0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	f003 0304 	and.w	r3, r3, #4
 800dcdc:	2b04      	cmp	r3, #4
 800dcde:	d109      	bne.n	800dcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dce0:	4b3f      	ldr	r3, [pc, #252]	@ (800dde0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	08db      	lsrs	r3, r3, #3
 800dce6:	f003 0303 	and.w	r3, r3, #3
 800dcea:	4a3e      	ldr	r2, [pc, #248]	@ (800dde4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800dcec:	fa22 f303 	lsr.w	r3, r2, r3
 800dcf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dcf2:	e070      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dcf8:	e06d      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800dcfa:	4b39      	ldr	r3, [pc, #228]	@ (800dde0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dd02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dd06:	d102      	bne.n	800dd0e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800dd08:	4b37      	ldr	r3, [pc, #220]	@ (800dde8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800dd0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dd0c:	e063      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd12:	e060      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800dd14:	4b32      	ldr	r3, [pc, #200]	@ (800dde0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dd1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dd20:	d102      	bne.n	800dd28 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800dd22:	4b32      	ldr	r3, [pc, #200]	@ (800ddec <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800dd24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dd26:	e056      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dd28:	2300      	movs	r3, #0
 800dd2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd2c:	e053      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800dd2e:	2300      	movs	r3, #0
 800dd30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd32:	e050      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800dd34:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd38:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800dd3c:	430b      	orrs	r3, r1
 800dd3e:	d148      	bne.n	800ddd2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800dd40:	4b27      	ldr	r3, [pc, #156]	@ (800dde0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dd42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd44:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800dd48:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800dd4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dd50:	d02a      	beq.n	800dda8 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800dd52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dd58:	d838      	bhi.n	800ddcc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800dd5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d004      	beq.n	800dd6a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800dd60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dd66:	d00d      	beq.n	800dd84 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800dd68:	e030      	b.n	800ddcc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800dd6a:	4b1d      	ldr	r3, [pc, #116]	@ (800dde0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dd72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dd76:	d102      	bne.n	800dd7e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800dd78:	4b1c      	ldr	r3, [pc, #112]	@ (800ddec <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800dd7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dd7c:	e02b      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd82:	e028      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800dd84:	4b16      	ldr	r3, [pc, #88]	@ (800dde0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dd8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dd90:	d107      	bne.n	800dda2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dd92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dd96:	4618      	mov	r0, r3
 800dd98:	f000 fae8 	bl	800e36c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800dd9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dda0:	e019      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dda2:	2300      	movs	r3, #0
 800dda4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dda6:	e016      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dda8:	4b0d      	ldr	r3, [pc, #52]	@ (800dde0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ddb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ddb4:	d107      	bne.n	800ddc6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ddb6:	f107 0318 	add.w	r3, r7, #24
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f000 f82e 	bl	800de1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ddc0:	69fb      	ldr	r3, [r7, #28]
 800ddc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ddc4:	e007      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ddca:	e004      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ddd0:	e001      	b.n	800ddd6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800ddd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	3740      	adds	r7, #64	@ 0x40
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}
 800dde0:	58024400 	.word	0x58024400
 800dde4:	03d09000 	.word	0x03d09000
 800dde8:	003d0900 	.word	0x003d0900
 800ddec:	007a1200 	.word	0x007a1200

0800ddf0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ddf4:	f7fe f92e 	bl	800c054 <HAL_RCC_GetHCLKFreq>
 800ddf8:	4602      	mov	r2, r0
 800ddfa:	4b06      	ldr	r3, [pc, #24]	@ (800de14 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ddfc:	6a1b      	ldr	r3, [r3, #32]
 800ddfe:	091b      	lsrs	r3, r3, #4
 800de00:	f003 0307 	and.w	r3, r3, #7
 800de04:	4904      	ldr	r1, [pc, #16]	@ (800de18 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800de06:	5ccb      	ldrb	r3, [r1, r3]
 800de08:	f003 031f 	and.w	r3, r3, #31
 800de0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800de10:	4618      	mov	r0, r3
 800de12:	bd80      	pop	{r7, pc}
 800de14:	58024400 	.word	0x58024400
 800de18:	08015214 	.word	0x08015214

0800de1c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800de1c:	b480      	push	{r7}
 800de1e:	b089      	sub	sp, #36	@ 0x24
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800de24:	4ba1      	ldr	r3, [pc, #644]	@ (800e0ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800de26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de28:	f003 0303 	and.w	r3, r3, #3
 800de2c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800de2e:	4b9f      	ldr	r3, [pc, #636]	@ (800e0ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800de30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de32:	0b1b      	lsrs	r3, r3, #12
 800de34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800de38:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800de3a:	4b9c      	ldr	r3, [pc, #624]	@ (800e0ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800de3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de3e:	091b      	lsrs	r3, r3, #4
 800de40:	f003 0301 	and.w	r3, r3, #1
 800de44:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800de46:	4b99      	ldr	r3, [pc, #612]	@ (800e0ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800de48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de4a:	08db      	lsrs	r3, r3, #3
 800de4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800de50:	693a      	ldr	r2, [r7, #16]
 800de52:	fb02 f303 	mul.w	r3, r2, r3
 800de56:	ee07 3a90 	vmov	s15, r3
 800de5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	2b00      	cmp	r3, #0
 800de66:	f000 8111 	beq.w	800e08c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800de6a:	69bb      	ldr	r3, [r7, #24]
 800de6c:	2b02      	cmp	r3, #2
 800de6e:	f000 8083 	beq.w	800df78 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800de72:	69bb      	ldr	r3, [r7, #24]
 800de74:	2b02      	cmp	r3, #2
 800de76:	f200 80a1 	bhi.w	800dfbc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800de7a:	69bb      	ldr	r3, [r7, #24]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d003      	beq.n	800de88 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800de80:	69bb      	ldr	r3, [r7, #24]
 800de82:	2b01      	cmp	r3, #1
 800de84:	d056      	beq.n	800df34 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800de86:	e099      	b.n	800dfbc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de88:	4b88      	ldr	r3, [pc, #544]	@ (800e0ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	f003 0320 	and.w	r3, r3, #32
 800de90:	2b00      	cmp	r3, #0
 800de92:	d02d      	beq.n	800def0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800de94:	4b85      	ldr	r3, [pc, #532]	@ (800e0ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	08db      	lsrs	r3, r3, #3
 800de9a:	f003 0303 	and.w	r3, r3, #3
 800de9e:	4a84      	ldr	r2, [pc, #528]	@ (800e0b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800dea0:	fa22 f303 	lsr.w	r3, r2, r3
 800dea4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800dea6:	68bb      	ldr	r3, [r7, #8]
 800dea8:	ee07 3a90 	vmov	s15, r3
 800deac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	ee07 3a90 	vmov	s15, r3
 800deb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800deba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800debe:	4b7b      	ldr	r3, [pc, #492]	@ (800e0ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dec6:	ee07 3a90 	vmov	s15, r3
 800deca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dece:	ed97 6a03 	vldr	s12, [r7, #12]
 800ded2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800e0b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ded6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800deda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dede:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800deea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800deee:	e087      	b.n	800e000 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800def0:	697b      	ldr	r3, [r7, #20]
 800def2:	ee07 3a90 	vmov	s15, r3
 800def6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800defa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800e0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800defe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df02:	4b6a      	ldr	r3, [pc, #424]	@ (800e0ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800df04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df0a:	ee07 3a90 	vmov	s15, r3
 800df0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df12:	ed97 6a03 	vldr	s12, [r7, #12]
 800df16:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800e0b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800df1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800df26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800df32:	e065      	b.n	800e000 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800df34:	697b      	ldr	r3, [r7, #20]
 800df36:	ee07 3a90 	vmov	s15, r3
 800df3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df3e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800e0bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800df42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df46:	4b59      	ldr	r3, [pc, #356]	@ (800e0ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800df48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df4e:	ee07 3a90 	vmov	s15, r3
 800df52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df56:	ed97 6a03 	vldr	s12, [r7, #12]
 800df5a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800e0b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800df5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800df6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800df76:	e043      	b.n	800e000 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	ee07 3a90 	vmov	s15, r3
 800df7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df82:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800e0c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800df86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df8a:	4b48      	ldr	r3, [pc, #288]	@ (800e0ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800df8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df92:	ee07 3a90 	vmov	s15, r3
 800df96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800df9e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800e0b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800dfa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dfa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dfaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dfae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dfb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dfba:	e021      	b.n	800e000 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	ee07 3a90 	vmov	s15, r3
 800dfc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfc6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800e0bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800dfca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dfce:	4b37      	ldr	r3, [pc, #220]	@ (800e0ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dfd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfd6:	ee07 3a90 	vmov	s15, r3
 800dfda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dfde:	ed97 6a03 	vldr	s12, [r7, #12]
 800dfe2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800e0b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800dfe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dfea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dfee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dffa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dffe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800e000:	4b2a      	ldr	r3, [pc, #168]	@ (800e0ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e004:	0a5b      	lsrs	r3, r3, #9
 800e006:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e00a:	ee07 3a90 	vmov	s15, r3
 800e00e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e012:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e016:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e01a:	edd7 6a07 	vldr	s13, [r7, #28]
 800e01e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e026:	ee17 2a90 	vmov	r2, s15
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800e02e:	4b1f      	ldr	r3, [pc, #124]	@ (800e0ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e032:	0c1b      	lsrs	r3, r3, #16
 800e034:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e038:	ee07 3a90 	vmov	s15, r3
 800e03c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e040:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e044:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e048:	edd7 6a07 	vldr	s13, [r7, #28]
 800e04c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e050:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e054:	ee17 2a90 	vmov	r2, s15
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800e05c:	4b13      	ldr	r3, [pc, #76]	@ (800e0ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e05e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e060:	0e1b      	lsrs	r3, r3, #24
 800e062:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e066:	ee07 3a90 	vmov	s15, r3
 800e06a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e06e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e072:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e076:	edd7 6a07 	vldr	s13, [r7, #28]
 800e07a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e07e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e082:	ee17 2a90 	vmov	r2, s15
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800e08a:	e008      	b.n	800e09e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2200      	movs	r2, #0
 800e090:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2200      	movs	r2, #0
 800e096:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2200      	movs	r2, #0
 800e09c:	609a      	str	r2, [r3, #8]
}
 800e09e:	bf00      	nop
 800e0a0:	3724      	adds	r7, #36	@ 0x24
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a8:	4770      	bx	lr
 800e0aa:	bf00      	nop
 800e0ac:	58024400 	.word	0x58024400
 800e0b0:	03d09000 	.word	0x03d09000
 800e0b4:	46000000 	.word	0x46000000
 800e0b8:	4c742400 	.word	0x4c742400
 800e0bc:	4a742400 	.word	0x4a742400
 800e0c0:	4af42400 	.word	0x4af42400

0800e0c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800e0c4:	b480      	push	{r7}
 800e0c6:	b089      	sub	sp, #36	@ 0x24
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e0cc:	4ba1      	ldr	r3, [pc, #644]	@ (800e354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e0ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0d0:	f003 0303 	and.w	r3, r3, #3
 800e0d4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800e0d6:	4b9f      	ldr	r3, [pc, #636]	@ (800e354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e0d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0da:	0d1b      	lsrs	r3, r3, #20
 800e0dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e0e0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800e0e2:	4b9c      	ldr	r3, [pc, #624]	@ (800e354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e0e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0e6:	0a1b      	lsrs	r3, r3, #8
 800e0e8:	f003 0301 	and.w	r3, r3, #1
 800e0ec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800e0ee:	4b99      	ldr	r3, [pc, #612]	@ (800e354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e0f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e0f2:	08db      	lsrs	r3, r3, #3
 800e0f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e0f8:	693a      	ldr	r2, [r7, #16]
 800e0fa:	fb02 f303 	mul.w	r3, r2, r3
 800e0fe:	ee07 3a90 	vmov	s15, r3
 800e102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e106:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800e10a:	697b      	ldr	r3, [r7, #20]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	f000 8111 	beq.w	800e334 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800e112:	69bb      	ldr	r3, [r7, #24]
 800e114:	2b02      	cmp	r3, #2
 800e116:	f000 8083 	beq.w	800e220 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800e11a:	69bb      	ldr	r3, [r7, #24]
 800e11c:	2b02      	cmp	r3, #2
 800e11e:	f200 80a1 	bhi.w	800e264 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800e122:	69bb      	ldr	r3, [r7, #24]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d003      	beq.n	800e130 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800e128:	69bb      	ldr	r3, [r7, #24]
 800e12a:	2b01      	cmp	r3, #1
 800e12c:	d056      	beq.n	800e1dc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800e12e:	e099      	b.n	800e264 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e130:	4b88      	ldr	r3, [pc, #544]	@ (800e354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	f003 0320 	and.w	r3, r3, #32
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d02d      	beq.n	800e198 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e13c:	4b85      	ldr	r3, [pc, #532]	@ (800e354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	08db      	lsrs	r3, r3, #3
 800e142:	f003 0303 	and.w	r3, r3, #3
 800e146:	4a84      	ldr	r2, [pc, #528]	@ (800e358 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800e148:	fa22 f303 	lsr.w	r3, r2, r3
 800e14c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	ee07 3a90 	vmov	s15, r3
 800e154:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e158:	697b      	ldr	r3, [r7, #20]
 800e15a:	ee07 3a90 	vmov	s15, r3
 800e15e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e166:	4b7b      	ldr	r3, [pc, #492]	@ (800e354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e16a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e16e:	ee07 3a90 	vmov	s15, r3
 800e172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e176:	ed97 6a03 	vldr	s12, [r7, #12]
 800e17a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800e35c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e17e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e186:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e18a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e18e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e192:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e196:	e087      	b.n	800e2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	ee07 3a90 	vmov	s15, r3
 800e19e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e1a2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800e360 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800e1a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e1aa:	4b6a      	ldr	r3, [pc, #424]	@ (800e354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e1ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1b2:	ee07 3a90 	vmov	s15, r3
 800e1b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e1ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800e1be:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800e35c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e1c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e1c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e1ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e1ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e1d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e1d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e1da:	e065      	b.n	800e2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e1dc:	697b      	ldr	r3, [r7, #20]
 800e1de:	ee07 3a90 	vmov	s15, r3
 800e1e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e1e6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800e364 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e1ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e1ee:	4b59      	ldr	r3, [pc, #356]	@ (800e354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e1f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1f6:	ee07 3a90 	vmov	s15, r3
 800e1fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e1fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800e202:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800e35c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e20a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e20e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e21a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e21e:	e043      	b.n	800e2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e220:	697b      	ldr	r3, [r7, #20]
 800e222:	ee07 3a90 	vmov	s15, r3
 800e226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e22a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800e368 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800e22e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e232:	4b48      	ldr	r3, [pc, #288]	@ (800e354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e23a:	ee07 3a90 	vmov	s15, r3
 800e23e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e242:	ed97 6a03 	vldr	s12, [r7, #12]
 800e246:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800e35c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e24a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e24e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e252:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e25a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e25e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e262:	e021      	b.n	800e2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e264:	697b      	ldr	r3, [r7, #20]
 800e266:	ee07 3a90 	vmov	s15, r3
 800e26a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e26e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800e364 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e276:	4b37      	ldr	r3, [pc, #220]	@ (800e354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e27a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e27e:	ee07 3a90 	vmov	s15, r3
 800e282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e286:	ed97 6a03 	vldr	s12, [r7, #12]
 800e28a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800e35c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e28e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e296:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e29a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e29e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e2a6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800e2a8:	4b2a      	ldr	r3, [pc, #168]	@ (800e354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e2aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2ac:	0a5b      	lsrs	r3, r3, #9
 800e2ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e2b2:	ee07 3a90 	vmov	s15, r3
 800e2b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e2be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e2c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800e2c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e2ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e2ce:	ee17 2a90 	vmov	r2, s15
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800e2d6:	4b1f      	ldr	r3, [pc, #124]	@ (800e354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e2d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2da:	0c1b      	lsrs	r3, r3, #16
 800e2dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e2e0:	ee07 3a90 	vmov	s15, r3
 800e2e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e2ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e2f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800e2f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e2f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e2fc:	ee17 2a90 	vmov	r2, s15
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800e304:	4b13      	ldr	r3, [pc, #76]	@ (800e354 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e308:	0e1b      	lsrs	r3, r3, #24
 800e30a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e30e:	ee07 3a90 	vmov	s15, r3
 800e312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e316:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e31a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e31e:	edd7 6a07 	vldr	s13, [r7, #28]
 800e322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e32a:	ee17 2a90 	vmov	r2, s15
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800e332:	e008      	b.n	800e346 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2200      	movs	r2, #0
 800e338:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2200      	movs	r2, #0
 800e33e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2200      	movs	r2, #0
 800e344:	609a      	str	r2, [r3, #8]
}
 800e346:	bf00      	nop
 800e348:	3724      	adds	r7, #36	@ 0x24
 800e34a:	46bd      	mov	sp, r7
 800e34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e350:	4770      	bx	lr
 800e352:	bf00      	nop
 800e354:	58024400 	.word	0x58024400
 800e358:	03d09000 	.word	0x03d09000
 800e35c:	46000000 	.word	0x46000000
 800e360:	4c742400 	.word	0x4c742400
 800e364:	4a742400 	.word	0x4a742400
 800e368:	4af42400 	.word	0x4af42400

0800e36c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800e36c:	b480      	push	{r7}
 800e36e:	b089      	sub	sp, #36	@ 0x24
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e374:	4ba0      	ldr	r3, [pc, #640]	@ (800e5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e378:	f003 0303 	and.w	r3, r3, #3
 800e37c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800e37e:	4b9e      	ldr	r3, [pc, #632]	@ (800e5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e382:	091b      	lsrs	r3, r3, #4
 800e384:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e388:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800e38a:	4b9b      	ldr	r3, [pc, #620]	@ (800e5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e38c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e38e:	f003 0301 	and.w	r3, r3, #1
 800e392:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e394:	4b98      	ldr	r3, [pc, #608]	@ (800e5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e398:	08db      	lsrs	r3, r3, #3
 800e39a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e39e:	693a      	ldr	r2, [r7, #16]
 800e3a0:	fb02 f303 	mul.w	r3, r2, r3
 800e3a4:	ee07 3a90 	vmov	s15, r3
 800e3a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e3ac:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800e3b0:	697b      	ldr	r3, [r7, #20]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	f000 8111 	beq.w	800e5da <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800e3b8:	69bb      	ldr	r3, [r7, #24]
 800e3ba:	2b02      	cmp	r3, #2
 800e3bc:	f000 8083 	beq.w	800e4c6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800e3c0:	69bb      	ldr	r3, [r7, #24]
 800e3c2:	2b02      	cmp	r3, #2
 800e3c4:	f200 80a1 	bhi.w	800e50a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800e3c8:	69bb      	ldr	r3, [r7, #24]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d003      	beq.n	800e3d6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800e3ce:	69bb      	ldr	r3, [r7, #24]
 800e3d0:	2b01      	cmp	r3, #1
 800e3d2:	d056      	beq.n	800e482 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800e3d4:	e099      	b.n	800e50a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e3d6:	4b88      	ldr	r3, [pc, #544]	@ (800e5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	f003 0320 	and.w	r3, r3, #32
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d02d      	beq.n	800e43e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e3e2:	4b85      	ldr	r3, [pc, #532]	@ (800e5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	08db      	lsrs	r3, r3, #3
 800e3e8:	f003 0303 	and.w	r3, r3, #3
 800e3ec:	4a83      	ldr	r2, [pc, #524]	@ (800e5fc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800e3ee:	fa22 f303 	lsr.w	r3, r2, r3
 800e3f2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	ee07 3a90 	vmov	s15, r3
 800e3fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e3fe:	697b      	ldr	r3, [r7, #20]
 800e400:	ee07 3a90 	vmov	s15, r3
 800e404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e408:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e40c:	4b7a      	ldr	r3, [pc, #488]	@ (800e5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e40e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e414:	ee07 3a90 	vmov	s15, r3
 800e418:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e41c:	ed97 6a03 	vldr	s12, [r7, #12]
 800e420:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800e600 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e424:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e428:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e42c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e430:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e434:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e438:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e43c:	e087      	b.n	800e54e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e43e:	697b      	ldr	r3, [r7, #20]
 800e440:	ee07 3a90 	vmov	s15, r3
 800e444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e448:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800e604 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800e44c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e450:	4b69      	ldr	r3, [pc, #420]	@ (800e5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e458:	ee07 3a90 	vmov	s15, r3
 800e45c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e460:	ed97 6a03 	vldr	s12, [r7, #12]
 800e464:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800e600 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e468:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e46c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e470:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e474:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e47c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e480:	e065      	b.n	800e54e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e482:	697b      	ldr	r3, [r7, #20]
 800e484:	ee07 3a90 	vmov	s15, r3
 800e488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e48c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800e608 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800e490:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e494:	4b58      	ldr	r3, [pc, #352]	@ (800e5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e49c:	ee07 3a90 	vmov	s15, r3
 800e4a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e4a4:	ed97 6a03 	vldr	s12, [r7, #12]
 800e4a8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800e600 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e4ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e4b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e4b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e4b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e4bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e4c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e4c4:	e043      	b.n	800e54e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e4c6:	697b      	ldr	r3, [r7, #20]
 800e4c8:	ee07 3a90 	vmov	s15, r3
 800e4cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e4d0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800e60c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800e4d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e4d8:	4b47      	ldr	r3, [pc, #284]	@ (800e5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e4da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e4dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4e0:	ee07 3a90 	vmov	s15, r3
 800e4e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e4e8:	ed97 6a03 	vldr	s12, [r7, #12]
 800e4ec:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800e600 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e4f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e4f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e4f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e4fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e500:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e504:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e508:	e021      	b.n	800e54e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	ee07 3a90 	vmov	s15, r3
 800e510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e514:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800e604 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800e518:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e51c:	4b36      	ldr	r3, [pc, #216]	@ (800e5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e51e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e524:	ee07 3a90 	vmov	s15, r3
 800e528:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e52c:	ed97 6a03 	vldr	s12, [r7, #12]
 800e530:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800e600 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e534:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e538:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e53c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e540:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e544:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e548:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e54c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800e54e:	4b2a      	ldr	r3, [pc, #168]	@ (800e5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e552:	0a5b      	lsrs	r3, r3, #9
 800e554:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e558:	ee07 3a90 	vmov	s15, r3
 800e55c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e560:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e564:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e568:	edd7 6a07 	vldr	s13, [r7, #28]
 800e56c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e574:	ee17 2a90 	vmov	r2, s15
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800e57c:	4b1e      	ldr	r3, [pc, #120]	@ (800e5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e57e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e580:	0c1b      	lsrs	r3, r3, #16
 800e582:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e586:	ee07 3a90 	vmov	s15, r3
 800e58a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e58e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e592:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e596:	edd7 6a07 	vldr	s13, [r7, #28]
 800e59a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e59e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e5a2:	ee17 2a90 	vmov	r2, s15
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800e5aa:	4b13      	ldr	r3, [pc, #76]	@ (800e5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e5ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e5ae:	0e1b      	lsrs	r3, r3, #24
 800e5b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e5b4:	ee07 3a90 	vmov	s15, r3
 800e5b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e5c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e5c4:	edd7 6a07 	vldr	s13, [r7, #28]
 800e5c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e5cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e5d0:	ee17 2a90 	vmov	r2, s15
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800e5d8:	e008      	b.n	800e5ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2200      	movs	r2, #0
 800e5de:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	609a      	str	r2, [r3, #8]
}
 800e5ec:	bf00      	nop
 800e5ee:	3724      	adds	r7, #36	@ 0x24
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f6:	4770      	bx	lr
 800e5f8:	58024400 	.word	0x58024400
 800e5fc:	03d09000 	.word	0x03d09000
 800e600:	46000000 	.word	0x46000000
 800e604:	4c742400 	.word	0x4c742400
 800e608:	4a742400 	.word	0x4a742400
 800e60c:	4af42400 	.word	0x4af42400

0800e610 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b084      	sub	sp, #16
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
 800e618:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e61a:	2300      	movs	r3, #0
 800e61c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e61e:	4b53      	ldr	r3, [pc, #332]	@ (800e76c <RCCEx_PLL2_Config+0x15c>)
 800e620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e622:	f003 0303 	and.w	r3, r3, #3
 800e626:	2b03      	cmp	r3, #3
 800e628:	d101      	bne.n	800e62e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800e62a:	2301      	movs	r3, #1
 800e62c:	e099      	b.n	800e762 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800e62e:	4b4f      	ldr	r3, [pc, #316]	@ (800e76c <RCCEx_PLL2_Config+0x15c>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	4a4e      	ldr	r2, [pc, #312]	@ (800e76c <RCCEx_PLL2_Config+0x15c>)
 800e634:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e638:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e63a:	f7f6 fb51 	bl	8004ce0 <HAL_GetTick>
 800e63e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e640:	e008      	b.n	800e654 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e642:	f7f6 fb4d 	bl	8004ce0 <HAL_GetTick>
 800e646:	4602      	mov	r2, r0
 800e648:	68bb      	ldr	r3, [r7, #8]
 800e64a:	1ad3      	subs	r3, r2, r3
 800e64c:	2b02      	cmp	r3, #2
 800e64e:	d901      	bls.n	800e654 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e650:	2303      	movs	r3, #3
 800e652:	e086      	b.n	800e762 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e654:	4b45      	ldr	r3, [pc, #276]	@ (800e76c <RCCEx_PLL2_Config+0x15c>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d1f0      	bne.n	800e642 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800e660:	4b42      	ldr	r3, [pc, #264]	@ (800e76c <RCCEx_PLL2_Config+0x15c>)
 800e662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e664:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	031b      	lsls	r3, r3, #12
 800e66e:	493f      	ldr	r1, [pc, #252]	@ (800e76c <RCCEx_PLL2_Config+0x15c>)
 800e670:	4313      	orrs	r3, r2
 800e672:	628b      	str	r3, [r1, #40]	@ 0x28
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	685b      	ldr	r3, [r3, #4]
 800e678:	3b01      	subs	r3, #1
 800e67a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	689b      	ldr	r3, [r3, #8]
 800e682:	3b01      	subs	r3, #1
 800e684:	025b      	lsls	r3, r3, #9
 800e686:	b29b      	uxth	r3, r3
 800e688:	431a      	orrs	r2, r3
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	68db      	ldr	r3, [r3, #12]
 800e68e:	3b01      	subs	r3, #1
 800e690:	041b      	lsls	r3, r3, #16
 800e692:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e696:	431a      	orrs	r2, r3
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	691b      	ldr	r3, [r3, #16]
 800e69c:	3b01      	subs	r3, #1
 800e69e:	061b      	lsls	r3, r3, #24
 800e6a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e6a4:	4931      	ldr	r1, [pc, #196]	@ (800e76c <RCCEx_PLL2_Config+0x15c>)
 800e6a6:	4313      	orrs	r3, r2
 800e6a8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800e6aa:	4b30      	ldr	r3, [pc, #192]	@ (800e76c <RCCEx_PLL2_Config+0x15c>)
 800e6ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	695b      	ldr	r3, [r3, #20]
 800e6b6:	492d      	ldr	r1, [pc, #180]	@ (800e76c <RCCEx_PLL2_Config+0x15c>)
 800e6b8:	4313      	orrs	r3, r2
 800e6ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800e6bc:	4b2b      	ldr	r3, [pc, #172]	@ (800e76c <RCCEx_PLL2_Config+0x15c>)
 800e6be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6c0:	f023 0220 	bic.w	r2, r3, #32
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	699b      	ldr	r3, [r3, #24]
 800e6c8:	4928      	ldr	r1, [pc, #160]	@ (800e76c <RCCEx_PLL2_Config+0x15c>)
 800e6ca:	4313      	orrs	r3, r2
 800e6cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800e6ce:	4b27      	ldr	r3, [pc, #156]	@ (800e76c <RCCEx_PLL2_Config+0x15c>)
 800e6d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6d2:	4a26      	ldr	r2, [pc, #152]	@ (800e76c <RCCEx_PLL2_Config+0x15c>)
 800e6d4:	f023 0310 	bic.w	r3, r3, #16
 800e6d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e6da:	4b24      	ldr	r3, [pc, #144]	@ (800e76c <RCCEx_PLL2_Config+0x15c>)
 800e6dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e6de:	4b24      	ldr	r3, [pc, #144]	@ (800e770 <RCCEx_PLL2_Config+0x160>)
 800e6e0:	4013      	ands	r3, r2
 800e6e2:	687a      	ldr	r2, [r7, #4]
 800e6e4:	69d2      	ldr	r2, [r2, #28]
 800e6e6:	00d2      	lsls	r2, r2, #3
 800e6e8:	4920      	ldr	r1, [pc, #128]	@ (800e76c <RCCEx_PLL2_Config+0x15c>)
 800e6ea:	4313      	orrs	r3, r2
 800e6ec:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800e6ee:	4b1f      	ldr	r3, [pc, #124]	@ (800e76c <RCCEx_PLL2_Config+0x15c>)
 800e6f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6f2:	4a1e      	ldr	r2, [pc, #120]	@ (800e76c <RCCEx_PLL2_Config+0x15c>)
 800e6f4:	f043 0310 	orr.w	r3, r3, #16
 800e6f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d106      	bne.n	800e70e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e700:	4b1a      	ldr	r3, [pc, #104]	@ (800e76c <RCCEx_PLL2_Config+0x15c>)
 800e702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e704:	4a19      	ldr	r2, [pc, #100]	@ (800e76c <RCCEx_PLL2_Config+0x15c>)
 800e706:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e70a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e70c:	e00f      	b.n	800e72e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	2b01      	cmp	r3, #1
 800e712:	d106      	bne.n	800e722 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800e714:	4b15      	ldr	r3, [pc, #84]	@ (800e76c <RCCEx_PLL2_Config+0x15c>)
 800e716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e718:	4a14      	ldr	r2, [pc, #80]	@ (800e76c <RCCEx_PLL2_Config+0x15c>)
 800e71a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e71e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e720:	e005      	b.n	800e72e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e722:	4b12      	ldr	r3, [pc, #72]	@ (800e76c <RCCEx_PLL2_Config+0x15c>)
 800e724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e726:	4a11      	ldr	r2, [pc, #68]	@ (800e76c <RCCEx_PLL2_Config+0x15c>)
 800e728:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e72c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800e72e:	4b0f      	ldr	r3, [pc, #60]	@ (800e76c <RCCEx_PLL2_Config+0x15c>)
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	4a0e      	ldr	r2, [pc, #56]	@ (800e76c <RCCEx_PLL2_Config+0x15c>)
 800e734:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e738:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e73a:	f7f6 fad1 	bl	8004ce0 <HAL_GetTick>
 800e73e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e740:	e008      	b.n	800e754 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e742:	f7f6 facd 	bl	8004ce0 <HAL_GetTick>
 800e746:	4602      	mov	r2, r0
 800e748:	68bb      	ldr	r3, [r7, #8]
 800e74a:	1ad3      	subs	r3, r2, r3
 800e74c:	2b02      	cmp	r3, #2
 800e74e:	d901      	bls.n	800e754 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e750:	2303      	movs	r3, #3
 800e752:	e006      	b.n	800e762 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e754:	4b05      	ldr	r3, [pc, #20]	@ (800e76c <RCCEx_PLL2_Config+0x15c>)
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d0f0      	beq.n	800e742 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800e760:	7bfb      	ldrb	r3, [r7, #15]
}
 800e762:	4618      	mov	r0, r3
 800e764:	3710      	adds	r7, #16
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}
 800e76a:	bf00      	nop
 800e76c:	58024400 	.word	0x58024400
 800e770:	ffff0007 	.word	0xffff0007

0800e774 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b084      	sub	sp, #16
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
 800e77c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e77e:	2300      	movs	r3, #0
 800e780:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e782:	4b53      	ldr	r3, [pc, #332]	@ (800e8d0 <RCCEx_PLL3_Config+0x15c>)
 800e784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e786:	f003 0303 	and.w	r3, r3, #3
 800e78a:	2b03      	cmp	r3, #3
 800e78c:	d101      	bne.n	800e792 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800e78e:	2301      	movs	r3, #1
 800e790:	e099      	b.n	800e8c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800e792:	4b4f      	ldr	r3, [pc, #316]	@ (800e8d0 <RCCEx_PLL3_Config+0x15c>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	4a4e      	ldr	r2, [pc, #312]	@ (800e8d0 <RCCEx_PLL3_Config+0x15c>)
 800e798:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e79c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e79e:	f7f6 fa9f 	bl	8004ce0 <HAL_GetTick>
 800e7a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e7a4:	e008      	b.n	800e7b8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e7a6:	f7f6 fa9b 	bl	8004ce0 <HAL_GetTick>
 800e7aa:	4602      	mov	r2, r0
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	1ad3      	subs	r3, r2, r3
 800e7b0:	2b02      	cmp	r3, #2
 800e7b2:	d901      	bls.n	800e7b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e7b4:	2303      	movs	r3, #3
 800e7b6:	e086      	b.n	800e8c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e7b8:	4b45      	ldr	r3, [pc, #276]	@ (800e8d0 <RCCEx_PLL3_Config+0x15c>)
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d1f0      	bne.n	800e7a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800e7c4:	4b42      	ldr	r3, [pc, #264]	@ (800e8d0 <RCCEx_PLL3_Config+0x15c>)
 800e7c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7c8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	051b      	lsls	r3, r3, #20
 800e7d2:	493f      	ldr	r1, [pc, #252]	@ (800e8d0 <RCCEx_PLL3_Config+0x15c>)
 800e7d4:	4313      	orrs	r3, r2
 800e7d6:	628b      	str	r3, [r1, #40]	@ 0x28
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	685b      	ldr	r3, [r3, #4]
 800e7dc:	3b01      	subs	r3, #1
 800e7de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	689b      	ldr	r3, [r3, #8]
 800e7e6:	3b01      	subs	r3, #1
 800e7e8:	025b      	lsls	r3, r3, #9
 800e7ea:	b29b      	uxth	r3, r3
 800e7ec:	431a      	orrs	r2, r3
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	68db      	ldr	r3, [r3, #12]
 800e7f2:	3b01      	subs	r3, #1
 800e7f4:	041b      	lsls	r3, r3, #16
 800e7f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e7fa:	431a      	orrs	r2, r3
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	691b      	ldr	r3, [r3, #16]
 800e800:	3b01      	subs	r3, #1
 800e802:	061b      	lsls	r3, r3, #24
 800e804:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e808:	4931      	ldr	r1, [pc, #196]	@ (800e8d0 <RCCEx_PLL3_Config+0x15c>)
 800e80a:	4313      	orrs	r3, r2
 800e80c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e80e:	4b30      	ldr	r3, [pc, #192]	@ (800e8d0 <RCCEx_PLL3_Config+0x15c>)
 800e810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e812:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	695b      	ldr	r3, [r3, #20]
 800e81a:	492d      	ldr	r1, [pc, #180]	@ (800e8d0 <RCCEx_PLL3_Config+0x15c>)
 800e81c:	4313      	orrs	r3, r2
 800e81e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e820:	4b2b      	ldr	r3, [pc, #172]	@ (800e8d0 <RCCEx_PLL3_Config+0x15c>)
 800e822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e824:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	699b      	ldr	r3, [r3, #24]
 800e82c:	4928      	ldr	r1, [pc, #160]	@ (800e8d0 <RCCEx_PLL3_Config+0x15c>)
 800e82e:	4313      	orrs	r3, r2
 800e830:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e832:	4b27      	ldr	r3, [pc, #156]	@ (800e8d0 <RCCEx_PLL3_Config+0x15c>)
 800e834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e836:	4a26      	ldr	r2, [pc, #152]	@ (800e8d0 <RCCEx_PLL3_Config+0x15c>)
 800e838:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e83c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e83e:	4b24      	ldr	r3, [pc, #144]	@ (800e8d0 <RCCEx_PLL3_Config+0x15c>)
 800e840:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e842:	4b24      	ldr	r3, [pc, #144]	@ (800e8d4 <RCCEx_PLL3_Config+0x160>)
 800e844:	4013      	ands	r3, r2
 800e846:	687a      	ldr	r2, [r7, #4]
 800e848:	69d2      	ldr	r2, [r2, #28]
 800e84a:	00d2      	lsls	r2, r2, #3
 800e84c:	4920      	ldr	r1, [pc, #128]	@ (800e8d0 <RCCEx_PLL3_Config+0x15c>)
 800e84e:	4313      	orrs	r3, r2
 800e850:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e852:	4b1f      	ldr	r3, [pc, #124]	@ (800e8d0 <RCCEx_PLL3_Config+0x15c>)
 800e854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e856:	4a1e      	ldr	r2, [pc, #120]	@ (800e8d0 <RCCEx_PLL3_Config+0x15c>)
 800e858:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e85c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e85e:	683b      	ldr	r3, [r7, #0]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d106      	bne.n	800e872 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e864:	4b1a      	ldr	r3, [pc, #104]	@ (800e8d0 <RCCEx_PLL3_Config+0x15c>)
 800e866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e868:	4a19      	ldr	r2, [pc, #100]	@ (800e8d0 <RCCEx_PLL3_Config+0x15c>)
 800e86a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800e86e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e870:	e00f      	b.n	800e892 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	2b01      	cmp	r3, #1
 800e876:	d106      	bne.n	800e886 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e878:	4b15      	ldr	r3, [pc, #84]	@ (800e8d0 <RCCEx_PLL3_Config+0x15c>)
 800e87a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e87c:	4a14      	ldr	r2, [pc, #80]	@ (800e8d0 <RCCEx_PLL3_Config+0x15c>)
 800e87e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e882:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e884:	e005      	b.n	800e892 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e886:	4b12      	ldr	r3, [pc, #72]	@ (800e8d0 <RCCEx_PLL3_Config+0x15c>)
 800e888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e88a:	4a11      	ldr	r2, [pc, #68]	@ (800e8d0 <RCCEx_PLL3_Config+0x15c>)
 800e88c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e890:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e892:	4b0f      	ldr	r3, [pc, #60]	@ (800e8d0 <RCCEx_PLL3_Config+0x15c>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	4a0e      	ldr	r2, [pc, #56]	@ (800e8d0 <RCCEx_PLL3_Config+0x15c>)
 800e898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e89c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e89e:	f7f6 fa1f 	bl	8004ce0 <HAL_GetTick>
 800e8a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e8a4:	e008      	b.n	800e8b8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e8a6:	f7f6 fa1b 	bl	8004ce0 <HAL_GetTick>
 800e8aa:	4602      	mov	r2, r0
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	1ad3      	subs	r3, r2, r3
 800e8b0:	2b02      	cmp	r3, #2
 800e8b2:	d901      	bls.n	800e8b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e8b4:	2303      	movs	r3, #3
 800e8b6:	e006      	b.n	800e8c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e8b8:	4b05      	ldr	r3, [pc, #20]	@ (800e8d0 <RCCEx_PLL3_Config+0x15c>)
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d0f0      	beq.n	800e8a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e8c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	3710      	adds	r7, #16
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bd80      	pop	{r7, pc}
 800e8ce:	bf00      	nop
 800e8d0:	58024400 	.word	0x58024400
 800e8d4:	ffff0007 	.word	0xffff0007

0800e8d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b082      	sub	sp, #8
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d101      	bne.n	800e8ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e8e6:	2301      	movs	r3, #1
 800e8e8:	e049      	b.n	800e97e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e8f0:	b2db      	uxtb	r3, r3
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d106      	bne.n	800e904 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e8fe:	6878      	ldr	r0, [r7, #4]
 800e900:	f7f5 fef2 	bl	80046e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2202      	movs	r2, #2
 800e908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681a      	ldr	r2, [r3, #0]
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	3304      	adds	r3, #4
 800e914:	4619      	mov	r1, r3
 800e916:	4610      	mov	r0, r2
 800e918:	f000 fdbe 	bl	800f498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2201      	movs	r2, #1
 800e920:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2201      	movs	r2, #1
 800e928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2201      	movs	r2, #1
 800e930:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2201      	movs	r2, #1
 800e938:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2201      	movs	r2, #1
 800e940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2201      	movs	r2, #1
 800e948:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2201      	movs	r2, #1
 800e950:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2201      	movs	r2, #1
 800e958:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2201      	movs	r2, #1
 800e960:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2201      	movs	r2, #1
 800e968:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2201      	movs	r2, #1
 800e970:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2201      	movs	r2, #1
 800e978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e97c:	2300      	movs	r3, #0
}
 800e97e:	4618      	mov	r0, r3
 800e980:	3708      	adds	r7, #8
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}
	...

0800e988 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e988:	b480      	push	{r7}
 800e98a:	b085      	sub	sp, #20
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e996:	b2db      	uxtb	r3, r3
 800e998:	2b01      	cmp	r3, #1
 800e99a:	d001      	beq.n	800e9a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800e99c:	2301      	movs	r3, #1
 800e99e:	e056      	b.n	800ea4e <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2202      	movs	r2, #2
 800e9a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	4a2b      	ldr	r2, [pc, #172]	@ (800ea5c <HAL_TIM_Base_Start+0xd4>)
 800e9ae:	4293      	cmp	r3, r2
 800e9b0:	d02c      	beq.n	800ea0c <HAL_TIM_Base_Start+0x84>
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e9ba:	d027      	beq.n	800ea0c <HAL_TIM_Base_Start+0x84>
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	4a27      	ldr	r2, [pc, #156]	@ (800ea60 <HAL_TIM_Base_Start+0xd8>)
 800e9c2:	4293      	cmp	r3, r2
 800e9c4:	d022      	beq.n	800ea0c <HAL_TIM_Base_Start+0x84>
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	4a26      	ldr	r2, [pc, #152]	@ (800ea64 <HAL_TIM_Base_Start+0xdc>)
 800e9cc:	4293      	cmp	r3, r2
 800e9ce:	d01d      	beq.n	800ea0c <HAL_TIM_Base_Start+0x84>
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	4a24      	ldr	r2, [pc, #144]	@ (800ea68 <HAL_TIM_Base_Start+0xe0>)
 800e9d6:	4293      	cmp	r3, r2
 800e9d8:	d018      	beq.n	800ea0c <HAL_TIM_Base_Start+0x84>
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	4a23      	ldr	r2, [pc, #140]	@ (800ea6c <HAL_TIM_Base_Start+0xe4>)
 800e9e0:	4293      	cmp	r3, r2
 800e9e2:	d013      	beq.n	800ea0c <HAL_TIM_Base_Start+0x84>
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	4a21      	ldr	r2, [pc, #132]	@ (800ea70 <HAL_TIM_Base_Start+0xe8>)
 800e9ea:	4293      	cmp	r3, r2
 800e9ec:	d00e      	beq.n	800ea0c <HAL_TIM_Base_Start+0x84>
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	4a20      	ldr	r2, [pc, #128]	@ (800ea74 <HAL_TIM_Base_Start+0xec>)
 800e9f4:	4293      	cmp	r3, r2
 800e9f6:	d009      	beq.n	800ea0c <HAL_TIM_Base_Start+0x84>
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	4a1e      	ldr	r2, [pc, #120]	@ (800ea78 <HAL_TIM_Base_Start+0xf0>)
 800e9fe:	4293      	cmp	r3, r2
 800ea00:	d004      	beq.n	800ea0c <HAL_TIM_Base_Start+0x84>
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	4a1d      	ldr	r2, [pc, #116]	@ (800ea7c <HAL_TIM_Base_Start+0xf4>)
 800ea08:	4293      	cmp	r3, r2
 800ea0a:	d115      	bne.n	800ea38 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	689a      	ldr	r2, [r3, #8]
 800ea12:	4b1b      	ldr	r3, [pc, #108]	@ (800ea80 <HAL_TIM_Base_Start+0xf8>)
 800ea14:	4013      	ands	r3, r2
 800ea16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	2b06      	cmp	r3, #6
 800ea1c:	d015      	beq.n	800ea4a <HAL_TIM_Base_Start+0xc2>
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ea24:	d011      	beq.n	800ea4a <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	681a      	ldr	r2, [r3, #0]
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	f042 0201 	orr.w	r2, r2, #1
 800ea34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea36:	e008      	b.n	800ea4a <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	681a      	ldr	r2, [r3, #0]
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	f042 0201 	orr.w	r2, r2, #1
 800ea46:	601a      	str	r2, [r3, #0]
 800ea48:	e000      	b.n	800ea4c <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ea4c:	2300      	movs	r3, #0
}
 800ea4e:	4618      	mov	r0, r3
 800ea50:	3714      	adds	r7, #20
 800ea52:	46bd      	mov	sp, r7
 800ea54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea58:	4770      	bx	lr
 800ea5a:	bf00      	nop
 800ea5c:	40010000 	.word	0x40010000
 800ea60:	40000400 	.word	0x40000400
 800ea64:	40000800 	.word	0x40000800
 800ea68:	40000c00 	.word	0x40000c00
 800ea6c:	40010400 	.word	0x40010400
 800ea70:	40001800 	.word	0x40001800
 800ea74:	40014000 	.word	0x40014000
 800ea78:	4000e000 	.word	0x4000e000
 800ea7c:	4000e400 	.word	0x4000e400
 800ea80:	00010007 	.word	0x00010007

0800ea84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b082      	sub	sp, #8
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d101      	bne.n	800ea96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ea92:	2301      	movs	r3, #1
 800ea94:	e049      	b.n	800eb2a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ea9c:	b2db      	uxtb	r3, r3
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d106      	bne.n	800eab0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f7f5 fd4c 	bl	8004548 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2202      	movs	r2, #2
 800eab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681a      	ldr	r2, [r3, #0]
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	3304      	adds	r3, #4
 800eac0:	4619      	mov	r1, r3
 800eac2:	4610      	mov	r0, r2
 800eac4:	f000 fce8 	bl	800f498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2201      	movs	r2, #1
 800eacc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2201      	movs	r2, #1
 800ead4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2201      	movs	r2, #1
 800eadc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2201      	movs	r2, #1
 800eae4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2201      	movs	r2, #1
 800eaec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2201      	movs	r2, #1
 800eaf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2201      	movs	r2, #1
 800eafc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2201      	movs	r2, #1
 800eb04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2201      	movs	r2, #1
 800eb0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2201      	movs	r2, #1
 800eb14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2201      	movs	r2, #1
 800eb1c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2201      	movs	r2, #1
 800eb24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800eb28:	2300      	movs	r3, #0
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3708      	adds	r7, #8
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}
	...

0800eb34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b084      	sub	sp, #16
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
 800eb3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d109      	bne.n	800eb58 <HAL_TIM_PWM_Start+0x24>
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800eb4a:	b2db      	uxtb	r3, r3
 800eb4c:	2b01      	cmp	r3, #1
 800eb4e:	bf14      	ite	ne
 800eb50:	2301      	movne	r3, #1
 800eb52:	2300      	moveq	r3, #0
 800eb54:	b2db      	uxtb	r3, r3
 800eb56:	e03c      	b.n	800ebd2 <HAL_TIM_PWM_Start+0x9e>
 800eb58:	683b      	ldr	r3, [r7, #0]
 800eb5a:	2b04      	cmp	r3, #4
 800eb5c:	d109      	bne.n	800eb72 <HAL_TIM_PWM_Start+0x3e>
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800eb64:	b2db      	uxtb	r3, r3
 800eb66:	2b01      	cmp	r3, #1
 800eb68:	bf14      	ite	ne
 800eb6a:	2301      	movne	r3, #1
 800eb6c:	2300      	moveq	r3, #0
 800eb6e:	b2db      	uxtb	r3, r3
 800eb70:	e02f      	b.n	800ebd2 <HAL_TIM_PWM_Start+0x9e>
 800eb72:	683b      	ldr	r3, [r7, #0]
 800eb74:	2b08      	cmp	r3, #8
 800eb76:	d109      	bne.n	800eb8c <HAL_TIM_PWM_Start+0x58>
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800eb7e:	b2db      	uxtb	r3, r3
 800eb80:	2b01      	cmp	r3, #1
 800eb82:	bf14      	ite	ne
 800eb84:	2301      	movne	r3, #1
 800eb86:	2300      	moveq	r3, #0
 800eb88:	b2db      	uxtb	r3, r3
 800eb8a:	e022      	b.n	800ebd2 <HAL_TIM_PWM_Start+0x9e>
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	2b0c      	cmp	r3, #12
 800eb90:	d109      	bne.n	800eba6 <HAL_TIM_PWM_Start+0x72>
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800eb98:	b2db      	uxtb	r3, r3
 800eb9a:	2b01      	cmp	r3, #1
 800eb9c:	bf14      	ite	ne
 800eb9e:	2301      	movne	r3, #1
 800eba0:	2300      	moveq	r3, #0
 800eba2:	b2db      	uxtb	r3, r3
 800eba4:	e015      	b.n	800ebd2 <HAL_TIM_PWM_Start+0x9e>
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	2b10      	cmp	r3, #16
 800ebaa:	d109      	bne.n	800ebc0 <HAL_TIM_PWM_Start+0x8c>
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ebb2:	b2db      	uxtb	r3, r3
 800ebb4:	2b01      	cmp	r3, #1
 800ebb6:	bf14      	ite	ne
 800ebb8:	2301      	movne	r3, #1
 800ebba:	2300      	moveq	r3, #0
 800ebbc:	b2db      	uxtb	r3, r3
 800ebbe:	e008      	b.n	800ebd2 <HAL_TIM_PWM_Start+0x9e>
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ebc6:	b2db      	uxtb	r3, r3
 800ebc8:	2b01      	cmp	r3, #1
 800ebca:	bf14      	ite	ne
 800ebcc:	2301      	movne	r3, #1
 800ebce:	2300      	moveq	r3, #0
 800ebd0:	b2db      	uxtb	r3, r3
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d001      	beq.n	800ebda <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ebd6:	2301      	movs	r3, #1
 800ebd8:	e0ab      	b.n	800ed32 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d104      	bne.n	800ebea <HAL_TIM_PWM_Start+0xb6>
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2202      	movs	r2, #2
 800ebe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ebe8:	e023      	b.n	800ec32 <HAL_TIM_PWM_Start+0xfe>
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	2b04      	cmp	r3, #4
 800ebee:	d104      	bne.n	800ebfa <HAL_TIM_PWM_Start+0xc6>
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2202      	movs	r2, #2
 800ebf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ebf8:	e01b      	b.n	800ec32 <HAL_TIM_PWM_Start+0xfe>
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	2b08      	cmp	r3, #8
 800ebfe:	d104      	bne.n	800ec0a <HAL_TIM_PWM_Start+0xd6>
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	2202      	movs	r2, #2
 800ec04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ec08:	e013      	b.n	800ec32 <HAL_TIM_PWM_Start+0xfe>
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	2b0c      	cmp	r3, #12
 800ec0e:	d104      	bne.n	800ec1a <HAL_TIM_PWM_Start+0xe6>
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2202      	movs	r2, #2
 800ec14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ec18:	e00b      	b.n	800ec32 <HAL_TIM_PWM_Start+0xfe>
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	2b10      	cmp	r3, #16
 800ec1e:	d104      	bne.n	800ec2a <HAL_TIM_PWM_Start+0xf6>
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2202      	movs	r2, #2
 800ec24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ec28:	e003      	b.n	800ec32 <HAL_TIM_PWM_Start+0xfe>
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	2202      	movs	r2, #2
 800ec2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	2201      	movs	r2, #1
 800ec38:	6839      	ldr	r1, [r7, #0]
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f001 f97c 	bl	800ff38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	4a3d      	ldr	r2, [pc, #244]	@ (800ed3c <HAL_TIM_PWM_Start+0x208>)
 800ec46:	4293      	cmp	r3, r2
 800ec48:	d013      	beq.n	800ec72 <HAL_TIM_PWM_Start+0x13e>
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	4a3c      	ldr	r2, [pc, #240]	@ (800ed40 <HAL_TIM_PWM_Start+0x20c>)
 800ec50:	4293      	cmp	r3, r2
 800ec52:	d00e      	beq.n	800ec72 <HAL_TIM_PWM_Start+0x13e>
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	4a3a      	ldr	r2, [pc, #232]	@ (800ed44 <HAL_TIM_PWM_Start+0x210>)
 800ec5a:	4293      	cmp	r3, r2
 800ec5c:	d009      	beq.n	800ec72 <HAL_TIM_PWM_Start+0x13e>
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	4a39      	ldr	r2, [pc, #228]	@ (800ed48 <HAL_TIM_PWM_Start+0x214>)
 800ec64:	4293      	cmp	r3, r2
 800ec66:	d004      	beq.n	800ec72 <HAL_TIM_PWM_Start+0x13e>
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	4a37      	ldr	r2, [pc, #220]	@ (800ed4c <HAL_TIM_PWM_Start+0x218>)
 800ec6e:	4293      	cmp	r3, r2
 800ec70:	d101      	bne.n	800ec76 <HAL_TIM_PWM_Start+0x142>
 800ec72:	2301      	movs	r3, #1
 800ec74:	e000      	b.n	800ec78 <HAL_TIM_PWM_Start+0x144>
 800ec76:	2300      	movs	r3, #0
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d007      	beq.n	800ec8c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ec8a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	4a2a      	ldr	r2, [pc, #168]	@ (800ed3c <HAL_TIM_PWM_Start+0x208>)
 800ec92:	4293      	cmp	r3, r2
 800ec94:	d02c      	beq.n	800ecf0 <HAL_TIM_PWM_Start+0x1bc>
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ec9e:	d027      	beq.n	800ecf0 <HAL_TIM_PWM_Start+0x1bc>
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	4a2a      	ldr	r2, [pc, #168]	@ (800ed50 <HAL_TIM_PWM_Start+0x21c>)
 800eca6:	4293      	cmp	r3, r2
 800eca8:	d022      	beq.n	800ecf0 <HAL_TIM_PWM_Start+0x1bc>
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	4a29      	ldr	r2, [pc, #164]	@ (800ed54 <HAL_TIM_PWM_Start+0x220>)
 800ecb0:	4293      	cmp	r3, r2
 800ecb2:	d01d      	beq.n	800ecf0 <HAL_TIM_PWM_Start+0x1bc>
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	4a27      	ldr	r2, [pc, #156]	@ (800ed58 <HAL_TIM_PWM_Start+0x224>)
 800ecba:	4293      	cmp	r3, r2
 800ecbc:	d018      	beq.n	800ecf0 <HAL_TIM_PWM_Start+0x1bc>
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	4a1f      	ldr	r2, [pc, #124]	@ (800ed40 <HAL_TIM_PWM_Start+0x20c>)
 800ecc4:	4293      	cmp	r3, r2
 800ecc6:	d013      	beq.n	800ecf0 <HAL_TIM_PWM_Start+0x1bc>
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	4a23      	ldr	r2, [pc, #140]	@ (800ed5c <HAL_TIM_PWM_Start+0x228>)
 800ecce:	4293      	cmp	r3, r2
 800ecd0:	d00e      	beq.n	800ecf0 <HAL_TIM_PWM_Start+0x1bc>
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	4a1b      	ldr	r2, [pc, #108]	@ (800ed44 <HAL_TIM_PWM_Start+0x210>)
 800ecd8:	4293      	cmp	r3, r2
 800ecda:	d009      	beq.n	800ecf0 <HAL_TIM_PWM_Start+0x1bc>
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	4a1f      	ldr	r2, [pc, #124]	@ (800ed60 <HAL_TIM_PWM_Start+0x22c>)
 800ece2:	4293      	cmp	r3, r2
 800ece4:	d004      	beq.n	800ecf0 <HAL_TIM_PWM_Start+0x1bc>
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	4a1e      	ldr	r2, [pc, #120]	@ (800ed64 <HAL_TIM_PWM_Start+0x230>)
 800ecec:	4293      	cmp	r3, r2
 800ecee:	d115      	bne.n	800ed1c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	689a      	ldr	r2, [r3, #8]
 800ecf6:	4b1c      	ldr	r3, [pc, #112]	@ (800ed68 <HAL_TIM_PWM_Start+0x234>)
 800ecf8:	4013      	ands	r3, r2
 800ecfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	2b06      	cmp	r3, #6
 800ed00:	d015      	beq.n	800ed2e <HAL_TIM_PWM_Start+0x1fa>
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ed08:	d011      	beq.n	800ed2e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	681a      	ldr	r2, [r3, #0]
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	f042 0201 	orr.w	r2, r2, #1
 800ed18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed1a:	e008      	b.n	800ed2e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	681a      	ldr	r2, [r3, #0]
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	f042 0201 	orr.w	r2, r2, #1
 800ed2a:	601a      	str	r2, [r3, #0]
 800ed2c:	e000      	b.n	800ed30 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ed30:	2300      	movs	r3, #0
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	3710      	adds	r7, #16
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}
 800ed3a:	bf00      	nop
 800ed3c:	40010000 	.word	0x40010000
 800ed40:	40010400 	.word	0x40010400
 800ed44:	40014000 	.word	0x40014000
 800ed48:	40014400 	.word	0x40014400
 800ed4c:	40014800 	.word	0x40014800
 800ed50:	40000400 	.word	0x40000400
 800ed54:	40000800 	.word	0x40000800
 800ed58:	40000c00 	.word	0x40000c00
 800ed5c:	40001800 	.word	0x40001800
 800ed60:	4000e000 	.word	0x4000e000
 800ed64:	4000e400 	.word	0x4000e400
 800ed68:	00010007 	.word	0x00010007

0800ed6c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b082      	sub	sp, #8
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
 800ed74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	6839      	ldr	r1, [r7, #0]
 800ed7e:	4618      	mov	r0, r3
 800ed80:	f001 f8da 	bl	800ff38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	4a3e      	ldr	r2, [pc, #248]	@ (800ee84 <HAL_TIM_PWM_Stop+0x118>)
 800ed8a:	4293      	cmp	r3, r2
 800ed8c:	d013      	beq.n	800edb6 <HAL_TIM_PWM_Stop+0x4a>
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	4a3d      	ldr	r2, [pc, #244]	@ (800ee88 <HAL_TIM_PWM_Stop+0x11c>)
 800ed94:	4293      	cmp	r3, r2
 800ed96:	d00e      	beq.n	800edb6 <HAL_TIM_PWM_Stop+0x4a>
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	4a3b      	ldr	r2, [pc, #236]	@ (800ee8c <HAL_TIM_PWM_Stop+0x120>)
 800ed9e:	4293      	cmp	r3, r2
 800eda0:	d009      	beq.n	800edb6 <HAL_TIM_PWM_Stop+0x4a>
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	4a3a      	ldr	r2, [pc, #232]	@ (800ee90 <HAL_TIM_PWM_Stop+0x124>)
 800eda8:	4293      	cmp	r3, r2
 800edaa:	d004      	beq.n	800edb6 <HAL_TIM_PWM_Stop+0x4a>
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	4a38      	ldr	r2, [pc, #224]	@ (800ee94 <HAL_TIM_PWM_Stop+0x128>)
 800edb2:	4293      	cmp	r3, r2
 800edb4:	d101      	bne.n	800edba <HAL_TIM_PWM_Stop+0x4e>
 800edb6:	2301      	movs	r3, #1
 800edb8:	e000      	b.n	800edbc <HAL_TIM_PWM_Stop+0x50>
 800edba:	2300      	movs	r3, #0
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d017      	beq.n	800edf0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	6a1a      	ldr	r2, [r3, #32]
 800edc6:	f241 1311 	movw	r3, #4369	@ 0x1111
 800edca:	4013      	ands	r3, r2
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d10f      	bne.n	800edf0 <HAL_TIM_PWM_Stop+0x84>
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	6a1a      	ldr	r2, [r3, #32]
 800edd6:	f240 4344 	movw	r3, #1092	@ 0x444
 800edda:	4013      	ands	r3, r2
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d107      	bne.n	800edf0 <HAL_TIM_PWM_Stop+0x84>
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800edee:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	6a1a      	ldr	r2, [r3, #32]
 800edf6:	f241 1311 	movw	r3, #4369	@ 0x1111
 800edfa:	4013      	ands	r3, r2
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d10f      	bne.n	800ee20 <HAL_TIM_PWM_Stop+0xb4>
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	6a1a      	ldr	r2, [r3, #32]
 800ee06:	f240 4344 	movw	r3, #1092	@ 0x444
 800ee0a:	4013      	ands	r3, r2
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d107      	bne.n	800ee20 <HAL_TIM_PWM_Stop+0xb4>
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	681a      	ldr	r2, [r3, #0]
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	f022 0201 	bic.w	r2, r2, #1
 800ee1e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d104      	bne.n	800ee30 <HAL_TIM_PWM_Stop+0xc4>
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	2201      	movs	r2, #1
 800ee2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ee2e:	e023      	b.n	800ee78 <HAL_TIM_PWM_Stop+0x10c>
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	2b04      	cmp	r3, #4
 800ee34:	d104      	bne.n	800ee40 <HAL_TIM_PWM_Stop+0xd4>
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	2201      	movs	r2, #1
 800ee3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ee3e:	e01b      	b.n	800ee78 <HAL_TIM_PWM_Stop+0x10c>
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	2b08      	cmp	r3, #8
 800ee44:	d104      	bne.n	800ee50 <HAL_TIM_PWM_Stop+0xe4>
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2201      	movs	r2, #1
 800ee4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ee4e:	e013      	b.n	800ee78 <HAL_TIM_PWM_Stop+0x10c>
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	2b0c      	cmp	r3, #12
 800ee54:	d104      	bne.n	800ee60 <HAL_TIM_PWM_Stop+0xf4>
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	2201      	movs	r2, #1
 800ee5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ee5e:	e00b      	b.n	800ee78 <HAL_TIM_PWM_Stop+0x10c>
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	2b10      	cmp	r3, #16
 800ee64:	d104      	bne.n	800ee70 <HAL_TIM_PWM_Stop+0x104>
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	2201      	movs	r2, #1
 800ee6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ee6e:	e003      	b.n	800ee78 <HAL_TIM_PWM_Stop+0x10c>
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2201      	movs	r2, #1
 800ee74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800ee78:	2300      	movs	r3, #0
}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	3708      	adds	r7, #8
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}
 800ee82:	bf00      	nop
 800ee84:	40010000 	.word	0x40010000
 800ee88:	40010400 	.word	0x40010400
 800ee8c:	40014000 	.word	0x40014000
 800ee90:	40014400 	.word	0x40014400
 800ee94:	40014800 	.word	0x40014800

0800ee98 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b082      	sub	sp, #8
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d101      	bne.n	800eeaa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800eea6:	2301      	movs	r3, #1
 800eea8:	e049      	b.n	800ef3e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800eeb0:	b2db      	uxtb	r3, r3
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d106      	bne.n	800eec4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	2200      	movs	r2, #0
 800eeba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f7f5 fb90 	bl	80045e4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	2202      	movs	r2, #2
 800eec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681a      	ldr	r2, [r3, #0]
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	3304      	adds	r3, #4
 800eed4:	4619      	mov	r1, r3
 800eed6:	4610      	mov	r0, r2
 800eed8:	f000 fade 	bl	800f498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2201      	movs	r2, #1
 800eee0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2201      	movs	r2, #1
 800eee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2201      	movs	r2, #1
 800eef0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	2201      	movs	r2, #1
 800eef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2201      	movs	r2, #1
 800ef00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2201      	movs	r2, #1
 800ef08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2201      	movs	r2, #1
 800ef10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	2201      	movs	r2, #1
 800ef18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	2201      	movs	r2, #1
 800ef20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2201      	movs	r2, #1
 800ef28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2201      	movs	r2, #1
 800ef30:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2201      	movs	r2, #1
 800ef38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ef3c:	2300      	movs	r3, #0
}
 800ef3e:	4618      	mov	r0, r3
 800ef40:	3708      	adds	r7, #8
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}

0800ef46 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800ef46:	b580      	push	{r7, lr}
 800ef48:	b086      	sub	sp, #24
 800ef4a:	af00      	add	r7, sp, #0
 800ef4c:	60f8      	str	r0, [r7, #12]
 800ef4e:	60b9      	str	r1, [r7, #8]
 800ef50:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ef52:	2300      	movs	r3, #0
 800ef54:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ef5c:	2b01      	cmp	r3, #1
 800ef5e:	d101      	bne.n	800ef64 <HAL_TIM_IC_ConfigChannel+0x1e>
 800ef60:	2302      	movs	r3, #2
 800ef62:	e088      	b.n	800f076 <HAL_TIM_IC_ConfigChannel+0x130>
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	2201      	movs	r2, #1
 800ef68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d11b      	bne.n	800efaa <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ef76:	68bb      	ldr	r3, [r7, #8]
 800ef78:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ef7a:	68bb      	ldr	r3, [r7, #8]
 800ef7c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ef7e:	68bb      	ldr	r3, [r7, #8]
 800ef80:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800ef82:	f000 fe05 	bl	800fb90 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	699a      	ldr	r2, [r3, #24]
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	f022 020c 	bic.w	r2, r2, #12
 800ef94:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	6999      	ldr	r1, [r3, #24]
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	689a      	ldr	r2, [r3, #8]
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	430a      	orrs	r2, r1
 800efa6:	619a      	str	r2, [r3, #24]
 800efa8:	e060      	b.n	800f06c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2b04      	cmp	r3, #4
 800efae:	d11c      	bne.n	800efea <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800efbc:	68bb      	ldr	r3, [r7, #8]
 800efbe:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800efc0:	f000 fe95 	bl	800fcee <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	699a      	ldr	r2, [r3, #24]
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800efd2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	6999      	ldr	r1, [r3, #24]
 800efda:	68bb      	ldr	r3, [r7, #8]
 800efdc:	689b      	ldr	r3, [r3, #8]
 800efde:	021a      	lsls	r2, r3, #8
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	430a      	orrs	r2, r1
 800efe6:	619a      	str	r2, [r3, #24]
 800efe8:	e040      	b.n	800f06c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	2b08      	cmp	r3, #8
 800efee:	d11b      	bne.n	800f028 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800eff4:	68bb      	ldr	r3, [r7, #8]
 800eff6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800effc:	68bb      	ldr	r3, [r7, #8]
 800effe:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800f000:	f000 fee2 	bl	800fdc8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	69da      	ldr	r2, [r3, #28]
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	f022 020c 	bic.w	r2, r2, #12
 800f012:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	69d9      	ldr	r1, [r3, #28]
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	689a      	ldr	r2, [r3, #8]
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	430a      	orrs	r2, r1
 800f024:	61da      	str	r2, [r3, #28]
 800f026:	e021      	b.n	800f06c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2b0c      	cmp	r3, #12
 800f02c:	d11c      	bne.n	800f068 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800f032:	68bb      	ldr	r3, [r7, #8]
 800f034:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800f036:	68bb      	ldr	r3, [r7, #8]
 800f038:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800f03e:	f000 feff 	bl	800fe40 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	69da      	ldr	r2, [r3, #28]
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800f050:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	69d9      	ldr	r1, [r3, #28]
 800f058:	68bb      	ldr	r3, [r7, #8]
 800f05a:	689b      	ldr	r3, [r3, #8]
 800f05c:	021a      	lsls	r2, r3, #8
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	430a      	orrs	r2, r1
 800f064:	61da      	str	r2, [r3, #28]
 800f066:	e001      	b.n	800f06c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800f068:	2301      	movs	r3, #1
 800f06a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	2200      	movs	r2, #0
 800f070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f074:	7dfb      	ldrb	r3, [r7, #23]
}
 800f076:	4618      	mov	r0, r3
 800f078:	3718      	adds	r7, #24
 800f07a:	46bd      	mov	sp, r7
 800f07c:	bd80      	pop	{r7, pc}
	...

0800f080 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b086      	sub	sp, #24
 800f084:	af00      	add	r7, sp, #0
 800f086:	60f8      	str	r0, [r7, #12]
 800f088:	60b9      	str	r1, [r7, #8]
 800f08a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f08c:	2300      	movs	r3, #0
 800f08e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f096:	2b01      	cmp	r3, #1
 800f098:	d101      	bne.n	800f09e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f09a:	2302      	movs	r3, #2
 800f09c:	e0ff      	b.n	800f29e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	2201      	movs	r2, #1
 800f0a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	2b14      	cmp	r3, #20
 800f0aa:	f200 80f0 	bhi.w	800f28e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f0ae:	a201      	add	r2, pc, #4	@ (adr r2, 800f0b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0b4:	0800f109 	.word	0x0800f109
 800f0b8:	0800f28f 	.word	0x0800f28f
 800f0bc:	0800f28f 	.word	0x0800f28f
 800f0c0:	0800f28f 	.word	0x0800f28f
 800f0c4:	0800f149 	.word	0x0800f149
 800f0c8:	0800f28f 	.word	0x0800f28f
 800f0cc:	0800f28f 	.word	0x0800f28f
 800f0d0:	0800f28f 	.word	0x0800f28f
 800f0d4:	0800f18b 	.word	0x0800f18b
 800f0d8:	0800f28f 	.word	0x0800f28f
 800f0dc:	0800f28f 	.word	0x0800f28f
 800f0e0:	0800f28f 	.word	0x0800f28f
 800f0e4:	0800f1cb 	.word	0x0800f1cb
 800f0e8:	0800f28f 	.word	0x0800f28f
 800f0ec:	0800f28f 	.word	0x0800f28f
 800f0f0:	0800f28f 	.word	0x0800f28f
 800f0f4:	0800f20d 	.word	0x0800f20d
 800f0f8:	0800f28f 	.word	0x0800f28f
 800f0fc:	0800f28f 	.word	0x0800f28f
 800f100:	0800f28f 	.word	0x0800f28f
 800f104:	0800f24d 	.word	0x0800f24d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	68b9      	ldr	r1, [r7, #8]
 800f10e:	4618      	mov	r0, r3
 800f110:	f000 fa68 	bl	800f5e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	699a      	ldr	r2, [r3, #24]
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	f042 0208 	orr.w	r2, r2, #8
 800f122:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	699a      	ldr	r2, [r3, #24]
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	f022 0204 	bic.w	r2, r2, #4
 800f132:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	6999      	ldr	r1, [r3, #24]
 800f13a:	68bb      	ldr	r3, [r7, #8]
 800f13c:	691a      	ldr	r2, [r3, #16]
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	430a      	orrs	r2, r1
 800f144:	619a      	str	r2, [r3, #24]
      break;
 800f146:	e0a5      	b.n	800f294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	68b9      	ldr	r1, [r7, #8]
 800f14e:	4618      	mov	r0, r3
 800f150:	f000 fad8 	bl	800f704 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	699a      	ldr	r2, [r3, #24]
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f162:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	699a      	ldr	r2, [r3, #24]
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f172:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	6999      	ldr	r1, [r3, #24]
 800f17a:	68bb      	ldr	r3, [r7, #8]
 800f17c:	691b      	ldr	r3, [r3, #16]
 800f17e:	021a      	lsls	r2, r3, #8
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	430a      	orrs	r2, r1
 800f186:	619a      	str	r2, [r3, #24]
      break;
 800f188:	e084      	b.n	800f294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	68b9      	ldr	r1, [r7, #8]
 800f190:	4618      	mov	r0, r3
 800f192:	f000 fb41 	bl	800f818 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	69da      	ldr	r2, [r3, #28]
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	f042 0208 	orr.w	r2, r2, #8
 800f1a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	69da      	ldr	r2, [r3, #28]
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	f022 0204 	bic.w	r2, r2, #4
 800f1b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	69d9      	ldr	r1, [r3, #28]
 800f1bc:	68bb      	ldr	r3, [r7, #8]
 800f1be:	691a      	ldr	r2, [r3, #16]
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	430a      	orrs	r2, r1
 800f1c6:	61da      	str	r2, [r3, #28]
      break;
 800f1c8:	e064      	b.n	800f294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	68b9      	ldr	r1, [r7, #8]
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	f000 fba9 	bl	800f928 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	69da      	ldr	r2, [r3, #28]
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f1e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	69da      	ldr	r2, [r3, #28]
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f1f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	69d9      	ldr	r1, [r3, #28]
 800f1fc:	68bb      	ldr	r3, [r7, #8]
 800f1fe:	691b      	ldr	r3, [r3, #16]
 800f200:	021a      	lsls	r2, r3, #8
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	430a      	orrs	r2, r1
 800f208:	61da      	str	r2, [r3, #28]
      break;
 800f20a:	e043      	b.n	800f294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	68b9      	ldr	r1, [r7, #8]
 800f212:	4618      	mov	r0, r3
 800f214:	f000 fbf2 	bl	800f9fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	f042 0208 	orr.w	r2, r2, #8
 800f226:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	f022 0204 	bic.w	r2, r2, #4
 800f236:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800f23e:	68bb      	ldr	r3, [r7, #8]
 800f240:	691a      	ldr	r2, [r3, #16]
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	430a      	orrs	r2, r1
 800f248:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800f24a:	e023      	b.n	800f294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	68b9      	ldr	r1, [r7, #8]
 800f252:	4618      	mov	r0, r3
 800f254:	f000 fc36 	bl	800fac4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f266:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f276:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800f27e:	68bb      	ldr	r3, [r7, #8]
 800f280:	691b      	ldr	r3, [r3, #16]
 800f282:	021a      	lsls	r2, r3, #8
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	430a      	orrs	r2, r1
 800f28a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800f28c:	e002      	b.n	800f294 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f28e:	2301      	movs	r3, #1
 800f290:	75fb      	strb	r3, [r7, #23]
      break;
 800f292:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	2200      	movs	r2, #0
 800f298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f29c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f29e:	4618      	mov	r0, r3
 800f2a0:	3718      	adds	r7, #24
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}
 800f2a6:	bf00      	nop

0800f2a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b084      	sub	sp, #16
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
 800f2b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f2bc:	2b01      	cmp	r3, #1
 800f2be:	d101      	bne.n	800f2c4 <HAL_TIM_ConfigClockSource+0x1c>
 800f2c0:	2302      	movs	r3, #2
 800f2c2:	e0dc      	b.n	800f47e <HAL_TIM_ConfigClockSource+0x1d6>
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2201      	movs	r2, #1
 800f2c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2202      	movs	r2, #2
 800f2d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	689b      	ldr	r3, [r3, #8]
 800f2da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f2dc:	68ba      	ldr	r2, [r7, #8]
 800f2de:	4b6a      	ldr	r3, [pc, #424]	@ (800f488 <HAL_TIM_ConfigClockSource+0x1e0>)
 800f2e0:	4013      	ands	r3, r2
 800f2e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f2e4:	68bb      	ldr	r3, [r7, #8]
 800f2e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f2ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	68ba      	ldr	r2, [r7, #8]
 800f2f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	4a64      	ldr	r2, [pc, #400]	@ (800f48c <HAL_TIM_ConfigClockSource+0x1e4>)
 800f2fa:	4293      	cmp	r3, r2
 800f2fc:	f000 80a9 	beq.w	800f452 <HAL_TIM_ConfigClockSource+0x1aa>
 800f300:	4a62      	ldr	r2, [pc, #392]	@ (800f48c <HAL_TIM_ConfigClockSource+0x1e4>)
 800f302:	4293      	cmp	r3, r2
 800f304:	f200 80ae 	bhi.w	800f464 <HAL_TIM_ConfigClockSource+0x1bc>
 800f308:	4a61      	ldr	r2, [pc, #388]	@ (800f490 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f30a:	4293      	cmp	r3, r2
 800f30c:	f000 80a1 	beq.w	800f452 <HAL_TIM_ConfigClockSource+0x1aa>
 800f310:	4a5f      	ldr	r2, [pc, #380]	@ (800f490 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f312:	4293      	cmp	r3, r2
 800f314:	f200 80a6 	bhi.w	800f464 <HAL_TIM_ConfigClockSource+0x1bc>
 800f318:	4a5e      	ldr	r2, [pc, #376]	@ (800f494 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f31a:	4293      	cmp	r3, r2
 800f31c:	f000 8099 	beq.w	800f452 <HAL_TIM_ConfigClockSource+0x1aa>
 800f320:	4a5c      	ldr	r2, [pc, #368]	@ (800f494 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f322:	4293      	cmp	r3, r2
 800f324:	f200 809e 	bhi.w	800f464 <HAL_TIM_ConfigClockSource+0x1bc>
 800f328:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800f32c:	f000 8091 	beq.w	800f452 <HAL_TIM_ConfigClockSource+0x1aa>
 800f330:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800f334:	f200 8096 	bhi.w	800f464 <HAL_TIM_ConfigClockSource+0x1bc>
 800f338:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f33c:	f000 8089 	beq.w	800f452 <HAL_TIM_ConfigClockSource+0x1aa>
 800f340:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f344:	f200 808e 	bhi.w	800f464 <HAL_TIM_ConfigClockSource+0x1bc>
 800f348:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f34c:	d03e      	beq.n	800f3cc <HAL_TIM_ConfigClockSource+0x124>
 800f34e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f352:	f200 8087 	bhi.w	800f464 <HAL_TIM_ConfigClockSource+0x1bc>
 800f356:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f35a:	f000 8086 	beq.w	800f46a <HAL_TIM_ConfigClockSource+0x1c2>
 800f35e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f362:	d87f      	bhi.n	800f464 <HAL_TIM_ConfigClockSource+0x1bc>
 800f364:	2b70      	cmp	r3, #112	@ 0x70
 800f366:	d01a      	beq.n	800f39e <HAL_TIM_ConfigClockSource+0xf6>
 800f368:	2b70      	cmp	r3, #112	@ 0x70
 800f36a:	d87b      	bhi.n	800f464 <HAL_TIM_ConfigClockSource+0x1bc>
 800f36c:	2b60      	cmp	r3, #96	@ 0x60
 800f36e:	d050      	beq.n	800f412 <HAL_TIM_ConfigClockSource+0x16a>
 800f370:	2b60      	cmp	r3, #96	@ 0x60
 800f372:	d877      	bhi.n	800f464 <HAL_TIM_ConfigClockSource+0x1bc>
 800f374:	2b50      	cmp	r3, #80	@ 0x50
 800f376:	d03c      	beq.n	800f3f2 <HAL_TIM_ConfigClockSource+0x14a>
 800f378:	2b50      	cmp	r3, #80	@ 0x50
 800f37a:	d873      	bhi.n	800f464 <HAL_TIM_ConfigClockSource+0x1bc>
 800f37c:	2b40      	cmp	r3, #64	@ 0x40
 800f37e:	d058      	beq.n	800f432 <HAL_TIM_ConfigClockSource+0x18a>
 800f380:	2b40      	cmp	r3, #64	@ 0x40
 800f382:	d86f      	bhi.n	800f464 <HAL_TIM_ConfigClockSource+0x1bc>
 800f384:	2b30      	cmp	r3, #48	@ 0x30
 800f386:	d064      	beq.n	800f452 <HAL_TIM_ConfigClockSource+0x1aa>
 800f388:	2b30      	cmp	r3, #48	@ 0x30
 800f38a:	d86b      	bhi.n	800f464 <HAL_TIM_ConfigClockSource+0x1bc>
 800f38c:	2b20      	cmp	r3, #32
 800f38e:	d060      	beq.n	800f452 <HAL_TIM_ConfigClockSource+0x1aa>
 800f390:	2b20      	cmp	r3, #32
 800f392:	d867      	bhi.n	800f464 <HAL_TIM_ConfigClockSource+0x1bc>
 800f394:	2b00      	cmp	r3, #0
 800f396:	d05c      	beq.n	800f452 <HAL_TIM_ConfigClockSource+0x1aa>
 800f398:	2b10      	cmp	r3, #16
 800f39a:	d05a      	beq.n	800f452 <HAL_TIM_ConfigClockSource+0x1aa>
 800f39c:	e062      	b.n	800f464 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f3ae:	f000 fda3 	bl	800fef8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	689b      	ldr	r3, [r3, #8]
 800f3b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f3ba:	68bb      	ldr	r3, [r7, #8]
 800f3bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f3c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	68ba      	ldr	r2, [r7, #8]
 800f3c8:	609a      	str	r2, [r3, #8]
      break;
 800f3ca:	e04f      	b.n	800f46c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f3dc:	f000 fd8c 	bl	800fef8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	689a      	ldr	r2, [r3, #8]
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f3ee:	609a      	str	r2, [r3, #8]
      break;
 800f3f0:	e03c      	b.n	800f46c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f3f6:	683b      	ldr	r3, [r7, #0]
 800f3f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f3fa:	683b      	ldr	r3, [r7, #0]
 800f3fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f3fe:	461a      	mov	r2, r3
 800f400:	f000 fc46 	bl	800fc90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	2150      	movs	r1, #80	@ 0x50
 800f40a:	4618      	mov	r0, r3
 800f40c:	f000 fd56 	bl	800febc <TIM_ITRx_SetConfig>
      break;
 800f410:	e02c      	b.n	800f46c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f41e:	461a      	mov	r2, r3
 800f420:	f000 fca2 	bl	800fd68 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	2160      	movs	r1, #96	@ 0x60
 800f42a:	4618      	mov	r0, r3
 800f42c:	f000 fd46 	bl	800febc <TIM_ITRx_SetConfig>
      break;
 800f430:	e01c      	b.n	800f46c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f43e:	461a      	mov	r2, r3
 800f440:	f000 fc26 	bl	800fc90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	2140      	movs	r1, #64	@ 0x40
 800f44a:	4618      	mov	r0, r3
 800f44c:	f000 fd36 	bl	800febc <TIM_ITRx_SetConfig>
      break;
 800f450:	e00c      	b.n	800f46c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	681a      	ldr	r2, [r3, #0]
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	4619      	mov	r1, r3
 800f45c:	4610      	mov	r0, r2
 800f45e:	f000 fd2d 	bl	800febc <TIM_ITRx_SetConfig>
      break;
 800f462:	e003      	b.n	800f46c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f464:	2301      	movs	r3, #1
 800f466:	73fb      	strb	r3, [r7, #15]
      break;
 800f468:	e000      	b.n	800f46c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f46a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	2201      	movs	r2, #1
 800f470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	2200      	movs	r2, #0
 800f478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f47c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f47e:	4618      	mov	r0, r3
 800f480:	3710      	adds	r7, #16
 800f482:	46bd      	mov	sp, r7
 800f484:	bd80      	pop	{r7, pc}
 800f486:	bf00      	nop
 800f488:	ffceff88 	.word	0xffceff88
 800f48c:	00100040 	.word	0x00100040
 800f490:	00100030 	.word	0x00100030
 800f494:	00100020 	.word	0x00100020

0800f498 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f498:	b480      	push	{r7}
 800f49a:	b085      	sub	sp, #20
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	4a44      	ldr	r2, [pc, #272]	@ (800f5bc <TIM_Base_SetConfig+0x124>)
 800f4ac:	4293      	cmp	r3, r2
 800f4ae:	d013      	beq.n	800f4d8 <TIM_Base_SetConfig+0x40>
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f4b6:	d00f      	beq.n	800f4d8 <TIM_Base_SetConfig+0x40>
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	4a41      	ldr	r2, [pc, #260]	@ (800f5c0 <TIM_Base_SetConfig+0x128>)
 800f4bc:	4293      	cmp	r3, r2
 800f4be:	d00b      	beq.n	800f4d8 <TIM_Base_SetConfig+0x40>
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	4a40      	ldr	r2, [pc, #256]	@ (800f5c4 <TIM_Base_SetConfig+0x12c>)
 800f4c4:	4293      	cmp	r3, r2
 800f4c6:	d007      	beq.n	800f4d8 <TIM_Base_SetConfig+0x40>
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	4a3f      	ldr	r2, [pc, #252]	@ (800f5c8 <TIM_Base_SetConfig+0x130>)
 800f4cc:	4293      	cmp	r3, r2
 800f4ce:	d003      	beq.n	800f4d8 <TIM_Base_SetConfig+0x40>
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	4a3e      	ldr	r2, [pc, #248]	@ (800f5cc <TIM_Base_SetConfig+0x134>)
 800f4d4:	4293      	cmp	r3, r2
 800f4d6:	d108      	bne.n	800f4ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f4de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f4e0:	683b      	ldr	r3, [r7, #0]
 800f4e2:	685b      	ldr	r3, [r3, #4]
 800f4e4:	68fa      	ldr	r2, [r7, #12]
 800f4e6:	4313      	orrs	r3, r2
 800f4e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	4a33      	ldr	r2, [pc, #204]	@ (800f5bc <TIM_Base_SetConfig+0x124>)
 800f4ee:	4293      	cmp	r3, r2
 800f4f0:	d027      	beq.n	800f542 <TIM_Base_SetConfig+0xaa>
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f4f8:	d023      	beq.n	800f542 <TIM_Base_SetConfig+0xaa>
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	4a30      	ldr	r2, [pc, #192]	@ (800f5c0 <TIM_Base_SetConfig+0x128>)
 800f4fe:	4293      	cmp	r3, r2
 800f500:	d01f      	beq.n	800f542 <TIM_Base_SetConfig+0xaa>
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	4a2f      	ldr	r2, [pc, #188]	@ (800f5c4 <TIM_Base_SetConfig+0x12c>)
 800f506:	4293      	cmp	r3, r2
 800f508:	d01b      	beq.n	800f542 <TIM_Base_SetConfig+0xaa>
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	4a2e      	ldr	r2, [pc, #184]	@ (800f5c8 <TIM_Base_SetConfig+0x130>)
 800f50e:	4293      	cmp	r3, r2
 800f510:	d017      	beq.n	800f542 <TIM_Base_SetConfig+0xaa>
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	4a2d      	ldr	r2, [pc, #180]	@ (800f5cc <TIM_Base_SetConfig+0x134>)
 800f516:	4293      	cmp	r3, r2
 800f518:	d013      	beq.n	800f542 <TIM_Base_SetConfig+0xaa>
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	4a2c      	ldr	r2, [pc, #176]	@ (800f5d0 <TIM_Base_SetConfig+0x138>)
 800f51e:	4293      	cmp	r3, r2
 800f520:	d00f      	beq.n	800f542 <TIM_Base_SetConfig+0xaa>
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	4a2b      	ldr	r2, [pc, #172]	@ (800f5d4 <TIM_Base_SetConfig+0x13c>)
 800f526:	4293      	cmp	r3, r2
 800f528:	d00b      	beq.n	800f542 <TIM_Base_SetConfig+0xaa>
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	4a2a      	ldr	r2, [pc, #168]	@ (800f5d8 <TIM_Base_SetConfig+0x140>)
 800f52e:	4293      	cmp	r3, r2
 800f530:	d007      	beq.n	800f542 <TIM_Base_SetConfig+0xaa>
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	4a29      	ldr	r2, [pc, #164]	@ (800f5dc <TIM_Base_SetConfig+0x144>)
 800f536:	4293      	cmp	r3, r2
 800f538:	d003      	beq.n	800f542 <TIM_Base_SetConfig+0xaa>
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	4a28      	ldr	r2, [pc, #160]	@ (800f5e0 <TIM_Base_SetConfig+0x148>)
 800f53e:	4293      	cmp	r3, r2
 800f540:	d108      	bne.n	800f554 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f548:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	68db      	ldr	r3, [r3, #12]
 800f54e:	68fa      	ldr	r2, [r7, #12]
 800f550:	4313      	orrs	r3, r2
 800f552:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f55a:	683b      	ldr	r3, [r7, #0]
 800f55c:	695b      	ldr	r3, [r3, #20]
 800f55e:	4313      	orrs	r3, r2
 800f560:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	68fa      	ldr	r2, [r7, #12]
 800f566:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	689a      	ldr	r2, [r3, #8]
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	681a      	ldr	r2, [r3, #0]
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	4a10      	ldr	r2, [pc, #64]	@ (800f5bc <TIM_Base_SetConfig+0x124>)
 800f57c:	4293      	cmp	r3, r2
 800f57e:	d00f      	beq.n	800f5a0 <TIM_Base_SetConfig+0x108>
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	4a12      	ldr	r2, [pc, #72]	@ (800f5cc <TIM_Base_SetConfig+0x134>)
 800f584:	4293      	cmp	r3, r2
 800f586:	d00b      	beq.n	800f5a0 <TIM_Base_SetConfig+0x108>
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	4a11      	ldr	r2, [pc, #68]	@ (800f5d0 <TIM_Base_SetConfig+0x138>)
 800f58c:	4293      	cmp	r3, r2
 800f58e:	d007      	beq.n	800f5a0 <TIM_Base_SetConfig+0x108>
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	4a10      	ldr	r2, [pc, #64]	@ (800f5d4 <TIM_Base_SetConfig+0x13c>)
 800f594:	4293      	cmp	r3, r2
 800f596:	d003      	beq.n	800f5a0 <TIM_Base_SetConfig+0x108>
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	4a0f      	ldr	r2, [pc, #60]	@ (800f5d8 <TIM_Base_SetConfig+0x140>)
 800f59c:	4293      	cmp	r3, r2
 800f59e:	d103      	bne.n	800f5a8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	691a      	ldr	r2, [r3, #16]
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2201      	movs	r2, #1
 800f5ac:	615a      	str	r2, [r3, #20]
}
 800f5ae:	bf00      	nop
 800f5b0:	3714      	adds	r7, #20
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b8:	4770      	bx	lr
 800f5ba:	bf00      	nop
 800f5bc:	40010000 	.word	0x40010000
 800f5c0:	40000400 	.word	0x40000400
 800f5c4:	40000800 	.word	0x40000800
 800f5c8:	40000c00 	.word	0x40000c00
 800f5cc:	40010400 	.word	0x40010400
 800f5d0:	40014000 	.word	0x40014000
 800f5d4:	40014400 	.word	0x40014400
 800f5d8:	40014800 	.word	0x40014800
 800f5dc:	4000e000 	.word	0x4000e000
 800f5e0:	4000e400 	.word	0x4000e400

0800f5e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f5e4:	b480      	push	{r7}
 800f5e6:	b087      	sub	sp, #28
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
 800f5ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	6a1b      	ldr	r3, [r3, #32]
 800f5f2:	f023 0201 	bic.w	r2, r3, #1
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	6a1b      	ldr	r3, [r3, #32]
 800f5fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	685b      	ldr	r3, [r3, #4]
 800f604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	699b      	ldr	r3, [r3, #24]
 800f60a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f60c:	68fa      	ldr	r2, [r7, #12]
 800f60e:	4b37      	ldr	r3, [pc, #220]	@ (800f6ec <TIM_OC1_SetConfig+0x108>)
 800f610:	4013      	ands	r3, r2
 800f612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	f023 0303 	bic.w	r3, r3, #3
 800f61a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f61c:	683b      	ldr	r3, [r7, #0]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	68fa      	ldr	r2, [r7, #12]
 800f622:	4313      	orrs	r3, r2
 800f624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f626:	697b      	ldr	r3, [r7, #20]
 800f628:	f023 0302 	bic.w	r3, r3, #2
 800f62c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f62e:	683b      	ldr	r3, [r7, #0]
 800f630:	689b      	ldr	r3, [r3, #8]
 800f632:	697a      	ldr	r2, [r7, #20]
 800f634:	4313      	orrs	r3, r2
 800f636:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	4a2d      	ldr	r2, [pc, #180]	@ (800f6f0 <TIM_OC1_SetConfig+0x10c>)
 800f63c:	4293      	cmp	r3, r2
 800f63e:	d00f      	beq.n	800f660 <TIM_OC1_SetConfig+0x7c>
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	4a2c      	ldr	r2, [pc, #176]	@ (800f6f4 <TIM_OC1_SetConfig+0x110>)
 800f644:	4293      	cmp	r3, r2
 800f646:	d00b      	beq.n	800f660 <TIM_OC1_SetConfig+0x7c>
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	4a2b      	ldr	r2, [pc, #172]	@ (800f6f8 <TIM_OC1_SetConfig+0x114>)
 800f64c:	4293      	cmp	r3, r2
 800f64e:	d007      	beq.n	800f660 <TIM_OC1_SetConfig+0x7c>
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	4a2a      	ldr	r2, [pc, #168]	@ (800f6fc <TIM_OC1_SetConfig+0x118>)
 800f654:	4293      	cmp	r3, r2
 800f656:	d003      	beq.n	800f660 <TIM_OC1_SetConfig+0x7c>
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	4a29      	ldr	r2, [pc, #164]	@ (800f700 <TIM_OC1_SetConfig+0x11c>)
 800f65c:	4293      	cmp	r3, r2
 800f65e:	d10c      	bne.n	800f67a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f660:	697b      	ldr	r3, [r7, #20]
 800f662:	f023 0308 	bic.w	r3, r3, #8
 800f666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	68db      	ldr	r3, [r3, #12]
 800f66c:	697a      	ldr	r2, [r7, #20]
 800f66e:	4313      	orrs	r3, r2
 800f670:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f672:	697b      	ldr	r3, [r7, #20]
 800f674:	f023 0304 	bic.w	r3, r3, #4
 800f678:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	4a1c      	ldr	r2, [pc, #112]	@ (800f6f0 <TIM_OC1_SetConfig+0x10c>)
 800f67e:	4293      	cmp	r3, r2
 800f680:	d00f      	beq.n	800f6a2 <TIM_OC1_SetConfig+0xbe>
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	4a1b      	ldr	r2, [pc, #108]	@ (800f6f4 <TIM_OC1_SetConfig+0x110>)
 800f686:	4293      	cmp	r3, r2
 800f688:	d00b      	beq.n	800f6a2 <TIM_OC1_SetConfig+0xbe>
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	4a1a      	ldr	r2, [pc, #104]	@ (800f6f8 <TIM_OC1_SetConfig+0x114>)
 800f68e:	4293      	cmp	r3, r2
 800f690:	d007      	beq.n	800f6a2 <TIM_OC1_SetConfig+0xbe>
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	4a19      	ldr	r2, [pc, #100]	@ (800f6fc <TIM_OC1_SetConfig+0x118>)
 800f696:	4293      	cmp	r3, r2
 800f698:	d003      	beq.n	800f6a2 <TIM_OC1_SetConfig+0xbe>
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	4a18      	ldr	r2, [pc, #96]	@ (800f700 <TIM_OC1_SetConfig+0x11c>)
 800f69e:	4293      	cmp	r3, r2
 800f6a0:	d111      	bne.n	800f6c6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f6a2:	693b      	ldr	r3, [r7, #16]
 800f6a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f6a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f6aa:	693b      	ldr	r3, [r7, #16]
 800f6ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f6b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f6b2:	683b      	ldr	r3, [r7, #0]
 800f6b4:	695b      	ldr	r3, [r3, #20]
 800f6b6:	693a      	ldr	r2, [r7, #16]
 800f6b8:	4313      	orrs	r3, r2
 800f6ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	699b      	ldr	r3, [r3, #24]
 800f6c0:	693a      	ldr	r2, [r7, #16]
 800f6c2:	4313      	orrs	r3, r2
 800f6c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	693a      	ldr	r2, [r7, #16]
 800f6ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	68fa      	ldr	r2, [r7, #12]
 800f6d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f6d2:	683b      	ldr	r3, [r7, #0]
 800f6d4:	685a      	ldr	r2, [r3, #4]
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	697a      	ldr	r2, [r7, #20]
 800f6de:	621a      	str	r2, [r3, #32]
}
 800f6e0:	bf00      	nop
 800f6e2:	371c      	adds	r7, #28
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ea:	4770      	bx	lr
 800f6ec:	fffeff8f 	.word	0xfffeff8f
 800f6f0:	40010000 	.word	0x40010000
 800f6f4:	40010400 	.word	0x40010400
 800f6f8:	40014000 	.word	0x40014000
 800f6fc:	40014400 	.word	0x40014400
 800f700:	40014800 	.word	0x40014800

0800f704 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f704:	b480      	push	{r7}
 800f706:	b087      	sub	sp, #28
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
 800f70c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	6a1b      	ldr	r3, [r3, #32]
 800f712:	f023 0210 	bic.w	r2, r3, #16
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	6a1b      	ldr	r3, [r3, #32]
 800f71e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	685b      	ldr	r3, [r3, #4]
 800f724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	699b      	ldr	r3, [r3, #24]
 800f72a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f72c:	68fa      	ldr	r2, [r7, #12]
 800f72e:	4b34      	ldr	r3, [pc, #208]	@ (800f800 <TIM_OC2_SetConfig+0xfc>)
 800f730:	4013      	ands	r3, r2
 800f732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f73a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f73c:	683b      	ldr	r3, [r7, #0]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	021b      	lsls	r3, r3, #8
 800f742:	68fa      	ldr	r2, [r7, #12]
 800f744:	4313      	orrs	r3, r2
 800f746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f748:	697b      	ldr	r3, [r7, #20]
 800f74a:	f023 0320 	bic.w	r3, r3, #32
 800f74e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	689b      	ldr	r3, [r3, #8]
 800f754:	011b      	lsls	r3, r3, #4
 800f756:	697a      	ldr	r2, [r7, #20]
 800f758:	4313      	orrs	r3, r2
 800f75a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	4a29      	ldr	r2, [pc, #164]	@ (800f804 <TIM_OC2_SetConfig+0x100>)
 800f760:	4293      	cmp	r3, r2
 800f762:	d003      	beq.n	800f76c <TIM_OC2_SetConfig+0x68>
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	4a28      	ldr	r2, [pc, #160]	@ (800f808 <TIM_OC2_SetConfig+0x104>)
 800f768:	4293      	cmp	r3, r2
 800f76a:	d10d      	bne.n	800f788 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f76c:	697b      	ldr	r3, [r7, #20]
 800f76e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f772:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	68db      	ldr	r3, [r3, #12]
 800f778:	011b      	lsls	r3, r3, #4
 800f77a:	697a      	ldr	r2, [r7, #20]
 800f77c:	4313      	orrs	r3, r2
 800f77e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f780:	697b      	ldr	r3, [r7, #20]
 800f782:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f786:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	4a1e      	ldr	r2, [pc, #120]	@ (800f804 <TIM_OC2_SetConfig+0x100>)
 800f78c:	4293      	cmp	r3, r2
 800f78e:	d00f      	beq.n	800f7b0 <TIM_OC2_SetConfig+0xac>
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	4a1d      	ldr	r2, [pc, #116]	@ (800f808 <TIM_OC2_SetConfig+0x104>)
 800f794:	4293      	cmp	r3, r2
 800f796:	d00b      	beq.n	800f7b0 <TIM_OC2_SetConfig+0xac>
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	4a1c      	ldr	r2, [pc, #112]	@ (800f80c <TIM_OC2_SetConfig+0x108>)
 800f79c:	4293      	cmp	r3, r2
 800f79e:	d007      	beq.n	800f7b0 <TIM_OC2_SetConfig+0xac>
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	4a1b      	ldr	r2, [pc, #108]	@ (800f810 <TIM_OC2_SetConfig+0x10c>)
 800f7a4:	4293      	cmp	r3, r2
 800f7a6:	d003      	beq.n	800f7b0 <TIM_OC2_SetConfig+0xac>
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	4a1a      	ldr	r2, [pc, #104]	@ (800f814 <TIM_OC2_SetConfig+0x110>)
 800f7ac:	4293      	cmp	r3, r2
 800f7ae:	d113      	bne.n	800f7d8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f7b0:	693b      	ldr	r3, [r7, #16]
 800f7b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f7b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f7b8:	693b      	ldr	r3, [r7, #16]
 800f7ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f7be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f7c0:	683b      	ldr	r3, [r7, #0]
 800f7c2:	695b      	ldr	r3, [r3, #20]
 800f7c4:	009b      	lsls	r3, r3, #2
 800f7c6:	693a      	ldr	r2, [r7, #16]
 800f7c8:	4313      	orrs	r3, r2
 800f7ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	699b      	ldr	r3, [r3, #24]
 800f7d0:	009b      	lsls	r3, r3, #2
 800f7d2:	693a      	ldr	r2, [r7, #16]
 800f7d4:	4313      	orrs	r3, r2
 800f7d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	693a      	ldr	r2, [r7, #16]
 800f7dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	68fa      	ldr	r2, [r7, #12]
 800f7e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	685a      	ldr	r2, [r3, #4]
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	697a      	ldr	r2, [r7, #20]
 800f7f0:	621a      	str	r2, [r3, #32]
}
 800f7f2:	bf00      	nop
 800f7f4:	371c      	adds	r7, #28
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fc:	4770      	bx	lr
 800f7fe:	bf00      	nop
 800f800:	feff8fff 	.word	0xfeff8fff
 800f804:	40010000 	.word	0x40010000
 800f808:	40010400 	.word	0x40010400
 800f80c:	40014000 	.word	0x40014000
 800f810:	40014400 	.word	0x40014400
 800f814:	40014800 	.word	0x40014800

0800f818 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f818:	b480      	push	{r7}
 800f81a:	b087      	sub	sp, #28
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
 800f820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	6a1b      	ldr	r3, [r3, #32]
 800f826:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	6a1b      	ldr	r3, [r3, #32]
 800f832:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	685b      	ldr	r3, [r3, #4]
 800f838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	69db      	ldr	r3, [r3, #28]
 800f83e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f840:	68fa      	ldr	r2, [r7, #12]
 800f842:	4b33      	ldr	r3, [pc, #204]	@ (800f910 <TIM_OC3_SetConfig+0xf8>)
 800f844:	4013      	ands	r3, r2
 800f846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	f023 0303 	bic.w	r3, r3, #3
 800f84e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f850:	683b      	ldr	r3, [r7, #0]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	68fa      	ldr	r2, [r7, #12]
 800f856:	4313      	orrs	r3, r2
 800f858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f85a:	697b      	ldr	r3, [r7, #20]
 800f85c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	689b      	ldr	r3, [r3, #8]
 800f866:	021b      	lsls	r3, r3, #8
 800f868:	697a      	ldr	r2, [r7, #20]
 800f86a:	4313      	orrs	r3, r2
 800f86c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	4a28      	ldr	r2, [pc, #160]	@ (800f914 <TIM_OC3_SetConfig+0xfc>)
 800f872:	4293      	cmp	r3, r2
 800f874:	d003      	beq.n	800f87e <TIM_OC3_SetConfig+0x66>
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	4a27      	ldr	r2, [pc, #156]	@ (800f918 <TIM_OC3_SetConfig+0x100>)
 800f87a:	4293      	cmp	r3, r2
 800f87c:	d10d      	bne.n	800f89a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f87e:	697b      	ldr	r3, [r7, #20]
 800f880:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f884:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f886:	683b      	ldr	r3, [r7, #0]
 800f888:	68db      	ldr	r3, [r3, #12]
 800f88a:	021b      	lsls	r3, r3, #8
 800f88c:	697a      	ldr	r2, [r7, #20]
 800f88e:	4313      	orrs	r3, r2
 800f890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f892:	697b      	ldr	r3, [r7, #20]
 800f894:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	4a1d      	ldr	r2, [pc, #116]	@ (800f914 <TIM_OC3_SetConfig+0xfc>)
 800f89e:	4293      	cmp	r3, r2
 800f8a0:	d00f      	beq.n	800f8c2 <TIM_OC3_SetConfig+0xaa>
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	4a1c      	ldr	r2, [pc, #112]	@ (800f918 <TIM_OC3_SetConfig+0x100>)
 800f8a6:	4293      	cmp	r3, r2
 800f8a8:	d00b      	beq.n	800f8c2 <TIM_OC3_SetConfig+0xaa>
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	4a1b      	ldr	r2, [pc, #108]	@ (800f91c <TIM_OC3_SetConfig+0x104>)
 800f8ae:	4293      	cmp	r3, r2
 800f8b0:	d007      	beq.n	800f8c2 <TIM_OC3_SetConfig+0xaa>
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	4a1a      	ldr	r2, [pc, #104]	@ (800f920 <TIM_OC3_SetConfig+0x108>)
 800f8b6:	4293      	cmp	r3, r2
 800f8b8:	d003      	beq.n	800f8c2 <TIM_OC3_SetConfig+0xaa>
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	4a19      	ldr	r2, [pc, #100]	@ (800f924 <TIM_OC3_SetConfig+0x10c>)
 800f8be:	4293      	cmp	r3, r2
 800f8c0:	d113      	bne.n	800f8ea <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f8c2:	693b      	ldr	r3, [r7, #16]
 800f8c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f8c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f8ca:	693b      	ldr	r3, [r7, #16]
 800f8cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f8d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	695b      	ldr	r3, [r3, #20]
 800f8d6:	011b      	lsls	r3, r3, #4
 800f8d8:	693a      	ldr	r2, [r7, #16]
 800f8da:	4313      	orrs	r3, r2
 800f8dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	699b      	ldr	r3, [r3, #24]
 800f8e2:	011b      	lsls	r3, r3, #4
 800f8e4:	693a      	ldr	r2, [r7, #16]
 800f8e6:	4313      	orrs	r3, r2
 800f8e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	693a      	ldr	r2, [r7, #16]
 800f8ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	68fa      	ldr	r2, [r7, #12]
 800f8f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	685a      	ldr	r2, [r3, #4]
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	697a      	ldr	r2, [r7, #20]
 800f902:	621a      	str	r2, [r3, #32]
}
 800f904:	bf00      	nop
 800f906:	371c      	adds	r7, #28
 800f908:	46bd      	mov	sp, r7
 800f90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90e:	4770      	bx	lr
 800f910:	fffeff8f 	.word	0xfffeff8f
 800f914:	40010000 	.word	0x40010000
 800f918:	40010400 	.word	0x40010400
 800f91c:	40014000 	.word	0x40014000
 800f920:	40014400 	.word	0x40014400
 800f924:	40014800 	.word	0x40014800

0800f928 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f928:	b480      	push	{r7}
 800f92a:	b087      	sub	sp, #28
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
 800f930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	6a1b      	ldr	r3, [r3, #32]
 800f936:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	6a1b      	ldr	r3, [r3, #32]
 800f942:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	685b      	ldr	r3, [r3, #4]
 800f948:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	69db      	ldr	r3, [r3, #28]
 800f94e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f950:	68fa      	ldr	r2, [r7, #12]
 800f952:	4b24      	ldr	r3, [pc, #144]	@ (800f9e4 <TIM_OC4_SetConfig+0xbc>)
 800f954:	4013      	ands	r3, r2
 800f956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f95e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f960:	683b      	ldr	r3, [r7, #0]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	021b      	lsls	r3, r3, #8
 800f966:	68fa      	ldr	r2, [r7, #12]
 800f968:	4313      	orrs	r3, r2
 800f96a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f96c:	693b      	ldr	r3, [r7, #16]
 800f96e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f972:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	689b      	ldr	r3, [r3, #8]
 800f978:	031b      	lsls	r3, r3, #12
 800f97a:	693a      	ldr	r2, [r7, #16]
 800f97c:	4313      	orrs	r3, r2
 800f97e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	4a19      	ldr	r2, [pc, #100]	@ (800f9e8 <TIM_OC4_SetConfig+0xc0>)
 800f984:	4293      	cmp	r3, r2
 800f986:	d00f      	beq.n	800f9a8 <TIM_OC4_SetConfig+0x80>
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	4a18      	ldr	r2, [pc, #96]	@ (800f9ec <TIM_OC4_SetConfig+0xc4>)
 800f98c:	4293      	cmp	r3, r2
 800f98e:	d00b      	beq.n	800f9a8 <TIM_OC4_SetConfig+0x80>
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	4a17      	ldr	r2, [pc, #92]	@ (800f9f0 <TIM_OC4_SetConfig+0xc8>)
 800f994:	4293      	cmp	r3, r2
 800f996:	d007      	beq.n	800f9a8 <TIM_OC4_SetConfig+0x80>
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	4a16      	ldr	r2, [pc, #88]	@ (800f9f4 <TIM_OC4_SetConfig+0xcc>)
 800f99c:	4293      	cmp	r3, r2
 800f99e:	d003      	beq.n	800f9a8 <TIM_OC4_SetConfig+0x80>
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	4a15      	ldr	r2, [pc, #84]	@ (800f9f8 <TIM_OC4_SetConfig+0xd0>)
 800f9a4:	4293      	cmp	r3, r2
 800f9a6:	d109      	bne.n	800f9bc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f9a8:	697b      	ldr	r3, [r7, #20]
 800f9aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f9ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	695b      	ldr	r3, [r3, #20]
 800f9b4:	019b      	lsls	r3, r3, #6
 800f9b6:	697a      	ldr	r2, [r7, #20]
 800f9b8:	4313      	orrs	r3, r2
 800f9ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	697a      	ldr	r2, [r7, #20]
 800f9c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	68fa      	ldr	r2, [r7, #12]
 800f9c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	685a      	ldr	r2, [r3, #4]
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	693a      	ldr	r2, [r7, #16]
 800f9d4:	621a      	str	r2, [r3, #32]
}
 800f9d6:	bf00      	nop
 800f9d8:	371c      	adds	r7, #28
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e0:	4770      	bx	lr
 800f9e2:	bf00      	nop
 800f9e4:	feff8fff 	.word	0xfeff8fff
 800f9e8:	40010000 	.word	0x40010000
 800f9ec:	40010400 	.word	0x40010400
 800f9f0:	40014000 	.word	0x40014000
 800f9f4:	40014400 	.word	0x40014400
 800f9f8:	40014800 	.word	0x40014800

0800f9fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f9fc:	b480      	push	{r7}
 800f9fe:	b087      	sub	sp, #28
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
 800fa04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6a1b      	ldr	r3, [r3, #32]
 800fa0a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6a1b      	ldr	r3, [r3, #32]
 800fa16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	685b      	ldr	r3, [r3, #4]
 800fa1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fa22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fa24:	68fa      	ldr	r2, [r7, #12]
 800fa26:	4b21      	ldr	r3, [pc, #132]	@ (800faac <TIM_OC5_SetConfig+0xb0>)
 800fa28:	4013      	ands	r3, r2
 800fa2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fa2c:	683b      	ldr	r3, [r7, #0]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	68fa      	ldr	r2, [r7, #12]
 800fa32:	4313      	orrs	r3, r2
 800fa34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fa36:	693b      	ldr	r3, [r7, #16]
 800fa38:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800fa3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fa3e:	683b      	ldr	r3, [r7, #0]
 800fa40:	689b      	ldr	r3, [r3, #8]
 800fa42:	041b      	lsls	r3, r3, #16
 800fa44:	693a      	ldr	r2, [r7, #16]
 800fa46:	4313      	orrs	r3, r2
 800fa48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	4a18      	ldr	r2, [pc, #96]	@ (800fab0 <TIM_OC5_SetConfig+0xb4>)
 800fa4e:	4293      	cmp	r3, r2
 800fa50:	d00f      	beq.n	800fa72 <TIM_OC5_SetConfig+0x76>
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	4a17      	ldr	r2, [pc, #92]	@ (800fab4 <TIM_OC5_SetConfig+0xb8>)
 800fa56:	4293      	cmp	r3, r2
 800fa58:	d00b      	beq.n	800fa72 <TIM_OC5_SetConfig+0x76>
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	4a16      	ldr	r2, [pc, #88]	@ (800fab8 <TIM_OC5_SetConfig+0xbc>)
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	d007      	beq.n	800fa72 <TIM_OC5_SetConfig+0x76>
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	4a15      	ldr	r2, [pc, #84]	@ (800fabc <TIM_OC5_SetConfig+0xc0>)
 800fa66:	4293      	cmp	r3, r2
 800fa68:	d003      	beq.n	800fa72 <TIM_OC5_SetConfig+0x76>
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	4a14      	ldr	r2, [pc, #80]	@ (800fac0 <TIM_OC5_SetConfig+0xc4>)
 800fa6e:	4293      	cmp	r3, r2
 800fa70:	d109      	bne.n	800fa86 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fa72:	697b      	ldr	r3, [r7, #20]
 800fa74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fa78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	695b      	ldr	r3, [r3, #20]
 800fa7e:	021b      	lsls	r3, r3, #8
 800fa80:	697a      	ldr	r2, [r7, #20]
 800fa82:	4313      	orrs	r3, r2
 800fa84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	697a      	ldr	r2, [r7, #20]
 800fa8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	68fa      	ldr	r2, [r7, #12]
 800fa90:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fa92:	683b      	ldr	r3, [r7, #0]
 800fa94:	685a      	ldr	r2, [r3, #4]
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	693a      	ldr	r2, [r7, #16]
 800fa9e:	621a      	str	r2, [r3, #32]
}
 800faa0:	bf00      	nop
 800faa2:	371c      	adds	r7, #28
 800faa4:	46bd      	mov	sp, r7
 800faa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faaa:	4770      	bx	lr
 800faac:	fffeff8f 	.word	0xfffeff8f
 800fab0:	40010000 	.word	0x40010000
 800fab4:	40010400 	.word	0x40010400
 800fab8:	40014000 	.word	0x40014000
 800fabc:	40014400 	.word	0x40014400
 800fac0:	40014800 	.word	0x40014800

0800fac4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fac4:	b480      	push	{r7}
 800fac6:	b087      	sub	sp, #28
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
 800facc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	6a1b      	ldr	r3, [r3, #32]
 800fad2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	6a1b      	ldr	r3, [r3, #32]
 800fade:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	685b      	ldr	r3, [r3, #4]
 800fae4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800faea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800faec:	68fa      	ldr	r2, [r7, #12]
 800faee:	4b22      	ldr	r3, [pc, #136]	@ (800fb78 <TIM_OC6_SetConfig+0xb4>)
 800faf0:	4013      	ands	r3, r2
 800faf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	021b      	lsls	r3, r3, #8
 800fafa:	68fa      	ldr	r2, [r7, #12]
 800fafc:	4313      	orrs	r3, r2
 800fafe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fb00:	693b      	ldr	r3, [r7, #16]
 800fb02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800fb06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	689b      	ldr	r3, [r3, #8]
 800fb0c:	051b      	lsls	r3, r3, #20
 800fb0e:	693a      	ldr	r2, [r7, #16]
 800fb10:	4313      	orrs	r3, r2
 800fb12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	4a19      	ldr	r2, [pc, #100]	@ (800fb7c <TIM_OC6_SetConfig+0xb8>)
 800fb18:	4293      	cmp	r3, r2
 800fb1a:	d00f      	beq.n	800fb3c <TIM_OC6_SetConfig+0x78>
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	4a18      	ldr	r2, [pc, #96]	@ (800fb80 <TIM_OC6_SetConfig+0xbc>)
 800fb20:	4293      	cmp	r3, r2
 800fb22:	d00b      	beq.n	800fb3c <TIM_OC6_SetConfig+0x78>
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	4a17      	ldr	r2, [pc, #92]	@ (800fb84 <TIM_OC6_SetConfig+0xc0>)
 800fb28:	4293      	cmp	r3, r2
 800fb2a:	d007      	beq.n	800fb3c <TIM_OC6_SetConfig+0x78>
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	4a16      	ldr	r2, [pc, #88]	@ (800fb88 <TIM_OC6_SetConfig+0xc4>)
 800fb30:	4293      	cmp	r3, r2
 800fb32:	d003      	beq.n	800fb3c <TIM_OC6_SetConfig+0x78>
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	4a15      	ldr	r2, [pc, #84]	@ (800fb8c <TIM_OC6_SetConfig+0xc8>)
 800fb38:	4293      	cmp	r3, r2
 800fb3a:	d109      	bne.n	800fb50 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fb3c:	697b      	ldr	r3, [r7, #20]
 800fb3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800fb42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fb44:	683b      	ldr	r3, [r7, #0]
 800fb46:	695b      	ldr	r3, [r3, #20]
 800fb48:	029b      	lsls	r3, r3, #10
 800fb4a:	697a      	ldr	r2, [r7, #20]
 800fb4c:	4313      	orrs	r3, r2
 800fb4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	697a      	ldr	r2, [r7, #20]
 800fb54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	68fa      	ldr	r2, [r7, #12]
 800fb5a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fb5c:	683b      	ldr	r3, [r7, #0]
 800fb5e:	685a      	ldr	r2, [r3, #4]
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	693a      	ldr	r2, [r7, #16]
 800fb68:	621a      	str	r2, [r3, #32]
}
 800fb6a:	bf00      	nop
 800fb6c:	371c      	adds	r7, #28
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb74:	4770      	bx	lr
 800fb76:	bf00      	nop
 800fb78:	feff8fff 	.word	0xfeff8fff
 800fb7c:	40010000 	.word	0x40010000
 800fb80:	40010400 	.word	0x40010400
 800fb84:	40014000 	.word	0x40014000
 800fb88:	40014400 	.word	0x40014400
 800fb8c:	40014800 	.word	0x40014800

0800fb90 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800fb90:	b480      	push	{r7}
 800fb92:	b087      	sub	sp, #28
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	60f8      	str	r0, [r7, #12]
 800fb98:	60b9      	str	r1, [r7, #8]
 800fb9a:	607a      	str	r2, [r7, #4]
 800fb9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	6a1b      	ldr	r3, [r3, #32]
 800fba2:	f023 0201 	bic.w	r2, r3, #1
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	699b      	ldr	r3, [r3, #24]
 800fbae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	6a1b      	ldr	r3, [r3, #32]
 800fbb4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	4a2c      	ldr	r2, [pc, #176]	@ (800fc6c <TIM_TI1_SetConfig+0xdc>)
 800fbba:	4293      	cmp	r3, r2
 800fbbc:	d023      	beq.n	800fc06 <TIM_TI1_SetConfig+0x76>
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fbc4:	d01f      	beq.n	800fc06 <TIM_TI1_SetConfig+0x76>
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	4a29      	ldr	r2, [pc, #164]	@ (800fc70 <TIM_TI1_SetConfig+0xe0>)
 800fbca:	4293      	cmp	r3, r2
 800fbcc:	d01b      	beq.n	800fc06 <TIM_TI1_SetConfig+0x76>
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	4a28      	ldr	r2, [pc, #160]	@ (800fc74 <TIM_TI1_SetConfig+0xe4>)
 800fbd2:	4293      	cmp	r3, r2
 800fbd4:	d017      	beq.n	800fc06 <TIM_TI1_SetConfig+0x76>
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	4a27      	ldr	r2, [pc, #156]	@ (800fc78 <TIM_TI1_SetConfig+0xe8>)
 800fbda:	4293      	cmp	r3, r2
 800fbdc:	d013      	beq.n	800fc06 <TIM_TI1_SetConfig+0x76>
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	4a26      	ldr	r2, [pc, #152]	@ (800fc7c <TIM_TI1_SetConfig+0xec>)
 800fbe2:	4293      	cmp	r3, r2
 800fbe4:	d00f      	beq.n	800fc06 <TIM_TI1_SetConfig+0x76>
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	4a25      	ldr	r2, [pc, #148]	@ (800fc80 <TIM_TI1_SetConfig+0xf0>)
 800fbea:	4293      	cmp	r3, r2
 800fbec:	d00b      	beq.n	800fc06 <TIM_TI1_SetConfig+0x76>
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	4a24      	ldr	r2, [pc, #144]	@ (800fc84 <TIM_TI1_SetConfig+0xf4>)
 800fbf2:	4293      	cmp	r3, r2
 800fbf4:	d007      	beq.n	800fc06 <TIM_TI1_SetConfig+0x76>
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	4a23      	ldr	r2, [pc, #140]	@ (800fc88 <TIM_TI1_SetConfig+0xf8>)
 800fbfa:	4293      	cmp	r3, r2
 800fbfc:	d003      	beq.n	800fc06 <TIM_TI1_SetConfig+0x76>
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	4a22      	ldr	r2, [pc, #136]	@ (800fc8c <TIM_TI1_SetConfig+0xfc>)
 800fc02:	4293      	cmp	r3, r2
 800fc04:	d101      	bne.n	800fc0a <TIM_TI1_SetConfig+0x7a>
 800fc06:	2301      	movs	r3, #1
 800fc08:	e000      	b.n	800fc0c <TIM_TI1_SetConfig+0x7c>
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d008      	beq.n	800fc22 <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800fc10:	697b      	ldr	r3, [r7, #20]
 800fc12:	f023 0303 	bic.w	r3, r3, #3
 800fc16:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800fc18:	697a      	ldr	r2, [r7, #20]
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	4313      	orrs	r3, r2
 800fc1e:	617b      	str	r3, [r7, #20]
 800fc20:	e003      	b.n	800fc2a <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	f043 0301 	orr.w	r3, r3, #1
 800fc28:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fc2a:	697b      	ldr	r3, [r7, #20]
 800fc2c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800fc30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800fc32:	683b      	ldr	r3, [r7, #0]
 800fc34:	011b      	lsls	r3, r3, #4
 800fc36:	b2db      	uxtb	r3, r3
 800fc38:	697a      	ldr	r2, [r7, #20]
 800fc3a:	4313      	orrs	r3, r2
 800fc3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fc3e:	693b      	ldr	r3, [r7, #16]
 800fc40:	f023 030a 	bic.w	r3, r3, #10
 800fc44:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800fc46:	68bb      	ldr	r3, [r7, #8]
 800fc48:	f003 030a 	and.w	r3, r3, #10
 800fc4c:	693a      	ldr	r2, [r7, #16]
 800fc4e:	4313      	orrs	r3, r2
 800fc50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	697a      	ldr	r2, [r7, #20]
 800fc56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	693a      	ldr	r2, [r7, #16]
 800fc5c:	621a      	str	r2, [r3, #32]
}
 800fc5e:	bf00      	nop
 800fc60:	371c      	adds	r7, #28
 800fc62:	46bd      	mov	sp, r7
 800fc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc68:	4770      	bx	lr
 800fc6a:	bf00      	nop
 800fc6c:	40010000 	.word	0x40010000
 800fc70:	40000400 	.word	0x40000400
 800fc74:	40000800 	.word	0x40000800
 800fc78:	40000c00 	.word	0x40000c00
 800fc7c:	40010400 	.word	0x40010400
 800fc80:	40001800 	.word	0x40001800
 800fc84:	40014000 	.word	0x40014000
 800fc88:	4000e000 	.word	0x4000e000
 800fc8c:	4000e400 	.word	0x4000e400

0800fc90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fc90:	b480      	push	{r7}
 800fc92:	b087      	sub	sp, #28
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	60f8      	str	r0, [r7, #12]
 800fc98:	60b9      	str	r1, [r7, #8]
 800fc9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	6a1b      	ldr	r3, [r3, #32]
 800fca0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	6a1b      	ldr	r3, [r3, #32]
 800fca6:	f023 0201 	bic.w	r2, r3, #1
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	699b      	ldr	r3, [r3, #24]
 800fcb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fcb4:	693b      	ldr	r3, [r7, #16]
 800fcb6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800fcba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	011b      	lsls	r3, r3, #4
 800fcc0:	693a      	ldr	r2, [r7, #16]
 800fcc2:	4313      	orrs	r3, r2
 800fcc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fcc6:	697b      	ldr	r3, [r7, #20]
 800fcc8:	f023 030a 	bic.w	r3, r3, #10
 800fccc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fcce:	697a      	ldr	r2, [r7, #20]
 800fcd0:	68bb      	ldr	r3, [r7, #8]
 800fcd2:	4313      	orrs	r3, r2
 800fcd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	693a      	ldr	r2, [r7, #16]
 800fcda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	697a      	ldr	r2, [r7, #20]
 800fce0:	621a      	str	r2, [r3, #32]
}
 800fce2:	bf00      	nop
 800fce4:	371c      	adds	r7, #28
 800fce6:	46bd      	mov	sp, r7
 800fce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcec:	4770      	bx	lr

0800fcee <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fcee:	b480      	push	{r7}
 800fcf0:	b087      	sub	sp, #28
 800fcf2:	af00      	add	r7, sp, #0
 800fcf4:	60f8      	str	r0, [r7, #12]
 800fcf6:	60b9      	str	r1, [r7, #8]
 800fcf8:	607a      	str	r2, [r7, #4]
 800fcfa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	6a1b      	ldr	r3, [r3, #32]
 800fd00:	f023 0210 	bic.w	r2, r3, #16
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	699b      	ldr	r3, [r3, #24]
 800fd0c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	6a1b      	ldr	r3, [r3, #32]
 800fd12:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800fd14:	697b      	ldr	r3, [r7, #20]
 800fd16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fd1a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	021b      	lsls	r3, r3, #8
 800fd20:	697a      	ldr	r2, [r7, #20]
 800fd22:	4313      	orrs	r3, r2
 800fd24:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fd26:	697b      	ldr	r3, [r7, #20]
 800fd28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800fd2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800fd2e:	683b      	ldr	r3, [r7, #0]
 800fd30:	031b      	lsls	r3, r3, #12
 800fd32:	b29b      	uxth	r3, r3
 800fd34:	697a      	ldr	r2, [r7, #20]
 800fd36:	4313      	orrs	r3, r2
 800fd38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fd3a:	693b      	ldr	r3, [r7, #16]
 800fd3c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800fd40:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800fd42:	68bb      	ldr	r3, [r7, #8]
 800fd44:	011b      	lsls	r3, r3, #4
 800fd46:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800fd4a:	693a      	ldr	r2, [r7, #16]
 800fd4c:	4313      	orrs	r3, r2
 800fd4e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	697a      	ldr	r2, [r7, #20]
 800fd54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	693a      	ldr	r2, [r7, #16]
 800fd5a:	621a      	str	r2, [r3, #32]
}
 800fd5c:	bf00      	nop
 800fd5e:	371c      	adds	r7, #28
 800fd60:	46bd      	mov	sp, r7
 800fd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd66:	4770      	bx	lr

0800fd68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fd68:	b480      	push	{r7}
 800fd6a:	b087      	sub	sp, #28
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	60f8      	str	r0, [r7, #12]
 800fd70:	60b9      	str	r1, [r7, #8]
 800fd72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	6a1b      	ldr	r3, [r3, #32]
 800fd78:	f023 0210 	bic.w	r2, r3, #16
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	699b      	ldr	r3, [r3, #24]
 800fd84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	6a1b      	ldr	r3, [r3, #32]
 800fd8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fd8c:	697b      	ldr	r3, [r7, #20]
 800fd8e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800fd92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	031b      	lsls	r3, r3, #12
 800fd98:	697a      	ldr	r2, [r7, #20]
 800fd9a:	4313      	orrs	r3, r2
 800fd9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fd9e:	693b      	ldr	r3, [r7, #16]
 800fda0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800fda4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fda6:	68bb      	ldr	r3, [r7, #8]
 800fda8:	011b      	lsls	r3, r3, #4
 800fdaa:	693a      	ldr	r2, [r7, #16]
 800fdac:	4313      	orrs	r3, r2
 800fdae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	697a      	ldr	r2, [r7, #20]
 800fdb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	693a      	ldr	r2, [r7, #16]
 800fdba:	621a      	str	r2, [r3, #32]
}
 800fdbc:	bf00      	nop
 800fdbe:	371c      	adds	r7, #28
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc6:	4770      	bx	lr

0800fdc8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fdc8:	b480      	push	{r7}
 800fdca:	b087      	sub	sp, #28
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	60f8      	str	r0, [r7, #12]
 800fdd0:	60b9      	str	r1, [r7, #8]
 800fdd2:	607a      	str	r2, [r7, #4]
 800fdd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	6a1b      	ldr	r3, [r3, #32]
 800fdda:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	69db      	ldr	r3, [r3, #28]
 800fde6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	6a1b      	ldr	r3, [r3, #32]
 800fdec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800fdee:	697b      	ldr	r3, [r7, #20]
 800fdf0:	f023 0303 	bic.w	r3, r3, #3
 800fdf4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800fdf6:	697a      	ldr	r2, [r7, #20]
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	4313      	orrs	r3, r2
 800fdfc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800fdfe:	697b      	ldr	r3, [r7, #20]
 800fe00:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800fe04:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800fe06:	683b      	ldr	r3, [r7, #0]
 800fe08:	011b      	lsls	r3, r3, #4
 800fe0a:	b2db      	uxtb	r3, r3
 800fe0c:	697a      	ldr	r2, [r7, #20]
 800fe0e:	4313      	orrs	r3, r2
 800fe10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800fe12:	693b      	ldr	r3, [r7, #16]
 800fe14:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800fe18:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800fe1a:	68bb      	ldr	r3, [r7, #8]
 800fe1c:	021b      	lsls	r3, r3, #8
 800fe1e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800fe22:	693a      	ldr	r2, [r7, #16]
 800fe24:	4313      	orrs	r3, r2
 800fe26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	697a      	ldr	r2, [r7, #20]
 800fe2c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	693a      	ldr	r2, [r7, #16]
 800fe32:	621a      	str	r2, [r3, #32]
}
 800fe34:	bf00      	nop
 800fe36:	371c      	adds	r7, #28
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3e:	4770      	bx	lr

0800fe40 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fe40:	b480      	push	{r7}
 800fe42:	b087      	sub	sp, #28
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	60f8      	str	r0, [r7, #12]
 800fe48:	60b9      	str	r1, [r7, #8]
 800fe4a:	607a      	str	r2, [r7, #4]
 800fe4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	6a1b      	ldr	r3, [r3, #32]
 800fe52:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	69db      	ldr	r3, [r3, #28]
 800fe5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	6a1b      	ldr	r3, [r3, #32]
 800fe64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800fe66:	697b      	ldr	r3, [r7, #20]
 800fe68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fe6c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	021b      	lsls	r3, r3, #8
 800fe72:	697a      	ldr	r2, [r7, #20]
 800fe74:	4313      	orrs	r3, r2
 800fe76:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800fe78:	697b      	ldr	r3, [r7, #20]
 800fe7a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800fe7e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	031b      	lsls	r3, r3, #12
 800fe84:	b29b      	uxth	r3, r3
 800fe86:	697a      	ldr	r2, [r7, #20]
 800fe88:	4313      	orrs	r3, r2
 800fe8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800fe8c:	693b      	ldr	r3, [r7, #16]
 800fe8e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800fe92:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800fe94:	68bb      	ldr	r3, [r7, #8]
 800fe96:	031b      	lsls	r3, r3, #12
 800fe98:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800fe9c:	693a      	ldr	r2, [r7, #16]
 800fe9e:	4313      	orrs	r3, r2
 800fea0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	697a      	ldr	r2, [r7, #20]
 800fea6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	693a      	ldr	r2, [r7, #16]
 800feac:	621a      	str	r2, [r3, #32]
}
 800feae:	bf00      	nop
 800feb0:	371c      	adds	r7, #28
 800feb2:	46bd      	mov	sp, r7
 800feb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb8:	4770      	bx	lr
	...

0800febc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800febc:	b480      	push	{r7}
 800febe:	b085      	sub	sp, #20
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
 800fec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	689b      	ldr	r3, [r3, #8]
 800feca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fecc:	68fa      	ldr	r2, [r7, #12]
 800fece:	4b09      	ldr	r3, [pc, #36]	@ (800fef4 <TIM_ITRx_SetConfig+0x38>)
 800fed0:	4013      	ands	r3, r2
 800fed2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fed4:	683a      	ldr	r2, [r7, #0]
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	4313      	orrs	r3, r2
 800feda:	f043 0307 	orr.w	r3, r3, #7
 800fede:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	68fa      	ldr	r2, [r7, #12]
 800fee4:	609a      	str	r2, [r3, #8]
}
 800fee6:	bf00      	nop
 800fee8:	3714      	adds	r7, #20
 800feea:	46bd      	mov	sp, r7
 800feec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef0:	4770      	bx	lr
 800fef2:	bf00      	nop
 800fef4:	ffcfff8f 	.word	0xffcfff8f

0800fef8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fef8:	b480      	push	{r7}
 800fefa:	b087      	sub	sp, #28
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	60f8      	str	r0, [r7, #12]
 800ff00:	60b9      	str	r1, [r7, #8]
 800ff02:	607a      	str	r2, [r7, #4]
 800ff04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	689b      	ldr	r3, [r3, #8]
 800ff0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ff0c:	697b      	ldr	r3, [r7, #20]
 800ff0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ff12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ff14:	683b      	ldr	r3, [r7, #0]
 800ff16:	021a      	lsls	r2, r3, #8
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	431a      	orrs	r2, r3
 800ff1c:	68bb      	ldr	r3, [r7, #8]
 800ff1e:	4313      	orrs	r3, r2
 800ff20:	697a      	ldr	r2, [r7, #20]
 800ff22:	4313      	orrs	r3, r2
 800ff24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	697a      	ldr	r2, [r7, #20]
 800ff2a:	609a      	str	r2, [r3, #8]
}
 800ff2c:	bf00      	nop
 800ff2e:	371c      	adds	r7, #28
 800ff30:	46bd      	mov	sp, r7
 800ff32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff36:	4770      	bx	lr

0800ff38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ff38:	b480      	push	{r7}
 800ff3a:	b087      	sub	sp, #28
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	60f8      	str	r0, [r7, #12]
 800ff40:	60b9      	str	r1, [r7, #8]
 800ff42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ff44:	68bb      	ldr	r3, [r7, #8]
 800ff46:	f003 031f 	and.w	r3, r3, #31
 800ff4a:	2201      	movs	r2, #1
 800ff4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ff50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	6a1a      	ldr	r2, [r3, #32]
 800ff56:	697b      	ldr	r3, [r7, #20]
 800ff58:	43db      	mvns	r3, r3
 800ff5a:	401a      	ands	r2, r3
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	6a1a      	ldr	r2, [r3, #32]
 800ff64:	68bb      	ldr	r3, [r7, #8]
 800ff66:	f003 031f 	and.w	r3, r3, #31
 800ff6a:	6879      	ldr	r1, [r7, #4]
 800ff6c:	fa01 f303 	lsl.w	r3, r1, r3
 800ff70:	431a      	orrs	r2, r3
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	621a      	str	r2, [r3, #32]
}
 800ff76:	bf00      	nop
 800ff78:	371c      	adds	r7, #28
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff80:	4770      	bx	lr
	...

0800ff84 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b084      	sub	sp, #16
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
 800ff8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ff8e:	683b      	ldr	r3, [r7, #0]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d109      	bne.n	800ffa8 <HAL_TIMEx_PWMN_Start+0x24>
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ff9a:	b2db      	uxtb	r3, r3
 800ff9c:	2b01      	cmp	r3, #1
 800ff9e:	bf14      	ite	ne
 800ffa0:	2301      	movne	r3, #1
 800ffa2:	2300      	moveq	r3, #0
 800ffa4:	b2db      	uxtb	r3, r3
 800ffa6:	e022      	b.n	800ffee <HAL_TIMEx_PWMN_Start+0x6a>
 800ffa8:	683b      	ldr	r3, [r7, #0]
 800ffaa:	2b04      	cmp	r3, #4
 800ffac:	d109      	bne.n	800ffc2 <HAL_TIMEx_PWMN_Start+0x3e>
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ffb4:	b2db      	uxtb	r3, r3
 800ffb6:	2b01      	cmp	r3, #1
 800ffb8:	bf14      	ite	ne
 800ffba:	2301      	movne	r3, #1
 800ffbc:	2300      	moveq	r3, #0
 800ffbe:	b2db      	uxtb	r3, r3
 800ffc0:	e015      	b.n	800ffee <HAL_TIMEx_PWMN_Start+0x6a>
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	2b08      	cmp	r3, #8
 800ffc6:	d109      	bne.n	800ffdc <HAL_TIMEx_PWMN_Start+0x58>
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800ffce:	b2db      	uxtb	r3, r3
 800ffd0:	2b01      	cmp	r3, #1
 800ffd2:	bf14      	ite	ne
 800ffd4:	2301      	movne	r3, #1
 800ffd6:	2300      	moveq	r3, #0
 800ffd8:	b2db      	uxtb	r3, r3
 800ffda:	e008      	b.n	800ffee <HAL_TIMEx_PWMN_Start+0x6a>
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800ffe2:	b2db      	uxtb	r3, r3
 800ffe4:	2b01      	cmp	r3, #1
 800ffe6:	bf14      	ite	ne
 800ffe8:	2301      	movne	r3, #1
 800ffea:	2300      	moveq	r3, #0
 800ffec:	b2db      	uxtb	r3, r3
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d001      	beq.n	800fff6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800fff2:	2301      	movs	r3, #1
 800fff4:	e07d      	b.n	80100f2 <HAL_TIMEx_PWMN_Start+0x16e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fff6:	683b      	ldr	r3, [r7, #0]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d104      	bne.n	8010006 <HAL_TIMEx_PWMN_Start+0x82>
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	2202      	movs	r2, #2
 8010000:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010004:	e013      	b.n	801002e <HAL_TIMEx_PWMN_Start+0xaa>
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	2b04      	cmp	r3, #4
 801000a:	d104      	bne.n	8010016 <HAL_TIMEx_PWMN_Start+0x92>
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	2202      	movs	r2, #2
 8010010:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010014:	e00b      	b.n	801002e <HAL_TIMEx_PWMN_Start+0xaa>
 8010016:	683b      	ldr	r3, [r7, #0]
 8010018:	2b08      	cmp	r3, #8
 801001a:	d104      	bne.n	8010026 <HAL_TIMEx_PWMN_Start+0xa2>
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	2202      	movs	r2, #2
 8010020:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8010024:	e003      	b.n	801002e <HAL_TIMEx_PWMN_Start+0xaa>
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	2202      	movs	r2, #2
 801002a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	2204      	movs	r2, #4
 8010034:	6839      	ldr	r1, [r7, #0]
 8010036:	4618      	mov	r0, r3
 8010038:	f000 fa0e 	bl	8010458 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801004a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	4a2a      	ldr	r2, [pc, #168]	@ (80100fc <HAL_TIMEx_PWMN_Start+0x178>)
 8010052:	4293      	cmp	r3, r2
 8010054:	d02c      	beq.n	80100b0 <HAL_TIMEx_PWMN_Start+0x12c>
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801005e:	d027      	beq.n	80100b0 <HAL_TIMEx_PWMN_Start+0x12c>
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	4a26      	ldr	r2, [pc, #152]	@ (8010100 <HAL_TIMEx_PWMN_Start+0x17c>)
 8010066:	4293      	cmp	r3, r2
 8010068:	d022      	beq.n	80100b0 <HAL_TIMEx_PWMN_Start+0x12c>
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	4a25      	ldr	r2, [pc, #148]	@ (8010104 <HAL_TIMEx_PWMN_Start+0x180>)
 8010070:	4293      	cmp	r3, r2
 8010072:	d01d      	beq.n	80100b0 <HAL_TIMEx_PWMN_Start+0x12c>
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	4a23      	ldr	r2, [pc, #140]	@ (8010108 <HAL_TIMEx_PWMN_Start+0x184>)
 801007a:	4293      	cmp	r3, r2
 801007c:	d018      	beq.n	80100b0 <HAL_TIMEx_PWMN_Start+0x12c>
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	4a22      	ldr	r2, [pc, #136]	@ (801010c <HAL_TIMEx_PWMN_Start+0x188>)
 8010084:	4293      	cmp	r3, r2
 8010086:	d013      	beq.n	80100b0 <HAL_TIMEx_PWMN_Start+0x12c>
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	4a20      	ldr	r2, [pc, #128]	@ (8010110 <HAL_TIMEx_PWMN_Start+0x18c>)
 801008e:	4293      	cmp	r3, r2
 8010090:	d00e      	beq.n	80100b0 <HAL_TIMEx_PWMN_Start+0x12c>
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	4a1f      	ldr	r2, [pc, #124]	@ (8010114 <HAL_TIMEx_PWMN_Start+0x190>)
 8010098:	4293      	cmp	r3, r2
 801009a:	d009      	beq.n	80100b0 <HAL_TIMEx_PWMN_Start+0x12c>
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	4a1d      	ldr	r2, [pc, #116]	@ (8010118 <HAL_TIMEx_PWMN_Start+0x194>)
 80100a2:	4293      	cmp	r3, r2
 80100a4:	d004      	beq.n	80100b0 <HAL_TIMEx_PWMN_Start+0x12c>
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	4a1c      	ldr	r2, [pc, #112]	@ (801011c <HAL_TIMEx_PWMN_Start+0x198>)
 80100ac:	4293      	cmp	r3, r2
 80100ae:	d115      	bne.n	80100dc <HAL_TIMEx_PWMN_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	689a      	ldr	r2, [r3, #8]
 80100b6:	4b1a      	ldr	r3, [pc, #104]	@ (8010120 <HAL_TIMEx_PWMN_Start+0x19c>)
 80100b8:	4013      	ands	r3, r2
 80100ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	2b06      	cmp	r3, #6
 80100c0:	d015      	beq.n	80100ee <HAL_TIMEx_PWMN_Start+0x16a>
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80100c8:	d011      	beq.n	80100ee <HAL_TIMEx_PWMN_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	681a      	ldr	r2, [r3, #0]
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	f042 0201 	orr.w	r2, r2, #1
 80100d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80100da:	e008      	b.n	80100ee <HAL_TIMEx_PWMN_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	681a      	ldr	r2, [r3, #0]
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	f042 0201 	orr.w	r2, r2, #1
 80100ea:	601a      	str	r2, [r3, #0]
 80100ec:	e000      	b.n	80100f0 <HAL_TIMEx_PWMN_Start+0x16c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80100ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80100f0:	2300      	movs	r3, #0
}
 80100f2:	4618      	mov	r0, r3
 80100f4:	3710      	adds	r7, #16
 80100f6:	46bd      	mov	sp, r7
 80100f8:	bd80      	pop	{r7, pc}
 80100fa:	bf00      	nop
 80100fc:	40010000 	.word	0x40010000
 8010100:	40000400 	.word	0x40000400
 8010104:	40000800 	.word	0x40000800
 8010108:	40000c00 	.word	0x40000c00
 801010c:	40010400 	.word	0x40010400
 8010110:	40001800 	.word	0x40001800
 8010114:	40014000 	.word	0x40014000
 8010118:	4000e000 	.word	0x4000e000
 801011c:	4000e400 	.word	0x4000e400
 8010120:	00010007 	.word	0x00010007

08010124 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b082      	sub	sp, #8
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
 801012c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	2200      	movs	r2, #0
 8010134:	6839      	ldr	r1, [r7, #0]
 8010136:	4618      	mov	r0, r3
 8010138:	f000 f98e 	bl	8010458 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	6a1a      	ldr	r2, [r3, #32]
 8010142:	f241 1311 	movw	r3, #4369	@ 0x1111
 8010146:	4013      	ands	r3, r2
 8010148:	2b00      	cmp	r3, #0
 801014a:	d10f      	bne.n	801016c <HAL_TIMEx_PWMN_Stop+0x48>
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	6a1a      	ldr	r2, [r3, #32]
 8010152:	f240 4344 	movw	r3, #1092	@ 0x444
 8010156:	4013      	ands	r3, r2
 8010158:	2b00      	cmp	r3, #0
 801015a:	d107      	bne.n	801016c <HAL_TIMEx_PWMN_Stop+0x48>
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801016a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	6a1a      	ldr	r2, [r3, #32]
 8010172:	f241 1311 	movw	r3, #4369	@ 0x1111
 8010176:	4013      	ands	r3, r2
 8010178:	2b00      	cmp	r3, #0
 801017a:	d10f      	bne.n	801019c <HAL_TIMEx_PWMN_Stop+0x78>
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	6a1a      	ldr	r2, [r3, #32]
 8010182:	f240 4344 	movw	r3, #1092	@ 0x444
 8010186:	4013      	ands	r3, r2
 8010188:	2b00      	cmp	r3, #0
 801018a:	d107      	bne.n	801019c <HAL_TIMEx_PWMN_Stop+0x78>
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	681a      	ldr	r2, [r3, #0]
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	f022 0201 	bic.w	r2, r2, #1
 801019a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801019c:	683b      	ldr	r3, [r7, #0]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d104      	bne.n	80101ac <HAL_TIMEx_PWMN_Stop+0x88>
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2201      	movs	r2, #1
 80101a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80101aa:	e013      	b.n	80101d4 <HAL_TIMEx_PWMN_Stop+0xb0>
 80101ac:	683b      	ldr	r3, [r7, #0]
 80101ae:	2b04      	cmp	r3, #4
 80101b0:	d104      	bne.n	80101bc <HAL_TIMEx_PWMN_Stop+0x98>
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	2201      	movs	r2, #1
 80101b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80101ba:	e00b      	b.n	80101d4 <HAL_TIMEx_PWMN_Stop+0xb0>
 80101bc:	683b      	ldr	r3, [r7, #0]
 80101be:	2b08      	cmp	r3, #8
 80101c0:	d104      	bne.n	80101cc <HAL_TIMEx_PWMN_Stop+0xa8>
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	2201      	movs	r2, #1
 80101c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80101ca:	e003      	b.n	80101d4 <HAL_TIMEx_PWMN_Stop+0xb0>
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2201      	movs	r2, #1
 80101d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 80101d4:	2300      	movs	r3, #0
}
 80101d6:	4618      	mov	r0, r3
 80101d8:	3708      	adds	r7, #8
 80101da:	46bd      	mov	sp, r7
 80101dc:	bd80      	pop	{r7, pc}
	...

080101e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80101e0:	b480      	push	{r7}
 80101e2:	b085      	sub	sp, #20
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
 80101e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80101f0:	2b01      	cmp	r3, #1
 80101f2:	d101      	bne.n	80101f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80101f4:	2302      	movs	r3, #2
 80101f6:	e077      	b.n	80102e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	2201      	movs	r2, #1
 80101fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	2202      	movs	r2, #2
 8010204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	685b      	ldr	r3, [r3, #4]
 801020e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	689b      	ldr	r3, [r3, #8]
 8010216:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	4a35      	ldr	r2, [pc, #212]	@ (80102f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801021e:	4293      	cmp	r3, r2
 8010220:	d004      	beq.n	801022c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	4a34      	ldr	r2, [pc, #208]	@ (80102f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010228:	4293      	cmp	r3, r2
 801022a:	d108      	bne.n	801023e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8010232:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	685b      	ldr	r3, [r3, #4]
 8010238:	68fa      	ldr	r2, [r7, #12]
 801023a:	4313      	orrs	r3, r2
 801023c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010244:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010246:	683b      	ldr	r3, [r7, #0]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	68fa      	ldr	r2, [r7, #12]
 801024c:	4313      	orrs	r3, r2
 801024e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	68fa      	ldr	r2, [r7, #12]
 8010256:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	4a25      	ldr	r2, [pc, #148]	@ (80102f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801025e:	4293      	cmp	r3, r2
 8010260:	d02c      	beq.n	80102bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801026a:	d027      	beq.n	80102bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	4a22      	ldr	r2, [pc, #136]	@ (80102fc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8010272:	4293      	cmp	r3, r2
 8010274:	d022      	beq.n	80102bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	4a21      	ldr	r2, [pc, #132]	@ (8010300 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 801027c:	4293      	cmp	r3, r2
 801027e:	d01d      	beq.n	80102bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	4a1f      	ldr	r2, [pc, #124]	@ (8010304 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8010286:	4293      	cmp	r3, r2
 8010288:	d018      	beq.n	80102bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	4a1a      	ldr	r2, [pc, #104]	@ (80102f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010290:	4293      	cmp	r3, r2
 8010292:	d013      	beq.n	80102bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	4a1b      	ldr	r2, [pc, #108]	@ (8010308 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 801029a:	4293      	cmp	r3, r2
 801029c:	d00e      	beq.n	80102bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	4a1a      	ldr	r2, [pc, #104]	@ (801030c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80102a4:	4293      	cmp	r3, r2
 80102a6:	d009      	beq.n	80102bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	4a18      	ldr	r2, [pc, #96]	@ (8010310 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80102ae:	4293      	cmp	r3, r2
 80102b0:	d004      	beq.n	80102bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	4a17      	ldr	r2, [pc, #92]	@ (8010314 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80102b8:	4293      	cmp	r3, r2
 80102ba:	d10c      	bne.n	80102d6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80102bc:	68bb      	ldr	r3, [r7, #8]
 80102be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80102c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80102c4:	683b      	ldr	r3, [r7, #0]
 80102c6:	689b      	ldr	r3, [r3, #8]
 80102c8:	68ba      	ldr	r2, [r7, #8]
 80102ca:	4313      	orrs	r3, r2
 80102cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	68ba      	ldr	r2, [r7, #8]
 80102d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	2201      	movs	r2, #1
 80102da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	2200      	movs	r2, #0
 80102e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80102e6:	2300      	movs	r3, #0
}
 80102e8:	4618      	mov	r0, r3
 80102ea:	3714      	adds	r7, #20
 80102ec:	46bd      	mov	sp, r7
 80102ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f2:	4770      	bx	lr
 80102f4:	40010000 	.word	0x40010000
 80102f8:	40010400 	.word	0x40010400
 80102fc:	40000400 	.word	0x40000400
 8010300:	40000800 	.word	0x40000800
 8010304:	40000c00 	.word	0x40000c00
 8010308:	40001800 	.word	0x40001800
 801030c:	40014000 	.word	0x40014000
 8010310:	4000e000 	.word	0x4000e000
 8010314:	4000e400 	.word	0x4000e400

08010318 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010318:	b480      	push	{r7}
 801031a:	b085      	sub	sp, #20
 801031c:	af00      	add	r7, sp, #0
 801031e:	6078      	str	r0, [r7, #4]
 8010320:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010322:	2300      	movs	r3, #0
 8010324:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801032c:	2b01      	cmp	r3, #1
 801032e:	d101      	bne.n	8010334 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010330:	2302      	movs	r3, #2
 8010332:	e087      	b.n	8010444 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	2201      	movs	r2, #1
 8010338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8010342:	683b      	ldr	r3, [r7, #0]
 8010344:	68db      	ldr	r3, [r3, #12]
 8010346:	4313      	orrs	r3, r2
 8010348:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010350:	683b      	ldr	r3, [r7, #0]
 8010352:	689b      	ldr	r3, [r3, #8]
 8010354:	4313      	orrs	r3, r2
 8010356:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801035e:	683b      	ldr	r3, [r7, #0]
 8010360:	685b      	ldr	r3, [r3, #4]
 8010362:	4313      	orrs	r3, r2
 8010364:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 801036c:	683b      	ldr	r3, [r7, #0]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	4313      	orrs	r3, r2
 8010372:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801037a:	683b      	ldr	r3, [r7, #0]
 801037c:	691b      	ldr	r3, [r3, #16]
 801037e:	4313      	orrs	r3, r2
 8010380:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	695b      	ldr	r3, [r3, #20]
 801038c:	4313      	orrs	r3, r2
 801038e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8010396:	683b      	ldr	r3, [r7, #0]
 8010398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801039a:	4313      	orrs	r3, r2
 801039c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80103a4:	683b      	ldr	r3, [r7, #0]
 80103a6:	699b      	ldr	r3, [r3, #24]
 80103a8:	041b      	lsls	r3, r3, #16
 80103aa:	4313      	orrs	r3, r2
 80103ac:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	4a27      	ldr	r2, [pc, #156]	@ (8010450 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80103b4:	4293      	cmp	r3, r2
 80103b6:	d004      	beq.n	80103c2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	4a25      	ldr	r2, [pc, #148]	@ (8010454 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80103be:	4293      	cmp	r3, r2
 80103c0:	d106      	bne.n	80103d0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80103c8:	683b      	ldr	r3, [r7, #0]
 80103ca:	69db      	ldr	r3, [r3, #28]
 80103cc:	4313      	orrs	r3, r2
 80103ce:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	4a1e      	ldr	r2, [pc, #120]	@ (8010450 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80103d6:	4293      	cmp	r3, r2
 80103d8:	d004      	beq.n	80103e4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	4a1d      	ldr	r2, [pc, #116]	@ (8010454 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80103e0:	4293      	cmp	r3, r2
 80103e2:	d126      	bne.n	8010432 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80103ea:	683b      	ldr	r3, [r7, #0]
 80103ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80103ee:	051b      	lsls	r3, r3, #20
 80103f0:	4313      	orrs	r3, r2
 80103f2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80103fa:	683b      	ldr	r3, [r7, #0]
 80103fc:	6a1b      	ldr	r3, [r3, #32]
 80103fe:	4313      	orrs	r3, r2
 8010400:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801040c:	4313      	orrs	r3, r2
 801040e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	4a0e      	ldr	r2, [pc, #56]	@ (8010450 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8010416:	4293      	cmp	r3, r2
 8010418:	d004      	beq.n	8010424 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	4a0d      	ldr	r2, [pc, #52]	@ (8010454 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8010420:	4293      	cmp	r3, r2
 8010422:	d106      	bne.n	8010432 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 801042a:	683b      	ldr	r3, [r7, #0]
 801042c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801042e:	4313      	orrs	r3, r2
 8010430:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	68fa      	ldr	r2, [r7, #12]
 8010438:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	2200      	movs	r2, #0
 801043e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010442:	2300      	movs	r3, #0
}
 8010444:	4618      	mov	r0, r3
 8010446:	3714      	adds	r7, #20
 8010448:	46bd      	mov	sp, r7
 801044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044e:	4770      	bx	lr
 8010450:	40010000 	.word	0x40010000
 8010454:	40010400 	.word	0x40010400

08010458 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8010458:	b480      	push	{r7}
 801045a:	b087      	sub	sp, #28
 801045c:	af00      	add	r7, sp, #0
 801045e:	60f8      	str	r0, [r7, #12]
 8010460:	60b9      	str	r1, [r7, #8]
 8010462:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010464:	68bb      	ldr	r3, [r7, #8]
 8010466:	f003 031f 	and.w	r3, r3, #31
 801046a:	2204      	movs	r2, #4
 801046c:	fa02 f303 	lsl.w	r3, r2, r3
 8010470:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	6a1a      	ldr	r2, [r3, #32]
 8010476:	697b      	ldr	r3, [r7, #20]
 8010478:	43db      	mvns	r3, r3
 801047a:	401a      	ands	r2, r3
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	6a1a      	ldr	r2, [r3, #32]
 8010484:	68bb      	ldr	r3, [r7, #8]
 8010486:	f003 031f 	and.w	r3, r3, #31
 801048a:	6879      	ldr	r1, [r7, #4]
 801048c:	fa01 f303 	lsl.w	r3, r1, r3
 8010490:	431a      	orrs	r2, r3
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	621a      	str	r2, [r3, #32]
}
 8010496:	bf00      	nop
 8010498:	371c      	adds	r7, #28
 801049a:	46bd      	mov	sp, r7
 801049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a0:	4770      	bx	lr

080104a2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80104a2:	b580      	push	{r7, lr}
 80104a4:	b082      	sub	sp, #8
 80104a6:	af00      	add	r7, sp, #0
 80104a8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d101      	bne.n	80104b4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80104b0:	2301      	movs	r3, #1
 80104b2:	e042      	b.n	801053a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d106      	bne.n	80104cc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	2200      	movs	r2, #0
 80104c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80104c6:	6878      	ldr	r0, [r7, #4]
 80104c8:	f7f3 ff84 	bl	80043d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	2224      	movs	r2, #36	@ 0x24
 80104d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	681a      	ldr	r2, [r3, #0]
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	f022 0201 	bic.w	r2, r2, #1
 80104e2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80104e4:	6878      	ldr	r0, [r7, #4]
 80104e6:	f000 f983 	bl	80107f0 <UART_SetConfig>
 80104ea:	4603      	mov	r3, r0
 80104ec:	2b01      	cmp	r3, #1
 80104ee:	d101      	bne.n	80104f4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80104f0:	2301      	movs	r3, #1
 80104f2:	e022      	b.n	801053a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d002      	beq.n	8010502 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80104fc:	6878      	ldr	r0, [r7, #4]
 80104fe:	f000 ffe3 	bl	80114c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	685a      	ldr	r2, [r3, #4]
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010510:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	689a      	ldr	r2, [r3, #8]
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010520:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	681a      	ldr	r2, [r3, #0]
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	f042 0201 	orr.w	r2, r2, #1
 8010530:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010532:	6878      	ldr	r0, [r7, #4]
 8010534:	f001 f86a 	bl	801160c <UART_CheckIdleState>
 8010538:	4603      	mov	r3, r0
}
 801053a:	4618      	mov	r0, r3
 801053c:	3708      	adds	r7, #8
 801053e:	46bd      	mov	sp, r7
 8010540:	bd80      	pop	{r7, pc}

08010542 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010542:	b580      	push	{r7, lr}
 8010544:	b08a      	sub	sp, #40	@ 0x28
 8010546:	af02      	add	r7, sp, #8
 8010548:	60f8      	str	r0, [r7, #12]
 801054a:	60b9      	str	r1, [r7, #8]
 801054c:	603b      	str	r3, [r7, #0]
 801054e:	4613      	mov	r3, r2
 8010550:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010558:	2b20      	cmp	r3, #32
 801055a:	d17b      	bne.n	8010654 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801055c:	68bb      	ldr	r3, [r7, #8]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d002      	beq.n	8010568 <HAL_UART_Transmit+0x26>
 8010562:	88fb      	ldrh	r3, [r7, #6]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d101      	bne.n	801056c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8010568:	2301      	movs	r3, #1
 801056a:	e074      	b.n	8010656 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	2200      	movs	r2, #0
 8010570:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	2221      	movs	r2, #33	@ 0x21
 8010578:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801057c:	f7f4 fbb0 	bl	8004ce0 <HAL_GetTick>
 8010580:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	88fa      	ldrh	r2, [r7, #6]
 8010586:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	88fa      	ldrh	r2, [r7, #6]
 801058e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	689b      	ldr	r3, [r3, #8]
 8010596:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801059a:	d108      	bne.n	80105ae <HAL_UART_Transmit+0x6c>
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	691b      	ldr	r3, [r3, #16]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d104      	bne.n	80105ae <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80105a4:	2300      	movs	r3, #0
 80105a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80105a8:	68bb      	ldr	r3, [r7, #8]
 80105aa:	61bb      	str	r3, [r7, #24]
 80105ac:	e003      	b.n	80105b6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80105ae:	68bb      	ldr	r3, [r7, #8]
 80105b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80105b2:	2300      	movs	r3, #0
 80105b4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80105b6:	e030      	b.n	801061a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80105b8:	683b      	ldr	r3, [r7, #0]
 80105ba:	9300      	str	r3, [sp, #0]
 80105bc:	697b      	ldr	r3, [r7, #20]
 80105be:	2200      	movs	r2, #0
 80105c0:	2180      	movs	r1, #128	@ 0x80
 80105c2:	68f8      	ldr	r0, [r7, #12]
 80105c4:	f001 f8cc 	bl	8011760 <UART_WaitOnFlagUntilTimeout>
 80105c8:	4603      	mov	r3, r0
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d005      	beq.n	80105da <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	2220      	movs	r2, #32
 80105d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80105d6:	2303      	movs	r3, #3
 80105d8:	e03d      	b.n	8010656 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80105da:	69fb      	ldr	r3, [r7, #28]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d10b      	bne.n	80105f8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80105e0:	69bb      	ldr	r3, [r7, #24]
 80105e2:	881b      	ldrh	r3, [r3, #0]
 80105e4:	461a      	mov	r2, r3
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80105ee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80105f0:	69bb      	ldr	r3, [r7, #24]
 80105f2:	3302      	adds	r3, #2
 80105f4:	61bb      	str	r3, [r7, #24]
 80105f6:	e007      	b.n	8010608 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80105f8:	69fb      	ldr	r3, [r7, #28]
 80105fa:	781a      	ldrb	r2, [r3, #0]
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8010602:	69fb      	ldr	r3, [r7, #28]
 8010604:	3301      	adds	r3, #1
 8010606:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801060e:	b29b      	uxth	r3, r3
 8010610:	3b01      	subs	r3, #1
 8010612:	b29a      	uxth	r2, r3
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010620:	b29b      	uxth	r3, r3
 8010622:	2b00      	cmp	r3, #0
 8010624:	d1c8      	bne.n	80105b8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010626:	683b      	ldr	r3, [r7, #0]
 8010628:	9300      	str	r3, [sp, #0]
 801062a:	697b      	ldr	r3, [r7, #20]
 801062c:	2200      	movs	r2, #0
 801062e:	2140      	movs	r1, #64	@ 0x40
 8010630:	68f8      	ldr	r0, [r7, #12]
 8010632:	f001 f895 	bl	8011760 <UART_WaitOnFlagUntilTimeout>
 8010636:	4603      	mov	r3, r0
 8010638:	2b00      	cmp	r3, #0
 801063a:	d005      	beq.n	8010648 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	2220      	movs	r2, #32
 8010640:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8010644:	2303      	movs	r3, #3
 8010646:	e006      	b.n	8010656 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	2220      	movs	r2, #32
 801064c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8010650:	2300      	movs	r3, #0
 8010652:	e000      	b.n	8010656 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8010654:	2302      	movs	r3, #2
  }
}
 8010656:	4618      	mov	r0, r3
 8010658:	3720      	adds	r7, #32
 801065a:	46bd      	mov	sp, r7
 801065c:	bd80      	pop	{r7, pc}

0801065e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801065e:	b580      	push	{r7, lr}
 8010660:	b08a      	sub	sp, #40	@ 0x28
 8010662:	af02      	add	r7, sp, #8
 8010664:	60f8      	str	r0, [r7, #12]
 8010666:	60b9      	str	r1, [r7, #8]
 8010668:	603b      	str	r3, [r7, #0]
 801066a:	4613      	mov	r3, r2
 801066c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010674:	2b20      	cmp	r3, #32
 8010676:	f040 80b5 	bne.w	80107e4 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 801067a:	68bb      	ldr	r3, [r7, #8]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d002      	beq.n	8010686 <HAL_UART_Receive+0x28>
 8010680:	88fb      	ldrh	r3, [r7, #6]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d101      	bne.n	801068a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8010686:	2301      	movs	r3, #1
 8010688:	e0ad      	b.n	80107e6 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	2200      	movs	r2, #0
 801068e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	2222      	movs	r2, #34	@ 0x22
 8010696:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	2200      	movs	r2, #0
 801069e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80106a0:	f7f4 fb1e 	bl	8004ce0 <HAL_GetTick>
 80106a4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	88fa      	ldrh	r2, [r7, #6]
 80106aa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	88fa      	ldrh	r2, [r7, #6]
 80106b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	689b      	ldr	r3, [r3, #8]
 80106ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80106be:	d10e      	bne.n	80106de <HAL_UART_Receive+0x80>
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	691b      	ldr	r3, [r3, #16]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d105      	bne.n	80106d4 <HAL_UART_Receive+0x76>
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80106ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80106d2:	e02d      	b.n	8010730 <HAL_UART_Receive+0xd2>
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	22ff      	movs	r2, #255	@ 0xff
 80106d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80106dc:	e028      	b.n	8010730 <HAL_UART_Receive+0xd2>
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	689b      	ldr	r3, [r3, #8]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d10d      	bne.n	8010702 <HAL_UART_Receive+0xa4>
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	691b      	ldr	r3, [r3, #16]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d104      	bne.n	80106f8 <HAL_UART_Receive+0x9a>
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	22ff      	movs	r2, #255	@ 0xff
 80106f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80106f6:	e01b      	b.n	8010730 <HAL_UART_Receive+0xd2>
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	227f      	movs	r2, #127	@ 0x7f
 80106fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010700:	e016      	b.n	8010730 <HAL_UART_Receive+0xd2>
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	689b      	ldr	r3, [r3, #8]
 8010706:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801070a:	d10d      	bne.n	8010728 <HAL_UART_Receive+0xca>
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	691b      	ldr	r3, [r3, #16]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d104      	bne.n	801071e <HAL_UART_Receive+0xc0>
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	227f      	movs	r2, #127	@ 0x7f
 8010718:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801071c:	e008      	b.n	8010730 <HAL_UART_Receive+0xd2>
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	223f      	movs	r2, #63	@ 0x3f
 8010722:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010726:	e003      	b.n	8010730 <HAL_UART_Receive+0xd2>
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	2200      	movs	r2, #0
 801072c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010736:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	689b      	ldr	r3, [r3, #8]
 801073c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010740:	d108      	bne.n	8010754 <HAL_UART_Receive+0xf6>
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	691b      	ldr	r3, [r3, #16]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d104      	bne.n	8010754 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 801074a:	2300      	movs	r3, #0
 801074c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	61bb      	str	r3, [r7, #24]
 8010752:	e003      	b.n	801075c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8010754:	68bb      	ldr	r3, [r7, #8]
 8010756:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010758:	2300      	movs	r3, #0
 801075a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 801075c:	e036      	b.n	80107cc <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 801075e:	683b      	ldr	r3, [r7, #0]
 8010760:	9300      	str	r3, [sp, #0]
 8010762:	697b      	ldr	r3, [r7, #20]
 8010764:	2200      	movs	r2, #0
 8010766:	2120      	movs	r1, #32
 8010768:	68f8      	ldr	r0, [r7, #12]
 801076a:	f000 fff9 	bl	8011760 <UART_WaitOnFlagUntilTimeout>
 801076e:	4603      	mov	r3, r0
 8010770:	2b00      	cmp	r3, #0
 8010772:	d005      	beq.n	8010780 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	2220      	movs	r2, #32
 8010778:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 801077c:	2303      	movs	r3, #3
 801077e:	e032      	b.n	80107e6 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8010780:	69fb      	ldr	r3, [r7, #28]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d10c      	bne.n	80107a0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801078c:	b29a      	uxth	r2, r3
 801078e:	8a7b      	ldrh	r3, [r7, #18]
 8010790:	4013      	ands	r3, r2
 8010792:	b29a      	uxth	r2, r3
 8010794:	69bb      	ldr	r3, [r7, #24]
 8010796:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8010798:	69bb      	ldr	r3, [r7, #24]
 801079a:	3302      	adds	r3, #2
 801079c:	61bb      	str	r3, [r7, #24]
 801079e:	e00c      	b.n	80107ba <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107a6:	b2da      	uxtb	r2, r3
 80107a8:	8a7b      	ldrh	r3, [r7, #18]
 80107aa:	b2db      	uxtb	r3, r3
 80107ac:	4013      	ands	r3, r2
 80107ae:	b2da      	uxtb	r2, r3
 80107b0:	69fb      	ldr	r3, [r7, #28]
 80107b2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80107b4:	69fb      	ldr	r3, [r7, #28]
 80107b6:	3301      	adds	r3, #1
 80107b8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80107c0:	b29b      	uxth	r3, r3
 80107c2:	3b01      	subs	r3, #1
 80107c4:	b29a      	uxth	r2, r3
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80107d2:	b29b      	uxth	r3, r3
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d1c2      	bne.n	801075e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	2220      	movs	r2, #32
 80107dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80107e0:	2300      	movs	r3, #0
 80107e2:	e000      	b.n	80107e6 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80107e4:	2302      	movs	r3, #2
  }
}
 80107e6:	4618      	mov	r0, r3
 80107e8:	3720      	adds	r7, #32
 80107ea:	46bd      	mov	sp, r7
 80107ec:	bd80      	pop	{r7, pc}
	...

080107f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80107f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80107f4:	b092      	sub	sp, #72	@ 0x48
 80107f6:	af00      	add	r7, sp, #0
 80107f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80107fa:	2300      	movs	r3, #0
 80107fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010800:	697b      	ldr	r3, [r7, #20]
 8010802:	689a      	ldr	r2, [r3, #8]
 8010804:	697b      	ldr	r3, [r7, #20]
 8010806:	691b      	ldr	r3, [r3, #16]
 8010808:	431a      	orrs	r2, r3
 801080a:	697b      	ldr	r3, [r7, #20]
 801080c:	695b      	ldr	r3, [r3, #20]
 801080e:	431a      	orrs	r2, r3
 8010810:	697b      	ldr	r3, [r7, #20]
 8010812:	69db      	ldr	r3, [r3, #28]
 8010814:	4313      	orrs	r3, r2
 8010816:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010818:	697b      	ldr	r3, [r7, #20]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	681a      	ldr	r2, [r3, #0]
 801081e:	4bbe      	ldr	r3, [pc, #760]	@ (8010b18 <UART_SetConfig+0x328>)
 8010820:	4013      	ands	r3, r2
 8010822:	697a      	ldr	r2, [r7, #20]
 8010824:	6812      	ldr	r2, [r2, #0]
 8010826:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010828:	430b      	orrs	r3, r1
 801082a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801082c:	697b      	ldr	r3, [r7, #20]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	685b      	ldr	r3, [r3, #4]
 8010832:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8010836:	697b      	ldr	r3, [r7, #20]
 8010838:	68da      	ldr	r2, [r3, #12]
 801083a:	697b      	ldr	r3, [r7, #20]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	430a      	orrs	r2, r1
 8010840:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010842:	697b      	ldr	r3, [r7, #20]
 8010844:	699b      	ldr	r3, [r3, #24]
 8010846:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010848:	697b      	ldr	r3, [r7, #20]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	4ab3      	ldr	r2, [pc, #716]	@ (8010b1c <UART_SetConfig+0x32c>)
 801084e:	4293      	cmp	r3, r2
 8010850:	d004      	beq.n	801085c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010852:	697b      	ldr	r3, [r7, #20]
 8010854:	6a1b      	ldr	r3, [r3, #32]
 8010856:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010858:	4313      	orrs	r3, r2
 801085a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801085c:	697b      	ldr	r3, [r7, #20]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	689a      	ldr	r2, [r3, #8]
 8010862:	4baf      	ldr	r3, [pc, #700]	@ (8010b20 <UART_SetConfig+0x330>)
 8010864:	4013      	ands	r3, r2
 8010866:	697a      	ldr	r2, [r7, #20]
 8010868:	6812      	ldr	r2, [r2, #0]
 801086a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801086c:	430b      	orrs	r3, r1
 801086e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010870:	697b      	ldr	r3, [r7, #20]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010876:	f023 010f 	bic.w	r1, r3, #15
 801087a:	697b      	ldr	r3, [r7, #20]
 801087c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801087e:	697b      	ldr	r3, [r7, #20]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	430a      	orrs	r2, r1
 8010884:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010886:	697b      	ldr	r3, [r7, #20]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	4aa6      	ldr	r2, [pc, #664]	@ (8010b24 <UART_SetConfig+0x334>)
 801088c:	4293      	cmp	r3, r2
 801088e:	d177      	bne.n	8010980 <UART_SetConfig+0x190>
 8010890:	4ba5      	ldr	r3, [pc, #660]	@ (8010b28 <UART_SetConfig+0x338>)
 8010892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010894:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010898:	2b28      	cmp	r3, #40	@ 0x28
 801089a:	d86d      	bhi.n	8010978 <UART_SetConfig+0x188>
 801089c:	a201      	add	r2, pc, #4	@ (adr r2, 80108a4 <UART_SetConfig+0xb4>)
 801089e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108a2:	bf00      	nop
 80108a4:	08010949 	.word	0x08010949
 80108a8:	08010979 	.word	0x08010979
 80108ac:	08010979 	.word	0x08010979
 80108b0:	08010979 	.word	0x08010979
 80108b4:	08010979 	.word	0x08010979
 80108b8:	08010979 	.word	0x08010979
 80108bc:	08010979 	.word	0x08010979
 80108c0:	08010979 	.word	0x08010979
 80108c4:	08010951 	.word	0x08010951
 80108c8:	08010979 	.word	0x08010979
 80108cc:	08010979 	.word	0x08010979
 80108d0:	08010979 	.word	0x08010979
 80108d4:	08010979 	.word	0x08010979
 80108d8:	08010979 	.word	0x08010979
 80108dc:	08010979 	.word	0x08010979
 80108e0:	08010979 	.word	0x08010979
 80108e4:	08010959 	.word	0x08010959
 80108e8:	08010979 	.word	0x08010979
 80108ec:	08010979 	.word	0x08010979
 80108f0:	08010979 	.word	0x08010979
 80108f4:	08010979 	.word	0x08010979
 80108f8:	08010979 	.word	0x08010979
 80108fc:	08010979 	.word	0x08010979
 8010900:	08010979 	.word	0x08010979
 8010904:	08010961 	.word	0x08010961
 8010908:	08010979 	.word	0x08010979
 801090c:	08010979 	.word	0x08010979
 8010910:	08010979 	.word	0x08010979
 8010914:	08010979 	.word	0x08010979
 8010918:	08010979 	.word	0x08010979
 801091c:	08010979 	.word	0x08010979
 8010920:	08010979 	.word	0x08010979
 8010924:	08010969 	.word	0x08010969
 8010928:	08010979 	.word	0x08010979
 801092c:	08010979 	.word	0x08010979
 8010930:	08010979 	.word	0x08010979
 8010934:	08010979 	.word	0x08010979
 8010938:	08010979 	.word	0x08010979
 801093c:	08010979 	.word	0x08010979
 8010940:	08010979 	.word	0x08010979
 8010944:	08010971 	.word	0x08010971
 8010948:	2301      	movs	r3, #1
 801094a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801094e:	e326      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010950:	2304      	movs	r3, #4
 8010952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010956:	e322      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010958:	2308      	movs	r3, #8
 801095a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801095e:	e31e      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010960:	2310      	movs	r3, #16
 8010962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010966:	e31a      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010968:	2320      	movs	r3, #32
 801096a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801096e:	e316      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010970:	2340      	movs	r3, #64	@ 0x40
 8010972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010976:	e312      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010978:	2380      	movs	r3, #128	@ 0x80
 801097a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801097e:	e30e      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010980:	697b      	ldr	r3, [r7, #20]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	4a69      	ldr	r2, [pc, #420]	@ (8010b2c <UART_SetConfig+0x33c>)
 8010986:	4293      	cmp	r3, r2
 8010988:	d130      	bne.n	80109ec <UART_SetConfig+0x1fc>
 801098a:	4b67      	ldr	r3, [pc, #412]	@ (8010b28 <UART_SetConfig+0x338>)
 801098c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801098e:	f003 0307 	and.w	r3, r3, #7
 8010992:	2b05      	cmp	r3, #5
 8010994:	d826      	bhi.n	80109e4 <UART_SetConfig+0x1f4>
 8010996:	a201      	add	r2, pc, #4	@ (adr r2, 801099c <UART_SetConfig+0x1ac>)
 8010998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801099c:	080109b5 	.word	0x080109b5
 80109a0:	080109bd 	.word	0x080109bd
 80109a4:	080109c5 	.word	0x080109c5
 80109a8:	080109cd 	.word	0x080109cd
 80109ac:	080109d5 	.word	0x080109d5
 80109b0:	080109dd 	.word	0x080109dd
 80109b4:	2300      	movs	r3, #0
 80109b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109ba:	e2f0      	b.n	8010f9e <UART_SetConfig+0x7ae>
 80109bc:	2304      	movs	r3, #4
 80109be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109c2:	e2ec      	b.n	8010f9e <UART_SetConfig+0x7ae>
 80109c4:	2308      	movs	r3, #8
 80109c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109ca:	e2e8      	b.n	8010f9e <UART_SetConfig+0x7ae>
 80109cc:	2310      	movs	r3, #16
 80109ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109d2:	e2e4      	b.n	8010f9e <UART_SetConfig+0x7ae>
 80109d4:	2320      	movs	r3, #32
 80109d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109da:	e2e0      	b.n	8010f9e <UART_SetConfig+0x7ae>
 80109dc:	2340      	movs	r3, #64	@ 0x40
 80109de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109e2:	e2dc      	b.n	8010f9e <UART_SetConfig+0x7ae>
 80109e4:	2380      	movs	r3, #128	@ 0x80
 80109e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109ea:	e2d8      	b.n	8010f9e <UART_SetConfig+0x7ae>
 80109ec:	697b      	ldr	r3, [r7, #20]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	4a4f      	ldr	r2, [pc, #316]	@ (8010b30 <UART_SetConfig+0x340>)
 80109f2:	4293      	cmp	r3, r2
 80109f4:	d130      	bne.n	8010a58 <UART_SetConfig+0x268>
 80109f6:	4b4c      	ldr	r3, [pc, #304]	@ (8010b28 <UART_SetConfig+0x338>)
 80109f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80109fa:	f003 0307 	and.w	r3, r3, #7
 80109fe:	2b05      	cmp	r3, #5
 8010a00:	d826      	bhi.n	8010a50 <UART_SetConfig+0x260>
 8010a02:	a201      	add	r2, pc, #4	@ (adr r2, 8010a08 <UART_SetConfig+0x218>)
 8010a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a08:	08010a21 	.word	0x08010a21
 8010a0c:	08010a29 	.word	0x08010a29
 8010a10:	08010a31 	.word	0x08010a31
 8010a14:	08010a39 	.word	0x08010a39
 8010a18:	08010a41 	.word	0x08010a41
 8010a1c:	08010a49 	.word	0x08010a49
 8010a20:	2300      	movs	r3, #0
 8010a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a26:	e2ba      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010a28:	2304      	movs	r3, #4
 8010a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a2e:	e2b6      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010a30:	2308      	movs	r3, #8
 8010a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a36:	e2b2      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010a38:	2310      	movs	r3, #16
 8010a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a3e:	e2ae      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010a40:	2320      	movs	r3, #32
 8010a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a46:	e2aa      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010a48:	2340      	movs	r3, #64	@ 0x40
 8010a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a4e:	e2a6      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010a50:	2380      	movs	r3, #128	@ 0x80
 8010a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a56:	e2a2      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010a58:	697b      	ldr	r3, [r7, #20]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	4a35      	ldr	r2, [pc, #212]	@ (8010b34 <UART_SetConfig+0x344>)
 8010a5e:	4293      	cmp	r3, r2
 8010a60:	d130      	bne.n	8010ac4 <UART_SetConfig+0x2d4>
 8010a62:	4b31      	ldr	r3, [pc, #196]	@ (8010b28 <UART_SetConfig+0x338>)
 8010a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010a66:	f003 0307 	and.w	r3, r3, #7
 8010a6a:	2b05      	cmp	r3, #5
 8010a6c:	d826      	bhi.n	8010abc <UART_SetConfig+0x2cc>
 8010a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8010a74 <UART_SetConfig+0x284>)
 8010a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a74:	08010a8d 	.word	0x08010a8d
 8010a78:	08010a95 	.word	0x08010a95
 8010a7c:	08010a9d 	.word	0x08010a9d
 8010a80:	08010aa5 	.word	0x08010aa5
 8010a84:	08010aad 	.word	0x08010aad
 8010a88:	08010ab5 	.word	0x08010ab5
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a92:	e284      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010a94:	2304      	movs	r3, #4
 8010a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a9a:	e280      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010a9c:	2308      	movs	r3, #8
 8010a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010aa2:	e27c      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010aa4:	2310      	movs	r3, #16
 8010aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010aaa:	e278      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010aac:	2320      	movs	r3, #32
 8010aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ab2:	e274      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010ab4:	2340      	movs	r3, #64	@ 0x40
 8010ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010aba:	e270      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010abc:	2380      	movs	r3, #128	@ 0x80
 8010abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ac2:	e26c      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010ac4:	697b      	ldr	r3, [r7, #20]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8010b38 <UART_SetConfig+0x348>)
 8010aca:	4293      	cmp	r3, r2
 8010acc:	d142      	bne.n	8010b54 <UART_SetConfig+0x364>
 8010ace:	4b16      	ldr	r3, [pc, #88]	@ (8010b28 <UART_SetConfig+0x338>)
 8010ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010ad2:	f003 0307 	and.w	r3, r3, #7
 8010ad6:	2b05      	cmp	r3, #5
 8010ad8:	d838      	bhi.n	8010b4c <UART_SetConfig+0x35c>
 8010ada:	a201      	add	r2, pc, #4	@ (adr r2, 8010ae0 <UART_SetConfig+0x2f0>)
 8010adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ae0:	08010af9 	.word	0x08010af9
 8010ae4:	08010b01 	.word	0x08010b01
 8010ae8:	08010b09 	.word	0x08010b09
 8010aec:	08010b11 	.word	0x08010b11
 8010af0:	08010b3d 	.word	0x08010b3d
 8010af4:	08010b45 	.word	0x08010b45
 8010af8:	2300      	movs	r3, #0
 8010afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010afe:	e24e      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010b00:	2304      	movs	r3, #4
 8010b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b06:	e24a      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010b08:	2308      	movs	r3, #8
 8010b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b0e:	e246      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010b10:	2310      	movs	r3, #16
 8010b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b16:	e242      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010b18:	cfff69f3 	.word	0xcfff69f3
 8010b1c:	58000c00 	.word	0x58000c00
 8010b20:	11fff4ff 	.word	0x11fff4ff
 8010b24:	40011000 	.word	0x40011000
 8010b28:	58024400 	.word	0x58024400
 8010b2c:	40004400 	.word	0x40004400
 8010b30:	40004800 	.word	0x40004800
 8010b34:	40004c00 	.word	0x40004c00
 8010b38:	40005000 	.word	0x40005000
 8010b3c:	2320      	movs	r3, #32
 8010b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b42:	e22c      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010b44:	2340      	movs	r3, #64	@ 0x40
 8010b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b4a:	e228      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010b4c:	2380      	movs	r3, #128	@ 0x80
 8010b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b52:	e224      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010b54:	697b      	ldr	r3, [r7, #20]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	4ab1      	ldr	r2, [pc, #708]	@ (8010e20 <UART_SetConfig+0x630>)
 8010b5a:	4293      	cmp	r3, r2
 8010b5c:	d176      	bne.n	8010c4c <UART_SetConfig+0x45c>
 8010b5e:	4bb1      	ldr	r3, [pc, #708]	@ (8010e24 <UART_SetConfig+0x634>)
 8010b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010b66:	2b28      	cmp	r3, #40	@ 0x28
 8010b68:	d86c      	bhi.n	8010c44 <UART_SetConfig+0x454>
 8010b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8010b70 <UART_SetConfig+0x380>)
 8010b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b70:	08010c15 	.word	0x08010c15
 8010b74:	08010c45 	.word	0x08010c45
 8010b78:	08010c45 	.word	0x08010c45
 8010b7c:	08010c45 	.word	0x08010c45
 8010b80:	08010c45 	.word	0x08010c45
 8010b84:	08010c45 	.word	0x08010c45
 8010b88:	08010c45 	.word	0x08010c45
 8010b8c:	08010c45 	.word	0x08010c45
 8010b90:	08010c1d 	.word	0x08010c1d
 8010b94:	08010c45 	.word	0x08010c45
 8010b98:	08010c45 	.word	0x08010c45
 8010b9c:	08010c45 	.word	0x08010c45
 8010ba0:	08010c45 	.word	0x08010c45
 8010ba4:	08010c45 	.word	0x08010c45
 8010ba8:	08010c45 	.word	0x08010c45
 8010bac:	08010c45 	.word	0x08010c45
 8010bb0:	08010c25 	.word	0x08010c25
 8010bb4:	08010c45 	.word	0x08010c45
 8010bb8:	08010c45 	.word	0x08010c45
 8010bbc:	08010c45 	.word	0x08010c45
 8010bc0:	08010c45 	.word	0x08010c45
 8010bc4:	08010c45 	.word	0x08010c45
 8010bc8:	08010c45 	.word	0x08010c45
 8010bcc:	08010c45 	.word	0x08010c45
 8010bd0:	08010c2d 	.word	0x08010c2d
 8010bd4:	08010c45 	.word	0x08010c45
 8010bd8:	08010c45 	.word	0x08010c45
 8010bdc:	08010c45 	.word	0x08010c45
 8010be0:	08010c45 	.word	0x08010c45
 8010be4:	08010c45 	.word	0x08010c45
 8010be8:	08010c45 	.word	0x08010c45
 8010bec:	08010c45 	.word	0x08010c45
 8010bf0:	08010c35 	.word	0x08010c35
 8010bf4:	08010c45 	.word	0x08010c45
 8010bf8:	08010c45 	.word	0x08010c45
 8010bfc:	08010c45 	.word	0x08010c45
 8010c00:	08010c45 	.word	0x08010c45
 8010c04:	08010c45 	.word	0x08010c45
 8010c08:	08010c45 	.word	0x08010c45
 8010c0c:	08010c45 	.word	0x08010c45
 8010c10:	08010c3d 	.word	0x08010c3d
 8010c14:	2301      	movs	r3, #1
 8010c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c1a:	e1c0      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010c1c:	2304      	movs	r3, #4
 8010c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c22:	e1bc      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010c24:	2308      	movs	r3, #8
 8010c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c2a:	e1b8      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010c2c:	2310      	movs	r3, #16
 8010c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c32:	e1b4      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010c34:	2320      	movs	r3, #32
 8010c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c3a:	e1b0      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010c3c:	2340      	movs	r3, #64	@ 0x40
 8010c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c42:	e1ac      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010c44:	2380      	movs	r3, #128	@ 0x80
 8010c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c4a:	e1a8      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010c4c:	697b      	ldr	r3, [r7, #20]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	4a75      	ldr	r2, [pc, #468]	@ (8010e28 <UART_SetConfig+0x638>)
 8010c52:	4293      	cmp	r3, r2
 8010c54:	d130      	bne.n	8010cb8 <UART_SetConfig+0x4c8>
 8010c56:	4b73      	ldr	r3, [pc, #460]	@ (8010e24 <UART_SetConfig+0x634>)
 8010c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010c5a:	f003 0307 	and.w	r3, r3, #7
 8010c5e:	2b05      	cmp	r3, #5
 8010c60:	d826      	bhi.n	8010cb0 <UART_SetConfig+0x4c0>
 8010c62:	a201      	add	r2, pc, #4	@ (adr r2, 8010c68 <UART_SetConfig+0x478>)
 8010c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c68:	08010c81 	.word	0x08010c81
 8010c6c:	08010c89 	.word	0x08010c89
 8010c70:	08010c91 	.word	0x08010c91
 8010c74:	08010c99 	.word	0x08010c99
 8010c78:	08010ca1 	.word	0x08010ca1
 8010c7c:	08010ca9 	.word	0x08010ca9
 8010c80:	2300      	movs	r3, #0
 8010c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c86:	e18a      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010c88:	2304      	movs	r3, #4
 8010c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c8e:	e186      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010c90:	2308      	movs	r3, #8
 8010c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c96:	e182      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010c98:	2310      	movs	r3, #16
 8010c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c9e:	e17e      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010ca0:	2320      	movs	r3, #32
 8010ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ca6:	e17a      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010ca8:	2340      	movs	r3, #64	@ 0x40
 8010caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cae:	e176      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010cb0:	2380      	movs	r3, #128	@ 0x80
 8010cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cb6:	e172      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010cb8:	697b      	ldr	r3, [r7, #20]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	4a5b      	ldr	r2, [pc, #364]	@ (8010e2c <UART_SetConfig+0x63c>)
 8010cbe:	4293      	cmp	r3, r2
 8010cc0:	d130      	bne.n	8010d24 <UART_SetConfig+0x534>
 8010cc2:	4b58      	ldr	r3, [pc, #352]	@ (8010e24 <UART_SetConfig+0x634>)
 8010cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010cc6:	f003 0307 	and.w	r3, r3, #7
 8010cca:	2b05      	cmp	r3, #5
 8010ccc:	d826      	bhi.n	8010d1c <UART_SetConfig+0x52c>
 8010cce:	a201      	add	r2, pc, #4	@ (adr r2, 8010cd4 <UART_SetConfig+0x4e4>)
 8010cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cd4:	08010ced 	.word	0x08010ced
 8010cd8:	08010cf5 	.word	0x08010cf5
 8010cdc:	08010cfd 	.word	0x08010cfd
 8010ce0:	08010d05 	.word	0x08010d05
 8010ce4:	08010d0d 	.word	0x08010d0d
 8010ce8:	08010d15 	.word	0x08010d15
 8010cec:	2300      	movs	r3, #0
 8010cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cf2:	e154      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010cf4:	2304      	movs	r3, #4
 8010cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cfa:	e150      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010cfc:	2308      	movs	r3, #8
 8010cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d02:	e14c      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010d04:	2310      	movs	r3, #16
 8010d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d0a:	e148      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010d0c:	2320      	movs	r3, #32
 8010d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d12:	e144      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010d14:	2340      	movs	r3, #64	@ 0x40
 8010d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d1a:	e140      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010d1c:	2380      	movs	r3, #128	@ 0x80
 8010d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d22:	e13c      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010d24:	697b      	ldr	r3, [r7, #20]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	4a41      	ldr	r2, [pc, #260]	@ (8010e30 <UART_SetConfig+0x640>)
 8010d2a:	4293      	cmp	r3, r2
 8010d2c:	f040 8082 	bne.w	8010e34 <UART_SetConfig+0x644>
 8010d30:	4b3c      	ldr	r3, [pc, #240]	@ (8010e24 <UART_SetConfig+0x634>)
 8010d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010d34:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010d38:	2b28      	cmp	r3, #40	@ 0x28
 8010d3a:	d86d      	bhi.n	8010e18 <UART_SetConfig+0x628>
 8010d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8010d44 <UART_SetConfig+0x554>)
 8010d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d42:	bf00      	nop
 8010d44:	08010de9 	.word	0x08010de9
 8010d48:	08010e19 	.word	0x08010e19
 8010d4c:	08010e19 	.word	0x08010e19
 8010d50:	08010e19 	.word	0x08010e19
 8010d54:	08010e19 	.word	0x08010e19
 8010d58:	08010e19 	.word	0x08010e19
 8010d5c:	08010e19 	.word	0x08010e19
 8010d60:	08010e19 	.word	0x08010e19
 8010d64:	08010df1 	.word	0x08010df1
 8010d68:	08010e19 	.word	0x08010e19
 8010d6c:	08010e19 	.word	0x08010e19
 8010d70:	08010e19 	.word	0x08010e19
 8010d74:	08010e19 	.word	0x08010e19
 8010d78:	08010e19 	.word	0x08010e19
 8010d7c:	08010e19 	.word	0x08010e19
 8010d80:	08010e19 	.word	0x08010e19
 8010d84:	08010df9 	.word	0x08010df9
 8010d88:	08010e19 	.word	0x08010e19
 8010d8c:	08010e19 	.word	0x08010e19
 8010d90:	08010e19 	.word	0x08010e19
 8010d94:	08010e19 	.word	0x08010e19
 8010d98:	08010e19 	.word	0x08010e19
 8010d9c:	08010e19 	.word	0x08010e19
 8010da0:	08010e19 	.word	0x08010e19
 8010da4:	08010e01 	.word	0x08010e01
 8010da8:	08010e19 	.word	0x08010e19
 8010dac:	08010e19 	.word	0x08010e19
 8010db0:	08010e19 	.word	0x08010e19
 8010db4:	08010e19 	.word	0x08010e19
 8010db8:	08010e19 	.word	0x08010e19
 8010dbc:	08010e19 	.word	0x08010e19
 8010dc0:	08010e19 	.word	0x08010e19
 8010dc4:	08010e09 	.word	0x08010e09
 8010dc8:	08010e19 	.word	0x08010e19
 8010dcc:	08010e19 	.word	0x08010e19
 8010dd0:	08010e19 	.word	0x08010e19
 8010dd4:	08010e19 	.word	0x08010e19
 8010dd8:	08010e19 	.word	0x08010e19
 8010ddc:	08010e19 	.word	0x08010e19
 8010de0:	08010e19 	.word	0x08010e19
 8010de4:	08010e11 	.word	0x08010e11
 8010de8:	2301      	movs	r3, #1
 8010dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dee:	e0d6      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010df0:	2304      	movs	r3, #4
 8010df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010df6:	e0d2      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010df8:	2308      	movs	r3, #8
 8010dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dfe:	e0ce      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010e00:	2310      	movs	r3, #16
 8010e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e06:	e0ca      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010e08:	2320      	movs	r3, #32
 8010e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e0e:	e0c6      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010e10:	2340      	movs	r3, #64	@ 0x40
 8010e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e16:	e0c2      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010e18:	2380      	movs	r3, #128	@ 0x80
 8010e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e1e:	e0be      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010e20:	40011400 	.word	0x40011400
 8010e24:	58024400 	.word	0x58024400
 8010e28:	40007800 	.word	0x40007800
 8010e2c:	40007c00 	.word	0x40007c00
 8010e30:	40011800 	.word	0x40011800
 8010e34:	697b      	ldr	r3, [r7, #20]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	4aad      	ldr	r2, [pc, #692]	@ (80110f0 <UART_SetConfig+0x900>)
 8010e3a:	4293      	cmp	r3, r2
 8010e3c:	d176      	bne.n	8010f2c <UART_SetConfig+0x73c>
 8010e3e:	4bad      	ldr	r3, [pc, #692]	@ (80110f4 <UART_SetConfig+0x904>)
 8010e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010e42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010e46:	2b28      	cmp	r3, #40	@ 0x28
 8010e48:	d86c      	bhi.n	8010f24 <UART_SetConfig+0x734>
 8010e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8010e50 <UART_SetConfig+0x660>)
 8010e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e50:	08010ef5 	.word	0x08010ef5
 8010e54:	08010f25 	.word	0x08010f25
 8010e58:	08010f25 	.word	0x08010f25
 8010e5c:	08010f25 	.word	0x08010f25
 8010e60:	08010f25 	.word	0x08010f25
 8010e64:	08010f25 	.word	0x08010f25
 8010e68:	08010f25 	.word	0x08010f25
 8010e6c:	08010f25 	.word	0x08010f25
 8010e70:	08010efd 	.word	0x08010efd
 8010e74:	08010f25 	.word	0x08010f25
 8010e78:	08010f25 	.word	0x08010f25
 8010e7c:	08010f25 	.word	0x08010f25
 8010e80:	08010f25 	.word	0x08010f25
 8010e84:	08010f25 	.word	0x08010f25
 8010e88:	08010f25 	.word	0x08010f25
 8010e8c:	08010f25 	.word	0x08010f25
 8010e90:	08010f05 	.word	0x08010f05
 8010e94:	08010f25 	.word	0x08010f25
 8010e98:	08010f25 	.word	0x08010f25
 8010e9c:	08010f25 	.word	0x08010f25
 8010ea0:	08010f25 	.word	0x08010f25
 8010ea4:	08010f25 	.word	0x08010f25
 8010ea8:	08010f25 	.word	0x08010f25
 8010eac:	08010f25 	.word	0x08010f25
 8010eb0:	08010f0d 	.word	0x08010f0d
 8010eb4:	08010f25 	.word	0x08010f25
 8010eb8:	08010f25 	.word	0x08010f25
 8010ebc:	08010f25 	.word	0x08010f25
 8010ec0:	08010f25 	.word	0x08010f25
 8010ec4:	08010f25 	.word	0x08010f25
 8010ec8:	08010f25 	.word	0x08010f25
 8010ecc:	08010f25 	.word	0x08010f25
 8010ed0:	08010f15 	.word	0x08010f15
 8010ed4:	08010f25 	.word	0x08010f25
 8010ed8:	08010f25 	.word	0x08010f25
 8010edc:	08010f25 	.word	0x08010f25
 8010ee0:	08010f25 	.word	0x08010f25
 8010ee4:	08010f25 	.word	0x08010f25
 8010ee8:	08010f25 	.word	0x08010f25
 8010eec:	08010f25 	.word	0x08010f25
 8010ef0:	08010f1d 	.word	0x08010f1d
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010efa:	e050      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010efc:	2304      	movs	r3, #4
 8010efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f02:	e04c      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010f04:	2308      	movs	r3, #8
 8010f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f0a:	e048      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010f0c:	2310      	movs	r3, #16
 8010f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f12:	e044      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010f14:	2320      	movs	r3, #32
 8010f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f1a:	e040      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010f1c:	2340      	movs	r3, #64	@ 0x40
 8010f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f22:	e03c      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010f24:	2380      	movs	r3, #128	@ 0x80
 8010f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f2a:	e038      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010f2c:	697b      	ldr	r3, [r7, #20]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	4a71      	ldr	r2, [pc, #452]	@ (80110f8 <UART_SetConfig+0x908>)
 8010f32:	4293      	cmp	r3, r2
 8010f34:	d130      	bne.n	8010f98 <UART_SetConfig+0x7a8>
 8010f36:	4b6f      	ldr	r3, [pc, #444]	@ (80110f4 <UART_SetConfig+0x904>)
 8010f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010f3a:	f003 0307 	and.w	r3, r3, #7
 8010f3e:	2b05      	cmp	r3, #5
 8010f40:	d826      	bhi.n	8010f90 <UART_SetConfig+0x7a0>
 8010f42:	a201      	add	r2, pc, #4	@ (adr r2, 8010f48 <UART_SetConfig+0x758>)
 8010f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f48:	08010f61 	.word	0x08010f61
 8010f4c:	08010f69 	.word	0x08010f69
 8010f50:	08010f71 	.word	0x08010f71
 8010f54:	08010f79 	.word	0x08010f79
 8010f58:	08010f81 	.word	0x08010f81
 8010f5c:	08010f89 	.word	0x08010f89
 8010f60:	2302      	movs	r3, #2
 8010f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f66:	e01a      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010f68:	2304      	movs	r3, #4
 8010f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f6e:	e016      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010f70:	2308      	movs	r3, #8
 8010f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f76:	e012      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010f78:	2310      	movs	r3, #16
 8010f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f7e:	e00e      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010f80:	2320      	movs	r3, #32
 8010f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f86:	e00a      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010f88:	2340      	movs	r3, #64	@ 0x40
 8010f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f8e:	e006      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010f90:	2380      	movs	r3, #128	@ 0x80
 8010f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f96:	e002      	b.n	8010f9e <UART_SetConfig+0x7ae>
 8010f98:	2380      	movs	r3, #128	@ 0x80
 8010f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010f9e:	697b      	ldr	r3, [r7, #20]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	4a55      	ldr	r2, [pc, #340]	@ (80110f8 <UART_SetConfig+0x908>)
 8010fa4:	4293      	cmp	r3, r2
 8010fa6:	f040 80f8 	bne.w	801119a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010faa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010fae:	2b20      	cmp	r3, #32
 8010fb0:	dc46      	bgt.n	8011040 <UART_SetConfig+0x850>
 8010fb2:	2b02      	cmp	r3, #2
 8010fb4:	db75      	blt.n	80110a2 <UART_SetConfig+0x8b2>
 8010fb6:	3b02      	subs	r3, #2
 8010fb8:	2b1e      	cmp	r3, #30
 8010fba:	d872      	bhi.n	80110a2 <UART_SetConfig+0x8b2>
 8010fbc:	a201      	add	r2, pc, #4	@ (adr r2, 8010fc4 <UART_SetConfig+0x7d4>)
 8010fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fc2:	bf00      	nop
 8010fc4:	08011047 	.word	0x08011047
 8010fc8:	080110a3 	.word	0x080110a3
 8010fcc:	0801104f 	.word	0x0801104f
 8010fd0:	080110a3 	.word	0x080110a3
 8010fd4:	080110a3 	.word	0x080110a3
 8010fd8:	080110a3 	.word	0x080110a3
 8010fdc:	0801105f 	.word	0x0801105f
 8010fe0:	080110a3 	.word	0x080110a3
 8010fe4:	080110a3 	.word	0x080110a3
 8010fe8:	080110a3 	.word	0x080110a3
 8010fec:	080110a3 	.word	0x080110a3
 8010ff0:	080110a3 	.word	0x080110a3
 8010ff4:	080110a3 	.word	0x080110a3
 8010ff8:	080110a3 	.word	0x080110a3
 8010ffc:	0801106f 	.word	0x0801106f
 8011000:	080110a3 	.word	0x080110a3
 8011004:	080110a3 	.word	0x080110a3
 8011008:	080110a3 	.word	0x080110a3
 801100c:	080110a3 	.word	0x080110a3
 8011010:	080110a3 	.word	0x080110a3
 8011014:	080110a3 	.word	0x080110a3
 8011018:	080110a3 	.word	0x080110a3
 801101c:	080110a3 	.word	0x080110a3
 8011020:	080110a3 	.word	0x080110a3
 8011024:	080110a3 	.word	0x080110a3
 8011028:	080110a3 	.word	0x080110a3
 801102c:	080110a3 	.word	0x080110a3
 8011030:	080110a3 	.word	0x080110a3
 8011034:	080110a3 	.word	0x080110a3
 8011038:	080110a3 	.word	0x080110a3
 801103c:	08011095 	.word	0x08011095
 8011040:	2b40      	cmp	r3, #64	@ 0x40
 8011042:	d02a      	beq.n	801109a <UART_SetConfig+0x8aa>
 8011044:	e02d      	b.n	80110a2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011046:	f7fc fed3 	bl	800ddf0 <HAL_RCCEx_GetD3PCLK1Freq>
 801104a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801104c:	e02f      	b.n	80110ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801104e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011052:	4618      	mov	r0, r3
 8011054:	f7fc fee2 	bl	800de1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801105a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801105c:	e027      	b.n	80110ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801105e:	f107 0318 	add.w	r3, r7, #24
 8011062:	4618      	mov	r0, r3
 8011064:	f7fd f82e 	bl	800e0c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011068:	69fb      	ldr	r3, [r7, #28]
 801106a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801106c:	e01f      	b.n	80110ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801106e:	4b21      	ldr	r3, [pc, #132]	@ (80110f4 <UART_SetConfig+0x904>)
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	f003 0320 	and.w	r3, r3, #32
 8011076:	2b00      	cmp	r3, #0
 8011078:	d009      	beq.n	801108e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801107a:	4b1e      	ldr	r3, [pc, #120]	@ (80110f4 <UART_SetConfig+0x904>)
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	08db      	lsrs	r3, r3, #3
 8011080:	f003 0303 	and.w	r3, r3, #3
 8011084:	4a1d      	ldr	r2, [pc, #116]	@ (80110fc <UART_SetConfig+0x90c>)
 8011086:	fa22 f303 	lsr.w	r3, r2, r3
 801108a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801108c:	e00f      	b.n	80110ae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801108e:	4b1b      	ldr	r3, [pc, #108]	@ (80110fc <UART_SetConfig+0x90c>)
 8011090:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011092:	e00c      	b.n	80110ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011094:	4b1a      	ldr	r3, [pc, #104]	@ (8011100 <UART_SetConfig+0x910>)
 8011096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011098:	e009      	b.n	80110ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801109a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801109e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80110a0:	e005      	b.n	80110ae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80110a2:	2300      	movs	r3, #0
 80110a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80110a6:	2301      	movs	r3, #1
 80110a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80110ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80110ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	f000 81ee 	beq.w	8011492 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80110b6:	697b      	ldr	r3, [r7, #20]
 80110b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110ba:	4a12      	ldr	r2, [pc, #72]	@ (8011104 <UART_SetConfig+0x914>)
 80110bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80110c0:	461a      	mov	r2, r3
 80110c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80110c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80110c8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80110ca:	697b      	ldr	r3, [r7, #20]
 80110cc:	685a      	ldr	r2, [r3, #4]
 80110ce:	4613      	mov	r3, r2
 80110d0:	005b      	lsls	r3, r3, #1
 80110d2:	4413      	add	r3, r2
 80110d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80110d6:	429a      	cmp	r2, r3
 80110d8:	d305      	bcc.n	80110e6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80110da:	697b      	ldr	r3, [r7, #20]
 80110dc:	685b      	ldr	r3, [r3, #4]
 80110de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80110e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80110e2:	429a      	cmp	r2, r3
 80110e4:	d910      	bls.n	8011108 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80110e6:	2301      	movs	r3, #1
 80110e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80110ec:	e1d1      	b.n	8011492 <UART_SetConfig+0xca2>
 80110ee:	bf00      	nop
 80110f0:	40011c00 	.word	0x40011c00
 80110f4:	58024400 	.word	0x58024400
 80110f8:	58000c00 	.word	0x58000c00
 80110fc:	03d09000 	.word	0x03d09000
 8011100:	003d0900 	.word	0x003d0900
 8011104:	0801522c 	.word	0x0801522c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801110a:	2200      	movs	r2, #0
 801110c:	60bb      	str	r3, [r7, #8]
 801110e:	60fa      	str	r2, [r7, #12]
 8011110:	697b      	ldr	r3, [r7, #20]
 8011112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011114:	4ac0      	ldr	r2, [pc, #768]	@ (8011418 <UART_SetConfig+0xc28>)
 8011116:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801111a:	b29b      	uxth	r3, r3
 801111c:	2200      	movs	r2, #0
 801111e:	603b      	str	r3, [r7, #0]
 8011120:	607a      	str	r2, [r7, #4]
 8011122:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011126:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801112a:	f7ef f949 	bl	80003c0 <__aeabi_uldivmod>
 801112e:	4602      	mov	r2, r0
 8011130:	460b      	mov	r3, r1
 8011132:	4610      	mov	r0, r2
 8011134:	4619      	mov	r1, r3
 8011136:	f04f 0200 	mov.w	r2, #0
 801113a:	f04f 0300 	mov.w	r3, #0
 801113e:	020b      	lsls	r3, r1, #8
 8011140:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011144:	0202      	lsls	r2, r0, #8
 8011146:	6979      	ldr	r1, [r7, #20]
 8011148:	6849      	ldr	r1, [r1, #4]
 801114a:	0849      	lsrs	r1, r1, #1
 801114c:	2000      	movs	r0, #0
 801114e:	460c      	mov	r4, r1
 8011150:	4605      	mov	r5, r0
 8011152:	eb12 0804 	adds.w	r8, r2, r4
 8011156:	eb43 0905 	adc.w	r9, r3, r5
 801115a:	697b      	ldr	r3, [r7, #20]
 801115c:	685b      	ldr	r3, [r3, #4]
 801115e:	2200      	movs	r2, #0
 8011160:	469a      	mov	sl, r3
 8011162:	4693      	mov	fp, r2
 8011164:	4652      	mov	r2, sl
 8011166:	465b      	mov	r3, fp
 8011168:	4640      	mov	r0, r8
 801116a:	4649      	mov	r1, r9
 801116c:	f7ef f928 	bl	80003c0 <__aeabi_uldivmod>
 8011170:	4602      	mov	r2, r0
 8011172:	460b      	mov	r3, r1
 8011174:	4613      	mov	r3, r2
 8011176:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801117a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801117e:	d308      	bcc.n	8011192 <UART_SetConfig+0x9a2>
 8011180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011182:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011186:	d204      	bcs.n	8011192 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8011188:	697b      	ldr	r3, [r7, #20]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801118e:	60da      	str	r2, [r3, #12]
 8011190:	e17f      	b.n	8011492 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8011192:	2301      	movs	r3, #1
 8011194:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8011198:	e17b      	b.n	8011492 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801119a:	697b      	ldr	r3, [r7, #20]
 801119c:	69db      	ldr	r3, [r3, #28]
 801119e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80111a2:	f040 80bd 	bne.w	8011320 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80111a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80111aa:	2b20      	cmp	r3, #32
 80111ac:	dc48      	bgt.n	8011240 <UART_SetConfig+0xa50>
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	db7b      	blt.n	80112aa <UART_SetConfig+0xaba>
 80111b2:	2b20      	cmp	r3, #32
 80111b4:	d879      	bhi.n	80112aa <UART_SetConfig+0xaba>
 80111b6:	a201      	add	r2, pc, #4	@ (adr r2, 80111bc <UART_SetConfig+0x9cc>)
 80111b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111bc:	08011247 	.word	0x08011247
 80111c0:	0801124f 	.word	0x0801124f
 80111c4:	080112ab 	.word	0x080112ab
 80111c8:	080112ab 	.word	0x080112ab
 80111cc:	08011257 	.word	0x08011257
 80111d0:	080112ab 	.word	0x080112ab
 80111d4:	080112ab 	.word	0x080112ab
 80111d8:	080112ab 	.word	0x080112ab
 80111dc:	08011267 	.word	0x08011267
 80111e0:	080112ab 	.word	0x080112ab
 80111e4:	080112ab 	.word	0x080112ab
 80111e8:	080112ab 	.word	0x080112ab
 80111ec:	080112ab 	.word	0x080112ab
 80111f0:	080112ab 	.word	0x080112ab
 80111f4:	080112ab 	.word	0x080112ab
 80111f8:	080112ab 	.word	0x080112ab
 80111fc:	08011277 	.word	0x08011277
 8011200:	080112ab 	.word	0x080112ab
 8011204:	080112ab 	.word	0x080112ab
 8011208:	080112ab 	.word	0x080112ab
 801120c:	080112ab 	.word	0x080112ab
 8011210:	080112ab 	.word	0x080112ab
 8011214:	080112ab 	.word	0x080112ab
 8011218:	080112ab 	.word	0x080112ab
 801121c:	080112ab 	.word	0x080112ab
 8011220:	080112ab 	.word	0x080112ab
 8011224:	080112ab 	.word	0x080112ab
 8011228:	080112ab 	.word	0x080112ab
 801122c:	080112ab 	.word	0x080112ab
 8011230:	080112ab 	.word	0x080112ab
 8011234:	080112ab 	.word	0x080112ab
 8011238:	080112ab 	.word	0x080112ab
 801123c:	0801129d 	.word	0x0801129d
 8011240:	2b40      	cmp	r3, #64	@ 0x40
 8011242:	d02e      	beq.n	80112a2 <UART_SetConfig+0xab2>
 8011244:	e031      	b.n	80112aa <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011246:	f7fa ff35 	bl	800c0b4 <HAL_RCC_GetPCLK1Freq>
 801124a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801124c:	e033      	b.n	80112b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801124e:	f7fa ff47 	bl	800c0e0 <HAL_RCC_GetPCLK2Freq>
 8011252:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011254:	e02f      	b.n	80112b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011256:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801125a:	4618      	mov	r0, r3
 801125c:	f7fc fdde 	bl	800de1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011264:	e027      	b.n	80112b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011266:	f107 0318 	add.w	r3, r7, #24
 801126a:	4618      	mov	r0, r3
 801126c:	f7fc ff2a 	bl	800e0c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011270:	69fb      	ldr	r3, [r7, #28]
 8011272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011274:	e01f      	b.n	80112b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011276:	4b69      	ldr	r3, [pc, #420]	@ (801141c <UART_SetConfig+0xc2c>)
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	f003 0320 	and.w	r3, r3, #32
 801127e:	2b00      	cmp	r3, #0
 8011280:	d009      	beq.n	8011296 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011282:	4b66      	ldr	r3, [pc, #408]	@ (801141c <UART_SetConfig+0xc2c>)
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	08db      	lsrs	r3, r3, #3
 8011288:	f003 0303 	and.w	r3, r3, #3
 801128c:	4a64      	ldr	r2, [pc, #400]	@ (8011420 <UART_SetConfig+0xc30>)
 801128e:	fa22 f303 	lsr.w	r3, r2, r3
 8011292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011294:	e00f      	b.n	80112b6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8011296:	4b62      	ldr	r3, [pc, #392]	@ (8011420 <UART_SetConfig+0xc30>)
 8011298:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801129a:	e00c      	b.n	80112b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801129c:	4b61      	ldr	r3, [pc, #388]	@ (8011424 <UART_SetConfig+0xc34>)
 801129e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80112a0:	e009      	b.n	80112b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80112a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80112a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80112a8:	e005      	b.n	80112b6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80112aa:	2300      	movs	r3, #0
 80112ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80112ae:	2301      	movs	r3, #1
 80112b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80112b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80112b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	f000 80ea 	beq.w	8011492 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80112be:	697b      	ldr	r3, [r7, #20]
 80112c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112c2:	4a55      	ldr	r2, [pc, #340]	@ (8011418 <UART_SetConfig+0xc28>)
 80112c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80112c8:	461a      	mov	r2, r3
 80112ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80112cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80112d0:	005a      	lsls	r2, r3, #1
 80112d2:	697b      	ldr	r3, [r7, #20]
 80112d4:	685b      	ldr	r3, [r3, #4]
 80112d6:	085b      	lsrs	r3, r3, #1
 80112d8:	441a      	add	r2, r3
 80112da:	697b      	ldr	r3, [r7, #20]
 80112dc:	685b      	ldr	r3, [r3, #4]
 80112de:	fbb2 f3f3 	udiv	r3, r2, r3
 80112e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80112e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112e6:	2b0f      	cmp	r3, #15
 80112e8:	d916      	bls.n	8011318 <UART_SetConfig+0xb28>
 80112ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80112f0:	d212      	bcs.n	8011318 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80112f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112f4:	b29b      	uxth	r3, r3
 80112f6:	f023 030f 	bic.w	r3, r3, #15
 80112fa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80112fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112fe:	085b      	lsrs	r3, r3, #1
 8011300:	b29b      	uxth	r3, r3
 8011302:	f003 0307 	and.w	r3, r3, #7
 8011306:	b29a      	uxth	r2, r3
 8011308:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801130a:	4313      	orrs	r3, r2
 801130c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 801130e:	697b      	ldr	r3, [r7, #20]
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8011314:	60da      	str	r2, [r3, #12]
 8011316:	e0bc      	b.n	8011492 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011318:	2301      	movs	r3, #1
 801131a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801131e:	e0b8      	b.n	8011492 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011320:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8011324:	2b20      	cmp	r3, #32
 8011326:	dc4b      	bgt.n	80113c0 <UART_SetConfig+0xbd0>
 8011328:	2b00      	cmp	r3, #0
 801132a:	f2c0 8087 	blt.w	801143c <UART_SetConfig+0xc4c>
 801132e:	2b20      	cmp	r3, #32
 8011330:	f200 8084 	bhi.w	801143c <UART_SetConfig+0xc4c>
 8011334:	a201      	add	r2, pc, #4	@ (adr r2, 801133c <UART_SetConfig+0xb4c>)
 8011336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801133a:	bf00      	nop
 801133c:	080113c7 	.word	0x080113c7
 8011340:	080113cf 	.word	0x080113cf
 8011344:	0801143d 	.word	0x0801143d
 8011348:	0801143d 	.word	0x0801143d
 801134c:	080113d7 	.word	0x080113d7
 8011350:	0801143d 	.word	0x0801143d
 8011354:	0801143d 	.word	0x0801143d
 8011358:	0801143d 	.word	0x0801143d
 801135c:	080113e7 	.word	0x080113e7
 8011360:	0801143d 	.word	0x0801143d
 8011364:	0801143d 	.word	0x0801143d
 8011368:	0801143d 	.word	0x0801143d
 801136c:	0801143d 	.word	0x0801143d
 8011370:	0801143d 	.word	0x0801143d
 8011374:	0801143d 	.word	0x0801143d
 8011378:	0801143d 	.word	0x0801143d
 801137c:	080113f7 	.word	0x080113f7
 8011380:	0801143d 	.word	0x0801143d
 8011384:	0801143d 	.word	0x0801143d
 8011388:	0801143d 	.word	0x0801143d
 801138c:	0801143d 	.word	0x0801143d
 8011390:	0801143d 	.word	0x0801143d
 8011394:	0801143d 	.word	0x0801143d
 8011398:	0801143d 	.word	0x0801143d
 801139c:	0801143d 	.word	0x0801143d
 80113a0:	0801143d 	.word	0x0801143d
 80113a4:	0801143d 	.word	0x0801143d
 80113a8:	0801143d 	.word	0x0801143d
 80113ac:	0801143d 	.word	0x0801143d
 80113b0:	0801143d 	.word	0x0801143d
 80113b4:	0801143d 	.word	0x0801143d
 80113b8:	0801143d 	.word	0x0801143d
 80113bc:	0801142f 	.word	0x0801142f
 80113c0:	2b40      	cmp	r3, #64	@ 0x40
 80113c2:	d037      	beq.n	8011434 <UART_SetConfig+0xc44>
 80113c4:	e03a      	b.n	801143c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80113c6:	f7fa fe75 	bl	800c0b4 <HAL_RCC_GetPCLK1Freq>
 80113ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80113cc:	e03c      	b.n	8011448 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80113ce:	f7fa fe87 	bl	800c0e0 <HAL_RCC_GetPCLK2Freq>
 80113d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80113d4:	e038      	b.n	8011448 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80113d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80113da:	4618      	mov	r0, r3
 80113dc:	f7fc fd1e 	bl	800de1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80113e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80113e4:	e030      	b.n	8011448 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80113e6:	f107 0318 	add.w	r3, r7, #24
 80113ea:	4618      	mov	r0, r3
 80113ec:	f7fc fe6a 	bl	800e0c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80113f0:	69fb      	ldr	r3, [r7, #28]
 80113f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80113f4:	e028      	b.n	8011448 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80113f6:	4b09      	ldr	r3, [pc, #36]	@ (801141c <UART_SetConfig+0xc2c>)
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	f003 0320 	and.w	r3, r3, #32
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d012      	beq.n	8011428 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011402:	4b06      	ldr	r3, [pc, #24]	@ (801141c <UART_SetConfig+0xc2c>)
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	08db      	lsrs	r3, r3, #3
 8011408:	f003 0303 	and.w	r3, r3, #3
 801140c:	4a04      	ldr	r2, [pc, #16]	@ (8011420 <UART_SetConfig+0xc30>)
 801140e:	fa22 f303 	lsr.w	r3, r2, r3
 8011412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011414:	e018      	b.n	8011448 <UART_SetConfig+0xc58>
 8011416:	bf00      	nop
 8011418:	0801522c 	.word	0x0801522c
 801141c:	58024400 	.word	0x58024400
 8011420:	03d09000 	.word	0x03d09000
 8011424:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8011428:	4b24      	ldr	r3, [pc, #144]	@ (80114bc <UART_SetConfig+0xccc>)
 801142a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801142c:	e00c      	b.n	8011448 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801142e:	4b24      	ldr	r3, [pc, #144]	@ (80114c0 <UART_SetConfig+0xcd0>)
 8011430:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011432:	e009      	b.n	8011448 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011434:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011438:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801143a:	e005      	b.n	8011448 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 801143c:	2300      	movs	r3, #0
 801143e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8011440:	2301      	movs	r3, #1
 8011442:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8011446:	bf00      	nop
    }

    if (pclk != 0U)
 8011448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801144a:	2b00      	cmp	r3, #0
 801144c:	d021      	beq.n	8011492 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801144e:	697b      	ldr	r3, [r7, #20]
 8011450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011452:	4a1c      	ldr	r2, [pc, #112]	@ (80114c4 <UART_SetConfig+0xcd4>)
 8011454:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011458:	461a      	mov	r2, r3
 801145a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801145c:	fbb3 f2f2 	udiv	r2, r3, r2
 8011460:	697b      	ldr	r3, [r7, #20]
 8011462:	685b      	ldr	r3, [r3, #4]
 8011464:	085b      	lsrs	r3, r3, #1
 8011466:	441a      	add	r2, r3
 8011468:	697b      	ldr	r3, [r7, #20]
 801146a:	685b      	ldr	r3, [r3, #4]
 801146c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011470:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011474:	2b0f      	cmp	r3, #15
 8011476:	d909      	bls.n	801148c <UART_SetConfig+0xc9c>
 8011478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801147a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801147e:	d205      	bcs.n	801148c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011482:	b29a      	uxth	r2, r3
 8011484:	697b      	ldr	r3, [r7, #20]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	60da      	str	r2, [r3, #12]
 801148a:	e002      	b.n	8011492 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 801148c:	2301      	movs	r3, #1
 801148e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011492:	697b      	ldr	r3, [r7, #20]
 8011494:	2201      	movs	r2, #1
 8011496:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801149a:	697b      	ldr	r3, [r7, #20]
 801149c:	2201      	movs	r2, #1
 801149e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80114a2:	697b      	ldr	r3, [r7, #20]
 80114a4:	2200      	movs	r2, #0
 80114a6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80114a8:	697b      	ldr	r3, [r7, #20]
 80114aa:	2200      	movs	r2, #0
 80114ac:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80114ae:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80114b2:	4618      	mov	r0, r3
 80114b4:	3748      	adds	r7, #72	@ 0x48
 80114b6:	46bd      	mov	sp, r7
 80114b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80114bc:	03d09000 	.word	0x03d09000
 80114c0:	003d0900 	.word	0x003d0900
 80114c4:	0801522c 	.word	0x0801522c

080114c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80114c8:	b480      	push	{r7}
 80114ca:	b083      	sub	sp, #12
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114d4:	f003 0301 	and.w	r3, r3, #1
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d00a      	beq.n	80114f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	685b      	ldr	r3, [r3, #4]
 80114e2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	430a      	orrs	r2, r1
 80114f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114f6:	f003 0302 	and.w	r3, r3, #2
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d00a      	beq.n	8011514 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	685b      	ldr	r3, [r3, #4]
 8011504:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	430a      	orrs	r2, r1
 8011512:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011518:	f003 0304 	and.w	r3, r3, #4
 801151c:	2b00      	cmp	r3, #0
 801151e:	d00a      	beq.n	8011536 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	685b      	ldr	r3, [r3, #4]
 8011526:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	430a      	orrs	r2, r1
 8011534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801153a:	f003 0308 	and.w	r3, r3, #8
 801153e:	2b00      	cmp	r3, #0
 8011540:	d00a      	beq.n	8011558 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	685b      	ldr	r3, [r3, #4]
 8011548:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	430a      	orrs	r2, r1
 8011556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801155c:	f003 0310 	and.w	r3, r3, #16
 8011560:	2b00      	cmp	r3, #0
 8011562:	d00a      	beq.n	801157a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	689b      	ldr	r3, [r3, #8]
 801156a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	430a      	orrs	r2, r1
 8011578:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801157e:	f003 0320 	and.w	r3, r3, #32
 8011582:	2b00      	cmp	r3, #0
 8011584:	d00a      	beq.n	801159c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	689b      	ldr	r3, [r3, #8]
 801158c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	430a      	orrs	r2, r1
 801159a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d01a      	beq.n	80115de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	685b      	ldr	r3, [r3, #4]
 80115ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	430a      	orrs	r2, r1
 80115bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80115c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80115c6:	d10a      	bne.n	80115de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	685b      	ldr	r3, [r3, #4]
 80115ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	430a      	orrs	r2, r1
 80115dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d00a      	beq.n	8011600 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	685b      	ldr	r3, [r3, #4]
 80115f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	430a      	orrs	r2, r1
 80115fe:	605a      	str	r2, [r3, #4]
  }
}
 8011600:	bf00      	nop
 8011602:	370c      	adds	r7, #12
 8011604:	46bd      	mov	sp, r7
 8011606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801160a:	4770      	bx	lr

0801160c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b098      	sub	sp, #96	@ 0x60
 8011610:	af02      	add	r7, sp, #8
 8011612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	2200      	movs	r2, #0
 8011618:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801161c:	f7f3 fb60 	bl	8004ce0 <HAL_GetTick>
 8011620:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	f003 0308 	and.w	r3, r3, #8
 801162c:	2b08      	cmp	r3, #8
 801162e:	d12f      	bne.n	8011690 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011630:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011634:	9300      	str	r3, [sp, #0]
 8011636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011638:	2200      	movs	r2, #0
 801163a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801163e:	6878      	ldr	r0, [r7, #4]
 8011640:	f000 f88e 	bl	8011760 <UART_WaitOnFlagUntilTimeout>
 8011644:	4603      	mov	r3, r0
 8011646:	2b00      	cmp	r3, #0
 8011648:	d022      	beq.n	8011690 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011652:	e853 3f00 	ldrex	r3, [r3]
 8011656:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801165a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801165e:	653b      	str	r3, [r7, #80]	@ 0x50
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	461a      	mov	r2, r3
 8011666:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011668:	647b      	str	r3, [r7, #68]	@ 0x44
 801166a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801166c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801166e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011670:	e841 2300 	strex	r3, r2, [r1]
 8011674:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011678:	2b00      	cmp	r3, #0
 801167a:	d1e6      	bne.n	801164a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	2220      	movs	r2, #32
 8011680:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	2200      	movs	r2, #0
 8011688:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801168c:	2303      	movs	r3, #3
 801168e:	e063      	b.n	8011758 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	f003 0304 	and.w	r3, r3, #4
 801169a:	2b04      	cmp	r3, #4
 801169c:	d149      	bne.n	8011732 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801169e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80116a2:	9300      	str	r3, [sp, #0]
 80116a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80116a6:	2200      	movs	r2, #0
 80116a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80116ac:	6878      	ldr	r0, [r7, #4]
 80116ae:	f000 f857 	bl	8011760 <UART_WaitOnFlagUntilTimeout>
 80116b2:	4603      	mov	r3, r0
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d03c      	beq.n	8011732 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116c0:	e853 3f00 	ldrex	r3, [r3]
 80116c4:	623b      	str	r3, [r7, #32]
   return(result);
 80116c6:	6a3b      	ldr	r3, [r7, #32]
 80116c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80116cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	461a      	mov	r2, r3
 80116d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80116d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80116dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80116de:	e841 2300 	strex	r3, r2, [r1]
 80116e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80116e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d1e6      	bne.n	80116b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	3308      	adds	r3, #8
 80116f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116f2:	693b      	ldr	r3, [r7, #16]
 80116f4:	e853 3f00 	ldrex	r3, [r3]
 80116f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	f023 0301 	bic.w	r3, r3, #1
 8011700:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	3308      	adds	r3, #8
 8011708:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801170a:	61fa      	str	r2, [r7, #28]
 801170c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801170e:	69b9      	ldr	r1, [r7, #24]
 8011710:	69fa      	ldr	r2, [r7, #28]
 8011712:	e841 2300 	strex	r3, r2, [r1]
 8011716:	617b      	str	r3, [r7, #20]
   return(result);
 8011718:	697b      	ldr	r3, [r7, #20]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d1e5      	bne.n	80116ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	2220      	movs	r2, #32
 8011722:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	2200      	movs	r2, #0
 801172a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801172e:	2303      	movs	r3, #3
 8011730:	e012      	b.n	8011758 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	2220      	movs	r2, #32
 8011736:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	2220      	movs	r2, #32
 801173e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	2200      	movs	r2, #0
 8011746:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	2200      	movs	r2, #0
 801174c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	2200      	movs	r2, #0
 8011752:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011756:	2300      	movs	r3, #0
}
 8011758:	4618      	mov	r0, r3
 801175a:	3758      	adds	r7, #88	@ 0x58
 801175c:	46bd      	mov	sp, r7
 801175e:	bd80      	pop	{r7, pc}

08011760 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011760:	b580      	push	{r7, lr}
 8011762:	b084      	sub	sp, #16
 8011764:	af00      	add	r7, sp, #0
 8011766:	60f8      	str	r0, [r7, #12]
 8011768:	60b9      	str	r1, [r7, #8]
 801176a:	603b      	str	r3, [r7, #0]
 801176c:	4613      	mov	r3, r2
 801176e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011770:	e049      	b.n	8011806 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011772:	69bb      	ldr	r3, [r7, #24]
 8011774:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011778:	d045      	beq.n	8011806 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801177a:	f7f3 fab1 	bl	8004ce0 <HAL_GetTick>
 801177e:	4602      	mov	r2, r0
 8011780:	683b      	ldr	r3, [r7, #0]
 8011782:	1ad3      	subs	r3, r2, r3
 8011784:	69ba      	ldr	r2, [r7, #24]
 8011786:	429a      	cmp	r2, r3
 8011788:	d302      	bcc.n	8011790 <UART_WaitOnFlagUntilTimeout+0x30>
 801178a:	69bb      	ldr	r3, [r7, #24]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d101      	bne.n	8011794 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011790:	2303      	movs	r3, #3
 8011792:	e048      	b.n	8011826 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	f003 0304 	and.w	r3, r3, #4
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d031      	beq.n	8011806 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	69db      	ldr	r3, [r3, #28]
 80117a8:	f003 0308 	and.w	r3, r3, #8
 80117ac:	2b08      	cmp	r3, #8
 80117ae:	d110      	bne.n	80117d2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	2208      	movs	r2, #8
 80117b6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80117b8:	68f8      	ldr	r0, [r7, #12]
 80117ba:	f000 f839 	bl	8011830 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	2208      	movs	r2, #8
 80117c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	2200      	movs	r2, #0
 80117ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 80117ce:	2301      	movs	r3, #1
 80117d0:	e029      	b.n	8011826 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	69db      	ldr	r3, [r3, #28]
 80117d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80117dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80117e0:	d111      	bne.n	8011806 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80117ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80117ec:	68f8      	ldr	r0, [r7, #12]
 80117ee:	f000 f81f 	bl	8011830 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	2220      	movs	r2, #32
 80117f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	2200      	movs	r2, #0
 80117fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8011802:	2303      	movs	r3, #3
 8011804:	e00f      	b.n	8011826 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	69da      	ldr	r2, [r3, #28]
 801180c:	68bb      	ldr	r3, [r7, #8]
 801180e:	4013      	ands	r3, r2
 8011810:	68ba      	ldr	r2, [r7, #8]
 8011812:	429a      	cmp	r2, r3
 8011814:	bf0c      	ite	eq
 8011816:	2301      	moveq	r3, #1
 8011818:	2300      	movne	r3, #0
 801181a:	b2db      	uxtb	r3, r3
 801181c:	461a      	mov	r2, r3
 801181e:	79fb      	ldrb	r3, [r7, #7]
 8011820:	429a      	cmp	r2, r3
 8011822:	d0a6      	beq.n	8011772 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011824:	2300      	movs	r3, #0
}
 8011826:	4618      	mov	r0, r3
 8011828:	3710      	adds	r7, #16
 801182a:	46bd      	mov	sp, r7
 801182c:	bd80      	pop	{r7, pc}
	...

08011830 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011830:	b480      	push	{r7}
 8011832:	b095      	sub	sp, #84	@ 0x54
 8011834:	af00      	add	r7, sp, #0
 8011836:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801183e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011840:	e853 3f00 	ldrex	r3, [r3]
 8011844:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011848:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801184c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	461a      	mov	r2, r3
 8011854:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011856:	643b      	str	r3, [r7, #64]	@ 0x40
 8011858:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801185a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801185c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801185e:	e841 2300 	strex	r3, r2, [r1]
 8011862:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011866:	2b00      	cmp	r3, #0
 8011868:	d1e6      	bne.n	8011838 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	3308      	adds	r3, #8
 8011870:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011872:	6a3b      	ldr	r3, [r7, #32]
 8011874:	e853 3f00 	ldrex	r3, [r3]
 8011878:	61fb      	str	r3, [r7, #28]
   return(result);
 801187a:	69fa      	ldr	r2, [r7, #28]
 801187c:	4b1e      	ldr	r3, [pc, #120]	@ (80118f8 <UART_EndRxTransfer+0xc8>)
 801187e:	4013      	ands	r3, r2
 8011880:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	3308      	adds	r3, #8
 8011888:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801188a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801188c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801188e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011890:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011892:	e841 2300 	strex	r3, r2, [r1]
 8011896:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801189a:	2b00      	cmp	r3, #0
 801189c:	d1e5      	bne.n	801186a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80118a2:	2b01      	cmp	r3, #1
 80118a4:	d118      	bne.n	80118d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	e853 3f00 	ldrex	r3, [r3]
 80118b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80118b4:	68bb      	ldr	r3, [r7, #8]
 80118b6:	f023 0310 	bic.w	r3, r3, #16
 80118ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	461a      	mov	r2, r3
 80118c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80118c4:	61bb      	str	r3, [r7, #24]
 80118c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118c8:	6979      	ldr	r1, [r7, #20]
 80118ca:	69ba      	ldr	r2, [r7, #24]
 80118cc:	e841 2300 	strex	r3, r2, [r1]
 80118d0:	613b      	str	r3, [r7, #16]
   return(result);
 80118d2:	693b      	ldr	r3, [r7, #16]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d1e6      	bne.n	80118a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	2220      	movs	r2, #32
 80118dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	2200      	movs	r2, #0
 80118e4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	2200      	movs	r2, #0
 80118ea:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80118ec:	bf00      	nop
 80118ee:	3754      	adds	r7, #84	@ 0x54
 80118f0:	46bd      	mov	sp, r7
 80118f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f6:	4770      	bx	lr
 80118f8:	effffffe 	.word	0xeffffffe

080118fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80118fc:	b480      	push	{r7}
 80118fe:	b085      	sub	sp, #20
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801190a:	2b01      	cmp	r3, #1
 801190c:	d101      	bne.n	8011912 <HAL_UARTEx_DisableFifoMode+0x16>
 801190e:	2302      	movs	r3, #2
 8011910:	e027      	b.n	8011962 <HAL_UARTEx_DisableFifoMode+0x66>
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	2201      	movs	r2, #1
 8011916:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	2224      	movs	r2, #36	@ 0x24
 801191e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	681a      	ldr	r2, [r3, #0]
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	f022 0201 	bic.w	r2, r2, #1
 8011938:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011940:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	2200      	movs	r2, #0
 8011946:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	68fa      	ldr	r2, [r7, #12]
 801194e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	2220      	movs	r2, #32
 8011954:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	2200      	movs	r2, #0
 801195c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011960:	2300      	movs	r3, #0
}
 8011962:	4618      	mov	r0, r3
 8011964:	3714      	adds	r7, #20
 8011966:	46bd      	mov	sp, r7
 8011968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801196c:	4770      	bx	lr

0801196e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801196e:	b580      	push	{r7, lr}
 8011970:	b084      	sub	sp, #16
 8011972:	af00      	add	r7, sp, #0
 8011974:	6078      	str	r0, [r7, #4]
 8011976:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801197e:	2b01      	cmp	r3, #1
 8011980:	d101      	bne.n	8011986 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011982:	2302      	movs	r3, #2
 8011984:	e02d      	b.n	80119e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	2201      	movs	r2, #1
 801198a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	2224      	movs	r2, #36	@ 0x24
 8011992:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	681a      	ldr	r2, [r3, #0]
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	f022 0201 	bic.w	r2, r2, #1
 80119ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	689b      	ldr	r3, [r3, #8]
 80119b4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	683a      	ldr	r2, [r7, #0]
 80119be:	430a      	orrs	r2, r1
 80119c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80119c2:	6878      	ldr	r0, [r7, #4]
 80119c4:	f000 f850 	bl	8011a68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	68fa      	ldr	r2, [r7, #12]
 80119ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	2220      	movs	r2, #32
 80119d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	2200      	movs	r2, #0
 80119dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80119e0:	2300      	movs	r3, #0
}
 80119e2:	4618      	mov	r0, r3
 80119e4:	3710      	adds	r7, #16
 80119e6:	46bd      	mov	sp, r7
 80119e8:	bd80      	pop	{r7, pc}

080119ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80119ea:	b580      	push	{r7, lr}
 80119ec:	b084      	sub	sp, #16
 80119ee:	af00      	add	r7, sp, #0
 80119f0:	6078      	str	r0, [r7, #4]
 80119f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80119fa:	2b01      	cmp	r3, #1
 80119fc:	d101      	bne.n	8011a02 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80119fe:	2302      	movs	r3, #2
 8011a00:	e02d      	b.n	8011a5e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	2201      	movs	r2, #1
 8011a06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	2224      	movs	r2, #36	@ 0x24
 8011a0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	681a      	ldr	r2, [r3, #0]
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	f022 0201 	bic.w	r2, r2, #1
 8011a28:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	689b      	ldr	r3, [r3, #8]
 8011a30:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	683a      	ldr	r2, [r7, #0]
 8011a3a:	430a      	orrs	r2, r1
 8011a3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011a3e:	6878      	ldr	r0, [r7, #4]
 8011a40:	f000 f812 	bl	8011a68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	68fa      	ldr	r2, [r7, #12]
 8011a4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	2220      	movs	r2, #32
 8011a50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	2200      	movs	r2, #0
 8011a58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011a5c:	2300      	movs	r3, #0
}
 8011a5e:	4618      	mov	r0, r3
 8011a60:	3710      	adds	r7, #16
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bd80      	pop	{r7, pc}
	...

08011a68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011a68:	b480      	push	{r7}
 8011a6a:	b085      	sub	sp, #20
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d108      	bne.n	8011a8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2201      	movs	r2, #1
 8011a7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	2201      	movs	r2, #1
 8011a84:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011a88:	e031      	b.n	8011aee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011a8a:	2310      	movs	r3, #16
 8011a8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011a8e:	2310      	movs	r3, #16
 8011a90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	689b      	ldr	r3, [r3, #8]
 8011a98:	0e5b      	lsrs	r3, r3, #25
 8011a9a:	b2db      	uxtb	r3, r3
 8011a9c:	f003 0307 	and.w	r3, r3, #7
 8011aa0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	689b      	ldr	r3, [r3, #8]
 8011aa8:	0f5b      	lsrs	r3, r3, #29
 8011aaa:	b2db      	uxtb	r3, r3
 8011aac:	f003 0307 	and.w	r3, r3, #7
 8011ab0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011ab2:	7bbb      	ldrb	r3, [r7, #14]
 8011ab4:	7b3a      	ldrb	r2, [r7, #12]
 8011ab6:	4911      	ldr	r1, [pc, #68]	@ (8011afc <UARTEx_SetNbDataToProcess+0x94>)
 8011ab8:	5c8a      	ldrb	r2, [r1, r2]
 8011aba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011abe:	7b3a      	ldrb	r2, [r7, #12]
 8011ac0:	490f      	ldr	r1, [pc, #60]	@ (8011b00 <UARTEx_SetNbDataToProcess+0x98>)
 8011ac2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011ac4:	fb93 f3f2 	sdiv	r3, r3, r2
 8011ac8:	b29a      	uxth	r2, r3
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011ad0:	7bfb      	ldrb	r3, [r7, #15]
 8011ad2:	7b7a      	ldrb	r2, [r7, #13]
 8011ad4:	4909      	ldr	r1, [pc, #36]	@ (8011afc <UARTEx_SetNbDataToProcess+0x94>)
 8011ad6:	5c8a      	ldrb	r2, [r1, r2]
 8011ad8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011adc:	7b7a      	ldrb	r2, [r7, #13]
 8011ade:	4908      	ldr	r1, [pc, #32]	@ (8011b00 <UARTEx_SetNbDataToProcess+0x98>)
 8011ae0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011ae2:	fb93 f3f2 	sdiv	r3, r3, r2
 8011ae6:	b29a      	uxth	r2, r3
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8011aee:	bf00      	nop
 8011af0:	3714      	adds	r7, #20
 8011af2:	46bd      	mov	sp, r7
 8011af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af8:	4770      	bx	lr
 8011afa:	bf00      	nop
 8011afc:	08015244 	.word	0x08015244
 8011b00:	0801524c 	.word	0x0801524c

08011b04 <atoi>:
 8011b04:	220a      	movs	r2, #10
 8011b06:	2100      	movs	r1, #0
 8011b08:	f000 b894 	b.w	8011c34 <strtol>

08011b0c <__itoa>:
 8011b0c:	1e93      	subs	r3, r2, #2
 8011b0e:	2b22      	cmp	r3, #34	@ 0x22
 8011b10:	b510      	push	{r4, lr}
 8011b12:	460c      	mov	r4, r1
 8011b14:	d904      	bls.n	8011b20 <__itoa+0x14>
 8011b16:	2300      	movs	r3, #0
 8011b18:	700b      	strb	r3, [r1, #0]
 8011b1a:	461c      	mov	r4, r3
 8011b1c:	4620      	mov	r0, r4
 8011b1e:	bd10      	pop	{r4, pc}
 8011b20:	2a0a      	cmp	r2, #10
 8011b22:	d109      	bne.n	8011b38 <__itoa+0x2c>
 8011b24:	2800      	cmp	r0, #0
 8011b26:	da07      	bge.n	8011b38 <__itoa+0x2c>
 8011b28:	232d      	movs	r3, #45	@ 0x2d
 8011b2a:	700b      	strb	r3, [r1, #0]
 8011b2c:	4240      	negs	r0, r0
 8011b2e:	2101      	movs	r1, #1
 8011b30:	4421      	add	r1, r4
 8011b32:	f000 f889 	bl	8011c48 <__utoa>
 8011b36:	e7f1      	b.n	8011b1c <__itoa+0x10>
 8011b38:	2100      	movs	r1, #0
 8011b3a:	e7f9      	b.n	8011b30 <__itoa+0x24>

08011b3c <itoa>:
 8011b3c:	f7ff bfe6 	b.w	8011b0c <__itoa>

08011b40 <_strtol_l.constprop.0>:
 8011b40:	2b24      	cmp	r3, #36	@ 0x24
 8011b42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b46:	4686      	mov	lr, r0
 8011b48:	4690      	mov	r8, r2
 8011b4a:	d801      	bhi.n	8011b50 <_strtol_l.constprop.0+0x10>
 8011b4c:	2b01      	cmp	r3, #1
 8011b4e:	d106      	bne.n	8011b5e <_strtol_l.constprop.0+0x1e>
 8011b50:	f000 fe8e 	bl	8012870 <__errno>
 8011b54:	2316      	movs	r3, #22
 8011b56:	6003      	str	r3, [r0, #0]
 8011b58:	2000      	movs	r0, #0
 8011b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b5e:	4834      	ldr	r0, [pc, #208]	@ (8011c30 <_strtol_l.constprop.0+0xf0>)
 8011b60:	460d      	mov	r5, r1
 8011b62:	462a      	mov	r2, r5
 8011b64:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011b68:	5d06      	ldrb	r6, [r0, r4]
 8011b6a:	f016 0608 	ands.w	r6, r6, #8
 8011b6e:	d1f8      	bne.n	8011b62 <_strtol_l.constprop.0+0x22>
 8011b70:	2c2d      	cmp	r4, #45	@ 0x2d
 8011b72:	d12d      	bne.n	8011bd0 <_strtol_l.constprop.0+0x90>
 8011b74:	782c      	ldrb	r4, [r5, #0]
 8011b76:	2601      	movs	r6, #1
 8011b78:	1c95      	adds	r5, r2, #2
 8011b7a:	f033 0210 	bics.w	r2, r3, #16
 8011b7e:	d109      	bne.n	8011b94 <_strtol_l.constprop.0+0x54>
 8011b80:	2c30      	cmp	r4, #48	@ 0x30
 8011b82:	d12a      	bne.n	8011bda <_strtol_l.constprop.0+0x9a>
 8011b84:	782a      	ldrb	r2, [r5, #0]
 8011b86:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011b8a:	2a58      	cmp	r2, #88	@ 0x58
 8011b8c:	d125      	bne.n	8011bda <_strtol_l.constprop.0+0x9a>
 8011b8e:	786c      	ldrb	r4, [r5, #1]
 8011b90:	2310      	movs	r3, #16
 8011b92:	3502      	adds	r5, #2
 8011b94:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011b98:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8011b9c:	2200      	movs	r2, #0
 8011b9e:	fbbc f9f3 	udiv	r9, ip, r3
 8011ba2:	4610      	mov	r0, r2
 8011ba4:	fb03 ca19 	mls	sl, r3, r9, ip
 8011ba8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011bac:	2f09      	cmp	r7, #9
 8011bae:	d81b      	bhi.n	8011be8 <_strtol_l.constprop.0+0xa8>
 8011bb0:	463c      	mov	r4, r7
 8011bb2:	42a3      	cmp	r3, r4
 8011bb4:	dd27      	ble.n	8011c06 <_strtol_l.constprop.0+0xc6>
 8011bb6:	1c57      	adds	r7, r2, #1
 8011bb8:	d007      	beq.n	8011bca <_strtol_l.constprop.0+0x8a>
 8011bba:	4581      	cmp	r9, r0
 8011bbc:	d320      	bcc.n	8011c00 <_strtol_l.constprop.0+0xc0>
 8011bbe:	d101      	bne.n	8011bc4 <_strtol_l.constprop.0+0x84>
 8011bc0:	45a2      	cmp	sl, r4
 8011bc2:	db1d      	blt.n	8011c00 <_strtol_l.constprop.0+0xc0>
 8011bc4:	fb00 4003 	mla	r0, r0, r3, r4
 8011bc8:	2201      	movs	r2, #1
 8011bca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011bce:	e7eb      	b.n	8011ba8 <_strtol_l.constprop.0+0x68>
 8011bd0:	2c2b      	cmp	r4, #43	@ 0x2b
 8011bd2:	bf04      	itt	eq
 8011bd4:	782c      	ldrbeq	r4, [r5, #0]
 8011bd6:	1c95      	addeq	r5, r2, #2
 8011bd8:	e7cf      	b.n	8011b7a <_strtol_l.constprop.0+0x3a>
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d1da      	bne.n	8011b94 <_strtol_l.constprop.0+0x54>
 8011bde:	2c30      	cmp	r4, #48	@ 0x30
 8011be0:	bf0c      	ite	eq
 8011be2:	2308      	moveq	r3, #8
 8011be4:	230a      	movne	r3, #10
 8011be6:	e7d5      	b.n	8011b94 <_strtol_l.constprop.0+0x54>
 8011be8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011bec:	2f19      	cmp	r7, #25
 8011bee:	d801      	bhi.n	8011bf4 <_strtol_l.constprop.0+0xb4>
 8011bf0:	3c37      	subs	r4, #55	@ 0x37
 8011bf2:	e7de      	b.n	8011bb2 <_strtol_l.constprop.0+0x72>
 8011bf4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011bf8:	2f19      	cmp	r7, #25
 8011bfa:	d804      	bhi.n	8011c06 <_strtol_l.constprop.0+0xc6>
 8011bfc:	3c57      	subs	r4, #87	@ 0x57
 8011bfe:	e7d8      	b.n	8011bb2 <_strtol_l.constprop.0+0x72>
 8011c00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011c04:	e7e1      	b.n	8011bca <_strtol_l.constprop.0+0x8a>
 8011c06:	1c53      	adds	r3, r2, #1
 8011c08:	d108      	bne.n	8011c1c <_strtol_l.constprop.0+0xdc>
 8011c0a:	2322      	movs	r3, #34	@ 0x22
 8011c0c:	f8ce 3000 	str.w	r3, [lr]
 8011c10:	4660      	mov	r0, ip
 8011c12:	f1b8 0f00 	cmp.w	r8, #0
 8011c16:	d0a0      	beq.n	8011b5a <_strtol_l.constprop.0+0x1a>
 8011c18:	1e69      	subs	r1, r5, #1
 8011c1a:	e006      	b.n	8011c2a <_strtol_l.constprop.0+0xea>
 8011c1c:	b106      	cbz	r6, 8011c20 <_strtol_l.constprop.0+0xe0>
 8011c1e:	4240      	negs	r0, r0
 8011c20:	f1b8 0f00 	cmp.w	r8, #0
 8011c24:	d099      	beq.n	8011b5a <_strtol_l.constprop.0+0x1a>
 8011c26:	2a00      	cmp	r2, #0
 8011c28:	d1f6      	bne.n	8011c18 <_strtol_l.constprop.0+0xd8>
 8011c2a:	f8c8 1000 	str.w	r1, [r8]
 8011c2e:	e794      	b.n	8011b5a <_strtol_l.constprop.0+0x1a>
 8011c30:	0801527a 	.word	0x0801527a

08011c34 <strtol>:
 8011c34:	4613      	mov	r3, r2
 8011c36:	460a      	mov	r2, r1
 8011c38:	4601      	mov	r1, r0
 8011c3a:	4802      	ldr	r0, [pc, #8]	@ (8011c44 <strtol+0x10>)
 8011c3c:	6800      	ldr	r0, [r0, #0]
 8011c3e:	f7ff bf7f 	b.w	8011b40 <_strtol_l.constprop.0>
 8011c42:	bf00      	nop
 8011c44:	24000054 	.word	0x24000054

08011c48 <__utoa>:
 8011c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c4a:	4c1f      	ldr	r4, [pc, #124]	@ (8011cc8 <__utoa+0x80>)
 8011c4c:	b08b      	sub	sp, #44	@ 0x2c
 8011c4e:	4605      	mov	r5, r0
 8011c50:	460b      	mov	r3, r1
 8011c52:	466e      	mov	r6, sp
 8011c54:	f104 0c20 	add.w	ip, r4, #32
 8011c58:	6820      	ldr	r0, [r4, #0]
 8011c5a:	6861      	ldr	r1, [r4, #4]
 8011c5c:	4637      	mov	r7, r6
 8011c5e:	c703      	stmia	r7!, {r0, r1}
 8011c60:	3408      	adds	r4, #8
 8011c62:	4564      	cmp	r4, ip
 8011c64:	463e      	mov	r6, r7
 8011c66:	d1f7      	bne.n	8011c58 <__utoa+0x10>
 8011c68:	7921      	ldrb	r1, [r4, #4]
 8011c6a:	7139      	strb	r1, [r7, #4]
 8011c6c:	1e91      	subs	r1, r2, #2
 8011c6e:	6820      	ldr	r0, [r4, #0]
 8011c70:	6038      	str	r0, [r7, #0]
 8011c72:	2922      	cmp	r1, #34	@ 0x22
 8011c74:	f04f 0100 	mov.w	r1, #0
 8011c78:	d904      	bls.n	8011c84 <__utoa+0x3c>
 8011c7a:	7019      	strb	r1, [r3, #0]
 8011c7c:	460b      	mov	r3, r1
 8011c7e:	4618      	mov	r0, r3
 8011c80:	b00b      	add	sp, #44	@ 0x2c
 8011c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c84:	1e58      	subs	r0, r3, #1
 8011c86:	4684      	mov	ip, r0
 8011c88:	fbb5 f7f2 	udiv	r7, r5, r2
 8011c8c:	fb02 5617 	mls	r6, r2, r7, r5
 8011c90:	3628      	adds	r6, #40	@ 0x28
 8011c92:	446e      	add	r6, sp
 8011c94:	460c      	mov	r4, r1
 8011c96:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8011c9a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8011c9e:	462e      	mov	r6, r5
 8011ca0:	42b2      	cmp	r2, r6
 8011ca2:	f101 0101 	add.w	r1, r1, #1
 8011ca6:	463d      	mov	r5, r7
 8011ca8:	d9ee      	bls.n	8011c88 <__utoa+0x40>
 8011caa:	2200      	movs	r2, #0
 8011cac:	545a      	strb	r2, [r3, r1]
 8011cae:	1919      	adds	r1, r3, r4
 8011cb0:	1aa5      	subs	r5, r4, r2
 8011cb2:	42aa      	cmp	r2, r5
 8011cb4:	dae3      	bge.n	8011c7e <__utoa+0x36>
 8011cb6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8011cba:	780e      	ldrb	r6, [r1, #0]
 8011cbc:	7006      	strb	r6, [r0, #0]
 8011cbe:	3201      	adds	r2, #1
 8011cc0:	f801 5901 	strb.w	r5, [r1], #-1
 8011cc4:	e7f4      	b.n	8011cb0 <__utoa+0x68>
 8011cc6:	bf00      	nop
 8011cc8:	08015254 	.word	0x08015254

08011ccc <__cvt>:
 8011ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011cce:	ed2d 8b02 	vpush	{d8}
 8011cd2:	eeb0 8b40 	vmov.f64	d8, d0
 8011cd6:	b085      	sub	sp, #20
 8011cd8:	4617      	mov	r7, r2
 8011cda:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8011cdc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011cde:	ee18 2a90 	vmov	r2, s17
 8011ce2:	f025 0520 	bic.w	r5, r5, #32
 8011ce6:	2a00      	cmp	r2, #0
 8011ce8:	bfb6      	itet	lt
 8011cea:	222d      	movlt	r2, #45	@ 0x2d
 8011cec:	2200      	movge	r2, #0
 8011cee:	eeb1 8b40 	vneglt.f64	d8, d0
 8011cf2:	2d46      	cmp	r5, #70	@ 0x46
 8011cf4:	460c      	mov	r4, r1
 8011cf6:	701a      	strb	r2, [r3, #0]
 8011cf8:	d004      	beq.n	8011d04 <__cvt+0x38>
 8011cfa:	2d45      	cmp	r5, #69	@ 0x45
 8011cfc:	d100      	bne.n	8011d00 <__cvt+0x34>
 8011cfe:	3401      	adds	r4, #1
 8011d00:	2102      	movs	r1, #2
 8011d02:	e000      	b.n	8011d06 <__cvt+0x3a>
 8011d04:	2103      	movs	r1, #3
 8011d06:	ab03      	add	r3, sp, #12
 8011d08:	9301      	str	r3, [sp, #4]
 8011d0a:	ab02      	add	r3, sp, #8
 8011d0c:	9300      	str	r3, [sp, #0]
 8011d0e:	4622      	mov	r2, r4
 8011d10:	4633      	mov	r3, r6
 8011d12:	eeb0 0b48 	vmov.f64	d0, d8
 8011d16:	f000 fe6b 	bl	80129f0 <_dtoa_r>
 8011d1a:	2d47      	cmp	r5, #71	@ 0x47
 8011d1c:	d114      	bne.n	8011d48 <__cvt+0x7c>
 8011d1e:	07fb      	lsls	r3, r7, #31
 8011d20:	d50a      	bpl.n	8011d38 <__cvt+0x6c>
 8011d22:	1902      	adds	r2, r0, r4
 8011d24:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d2c:	bf08      	it	eq
 8011d2e:	9203      	streq	r2, [sp, #12]
 8011d30:	2130      	movs	r1, #48	@ 0x30
 8011d32:	9b03      	ldr	r3, [sp, #12]
 8011d34:	4293      	cmp	r3, r2
 8011d36:	d319      	bcc.n	8011d6c <__cvt+0xa0>
 8011d38:	9b03      	ldr	r3, [sp, #12]
 8011d3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011d3c:	1a1b      	subs	r3, r3, r0
 8011d3e:	6013      	str	r3, [r2, #0]
 8011d40:	b005      	add	sp, #20
 8011d42:	ecbd 8b02 	vpop	{d8}
 8011d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d48:	2d46      	cmp	r5, #70	@ 0x46
 8011d4a:	eb00 0204 	add.w	r2, r0, r4
 8011d4e:	d1e9      	bne.n	8011d24 <__cvt+0x58>
 8011d50:	7803      	ldrb	r3, [r0, #0]
 8011d52:	2b30      	cmp	r3, #48	@ 0x30
 8011d54:	d107      	bne.n	8011d66 <__cvt+0x9a>
 8011d56:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d5e:	bf1c      	itt	ne
 8011d60:	f1c4 0401 	rsbne	r4, r4, #1
 8011d64:	6034      	strne	r4, [r6, #0]
 8011d66:	6833      	ldr	r3, [r6, #0]
 8011d68:	441a      	add	r2, r3
 8011d6a:	e7db      	b.n	8011d24 <__cvt+0x58>
 8011d6c:	1c5c      	adds	r4, r3, #1
 8011d6e:	9403      	str	r4, [sp, #12]
 8011d70:	7019      	strb	r1, [r3, #0]
 8011d72:	e7de      	b.n	8011d32 <__cvt+0x66>

08011d74 <__exponent>:
 8011d74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011d76:	2900      	cmp	r1, #0
 8011d78:	bfba      	itte	lt
 8011d7a:	4249      	neglt	r1, r1
 8011d7c:	232d      	movlt	r3, #45	@ 0x2d
 8011d7e:	232b      	movge	r3, #43	@ 0x2b
 8011d80:	2909      	cmp	r1, #9
 8011d82:	7002      	strb	r2, [r0, #0]
 8011d84:	7043      	strb	r3, [r0, #1]
 8011d86:	dd29      	ble.n	8011ddc <__exponent+0x68>
 8011d88:	f10d 0307 	add.w	r3, sp, #7
 8011d8c:	461d      	mov	r5, r3
 8011d8e:	270a      	movs	r7, #10
 8011d90:	461a      	mov	r2, r3
 8011d92:	fbb1 f6f7 	udiv	r6, r1, r7
 8011d96:	fb07 1416 	mls	r4, r7, r6, r1
 8011d9a:	3430      	adds	r4, #48	@ 0x30
 8011d9c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011da0:	460c      	mov	r4, r1
 8011da2:	2c63      	cmp	r4, #99	@ 0x63
 8011da4:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8011da8:	4631      	mov	r1, r6
 8011daa:	dcf1      	bgt.n	8011d90 <__exponent+0x1c>
 8011dac:	3130      	adds	r1, #48	@ 0x30
 8011dae:	1e94      	subs	r4, r2, #2
 8011db0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011db4:	1c41      	adds	r1, r0, #1
 8011db6:	4623      	mov	r3, r4
 8011db8:	42ab      	cmp	r3, r5
 8011dba:	d30a      	bcc.n	8011dd2 <__exponent+0x5e>
 8011dbc:	f10d 0309 	add.w	r3, sp, #9
 8011dc0:	1a9b      	subs	r3, r3, r2
 8011dc2:	42ac      	cmp	r4, r5
 8011dc4:	bf88      	it	hi
 8011dc6:	2300      	movhi	r3, #0
 8011dc8:	3302      	adds	r3, #2
 8011dca:	4403      	add	r3, r0
 8011dcc:	1a18      	subs	r0, r3, r0
 8011dce:	b003      	add	sp, #12
 8011dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011dd2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011dd6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011dda:	e7ed      	b.n	8011db8 <__exponent+0x44>
 8011ddc:	2330      	movs	r3, #48	@ 0x30
 8011dde:	3130      	adds	r1, #48	@ 0x30
 8011de0:	7083      	strb	r3, [r0, #2]
 8011de2:	70c1      	strb	r1, [r0, #3]
 8011de4:	1d03      	adds	r3, r0, #4
 8011de6:	e7f1      	b.n	8011dcc <__exponent+0x58>

08011de8 <_printf_float>:
 8011de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dec:	b08d      	sub	sp, #52	@ 0x34
 8011dee:	460c      	mov	r4, r1
 8011df0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011df4:	4616      	mov	r6, r2
 8011df6:	461f      	mov	r7, r3
 8011df8:	4605      	mov	r5, r0
 8011dfa:	f000 fcef 	bl	80127dc <_localeconv_r>
 8011dfe:	f8d0 b000 	ldr.w	fp, [r0]
 8011e02:	4658      	mov	r0, fp
 8011e04:	f7ee fad4 	bl	80003b0 <strlen>
 8011e08:	2300      	movs	r3, #0
 8011e0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8011e0c:	f8d8 3000 	ldr.w	r3, [r8]
 8011e10:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011e14:	6822      	ldr	r2, [r4, #0]
 8011e16:	9005      	str	r0, [sp, #20]
 8011e18:	3307      	adds	r3, #7
 8011e1a:	f023 0307 	bic.w	r3, r3, #7
 8011e1e:	f103 0108 	add.w	r1, r3, #8
 8011e22:	f8c8 1000 	str.w	r1, [r8]
 8011e26:	ed93 0b00 	vldr	d0, [r3]
 8011e2a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8012088 <_printf_float+0x2a0>
 8011e2e:	eeb0 7bc0 	vabs.f64	d7, d0
 8011e32:	eeb4 7b46 	vcmp.f64	d7, d6
 8011e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e3a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8011e3e:	dd24      	ble.n	8011e8a <_printf_float+0xa2>
 8011e40:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e48:	d502      	bpl.n	8011e50 <_printf_float+0x68>
 8011e4a:	232d      	movs	r3, #45	@ 0x2d
 8011e4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011e50:	498f      	ldr	r1, [pc, #572]	@ (8012090 <_printf_float+0x2a8>)
 8011e52:	4b90      	ldr	r3, [pc, #576]	@ (8012094 <_printf_float+0x2ac>)
 8011e54:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8011e58:	bf94      	ite	ls
 8011e5a:	4688      	movls	r8, r1
 8011e5c:	4698      	movhi	r8, r3
 8011e5e:	f022 0204 	bic.w	r2, r2, #4
 8011e62:	2303      	movs	r3, #3
 8011e64:	6123      	str	r3, [r4, #16]
 8011e66:	6022      	str	r2, [r4, #0]
 8011e68:	f04f 0a00 	mov.w	sl, #0
 8011e6c:	9700      	str	r7, [sp, #0]
 8011e6e:	4633      	mov	r3, r6
 8011e70:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011e72:	4621      	mov	r1, r4
 8011e74:	4628      	mov	r0, r5
 8011e76:	f000 f9d1 	bl	801221c <_printf_common>
 8011e7a:	3001      	adds	r0, #1
 8011e7c:	f040 8089 	bne.w	8011f92 <_printf_float+0x1aa>
 8011e80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011e84:	b00d      	add	sp, #52	@ 0x34
 8011e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e8a:	eeb4 0b40 	vcmp.f64	d0, d0
 8011e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e92:	d709      	bvc.n	8011ea8 <_printf_float+0xc0>
 8011e94:	ee10 3a90 	vmov	r3, s1
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	bfbc      	itt	lt
 8011e9c:	232d      	movlt	r3, #45	@ 0x2d
 8011e9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011ea2:	497d      	ldr	r1, [pc, #500]	@ (8012098 <_printf_float+0x2b0>)
 8011ea4:	4b7d      	ldr	r3, [pc, #500]	@ (801209c <_printf_float+0x2b4>)
 8011ea6:	e7d5      	b.n	8011e54 <_printf_float+0x6c>
 8011ea8:	6863      	ldr	r3, [r4, #4]
 8011eaa:	1c59      	adds	r1, r3, #1
 8011eac:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8011eb0:	d139      	bne.n	8011f26 <_printf_float+0x13e>
 8011eb2:	2306      	movs	r3, #6
 8011eb4:	6063      	str	r3, [r4, #4]
 8011eb6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8011eba:	2300      	movs	r3, #0
 8011ebc:	6022      	str	r2, [r4, #0]
 8011ebe:	9303      	str	r3, [sp, #12]
 8011ec0:	ab0a      	add	r3, sp, #40	@ 0x28
 8011ec2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8011ec6:	ab09      	add	r3, sp, #36	@ 0x24
 8011ec8:	9300      	str	r3, [sp, #0]
 8011eca:	6861      	ldr	r1, [r4, #4]
 8011ecc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011ed0:	4628      	mov	r0, r5
 8011ed2:	f7ff fefb 	bl	8011ccc <__cvt>
 8011ed6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011eda:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011edc:	4680      	mov	r8, r0
 8011ede:	d129      	bne.n	8011f34 <_printf_float+0x14c>
 8011ee0:	1cc8      	adds	r0, r1, #3
 8011ee2:	db02      	blt.n	8011eea <_printf_float+0x102>
 8011ee4:	6863      	ldr	r3, [r4, #4]
 8011ee6:	4299      	cmp	r1, r3
 8011ee8:	dd41      	ble.n	8011f6e <_printf_float+0x186>
 8011eea:	f1a9 0902 	sub.w	r9, r9, #2
 8011eee:	fa5f f989 	uxtb.w	r9, r9
 8011ef2:	3901      	subs	r1, #1
 8011ef4:	464a      	mov	r2, r9
 8011ef6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011efa:	9109      	str	r1, [sp, #36]	@ 0x24
 8011efc:	f7ff ff3a 	bl	8011d74 <__exponent>
 8011f00:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011f02:	1813      	adds	r3, r2, r0
 8011f04:	2a01      	cmp	r2, #1
 8011f06:	4682      	mov	sl, r0
 8011f08:	6123      	str	r3, [r4, #16]
 8011f0a:	dc02      	bgt.n	8011f12 <_printf_float+0x12a>
 8011f0c:	6822      	ldr	r2, [r4, #0]
 8011f0e:	07d2      	lsls	r2, r2, #31
 8011f10:	d501      	bpl.n	8011f16 <_printf_float+0x12e>
 8011f12:	3301      	adds	r3, #1
 8011f14:	6123      	str	r3, [r4, #16]
 8011f16:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d0a6      	beq.n	8011e6c <_printf_float+0x84>
 8011f1e:	232d      	movs	r3, #45	@ 0x2d
 8011f20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011f24:	e7a2      	b.n	8011e6c <_printf_float+0x84>
 8011f26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011f2a:	d1c4      	bne.n	8011eb6 <_printf_float+0xce>
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d1c2      	bne.n	8011eb6 <_printf_float+0xce>
 8011f30:	2301      	movs	r3, #1
 8011f32:	e7bf      	b.n	8011eb4 <_printf_float+0xcc>
 8011f34:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8011f38:	d9db      	bls.n	8011ef2 <_printf_float+0x10a>
 8011f3a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8011f3e:	d118      	bne.n	8011f72 <_printf_float+0x18a>
 8011f40:	2900      	cmp	r1, #0
 8011f42:	6863      	ldr	r3, [r4, #4]
 8011f44:	dd0b      	ble.n	8011f5e <_printf_float+0x176>
 8011f46:	6121      	str	r1, [r4, #16]
 8011f48:	b913      	cbnz	r3, 8011f50 <_printf_float+0x168>
 8011f4a:	6822      	ldr	r2, [r4, #0]
 8011f4c:	07d0      	lsls	r0, r2, #31
 8011f4e:	d502      	bpl.n	8011f56 <_printf_float+0x16e>
 8011f50:	3301      	adds	r3, #1
 8011f52:	440b      	add	r3, r1
 8011f54:	6123      	str	r3, [r4, #16]
 8011f56:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011f58:	f04f 0a00 	mov.w	sl, #0
 8011f5c:	e7db      	b.n	8011f16 <_printf_float+0x12e>
 8011f5e:	b913      	cbnz	r3, 8011f66 <_printf_float+0x17e>
 8011f60:	6822      	ldr	r2, [r4, #0]
 8011f62:	07d2      	lsls	r2, r2, #31
 8011f64:	d501      	bpl.n	8011f6a <_printf_float+0x182>
 8011f66:	3302      	adds	r3, #2
 8011f68:	e7f4      	b.n	8011f54 <_printf_float+0x16c>
 8011f6a:	2301      	movs	r3, #1
 8011f6c:	e7f2      	b.n	8011f54 <_printf_float+0x16c>
 8011f6e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8011f72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011f74:	4299      	cmp	r1, r3
 8011f76:	db05      	blt.n	8011f84 <_printf_float+0x19c>
 8011f78:	6823      	ldr	r3, [r4, #0]
 8011f7a:	6121      	str	r1, [r4, #16]
 8011f7c:	07d8      	lsls	r0, r3, #31
 8011f7e:	d5ea      	bpl.n	8011f56 <_printf_float+0x16e>
 8011f80:	1c4b      	adds	r3, r1, #1
 8011f82:	e7e7      	b.n	8011f54 <_printf_float+0x16c>
 8011f84:	2900      	cmp	r1, #0
 8011f86:	bfd4      	ite	le
 8011f88:	f1c1 0202 	rsble	r2, r1, #2
 8011f8c:	2201      	movgt	r2, #1
 8011f8e:	4413      	add	r3, r2
 8011f90:	e7e0      	b.n	8011f54 <_printf_float+0x16c>
 8011f92:	6823      	ldr	r3, [r4, #0]
 8011f94:	055a      	lsls	r2, r3, #21
 8011f96:	d407      	bmi.n	8011fa8 <_printf_float+0x1c0>
 8011f98:	6923      	ldr	r3, [r4, #16]
 8011f9a:	4642      	mov	r2, r8
 8011f9c:	4631      	mov	r1, r6
 8011f9e:	4628      	mov	r0, r5
 8011fa0:	47b8      	blx	r7
 8011fa2:	3001      	adds	r0, #1
 8011fa4:	d12a      	bne.n	8011ffc <_printf_float+0x214>
 8011fa6:	e76b      	b.n	8011e80 <_printf_float+0x98>
 8011fa8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8011fac:	f240 80e0 	bls.w	8012170 <_printf_float+0x388>
 8011fb0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8011fb4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fbc:	d133      	bne.n	8012026 <_printf_float+0x23e>
 8011fbe:	4a38      	ldr	r2, [pc, #224]	@ (80120a0 <_printf_float+0x2b8>)
 8011fc0:	2301      	movs	r3, #1
 8011fc2:	4631      	mov	r1, r6
 8011fc4:	4628      	mov	r0, r5
 8011fc6:	47b8      	blx	r7
 8011fc8:	3001      	adds	r0, #1
 8011fca:	f43f af59 	beq.w	8011e80 <_printf_float+0x98>
 8011fce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011fd2:	4543      	cmp	r3, r8
 8011fd4:	db02      	blt.n	8011fdc <_printf_float+0x1f4>
 8011fd6:	6823      	ldr	r3, [r4, #0]
 8011fd8:	07d8      	lsls	r0, r3, #31
 8011fda:	d50f      	bpl.n	8011ffc <_printf_float+0x214>
 8011fdc:	9b05      	ldr	r3, [sp, #20]
 8011fde:	465a      	mov	r2, fp
 8011fe0:	4631      	mov	r1, r6
 8011fe2:	4628      	mov	r0, r5
 8011fe4:	47b8      	blx	r7
 8011fe6:	3001      	adds	r0, #1
 8011fe8:	f43f af4a 	beq.w	8011e80 <_printf_float+0x98>
 8011fec:	f04f 0900 	mov.w	r9, #0
 8011ff0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8011ff4:	f104 0a1a 	add.w	sl, r4, #26
 8011ff8:	45c8      	cmp	r8, r9
 8011ffa:	dc09      	bgt.n	8012010 <_printf_float+0x228>
 8011ffc:	6823      	ldr	r3, [r4, #0]
 8011ffe:	079b      	lsls	r3, r3, #30
 8012000:	f100 8107 	bmi.w	8012212 <_printf_float+0x42a>
 8012004:	68e0      	ldr	r0, [r4, #12]
 8012006:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012008:	4298      	cmp	r0, r3
 801200a:	bfb8      	it	lt
 801200c:	4618      	movlt	r0, r3
 801200e:	e739      	b.n	8011e84 <_printf_float+0x9c>
 8012010:	2301      	movs	r3, #1
 8012012:	4652      	mov	r2, sl
 8012014:	4631      	mov	r1, r6
 8012016:	4628      	mov	r0, r5
 8012018:	47b8      	blx	r7
 801201a:	3001      	adds	r0, #1
 801201c:	f43f af30 	beq.w	8011e80 <_printf_float+0x98>
 8012020:	f109 0901 	add.w	r9, r9, #1
 8012024:	e7e8      	b.n	8011ff8 <_printf_float+0x210>
 8012026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012028:	2b00      	cmp	r3, #0
 801202a:	dc3b      	bgt.n	80120a4 <_printf_float+0x2bc>
 801202c:	4a1c      	ldr	r2, [pc, #112]	@ (80120a0 <_printf_float+0x2b8>)
 801202e:	2301      	movs	r3, #1
 8012030:	4631      	mov	r1, r6
 8012032:	4628      	mov	r0, r5
 8012034:	47b8      	blx	r7
 8012036:	3001      	adds	r0, #1
 8012038:	f43f af22 	beq.w	8011e80 <_printf_float+0x98>
 801203c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012040:	ea59 0303 	orrs.w	r3, r9, r3
 8012044:	d102      	bne.n	801204c <_printf_float+0x264>
 8012046:	6823      	ldr	r3, [r4, #0]
 8012048:	07d9      	lsls	r1, r3, #31
 801204a:	d5d7      	bpl.n	8011ffc <_printf_float+0x214>
 801204c:	9b05      	ldr	r3, [sp, #20]
 801204e:	465a      	mov	r2, fp
 8012050:	4631      	mov	r1, r6
 8012052:	4628      	mov	r0, r5
 8012054:	47b8      	blx	r7
 8012056:	3001      	adds	r0, #1
 8012058:	f43f af12 	beq.w	8011e80 <_printf_float+0x98>
 801205c:	f04f 0a00 	mov.w	sl, #0
 8012060:	f104 0b1a 	add.w	fp, r4, #26
 8012064:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012066:	425b      	negs	r3, r3
 8012068:	4553      	cmp	r3, sl
 801206a:	dc01      	bgt.n	8012070 <_printf_float+0x288>
 801206c:	464b      	mov	r3, r9
 801206e:	e794      	b.n	8011f9a <_printf_float+0x1b2>
 8012070:	2301      	movs	r3, #1
 8012072:	465a      	mov	r2, fp
 8012074:	4631      	mov	r1, r6
 8012076:	4628      	mov	r0, r5
 8012078:	47b8      	blx	r7
 801207a:	3001      	adds	r0, #1
 801207c:	f43f af00 	beq.w	8011e80 <_printf_float+0x98>
 8012080:	f10a 0a01 	add.w	sl, sl, #1
 8012084:	e7ee      	b.n	8012064 <_printf_float+0x27c>
 8012086:	bf00      	nop
 8012088:	ffffffff 	.word	0xffffffff
 801208c:	7fefffff 	.word	0x7fefffff
 8012090:	0801537a 	.word	0x0801537a
 8012094:	0801537e 	.word	0x0801537e
 8012098:	08015382 	.word	0x08015382
 801209c:	08015386 	.word	0x08015386
 80120a0:	0801538a 	.word	0x0801538a
 80120a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80120a6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80120aa:	4553      	cmp	r3, sl
 80120ac:	bfa8      	it	ge
 80120ae:	4653      	movge	r3, sl
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	4699      	mov	r9, r3
 80120b4:	dc37      	bgt.n	8012126 <_printf_float+0x33e>
 80120b6:	2300      	movs	r3, #0
 80120b8:	9307      	str	r3, [sp, #28]
 80120ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80120be:	f104 021a 	add.w	r2, r4, #26
 80120c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80120c4:	9907      	ldr	r1, [sp, #28]
 80120c6:	9306      	str	r3, [sp, #24]
 80120c8:	eba3 0309 	sub.w	r3, r3, r9
 80120cc:	428b      	cmp	r3, r1
 80120ce:	dc31      	bgt.n	8012134 <_printf_float+0x34c>
 80120d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80120d2:	459a      	cmp	sl, r3
 80120d4:	dc3b      	bgt.n	801214e <_printf_float+0x366>
 80120d6:	6823      	ldr	r3, [r4, #0]
 80120d8:	07da      	lsls	r2, r3, #31
 80120da:	d438      	bmi.n	801214e <_printf_float+0x366>
 80120dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80120de:	ebaa 0903 	sub.w	r9, sl, r3
 80120e2:	9b06      	ldr	r3, [sp, #24]
 80120e4:	ebaa 0303 	sub.w	r3, sl, r3
 80120e8:	4599      	cmp	r9, r3
 80120ea:	bfa8      	it	ge
 80120ec:	4699      	movge	r9, r3
 80120ee:	f1b9 0f00 	cmp.w	r9, #0
 80120f2:	dc34      	bgt.n	801215e <_printf_float+0x376>
 80120f4:	f04f 0800 	mov.w	r8, #0
 80120f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80120fc:	f104 0b1a 	add.w	fp, r4, #26
 8012100:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012102:	ebaa 0303 	sub.w	r3, sl, r3
 8012106:	eba3 0309 	sub.w	r3, r3, r9
 801210a:	4543      	cmp	r3, r8
 801210c:	f77f af76 	ble.w	8011ffc <_printf_float+0x214>
 8012110:	2301      	movs	r3, #1
 8012112:	465a      	mov	r2, fp
 8012114:	4631      	mov	r1, r6
 8012116:	4628      	mov	r0, r5
 8012118:	47b8      	blx	r7
 801211a:	3001      	adds	r0, #1
 801211c:	f43f aeb0 	beq.w	8011e80 <_printf_float+0x98>
 8012120:	f108 0801 	add.w	r8, r8, #1
 8012124:	e7ec      	b.n	8012100 <_printf_float+0x318>
 8012126:	4642      	mov	r2, r8
 8012128:	4631      	mov	r1, r6
 801212a:	4628      	mov	r0, r5
 801212c:	47b8      	blx	r7
 801212e:	3001      	adds	r0, #1
 8012130:	d1c1      	bne.n	80120b6 <_printf_float+0x2ce>
 8012132:	e6a5      	b.n	8011e80 <_printf_float+0x98>
 8012134:	2301      	movs	r3, #1
 8012136:	4631      	mov	r1, r6
 8012138:	4628      	mov	r0, r5
 801213a:	9206      	str	r2, [sp, #24]
 801213c:	47b8      	blx	r7
 801213e:	3001      	adds	r0, #1
 8012140:	f43f ae9e 	beq.w	8011e80 <_printf_float+0x98>
 8012144:	9b07      	ldr	r3, [sp, #28]
 8012146:	9a06      	ldr	r2, [sp, #24]
 8012148:	3301      	adds	r3, #1
 801214a:	9307      	str	r3, [sp, #28]
 801214c:	e7b9      	b.n	80120c2 <_printf_float+0x2da>
 801214e:	9b05      	ldr	r3, [sp, #20]
 8012150:	465a      	mov	r2, fp
 8012152:	4631      	mov	r1, r6
 8012154:	4628      	mov	r0, r5
 8012156:	47b8      	blx	r7
 8012158:	3001      	adds	r0, #1
 801215a:	d1bf      	bne.n	80120dc <_printf_float+0x2f4>
 801215c:	e690      	b.n	8011e80 <_printf_float+0x98>
 801215e:	9a06      	ldr	r2, [sp, #24]
 8012160:	464b      	mov	r3, r9
 8012162:	4442      	add	r2, r8
 8012164:	4631      	mov	r1, r6
 8012166:	4628      	mov	r0, r5
 8012168:	47b8      	blx	r7
 801216a:	3001      	adds	r0, #1
 801216c:	d1c2      	bne.n	80120f4 <_printf_float+0x30c>
 801216e:	e687      	b.n	8011e80 <_printf_float+0x98>
 8012170:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8012174:	f1b9 0f01 	cmp.w	r9, #1
 8012178:	dc01      	bgt.n	801217e <_printf_float+0x396>
 801217a:	07db      	lsls	r3, r3, #31
 801217c:	d536      	bpl.n	80121ec <_printf_float+0x404>
 801217e:	2301      	movs	r3, #1
 8012180:	4642      	mov	r2, r8
 8012182:	4631      	mov	r1, r6
 8012184:	4628      	mov	r0, r5
 8012186:	47b8      	blx	r7
 8012188:	3001      	adds	r0, #1
 801218a:	f43f ae79 	beq.w	8011e80 <_printf_float+0x98>
 801218e:	9b05      	ldr	r3, [sp, #20]
 8012190:	465a      	mov	r2, fp
 8012192:	4631      	mov	r1, r6
 8012194:	4628      	mov	r0, r5
 8012196:	47b8      	blx	r7
 8012198:	3001      	adds	r0, #1
 801219a:	f43f ae71 	beq.w	8011e80 <_printf_float+0x98>
 801219e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80121a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80121a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121aa:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80121ae:	d018      	beq.n	80121e2 <_printf_float+0x3fa>
 80121b0:	464b      	mov	r3, r9
 80121b2:	f108 0201 	add.w	r2, r8, #1
 80121b6:	4631      	mov	r1, r6
 80121b8:	4628      	mov	r0, r5
 80121ba:	47b8      	blx	r7
 80121bc:	3001      	adds	r0, #1
 80121be:	d10c      	bne.n	80121da <_printf_float+0x3f2>
 80121c0:	e65e      	b.n	8011e80 <_printf_float+0x98>
 80121c2:	2301      	movs	r3, #1
 80121c4:	465a      	mov	r2, fp
 80121c6:	4631      	mov	r1, r6
 80121c8:	4628      	mov	r0, r5
 80121ca:	47b8      	blx	r7
 80121cc:	3001      	adds	r0, #1
 80121ce:	f43f ae57 	beq.w	8011e80 <_printf_float+0x98>
 80121d2:	f108 0801 	add.w	r8, r8, #1
 80121d6:	45c8      	cmp	r8, r9
 80121d8:	dbf3      	blt.n	80121c2 <_printf_float+0x3da>
 80121da:	4653      	mov	r3, sl
 80121dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80121e0:	e6dc      	b.n	8011f9c <_printf_float+0x1b4>
 80121e2:	f04f 0800 	mov.w	r8, #0
 80121e6:	f104 0b1a 	add.w	fp, r4, #26
 80121ea:	e7f4      	b.n	80121d6 <_printf_float+0x3ee>
 80121ec:	2301      	movs	r3, #1
 80121ee:	4642      	mov	r2, r8
 80121f0:	e7e1      	b.n	80121b6 <_printf_float+0x3ce>
 80121f2:	2301      	movs	r3, #1
 80121f4:	464a      	mov	r2, r9
 80121f6:	4631      	mov	r1, r6
 80121f8:	4628      	mov	r0, r5
 80121fa:	47b8      	blx	r7
 80121fc:	3001      	adds	r0, #1
 80121fe:	f43f ae3f 	beq.w	8011e80 <_printf_float+0x98>
 8012202:	f108 0801 	add.w	r8, r8, #1
 8012206:	68e3      	ldr	r3, [r4, #12]
 8012208:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801220a:	1a5b      	subs	r3, r3, r1
 801220c:	4543      	cmp	r3, r8
 801220e:	dcf0      	bgt.n	80121f2 <_printf_float+0x40a>
 8012210:	e6f8      	b.n	8012004 <_printf_float+0x21c>
 8012212:	f04f 0800 	mov.w	r8, #0
 8012216:	f104 0919 	add.w	r9, r4, #25
 801221a:	e7f4      	b.n	8012206 <_printf_float+0x41e>

0801221c <_printf_common>:
 801221c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012220:	4616      	mov	r6, r2
 8012222:	4698      	mov	r8, r3
 8012224:	688a      	ldr	r2, [r1, #8]
 8012226:	690b      	ldr	r3, [r1, #16]
 8012228:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801222c:	4293      	cmp	r3, r2
 801222e:	bfb8      	it	lt
 8012230:	4613      	movlt	r3, r2
 8012232:	6033      	str	r3, [r6, #0]
 8012234:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012238:	4607      	mov	r7, r0
 801223a:	460c      	mov	r4, r1
 801223c:	b10a      	cbz	r2, 8012242 <_printf_common+0x26>
 801223e:	3301      	adds	r3, #1
 8012240:	6033      	str	r3, [r6, #0]
 8012242:	6823      	ldr	r3, [r4, #0]
 8012244:	0699      	lsls	r1, r3, #26
 8012246:	bf42      	ittt	mi
 8012248:	6833      	ldrmi	r3, [r6, #0]
 801224a:	3302      	addmi	r3, #2
 801224c:	6033      	strmi	r3, [r6, #0]
 801224e:	6825      	ldr	r5, [r4, #0]
 8012250:	f015 0506 	ands.w	r5, r5, #6
 8012254:	d106      	bne.n	8012264 <_printf_common+0x48>
 8012256:	f104 0a19 	add.w	sl, r4, #25
 801225a:	68e3      	ldr	r3, [r4, #12]
 801225c:	6832      	ldr	r2, [r6, #0]
 801225e:	1a9b      	subs	r3, r3, r2
 8012260:	42ab      	cmp	r3, r5
 8012262:	dc26      	bgt.n	80122b2 <_printf_common+0x96>
 8012264:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012268:	6822      	ldr	r2, [r4, #0]
 801226a:	3b00      	subs	r3, #0
 801226c:	bf18      	it	ne
 801226e:	2301      	movne	r3, #1
 8012270:	0692      	lsls	r2, r2, #26
 8012272:	d42b      	bmi.n	80122cc <_printf_common+0xb0>
 8012274:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012278:	4641      	mov	r1, r8
 801227a:	4638      	mov	r0, r7
 801227c:	47c8      	blx	r9
 801227e:	3001      	adds	r0, #1
 8012280:	d01e      	beq.n	80122c0 <_printf_common+0xa4>
 8012282:	6823      	ldr	r3, [r4, #0]
 8012284:	6922      	ldr	r2, [r4, #16]
 8012286:	f003 0306 	and.w	r3, r3, #6
 801228a:	2b04      	cmp	r3, #4
 801228c:	bf02      	ittt	eq
 801228e:	68e5      	ldreq	r5, [r4, #12]
 8012290:	6833      	ldreq	r3, [r6, #0]
 8012292:	1aed      	subeq	r5, r5, r3
 8012294:	68a3      	ldr	r3, [r4, #8]
 8012296:	bf0c      	ite	eq
 8012298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801229c:	2500      	movne	r5, #0
 801229e:	4293      	cmp	r3, r2
 80122a0:	bfc4      	itt	gt
 80122a2:	1a9b      	subgt	r3, r3, r2
 80122a4:	18ed      	addgt	r5, r5, r3
 80122a6:	2600      	movs	r6, #0
 80122a8:	341a      	adds	r4, #26
 80122aa:	42b5      	cmp	r5, r6
 80122ac:	d11a      	bne.n	80122e4 <_printf_common+0xc8>
 80122ae:	2000      	movs	r0, #0
 80122b0:	e008      	b.n	80122c4 <_printf_common+0xa8>
 80122b2:	2301      	movs	r3, #1
 80122b4:	4652      	mov	r2, sl
 80122b6:	4641      	mov	r1, r8
 80122b8:	4638      	mov	r0, r7
 80122ba:	47c8      	blx	r9
 80122bc:	3001      	adds	r0, #1
 80122be:	d103      	bne.n	80122c8 <_printf_common+0xac>
 80122c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80122c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122c8:	3501      	adds	r5, #1
 80122ca:	e7c6      	b.n	801225a <_printf_common+0x3e>
 80122cc:	18e1      	adds	r1, r4, r3
 80122ce:	1c5a      	adds	r2, r3, #1
 80122d0:	2030      	movs	r0, #48	@ 0x30
 80122d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80122d6:	4422      	add	r2, r4
 80122d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80122dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80122e0:	3302      	adds	r3, #2
 80122e2:	e7c7      	b.n	8012274 <_printf_common+0x58>
 80122e4:	2301      	movs	r3, #1
 80122e6:	4622      	mov	r2, r4
 80122e8:	4641      	mov	r1, r8
 80122ea:	4638      	mov	r0, r7
 80122ec:	47c8      	blx	r9
 80122ee:	3001      	adds	r0, #1
 80122f0:	d0e6      	beq.n	80122c0 <_printf_common+0xa4>
 80122f2:	3601      	adds	r6, #1
 80122f4:	e7d9      	b.n	80122aa <_printf_common+0x8e>
	...

080122f8 <_printf_i>:
 80122f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80122fc:	7e0f      	ldrb	r7, [r1, #24]
 80122fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012300:	2f78      	cmp	r7, #120	@ 0x78
 8012302:	4691      	mov	r9, r2
 8012304:	4680      	mov	r8, r0
 8012306:	460c      	mov	r4, r1
 8012308:	469a      	mov	sl, r3
 801230a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801230e:	d807      	bhi.n	8012320 <_printf_i+0x28>
 8012310:	2f62      	cmp	r7, #98	@ 0x62
 8012312:	d80a      	bhi.n	801232a <_printf_i+0x32>
 8012314:	2f00      	cmp	r7, #0
 8012316:	f000 80d2 	beq.w	80124be <_printf_i+0x1c6>
 801231a:	2f58      	cmp	r7, #88	@ 0x58
 801231c:	f000 80b9 	beq.w	8012492 <_printf_i+0x19a>
 8012320:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012324:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012328:	e03a      	b.n	80123a0 <_printf_i+0xa8>
 801232a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801232e:	2b15      	cmp	r3, #21
 8012330:	d8f6      	bhi.n	8012320 <_printf_i+0x28>
 8012332:	a101      	add	r1, pc, #4	@ (adr r1, 8012338 <_printf_i+0x40>)
 8012334:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012338:	08012391 	.word	0x08012391
 801233c:	080123a5 	.word	0x080123a5
 8012340:	08012321 	.word	0x08012321
 8012344:	08012321 	.word	0x08012321
 8012348:	08012321 	.word	0x08012321
 801234c:	08012321 	.word	0x08012321
 8012350:	080123a5 	.word	0x080123a5
 8012354:	08012321 	.word	0x08012321
 8012358:	08012321 	.word	0x08012321
 801235c:	08012321 	.word	0x08012321
 8012360:	08012321 	.word	0x08012321
 8012364:	080124a5 	.word	0x080124a5
 8012368:	080123cf 	.word	0x080123cf
 801236c:	0801245f 	.word	0x0801245f
 8012370:	08012321 	.word	0x08012321
 8012374:	08012321 	.word	0x08012321
 8012378:	080124c7 	.word	0x080124c7
 801237c:	08012321 	.word	0x08012321
 8012380:	080123cf 	.word	0x080123cf
 8012384:	08012321 	.word	0x08012321
 8012388:	08012321 	.word	0x08012321
 801238c:	08012467 	.word	0x08012467
 8012390:	6833      	ldr	r3, [r6, #0]
 8012392:	1d1a      	adds	r2, r3, #4
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	6032      	str	r2, [r6, #0]
 8012398:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801239c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80123a0:	2301      	movs	r3, #1
 80123a2:	e09d      	b.n	80124e0 <_printf_i+0x1e8>
 80123a4:	6833      	ldr	r3, [r6, #0]
 80123a6:	6820      	ldr	r0, [r4, #0]
 80123a8:	1d19      	adds	r1, r3, #4
 80123aa:	6031      	str	r1, [r6, #0]
 80123ac:	0606      	lsls	r6, r0, #24
 80123ae:	d501      	bpl.n	80123b4 <_printf_i+0xbc>
 80123b0:	681d      	ldr	r5, [r3, #0]
 80123b2:	e003      	b.n	80123bc <_printf_i+0xc4>
 80123b4:	0645      	lsls	r5, r0, #25
 80123b6:	d5fb      	bpl.n	80123b0 <_printf_i+0xb8>
 80123b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80123bc:	2d00      	cmp	r5, #0
 80123be:	da03      	bge.n	80123c8 <_printf_i+0xd0>
 80123c0:	232d      	movs	r3, #45	@ 0x2d
 80123c2:	426d      	negs	r5, r5
 80123c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80123c8:	4859      	ldr	r0, [pc, #356]	@ (8012530 <_printf_i+0x238>)
 80123ca:	230a      	movs	r3, #10
 80123cc:	e011      	b.n	80123f2 <_printf_i+0xfa>
 80123ce:	6821      	ldr	r1, [r4, #0]
 80123d0:	6833      	ldr	r3, [r6, #0]
 80123d2:	0608      	lsls	r0, r1, #24
 80123d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80123d8:	d402      	bmi.n	80123e0 <_printf_i+0xe8>
 80123da:	0649      	lsls	r1, r1, #25
 80123dc:	bf48      	it	mi
 80123de:	b2ad      	uxthmi	r5, r5
 80123e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80123e2:	4853      	ldr	r0, [pc, #332]	@ (8012530 <_printf_i+0x238>)
 80123e4:	6033      	str	r3, [r6, #0]
 80123e6:	bf14      	ite	ne
 80123e8:	230a      	movne	r3, #10
 80123ea:	2308      	moveq	r3, #8
 80123ec:	2100      	movs	r1, #0
 80123ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80123f2:	6866      	ldr	r6, [r4, #4]
 80123f4:	60a6      	str	r6, [r4, #8]
 80123f6:	2e00      	cmp	r6, #0
 80123f8:	bfa2      	ittt	ge
 80123fa:	6821      	ldrge	r1, [r4, #0]
 80123fc:	f021 0104 	bicge.w	r1, r1, #4
 8012400:	6021      	strge	r1, [r4, #0]
 8012402:	b90d      	cbnz	r5, 8012408 <_printf_i+0x110>
 8012404:	2e00      	cmp	r6, #0
 8012406:	d04b      	beq.n	80124a0 <_printf_i+0x1a8>
 8012408:	4616      	mov	r6, r2
 801240a:	fbb5 f1f3 	udiv	r1, r5, r3
 801240e:	fb03 5711 	mls	r7, r3, r1, r5
 8012412:	5dc7      	ldrb	r7, [r0, r7]
 8012414:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012418:	462f      	mov	r7, r5
 801241a:	42bb      	cmp	r3, r7
 801241c:	460d      	mov	r5, r1
 801241e:	d9f4      	bls.n	801240a <_printf_i+0x112>
 8012420:	2b08      	cmp	r3, #8
 8012422:	d10b      	bne.n	801243c <_printf_i+0x144>
 8012424:	6823      	ldr	r3, [r4, #0]
 8012426:	07df      	lsls	r7, r3, #31
 8012428:	d508      	bpl.n	801243c <_printf_i+0x144>
 801242a:	6923      	ldr	r3, [r4, #16]
 801242c:	6861      	ldr	r1, [r4, #4]
 801242e:	4299      	cmp	r1, r3
 8012430:	bfde      	ittt	le
 8012432:	2330      	movle	r3, #48	@ 0x30
 8012434:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012438:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801243c:	1b92      	subs	r2, r2, r6
 801243e:	6122      	str	r2, [r4, #16]
 8012440:	f8cd a000 	str.w	sl, [sp]
 8012444:	464b      	mov	r3, r9
 8012446:	aa03      	add	r2, sp, #12
 8012448:	4621      	mov	r1, r4
 801244a:	4640      	mov	r0, r8
 801244c:	f7ff fee6 	bl	801221c <_printf_common>
 8012450:	3001      	adds	r0, #1
 8012452:	d14a      	bne.n	80124ea <_printf_i+0x1f2>
 8012454:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012458:	b004      	add	sp, #16
 801245a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801245e:	6823      	ldr	r3, [r4, #0]
 8012460:	f043 0320 	orr.w	r3, r3, #32
 8012464:	6023      	str	r3, [r4, #0]
 8012466:	4833      	ldr	r0, [pc, #204]	@ (8012534 <_printf_i+0x23c>)
 8012468:	2778      	movs	r7, #120	@ 0x78
 801246a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801246e:	6823      	ldr	r3, [r4, #0]
 8012470:	6831      	ldr	r1, [r6, #0]
 8012472:	061f      	lsls	r7, r3, #24
 8012474:	f851 5b04 	ldr.w	r5, [r1], #4
 8012478:	d402      	bmi.n	8012480 <_printf_i+0x188>
 801247a:	065f      	lsls	r7, r3, #25
 801247c:	bf48      	it	mi
 801247e:	b2ad      	uxthmi	r5, r5
 8012480:	6031      	str	r1, [r6, #0]
 8012482:	07d9      	lsls	r1, r3, #31
 8012484:	bf44      	itt	mi
 8012486:	f043 0320 	orrmi.w	r3, r3, #32
 801248a:	6023      	strmi	r3, [r4, #0]
 801248c:	b11d      	cbz	r5, 8012496 <_printf_i+0x19e>
 801248e:	2310      	movs	r3, #16
 8012490:	e7ac      	b.n	80123ec <_printf_i+0xf4>
 8012492:	4827      	ldr	r0, [pc, #156]	@ (8012530 <_printf_i+0x238>)
 8012494:	e7e9      	b.n	801246a <_printf_i+0x172>
 8012496:	6823      	ldr	r3, [r4, #0]
 8012498:	f023 0320 	bic.w	r3, r3, #32
 801249c:	6023      	str	r3, [r4, #0]
 801249e:	e7f6      	b.n	801248e <_printf_i+0x196>
 80124a0:	4616      	mov	r6, r2
 80124a2:	e7bd      	b.n	8012420 <_printf_i+0x128>
 80124a4:	6833      	ldr	r3, [r6, #0]
 80124a6:	6825      	ldr	r5, [r4, #0]
 80124a8:	6961      	ldr	r1, [r4, #20]
 80124aa:	1d18      	adds	r0, r3, #4
 80124ac:	6030      	str	r0, [r6, #0]
 80124ae:	062e      	lsls	r6, r5, #24
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	d501      	bpl.n	80124b8 <_printf_i+0x1c0>
 80124b4:	6019      	str	r1, [r3, #0]
 80124b6:	e002      	b.n	80124be <_printf_i+0x1c6>
 80124b8:	0668      	lsls	r0, r5, #25
 80124ba:	d5fb      	bpl.n	80124b4 <_printf_i+0x1bc>
 80124bc:	8019      	strh	r1, [r3, #0]
 80124be:	2300      	movs	r3, #0
 80124c0:	6123      	str	r3, [r4, #16]
 80124c2:	4616      	mov	r6, r2
 80124c4:	e7bc      	b.n	8012440 <_printf_i+0x148>
 80124c6:	6833      	ldr	r3, [r6, #0]
 80124c8:	1d1a      	adds	r2, r3, #4
 80124ca:	6032      	str	r2, [r6, #0]
 80124cc:	681e      	ldr	r6, [r3, #0]
 80124ce:	6862      	ldr	r2, [r4, #4]
 80124d0:	2100      	movs	r1, #0
 80124d2:	4630      	mov	r0, r6
 80124d4:	f7ed ff1c 	bl	8000310 <memchr>
 80124d8:	b108      	cbz	r0, 80124de <_printf_i+0x1e6>
 80124da:	1b80      	subs	r0, r0, r6
 80124dc:	6060      	str	r0, [r4, #4]
 80124de:	6863      	ldr	r3, [r4, #4]
 80124e0:	6123      	str	r3, [r4, #16]
 80124e2:	2300      	movs	r3, #0
 80124e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80124e8:	e7aa      	b.n	8012440 <_printf_i+0x148>
 80124ea:	6923      	ldr	r3, [r4, #16]
 80124ec:	4632      	mov	r2, r6
 80124ee:	4649      	mov	r1, r9
 80124f0:	4640      	mov	r0, r8
 80124f2:	47d0      	blx	sl
 80124f4:	3001      	adds	r0, #1
 80124f6:	d0ad      	beq.n	8012454 <_printf_i+0x15c>
 80124f8:	6823      	ldr	r3, [r4, #0]
 80124fa:	079b      	lsls	r3, r3, #30
 80124fc:	d413      	bmi.n	8012526 <_printf_i+0x22e>
 80124fe:	68e0      	ldr	r0, [r4, #12]
 8012500:	9b03      	ldr	r3, [sp, #12]
 8012502:	4298      	cmp	r0, r3
 8012504:	bfb8      	it	lt
 8012506:	4618      	movlt	r0, r3
 8012508:	e7a6      	b.n	8012458 <_printf_i+0x160>
 801250a:	2301      	movs	r3, #1
 801250c:	4632      	mov	r2, r6
 801250e:	4649      	mov	r1, r9
 8012510:	4640      	mov	r0, r8
 8012512:	47d0      	blx	sl
 8012514:	3001      	adds	r0, #1
 8012516:	d09d      	beq.n	8012454 <_printf_i+0x15c>
 8012518:	3501      	adds	r5, #1
 801251a:	68e3      	ldr	r3, [r4, #12]
 801251c:	9903      	ldr	r1, [sp, #12]
 801251e:	1a5b      	subs	r3, r3, r1
 8012520:	42ab      	cmp	r3, r5
 8012522:	dcf2      	bgt.n	801250a <_printf_i+0x212>
 8012524:	e7eb      	b.n	80124fe <_printf_i+0x206>
 8012526:	2500      	movs	r5, #0
 8012528:	f104 0619 	add.w	r6, r4, #25
 801252c:	e7f5      	b.n	801251a <_printf_i+0x222>
 801252e:	bf00      	nop
 8012530:	0801538c 	.word	0x0801538c
 8012534:	0801539d 	.word	0x0801539d

08012538 <std>:
 8012538:	2300      	movs	r3, #0
 801253a:	b510      	push	{r4, lr}
 801253c:	4604      	mov	r4, r0
 801253e:	e9c0 3300 	strd	r3, r3, [r0]
 8012542:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012546:	6083      	str	r3, [r0, #8]
 8012548:	8181      	strh	r1, [r0, #12]
 801254a:	6643      	str	r3, [r0, #100]	@ 0x64
 801254c:	81c2      	strh	r2, [r0, #14]
 801254e:	6183      	str	r3, [r0, #24]
 8012550:	4619      	mov	r1, r3
 8012552:	2208      	movs	r2, #8
 8012554:	305c      	adds	r0, #92	@ 0x5c
 8012556:	f000 f914 	bl	8012782 <memset>
 801255a:	4b0d      	ldr	r3, [pc, #52]	@ (8012590 <std+0x58>)
 801255c:	6263      	str	r3, [r4, #36]	@ 0x24
 801255e:	4b0d      	ldr	r3, [pc, #52]	@ (8012594 <std+0x5c>)
 8012560:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012562:	4b0d      	ldr	r3, [pc, #52]	@ (8012598 <std+0x60>)
 8012564:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012566:	4b0d      	ldr	r3, [pc, #52]	@ (801259c <std+0x64>)
 8012568:	6323      	str	r3, [r4, #48]	@ 0x30
 801256a:	4b0d      	ldr	r3, [pc, #52]	@ (80125a0 <std+0x68>)
 801256c:	6224      	str	r4, [r4, #32]
 801256e:	429c      	cmp	r4, r3
 8012570:	d006      	beq.n	8012580 <std+0x48>
 8012572:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012576:	4294      	cmp	r4, r2
 8012578:	d002      	beq.n	8012580 <std+0x48>
 801257a:	33d0      	adds	r3, #208	@ 0xd0
 801257c:	429c      	cmp	r4, r3
 801257e:	d105      	bne.n	801258c <std+0x54>
 8012580:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012588:	f000 b99c 	b.w	80128c4 <__retarget_lock_init_recursive>
 801258c:	bd10      	pop	{r4, pc}
 801258e:	bf00      	nop
 8012590:	080126fd 	.word	0x080126fd
 8012594:	0801271f 	.word	0x0801271f
 8012598:	08012757 	.word	0x08012757
 801259c:	0801277b 	.word	0x0801277b
 80125a0:	240010c4 	.word	0x240010c4

080125a4 <stdio_exit_handler>:
 80125a4:	4a02      	ldr	r2, [pc, #8]	@ (80125b0 <stdio_exit_handler+0xc>)
 80125a6:	4903      	ldr	r1, [pc, #12]	@ (80125b4 <stdio_exit_handler+0x10>)
 80125a8:	4803      	ldr	r0, [pc, #12]	@ (80125b8 <stdio_exit_handler+0x14>)
 80125aa:	f000 b869 	b.w	8012680 <_fwalk_sglue>
 80125ae:	bf00      	nop
 80125b0:	24000048 	.word	0x24000048
 80125b4:	08014159 	.word	0x08014159
 80125b8:	24000058 	.word	0x24000058

080125bc <cleanup_stdio>:
 80125bc:	6841      	ldr	r1, [r0, #4]
 80125be:	4b0c      	ldr	r3, [pc, #48]	@ (80125f0 <cleanup_stdio+0x34>)
 80125c0:	4299      	cmp	r1, r3
 80125c2:	b510      	push	{r4, lr}
 80125c4:	4604      	mov	r4, r0
 80125c6:	d001      	beq.n	80125cc <cleanup_stdio+0x10>
 80125c8:	f001 fdc6 	bl	8014158 <_fflush_r>
 80125cc:	68a1      	ldr	r1, [r4, #8]
 80125ce:	4b09      	ldr	r3, [pc, #36]	@ (80125f4 <cleanup_stdio+0x38>)
 80125d0:	4299      	cmp	r1, r3
 80125d2:	d002      	beq.n	80125da <cleanup_stdio+0x1e>
 80125d4:	4620      	mov	r0, r4
 80125d6:	f001 fdbf 	bl	8014158 <_fflush_r>
 80125da:	68e1      	ldr	r1, [r4, #12]
 80125dc:	4b06      	ldr	r3, [pc, #24]	@ (80125f8 <cleanup_stdio+0x3c>)
 80125de:	4299      	cmp	r1, r3
 80125e0:	d004      	beq.n	80125ec <cleanup_stdio+0x30>
 80125e2:	4620      	mov	r0, r4
 80125e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80125e8:	f001 bdb6 	b.w	8014158 <_fflush_r>
 80125ec:	bd10      	pop	{r4, pc}
 80125ee:	bf00      	nop
 80125f0:	240010c4 	.word	0x240010c4
 80125f4:	2400112c 	.word	0x2400112c
 80125f8:	24001194 	.word	0x24001194

080125fc <global_stdio_init.part.0>:
 80125fc:	b510      	push	{r4, lr}
 80125fe:	4b0b      	ldr	r3, [pc, #44]	@ (801262c <global_stdio_init.part.0+0x30>)
 8012600:	4c0b      	ldr	r4, [pc, #44]	@ (8012630 <global_stdio_init.part.0+0x34>)
 8012602:	4a0c      	ldr	r2, [pc, #48]	@ (8012634 <global_stdio_init.part.0+0x38>)
 8012604:	601a      	str	r2, [r3, #0]
 8012606:	4620      	mov	r0, r4
 8012608:	2200      	movs	r2, #0
 801260a:	2104      	movs	r1, #4
 801260c:	f7ff ff94 	bl	8012538 <std>
 8012610:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012614:	2201      	movs	r2, #1
 8012616:	2109      	movs	r1, #9
 8012618:	f7ff ff8e 	bl	8012538 <std>
 801261c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012620:	2202      	movs	r2, #2
 8012622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012626:	2112      	movs	r1, #18
 8012628:	f7ff bf86 	b.w	8012538 <std>
 801262c:	240011fc 	.word	0x240011fc
 8012630:	240010c4 	.word	0x240010c4
 8012634:	080125a5 	.word	0x080125a5

08012638 <__sfp_lock_acquire>:
 8012638:	4801      	ldr	r0, [pc, #4]	@ (8012640 <__sfp_lock_acquire+0x8>)
 801263a:	f000 b944 	b.w	80128c6 <__retarget_lock_acquire_recursive>
 801263e:	bf00      	nop
 8012640:	24001205 	.word	0x24001205

08012644 <__sfp_lock_release>:
 8012644:	4801      	ldr	r0, [pc, #4]	@ (801264c <__sfp_lock_release+0x8>)
 8012646:	f000 b93f 	b.w	80128c8 <__retarget_lock_release_recursive>
 801264a:	bf00      	nop
 801264c:	24001205 	.word	0x24001205

08012650 <__sinit>:
 8012650:	b510      	push	{r4, lr}
 8012652:	4604      	mov	r4, r0
 8012654:	f7ff fff0 	bl	8012638 <__sfp_lock_acquire>
 8012658:	6a23      	ldr	r3, [r4, #32]
 801265a:	b11b      	cbz	r3, 8012664 <__sinit+0x14>
 801265c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012660:	f7ff bff0 	b.w	8012644 <__sfp_lock_release>
 8012664:	4b04      	ldr	r3, [pc, #16]	@ (8012678 <__sinit+0x28>)
 8012666:	6223      	str	r3, [r4, #32]
 8012668:	4b04      	ldr	r3, [pc, #16]	@ (801267c <__sinit+0x2c>)
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d1f5      	bne.n	801265c <__sinit+0xc>
 8012670:	f7ff ffc4 	bl	80125fc <global_stdio_init.part.0>
 8012674:	e7f2      	b.n	801265c <__sinit+0xc>
 8012676:	bf00      	nop
 8012678:	080125bd 	.word	0x080125bd
 801267c:	240011fc 	.word	0x240011fc

08012680 <_fwalk_sglue>:
 8012680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012684:	4607      	mov	r7, r0
 8012686:	4688      	mov	r8, r1
 8012688:	4614      	mov	r4, r2
 801268a:	2600      	movs	r6, #0
 801268c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012690:	f1b9 0901 	subs.w	r9, r9, #1
 8012694:	d505      	bpl.n	80126a2 <_fwalk_sglue+0x22>
 8012696:	6824      	ldr	r4, [r4, #0]
 8012698:	2c00      	cmp	r4, #0
 801269a:	d1f7      	bne.n	801268c <_fwalk_sglue+0xc>
 801269c:	4630      	mov	r0, r6
 801269e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126a2:	89ab      	ldrh	r3, [r5, #12]
 80126a4:	2b01      	cmp	r3, #1
 80126a6:	d907      	bls.n	80126b8 <_fwalk_sglue+0x38>
 80126a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80126ac:	3301      	adds	r3, #1
 80126ae:	d003      	beq.n	80126b8 <_fwalk_sglue+0x38>
 80126b0:	4629      	mov	r1, r5
 80126b2:	4638      	mov	r0, r7
 80126b4:	47c0      	blx	r8
 80126b6:	4306      	orrs	r6, r0
 80126b8:	3568      	adds	r5, #104	@ 0x68
 80126ba:	e7e9      	b.n	8012690 <_fwalk_sglue+0x10>

080126bc <siprintf>:
 80126bc:	b40e      	push	{r1, r2, r3}
 80126be:	b500      	push	{lr}
 80126c0:	b09c      	sub	sp, #112	@ 0x70
 80126c2:	ab1d      	add	r3, sp, #116	@ 0x74
 80126c4:	9002      	str	r0, [sp, #8]
 80126c6:	9006      	str	r0, [sp, #24]
 80126c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80126cc:	4809      	ldr	r0, [pc, #36]	@ (80126f4 <siprintf+0x38>)
 80126ce:	9107      	str	r1, [sp, #28]
 80126d0:	9104      	str	r1, [sp, #16]
 80126d2:	4909      	ldr	r1, [pc, #36]	@ (80126f8 <siprintf+0x3c>)
 80126d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80126d8:	9105      	str	r1, [sp, #20]
 80126da:	6800      	ldr	r0, [r0, #0]
 80126dc:	9301      	str	r3, [sp, #4]
 80126de:	a902      	add	r1, sp, #8
 80126e0:	f001 fbba 	bl	8013e58 <_svfiprintf_r>
 80126e4:	9b02      	ldr	r3, [sp, #8]
 80126e6:	2200      	movs	r2, #0
 80126e8:	701a      	strb	r2, [r3, #0]
 80126ea:	b01c      	add	sp, #112	@ 0x70
 80126ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80126f0:	b003      	add	sp, #12
 80126f2:	4770      	bx	lr
 80126f4:	24000054 	.word	0x24000054
 80126f8:	ffff0208 	.word	0xffff0208

080126fc <__sread>:
 80126fc:	b510      	push	{r4, lr}
 80126fe:	460c      	mov	r4, r1
 8012700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012704:	f000 f890 	bl	8012828 <_read_r>
 8012708:	2800      	cmp	r0, #0
 801270a:	bfab      	itete	ge
 801270c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801270e:	89a3      	ldrhlt	r3, [r4, #12]
 8012710:	181b      	addge	r3, r3, r0
 8012712:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012716:	bfac      	ite	ge
 8012718:	6563      	strge	r3, [r4, #84]	@ 0x54
 801271a:	81a3      	strhlt	r3, [r4, #12]
 801271c:	bd10      	pop	{r4, pc}

0801271e <__swrite>:
 801271e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012722:	461f      	mov	r7, r3
 8012724:	898b      	ldrh	r3, [r1, #12]
 8012726:	05db      	lsls	r3, r3, #23
 8012728:	4605      	mov	r5, r0
 801272a:	460c      	mov	r4, r1
 801272c:	4616      	mov	r6, r2
 801272e:	d505      	bpl.n	801273c <__swrite+0x1e>
 8012730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012734:	2302      	movs	r3, #2
 8012736:	2200      	movs	r2, #0
 8012738:	f000 f864 	bl	8012804 <_lseek_r>
 801273c:	89a3      	ldrh	r3, [r4, #12]
 801273e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012742:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012746:	81a3      	strh	r3, [r4, #12]
 8012748:	4632      	mov	r2, r6
 801274a:	463b      	mov	r3, r7
 801274c:	4628      	mov	r0, r5
 801274e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012752:	f000 b87b 	b.w	801284c <_write_r>

08012756 <__sseek>:
 8012756:	b510      	push	{r4, lr}
 8012758:	460c      	mov	r4, r1
 801275a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801275e:	f000 f851 	bl	8012804 <_lseek_r>
 8012762:	1c43      	adds	r3, r0, #1
 8012764:	89a3      	ldrh	r3, [r4, #12]
 8012766:	bf15      	itete	ne
 8012768:	6560      	strne	r0, [r4, #84]	@ 0x54
 801276a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801276e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012772:	81a3      	strheq	r3, [r4, #12]
 8012774:	bf18      	it	ne
 8012776:	81a3      	strhne	r3, [r4, #12]
 8012778:	bd10      	pop	{r4, pc}

0801277a <__sclose>:
 801277a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801277e:	f000 b831 	b.w	80127e4 <_close_r>

08012782 <memset>:
 8012782:	4402      	add	r2, r0
 8012784:	4603      	mov	r3, r0
 8012786:	4293      	cmp	r3, r2
 8012788:	d100      	bne.n	801278c <memset+0xa>
 801278a:	4770      	bx	lr
 801278c:	f803 1b01 	strb.w	r1, [r3], #1
 8012790:	e7f9      	b.n	8012786 <memset+0x4>

08012792 <strcat>:
 8012792:	b510      	push	{r4, lr}
 8012794:	4602      	mov	r2, r0
 8012796:	7814      	ldrb	r4, [r2, #0]
 8012798:	4613      	mov	r3, r2
 801279a:	3201      	adds	r2, #1
 801279c:	2c00      	cmp	r4, #0
 801279e:	d1fa      	bne.n	8012796 <strcat+0x4>
 80127a0:	3b01      	subs	r3, #1
 80127a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80127a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80127aa:	2a00      	cmp	r2, #0
 80127ac:	d1f9      	bne.n	80127a2 <strcat+0x10>
 80127ae:	bd10      	pop	{r4, pc}

080127b0 <strstr>:
 80127b0:	780a      	ldrb	r2, [r1, #0]
 80127b2:	b570      	push	{r4, r5, r6, lr}
 80127b4:	b96a      	cbnz	r2, 80127d2 <strstr+0x22>
 80127b6:	bd70      	pop	{r4, r5, r6, pc}
 80127b8:	429a      	cmp	r2, r3
 80127ba:	d109      	bne.n	80127d0 <strstr+0x20>
 80127bc:	460c      	mov	r4, r1
 80127be:	4605      	mov	r5, r0
 80127c0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d0f6      	beq.n	80127b6 <strstr+0x6>
 80127c8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80127cc:	429e      	cmp	r6, r3
 80127ce:	d0f7      	beq.n	80127c0 <strstr+0x10>
 80127d0:	3001      	adds	r0, #1
 80127d2:	7803      	ldrb	r3, [r0, #0]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d1ef      	bne.n	80127b8 <strstr+0x8>
 80127d8:	4618      	mov	r0, r3
 80127da:	e7ec      	b.n	80127b6 <strstr+0x6>

080127dc <_localeconv_r>:
 80127dc:	4800      	ldr	r0, [pc, #0]	@ (80127e0 <_localeconv_r+0x4>)
 80127de:	4770      	bx	lr
 80127e0:	24000194 	.word	0x24000194

080127e4 <_close_r>:
 80127e4:	b538      	push	{r3, r4, r5, lr}
 80127e6:	4d06      	ldr	r5, [pc, #24]	@ (8012800 <_close_r+0x1c>)
 80127e8:	2300      	movs	r3, #0
 80127ea:	4604      	mov	r4, r0
 80127ec:	4608      	mov	r0, r1
 80127ee:	602b      	str	r3, [r5, #0]
 80127f0:	f7f2 f8e4 	bl	80049bc <_close>
 80127f4:	1c43      	adds	r3, r0, #1
 80127f6:	d102      	bne.n	80127fe <_close_r+0x1a>
 80127f8:	682b      	ldr	r3, [r5, #0]
 80127fa:	b103      	cbz	r3, 80127fe <_close_r+0x1a>
 80127fc:	6023      	str	r3, [r4, #0]
 80127fe:	bd38      	pop	{r3, r4, r5, pc}
 8012800:	24001200 	.word	0x24001200

08012804 <_lseek_r>:
 8012804:	b538      	push	{r3, r4, r5, lr}
 8012806:	4d07      	ldr	r5, [pc, #28]	@ (8012824 <_lseek_r+0x20>)
 8012808:	4604      	mov	r4, r0
 801280a:	4608      	mov	r0, r1
 801280c:	4611      	mov	r1, r2
 801280e:	2200      	movs	r2, #0
 8012810:	602a      	str	r2, [r5, #0]
 8012812:	461a      	mov	r2, r3
 8012814:	f7f2 f8f9 	bl	8004a0a <_lseek>
 8012818:	1c43      	adds	r3, r0, #1
 801281a:	d102      	bne.n	8012822 <_lseek_r+0x1e>
 801281c:	682b      	ldr	r3, [r5, #0]
 801281e:	b103      	cbz	r3, 8012822 <_lseek_r+0x1e>
 8012820:	6023      	str	r3, [r4, #0]
 8012822:	bd38      	pop	{r3, r4, r5, pc}
 8012824:	24001200 	.word	0x24001200

08012828 <_read_r>:
 8012828:	b538      	push	{r3, r4, r5, lr}
 801282a:	4d07      	ldr	r5, [pc, #28]	@ (8012848 <_read_r+0x20>)
 801282c:	4604      	mov	r4, r0
 801282e:	4608      	mov	r0, r1
 8012830:	4611      	mov	r1, r2
 8012832:	2200      	movs	r2, #0
 8012834:	602a      	str	r2, [r5, #0]
 8012836:	461a      	mov	r2, r3
 8012838:	f7f2 f887 	bl	800494a <_read>
 801283c:	1c43      	adds	r3, r0, #1
 801283e:	d102      	bne.n	8012846 <_read_r+0x1e>
 8012840:	682b      	ldr	r3, [r5, #0]
 8012842:	b103      	cbz	r3, 8012846 <_read_r+0x1e>
 8012844:	6023      	str	r3, [r4, #0]
 8012846:	bd38      	pop	{r3, r4, r5, pc}
 8012848:	24001200 	.word	0x24001200

0801284c <_write_r>:
 801284c:	b538      	push	{r3, r4, r5, lr}
 801284e:	4d07      	ldr	r5, [pc, #28]	@ (801286c <_write_r+0x20>)
 8012850:	4604      	mov	r4, r0
 8012852:	4608      	mov	r0, r1
 8012854:	4611      	mov	r1, r2
 8012856:	2200      	movs	r2, #0
 8012858:	602a      	str	r2, [r5, #0]
 801285a:	461a      	mov	r2, r3
 801285c:	f7f2 f892 	bl	8004984 <_write>
 8012860:	1c43      	adds	r3, r0, #1
 8012862:	d102      	bne.n	801286a <_write_r+0x1e>
 8012864:	682b      	ldr	r3, [r5, #0]
 8012866:	b103      	cbz	r3, 801286a <_write_r+0x1e>
 8012868:	6023      	str	r3, [r4, #0]
 801286a:	bd38      	pop	{r3, r4, r5, pc}
 801286c:	24001200 	.word	0x24001200

08012870 <__errno>:
 8012870:	4b01      	ldr	r3, [pc, #4]	@ (8012878 <__errno+0x8>)
 8012872:	6818      	ldr	r0, [r3, #0]
 8012874:	4770      	bx	lr
 8012876:	bf00      	nop
 8012878:	24000054 	.word	0x24000054

0801287c <__libc_init_array>:
 801287c:	b570      	push	{r4, r5, r6, lr}
 801287e:	4d0d      	ldr	r5, [pc, #52]	@ (80128b4 <__libc_init_array+0x38>)
 8012880:	4c0d      	ldr	r4, [pc, #52]	@ (80128b8 <__libc_init_array+0x3c>)
 8012882:	1b64      	subs	r4, r4, r5
 8012884:	10a4      	asrs	r4, r4, #2
 8012886:	2600      	movs	r6, #0
 8012888:	42a6      	cmp	r6, r4
 801288a:	d109      	bne.n	80128a0 <__libc_init_array+0x24>
 801288c:	4d0b      	ldr	r5, [pc, #44]	@ (80128bc <__libc_init_array+0x40>)
 801288e:	4c0c      	ldr	r4, [pc, #48]	@ (80128c0 <__libc_init_array+0x44>)
 8012890:	f002 f800 	bl	8014894 <_init>
 8012894:	1b64      	subs	r4, r4, r5
 8012896:	10a4      	asrs	r4, r4, #2
 8012898:	2600      	movs	r6, #0
 801289a:	42a6      	cmp	r6, r4
 801289c:	d105      	bne.n	80128aa <__libc_init_array+0x2e>
 801289e:	bd70      	pop	{r4, r5, r6, pc}
 80128a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80128a4:	4798      	blx	r3
 80128a6:	3601      	adds	r6, #1
 80128a8:	e7ee      	b.n	8012888 <__libc_init_array+0xc>
 80128aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80128ae:	4798      	blx	r3
 80128b0:	3601      	adds	r6, #1
 80128b2:	e7f2      	b.n	801289a <__libc_init_array+0x1e>
 80128b4:	080155f0 	.word	0x080155f0
 80128b8:	080155f0 	.word	0x080155f0
 80128bc:	080155f0 	.word	0x080155f0
 80128c0:	080155f4 	.word	0x080155f4

080128c4 <__retarget_lock_init_recursive>:
 80128c4:	4770      	bx	lr

080128c6 <__retarget_lock_acquire_recursive>:
 80128c6:	4770      	bx	lr

080128c8 <__retarget_lock_release_recursive>:
 80128c8:	4770      	bx	lr

080128ca <strcpy>:
 80128ca:	4603      	mov	r3, r0
 80128cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80128d0:	f803 2b01 	strb.w	r2, [r3], #1
 80128d4:	2a00      	cmp	r2, #0
 80128d6:	d1f9      	bne.n	80128cc <strcpy+0x2>
 80128d8:	4770      	bx	lr

080128da <quorem>:
 80128da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128de:	6903      	ldr	r3, [r0, #16]
 80128e0:	690c      	ldr	r4, [r1, #16]
 80128e2:	42a3      	cmp	r3, r4
 80128e4:	4607      	mov	r7, r0
 80128e6:	db7e      	blt.n	80129e6 <quorem+0x10c>
 80128e8:	3c01      	subs	r4, #1
 80128ea:	f101 0814 	add.w	r8, r1, #20
 80128ee:	00a3      	lsls	r3, r4, #2
 80128f0:	f100 0514 	add.w	r5, r0, #20
 80128f4:	9300      	str	r3, [sp, #0]
 80128f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80128fa:	9301      	str	r3, [sp, #4]
 80128fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012900:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012904:	3301      	adds	r3, #1
 8012906:	429a      	cmp	r2, r3
 8012908:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801290c:	fbb2 f6f3 	udiv	r6, r2, r3
 8012910:	d32e      	bcc.n	8012970 <quorem+0x96>
 8012912:	f04f 0a00 	mov.w	sl, #0
 8012916:	46c4      	mov	ip, r8
 8012918:	46ae      	mov	lr, r5
 801291a:	46d3      	mov	fp, sl
 801291c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012920:	b298      	uxth	r0, r3
 8012922:	fb06 a000 	mla	r0, r6, r0, sl
 8012926:	0c02      	lsrs	r2, r0, #16
 8012928:	0c1b      	lsrs	r3, r3, #16
 801292a:	fb06 2303 	mla	r3, r6, r3, r2
 801292e:	f8de 2000 	ldr.w	r2, [lr]
 8012932:	b280      	uxth	r0, r0
 8012934:	b292      	uxth	r2, r2
 8012936:	1a12      	subs	r2, r2, r0
 8012938:	445a      	add	r2, fp
 801293a:	f8de 0000 	ldr.w	r0, [lr]
 801293e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012942:	b29b      	uxth	r3, r3
 8012944:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012948:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801294c:	b292      	uxth	r2, r2
 801294e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012952:	45e1      	cmp	r9, ip
 8012954:	f84e 2b04 	str.w	r2, [lr], #4
 8012958:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801295c:	d2de      	bcs.n	801291c <quorem+0x42>
 801295e:	9b00      	ldr	r3, [sp, #0]
 8012960:	58eb      	ldr	r3, [r5, r3]
 8012962:	b92b      	cbnz	r3, 8012970 <quorem+0x96>
 8012964:	9b01      	ldr	r3, [sp, #4]
 8012966:	3b04      	subs	r3, #4
 8012968:	429d      	cmp	r5, r3
 801296a:	461a      	mov	r2, r3
 801296c:	d32f      	bcc.n	80129ce <quorem+0xf4>
 801296e:	613c      	str	r4, [r7, #16]
 8012970:	4638      	mov	r0, r7
 8012972:	f001 f90d 	bl	8013b90 <__mcmp>
 8012976:	2800      	cmp	r0, #0
 8012978:	db25      	blt.n	80129c6 <quorem+0xec>
 801297a:	4629      	mov	r1, r5
 801297c:	2000      	movs	r0, #0
 801297e:	f858 2b04 	ldr.w	r2, [r8], #4
 8012982:	f8d1 c000 	ldr.w	ip, [r1]
 8012986:	fa1f fe82 	uxth.w	lr, r2
 801298a:	fa1f f38c 	uxth.w	r3, ip
 801298e:	eba3 030e 	sub.w	r3, r3, lr
 8012992:	4403      	add	r3, r0
 8012994:	0c12      	lsrs	r2, r2, #16
 8012996:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801299a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801299e:	b29b      	uxth	r3, r3
 80129a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80129a4:	45c1      	cmp	r9, r8
 80129a6:	f841 3b04 	str.w	r3, [r1], #4
 80129aa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80129ae:	d2e6      	bcs.n	801297e <quorem+0xa4>
 80129b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80129b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80129b8:	b922      	cbnz	r2, 80129c4 <quorem+0xea>
 80129ba:	3b04      	subs	r3, #4
 80129bc:	429d      	cmp	r5, r3
 80129be:	461a      	mov	r2, r3
 80129c0:	d30b      	bcc.n	80129da <quorem+0x100>
 80129c2:	613c      	str	r4, [r7, #16]
 80129c4:	3601      	adds	r6, #1
 80129c6:	4630      	mov	r0, r6
 80129c8:	b003      	add	sp, #12
 80129ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129ce:	6812      	ldr	r2, [r2, #0]
 80129d0:	3b04      	subs	r3, #4
 80129d2:	2a00      	cmp	r2, #0
 80129d4:	d1cb      	bne.n	801296e <quorem+0x94>
 80129d6:	3c01      	subs	r4, #1
 80129d8:	e7c6      	b.n	8012968 <quorem+0x8e>
 80129da:	6812      	ldr	r2, [r2, #0]
 80129dc:	3b04      	subs	r3, #4
 80129de:	2a00      	cmp	r2, #0
 80129e0:	d1ef      	bne.n	80129c2 <quorem+0xe8>
 80129e2:	3c01      	subs	r4, #1
 80129e4:	e7ea      	b.n	80129bc <quorem+0xe2>
 80129e6:	2000      	movs	r0, #0
 80129e8:	e7ee      	b.n	80129c8 <quorem+0xee>
 80129ea:	0000      	movs	r0, r0
 80129ec:	0000      	movs	r0, r0
	...

080129f0 <_dtoa_r>:
 80129f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129f4:	ed2d 8b02 	vpush	{d8}
 80129f8:	69c7      	ldr	r7, [r0, #28]
 80129fa:	b091      	sub	sp, #68	@ 0x44
 80129fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012a00:	ec55 4b10 	vmov	r4, r5, d0
 8012a04:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8012a06:	9107      	str	r1, [sp, #28]
 8012a08:	4681      	mov	r9, r0
 8012a0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8012a0c:	930d      	str	r3, [sp, #52]	@ 0x34
 8012a0e:	b97f      	cbnz	r7, 8012a30 <_dtoa_r+0x40>
 8012a10:	2010      	movs	r0, #16
 8012a12:	f000 fd8d 	bl	8013530 <malloc>
 8012a16:	4602      	mov	r2, r0
 8012a18:	f8c9 001c 	str.w	r0, [r9, #28]
 8012a1c:	b920      	cbnz	r0, 8012a28 <_dtoa_r+0x38>
 8012a1e:	4ba0      	ldr	r3, [pc, #640]	@ (8012ca0 <_dtoa_r+0x2b0>)
 8012a20:	21ef      	movs	r1, #239	@ 0xef
 8012a22:	48a0      	ldr	r0, [pc, #640]	@ (8012ca4 <_dtoa_r+0x2b4>)
 8012a24:	f001 fbf8 	bl	8014218 <__assert_func>
 8012a28:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012a2c:	6007      	str	r7, [r0, #0]
 8012a2e:	60c7      	str	r7, [r0, #12]
 8012a30:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012a34:	6819      	ldr	r1, [r3, #0]
 8012a36:	b159      	cbz	r1, 8012a50 <_dtoa_r+0x60>
 8012a38:	685a      	ldr	r2, [r3, #4]
 8012a3a:	604a      	str	r2, [r1, #4]
 8012a3c:	2301      	movs	r3, #1
 8012a3e:	4093      	lsls	r3, r2
 8012a40:	608b      	str	r3, [r1, #8]
 8012a42:	4648      	mov	r0, r9
 8012a44:	f000 fe6a 	bl	801371c <_Bfree>
 8012a48:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012a4c:	2200      	movs	r2, #0
 8012a4e:	601a      	str	r2, [r3, #0]
 8012a50:	1e2b      	subs	r3, r5, #0
 8012a52:	bfbb      	ittet	lt
 8012a54:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012a58:	9303      	strlt	r3, [sp, #12]
 8012a5a:	2300      	movge	r3, #0
 8012a5c:	2201      	movlt	r2, #1
 8012a5e:	bfac      	ite	ge
 8012a60:	6033      	strge	r3, [r6, #0]
 8012a62:	6032      	strlt	r2, [r6, #0]
 8012a64:	4b90      	ldr	r3, [pc, #576]	@ (8012ca8 <_dtoa_r+0x2b8>)
 8012a66:	9e03      	ldr	r6, [sp, #12]
 8012a68:	43b3      	bics	r3, r6
 8012a6a:	d110      	bne.n	8012a8e <_dtoa_r+0x9e>
 8012a6c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012a6e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012a72:	6013      	str	r3, [r2, #0]
 8012a74:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8012a78:	4323      	orrs	r3, r4
 8012a7a:	f000 84de 	beq.w	801343a <_dtoa_r+0xa4a>
 8012a7e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012a80:	4f8a      	ldr	r7, [pc, #552]	@ (8012cac <_dtoa_r+0x2bc>)
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	f000 84e0 	beq.w	8013448 <_dtoa_r+0xa58>
 8012a88:	1cfb      	adds	r3, r7, #3
 8012a8a:	f000 bcdb 	b.w	8013444 <_dtoa_r+0xa54>
 8012a8e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8012a92:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a9a:	d10a      	bne.n	8012ab2 <_dtoa_r+0xc2>
 8012a9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012a9e:	2301      	movs	r3, #1
 8012aa0:	6013      	str	r3, [r2, #0]
 8012aa2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012aa4:	b113      	cbz	r3, 8012aac <_dtoa_r+0xbc>
 8012aa6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012aa8:	4b81      	ldr	r3, [pc, #516]	@ (8012cb0 <_dtoa_r+0x2c0>)
 8012aaa:	6013      	str	r3, [r2, #0]
 8012aac:	4f81      	ldr	r7, [pc, #516]	@ (8012cb4 <_dtoa_r+0x2c4>)
 8012aae:	f000 bccb 	b.w	8013448 <_dtoa_r+0xa58>
 8012ab2:	aa0e      	add	r2, sp, #56	@ 0x38
 8012ab4:	a90f      	add	r1, sp, #60	@ 0x3c
 8012ab6:	4648      	mov	r0, r9
 8012ab8:	eeb0 0b48 	vmov.f64	d0, d8
 8012abc:	f001 f918 	bl	8013cf0 <__d2b>
 8012ac0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8012ac4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012ac6:	9001      	str	r0, [sp, #4]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d045      	beq.n	8012b58 <_dtoa_r+0x168>
 8012acc:	eeb0 7b48 	vmov.f64	d7, d8
 8012ad0:	ee18 1a90 	vmov	r1, s17
 8012ad4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012ad8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8012adc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8012ae0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8012ae4:	2500      	movs	r5, #0
 8012ae6:	ee07 1a90 	vmov	s15, r1
 8012aea:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8012aee:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012c88 <_dtoa_r+0x298>
 8012af2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012af6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8012c90 <_dtoa_r+0x2a0>
 8012afa:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012afe:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012c98 <_dtoa_r+0x2a8>
 8012b02:	ee07 3a90 	vmov	s15, r3
 8012b06:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8012b0a:	eeb0 7b46 	vmov.f64	d7, d6
 8012b0e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8012b12:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012b16:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b1e:	ee16 8a90 	vmov	r8, s13
 8012b22:	d508      	bpl.n	8012b36 <_dtoa_r+0x146>
 8012b24:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012b28:	eeb4 6b47 	vcmp.f64	d6, d7
 8012b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b30:	bf18      	it	ne
 8012b32:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 8012b36:	f1b8 0f16 	cmp.w	r8, #22
 8012b3a:	d82b      	bhi.n	8012b94 <_dtoa_r+0x1a4>
 8012b3c:	495e      	ldr	r1, [pc, #376]	@ (8012cb8 <_dtoa_r+0x2c8>)
 8012b3e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8012b42:	ed91 7b00 	vldr	d7, [r1]
 8012b46:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b4e:	d501      	bpl.n	8012b54 <_dtoa_r+0x164>
 8012b50:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8012b54:	2100      	movs	r1, #0
 8012b56:	e01e      	b.n	8012b96 <_dtoa_r+0x1a6>
 8012b58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012b5a:	4413      	add	r3, r2
 8012b5c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8012b60:	2920      	cmp	r1, #32
 8012b62:	bfc1      	itttt	gt
 8012b64:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8012b68:	408e      	lslgt	r6, r1
 8012b6a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8012b6e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8012b72:	bfd6      	itet	le
 8012b74:	f1c1 0120 	rsble	r1, r1, #32
 8012b78:	4331      	orrgt	r1, r6
 8012b7a:	fa04 f101 	lslle.w	r1, r4, r1
 8012b7e:	ee07 1a90 	vmov	s15, r1
 8012b82:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012b86:	3b01      	subs	r3, #1
 8012b88:	ee17 1a90 	vmov	r1, s15
 8012b8c:	2501      	movs	r5, #1
 8012b8e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8012b92:	e7a8      	b.n	8012ae6 <_dtoa_r+0xf6>
 8012b94:	2101      	movs	r1, #1
 8012b96:	1ad2      	subs	r2, r2, r3
 8012b98:	1e53      	subs	r3, r2, #1
 8012b9a:	9306      	str	r3, [sp, #24]
 8012b9c:	bf45      	ittet	mi
 8012b9e:	f1c2 0301 	rsbmi	r3, r2, #1
 8012ba2:	9305      	strmi	r3, [sp, #20]
 8012ba4:	2300      	movpl	r3, #0
 8012ba6:	2300      	movmi	r3, #0
 8012ba8:	bf4c      	ite	mi
 8012baa:	9306      	strmi	r3, [sp, #24]
 8012bac:	9305      	strpl	r3, [sp, #20]
 8012bae:	f1b8 0f00 	cmp.w	r8, #0
 8012bb2:	910c      	str	r1, [sp, #48]	@ 0x30
 8012bb4:	db18      	blt.n	8012be8 <_dtoa_r+0x1f8>
 8012bb6:	9b06      	ldr	r3, [sp, #24]
 8012bb8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8012bbc:	4443      	add	r3, r8
 8012bbe:	9306      	str	r3, [sp, #24]
 8012bc0:	2300      	movs	r3, #0
 8012bc2:	9a07      	ldr	r2, [sp, #28]
 8012bc4:	2a09      	cmp	r2, #9
 8012bc6:	d849      	bhi.n	8012c5c <_dtoa_r+0x26c>
 8012bc8:	2a05      	cmp	r2, #5
 8012bca:	bfc4      	itt	gt
 8012bcc:	3a04      	subgt	r2, #4
 8012bce:	9207      	strgt	r2, [sp, #28]
 8012bd0:	9a07      	ldr	r2, [sp, #28]
 8012bd2:	f1a2 0202 	sub.w	r2, r2, #2
 8012bd6:	bfcc      	ite	gt
 8012bd8:	2400      	movgt	r4, #0
 8012bda:	2401      	movle	r4, #1
 8012bdc:	2a03      	cmp	r2, #3
 8012bde:	d848      	bhi.n	8012c72 <_dtoa_r+0x282>
 8012be0:	e8df f002 	tbb	[pc, r2]
 8012be4:	3a2c2e0b 	.word	0x3a2c2e0b
 8012be8:	9b05      	ldr	r3, [sp, #20]
 8012bea:	2200      	movs	r2, #0
 8012bec:	eba3 0308 	sub.w	r3, r3, r8
 8012bf0:	9305      	str	r3, [sp, #20]
 8012bf2:	920a      	str	r2, [sp, #40]	@ 0x28
 8012bf4:	f1c8 0300 	rsb	r3, r8, #0
 8012bf8:	e7e3      	b.n	8012bc2 <_dtoa_r+0x1d2>
 8012bfa:	2200      	movs	r2, #0
 8012bfc:	9208      	str	r2, [sp, #32]
 8012bfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012c00:	2a00      	cmp	r2, #0
 8012c02:	dc39      	bgt.n	8012c78 <_dtoa_r+0x288>
 8012c04:	f04f 0b01 	mov.w	fp, #1
 8012c08:	46da      	mov	sl, fp
 8012c0a:	465a      	mov	r2, fp
 8012c0c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8012c10:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8012c14:	2100      	movs	r1, #0
 8012c16:	2004      	movs	r0, #4
 8012c18:	f100 0614 	add.w	r6, r0, #20
 8012c1c:	4296      	cmp	r6, r2
 8012c1e:	d930      	bls.n	8012c82 <_dtoa_r+0x292>
 8012c20:	6079      	str	r1, [r7, #4]
 8012c22:	4648      	mov	r0, r9
 8012c24:	9304      	str	r3, [sp, #16]
 8012c26:	f000 fd39 	bl	801369c <_Balloc>
 8012c2a:	9b04      	ldr	r3, [sp, #16]
 8012c2c:	4607      	mov	r7, r0
 8012c2e:	2800      	cmp	r0, #0
 8012c30:	d146      	bne.n	8012cc0 <_dtoa_r+0x2d0>
 8012c32:	4b22      	ldr	r3, [pc, #136]	@ (8012cbc <_dtoa_r+0x2cc>)
 8012c34:	4602      	mov	r2, r0
 8012c36:	f240 11af 	movw	r1, #431	@ 0x1af
 8012c3a:	e6f2      	b.n	8012a22 <_dtoa_r+0x32>
 8012c3c:	2201      	movs	r2, #1
 8012c3e:	e7dd      	b.n	8012bfc <_dtoa_r+0x20c>
 8012c40:	2200      	movs	r2, #0
 8012c42:	9208      	str	r2, [sp, #32]
 8012c44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012c46:	eb08 0b02 	add.w	fp, r8, r2
 8012c4a:	f10b 0a01 	add.w	sl, fp, #1
 8012c4e:	4652      	mov	r2, sl
 8012c50:	2a01      	cmp	r2, #1
 8012c52:	bfb8      	it	lt
 8012c54:	2201      	movlt	r2, #1
 8012c56:	e7db      	b.n	8012c10 <_dtoa_r+0x220>
 8012c58:	2201      	movs	r2, #1
 8012c5a:	e7f2      	b.n	8012c42 <_dtoa_r+0x252>
 8012c5c:	2401      	movs	r4, #1
 8012c5e:	2200      	movs	r2, #0
 8012c60:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8012c64:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8012c68:	2100      	movs	r1, #0
 8012c6a:	46da      	mov	sl, fp
 8012c6c:	2212      	movs	r2, #18
 8012c6e:	9109      	str	r1, [sp, #36]	@ 0x24
 8012c70:	e7ce      	b.n	8012c10 <_dtoa_r+0x220>
 8012c72:	2201      	movs	r2, #1
 8012c74:	9208      	str	r2, [sp, #32]
 8012c76:	e7f5      	b.n	8012c64 <_dtoa_r+0x274>
 8012c78:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8012c7c:	46da      	mov	sl, fp
 8012c7e:	465a      	mov	r2, fp
 8012c80:	e7c6      	b.n	8012c10 <_dtoa_r+0x220>
 8012c82:	3101      	adds	r1, #1
 8012c84:	0040      	lsls	r0, r0, #1
 8012c86:	e7c7      	b.n	8012c18 <_dtoa_r+0x228>
 8012c88:	636f4361 	.word	0x636f4361
 8012c8c:	3fd287a7 	.word	0x3fd287a7
 8012c90:	8b60c8b3 	.word	0x8b60c8b3
 8012c94:	3fc68a28 	.word	0x3fc68a28
 8012c98:	509f79fb 	.word	0x509f79fb
 8012c9c:	3fd34413 	.word	0x3fd34413
 8012ca0:	080153bb 	.word	0x080153bb
 8012ca4:	080153d2 	.word	0x080153d2
 8012ca8:	7ff00000 	.word	0x7ff00000
 8012cac:	080153b7 	.word	0x080153b7
 8012cb0:	0801538b 	.word	0x0801538b
 8012cb4:	0801538a 	.word	0x0801538a
 8012cb8:	080154c8 	.word	0x080154c8
 8012cbc:	0801542a 	.word	0x0801542a
 8012cc0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8012cc4:	f1ba 0f0e 	cmp.w	sl, #14
 8012cc8:	6010      	str	r0, [r2, #0]
 8012cca:	d86f      	bhi.n	8012dac <_dtoa_r+0x3bc>
 8012ccc:	2c00      	cmp	r4, #0
 8012cce:	d06d      	beq.n	8012dac <_dtoa_r+0x3bc>
 8012cd0:	f1b8 0f00 	cmp.w	r8, #0
 8012cd4:	f340 80c2 	ble.w	8012e5c <_dtoa_r+0x46c>
 8012cd8:	4aca      	ldr	r2, [pc, #808]	@ (8013004 <_dtoa_r+0x614>)
 8012cda:	f008 010f 	and.w	r1, r8, #15
 8012cde:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8012ce2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8012ce6:	ed92 7b00 	vldr	d7, [r2]
 8012cea:	ea4f 1128 	mov.w	r1, r8, asr #4
 8012cee:	f000 80a9 	beq.w	8012e44 <_dtoa_r+0x454>
 8012cf2:	4ac5      	ldr	r2, [pc, #788]	@ (8013008 <_dtoa_r+0x618>)
 8012cf4:	ed92 6b08 	vldr	d6, [r2, #32]
 8012cf8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8012cfc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012d00:	f001 010f 	and.w	r1, r1, #15
 8012d04:	2203      	movs	r2, #3
 8012d06:	48c0      	ldr	r0, [pc, #768]	@ (8013008 <_dtoa_r+0x618>)
 8012d08:	2900      	cmp	r1, #0
 8012d0a:	f040 809d 	bne.w	8012e48 <_dtoa_r+0x458>
 8012d0e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012d12:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012d16:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012d1a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012d1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012d20:	2900      	cmp	r1, #0
 8012d22:	f000 80c1 	beq.w	8012ea8 <_dtoa_r+0x4b8>
 8012d26:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8012d2a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d32:	f140 80b9 	bpl.w	8012ea8 <_dtoa_r+0x4b8>
 8012d36:	f1ba 0f00 	cmp.w	sl, #0
 8012d3a:	f000 80b5 	beq.w	8012ea8 <_dtoa_r+0x4b8>
 8012d3e:	f1bb 0f00 	cmp.w	fp, #0
 8012d42:	dd31      	ble.n	8012da8 <_dtoa_r+0x3b8>
 8012d44:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8012d48:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012d4c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012d50:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8012d54:	9104      	str	r1, [sp, #16]
 8012d56:	3201      	adds	r2, #1
 8012d58:	465c      	mov	r4, fp
 8012d5a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012d5e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8012d62:	ee07 2a90 	vmov	s15, r2
 8012d66:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012d6a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012d6e:	ee15 2a90 	vmov	r2, s11
 8012d72:	ec51 0b15 	vmov	r0, r1, d5
 8012d76:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8012d7a:	2c00      	cmp	r4, #0
 8012d7c:	f040 8098 	bne.w	8012eb0 <_dtoa_r+0x4c0>
 8012d80:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8012d84:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012d88:	ec41 0b17 	vmov	d7, r0, r1
 8012d8c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d94:	f300 8261 	bgt.w	801325a <_dtoa_r+0x86a>
 8012d98:	eeb1 7b47 	vneg.f64	d7, d7
 8012d9c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012da4:	f100 80f5 	bmi.w	8012f92 <_dtoa_r+0x5a2>
 8012da8:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012dac:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012dae:	2a00      	cmp	r2, #0
 8012db0:	f2c0 812c 	blt.w	801300c <_dtoa_r+0x61c>
 8012db4:	f1b8 0f0e 	cmp.w	r8, #14
 8012db8:	f300 8128 	bgt.w	801300c <_dtoa_r+0x61c>
 8012dbc:	4b91      	ldr	r3, [pc, #580]	@ (8013004 <_dtoa_r+0x614>)
 8012dbe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012dc2:	ed93 6b00 	vldr	d6, [r3]
 8012dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	da03      	bge.n	8012dd4 <_dtoa_r+0x3e4>
 8012dcc:	f1ba 0f00 	cmp.w	sl, #0
 8012dd0:	f340 80d2 	ble.w	8012f78 <_dtoa_r+0x588>
 8012dd4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8012dd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012ddc:	463e      	mov	r6, r7
 8012dde:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012de2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012de6:	ee15 3a10 	vmov	r3, s10
 8012dea:	3330      	adds	r3, #48	@ 0x30
 8012dec:	f806 3b01 	strb.w	r3, [r6], #1
 8012df0:	1bf3      	subs	r3, r6, r7
 8012df2:	459a      	cmp	sl, r3
 8012df4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012df8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012dfc:	f040 80f8 	bne.w	8012ff0 <_dtoa_r+0x600>
 8012e00:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012e04:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e0c:	f300 80dd 	bgt.w	8012fca <_dtoa_r+0x5da>
 8012e10:	eeb4 7b46 	vcmp.f64	d7, d6
 8012e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e18:	d104      	bne.n	8012e24 <_dtoa_r+0x434>
 8012e1a:	ee15 3a10 	vmov	r3, s10
 8012e1e:	07db      	lsls	r3, r3, #31
 8012e20:	f100 80d3 	bmi.w	8012fca <_dtoa_r+0x5da>
 8012e24:	9901      	ldr	r1, [sp, #4]
 8012e26:	4648      	mov	r0, r9
 8012e28:	f000 fc78 	bl	801371c <_Bfree>
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012e30:	7033      	strb	r3, [r6, #0]
 8012e32:	f108 0301 	add.w	r3, r8, #1
 8012e36:	6013      	str	r3, [r2, #0]
 8012e38:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	f000 8304 	beq.w	8013448 <_dtoa_r+0xa58>
 8012e40:	601e      	str	r6, [r3, #0]
 8012e42:	e301      	b.n	8013448 <_dtoa_r+0xa58>
 8012e44:	2202      	movs	r2, #2
 8012e46:	e75e      	b.n	8012d06 <_dtoa_r+0x316>
 8012e48:	07cc      	lsls	r4, r1, #31
 8012e4a:	d504      	bpl.n	8012e56 <_dtoa_r+0x466>
 8012e4c:	ed90 6b00 	vldr	d6, [r0]
 8012e50:	3201      	adds	r2, #1
 8012e52:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012e56:	1049      	asrs	r1, r1, #1
 8012e58:	3008      	adds	r0, #8
 8012e5a:	e755      	b.n	8012d08 <_dtoa_r+0x318>
 8012e5c:	d022      	beq.n	8012ea4 <_dtoa_r+0x4b4>
 8012e5e:	f1c8 0100 	rsb	r1, r8, #0
 8012e62:	4a68      	ldr	r2, [pc, #416]	@ (8013004 <_dtoa_r+0x614>)
 8012e64:	f001 000f 	and.w	r0, r1, #15
 8012e68:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012e6c:	ed92 7b00 	vldr	d7, [r2]
 8012e70:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012e74:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012e78:	4863      	ldr	r0, [pc, #396]	@ (8013008 <_dtoa_r+0x618>)
 8012e7a:	1109      	asrs	r1, r1, #4
 8012e7c:	2400      	movs	r4, #0
 8012e7e:	2202      	movs	r2, #2
 8012e80:	b929      	cbnz	r1, 8012e8e <_dtoa_r+0x49e>
 8012e82:	2c00      	cmp	r4, #0
 8012e84:	f43f af49 	beq.w	8012d1a <_dtoa_r+0x32a>
 8012e88:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012e8c:	e745      	b.n	8012d1a <_dtoa_r+0x32a>
 8012e8e:	07ce      	lsls	r6, r1, #31
 8012e90:	d505      	bpl.n	8012e9e <_dtoa_r+0x4ae>
 8012e92:	ed90 6b00 	vldr	d6, [r0]
 8012e96:	3201      	adds	r2, #1
 8012e98:	2401      	movs	r4, #1
 8012e9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012e9e:	1049      	asrs	r1, r1, #1
 8012ea0:	3008      	adds	r0, #8
 8012ea2:	e7ed      	b.n	8012e80 <_dtoa_r+0x490>
 8012ea4:	2202      	movs	r2, #2
 8012ea6:	e738      	b.n	8012d1a <_dtoa_r+0x32a>
 8012ea8:	f8cd 8010 	str.w	r8, [sp, #16]
 8012eac:	4654      	mov	r4, sl
 8012eae:	e754      	b.n	8012d5a <_dtoa_r+0x36a>
 8012eb0:	4a54      	ldr	r2, [pc, #336]	@ (8013004 <_dtoa_r+0x614>)
 8012eb2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8012eb6:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012eba:	9a08      	ldr	r2, [sp, #32]
 8012ebc:	ec41 0b17 	vmov	d7, r0, r1
 8012ec0:	443c      	add	r4, r7
 8012ec2:	b34a      	cbz	r2, 8012f18 <_dtoa_r+0x528>
 8012ec4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8012ec8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8012ecc:	463e      	mov	r6, r7
 8012ece:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012ed2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8012ed6:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012eda:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012ede:	ee14 2a90 	vmov	r2, s9
 8012ee2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012ee6:	3230      	adds	r2, #48	@ 0x30
 8012ee8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012eec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ef4:	f806 2b01 	strb.w	r2, [r6], #1
 8012ef8:	d438      	bmi.n	8012f6c <_dtoa_r+0x57c>
 8012efa:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012efe:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f06:	d462      	bmi.n	8012fce <_dtoa_r+0x5de>
 8012f08:	42a6      	cmp	r6, r4
 8012f0a:	f43f af4d 	beq.w	8012da8 <_dtoa_r+0x3b8>
 8012f0e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012f12:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012f16:	e7e0      	b.n	8012eda <_dtoa_r+0x4ea>
 8012f18:	4621      	mov	r1, r4
 8012f1a:	463e      	mov	r6, r7
 8012f1c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012f20:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8012f24:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012f28:	ee14 2a90 	vmov	r2, s9
 8012f2c:	3230      	adds	r2, #48	@ 0x30
 8012f2e:	f806 2b01 	strb.w	r2, [r6], #1
 8012f32:	42a6      	cmp	r6, r4
 8012f34:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012f38:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012f3c:	d119      	bne.n	8012f72 <_dtoa_r+0x582>
 8012f3e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8012f42:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012f46:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f4e:	dc3e      	bgt.n	8012fce <_dtoa_r+0x5de>
 8012f50:	ee35 5b47 	vsub.f64	d5, d5, d7
 8012f54:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8012f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f5c:	f57f af24 	bpl.w	8012da8 <_dtoa_r+0x3b8>
 8012f60:	460e      	mov	r6, r1
 8012f62:	3901      	subs	r1, #1
 8012f64:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012f68:	2b30      	cmp	r3, #48	@ 0x30
 8012f6a:	d0f9      	beq.n	8012f60 <_dtoa_r+0x570>
 8012f6c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012f70:	e758      	b.n	8012e24 <_dtoa_r+0x434>
 8012f72:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012f76:	e7d5      	b.n	8012f24 <_dtoa_r+0x534>
 8012f78:	d10b      	bne.n	8012f92 <_dtoa_r+0x5a2>
 8012f7a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8012f7e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012f82:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012f86:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f8e:	f2c0 8161 	blt.w	8013254 <_dtoa_r+0x864>
 8012f92:	2400      	movs	r4, #0
 8012f94:	4625      	mov	r5, r4
 8012f96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f98:	43db      	mvns	r3, r3
 8012f9a:	9304      	str	r3, [sp, #16]
 8012f9c:	463e      	mov	r6, r7
 8012f9e:	f04f 0800 	mov.w	r8, #0
 8012fa2:	4621      	mov	r1, r4
 8012fa4:	4648      	mov	r0, r9
 8012fa6:	f000 fbb9 	bl	801371c <_Bfree>
 8012faa:	2d00      	cmp	r5, #0
 8012fac:	d0de      	beq.n	8012f6c <_dtoa_r+0x57c>
 8012fae:	f1b8 0f00 	cmp.w	r8, #0
 8012fb2:	d005      	beq.n	8012fc0 <_dtoa_r+0x5d0>
 8012fb4:	45a8      	cmp	r8, r5
 8012fb6:	d003      	beq.n	8012fc0 <_dtoa_r+0x5d0>
 8012fb8:	4641      	mov	r1, r8
 8012fba:	4648      	mov	r0, r9
 8012fbc:	f000 fbae 	bl	801371c <_Bfree>
 8012fc0:	4629      	mov	r1, r5
 8012fc2:	4648      	mov	r0, r9
 8012fc4:	f000 fbaa 	bl	801371c <_Bfree>
 8012fc8:	e7d0      	b.n	8012f6c <_dtoa_r+0x57c>
 8012fca:	f8cd 8010 	str.w	r8, [sp, #16]
 8012fce:	4633      	mov	r3, r6
 8012fd0:	461e      	mov	r6, r3
 8012fd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012fd6:	2a39      	cmp	r2, #57	@ 0x39
 8012fd8:	d106      	bne.n	8012fe8 <_dtoa_r+0x5f8>
 8012fda:	429f      	cmp	r7, r3
 8012fdc:	d1f8      	bne.n	8012fd0 <_dtoa_r+0x5e0>
 8012fde:	9a04      	ldr	r2, [sp, #16]
 8012fe0:	3201      	adds	r2, #1
 8012fe2:	9204      	str	r2, [sp, #16]
 8012fe4:	2230      	movs	r2, #48	@ 0x30
 8012fe6:	703a      	strb	r2, [r7, #0]
 8012fe8:	781a      	ldrb	r2, [r3, #0]
 8012fea:	3201      	adds	r2, #1
 8012fec:	701a      	strb	r2, [r3, #0]
 8012fee:	e7bd      	b.n	8012f6c <_dtoa_r+0x57c>
 8012ff0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012ff4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ffc:	f47f aeef 	bne.w	8012dde <_dtoa_r+0x3ee>
 8013000:	e710      	b.n	8012e24 <_dtoa_r+0x434>
 8013002:	bf00      	nop
 8013004:	080154c8 	.word	0x080154c8
 8013008:	080154a0 	.word	0x080154a0
 801300c:	9908      	ldr	r1, [sp, #32]
 801300e:	2900      	cmp	r1, #0
 8013010:	f000 80e3 	beq.w	80131da <_dtoa_r+0x7ea>
 8013014:	9907      	ldr	r1, [sp, #28]
 8013016:	2901      	cmp	r1, #1
 8013018:	f300 80c8 	bgt.w	80131ac <_dtoa_r+0x7bc>
 801301c:	2d00      	cmp	r5, #0
 801301e:	f000 80c1 	beq.w	80131a4 <_dtoa_r+0x7b4>
 8013022:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8013026:	9e05      	ldr	r6, [sp, #20]
 8013028:	461c      	mov	r4, r3
 801302a:	9304      	str	r3, [sp, #16]
 801302c:	9b05      	ldr	r3, [sp, #20]
 801302e:	4413      	add	r3, r2
 8013030:	9305      	str	r3, [sp, #20]
 8013032:	9b06      	ldr	r3, [sp, #24]
 8013034:	2101      	movs	r1, #1
 8013036:	4413      	add	r3, r2
 8013038:	4648      	mov	r0, r9
 801303a:	9306      	str	r3, [sp, #24]
 801303c:	f000 fc22 	bl	8013884 <__i2b>
 8013040:	9b04      	ldr	r3, [sp, #16]
 8013042:	4605      	mov	r5, r0
 8013044:	b166      	cbz	r6, 8013060 <_dtoa_r+0x670>
 8013046:	9a06      	ldr	r2, [sp, #24]
 8013048:	2a00      	cmp	r2, #0
 801304a:	dd09      	ble.n	8013060 <_dtoa_r+0x670>
 801304c:	42b2      	cmp	r2, r6
 801304e:	9905      	ldr	r1, [sp, #20]
 8013050:	bfa8      	it	ge
 8013052:	4632      	movge	r2, r6
 8013054:	1a89      	subs	r1, r1, r2
 8013056:	9105      	str	r1, [sp, #20]
 8013058:	9906      	ldr	r1, [sp, #24]
 801305a:	1ab6      	subs	r6, r6, r2
 801305c:	1a8a      	subs	r2, r1, r2
 801305e:	9206      	str	r2, [sp, #24]
 8013060:	b1fb      	cbz	r3, 80130a2 <_dtoa_r+0x6b2>
 8013062:	9a08      	ldr	r2, [sp, #32]
 8013064:	2a00      	cmp	r2, #0
 8013066:	f000 80bc 	beq.w	80131e2 <_dtoa_r+0x7f2>
 801306a:	b19c      	cbz	r4, 8013094 <_dtoa_r+0x6a4>
 801306c:	4629      	mov	r1, r5
 801306e:	4622      	mov	r2, r4
 8013070:	4648      	mov	r0, r9
 8013072:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013074:	f000 fcc6 	bl	8013a04 <__pow5mult>
 8013078:	9a01      	ldr	r2, [sp, #4]
 801307a:	4601      	mov	r1, r0
 801307c:	4605      	mov	r5, r0
 801307e:	4648      	mov	r0, r9
 8013080:	f000 fc16 	bl	80138b0 <__multiply>
 8013084:	9901      	ldr	r1, [sp, #4]
 8013086:	9004      	str	r0, [sp, #16]
 8013088:	4648      	mov	r0, r9
 801308a:	f000 fb47 	bl	801371c <_Bfree>
 801308e:	9a04      	ldr	r2, [sp, #16]
 8013090:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013092:	9201      	str	r2, [sp, #4]
 8013094:	1b1a      	subs	r2, r3, r4
 8013096:	d004      	beq.n	80130a2 <_dtoa_r+0x6b2>
 8013098:	9901      	ldr	r1, [sp, #4]
 801309a:	4648      	mov	r0, r9
 801309c:	f000 fcb2 	bl	8013a04 <__pow5mult>
 80130a0:	9001      	str	r0, [sp, #4]
 80130a2:	2101      	movs	r1, #1
 80130a4:	4648      	mov	r0, r9
 80130a6:	f000 fbed 	bl	8013884 <__i2b>
 80130aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80130ac:	4604      	mov	r4, r0
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	f000 81d0 	beq.w	8013454 <_dtoa_r+0xa64>
 80130b4:	461a      	mov	r2, r3
 80130b6:	4601      	mov	r1, r0
 80130b8:	4648      	mov	r0, r9
 80130ba:	f000 fca3 	bl	8013a04 <__pow5mult>
 80130be:	9b07      	ldr	r3, [sp, #28]
 80130c0:	2b01      	cmp	r3, #1
 80130c2:	4604      	mov	r4, r0
 80130c4:	f300 8095 	bgt.w	80131f2 <_dtoa_r+0x802>
 80130c8:	9b02      	ldr	r3, [sp, #8]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	f040 808b 	bne.w	80131e6 <_dtoa_r+0x7f6>
 80130d0:	9b03      	ldr	r3, [sp, #12]
 80130d2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80130d6:	2a00      	cmp	r2, #0
 80130d8:	f040 8087 	bne.w	80131ea <_dtoa_r+0x7fa>
 80130dc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80130e0:	0d12      	lsrs	r2, r2, #20
 80130e2:	0512      	lsls	r2, r2, #20
 80130e4:	2a00      	cmp	r2, #0
 80130e6:	f000 8082 	beq.w	80131ee <_dtoa_r+0x7fe>
 80130ea:	9b05      	ldr	r3, [sp, #20]
 80130ec:	3301      	adds	r3, #1
 80130ee:	9305      	str	r3, [sp, #20]
 80130f0:	9b06      	ldr	r3, [sp, #24]
 80130f2:	3301      	adds	r3, #1
 80130f4:	9306      	str	r3, [sp, #24]
 80130f6:	2301      	movs	r3, #1
 80130f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80130fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	f000 81af 	beq.w	8013460 <_dtoa_r+0xa70>
 8013102:	6922      	ldr	r2, [r4, #16]
 8013104:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013108:	6910      	ldr	r0, [r2, #16]
 801310a:	f000 fb6f 	bl	80137ec <__hi0bits>
 801310e:	f1c0 0020 	rsb	r0, r0, #32
 8013112:	9b06      	ldr	r3, [sp, #24]
 8013114:	4418      	add	r0, r3
 8013116:	f010 001f 	ands.w	r0, r0, #31
 801311a:	d076      	beq.n	801320a <_dtoa_r+0x81a>
 801311c:	f1c0 0220 	rsb	r2, r0, #32
 8013120:	2a04      	cmp	r2, #4
 8013122:	dd69      	ble.n	80131f8 <_dtoa_r+0x808>
 8013124:	9b05      	ldr	r3, [sp, #20]
 8013126:	f1c0 001c 	rsb	r0, r0, #28
 801312a:	4403      	add	r3, r0
 801312c:	9305      	str	r3, [sp, #20]
 801312e:	9b06      	ldr	r3, [sp, #24]
 8013130:	4406      	add	r6, r0
 8013132:	4403      	add	r3, r0
 8013134:	9306      	str	r3, [sp, #24]
 8013136:	9b05      	ldr	r3, [sp, #20]
 8013138:	2b00      	cmp	r3, #0
 801313a:	dd05      	ble.n	8013148 <_dtoa_r+0x758>
 801313c:	9901      	ldr	r1, [sp, #4]
 801313e:	461a      	mov	r2, r3
 8013140:	4648      	mov	r0, r9
 8013142:	f000 fcb9 	bl	8013ab8 <__lshift>
 8013146:	9001      	str	r0, [sp, #4]
 8013148:	9b06      	ldr	r3, [sp, #24]
 801314a:	2b00      	cmp	r3, #0
 801314c:	dd05      	ble.n	801315a <_dtoa_r+0x76a>
 801314e:	4621      	mov	r1, r4
 8013150:	461a      	mov	r2, r3
 8013152:	4648      	mov	r0, r9
 8013154:	f000 fcb0 	bl	8013ab8 <__lshift>
 8013158:	4604      	mov	r4, r0
 801315a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801315c:	2b00      	cmp	r3, #0
 801315e:	d056      	beq.n	801320e <_dtoa_r+0x81e>
 8013160:	9801      	ldr	r0, [sp, #4]
 8013162:	4621      	mov	r1, r4
 8013164:	f000 fd14 	bl	8013b90 <__mcmp>
 8013168:	2800      	cmp	r0, #0
 801316a:	da50      	bge.n	801320e <_dtoa_r+0x81e>
 801316c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8013170:	9304      	str	r3, [sp, #16]
 8013172:	9901      	ldr	r1, [sp, #4]
 8013174:	2300      	movs	r3, #0
 8013176:	220a      	movs	r2, #10
 8013178:	4648      	mov	r0, r9
 801317a:	f000 faf1 	bl	8013760 <__multadd>
 801317e:	9b08      	ldr	r3, [sp, #32]
 8013180:	9001      	str	r0, [sp, #4]
 8013182:	2b00      	cmp	r3, #0
 8013184:	f000 816e 	beq.w	8013464 <_dtoa_r+0xa74>
 8013188:	4629      	mov	r1, r5
 801318a:	2300      	movs	r3, #0
 801318c:	220a      	movs	r2, #10
 801318e:	4648      	mov	r0, r9
 8013190:	f000 fae6 	bl	8013760 <__multadd>
 8013194:	f1bb 0f00 	cmp.w	fp, #0
 8013198:	4605      	mov	r5, r0
 801319a:	dc64      	bgt.n	8013266 <_dtoa_r+0x876>
 801319c:	9b07      	ldr	r3, [sp, #28]
 801319e:	2b02      	cmp	r3, #2
 80131a0:	dc3e      	bgt.n	8013220 <_dtoa_r+0x830>
 80131a2:	e060      	b.n	8013266 <_dtoa_r+0x876>
 80131a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80131a6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80131aa:	e73c      	b.n	8013026 <_dtoa_r+0x636>
 80131ac:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 80131b0:	42a3      	cmp	r3, r4
 80131b2:	bfbf      	itttt	lt
 80131b4:	1ae2      	sublt	r2, r4, r3
 80131b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80131b8:	189b      	addlt	r3, r3, r2
 80131ba:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80131bc:	bfae      	itee	ge
 80131be:	1b1c      	subge	r4, r3, r4
 80131c0:	4623      	movlt	r3, r4
 80131c2:	2400      	movlt	r4, #0
 80131c4:	f1ba 0f00 	cmp.w	sl, #0
 80131c8:	bfb5      	itete	lt
 80131ca:	9a05      	ldrlt	r2, [sp, #20]
 80131cc:	9e05      	ldrge	r6, [sp, #20]
 80131ce:	eba2 060a 	sublt.w	r6, r2, sl
 80131d2:	4652      	movge	r2, sl
 80131d4:	bfb8      	it	lt
 80131d6:	2200      	movlt	r2, #0
 80131d8:	e727      	b.n	801302a <_dtoa_r+0x63a>
 80131da:	9e05      	ldr	r6, [sp, #20]
 80131dc:	9d08      	ldr	r5, [sp, #32]
 80131de:	461c      	mov	r4, r3
 80131e0:	e730      	b.n	8013044 <_dtoa_r+0x654>
 80131e2:	461a      	mov	r2, r3
 80131e4:	e758      	b.n	8013098 <_dtoa_r+0x6a8>
 80131e6:	2300      	movs	r3, #0
 80131e8:	e786      	b.n	80130f8 <_dtoa_r+0x708>
 80131ea:	9b02      	ldr	r3, [sp, #8]
 80131ec:	e784      	b.n	80130f8 <_dtoa_r+0x708>
 80131ee:	920b      	str	r2, [sp, #44]	@ 0x2c
 80131f0:	e783      	b.n	80130fa <_dtoa_r+0x70a>
 80131f2:	2300      	movs	r3, #0
 80131f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80131f6:	e784      	b.n	8013102 <_dtoa_r+0x712>
 80131f8:	d09d      	beq.n	8013136 <_dtoa_r+0x746>
 80131fa:	9b05      	ldr	r3, [sp, #20]
 80131fc:	321c      	adds	r2, #28
 80131fe:	4413      	add	r3, r2
 8013200:	9305      	str	r3, [sp, #20]
 8013202:	9b06      	ldr	r3, [sp, #24]
 8013204:	4416      	add	r6, r2
 8013206:	4413      	add	r3, r2
 8013208:	e794      	b.n	8013134 <_dtoa_r+0x744>
 801320a:	4602      	mov	r2, r0
 801320c:	e7f5      	b.n	80131fa <_dtoa_r+0x80a>
 801320e:	f1ba 0f00 	cmp.w	sl, #0
 8013212:	f8cd 8010 	str.w	r8, [sp, #16]
 8013216:	46d3      	mov	fp, sl
 8013218:	dc21      	bgt.n	801325e <_dtoa_r+0x86e>
 801321a:	9b07      	ldr	r3, [sp, #28]
 801321c:	2b02      	cmp	r3, #2
 801321e:	dd1e      	ble.n	801325e <_dtoa_r+0x86e>
 8013220:	f1bb 0f00 	cmp.w	fp, #0
 8013224:	f47f aeb7 	bne.w	8012f96 <_dtoa_r+0x5a6>
 8013228:	4621      	mov	r1, r4
 801322a:	465b      	mov	r3, fp
 801322c:	2205      	movs	r2, #5
 801322e:	4648      	mov	r0, r9
 8013230:	f000 fa96 	bl	8013760 <__multadd>
 8013234:	4601      	mov	r1, r0
 8013236:	4604      	mov	r4, r0
 8013238:	9801      	ldr	r0, [sp, #4]
 801323a:	f000 fca9 	bl	8013b90 <__mcmp>
 801323e:	2800      	cmp	r0, #0
 8013240:	f77f aea9 	ble.w	8012f96 <_dtoa_r+0x5a6>
 8013244:	463e      	mov	r6, r7
 8013246:	2331      	movs	r3, #49	@ 0x31
 8013248:	f806 3b01 	strb.w	r3, [r6], #1
 801324c:	9b04      	ldr	r3, [sp, #16]
 801324e:	3301      	adds	r3, #1
 8013250:	9304      	str	r3, [sp, #16]
 8013252:	e6a4      	b.n	8012f9e <_dtoa_r+0x5ae>
 8013254:	f8cd 8010 	str.w	r8, [sp, #16]
 8013258:	4654      	mov	r4, sl
 801325a:	4625      	mov	r5, r4
 801325c:	e7f2      	b.n	8013244 <_dtoa_r+0x854>
 801325e:	9b08      	ldr	r3, [sp, #32]
 8013260:	2b00      	cmp	r3, #0
 8013262:	f000 8103 	beq.w	801346c <_dtoa_r+0xa7c>
 8013266:	2e00      	cmp	r6, #0
 8013268:	dd05      	ble.n	8013276 <_dtoa_r+0x886>
 801326a:	4629      	mov	r1, r5
 801326c:	4632      	mov	r2, r6
 801326e:	4648      	mov	r0, r9
 8013270:	f000 fc22 	bl	8013ab8 <__lshift>
 8013274:	4605      	mov	r5, r0
 8013276:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013278:	2b00      	cmp	r3, #0
 801327a:	d058      	beq.n	801332e <_dtoa_r+0x93e>
 801327c:	6869      	ldr	r1, [r5, #4]
 801327e:	4648      	mov	r0, r9
 8013280:	f000 fa0c 	bl	801369c <_Balloc>
 8013284:	4606      	mov	r6, r0
 8013286:	b928      	cbnz	r0, 8013294 <_dtoa_r+0x8a4>
 8013288:	4b82      	ldr	r3, [pc, #520]	@ (8013494 <_dtoa_r+0xaa4>)
 801328a:	4602      	mov	r2, r0
 801328c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013290:	f7ff bbc7 	b.w	8012a22 <_dtoa_r+0x32>
 8013294:	692a      	ldr	r2, [r5, #16]
 8013296:	3202      	adds	r2, #2
 8013298:	0092      	lsls	r2, r2, #2
 801329a:	f105 010c 	add.w	r1, r5, #12
 801329e:	300c      	adds	r0, #12
 80132a0:	f000 ffac 	bl	80141fc <memcpy>
 80132a4:	2201      	movs	r2, #1
 80132a6:	4631      	mov	r1, r6
 80132a8:	4648      	mov	r0, r9
 80132aa:	f000 fc05 	bl	8013ab8 <__lshift>
 80132ae:	1c7b      	adds	r3, r7, #1
 80132b0:	9305      	str	r3, [sp, #20]
 80132b2:	eb07 030b 	add.w	r3, r7, fp
 80132b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80132b8:	9b02      	ldr	r3, [sp, #8]
 80132ba:	f003 0301 	and.w	r3, r3, #1
 80132be:	46a8      	mov	r8, r5
 80132c0:	9308      	str	r3, [sp, #32]
 80132c2:	4605      	mov	r5, r0
 80132c4:	9b05      	ldr	r3, [sp, #20]
 80132c6:	9801      	ldr	r0, [sp, #4]
 80132c8:	4621      	mov	r1, r4
 80132ca:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80132ce:	f7ff fb04 	bl	80128da <quorem>
 80132d2:	4641      	mov	r1, r8
 80132d4:	9002      	str	r0, [sp, #8]
 80132d6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80132da:	9801      	ldr	r0, [sp, #4]
 80132dc:	f000 fc58 	bl	8013b90 <__mcmp>
 80132e0:	462a      	mov	r2, r5
 80132e2:	9006      	str	r0, [sp, #24]
 80132e4:	4621      	mov	r1, r4
 80132e6:	4648      	mov	r0, r9
 80132e8:	f000 fc6e 	bl	8013bc8 <__mdiff>
 80132ec:	68c2      	ldr	r2, [r0, #12]
 80132ee:	4606      	mov	r6, r0
 80132f0:	b9fa      	cbnz	r2, 8013332 <_dtoa_r+0x942>
 80132f2:	4601      	mov	r1, r0
 80132f4:	9801      	ldr	r0, [sp, #4]
 80132f6:	f000 fc4b 	bl	8013b90 <__mcmp>
 80132fa:	4602      	mov	r2, r0
 80132fc:	4631      	mov	r1, r6
 80132fe:	4648      	mov	r0, r9
 8013300:	920a      	str	r2, [sp, #40]	@ 0x28
 8013302:	f000 fa0b 	bl	801371c <_Bfree>
 8013306:	9b07      	ldr	r3, [sp, #28]
 8013308:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801330a:	9e05      	ldr	r6, [sp, #20]
 801330c:	ea43 0102 	orr.w	r1, r3, r2
 8013310:	9b08      	ldr	r3, [sp, #32]
 8013312:	4319      	orrs	r1, r3
 8013314:	d10f      	bne.n	8013336 <_dtoa_r+0x946>
 8013316:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801331a:	d028      	beq.n	801336e <_dtoa_r+0x97e>
 801331c:	9b06      	ldr	r3, [sp, #24]
 801331e:	2b00      	cmp	r3, #0
 8013320:	dd02      	ble.n	8013328 <_dtoa_r+0x938>
 8013322:	9b02      	ldr	r3, [sp, #8]
 8013324:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8013328:	f88b a000 	strb.w	sl, [fp]
 801332c:	e639      	b.n	8012fa2 <_dtoa_r+0x5b2>
 801332e:	4628      	mov	r0, r5
 8013330:	e7bd      	b.n	80132ae <_dtoa_r+0x8be>
 8013332:	2201      	movs	r2, #1
 8013334:	e7e2      	b.n	80132fc <_dtoa_r+0x90c>
 8013336:	9b06      	ldr	r3, [sp, #24]
 8013338:	2b00      	cmp	r3, #0
 801333a:	db04      	blt.n	8013346 <_dtoa_r+0x956>
 801333c:	9907      	ldr	r1, [sp, #28]
 801333e:	430b      	orrs	r3, r1
 8013340:	9908      	ldr	r1, [sp, #32]
 8013342:	430b      	orrs	r3, r1
 8013344:	d120      	bne.n	8013388 <_dtoa_r+0x998>
 8013346:	2a00      	cmp	r2, #0
 8013348:	ddee      	ble.n	8013328 <_dtoa_r+0x938>
 801334a:	9901      	ldr	r1, [sp, #4]
 801334c:	2201      	movs	r2, #1
 801334e:	4648      	mov	r0, r9
 8013350:	f000 fbb2 	bl	8013ab8 <__lshift>
 8013354:	4621      	mov	r1, r4
 8013356:	9001      	str	r0, [sp, #4]
 8013358:	f000 fc1a 	bl	8013b90 <__mcmp>
 801335c:	2800      	cmp	r0, #0
 801335e:	dc03      	bgt.n	8013368 <_dtoa_r+0x978>
 8013360:	d1e2      	bne.n	8013328 <_dtoa_r+0x938>
 8013362:	f01a 0f01 	tst.w	sl, #1
 8013366:	d0df      	beq.n	8013328 <_dtoa_r+0x938>
 8013368:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801336c:	d1d9      	bne.n	8013322 <_dtoa_r+0x932>
 801336e:	2339      	movs	r3, #57	@ 0x39
 8013370:	f88b 3000 	strb.w	r3, [fp]
 8013374:	4633      	mov	r3, r6
 8013376:	461e      	mov	r6, r3
 8013378:	3b01      	subs	r3, #1
 801337a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801337e:	2a39      	cmp	r2, #57	@ 0x39
 8013380:	d053      	beq.n	801342a <_dtoa_r+0xa3a>
 8013382:	3201      	adds	r2, #1
 8013384:	701a      	strb	r2, [r3, #0]
 8013386:	e60c      	b.n	8012fa2 <_dtoa_r+0x5b2>
 8013388:	2a00      	cmp	r2, #0
 801338a:	dd07      	ble.n	801339c <_dtoa_r+0x9ac>
 801338c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013390:	d0ed      	beq.n	801336e <_dtoa_r+0x97e>
 8013392:	f10a 0301 	add.w	r3, sl, #1
 8013396:	f88b 3000 	strb.w	r3, [fp]
 801339a:	e602      	b.n	8012fa2 <_dtoa_r+0x5b2>
 801339c:	9b05      	ldr	r3, [sp, #20]
 801339e:	9a05      	ldr	r2, [sp, #20]
 80133a0:	f803 ac01 	strb.w	sl, [r3, #-1]
 80133a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80133a6:	4293      	cmp	r3, r2
 80133a8:	d029      	beq.n	80133fe <_dtoa_r+0xa0e>
 80133aa:	9901      	ldr	r1, [sp, #4]
 80133ac:	2300      	movs	r3, #0
 80133ae:	220a      	movs	r2, #10
 80133b0:	4648      	mov	r0, r9
 80133b2:	f000 f9d5 	bl	8013760 <__multadd>
 80133b6:	45a8      	cmp	r8, r5
 80133b8:	9001      	str	r0, [sp, #4]
 80133ba:	f04f 0300 	mov.w	r3, #0
 80133be:	f04f 020a 	mov.w	r2, #10
 80133c2:	4641      	mov	r1, r8
 80133c4:	4648      	mov	r0, r9
 80133c6:	d107      	bne.n	80133d8 <_dtoa_r+0x9e8>
 80133c8:	f000 f9ca 	bl	8013760 <__multadd>
 80133cc:	4680      	mov	r8, r0
 80133ce:	4605      	mov	r5, r0
 80133d0:	9b05      	ldr	r3, [sp, #20]
 80133d2:	3301      	adds	r3, #1
 80133d4:	9305      	str	r3, [sp, #20]
 80133d6:	e775      	b.n	80132c4 <_dtoa_r+0x8d4>
 80133d8:	f000 f9c2 	bl	8013760 <__multadd>
 80133dc:	4629      	mov	r1, r5
 80133de:	4680      	mov	r8, r0
 80133e0:	2300      	movs	r3, #0
 80133e2:	220a      	movs	r2, #10
 80133e4:	4648      	mov	r0, r9
 80133e6:	f000 f9bb 	bl	8013760 <__multadd>
 80133ea:	4605      	mov	r5, r0
 80133ec:	e7f0      	b.n	80133d0 <_dtoa_r+0x9e0>
 80133ee:	f1bb 0f00 	cmp.w	fp, #0
 80133f2:	bfcc      	ite	gt
 80133f4:	465e      	movgt	r6, fp
 80133f6:	2601      	movle	r6, #1
 80133f8:	443e      	add	r6, r7
 80133fa:	f04f 0800 	mov.w	r8, #0
 80133fe:	9901      	ldr	r1, [sp, #4]
 8013400:	2201      	movs	r2, #1
 8013402:	4648      	mov	r0, r9
 8013404:	f000 fb58 	bl	8013ab8 <__lshift>
 8013408:	4621      	mov	r1, r4
 801340a:	9001      	str	r0, [sp, #4]
 801340c:	f000 fbc0 	bl	8013b90 <__mcmp>
 8013410:	2800      	cmp	r0, #0
 8013412:	dcaf      	bgt.n	8013374 <_dtoa_r+0x984>
 8013414:	d102      	bne.n	801341c <_dtoa_r+0xa2c>
 8013416:	f01a 0f01 	tst.w	sl, #1
 801341a:	d1ab      	bne.n	8013374 <_dtoa_r+0x984>
 801341c:	4633      	mov	r3, r6
 801341e:	461e      	mov	r6, r3
 8013420:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013424:	2a30      	cmp	r2, #48	@ 0x30
 8013426:	d0fa      	beq.n	801341e <_dtoa_r+0xa2e>
 8013428:	e5bb      	b.n	8012fa2 <_dtoa_r+0x5b2>
 801342a:	429f      	cmp	r7, r3
 801342c:	d1a3      	bne.n	8013376 <_dtoa_r+0x986>
 801342e:	9b04      	ldr	r3, [sp, #16]
 8013430:	3301      	adds	r3, #1
 8013432:	9304      	str	r3, [sp, #16]
 8013434:	2331      	movs	r3, #49	@ 0x31
 8013436:	703b      	strb	r3, [r7, #0]
 8013438:	e5b3      	b.n	8012fa2 <_dtoa_r+0x5b2>
 801343a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801343c:	4f16      	ldr	r7, [pc, #88]	@ (8013498 <_dtoa_r+0xaa8>)
 801343e:	b11b      	cbz	r3, 8013448 <_dtoa_r+0xa58>
 8013440:	f107 0308 	add.w	r3, r7, #8
 8013444:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013446:	6013      	str	r3, [r2, #0]
 8013448:	4638      	mov	r0, r7
 801344a:	b011      	add	sp, #68	@ 0x44
 801344c:	ecbd 8b02 	vpop	{d8}
 8013450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013454:	9b07      	ldr	r3, [sp, #28]
 8013456:	2b01      	cmp	r3, #1
 8013458:	f77f ae36 	ble.w	80130c8 <_dtoa_r+0x6d8>
 801345c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801345e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013460:	2001      	movs	r0, #1
 8013462:	e656      	b.n	8013112 <_dtoa_r+0x722>
 8013464:	f1bb 0f00 	cmp.w	fp, #0
 8013468:	f77f aed7 	ble.w	801321a <_dtoa_r+0x82a>
 801346c:	463e      	mov	r6, r7
 801346e:	9801      	ldr	r0, [sp, #4]
 8013470:	4621      	mov	r1, r4
 8013472:	f7ff fa32 	bl	80128da <quorem>
 8013476:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801347a:	f806 ab01 	strb.w	sl, [r6], #1
 801347e:	1bf2      	subs	r2, r6, r7
 8013480:	4593      	cmp	fp, r2
 8013482:	ddb4      	ble.n	80133ee <_dtoa_r+0x9fe>
 8013484:	9901      	ldr	r1, [sp, #4]
 8013486:	2300      	movs	r3, #0
 8013488:	220a      	movs	r2, #10
 801348a:	4648      	mov	r0, r9
 801348c:	f000 f968 	bl	8013760 <__multadd>
 8013490:	9001      	str	r0, [sp, #4]
 8013492:	e7ec      	b.n	801346e <_dtoa_r+0xa7e>
 8013494:	0801542a 	.word	0x0801542a
 8013498:	080153ae 	.word	0x080153ae

0801349c <_free_r>:
 801349c:	b538      	push	{r3, r4, r5, lr}
 801349e:	4605      	mov	r5, r0
 80134a0:	2900      	cmp	r1, #0
 80134a2:	d041      	beq.n	8013528 <_free_r+0x8c>
 80134a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80134a8:	1f0c      	subs	r4, r1, #4
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	bfb8      	it	lt
 80134ae:	18e4      	addlt	r4, r4, r3
 80134b0:	f000 f8e8 	bl	8013684 <__malloc_lock>
 80134b4:	4a1d      	ldr	r2, [pc, #116]	@ (801352c <_free_r+0x90>)
 80134b6:	6813      	ldr	r3, [r2, #0]
 80134b8:	b933      	cbnz	r3, 80134c8 <_free_r+0x2c>
 80134ba:	6063      	str	r3, [r4, #4]
 80134bc:	6014      	str	r4, [r2, #0]
 80134be:	4628      	mov	r0, r5
 80134c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80134c4:	f000 b8e4 	b.w	8013690 <__malloc_unlock>
 80134c8:	42a3      	cmp	r3, r4
 80134ca:	d908      	bls.n	80134de <_free_r+0x42>
 80134cc:	6820      	ldr	r0, [r4, #0]
 80134ce:	1821      	adds	r1, r4, r0
 80134d0:	428b      	cmp	r3, r1
 80134d2:	bf01      	itttt	eq
 80134d4:	6819      	ldreq	r1, [r3, #0]
 80134d6:	685b      	ldreq	r3, [r3, #4]
 80134d8:	1809      	addeq	r1, r1, r0
 80134da:	6021      	streq	r1, [r4, #0]
 80134dc:	e7ed      	b.n	80134ba <_free_r+0x1e>
 80134de:	461a      	mov	r2, r3
 80134e0:	685b      	ldr	r3, [r3, #4]
 80134e2:	b10b      	cbz	r3, 80134e8 <_free_r+0x4c>
 80134e4:	42a3      	cmp	r3, r4
 80134e6:	d9fa      	bls.n	80134de <_free_r+0x42>
 80134e8:	6811      	ldr	r1, [r2, #0]
 80134ea:	1850      	adds	r0, r2, r1
 80134ec:	42a0      	cmp	r0, r4
 80134ee:	d10b      	bne.n	8013508 <_free_r+0x6c>
 80134f0:	6820      	ldr	r0, [r4, #0]
 80134f2:	4401      	add	r1, r0
 80134f4:	1850      	adds	r0, r2, r1
 80134f6:	4283      	cmp	r3, r0
 80134f8:	6011      	str	r1, [r2, #0]
 80134fa:	d1e0      	bne.n	80134be <_free_r+0x22>
 80134fc:	6818      	ldr	r0, [r3, #0]
 80134fe:	685b      	ldr	r3, [r3, #4]
 8013500:	6053      	str	r3, [r2, #4]
 8013502:	4408      	add	r0, r1
 8013504:	6010      	str	r0, [r2, #0]
 8013506:	e7da      	b.n	80134be <_free_r+0x22>
 8013508:	d902      	bls.n	8013510 <_free_r+0x74>
 801350a:	230c      	movs	r3, #12
 801350c:	602b      	str	r3, [r5, #0]
 801350e:	e7d6      	b.n	80134be <_free_r+0x22>
 8013510:	6820      	ldr	r0, [r4, #0]
 8013512:	1821      	adds	r1, r4, r0
 8013514:	428b      	cmp	r3, r1
 8013516:	bf04      	itt	eq
 8013518:	6819      	ldreq	r1, [r3, #0]
 801351a:	685b      	ldreq	r3, [r3, #4]
 801351c:	6063      	str	r3, [r4, #4]
 801351e:	bf04      	itt	eq
 8013520:	1809      	addeq	r1, r1, r0
 8013522:	6021      	streq	r1, [r4, #0]
 8013524:	6054      	str	r4, [r2, #4]
 8013526:	e7ca      	b.n	80134be <_free_r+0x22>
 8013528:	bd38      	pop	{r3, r4, r5, pc}
 801352a:	bf00      	nop
 801352c:	2400120c 	.word	0x2400120c

08013530 <malloc>:
 8013530:	4b02      	ldr	r3, [pc, #8]	@ (801353c <malloc+0xc>)
 8013532:	4601      	mov	r1, r0
 8013534:	6818      	ldr	r0, [r3, #0]
 8013536:	f000 b825 	b.w	8013584 <_malloc_r>
 801353a:	bf00      	nop
 801353c:	24000054 	.word	0x24000054

08013540 <sbrk_aligned>:
 8013540:	b570      	push	{r4, r5, r6, lr}
 8013542:	4e0f      	ldr	r6, [pc, #60]	@ (8013580 <sbrk_aligned+0x40>)
 8013544:	460c      	mov	r4, r1
 8013546:	6831      	ldr	r1, [r6, #0]
 8013548:	4605      	mov	r5, r0
 801354a:	b911      	cbnz	r1, 8013552 <sbrk_aligned+0x12>
 801354c:	f000 fe46 	bl	80141dc <_sbrk_r>
 8013550:	6030      	str	r0, [r6, #0]
 8013552:	4621      	mov	r1, r4
 8013554:	4628      	mov	r0, r5
 8013556:	f000 fe41 	bl	80141dc <_sbrk_r>
 801355a:	1c43      	adds	r3, r0, #1
 801355c:	d103      	bne.n	8013566 <sbrk_aligned+0x26>
 801355e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8013562:	4620      	mov	r0, r4
 8013564:	bd70      	pop	{r4, r5, r6, pc}
 8013566:	1cc4      	adds	r4, r0, #3
 8013568:	f024 0403 	bic.w	r4, r4, #3
 801356c:	42a0      	cmp	r0, r4
 801356e:	d0f8      	beq.n	8013562 <sbrk_aligned+0x22>
 8013570:	1a21      	subs	r1, r4, r0
 8013572:	4628      	mov	r0, r5
 8013574:	f000 fe32 	bl	80141dc <_sbrk_r>
 8013578:	3001      	adds	r0, #1
 801357a:	d1f2      	bne.n	8013562 <sbrk_aligned+0x22>
 801357c:	e7ef      	b.n	801355e <sbrk_aligned+0x1e>
 801357e:	bf00      	nop
 8013580:	24001208 	.word	0x24001208

08013584 <_malloc_r>:
 8013584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013588:	1ccd      	adds	r5, r1, #3
 801358a:	f025 0503 	bic.w	r5, r5, #3
 801358e:	3508      	adds	r5, #8
 8013590:	2d0c      	cmp	r5, #12
 8013592:	bf38      	it	cc
 8013594:	250c      	movcc	r5, #12
 8013596:	2d00      	cmp	r5, #0
 8013598:	4606      	mov	r6, r0
 801359a:	db01      	blt.n	80135a0 <_malloc_r+0x1c>
 801359c:	42a9      	cmp	r1, r5
 801359e:	d904      	bls.n	80135aa <_malloc_r+0x26>
 80135a0:	230c      	movs	r3, #12
 80135a2:	6033      	str	r3, [r6, #0]
 80135a4:	2000      	movs	r0, #0
 80135a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013680 <_malloc_r+0xfc>
 80135ae:	f000 f869 	bl	8013684 <__malloc_lock>
 80135b2:	f8d8 3000 	ldr.w	r3, [r8]
 80135b6:	461c      	mov	r4, r3
 80135b8:	bb44      	cbnz	r4, 801360c <_malloc_r+0x88>
 80135ba:	4629      	mov	r1, r5
 80135bc:	4630      	mov	r0, r6
 80135be:	f7ff ffbf 	bl	8013540 <sbrk_aligned>
 80135c2:	1c43      	adds	r3, r0, #1
 80135c4:	4604      	mov	r4, r0
 80135c6:	d158      	bne.n	801367a <_malloc_r+0xf6>
 80135c8:	f8d8 4000 	ldr.w	r4, [r8]
 80135cc:	4627      	mov	r7, r4
 80135ce:	2f00      	cmp	r7, #0
 80135d0:	d143      	bne.n	801365a <_malloc_r+0xd6>
 80135d2:	2c00      	cmp	r4, #0
 80135d4:	d04b      	beq.n	801366e <_malloc_r+0xea>
 80135d6:	6823      	ldr	r3, [r4, #0]
 80135d8:	4639      	mov	r1, r7
 80135da:	4630      	mov	r0, r6
 80135dc:	eb04 0903 	add.w	r9, r4, r3
 80135e0:	f000 fdfc 	bl	80141dc <_sbrk_r>
 80135e4:	4581      	cmp	r9, r0
 80135e6:	d142      	bne.n	801366e <_malloc_r+0xea>
 80135e8:	6821      	ldr	r1, [r4, #0]
 80135ea:	1a6d      	subs	r5, r5, r1
 80135ec:	4629      	mov	r1, r5
 80135ee:	4630      	mov	r0, r6
 80135f0:	f7ff ffa6 	bl	8013540 <sbrk_aligned>
 80135f4:	3001      	adds	r0, #1
 80135f6:	d03a      	beq.n	801366e <_malloc_r+0xea>
 80135f8:	6823      	ldr	r3, [r4, #0]
 80135fa:	442b      	add	r3, r5
 80135fc:	6023      	str	r3, [r4, #0]
 80135fe:	f8d8 3000 	ldr.w	r3, [r8]
 8013602:	685a      	ldr	r2, [r3, #4]
 8013604:	bb62      	cbnz	r2, 8013660 <_malloc_r+0xdc>
 8013606:	f8c8 7000 	str.w	r7, [r8]
 801360a:	e00f      	b.n	801362c <_malloc_r+0xa8>
 801360c:	6822      	ldr	r2, [r4, #0]
 801360e:	1b52      	subs	r2, r2, r5
 8013610:	d420      	bmi.n	8013654 <_malloc_r+0xd0>
 8013612:	2a0b      	cmp	r2, #11
 8013614:	d917      	bls.n	8013646 <_malloc_r+0xc2>
 8013616:	1961      	adds	r1, r4, r5
 8013618:	42a3      	cmp	r3, r4
 801361a:	6025      	str	r5, [r4, #0]
 801361c:	bf18      	it	ne
 801361e:	6059      	strne	r1, [r3, #4]
 8013620:	6863      	ldr	r3, [r4, #4]
 8013622:	bf08      	it	eq
 8013624:	f8c8 1000 	streq.w	r1, [r8]
 8013628:	5162      	str	r2, [r4, r5]
 801362a:	604b      	str	r3, [r1, #4]
 801362c:	4630      	mov	r0, r6
 801362e:	f000 f82f 	bl	8013690 <__malloc_unlock>
 8013632:	f104 000b 	add.w	r0, r4, #11
 8013636:	1d23      	adds	r3, r4, #4
 8013638:	f020 0007 	bic.w	r0, r0, #7
 801363c:	1ac2      	subs	r2, r0, r3
 801363e:	bf1c      	itt	ne
 8013640:	1a1b      	subne	r3, r3, r0
 8013642:	50a3      	strne	r3, [r4, r2]
 8013644:	e7af      	b.n	80135a6 <_malloc_r+0x22>
 8013646:	6862      	ldr	r2, [r4, #4]
 8013648:	42a3      	cmp	r3, r4
 801364a:	bf0c      	ite	eq
 801364c:	f8c8 2000 	streq.w	r2, [r8]
 8013650:	605a      	strne	r2, [r3, #4]
 8013652:	e7eb      	b.n	801362c <_malloc_r+0xa8>
 8013654:	4623      	mov	r3, r4
 8013656:	6864      	ldr	r4, [r4, #4]
 8013658:	e7ae      	b.n	80135b8 <_malloc_r+0x34>
 801365a:	463c      	mov	r4, r7
 801365c:	687f      	ldr	r7, [r7, #4]
 801365e:	e7b6      	b.n	80135ce <_malloc_r+0x4a>
 8013660:	461a      	mov	r2, r3
 8013662:	685b      	ldr	r3, [r3, #4]
 8013664:	42a3      	cmp	r3, r4
 8013666:	d1fb      	bne.n	8013660 <_malloc_r+0xdc>
 8013668:	2300      	movs	r3, #0
 801366a:	6053      	str	r3, [r2, #4]
 801366c:	e7de      	b.n	801362c <_malloc_r+0xa8>
 801366e:	230c      	movs	r3, #12
 8013670:	6033      	str	r3, [r6, #0]
 8013672:	4630      	mov	r0, r6
 8013674:	f000 f80c 	bl	8013690 <__malloc_unlock>
 8013678:	e794      	b.n	80135a4 <_malloc_r+0x20>
 801367a:	6005      	str	r5, [r0, #0]
 801367c:	e7d6      	b.n	801362c <_malloc_r+0xa8>
 801367e:	bf00      	nop
 8013680:	2400120c 	.word	0x2400120c

08013684 <__malloc_lock>:
 8013684:	4801      	ldr	r0, [pc, #4]	@ (801368c <__malloc_lock+0x8>)
 8013686:	f7ff b91e 	b.w	80128c6 <__retarget_lock_acquire_recursive>
 801368a:	bf00      	nop
 801368c:	24001204 	.word	0x24001204

08013690 <__malloc_unlock>:
 8013690:	4801      	ldr	r0, [pc, #4]	@ (8013698 <__malloc_unlock+0x8>)
 8013692:	f7ff b919 	b.w	80128c8 <__retarget_lock_release_recursive>
 8013696:	bf00      	nop
 8013698:	24001204 	.word	0x24001204

0801369c <_Balloc>:
 801369c:	b570      	push	{r4, r5, r6, lr}
 801369e:	69c6      	ldr	r6, [r0, #28]
 80136a0:	4604      	mov	r4, r0
 80136a2:	460d      	mov	r5, r1
 80136a4:	b976      	cbnz	r6, 80136c4 <_Balloc+0x28>
 80136a6:	2010      	movs	r0, #16
 80136a8:	f7ff ff42 	bl	8013530 <malloc>
 80136ac:	4602      	mov	r2, r0
 80136ae:	61e0      	str	r0, [r4, #28]
 80136b0:	b920      	cbnz	r0, 80136bc <_Balloc+0x20>
 80136b2:	4b18      	ldr	r3, [pc, #96]	@ (8013714 <_Balloc+0x78>)
 80136b4:	4818      	ldr	r0, [pc, #96]	@ (8013718 <_Balloc+0x7c>)
 80136b6:	216b      	movs	r1, #107	@ 0x6b
 80136b8:	f000 fdae 	bl	8014218 <__assert_func>
 80136bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80136c0:	6006      	str	r6, [r0, #0]
 80136c2:	60c6      	str	r6, [r0, #12]
 80136c4:	69e6      	ldr	r6, [r4, #28]
 80136c6:	68f3      	ldr	r3, [r6, #12]
 80136c8:	b183      	cbz	r3, 80136ec <_Balloc+0x50>
 80136ca:	69e3      	ldr	r3, [r4, #28]
 80136cc:	68db      	ldr	r3, [r3, #12]
 80136ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80136d2:	b9b8      	cbnz	r0, 8013704 <_Balloc+0x68>
 80136d4:	2101      	movs	r1, #1
 80136d6:	fa01 f605 	lsl.w	r6, r1, r5
 80136da:	1d72      	adds	r2, r6, #5
 80136dc:	0092      	lsls	r2, r2, #2
 80136de:	4620      	mov	r0, r4
 80136e0:	f000 fdb8 	bl	8014254 <_calloc_r>
 80136e4:	b160      	cbz	r0, 8013700 <_Balloc+0x64>
 80136e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80136ea:	e00e      	b.n	801370a <_Balloc+0x6e>
 80136ec:	2221      	movs	r2, #33	@ 0x21
 80136ee:	2104      	movs	r1, #4
 80136f0:	4620      	mov	r0, r4
 80136f2:	f000 fdaf 	bl	8014254 <_calloc_r>
 80136f6:	69e3      	ldr	r3, [r4, #28]
 80136f8:	60f0      	str	r0, [r6, #12]
 80136fa:	68db      	ldr	r3, [r3, #12]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d1e4      	bne.n	80136ca <_Balloc+0x2e>
 8013700:	2000      	movs	r0, #0
 8013702:	bd70      	pop	{r4, r5, r6, pc}
 8013704:	6802      	ldr	r2, [r0, #0]
 8013706:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801370a:	2300      	movs	r3, #0
 801370c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013710:	e7f7      	b.n	8013702 <_Balloc+0x66>
 8013712:	bf00      	nop
 8013714:	080153bb 	.word	0x080153bb
 8013718:	0801543b 	.word	0x0801543b

0801371c <_Bfree>:
 801371c:	b570      	push	{r4, r5, r6, lr}
 801371e:	69c6      	ldr	r6, [r0, #28]
 8013720:	4605      	mov	r5, r0
 8013722:	460c      	mov	r4, r1
 8013724:	b976      	cbnz	r6, 8013744 <_Bfree+0x28>
 8013726:	2010      	movs	r0, #16
 8013728:	f7ff ff02 	bl	8013530 <malloc>
 801372c:	4602      	mov	r2, r0
 801372e:	61e8      	str	r0, [r5, #28]
 8013730:	b920      	cbnz	r0, 801373c <_Bfree+0x20>
 8013732:	4b09      	ldr	r3, [pc, #36]	@ (8013758 <_Bfree+0x3c>)
 8013734:	4809      	ldr	r0, [pc, #36]	@ (801375c <_Bfree+0x40>)
 8013736:	218f      	movs	r1, #143	@ 0x8f
 8013738:	f000 fd6e 	bl	8014218 <__assert_func>
 801373c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013740:	6006      	str	r6, [r0, #0]
 8013742:	60c6      	str	r6, [r0, #12]
 8013744:	b13c      	cbz	r4, 8013756 <_Bfree+0x3a>
 8013746:	69eb      	ldr	r3, [r5, #28]
 8013748:	6862      	ldr	r2, [r4, #4]
 801374a:	68db      	ldr	r3, [r3, #12]
 801374c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013750:	6021      	str	r1, [r4, #0]
 8013752:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013756:	bd70      	pop	{r4, r5, r6, pc}
 8013758:	080153bb 	.word	0x080153bb
 801375c:	0801543b 	.word	0x0801543b

08013760 <__multadd>:
 8013760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013764:	690d      	ldr	r5, [r1, #16]
 8013766:	4607      	mov	r7, r0
 8013768:	460c      	mov	r4, r1
 801376a:	461e      	mov	r6, r3
 801376c:	f101 0c14 	add.w	ip, r1, #20
 8013770:	2000      	movs	r0, #0
 8013772:	f8dc 3000 	ldr.w	r3, [ip]
 8013776:	b299      	uxth	r1, r3
 8013778:	fb02 6101 	mla	r1, r2, r1, r6
 801377c:	0c1e      	lsrs	r6, r3, #16
 801377e:	0c0b      	lsrs	r3, r1, #16
 8013780:	fb02 3306 	mla	r3, r2, r6, r3
 8013784:	b289      	uxth	r1, r1
 8013786:	3001      	adds	r0, #1
 8013788:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801378c:	4285      	cmp	r5, r0
 801378e:	f84c 1b04 	str.w	r1, [ip], #4
 8013792:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013796:	dcec      	bgt.n	8013772 <__multadd+0x12>
 8013798:	b30e      	cbz	r6, 80137de <__multadd+0x7e>
 801379a:	68a3      	ldr	r3, [r4, #8]
 801379c:	42ab      	cmp	r3, r5
 801379e:	dc19      	bgt.n	80137d4 <__multadd+0x74>
 80137a0:	6861      	ldr	r1, [r4, #4]
 80137a2:	4638      	mov	r0, r7
 80137a4:	3101      	adds	r1, #1
 80137a6:	f7ff ff79 	bl	801369c <_Balloc>
 80137aa:	4680      	mov	r8, r0
 80137ac:	b928      	cbnz	r0, 80137ba <__multadd+0x5a>
 80137ae:	4602      	mov	r2, r0
 80137b0:	4b0c      	ldr	r3, [pc, #48]	@ (80137e4 <__multadd+0x84>)
 80137b2:	480d      	ldr	r0, [pc, #52]	@ (80137e8 <__multadd+0x88>)
 80137b4:	21ba      	movs	r1, #186	@ 0xba
 80137b6:	f000 fd2f 	bl	8014218 <__assert_func>
 80137ba:	6922      	ldr	r2, [r4, #16]
 80137bc:	3202      	adds	r2, #2
 80137be:	f104 010c 	add.w	r1, r4, #12
 80137c2:	0092      	lsls	r2, r2, #2
 80137c4:	300c      	adds	r0, #12
 80137c6:	f000 fd19 	bl	80141fc <memcpy>
 80137ca:	4621      	mov	r1, r4
 80137cc:	4638      	mov	r0, r7
 80137ce:	f7ff ffa5 	bl	801371c <_Bfree>
 80137d2:	4644      	mov	r4, r8
 80137d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80137d8:	3501      	adds	r5, #1
 80137da:	615e      	str	r6, [r3, #20]
 80137dc:	6125      	str	r5, [r4, #16]
 80137de:	4620      	mov	r0, r4
 80137e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137e4:	0801542a 	.word	0x0801542a
 80137e8:	0801543b 	.word	0x0801543b

080137ec <__hi0bits>:
 80137ec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80137f0:	4603      	mov	r3, r0
 80137f2:	bf36      	itet	cc
 80137f4:	0403      	lslcc	r3, r0, #16
 80137f6:	2000      	movcs	r0, #0
 80137f8:	2010      	movcc	r0, #16
 80137fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80137fe:	bf3c      	itt	cc
 8013800:	021b      	lslcc	r3, r3, #8
 8013802:	3008      	addcc	r0, #8
 8013804:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013808:	bf3c      	itt	cc
 801380a:	011b      	lslcc	r3, r3, #4
 801380c:	3004      	addcc	r0, #4
 801380e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013812:	bf3c      	itt	cc
 8013814:	009b      	lslcc	r3, r3, #2
 8013816:	3002      	addcc	r0, #2
 8013818:	2b00      	cmp	r3, #0
 801381a:	db05      	blt.n	8013828 <__hi0bits+0x3c>
 801381c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013820:	f100 0001 	add.w	r0, r0, #1
 8013824:	bf08      	it	eq
 8013826:	2020      	moveq	r0, #32
 8013828:	4770      	bx	lr

0801382a <__lo0bits>:
 801382a:	6803      	ldr	r3, [r0, #0]
 801382c:	4602      	mov	r2, r0
 801382e:	f013 0007 	ands.w	r0, r3, #7
 8013832:	d00b      	beq.n	801384c <__lo0bits+0x22>
 8013834:	07d9      	lsls	r1, r3, #31
 8013836:	d421      	bmi.n	801387c <__lo0bits+0x52>
 8013838:	0798      	lsls	r0, r3, #30
 801383a:	bf49      	itett	mi
 801383c:	085b      	lsrmi	r3, r3, #1
 801383e:	089b      	lsrpl	r3, r3, #2
 8013840:	2001      	movmi	r0, #1
 8013842:	6013      	strmi	r3, [r2, #0]
 8013844:	bf5c      	itt	pl
 8013846:	6013      	strpl	r3, [r2, #0]
 8013848:	2002      	movpl	r0, #2
 801384a:	4770      	bx	lr
 801384c:	b299      	uxth	r1, r3
 801384e:	b909      	cbnz	r1, 8013854 <__lo0bits+0x2a>
 8013850:	0c1b      	lsrs	r3, r3, #16
 8013852:	2010      	movs	r0, #16
 8013854:	b2d9      	uxtb	r1, r3
 8013856:	b909      	cbnz	r1, 801385c <__lo0bits+0x32>
 8013858:	3008      	adds	r0, #8
 801385a:	0a1b      	lsrs	r3, r3, #8
 801385c:	0719      	lsls	r1, r3, #28
 801385e:	bf04      	itt	eq
 8013860:	091b      	lsreq	r3, r3, #4
 8013862:	3004      	addeq	r0, #4
 8013864:	0799      	lsls	r1, r3, #30
 8013866:	bf04      	itt	eq
 8013868:	089b      	lsreq	r3, r3, #2
 801386a:	3002      	addeq	r0, #2
 801386c:	07d9      	lsls	r1, r3, #31
 801386e:	d403      	bmi.n	8013878 <__lo0bits+0x4e>
 8013870:	085b      	lsrs	r3, r3, #1
 8013872:	f100 0001 	add.w	r0, r0, #1
 8013876:	d003      	beq.n	8013880 <__lo0bits+0x56>
 8013878:	6013      	str	r3, [r2, #0]
 801387a:	4770      	bx	lr
 801387c:	2000      	movs	r0, #0
 801387e:	4770      	bx	lr
 8013880:	2020      	movs	r0, #32
 8013882:	4770      	bx	lr

08013884 <__i2b>:
 8013884:	b510      	push	{r4, lr}
 8013886:	460c      	mov	r4, r1
 8013888:	2101      	movs	r1, #1
 801388a:	f7ff ff07 	bl	801369c <_Balloc>
 801388e:	4602      	mov	r2, r0
 8013890:	b928      	cbnz	r0, 801389e <__i2b+0x1a>
 8013892:	4b05      	ldr	r3, [pc, #20]	@ (80138a8 <__i2b+0x24>)
 8013894:	4805      	ldr	r0, [pc, #20]	@ (80138ac <__i2b+0x28>)
 8013896:	f240 1145 	movw	r1, #325	@ 0x145
 801389a:	f000 fcbd 	bl	8014218 <__assert_func>
 801389e:	2301      	movs	r3, #1
 80138a0:	6144      	str	r4, [r0, #20]
 80138a2:	6103      	str	r3, [r0, #16]
 80138a4:	bd10      	pop	{r4, pc}
 80138a6:	bf00      	nop
 80138a8:	0801542a 	.word	0x0801542a
 80138ac:	0801543b 	.word	0x0801543b

080138b0 <__multiply>:
 80138b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138b4:	4614      	mov	r4, r2
 80138b6:	690a      	ldr	r2, [r1, #16]
 80138b8:	6923      	ldr	r3, [r4, #16]
 80138ba:	429a      	cmp	r2, r3
 80138bc:	bfa8      	it	ge
 80138be:	4623      	movge	r3, r4
 80138c0:	460f      	mov	r7, r1
 80138c2:	bfa4      	itt	ge
 80138c4:	460c      	movge	r4, r1
 80138c6:	461f      	movge	r7, r3
 80138c8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80138cc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80138d0:	68a3      	ldr	r3, [r4, #8]
 80138d2:	6861      	ldr	r1, [r4, #4]
 80138d4:	eb0a 0609 	add.w	r6, sl, r9
 80138d8:	42b3      	cmp	r3, r6
 80138da:	b085      	sub	sp, #20
 80138dc:	bfb8      	it	lt
 80138de:	3101      	addlt	r1, #1
 80138e0:	f7ff fedc 	bl	801369c <_Balloc>
 80138e4:	b930      	cbnz	r0, 80138f4 <__multiply+0x44>
 80138e6:	4602      	mov	r2, r0
 80138e8:	4b44      	ldr	r3, [pc, #272]	@ (80139fc <__multiply+0x14c>)
 80138ea:	4845      	ldr	r0, [pc, #276]	@ (8013a00 <__multiply+0x150>)
 80138ec:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80138f0:	f000 fc92 	bl	8014218 <__assert_func>
 80138f4:	f100 0514 	add.w	r5, r0, #20
 80138f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80138fc:	462b      	mov	r3, r5
 80138fe:	2200      	movs	r2, #0
 8013900:	4543      	cmp	r3, r8
 8013902:	d321      	bcc.n	8013948 <__multiply+0x98>
 8013904:	f107 0114 	add.w	r1, r7, #20
 8013908:	f104 0214 	add.w	r2, r4, #20
 801390c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013910:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013914:	9302      	str	r3, [sp, #8]
 8013916:	1b13      	subs	r3, r2, r4
 8013918:	3b15      	subs	r3, #21
 801391a:	f023 0303 	bic.w	r3, r3, #3
 801391e:	3304      	adds	r3, #4
 8013920:	f104 0715 	add.w	r7, r4, #21
 8013924:	42ba      	cmp	r2, r7
 8013926:	bf38      	it	cc
 8013928:	2304      	movcc	r3, #4
 801392a:	9301      	str	r3, [sp, #4]
 801392c:	9b02      	ldr	r3, [sp, #8]
 801392e:	9103      	str	r1, [sp, #12]
 8013930:	428b      	cmp	r3, r1
 8013932:	d80c      	bhi.n	801394e <__multiply+0x9e>
 8013934:	2e00      	cmp	r6, #0
 8013936:	dd03      	ble.n	8013940 <__multiply+0x90>
 8013938:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801393c:	2b00      	cmp	r3, #0
 801393e:	d05b      	beq.n	80139f8 <__multiply+0x148>
 8013940:	6106      	str	r6, [r0, #16]
 8013942:	b005      	add	sp, #20
 8013944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013948:	f843 2b04 	str.w	r2, [r3], #4
 801394c:	e7d8      	b.n	8013900 <__multiply+0x50>
 801394e:	f8b1 a000 	ldrh.w	sl, [r1]
 8013952:	f1ba 0f00 	cmp.w	sl, #0
 8013956:	d024      	beq.n	80139a2 <__multiply+0xf2>
 8013958:	f104 0e14 	add.w	lr, r4, #20
 801395c:	46a9      	mov	r9, r5
 801395e:	f04f 0c00 	mov.w	ip, #0
 8013962:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013966:	f8d9 3000 	ldr.w	r3, [r9]
 801396a:	fa1f fb87 	uxth.w	fp, r7
 801396e:	b29b      	uxth	r3, r3
 8013970:	fb0a 330b 	mla	r3, sl, fp, r3
 8013974:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013978:	f8d9 7000 	ldr.w	r7, [r9]
 801397c:	4463      	add	r3, ip
 801397e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013982:	fb0a c70b 	mla	r7, sl, fp, ip
 8013986:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801398a:	b29b      	uxth	r3, r3
 801398c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013990:	4572      	cmp	r2, lr
 8013992:	f849 3b04 	str.w	r3, [r9], #4
 8013996:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801399a:	d8e2      	bhi.n	8013962 <__multiply+0xb2>
 801399c:	9b01      	ldr	r3, [sp, #4]
 801399e:	f845 c003 	str.w	ip, [r5, r3]
 80139a2:	9b03      	ldr	r3, [sp, #12]
 80139a4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80139a8:	3104      	adds	r1, #4
 80139aa:	f1b9 0f00 	cmp.w	r9, #0
 80139ae:	d021      	beq.n	80139f4 <__multiply+0x144>
 80139b0:	682b      	ldr	r3, [r5, #0]
 80139b2:	f104 0c14 	add.w	ip, r4, #20
 80139b6:	46ae      	mov	lr, r5
 80139b8:	f04f 0a00 	mov.w	sl, #0
 80139bc:	f8bc b000 	ldrh.w	fp, [ip]
 80139c0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80139c4:	fb09 770b 	mla	r7, r9, fp, r7
 80139c8:	4457      	add	r7, sl
 80139ca:	b29b      	uxth	r3, r3
 80139cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80139d0:	f84e 3b04 	str.w	r3, [lr], #4
 80139d4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80139d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80139dc:	f8be 3000 	ldrh.w	r3, [lr]
 80139e0:	fb09 330a 	mla	r3, r9, sl, r3
 80139e4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80139e8:	4562      	cmp	r2, ip
 80139ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80139ee:	d8e5      	bhi.n	80139bc <__multiply+0x10c>
 80139f0:	9f01      	ldr	r7, [sp, #4]
 80139f2:	51eb      	str	r3, [r5, r7]
 80139f4:	3504      	adds	r5, #4
 80139f6:	e799      	b.n	801392c <__multiply+0x7c>
 80139f8:	3e01      	subs	r6, #1
 80139fa:	e79b      	b.n	8013934 <__multiply+0x84>
 80139fc:	0801542a 	.word	0x0801542a
 8013a00:	0801543b 	.word	0x0801543b

08013a04 <__pow5mult>:
 8013a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a08:	4615      	mov	r5, r2
 8013a0a:	f012 0203 	ands.w	r2, r2, #3
 8013a0e:	4607      	mov	r7, r0
 8013a10:	460e      	mov	r6, r1
 8013a12:	d007      	beq.n	8013a24 <__pow5mult+0x20>
 8013a14:	4c25      	ldr	r4, [pc, #148]	@ (8013aac <__pow5mult+0xa8>)
 8013a16:	3a01      	subs	r2, #1
 8013a18:	2300      	movs	r3, #0
 8013a1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013a1e:	f7ff fe9f 	bl	8013760 <__multadd>
 8013a22:	4606      	mov	r6, r0
 8013a24:	10ad      	asrs	r5, r5, #2
 8013a26:	d03d      	beq.n	8013aa4 <__pow5mult+0xa0>
 8013a28:	69fc      	ldr	r4, [r7, #28]
 8013a2a:	b97c      	cbnz	r4, 8013a4c <__pow5mult+0x48>
 8013a2c:	2010      	movs	r0, #16
 8013a2e:	f7ff fd7f 	bl	8013530 <malloc>
 8013a32:	4602      	mov	r2, r0
 8013a34:	61f8      	str	r0, [r7, #28]
 8013a36:	b928      	cbnz	r0, 8013a44 <__pow5mult+0x40>
 8013a38:	4b1d      	ldr	r3, [pc, #116]	@ (8013ab0 <__pow5mult+0xac>)
 8013a3a:	481e      	ldr	r0, [pc, #120]	@ (8013ab4 <__pow5mult+0xb0>)
 8013a3c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013a40:	f000 fbea 	bl	8014218 <__assert_func>
 8013a44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013a48:	6004      	str	r4, [r0, #0]
 8013a4a:	60c4      	str	r4, [r0, #12]
 8013a4c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013a50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013a54:	b94c      	cbnz	r4, 8013a6a <__pow5mult+0x66>
 8013a56:	f240 2171 	movw	r1, #625	@ 0x271
 8013a5a:	4638      	mov	r0, r7
 8013a5c:	f7ff ff12 	bl	8013884 <__i2b>
 8013a60:	2300      	movs	r3, #0
 8013a62:	f8c8 0008 	str.w	r0, [r8, #8]
 8013a66:	4604      	mov	r4, r0
 8013a68:	6003      	str	r3, [r0, #0]
 8013a6a:	f04f 0900 	mov.w	r9, #0
 8013a6e:	07eb      	lsls	r3, r5, #31
 8013a70:	d50a      	bpl.n	8013a88 <__pow5mult+0x84>
 8013a72:	4631      	mov	r1, r6
 8013a74:	4622      	mov	r2, r4
 8013a76:	4638      	mov	r0, r7
 8013a78:	f7ff ff1a 	bl	80138b0 <__multiply>
 8013a7c:	4631      	mov	r1, r6
 8013a7e:	4680      	mov	r8, r0
 8013a80:	4638      	mov	r0, r7
 8013a82:	f7ff fe4b 	bl	801371c <_Bfree>
 8013a86:	4646      	mov	r6, r8
 8013a88:	106d      	asrs	r5, r5, #1
 8013a8a:	d00b      	beq.n	8013aa4 <__pow5mult+0xa0>
 8013a8c:	6820      	ldr	r0, [r4, #0]
 8013a8e:	b938      	cbnz	r0, 8013aa0 <__pow5mult+0x9c>
 8013a90:	4622      	mov	r2, r4
 8013a92:	4621      	mov	r1, r4
 8013a94:	4638      	mov	r0, r7
 8013a96:	f7ff ff0b 	bl	80138b0 <__multiply>
 8013a9a:	6020      	str	r0, [r4, #0]
 8013a9c:	f8c0 9000 	str.w	r9, [r0]
 8013aa0:	4604      	mov	r4, r0
 8013aa2:	e7e4      	b.n	8013a6e <__pow5mult+0x6a>
 8013aa4:	4630      	mov	r0, r6
 8013aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013aaa:	bf00      	nop
 8013aac:	08015494 	.word	0x08015494
 8013ab0:	080153bb 	.word	0x080153bb
 8013ab4:	0801543b 	.word	0x0801543b

08013ab8 <__lshift>:
 8013ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013abc:	460c      	mov	r4, r1
 8013abe:	6849      	ldr	r1, [r1, #4]
 8013ac0:	6923      	ldr	r3, [r4, #16]
 8013ac2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013ac6:	68a3      	ldr	r3, [r4, #8]
 8013ac8:	4607      	mov	r7, r0
 8013aca:	4691      	mov	r9, r2
 8013acc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013ad0:	f108 0601 	add.w	r6, r8, #1
 8013ad4:	42b3      	cmp	r3, r6
 8013ad6:	db0b      	blt.n	8013af0 <__lshift+0x38>
 8013ad8:	4638      	mov	r0, r7
 8013ada:	f7ff fddf 	bl	801369c <_Balloc>
 8013ade:	4605      	mov	r5, r0
 8013ae0:	b948      	cbnz	r0, 8013af6 <__lshift+0x3e>
 8013ae2:	4602      	mov	r2, r0
 8013ae4:	4b28      	ldr	r3, [pc, #160]	@ (8013b88 <__lshift+0xd0>)
 8013ae6:	4829      	ldr	r0, [pc, #164]	@ (8013b8c <__lshift+0xd4>)
 8013ae8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013aec:	f000 fb94 	bl	8014218 <__assert_func>
 8013af0:	3101      	adds	r1, #1
 8013af2:	005b      	lsls	r3, r3, #1
 8013af4:	e7ee      	b.n	8013ad4 <__lshift+0x1c>
 8013af6:	2300      	movs	r3, #0
 8013af8:	f100 0114 	add.w	r1, r0, #20
 8013afc:	f100 0210 	add.w	r2, r0, #16
 8013b00:	4618      	mov	r0, r3
 8013b02:	4553      	cmp	r3, sl
 8013b04:	db33      	blt.n	8013b6e <__lshift+0xb6>
 8013b06:	6920      	ldr	r0, [r4, #16]
 8013b08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013b0c:	f104 0314 	add.w	r3, r4, #20
 8013b10:	f019 091f 	ands.w	r9, r9, #31
 8013b14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013b18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013b1c:	d02b      	beq.n	8013b76 <__lshift+0xbe>
 8013b1e:	f1c9 0e20 	rsb	lr, r9, #32
 8013b22:	468a      	mov	sl, r1
 8013b24:	2200      	movs	r2, #0
 8013b26:	6818      	ldr	r0, [r3, #0]
 8013b28:	fa00 f009 	lsl.w	r0, r0, r9
 8013b2c:	4310      	orrs	r0, r2
 8013b2e:	f84a 0b04 	str.w	r0, [sl], #4
 8013b32:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b36:	459c      	cmp	ip, r3
 8013b38:	fa22 f20e 	lsr.w	r2, r2, lr
 8013b3c:	d8f3      	bhi.n	8013b26 <__lshift+0x6e>
 8013b3e:	ebac 0304 	sub.w	r3, ip, r4
 8013b42:	3b15      	subs	r3, #21
 8013b44:	f023 0303 	bic.w	r3, r3, #3
 8013b48:	3304      	adds	r3, #4
 8013b4a:	f104 0015 	add.w	r0, r4, #21
 8013b4e:	4584      	cmp	ip, r0
 8013b50:	bf38      	it	cc
 8013b52:	2304      	movcc	r3, #4
 8013b54:	50ca      	str	r2, [r1, r3]
 8013b56:	b10a      	cbz	r2, 8013b5c <__lshift+0xa4>
 8013b58:	f108 0602 	add.w	r6, r8, #2
 8013b5c:	3e01      	subs	r6, #1
 8013b5e:	4638      	mov	r0, r7
 8013b60:	612e      	str	r6, [r5, #16]
 8013b62:	4621      	mov	r1, r4
 8013b64:	f7ff fdda 	bl	801371c <_Bfree>
 8013b68:	4628      	mov	r0, r5
 8013b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8013b72:	3301      	adds	r3, #1
 8013b74:	e7c5      	b.n	8013b02 <__lshift+0x4a>
 8013b76:	3904      	subs	r1, #4
 8013b78:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8013b80:	459c      	cmp	ip, r3
 8013b82:	d8f9      	bhi.n	8013b78 <__lshift+0xc0>
 8013b84:	e7ea      	b.n	8013b5c <__lshift+0xa4>
 8013b86:	bf00      	nop
 8013b88:	0801542a 	.word	0x0801542a
 8013b8c:	0801543b 	.word	0x0801543b

08013b90 <__mcmp>:
 8013b90:	690a      	ldr	r2, [r1, #16]
 8013b92:	4603      	mov	r3, r0
 8013b94:	6900      	ldr	r0, [r0, #16]
 8013b96:	1a80      	subs	r0, r0, r2
 8013b98:	b530      	push	{r4, r5, lr}
 8013b9a:	d10e      	bne.n	8013bba <__mcmp+0x2a>
 8013b9c:	3314      	adds	r3, #20
 8013b9e:	3114      	adds	r1, #20
 8013ba0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013ba4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013ba8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013bac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013bb0:	4295      	cmp	r5, r2
 8013bb2:	d003      	beq.n	8013bbc <__mcmp+0x2c>
 8013bb4:	d205      	bcs.n	8013bc2 <__mcmp+0x32>
 8013bb6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013bba:	bd30      	pop	{r4, r5, pc}
 8013bbc:	42a3      	cmp	r3, r4
 8013bbe:	d3f3      	bcc.n	8013ba8 <__mcmp+0x18>
 8013bc0:	e7fb      	b.n	8013bba <__mcmp+0x2a>
 8013bc2:	2001      	movs	r0, #1
 8013bc4:	e7f9      	b.n	8013bba <__mcmp+0x2a>
	...

08013bc8 <__mdiff>:
 8013bc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bcc:	4689      	mov	r9, r1
 8013bce:	4606      	mov	r6, r0
 8013bd0:	4611      	mov	r1, r2
 8013bd2:	4648      	mov	r0, r9
 8013bd4:	4614      	mov	r4, r2
 8013bd6:	f7ff ffdb 	bl	8013b90 <__mcmp>
 8013bda:	1e05      	subs	r5, r0, #0
 8013bdc:	d112      	bne.n	8013c04 <__mdiff+0x3c>
 8013bde:	4629      	mov	r1, r5
 8013be0:	4630      	mov	r0, r6
 8013be2:	f7ff fd5b 	bl	801369c <_Balloc>
 8013be6:	4602      	mov	r2, r0
 8013be8:	b928      	cbnz	r0, 8013bf6 <__mdiff+0x2e>
 8013bea:	4b3f      	ldr	r3, [pc, #252]	@ (8013ce8 <__mdiff+0x120>)
 8013bec:	f240 2137 	movw	r1, #567	@ 0x237
 8013bf0:	483e      	ldr	r0, [pc, #248]	@ (8013cec <__mdiff+0x124>)
 8013bf2:	f000 fb11 	bl	8014218 <__assert_func>
 8013bf6:	2301      	movs	r3, #1
 8013bf8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013bfc:	4610      	mov	r0, r2
 8013bfe:	b003      	add	sp, #12
 8013c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c04:	bfbc      	itt	lt
 8013c06:	464b      	movlt	r3, r9
 8013c08:	46a1      	movlt	r9, r4
 8013c0a:	4630      	mov	r0, r6
 8013c0c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013c10:	bfba      	itte	lt
 8013c12:	461c      	movlt	r4, r3
 8013c14:	2501      	movlt	r5, #1
 8013c16:	2500      	movge	r5, #0
 8013c18:	f7ff fd40 	bl	801369c <_Balloc>
 8013c1c:	4602      	mov	r2, r0
 8013c1e:	b918      	cbnz	r0, 8013c28 <__mdiff+0x60>
 8013c20:	4b31      	ldr	r3, [pc, #196]	@ (8013ce8 <__mdiff+0x120>)
 8013c22:	f240 2145 	movw	r1, #581	@ 0x245
 8013c26:	e7e3      	b.n	8013bf0 <__mdiff+0x28>
 8013c28:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013c2c:	6926      	ldr	r6, [r4, #16]
 8013c2e:	60c5      	str	r5, [r0, #12]
 8013c30:	f109 0310 	add.w	r3, r9, #16
 8013c34:	f109 0514 	add.w	r5, r9, #20
 8013c38:	f104 0e14 	add.w	lr, r4, #20
 8013c3c:	f100 0b14 	add.w	fp, r0, #20
 8013c40:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013c44:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013c48:	9301      	str	r3, [sp, #4]
 8013c4a:	46d9      	mov	r9, fp
 8013c4c:	f04f 0c00 	mov.w	ip, #0
 8013c50:	9b01      	ldr	r3, [sp, #4]
 8013c52:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013c56:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013c5a:	9301      	str	r3, [sp, #4]
 8013c5c:	fa1f f38a 	uxth.w	r3, sl
 8013c60:	4619      	mov	r1, r3
 8013c62:	b283      	uxth	r3, r0
 8013c64:	1acb      	subs	r3, r1, r3
 8013c66:	0c00      	lsrs	r0, r0, #16
 8013c68:	4463      	add	r3, ip
 8013c6a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013c6e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013c72:	b29b      	uxth	r3, r3
 8013c74:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013c78:	4576      	cmp	r6, lr
 8013c7a:	f849 3b04 	str.w	r3, [r9], #4
 8013c7e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013c82:	d8e5      	bhi.n	8013c50 <__mdiff+0x88>
 8013c84:	1b33      	subs	r3, r6, r4
 8013c86:	3b15      	subs	r3, #21
 8013c88:	f023 0303 	bic.w	r3, r3, #3
 8013c8c:	3415      	adds	r4, #21
 8013c8e:	3304      	adds	r3, #4
 8013c90:	42a6      	cmp	r6, r4
 8013c92:	bf38      	it	cc
 8013c94:	2304      	movcc	r3, #4
 8013c96:	441d      	add	r5, r3
 8013c98:	445b      	add	r3, fp
 8013c9a:	461e      	mov	r6, r3
 8013c9c:	462c      	mov	r4, r5
 8013c9e:	4544      	cmp	r4, r8
 8013ca0:	d30e      	bcc.n	8013cc0 <__mdiff+0xf8>
 8013ca2:	f108 0103 	add.w	r1, r8, #3
 8013ca6:	1b49      	subs	r1, r1, r5
 8013ca8:	f021 0103 	bic.w	r1, r1, #3
 8013cac:	3d03      	subs	r5, #3
 8013cae:	45a8      	cmp	r8, r5
 8013cb0:	bf38      	it	cc
 8013cb2:	2100      	movcc	r1, #0
 8013cb4:	440b      	add	r3, r1
 8013cb6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013cba:	b191      	cbz	r1, 8013ce2 <__mdiff+0x11a>
 8013cbc:	6117      	str	r7, [r2, #16]
 8013cbe:	e79d      	b.n	8013bfc <__mdiff+0x34>
 8013cc0:	f854 1b04 	ldr.w	r1, [r4], #4
 8013cc4:	46e6      	mov	lr, ip
 8013cc6:	0c08      	lsrs	r0, r1, #16
 8013cc8:	fa1c fc81 	uxtah	ip, ip, r1
 8013ccc:	4471      	add	r1, lr
 8013cce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013cd2:	b289      	uxth	r1, r1
 8013cd4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013cd8:	f846 1b04 	str.w	r1, [r6], #4
 8013cdc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013ce0:	e7dd      	b.n	8013c9e <__mdiff+0xd6>
 8013ce2:	3f01      	subs	r7, #1
 8013ce4:	e7e7      	b.n	8013cb6 <__mdiff+0xee>
 8013ce6:	bf00      	nop
 8013ce8:	0801542a 	.word	0x0801542a
 8013cec:	0801543b 	.word	0x0801543b

08013cf0 <__d2b>:
 8013cf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013cf4:	460f      	mov	r7, r1
 8013cf6:	2101      	movs	r1, #1
 8013cf8:	ec59 8b10 	vmov	r8, r9, d0
 8013cfc:	4616      	mov	r6, r2
 8013cfe:	f7ff fccd 	bl	801369c <_Balloc>
 8013d02:	4604      	mov	r4, r0
 8013d04:	b930      	cbnz	r0, 8013d14 <__d2b+0x24>
 8013d06:	4602      	mov	r2, r0
 8013d08:	4b23      	ldr	r3, [pc, #140]	@ (8013d98 <__d2b+0xa8>)
 8013d0a:	4824      	ldr	r0, [pc, #144]	@ (8013d9c <__d2b+0xac>)
 8013d0c:	f240 310f 	movw	r1, #783	@ 0x30f
 8013d10:	f000 fa82 	bl	8014218 <__assert_func>
 8013d14:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013d18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013d1c:	b10d      	cbz	r5, 8013d22 <__d2b+0x32>
 8013d1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013d22:	9301      	str	r3, [sp, #4]
 8013d24:	f1b8 0300 	subs.w	r3, r8, #0
 8013d28:	d023      	beq.n	8013d72 <__d2b+0x82>
 8013d2a:	4668      	mov	r0, sp
 8013d2c:	9300      	str	r3, [sp, #0]
 8013d2e:	f7ff fd7c 	bl	801382a <__lo0bits>
 8013d32:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013d36:	b1d0      	cbz	r0, 8013d6e <__d2b+0x7e>
 8013d38:	f1c0 0320 	rsb	r3, r0, #32
 8013d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8013d40:	430b      	orrs	r3, r1
 8013d42:	40c2      	lsrs	r2, r0
 8013d44:	6163      	str	r3, [r4, #20]
 8013d46:	9201      	str	r2, [sp, #4]
 8013d48:	9b01      	ldr	r3, [sp, #4]
 8013d4a:	61a3      	str	r3, [r4, #24]
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	bf0c      	ite	eq
 8013d50:	2201      	moveq	r2, #1
 8013d52:	2202      	movne	r2, #2
 8013d54:	6122      	str	r2, [r4, #16]
 8013d56:	b1a5      	cbz	r5, 8013d82 <__d2b+0x92>
 8013d58:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013d5c:	4405      	add	r5, r0
 8013d5e:	603d      	str	r5, [r7, #0]
 8013d60:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013d64:	6030      	str	r0, [r6, #0]
 8013d66:	4620      	mov	r0, r4
 8013d68:	b003      	add	sp, #12
 8013d6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d6e:	6161      	str	r1, [r4, #20]
 8013d70:	e7ea      	b.n	8013d48 <__d2b+0x58>
 8013d72:	a801      	add	r0, sp, #4
 8013d74:	f7ff fd59 	bl	801382a <__lo0bits>
 8013d78:	9b01      	ldr	r3, [sp, #4]
 8013d7a:	6163      	str	r3, [r4, #20]
 8013d7c:	3020      	adds	r0, #32
 8013d7e:	2201      	movs	r2, #1
 8013d80:	e7e8      	b.n	8013d54 <__d2b+0x64>
 8013d82:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013d86:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013d8a:	6038      	str	r0, [r7, #0]
 8013d8c:	6918      	ldr	r0, [r3, #16]
 8013d8e:	f7ff fd2d 	bl	80137ec <__hi0bits>
 8013d92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013d96:	e7e5      	b.n	8013d64 <__d2b+0x74>
 8013d98:	0801542a 	.word	0x0801542a
 8013d9c:	0801543b 	.word	0x0801543b

08013da0 <__ssputs_r>:
 8013da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013da4:	688e      	ldr	r6, [r1, #8]
 8013da6:	461f      	mov	r7, r3
 8013da8:	42be      	cmp	r6, r7
 8013daa:	680b      	ldr	r3, [r1, #0]
 8013dac:	4682      	mov	sl, r0
 8013dae:	460c      	mov	r4, r1
 8013db0:	4690      	mov	r8, r2
 8013db2:	d82d      	bhi.n	8013e10 <__ssputs_r+0x70>
 8013db4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013db8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013dbc:	d026      	beq.n	8013e0c <__ssputs_r+0x6c>
 8013dbe:	6965      	ldr	r5, [r4, #20]
 8013dc0:	6909      	ldr	r1, [r1, #16]
 8013dc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013dc6:	eba3 0901 	sub.w	r9, r3, r1
 8013dca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013dce:	1c7b      	adds	r3, r7, #1
 8013dd0:	444b      	add	r3, r9
 8013dd2:	106d      	asrs	r5, r5, #1
 8013dd4:	429d      	cmp	r5, r3
 8013dd6:	bf38      	it	cc
 8013dd8:	461d      	movcc	r5, r3
 8013dda:	0553      	lsls	r3, r2, #21
 8013ddc:	d527      	bpl.n	8013e2e <__ssputs_r+0x8e>
 8013dde:	4629      	mov	r1, r5
 8013de0:	f7ff fbd0 	bl	8013584 <_malloc_r>
 8013de4:	4606      	mov	r6, r0
 8013de6:	b360      	cbz	r0, 8013e42 <__ssputs_r+0xa2>
 8013de8:	6921      	ldr	r1, [r4, #16]
 8013dea:	464a      	mov	r2, r9
 8013dec:	f000 fa06 	bl	80141fc <memcpy>
 8013df0:	89a3      	ldrh	r3, [r4, #12]
 8013df2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013df6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013dfa:	81a3      	strh	r3, [r4, #12]
 8013dfc:	6126      	str	r6, [r4, #16]
 8013dfe:	6165      	str	r5, [r4, #20]
 8013e00:	444e      	add	r6, r9
 8013e02:	eba5 0509 	sub.w	r5, r5, r9
 8013e06:	6026      	str	r6, [r4, #0]
 8013e08:	60a5      	str	r5, [r4, #8]
 8013e0a:	463e      	mov	r6, r7
 8013e0c:	42be      	cmp	r6, r7
 8013e0e:	d900      	bls.n	8013e12 <__ssputs_r+0x72>
 8013e10:	463e      	mov	r6, r7
 8013e12:	6820      	ldr	r0, [r4, #0]
 8013e14:	4632      	mov	r2, r6
 8013e16:	4641      	mov	r1, r8
 8013e18:	f000 f9c6 	bl	80141a8 <memmove>
 8013e1c:	68a3      	ldr	r3, [r4, #8]
 8013e1e:	1b9b      	subs	r3, r3, r6
 8013e20:	60a3      	str	r3, [r4, #8]
 8013e22:	6823      	ldr	r3, [r4, #0]
 8013e24:	4433      	add	r3, r6
 8013e26:	6023      	str	r3, [r4, #0]
 8013e28:	2000      	movs	r0, #0
 8013e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e2e:	462a      	mov	r2, r5
 8013e30:	f000 fa36 	bl	80142a0 <_realloc_r>
 8013e34:	4606      	mov	r6, r0
 8013e36:	2800      	cmp	r0, #0
 8013e38:	d1e0      	bne.n	8013dfc <__ssputs_r+0x5c>
 8013e3a:	6921      	ldr	r1, [r4, #16]
 8013e3c:	4650      	mov	r0, sl
 8013e3e:	f7ff fb2d 	bl	801349c <_free_r>
 8013e42:	230c      	movs	r3, #12
 8013e44:	f8ca 3000 	str.w	r3, [sl]
 8013e48:	89a3      	ldrh	r3, [r4, #12]
 8013e4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013e4e:	81a3      	strh	r3, [r4, #12]
 8013e50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013e54:	e7e9      	b.n	8013e2a <__ssputs_r+0x8a>
	...

08013e58 <_svfiprintf_r>:
 8013e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e5c:	4698      	mov	r8, r3
 8013e5e:	898b      	ldrh	r3, [r1, #12]
 8013e60:	061b      	lsls	r3, r3, #24
 8013e62:	b09d      	sub	sp, #116	@ 0x74
 8013e64:	4607      	mov	r7, r0
 8013e66:	460d      	mov	r5, r1
 8013e68:	4614      	mov	r4, r2
 8013e6a:	d510      	bpl.n	8013e8e <_svfiprintf_r+0x36>
 8013e6c:	690b      	ldr	r3, [r1, #16]
 8013e6e:	b973      	cbnz	r3, 8013e8e <_svfiprintf_r+0x36>
 8013e70:	2140      	movs	r1, #64	@ 0x40
 8013e72:	f7ff fb87 	bl	8013584 <_malloc_r>
 8013e76:	6028      	str	r0, [r5, #0]
 8013e78:	6128      	str	r0, [r5, #16]
 8013e7a:	b930      	cbnz	r0, 8013e8a <_svfiprintf_r+0x32>
 8013e7c:	230c      	movs	r3, #12
 8013e7e:	603b      	str	r3, [r7, #0]
 8013e80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013e84:	b01d      	add	sp, #116	@ 0x74
 8013e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e8a:	2340      	movs	r3, #64	@ 0x40
 8013e8c:	616b      	str	r3, [r5, #20]
 8013e8e:	2300      	movs	r3, #0
 8013e90:	9309      	str	r3, [sp, #36]	@ 0x24
 8013e92:	2320      	movs	r3, #32
 8013e94:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013e98:	f8cd 800c 	str.w	r8, [sp, #12]
 8013e9c:	2330      	movs	r3, #48	@ 0x30
 8013e9e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801403c <_svfiprintf_r+0x1e4>
 8013ea2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013ea6:	f04f 0901 	mov.w	r9, #1
 8013eaa:	4623      	mov	r3, r4
 8013eac:	469a      	mov	sl, r3
 8013eae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013eb2:	b10a      	cbz	r2, 8013eb8 <_svfiprintf_r+0x60>
 8013eb4:	2a25      	cmp	r2, #37	@ 0x25
 8013eb6:	d1f9      	bne.n	8013eac <_svfiprintf_r+0x54>
 8013eb8:	ebba 0b04 	subs.w	fp, sl, r4
 8013ebc:	d00b      	beq.n	8013ed6 <_svfiprintf_r+0x7e>
 8013ebe:	465b      	mov	r3, fp
 8013ec0:	4622      	mov	r2, r4
 8013ec2:	4629      	mov	r1, r5
 8013ec4:	4638      	mov	r0, r7
 8013ec6:	f7ff ff6b 	bl	8013da0 <__ssputs_r>
 8013eca:	3001      	adds	r0, #1
 8013ecc:	f000 80a7 	beq.w	801401e <_svfiprintf_r+0x1c6>
 8013ed0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013ed2:	445a      	add	r2, fp
 8013ed4:	9209      	str	r2, [sp, #36]	@ 0x24
 8013ed6:	f89a 3000 	ldrb.w	r3, [sl]
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	f000 809f 	beq.w	801401e <_svfiprintf_r+0x1c6>
 8013ee0:	2300      	movs	r3, #0
 8013ee2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013ee6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013eea:	f10a 0a01 	add.w	sl, sl, #1
 8013eee:	9304      	str	r3, [sp, #16]
 8013ef0:	9307      	str	r3, [sp, #28]
 8013ef2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013ef6:	931a      	str	r3, [sp, #104]	@ 0x68
 8013ef8:	4654      	mov	r4, sl
 8013efa:	2205      	movs	r2, #5
 8013efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f00:	484e      	ldr	r0, [pc, #312]	@ (801403c <_svfiprintf_r+0x1e4>)
 8013f02:	f7ec fa05 	bl	8000310 <memchr>
 8013f06:	9a04      	ldr	r2, [sp, #16]
 8013f08:	b9d8      	cbnz	r0, 8013f42 <_svfiprintf_r+0xea>
 8013f0a:	06d0      	lsls	r0, r2, #27
 8013f0c:	bf44      	itt	mi
 8013f0e:	2320      	movmi	r3, #32
 8013f10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013f14:	0711      	lsls	r1, r2, #28
 8013f16:	bf44      	itt	mi
 8013f18:	232b      	movmi	r3, #43	@ 0x2b
 8013f1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013f1e:	f89a 3000 	ldrb.w	r3, [sl]
 8013f22:	2b2a      	cmp	r3, #42	@ 0x2a
 8013f24:	d015      	beq.n	8013f52 <_svfiprintf_r+0xfa>
 8013f26:	9a07      	ldr	r2, [sp, #28]
 8013f28:	4654      	mov	r4, sl
 8013f2a:	2000      	movs	r0, #0
 8013f2c:	f04f 0c0a 	mov.w	ip, #10
 8013f30:	4621      	mov	r1, r4
 8013f32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013f36:	3b30      	subs	r3, #48	@ 0x30
 8013f38:	2b09      	cmp	r3, #9
 8013f3a:	d94b      	bls.n	8013fd4 <_svfiprintf_r+0x17c>
 8013f3c:	b1b0      	cbz	r0, 8013f6c <_svfiprintf_r+0x114>
 8013f3e:	9207      	str	r2, [sp, #28]
 8013f40:	e014      	b.n	8013f6c <_svfiprintf_r+0x114>
 8013f42:	eba0 0308 	sub.w	r3, r0, r8
 8013f46:	fa09 f303 	lsl.w	r3, r9, r3
 8013f4a:	4313      	orrs	r3, r2
 8013f4c:	9304      	str	r3, [sp, #16]
 8013f4e:	46a2      	mov	sl, r4
 8013f50:	e7d2      	b.n	8013ef8 <_svfiprintf_r+0xa0>
 8013f52:	9b03      	ldr	r3, [sp, #12]
 8013f54:	1d19      	adds	r1, r3, #4
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	9103      	str	r1, [sp, #12]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	bfbb      	ittet	lt
 8013f5e:	425b      	neglt	r3, r3
 8013f60:	f042 0202 	orrlt.w	r2, r2, #2
 8013f64:	9307      	strge	r3, [sp, #28]
 8013f66:	9307      	strlt	r3, [sp, #28]
 8013f68:	bfb8      	it	lt
 8013f6a:	9204      	strlt	r2, [sp, #16]
 8013f6c:	7823      	ldrb	r3, [r4, #0]
 8013f6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8013f70:	d10a      	bne.n	8013f88 <_svfiprintf_r+0x130>
 8013f72:	7863      	ldrb	r3, [r4, #1]
 8013f74:	2b2a      	cmp	r3, #42	@ 0x2a
 8013f76:	d132      	bne.n	8013fde <_svfiprintf_r+0x186>
 8013f78:	9b03      	ldr	r3, [sp, #12]
 8013f7a:	1d1a      	adds	r2, r3, #4
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	9203      	str	r2, [sp, #12]
 8013f80:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013f84:	3402      	adds	r4, #2
 8013f86:	9305      	str	r3, [sp, #20]
 8013f88:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801404c <_svfiprintf_r+0x1f4>
 8013f8c:	7821      	ldrb	r1, [r4, #0]
 8013f8e:	2203      	movs	r2, #3
 8013f90:	4650      	mov	r0, sl
 8013f92:	f7ec f9bd 	bl	8000310 <memchr>
 8013f96:	b138      	cbz	r0, 8013fa8 <_svfiprintf_r+0x150>
 8013f98:	9b04      	ldr	r3, [sp, #16]
 8013f9a:	eba0 000a 	sub.w	r0, r0, sl
 8013f9e:	2240      	movs	r2, #64	@ 0x40
 8013fa0:	4082      	lsls	r2, r0
 8013fa2:	4313      	orrs	r3, r2
 8013fa4:	3401      	adds	r4, #1
 8013fa6:	9304      	str	r3, [sp, #16]
 8013fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013fac:	4824      	ldr	r0, [pc, #144]	@ (8014040 <_svfiprintf_r+0x1e8>)
 8013fae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013fb2:	2206      	movs	r2, #6
 8013fb4:	f7ec f9ac 	bl	8000310 <memchr>
 8013fb8:	2800      	cmp	r0, #0
 8013fba:	d036      	beq.n	801402a <_svfiprintf_r+0x1d2>
 8013fbc:	4b21      	ldr	r3, [pc, #132]	@ (8014044 <_svfiprintf_r+0x1ec>)
 8013fbe:	bb1b      	cbnz	r3, 8014008 <_svfiprintf_r+0x1b0>
 8013fc0:	9b03      	ldr	r3, [sp, #12]
 8013fc2:	3307      	adds	r3, #7
 8013fc4:	f023 0307 	bic.w	r3, r3, #7
 8013fc8:	3308      	adds	r3, #8
 8013fca:	9303      	str	r3, [sp, #12]
 8013fcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013fce:	4433      	add	r3, r6
 8013fd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8013fd2:	e76a      	b.n	8013eaa <_svfiprintf_r+0x52>
 8013fd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8013fd8:	460c      	mov	r4, r1
 8013fda:	2001      	movs	r0, #1
 8013fdc:	e7a8      	b.n	8013f30 <_svfiprintf_r+0xd8>
 8013fde:	2300      	movs	r3, #0
 8013fe0:	3401      	adds	r4, #1
 8013fe2:	9305      	str	r3, [sp, #20]
 8013fe4:	4619      	mov	r1, r3
 8013fe6:	f04f 0c0a 	mov.w	ip, #10
 8013fea:	4620      	mov	r0, r4
 8013fec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013ff0:	3a30      	subs	r2, #48	@ 0x30
 8013ff2:	2a09      	cmp	r2, #9
 8013ff4:	d903      	bls.n	8013ffe <_svfiprintf_r+0x1a6>
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d0c6      	beq.n	8013f88 <_svfiprintf_r+0x130>
 8013ffa:	9105      	str	r1, [sp, #20]
 8013ffc:	e7c4      	b.n	8013f88 <_svfiprintf_r+0x130>
 8013ffe:	fb0c 2101 	mla	r1, ip, r1, r2
 8014002:	4604      	mov	r4, r0
 8014004:	2301      	movs	r3, #1
 8014006:	e7f0      	b.n	8013fea <_svfiprintf_r+0x192>
 8014008:	ab03      	add	r3, sp, #12
 801400a:	9300      	str	r3, [sp, #0]
 801400c:	462a      	mov	r2, r5
 801400e:	4b0e      	ldr	r3, [pc, #56]	@ (8014048 <_svfiprintf_r+0x1f0>)
 8014010:	a904      	add	r1, sp, #16
 8014012:	4638      	mov	r0, r7
 8014014:	f7fd fee8 	bl	8011de8 <_printf_float>
 8014018:	1c42      	adds	r2, r0, #1
 801401a:	4606      	mov	r6, r0
 801401c:	d1d6      	bne.n	8013fcc <_svfiprintf_r+0x174>
 801401e:	89ab      	ldrh	r3, [r5, #12]
 8014020:	065b      	lsls	r3, r3, #25
 8014022:	f53f af2d 	bmi.w	8013e80 <_svfiprintf_r+0x28>
 8014026:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014028:	e72c      	b.n	8013e84 <_svfiprintf_r+0x2c>
 801402a:	ab03      	add	r3, sp, #12
 801402c:	9300      	str	r3, [sp, #0]
 801402e:	462a      	mov	r2, r5
 8014030:	4b05      	ldr	r3, [pc, #20]	@ (8014048 <_svfiprintf_r+0x1f0>)
 8014032:	a904      	add	r1, sp, #16
 8014034:	4638      	mov	r0, r7
 8014036:	f7fe f95f 	bl	80122f8 <_printf_i>
 801403a:	e7ed      	b.n	8014018 <_svfiprintf_r+0x1c0>
 801403c:	08015590 	.word	0x08015590
 8014040:	0801559a 	.word	0x0801559a
 8014044:	08011de9 	.word	0x08011de9
 8014048:	08013da1 	.word	0x08013da1
 801404c:	08015596 	.word	0x08015596

08014050 <__sflush_r>:
 8014050:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014058:	0716      	lsls	r6, r2, #28
 801405a:	4605      	mov	r5, r0
 801405c:	460c      	mov	r4, r1
 801405e:	d454      	bmi.n	801410a <__sflush_r+0xba>
 8014060:	684b      	ldr	r3, [r1, #4]
 8014062:	2b00      	cmp	r3, #0
 8014064:	dc02      	bgt.n	801406c <__sflush_r+0x1c>
 8014066:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014068:	2b00      	cmp	r3, #0
 801406a:	dd48      	ble.n	80140fe <__sflush_r+0xae>
 801406c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801406e:	2e00      	cmp	r6, #0
 8014070:	d045      	beq.n	80140fe <__sflush_r+0xae>
 8014072:	2300      	movs	r3, #0
 8014074:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014078:	682f      	ldr	r7, [r5, #0]
 801407a:	6a21      	ldr	r1, [r4, #32]
 801407c:	602b      	str	r3, [r5, #0]
 801407e:	d030      	beq.n	80140e2 <__sflush_r+0x92>
 8014080:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014082:	89a3      	ldrh	r3, [r4, #12]
 8014084:	0759      	lsls	r1, r3, #29
 8014086:	d505      	bpl.n	8014094 <__sflush_r+0x44>
 8014088:	6863      	ldr	r3, [r4, #4]
 801408a:	1ad2      	subs	r2, r2, r3
 801408c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801408e:	b10b      	cbz	r3, 8014094 <__sflush_r+0x44>
 8014090:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014092:	1ad2      	subs	r2, r2, r3
 8014094:	2300      	movs	r3, #0
 8014096:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014098:	6a21      	ldr	r1, [r4, #32]
 801409a:	4628      	mov	r0, r5
 801409c:	47b0      	blx	r6
 801409e:	1c43      	adds	r3, r0, #1
 80140a0:	89a3      	ldrh	r3, [r4, #12]
 80140a2:	d106      	bne.n	80140b2 <__sflush_r+0x62>
 80140a4:	6829      	ldr	r1, [r5, #0]
 80140a6:	291d      	cmp	r1, #29
 80140a8:	d82b      	bhi.n	8014102 <__sflush_r+0xb2>
 80140aa:	4a2a      	ldr	r2, [pc, #168]	@ (8014154 <__sflush_r+0x104>)
 80140ac:	410a      	asrs	r2, r1
 80140ae:	07d6      	lsls	r6, r2, #31
 80140b0:	d427      	bmi.n	8014102 <__sflush_r+0xb2>
 80140b2:	2200      	movs	r2, #0
 80140b4:	6062      	str	r2, [r4, #4]
 80140b6:	04d9      	lsls	r1, r3, #19
 80140b8:	6922      	ldr	r2, [r4, #16]
 80140ba:	6022      	str	r2, [r4, #0]
 80140bc:	d504      	bpl.n	80140c8 <__sflush_r+0x78>
 80140be:	1c42      	adds	r2, r0, #1
 80140c0:	d101      	bne.n	80140c6 <__sflush_r+0x76>
 80140c2:	682b      	ldr	r3, [r5, #0]
 80140c4:	b903      	cbnz	r3, 80140c8 <__sflush_r+0x78>
 80140c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80140c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80140ca:	602f      	str	r7, [r5, #0]
 80140cc:	b1b9      	cbz	r1, 80140fe <__sflush_r+0xae>
 80140ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80140d2:	4299      	cmp	r1, r3
 80140d4:	d002      	beq.n	80140dc <__sflush_r+0x8c>
 80140d6:	4628      	mov	r0, r5
 80140d8:	f7ff f9e0 	bl	801349c <_free_r>
 80140dc:	2300      	movs	r3, #0
 80140de:	6363      	str	r3, [r4, #52]	@ 0x34
 80140e0:	e00d      	b.n	80140fe <__sflush_r+0xae>
 80140e2:	2301      	movs	r3, #1
 80140e4:	4628      	mov	r0, r5
 80140e6:	47b0      	blx	r6
 80140e8:	4602      	mov	r2, r0
 80140ea:	1c50      	adds	r0, r2, #1
 80140ec:	d1c9      	bne.n	8014082 <__sflush_r+0x32>
 80140ee:	682b      	ldr	r3, [r5, #0]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d0c6      	beq.n	8014082 <__sflush_r+0x32>
 80140f4:	2b1d      	cmp	r3, #29
 80140f6:	d001      	beq.n	80140fc <__sflush_r+0xac>
 80140f8:	2b16      	cmp	r3, #22
 80140fa:	d11e      	bne.n	801413a <__sflush_r+0xea>
 80140fc:	602f      	str	r7, [r5, #0]
 80140fe:	2000      	movs	r0, #0
 8014100:	e022      	b.n	8014148 <__sflush_r+0xf8>
 8014102:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014106:	b21b      	sxth	r3, r3
 8014108:	e01b      	b.n	8014142 <__sflush_r+0xf2>
 801410a:	690f      	ldr	r7, [r1, #16]
 801410c:	2f00      	cmp	r7, #0
 801410e:	d0f6      	beq.n	80140fe <__sflush_r+0xae>
 8014110:	0793      	lsls	r3, r2, #30
 8014112:	680e      	ldr	r6, [r1, #0]
 8014114:	bf08      	it	eq
 8014116:	694b      	ldreq	r3, [r1, #20]
 8014118:	600f      	str	r7, [r1, #0]
 801411a:	bf18      	it	ne
 801411c:	2300      	movne	r3, #0
 801411e:	eba6 0807 	sub.w	r8, r6, r7
 8014122:	608b      	str	r3, [r1, #8]
 8014124:	f1b8 0f00 	cmp.w	r8, #0
 8014128:	dde9      	ble.n	80140fe <__sflush_r+0xae>
 801412a:	6a21      	ldr	r1, [r4, #32]
 801412c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801412e:	4643      	mov	r3, r8
 8014130:	463a      	mov	r2, r7
 8014132:	4628      	mov	r0, r5
 8014134:	47b0      	blx	r6
 8014136:	2800      	cmp	r0, #0
 8014138:	dc08      	bgt.n	801414c <__sflush_r+0xfc>
 801413a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801413e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014142:	81a3      	strh	r3, [r4, #12]
 8014144:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801414c:	4407      	add	r7, r0
 801414e:	eba8 0800 	sub.w	r8, r8, r0
 8014152:	e7e7      	b.n	8014124 <__sflush_r+0xd4>
 8014154:	dfbffffe 	.word	0xdfbffffe

08014158 <_fflush_r>:
 8014158:	b538      	push	{r3, r4, r5, lr}
 801415a:	690b      	ldr	r3, [r1, #16]
 801415c:	4605      	mov	r5, r0
 801415e:	460c      	mov	r4, r1
 8014160:	b913      	cbnz	r3, 8014168 <_fflush_r+0x10>
 8014162:	2500      	movs	r5, #0
 8014164:	4628      	mov	r0, r5
 8014166:	bd38      	pop	{r3, r4, r5, pc}
 8014168:	b118      	cbz	r0, 8014172 <_fflush_r+0x1a>
 801416a:	6a03      	ldr	r3, [r0, #32]
 801416c:	b90b      	cbnz	r3, 8014172 <_fflush_r+0x1a>
 801416e:	f7fe fa6f 	bl	8012650 <__sinit>
 8014172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d0f3      	beq.n	8014162 <_fflush_r+0xa>
 801417a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801417c:	07d0      	lsls	r0, r2, #31
 801417e:	d404      	bmi.n	801418a <_fflush_r+0x32>
 8014180:	0599      	lsls	r1, r3, #22
 8014182:	d402      	bmi.n	801418a <_fflush_r+0x32>
 8014184:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014186:	f7fe fb9e 	bl	80128c6 <__retarget_lock_acquire_recursive>
 801418a:	4628      	mov	r0, r5
 801418c:	4621      	mov	r1, r4
 801418e:	f7ff ff5f 	bl	8014050 <__sflush_r>
 8014192:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014194:	07da      	lsls	r2, r3, #31
 8014196:	4605      	mov	r5, r0
 8014198:	d4e4      	bmi.n	8014164 <_fflush_r+0xc>
 801419a:	89a3      	ldrh	r3, [r4, #12]
 801419c:	059b      	lsls	r3, r3, #22
 801419e:	d4e1      	bmi.n	8014164 <_fflush_r+0xc>
 80141a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80141a2:	f7fe fb91 	bl	80128c8 <__retarget_lock_release_recursive>
 80141a6:	e7dd      	b.n	8014164 <_fflush_r+0xc>

080141a8 <memmove>:
 80141a8:	4288      	cmp	r0, r1
 80141aa:	b510      	push	{r4, lr}
 80141ac:	eb01 0402 	add.w	r4, r1, r2
 80141b0:	d902      	bls.n	80141b8 <memmove+0x10>
 80141b2:	4284      	cmp	r4, r0
 80141b4:	4623      	mov	r3, r4
 80141b6:	d807      	bhi.n	80141c8 <memmove+0x20>
 80141b8:	1e43      	subs	r3, r0, #1
 80141ba:	42a1      	cmp	r1, r4
 80141bc:	d008      	beq.n	80141d0 <memmove+0x28>
 80141be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80141c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80141c6:	e7f8      	b.n	80141ba <memmove+0x12>
 80141c8:	4402      	add	r2, r0
 80141ca:	4601      	mov	r1, r0
 80141cc:	428a      	cmp	r2, r1
 80141ce:	d100      	bne.n	80141d2 <memmove+0x2a>
 80141d0:	bd10      	pop	{r4, pc}
 80141d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80141d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80141da:	e7f7      	b.n	80141cc <memmove+0x24>

080141dc <_sbrk_r>:
 80141dc:	b538      	push	{r3, r4, r5, lr}
 80141de:	4d06      	ldr	r5, [pc, #24]	@ (80141f8 <_sbrk_r+0x1c>)
 80141e0:	2300      	movs	r3, #0
 80141e2:	4604      	mov	r4, r0
 80141e4:	4608      	mov	r0, r1
 80141e6:	602b      	str	r3, [r5, #0]
 80141e8:	f7f0 fc1c 	bl	8004a24 <_sbrk>
 80141ec:	1c43      	adds	r3, r0, #1
 80141ee:	d102      	bne.n	80141f6 <_sbrk_r+0x1a>
 80141f0:	682b      	ldr	r3, [r5, #0]
 80141f2:	b103      	cbz	r3, 80141f6 <_sbrk_r+0x1a>
 80141f4:	6023      	str	r3, [r4, #0]
 80141f6:	bd38      	pop	{r3, r4, r5, pc}
 80141f8:	24001200 	.word	0x24001200

080141fc <memcpy>:
 80141fc:	440a      	add	r2, r1
 80141fe:	4291      	cmp	r1, r2
 8014200:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8014204:	d100      	bne.n	8014208 <memcpy+0xc>
 8014206:	4770      	bx	lr
 8014208:	b510      	push	{r4, lr}
 801420a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801420e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014212:	4291      	cmp	r1, r2
 8014214:	d1f9      	bne.n	801420a <memcpy+0xe>
 8014216:	bd10      	pop	{r4, pc}

08014218 <__assert_func>:
 8014218:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801421a:	4614      	mov	r4, r2
 801421c:	461a      	mov	r2, r3
 801421e:	4b09      	ldr	r3, [pc, #36]	@ (8014244 <__assert_func+0x2c>)
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	4605      	mov	r5, r0
 8014224:	68d8      	ldr	r0, [r3, #12]
 8014226:	b954      	cbnz	r4, 801423e <__assert_func+0x26>
 8014228:	4b07      	ldr	r3, [pc, #28]	@ (8014248 <__assert_func+0x30>)
 801422a:	461c      	mov	r4, r3
 801422c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014230:	9100      	str	r1, [sp, #0]
 8014232:	462b      	mov	r3, r5
 8014234:	4905      	ldr	r1, [pc, #20]	@ (801424c <__assert_func+0x34>)
 8014236:	f000 f86f 	bl	8014318 <fiprintf>
 801423a:	f000 f87f 	bl	801433c <abort>
 801423e:	4b04      	ldr	r3, [pc, #16]	@ (8014250 <__assert_func+0x38>)
 8014240:	e7f4      	b.n	801422c <__assert_func+0x14>
 8014242:	bf00      	nop
 8014244:	24000054 	.word	0x24000054
 8014248:	080155e6 	.word	0x080155e6
 801424c:	080155b8 	.word	0x080155b8
 8014250:	080155ab 	.word	0x080155ab

08014254 <_calloc_r>:
 8014254:	b570      	push	{r4, r5, r6, lr}
 8014256:	fba1 5402 	umull	r5, r4, r1, r2
 801425a:	b93c      	cbnz	r4, 801426c <_calloc_r+0x18>
 801425c:	4629      	mov	r1, r5
 801425e:	f7ff f991 	bl	8013584 <_malloc_r>
 8014262:	4606      	mov	r6, r0
 8014264:	b928      	cbnz	r0, 8014272 <_calloc_r+0x1e>
 8014266:	2600      	movs	r6, #0
 8014268:	4630      	mov	r0, r6
 801426a:	bd70      	pop	{r4, r5, r6, pc}
 801426c:	220c      	movs	r2, #12
 801426e:	6002      	str	r2, [r0, #0]
 8014270:	e7f9      	b.n	8014266 <_calloc_r+0x12>
 8014272:	462a      	mov	r2, r5
 8014274:	4621      	mov	r1, r4
 8014276:	f7fe fa84 	bl	8012782 <memset>
 801427a:	e7f5      	b.n	8014268 <_calloc_r+0x14>

0801427c <__ascii_mbtowc>:
 801427c:	b082      	sub	sp, #8
 801427e:	b901      	cbnz	r1, 8014282 <__ascii_mbtowc+0x6>
 8014280:	a901      	add	r1, sp, #4
 8014282:	b142      	cbz	r2, 8014296 <__ascii_mbtowc+0x1a>
 8014284:	b14b      	cbz	r3, 801429a <__ascii_mbtowc+0x1e>
 8014286:	7813      	ldrb	r3, [r2, #0]
 8014288:	600b      	str	r3, [r1, #0]
 801428a:	7812      	ldrb	r2, [r2, #0]
 801428c:	1e10      	subs	r0, r2, #0
 801428e:	bf18      	it	ne
 8014290:	2001      	movne	r0, #1
 8014292:	b002      	add	sp, #8
 8014294:	4770      	bx	lr
 8014296:	4610      	mov	r0, r2
 8014298:	e7fb      	b.n	8014292 <__ascii_mbtowc+0x16>
 801429a:	f06f 0001 	mvn.w	r0, #1
 801429e:	e7f8      	b.n	8014292 <__ascii_mbtowc+0x16>

080142a0 <_realloc_r>:
 80142a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142a4:	4680      	mov	r8, r0
 80142a6:	4615      	mov	r5, r2
 80142a8:	460c      	mov	r4, r1
 80142aa:	b921      	cbnz	r1, 80142b6 <_realloc_r+0x16>
 80142ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80142b0:	4611      	mov	r1, r2
 80142b2:	f7ff b967 	b.w	8013584 <_malloc_r>
 80142b6:	b92a      	cbnz	r2, 80142c4 <_realloc_r+0x24>
 80142b8:	f7ff f8f0 	bl	801349c <_free_r>
 80142bc:	2400      	movs	r4, #0
 80142be:	4620      	mov	r0, r4
 80142c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142c4:	f000 f841 	bl	801434a <_malloc_usable_size_r>
 80142c8:	4285      	cmp	r5, r0
 80142ca:	4606      	mov	r6, r0
 80142cc:	d802      	bhi.n	80142d4 <_realloc_r+0x34>
 80142ce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80142d2:	d8f4      	bhi.n	80142be <_realloc_r+0x1e>
 80142d4:	4629      	mov	r1, r5
 80142d6:	4640      	mov	r0, r8
 80142d8:	f7ff f954 	bl	8013584 <_malloc_r>
 80142dc:	4607      	mov	r7, r0
 80142de:	2800      	cmp	r0, #0
 80142e0:	d0ec      	beq.n	80142bc <_realloc_r+0x1c>
 80142e2:	42b5      	cmp	r5, r6
 80142e4:	462a      	mov	r2, r5
 80142e6:	4621      	mov	r1, r4
 80142e8:	bf28      	it	cs
 80142ea:	4632      	movcs	r2, r6
 80142ec:	f7ff ff86 	bl	80141fc <memcpy>
 80142f0:	4621      	mov	r1, r4
 80142f2:	4640      	mov	r0, r8
 80142f4:	f7ff f8d2 	bl	801349c <_free_r>
 80142f8:	463c      	mov	r4, r7
 80142fa:	e7e0      	b.n	80142be <_realloc_r+0x1e>

080142fc <__ascii_wctomb>:
 80142fc:	4603      	mov	r3, r0
 80142fe:	4608      	mov	r0, r1
 8014300:	b141      	cbz	r1, 8014314 <__ascii_wctomb+0x18>
 8014302:	2aff      	cmp	r2, #255	@ 0xff
 8014304:	d904      	bls.n	8014310 <__ascii_wctomb+0x14>
 8014306:	228a      	movs	r2, #138	@ 0x8a
 8014308:	601a      	str	r2, [r3, #0]
 801430a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801430e:	4770      	bx	lr
 8014310:	700a      	strb	r2, [r1, #0]
 8014312:	2001      	movs	r0, #1
 8014314:	4770      	bx	lr
	...

08014318 <fiprintf>:
 8014318:	b40e      	push	{r1, r2, r3}
 801431a:	b503      	push	{r0, r1, lr}
 801431c:	4601      	mov	r1, r0
 801431e:	ab03      	add	r3, sp, #12
 8014320:	4805      	ldr	r0, [pc, #20]	@ (8014338 <fiprintf+0x20>)
 8014322:	f853 2b04 	ldr.w	r2, [r3], #4
 8014326:	6800      	ldr	r0, [r0, #0]
 8014328:	9301      	str	r3, [sp, #4]
 801432a:	f000 f83f 	bl	80143ac <_vfiprintf_r>
 801432e:	b002      	add	sp, #8
 8014330:	f85d eb04 	ldr.w	lr, [sp], #4
 8014334:	b003      	add	sp, #12
 8014336:	4770      	bx	lr
 8014338:	24000054 	.word	0x24000054

0801433c <abort>:
 801433c:	b508      	push	{r3, lr}
 801433e:	2006      	movs	r0, #6
 8014340:	f000 fa08 	bl	8014754 <raise>
 8014344:	2001      	movs	r0, #1
 8014346:	f7f0 faf5 	bl	8004934 <_exit>

0801434a <_malloc_usable_size_r>:
 801434a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801434e:	1f18      	subs	r0, r3, #4
 8014350:	2b00      	cmp	r3, #0
 8014352:	bfbc      	itt	lt
 8014354:	580b      	ldrlt	r3, [r1, r0]
 8014356:	18c0      	addlt	r0, r0, r3
 8014358:	4770      	bx	lr

0801435a <__sfputc_r>:
 801435a:	6893      	ldr	r3, [r2, #8]
 801435c:	3b01      	subs	r3, #1
 801435e:	2b00      	cmp	r3, #0
 8014360:	b410      	push	{r4}
 8014362:	6093      	str	r3, [r2, #8]
 8014364:	da08      	bge.n	8014378 <__sfputc_r+0x1e>
 8014366:	6994      	ldr	r4, [r2, #24]
 8014368:	42a3      	cmp	r3, r4
 801436a:	db01      	blt.n	8014370 <__sfputc_r+0x16>
 801436c:	290a      	cmp	r1, #10
 801436e:	d103      	bne.n	8014378 <__sfputc_r+0x1e>
 8014370:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014374:	f000 b932 	b.w	80145dc <__swbuf_r>
 8014378:	6813      	ldr	r3, [r2, #0]
 801437a:	1c58      	adds	r0, r3, #1
 801437c:	6010      	str	r0, [r2, #0]
 801437e:	7019      	strb	r1, [r3, #0]
 8014380:	4608      	mov	r0, r1
 8014382:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014386:	4770      	bx	lr

08014388 <__sfputs_r>:
 8014388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801438a:	4606      	mov	r6, r0
 801438c:	460f      	mov	r7, r1
 801438e:	4614      	mov	r4, r2
 8014390:	18d5      	adds	r5, r2, r3
 8014392:	42ac      	cmp	r4, r5
 8014394:	d101      	bne.n	801439a <__sfputs_r+0x12>
 8014396:	2000      	movs	r0, #0
 8014398:	e007      	b.n	80143aa <__sfputs_r+0x22>
 801439a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801439e:	463a      	mov	r2, r7
 80143a0:	4630      	mov	r0, r6
 80143a2:	f7ff ffda 	bl	801435a <__sfputc_r>
 80143a6:	1c43      	adds	r3, r0, #1
 80143a8:	d1f3      	bne.n	8014392 <__sfputs_r+0xa>
 80143aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080143ac <_vfiprintf_r>:
 80143ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143b0:	460d      	mov	r5, r1
 80143b2:	b09d      	sub	sp, #116	@ 0x74
 80143b4:	4614      	mov	r4, r2
 80143b6:	4698      	mov	r8, r3
 80143b8:	4606      	mov	r6, r0
 80143ba:	b118      	cbz	r0, 80143c4 <_vfiprintf_r+0x18>
 80143bc:	6a03      	ldr	r3, [r0, #32]
 80143be:	b90b      	cbnz	r3, 80143c4 <_vfiprintf_r+0x18>
 80143c0:	f7fe f946 	bl	8012650 <__sinit>
 80143c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80143c6:	07d9      	lsls	r1, r3, #31
 80143c8:	d405      	bmi.n	80143d6 <_vfiprintf_r+0x2a>
 80143ca:	89ab      	ldrh	r3, [r5, #12]
 80143cc:	059a      	lsls	r2, r3, #22
 80143ce:	d402      	bmi.n	80143d6 <_vfiprintf_r+0x2a>
 80143d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80143d2:	f7fe fa78 	bl	80128c6 <__retarget_lock_acquire_recursive>
 80143d6:	89ab      	ldrh	r3, [r5, #12]
 80143d8:	071b      	lsls	r3, r3, #28
 80143da:	d501      	bpl.n	80143e0 <_vfiprintf_r+0x34>
 80143dc:	692b      	ldr	r3, [r5, #16]
 80143de:	b99b      	cbnz	r3, 8014408 <_vfiprintf_r+0x5c>
 80143e0:	4629      	mov	r1, r5
 80143e2:	4630      	mov	r0, r6
 80143e4:	f000 f938 	bl	8014658 <__swsetup_r>
 80143e8:	b170      	cbz	r0, 8014408 <_vfiprintf_r+0x5c>
 80143ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80143ec:	07dc      	lsls	r4, r3, #31
 80143ee:	d504      	bpl.n	80143fa <_vfiprintf_r+0x4e>
 80143f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80143f4:	b01d      	add	sp, #116	@ 0x74
 80143f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143fa:	89ab      	ldrh	r3, [r5, #12]
 80143fc:	0598      	lsls	r0, r3, #22
 80143fe:	d4f7      	bmi.n	80143f0 <_vfiprintf_r+0x44>
 8014400:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014402:	f7fe fa61 	bl	80128c8 <__retarget_lock_release_recursive>
 8014406:	e7f3      	b.n	80143f0 <_vfiprintf_r+0x44>
 8014408:	2300      	movs	r3, #0
 801440a:	9309      	str	r3, [sp, #36]	@ 0x24
 801440c:	2320      	movs	r3, #32
 801440e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014412:	f8cd 800c 	str.w	r8, [sp, #12]
 8014416:	2330      	movs	r3, #48	@ 0x30
 8014418:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80145c8 <_vfiprintf_r+0x21c>
 801441c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014420:	f04f 0901 	mov.w	r9, #1
 8014424:	4623      	mov	r3, r4
 8014426:	469a      	mov	sl, r3
 8014428:	f813 2b01 	ldrb.w	r2, [r3], #1
 801442c:	b10a      	cbz	r2, 8014432 <_vfiprintf_r+0x86>
 801442e:	2a25      	cmp	r2, #37	@ 0x25
 8014430:	d1f9      	bne.n	8014426 <_vfiprintf_r+0x7a>
 8014432:	ebba 0b04 	subs.w	fp, sl, r4
 8014436:	d00b      	beq.n	8014450 <_vfiprintf_r+0xa4>
 8014438:	465b      	mov	r3, fp
 801443a:	4622      	mov	r2, r4
 801443c:	4629      	mov	r1, r5
 801443e:	4630      	mov	r0, r6
 8014440:	f7ff ffa2 	bl	8014388 <__sfputs_r>
 8014444:	3001      	adds	r0, #1
 8014446:	f000 80a7 	beq.w	8014598 <_vfiprintf_r+0x1ec>
 801444a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801444c:	445a      	add	r2, fp
 801444e:	9209      	str	r2, [sp, #36]	@ 0x24
 8014450:	f89a 3000 	ldrb.w	r3, [sl]
 8014454:	2b00      	cmp	r3, #0
 8014456:	f000 809f 	beq.w	8014598 <_vfiprintf_r+0x1ec>
 801445a:	2300      	movs	r3, #0
 801445c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014460:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014464:	f10a 0a01 	add.w	sl, sl, #1
 8014468:	9304      	str	r3, [sp, #16]
 801446a:	9307      	str	r3, [sp, #28]
 801446c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014470:	931a      	str	r3, [sp, #104]	@ 0x68
 8014472:	4654      	mov	r4, sl
 8014474:	2205      	movs	r2, #5
 8014476:	f814 1b01 	ldrb.w	r1, [r4], #1
 801447a:	4853      	ldr	r0, [pc, #332]	@ (80145c8 <_vfiprintf_r+0x21c>)
 801447c:	f7eb ff48 	bl	8000310 <memchr>
 8014480:	9a04      	ldr	r2, [sp, #16]
 8014482:	b9d8      	cbnz	r0, 80144bc <_vfiprintf_r+0x110>
 8014484:	06d1      	lsls	r1, r2, #27
 8014486:	bf44      	itt	mi
 8014488:	2320      	movmi	r3, #32
 801448a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801448e:	0713      	lsls	r3, r2, #28
 8014490:	bf44      	itt	mi
 8014492:	232b      	movmi	r3, #43	@ 0x2b
 8014494:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014498:	f89a 3000 	ldrb.w	r3, [sl]
 801449c:	2b2a      	cmp	r3, #42	@ 0x2a
 801449e:	d015      	beq.n	80144cc <_vfiprintf_r+0x120>
 80144a0:	9a07      	ldr	r2, [sp, #28]
 80144a2:	4654      	mov	r4, sl
 80144a4:	2000      	movs	r0, #0
 80144a6:	f04f 0c0a 	mov.w	ip, #10
 80144aa:	4621      	mov	r1, r4
 80144ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80144b0:	3b30      	subs	r3, #48	@ 0x30
 80144b2:	2b09      	cmp	r3, #9
 80144b4:	d94b      	bls.n	801454e <_vfiprintf_r+0x1a2>
 80144b6:	b1b0      	cbz	r0, 80144e6 <_vfiprintf_r+0x13a>
 80144b8:	9207      	str	r2, [sp, #28]
 80144ba:	e014      	b.n	80144e6 <_vfiprintf_r+0x13a>
 80144bc:	eba0 0308 	sub.w	r3, r0, r8
 80144c0:	fa09 f303 	lsl.w	r3, r9, r3
 80144c4:	4313      	orrs	r3, r2
 80144c6:	9304      	str	r3, [sp, #16]
 80144c8:	46a2      	mov	sl, r4
 80144ca:	e7d2      	b.n	8014472 <_vfiprintf_r+0xc6>
 80144cc:	9b03      	ldr	r3, [sp, #12]
 80144ce:	1d19      	adds	r1, r3, #4
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	9103      	str	r1, [sp, #12]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	bfbb      	ittet	lt
 80144d8:	425b      	neglt	r3, r3
 80144da:	f042 0202 	orrlt.w	r2, r2, #2
 80144de:	9307      	strge	r3, [sp, #28]
 80144e0:	9307      	strlt	r3, [sp, #28]
 80144e2:	bfb8      	it	lt
 80144e4:	9204      	strlt	r2, [sp, #16]
 80144e6:	7823      	ldrb	r3, [r4, #0]
 80144e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80144ea:	d10a      	bne.n	8014502 <_vfiprintf_r+0x156>
 80144ec:	7863      	ldrb	r3, [r4, #1]
 80144ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80144f0:	d132      	bne.n	8014558 <_vfiprintf_r+0x1ac>
 80144f2:	9b03      	ldr	r3, [sp, #12]
 80144f4:	1d1a      	adds	r2, r3, #4
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	9203      	str	r2, [sp, #12]
 80144fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80144fe:	3402      	adds	r4, #2
 8014500:	9305      	str	r3, [sp, #20]
 8014502:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80145d8 <_vfiprintf_r+0x22c>
 8014506:	7821      	ldrb	r1, [r4, #0]
 8014508:	2203      	movs	r2, #3
 801450a:	4650      	mov	r0, sl
 801450c:	f7eb ff00 	bl	8000310 <memchr>
 8014510:	b138      	cbz	r0, 8014522 <_vfiprintf_r+0x176>
 8014512:	9b04      	ldr	r3, [sp, #16]
 8014514:	eba0 000a 	sub.w	r0, r0, sl
 8014518:	2240      	movs	r2, #64	@ 0x40
 801451a:	4082      	lsls	r2, r0
 801451c:	4313      	orrs	r3, r2
 801451e:	3401      	adds	r4, #1
 8014520:	9304      	str	r3, [sp, #16]
 8014522:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014526:	4829      	ldr	r0, [pc, #164]	@ (80145cc <_vfiprintf_r+0x220>)
 8014528:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801452c:	2206      	movs	r2, #6
 801452e:	f7eb feef 	bl	8000310 <memchr>
 8014532:	2800      	cmp	r0, #0
 8014534:	d03f      	beq.n	80145b6 <_vfiprintf_r+0x20a>
 8014536:	4b26      	ldr	r3, [pc, #152]	@ (80145d0 <_vfiprintf_r+0x224>)
 8014538:	bb1b      	cbnz	r3, 8014582 <_vfiprintf_r+0x1d6>
 801453a:	9b03      	ldr	r3, [sp, #12]
 801453c:	3307      	adds	r3, #7
 801453e:	f023 0307 	bic.w	r3, r3, #7
 8014542:	3308      	adds	r3, #8
 8014544:	9303      	str	r3, [sp, #12]
 8014546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014548:	443b      	add	r3, r7
 801454a:	9309      	str	r3, [sp, #36]	@ 0x24
 801454c:	e76a      	b.n	8014424 <_vfiprintf_r+0x78>
 801454e:	fb0c 3202 	mla	r2, ip, r2, r3
 8014552:	460c      	mov	r4, r1
 8014554:	2001      	movs	r0, #1
 8014556:	e7a8      	b.n	80144aa <_vfiprintf_r+0xfe>
 8014558:	2300      	movs	r3, #0
 801455a:	3401      	adds	r4, #1
 801455c:	9305      	str	r3, [sp, #20]
 801455e:	4619      	mov	r1, r3
 8014560:	f04f 0c0a 	mov.w	ip, #10
 8014564:	4620      	mov	r0, r4
 8014566:	f810 2b01 	ldrb.w	r2, [r0], #1
 801456a:	3a30      	subs	r2, #48	@ 0x30
 801456c:	2a09      	cmp	r2, #9
 801456e:	d903      	bls.n	8014578 <_vfiprintf_r+0x1cc>
 8014570:	2b00      	cmp	r3, #0
 8014572:	d0c6      	beq.n	8014502 <_vfiprintf_r+0x156>
 8014574:	9105      	str	r1, [sp, #20]
 8014576:	e7c4      	b.n	8014502 <_vfiprintf_r+0x156>
 8014578:	fb0c 2101 	mla	r1, ip, r1, r2
 801457c:	4604      	mov	r4, r0
 801457e:	2301      	movs	r3, #1
 8014580:	e7f0      	b.n	8014564 <_vfiprintf_r+0x1b8>
 8014582:	ab03      	add	r3, sp, #12
 8014584:	9300      	str	r3, [sp, #0]
 8014586:	462a      	mov	r2, r5
 8014588:	4b12      	ldr	r3, [pc, #72]	@ (80145d4 <_vfiprintf_r+0x228>)
 801458a:	a904      	add	r1, sp, #16
 801458c:	4630      	mov	r0, r6
 801458e:	f7fd fc2b 	bl	8011de8 <_printf_float>
 8014592:	4607      	mov	r7, r0
 8014594:	1c78      	adds	r0, r7, #1
 8014596:	d1d6      	bne.n	8014546 <_vfiprintf_r+0x19a>
 8014598:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801459a:	07d9      	lsls	r1, r3, #31
 801459c:	d405      	bmi.n	80145aa <_vfiprintf_r+0x1fe>
 801459e:	89ab      	ldrh	r3, [r5, #12]
 80145a0:	059a      	lsls	r2, r3, #22
 80145a2:	d402      	bmi.n	80145aa <_vfiprintf_r+0x1fe>
 80145a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80145a6:	f7fe f98f 	bl	80128c8 <__retarget_lock_release_recursive>
 80145aa:	89ab      	ldrh	r3, [r5, #12]
 80145ac:	065b      	lsls	r3, r3, #25
 80145ae:	f53f af1f 	bmi.w	80143f0 <_vfiprintf_r+0x44>
 80145b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80145b4:	e71e      	b.n	80143f4 <_vfiprintf_r+0x48>
 80145b6:	ab03      	add	r3, sp, #12
 80145b8:	9300      	str	r3, [sp, #0]
 80145ba:	462a      	mov	r2, r5
 80145bc:	4b05      	ldr	r3, [pc, #20]	@ (80145d4 <_vfiprintf_r+0x228>)
 80145be:	a904      	add	r1, sp, #16
 80145c0:	4630      	mov	r0, r6
 80145c2:	f7fd fe99 	bl	80122f8 <_printf_i>
 80145c6:	e7e4      	b.n	8014592 <_vfiprintf_r+0x1e6>
 80145c8:	08015590 	.word	0x08015590
 80145cc:	0801559a 	.word	0x0801559a
 80145d0:	08011de9 	.word	0x08011de9
 80145d4:	08014389 	.word	0x08014389
 80145d8:	08015596 	.word	0x08015596

080145dc <__swbuf_r>:
 80145dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145de:	460e      	mov	r6, r1
 80145e0:	4614      	mov	r4, r2
 80145e2:	4605      	mov	r5, r0
 80145e4:	b118      	cbz	r0, 80145ee <__swbuf_r+0x12>
 80145e6:	6a03      	ldr	r3, [r0, #32]
 80145e8:	b90b      	cbnz	r3, 80145ee <__swbuf_r+0x12>
 80145ea:	f7fe f831 	bl	8012650 <__sinit>
 80145ee:	69a3      	ldr	r3, [r4, #24]
 80145f0:	60a3      	str	r3, [r4, #8]
 80145f2:	89a3      	ldrh	r3, [r4, #12]
 80145f4:	071a      	lsls	r2, r3, #28
 80145f6:	d501      	bpl.n	80145fc <__swbuf_r+0x20>
 80145f8:	6923      	ldr	r3, [r4, #16]
 80145fa:	b943      	cbnz	r3, 801460e <__swbuf_r+0x32>
 80145fc:	4621      	mov	r1, r4
 80145fe:	4628      	mov	r0, r5
 8014600:	f000 f82a 	bl	8014658 <__swsetup_r>
 8014604:	b118      	cbz	r0, 801460e <__swbuf_r+0x32>
 8014606:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801460a:	4638      	mov	r0, r7
 801460c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801460e:	6823      	ldr	r3, [r4, #0]
 8014610:	6922      	ldr	r2, [r4, #16]
 8014612:	1a98      	subs	r0, r3, r2
 8014614:	6963      	ldr	r3, [r4, #20]
 8014616:	b2f6      	uxtb	r6, r6
 8014618:	4283      	cmp	r3, r0
 801461a:	4637      	mov	r7, r6
 801461c:	dc05      	bgt.n	801462a <__swbuf_r+0x4e>
 801461e:	4621      	mov	r1, r4
 8014620:	4628      	mov	r0, r5
 8014622:	f7ff fd99 	bl	8014158 <_fflush_r>
 8014626:	2800      	cmp	r0, #0
 8014628:	d1ed      	bne.n	8014606 <__swbuf_r+0x2a>
 801462a:	68a3      	ldr	r3, [r4, #8]
 801462c:	3b01      	subs	r3, #1
 801462e:	60a3      	str	r3, [r4, #8]
 8014630:	6823      	ldr	r3, [r4, #0]
 8014632:	1c5a      	adds	r2, r3, #1
 8014634:	6022      	str	r2, [r4, #0]
 8014636:	701e      	strb	r6, [r3, #0]
 8014638:	6962      	ldr	r2, [r4, #20]
 801463a:	1c43      	adds	r3, r0, #1
 801463c:	429a      	cmp	r2, r3
 801463e:	d004      	beq.n	801464a <__swbuf_r+0x6e>
 8014640:	89a3      	ldrh	r3, [r4, #12]
 8014642:	07db      	lsls	r3, r3, #31
 8014644:	d5e1      	bpl.n	801460a <__swbuf_r+0x2e>
 8014646:	2e0a      	cmp	r6, #10
 8014648:	d1df      	bne.n	801460a <__swbuf_r+0x2e>
 801464a:	4621      	mov	r1, r4
 801464c:	4628      	mov	r0, r5
 801464e:	f7ff fd83 	bl	8014158 <_fflush_r>
 8014652:	2800      	cmp	r0, #0
 8014654:	d0d9      	beq.n	801460a <__swbuf_r+0x2e>
 8014656:	e7d6      	b.n	8014606 <__swbuf_r+0x2a>

08014658 <__swsetup_r>:
 8014658:	b538      	push	{r3, r4, r5, lr}
 801465a:	4b29      	ldr	r3, [pc, #164]	@ (8014700 <__swsetup_r+0xa8>)
 801465c:	4605      	mov	r5, r0
 801465e:	6818      	ldr	r0, [r3, #0]
 8014660:	460c      	mov	r4, r1
 8014662:	b118      	cbz	r0, 801466c <__swsetup_r+0x14>
 8014664:	6a03      	ldr	r3, [r0, #32]
 8014666:	b90b      	cbnz	r3, 801466c <__swsetup_r+0x14>
 8014668:	f7fd fff2 	bl	8012650 <__sinit>
 801466c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014670:	0719      	lsls	r1, r3, #28
 8014672:	d422      	bmi.n	80146ba <__swsetup_r+0x62>
 8014674:	06da      	lsls	r2, r3, #27
 8014676:	d407      	bmi.n	8014688 <__swsetup_r+0x30>
 8014678:	2209      	movs	r2, #9
 801467a:	602a      	str	r2, [r5, #0]
 801467c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014680:	81a3      	strh	r3, [r4, #12]
 8014682:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014686:	e033      	b.n	80146f0 <__swsetup_r+0x98>
 8014688:	0758      	lsls	r0, r3, #29
 801468a:	d512      	bpl.n	80146b2 <__swsetup_r+0x5a>
 801468c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801468e:	b141      	cbz	r1, 80146a2 <__swsetup_r+0x4a>
 8014690:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014694:	4299      	cmp	r1, r3
 8014696:	d002      	beq.n	801469e <__swsetup_r+0x46>
 8014698:	4628      	mov	r0, r5
 801469a:	f7fe feff 	bl	801349c <_free_r>
 801469e:	2300      	movs	r3, #0
 80146a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80146a2:	89a3      	ldrh	r3, [r4, #12]
 80146a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80146a8:	81a3      	strh	r3, [r4, #12]
 80146aa:	2300      	movs	r3, #0
 80146ac:	6063      	str	r3, [r4, #4]
 80146ae:	6923      	ldr	r3, [r4, #16]
 80146b0:	6023      	str	r3, [r4, #0]
 80146b2:	89a3      	ldrh	r3, [r4, #12]
 80146b4:	f043 0308 	orr.w	r3, r3, #8
 80146b8:	81a3      	strh	r3, [r4, #12]
 80146ba:	6923      	ldr	r3, [r4, #16]
 80146bc:	b94b      	cbnz	r3, 80146d2 <__swsetup_r+0x7a>
 80146be:	89a3      	ldrh	r3, [r4, #12]
 80146c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80146c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80146c8:	d003      	beq.n	80146d2 <__swsetup_r+0x7a>
 80146ca:	4621      	mov	r1, r4
 80146cc:	4628      	mov	r0, r5
 80146ce:	f000 f883 	bl	80147d8 <__smakebuf_r>
 80146d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146d6:	f013 0201 	ands.w	r2, r3, #1
 80146da:	d00a      	beq.n	80146f2 <__swsetup_r+0x9a>
 80146dc:	2200      	movs	r2, #0
 80146de:	60a2      	str	r2, [r4, #8]
 80146e0:	6962      	ldr	r2, [r4, #20]
 80146e2:	4252      	negs	r2, r2
 80146e4:	61a2      	str	r2, [r4, #24]
 80146e6:	6922      	ldr	r2, [r4, #16]
 80146e8:	b942      	cbnz	r2, 80146fc <__swsetup_r+0xa4>
 80146ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80146ee:	d1c5      	bne.n	801467c <__swsetup_r+0x24>
 80146f0:	bd38      	pop	{r3, r4, r5, pc}
 80146f2:	0799      	lsls	r1, r3, #30
 80146f4:	bf58      	it	pl
 80146f6:	6962      	ldrpl	r2, [r4, #20]
 80146f8:	60a2      	str	r2, [r4, #8]
 80146fa:	e7f4      	b.n	80146e6 <__swsetup_r+0x8e>
 80146fc:	2000      	movs	r0, #0
 80146fe:	e7f7      	b.n	80146f0 <__swsetup_r+0x98>
 8014700:	24000054 	.word	0x24000054

08014704 <_raise_r>:
 8014704:	291f      	cmp	r1, #31
 8014706:	b538      	push	{r3, r4, r5, lr}
 8014708:	4605      	mov	r5, r0
 801470a:	460c      	mov	r4, r1
 801470c:	d904      	bls.n	8014718 <_raise_r+0x14>
 801470e:	2316      	movs	r3, #22
 8014710:	6003      	str	r3, [r0, #0]
 8014712:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014716:	bd38      	pop	{r3, r4, r5, pc}
 8014718:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801471a:	b112      	cbz	r2, 8014722 <_raise_r+0x1e>
 801471c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014720:	b94b      	cbnz	r3, 8014736 <_raise_r+0x32>
 8014722:	4628      	mov	r0, r5
 8014724:	f000 f830 	bl	8014788 <_getpid_r>
 8014728:	4622      	mov	r2, r4
 801472a:	4601      	mov	r1, r0
 801472c:	4628      	mov	r0, r5
 801472e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014732:	f000 b817 	b.w	8014764 <_kill_r>
 8014736:	2b01      	cmp	r3, #1
 8014738:	d00a      	beq.n	8014750 <_raise_r+0x4c>
 801473a:	1c59      	adds	r1, r3, #1
 801473c:	d103      	bne.n	8014746 <_raise_r+0x42>
 801473e:	2316      	movs	r3, #22
 8014740:	6003      	str	r3, [r0, #0]
 8014742:	2001      	movs	r0, #1
 8014744:	e7e7      	b.n	8014716 <_raise_r+0x12>
 8014746:	2100      	movs	r1, #0
 8014748:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801474c:	4620      	mov	r0, r4
 801474e:	4798      	blx	r3
 8014750:	2000      	movs	r0, #0
 8014752:	e7e0      	b.n	8014716 <_raise_r+0x12>

08014754 <raise>:
 8014754:	4b02      	ldr	r3, [pc, #8]	@ (8014760 <raise+0xc>)
 8014756:	4601      	mov	r1, r0
 8014758:	6818      	ldr	r0, [r3, #0]
 801475a:	f7ff bfd3 	b.w	8014704 <_raise_r>
 801475e:	bf00      	nop
 8014760:	24000054 	.word	0x24000054

08014764 <_kill_r>:
 8014764:	b538      	push	{r3, r4, r5, lr}
 8014766:	4d07      	ldr	r5, [pc, #28]	@ (8014784 <_kill_r+0x20>)
 8014768:	2300      	movs	r3, #0
 801476a:	4604      	mov	r4, r0
 801476c:	4608      	mov	r0, r1
 801476e:	4611      	mov	r1, r2
 8014770:	602b      	str	r3, [r5, #0]
 8014772:	f7f0 f8cf 	bl	8004914 <_kill>
 8014776:	1c43      	adds	r3, r0, #1
 8014778:	d102      	bne.n	8014780 <_kill_r+0x1c>
 801477a:	682b      	ldr	r3, [r5, #0]
 801477c:	b103      	cbz	r3, 8014780 <_kill_r+0x1c>
 801477e:	6023      	str	r3, [r4, #0]
 8014780:	bd38      	pop	{r3, r4, r5, pc}
 8014782:	bf00      	nop
 8014784:	24001200 	.word	0x24001200

08014788 <_getpid_r>:
 8014788:	f7f0 b8bc 	b.w	8004904 <_getpid>

0801478c <__swhatbuf_r>:
 801478c:	b570      	push	{r4, r5, r6, lr}
 801478e:	460c      	mov	r4, r1
 8014790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014794:	2900      	cmp	r1, #0
 8014796:	b096      	sub	sp, #88	@ 0x58
 8014798:	4615      	mov	r5, r2
 801479a:	461e      	mov	r6, r3
 801479c:	da0d      	bge.n	80147ba <__swhatbuf_r+0x2e>
 801479e:	89a3      	ldrh	r3, [r4, #12]
 80147a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80147a4:	f04f 0100 	mov.w	r1, #0
 80147a8:	bf14      	ite	ne
 80147aa:	2340      	movne	r3, #64	@ 0x40
 80147ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80147b0:	2000      	movs	r0, #0
 80147b2:	6031      	str	r1, [r6, #0]
 80147b4:	602b      	str	r3, [r5, #0]
 80147b6:	b016      	add	sp, #88	@ 0x58
 80147b8:	bd70      	pop	{r4, r5, r6, pc}
 80147ba:	466a      	mov	r2, sp
 80147bc:	f000 f848 	bl	8014850 <_fstat_r>
 80147c0:	2800      	cmp	r0, #0
 80147c2:	dbec      	blt.n	801479e <__swhatbuf_r+0x12>
 80147c4:	9901      	ldr	r1, [sp, #4]
 80147c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80147ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80147ce:	4259      	negs	r1, r3
 80147d0:	4159      	adcs	r1, r3
 80147d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80147d6:	e7eb      	b.n	80147b0 <__swhatbuf_r+0x24>

080147d8 <__smakebuf_r>:
 80147d8:	898b      	ldrh	r3, [r1, #12]
 80147da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80147dc:	079d      	lsls	r5, r3, #30
 80147de:	4606      	mov	r6, r0
 80147e0:	460c      	mov	r4, r1
 80147e2:	d507      	bpl.n	80147f4 <__smakebuf_r+0x1c>
 80147e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80147e8:	6023      	str	r3, [r4, #0]
 80147ea:	6123      	str	r3, [r4, #16]
 80147ec:	2301      	movs	r3, #1
 80147ee:	6163      	str	r3, [r4, #20]
 80147f0:	b003      	add	sp, #12
 80147f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147f4:	ab01      	add	r3, sp, #4
 80147f6:	466a      	mov	r2, sp
 80147f8:	f7ff ffc8 	bl	801478c <__swhatbuf_r>
 80147fc:	9f00      	ldr	r7, [sp, #0]
 80147fe:	4605      	mov	r5, r0
 8014800:	4639      	mov	r1, r7
 8014802:	4630      	mov	r0, r6
 8014804:	f7fe febe 	bl	8013584 <_malloc_r>
 8014808:	b948      	cbnz	r0, 801481e <__smakebuf_r+0x46>
 801480a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801480e:	059a      	lsls	r2, r3, #22
 8014810:	d4ee      	bmi.n	80147f0 <__smakebuf_r+0x18>
 8014812:	f023 0303 	bic.w	r3, r3, #3
 8014816:	f043 0302 	orr.w	r3, r3, #2
 801481a:	81a3      	strh	r3, [r4, #12]
 801481c:	e7e2      	b.n	80147e4 <__smakebuf_r+0xc>
 801481e:	89a3      	ldrh	r3, [r4, #12]
 8014820:	6020      	str	r0, [r4, #0]
 8014822:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014826:	81a3      	strh	r3, [r4, #12]
 8014828:	9b01      	ldr	r3, [sp, #4]
 801482a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801482e:	b15b      	cbz	r3, 8014848 <__smakebuf_r+0x70>
 8014830:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014834:	4630      	mov	r0, r6
 8014836:	f000 f81d 	bl	8014874 <_isatty_r>
 801483a:	b128      	cbz	r0, 8014848 <__smakebuf_r+0x70>
 801483c:	89a3      	ldrh	r3, [r4, #12]
 801483e:	f023 0303 	bic.w	r3, r3, #3
 8014842:	f043 0301 	orr.w	r3, r3, #1
 8014846:	81a3      	strh	r3, [r4, #12]
 8014848:	89a3      	ldrh	r3, [r4, #12]
 801484a:	431d      	orrs	r5, r3
 801484c:	81a5      	strh	r5, [r4, #12]
 801484e:	e7cf      	b.n	80147f0 <__smakebuf_r+0x18>

08014850 <_fstat_r>:
 8014850:	b538      	push	{r3, r4, r5, lr}
 8014852:	4d07      	ldr	r5, [pc, #28]	@ (8014870 <_fstat_r+0x20>)
 8014854:	2300      	movs	r3, #0
 8014856:	4604      	mov	r4, r0
 8014858:	4608      	mov	r0, r1
 801485a:	4611      	mov	r1, r2
 801485c:	602b      	str	r3, [r5, #0]
 801485e:	f7f0 f8b9 	bl	80049d4 <_fstat>
 8014862:	1c43      	adds	r3, r0, #1
 8014864:	d102      	bne.n	801486c <_fstat_r+0x1c>
 8014866:	682b      	ldr	r3, [r5, #0]
 8014868:	b103      	cbz	r3, 801486c <_fstat_r+0x1c>
 801486a:	6023      	str	r3, [r4, #0]
 801486c:	bd38      	pop	{r3, r4, r5, pc}
 801486e:	bf00      	nop
 8014870:	24001200 	.word	0x24001200

08014874 <_isatty_r>:
 8014874:	b538      	push	{r3, r4, r5, lr}
 8014876:	4d06      	ldr	r5, [pc, #24]	@ (8014890 <_isatty_r+0x1c>)
 8014878:	2300      	movs	r3, #0
 801487a:	4604      	mov	r4, r0
 801487c:	4608      	mov	r0, r1
 801487e:	602b      	str	r3, [r5, #0]
 8014880:	f7f0 f8b8 	bl	80049f4 <_isatty>
 8014884:	1c43      	adds	r3, r0, #1
 8014886:	d102      	bne.n	801488e <_isatty_r+0x1a>
 8014888:	682b      	ldr	r3, [r5, #0]
 801488a:	b103      	cbz	r3, 801488e <_isatty_r+0x1a>
 801488c:	6023      	str	r3, [r4, #0]
 801488e:	bd38      	pop	{r3, r4, r5, pc}
 8014890:	24001200 	.word	0x24001200

08014894 <_init>:
 8014894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014896:	bf00      	nop
 8014898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801489a:	bc08      	pop	{r3}
 801489c:	469e      	mov	lr, r3
 801489e:	4770      	bx	lr

080148a0 <_fini>:
 80148a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148a2:	bf00      	nop
 80148a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80148a6:	bc08      	pop	{r3}
 80148a8:	469e      	mov	lr, r3
 80148aa:	4770      	bx	lr
