
PlasmaDriver_NucleoH723ZG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001423c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d38  08014510  08014510  00015510  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015248  08015248  00016248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015250  08015250  00016250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015254  08015254  00016254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000210  24000000  08015258  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000210  08015468  00017210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000270  080154c8  00017270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f40  240002d0  08015528  000172d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24001210  08015528  00018210  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000172d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000243d9  00000000  00000000  000172fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b8d  00000000  00000000  0003b6d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd0  00000000  00000000  0003f268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015bd  00000000  00000000  00040e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038050  00000000  00000000  000423f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002262a  00000000  00000000  0007a445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016e16c  00000000  00000000  0009ca6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0020abdb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008988  00000000  00000000  0020ac20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  002135a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002d0 	.word	0x240002d0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080144f4 	.word	0x080144f4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002d4 	.word	0x240002d4
 800030c:	080144f4 	.word	0x080144f4

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003f4:	f000 b96a 	b.w	80006cc <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9d08      	ldr	r5, [sp, #32]
 8000416:	460c      	mov	r4, r1
 8000418:	2b00      	cmp	r3, #0
 800041a:	d14e      	bne.n	80004ba <__udivmoddi4+0xaa>
 800041c:	4694      	mov	ip, r2
 800041e:	458c      	cmp	ip, r1
 8000420:	4686      	mov	lr, r0
 8000422:	fab2 f282 	clz	r2, r2
 8000426:	d962      	bls.n	80004ee <__udivmoddi4+0xde>
 8000428:	b14a      	cbz	r2, 800043e <__udivmoddi4+0x2e>
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	4091      	lsls	r1, r2
 8000430:	fa20 f303 	lsr.w	r3, r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	4319      	orrs	r1, r3
 800043a:	fa00 fe02 	lsl.w	lr, r0, r2
 800043e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000442:	fa1f f68c 	uxth.w	r6, ip
 8000446:	fbb1 f4f7 	udiv	r4, r1, r7
 800044a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800044e:	fb07 1114 	mls	r1, r7, r4, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb04 f106 	mul.w	r1, r4, r6
 800045a:	4299      	cmp	r1, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x64>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000466:	f080 8112 	bcs.w	800068e <__udivmoddi4+0x27e>
 800046a:	4299      	cmp	r1, r3
 800046c:	f240 810f 	bls.w	800068e <__udivmoddi4+0x27e>
 8000470:	3c02      	subs	r4, #2
 8000472:	4463      	add	r3, ip
 8000474:	1a59      	subs	r1, r3, r1
 8000476:	fa1f f38e 	uxth.w	r3, lr
 800047a:	fbb1 f0f7 	udiv	r0, r1, r7
 800047e:	fb07 1110 	mls	r1, r7, r0, r1
 8000482:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000486:	fb00 f606 	mul.w	r6, r0, r6
 800048a:	429e      	cmp	r6, r3
 800048c:	d90a      	bls.n	80004a4 <__udivmoddi4+0x94>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000496:	f080 80fc 	bcs.w	8000692 <__udivmoddi4+0x282>
 800049a:	429e      	cmp	r6, r3
 800049c:	f240 80f9 	bls.w	8000692 <__udivmoddi4+0x282>
 80004a0:	4463      	add	r3, ip
 80004a2:	3802      	subs	r0, #2
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80004aa:	2100      	movs	r1, #0
 80004ac:	b11d      	cbz	r5, 80004b6 <__udivmoddi4+0xa6>
 80004ae:	40d3      	lsrs	r3, r2
 80004b0:	2200      	movs	r2, #0
 80004b2:	e9c5 3200 	strd	r3, r2, [r5]
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d905      	bls.n	80004ca <__udivmoddi4+0xba>
 80004be:	b10d      	cbz	r5, 80004c4 <__udivmoddi4+0xb4>
 80004c0:	e9c5 0100 	strd	r0, r1, [r5]
 80004c4:	2100      	movs	r1, #0
 80004c6:	4608      	mov	r0, r1
 80004c8:	e7f5      	b.n	80004b6 <__udivmoddi4+0xa6>
 80004ca:	fab3 f183 	clz	r1, r3
 80004ce:	2900      	cmp	r1, #0
 80004d0:	d146      	bne.n	8000560 <__udivmoddi4+0x150>
 80004d2:	42a3      	cmp	r3, r4
 80004d4:	d302      	bcc.n	80004dc <__udivmoddi4+0xcc>
 80004d6:	4290      	cmp	r0, r2
 80004d8:	f0c0 80f0 	bcc.w	80006bc <__udivmoddi4+0x2ac>
 80004dc:	1a86      	subs	r6, r0, r2
 80004de:	eb64 0303 	sbc.w	r3, r4, r3
 80004e2:	2001      	movs	r0, #1
 80004e4:	2d00      	cmp	r5, #0
 80004e6:	d0e6      	beq.n	80004b6 <__udivmoddi4+0xa6>
 80004e8:	e9c5 6300 	strd	r6, r3, [r5]
 80004ec:	e7e3      	b.n	80004b6 <__udivmoddi4+0xa6>
 80004ee:	2a00      	cmp	r2, #0
 80004f0:	f040 8090 	bne.w	8000614 <__udivmoddi4+0x204>
 80004f4:	eba1 040c 	sub.w	r4, r1, ip
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa1f f78c 	uxth.w	r7, ip
 8000500:	2101      	movs	r1, #1
 8000502:	fbb4 f6f8 	udiv	r6, r4, r8
 8000506:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800050a:	fb08 4416 	mls	r4, r8, r6, r4
 800050e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000512:	fb07 f006 	mul.w	r0, r7, r6
 8000516:	4298      	cmp	r0, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x11c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000522:	d202      	bcs.n	800052a <__udivmoddi4+0x11a>
 8000524:	4298      	cmp	r0, r3
 8000526:	f200 80cd 	bhi.w	80006c4 <__udivmoddi4+0x2b4>
 800052a:	4626      	mov	r6, r4
 800052c:	1a1c      	subs	r4, r3, r0
 800052e:	fa1f f38e 	uxth.w	r3, lr
 8000532:	fbb4 f0f8 	udiv	r0, r4, r8
 8000536:	fb08 4410 	mls	r4, r8, r0, r4
 800053a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800053e:	fb00 f707 	mul.w	r7, r0, r7
 8000542:	429f      	cmp	r7, r3
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x148>
 8000546:	eb1c 0303 	adds.w	r3, ip, r3
 800054a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800054e:	d202      	bcs.n	8000556 <__udivmoddi4+0x146>
 8000550:	429f      	cmp	r7, r3
 8000552:	f200 80b0 	bhi.w	80006b6 <__udivmoddi4+0x2a6>
 8000556:	4620      	mov	r0, r4
 8000558:	1bdb      	subs	r3, r3, r7
 800055a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800055e:	e7a5      	b.n	80004ac <__udivmoddi4+0x9c>
 8000560:	f1c1 0620 	rsb	r6, r1, #32
 8000564:	408b      	lsls	r3, r1
 8000566:	fa22 f706 	lsr.w	r7, r2, r6
 800056a:	431f      	orrs	r7, r3
 800056c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000570:	fa04 f301 	lsl.w	r3, r4, r1
 8000574:	ea43 030c 	orr.w	r3, r3, ip
 8000578:	40f4      	lsrs	r4, r6
 800057a:	fa00 f801 	lsl.w	r8, r0, r1
 800057e:	0c38      	lsrs	r0, r7, #16
 8000580:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000584:	fbb4 fef0 	udiv	lr, r4, r0
 8000588:	fa1f fc87 	uxth.w	ip, r7
 800058c:	fb00 441e 	mls	r4, r0, lr, r4
 8000590:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000594:	fb0e f90c 	mul.w	r9, lr, ip
 8000598:	45a1      	cmp	r9, r4
 800059a:	fa02 f201 	lsl.w	r2, r2, r1
 800059e:	d90a      	bls.n	80005b6 <__udivmoddi4+0x1a6>
 80005a0:	193c      	adds	r4, r7, r4
 80005a2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80005a6:	f080 8084 	bcs.w	80006b2 <__udivmoddi4+0x2a2>
 80005aa:	45a1      	cmp	r9, r4
 80005ac:	f240 8081 	bls.w	80006b2 <__udivmoddi4+0x2a2>
 80005b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80005b4:	443c      	add	r4, r7
 80005b6:	eba4 0409 	sub.w	r4, r4, r9
 80005ba:	fa1f f983 	uxth.w	r9, r3
 80005be:	fbb4 f3f0 	udiv	r3, r4, r0
 80005c2:	fb00 4413 	mls	r4, r0, r3, r4
 80005c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ce:	45a4      	cmp	ip, r4
 80005d0:	d907      	bls.n	80005e2 <__udivmoddi4+0x1d2>
 80005d2:	193c      	adds	r4, r7, r4
 80005d4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80005d8:	d267      	bcs.n	80006aa <__udivmoddi4+0x29a>
 80005da:	45a4      	cmp	ip, r4
 80005dc:	d965      	bls.n	80006aa <__udivmoddi4+0x29a>
 80005de:	3b02      	subs	r3, #2
 80005e0:	443c      	add	r4, r7
 80005e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005e6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ea:	eba4 040c 	sub.w	r4, r4, ip
 80005ee:	429c      	cmp	r4, r3
 80005f0:	46ce      	mov	lr, r9
 80005f2:	469c      	mov	ip, r3
 80005f4:	d351      	bcc.n	800069a <__udivmoddi4+0x28a>
 80005f6:	d04e      	beq.n	8000696 <__udivmoddi4+0x286>
 80005f8:	b155      	cbz	r5, 8000610 <__udivmoddi4+0x200>
 80005fa:	ebb8 030e 	subs.w	r3, r8, lr
 80005fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000602:	fa04 f606 	lsl.w	r6, r4, r6
 8000606:	40cb      	lsrs	r3, r1
 8000608:	431e      	orrs	r6, r3
 800060a:	40cc      	lsrs	r4, r1
 800060c:	e9c5 6400 	strd	r6, r4, [r5]
 8000610:	2100      	movs	r1, #0
 8000612:	e750      	b.n	80004b6 <__udivmoddi4+0xa6>
 8000614:	f1c2 0320 	rsb	r3, r2, #32
 8000618:	fa20 f103 	lsr.w	r1, r0, r3
 800061c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000620:	fa24 f303 	lsr.w	r3, r4, r3
 8000624:	4094      	lsls	r4, r2
 8000626:	430c      	orrs	r4, r1
 8000628:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800062c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000630:	fa1f f78c 	uxth.w	r7, ip
 8000634:	fbb3 f0f8 	udiv	r0, r3, r8
 8000638:	fb08 3110 	mls	r1, r8, r0, r3
 800063c:	0c23      	lsrs	r3, r4, #16
 800063e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000642:	fb00 f107 	mul.w	r1, r0, r7
 8000646:	4299      	cmp	r1, r3
 8000648:	d908      	bls.n	800065c <__udivmoddi4+0x24c>
 800064a:	eb1c 0303 	adds.w	r3, ip, r3
 800064e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000652:	d22c      	bcs.n	80006ae <__udivmoddi4+0x29e>
 8000654:	4299      	cmp	r1, r3
 8000656:	d92a      	bls.n	80006ae <__udivmoddi4+0x29e>
 8000658:	3802      	subs	r0, #2
 800065a:	4463      	add	r3, ip
 800065c:	1a5b      	subs	r3, r3, r1
 800065e:	b2a4      	uxth	r4, r4
 8000660:	fbb3 f1f8 	udiv	r1, r3, r8
 8000664:	fb08 3311 	mls	r3, r8, r1, r3
 8000668:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800066c:	fb01 f307 	mul.w	r3, r1, r7
 8000670:	42a3      	cmp	r3, r4
 8000672:	d908      	bls.n	8000686 <__udivmoddi4+0x276>
 8000674:	eb1c 0404 	adds.w	r4, ip, r4
 8000678:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800067c:	d213      	bcs.n	80006a6 <__udivmoddi4+0x296>
 800067e:	42a3      	cmp	r3, r4
 8000680:	d911      	bls.n	80006a6 <__udivmoddi4+0x296>
 8000682:	3902      	subs	r1, #2
 8000684:	4464      	add	r4, ip
 8000686:	1ae4      	subs	r4, r4, r3
 8000688:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800068c:	e739      	b.n	8000502 <__udivmoddi4+0xf2>
 800068e:	4604      	mov	r4, r0
 8000690:	e6f0      	b.n	8000474 <__udivmoddi4+0x64>
 8000692:	4608      	mov	r0, r1
 8000694:	e706      	b.n	80004a4 <__udivmoddi4+0x94>
 8000696:	45c8      	cmp	r8, r9
 8000698:	d2ae      	bcs.n	80005f8 <__udivmoddi4+0x1e8>
 800069a:	ebb9 0e02 	subs.w	lr, r9, r2
 800069e:	eb63 0c07 	sbc.w	ip, r3, r7
 80006a2:	3801      	subs	r0, #1
 80006a4:	e7a8      	b.n	80005f8 <__udivmoddi4+0x1e8>
 80006a6:	4631      	mov	r1, r6
 80006a8:	e7ed      	b.n	8000686 <__udivmoddi4+0x276>
 80006aa:	4603      	mov	r3, r0
 80006ac:	e799      	b.n	80005e2 <__udivmoddi4+0x1d2>
 80006ae:	4630      	mov	r0, r6
 80006b0:	e7d4      	b.n	800065c <__udivmoddi4+0x24c>
 80006b2:	46d6      	mov	lr, sl
 80006b4:	e77f      	b.n	80005b6 <__udivmoddi4+0x1a6>
 80006b6:	4463      	add	r3, ip
 80006b8:	3802      	subs	r0, #2
 80006ba:	e74d      	b.n	8000558 <__udivmoddi4+0x148>
 80006bc:	4606      	mov	r6, r0
 80006be:	4623      	mov	r3, r4
 80006c0:	4608      	mov	r0, r1
 80006c2:	e70f      	b.n	80004e4 <__udivmoddi4+0xd4>
 80006c4:	3e02      	subs	r6, #2
 80006c6:	4463      	add	r3, ip
 80006c8:	e730      	b.n	800052c <__udivmoddi4+0x11c>
 80006ca:	bf00      	nop

080006cc <__aeabi_idiv0>:
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop

080006d0 <init_supply_struct>:
	char sHV;
} supply_struct;
static supply_struct supply_status;

static void init_supply_struct()
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
	supply_status.s15V = 0;
 80006d4:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <init_supply_struct+0x20>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	705a      	strb	r2, [r3, #1]
	supply_status.s3_3V = 0;
 80006da:	4b05      	ldr	r3, [pc, #20]	@ (80006f0 <init_supply_struct+0x20>)
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
	supply_status.sHV = 0;
 80006e0:	4b03      	ldr	r3, [pc, #12]	@ (80006f0 <init_supply_struct+0x20>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	709a      	strb	r2, [r3, #2]
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	24000a40 	.word	0x24000a40

080006f4 <writeConfigFlash>:
// Prototypes
void measureVoltagesTemperaturesADC3(void);

// Write configuration to flash
static uint32_t writeConfigFlash(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
	uint32_t faultySector;	//Contains error code for faulty sector
	uint32_t error_code = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]

	// Unlock Flash
	HAL_FLASH_Unlock();
 80006fe:	f00a f847 	bl	800a790 <HAL_FLASH_Unlock>

	// Erase flash sector 7
	if (HAL_FLASHEx_Erase(&sFlashErase, &faultySector) == HAL_OK)
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	4619      	mov	r1, r3
 8000706:	4815      	ldr	r0, [pc, #84]	@ (800075c <writeConfigFlash+0x68>)
 8000708:	f00a f8de 	bl	800a8c8 <HAL_FLASHEx_Erase>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d119      	bne.n	8000746 <writeConfigFlash+0x52>
	{
		for (uint32_t offset = 0; offset < sizeof(sFlashConfig); offset += FLASH_WORD)
 8000712:	2300      	movs	r3, #0
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	e012      	b.n	800073e <writeConfigFlash+0x4a>
		{
			// Program one flash word (8*4 bytes)
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, FLASH_SECTOR7_START_ADDR + offset, ((uint32_t) &sFlashConfig) + offset) != HAL_OK)
 8000718:	68ba      	ldr	r2, [r7, #8]
 800071a:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <writeConfigFlash+0x6c>)
 800071c:	4413      	add	r3, r2
 800071e:	4911      	ldr	r1, [pc, #68]	@ (8000764 <writeConfigFlash+0x70>)
 8000720:	68ba      	ldr	r2, [r7, #8]
 8000722:	440a      	add	r2, r1
 8000724:	4619      	mov	r1, r3
 8000726:	2001      	movs	r0, #1
 8000728:	f009 ffc4 	bl	800a6b4 <HAL_FLASH_Program>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d002      	beq.n	8000738 <writeConfigFlash+0x44>
			{
				// Error during flash write
				error_code = HAL_FLASH_GetError();
 8000732:	f00a f867 	bl	800a804 <HAL_FLASH_GetError>
 8000736:	60f8      	str	r0, [r7, #12]
		for (uint32_t offset = 0; offset < sizeof(sFlashConfig); offset += FLASH_WORD)
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	3320      	adds	r3, #32
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d0e9      	beq.n	8000718 <writeConfigFlash+0x24>
 8000744:	e002      	b.n	800074c <writeConfigFlash+0x58>
			}
		}
	}
	else
	{
		error_code = HAL_FLASH_GetError();
 8000746:	f00a f85d 	bl	800a804 <HAL_FLASH_GetError>
 800074a:	60f8      	str	r0, [r7, #12]
	}

	  // Lock Flash
	  HAL_FLASH_Lock();
 800074c:	f00a f842 	bl	800a7d4 <HAL_FLASH_Lock>

	  return error_code;
 8000750:	68fb      	ldr	r3, [r7, #12]
}
 8000752:	4618      	mov	r0, r3
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	24000024 	.word	0x24000024
 8000760:	080e0000 	.word	0x080e0000
 8000764:	24000a48 	.word	0x24000a48

08000768 <readConfigFlash>:

// Read configuration from flash
static void readConfigFlash(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
	// Read configuration from flash
	memcpy(&sFlashConfig, (void *) FLASH_SECTOR7_START_ADDR, sizeof(sFlashConfig));
 800076c:	4b04      	ldr	r3, [pc, #16]	@ (8000780 <readConfigFlash+0x18>)
 800076e:	781a      	ldrb	r2, [r3, #0]
 8000770:	4b04      	ldr	r3, [pc, #16]	@ (8000784 <readConfigFlash+0x1c>)
 8000772:	701a      	strb	r2, [r3, #0]
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	080e0000 	.word	0x080e0000
 8000784:	24000a48 	.word	0x24000a48

08000788 <printCR>:

// Print CR
static void printCR(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, (uint8_t *) "\n\r", 2, 1000);
 800078c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000790:	2202      	movs	r2, #2
 8000792:	4903      	ldr	r1, [pc, #12]	@ (80007a0 <printCR+0x18>)
 8000794:	4803      	ldr	r0, [pc, #12]	@ (80007a4 <printCR+0x1c>)
 8000796:	f00f fd1a 	bl	80101ce <HAL_UART_Transmit>
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	08014510 	.word	0x08014510
 80007a4:	24000e38 	.word	0x24000e38

080007a8 <printString>:

// Print string on UART3
static void printString(char *str)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) str, strlen(str), 1000);
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff fe0d 	bl	80003d0 <strlen>
 80007b6:	4603      	mov	r3, r0
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007be:	6879      	ldr	r1, [r7, #4]
 80007c0:	4803      	ldr	r0, [pc, #12]	@ (80007d0 <printString+0x28>)
 80007c2:	f00f fd04 	bl	80101ce <HAL_UART_Transmit>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	24000e38 	.word	0x24000e38

080007d4 <printConfigFlash>:

// Print configuration on UART3
static void printConfigFlash(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	printString("\n\rCurrent configuration:");
 80007d8:	480e      	ldr	r0, [pc, #56]	@ (8000814 <printConfigFlash+0x40>)
 80007da:	f7ff ffe5 	bl	80007a8 <printString>
	printString("\n\r  Mode = ");
 80007de:	480e      	ldr	r0, [pc, #56]	@ (8000818 <printConfigFlash+0x44>)
 80007e0:	f7ff ffe2 	bl	80007a8 <printString>
	if (sFlashConfig.mode == TEST_MODE)
 80007e4:	4b0d      	ldr	r3, [pc, #52]	@ (800081c <printConfigFlash+0x48>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d103      	bne.n	80007f4 <printConfigFlash+0x20>
		printString("TEST");
 80007ec:	480c      	ldr	r0, [pc, #48]	@ (8000820 <printConfigFlash+0x4c>)
 80007ee:	f7ff ffdb 	bl	80007a8 <printString>
 80007f2:	e00a      	b.n	800080a <printConfigFlash+0x36>
	else if (sFlashConfig.mode == RUN_MODE)
 80007f4:	4b09      	ldr	r3, [pc, #36]	@ (800081c <printConfigFlash+0x48>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d103      	bne.n	8000804 <printConfigFlash+0x30>
		printString("RUN");
 80007fc:	4809      	ldr	r0, [pc, #36]	@ (8000824 <printConfigFlash+0x50>)
 80007fe:	f7ff ffd3 	bl	80007a8 <printString>
 8000802:	e002      	b.n	800080a <printConfigFlash+0x36>
	else
		printString("UNKNOWN");
 8000804:	4808      	ldr	r0, [pc, #32]	@ (8000828 <printConfigFlash+0x54>)
 8000806:	f7ff ffcf 	bl	80007a8 <printString>
	printCR();
 800080a:	f7ff ffbd 	bl	8000788 <printCR>
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	08014514 	.word	0x08014514
 8000818:	08014530 	.word	0x08014530
 800081c:	24000a48 	.word	0x24000a48
 8000820:	0801453c 	.word	0x0801453c
 8000824:	08014544 	.word	0x08014544
 8000828:	08014548 	.word	0x08014548

0800082c <printNumber>:

// Print 16bit unsigned integer on UART3
static void printNumber(const char *text, uint16_t number, uint8_t CR)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b09e      	sub	sp, #120	@ 0x78
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	460b      	mov	r3, r1
 8000836:	807b      	strh	r3, [r7, #2]
 8000838:	4613      	mov	r3, r2
 800083a:	707b      	strb	r3, [r7, #1]
	char s_output[100];
	char s_number[7];
	strcpy(s_output, text);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	6879      	ldr	r1, [r7, #4]
 8000842:	4618      	mov	r0, r3
 8000844:	f011 fe73 	bl	801252e <strcpy>
	itoa(number, s_number, 10);
 8000848:	887b      	ldrh	r3, [r7, #2]
 800084a:	f107 010c 	add.w	r1, r7, #12
 800084e:	220a      	movs	r2, #10
 8000850:	4618      	mov	r0, r3
 8000852:	f010 ffb9 	bl	80117c8 <itoa>
	strcat(s_output, s_number);
 8000856:	f107 020c 	add.w	r2, r7, #12
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	4611      	mov	r1, r2
 8000860:	4618      	mov	r0, r3
 8000862:	f011 fdde 	bl	8012422 <strcat>
	if (CR)
 8000866:	787b      	ldrb	r3, [r7, #1]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d00e      	beq.n	800088a <printNumber+0x5e>
	{
		strcat(s_output, "\n\r");
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fdad 	bl	80003d0 <strlen>
 8000876:	4603      	mov	r3, r0
 8000878:	461a      	mov	r2, r3
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4413      	add	r3, r2
 8000880:	4a0b      	ldr	r2, [pc, #44]	@ (80008b0 <printNumber+0x84>)
 8000882:	8811      	ldrh	r1, [r2, #0]
 8000884:	7892      	ldrb	r2, [r2, #2]
 8000886:	8019      	strh	r1, [r3, #0]
 8000888:	709a      	strb	r2, [r3, #2]
	}
	HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fd9e 	bl	80003d0 <strlen>
 8000894:	4603      	mov	r3, r0
 8000896:	b29a      	uxth	r2, r3
 8000898:	f107 0114 	add.w	r1, r7, #20
 800089c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008a0:	4804      	ldr	r0, [pc, #16]	@ (80008b4 <printNumber+0x88>)
 80008a2:	f00f fc94 	bl	80101ce <HAL_UART_Transmit>
}
 80008a6:	bf00      	nop
 80008a8:	3778      	adds	r7, #120	@ 0x78
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	08014510 	.word	0x08014510
 80008b4:	24000e38 	.word	0x24000e38

080008b8 <printHALErrorStatus>:

// Print HAL error status on UART3
static void	printHALErrorStatus(HAL_StatusTypeDef HALresp, const char *text)
{
 80008b8:	b5b0      	push	{r4, r5, r7, lr}
 80008ba:	b09c      	sub	sp, #112	@ 0x70
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	6039      	str	r1, [r7, #0]
 80008c2:	71fb      	strb	r3, [r7, #7]
	char s_output[100];

	switch (HALresp)
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	2b03      	cmp	r3, #3
 80008c8:	d828      	bhi.n	800091c <printHALErrorStatus+0x64>
 80008ca:	a201      	add	r2, pc, #4	@ (adr r2, 80008d0 <printHALErrorStatus+0x18>)
 80008cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d0:	0800091d 	.word	0x0800091d
 80008d4:	080008e1 	.word	0x080008e1
 80008d8:	080008f5 	.word	0x080008f5
 80008dc:	08000909 	.word	0x08000909
	{
		case HAL_ERROR:
			strcpy(s_output, "** HAL ERROR **: ");
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	4a15      	ldr	r2, [pc, #84]	@ (800093c <printHALErrorStatus+0x84>)
 80008e6:	461c      	mov	r4, r3
 80008e8:	4615      	mov	r5, r2
 80008ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ee:	682b      	ldr	r3, [r5, #0]
 80008f0:	8023      	strh	r3, [r4, #0]
		break;
 80008f2:	e013      	b.n	800091c <printHALErrorStatus+0x64>

		case HAL_BUSY:
			strcpy(s_output, "** HAL BUSY **: ");
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	4a11      	ldr	r2, [pc, #68]	@ (8000940 <printHALErrorStatus+0x88>)
 80008fa:	461c      	mov	r4, r3
 80008fc:	4615      	mov	r5, r2
 80008fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000900:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000902:	682b      	ldr	r3, [r5, #0]
 8000904:	7023      	strb	r3, [r4, #0]
		break;
 8000906:	e009      	b.n	800091c <printHALErrorStatus+0x64>

		case HAL_TIMEOUT:
			strcpy(s_output, "** HAL TIMEOUT **: ");
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	4a0d      	ldr	r2, [pc, #52]	@ (8000944 <printHALErrorStatus+0x8c>)
 800090e:	461c      	mov	r4, r3
 8000910:	4615      	mov	r5, r2
 8000912:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000914:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000916:	682b      	ldr	r3, [r5, #0]
 8000918:	6023      	str	r3, [r4, #0]
		break;
 800091a:	bf00      	nop

		case HAL_OK:
		break;
	}
	strcat(s_output, text);
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	6839      	ldr	r1, [r7, #0]
 8000922:	4618      	mov	r0, r3
 8000924:	f011 fd7d 	bl	8012422 <strcat>
	printString(s_output);
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ff3b 	bl	80007a8 <printString>
}
 8000932:	bf00      	nop
 8000934:	3770      	adds	r7, #112	@ 0x70
 8000936:	46bd      	mov	sp, r7
 8000938:	bdb0      	pop	{r4, r5, r7, pc}
 800093a:	bf00      	nop
 800093c:	08014550 	.word	0x08014550
 8000940:	08014564 	.word	0x08014564
 8000944:	08014578 	.word	0x08014578

08000948 <stopHbridge>:

void stopHbridge(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]

	//Stop TIMER 1 PWM & interrupts
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);  //This will stop channel PWM1
 800095c:	2100      	movs	r1, #0
 800095e:	480f      	ldr	r0, [pc, #60]	@ (800099c <stopHbridge+0x54>)
 8000960:	f00e f84a 	bl	800e9f8 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); //This will stop channel PWM1N
 8000964:	2100      	movs	r1, #0
 8000966:	480d      	ldr	r0, [pc, #52]	@ (800099c <stopHbridge+0x54>)
 8000968:	f00f fa22 	bl	800fdb0 <HAL_TIMEx_PWMN_Stop>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, TIM1_CH1N_Pin|TIM1_CH1_Pin, GPIO_PIN_SET);
 800096c:	2201      	movs	r2, #1
 800096e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000972:	480b      	ldr	r0, [pc, #44]	@ (80009a0 <stopHbridge+0x58>)
 8000974:	f00a fa3c 	bl	800adf0 <HAL_GPIO_WritePin>
	/*Configure GPIO pins : LED_GREEN_Pin LINE_DRIVER1_ENABLE_Pin LINE_DRIVER2_ENABLE_Pin LED_RED_Pin */
	GPIO_InitStruct.Pin = TIM1_CH1N_Pin|TIM1_CH1_Pin;
 8000978:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800097c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	4619      	mov	r1, r3
 800098e:	4804      	ldr	r0, [pc, #16]	@ (80009a0 <stopHbridge+0x58>)
 8000990:	f00a f86e 	bl	800aa70 <HAL_GPIO_Init>

}
 8000994:	bf00      	nop
 8000996:	3718      	adds	r7, #24
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	24000ecc 	.word	0x24000ecc
 80009a0:	58021000 	.word	0x58021000

080009a4 <printHbridgeData>:

// Print H-bridge data on UART3
static void printHbridgeData(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b09c      	sub	sp, #112	@ 0x70
 80009a8:	af02      	add	r7, sp, #8
	char s_output[100];
	sprintf(s_output, "\n\rH-bridge 1=On 0=Off: %u, Frequency: %u (Hz), Dead time: %u (%%)\n\r", sHbridge.on, sHbridge.frequency, sHbridge.deadtime);
 80009aa:	4b0f      	ldr	r3, [pc, #60]	@ (80009e8 <printHbridgeData+0x44>)
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	461a      	mov	r2, r3
 80009b0:	4b0d      	ldr	r3, [pc, #52]	@ (80009e8 <printHbridgeData+0x44>)
 80009b2:	885b      	ldrh	r3, [r3, #2]
 80009b4:	4619      	mov	r1, r3
 80009b6:	4b0c      	ldr	r3, [pc, #48]	@ (80009e8 <printHbridgeData+0x44>)
 80009b8:	889b      	ldrh	r3, [r3, #4]
 80009ba:	1d38      	adds	r0, r7, #4
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	460b      	mov	r3, r1
 80009c0:	490a      	ldr	r1, [pc, #40]	@ (80009ec <printHbridgeData+0x48>)
 80009c2:	f011 fcc3 	bl	801234c <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fd01 	bl	80003d0 <strlen>
 80009ce:	4603      	mov	r3, r0
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	1d39      	adds	r1, r7, #4
 80009d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009d8:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <printHbridgeData+0x4c>)
 80009da:	f00f fbf8 	bl	80101ce <HAL_UART_Transmit>
}
 80009de:	bf00      	nop
 80009e0:	3768      	adds	r7, #104	@ 0x68
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	2400001c 	.word	0x2400001c
 80009ec:	0801458c 	.word	0x0801458c
 80009f0:	24000e38 	.word	0x24000e38
 80009f4:	00000000 	.word	0x00000000

080009f8 <programHbridge>:



// Program TIMER 1 controlling the H-bridge
static void programHbridge()
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b0a6      	sub	sp, #152	@ 0x98
 80009fc:	af00      	add	r7, sp, #0
	uint8_t DT, DTG;
	float tDTS = 1E6/((float) TIMER_BASE_CLOCK);  //Minimum step in usec
 80009fe:	4b90      	ldr	r3, [pc, #576]	@ (8000c40 <programHbridge+0x248>)
 8000a00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	// TIMER 1 has already been initialized using HAL.
	// Program the H-bridge TIMER 1 - Clock TIMER_BASE_CLOCK

	// Calculate the period and duty cycle based on the frequency requested.
	timARR_f = ((float) TIMER_BASE_CLOCK) / ((float) sHbridge.frequency);
 8000a04:	4b8f      	ldr	r3, [pc, #572]	@ (8000c44 <programHbridge+0x24c>)
 8000a06:	885b      	ldrh	r3, [r3, #2]
 8000a08:	ee07 3a90 	vmov	s15, r3
 8000a0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a10:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8000c48 <programHbridge+0x250>
 8000a14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a18:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
	timARR = (uint32_t) (timARR_f + 0.5);							// Set period counter
 8000a1c:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8000a20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a24:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000a28:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000a2c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a30:	ee17 3a90 	vmov	r3, s15
 8000a34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	timCCR1 = timARR / 2;  											// 50% duty cycle
 8000a38:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a3c:	085b      	lsrs	r3, r3, #1
 8000a3e:	67fb      	str	r3, [r7, #124]	@ 0x7c

	// Print out the set frequency
	if (debug == 1)
 8000a40:	4b82      	ldr	r3, [pc, #520]	@ (8000c4c <programHbridge+0x254>)
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d105      	bne.n	8000a54 <programHbridge+0x5c>
	{
		value_int = ((uint32_t) TIMER_BASE_CLOCK) / timARR;
 8000a48:	4a81      	ldr	r2, [pc, #516]	@ (8000c50 <programHbridge+0x258>)
 8000a4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a52:	67bb      	str	r3, [r7, #120]	@ 0x78
	//  DTG[7:5] = 10x => DT = (64 + DTG[5:0]) x tDTG with tDTG =2xtDTS.	 max (64 + 63)*2*tDTS  	: 3.7236 usec - 7.3890 usec
	//  DTG[7:5] = 110 => DT = (32 + DTG[4:0]) x tDTG with tDTG =8xtDTS.     max (32 + 31)*8*tDTS   : 7.4472 usec - 14.662 usec
	//  DTG[7:5] = 111 => DT = (32 + DTG[4:0]) x tDTG with tDTG = 16 x tDTS. max (32 + 31)*16*tDTS 	: 14.895 usec - 29.324 usec

	// Calculate dead time in usec
	req_dtime_us = (((float) sHbridge.deadtime))*(10000./(float) sHbridge.frequency);
 8000a54:	4b7b      	ldr	r3, [pc, #492]	@ (8000c44 <programHbridge+0x24c>)
 8000a56:	889b      	ldrh	r3, [r3, #4]
 8000a58:	ee07 3a90 	vmov	s15, r3
 8000a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a60:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000a64:	4b77      	ldr	r3, [pc, #476]	@ (8000c44 <programHbridge+0x24c>)
 8000a66:	885b      	ldrh	r3, [r3, #2]
 8000a68:	ee07 3a90 	vmov	s15, r3
 8000a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a70:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000a74:	ed9f 4b70 	vldr	d4, [pc, #448]	@ 8000c38 <programHbridge+0x240>
 8000a78:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000a7c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000a80:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a84:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
		printString(s_output);
	}
*/

	// Minimum allowed dead time is 1 usec.
	if (req_dtime_us < 1.0)
 8000a88:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8000a8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000a90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a98:	d503      	bpl.n	8000aa2 <programHbridge+0xaa>
		req_dtime_us = 1.0;
 8000a9a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000a9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	if (req_dtime_us <= 127*tDTS) //3.6946
 8000aa2:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000aa6:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8000c54 <programHbridge+0x25c>
 8000aaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000aae:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000ab2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aba:	d81e      	bhi.n	8000afa <programHbridge+0x102>
	{
		DT = (uint8_t) (req_dtime_us/tDTS + 0.5);
 8000abc:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000ac0:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000ac4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ac8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000acc:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000ad0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ad4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ad8:	edc7 7a01 	vstr	s15, [r7, #4]
 8000adc:	793b      	ldrb	r3, [r7, #4]
 8000ade:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 127)
 8000ae2:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	da02      	bge.n	8000af0 <programHbridge+0xf8>
			DT = 127;
 8000aea:	237f      	movs	r3, #127	@ 0x7f
 8000aec:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT;
 8000af0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000af4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000af8:	e0bb      	b.n	8000c72 <programHbridge+0x27a>
	}
	else if (req_dtime_us <= 127*2*tDTS) //7.3890
 8000afa:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000afe:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8000c58 <programHbridge+0x260>
 8000b02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b06:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000b0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b12:	d825      	bhi.n	8000b60 <programHbridge+0x168>
	{
		DT = (uint8_t) ((req_dtime_us/(2*tDTS)) - 64 + 0.5);
 8000b14:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000b18:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000b1c:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000b20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b24:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8000c5c <programHbridge+0x264>
 8000b28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b30:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000b34:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b38:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b3c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000b40:	793b      	ldrb	r3, [r7, #4]
 8000b42:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 63)
 8000b46:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000b4a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b4c:	d902      	bls.n	8000b54 <programHbridge+0x15c>
			DT = 63;
 8000b4e:	233f      	movs	r3, #63	@ 0x3f
 8000b50:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT + 0x80;
 8000b54:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000b58:	3b80      	subs	r3, #128	@ 0x80
 8000b5a:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000b5e:	e088      	b.n	8000c72 <programHbridge+0x27a>
	}
	else if (req_dtime_us <= 63*8*tDTS) //14.662
 8000b60:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000b64:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8000c60 <programHbridge+0x268>
 8000b68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b6c:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000b70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b78:	d827      	bhi.n	8000bca <programHbridge+0x1d2>
	{
		DT = (uint8_t) ((req_dtime_us/(8*tDTS)) - 32 + 0.5);
 8000b7a:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000b7e:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8000b82:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b86:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000b8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b8e:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8000c64 <programHbridge+0x26c>
 8000b92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b96:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b9a:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000b9e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ba2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ba6:	edc7 7a01 	vstr	s15, [r7, #4]
 8000baa:	793b      	ldrb	r3, [r7, #4]
 8000bac:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 31)
 8000bb0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000bb4:	2b1f      	cmp	r3, #31
 8000bb6:	d902      	bls.n	8000bbe <programHbridge+0x1c6>
			DT = 31;
 8000bb8:	231f      	movs	r3, #31
 8000bba:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT + 0xC0;
 8000bbe:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000bc2:	3b40      	subs	r3, #64	@ 0x40
 8000bc4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000bc8:	e053      	b.n	8000c72 <programHbridge+0x27a>
	}
	else if (req_dtime_us <= 63*16*tDTS) //29.324
 8000bca:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000bce:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8000c68 <programHbridge+0x270>
 8000bd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bd6:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000bda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000be2:	d843      	bhi.n	8000c6c <programHbridge+0x274>
	{
		DT = (uint8_t) ((req_dtime_us/(16*tDTS)) - 32 + 0.5);
 8000be4:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000be8:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8000bec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000bf0:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000bf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bf8:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000c64 <programHbridge+0x26c>
 8000bfc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000c00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c04:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000c08:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000c0c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c10:	edc7 7a01 	vstr	s15, [r7, #4]
 8000c14:	793b      	ldrb	r3, [r7, #4]
 8000c16:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 31)
 8000c1a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000c1e:	2b1f      	cmp	r3, #31
 8000c20:	d902      	bls.n	8000c28 <programHbridge+0x230>
			DT = 31;
 8000c22:	231f      	movs	r3, #31
 8000c24:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT + 0xE0;
 8000c28:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000c2c:	3b20      	subs	r3, #32
 8000c2e:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000c32:	e01e      	b.n	8000c72 <programHbridge+0x27a>
 8000c34:	f3af 8000 	nop.w
 8000c38:	00000000 	.word	0x00000000
 8000c3c:	40c38800 	.word	0x40c38800
 8000c40:	3cee500f 	.word	0x3cee500f
 8000c44:	2400001c 	.word	0x2400001c
 8000c48:	4c032156 	.word	0x4c032156
 8000c4c:	24000000 	.word	0x24000000
 8000c50:	020c8558 	.word	0x020c8558
 8000c54:	42fe0000 	.word	0x42fe0000
 8000c58:	437e0000 	.word	0x437e0000
 8000c5c:	42800000 	.word	0x42800000
 8000c60:	43fc0000 	.word	0x43fc0000
 8000c64:	42000000 	.word	0x42000000
 8000c68:	447c0000 	.word	0x447c0000
	}
	else
		DTG = 255;
 8000c6c:	23ff      	movs	r3, #255	@ 0xff
 8000c6e:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96

	uint32_t temp = TIM1->BDTR & 0xFFFFFF00;		//Mask out DTG
 8000c72:	4b4e      	ldr	r3, [pc, #312]	@ (8000dac <programHbridge+0x3b4>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c76:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000c7a:	677b      	str	r3, [r7, #116]	@ 0x74
	timBDTR = temp | DTG;							//Add new DTG
 8000c7c:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000c80:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000c82:	4313      	orrs	r3, r2
 8000c84:	673b      	str	r3, [r7, #112]	@ 0x70

	//Change timer1 settings
	htim1.Init.Period = timARR;   // Updating internal structure for timer
 8000c86:	4a4a      	ldr	r2, [pc, #296]	@ (8000db0 <programHbridge+0x3b8>)
 8000c88:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000c8c:	60d3      	str	r3, [r2, #12]
	TIM1->ARR = timARR;			  // Update period
 8000c8e:	4a47      	ldr	r2, [pc, #284]	@ (8000dac <programHbridge+0x3b4>)
 8000c90:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000c94:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM1->CCR1 = timCCR1;		  // Update duty cycle
 8000c96:	4a45      	ldr	r2, [pc, #276]	@ (8000dac <programHbridge+0x3b4>)
 8000c98:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000c9a:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM1->BDTR = timBDTR;	      // Update dead time
 8000c9c:	4a43      	ldr	r2, [pc, #268]	@ (8000dac <programHbridge+0x3b4>)
 8000c9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000ca0:	6453      	str	r3, [r2, #68]	@ 0x44

	if (debug == 1) {
 8000ca2:	4b44      	ldr	r3, [pc, #272]	@ (8000db4 <programHbridge+0x3bc>)
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d160      	bne.n	8000d6c <programHbridge+0x374>
		//sprintf(s_output, "ARR %lu CCR1 %lu BDTR %lu", timARR, timCCR1, timBDTR & 0xFF);
		//printString(s_output);

		float calcDT = 0;
 8000caa:	f04f 0300 	mov.w	r3, #0
 8000cae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		//  DTG[7:5] = 0xx => DT = DTG[7:0] x tDTG with tDTG = tDTS.			 max 127*tDTS   		: 0.0000 usec - 3.6946 usec
		if ((DTG & 0x80) == 0) {
 8000cb2:	f997 3096 	ldrsb.w	r3, [r7, #150]	@ 0x96
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db0b      	blt.n	8000cd2 <programHbridge+0x2da>
			calcDT = DTG*tDTS;
 8000cba:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000cbe:	ee07 3a90 	vmov	s15, r3
 8000cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc6:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cce:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		//  DTG[7:5] = 10x => DT = (64 + DTG[5:0]) x tDTG with tDTG =2xtDTS.	 max (64 + 63)*2*tDTS  	: 3.7236 usec - 7.3890 usec
		if ((DTG & 0xC0) == 0x80) {
 8000cd2:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000cd6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000cda:	2b80      	cmp	r3, #128	@ 0x80
 8000cdc:	d10f      	bne.n	8000cfe <programHbridge+0x306>
			calcDT = (64 + (DTG & 0x3F))*2*tDTS;
 8000cde:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000ce2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000ce6:	3340      	adds	r3, #64	@ 0x40
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	ee07 3a90 	vmov	s15, r3
 8000cee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cf2:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cfa:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		//  DTG[7:5] = 110 => DT = (32 + DTG[4:0]) x tDTG with tDTG =8xtDTS.     max (32 + 31)*8*tDTS   : 7.4472 usec - 14.662 usec
		if ((DTG & 0xE0) == 0xC0) {
 8000cfe:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000d02:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000d06:	2bc0      	cmp	r3, #192	@ 0xc0
 8000d08:	d10f      	bne.n	8000d2a <programHbridge+0x332>
			calcDT = (32 + (DTG & 0x1F))*8*tDTS;
 8000d0a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000d0e:	f003 031f 	and.w	r3, r3, #31
 8000d12:	3320      	adds	r3, #32
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	ee07 3a90 	vmov	s15, r3
 8000d1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d1e:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d26:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		//  DTG[7:5] = 111 => DT = (32 + DTG[4:0]) x tDTG with tDTG = 16 x tDTS. max (32 + 31)*16*tDTS 	: 14.895 usec - 29.324 usec
		if ((DTG & 0xE0) == 0xE0) {
 8000d2a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000d2e:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000d32:	2be0      	cmp	r3, #224	@ 0xe0
 8000d34:	d10f      	bne.n	8000d56 <programHbridge+0x35e>
			calcDT = (32 + (DTG & 0x1F))*16*tDTS;
 8000d36:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000d3a:	f003 031f 	and.w	r3, r3, #31
 8000d3e:	3320      	adds	r3, #32
 8000d40:	011b      	lsls	r3, r3, #4
 8000d42:	ee07 3a90 	vmov	s15, r3
 8000d46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d4a:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d52:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		value_int = (uint32_t) 1000*calcDT;
 8000d56:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8000d5a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000db8 <programHbridge+0x3c0>
 8000d5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d66:	ee17 3a90 	vmov	r3, s15
 8000d6a:	67bb      	str	r3, [r7, #120]	@ 0x78
		//sprintf(s_output, "\n\rSet dead time: %lu (ns)\n\r", value_int);
		//printString(s_output);
	}

	//Start driving the H-bridge
	if (sHbridge.on && (TIM_CHANNEL_STATE_GET(&htim1, TIM_CHANNEL_1) == HAL_TIM_CHANNEL_STATE_READY))
 8000d6c:	4b13      	ldr	r3, [pc, #76]	@ (8000dbc <programHbridge+0x3c4>)
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d010      	beq.n	8000d96 <programHbridge+0x39e>
 8000d74:	4b0e      	ldr	r3, [pc, #56]	@ (8000db0 <programHbridge+0x3b8>)
 8000d76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d10a      	bne.n	8000d96 <programHbridge+0x39e>
	{
		HAL_TIM_MspPostInit(&htim1);	//Setup GPIO for timer alternate function
 8000d80:	480b      	ldr	r0, [pc, #44]	@ (8000db0 <programHbridge+0x3b8>)
 8000d82:	f003 fb19 	bl	80043b8 <HAL_TIM_MspPostInit>
		//Start TIMER 1 PWM & interrupts
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  //This will start channel PWM1
 8000d86:	2100      	movs	r1, #0
 8000d88:	4809      	ldr	r0, [pc, #36]	@ (8000db0 <programHbridge+0x3b8>)
 8000d8a:	f00d fd19 	bl	800e7c0 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); //This will start channel PWM1N
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4807      	ldr	r0, [pc, #28]	@ (8000db0 <programHbridge+0x3b8>)
 8000d92:	f00e ff3d 	bl	800fc10 <HAL_TIMEx_PWMN_Start>
	}

	//Stop driving the H-bridge
	if (!sHbridge.on)
 8000d96:	4b09      	ldr	r3, [pc, #36]	@ (8000dbc <programHbridge+0x3c4>)
 8000d98:	881b      	ldrh	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d101      	bne.n	8000da2 <programHbridge+0x3aa>
	{
		stopHbridge();
 8000d9e:	f7ff fdd3 	bl	8000948 <stopHbridge>
	}

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);

}
 8000da2:	bf00      	nop
 8000da4:	3798      	adds	r7, #152	@ 0x98
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40010000 	.word	0x40010000
 8000db0:	24000ecc 	.word	0x24000ecc
 8000db4:	24000000 	.word	0x24000000
 8000db8:	447a0000 	.word	0x447a0000
 8000dbc:	2400001c 	.word	0x2400001c

08000dc0 <convertADC12data>:
#define ADC1_VplaL1			4	//Plasma voltage L1
#define ADC2_VplaL2			5	//Plasma voltage L2

//Convert ADC1 & ADC2 data to voltages and current
float convertADC12data(uint32_t item, char **text)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
	float result = 0;
 8000dca:	f04f 0300 	mov.w	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]
* 3.3           *   (ADCData/65536.0)       *    1000
*   ^                   ^       ^                  ^
*   |                   |       |                  |
 * full scale V      Raw Data   Max ADC Value    Convert to mV
 */
	switch (item % (2*ADC12_NO_CHANNELS)) {
 8000dd0:	6879      	ldr	r1, [r7, #4]
 8000dd2:	4ba3      	ldr	r3, [pc, #652]	@ (8001060 <convertADC12data+0x2a0>)
 8000dd4:	fba3 2301 	umull	r2, r3, r3, r1
 8000dd8:	089a      	lsrs	r2, r3, #2
 8000dda:	4613      	mov	r3, r2
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	4413      	add	r3, r2
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	1aca      	subs	r2, r1, r3
 8000de4:	2a05      	cmp	r2, #5
 8000de6:	f200 8107 	bhi.w	8000ff8 <convertADC12data+0x238>
 8000dea:	a301      	add	r3, pc, #4	@ (adr r3, 8000df0 <convertADC12data+0x30>)
 8000dec:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8000df0:	08000e09 	.word	0x08000e09
 8000df4:	08000e2d 	.word	0x08000e2d
 8000df8:	08000e99 	.word	0x08000e99
 8000dfc:	08000ed5 	.word	0x08000ed5
 8000e00:	08000f0f 	.word	0x08000f0f
 8000e04:	08000f79 	.word	0x08000f79
		case ADC1_TIM1_CH1:
			result = sADC.adc12_data[item];
 8000e08:	4a96      	ldr	r2, [pc, #600]	@ (8001064 <convertADC12data+0x2a4>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e10:	ee07 3a90 	vmov	s15, r3
 8000e14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e18:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f000 80df 	beq.w	8000fe2 <convertADC12data+0x222>
				*text ="ADC1_TIM1_CH1";
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	4a90      	ldr	r2, [pc, #576]	@ (8001068 <convertADC12data+0x2a8>)
 8000e28:	601a      	str	r2, [r3, #0]
			break;
 8000e2a:	e0da      	b.n	8000fe2 <convertADC12data+0x222>

		case ADC2_Is:
			V = 3.3*(((float) sADC.adc12_data[item])/65536.0)*1000;
 8000e2c:	4a8d      	ldr	r2, [pc, #564]	@ (8001064 <convertADC12data+0x2a4>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e34:	ee07 3a90 	vmov	s15, r3
 8000e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e3c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e40:	ed9f 5b73 	vldr	d5, [pc, #460]	@ 8001010 <convertADC12data+0x250>
 8000e44:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e48:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8001018 <convertADC12data+0x258>
 8000e4c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e50:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8001020 <convertADC12data+0x260>
 8000e54:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e58:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e5c:	edc7 7a02 	vstr	s15, [r7, #8]
			result =  2000*(V - 1.585714)/3.594286; //V;
 8000e60:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e64:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e68:	ed9f 6b6f 	vldr	d6, [pc, #444]	@ 8001028 <convertADC12data+0x268>
 8000e6c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e70:	ed9f 6b6f 	vldr	d6, [pc, #444]	@ 8001030 <convertADC12data+0x270>
 8000e74:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000e78:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8001038 <convertADC12data+0x278>
 8000e7c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e80:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e84:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f000 80ab 	beq.w	8000fe6 <convertADC12data+0x226>
				*text ="ADC2_Is(mA)";
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	4a76      	ldr	r2, [pc, #472]	@ (800106c <convertADC12data+0x2ac>)
 8000e94:	601a      	str	r2, [r3, #0]
			break;
 8000e96:	e0a6      	b.n	8000fe6 <convertADC12data+0x226>

		case ADC1_VbriS1:
			result =  1000*((12.0+2000.0)/12.0)*3.3*(((float) sADC.adc12_data[item])/65536.0); // 3.3*(((float) sADC.adc12_data[item])/65536.0)*1000;
 8000e98:	4a72      	ldr	r2, [pc, #456]	@ (8001064 <convertADC12data+0x2a4>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ea0:	ee07 3a90 	vmov	s15, r3
 8000ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ea8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000eac:	ed9f 5b58 	vldr	d5, [pc, #352]	@ 8001010 <convertADC12data+0x250>
 8000eb0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000eb4:	ed9f 6b62 	vldr	d6, [pc, #392]	@ 8001040 <convertADC12data+0x280>
 8000eb8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ebc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ec0:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f000 808f 	beq.w	8000fea <convertADC12data+0x22a>
				*text ="ADC1_VbriS1(mV)";
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	4a68      	ldr	r2, [pc, #416]	@ (8001070 <convertADC12data+0x2b0>)
 8000ed0:	601a      	str	r2, [r3, #0]
			break;
 8000ed2:	e08a      	b.n	8000fea <convertADC12data+0x22a>

		case ADC2_VbriS2:
			result =  1000*((12.0+2000.0)/12.0)*3.3*(((float) sADC.adc12_data[item])/65536.0); //3.3*(((float) sADC.adc12_data[item])/65536.0) * 1000;
 8000ed4:	4a63      	ldr	r2, [pc, #396]	@ (8001064 <convertADC12data+0x2a4>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000edc:	ee07 3a90 	vmov	s15, r3
 8000ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ee4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000ee8:	ed9f 5b49 	vldr	d5, [pc, #292]	@ 8001010 <convertADC12data+0x250>
 8000eec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ef0:	ed9f 6b53 	vldr	d6, [pc, #332]	@ 8001040 <convertADC12data+0x280>
 8000ef4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ef8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000efc:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d073      	beq.n	8000fee <convertADC12data+0x22e>
				*text ="ADC2_VbriS2(mV)";
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	4a5a      	ldr	r2, [pc, #360]	@ (8001074 <convertADC12data+0x2b4>)
 8000f0a:	601a      	str	r2, [r3, #0]
			break;
 8000f0c:	e06f      	b.n	8000fee <convertADC12data+0x22e>

		case ADC1_VplaL1:
			V = 3.3*(((float) sADC.adc12_data[item])/65536.0) * 1000;
 8000f0e:	4a55      	ldr	r2, [pc, #340]	@ (8001064 <convertADC12data+0x2a4>)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f16:	ee07 3a90 	vmov	s15, r3
 8000f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f1e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000f22:	ed9f 5b3b 	vldr	d5, [pc, #236]	@ 8001010 <convertADC12data+0x250>
 8000f26:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f2a:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 8001018 <convertADC12data+0x258>
 8000f2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f32:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 8001020 <convertADC12data+0x260>
 8000f36:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f3a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f3e:	edc7 7a02 	vstr	s15, [r7, #8]
			result =  1E6*(V-1.648348)/0.999; //V;//
 8000f42:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f46:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f4a:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 8001048 <convertADC12data+0x288>
 8000f4e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f52:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 8001050 <convertADC12data+0x290>
 8000f56:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f5a:	ed9f 5b3f 	vldr	d5, [pc, #252]	@ 8001058 <convertADC12data+0x298>
 8000f5e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f62:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f66:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d040      	beq.n	8000ff2 <convertADC12data+0x232>
				*text ="ADC1_VplaL1(mV)";
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	4a41      	ldr	r2, [pc, #260]	@ (8001078 <convertADC12data+0x2b8>)
 8000f74:	601a      	str	r2, [r3, #0]
			break;
 8000f76:	e03c      	b.n	8000ff2 <convertADC12data+0x232>

		case ADC2_VplaL2:
			//V is the directly measured voltage from the ADC in mV
			V = 3.3*(((float) sADC.adc12_data[item])/65536.0) * 1000;
 8000f78:	4a3a      	ldr	r2, [pc, #232]	@ (8001064 <convertADC12data+0x2a4>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f80:	ee07 3a90 	vmov	s15, r3
 8000f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f88:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000f8c:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 8001010 <convertADC12data+0x250>
 8000f90:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f94:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 8001018 <convertADC12data+0x258>
 8000f98:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f9c:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 8001020 <convertADC12data+0x260>
 8000fa0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fa4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fa8:	edc7 7a02 	vstr	s15, [r7, #8]
			//result is the True voltage at L2 (corrected for voltage divider)
			result =  1E6*(V-1.648348)/0.999;
 8000fac:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fb0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fb4:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8001048 <convertADC12data+0x288>
 8000fb8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000fbc:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8001050 <convertADC12data+0x290>
 8000fc0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000fc4:	ed9f 5b24 	vldr	d5, [pc, #144]	@ 8001058 <convertADC12data+0x298>
 8000fc8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fcc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fd0:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d00d      	beq.n	8000ff6 <convertADC12data+0x236>
				*text ="ADC2_VplaL2(mV)";
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	4a27      	ldr	r2, [pc, #156]	@ (800107c <convertADC12data+0x2bc>)
 8000fde:	601a      	str	r2, [r3, #0]
			break;
 8000fe0:	e009      	b.n	8000ff6 <convertADC12data+0x236>
			break;
 8000fe2:	bf00      	nop
 8000fe4:	e008      	b.n	8000ff8 <convertADC12data+0x238>
			break;
 8000fe6:	bf00      	nop
 8000fe8:	e006      	b.n	8000ff8 <convertADC12data+0x238>
			break;
 8000fea:	bf00      	nop
 8000fec:	e004      	b.n	8000ff8 <convertADC12data+0x238>
			break;
 8000fee:	bf00      	nop
 8000ff0:	e002      	b.n	8000ff8 <convertADC12data+0x238>
			break;
 8000ff2:	bf00      	nop
 8000ff4:	e000      	b.n	8000ff8 <convertADC12data+0x238>
			break;
 8000ff6:	bf00      	nop
	}

	return(result);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	ee07 3a90 	vmov	s15, r3
}
 8000ffe:	eeb0 0a67 	vmov.f32	s0, s15
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	f3af 8000 	nop.w
 8001010:	00000000 	.word	0x00000000
 8001014:	40f00000 	.word	0x40f00000
 8001018:	66666666 	.word	0x66666666
 800101c:	400a6666 	.word	0x400a6666
 8001020:	00000000 	.word	0x00000000
 8001024:	408f4000 	.word	0x408f4000
 8001028:	a4acf313 	.word	0xa4acf313
 800102c:	3ff95f15 	.word	0x3ff95f15
 8001030:	00000000 	.word	0x00000000
 8001034:	409f4000 	.word	0x409f4000
 8001038:	04b3c3e7 	.word	0x04b3c3e7
 800103c:	400cc119 	.word	0x400cc119
 8001040:	ffffffff 	.word	0xffffffff
 8001044:	4120e2a7 	.word	0x4120e2a7
 8001048:	2706d506 	.word	0x2706d506
 800104c:	3ffa5fa2 	.word	0x3ffa5fa2
 8001050:	00000000 	.word	0x00000000
 8001054:	412e8480 	.word	0x412e8480
 8001058:	d916872b 	.word	0xd916872b
 800105c:	3feff7ce 	.word	0x3feff7ce
 8001060:	aaaaaaab 	.word	0xaaaaaaab
 8001064:	24000330 	.word	0x24000330
 8001068:	080145d0 	.word	0x080145d0
 800106c:	080145e0 	.word	0x080145e0
 8001070:	080145ec 	.word	0x080145ec
 8001074:	080145fc 	.word	0x080145fc
 8001078:	0801460c 	.word	0x0801460c
 800107c:	0801461c 	.word	0x0801461c

08001080 <printADC12data>:

//Print measured ADC1 and ADC2 data on UART3
void printADC12data(void)
{
 8001080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001082:	b0f7      	sub	sp, #476	@ 0x1dc
 8001084:	af10      	add	r7, sp, #64	@ 0x40
	char *p_text[2*ADC12_NO_CHANNELS];
	float result[2*ADC12_NO_CHANNELS];

	if (debug == 1)
 8001086:	4ba0      	ldr	r3, [pc, #640]	@ (8001308 <printADC12data+0x288>)
 8001088:	881b      	ldrh	r3, [r3, #0]
 800108a:	2b01      	cmp	r3, #1
 800108c:	f040 8136 	bne.w	80012fc <printADC12data+0x27c>
	{
		printCR();
 8001090:	f7ff fb7a 	bl	8000788 <printCR>
		printNumber("No data: ", sADC.nADC12Read, 1);
 8001094:	4b9d      	ldr	r3, [pc, #628]	@ (800130c <printADC12data+0x28c>)
 8001096:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 800109a:	b29b      	uxth	r3, r3
 800109c:	2201      	movs	r2, #1
 800109e:	4619      	mov	r1, r3
 80010a0:	489b      	ldr	r0, [pc, #620]	@ (8001310 <printADC12data+0x290>)
 80010a2:	f7ff fbc3 	bl	800082c <printNumber>
		for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 80010ac:	e119      	b.n	80012e2 <printADC12data+0x262>
		{
			int ii = i % (2*ADC12_NO_CHANNELS);
 80010ae:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80010b2:	4b98      	ldr	r3, [pc, #608]	@ (8001314 <printADC12data+0x294>)
 80010b4:	fb83 3102 	smull	r3, r1, r3, r2
 80010b8:	17d3      	asrs	r3, r2, #31
 80010ba:	1ac9      	subs	r1, r1, r3
 80010bc:	460b      	mov	r3, r1
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	440b      	add	r3, r1
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
			result[ii] = convertADC12data(i, &p_text[ii]);
 80010ca:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 80010ce:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 80010d2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	4413      	add	r3, r2
 80010da:	4619      	mov	r1, r3
 80010dc:	f7ff fe70 	bl	8000dc0 <convertADC12data>
 80010e0:	eef0 7a40 	vmov.f32	s15, s0
 80010e4:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80010ee:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80010f2:	4413      	add	r3, r2
 80010f4:	3b38      	subs	r3, #56	@ 0x38
 80010f6:	edc3 7a00 	vstr	s15, [r3]
			char text[300];
			if (ii == 5)
 80010fa:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80010fe:	2b05      	cmp	r3, #5
 8001100:	f040 80ea 	bne.w	80012d8 <printADC12data+0x258>
			{
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001104:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001108:	4a82      	ldr	r2, [pc, #520]	@ (8001314 <printADC12data+0x294>)
 800110a:	fb82 1203 	smull	r1, r2, r2, r3
 800110e:	17db      	asrs	r3, r3, #31
 8001110:	eba2 0c03 	sub.w	ip, r2, r3
						p_text[ii-5],                     sADC.adc12_data[i-5],
 8001114:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001118:	3b05      	subs	r3, #5
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001120:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001124:	4413      	add	r3, r2
 8001126:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800112a:	62fb      	str	r3, [r7, #44]	@ 0x2c
						p_text[ii-5],                     sADC.adc12_data[i-5],
 800112c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001130:	3b05      	subs	r3, #5
 8001132:	4a76      	ldr	r2, [pc, #472]	@ (800130c <printADC12data+0x28c>)
 8001134:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001138:	62bb      	str	r3, [r7, #40]	@ 0x28
						p_text[ii-4], (int) result[ii-4], sADC.adc12_data[i-4],
 800113a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800113e:	3b04      	subs	r3, #4
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 8001146:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800114a:	18d3      	adds	r3, r2, r3
 800114c:	f853 5c20 	ldr.w	r5, [r3, #-32]
						p_text[ii-4], (int) result[ii-4], sADC.adc12_data[i-4],
 8001150:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001154:	3b04      	subs	r3, #4
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 800115c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001160:	18d3      	adds	r3, r2, r3
 8001162:	3b38      	subs	r3, #56	@ 0x38
 8001164:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001168:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800116c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
						p_text[ii-4], (int) result[ii-4], sADC.adc12_data[i-4],
 8001170:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001174:	3b04      	subs	r3, #4
 8001176:	4a65      	ldr	r2, [pc, #404]	@ (800130c <printADC12data+0x28c>)
 8001178:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800117c:	623b      	str	r3, [r7, #32]
						p_text[ii-3], (int) result[ii-3], sADC.adc12_data[i-3],
 800117e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001182:	3b03      	subs	r3, #3
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 800118a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800118e:	18d3      	adds	r3, r2, r3
 8001190:	f853 6c20 	ldr.w	r6, [r3, #-32]
						p_text[ii-3], (int) result[ii-3], sADC.adc12_data[i-3],
 8001194:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001198:	3b03      	subs	r3, #3
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 80011a0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011a4:	18d3      	adds	r3, r2, r3
 80011a6:	3b38      	subs	r3, #56	@ 0x38
 80011a8:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b0:	edc7 7a07 	vstr	s15, [r7, #28]
						p_text[ii-3], (int) result[ii-3], sADC.adc12_data[i-3],
 80011b4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80011b8:	3b03      	subs	r3, #3
 80011ba:	4a54      	ldr	r2, [pc, #336]	@ (800130c <printADC12data+0x28c>)
 80011bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011c0:	61bb      	str	r3, [r7, #24]
						p_text[ii-2], (int) result[ii-2], sADC.adc12_data[i-2],
 80011c2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80011c6:	3b02      	subs	r3, #2
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 80011ce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011d2:	18d3      	adds	r3, r2, r3
 80011d4:	f853 2c20 	ldr.w	r2, [r3, #-32]
 80011d8:	617a      	str	r2, [r7, #20]
						p_text[ii-2], (int) result[ii-2], sADC.adc12_data[i-2],
 80011da:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80011de:	3b02      	subs	r3, #2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	f503 71b4 	add.w	r1, r3, #360	@ 0x168
 80011e6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011ea:	18cb      	adds	r3, r1, r3
 80011ec:	3b38      	subs	r3, #56	@ 0x38
 80011ee:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011f6:	edc7 7a04 	vstr	s15, [r7, #16]
						p_text[ii-2], (int) result[ii-2], sADC.adc12_data[i-2],
 80011fa:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80011fe:	3b02      	subs	r3, #2
 8001200:	4a42      	ldr	r2, [pc, #264]	@ (800130c <printADC12data+0x28c>)
 8001202:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001206:	60fb      	str	r3, [r7, #12]
						p_text[ii-1], (int) result[ii-1], sADC.adc12_data[i-1],
 8001208:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800120c:	3b01      	subs	r3, #1
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	f503 71b4 	add.w	r1, r3, #360	@ 0x168
 8001214:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001218:	18cb      	adds	r3, r1, r3
 800121a:	f853 1c20 	ldr.w	r1, [r3, #-32]
 800121e:	60b9      	str	r1, [r7, #8]
						p_text[ii-1], (int) result[ii-1], sADC.adc12_data[i-1],
 8001220:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001224:	3b01      	subs	r3, #1
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	f503 70b4 	add.w	r0, r3, #360	@ 0x168
 800122c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001230:	18c3      	adds	r3, r0, r3
 8001232:	3b38      	subs	r3, #56	@ 0x38
 8001234:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001238:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800123c:	edc7 7a01 	vstr	s15, [r7, #4]
						p_text[ii-1], (int) result[ii-1], sADC.adc12_data[i-1],
 8001240:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001244:	1e5a      	subs	r2, r3, #1
 8001246:	4b31      	ldr	r3, [pc, #196]	@ (800130c <printADC12data+0x28c>)
 8001248:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800124c:	603b      	str	r3, [r7, #0]
 800124e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	f503 70b4 	add.w	r0, r3, #360	@ 0x168
 8001258:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800125c:	18c3      	adds	r3, r0, r3
 800125e:	f853 1c20 	ldr.w	r1, [r3, #-32]
						p_text[ii],   (int) result[ii],   sADC.adc12_data[i]);
 8001262:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	f503 70b4 	add.w	r0, r3, #360	@ 0x168
 800126c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001270:	18c3      	adds	r3, r0, r3
 8001272:	3b38      	subs	r3, #56	@ 0x38
 8001274:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001278:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800127c:	ee17 4a90 	vmov	r4, s15
						p_text[ii],   (int) result[ii],   sADC.adc12_data[i]);
 8001280:	4a22      	ldr	r2, [pc, #136]	@ (800130c <printADC12data+0x28c>)
 8001282:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001286:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800128a:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800128e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8001290:	940e      	str	r4, [sp, #56]	@ 0x38
 8001292:	910d      	str	r1, [sp, #52]	@ 0x34
 8001294:	683c      	ldr	r4, [r7, #0]
 8001296:	940c      	str	r4, [sp, #48]	@ 0x30
 8001298:	687c      	ldr	r4, [r7, #4]
 800129a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	910a      	str	r1, [sp, #40]	@ 0x28
 80012a0:	68f9      	ldr	r1, [r7, #12]
 80012a2:	9109      	str	r1, [sp, #36]	@ 0x24
 80012a4:	6939      	ldr	r1, [r7, #16]
 80012a6:	9108      	str	r1, [sp, #32]
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	9207      	str	r2, [sp, #28]
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	9206      	str	r2, [sp, #24]
 80012b0:	69fa      	ldr	r2, [r7, #28]
 80012b2:	9205      	str	r2, [sp, #20]
 80012b4:	9604      	str	r6, [sp, #16]
 80012b6:	6a3a      	ldr	r2, [r7, #32]
 80012b8:	9203      	str	r2, [sp, #12]
 80012ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012bc:	9202      	str	r2, [sp, #8]
 80012be:	9501      	str	r5, [sp, #4]
 80012c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012c2:	9200      	str	r2, [sp, #0]
 80012c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012c6:	4662      	mov	r2, ip
 80012c8:	4913      	ldr	r1, [pc, #76]	@ (8001318 <printADC12data+0x298>)
 80012ca:	f011 f83f 	bl	801234c <siprintf>
				printString(text);
 80012ce:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fa68 	bl	80007a8 <printString>
		for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i++)
 80012d8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80012dc:	3301      	adds	r3, #1
 80012de:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 80012e2:	4b0a      	ldr	r3, [pc, #40]	@ (800130c <printADC12data+0x28c>)
 80012e4:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 80012e8:	4613      	mov	r3, r2
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	4413      	add	r3, r2
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	461a      	mov	r2, r3
 80012f2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80012f6:	429a      	cmp	r2, r3
 80012f8:	f63f aed9 	bhi.w	80010ae <printADC12data+0x2e>
			}
		}
	}
}
 80012fc:	bf00      	nop
 80012fe:	f507 77ce 	add.w	r7, r7, #412	@ 0x19c
 8001302:	46bd      	mov	sp, r7
 8001304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001306:	bf00      	nop
 8001308:	24000000 	.word	0x24000000
 800130c:	24000330 	.word	0x24000330
 8001310:	0801462c 	.word	0x0801462c
 8001314:	2aaaaaab 	.word	0x2aaaaaab
 8001318:	08014638 	.word	0x08014638

0800131c <freqCorrection>:

//Calculate frequency correction
//Returns 1 if a valid frequency correction is calculated, otherwise 0
uint8_t freqCorrection(int16_t *freqCorr)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08e      	sub	sp, #56	@ 0x38
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	int start_index=0;
 8001324:	2300      	movs	r3, #0
 8001326:	637b      	str	r3, [r7, #52]	@ 0x34
	int stop_index=0;
 8001328:	2300      	movs	r3, #0
 800132a:	633b      	str	r3, [r7, #48]	@ 0x30
	int number_of_lows=0;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
	int lowDetected = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int highDetected = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	62bb      	str	r3, [r7, #40]	@ 0x28
	float min = 100000;
 8001338:	4b54      	ldr	r3, [pc, #336]	@ (800148c <freqCorrection+0x170>)
 800133a:	627b      	str	r3, [r7, #36]	@ 0x24
	float max = -100000;
 800133c:	4b54      	ldr	r3, [pc, #336]	@ (8001490 <freqCorrection+0x174>)
 800133e:	623b      	str	r3, [r7, #32]
	float norm = 0;
 8001340:	f04f 0300 	mov.w	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]

	//Find when MOSFET branch is on (start and stop time)
	//Find minimum and maximum value of bridge current
 	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 8001346:	2300      	movs	r3, #0
 8001348:	61bb      	str	r3, [r7, #24]
 800134a:	e041      	b.n	80013d0 <freqCorrection+0xb4>
	{
		// Find minimum of bridge current
		float data = convertADC12data(i+ADC2_Is, NULL);
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	3301      	adds	r3, #1
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fd34 	bl	8000dc0 <convertADC12data>
 8001358:	ed87 0a02 	vstr	s0, [r7, #8]
		if (data < min)
 800135c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001360:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001364:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800136c:	d501      	bpl.n	8001372 <freqCorrection+0x56>
		{
			min = data;
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	627b      	str	r3, [r7, #36]	@ 0x24
			//HAL_UART_Transmit(huart3, min);
			//printCR();
		}
		// Find maximum
		if (data > max)
 8001372:	ed97 7a02 	vldr	s14, [r7, #8]
 8001376:	edd7 7a08 	vldr	s15, [r7, #32]
 800137a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800137e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001382:	dd01      	ble.n	8001388 <freqCorrection+0x6c>
		{
			max = data;
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	623b      	str	r3, [r7, #32]
		}
		// Check for low
		if (!lowDetected && sADC.adc12_data[i+ADC1_TIM1_CH1] < 500)
 8001388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10a      	bne.n	80013a4 <freqCorrection+0x88>
 800138e:	4a41      	ldr	r2, [pc, #260]	@ (8001494 <freqCorrection+0x178>)
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001396:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800139a:	d203      	bcs.n	80013a4 <freqCorrection+0x88>
		{
			//First low detected
			start_index = i; 		// Store index of first low detected
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	637b      	str	r3, [r7, #52]	@ 0x34
			lowDetected = 1;
 80013a0:	2301      	movs	r3, #1
 80013a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
		//Check for high
		if (!highDetected && lowDetected && sADC.adc12_data[i+ADC1_TIM1_CH1] > 65000)
 80013a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d10f      	bne.n	80013ca <freqCorrection+0xae>
 80013aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d00c      	beq.n	80013ca <freqCorrection+0xae>
 80013b0:	4a38      	ldr	r2, [pc, #224]	@ (8001494 <freqCorrection+0x178>)
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013b8:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 80013bc:	4293      	cmp	r3, r2
 80013be:	d904      	bls.n	80013ca <freqCorrection+0xae>
		{
			//High after first low detected
			stop_index = i-6;		// Store index of last low
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	3b06      	subs	r3, #6
 80013c4:	633b      	str	r3, [r7, #48]	@ 0x30
			highDetected = 1;
 80013c6:	2301      	movs	r3, #1
 80013c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	3306      	adds	r3, #6
 80013ce:	61bb      	str	r3, [r7, #24]
 80013d0:	4b30      	ldr	r3, [pc, #192]	@ (8001494 <freqCorrection+0x178>)
 80013d2:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 80013d6:	4613      	mov	r3, r2
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4413      	add	r3, r2
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	461a      	mov	r2, r3
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d8b2      	bhi.n	800134c <freqCorrection+0x30>
		}
	}

	// Check maximum and minimum difference
	norm = max - min;
 80013e6:	ed97 7a08 	vldr	s14, [r7, #32]
 80013ea:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80013ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013f2:	edc7 7a07 	vstr	s15, [r7, #28]
	if (norm < 10)
 80013f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80013fa:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80013fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001406:	d501      	bpl.n	800140c <freqCorrection+0xf0>
		norm = max;
 8001408:	6a3b      	ldr	r3, [r7, #32]
 800140a:	61fb      	str	r3, [r7, #28]

	number_of_lows = (stop_index - start_index)/6 + 1;
 800140c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800140e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	4a21      	ldr	r2, [pc, #132]	@ (8001498 <freqCorrection+0x17c>)
 8001414:	fb82 1203 	smull	r1, r2, r2, r3
 8001418:	17db      	asrs	r3, r3, #31
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	3301      	adds	r3, #1
 800141e:	617b      	str	r3, [r7, #20]
	if (lowDetected && highDetected && (number_of_lows >= 5))
 8001420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001422:	2b00      	cmp	r3, #0
 8001424:	d02c      	beq.n	8001480 <freqCorrection+0x164>
 8001426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001428:	2b00      	cmp	r3, #0
 800142a:	d029      	beq.n	8001480 <freqCorrection+0x164>
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	2b04      	cmp	r3, #4
 8001430:	dd26      	ble.n	8001480 <freqCorrection+0x164>
	{
		float upper = convertADC12data(start_index+ADC2_Is+6, NULL);
 8001432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001434:	3307      	adds	r3, #7
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fcc1 	bl	8000dc0 <convertADC12data>
 800143e:	ed87 0a04 	vstr	s0, [r7, #16]
		float lower = convertADC12data(stop_index+ADC2_Is-6, NULL);
 8001442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001444:	3b05      	subs	r3, #5
 8001446:	2100      	movs	r1, #0
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fcb9 	bl	8000dc0 <convertADC12data>
 800144e:	ed87 0a03 	vstr	s0, [r7, #12]
		*freqCorr = (int16_t) 1000*(upper - lower)/norm;
 8001452:	ed97 7a04 	vldr	s14, [r7, #16]
 8001456:	edd7 7a03 	vldr	s15, [r7, #12]
 800145a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800149c <freqCorrection+0x180>
 8001462:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001466:	ed97 7a07 	vldr	s14, [r7, #28]
 800146a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800146e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001472:	ee17 3a90 	vmov	r3, s15
 8001476:	b21a      	sxth	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	801a      	strh	r2, [r3, #0]
		return(1);
 800147c:	2301      	movs	r3, #1
 800147e:	e000      	b.n	8001482 <freqCorrection+0x166>
	}
	else
		return(0);
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3738      	adds	r7, #56	@ 0x38
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	47c35000 	.word	0x47c35000
 8001490:	c7c35000 	.word	0xc7c35000
 8001494:	24000330 	.word	0x24000330
 8001498:	2aaaaaab 	.word	0x2aaaaaab
 800149c:	447a0000 	.word	0x447a0000

080014a0 <voltageCorrection>:


//Calculate voltage correction base on a desired RMS voltage
//Returns 1 if a valid frequency correction is calculated, otherwise 0
uint8_t voltageCorrection(int16_t Vdesired, int16_t *vCorr)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	6039      	str	r1, [r7, #0]
 80014aa:	80fb      	strh	r3, [r7, #6]
	float max = -100000;
 80014ac:	4b32      	ldr	r3, [pc, #200]	@ (8001578 <voltageCorrection+0xd8>)
 80014ae:	61fb      	str	r3, [r7, #28]

	//Find maximum value of bridge voltage
	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 80014b0:	2300      	movs	r3, #0
 80014b2:	61bb      	str	r3, [r7, #24]
 80014b4:	e031      	b.n	800151a <voltageCorrection+0x7a>
	{
		// Find minimum of bridge current
		float VL1 = convertADC12data(i+ADC1_VplaL1, NULL);
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	3304      	adds	r3, #4
 80014ba:	2100      	movs	r1, #0
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fc7f 	bl	8000dc0 <convertADC12data>
 80014c2:	ed87 0a05 	vstr	s0, [r7, #20]
		float VL2 = convertADC12data(i+ADC2_VplaL2, NULL);
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	3305      	adds	r3, #5
 80014ca:	2100      	movs	r1, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fc77 	bl	8000dc0 <convertADC12data>
 80014d2:	ed87 0a04 	vstr	s0, [r7, #16]
		float VL = VL1 - VL2;
 80014d6:	ed97 7a05 	vldr	s14, [r7, #20]
 80014da:	edd7 7a04 	vldr	s15, [r7, #16]
 80014de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e2:	edc7 7a03 	vstr	s15, [r7, #12]
		VL = sqrt(2) * VL;
 80014e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80014ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014ee:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 8001570 <voltageCorrection+0xd0>
 80014f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80014f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014fa:	edc7 7a03 	vstr	s15, [r7, #12]
		if (VL > max)
 80014fe:	ed97 7a03 	vldr	s14, [r7, #12]
 8001502:	edd7 7a07 	vldr	s15, [r7, #28]
 8001506:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800150a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150e:	dd01      	ble.n	8001514 <voltageCorrection+0x74>
		{
			max = VL;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	61fb      	str	r3, [r7, #28]
	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	3306      	adds	r3, #6
 8001518:	61bb      	str	r3, [r7, #24]
 800151a:	4b18      	ldr	r3, [pc, #96]	@ (800157c <voltageCorrection+0xdc>)
 800151c:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 8001520:	4613      	mov	r3, r2
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	4413      	add	r3, r2
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	461a      	mov	r2, r3
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	429a      	cmp	r2, r3
 800152e:	d8c2      	bhi.n	80014b6 <voltageCorrection+0x16>
		}
	}
	*vCorr = (int16_t) (Vdesired-max)/100;
 8001530:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001534:	ee07 3a90 	vmov	s15, r3
 8001538:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800153c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001540:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001544:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001548:	ee17 3a90 	vmov	r3, s15
 800154c:	b21b      	sxth	r3, r3
 800154e:	4a0c      	ldr	r2, [pc, #48]	@ (8001580 <voltageCorrection+0xe0>)
 8001550:	fb82 1203 	smull	r1, r2, r2, r3
 8001554:	1152      	asrs	r2, r2, #5
 8001556:	17db      	asrs	r3, r3, #31
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	b21a      	sxth	r2, r3
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	801a      	strh	r2, [r3, #0]
	return 1;
 8001560:	2301      	movs	r3, #1
}
 8001562:	4618      	mov	r0, r3
 8001564:	3720      	adds	r7, #32
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	f3af 8000 	nop.w
 8001570:	667f3bcd 	.word	0x667f3bcd
 8001574:	3ff6a09e 	.word	0x3ff6a09e
 8001578:	c7c35000 	.word	0xc7c35000
 800157c:	24000330 	.word	0x24000330
 8001580:	51eb851f 	.word	0x51eb851f
 8001584:	00000000 	.word	0x00000000

08001588 <measureBridgePlasmaADC12>:


// Measure bridge current, plasma voltage, and bridge current using ADC1 and ADC2 for one period
// After the measurement is done the function doneMeasuringBridgePlasmaADC12 is called
void measureBridgePlasmaADC12(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	//Calculate number of reads needed for one period
	sADC.nADC12Read = ((uint32_t) ((1/(float) sHbridge.frequency)/ADC12_GROUP_READTIME));//* 2; //Multiplied by two to grab two periods
 800158e:	4b24      	ldr	r3, [pc, #144]	@ (8001620 <measureBridgePlasmaADC12+0x98>)
 8001590:	885b      	ldrh	r3, [r3, #2]
 8001592:	ee07 3a90 	vmov	s15, r3
 8001596:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800159a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800159e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015a2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80015a6:	ed9f 5b1c 	vldr	d5, [pc, #112]	@ 8001618 <measureBridgePlasmaADC12+0x90>
 80015aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015ae:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80015b2:	ee17 2a90 	vmov	r2, s15
 80015b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001624 <measureBridgePlasmaADC12+0x9c>)
 80015b8:	f8c3 2708 	str.w	r2, [r3, #1800]	@ 0x708
	sADC.nADC12Read +=2; //Add to see the start of next period
 80015bc:	4b19      	ldr	r3, [pc, #100]	@ (8001624 <measureBridgePlasmaADC12+0x9c>)
 80015be:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 80015c2:	3302      	adds	r3, #2
 80015c4:	4a17      	ldr	r2, [pc, #92]	@ (8001624 <measureBridgePlasmaADC12+0x9c>)
 80015c6:	f8c2 3708 	str.w	r3, [r2, #1800]	@ 0x708

	//Start ADC1 and ADC2 measurements
	if (sADC.nADC12Read <= ADC12_MAX_GROUP)
 80015ca:	4b16      	ldr	r3, [pc, #88]	@ (8001624 <measureBridgePlasmaADC12+0x9c>)
 80015cc:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 80015d0:	2b64      	cmp	r3, #100	@ 0x64
 80015d2:	d81a      	bhi.n	800160a <measureBridgePlasmaADC12+0x82>
	{
		//Calculate the number DMA transfers needed
		uint32_t noDMARequests = ADC12_NO_CHANNELS*sADC.nADC12Read;
 80015d4:	4b13      	ldr	r3, [pc, #76]	@ (8001624 <measureBridgePlasmaADC12+0x9c>)
 80015d6:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 80015da:	4613      	mov	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4413      	add	r3, r2
 80015e0:	607b      	str	r3, [r7, #4]

		// Start reading ADC1 and ADC2
		sADC.adc12_reading = 1;
 80015e2:	4b10      	ldr	r3, [pc, #64]	@ (8001624 <measureBridgePlasmaADC12+0x9c>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	f8a3 270e 	strh.w	r2, [r3, #1806]	@ 0x70e

		//This will start the ADC1 and ADC2 measurements when H-BRIDGE_B_CTRL (TIM1_CH1) goes from 0 to 1.
		//When the measurements are done doneMeasuringBridgePlasmaADC12 is called.
		HAL_StatusTypeDef HALresp = HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t *) sADC.adc12_data, noDMARequests);
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	490d      	ldr	r1, [pc, #52]	@ (8001624 <measureBridgePlasmaADC12+0x9c>)
 80015ee:	480e      	ldr	r0, [pc, #56]	@ (8001628 <measureBridgePlasmaADC12+0xa0>)
 80015f0:	f005 ff68 	bl	80074c4 <HAL_ADCEx_MultiModeStart_DMA>
 80015f4:	4603      	mov	r3, r0
 80015f6:	70fb      	strb	r3, [r7, #3]
		if (HALresp != HAL_OK)
 80015f8:	78fb      	ldrb	r3, [r7, #3]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d008      	beq.n	8001610 <measureBridgePlasmaADC12+0x88>
		{
			printHALErrorStatus(HALresp, "measureBridgePlasmaADC12");
 80015fe:	78fb      	ldrb	r3, [r7, #3]
 8001600:	490a      	ldr	r1, [pc, #40]	@ (800162c <measureBridgePlasmaADC12+0xa4>)
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff f958 	bl	80008b8 <printHALErrorStatus>
	}
	else
		printString("** ERROR ** pADC.nRead > ADC12_MAX_GROUP");

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 8001608:	e002      	b.n	8001610 <measureBridgePlasmaADC12+0x88>
		printString("** ERROR ** pADC.nRead > ADC12_MAX_GROUP");
 800160a:	4809      	ldr	r0, [pc, #36]	@ (8001630 <measureBridgePlasmaADC12+0xa8>)
 800160c:	f7ff f8cc 	bl	80007a8 <printString>
}
 8001610:	bf00      	nop
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	a0b5ed8d 	.word	0xa0b5ed8d
 800161c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001620:	2400001c 	.word	0x2400001c
 8001624:	24000330 	.word	0x24000330
 8001628:	24000a88 	.word	0x24000a88
 800162c:	08014690 	.word	0x08014690
 8001630:	080146ac 	.word	0x080146ac

08001634 <doneMeasuringBridgePlasmaADC12>:

// Done measuring bridge current, plasma voltage, and bridge current
void doneMeasuringBridgePlasmaADC12(uint32_t errorCode)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	static uint32_t count = 0;

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	count++;
 800163c:	4b22      	ldr	r3, [pc, #136]	@ (80016c8 <doneMeasuringBridgePlasmaADC12+0x94>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	3301      	adds	r3, #1
 8001642:	4a21      	ldr	r2, [pc, #132]	@ (80016c8 <doneMeasuringBridgePlasmaADC12+0x94>)
 8001644:	6013      	str	r3, [r2, #0]

	// Done reading ADC1 and ADC2
	sADC.adc12_reading = 0;
 8001646:	4b21      	ldr	r3, [pc, #132]	@ (80016cc <doneMeasuringBridgePlasmaADC12+0x98>)
 8001648:	2200      	movs	r2, #0
 800164a:	f8a3 270e 	strh.w	r2, [r3, #1806]	@ 0x70e

	if (errorCode == HAL_ADC_ERROR_NONE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d128      	bne.n	80016a6 <doneMeasuringBridgePlasmaADC12+0x72>
	{
		if (sFlashConfig.mode == RUN_MODE)
 8001654:	4b1e      	ldr	r3, [pc, #120]	@ (80016d0 <doneMeasuringBridgePlasmaADC12+0x9c>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d12b      	bne.n	80016b4 <doneMeasuringBridgePlasmaADC12+0x80>

			//TODO Check plasma voltage VplaL1 and VplaL2 (To high? Not present?)
			//TODO Calculate plasma voltage Vrms, Vmax and Vmin

			//Adjust H-bridge frequency
			if (powerStatus == V500_ON)
 800165c:	4b1d      	ldr	r3, [pc, #116]	@ (80016d4 <doneMeasuringBridgePlasmaADC12+0xa0>)
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d127      	bne.n	80016b4 <doneMeasuringBridgePlasmaADC12+0x80>
			{
				//Adjust H-bridge frequency
				int16_t freqCorr = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	81fb      	strh	r3, [r7, #14]
				if (freqCorrection(&freqCorr))
 8001668:	f107 030e 	add.w	r3, r7, #14
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fe55 	bl	800131c <freqCorrection>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d008      	beq.n	800168a <doneMeasuringBridgePlasmaADC12+0x56>
					sHbridge.frequency += freqCorr;
 8001678:	4b17      	ldr	r3, [pc, #92]	@ (80016d8 <doneMeasuringBridgePlasmaADC12+0xa4>)
 800167a:	885a      	ldrh	r2, [r3, #2]
 800167c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001680:	b29b      	uxth	r3, r3
 8001682:	4413      	add	r3, r2
 8001684:	b29a      	uxth	r2, r3
 8001686:	4b14      	ldr	r3, [pc, #80]	@ (80016d8 <doneMeasuringBridgePlasmaADC12+0xa4>)
 8001688:	805a      	strh	r2, [r3, #2]
				//TODO Adjust H-bridge dead time
				//sHbridge.deadtime = new setting;
				programHbridge();
 800168a:	f7ff f9b5 	bl	80009f8 <programHbridge>
					HAL_Delay(1);	//Allow H-bridge to settle with new settings
 800168e:	2001      	movs	r0, #1
 8001690:	f003 f978 	bl	8004984 <HAL_Delay>
				if (count % 2048)
 8001694:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <doneMeasuringBridgePlasmaADC12+0x94>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800169c:	2b00      	cmp	r3, #0
 800169e:	d009      	beq.n	80016b4 <doneMeasuringBridgePlasmaADC12+0x80>
					printHbridgeData();
 80016a0:	f7ff f980 	bl	80009a4 <printHbridgeData>
 80016a4:	e006      	b.n	80016b4 <doneMeasuringBridgePlasmaADC12+0x80>
			}
		}
	}
	else
	{
		printNumber("ADC12 Error Code: ", errorCode, 1);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	2201      	movs	r2, #1
 80016ac:	4619      	mov	r1, r3
 80016ae:	480b      	ldr	r0, [pc, #44]	@ (80016dc <doneMeasuringBridgePlasmaADC12+0xa8>)
 80016b0:	f7ff f8bc 	bl	800082c <printNumber>
	}

	//Measure ADC3 voltages
	if (sFlashConfig.mode == RUN_MODE)
 80016b4:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <doneMeasuringBridgePlasmaADC12+0x9c>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d101      	bne.n	80016c0 <doneMeasuringBridgePlasmaADC12+0x8c>
		measureVoltagesTemperaturesADC3();
 80016bc:	f000 fb14 	bl	8001ce8 <measureVoltagesTemperaturesADC3>

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 80016c0:	bf00      	nop
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	24000a4c 	.word	0x24000a4c
 80016cc:	24000330 	.word	0x24000330
 80016d0:	24000a48 	.word	0x24000a48
 80016d4:	24000a44 	.word	0x24000a44
 80016d8:	2400001c 	.word	0x2400001c
 80016dc:	080146d8 	.word	0x080146d8

080016e0 <printHbridgeDatalogging>:
// Print H-bridge data on UART3 formatted for CSV datalogging
// Prints: Hbridge Freq, Deadtime, Is, VplaL1, VplaL2, VbrS1, VbriS2
// Parameter:
//		startTime: denotes the system time when ADC measurement was started
static void printHbridgeDatalogging(uint32_t startTime, uint32_t stopTime)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	f5ad 6d8a 	sub.w	sp, sp, #1104	@ 0x450
 80016e6:	af0c      	add	r7, sp, #48	@ 0x30
 80016e8:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80016ec:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 80016f0:	6018      	str	r0, [r3, #0]
 80016f2:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80016f6:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 80016fa:	6019      	str	r1, [r3, #0]
	char s_output[1000];
	//Convert from ms to sec: time elapsed / number of adc reads
	//This assumes that the time taken for each adc read is approx. equal
	double interval = (double) (stopTime - startTime) / (double) sADC.nADC12Read;
 80016fc:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001700:	f5a3 6284 	sub.w	r2, r3, #1056	@ 0x420
 8001704:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001708:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 800170c:	6812      	ldr	r2, [r2, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	ee07 3a90 	vmov	s15, r3
 8001716:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 800171a:	4b5c      	ldr	r3, [pc, #368]	@ (800188c <printHbridgeDatalogging+0x1ac>)
 800171c:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 8001720:	ee07 3a90 	vmov	s15, r3
 8001724:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001728:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800172c:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001730:	ed83 7b00 	vstr	d7, [r3]

	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 8001734:	2300      	movs	r3, #0
 8001736:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 800173a:	e093      	b.n	8001864 <printHbridgeDatalogging+0x184>
		{
			//calculate time of current measurement (start time + ADC sample rate)
			//TODO: This is likely not exactly accurate. Better way to record time of measurement accounting for conversion/DMA time?
			double measTime = startTime + (interval * i);
 800173c:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001740:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	ee07 3a90 	vmov	s15, r3
 800174a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800174e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001752:	ee07 3a90 	vmov	s15, r3
 8001756:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800175a:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800175e:	ed93 7b00 	vldr	d7, [r3]
 8001762:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001766:	ee36 7b07 	vadd.f64	d7, d6, d7
 800176a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 800176e:	ed83 7b00 	vstr	d7, [r3]

			float Is = convertADC12data(i+ADC2_Is, NULL);
 8001772:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001776:	3301      	adds	r3, #1
 8001778:	2100      	movs	r1, #0
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fb20 	bl	8000dc0 <convertADC12data>
 8001780:	f207 4304 	addw	r3, r7, #1028	@ 0x404
 8001784:	ed83 0a00 	vstr	s0, [r3]
			float VplaL1 = convertADC12data(i+ADC1_VplaL1, NULL);
 8001788:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 800178c:	3304      	adds	r3, #4
 800178e:	2100      	movs	r1, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fb15 	bl	8000dc0 <convertADC12data>
 8001796:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 800179a:	ed83 0a00 	vstr	s0, [r3]
			float VplaL2 = convertADC12data(i+ADC2_VplaL2, NULL);
 800179e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 80017a2:	3305      	adds	r3, #5
 80017a4:	2100      	movs	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fb0a 	bl	8000dc0 <convertADC12data>
 80017ac:	ed87 0aff 	vstr	s0, [r7, #1020]	@ 0x3fc
			float VbriS1 = convertADC12data(i+ADC1_VbriS1, NULL);
 80017b0:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 80017b4:	3302      	adds	r3, #2
 80017b6:	2100      	movs	r1, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fb01 	bl	8000dc0 <convertADC12data>
 80017be:	ed87 0afe 	vstr	s0, [r7, #1016]	@ 0x3f8
			float VbriS2 = convertADC12data(i+ADC2_VbriS2, NULL);
 80017c2:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 80017c6:	3303      	adds	r3, #3
 80017c8:	2100      	movs	r1, #0
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff faf8 	bl	8000dc0 <convertADC12data>
 80017d0:	ed87 0afd 	vstr	s0, [r7, #1012]	@ 0x3f4

			sprintf(s_output, "%.2lf,%u,%u,%f,%f,%f,%f,%f", measTime, sHbridge.frequency, sHbridge.deadtime,Is,VplaL1,VplaL2,VbriS1,VbriS2);
 80017d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001890 <printHbridgeDatalogging+0x1b0>)
 80017d6:	885b      	ldrh	r3, [r3, #2]
 80017d8:	461a      	mov	r2, r3
 80017da:	4b2d      	ldr	r3, [pc, #180]	@ (8001890 <printHbridgeDatalogging+0x1b0>)
 80017dc:	889b      	ldrh	r3, [r3, #4]
 80017de:	f207 4104 	addw	r1, r7, #1028	@ 0x404
 80017e2:	edd1 7a00 	vldr	s15, [r1]
 80017e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017ea:	f507 6180 	add.w	r1, r7, #1024	@ 0x400
 80017ee:	edd1 6a00 	vldr	s13, [r1]
 80017f2:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80017f6:	edd7 5aff 	vldr	s11, [r7, #1020]	@ 0x3fc
 80017fa:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 80017fe:	edd7 4afe 	vldr	s9, [r7, #1016]	@ 0x3f8
 8001802:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8001806:	edd7 3afd 	vldr	s7, [r7, #1012]	@ 0x3f4
 800180a:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 800180e:	f107 000c 	add.w	r0, r7, #12
 8001812:	ed8d 3b0a 	vstr	d3, [sp, #40]	@ 0x28
 8001816:	ed8d 4b08 	vstr	d4, [sp, #32]
 800181a:	ed8d 5b06 	vstr	d5, [sp, #24]
 800181e:	ed8d 6b04 	vstr	d6, [sp, #16]
 8001822:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001826:	9301      	str	r3, [sp, #4]
 8001828:	9200      	str	r2, [sp, #0]
 800182a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 800182e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001832:	4918      	ldr	r1, [pc, #96]	@ (8001894 <printHbridgeDatalogging+0x1b4>)
 8001834:	f010 fd8a 	bl	801234c <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	4618      	mov	r0, r3
 800183e:	f7fe fdc7 	bl	80003d0 <strlen>
 8001842:	4603      	mov	r3, r0
 8001844:	b29a      	uxth	r2, r3
 8001846:	f107 010c 	add.w	r1, r7, #12
 800184a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800184e:	4812      	ldr	r0, [pc, #72]	@ (8001898 <printHbridgeDatalogging+0x1b8>)
 8001850:	f00e fcbd 	bl	80101ce <HAL_UART_Transmit>
			printString("\n");
 8001854:	4811      	ldr	r0, [pc, #68]	@ (800189c <printHbridgeDatalogging+0x1bc>)
 8001856:	f7fe ffa7 	bl	80007a8 <printString>
	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 800185a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 800185e:	3306      	adds	r3, #6
 8001860:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 8001864:	4b09      	ldr	r3, [pc, #36]	@ (800188c <printHbridgeDatalogging+0x1ac>)
 8001866:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 800186a:	4613      	mov	r3, r2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4413      	add	r3, r2
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	461a      	mov	r2, r3
 8001874:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001878:	429a      	cmp	r2, r3
 800187a:	f63f af5f 	bhi.w	800173c <printHbridgeDatalogging+0x5c>
		}
}
 800187e:	bf00      	nop
 8001880:	bf00      	nop
 8001882:	f507 6784 	add.w	r7, r7, #1056	@ 0x420
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	24000330 	.word	0x24000330
 8001890:	2400001c 	.word	0x2400001c
 8001894:	080146ec 	.word	0x080146ec
 8001898:	24000e38 	.word	0x24000e38
 800189c:	08014708 	.word	0x08014708

080018a0 <autoFreqAdj>:

// Automatically Correct the Drive Frequency until user presses any key
void autoFreqAdj(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
	char input;


	//printString("\n\r%Press any key to exit"); //Commented out to allow for automated remote serial control (datalogging)

	printString("Time(us),Freq (Hz),Deadtime (%),Bridge I,VplaL1,VplaL2,VbriS1,VbriS2");
 80018a6:	482c      	ldr	r0, [pc, #176]	@ (8001958 <autoFreqAdj+0xb8>)
 80018a8:	f7fe ff7e 	bl	80007a8 <printString>
	printCR();
 80018ac:	f7fe ff6c 	bl	8000788 <printCR>

	//Start timer24 which is used to time when each ADC measurement is captured
	HAL_TIM_Base_Start(&htim24);
 80018b0:	482a      	ldr	r0, [pc, #168]	@ (800195c <autoFreqAdj+0xbc>)
 80018b2:	f00c feaf 	bl	800e614 <HAL_TIM_Base_Start>


	while (!(HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK))
 80018b6:	e041      	b.n	800193c <autoFreqAdj+0x9c>
	{
		uint32_t startTime = __HAL_TIM_GET_COUNTER(&htim24);//TIM24->CNT;
 80018b8:	4b28      	ldr	r3, [pc, #160]	@ (800195c <autoFreqAdj+0xbc>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018be:	60fb      	str	r3, [r7, #12]
		measureBridgePlasmaADC12();
 80018c0:	f7ff fe62 	bl	8001588 <measureBridgePlasmaADC12>
		//Wait until ADC3 reading is done
		while (sADC.adc12_reading);
 80018c4:	bf00      	nop
 80018c6:	4b26      	ldr	r3, [pc, #152]	@ (8001960 <autoFreqAdj+0xc0>)
 80018c8:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	@ 0x70e
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f9      	bne.n	80018c6 <autoFreqAdj+0x26>
		uint32_t stopTime = __HAL_TIM_GET_COUNTER(&htim24);//TIM24->CNT;
 80018d2:	4b22      	ldr	r3, [pc, #136]	@ (800195c <autoFreqAdj+0xbc>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d8:	60bb      	str	r3, [r7, #8]
		//printADC12data();

		//Calculate delta f
		int16_t freqCorr;
		freqCorrection(&freqCorr);
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fd1d 	bl	800131c <freqCorrection>

		//char text[100];
		//sprintf(text, "\n\rFrequency correction: %i", (int) freqCorr);
		//printString(text);

		if (sHbridge.frequency + freqCorr > MAX_FREQUENCY) //GetUint16Input(&sHbridge.frequency, 1, MIN_FREQUENCY, MAX_FREQUENCY))
 80018e2:	4b20      	ldr	r3, [pc, #128]	@ (8001964 <autoFreqAdj+0xc4>)
 80018e4:	885b      	ldrh	r3, [r3, #2]
 80018e6:	461a      	mov	r2, r3
 80018e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 80018f2:	4293      	cmp	r3, r2
 80018f4:	dd04      	ble.n	8001900 <autoFreqAdj+0x60>
		{   // Calculated freq is higher than max

			//sprintf(text, "\n\r%i is higher than max freq", (int) sHbridge.frequency + freqCorr);
			//printString(text);
			sHbridge.frequency = MAX_FREQUENCY;
 80018f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001964 <autoFreqAdj+0xc4>)
 80018f8:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 80018fc:	805a      	strh	r2, [r3, #2]
 80018fe:	e017      	b.n	8001930 <autoFreqAdj+0x90>
		}
		else if (sHbridge.frequency + freqCorr < MIN_FREQUENCY)
 8001900:	4b18      	ldr	r3, [pc, #96]	@ (8001964 <autoFreqAdj+0xc4>)
 8001902:	885b      	ldrh	r3, [r3, #2]
 8001904:	461a      	mov	r2, r3
 8001906:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800190a:	4413      	add	r3, r2
 800190c:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8001910:	4293      	cmp	r3, r2
 8001912:	dc04      	bgt.n	800191e <autoFreqAdj+0x7e>
		{
			//sprintf(text, "\n\r%i is lower than min freq", (int) sHbridge.frequency + freqCorr);
			//printString(text);

			sHbridge.frequency = MIN_FREQUENCY;
 8001914:	4b13      	ldr	r3, [pc, #76]	@ (8001964 <autoFreqAdj+0xc4>)
 8001916:	f643 2298 	movw	r2, #15000	@ 0x3a98
 800191a:	805a      	strh	r2, [r3, #2]
 800191c:	e008      	b.n	8001930 <autoFreqAdj+0x90>

		}
		else
		{
			sHbridge.frequency = sHbridge.frequency + freqCorr;
 800191e:	4b11      	ldr	r3, [pc, #68]	@ (8001964 <autoFreqAdj+0xc4>)
 8001920:	885a      	ldrh	r2, [r3, #2]
 8001922:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001926:	b29b      	uxth	r3, r3
 8001928:	4413      	add	r3, r2
 800192a:	b29a      	uxth	r2, r3
 800192c:	4b0d      	ldr	r3, [pc, #52]	@ (8001964 <autoFreqAdj+0xc4>)
 800192e:	805a      	strh	r2, [r3, #2]
		}

		programHbridge();
 8001930:	f7ff f862 	bl	80009f8 <programHbridge>

		//Print current ADC data
		printHbridgeDatalogging(startTime, stopTime);
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f7ff fed2 	bl	80016e0 <printHbridgeDatalogging>
	while (!(HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK))
 800193c:	1df9      	adds	r1, r7, #7
 800193e:	2301      	movs	r3, #1
 8001940:	2201      	movs	r2, #1
 8001942:	4809      	ldr	r0, [pc, #36]	@ (8001968 <autoFreqAdj+0xc8>)
 8001944:	f00e fcd1 	bl	80102ea <HAL_UART_Receive>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1b4      	bne.n	80018b8 <autoFreqAdj+0x18>


	}
}
 800194e:	bf00      	nop
 8001950:	bf00      	nop
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	0801470c 	.word	0x0801470c
 800195c:	24001048 	.word	0x24001048
 8001960:	24000330 	.word	0x24000330
 8001964:	2400001c 	.word	0x2400001c
 8001968:	24000e38 	.word	0x24000e38

0800196c <autoVoltageAdj>:


void autoVoltageAdj(int16_t userVoltage)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	80fb      	strh	r3, [r7, #6]
	char input;


	//printString("\n\r%Press any key to exit"); //Commented out to allow for automated remote serial control (datalogging)

	printString("Time(us),Freq (Hz),Deadtime (%),Bridge I,VplaL1,VplaL2,VbriS1,VbriS2");
 8001976:	482c      	ldr	r0, [pc, #176]	@ (8001a28 <autoVoltageAdj+0xbc>)
 8001978:	f7fe ff16 	bl	80007a8 <printString>
	printCR();
 800197c:	f7fe ff04 	bl	8000788 <printCR>

	//Start timer24 which is used to time when each ADC measurement is captured
	HAL_TIM_Base_Start(&htim24);
 8001980:	482a      	ldr	r0, [pc, #168]	@ (8001a2c <autoVoltageAdj+0xc0>)
 8001982:	f00c fe47 	bl	800e614 <HAL_TIM_Base_Start>


	while (!(HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK))
 8001986:	e03f      	b.n	8001a08 <autoVoltageAdj+0x9c>
	{
		uint32_t startTime = __HAL_TIM_GET_COUNTER(&htim24);//TIM24->CNT;
 8001988:	4b28      	ldr	r3, [pc, #160]	@ (8001a2c <autoVoltageAdj+0xc0>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198e:	617b      	str	r3, [r7, #20]
		measureBridgePlasmaADC12();
 8001990:	f7ff fdfa 	bl	8001588 <measureBridgePlasmaADC12>
		//Wait until ADC3 reading is done
		while (sADC.adc12_reading);
 8001994:	bf00      	nop
 8001996:	4b26      	ldr	r3, [pc, #152]	@ (8001a30 <autoVoltageAdj+0xc4>)
 8001998:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	@ 0x70e
 800199c:	b29b      	uxth	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f9      	bne.n	8001996 <autoVoltageAdj+0x2a>
		uint32_t stopTime = __HAL_TIM_GET_COUNTER(&htim24);//TIM24->CNT;
 80019a2:	4b22      	ldr	r3, [pc, #136]	@ (8001a2c <autoVoltageAdj+0xc0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a8:	613b      	str	r3, [r7, #16]
		//printADC12data();

		//Calculate delta f
		int16_t voltageCorr;
		voltageCorrection(userVoltage, &voltageCorr);
 80019aa:	f107 020c 	add.w	r2, r7, #12
 80019ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fd73 	bl	80014a0 <voltageCorrection>

		//char text[100];
		//sprintf(text, "\n\rFrequency correction: %i", (int) freqCorr);
		//printString(text);

		if (sHbridge.deadtime + voltageCorr > MAX_DEADTIME) //GetUint16Input(&sHbridge.frequency, 1, MIN_FREQUENCY, MAX_FREQUENCY))
 80019ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001a34 <autoVoltageAdj+0xc8>)
 80019bc:	889b      	ldrh	r3, [r3, #4]
 80019be:	461a      	mov	r2, r3
 80019c0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019c4:	4413      	add	r3, r2
 80019c6:	2b28      	cmp	r3, #40	@ 0x28
 80019c8:	dd03      	ble.n	80019d2 <autoVoltageAdj+0x66>
		{   // Calculated freq is higher than max

			//sprintf(text, "\n\r%i is higher than max freq", (int) sHbridge.frequency + freqCorr);
			//printString(text);
			sHbridge.deadtime = MAX_DEADTIME;
 80019ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001a34 <autoVoltageAdj+0xc8>)
 80019cc:	2228      	movs	r2, #40	@ 0x28
 80019ce:	809a      	strh	r2, [r3, #4]
 80019d0:	e014      	b.n	80019fc <autoVoltageAdj+0x90>
		}
		else if (sHbridge.deadtime + voltageCorr < MIN_DEADTIME)
 80019d2:	4b18      	ldr	r3, [pc, #96]	@ (8001a34 <autoVoltageAdj+0xc8>)
 80019d4:	889b      	ldrh	r3, [r3, #4]
 80019d6:	461a      	mov	r2, r3
 80019d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019dc:	4413      	add	r3, r2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	dc03      	bgt.n	80019ea <autoVoltageAdj+0x7e>
		{
			//sprintf(text, "\n\r%i is lower than min freq", (int) sHbridge.frequency + freqCorr);
			//printString(text);

			sHbridge.deadtime = MIN_DEADTIME;
 80019e2:	4b14      	ldr	r3, [pc, #80]	@ (8001a34 <autoVoltageAdj+0xc8>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	809a      	strh	r2, [r3, #4]
 80019e8:	e008      	b.n	80019fc <autoVoltageAdj+0x90>

		}
		else
		{
			sHbridge.deadtime = sHbridge.deadtime + voltageCorr;
 80019ea:	4b12      	ldr	r3, [pc, #72]	@ (8001a34 <autoVoltageAdj+0xc8>)
 80019ec:	889a      	ldrh	r2, [r3, #4]
 80019ee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	4413      	add	r3, r2
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a34 <autoVoltageAdj+0xc8>)
 80019fa:	809a      	strh	r2, [r3, #4]
		}

		programHbridge();
 80019fc:	f7fe fffc 	bl	80009f8 <programHbridge>

		//Print current ADC data
		printHbridgeDatalogging(startTime, stopTime);
 8001a00:	6939      	ldr	r1, [r7, #16]
 8001a02:	6978      	ldr	r0, [r7, #20]
 8001a04:	f7ff fe6c 	bl	80016e0 <printHbridgeDatalogging>
	while (!(HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK))
 8001a08:	f107 010f 	add.w	r1, r7, #15
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	2201      	movs	r2, #1
 8001a10:	4809      	ldr	r0, [pc, #36]	@ (8001a38 <autoVoltageAdj+0xcc>)
 8001a12:	f00e fc6a 	bl	80102ea <HAL_UART_Receive>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1b5      	bne.n	8001988 <autoVoltageAdj+0x1c>


	}
}
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	0801470c 	.word	0x0801470c
 8001a2c:	24001048 	.word	0x24001048
 8001a30:	24000330 	.word	0x24000330
 8001a34:	2400001c 	.word	0x2400001c
 8001a38:	24000e38 	.word	0x24000e38
 8001a3c:	00000000 	.word	0x00000000

08001a40 <convertADC3data>:


//Convert ADC3 data to voltages
float convertADC3data(uint32_t item, char **text)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
	float result = 0;
 8001a4a:	f04f 0300 	mov.w	r3, #0
 8001a4e:	60fb      	str	r3, [r7, #12]

	switch (item) {
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b0a      	cmp	r3, #10
 8001a54:	f200 80c5 	bhi.w	8001be2 <convertADC3data+0x1a2>
 8001a58:	a201      	add	r2, pc, #4	@ (adr r2, 8001a60 <convertADC3data+0x20>)
 8001a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a5e:	bf00      	nop
 8001a60:	08001a8d 	.word	0x08001a8d
 8001a64:	08001abf 	.word	0x08001abf
 8001a68:	08001af1 	.word	0x08001af1
 8001a6c:	08001b23 	.word	0x08001b23
 8001a70:	08001b31 	.word	0x08001b31
 8001a74:	08001b6b 	.word	0x08001b6b
 8001a78:	08001b9d 	.word	0x08001b9d
 8001a7c:	08001bab 	.word	0x08001bab
 8001a80:	08001bb9 	.word	0x08001bb9
 8001a84:	08001bc7 	.word	0x08001bc7
 8001a88:	08001bd5 	.word	0x08001bd5
		case ADC3_VBAT:
			result =  1000*((9.76+169.0)/9.76)*3.3*(((float) sADC.adc3_data[ADC3_VBAT])/4096.0);
 8001a8c:	4b66      	ldr	r3, [pc, #408]	@ (8001c28 <convertADC3data+0x1e8>)
 8001a8e:	f8b3 34b0 	ldrh.w	r3, [r3, #1200]	@ 0x4b0
 8001a92:	ee07 3a90 	vmov	s15, r3
 8001a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a9a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001a9e:	ed9f 5b56 	vldr	d5, [pc, #344]	@ 8001bf8 <convertADC3data+0x1b8>
 8001aa2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001aa6:	ed9f 6b56 	vldr	d6, [pc, #344]	@ 8001c00 <convertADC3data+0x1c0>
 8001aaa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001aae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ab2:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_VBAT (mV)";
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	4a5c      	ldr	r2, [pc, #368]	@ (8001c2c <convertADC3data+0x1ec>)
 8001aba:	601a      	str	r2, [r3, #0]
			break;
 8001abc:	e091      	b.n	8001be2 <convertADC3data+0x1a2>
		case ADC3_15V:
			result =  1000*((30.0+120.0)/30.0)*3.3*(((float) sADC.adc3_data[ADC3_15V])/4096.0);
 8001abe:	4b5a      	ldr	r3, [pc, #360]	@ (8001c28 <convertADC3data+0x1e8>)
 8001ac0:	f8b3 34b2 	ldrh.w	r3, [r3, #1202]	@ 0x4b2
 8001ac4:	ee07 3a90 	vmov	s15, r3
 8001ac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001acc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001ad0:	ed9f 5b49 	vldr	d5, [pc, #292]	@ 8001bf8 <convertADC3data+0x1b8>
 8001ad4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ad8:	ed9f 6b4b 	vldr	d6, [pc, #300]	@ 8001c08 <convertADC3data+0x1c8>
 8001adc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ae0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ae4:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_15V (mV)";
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	4a51      	ldr	r2, [pc, #324]	@ (8001c30 <convertADC3data+0x1f0>)
 8001aec:	601a      	str	r2, [r3, #0]
			break;
 8001aee:	e078      	b.n	8001be2 <convertADC3data+0x1a2>
		case ADC3_3_3V:
			result =  1000*((30.0+3.0)/30.0)*3.3*(((float) sADC.adc3_data[ADC3_3_3V])/4096.0);
 8001af0:	4b4d      	ldr	r3, [pc, #308]	@ (8001c28 <convertADC3data+0x1e8>)
 8001af2:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	@ 0x4b4
 8001af6:	ee07 3a90 	vmov	s15, r3
 8001afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001afe:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001b02:	ed9f 5b3d 	vldr	d5, [pc, #244]	@ 8001bf8 <convertADC3data+0x1b8>
 8001b06:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b0a:	ed9f 6b41 	vldr	d6, [pc, #260]	@ 8001c10 <convertADC3data+0x1d0>
 8001b0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b12:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b16:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_3_3V (mV)";
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	4a45      	ldr	r2, [pc, #276]	@ (8001c34 <convertADC3data+0x1f4>)
 8001b1e:	601a      	str	r2, [r3, #0]
			break;
 8001b20:	e05f      	b.n	8001be2 <convertADC3data+0x1a2>
		case ADC3_NC3:
			result = 0;
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_NC3";
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	4a43      	ldr	r2, [pc, #268]	@ (8001c38 <convertADC3data+0x1f8>)
 8001b2c:	601a      	str	r2, [r3, #0]
			break;
 8001b2e:	e058      	b.n	8001be2 <convertADC3data+0x1a2>
		case ADC3_BridgeTemp:
			result = 1000*((float) sADC.adc3_data[ADC3_BridgeTemp])*3.3/4096.0;
 8001b30:	4b3d      	ldr	r3, [pc, #244]	@ (8001c28 <convertADC3data+0x1e8>)
 8001b32:	f8b3 34b8 	ldrh.w	r3, [r3, #1208]	@ 0x4b8
 8001b36:	ee07 3a90 	vmov	s15, r3
 8001b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b3e:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8001c3c <convertADC3data+0x1fc>
 8001b42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b46:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b4a:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 8001c18 <convertADC3data+0x1d8>
 8001b4e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001b52:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 8001bf8 <convertADC3data+0x1b8>
 8001b56:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b5a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b5e:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_BridgeTemp (mV)";
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	4a36      	ldr	r2, [pc, #216]	@ (8001c40 <convertADC3data+0x200>)
 8001b66:	601a      	str	r2, [r3, #0]
			break;
 8001b68:	e03b      	b.n	8001be2 <convertADC3data+0x1a2>
		case ADC3_500VDC:
			result =  1000*((12.0+2000.0)/12.0)*3.3*(((float) sADC.adc3_data[ADC3_500VDC])/4096.0);
 8001b6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001c28 <convertADC3data+0x1e8>)
 8001b6c:	f8b3 34ba 	ldrh.w	r3, [r3, #1210]	@ 0x4ba
 8001b70:	ee07 3a90 	vmov	s15, r3
 8001b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b78:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001b7c:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8001bf8 <convertADC3data+0x1b8>
 8001b80:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b84:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 8001c20 <convertADC3data+0x1e0>
 8001b88:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b8c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b90:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_500VDC (mV)";
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	4a2b      	ldr	r2, [pc, #172]	@ (8001c44 <convertADC3data+0x204>)
 8001b98:	601a      	str	r2, [r3, #0]
			break;
 8001b9a:	e022      	b.n	8001be2 <convertADC3data+0x1a2>
		case ADC3_Thermistor1:
			result = 0;
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor1";
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	4a28      	ldr	r2, [pc, #160]	@ (8001c48 <convertADC3data+0x208>)
 8001ba6:	601a      	str	r2, [r3, #0]
			break;
 8001ba8:	e01b      	b.n	8001be2 <convertADC3data+0x1a2>
		case ADC3_Thermistor2:
			result = 0;
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor2";
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	4a26      	ldr	r2, [pc, #152]	@ (8001c4c <convertADC3data+0x20c>)
 8001bb4:	601a      	str	r2, [r3, #0]
			break;
 8001bb6:	e014      	b.n	8001be2 <convertADC3data+0x1a2>
		case ADC3_Thermistor3:
			result = 0;
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor3";
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	4a23      	ldr	r2, [pc, #140]	@ (8001c50 <convertADC3data+0x210>)
 8001bc2:	601a      	str	r2, [r3, #0]
			break;
 8001bc4:	e00d      	b.n	8001be2 <convertADC3data+0x1a2>
		case ADC3_Thermistor4:
			result = 0;
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor4";
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	4a21      	ldr	r2, [pc, #132]	@ (8001c54 <convertADC3data+0x214>)
 8001bd0:	601a      	str	r2, [r3, #0]
			break;
 8001bd2:	e006      	b.n	8001be2 <convertADC3data+0x1a2>
		case ADC3_NC10:
			result = 0;
 8001bd4:	f04f 0300 	mov.w	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_NC10";
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	4a1e      	ldr	r2, [pc, #120]	@ (8001c58 <convertADC3data+0x218>)
 8001bde:	601a      	str	r2, [r3, #0]
			break;
 8001be0:	bf00      	nop
	}

	return(result);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	ee07 3a90 	vmov	s15, r3
}
 8001be8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	00000000 	.word	0x00000000
 8001bfc:	40b00000 	.word	0x40b00000
 8001c00:	9714fbcd 	.word	0x9714fbcd
 8001c04:	40ed832c 	.word	0x40ed832c
 8001c08:	00000000 	.word	0x00000000
 8001c0c:	40d01d00 	.word	0x40d01d00
 8001c10:	00000000 	.word	0x00000000
 8001c14:	40ac5c00 	.word	0x40ac5c00
 8001c18:	66666666 	.word	0x66666666
 8001c1c:	400a6666 	.word	0x400a6666
 8001c20:	ffffffff 	.word	0xffffffff
 8001c24:	4120e2a7 	.word	0x4120e2a7
 8001c28:	24000330 	.word	0x24000330
 8001c2c:	08014754 	.word	0x08014754
 8001c30:	08014764 	.word	0x08014764
 8001c34:	08014774 	.word	0x08014774
 8001c38:	08014784 	.word	0x08014784
 8001c3c:	447a0000 	.word	0x447a0000
 8001c40:	08014790 	.word	0x08014790
 8001c44:	080147a8 	.word	0x080147a8
 8001c48:	080147bc 	.word	0x080147bc
 8001c4c:	080147d0 	.word	0x080147d0
 8001c50:	080147e4 	.word	0x080147e4
 8001c54:	080147f8 	.word	0x080147f8
 8001c58:	0801480c 	.word	0x0801480c

08001c5c <printADC3data>:

//Print measured ADC3 data on UART3
void printADC3data(void)
{
 8001c5c:	b590      	push	{r4, r7, lr}
 8001c5e:	b09f      	sub	sp, #124	@ 0x7c
 8001c60:	af02      	add	r7, sp, #8
	if (debug == 1)
 8001c62:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd8 <printADC3data+0x7c>)
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d131      	bne.n	8001cce <printADC3data+0x72>
	{
		printCR();
 8001c6a:	f7fe fd8d 	bl	8000788 <printCR>
		printNumber("No data: ", ADC3_DMA_REQUESTS, 1);
 8001c6e:	2201      	movs	r2, #1
 8001c70:	210b      	movs	r1, #11
 8001c72:	481a      	ldr	r0, [pc, #104]	@ (8001cdc <printADC3data+0x80>)
 8001c74:	f7fe fdda 	bl	800082c <printNumber>
		for (int i=0; i<ADC3_DMA_REQUESTS; i++)
 8001c78:	2300      	movs	r3, #0
 8001c7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001c7c:	e024      	b.n	8001cc8 <printADC3data+0x6c>
		{
			char text[100];
			char *p_text;
			float result = convertADC3data(i, &p_text);
 8001c7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c80:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8001c84:	4611      	mov	r1, r2
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff feda 	bl	8001a40 <convertADC3data>
 8001c8c:	ed87 0a1a 	vstr	s0, [r7, #104]	@ 0x68
			sprintf(text, "%2u %20s: %7u    (%6u)\n\r", i, p_text, (int) result, sADC.adc3_data[i]);
 8001c90:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001c92:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001c96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c9a:	ee17 4a90 	vmov	r4, s15
 8001c9e:	4910      	ldr	r1, [pc, #64]	@ (8001ce0 <printADC3data+0x84>)
 8001ca0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ca2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001ca6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001caa:	4638      	mov	r0, r7
 8001cac:	9301      	str	r3, [sp, #4]
 8001cae:	9400      	str	r4, [sp, #0]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001cb4:	490b      	ldr	r1, [pc, #44]	@ (8001ce4 <printADC3data+0x88>)
 8001cb6:	f010 fb49 	bl	801234c <siprintf>
			printString(text);
 8001cba:	463b      	mov	r3, r7
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe fd73 	bl	80007a8 <printString>
		for (int i=0; i<ADC3_DMA_REQUESTS; i++)
 8001cc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001cc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001cca:	2b0a      	cmp	r3, #10
 8001ccc:	ddd7      	ble.n	8001c7e <printADC3data+0x22>
		}
	}
}
 8001cce:	bf00      	nop
 8001cd0:	3774      	adds	r7, #116	@ 0x74
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd90      	pop	{r4, r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	24000000 	.word	0x24000000
 8001cdc:	0801462c 	.word	0x0801462c
 8001ce0:	24000330 	.word	0x24000330
 8001ce4:	08014818 	.word	0x08014818

08001ce8 <measureVoltagesTemperaturesADC3>:

// Measure voltages and temperatures using ADC3
// After the measurement is done the function doneMeasuringVoltagesTemperaturesADC3 is called
void measureVoltagesTemperaturesADC3(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	// This will start the measurement of voltages and temperatures using ADC3
	sADC.adc3_reading = 1; //Started to read ADC3
 8001cec:	4b05      	ldr	r3, [pc, #20]	@ (8001d04 <measureVoltagesTemperaturesADC3+0x1c>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f8a3 270c 	strh.w	r2, [r3, #1804]	@ 0x70c
	HAL_ADC_Start_DMA(&hadc3, (uint32_t *) sADC.adc3_data, ADC3_DMA_REQUESTS);
 8001cf4:	220b      	movs	r2, #11
 8001cf6:	4904      	ldr	r1, [pc, #16]	@ (8001d08 <measureVoltagesTemperaturesADC3+0x20>)
 8001cf8:	4804      	ldr	r0, [pc, #16]	@ (8001d0c <measureVoltagesTemperaturesADC3+0x24>)
 8001cfa:	f003 fcc1 	bl	8005680 <HAL_ADC_Start_DMA>

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	24000330 	.word	0x24000330
 8001d08:	240007e0 	.word	0x240007e0
 8001d0c:	24000b68 	.word	0x24000b68

08001d10 <doneMeasuringVoltagesTemperaturesADC3>:


// Done measuring voltages and temperatures
void doneMeasuringVoltagesTemperaturesADC3(uint32_t errorCode)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	sADC.adc3_reading = 0; //Done reading ADC3
 8001d18:	4b0b      	ldr	r3, [pc, #44]	@ (8001d48 <doneMeasuringVoltagesTemperaturesADC3+0x38>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f8a3 270c 	strh.w	r2, [r3, #1804]	@ 0x70c

	if (errorCode == HAL_ADC_ERROR_NONE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d006      	beq.n	8001d34 <doneMeasuringVoltagesTemperaturesADC3+0x24>
		// TODO Check temperatures

	}
	else
	{
		printNumber("ADC12 Error Code: ", errorCode, 1);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4807      	ldr	r0, [pc, #28]	@ (8001d4c <doneMeasuringVoltagesTemperaturesADC3+0x3c>)
 8001d30:	f7fe fd7c 	bl	800082c <printNumber>
	}


	//Start ADC1 and ADC2 measurements
	if (sFlashConfig.mode == RUN_MODE)
 8001d34:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <doneMeasuringVoltagesTemperaturesADC3+0x40>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d101      	bne.n	8001d40 <doneMeasuringVoltagesTemperaturesADC3+0x30>
		measureBridgePlasmaADC12();
 8001d3c:	f7ff fc24 	bl	8001588 <measureBridgePlasmaADC12>

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 8001d40:	bf00      	nop
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	24000330 	.word	0x24000330
 8001d4c:	080146d8 	.word	0x080146d8
 8001d50:	24000a48 	.word	0x24000a48

08001d54 <GetNumber>:

// Get an integer number from UART3. If the number is valid, the function returns 1, otherwise 0.
static uint8_t GetNumber(int *number)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	@ 0x28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
	char input;
	char s_input[MAX_INPUT];
	int pos = 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	627b      	str	r3, [r7, #36]	@ 0x24
	//Wait for user input
	HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 100000);
 8001d60:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8001d64:	4b2f      	ldr	r3, [pc, #188]	@ (8001e24 <GetNumber+0xd0>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	482f      	ldr	r0, [pc, #188]	@ (8001e28 <GetNumber+0xd4>)
 8001d6a:	f00e fabe 	bl	80102ea <HAL_UART_Receive>
	while (input != 13)
 8001d6e:	e039      	b.n	8001de4 <GetNumber+0x90>
	{
		// Backspace?
		if ((input == 127) && (pos > 0))
 8001d70:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d74:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d76:	d10e      	bne.n	8001d96 <GetNumber+0x42>
 8001d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	dd0b      	ble.n	8001d96 <GetNumber+0x42>
		{
			// Delete digit
			HAL_UART_Transmit(&huart3, (uint8_t *) &input, 1, 1000);
 8001d7e:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8001d82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d86:	2201      	movs	r2, #1
 8001d88:	4827      	ldr	r0, [pc, #156]	@ (8001e28 <GetNumber+0xd4>)
 8001d8a:	f00e fa20 	bl	80101ce <HAL_UART_Transmit>
			pos--;
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d90:	3b01      	subs	r3, #1
 8001d92:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d94:	e018      	b.n	8001dc8 <GetNumber+0x74>
		}
		// A digit?
		else if ((input >= 48) && (input <=57))
 8001d96:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d9a:	2b2f      	cmp	r3, #47	@ 0x2f
 8001d9c:	d914      	bls.n	8001dc8 <GetNumber+0x74>
 8001d9e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001da2:	2b39      	cmp	r3, #57	@ 0x39
 8001da4:	d810      	bhi.n	8001dc8 <GetNumber+0x74>
		{
			// Echo digit and store it
			HAL_UART_Transmit(&huart3, (uint8_t *) &input, 1, 1000);
 8001da6:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8001daa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dae:	2201      	movs	r2, #1
 8001db0:	481d      	ldr	r0, [pc, #116]	@ (8001e28 <GetNumber+0xd4>)
 8001db2:	f00e fa0c 	bl	80101ce <HAL_UART_Transmit>
			s_input[pos++] = input;
 8001db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db8:	1c5a      	adds	r2, r3, #1
 8001dba:	627a      	str	r2, [r7, #36]	@ 0x24
 8001dbc:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001dc0:	3328      	adds	r3, #40	@ 0x28
 8001dc2:	443b      	add	r3, r7
 8001dc4:	f803 2c1c 	strb.w	r2, [r3, #-28]
		}

		// Get next character
		if (pos < MAX_INPUT-1)
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dca:	2b12      	cmp	r3, #18
 8001dcc:	dc07      	bgt.n	8001dde <GetNumber+0x8a>
		{
			HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 100000);
 8001dce:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8001dd2:	4b14      	ldr	r3, [pc, #80]	@ (8001e24 <GetNumber+0xd0>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	4814      	ldr	r0, [pc, #80]	@ (8001e28 <GetNumber+0xd4>)
 8001dd8:	f00e fa87 	bl	80102ea <HAL_UART_Receive>
 8001ddc:	e002      	b.n	8001de4 <GetNumber+0x90>
		}
		else
		{
			input = 13; // Terminate while loop
 8001dde:	230d      	movs	r3, #13
 8001de0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	while (input != 13)
 8001de4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001de8:	2b0d      	cmp	r3, #13
 8001dea:	d1c1      	bne.n	8001d70 <GetNumber+0x1c>
		}
	}
	s_input[pos] = 0;
 8001dec:	f107 020c 	add.w	r2, r7, #12
 8001df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df2:	4413      	add	r3, r2
 8001df4:	2200      	movs	r2, #0
 8001df6:	701a      	strb	r2, [r3, #0]
	if (pos > 0)
 8001df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	dd07      	ble.n	8001e0e <GetNumber+0xba>
		*number = atoi(s_input);
 8001dfe:	f107 030c 	add.w	r3, r7, #12
 8001e02:	4618      	mov	r0, r3
 8001e04:	f00f fcc4 	bl	8011790 <atoi>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	601a      	str	r2, [r3, #0]
	return(pos > 0);
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	bfcc      	ite	gt
 8001e14:	2301      	movgt	r3, #1
 8001e16:	2300      	movle	r3, #0
 8001e18:	b2db      	uxtb	r3, r3
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3728      	adds	r7, #40	@ 0x28
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	000186a0 	.word	0x000186a0
 8001e28:	24000e38 	.word	0x24000e38

08001e2c <GetUint16Input>:

// Get an 16bit unsigned number from UAR3 and validate the input againts min and max values
static uint8_t GetUint16Input(uint16_t *input, uint8_t bValidate, uint16_t min, uint16_t max)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b0a0      	sub	sp, #128	@ 0x80
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	4608      	mov	r0, r1
 8001e36:	4611      	mov	r1, r2
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	72fb      	strb	r3, [r7, #11]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	813b      	strh	r3, [r7, #8]
 8001e42:	4613      	mov	r3, r2
 8001e44:	80fb      	strh	r3, [r7, #6]
	int number;
	char s_output[100];
	uint8_t result;

	result = GetNumber(&number);
 8001e46:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff ff82 	bl	8001d54 <GetNumber>
 8001e50:	4603      	mov	r3, r0
 8001e52:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (bValidate)
 8001e56:	7afb      	ldrb	r3, [r7, #11]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d02f      	beq.n	8001ebc <GetUint16Input+0x90>
	{
		if (result && (number >= min) && (number <= max))
 8001e5c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d013      	beq.n	8001e8c <GetUint16Input+0x60>
 8001e64:	893a      	ldrh	r2, [r7, #8]
 8001e66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	dc0f      	bgt.n	8001e8c <GetUint16Input+0x60>
 8001e6c:	88fa      	ldrh	r2, [r7, #6]
 8001e6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e70:	429a      	cmp	r2, r3
 8001e72:	db0b      	blt.n	8001e8c <GetUint16Input+0x60>
		{
			*input =  number;
 8001e74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, (uint8_t *) " - Ok\n\r", 7, 1000);
 8001e7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e80:	2207      	movs	r2, #7
 8001e82:	4911      	ldr	r1, [pc, #68]	@ (8001ec8 <GetUint16Input+0x9c>)
 8001e84:	4811      	ldr	r0, [pc, #68]	@ (8001ecc <GetUint16Input+0xa0>)
 8001e86:	f00e f9a2 	bl	80101ce <HAL_UART_Transmit>
 8001e8a:	e017      	b.n	8001ebc <GetUint16Input+0x90>
		}
		else
		{
			result = 0; //Indicate failure
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			sprintf(s_output, " - Invalid number, valid range %u - %u\n\r", min, max);
 8001e92:	893a      	ldrh	r2, [r7, #8]
 8001e94:	88fb      	ldrh	r3, [r7, #6]
 8001e96:	f107 0014 	add.w	r0, r7, #20
 8001e9a:	490d      	ldr	r1, [pc, #52]	@ (8001ed0 <GetUint16Input+0xa4>)
 8001e9c:	f010 fa56 	bl	801234c <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe fa93 	bl	80003d0 <strlen>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	f107 0114 	add.w	r1, r7, #20
 8001eb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eb6:	4805      	ldr	r0, [pc, #20]	@ (8001ecc <GetUint16Input+0xa0>)
 8001eb8:	f00e f989 	bl	80101ce <HAL_UART_Transmit>
		}
	}
	return(result);
 8001ebc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3780      	adds	r7, #128	@ 0x80
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	08014834 	.word	0x08014834
 8001ecc:	24000e38 	.word	0x24000e38
 8001ed0:	0801483c 	.word	0x0801483c

08001ed4 <HAL_ADC_ErrorCallback>:
//		*number = atoi(s_input);
//	return(pos > 0);
//}

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef* hadc)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
	// ADC1 is master and ADC2 is slave
	if (hadc->Instance == ADC1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a0e      	ldr	r2, [pc, #56]	@ (8001f1c <HAL_ADC_ErrorCallback+0x48>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d108      	bne.n	8001ef8 <HAL_ADC_ErrorCallback+0x24>
	{
		printNumber("** ERROR ** ADC12 Error Code: ", hadc->ErrorCode, 1);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	2201      	movs	r2, #1
 8001eee:	4619      	mov	r1, r3
 8001ef0:	480b      	ldr	r0, [pc, #44]	@ (8001f20 <HAL_ADC_ErrorCallback+0x4c>)
 8001ef2:	f7fe fc9b 	bl	800082c <printNumber>
	}
	else if ((hadc->Instance == ADC3))
	{
		printNumber("** ERROR ** ADC3 Error Code: ", hadc->ErrorCode, 1);
	}
}
 8001ef6:	e00c      	b.n	8001f12 <HAL_ADC_ErrorCallback+0x3e>
	else if ((hadc->Instance == ADC3))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a09      	ldr	r2, [pc, #36]	@ (8001f24 <HAL_ADC_ErrorCallback+0x50>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d107      	bne.n	8001f12 <HAL_ADC_ErrorCallback+0x3e>
		printNumber("** ERROR ** ADC3 Error Code: ", hadc->ErrorCode, 1);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	2201      	movs	r2, #1
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4806      	ldr	r0, [pc, #24]	@ (8001f28 <HAL_ADC_ErrorCallback+0x54>)
 8001f0e:	f7fe fc8d 	bl	800082c <printNumber>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40022000 	.word	0x40022000
 8001f20:	08014868 	.word	0x08014868
 8001f24:	58026000 	.word	0x58026000
 8001f28:	08014888 	.word	0x08014888

08001f2c <HAL_ADC_ConvCpltCallback>:

// ADC conversion and DMA transfer complete
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]

	// ADC1 is master and ADC2 is slave
	if (hadc->Instance == ADC1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a10      	ldr	r2, [pc, #64]	@ (8001f7c <HAL_ADC_ConvCpltCallback+0x50>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d105      	bne.n	8001f4a <HAL_ADC_ConvCpltCallback+0x1e>
	{
		//HAL_ADCEx_MultiModeStop_DMA(&hadc1);
		doneMeasuringBridgePlasmaADC12(hadc->ErrorCode);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff fb76 	bl	8001634 <doneMeasuringBridgePlasmaADC12>
	else
	{
		HAL_UART_Transmit(&huart3, (uint8_t *) "** ERROR ** Unknown ADC\n\r", 25, 1000);
		printCR();
	}
}
 8001f48:	e013      	b.n	8001f72 <HAL_ADC_ConvCpltCallback+0x46>
	else if (hadc->Instance == ADC3)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a0c      	ldr	r2, [pc, #48]	@ (8001f80 <HAL_ADC_ConvCpltCallback+0x54>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d105      	bne.n	8001f60 <HAL_ADC_ConvCpltCallback+0x34>
		doneMeasuringVoltagesTemperaturesADC3(hadc->ErrorCode);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff fed9 	bl	8001d10 <doneMeasuringVoltagesTemperaturesADC3>
}
 8001f5e:	e008      	b.n	8001f72 <HAL_ADC_ConvCpltCallback+0x46>
		HAL_UART_Transmit(&huart3, (uint8_t *) "** ERROR ** Unknown ADC\n\r", 25, 1000);
 8001f60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f64:	2219      	movs	r2, #25
 8001f66:	4907      	ldr	r1, [pc, #28]	@ (8001f84 <HAL_ADC_ConvCpltCallback+0x58>)
 8001f68:	4807      	ldr	r0, [pc, #28]	@ (8001f88 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001f6a:	f00e f930 	bl	80101ce <HAL_UART_Transmit>
		printCR();
 8001f6e:	f7fe fc0b 	bl	8000788 <printCR>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40022000 	.word	0x40022000
 8001f80:	58026000 	.word	0x58026000
 8001f84:	080148a8 	.word	0x080148a8
 8001f88:	24000e38 	.word	0x24000e38

08001f8c <PowerOffLowSupplies>:
//Power Off Supplies in order3.3V switch and 15V
/**
 * returns 1 if power off unsuccessful. 0 on success
 */
char PowerOffLowSupplies(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
	char status;
	if (powerStatus == V500_OFF)
 8001f92:	4b14      	ldr	r3, [pc, #80]	@ (8001fe4 <PowerOffLowSupplies+0x58>)
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d118      	bne.n	8001fcc <PowerOffLowSupplies+0x40>
	{
		//Power off 3.3V switch voltage
		HAL_GPIO_WritePin(OUT_3V3_SWITCH_GPIO_Port, OUT_3V3_SWITCH_Pin, GPIO_PIN_SET);
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	4812      	ldr	r0, [pc, #72]	@ (8001fe8 <PowerOffLowSupplies+0x5c>)
 8001fa0:	f008 ff26 	bl	800adf0 <HAL_GPIO_WritePin>
		supply_status.s3_3V = 0;
 8001fa4:	4b11      	ldr	r3, [pc, #68]	@ (8001fec <PowerOffLowSupplies+0x60>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001faa:	2001      	movs	r0, #1
 8001fac:	f002 fcea 	bl	8004984 <HAL_Delay>

		//Power off 15V
		HAL_GPIO_WritePin(OUT_15V_ENABLE_GPIO_Port, OUT_15V_ENABLE_Pin, GPIO_PIN_SET);		//There is an inverter between MCU and the output, thus SET
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	2102      	movs	r1, #2
 8001fb4:	480c      	ldr	r0, [pc, #48]	@ (8001fe8 <PowerOffLowSupplies+0x5c>)
 8001fb6:	f008 ff1b 	bl	800adf0 <HAL_GPIO_WritePin>
		supply_status.s15V = 0;
 8001fba:	4b0c      	ldr	r3, [pc, #48]	@ (8001fec <PowerOffLowSupplies+0x60>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	705a      	strb	r2, [r3, #1]
		HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	f002 fcdf 	bl	8004984 <HAL_Delay>
		status = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	71fb      	strb	r3, [r7, #7]
 8001fca:	e006      	b.n	8001fda <PowerOffLowSupplies+0x4e>
	}
	else
	{
		printString("** ERROR ** PowerOffLowSupplies: 500V is On\n\r");
 8001fcc:	4808      	ldr	r0, [pc, #32]	@ (8001ff0 <PowerOffLowSupplies+0x64>)
 8001fce:	f7fe fbeb 	bl	80007a8 <printString>
		printCR();
 8001fd2:	f7fe fbd9 	bl	8000788 <printCR>
		status = 1;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	71fb      	strb	r3, [r7, #7]
	}
	return status;
 8001fda:	79fb      	ldrb	r3, [r7, #7]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	24000a44 	.word	0x24000a44
 8001fe8:	58020c00 	.word	0x58020c00
 8001fec:	24000a40 	.word	0x24000a40
 8001ff0:	080148c4 	.word	0x080148c4

08001ff4 <PowerOffHighSupplies>:
//Power Off Supply 500V
/**
 * Returns 1 if power off unsuccessful. 0 on success
 */
char PowerOffHighSupplies(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
	char status;
	//Make sure the H-bridge outputs are zero before turning off power
	stopHbridge();
 8001ff8:	f7fe fca6 	bl	8000948 <stopHbridge>

	//Power off 500V
	HAL_GPIO_WritePin(OUT_500V_ENABLE_GPIO_Port, OUT_500V_ENABLE_Pin, GPIO_PIN_SET);	//There is an inverter between MCU and the output, thus SET
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	2101      	movs	r1, #1
 8002000:	480d      	ldr	r0, [pc, #52]	@ (8002038 <PowerOffHighSupplies+0x44>)
 8002002:	f008 fef5 	bl	800adf0 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8002006:	2001      	movs	r0, #1
 8002008:	f002 fcbc 	bl	8004984 <HAL_Delay>

	//Disable Line Drive 1
	HAL_GPIO_WritePin(LINE_DRIVER1_ENABLE_GPIO_Port, LINE_DRIVER1_ENABLE_Pin, GPIO_PIN_SET);
 800200c:	2201      	movs	r2, #1
 800200e:	2104      	movs	r1, #4
 8002010:	480a      	ldr	r0, [pc, #40]	@ (800203c <PowerOffHighSupplies+0x48>)
 8002012:	f008 feed 	bl	800adf0 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8002016:	2001      	movs	r0, #1
 8002018:	f002 fcb4 	bl	8004984 <HAL_Delay>

	//Signal to robot controller all power supplies are inactive.
	HAL_GPIO_WritePin(LED_ACTIVE_GPIO_Port, LED_ACTIVE_Pin, GPIO_PIN_SET);			//There is an inverter between MCU and the output, thus SET
 800201c:	2201      	movs	r2, #1
 800201e:	2101      	movs	r1, #1
 8002020:	4807      	ldr	r0, [pc, #28]	@ (8002040 <PowerOffHighSupplies+0x4c>)
 8002022:	f008 fee5 	bl	800adf0 <HAL_GPIO_WritePin>

	powerStatus = V500_OFF;
 8002026:	4b07      	ldr	r3, [pc, #28]	@ (8002044 <PowerOffHighSupplies+0x50>)
 8002028:	2200      	movs	r2, #0
 800202a:	801a      	strh	r2, [r3, #0]
	supply_status.sHV = 0;
 800202c:	4b06      	ldr	r3, [pc, #24]	@ (8002048 <PowerOffHighSupplies+0x54>)
 800202e:	2200      	movs	r2, #0
 8002030:	709a      	strb	r2, [r3, #2]
	return 0;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	bd80      	pop	{r7, pc}
 8002038:	58021800 	.word	0x58021800
 800203c:	58020400 	.word	0x58020400
 8002040:	58021000 	.word	0x58021000
 8002044:	24000a44 	.word	0x24000a44
 8002048:	24000a40 	.word	0x24000a40

0800204c <PowerOffSupplies>:

void PowerOffSupplies(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
	PowerOffHighSupplies();
 8002050:	f7ff ffd0 	bl	8001ff4 <PowerOffHighSupplies>
	PowerOffLowSupplies();
 8002054:	f7ff ff9a 	bl	8001f8c <PowerOffLowSupplies>
}
 8002058:	bf00      	nop
 800205a:	bd80      	pop	{r7, pc}

0800205c <PowerOnLowSupplies>:

//Power On Supplies in order 15V, 3.3V switch
//Returns 1 if the power up sequence was successful, and 0 if it failed
int PowerOnLowSupplies(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
	//Power on 15V
	//printString("\n\rPower on 15V - ");
	HAL_GPIO_WritePin(OUT_15V_ENABLE_GPIO_Port, OUT_15V_ENABLE_Pin, GPIO_PIN_RESET);	//There is an inverter between MCU and the output, thus RESET
 8002060:	2200      	movs	r2, #0
 8002062:	2102      	movs	r1, #2
 8002064:	4819      	ldr	r0, [pc, #100]	@ (80020cc <PowerOnLowSupplies+0x70>)
 8002066:	f008 fec3 	bl	800adf0 <HAL_GPIO_WritePin>
	printString("\n\rPower on 15V - ");
 800206a:	4819      	ldr	r0, [pc, #100]	@ (80020d0 <PowerOnLowSupplies+0x74>)
 800206c:	f7fe fb9c 	bl	80007a8 <printString>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8002070:	2001      	movs	r0, #1
 8002072:	f002 fc87 	bl	8004984 <HAL_Delay>

	//Start reading ADC3 channels
	measureVoltagesTemperaturesADC3();
 8002076:	f7ff fe37 	bl	8001ce8 <measureVoltagesTemperaturesADC3>
	//Wait until ADC3 reading is done
	while (sADC.adc3_reading) ;
 800207a:	bf00      	nop
 800207c:	4b15      	ldr	r3, [pc, #84]	@ (80020d4 <PowerOnLowSupplies+0x78>)
 800207e:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	@ 0x70c
 8002082:	b29b      	uxth	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1f9      	bne.n	800207c <PowerOnLowSupplies+0x20>

	//Check 15V voltage
	if (sADC.adc3_data[ADC3_15V] >= sADC3threshold[ADC3_15V])
 8002088:	4b12      	ldr	r3, [pc, #72]	@ (80020d4 <PowerOnLowSupplies+0x78>)
 800208a:	f8b3 24b2 	ldrh.w	r2, [r3, #1202]	@ 0x4b2
 800208e:	4b12      	ldr	r3, [pc, #72]	@ (80020d8 <PowerOnLowSupplies+0x7c>)
 8002090:	885b      	ldrh	r3, [r3, #2]
 8002092:	429a      	cmp	r2, r3
 8002094:	d312      	bcc.n	80020bc <PowerOnLowSupplies+0x60>
	{
		printString("Ok");
 8002096:	4811      	ldr	r0, [pc, #68]	@ (80020dc <PowerOnLowSupplies+0x80>)
 8002098:	f7fe fb86 	bl	80007a8 <printString>
		supply_status.s15V = 1;
 800209c:	4b10      	ldr	r3, [pc, #64]	@ (80020e0 <PowerOnLowSupplies+0x84>)
 800209e:	2201      	movs	r2, #1
 80020a0:	705a      	strb	r2, [r3, #1]
		PowerOffLowSupplies();
		return(0);
	}

	//Power on 3.3V switch voltage
	printString("\n\rPower on 3.3V switch");
 80020a2:	4810      	ldr	r0, [pc, #64]	@ (80020e4 <PowerOnLowSupplies+0x88>)
 80020a4:	f7fe fb80 	bl	80007a8 <printString>
	HAL_GPIO_WritePin(OUT_3V3_SWITCH_GPIO_Port, OUT_3V3_SWITCH_Pin, GPIO_PIN_RESET);
 80020a8:	2200      	movs	r2, #0
 80020aa:	2101      	movs	r1, #1
 80020ac:	4807      	ldr	r0, [pc, #28]	@ (80020cc <PowerOnLowSupplies+0x70>)
 80020ae:	f008 fe9f 	bl	800adf0 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 80020b2:	2001      	movs	r0, #1
 80020b4:	f002 fc66 	bl	8004984 <HAL_Delay>

	return(1);
 80020b8:	2301      	movs	r3, #1
 80020ba:	e005      	b.n	80020c8 <PowerOnLowSupplies+0x6c>
		printString("Fail");
 80020bc:	480a      	ldr	r0, [pc, #40]	@ (80020e8 <PowerOnLowSupplies+0x8c>)
 80020be:	f7fe fb73 	bl	80007a8 <printString>
		PowerOffLowSupplies();
 80020c2:	f7ff ff63 	bl	8001f8c <PowerOffLowSupplies>
		return(0);
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	58020c00 	.word	0x58020c00
 80020d0:	080148f4 	.word	0x080148f4
 80020d4:	24000330 	.word	0x24000330
 80020d8:	24000004 	.word	0x24000004
 80020dc:	08014908 	.word	0x08014908
 80020e0:	24000a40 	.word	0x24000a40
 80020e4:	08014914 	.word	0x08014914
 80020e8:	0801490c 	.word	0x0801490c

080020ec <PowerOnHighSupplies>:

//Power On Supply 500V
//Returns 1 if the power up was successful, and 0 if it failed
int PowerOnHighSupplies(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
	stopHbridge(); 	//Make sure the H-bridge outputs are zero before enabling the line driver
 80020f0:	f7fe fc2a 	bl	8000948 <stopHbridge>

	//Enable Line Drive 1
	printString("\n\rEnable Line Drive 1");
 80020f4:	481d      	ldr	r0, [pc, #116]	@ (800216c <PowerOnHighSupplies+0x80>)
 80020f6:	f7fe fb57 	bl	80007a8 <printString>
	HAL_GPIO_WritePin(LINE_DRIVER1_ENABLE_GPIO_Port, LINE_DRIVER1_ENABLE_Pin, GPIO_PIN_RESET);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2104      	movs	r1, #4
 80020fe:	481c      	ldr	r0, [pc, #112]	@ (8002170 <PowerOnHighSupplies+0x84>)
 8002100:	f008 fe76 	bl	800adf0 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8002104:	2001      	movs	r0, #1
 8002106:	f002 fc3d 	bl	8004984 <HAL_Delay>

	//Power on 500V
	printString("\n\rPower on 500V - ");
 800210a:	481a      	ldr	r0, [pc, #104]	@ (8002174 <PowerOnHighSupplies+0x88>)
 800210c:	f7fe fb4c 	bl	80007a8 <printString>
	HAL_GPIO_WritePin(OUT_500V_ENABLE_GPIO_Port, OUT_500V_ENABLE_Pin, GPIO_PIN_RESET);	//There is an inverter between MCU and the output, thus RESET
 8002110:	2200      	movs	r2, #0
 8002112:	2101      	movs	r1, #1
 8002114:	4818      	ldr	r0, [pc, #96]	@ (8002178 <PowerOnHighSupplies+0x8c>)
 8002116:	f008 fe6b 	bl	800adf0 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 800211a:	2001      	movs	r0, #1
 800211c:	f002 fc32 	bl	8004984 <HAL_Delay>

	//Start reading ADC3 channels
	measureVoltagesTemperaturesADC3();
 8002120:	f7ff fde2 	bl	8001ce8 <measureVoltagesTemperaturesADC3>
	//Wait until ADC reading is done
	while (sADC.adc3_reading) ;
 8002124:	bf00      	nop
 8002126:	4b15      	ldr	r3, [pc, #84]	@ (800217c <PowerOnHighSupplies+0x90>)
 8002128:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	@ 0x70c
 800212c:	b29b      	uxth	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f9      	bne.n	8002126 <PowerOnHighSupplies+0x3a>

	//Check 500V voltage
	if (sADC.adc3_data[ADC3_500VDC] >= sADC3threshold[ADC3_500VDC])
 8002132:	4b12      	ldr	r3, [pc, #72]	@ (800217c <PowerOnHighSupplies+0x90>)
 8002134:	f8b3 24ba 	ldrh.w	r2, [r3, #1210]	@ 0x4ba
 8002138:	4b11      	ldr	r3, [pc, #68]	@ (8002180 <PowerOnHighSupplies+0x94>)
 800213a:	895b      	ldrh	r3, [r3, #10]
 800213c:	429a      	cmp	r2, r3
 800213e:	d306      	bcc.n	800214e <PowerOnHighSupplies+0x62>
	{
		printString("Ok");
 8002140:	4810      	ldr	r0, [pc, #64]	@ (8002184 <PowerOnHighSupplies+0x98>)
 8002142:	f7fe fb31 	bl	80007a8 <printString>
		supply_status.sHV = 1;
 8002146:	4b10      	ldr	r3, [pc, #64]	@ (8002188 <PowerOnHighSupplies+0x9c>)
 8002148:	2201      	movs	r2, #1
 800214a:	709a      	strb	r2, [r3, #2]
 800214c:	e002      	b.n	8002154 <PowerOnHighSupplies+0x68>
	}
	else
	{
		//printString("Fail");
		printString("debug");
 800214e:	480f      	ldr	r0, [pc, #60]	@ (800218c <PowerOnHighSupplies+0xa0>)
 8002150:	f7fe fb2a 	bl	80007a8 <printString>
		//PowerOffHighSupplies();
		//return(0);
	}

	//Signal to robot controller all power supplies are active
	HAL_GPIO_WritePin(LED_ACTIVE_GPIO_Port, LED_ACTIVE_Pin, GPIO_PIN_RESET);	//There is an inverter between MCU and the output, thus RESET
 8002154:	2200      	movs	r2, #0
 8002156:	2101      	movs	r1, #1
 8002158:	480d      	ldr	r0, [pc, #52]	@ (8002190 <PowerOnHighSupplies+0xa4>)
 800215a:	f008 fe49 	bl	800adf0 <HAL_GPIO_WritePin>

	powerStatus = V500_ON;
 800215e:	4b0d      	ldr	r3, [pc, #52]	@ (8002194 <PowerOnHighSupplies+0xa8>)
 8002160:	2201      	movs	r2, #1
 8002162:	801a      	strh	r2, [r3, #0]

	return(1);
 8002164:	2301      	movs	r3, #1
}
 8002166:	4618      	mov	r0, r3
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	0801492c 	.word	0x0801492c
 8002170:	58020400 	.word	0x58020400
 8002174:	08014944 	.word	0x08014944
 8002178:	58021800 	.word	0x58021800
 800217c:	24000330 	.word	0x24000330
 8002180:	24000004 	.word	0x24000004
 8002184:	08014908 	.word	0x08014908
 8002188:	24000a40 	.word	0x24000a40
 800218c:	08014958 	.word	0x08014958
 8002190:	58021000 	.word	0x58021000
 8002194:	24000a44 	.word	0x24000a44

08002198 <HAL_GPIO_EXTI_Callback>:


// GPIO interrupt handler
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	80fb      	strh	r3, [r7, #6]
	if (sFlashConfig.mode == RUN_MODE)
 80021a2:	4b07      	ldr	r3, [pc, #28]	@ (80021c0 <HAL_GPIO_EXTI_Callback+0x28>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d105      	bne.n	80021b6 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		// Power off request received
		if(GPIO_Pin == POWER_OFF_IRQ_Pin)
 80021aa:	88fb      	ldrh	r3, [r7, #6]
 80021ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021b0:	d101      	bne.n	80021b6 <HAL_GPIO_EXTI_Callback+0x1e>
			PowerOffSupplies();
 80021b2:	f7ff ff4b 	bl	800204c <PowerOffSupplies>
	}
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	24000a48 	.word	0x24000a48

080021c4 <InitializeConfigMenu>:

// Initialize the UART3 configuration menu
static void InitializeConfigMenu(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
	int item = 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	607b      	str	r3, [r7, #4]

	config_menu[item++] = "\n\rPlasma Driver Configuration Menu";
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	1c5a      	adds	r2, r3, #1
 80021d2:	607a      	str	r2, [r7, #4]
 80021d4:	4a0c      	ldr	r2, [pc, #48]	@ (8002208 <InitializeConfigMenu+0x44>)
 80021d6:	490d      	ldr	r1, [pc, #52]	@ (800220c <InitializeConfigMenu+0x48>)
 80021d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	config_menu[item++] = "   m: Change mode (Test/Run)";
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	1c5a      	adds	r2, r3, #1
 80021e0:	607a      	str	r2, [r7, #4]
 80021e2:	4a09      	ldr	r2, [pc, #36]	@ (8002208 <InitializeConfigMenu+0x44>)
 80021e4:	490a      	ldr	r1, [pc, #40]	@ (8002210 <InitializeConfigMenu+0x4c>)
 80021e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if (item > CONFIG_MENU_SIZE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	dd06      	ble.n	80021fe <InitializeConfigMenu+0x3a>
		HAL_UART_Transmit(&huart3, (uint8_t *) "\n\rIncrease CONFIG_MENU_SIZE", 20, 1000);
 80021f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021f4:	2214      	movs	r2, #20
 80021f6:	4907      	ldr	r1, [pc, #28]	@ (8002214 <InitializeConfigMenu+0x50>)
 80021f8:	4807      	ldr	r0, [pc, #28]	@ (8002218 <InitializeConfigMenu+0x54>)
 80021fa:	f00d ffe8 	bl	80101ce <HAL_UART_Transmit>

}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	24000328 	.word	0x24000328
 800220c:	08014960 	.word	0x08014960
 8002210:	08014984 	.word	0x08014984
 8002214:	080149a4 	.word	0x080149a4
 8002218:	24000e38 	.word	0x24000e38

0800221c <InitializeMenu>:

// Initialize the UART3 menu
static void InitializeMenu(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
	int item = 0;
 8002222:	2300      	movs	r3, #0
 8002224:	607b      	str	r3, [r7, #4]

	//Clear previous menu
	for (int i=0; i < MAX_MENU_SIZE; ++i)
 8002226:	2300      	movs	r3, #0
 8002228:	603b      	str	r3, [r7, #0]
 800222a:	e007      	b.n	800223c <InitializeMenu+0x20>
	{
		menu[i] = "";
 800222c:	4a4f      	ldr	r2, [pc, #316]	@ (800236c <InitializeMenu+0x150>)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	494f      	ldr	r1, [pc, #316]	@ (8002370 <InitializeMenu+0x154>)
 8002232:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0; i < MAX_MENU_SIZE; ++i)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	3301      	adds	r3, #1
 800223a:	603b      	str	r3, [r7, #0]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	2b0d      	cmp	r3, #13
 8002240:	ddf4      	ble.n	800222c <InitializeMenu+0x10>
	}

	if (sFlashConfig.mode == TEST_MODE)
 8002242:	4b4c      	ldr	r3, [pc, #304]	@ (8002374 <InitializeMenu+0x158>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d162      	bne.n	8002310 <InitializeMenu+0xf4>
	{
		menu[item++] = "\n\rPlasma Driver TEST Menu";
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	1c5a      	adds	r2, r3, #1
 800224e:	607a      	str	r2, [r7, #4]
 8002250:	4a46      	ldr	r2, [pc, #280]	@ (800236c <InitializeMenu+0x150>)
 8002252:	4949      	ldr	r1, [pc, #292]	@ (8002378 <InitializeMenu+0x15c>)
 8002254:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   p: Power on supplies";
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	1c5a      	adds	r2, r3, #1
 800225c:	607a      	str	r2, [r7, #4]
 800225e:	4a43      	ldr	r2, [pc, #268]	@ (800236c <InitializeMenu+0x150>)
 8002260:	4946      	ldr	r1, [pc, #280]	@ (800237c <InitializeMenu+0x160>)
 8002262:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   o: Power off supplies";
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	1c5a      	adds	r2, r3, #1
 800226a:	607a      	str	r2, [r7, #4]
 800226c:	4a3f      	ldr	r2, [pc, #252]	@ (800236c <InitializeMenu+0x150>)
 800226e:	4944      	ldr	r1, [pc, #272]	@ (8002380 <InitializeMenu+0x164>)
 8002270:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   s: Start/stop driving H-Bridge";
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	1c5a      	adds	r2, r3, #1
 8002278:	607a      	str	r2, [r7, #4]
 800227a:	4a3c      	ldr	r2, [pc, #240]	@ (800236c <InitializeMenu+0x150>)
 800227c:	4941      	ldr	r1, [pc, #260]	@ (8002384 <InitializeMenu+0x168>)
 800227e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   f: Set H-bridge frequency (Hz)";
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	1c5a      	adds	r2, r3, #1
 8002286:	607a      	str	r2, [r7, #4]
 8002288:	4a38      	ldr	r2, [pc, #224]	@ (800236c <InitializeMenu+0x150>)
 800228a:	493f      	ldr	r1, [pc, #252]	@ (8002388 <InitializeMenu+0x16c>)
 800228c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   d: Set H-bridge dead time (%)";
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	1c5a      	adds	r2, r3, #1
 8002294:	607a      	str	r2, [r7, #4]
 8002296:	4a35      	ldr	r2, [pc, #212]	@ (800236c <InitializeMenu+0x150>)
 8002298:	493c      	ldr	r1, [pc, #240]	@ (800238c <InitializeMenu+0x170>)
 800229a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   a: Start ADC1 and ADC2 measurement";
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	607a      	str	r2, [r7, #4]
 80022a4:	4a31      	ldr	r2, [pc, #196]	@ (800236c <InitializeMenu+0x150>)
 80022a6:	493a      	ldr	r1, [pc, #232]	@ (8002390 <InitializeMenu+0x174>)
 80022a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   b: Start ADC3 measurement";
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	1c5a      	adds	r2, r3, #1
 80022b0:	607a      	str	r2, [r7, #4]
 80022b2:	4a2e      	ldr	r2, [pc, #184]	@ (800236c <InitializeMenu+0x150>)
 80022b4:	4937      	ldr	r1, [pc, #220]	@ (8002394 <InitializeMenu+0x178>)
 80022b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   q: Frequency correction";
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	1c5a      	adds	r2, r3, #1
 80022be:	607a      	str	r2, [r7, #4]
 80022c0:	4a2a      	ldr	r2, [pc, #168]	@ (800236c <InitializeMenu+0x150>)
 80022c2:	4935      	ldr	r1, [pc, #212]	@ (8002398 <InitializeMenu+0x17c>)
 80022c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   z: Debug output (On/Off)";
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	1c5a      	adds	r2, r3, #1
 80022cc:	607a      	str	r2, [r7, #4]
 80022ce:	4a27      	ldr	r2, [pc, #156]	@ (800236c <InitializeMenu+0x150>)
 80022d0:	4932      	ldr	r1, [pc, #200]	@ (800239c <InitializeMenu+0x180>)
 80022d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   c: Show/Change configuration";
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	607a      	str	r2, [r7, #4]
 80022dc:	4a23      	ldr	r2, [pc, #140]	@ (800236c <InitializeMenu+0x150>)
 80022de:	4930      	ldr	r1, [pc, #192]	@ (80023a0 <InitializeMenu+0x184>)
 80022e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   t: Test GPIO";
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	1c5a      	adds	r2, r3, #1
 80022e8:	607a      	str	r2, [r7, #4]
 80022ea:	4a20      	ldr	r2, [pc, #128]	@ (800236c <InitializeMenu+0x150>)
 80022ec:	492d      	ldr	r1, [pc, #180]	@ (80023a4 <InitializeMenu+0x188>)
 80022ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   y: Auto Frequency Adjustment";
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	607a      	str	r2, [r7, #4]
 80022f8:	4a1c      	ldr	r2, [pc, #112]	@ (800236c <InitializeMenu+0x150>)
 80022fa:	492b      	ldr	r1, [pc, #172]	@ (80023a8 <InitializeMenu+0x18c>)
 80022fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   u: Auto Voltage Adjustment";
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	607a      	str	r2, [r7, #4]
 8002306:	4a19      	ldr	r2, [pc, #100]	@ (800236c <InitializeMenu+0x150>)
 8002308:	4928      	ldr	r1, [pc, #160]	@ (80023ac <InitializeMenu+0x190>)
 800230a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800230e:	e019      	b.n	8002344 <InitializeMenu+0x128>
	}
	else if ((sFlashConfig.mode == RUN_MODE))
 8002310:	4b18      	ldr	r3, [pc, #96]	@ (8002374 <InitializeMenu+0x158>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d10e      	bne.n	8002336 <InitializeMenu+0x11a>
	{
		menu[item++] = "\n\rPlasma Driver RUN Menu";
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	1c5a      	adds	r2, r3, #1
 800231c:	607a      	str	r2, [r7, #4]
 800231e:	4a13      	ldr	r2, [pc, #76]	@ (800236c <InitializeMenu+0x150>)
 8002320:	4923      	ldr	r1, [pc, #140]	@ (80023b0 <InitializeMenu+0x194>)
 8002322:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   c: Show/Change current configuration";
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	607a      	str	r2, [r7, #4]
 800232c:	4a0f      	ldr	r2, [pc, #60]	@ (800236c <InitializeMenu+0x150>)
 800232e:	4921      	ldr	r1, [pc, #132]	@ (80023b4 <InitializeMenu+0x198>)
 8002330:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8002334:	e006      	b.n	8002344 <InitializeMenu+0x128>
	}
	else
	{
		menu[item++] = "\n\rERROR SETTING UP MENU";
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	607a      	str	r2, [r7, #4]
 800233c:	4a0b      	ldr	r2, [pc, #44]	@ (800236c <InitializeMenu+0x150>)
 800233e:	491e      	ldr	r1, [pc, #120]	@ (80023b8 <InitializeMenu+0x19c>)
 8002340:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	menu_size = item;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	b29a      	uxth	r2, r3
 8002348:	4b1c      	ldr	r3, [pc, #112]	@ (80023bc <InitializeMenu+0x1a0>)
 800234a:	801a      	strh	r2, [r3, #0]

	if (menu_size> MAX_MENU_SIZE)
 800234c:	4b1b      	ldr	r3, [pc, #108]	@ (80023bc <InitializeMenu+0x1a0>)
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	2b0e      	cmp	r3, #14
 8002352:	d906      	bls.n	8002362 <InitializeMenu+0x146>
		HAL_UART_Transmit(&huart3, (uint8_t *) "\n\rIncrease MENU_SIZE", 20, 1000);
 8002354:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002358:	2214      	movs	r2, #20
 800235a:	4919      	ldr	r1, [pc, #100]	@ (80023c0 <InitializeMenu+0x1a4>)
 800235c:	4819      	ldr	r0, [pc, #100]	@ (80023c4 <InitializeMenu+0x1a8>)
 800235e:	f00d ff36 	bl	80101ce <HAL_UART_Transmit>

}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	240002ec 	.word	0x240002ec
 8002370:	080149c0 	.word	0x080149c0
 8002374:	24000a48 	.word	0x24000a48
 8002378:	080149c4 	.word	0x080149c4
 800237c:	080149e0 	.word	0x080149e0
 8002380:	080149f8 	.word	0x080149f8
 8002384:	08014a14 	.word	0x08014a14
 8002388:	08014a38 	.word	0x08014a38
 800238c:	08014a5c 	.word	0x08014a5c
 8002390:	08014a80 	.word	0x08014a80
 8002394:	08014aa8 	.word	0x08014aa8
 8002398:	08014ac8 	.word	0x08014ac8
 800239c:	08014ae4 	.word	0x08014ae4
 80023a0:	08014b00 	.word	0x08014b00
 80023a4:	08014b20 	.word	0x08014b20
 80023a8:	08014b30 	.word	0x08014b30
 80023ac:	08014b50 	.word	0x08014b50
 80023b0:	08014b70 	.word	0x08014b70
 80023b4:	08014b8c 	.word	0x08014b8c
 80023b8:	08014bb4 	.word	0x08014bb4
 80023bc:	24000324 	.word	0x24000324
 80023c0:	08014bcc 	.word	0x08014bcc
 80023c4:	24000e38 	.word	0x24000e38

080023c8 <ShowChangeConfigFlash>:

// Show configuration. Add option to change configuration
void ShowChangeConfigFlash(void)
{
 80023c8:	b590      	push	{r4, r7, lr}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
	uint16_t aYes;
	uint16_t mode;
	char input;

	printConfigFlash();
 80023ce:	f7fe fa01 	bl	80007d4 <printConfigFlash>
	printString("\n\rChange configuration (0:No 1:Yes)? ");
 80023d2:	482e      	ldr	r0, [pc, #184]	@ (800248c <ShowChangeConfigFlash+0xc4>)
 80023d4:	f7fe f9e8 	bl	80007a8 <printString>
	if (GetUint16Input(&aYes, 1, 0, 1))
 80023d8:	f107 000a 	add.w	r0, r7, #10
 80023dc:	2301      	movs	r3, #1
 80023de:	2200      	movs	r2, #0
 80023e0:	2101      	movs	r1, #1
 80023e2:	f7ff fd23 	bl	8001e2c <GetUint16Input>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d04b      	beq.n	8002484 <ShowChangeConfigFlash+0xbc>
	{
		if (aYes)
 80023ec:	897b      	ldrh	r3, [r7, #10]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d048      	beq.n	8002484 <ShowChangeConfigFlash+0xbc>
		{
			for (int i=0; i<CONFIG_MENU_SIZE; i++)
 80023f2:	2300      	movs	r3, #0
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	e017      	b.n	8002428 <ShowChangeConfigFlash+0x60>
			{
				HAL_UART_Transmit(&huart3, (uint8_t *) config_menu[i], strlen(config_menu[i]), 1000);
 80023f8:	4a25      	ldr	r2, [pc, #148]	@ (8002490 <ShowChangeConfigFlash+0xc8>)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002400:	4a23      	ldr	r2, [pc, #140]	@ (8002490 <ShowChangeConfigFlash+0xc8>)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002408:	4618      	mov	r0, r3
 800240a:	f7fd ffe1 	bl	80003d0 <strlen>
 800240e:	4603      	mov	r3, r0
 8002410:	b29a      	uxth	r2, r3
 8002412:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002416:	4621      	mov	r1, r4
 8002418:	481e      	ldr	r0, [pc, #120]	@ (8002494 <ShowChangeConfigFlash+0xcc>)
 800241a:	f00d fed8 	bl	80101ce <HAL_UART_Transmit>
				printCR();
 800241e:	f7fe f9b3 	bl	8000788 <printCR>
			for (int i=0; i<CONFIG_MENU_SIZE; i++)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	3301      	adds	r3, #1
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2b01      	cmp	r3, #1
 800242c:	dde4      	ble.n	80023f8 <ShowChangeConfigFlash+0x30>
			}
			printCR();
 800242e:	f7fe f9ab 	bl	8000788 <printCR>

			//Wait for user input
			if (HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 60000) == HAL_OK)
 8002432:	1df9      	adds	r1, r7, #7
 8002434:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8002438:	2201      	movs	r2, #1
 800243a:	4816      	ldr	r0, [pc, #88]	@ (8002494 <ShowChangeConfigFlash+0xcc>)
 800243c:	f00d ff55 	bl	80102ea <HAL_UART_Receive>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d11e      	bne.n	8002484 <ShowChangeConfigFlash+0xbc>
			{
				switch (input)
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	2b6d      	cmp	r3, #109	@ 0x6d
 800244a:	d11b      	bne.n	8002484 <ShowChangeConfigFlash+0xbc>
				{
					case 'm': //Change mode
						printString("\n\rChange mode (0:Test 1:Run)? ");
 800244c:	4812      	ldr	r0, [pc, #72]	@ (8002498 <ShowChangeConfigFlash+0xd0>)
 800244e:	f7fe f9ab 	bl	80007a8 <printString>
						if (GetUint16Input(&mode, 1, 0, 1))
 8002452:	f107 0008 	add.w	r0, r7, #8
 8002456:	2301      	movs	r3, #1
 8002458:	2200      	movs	r2, #0
 800245a:	2101      	movs	r1, #1
 800245c:	f7ff fce6 	bl	8001e2c <GetUint16Input>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00d      	beq.n	8002482 <ShowChangeConfigFlash+0xba>
						{   // Data entry valid
							if (sFlashConfig.mode != mode)
 8002466:	4b0d      	ldr	r3, [pc, #52]	@ (800249c <ShowChangeConfigFlash+0xd4>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	461a      	mov	r2, r3
 800246c:	893b      	ldrh	r3, [r7, #8]
 800246e:	429a      	cmp	r2, r3
 8002470:	d007      	beq.n	8002482 <ShowChangeConfigFlash+0xba>
							{
								sFlashConfig.mode = mode;
 8002472:	893b      	ldrh	r3, [r7, #8]
 8002474:	b2da      	uxtb	r2, r3
 8002476:	4b09      	ldr	r3, [pc, #36]	@ (800249c <ShowChangeConfigFlash+0xd4>)
 8002478:	701a      	strb	r2, [r3, #0]
								InitializeMenu();
 800247a:	f7ff fecf 	bl	800221c <InitializeMenu>
								writeConfigFlash();
 800247e:	f7fe f939 	bl	80006f4 <writeConfigFlash>
							}
						}
					break;
 8002482:	bf00      	nop
				}
			}
		}
	}
}
 8002484:	bf00      	nop
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	bd90      	pop	{r4, r7, pc}
 800248c:	08014be4 	.word	0x08014be4
 8002490:	24000328 	.word	0x24000328
 8002494:	24000e38 	.word	0x24000e38
 8002498:	08014c0c 	.word	0x08014c0c
 800249c:	24000a48 	.word	0x24000a48

080024a0 <testGPIO>:

//Test GPIO settings
void testGPIO(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0

		printString("\n\rClear LED_GREEN");
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
		GetUint16Input(&aYes, 1, 0, 1);
*/
}
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <RunModeAction>:

// Action table for the run mode menu
static void RunModeAction(char input)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	4603      	mov	r3, r0
 80024b6:	71fb      	strb	r3, [r7, #7]
	switch (input)
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	2b63      	cmp	r3, #99	@ 0x63
 80024bc:	d102      	bne.n	80024c4 <RunModeAction+0x16>
	{
		case 'c': //Show/Change current configuration
			ShowChangeConfigFlash();
 80024be:	f7ff ff83 	bl	80023c8 <ShowChangeConfigFlash>
			break;
 80024c2:	bf00      	nop
	}
}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <TestModeAction>:

// Action table for the test mode menu
static void TestModeAction(char input)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b09c      	sub	sp, #112	@ 0x70
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	71fb      	strb	r3, [r7, #7]
	switch (input)
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	3b61      	subs	r3, #97	@ 0x61
 80024da:	2b19      	cmp	r3, #25
 80024dc:	f200 80fd 	bhi.w	80026da <TestModeAction+0x20e>
 80024e0:	a201      	add	r2, pc, #4	@ (adr r2, 80024e8 <TestModeAction+0x1c>)
 80024e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e6:	bf00      	nop
 80024e8:	08002587 	.word	0x08002587
 80024ec:	080025af 	.word	0x080025af
 80024f0:	0800268d 	.word	0x0800268d
 80024f4:	080025f1 	.word	0x080025f1
 80024f8:	080026db 	.word	0x080026db
 80024fc:	080025c7 	.word	0x080025c7
 8002500:	080026db 	.word	0x080026db
 8002504:	080026db 	.word	0x080026db
 8002508:	080026db 	.word	0x080026db
 800250c:	080026db 	.word	0x080026db
 8002510:	080026db 	.word	0x080026db
 8002514:	080026db 	.word	0x080026db
 8002518:	080026db 	.word	0x080026db
 800251c:	080026db 	.word	0x080026db
 8002520:	0800257b 	.word	0x0800257b
 8002524:	08002551 	.word	0x08002551
 8002528:	0800263d 	.word	0x0800263d
 800252c:	080026db 	.word	0x080026db
 8002530:	08002617 	.word	0x08002617
 8002534:	08002693 	.word	0x08002693
 8002538:	0800269f 	.word	0x0800269f
 800253c:	080026db 	.word	0x080026db
 8002540:	080026db 	.word	0x080026db
 8002544:	080026db 	.word	0x080026db
 8002548:	08002699 	.word	0x08002699
 800254c:	0800266b 	.word	0x0800266b
	{
		case 'p': //Power supplies on
			if (powerStatus == V500_OFF)
 8002550:	4b64      	ldr	r3, [pc, #400]	@ (80026e4 <TestModeAction+0x218>)
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10c      	bne.n	8002572 <TestModeAction+0xa6>
			{
				if (PowerOnHighSupplies() == POWERON_FAILED)
 8002558:	f7ff fdc8 	bl	80020ec <PowerOnHighSupplies>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d103      	bne.n	800256a <TestModeAction+0x9e>
				{
					printString("\n\rPower on failed\n\r");
 8002562:	4861      	ldr	r0, [pc, #388]	@ (80026e8 <TestModeAction+0x21c>)
 8002564:	f7fe f920 	bl	80007a8 <printString>
			}
			else
			{
				printString("\n\rPower supplies are on\n\r");
			}
			break;
 8002568:	e0b7      	b.n	80026da <TestModeAction+0x20e>
					printString("\n\rPower on succeeded\n\r");
 800256a:	4860      	ldr	r0, [pc, #384]	@ (80026ec <TestModeAction+0x220>)
 800256c:	f7fe f91c 	bl	80007a8 <printString>
			break;
 8002570:	e0b3      	b.n	80026da <TestModeAction+0x20e>
				printString("\n\rPower supplies are on\n\r");
 8002572:	485f      	ldr	r0, [pc, #380]	@ (80026f0 <TestModeAction+0x224>)
 8002574:	f7fe f918 	bl	80007a8 <printString>
			break;
 8002578:	e0af      	b.n	80026da <TestModeAction+0x20e>

		case 'o': //Power supplies off
			printString("\n\rPower off supplies\n\r");
 800257a:	485e      	ldr	r0, [pc, #376]	@ (80026f4 <TestModeAction+0x228>)
 800257c:	f7fe f914 	bl	80007a8 <printString>
			PowerOffHighSupplies();
 8002580:	f7ff fd38 	bl	8001ff4 <PowerOffHighSupplies>
			break;
 8002584:	e0a9      	b.n	80026da <TestModeAction+0x20e>

		case 'a': //Start ADC1 and ADC2 analog voltage measurement
			if (sHbridge.on)
 8002586:	4b5c      	ldr	r3, [pc, #368]	@ (80026f8 <TestModeAction+0x22c>)
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00b      	beq.n	80025a6 <TestModeAction+0xda>
			{
				//Setup to read ADC1 and ADC2 channels
				//Reading will start at TIM1 CH1 0->1 interrupt
				measureBridgePlasmaADC12();
 800258e:	f7fe fffb 	bl	8001588 <measureBridgePlasmaADC12>
				//Wait until ADC3 reading is done
				while (sADC.adc12_reading) ;
 8002592:	bf00      	nop
 8002594:	4b59      	ldr	r3, [pc, #356]	@ (80026fc <TestModeAction+0x230>)
 8002596:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	@ 0x70e
 800259a:	b29b      	uxth	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1f9      	bne.n	8002594 <TestModeAction+0xc8>
				//Print ADC3 data on UART3
				printADC12data();
 80025a0:	f7fe fd6e 	bl	8001080 <printADC12data>
			}
			else
			{
				printString("\n\r ---- H-Bridge needs to be on");
			}
			break;
 80025a4:	e099      	b.n	80026da <TestModeAction+0x20e>
				printString("\n\r ---- H-Bridge needs to be on");
 80025a6:	4856      	ldr	r0, [pc, #344]	@ (8002700 <TestModeAction+0x234>)
 80025a8:	f7fe f8fe 	bl	80007a8 <printString>
			break;
 80025ac:	e095      	b.n	80026da <TestModeAction+0x20e>

		case 'b': //Start ADC3 analog voltage measurement
				//Start reading ADC3 channels
				measureVoltagesTemperaturesADC3();
 80025ae:	f7ff fb9b 	bl	8001ce8 <measureVoltagesTemperaturesADC3>
				//Wait until ADC3 reading is done
				while (sADC.adc3_reading) ;
 80025b2:	bf00      	nop
 80025b4:	4b51      	ldr	r3, [pc, #324]	@ (80026fc <TestModeAction+0x230>)
 80025b6:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	@ 0x70c
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f9      	bne.n	80025b4 <TestModeAction+0xe8>
				//Print ADC3 data on UART3
				printADC3data();
 80025c0:	f7ff fb4c 	bl	8001c5c <printADC3data>
			break;
 80025c4:	e089      	b.n	80026da <TestModeAction+0x20e>

		case 'f': //Enter frequency (Hz)
			printHbridgeData();
 80025c6:	f7fe f9ed 	bl	80009a4 <printHbridgeData>
			printString("\n\rEnter frequency (Hz): ");
 80025ca:	484e      	ldr	r0, [pc, #312]	@ (8002704 <TestModeAction+0x238>)
 80025cc:	f7fe f8ec 	bl	80007a8 <printString>
			if (GetUint16Input(&sHbridge.frequency, 1, MIN_FREQUENCY, MAX_FREQUENCY))
 80025d0:	f64f 53e8 	movw	r3, #65000	@ 0xfde8
 80025d4:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80025d8:	2101      	movs	r1, #1
 80025da:	484b      	ldr	r0, [pc, #300]	@ (8002708 <TestModeAction+0x23c>)
 80025dc:	f7ff fc26 	bl	8001e2c <GetUint16Input>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d070      	beq.n	80026c8 <TestModeAction+0x1fc>
			{   // Data entry valid
				programHbridge();
 80025e6:	f7fe fa07 	bl	80009f8 <programHbridge>
				printHbridgeData();
 80025ea:	f7fe f9db 	bl	80009a4 <printHbridgeData>
			}
			break;
 80025ee:	e06b      	b.n	80026c8 <TestModeAction+0x1fc>

		case 'd': //Enter dead time (%)
			printHbridgeData();
 80025f0:	f7fe f9d8 	bl	80009a4 <printHbridgeData>
			printString("\n\rEnter dead time (%): ");
 80025f4:	4845      	ldr	r0, [pc, #276]	@ (800270c <TestModeAction+0x240>)
 80025f6:	f7fe f8d7 	bl	80007a8 <printString>
			if (GetUint16Input(&sHbridge.deadtime, 1, MIN_DEADTIME, MAX_DEADTIME))
 80025fa:	2328      	movs	r3, #40	@ 0x28
 80025fc:	2201      	movs	r2, #1
 80025fe:	2101      	movs	r1, #1
 8002600:	4843      	ldr	r0, [pc, #268]	@ (8002710 <TestModeAction+0x244>)
 8002602:	f7ff fc13 	bl	8001e2c <GetUint16Input>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d05f      	beq.n	80026cc <TestModeAction+0x200>
			{   // Data entry valid
				programHbridge();
 800260c:	f7fe f9f4 	bl	80009f8 <programHbridge>
				printHbridgeData();
 8002610:	f7fe f9c8 	bl	80009a4 <printHbridgeData>
			}
			break;
 8002614:	e05a      	b.n	80026cc <TestModeAction+0x200>

		case 's': //Start/stop driving H-bridge
			printHbridgeData();
 8002616:	f7fe f9c5 	bl	80009a4 <printHbridgeData>
			printString("\n\rDrive H-bridge 1:Yes 0:No : ");
 800261a:	483e      	ldr	r0, [pc, #248]	@ (8002714 <TestModeAction+0x248>)
 800261c:	f7fe f8c4 	bl	80007a8 <printString>
			if (GetUint16Input(&sHbridge.on, 1, 0, 1))
 8002620:	2301      	movs	r3, #1
 8002622:	2200      	movs	r2, #0
 8002624:	2101      	movs	r1, #1
 8002626:	4834      	ldr	r0, [pc, #208]	@ (80026f8 <TestModeAction+0x22c>)
 8002628:	f7ff fc00 	bl	8001e2c <GetUint16Input>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d04e      	beq.n	80026d0 <TestModeAction+0x204>
			{   // Data entry valid
				programHbridge();
 8002632:	f7fe f9e1 	bl	80009f8 <programHbridge>
				printHbridgeData();
 8002636:	f7fe f9b5 	bl	80009a4 <printHbridgeData>
			}
			break;
 800263a:	e049      	b.n	80026d0 <TestModeAction+0x204>

		case 'q': //Frequency correction
			int16_t freqCorr;
			if (freqCorrection(&freqCorr))
 800263c:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 8002640:	4618      	mov	r0, r3
 8002642:	f7fe fe6b 	bl	800131c <freqCorrection>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d043      	beq.n	80026d4 <TestModeAction+0x208>
			{
				char text[100];
				sprintf(text, "\n\rFrequency correction: %i", (int) freqCorr);
 800264c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8002650:	461a      	mov	r2, r3
 8002652:	f107 0308 	add.w	r3, r7, #8
 8002656:	4930      	ldr	r1, [pc, #192]	@ (8002718 <TestModeAction+0x24c>)
 8002658:	4618      	mov	r0, r3
 800265a:	f00f fe77 	bl	801234c <siprintf>
				printString(text);
 800265e:	f107 0308 	add.w	r3, r7, #8
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe f8a0 	bl	80007a8 <printString>
			}
			break;
 8002668:	e034      	b.n	80026d4 <TestModeAction+0x208>

		case 'z': //Debug output
			printNumber("\n\rCurrent Debug output: ", debug, 0);
 800266a:	4b2c      	ldr	r3, [pc, #176]	@ (800271c <TestModeAction+0x250>)
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	2200      	movs	r2, #0
 8002670:	4619      	mov	r1, r3
 8002672:	482b      	ldr	r0, [pc, #172]	@ (8002720 <TestModeAction+0x254>)
 8002674:	f7fe f8da 	bl	800082c <printNumber>
			printString("\n\rSet Debug output 1:On 0:Off : ");
 8002678:	482a      	ldr	r0, [pc, #168]	@ (8002724 <TestModeAction+0x258>)
 800267a:	f7fe f895 	bl	80007a8 <printString>
			GetUint16Input(&debug, 1, 0, 1);
 800267e:	2301      	movs	r3, #1
 8002680:	2200      	movs	r2, #0
 8002682:	2101      	movs	r1, #1
 8002684:	4825      	ldr	r0, [pc, #148]	@ (800271c <TestModeAction+0x250>)
 8002686:	f7ff fbd1 	bl	8001e2c <GetUint16Input>
			break;
 800268a:	e026      	b.n	80026da <TestModeAction+0x20e>

		case 'c': //Show/Change current configuration
			ShowChangeConfigFlash();
 800268c:	f7ff fe9c 	bl	80023c8 <ShowChangeConfigFlash>
			break;
 8002690:	e023      	b.n	80026da <TestModeAction+0x20e>

		case 't': //Test GPIO
			testGPIO();
 8002692:	f7ff ff05 	bl	80024a0 <testGPIO>
			break;
 8002696:	e020      	b.n	80026da <TestModeAction+0x20e>

		case 'y': //Auto Freq Adjust
			autoFreqAdj();
 8002698:	f7ff f902 	bl	80018a0 <autoFreqAdj>
			break;
 800269c:	e01d      	b.n	80026da <TestModeAction+0x20e>
		case 'u': //Auto Freq Adjust
			printString("Desired Voltage: ");
 800269e:	4822      	ldr	r0, [pc, #136]	@ (8002728 <TestModeAction+0x25c>)
 80026a0:	f7fe f882 	bl	80007a8 <printString>
			uint16_t userVoltage;
			//Max and min valid voltages
			if (GetUint16Input(&userVoltage, 1, 0, 5000))
 80026a4:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 80026a8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80026ac:	2200      	movs	r2, #0
 80026ae:	2101      	movs	r1, #1
 80026b0:	f7ff fbbc 	bl	8001e2c <GetUint16Input>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00e      	beq.n	80026d8 <TestModeAction+0x20c>
			{   // Data entry valid
				autoVoltageAdj(userVoltage);
 80026ba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80026be:	b21b      	sxth	r3, r3
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff f953 	bl	800196c <autoVoltageAdj>
			}
			break;
 80026c6:	e007      	b.n	80026d8 <TestModeAction+0x20c>
			break;
 80026c8:	bf00      	nop
 80026ca:	e006      	b.n	80026da <TestModeAction+0x20e>
			break;
 80026cc:	bf00      	nop
 80026ce:	e004      	b.n	80026da <TestModeAction+0x20e>
			break;
 80026d0:	bf00      	nop
 80026d2:	e002      	b.n	80026da <TestModeAction+0x20e>
			break;
 80026d4:	bf00      	nop
 80026d6:	e000      	b.n	80026da <TestModeAction+0x20e>
			break;
 80026d8:	bf00      	nop
	}
}
 80026da:	bf00      	nop
 80026dc:	3770      	adds	r7, #112	@ 0x70
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	24000a44 	.word	0x24000a44
 80026e8:	08014c2c 	.word	0x08014c2c
 80026ec:	08014c40 	.word	0x08014c40
 80026f0:	08014c58 	.word	0x08014c58
 80026f4:	08014c74 	.word	0x08014c74
 80026f8:	2400001c 	.word	0x2400001c
 80026fc:	24000330 	.word	0x24000330
 8002700:	08014c8c 	.word	0x08014c8c
 8002704:	08014cac 	.word	0x08014cac
 8002708:	2400001e 	.word	0x2400001e
 800270c:	08014cc8 	.word	0x08014cc8
 8002710:	24000020 	.word	0x24000020
 8002714:	08014ce0 	.word	0x08014ce0
 8002718:	08014d00 	.word	0x08014d00
 800271c:	24000000 	.word	0x24000000
 8002720:	08014d1c 	.word	0x08014d1c
 8002724:	08014d38 	.word	0x08014d38
 8002728:	08014d5c 	.word	0x08014d5c

0800272c <init_rc_state>:
typedef struct rc_state rc_state;

/**
 * Creates and returns an initialized rc_state
 */
static rc_state init_rc_state() {
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
	rc_state ret_state;
	ret_state.idle = 1;
 8002732:	2301      	movs	r3, #1
 8002734:	713b      	strb	r3, [r7, #4]

	return ret_state;
 8002736:	793b      	ldrb	r3, [r7, #4]
}
 8002738:	4618      	mov	r0, r3
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <init_rc>:


/**
 * Print a string to UART acknowledging remote control
 */
static void init_rc() {
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
	printString("~");
 8002748:	4802      	ldr	r0, [pc, #8]	@ (8002754 <init_rc+0x10>)
 800274a:	f7fe f82d 	bl	80007a8 <printString>
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	08014d70 	.word	0x08014d70

08002758 <querySupply>:

/**
 * Checks status of queried power supply. Prints status to UART
 */
static void querySupply(char *input) {
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
	if (strcmp(input, "15") == 0)
 8002760:	491d      	ldr	r1, [pc, #116]	@ (80027d8 <querySupply+0x80>)
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7fd fdd4 	bl	8000310 <strcmp>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10b      	bne.n	8002786 <querySupply+0x2e>
	{
		if (supply_status.s15V) {
 800276e:	4b1b      	ldr	r3, [pc, #108]	@ (80027dc <querySupply+0x84>)
 8002770:	785b      	ldrb	r3, [r3, #1]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <querySupply+0x26>
			printString("on");
 8002776:	481a      	ldr	r0, [pc, #104]	@ (80027e0 <querySupply+0x88>)
 8002778:	f7fe f816 	bl	80007a8 <printString>
		} else {
			printString("off");
		}

	}
}
 800277c:	e028      	b.n	80027d0 <querySupply+0x78>
			printString("off");
 800277e:	4819      	ldr	r0, [pc, #100]	@ (80027e4 <querySupply+0x8c>)
 8002780:	f7fe f812 	bl	80007a8 <printString>
}
 8002784:	e024      	b.n	80027d0 <querySupply+0x78>
	} else if (strcmp(input, "3.3") == 0) {
 8002786:	4918      	ldr	r1, [pc, #96]	@ (80027e8 <querySupply+0x90>)
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7fd fdc1 	bl	8000310 <strcmp>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10b      	bne.n	80027ac <querySupply+0x54>
		if (supply_status.s3_3V) {
 8002794:	4b11      	ldr	r3, [pc, #68]	@ (80027dc <querySupply+0x84>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d003      	beq.n	80027a4 <querySupply+0x4c>
			printString("on");
 800279c:	4810      	ldr	r0, [pc, #64]	@ (80027e0 <querySupply+0x88>)
 800279e:	f7fe f803 	bl	80007a8 <printString>
}
 80027a2:	e015      	b.n	80027d0 <querySupply+0x78>
			printString("off");
 80027a4:	480f      	ldr	r0, [pc, #60]	@ (80027e4 <querySupply+0x8c>)
 80027a6:	f7fd ffff 	bl	80007a8 <printString>
}
 80027aa:	e011      	b.n	80027d0 <querySupply+0x78>
	} else if (strcmp(input, "hv") == 0) {
 80027ac:	490f      	ldr	r1, [pc, #60]	@ (80027ec <querySupply+0x94>)
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7fd fdae 	bl	8000310 <strcmp>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10a      	bne.n	80027d0 <querySupply+0x78>
		if (supply_status.sHV) {
 80027ba:	4b08      	ldr	r3, [pc, #32]	@ (80027dc <querySupply+0x84>)
 80027bc:	789b      	ldrb	r3, [r3, #2]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <querySupply+0x72>
			printString("on");
 80027c2:	4807      	ldr	r0, [pc, #28]	@ (80027e0 <querySupply+0x88>)
 80027c4:	f7fd fff0 	bl	80007a8 <printString>
}
 80027c8:	e002      	b.n	80027d0 <querySupply+0x78>
			printString("off");
 80027ca:	4806      	ldr	r0, [pc, #24]	@ (80027e4 <querySupply+0x8c>)
 80027cc:	f7fd ffec 	bl	80007a8 <printString>
}
 80027d0:	bf00      	nop
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	08014d74 	.word	0x08014d74
 80027dc:	24000a40 	.word	0x24000a40
 80027e0:	08014d78 	.word	0x08014d78
 80027e4:	08014d7c 	.word	0x08014d7c
 80027e8:	08014d80 	.word	0x08014d80
 80027ec:	08014d84 	.word	0x08014d84

080027f0 <toggleSupply>:

/**
 * Toggles the specified supply, returns the new
 * status of the supply via a char = {0, 1}
 */
static char toggleSupply(char *input) {
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
	char status;
	if (strcmp(input, "lv") == 0)
 80027f8:	4916      	ldr	r1, [pc, #88]	@ (8002854 <toggleSupply+0x64>)
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7fd fd88 	bl	8000310 <strcmp>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10d      	bne.n	8002822 <toggleSupply+0x32>
	{
		if (supply_status.s3_3V) {
 8002806:	4b14      	ldr	r3, [pc, #80]	@ (8002858 <toggleSupply+0x68>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d004      	beq.n	8002818 <toggleSupply+0x28>
			status = PowerOffLowSupplies();
 800280e:	f7ff fbbd 	bl	8001f8c <PowerOffLowSupplies>
 8002812:	4603      	mov	r3, r0
 8002814:	73fb      	strb	r3, [r7, #15]
 8002816:	e018      	b.n	800284a <toggleSupply+0x5a>
		} else {
			status = PowerOnLowSupplies();
 8002818:	f7ff fc20 	bl	800205c <PowerOnLowSupplies>
 800281c:	4603      	mov	r3, r0
 800281e:	73fb      	strb	r3, [r7, #15]
 8002820:	e013      	b.n	800284a <toggleSupply+0x5a>
		}

	} else if (strcmp(input, "hv") == 0) {
 8002822:	490e      	ldr	r1, [pc, #56]	@ (800285c <toggleSupply+0x6c>)
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f7fd fd73 	bl	8000310 <strcmp>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10c      	bne.n	800284a <toggleSupply+0x5a>
		if (supply_status.sHV) {
 8002830:	4b09      	ldr	r3, [pc, #36]	@ (8002858 <toggleSupply+0x68>)
 8002832:	789b      	ldrb	r3, [r3, #2]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d004      	beq.n	8002842 <toggleSupply+0x52>
			status = PowerOffHighSupplies();
 8002838:	f7ff fbdc 	bl	8001ff4 <PowerOffHighSupplies>
 800283c:	4603      	mov	r3, r0
 800283e:	73fb      	strb	r3, [r7, #15]
 8002840:	e003      	b.n	800284a <toggleSupply+0x5a>
		} else {
			status = PowerOnHighSupplies();
 8002842:	f7ff fc53 	bl	80020ec <PowerOnHighSupplies>
 8002846:	4603      	mov	r3, r0
 8002848:	73fb      	strb	r3, [r7, #15]
		}

	}

	return status;
 800284a:	7bfb      	ldrb	r3, [r7, #15]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	08014d88 	.word	0x08014d88
 8002858:	24000a40 	.word	0x24000a40
 800285c:	08014d84 	.word	0x08014d84

08002860 <remoteControl>:
/**
 * This routine is entered when the remote control signal is received
 * handles datalogging and accepting control commands from uart
 */
static void remoteControl()
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b09a      	sub	sp, #104	@ 0x68
 8002864:	af00      	add	r7, sp, #0
	rc_state current_state = init_rc_state();
 8002866:	f7ff ff61 	bl	800272c <init_rc_state>
 800286a:	4603      	mov	r3, r0
 800286c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
	while (1)
	{
		char input[100];

		//Check for input and update state accordingly
		if (HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK)
 8002870:	4639      	mov	r1, r7
 8002872:	2301      	movs	r3, #1
 8002874:	2201      	movs	r2, #1
 8002876:	4816      	ldr	r0, [pc, #88]	@ (80028d0 <remoteControl+0x70>)
 8002878:	f00d fd37 	bl	80102ea <HAL_UART_Receive>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1f6      	bne.n	8002870 <remoteControl+0x10>
		{
			switch (input[0])
 8002882:	783b      	ldrb	r3, [r7, #0]
 8002884:	2b7e      	cmp	r3, #126	@ 0x7e
 8002886:	d005      	beq.n	8002894 <remoteControl+0x34>
 8002888:	2b7e      	cmp	r3, #126	@ 0x7e
 800288a:	dcf1      	bgt.n	8002870 <remoteControl+0x10>
 800288c:	2b70      	cmp	r3, #112	@ 0x70
 800288e:	d004      	beq.n	800289a <remoteControl+0x3a>
 8002890:	2b73      	cmp	r3, #115	@ 0x73
					break;

				//start plasma related command
				case 's':

					break;
 8002892:	e01c      	b.n	80028ce <remoteControl+0x6e>
					init_rc();
 8002894:	f7ff ff56 	bl	8002744 <init_rc>
					break;
 8002898:	e019      	b.n	80028ce <remoteControl+0x6e>
					if (input[1] == '?')
 800289a:	787b      	ldrb	r3, [r7, #1]
 800289c:	2b3f      	cmp	r3, #63	@ 0x3f
 800289e:	d104      	bne.n	80028aa <remoteControl+0x4a>
						querySupply(input);
 80028a0:	463b      	mov	r3, r7
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff ff58 	bl	8002758 <querySupply>
					break;
 80028a8:	e010      	b.n	80028cc <remoteControl+0x6c>
					} else if (input[1] ==  '!')
 80028aa:	787b      	ldrb	r3, [r7, #1]
 80028ac:	2b21      	cmp	r3, #33	@ 0x21
 80028ae:	d10d      	bne.n	80028cc <remoteControl+0x6c>
						if (toggleSupply(input)) {
 80028b0:	463b      	mov	r3, r7
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff ff9c 	bl	80027f0 <toggleSupply>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <remoteControl+0x66>
							printString("on");
 80028be:	4805      	ldr	r0, [pc, #20]	@ (80028d4 <remoteControl+0x74>)
 80028c0:	f7fd ff72 	bl	80007a8 <printString>
					break;
 80028c4:	e002      	b.n	80028cc <remoteControl+0x6c>
							printString("off");
 80028c6:	4804      	ldr	r0, [pc, #16]	@ (80028d8 <remoteControl+0x78>)
 80028c8:	f7fd ff6e 	bl	80007a8 <printString>
					break;
 80028cc:	bf00      	nop
	{
 80028ce:	e7cf      	b.n	8002870 <remoteControl+0x10>
 80028d0:	24000e38 	.word	0x24000e38
 80028d4:	08014d78 	.word	0x08014d78
 80028d8:	08014d7c 	.word	0x08014d7c

080028dc <PlasmaDriverMenu>:



// Print the plasma driver menu on UART3, and execute entered command.
static void PlasmaDriverMenu(void)
{
 80028dc:	b590      	push	{r4, r7, lr}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
	char input;

	//Wait for user input
	if (HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK)
 80028e2:	1cf9      	adds	r1, r7, #3
 80028e4:	2301      	movs	r3, #1
 80028e6:	2201      	movs	r2, #1
 80028e8:	4825      	ldr	r0, [pc, #148]	@ (8002980 <PlasmaDriverMenu+0xa4>)
 80028ea:	f00d fcfe 	bl	80102ea <HAL_UART_Receive>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d141      	bne.n	8002978 <PlasmaDriverMenu+0x9c>
	{
		// Return pressed -- Display Menu
		if (input == 13)
 80028f4:	78fb      	ldrb	r3, [r7, #3]
 80028f6:	2b0d      	cmp	r3, #13
 80028f8:	d123      	bne.n	8002942 <PlasmaDriverMenu+0x66>
		{
			for (int i=0; i<menu_size; i++)
 80028fa:	2300      	movs	r3, #0
 80028fc:	607b      	str	r3, [r7, #4]
 80028fe:	e017      	b.n	8002930 <PlasmaDriverMenu+0x54>
			{
				HAL_UART_Transmit(&huart3, (uint8_t *) menu[i], strlen(menu[i]), 1000);
 8002900:	4a20      	ldr	r2, [pc, #128]	@ (8002984 <PlasmaDriverMenu+0xa8>)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002908:	4a1e      	ldr	r2, [pc, #120]	@ (8002984 <PlasmaDriverMenu+0xa8>)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002910:	4618      	mov	r0, r3
 8002912:	f7fd fd5d 	bl	80003d0 <strlen>
 8002916:	4603      	mov	r3, r0
 8002918:	b29a      	uxth	r2, r3
 800291a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800291e:	4621      	mov	r1, r4
 8002920:	4817      	ldr	r0, [pc, #92]	@ (8002980 <PlasmaDriverMenu+0xa4>)
 8002922:	f00d fc54 	bl	80101ce <HAL_UART_Transmit>
				printCR();
 8002926:	f7fd ff2f 	bl	8000788 <printCR>
			for (int i=0; i<menu_size; i++)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3301      	adds	r3, #1
 800292e:	607b      	str	r3, [r7, #4]
 8002930:	4b15      	ldr	r3, [pc, #84]	@ (8002988 <PlasmaDriverMenu+0xac>)
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	461a      	mov	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4293      	cmp	r3, r2
 800293a:	dbe1      	blt.n	8002900 <PlasmaDriverMenu+0x24>
			}
			printCR();
 800293c:	f7fd ff24 	bl	8000788 <printCR>
				RunModeAction(input);
			else
				printString("\n\r*** ERROR *** Invalid mode");
		}
	}
}
 8002940:	e01a      	b.n	8002978 <PlasmaDriverMenu+0x9c>
		else if (input == '~')
 8002942:	78fb      	ldrb	r3, [r7, #3]
 8002944:	2b7e      	cmp	r3, #126	@ 0x7e
 8002946:	d102      	bne.n	800294e <PlasmaDriverMenu+0x72>
			remoteControl();
 8002948:	f7ff ff8a 	bl	8002860 <remoteControl>
}
 800294c:	e014      	b.n	8002978 <PlasmaDriverMenu+0x9c>
			if (sFlashConfig.mode == TEST_MODE)
 800294e:	4b0f      	ldr	r3, [pc, #60]	@ (800298c <PlasmaDriverMenu+0xb0>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d104      	bne.n	8002960 <PlasmaDriverMenu+0x84>
				TestModeAction(input);
 8002956:	78fb      	ldrb	r3, [r7, #3]
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff fdb7 	bl	80024cc <TestModeAction>
}
 800295e:	e00b      	b.n	8002978 <PlasmaDriverMenu+0x9c>
			else if (sFlashConfig.mode == RUN_MODE)
 8002960:	4b0a      	ldr	r3, [pc, #40]	@ (800298c <PlasmaDriverMenu+0xb0>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d104      	bne.n	8002972 <PlasmaDriverMenu+0x96>
				RunModeAction(input);
 8002968:	78fb      	ldrb	r3, [r7, #3]
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff fd9f 	bl	80024ae <RunModeAction>
}
 8002970:	e002      	b.n	8002978 <PlasmaDriverMenu+0x9c>
				printString("\n\r*** ERROR *** Invalid mode");
 8002972:	4807      	ldr	r0, [pc, #28]	@ (8002990 <PlasmaDriverMenu+0xb4>)
 8002974:	f7fd ff18 	bl	80007a8 <printString>
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	bd90      	pop	{r4, r7, pc}
 8002980:	24000e38 	.word	0x24000e38
 8002984:	240002ec 	.word	0x240002ec
 8002988:	24000324 	.word	0x24000324
 800298c:	24000a48 	.word	0x24000a48
 8002990:	08014d8c 	.word	0x08014d8c

08002994 <PlasmaDriverInit>:

// Initialize the plasma driver
void PlasmaDriverInit(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
	//Initialie power supply struct
	init_supply_struct();
 8002998:	f7fd fe9a 	bl	80006d0 <init_supply_struct>

	//Enable line driver 2 (HAL has initialized all GPIO)
	HAL_GPIO_WritePin(LINE_DRIVER2_ENABLE_GPIO_Port, LINE_DRIVER2_ENABLE_Pin, GPIO_PIN_RESET);  //Enable = Low
 800299c:	2200      	movs	r2, #0
 800299e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80029a2:	4821      	ldr	r0, [pc, #132]	@ (8002a28 <PlasmaDriverInit+0x94>)
 80029a4:	f008 fa24 	bl	800adf0 <HAL_GPIO_WritePin>
	printString("\n\rEnable Line Drive 2");
 80029a8:	4820      	ldr	r0, [pc, #128]	@ (8002a2c <PlasmaDriverInit+0x98>)
 80029aa:	f7fd fefd 	bl	80007a8 <printString>

	//Power On Supplies in order 15V, 3.3V switch
	PowerOnLowSupplies();
 80029ae:	f7ff fb55 	bl	800205c <PowerOnLowSupplies>

	//Read configuration from flash
	readConfigFlash();
 80029b2:	f7fd fed9 	bl	8000768 <readConfigFlash>

	//Has the flash configuration been initialized?
	if (sFlashConfig.mode == 0xFF)
 80029b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a30 <PlasmaDriverInit+0x9c>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2bff      	cmp	r3, #255	@ 0xff
 80029bc:	d107      	bne.n	80029ce <PlasmaDriverInit+0x3a>
	{
		// write default configuration to flash
		if (writeConfigFlash() != 0)
 80029be:	f7fd fe99 	bl	80006f4 <writeConfigFlash>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d002      	beq.n	80029ce <PlasmaDriverInit+0x3a>
			printString("\n\r*** ERROR FLASH");
 80029c8:	481a      	ldr	r0, [pc, #104]	@ (8002a34 <PlasmaDriverInit+0xa0>)
 80029ca:	f7fd feed 	bl	80007a8 <printString>
	}

	//Initialize menu and configuration menu
	InitializeMenu();
 80029ce:	f7ff fc25 	bl	800221c <InitializeMenu>
	InitializeConfigMenu();
 80029d2:	f7ff fbf7 	bl	80021c4 <InitializeConfigMenu>

	//Calibrate ADC1, ADC2 and ADC3
	printString("\n\rCalibrate ADC1, ADC2 and ADC3");
 80029d6:	4818      	ldr	r0, [pc, #96]	@ (8002a38 <PlasmaDriverInit+0xa4>)
 80029d8:	f7fd fee6 	bl	80007a8 <printString>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80029dc:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80029e0:	2100      	movs	r1, #0
 80029e2:	4816      	ldr	r0, [pc, #88]	@ (8002a3c <PlasmaDriverInit+0xa8>)
 80029e4:	f004 fd0a 	bl	80073fc <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80029e8:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80029ec:	2100      	movs	r1, #0
 80029ee:	4814      	ldr	r0, [pc, #80]	@ (8002a40 <PlasmaDriverInit+0xac>)
 80029f0:	f004 fd04 	bl	80073fc <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80029f4:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80029f8:	2100      	movs	r1, #0
 80029fa:	4812      	ldr	r0, [pc, #72]	@ (8002a44 <PlasmaDriverInit+0xb0>)
 80029fc:	f004 fcfe 	bl	80073fc <HAL_ADCEx_Calibration_Start>

	//Power On Supply 500V
	if (sFlashConfig.mode == RUN_MODE)
 8002a00:	4b0b      	ldr	r3, [pc, #44]	@ (8002a30 <PlasmaDriverInit+0x9c>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d10d      	bne.n	8002a24 <PlasmaDriverInit+0x90>
	{
		//POWER_OFF_IRQ needs to be high before powering On
		if (HAL_GPIO_ReadPin(POWER_OFF_IRQ_GPIO_Port, POWER_OFF_IRQ_Pin) == GPIO_PIN_RESET)		//There is an inverter between MCU and the input, thus check RESET
 8002a08:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a0c:	480e      	ldr	r0, [pc, #56]	@ (8002a48 <PlasmaDriverInit+0xb4>)
 8002a0e:	f008 f9d7 	bl	800adc0 <HAL_GPIO_ReadPin>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d102      	bne.n	8002a1e <PlasmaDriverInit+0x8a>
			PowerOnHighSupplies();
 8002a18:	f7ff fb68 	bl	80020ec <PowerOnHighSupplies>
		else
		printString("\n\rPOWER_OFF_IRQ line is not high - 500V is not powered on");
	}
}
 8002a1c:	e002      	b.n	8002a24 <PlasmaDriverInit+0x90>
		printString("\n\rPOWER_OFF_IRQ line is not high - 500V is not powered on");
 8002a1e:	480b      	ldr	r0, [pc, #44]	@ (8002a4c <PlasmaDriverInit+0xb8>)
 8002a20:	f7fd fec2 	bl	80007a8 <printString>
}
 8002a24:	bf00      	nop
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	58020400 	.word	0x58020400
 8002a2c:	08014dac 	.word	0x08014dac
 8002a30:	24000a48 	.word	0x24000a48
 8002a34:	08014dc4 	.word	0x08014dc4
 8002a38:	08014dd8 	.word	0x08014dd8
 8002a3c:	24000a88 	.word	0x24000a88
 8002a40:	24000af8 	.word	0x24000af8
 8002a44:	24000b68 	.word	0x24000b68
 8002a48:	58021000 	.word	0x58021000
 8002a4c:	08014df8 	.word	0x08014df8

08002a50 <PlasmaDoTask>:

// This command is called from a while loop, and will execute any needed task.
void PlasmaDoTask(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
	PlasmaDriverMenu(); //Check UART3 and execute command
 8002a54:	f7ff ff42 	bl	80028dc <PlasmaDriverMenu>

	if (sFlashConfig.mode == RUN_MODE)
 8002a58:	4b0d      	ldr	r3, [pc, #52]	@ (8002a90 <PlasmaDoTask+0x40>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d114      	bne.n	8002a8a <PlasmaDoTask+0x3a>
	{
		//Check if robot controller requested the plasma On or Off
		if (HAL_GPIO_ReadPin(TURN_PLASMA_ON_GPIO_Port, TURN_PLASMA_ON_Pin) == GPIO_PIN_RESET)		//There is an inverter between MCU and the input, thus check RESET
 8002a60:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a64:	480b      	ldr	r0, [pc, #44]	@ (8002a94 <PlasmaDoTask+0x44>)
 8002a66:	f008 f9ab 	bl	800adc0 <HAL_GPIO_ReadPin>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10c      	bne.n	8002a8a <PlasmaDoTask+0x3a>
		{
			if (powerStatus == V500_ON)
 8002a70:	4b09      	ldr	r3, [pc, #36]	@ (8002a98 <PlasmaDoTask+0x48>)
 8002a72:	881b      	ldrh	r3, [r3, #0]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d105      	bne.n	8002a84 <PlasmaDoTask+0x34>
			{
				//TODO: add auto frequency adjustment here. "RUN_MODE" is only used when the system is headless, i.e. not controlled over UART
				sHbridge.on = 1; // Turn Hbridge on
 8002a78:	4b08      	ldr	r3, [pc, #32]	@ (8002a9c <PlasmaDoTask+0x4c>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	801a      	strh	r2, [r3, #0]
				programHbridge();
 8002a7e:	f7fd ffbb 	bl	80009f8 <programHbridge>
			}
			else
				printString("\n\rUnable to turn H-bridge on, since 500V is not powered on");
		}
	}
}
 8002a82:	e002      	b.n	8002a8a <PlasmaDoTask+0x3a>
				printString("\n\rUnable to turn H-bridge on, since 500V is not powered on");
 8002a84:	4806      	ldr	r0, [pc, #24]	@ (8002aa0 <PlasmaDoTask+0x50>)
 8002a86:	f7fd fe8f 	bl	80007a8 <printString>
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	24000a48 	.word	0x24000a48
 8002a94:	58021000 	.word	0x58021000
 8002a98:	24000a44 	.word	0x24000a44
 8002a9c:	2400001c 	.word	0x2400001c
 8002aa0:	08014e34 	.word	0x08014e34

08002aa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002aa8:	f001 feda 	bl	8004860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002aac:	f000 f828 	bl	8002b00 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002ab0:	f000 f896 	bl	8002be0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ab4:	f000 fea0 	bl	80037f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002ab8:	f000 fe76 	bl	80037a8 <MX_DMA_Init>
  MX_TIM1_Init();
 8002abc:	f000 fc2a 	bl	8003314 <MX_TIM1_Init>
  MX_ETH_Init();
 8002ac0:	f000 fb40 	bl	8003144 <MX_ETH_Init>
  MX_ADC2_Init();
 8002ac4:	f000 f95a 	bl	8002d7c <MX_ADC2_Init>
  MX_USB_OTG_HS_USB_Init();
 8002ac8:	f000 fe66 	bl	8003798 <MX_USB_OTG_HS_USB_Init>
  MX_ADC3_Init();
 8002acc:	f000 f9fa 	bl	8002ec4 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 8002ad0:	f000 fbd2 	bl	8003278 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8002ad4:	f000 f8b4 	bl	8002c40 <MX_ADC1_Init>
  MX_COMP2_Init();
 8002ad8:	f000 fb06 	bl	80030e8 <MX_COMP2_Init>
  MX_TIM2_Init();
 8002adc:	f000 fcac 	bl	8003438 <MX_TIM2_Init>
  MX_LPUART1_UART_Init();
 8002ae0:	f000 fb7c 	bl	80031dc <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8002ae4:	f000 fd02 	bl	80034ec <MX_TIM3_Init>
  MX_TIM4_Init();
 8002ae8:	f000 fd54 	bl	8003594 <MX_TIM4_Init>
  MX_TIM15_Init();
 8002aec:	f000 fdac 	bl	8003648 <MX_TIM15_Init>
  MX_TIM24_Init();
 8002af0:	f000 fe02 	bl	80036f8 <MX_TIM24_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  PlasmaDriverInit();  			//Initialize plasma driver
 8002af4:	f7ff ff4e 	bl	8002994 <PlasmaDriverInit>


  while (1)
  {
	PlasmaDoTask();     	    //Handle plasma driver task
 8002af8:	f7ff ffaa 	bl	8002a50 <PlasmaDoTask>
 8002afc:	e7fc      	b.n	8002af8 <main+0x54>
	...

08002b00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b09c      	sub	sp, #112	@ 0x70
 8002b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b0a:	224c      	movs	r2, #76	@ 0x4c
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f00f fc7f 	bl	8012412 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b14:	1d3b      	adds	r3, r7, #4
 8002b16:	2220      	movs	r2, #32
 8002b18:	2100      	movs	r1, #0
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f00f fc79 	bl	8012412 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002b20:	2002      	movs	r0, #2
 8002b22:	f008 f999 	bl	800ae58 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002b26:	2300      	movs	r3, #0
 8002b28:	603b      	str	r3, [r7, #0]
 8002b2a:	4b2c      	ldr	r3, [pc, #176]	@ (8002bdc <SystemClock_Config+0xdc>)
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	4a2b      	ldr	r2, [pc, #172]	@ (8002bdc <SystemClock_Config+0xdc>)
 8002b30:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002b34:	6193      	str	r3, [r2, #24]
 8002b36:	4b29      	ldr	r3, [pc, #164]	@ (8002bdc <SystemClock_Config+0xdc>)
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002b3e:	603b      	str	r3, [r7, #0]
 8002b40:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002b42:	bf00      	nop
 8002b44:	4b25      	ldr	r3, [pc, #148]	@ (8002bdc <SystemClock_Config+0xdc>)
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b50:	d1f8      	bne.n	8002b44 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8002b52:	2321      	movs	r3, #33	@ 0x21
 8002b54:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002b56:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b60:	2302      	movs	r3, #2
 8002b62:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b64:	2302      	movs	r3, #2
 8002b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002b68:	2304      	movs	r3, #4
 8002b6a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8002b6c:	f240 1313 	movw	r3, #275	@ 0x113
 8002b70:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8002b72:	2301      	movs	r3, #1
 8002b74:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002b76:	2304      	movs	r3, #4
 8002b78:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8002b7e:	2304      	movs	r3, #4
 8002b80:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002b82:	2300      	movs	r3, #0
 8002b84:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f008 f99c 	bl	800aecc <HAL_RCC_OscConfig>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002b9a:	f000 ff9d 	bl	8003ad8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b9e:	233f      	movs	r3, #63	@ 0x3f
 8002ba0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002baa:	2308      	movs	r3, #8
 8002bac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002bae:	2340      	movs	r3, #64	@ 0x40
 8002bb0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002bb2:	2340      	movs	r3, #64	@ 0x40
 8002bb4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 8002bb6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002bba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002bbc:	2340      	movs	r3, #64	@ 0x40
 8002bbe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002bc0:	1d3b      	adds	r3, r7, #4
 8002bc2:	2103      	movs	r1, #3
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f008 fd5b 	bl	800b680 <HAL_RCC_ClockConfig>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002bd0:	f000 ff82 	bl	8003ad8 <Error_Handler>
  }
}
 8002bd4:	bf00      	nop
 8002bd6:	3770      	adds	r7, #112	@ 0x70
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	58024800 	.word	0x58024800

08002be0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b0ae      	sub	sp, #184	@ 0xb8
 8002be4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002be6:	463b      	mov	r3, r7
 8002be8:	22b8      	movs	r2, #184	@ 0xb8
 8002bea:	2100      	movs	r1, #0
 8002bec:	4618      	mov	r0, r3
 8002bee:	f00f fc10 	bl	8012412 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002bf2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002bf6:	f04f 0300 	mov.w	r3, #0
 8002bfa:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 8002c02:	2318      	movs	r3, #24
 8002c04:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8002c06:	2302      	movs	r3, #2
 8002c08:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8002c12:	23c0      	movs	r3, #192	@ 0xc0
 8002c14:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8002c16:	2300      	movs	r3, #0
 8002c18:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c24:	463b      	mov	r3, r7
 8002c26:	4618      	mov	r0, r3
 8002c28:	f009 f8b6 	bl	800bd98 <HAL_RCCEx_PeriphCLKConfig>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8002c32:	f000 ff51 	bl	8003ad8 <Error_Handler>
  }
}
 8002c36:	bf00      	nop
 8002c38:	37b8      	adds	r7, #184	@ 0xb8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
	...

08002c40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b08c      	sub	sp, #48	@ 0x30
 8002c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002c46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	605a      	str	r2, [r3, #4]
 8002c50:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002c52:	463b      	mov	r3, r7
 8002c54:	2224      	movs	r2, #36	@ 0x24
 8002c56:	2100      	movs	r1, #0
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f00f fbda 	bl	8012412 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002c5e:	4b42      	ldr	r3, [pc, #264]	@ (8002d68 <MX_ADC1_Init+0x128>)
 8002c60:	4a42      	ldr	r2, [pc, #264]	@ (8002d6c <MX_ADC1_Init+0x12c>)
 8002c62:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002c64:	4b40      	ldr	r3, [pc, #256]	@ (8002d68 <MX_ADC1_Init+0x128>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8002c6a:	4b3f      	ldr	r3, [pc, #252]	@ (8002d68 <MX_ADC1_Init+0x128>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002c70:	4b3d      	ldr	r3, [pc, #244]	@ (8002d68 <MX_ADC1_Init+0x128>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002c76:	4b3c      	ldr	r3, [pc, #240]	@ (8002d68 <MX_ADC1_Init+0x128>)
 8002c78:	2208      	movs	r2, #8
 8002c7a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002c7c:	4b3a      	ldr	r3, [pc, #232]	@ (8002d68 <MX_ADC1_Init+0x128>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002c82:	4b39      	ldr	r3, [pc, #228]	@ (8002d68 <MX_ADC1_Init+0x128>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8002c88:	4b37      	ldr	r3, [pc, #220]	@ (8002d68 <MX_ADC1_Init+0x128>)
 8002c8a:	2203      	movs	r2, #3
 8002c8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c8e:	4b36      	ldr	r3, [pc, #216]	@ (8002d68 <MX_ADC1_Init+0x128>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 8002c96:	4b34      	ldr	r3, [pc, #208]	@ (8002d68 <MX_ADC1_Init+0x128>)
 8002c98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002c9e:	4b32      	ldr	r3, [pc, #200]	@ (8002d68 <MX_ADC1_Init+0x128>)
 8002ca0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ca4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 8002ca6:	4b30      	ldr	r3, [pc, #192]	@ (8002d68 <MX_ADC1_Init+0x128>)
 8002ca8:	2201      	movs	r2, #1
 8002caa:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002cac:	4b2e      	ldr	r3, [pc, #184]	@ (8002d68 <MX_ADC1_Init+0x128>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8002d68 <MX_ADC1_Init+0x128>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8002cb8:	4b2b      	ldr	r3, [pc, #172]	@ (8002d68 <MX_ADC1_Init+0x128>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002cc0:	4829      	ldr	r0, [pc, #164]	@ (8002d68 <MX_ADC1_Init+0x128>)
 8002cc2:	f002 fad5 	bl	8005270 <HAL_ADC_Init>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002ccc:	f000 ff04 	bl	8003ad8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8002cd0:	2306      	movs	r3, #6
 8002cd2:	627b      	str	r3, [r7, #36]	@ 0x24
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 8002cd4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002cde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4820      	ldr	r0, [pc, #128]	@ (8002d68 <MX_ADC1_Init+0x128>)
 8002ce6:	f004 fcd1 	bl	800768c <HAL_ADCEx_MultiModeConfigChannel>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8002cf0:	f000 fef2 	bl	8003ad8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002cf4:	4b1e      	ldr	r3, [pc, #120]	@ (8002d70 <MX_ADC1_Init+0x130>)
 8002cf6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002cf8:	2306      	movs	r3, #6
 8002cfa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002d00:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002d04:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002d06:	2304      	movs	r3, #4
 8002d08:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d14:	463b      	mov	r3, r7
 8002d16:	4619      	mov	r1, r3
 8002d18:	4813      	ldr	r0, [pc, #76]	@ (8002d68 <MX_ADC1_Init+0x128>)
 8002d1a:	f002 ffdb 	bl	8005cd4 <HAL_ADC_ConfigChannel>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8002d24:	f000 fed8 	bl	8003ad8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8002d28:	4b12      	ldr	r3, [pc, #72]	@ (8002d74 <MX_ADC1_Init+0x134>)
 8002d2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002d2c:	230c      	movs	r3, #12
 8002d2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d30:	463b      	mov	r3, r7
 8002d32:	4619      	mov	r1, r3
 8002d34:	480c      	ldr	r0, [pc, #48]	@ (8002d68 <MX_ADC1_Init+0x128>)
 8002d36:	f002 ffcd 	bl	8005cd4 <HAL_ADC_ConfigChannel>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8002d40:	f000 feca 	bl	8003ad8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8002d44:	4b0c      	ldr	r3, [pc, #48]	@ (8002d78 <MX_ADC1_Init+0x138>)
 8002d46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002d48:	2312      	movs	r3, #18
 8002d4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d4c:	463b      	mov	r3, r7
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4805      	ldr	r0, [pc, #20]	@ (8002d68 <MX_ADC1_Init+0x128>)
 8002d52:	f002 ffbf 	bl	8005cd4 <HAL_ADC_ConfigChannel>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8002d5c:	f000 febc 	bl	8003ad8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002d60:	bf00      	nop
 8002d62:	3730      	adds	r7, #48	@ 0x30
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	24000a88 	.word	0x24000a88
 8002d6c:	40022000 	.word	0x40022000
 8002d70:	3ef08000 	.word	0x3ef08000
 8002d74:	4b840000 	.word	0x4b840000
 8002d78:	43210000 	.word	0x43210000

08002d7c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b090      	sub	sp, #64	@ 0x40
 8002d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8002d82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	605a      	str	r2, [r3, #4]
 8002d8c:	609a      	str	r2, [r3, #8]
 8002d8e:	60da      	str	r2, [r3, #12]
 8002d90:	611a      	str	r2, [r3, #16]
 8002d92:	615a      	str	r2, [r3, #20]
 8002d94:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002d96:	463b      	mov	r3, r7
 8002d98:	2224      	movs	r2, #36	@ 0x24
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f00f fb38 	bl	8012412 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002da2:	4b42      	ldr	r3, [pc, #264]	@ (8002eac <MX_ADC2_Init+0x130>)
 8002da4:	4a42      	ldr	r2, [pc, #264]	@ (8002eb0 <MX_ADC2_Init+0x134>)
 8002da6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002da8:	4b40      	ldr	r3, [pc, #256]	@ (8002eac <MX_ADC2_Init+0x130>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8002dae:	4b3f      	ldr	r3, [pc, #252]	@ (8002eac <MX_ADC2_Init+0x130>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002db4:	4b3d      	ldr	r3, [pc, #244]	@ (8002eac <MX_ADC2_Init+0x130>)
 8002db6:	2201      	movs	r2, #1
 8002db8:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002dba:	4b3c      	ldr	r3, [pc, #240]	@ (8002eac <MX_ADC2_Init+0x130>)
 8002dbc:	2208      	movs	r2, #8
 8002dbe:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002dc0:	4b3a      	ldr	r3, [pc, #232]	@ (8002eac <MX_ADC2_Init+0x130>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002dc6:	4b39      	ldr	r3, [pc, #228]	@ (8002eac <MX_ADC2_Init+0x130>)
 8002dc8:	2201      	movs	r2, #1
 8002dca:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 3;
 8002dcc:	4b37      	ldr	r3, [pc, #220]	@ (8002eac <MX_ADC2_Init+0x130>)
 8002dce:	2203      	movs	r2, #3
 8002dd0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002dd2:	4b36      	ldr	r3, [pc, #216]	@ (8002eac <MX_ADC2_Init+0x130>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8002dda:	4b34      	ldr	r3, [pc, #208]	@ (8002eac <MX_ADC2_Init+0x130>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002de0:	4b32      	ldr	r3, [pc, #200]	@ (8002eac <MX_ADC2_Init+0x130>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002de6:	4b31      	ldr	r3, [pc, #196]	@ (8002eac <MX_ADC2_Init+0x130>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8002dec:	4b2f      	ldr	r3, [pc, #188]	@ (8002eac <MX_ADC2_Init+0x130>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002df4:	482d      	ldr	r0, [pc, #180]	@ (8002eac <MX_ADC2_Init+0x130>)
 8002df6:	f002 fa3b 	bl	8005270 <HAL_ADC_Init>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8002e00:	f000 fe6a 	bl	8003ad8 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8002e04:	4b2b      	ldr	r3, [pc, #172]	@ (8002eb4 <MX_ADC2_Init+0x138>)
 8002e06:	627b      	str	r3, [r7, #36]	@ 0x24
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8002e08:	f44f 0340 	mov.w	r3, #12582912	@ 0xc00000
 8002e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  AnalogWDGConfig.Channel = ADC_CHANNEL_3;
 8002e0e:	4b2a      	ldr	r3, [pc, #168]	@ (8002eb8 <MX_ADC2_Init+0x13c>)
 8002e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  AnalogWDGConfig.ITMode = DISABLE;
 8002e12:	2300      	movs	r3, #0
 8002e14:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  AnalogWDGConfig.HighThreshold = 0;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	637b      	str	r3, [r7, #52]	@ 0x34
  AnalogWDGConfig.LowThreshold = 0;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 8002e20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e24:	4619      	mov	r1, r3
 8002e26:	4821      	ldr	r0, [pc, #132]	@ (8002eac <MX_ADC2_Init+0x130>)
 8002e28:	f003 fc80 	bl	800672c <HAL_ADC_AnalogWDGConfig>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8002e32:	f000 fe51 	bl	8003ad8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002e36:	4b20      	ldr	r3, [pc, #128]	@ (8002eb8 <MX_ADC2_Init+0x13c>)
 8002e38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002e3a:	2306      	movs	r3, #6
 8002e3c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002e42:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002e46:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002e48:	2304      	movs	r3, #4
 8002e4a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8002e50:	2300      	movs	r3, #0
 8002e52:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002e56:	463b      	mov	r3, r7
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4814      	ldr	r0, [pc, #80]	@ (8002eac <MX_ADC2_Init+0x130>)
 8002e5c:	f002 ff3a 	bl	8005cd4 <HAL_ADC_ConfigChannel>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 8002e66:	f000 fe37 	bl	8003ad8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8002e6a:	4b14      	ldr	r3, [pc, #80]	@ (8002ebc <MX_ADC2_Init+0x140>)
 8002e6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002e6e:	230c      	movs	r3, #12
 8002e70:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002e72:	463b      	mov	r3, r7
 8002e74:	4619      	mov	r1, r3
 8002e76:	480d      	ldr	r0, [pc, #52]	@ (8002eac <MX_ADC2_Init+0x130>)
 8002e78:	f002 ff2c 	bl	8005cd4 <HAL_ADC_ConfigChannel>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <MX_ADC2_Init+0x10a>
  {
    Error_Handler();
 8002e82:	f000 fe29 	bl	8003ad8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002e86:	4b0e      	ldr	r3, [pc, #56]	@ (8002ec0 <MX_ADC2_Init+0x144>)
 8002e88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002e8a:	2312      	movs	r3, #18
 8002e8c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002e8e:	463b      	mov	r3, r7
 8002e90:	4619      	mov	r1, r3
 8002e92:	4806      	ldr	r0, [pc, #24]	@ (8002eac <MX_ADC2_Init+0x130>)
 8002e94:	f002 ff1e 	bl	8005cd4 <HAL_ADC_ConfigChannel>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <MX_ADC2_Init+0x126>
  {
    Error_Handler();
 8002e9e:	f000 fe1b 	bl	8003ad8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002ea2:	bf00      	nop
 8002ea4:	3740      	adds	r7, #64	@ 0x40
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	24000af8 	.word	0x24000af8
 8002eb0:	40022100 	.word	0x40022100
 8002eb4:	7dc00000 	.word	0x7dc00000
 8002eb8:	0c900008 	.word	0x0c900008
 8002ebc:	4fb80000 	.word	0x4fb80000
 8002ec0:	14f00020 	.word	0x14f00020

08002ec4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08a      	sub	sp, #40	@ 0x28
 8002ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002eca:	1d3b      	adds	r3, r7, #4
 8002ecc:	2224      	movs	r2, #36	@ 0x24
 8002ece:	2100      	movs	r1, #0
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f00f fa9e 	bl	8012412 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8002ed6:	4b78      	ldr	r3, [pc, #480]	@ (80030b8 <MX_ADC3_Init+0x1f4>)
 8002ed8:	4a78      	ldr	r2, [pc, #480]	@ (80030bc <MX_ADC3_Init+0x1f8>)
 8002eda:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002edc:	4b76      	ldr	r3, [pc, #472]	@ (80030b8 <MX_ADC3_Init+0x1f4>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002ee2:	4b75      	ldr	r3, [pc, #468]	@ (80030b8 <MX_ADC3_Init+0x1f4>)
 8002ee4:	2208      	movs	r2, #8
 8002ee6:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8002ee8:	4b73      	ldr	r3, [pc, #460]	@ (80030b8 <MX_ADC3_Init+0x1f4>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002eee:	4b72      	ldr	r3, [pc, #456]	@ (80030b8 <MX_ADC3_Init+0x1f4>)
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002ef4:	4b70      	ldr	r3, [pc, #448]	@ (80030b8 <MX_ADC3_Init+0x1f4>)
 8002ef6:	2208      	movs	r2, #8
 8002ef8:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002efa:	4b6f      	ldr	r3, [pc, #444]	@ (80030b8 <MX_ADC3_Init+0x1f4>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002f00:	4b6d      	ldr	r3, [pc, #436]	@ (80030b8 <MX_ADC3_Init+0x1f4>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 11;
 8002f06:	4b6c      	ldr	r3, [pc, #432]	@ (80030b8 <MX_ADC3_Init+0x1f4>)
 8002f08:	220b      	movs	r2, #11
 8002f0a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002f0c:	4b6a      	ldr	r3, [pc, #424]	@ (80030b8 <MX_ADC3_Init+0x1f4>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f14:	4b68      	ldr	r3, [pc, #416]	@ (80030b8 <MX_ADC3_Init+0x1f4>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f1a:	4b67      	ldr	r3, [pc, #412]	@ (80030b8 <MX_ADC3_Init+0x1f4>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8002f20:	4b65      	ldr	r3, [pc, #404]	@ (80030b8 <MX_ADC3_Init+0x1f4>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8002f28:	4b63      	ldr	r3, [pc, #396]	@ (80030b8 <MX_ADC3_Init+0x1f4>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 8002f2e:	4b62      	ldr	r3, [pc, #392]	@ (80030b8 <MX_ADC3_Init+0x1f4>)
 8002f30:	2201      	movs	r2, #1
 8002f32:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002f34:	4b60      	ldr	r3, [pc, #384]	@ (80030b8 <MX_ADC3_Init+0x1f4>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002f3a:	4b5f      	ldr	r3, [pc, #380]	@ (80030b8 <MX_ADC3_Init+0x1f4>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8002f40:	4b5d      	ldr	r3, [pc, #372]	@ (80030b8 <MX_ADC3_Init+0x1f4>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002f48:	485b      	ldr	r0, [pc, #364]	@ (80030b8 <MX_ADC3_Init+0x1f4>)
 8002f4a:	f002 f991 	bl	8005270 <HAL_ADC_Init>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8002f54:	f000 fdc0 	bl	8003ad8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002f5c:	2306      	movs	r3, #6
 8002f5e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_6CYCLES_5;
 8002f60:	2301      	movs	r3, #1
 8002f62:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002f64:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002f68:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002f6a:	2304      	movs	r3, #4
 8002f6c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8002f72:	2300      	movs	r3, #0
 8002f74:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002f76:	1d3b      	adds	r3, r7, #4
 8002f78:	4619      	mov	r1, r3
 8002f7a:	484f      	ldr	r0, [pc, #316]	@ (80030b8 <MX_ADC3_Init+0x1f4>)
 8002f7c:	f002 feaa 	bl	8005cd4 <HAL_ADC_ConfigChannel>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <MX_ADC3_Init+0xc6>
  {
    Error_Handler();
 8002f86:	f000 fda7 	bl	8003ad8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002f8a:	4b4d      	ldr	r3, [pc, #308]	@ (80030c0 <MX_ADC3_Init+0x1fc>)
 8002f8c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002f8e:	230c      	movs	r3, #12
 8002f90:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002f92:	1d3b      	adds	r3, r7, #4
 8002f94:	4619      	mov	r1, r3
 8002f96:	4848      	ldr	r0, [pc, #288]	@ (80030b8 <MX_ADC3_Init+0x1f4>)
 8002f98:	f002 fe9c 	bl	8005cd4 <HAL_ADC_ConfigChannel>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <MX_ADC3_Init+0xe2>
  {
    Error_Handler();
 8002fa2:	f000 fd99 	bl	8003ad8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002fa6:	4b47      	ldr	r3, [pc, #284]	@ (80030c4 <MX_ADC3_Init+0x200>)
 8002fa8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002faa:	2312      	movs	r3, #18
 8002fac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002fae:	1d3b      	adds	r3, r7, #4
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4841      	ldr	r0, [pc, #260]	@ (80030b8 <MX_ADC3_Init+0x1f4>)
 8002fb4:	f002 fe8e 	bl	8005cd4 <HAL_ADC_ConfigChannel>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <MX_ADC3_Init+0xfe>
  {
    Error_Handler();
 8002fbe:	f000 fd8b 	bl	8003ad8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002fc2:	4b41      	ldr	r3, [pc, #260]	@ (80030c8 <MX_ADC3_Init+0x204>)
 8002fc4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002fc6:	2318      	movs	r3, #24
 8002fc8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002fca:	1d3b      	adds	r3, r7, #4
 8002fcc:	4619      	mov	r1, r3
 8002fce:	483a      	ldr	r0, [pc, #232]	@ (80030b8 <MX_ADC3_Init+0x1f4>)
 8002fd0:	f002 fe80 	bl	8005cd4 <HAL_ADC_ConfigChannel>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <MX_ADC3_Init+0x11a>
  {
    Error_Handler();
 8002fda:	f000 fd7d 	bl	8003ad8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002fde:	4b3b      	ldr	r3, [pc, #236]	@ (80030cc <MX_ADC3_Init+0x208>)
 8002fe0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002fe2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002fe6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002fe8:	1d3b      	adds	r3, r7, #4
 8002fea:	4619      	mov	r1, r3
 8002fec:	4832      	ldr	r0, [pc, #200]	@ (80030b8 <MX_ADC3_Init+0x1f4>)
 8002fee:	f002 fe71 	bl	8005cd4 <HAL_ADC_ConfigChannel>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <MX_ADC3_Init+0x138>
  {
    Error_Handler();
 8002ff8:	f000 fd6e 	bl	8003ad8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002ffc:	4b34      	ldr	r3, [pc, #208]	@ (80030d0 <MX_ADC3_Init+0x20c>)
 8002ffe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8003000:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8003004:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003006:	1d3b      	adds	r3, r7, #4
 8003008:	4619      	mov	r1, r3
 800300a:	482b      	ldr	r0, [pc, #172]	@ (80030b8 <MX_ADC3_Init+0x1f4>)
 800300c:	f002 fe62 	bl	8005cd4 <HAL_ADC_ConfigChannel>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <MX_ADC3_Init+0x156>
  {
    Error_Handler();
 8003016:	f000 fd5f 	bl	8003ad8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800301a:	4b2e      	ldr	r3, [pc, #184]	@ (80030d4 <MX_ADC3_Init+0x210>)
 800301c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800301e:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8003022:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003024:	1d3b      	adds	r3, r7, #4
 8003026:	4619      	mov	r1, r3
 8003028:	4823      	ldr	r0, [pc, #140]	@ (80030b8 <MX_ADC3_Init+0x1f4>)
 800302a:	f002 fe53 	bl	8005cd4 <HAL_ADC_ConfigChannel>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <MX_ADC3_Init+0x174>
  {
    Error_Handler();
 8003034:	f000 fd50 	bl	8003ad8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003038:	4b27      	ldr	r3, [pc, #156]	@ (80030d8 <MX_ADC3_Init+0x214>)
 800303a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800303c:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8003040:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003042:	1d3b      	adds	r3, r7, #4
 8003044:	4619      	mov	r1, r3
 8003046:	481c      	ldr	r0, [pc, #112]	@ (80030b8 <MX_ADC3_Init+0x1f4>)
 8003048:	f002 fe44 	bl	8005cd4 <HAL_ADC_ConfigChannel>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <MX_ADC3_Init+0x192>
  {
    Error_Handler();
 8003052:	f000 fd41 	bl	8003ad8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003056:	4b21      	ldr	r3, [pc, #132]	@ (80030dc <MX_ADC3_Init+0x218>)
 8003058:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800305a:	f44f 738c 	mov.w	r3, #280	@ 0x118
 800305e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003060:	1d3b      	adds	r3, r7, #4
 8003062:	4619      	mov	r1, r3
 8003064:	4814      	ldr	r0, [pc, #80]	@ (80030b8 <MX_ADC3_Init+0x1f4>)
 8003066:	f002 fe35 	bl	8005cd4 <HAL_ADC_ConfigChannel>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <MX_ADC3_Init+0x1b0>
  {
    Error_Handler();
 8003070:	f000 fd32 	bl	8003ad8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003074:	4b1a      	ldr	r3, [pc, #104]	@ (80030e0 <MX_ADC3_Init+0x21c>)
 8003076:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8003078:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800307c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800307e:	1d3b      	adds	r3, r7, #4
 8003080:	4619      	mov	r1, r3
 8003082:	480d      	ldr	r0, [pc, #52]	@ (80030b8 <MX_ADC3_Init+0x1f4>)
 8003084:	f002 fe26 	bl	8005cd4 <HAL_ADC_ConfigChannel>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <MX_ADC3_Init+0x1ce>
  {
    Error_Handler();
 800308e:	f000 fd23 	bl	8003ad8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003092:	4b14      	ldr	r3, [pc, #80]	@ (80030e4 <MX_ADC3_Init+0x220>)
 8003094:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8003096:	f240 2306 	movw	r3, #518	@ 0x206
 800309a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800309c:	1d3b      	adds	r3, r7, #4
 800309e:	4619      	mov	r1, r3
 80030a0:	4805      	ldr	r0, [pc, #20]	@ (80030b8 <MX_ADC3_Init+0x1f4>)
 80030a2:	f002 fe17 	bl	8005cd4 <HAL_ADC_ConfigChannel>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <MX_ADC3_Init+0x1ec>
  {
    Error_Handler();
 80030ac:	f000 fd14 	bl	8003ad8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80030b0:	bf00      	nop
 80030b2:	3728      	adds	r7, #40	@ 0x28
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	24000b68 	.word	0x24000b68
 80030bc:	58026000 	.word	0x58026000
 80030c0:	04300002 	.word	0x04300002
 80030c4:	08600004 	.word	0x08600004
 80030c8:	0c900008 	.word	0x0c900008
 80030cc:	10c00010 	.word	0x10c00010
 80030d0:	14f00020 	.word	0x14f00020
 80030d4:	19200040 	.word	0x19200040
 80030d8:	1d500080 	.word	0x1d500080
 80030dc:	21800100 	.word	0x21800100
 80030e0:	25b00200 	.word	0x25b00200
 80030e4:	2a000400 	.word	0x2a000400

080030e8 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 80030ec:	4b13      	ldr	r3, [pc, #76]	@ (800313c <MX_COMP2_Init+0x54>)
 80030ee:	4a14      	ldr	r2, [pc, #80]	@ (8003140 <MX_COMP2_Init+0x58>)
 80030f0:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 80030f2:	4b12      	ldr	r3, [pc, #72]	@ (800313c <MX_COMP2_Init+0x54>)
 80030f4:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80030f8:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 80030fa:	4b10      	ldr	r3, [pc, #64]	@ (800313c <MX_COMP2_Init+0x54>)
 80030fc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003100:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8003102:	4b0e      	ldr	r3, [pc, #56]	@ (800313c <MX_COMP2_Init+0x54>)
 8003104:	2200      	movs	r2, #0
 8003106:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8003108:	4b0c      	ldr	r3, [pc, #48]	@ (800313c <MX_COMP2_Init+0x54>)
 800310a:	2200      	movs	r2, #0
 800310c:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800310e:	4b0b      	ldr	r3, [pc, #44]	@ (800313c <MX_COMP2_Init+0x54>)
 8003110:	2200      	movs	r2, #0
 8003112:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8003114:	4b09      	ldr	r3, [pc, #36]	@ (800313c <MX_COMP2_Init+0x54>)
 8003116:	2200      	movs	r2, #0
 8003118:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800311a:	4b08      	ldr	r3, [pc, #32]	@ (800313c <MX_COMP2_Init+0x54>)
 800311c:	2200      	movs	r2, #0
 800311e:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8003120:	4b06      	ldr	r3, [pc, #24]	@ (800313c <MX_COMP2_Init+0x54>)
 8003122:	2200      	movs	r2, #0
 8003124:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8003126:	4805      	ldr	r0, [pc, #20]	@ (800313c <MX_COMP2_Init+0x54>)
 8003128:	f004 fb92 	bl	8007850 <HAL_COMP_Init>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <MX_COMP2_Init+0x4e>
  {
    Error_Handler();
 8003132:	f000 fcd1 	bl	8003ad8 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8003136:	bf00      	nop
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	24000cc8 	.word	0x24000cc8
 8003140:	58003810 	.word	0x58003810

08003144 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8003148:	4b1e      	ldr	r3, [pc, #120]	@ (80031c4 <MX_ETH_Init+0x80>)
 800314a:	4a1f      	ldr	r2, [pc, #124]	@ (80031c8 <MX_ETH_Init+0x84>)
 800314c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800314e:	4b1f      	ldr	r3, [pc, #124]	@ (80031cc <MX_ETH_Init+0x88>)
 8003150:	2200      	movs	r2, #0
 8003152:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8003154:	4b1d      	ldr	r3, [pc, #116]	@ (80031cc <MX_ETH_Init+0x88>)
 8003156:	2280      	movs	r2, #128	@ 0x80
 8003158:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800315a:	4b1c      	ldr	r3, [pc, #112]	@ (80031cc <MX_ETH_Init+0x88>)
 800315c:	22e1      	movs	r2, #225	@ 0xe1
 800315e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8003160:	4b1a      	ldr	r3, [pc, #104]	@ (80031cc <MX_ETH_Init+0x88>)
 8003162:	2200      	movs	r2, #0
 8003164:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8003166:	4b19      	ldr	r3, [pc, #100]	@ (80031cc <MX_ETH_Init+0x88>)
 8003168:	2200      	movs	r2, #0
 800316a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800316c:	4b17      	ldr	r3, [pc, #92]	@ (80031cc <MX_ETH_Init+0x88>)
 800316e:	2200      	movs	r2, #0
 8003170:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8003172:	4b14      	ldr	r3, [pc, #80]	@ (80031c4 <MX_ETH_Init+0x80>)
 8003174:	4a15      	ldr	r2, [pc, #84]	@ (80031cc <MX_ETH_Init+0x88>)
 8003176:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003178:	4b12      	ldr	r3, [pc, #72]	@ (80031c4 <MX_ETH_Init+0x80>)
 800317a:	2201      	movs	r2, #1
 800317c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800317e:	4b11      	ldr	r3, [pc, #68]	@ (80031c4 <MX_ETH_Init+0x80>)
 8003180:	4a13      	ldr	r2, [pc, #76]	@ (80031d0 <MX_ETH_Init+0x8c>)
 8003182:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003184:	4b0f      	ldr	r3, [pc, #60]	@ (80031c4 <MX_ETH_Init+0x80>)
 8003186:	4a13      	ldr	r2, [pc, #76]	@ (80031d4 <MX_ETH_Init+0x90>)
 8003188:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800318a:	4b0e      	ldr	r3, [pc, #56]	@ (80031c4 <MX_ETH_Init+0x80>)
 800318c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8003190:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8003192:	480c      	ldr	r0, [pc, #48]	@ (80031c4 <MX_ETH_Init+0x80>)
 8003194:	f006 fe6a 	bl	8009e6c <HAL_ETH_Init>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800319e:	f000 fc9b 	bl	8003ad8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80031a2:	2238      	movs	r2, #56	@ 0x38
 80031a4:	2100      	movs	r1, #0
 80031a6:	480c      	ldr	r0, [pc, #48]	@ (80031d8 <MX_ETH_Init+0x94>)
 80031a8:	f00f f933 	bl	8012412 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80031ac:	4b0a      	ldr	r3, [pc, #40]	@ (80031d8 <MX_ETH_Init+0x94>)
 80031ae:	2221      	movs	r2, #33	@ 0x21
 80031b0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80031b2:	4b09      	ldr	r3, [pc, #36]	@ (80031d8 <MX_ETH_Init+0x94>)
 80031b4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80031b8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80031ba:	4b07      	ldr	r3, [pc, #28]	@ (80031d8 <MX_ETH_Init+0x94>)
 80031bc:	2200      	movs	r2, #0
 80031be:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80031c0:	bf00      	nop
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	24000cf4 	.word	0x24000cf4
 80031c8:	40028000 	.word	0x40028000
 80031cc:	24001094 	.word	0x24001094
 80031d0:	24000270 	.word	0x24000270
 80031d4:	24000210 	.word	0x24000210
 80031d8:	24000a50 	.word	0x24000a50

080031dc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80031e0:	4b22      	ldr	r3, [pc, #136]	@ (800326c <MX_LPUART1_UART_Init+0x90>)
 80031e2:	4a23      	ldr	r2, [pc, #140]	@ (8003270 <MX_LPUART1_UART_Init+0x94>)
 80031e4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80031e6:	4b21      	ldr	r3, [pc, #132]	@ (800326c <MX_LPUART1_UART_Init+0x90>)
 80031e8:	4a22      	ldr	r2, [pc, #136]	@ (8003274 <MX_LPUART1_UART_Init+0x98>)
 80031ea:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031ec:	4b1f      	ldr	r3, [pc, #124]	@ (800326c <MX_LPUART1_UART_Init+0x90>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80031f2:	4b1e      	ldr	r3, [pc, #120]	@ (800326c <MX_LPUART1_UART_Init+0x90>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80031f8:	4b1c      	ldr	r3, [pc, #112]	@ (800326c <MX_LPUART1_UART_Init+0x90>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80031fe:	4b1b      	ldr	r3, [pc, #108]	@ (800326c <MX_LPUART1_UART_Init+0x90>)
 8003200:	220c      	movs	r2, #12
 8003202:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003204:	4b19      	ldr	r3, [pc, #100]	@ (800326c <MX_LPUART1_UART_Init+0x90>)
 8003206:	2200      	movs	r2, #0
 8003208:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800320a:	4b18      	ldr	r3, [pc, #96]	@ (800326c <MX_LPUART1_UART_Init+0x90>)
 800320c:	2200      	movs	r2, #0
 800320e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003210:	4b16      	ldr	r3, [pc, #88]	@ (800326c <MX_LPUART1_UART_Init+0x90>)
 8003212:	2200      	movs	r2, #0
 8003214:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003216:	4b15      	ldr	r3, [pc, #84]	@ (800326c <MX_LPUART1_UART_Init+0x90>)
 8003218:	2200      	movs	r2, #0
 800321a:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800321c:	4b13      	ldr	r3, [pc, #76]	@ (800326c <MX_LPUART1_UART_Init+0x90>)
 800321e:	2200      	movs	r2, #0
 8003220:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003222:	4812      	ldr	r0, [pc, #72]	@ (800326c <MX_LPUART1_UART_Init+0x90>)
 8003224:	f00c ff83 	bl	801012e <HAL_UART_Init>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 800322e:	f000 fc53 	bl	8003ad8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003232:	2100      	movs	r1, #0
 8003234:	480d      	ldr	r0, [pc, #52]	@ (800326c <MX_LPUART1_UART_Init+0x90>)
 8003236:	f00e f9e0 	bl	80115fa <HAL_UARTEx_SetTxFifoThreshold>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8003240:	f000 fc4a 	bl	8003ad8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003244:	2100      	movs	r1, #0
 8003246:	4809      	ldr	r0, [pc, #36]	@ (800326c <MX_LPUART1_UART_Init+0x90>)
 8003248:	f00e fa15 	bl	8011676 <HAL_UARTEx_SetRxFifoThreshold>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8003252:	f000 fc41 	bl	8003ad8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003256:	4805      	ldr	r0, [pc, #20]	@ (800326c <MX_LPUART1_UART_Init+0x90>)
 8003258:	f00e f996 	bl	8011588 <HAL_UARTEx_DisableFifoMode>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8003262:	f000 fc39 	bl	8003ad8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003266:	bf00      	nop
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	24000da4 	.word	0x24000da4
 8003270:	58000c00 	.word	0x58000c00
 8003274:	00033324 	.word	0x00033324

08003278 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800327c:	4b22      	ldr	r3, [pc, #136]	@ (8003308 <MX_USART3_UART_Init+0x90>)
 800327e:	4a23      	ldr	r2, [pc, #140]	@ (800330c <MX_USART3_UART_Init+0x94>)
 8003280:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 8593750;
 8003282:	4b21      	ldr	r3, [pc, #132]	@ (8003308 <MX_USART3_UART_Init+0x90>)
 8003284:	4a22      	ldr	r2, [pc, #136]	@ (8003310 <MX_USART3_UART_Init+0x98>)
 8003286:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003288:	4b1f      	ldr	r3, [pc, #124]	@ (8003308 <MX_USART3_UART_Init+0x90>)
 800328a:	2200      	movs	r2, #0
 800328c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800328e:	4b1e      	ldr	r3, [pc, #120]	@ (8003308 <MX_USART3_UART_Init+0x90>)
 8003290:	2200      	movs	r2, #0
 8003292:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003294:	4b1c      	ldr	r3, [pc, #112]	@ (8003308 <MX_USART3_UART_Init+0x90>)
 8003296:	2200      	movs	r2, #0
 8003298:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800329a:	4b1b      	ldr	r3, [pc, #108]	@ (8003308 <MX_USART3_UART_Init+0x90>)
 800329c:	220c      	movs	r2, #12
 800329e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032a0:	4b19      	ldr	r3, [pc, #100]	@ (8003308 <MX_USART3_UART_Init+0x90>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80032a6:	4b18      	ldr	r3, [pc, #96]	@ (8003308 <MX_USART3_UART_Init+0x90>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032ac:	4b16      	ldr	r3, [pc, #88]	@ (8003308 <MX_USART3_UART_Init+0x90>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80032b2:	4b15      	ldr	r3, [pc, #84]	@ (8003308 <MX_USART3_UART_Init+0x90>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032b8:	4b13      	ldr	r3, [pc, #76]	@ (8003308 <MX_USART3_UART_Init+0x90>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80032be:	4812      	ldr	r0, [pc, #72]	@ (8003308 <MX_USART3_UART_Init+0x90>)
 80032c0:	f00c ff35 	bl	801012e <HAL_UART_Init>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 80032ca:	f000 fc05 	bl	8003ad8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032ce:	2100      	movs	r1, #0
 80032d0:	480d      	ldr	r0, [pc, #52]	@ (8003308 <MX_USART3_UART_Init+0x90>)
 80032d2:	f00e f992 	bl	80115fa <HAL_UARTEx_SetTxFifoThreshold>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 80032dc:	f000 fbfc 	bl	8003ad8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032e0:	2100      	movs	r1, #0
 80032e2:	4809      	ldr	r0, [pc, #36]	@ (8003308 <MX_USART3_UART_Init+0x90>)
 80032e4:	f00e f9c7 	bl	8011676 <HAL_UARTEx_SetRxFifoThreshold>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 80032ee:	f000 fbf3 	bl	8003ad8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80032f2:	4805      	ldr	r0, [pc, #20]	@ (8003308 <MX_USART3_UART_Init+0x90>)
 80032f4:	f00e f948 	bl	8011588 <HAL_UARTEx_DisableFifoMode>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 80032fe:	f000 fbeb 	bl	8003ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003302:	bf00      	nop
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	24000e38 	.word	0x24000e38
 800330c:	40004800 	.word	0x40004800
 8003310:	00832156 	.word	0x00832156

08003314 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b098      	sub	sp, #96	@ 0x60
 8003318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800331a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	605a      	str	r2, [r3, #4]
 8003324:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003326:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	605a      	str	r2, [r3, #4]
 8003330:	609a      	str	r2, [r3, #8]
 8003332:	60da      	str	r2, [r3, #12]
 8003334:	611a      	str	r2, [r3, #16]
 8003336:	615a      	str	r2, [r3, #20]
 8003338:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800333a:	1d3b      	adds	r3, r7, #4
 800333c:	2234      	movs	r2, #52	@ 0x34
 800333e:	2100      	movs	r1, #0
 8003340:	4618      	mov	r0, r3
 8003342:	f00f f866 	bl	8012412 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003346:	4b3a      	ldr	r3, [pc, #232]	@ (8003430 <MX_TIM1_Init+0x11c>)
 8003348:	4a3a      	ldr	r2, [pc, #232]	@ (8003434 <MX_TIM1_Init+0x120>)
 800334a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800334c:	4b38      	ldr	r3, [pc, #224]	@ (8003430 <MX_TIM1_Init+0x11c>)
 800334e:	2200      	movs	r2, #0
 8003350:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003352:	4b37      	ldr	r3, [pc, #220]	@ (8003430 <MX_TIM1_Init+0x11c>)
 8003354:	2200      	movs	r2, #0
 8003356:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3240;
 8003358:	4b35      	ldr	r3, [pc, #212]	@ (8003430 <MX_TIM1_Init+0x11c>)
 800335a:	f640 42a8 	movw	r2, #3240	@ 0xca8
 800335e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003360:	4b33      	ldr	r3, [pc, #204]	@ (8003430 <MX_TIM1_Init+0x11c>)
 8003362:	2200      	movs	r2, #0
 8003364:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003366:	4b32      	ldr	r3, [pc, #200]	@ (8003430 <MX_TIM1_Init+0x11c>)
 8003368:	2200      	movs	r2, #0
 800336a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800336c:	4b30      	ldr	r3, [pc, #192]	@ (8003430 <MX_TIM1_Init+0x11c>)
 800336e:	2200      	movs	r2, #0
 8003370:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003372:	482f      	ldr	r0, [pc, #188]	@ (8003430 <MX_TIM1_Init+0x11c>)
 8003374:	f00b f9cc 	bl	800e710 <HAL_TIM_PWM_Init>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800337e:	f000 fbab 	bl	8003ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003382:	2300      	movs	r3, #0
 8003384:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003386:	2300      	movs	r3, #0
 8003388:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800338a:	2300      	movs	r3, #0
 800338c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800338e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003392:	4619      	mov	r1, r3
 8003394:	4826      	ldr	r0, [pc, #152]	@ (8003430 <MX_TIM1_Init+0x11c>)
 8003396:	f00c fd69 	bl	800fe6c <HAL_TIMEx_MasterConfigSynchronization>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80033a0:	f000 fb9a 	bl	8003ad8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033a4:	2360      	movs	r3, #96	@ 0x60
 80033a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 1620;
 80033a8:	f240 6354 	movw	r3, #1620	@ 0x654
 80033ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80033ae:	2302      	movs	r3, #2
 80033b0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80033b2:	2308      	movs	r3, #8
 80033b4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033b6:	2300      	movs	r3, #0
 80033b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 80033ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 80033c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80033c4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033c6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80033ca:	2200      	movs	r2, #0
 80033cc:	4619      	mov	r1, r3
 80033ce:	4818      	ldr	r0, [pc, #96]	@ (8003430 <MX_TIM1_Init+0x11c>)
 80033d0:	f00b fc9c 	bl	800ed0c <HAL_TIM_PWM_ConfigChannel>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80033da:	f000 fb7d 	bl	8003ad8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80033de:	2300      	movs	r3, #0
 80033e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80033e2:	2300      	movs	r3, #0
 80033e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80033e6:	2300      	movs	r3, #0
 80033e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0xFF;
 80033ea:	23ff      	movs	r3, #255	@ 0xff
 80033ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80033ee:	2300      	movs	r3, #0
 80033f0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80033f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80033f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80033f8:	2300      	movs	r3, #0
 80033fa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80033fc:	2300      	movs	r3, #0
 80033fe:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003400:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003404:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003406:	2300      	movs	r3, #0
 8003408:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800340a:	2300      	movs	r3, #0
 800340c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800340e:	1d3b      	adds	r3, r7, #4
 8003410:	4619      	mov	r1, r3
 8003412:	4807      	ldr	r0, [pc, #28]	@ (8003430 <MX_TIM1_Init+0x11c>)
 8003414:	f00c fdc6 	bl	800ffa4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800341e:	f000 fb5b 	bl	8003ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003422:	4803      	ldr	r0, [pc, #12]	@ (8003430 <MX_TIM1_Init+0x11c>)
 8003424:	f000 ffc8 	bl	80043b8 <HAL_TIM_MspPostInit>

}
 8003428:	bf00      	nop
 800342a:	3760      	adds	r7, #96	@ 0x60
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	24000ecc 	.word	0x24000ecc
 8003434:	40010000 	.word	0x40010000

08003438 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b08a      	sub	sp, #40	@ 0x28
 800343c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800343e:	f107 031c 	add.w	r3, r7, #28
 8003442:	2200      	movs	r2, #0
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	605a      	str	r2, [r3, #4]
 8003448:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800344a:	463b      	mov	r3, r7
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	605a      	str	r2, [r3, #4]
 8003452:	609a      	str	r2, [r3, #8]
 8003454:	60da      	str	r2, [r3, #12]
 8003456:	611a      	str	r2, [r3, #16]
 8003458:	615a      	str	r2, [r3, #20]
 800345a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800345c:	4b22      	ldr	r3, [pc, #136]	@ (80034e8 <MX_TIM2_Init+0xb0>)
 800345e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003462:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003464:	4b20      	ldr	r3, [pc, #128]	@ (80034e8 <MX_TIM2_Init+0xb0>)
 8003466:	2200      	movs	r2, #0
 8003468:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800346a:	4b1f      	ldr	r3, [pc, #124]	@ (80034e8 <MX_TIM2_Init+0xb0>)
 800346c:	2200      	movs	r2, #0
 800346e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003470:	4b1d      	ldr	r3, [pc, #116]	@ (80034e8 <MX_TIM2_Init+0xb0>)
 8003472:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003476:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003478:	4b1b      	ldr	r3, [pc, #108]	@ (80034e8 <MX_TIM2_Init+0xb0>)
 800347a:	2200      	movs	r2, #0
 800347c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800347e:	4b1a      	ldr	r3, [pc, #104]	@ (80034e8 <MX_TIM2_Init+0xb0>)
 8003480:	2200      	movs	r2, #0
 8003482:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003484:	4818      	ldr	r0, [pc, #96]	@ (80034e8 <MX_TIM2_Init+0xb0>)
 8003486:	f00b f943 	bl	800e710 <HAL_TIM_PWM_Init>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8003490:	f000 fb22 	bl	8003ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003494:	2300      	movs	r3, #0
 8003496:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003498:	2300      	movs	r3, #0
 800349a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800349c:	f107 031c 	add.w	r3, r7, #28
 80034a0:	4619      	mov	r1, r3
 80034a2:	4811      	ldr	r0, [pc, #68]	@ (80034e8 <MX_TIM2_Init+0xb0>)
 80034a4:	f00c fce2 	bl	800fe6c <HAL_TIMEx_MasterConfigSynchronization>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80034ae:	f000 fb13 	bl	8003ad8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034b2:	2360      	movs	r3, #96	@ 0x60
 80034b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80034b6:	2300      	movs	r3, #0
 80034b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034ba:	2300      	movs	r3, #0
 80034bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034be:	2300      	movs	r3, #0
 80034c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80034c2:	463b      	mov	r3, r7
 80034c4:	2200      	movs	r2, #0
 80034c6:	4619      	mov	r1, r3
 80034c8:	4807      	ldr	r0, [pc, #28]	@ (80034e8 <MX_TIM2_Init+0xb0>)
 80034ca:	f00b fc1f 	bl	800ed0c <HAL_TIM_PWM_ConfigChannel>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80034d4:	f000 fb00 	bl	8003ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80034d8:	4803      	ldr	r0, [pc, #12]	@ (80034e8 <MX_TIM2_Init+0xb0>)
 80034da:	f000 ff6d 	bl	80043b8 <HAL_TIM_MspPostInit>

}
 80034de:	bf00      	nop
 80034e0:	3728      	adds	r7, #40	@ 0x28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	24000f18 	.word	0x24000f18

080034ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034f2:	f107 0314 	add.w	r3, r7, #20
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	605a      	str	r2, [r3, #4]
 80034fc:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80034fe:	1d3b      	adds	r3, r7, #4
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	605a      	str	r2, [r3, #4]
 8003506:	609a      	str	r2, [r3, #8]
 8003508:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800350a:	4b20      	ldr	r3, [pc, #128]	@ (800358c <MX_TIM3_Init+0xa0>)
 800350c:	4a20      	ldr	r2, [pc, #128]	@ (8003590 <MX_TIM3_Init+0xa4>)
 800350e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003510:	4b1e      	ldr	r3, [pc, #120]	@ (800358c <MX_TIM3_Init+0xa0>)
 8003512:	2200      	movs	r2, #0
 8003514:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003516:	4b1d      	ldr	r3, [pc, #116]	@ (800358c <MX_TIM3_Init+0xa0>)
 8003518:	2200      	movs	r2, #0
 800351a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800351c:	4b1b      	ldr	r3, [pc, #108]	@ (800358c <MX_TIM3_Init+0xa0>)
 800351e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003522:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003524:	4b19      	ldr	r3, [pc, #100]	@ (800358c <MX_TIM3_Init+0xa0>)
 8003526:	2200      	movs	r2, #0
 8003528:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800352a:	4b18      	ldr	r3, [pc, #96]	@ (800358c <MX_TIM3_Init+0xa0>)
 800352c:	2200      	movs	r2, #0
 800352e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003530:	4816      	ldr	r0, [pc, #88]	@ (800358c <MX_TIM3_Init+0xa0>)
 8003532:	f00b faf7 	bl	800eb24 <HAL_TIM_IC_Init>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800353c:	f000 facc 	bl	8003ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003540:	2300      	movs	r3, #0
 8003542:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003544:	2300      	movs	r3, #0
 8003546:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003548:	f107 0314 	add.w	r3, r7, #20
 800354c:	4619      	mov	r1, r3
 800354e:	480f      	ldr	r0, [pc, #60]	@ (800358c <MX_TIM3_Init+0xa0>)
 8003550:	f00c fc8c 	bl	800fe6c <HAL_TIMEx_MasterConfigSynchronization>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800355a:	f000 fabd 	bl	8003ad8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800355e:	2300      	movs	r3, #0
 8003560:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003562:	2301      	movs	r3, #1
 8003564:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003566:	2300      	movs	r3, #0
 8003568:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800356a:	2300      	movs	r3, #0
 800356c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800356e:	1d3b      	adds	r3, r7, #4
 8003570:	2200      	movs	r2, #0
 8003572:	4619      	mov	r1, r3
 8003574:	4805      	ldr	r0, [pc, #20]	@ (800358c <MX_TIM3_Init+0xa0>)
 8003576:	f00b fb2c 	bl	800ebd2 <HAL_TIM_IC_ConfigChannel>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003580:	f000 faaa 	bl	8003ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003584:	bf00      	nop
 8003586:	3720      	adds	r7, #32
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	24000f64 	.word	0x24000f64
 8003590:	40000400 	.word	0x40000400

08003594 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b08a      	sub	sp, #40	@ 0x28
 8003598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800359a:	f107 031c 	add.w	r3, r7, #28
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	605a      	str	r2, [r3, #4]
 80035a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035a6:	463b      	mov	r3, r7
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	605a      	str	r2, [r3, #4]
 80035ae:	609a      	str	r2, [r3, #8]
 80035b0:	60da      	str	r2, [r3, #12]
 80035b2:	611a      	str	r2, [r3, #16]
 80035b4:	615a      	str	r2, [r3, #20]
 80035b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80035b8:	4b21      	ldr	r3, [pc, #132]	@ (8003640 <MX_TIM4_Init+0xac>)
 80035ba:	4a22      	ldr	r2, [pc, #136]	@ (8003644 <MX_TIM4_Init+0xb0>)
 80035bc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80035be:	4b20      	ldr	r3, [pc, #128]	@ (8003640 <MX_TIM4_Init+0xac>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035c4:	4b1e      	ldr	r3, [pc, #120]	@ (8003640 <MX_TIM4_Init+0xac>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80035ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003640 <MX_TIM4_Init+0xac>)
 80035cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80035d0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003640 <MX_TIM4_Init+0xac>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035d8:	4b19      	ldr	r3, [pc, #100]	@ (8003640 <MX_TIM4_Init+0xac>)
 80035da:	2200      	movs	r2, #0
 80035dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80035de:	4818      	ldr	r0, [pc, #96]	@ (8003640 <MX_TIM4_Init+0xac>)
 80035e0:	f00b f896 	bl	800e710 <HAL_TIM_PWM_Init>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80035ea:	f000 fa75 	bl	8003ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035ee:	2300      	movs	r3, #0
 80035f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035f2:	2300      	movs	r3, #0
 80035f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80035f6:	f107 031c 	add.w	r3, r7, #28
 80035fa:	4619      	mov	r1, r3
 80035fc:	4810      	ldr	r0, [pc, #64]	@ (8003640 <MX_TIM4_Init+0xac>)
 80035fe:	f00c fc35 	bl	800fe6c <HAL_TIMEx_MasterConfigSynchronization>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8003608:	f000 fa66 	bl	8003ad8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800360c:	2360      	movs	r3, #96	@ 0x60
 800360e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003610:	2300      	movs	r3, #0
 8003612:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003614:	2300      	movs	r3, #0
 8003616:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003618:	2300      	movs	r3, #0
 800361a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800361c:	463b      	mov	r3, r7
 800361e:	2200      	movs	r2, #0
 8003620:	4619      	mov	r1, r3
 8003622:	4807      	ldr	r0, [pc, #28]	@ (8003640 <MX_TIM4_Init+0xac>)
 8003624:	f00b fb72 	bl	800ed0c <HAL_TIM_PWM_ConfigChannel>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800362e:	f000 fa53 	bl	8003ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003632:	4803      	ldr	r0, [pc, #12]	@ (8003640 <MX_TIM4_Init+0xac>)
 8003634:	f000 fec0 	bl	80043b8 <HAL_TIM_MspPostInit>

}
 8003638:	bf00      	nop
 800363a:	3728      	adds	r7, #40	@ 0x28
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	24000fb0 	.word	0x24000fb0
 8003644:	40000800 	.word	0x40000800

08003648 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b088      	sub	sp, #32
 800364c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800364e:	f107 0314 	add.w	r3, r7, #20
 8003652:	2200      	movs	r2, #0
 8003654:	601a      	str	r2, [r3, #0]
 8003656:	605a      	str	r2, [r3, #4]
 8003658:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800365a:	1d3b      	adds	r3, r7, #4
 800365c:	2200      	movs	r2, #0
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	605a      	str	r2, [r3, #4]
 8003662:	609a      	str	r2, [r3, #8]
 8003664:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003666:	4b22      	ldr	r3, [pc, #136]	@ (80036f0 <MX_TIM15_Init+0xa8>)
 8003668:	4a22      	ldr	r2, [pc, #136]	@ (80036f4 <MX_TIM15_Init+0xac>)
 800366a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800366c:	4b20      	ldr	r3, [pc, #128]	@ (80036f0 <MX_TIM15_Init+0xa8>)
 800366e:	2200      	movs	r2, #0
 8003670:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003672:	4b1f      	ldr	r3, [pc, #124]	@ (80036f0 <MX_TIM15_Init+0xa8>)
 8003674:	2200      	movs	r2, #0
 8003676:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8003678:	4b1d      	ldr	r3, [pc, #116]	@ (80036f0 <MX_TIM15_Init+0xa8>)
 800367a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800367e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003680:	4b1b      	ldr	r3, [pc, #108]	@ (80036f0 <MX_TIM15_Init+0xa8>)
 8003682:	2200      	movs	r2, #0
 8003684:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003686:	4b1a      	ldr	r3, [pc, #104]	@ (80036f0 <MX_TIM15_Init+0xa8>)
 8003688:	2200      	movs	r2, #0
 800368a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800368c:	4b18      	ldr	r3, [pc, #96]	@ (80036f0 <MX_TIM15_Init+0xa8>)
 800368e:	2200      	movs	r2, #0
 8003690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8003692:	4817      	ldr	r0, [pc, #92]	@ (80036f0 <MX_TIM15_Init+0xa8>)
 8003694:	f00b fa46 	bl	800eb24 <HAL_TIM_IC_Init>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800369e:	f000 fa1b 	bl	8003ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036a2:	2300      	movs	r3, #0
 80036a4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036a6:	2300      	movs	r3, #0
 80036a8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80036aa:	f107 0314 	add.w	r3, r7, #20
 80036ae:	4619      	mov	r1, r3
 80036b0:	480f      	ldr	r0, [pc, #60]	@ (80036f0 <MX_TIM15_Init+0xa8>)
 80036b2:	f00c fbdb 	bl	800fe6c <HAL_TIMEx_MasterConfigSynchronization>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 80036bc:	f000 fa0c 	bl	8003ad8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80036c0:	2300      	movs	r3, #0
 80036c2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80036c4:	2301      	movs	r3, #1
 80036c6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80036c8:	2300      	movs	r3, #0
 80036ca:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80036cc:	2300      	movs	r3, #0
 80036ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	2200      	movs	r2, #0
 80036d4:	4619      	mov	r1, r3
 80036d6:	4806      	ldr	r0, [pc, #24]	@ (80036f0 <MX_TIM15_Init+0xa8>)
 80036d8:	f00b fa7b 	bl	800ebd2 <HAL_TIM_IC_ConfigChannel>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <MX_TIM15_Init+0x9e>
  {
    Error_Handler();
 80036e2:	f000 f9f9 	bl	8003ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80036e6:	bf00      	nop
 80036e8:	3720      	adds	r7, #32
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	24000ffc 	.word	0x24000ffc
 80036f4:	40014000 	.word	0x40014000

080036f8 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b088      	sub	sp, #32
 80036fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036fe:	f107 0310 	add.w	r3, r7, #16
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	605a      	str	r2, [r3, #4]
 8003708:	609a      	str	r2, [r3, #8]
 800370a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800370c:	1d3b      	adds	r3, r7, #4
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	605a      	str	r2, [r3, #4]
 8003714:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 8003716:	4b1e      	ldr	r3, [pc, #120]	@ (8003790 <MX_TIM24_Init+0x98>)
 8003718:	4a1e      	ldr	r2, [pc, #120]	@ (8003794 <MX_TIM24_Init+0x9c>)
 800371a:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 275 - 1;
 800371c:	4b1c      	ldr	r3, [pc, #112]	@ (8003790 <MX_TIM24_Init+0x98>)
 800371e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8003722:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003724:	4b1a      	ldr	r3, [pc, #104]	@ (8003790 <MX_TIM24_Init+0x98>)
 8003726:	2200      	movs	r2, #0
 8003728:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 800372a:	4b19      	ldr	r3, [pc, #100]	@ (8003790 <MX_TIM24_Init+0x98>)
 800372c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003730:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003732:	4b17      	ldr	r3, [pc, #92]	@ (8003790 <MX_TIM24_Init+0x98>)
 8003734:	2200      	movs	r2, #0
 8003736:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003738:	4b15      	ldr	r3, [pc, #84]	@ (8003790 <MX_TIM24_Init+0x98>)
 800373a:	2280      	movs	r2, #128	@ 0x80
 800373c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 800373e:	4814      	ldr	r0, [pc, #80]	@ (8003790 <MX_TIM24_Init+0x98>)
 8003740:	f00a ff10 	bl	800e564 <HAL_TIM_Base_Init>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <MX_TIM24_Init+0x56>
  {
    Error_Handler();
 800374a:	f000 f9c5 	bl	8003ad8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800374e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003752:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 8003754:	f107 0310 	add.w	r3, r7, #16
 8003758:	4619      	mov	r1, r3
 800375a:	480d      	ldr	r0, [pc, #52]	@ (8003790 <MX_TIM24_Init+0x98>)
 800375c:	f00b fbea 	bl	800ef34 <HAL_TIM_ConfigClockSource>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <MX_TIM24_Init+0x72>
  {
    Error_Handler();
 8003766:	f000 f9b7 	bl	8003ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800376a:	2300      	movs	r3, #0
 800376c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800376e:	2300      	movs	r3, #0
 8003770:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8003772:	1d3b      	adds	r3, r7, #4
 8003774:	4619      	mov	r1, r3
 8003776:	4806      	ldr	r0, [pc, #24]	@ (8003790 <MX_TIM24_Init+0x98>)
 8003778:	f00c fb78 	bl	800fe6c <HAL_TIMEx_MasterConfigSynchronization>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <MX_TIM24_Init+0x8e>
  {
    Error_Handler();
 8003782:	f000 f9a9 	bl	8003ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8003786:	bf00      	nop
 8003788:	3720      	adds	r7, #32
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	24001048 	.word	0x24001048
 8003794:	4000e400 	.word	0x4000e400

08003798 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800379c:	bf00      	nop
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
	...

080037a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80037ae:	4b11      	ldr	r3, [pc, #68]	@ (80037f4 <MX_DMA_Init+0x4c>)
 80037b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80037b4:	4a0f      	ldr	r2, [pc, #60]	@ (80037f4 <MX_DMA_Init+0x4c>)
 80037b6:	f043 0301 	orr.w	r3, r3, #1
 80037ba:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80037be:	4b0d      	ldr	r3, [pc, #52]	@ (80037f4 <MX_DMA_Init+0x4c>)
 80037c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	607b      	str	r3, [r7, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80037cc:	2200      	movs	r2, #0
 80037ce:	2100      	movs	r1, #0
 80037d0:	200c      	movs	r0, #12
 80037d2:	f004 fa42 	bl	8007c5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80037d6:	200c      	movs	r0, #12
 80037d8:	f004 fa59 	bl	8007c8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80037dc:	2200      	movs	r2, #0
 80037de:	2100      	movs	r1, #0
 80037e0:	200d      	movs	r0, #13
 80037e2:	f004 fa3a 	bl	8007c5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80037e6:	200d      	movs	r0, #13
 80037e8:	f004 fa51 	bl	8007c8e <HAL_NVIC_EnableIRQ>

}
 80037ec:	bf00      	nop
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	58024400 	.word	0x58024400

080037f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b08e      	sub	sp, #56	@ 0x38
 80037fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003802:	2200      	movs	r2, #0
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	605a      	str	r2, [r3, #4]
 8003808:	609a      	str	r2, [r3, #8]
 800380a:	60da      	str	r2, [r3, #12]
 800380c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800380e:	4bab      	ldr	r3, [pc, #684]	@ (8003abc <MX_GPIO_Init+0x2c4>)
 8003810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003814:	4aa9      	ldr	r2, [pc, #676]	@ (8003abc <MX_GPIO_Init+0x2c4>)
 8003816:	f043 0310 	orr.w	r3, r3, #16
 800381a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800381e:	4ba7      	ldr	r3, [pc, #668]	@ (8003abc <MX_GPIO_Init+0x2c4>)
 8003820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003824:	f003 0310 	and.w	r3, r3, #16
 8003828:	623b      	str	r3, [r7, #32]
 800382a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800382c:	4ba3      	ldr	r3, [pc, #652]	@ (8003abc <MX_GPIO_Init+0x2c4>)
 800382e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003832:	4aa2      	ldr	r2, [pc, #648]	@ (8003abc <MX_GPIO_Init+0x2c4>)
 8003834:	f043 0304 	orr.w	r3, r3, #4
 8003838:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800383c:	4b9f      	ldr	r3, [pc, #636]	@ (8003abc <MX_GPIO_Init+0x2c4>)
 800383e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003842:	f003 0304 	and.w	r3, r3, #4
 8003846:	61fb      	str	r3, [r7, #28]
 8003848:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800384a:	4b9c      	ldr	r3, [pc, #624]	@ (8003abc <MX_GPIO_Init+0x2c4>)
 800384c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003850:	4a9a      	ldr	r2, [pc, #616]	@ (8003abc <MX_GPIO_Init+0x2c4>)
 8003852:	f043 0320 	orr.w	r3, r3, #32
 8003856:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800385a:	4b98      	ldr	r3, [pc, #608]	@ (8003abc <MX_GPIO_Init+0x2c4>)
 800385c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003860:	f003 0320 	and.w	r3, r3, #32
 8003864:	61bb      	str	r3, [r7, #24]
 8003866:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003868:	4b94      	ldr	r3, [pc, #592]	@ (8003abc <MX_GPIO_Init+0x2c4>)
 800386a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800386e:	4a93      	ldr	r2, [pc, #588]	@ (8003abc <MX_GPIO_Init+0x2c4>)
 8003870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003874:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003878:	4b90      	ldr	r3, [pc, #576]	@ (8003abc <MX_GPIO_Init+0x2c4>)
 800387a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800387e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003886:	4b8d      	ldr	r3, [pc, #564]	@ (8003abc <MX_GPIO_Init+0x2c4>)
 8003888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800388c:	4a8b      	ldr	r2, [pc, #556]	@ (8003abc <MX_GPIO_Init+0x2c4>)
 800388e:	f043 0301 	orr.w	r3, r3, #1
 8003892:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003896:	4b89      	ldr	r3, [pc, #548]	@ (8003abc <MX_GPIO_Init+0x2c4>)
 8003898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	613b      	str	r3, [r7, #16]
 80038a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038a4:	4b85      	ldr	r3, [pc, #532]	@ (8003abc <MX_GPIO_Init+0x2c4>)
 80038a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038aa:	4a84      	ldr	r2, [pc, #528]	@ (8003abc <MX_GPIO_Init+0x2c4>)
 80038ac:	f043 0302 	orr.w	r3, r3, #2
 80038b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80038b4:	4b81      	ldr	r3, [pc, #516]	@ (8003abc <MX_GPIO_Init+0x2c4>)
 80038b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80038c2:	4b7e      	ldr	r3, [pc, #504]	@ (8003abc <MX_GPIO_Init+0x2c4>)
 80038c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038c8:	4a7c      	ldr	r2, [pc, #496]	@ (8003abc <MX_GPIO_Init+0x2c4>)
 80038ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80038d2:	4b7a      	ldr	r3, [pc, #488]	@ (8003abc <MX_GPIO_Init+0x2c4>)
 80038d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038dc:	60bb      	str	r3, [r7, #8]
 80038de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80038e0:	4b76      	ldr	r3, [pc, #472]	@ (8003abc <MX_GPIO_Init+0x2c4>)
 80038e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038e6:	4a75      	ldr	r2, [pc, #468]	@ (8003abc <MX_GPIO_Init+0x2c4>)
 80038e8:	f043 0308 	orr.w	r3, r3, #8
 80038ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80038f0:	4b72      	ldr	r3, [pc, #456]	@ (8003abc <MX_GPIO_Init+0x2c4>)
 80038f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	607b      	str	r3, [r7, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LINE_DRIVER1_ENABLE_Pin|LINE_DRIVER2_ENABLE_Pin, GPIO_PIN_SET);
 80038fe:	2201      	movs	r2, #1
 8003900:	f640 0105 	movw	r1, #2053	@ 0x805
 8003904:	486e      	ldr	r0, [pc, #440]	@ (8003ac0 <MX_GPIO_Init+0x2c8>)
 8003906:	f007 fa73 	bl	800adf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
 800390a:	2200      	movs	r2, #0
 800390c:	2102      	movs	r1, #2
 800390e:	486d      	ldr	r0, [pc, #436]	@ (8003ac4 <MX_GPIO_Init+0x2cc>)
 8003910:	f007 fa6e 	bl	800adf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8003914:	2200      	movs	r2, #0
 8003916:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800391a:	4869      	ldr	r0, [pc, #420]	@ (8003ac0 <MX_GPIO_Init+0x2c8>)
 800391c:	f007 fa68 	bl	800adf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_3V3_SWITCH_GPIO_Port, OUT_3V3_SWITCH_Pin, GPIO_PIN_SET);
 8003920:	2201      	movs	r2, #1
 8003922:	2101      	movs	r1, #1
 8003924:	4868      	ldr	r0, [pc, #416]	@ (8003ac8 <MX_GPIO_Init+0x2d0>)
 8003926:	f007 fa63 	bl	800adf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ACTIVE_GPIO_Port, LED_ACTIVE_Pin, GPIO_PIN_SET);
 800392a:	2201      	movs	r2, #1
 800392c:	2101      	movs	r1, #1
 800392e:	4867      	ldr	r0, [pc, #412]	@ (8003acc <MX_GPIO_Init+0x2d4>)
 8003930:	f007 fa5e 	bl	800adf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8003934:	2200      	movs	r2, #0
 8003936:	2102      	movs	r1, #2
 8003938:	4864      	ldr	r0, [pc, #400]	@ (8003acc <MX_GPIO_Init+0x2d4>)
 800393a:	f007 fa59 	bl	800adf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800393e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003942:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003944:	2300      	movs	r3, #0
 8003946:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003948:	2300      	movs	r3, #0
 800394a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800394c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003950:	4619      	mov	r1, r3
 8003952:	485f      	ldr	r0, [pc, #380]	@ (8003ad0 <MX_GPIO_Init+0x2d8>)
 8003954:	f007 f88c 	bl	800aa70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LINE_DRIVER1_ENABLE_Pin LINE_DRIVER2_ENABLE_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LINE_DRIVER1_ENABLE_Pin|LINE_DRIVER2_ENABLE_Pin|LED_RED_Pin;
 8003958:	f644 0305 	movw	r3, #18437	@ 0x4805
 800395c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800395e:	2301      	movs	r3, #1
 8003960:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003962:	2300      	movs	r3, #0
 8003964:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003966:	2300      	movs	r3, #0
 8003968:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800396a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800396e:	4619      	mov	r1, r3
 8003970:	4853      	ldr	r0, [pc, #332]	@ (8003ac0 <MX_GPIO_Init+0x2c8>)
 8003972:	f007 f87d 	bl	800aa70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_500V_ENABLE_Pin */
  GPIO_InitStruct.Pin = OUT_500V_ENABLE_Pin;
 8003976:	2301      	movs	r3, #1
 8003978:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800397a:	2300      	movs	r3, #0
 800397c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397e:	2300      	movs	r3, #0
 8003980:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OUT_500V_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003982:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003986:	4619      	mov	r1, r3
 8003988:	484e      	ldr	r0, [pc, #312]	@ (8003ac4 <MX_GPIO_Init+0x2cc>)
 800398a:	f007 f871 	bl	800aa70 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_OUTPUT_Pin */
  GPIO_InitStruct.Pin = TEST_OUTPUT_Pin;
 800398e:	2302      	movs	r3, #2
 8003990:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003992:	2301      	movs	r3, #1
 8003994:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003996:	2300      	movs	r3, #0
 8003998:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800399a:	2300      	movs	r3, #0
 800399c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TEST_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 800399e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039a2:	4619      	mov	r1, r3
 80039a4:	4847      	ldr	r0, [pc, #284]	@ (8003ac4 <MX_GPIO_Init+0x2cc>)
 80039a6:	f007 f863 	bl	800aa70 <HAL_GPIO_Init>

  /*Configure GPIO pin : TURN_PLASMA_ON_Pin */
  GPIO_InitStruct.Pin = TURN_PLASMA_ON_Pin;
 80039aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039b0:	2300      	movs	r3, #0
 80039b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b4:	2300      	movs	r3, #0
 80039b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TURN_PLASMA_ON_GPIO_Port, &GPIO_InitStruct);
 80039b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039bc:	4619      	mov	r1, r3
 80039be:	4843      	ldr	r0, [pc, #268]	@ (8003acc <MX_GPIO_Init+0x2d4>)
 80039c0:	f007 f856 	bl	800aa70 <HAL_GPIO_Init>

  /*Configure GPIO pin : INP_COMP_IRQ_Pin */
  GPIO_InitStruct.Pin = INP_COMP_IRQ_Pin;
 80039c4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80039c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80039ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80039ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d0:	2300      	movs	r3, #0
 80039d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(INP_COMP_IRQ_GPIO_Port, &GPIO_InitStruct);
 80039d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039d8:	4619      	mov	r1, r3
 80039da:	483c      	ldr	r0, [pc, #240]	@ (8003acc <MX_GPIO_Init+0x2d4>)
 80039dc:	f007 f848 	bl	800aa70 <HAL_GPIO_Init>

  /*Configure GPIO pin : POWER_OFF_IRQ_Pin */
  GPIO_InitStruct.Pin = POWER_OFF_IRQ_Pin;
 80039e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80039e6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80039ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ec:	2300      	movs	r3, #0
 80039ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(POWER_OFF_IRQ_GPIO_Port, &GPIO_InitStruct);
 80039f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039f4:	4619      	mov	r1, r3
 80039f6:	4835      	ldr	r0, [pc, #212]	@ (8003acc <MX_GPIO_Init+0x2d4>)
 80039f8:	f007 f83a 	bl	800aa70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80039fc:	2380      	movs	r3, #128	@ 0x80
 80039fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a00:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003a04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a06:	2300      	movs	r3, #0
 8003a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8003a0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a0e:	4619      	mov	r1, r3
 8003a10:	482c      	ldr	r0, [pc, #176]	@ (8003ac4 <MX_GPIO_Init+0x2cc>)
 8003a12:	f007 f82d 	bl	800aa70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8003a16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003a24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a28:	4619      	mov	r1, r3
 8003a2a:	482a      	ldr	r0, [pc, #168]	@ (8003ad4 <MX_GPIO_Init+0x2dc>)
 8003a2c:	f007 f820 	bl	800aa70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8003a30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a36:	2302      	movs	r3, #2
 8003a38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8003a42:	230a      	movs	r3, #10
 8003a44:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8003a46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4821      	ldr	r0, [pc, #132]	@ (8003ad4 <MX_GPIO_Init+0x2dc>)
 8003a4e:	f007 f80f 	bl	800aa70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_3V3_SWITCH_Pin */
  GPIO_InitStruct.Pin = OUT_3V3_SWITCH_Pin;
 8003a52:	2301      	movs	r3, #1
 8003a54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a56:	2301      	movs	r3, #1
 8003a58:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(OUT_3V3_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8003a62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a66:	4619      	mov	r1, r3
 8003a68:	4817      	ldr	r0, [pc, #92]	@ (8003ac8 <MX_GPIO_Init+0x2d0>)
 8003a6a:	f007 f801 	bl	800aa70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_15V_ENABLE_Pin */
  GPIO_InitStruct.Pin = OUT_15V_ENABLE_Pin;
 8003a6e:	2302      	movs	r3, #2
 8003a70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a72:	2300      	movs	r3, #0
 8003a74:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a76:	2300      	movs	r3, #0
 8003a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OUT_15V_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003a7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a7e:	4619      	mov	r1, r3
 8003a80:	4811      	ldr	r0, [pc, #68]	@ (8003ac8 <MX_GPIO_Init+0x2d0>)
 8003a82:	f006 fff5 	bl	800aa70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ACTIVE_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_ACTIVE_Pin|LED_YELLOW_Pin;
 8003a86:	2303      	movs	r3, #3
 8003a88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a92:	2300      	movs	r3, #0
 8003a94:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	480b      	ldr	r0, [pc, #44]	@ (8003acc <MX_GPIO_Init+0x2d4>)
 8003a9e:	f006 ffe7 	bl	800aa70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	2028      	movs	r0, #40	@ 0x28
 8003aa8:	f004 f8d7 	bl	8007c5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003aac:	2028      	movs	r0, #40	@ 0x28
 8003aae:	f004 f8ee 	bl	8007c8e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003ab2:	bf00      	nop
 8003ab4:	3738      	adds	r7, #56	@ 0x38
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	58024400 	.word	0x58024400
 8003ac0:	58020400 	.word	0x58020400
 8003ac4:	58021800 	.word	0x58021800
 8003ac8:	58020c00 	.word	0x58020c00
 8003acc:	58021000 	.word	0x58021000
 8003ad0:	58020800 	.word	0x58020800
 8003ad4:	58020000 	.word	0x58020000

08003ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003adc:	b672      	cpsid	i
}
 8003ade:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ae0:	bf00      	nop
 8003ae2:	e7fd      	b.n	8003ae0 <Error_Handler+0x8>

08003ae4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aea:	4b0a      	ldr	r3, [pc, #40]	@ (8003b14 <HAL_MspInit+0x30>)
 8003aec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003af0:	4a08      	ldr	r2, [pc, #32]	@ (8003b14 <HAL_MspInit+0x30>)
 8003af2:	f043 0302 	orr.w	r3, r3, #2
 8003af6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003afa:	4b06      	ldr	r3, [pc, #24]	@ (8003b14 <HAL_MspInit+0x30>)
 8003afc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	607b      	str	r3, [r7, #4]
 8003b06:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	58024400 	.word	0x58024400

08003b18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b090      	sub	sp, #64	@ 0x40
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	605a      	str	r2, [r3, #4]
 8003b2a:	609a      	str	r2, [r3, #8]
 8003b2c:	60da      	str	r2, [r3, #12]
 8003b2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4aaa      	ldr	r2, [pc, #680]	@ (8003de0 <HAL_ADC_MspInit+0x2c8>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d16b      	bne.n	8003c12 <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003b3a:	4baa      	ldr	r3, [pc, #680]	@ (8003de4 <HAL_ADC_MspInit+0x2cc>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	4aa8      	ldr	r2, [pc, #672]	@ (8003de4 <HAL_ADC_MspInit+0x2cc>)
 8003b42:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003b44:	4ba7      	ldr	r3, [pc, #668]	@ (8003de4 <HAL_ADC_MspInit+0x2cc>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d10e      	bne.n	8003b6a <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003b4c:	4ba6      	ldr	r3, [pc, #664]	@ (8003de8 <HAL_ADC_MspInit+0x2d0>)
 8003b4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003b52:	4aa5      	ldr	r2, [pc, #660]	@ (8003de8 <HAL_ADC_MspInit+0x2d0>)
 8003b54:	f043 0320 	orr.w	r3, r3, #32
 8003b58:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003b5c:	4ba2      	ldr	r3, [pc, #648]	@ (8003de8 <HAL_ADC_MspInit+0x2d0>)
 8003b5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b6a:	4b9f      	ldr	r3, [pc, #636]	@ (8003de8 <HAL_ADC_MspInit+0x2d0>)
 8003b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b70:	4a9d      	ldr	r2, [pc, #628]	@ (8003de8 <HAL_ADC_MspInit+0x2d0>)
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003b7a:	4b9b      	ldr	r3, [pc, #620]	@ (8003de8 <HAL_ADC_MspInit+0x2d0>)
 8003b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    PA3     ------> ADC1_INP15
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8003b88:	2319      	movs	r3, #25
 8003b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b90:	2300      	movs	r3, #0
 8003b92:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4894      	ldr	r0, [pc, #592]	@ (8003dec <HAL_ADC_MspInit+0x2d4>)
 8003b9c:	f006 ff68 	bl	800aa70 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream2;
 8003ba0:	4b93      	ldr	r3, [pc, #588]	@ (8003df0 <HAL_ADC_MspInit+0x2d8>)
 8003ba2:	4a94      	ldr	r2, [pc, #592]	@ (8003df4 <HAL_ADC_MspInit+0x2dc>)
 8003ba4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003ba6:	4b92      	ldr	r3, [pc, #584]	@ (8003df0 <HAL_ADC_MspInit+0x2d8>)
 8003ba8:	2209      	movs	r2, #9
 8003baa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003bac:	4b90      	ldr	r3, [pc, #576]	@ (8003df0 <HAL_ADC_MspInit+0x2d8>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bb2:	4b8f      	ldr	r3, [pc, #572]	@ (8003df0 <HAL_ADC_MspInit+0x2d8>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003bb8:	4b8d      	ldr	r3, [pc, #564]	@ (8003df0 <HAL_ADC_MspInit+0x2d8>)
 8003bba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003bbe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003bc0:	4b8b      	ldr	r3, [pc, #556]	@ (8003df0 <HAL_ADC_MspInit+0x2d8>)
 8003bc2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003bc6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003bc8:	4b89      	ldr	r3, [pc, #548]	@ (8003df0 <HAL_ADC_MspInit+0x2d8>)
 8003bca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003bce:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003bd0:	4b87      	ldr	r3, [pc, #540]	@ (8003df0 <HAL_ADC_MspInit+0x2d8>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8003bd6:	4b86      	ldr	r3, [pc, #536]	@ (8003df0 <HAL_ADC_MspInit+0x2d8>)
 8003bd8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003bdc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003bde:	4b84      	ldr	r3, [pc, #528]	@ (8003df0 <HAL_ADC_MspInit+0x2d8>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003be4:	4882      	ldr	r0, [pc, #520]	@ (8003df0 <HAL_ADC_MspInit+0x2d8>)
 8003be6:	f004 f86d 	bl	8007cc4 <HAL_DMA_Init>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <HAL_ADC_MspInit+0xdc>
    {
      Error_Handler();
 8003bf0:	f7ff ff72 	bl	8003ad8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a7e      	ldr	r2, [pc, #504]	@ (8003df0 <HAL_ADC_MspInit+0x2d8>)
 8003bf8:	659a      	str	r2, [r3, #88]	@ 0x58
 8003bfa:	4a7d      	ldr	r2, [pc, #500]	@ (8003df0 <HAL_ADC_MspInit+0x2d8>)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003c00:	2200      	movs	r2, #0
 8003c02:	2100      	movs	r1, #0
 8003c04:	2012      	movs	r0, #18
 8003c06:	f004 f828 	bl	8007c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003c0a:	2012      	movs	r0, #18
 8003c0c:	f004 f83f 	bl	8007c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003c10:	e0e2      	b.n	8003dd8 <HAL_ADC_MspInit+0x2c0>
  else if(hadc->Instance==ADC2)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a78      	ldr	r2, [pc, #480]	@ (8003df8 <HAL_ADC_MspInit+0x2e0>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d156      	bne.n	8003cca <HAL_ADC_MspInit+0x1b2>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003c1c:	4b71      	ldr	r3, [pc, #452]	@ (8003de4 <HAL_ADC_MspInit+0x2cc>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	3301      	adds	r3, #1
 8003c22:	4a70      	ldr	r2, [pc, #448]	@ (8003de4 <HAL_ADC_MspInit+0x2cc>)
 8003c24:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003c26:	4b6f      	ldr	r3, [pc, #444]	@ (8003de4 <HAL_ADC_MspInit+0x2cc>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d10e      	bne.n	8003c4c <HAL_ADC_MspInit+0x134>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003c2e:	4b6e      	ldr	r3, [pc, #440]	@ (8003de8 <HAL_ADC_MspInit+0x2d0>)
 8003c30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003c34:	4a6c      	ldr	r2, [pc, #432]	@ (8003de8 <HAL_ADC_MspInit+0x2d0>)
 8003c36:	f043 0320 	orr.w	r3, r3, #32
 8003c3a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003c3e:	4b6a      	ldr	r3, [pc, #424]	@ (8003de8 <HAL_ADC_MspInit+0x2d0>)
 8003c40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003c44:	f003 0320 	and.w	r3, r3, #32
 8003c48:	623b      	str	r3, [r7, #32]
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c4c:	4b66      	ldr	r3, [pc, #408]	@ (8003de8 <HAL_ADC_MspInit+0x2d0>)
 8003c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c52:	4a65      	ldr	r2, [pc, #404]	@ (8003de8 <HAL_ADC_MspInit+0x2d0>)
 8003c54:	f043 0301 	orr.w	r3, r3, #1
 8003c58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c5c:	4b62      	ldr	r3, [pc, #392]	@ (8003de8 <HAL_ADC_MspInit+0x2d0>)
 8003c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	61fb      	str	r3, [r7, #28]
 8003c68:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c6a:	4b5f      	ldr	r3, [pc, #380]	@ (8003de8 <HAL_ADC_MspInit+0x2d0>)
 8003c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c70:	4a5d      	ldr	r2, [pc, #372]	@ (8003de8 <HAL_ADC_MspInit+0x2d0>)
 8003c72:	f043 0302 	orr.w	r3, r3, #2
 8003c76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c7a:	4b5b      	ldr	r3, [pc, #364]	@ (8003de8 <HAL_ADC_MspInit+0x2d0>)
 8003c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	61bb      	str	r3, [r7, #24]
 8003c86:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003c88:	2360      	movs	r3, #96	@ 0x60
 8003c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c90:	2300      	movs	r3, #0
 8003c92:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4854      	ldr	r0, [pc, #336]	@ (8003dec <HAL_ADC_MspInit+0x2d4>)
 8003c9c:	f006 fee8 	bl	800aa70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	4852      	ldr	r0, [pc, #328]	@ (8003dfc <HAL_ADC_MspInit+0x2e4>)
 8003cb4:	f006 fedc 	bl	800aa70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2100      	movs	r1, #0
 8003cbc:	2012      	movs	r0, #18
 8003cbe:	f003 ffcc 	bl	8007c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003cc2:	2012      	movs	r0, #18
 8003cc4:	f003 ffe3 	bl	8007c8e <HAL_NVIC_EnableIRQ>
}
 8003cc8:	e086      	b.n	8003dd8 <HAL_ADC_MspInit+0x2c0>
  else if(hadc->Instance==ADC3)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a4c      	ldr	r2, [pc, #304]	@ (8003e00 <HAL_ADC_MspInit+0x2e8>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	f040 8081 	bne.w	8003dd8 <HAL_ADC_MspInit+0x2c0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003cd6:	4b44      	ldr	r3, [pc, #272]	@ (8003de8 <HAL_ADC_MspInit+0x2d0>)
 8003cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cdc:	4a42      	ldr	r2, [pc, #264]	@ (8003de8 <HAL_ADC_MspInit+0x2d0>)
 8003cde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ce2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003ce6:	4b40      	ldr	r3, [pc, #256]	@ (8003de8 <HAL_ADC_MspInit+0x2d0>)
 8003ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cf0:	617b      	str	r3, [r7, #20]
 8003cf2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003cf4:	4b3c      	ldr	r3, [pc, #240]	@ (8003de8 <HAL_ADC_MspInit+0x2d0>)
 8003cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cfa:	4a3b      	ldr	r2, [pc, #236]	@ (8003de8 <HAL_ADC_MspInit+0x2d0>)
 8003cfc:	f043 0320 	orr.w	r3, r3, #32
 8003d00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003d04:	4b38      	ldr	r3, [pc, #224]	@ (8003de8 <HAL_ADC_MspInit+0x2d0>)
 8003d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	613b      	str	r3, [r7, #16]
 8003d10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d12:	4b35      	ldr	r3, [pc, #212]	@ (8003de8 <HAL_ADC_MspInit+0x2d0>)
 8003d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d18:	4a33      	ldr	r2, [pc, #204]	@ (8003de8 <HAL_ADC_MspInit+0x2d0>)
 8003d1a:	f043 0304 	orr.w	r3, r3, #4
 8003d1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003d22:	4b31      	ldr	r3, [pc, #196]	@ (8003de8 <HAL_ADC_MspInit+0x2d0>)
 8003d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	60fb      	str	r3, [r7, #12]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8003d30:	f44f 63ff 	mov.w	r3, #2040	@ 0x7f8
 8003d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d36:	2303      	movs	r3, #3
 8003d38:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003d42:	4619      	mov	r1, r3
 8003d44:	482f      	ldr	r0, [pc, #188]	@ (8003e04 <HAL_ADC_MspInit+0x2ec>)
 8003d46:	f006 fe93 	bl	800aa70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d52:	2300      	movs	r3, #0
 8003d54:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	482a      	ldr	r0, [pc, #168]	@ (8003e08 <HAL_ADC_MspInit+0x2f0>)
 8003d5e:	f006 fe87 	bl	800aa70 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8003d62:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8003d66:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8003d6a:	f000 fe43 	bl	80049f4 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8003d6e:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8003d72:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8003d76:	f000 fe3d 	bl	80049f4 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8003d7a:	4b24      	ldr	r3, [pc, #144]	@ (8003e0c <HAL_ADC_MspInit+0x2f4>)
 8003d7c:	4a24      	ldr	r2, [pc, #144]	@ (8003e10 <HAL_ADC_MspInit+0x2f8>)
 8003d7e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8003d80:	4b22      	ldr	r3, [pc, #136]	@ (8003e0c <HAL_ADC_MspInit+0x2f4>)
 8003d82:	2273      	movs	r2, #115	@ 0x73
 8003d84:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d86:	4b21      	ldr	r3, [pc, #132]	@ (8003e0c <HAL_ADC_MspInit+0x2f4>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d8c:	4b1f      	ldr	r3, [pc, #124]	@ (8003e0c <HAL_ADC_MspInit+0x2f4>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003d92:	4b1e      	ldr	r3, [pc, #120]	@ (8003e0c <HAL_ADC_MspInit+0x2f4>)
 8003d94:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d98:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8003e0c <HAL_ADC_MspInit+0x2f4>)
 8003d9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003da0:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003da2:	4b1a      	ldr	r3, [pc, #104]	@ (8003e0c <HAL_ADC_MspInit+0x2f4>)
 8003da4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003da8:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8003daa:	4b18      	ldr	r3, [pc, #96]	@ (8003e0c <HAL_ADC_MspInit+0x2f4>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003db0:	4b16      	ldr	r3, [pc, #88]	@ (8003e0c <HAL_ADC_MspInit+0x2f4>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003db6:	4b15      	ldr	r3, [pc, #84]	@ (8003e0c <HAL_ADC_MspInit+0x2f4>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8003dbc:	4813      	ldr	r0, [pc, #76]	@ (8003e0c <HAL_ADC_MspInit+0x2f4>)
 8003dbe:	f003 ff81 	bl	8007cc4 <HAL_DMA_Init>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <HAL_ADC_MspInit+0x2b4>
      Error_Handler();
 8003dc8:	f7ff fe86 	bl	8003ad8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a0f      	ldr	r2, [pc, #60]	@ (8003e0c <HAL_ADC_MspInit+0x2f4>)
 8003dd0:	659a      	str	r2, [r3, #88]	@ 0x58
 8003dd2:	4a0e      	ldr	r2, [pc, #56]	@ (8003e0c <HAL_ADC_MspInit+0x2f4>)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003dd8:	bf00      	nop
 8003dda:	3740      	adds	r7, #64	@ 0x40
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	40022000 	.word	0x40022000
 8003de4:	2400109c 	.word	0x2400109c
 8003de8:	58024400 	.word	0x58024400
 8003dec:	58020000 	.word	0x58020000
 8003df0:	24000bd8 	.word	0x24000bd8
 8003df4:	40020040 	.word	0x40020040
 8003df8:	40022100 	.word	0x40022100
 8003dfc:	58020400 	.word	0x58020400
 8003e00:	58026000 	.word	0x58026000
 8003e04:	58021400 	.word	0x58021400
 8003e08:	58020800 	.word	0x58020800
 8003e0c:	24000c50 	.word	0x24000c50
 8003e10:	40020028 	.word	0x40020028

08003e14 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b08a      	sub	sp, #40	@ 0x28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e1c:	f107 0314 	add.w	r3, r7, #20
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	605a      	str	r2, [r3, #4]
 8003e26:	609a      	str	r2, [r3, #8]
 8003e28:	60da      	str	r2, [r3, #12]
 8003e2a:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a21      	ldr	r2, [pc, #132]	@ (8003eb8 <HAL_COMP_MspInit+0xa4>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d13b      	bne.n	8003eae <HAL_COMP_MspInit+0x9a>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 8003e36:	4b21      	ldr	r3, [pc, #132]	@ (8003ebc <HAL_COMP_MspInit+0xa8>)
 8003e38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003e3c:	4a1f      	ldr	r2, [pc, #124]	@ (8003ebc <HAL_COMP_MspInit+0xa8>)
 8003e3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e42:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003e46:	4b1d      	ldr	r3, [pc, #116]	@ (8003ebc <HAL_COMP_MspInit+0xa8>)
 8003e48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003e4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e50:	613b      	str	r3, [r7, #16]
 8003e52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e54:	4b19      	ldr	r3, [pc, #100]	@ (8003ebc <HAL_COMP_MspInit+0xa8>)
 8003e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e5a:	4a18      	ldr	r2, [pc, #96]	@ (8003ebc <HAL_COMP_MspInit+0xa8>)
 8003e5c:	f043 0310 	orr.w	r3, r3, #16
 8003e60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003e64:	4b15      	ldr	r3, [pc, #84]	@ (8003ebc <HAL_COMP_MspInit+0xa8>)
 8003e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e6a:	f003 0310 	and.w	r3, r3, #16
 8003e6e:	60fb      	str	r3, [r7, #12]
 8003e70:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PE7     ------> COMP2_INM
    PE11     ------> COMP2_INP
    PE13     ------> COMP2_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_11;
 8003e72:	f44f 6308 	mov.w	r3, #2176	@ 0x880
 8003e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e80:	f107 0314 	add.w	r3, r7, #20
 8003e84:	4619      	mov	r1, r3
 8003e86:	480e      	ldr	r0, [pc, #56]	@ (8003ec0 <HAL_COMP_MspInit+0xac>)
 8003e88:	f006 fdf2 	bl	800aa70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003e8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e92:	2302      	movs	r3, #2
 8003e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e96:	2300      	movs	r3, #0
 8003e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_COMP2;
 8003e9e:	230d      	movs	r3, #13
 8003ea0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ea2:	f107 0314 	add.w	r3, r7, #20
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	4805      	ldr	r0, [pc, #20]	@ (8003ec0 <HAL_COMP_MspInit+0xac>)
 8003eaa:	f006 fde1 	bl	800aa70 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8003eae:	bf00      	nop
 8003eb0:	3728      	adds	r7, #40	@ 0x28
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	58003810 	.word	0x58003810
 8003ebc:	58024400 	.word	0x58024400
 8003ec0:	58021000 	.word	0x58021000

08003ec4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b08e      	sub	sp, #56	@ 0x38
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ecc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	605a      	str	r2, [r3, #4]
 8003ed6:	609a      	str	r2, [r3, #8]
 8003ed8:	60da      	str	r2, [r3, #12]
 8003eda:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a59      	ldr	r2, [pc, #356]	@ (8004048 <HAL_ETH_MspInit+0x184>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	f040 80ab 	bne.w	800403e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8003ee8:	4b58      	ldr	r3, [pc, #352]	@ (800404c <HAL_ETH_MspInit+0x188>)
 8003eea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003eee:	4a57      	ldr	r2, [pc, #348]	@ (800404c <HAL_ETH_MspInit+0x188>)
 8003ef0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ef4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003ef8:	4b54      	ldr	r3, [pc, #336]	@ (800404c <HAL_ETH_MspInit+0x188>)
 8003efa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003efe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f02:	623b      	str	r3, [r7, #32]
 8003f04:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8003f06:	4b51      	ldr	r3, [pc, #324]	@ (800404c <HAL_ETH_MspInit+0x188>)
 8003f08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003f0c:	4a4f      	ldr	r2, [pc, #316]	@ (800404c <HAL_ETH_MspInit+0x188>)
 8003f0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f12:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003f16:	4b4d      	ldr	r3, [pc, #308]	@ (800404c <HAL_ETH_MspInit+0x188>)
 8003f18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003f1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f20:	61fb      	str	r3, [r7, #28]
 8003f22:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8003f24:	4b49      	ldr	r3, [pc, #292]	@ (800404c <HAL_ETH_MspInit+0x188>)
 8003f26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003f2a:	4a48      	ldr	r2, [pc, #288]	@ (800404c <HAL_ETH_MspInit+0x188>)
 8003f2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f30:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003f34:	4b45      	ldr	r3, [pc, #276]	@ (800404c <HAL_ETH_MspInit+0x188>)
 8003f36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f3e:	61bb      	str	r3, [r7, #24]
 8003f40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f42:	4b42      	ldr	r3, [pc, #264]	@ (800404c <HAL_ETH_MspInit+0x188>)
 8003f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f48:	4a40      	ldr	r2, [pc, #256]	@ (800404c <HAL_ETH_MspInit+0x188>)
 8003f4a:	f043 0304 	orr.w	r3, r3, #4
 8003f4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003f52:	4b3e      	ldr	r3, [pc, #248]	@ (800404c <HAL_ETH_MspInit+0x188>)
 8003f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f58:	f003 0304 	and.w	r3, r3, #4
 8003f5c:	617b      	str	r3, [r7, #20]
 8003f5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f60:	4b3a      	ldr	r3, [pc, #232]	@ (800404c <HAL_ETH_MspInit+0x188>)
 8003f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f66:	4a39      	ldr	r2, [pc, #228]	@ (800404c <HAL_ETH_MspInit+0x188>)
 8003f68:	f043 0301 	orr.w	r3, r3, #1
 8003f6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003f70:	4b36      	ldr	r3, [pc, #216]	@ (800404c <HAL_ETH_MspInit+0x188>)
 8003f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	613b      	str	r3, [r7, #16]
 8003f7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f7e:	4b33      	ldr	r3, [pc, #204]	@ (800404c <HAL_ETH_MspInit+0x188>)
 8003f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f84:	4a31      	ldr	r2, [pc, #196]	@ (800404c <HAL_ETH_MspInit+0x188>)
 8003f86:	f043 0302 	orr.w	r3, r3, #2
 8003f8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003f8e:	4b2f      	ldr	r3, [pc, #188]	@ (800404c <HAL_ETH_MspInit+0x188>)
 8003f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800404c <HAL_ETH_MspInit+0x188>)
 8003f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003fa2:	4a2a      	ldr	r2, [pc, #168]	@ (800404c <HAL_ETH_MspInit+0x188>)
 8003fa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fa8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003fac:	4b27      	ldr	r3, [pc, #156]	@ (800404c <HAL_ETH_MspInit+0x188>)
 8003fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003fb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb6:	60bb      	str	r3, [r7, #8]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003fba:	2332      	movs	r3, #50	@ 0x32
 8003fbc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003fca:	230b      	movs	r3, #11
 8003fcc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	481e      	ldr	r0, [pc, #120]	@ (8004050 <HAL_ETH_MspInit+0x18c>)
 8003fd6:	f006 fd4b 	bl	800aa70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003fda:	2386      	movs	r3, #134	@ 0x86
 8003fdc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fde:	2302      	movs	r3, #2
 8003fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003fea:	230b      	movs	r3, #11
 8003fec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4817      	ldr	r0, [pc, #92]	@ (8004054 <HAL_ETH_MspInit+0x190>)
 8003ff6:	f006 fd3b 	bl	800aa70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003ffa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ffe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004000:	2302      	movs	r3, #2
 8004002:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004004:	2300      	movs	r3, #0
 8004006:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004008:	2300      	movs	r3, #0
 800400a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800400c:	230b      	movs	r3, #11
 800400e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004010:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004014:	4619      	mov	r1, r3
 8004016:	4810      	ldr	r0, [pc, #64]	@ (8004058 <HAL_ETH_MspInit+0x194>)
 8004018:	f006 fd2a 	bl	800aa70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800401c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8004020:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004022:	2302      	movs	r3, #2
 8004024:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004026:	2300      	movs	r3, #0
 8004028:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800402a:	2300      	movs	r3, #0
 800402c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800402e:	230b      	movs	r3, #11
 8004030:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004032:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004036:	4619      	mov	r1, r3
 8004038:	4808      	ldr	r0, [pc, #32]	@ (800405c <HAL_ETH_MspInit+0x198>)
 800403a:	f006 fd19 	bl	800aa70 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800403e:	bf00      	nop
 8004040:	3738      	adds	r7, #56	@ 0x38
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	40028000 	.word	0x40028000
 800404c:	58024400 	.word	0x58024400
 8004050:	58020800 	.word	0x58020800
 8004054:	58020000 	.word	0x58020000
 8004058:	58020400 	.word	0x58020400
 800405c:	58021800 	.word	0x58021800

08004060 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b0ba      	sub	sp, #232	@ 0xe8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004068:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	605a      	str	r2, [r3, #4]
 8004072:	609a      	str	r2, [r3, #8]
 8004074:	60da      	str	r2, [r3, #12]
 8004076:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004078:	f107 0318 	add.w	r3, r7, #24
 800407c:	22b8      	movs	r2, #184	@ 0xb8
 800407e:	2100      	movs	r1, #0
 8004080:	4618      	mov	r0, r3
 8004082:	f00e f9c6 	bl	8012412 <memset>
  if(huart->Instance==LPUART1)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a4d      	ldr	r2, [pc, #308]	@ (80041c0 <HAL_UART_MspInit+0x160>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d146      	bne.n	800411e <HAL_UART_MspInit+0xbe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004090:	f04f 0204 	mov.w	r2, #4
 8004094:	f04f 0300 	mov.w	r3, #0
 8004098:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 800409c:	2300      	movs	r3, #0
 800409e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040a2:	f107 0318 	add.w	r3, r7, #24
 80040a6:	4618      	mov	r0, r3
 80040a8:	f007 fe76 	bl	800bd98 <HAL_RCCEx_PeriphCLKConfig>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80040b2:	f7ff fd11 	bl	8003ad8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80040b6:	4b43      	ldr	r3, [pc, #268]	@ (80041c4 <HAL_UART_MspInit+0x164>)
 80040b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80040bc:	4a41      	ldr	r2, [pc, #260]	@ (80041c4 <HAL_UART_MspInit+0x164>)
 80040be:	f043 0308 	orr.w	r3, r3, #8
 80040c2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80040c6:	4b3f      	ldr	r3, [pc, #252]	@ (80041c4 <HAL_UART_MspInit+0x164>)
 80040c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80040cc:	f003 0308 	and.w	r3, r3, #8
 80040d0:	617b      	str	r3, [r7, #20]
 80040d2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040d4:	4b3b      	ldr	r3, [pc, #236]	@ (80041c4 <HAL_UART_MspInit+0x164>)
 80040d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040da:	4a3a      	ldr	r2, [pc, #232]	@ (80041c4 <HAL_UART_MspInit+0x164>)
 80040dc:	f043 0302 	orr.w	r3, r3, #2
 80040e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80040e4:	4b37      	ldr	r3, [pc, #220]	@ (80041c4 <HAL_UART_MspInit+0x164>)
 80040e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80040f2:	23c0      	movs	r3, #192	@ 0xc0
 80040f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f8:	2302      	movs	r3, #2
 80040fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fe:	2300      	movs	r3, #0
 8004100:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004104:	2300      	movs	r3, #0
 8004106:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART;
 800410a:	2308      	movs	r3, #8
 800410c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004110:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004114:	4619      	mov	r1, r3
 8004116:	482c      	ldr	r0, [pc, #176]	@ (80041c8 <HAL_UART_MspInit+0x168>)
 8004118:	f006 fcaa 	bl	800aa70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800411c:	e04b      	b.n	80041b6 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART3)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a2a      	ldr	r2, [pc, #168]	@ (80041cc <HAL_UART_MspInit+0x16c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d146      	bne.n	80041b6 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004128:	f04f 0202 	mov.w	r2, #2
 800412c:	f04f 0300 	mov.w	r3, #0
 8004130:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004134:	2300      	movs	r3, #0
 8004136:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800413a:	f107 0318 	add.w	r3, r7, #24
 800413e:	4618      	mov	r0, r3
 8004140:	f007 fe2a 	bl	800bd98 <HAL_RCCEx_PeriphCLKConfig>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <HAL_UART_MspInit+0xee>
      Error_Handler();
 800414a:	f7ff fcc5 	bl	8003ad8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800414e:	4b1d      	ldr	r3, [pc, #116]	@ (80041c4 <HAL_UART_MspInit+0x164>)
 8004150:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004154:	4a1b      	ldr	r2, [pc, #108]	@ (80041c4 <HAL_UART_MspInit+0x164>)
 8004156:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800415a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800415e:	4b19      	ldr	r3, [pc, #100]	@ (80041c4 <HAL_UART_MspInit+0x164>)
 8004160:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004164:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800416c:	4b15      	ldr	r3, [pc, #84]	@ (80041c4 <HAL_UART_MspInit+0x164>)
 800416e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004172:	4a14      	ldr	r2, [pc, #80]	@ (80041c4 <HAL_UART_MspInit+0x164>)
 8004174:	f043 0308 	orr.w	r3, r3, #8
 8004178:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800417c:	4b11      	ldr	r3, [pc, #68]	@ (80041c4 <HAL_UART_MspInit+0x164>)
 800417e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004182:	f003 0308 	and.w	r3, r3, #8
 8004186:	60bb      	str	r3, [r7, #8]
 8004188:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800418a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800418e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004192:	2302      	movs	r3, #2
 8004194:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004198:	2300      	movs	r3, #0
 800419a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800419e:	2300      	movs	r3, #0
 80041a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80041a4:	2307      	movs	r3, #7
 80041a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041aa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80041ae:	4619      	mov	r1, r3
 80041b0:	4807      	ldr	r0, [pc, #28]	@ (80041d0 <HAL_UART_MspInit+0x170>)
 80041b2:	f006 fc5d 	bl	800aa70 <HAL_GPIO_Init>
}
 80041b6:	bf00      	nop
 80041b8:	37e8      	adds	r7, #232	@ 0xe8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	58000c00 	.word	0x58000c00
 80041c4:	58024400 	.word	0x58024400
 80041c8:	58020400 	.word	0x58020400
 80041cc:	40004800 	.word	0x40004800
 80041d0:	58020c00 	.word	0x58020c00

080041d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a20      	ldr	r2, [pc, #128]	@ (8004264 <HAL_TIM_PWM_MspInit+0x90>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d10f      	bne.n	8004206 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80041e6:	4b20      	ldr	r3, [pc, #128]	@ (8004268 <HAL_TIM_PWM_MspInit+0x94>)
 80041e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041ec:	4a1e      	ldr	r2, [pc, #120]	@ (8004268 <HAL_TIM_PWM_MspInit+0x94>)
 80041ee:	f043 0301 	orr.w	r3, r3, #1
 80041f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80041f6:	4b1c      	ldr	r3, [pc, #112]	@ (8004268 <HAL_TIM_PWM_MspInit+0x94>)
 80041f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	617b      	str	r3, [r7, #20]
 8004202:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004204:	e028      	b.n	8004258 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM2)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800420e:	d10f      	bne.n	8004230 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004210:	4b15      	ldr	r3, [pc, #84]	@ (8004268 <HAL_TIM_PWM_MspInit+0x94>)
 8004212:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004216:	4a14      	ldr	r2, [pc, #80]	@ (8004268 <HAL_TIM_PWM_MspInit+0x94>)
 8004218:	f043 0301 	orr.w	r3, r3, #1
 800421c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004220:	4b11      	ldr	r3, [pc, #68]	@ (8004268 <HAL_TIM_PWM_MspInit+0x94>)
 8004222:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	613b      	str	r3, [r7, #16]
 800422c:	693b      	ldr	r3, [r7, #16]
}
 800422e:	e013      	b.n	8004258 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM4)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a0d      	ldr	r2, [pc, #52]	@ (800426c <HAL_TIM_PWM_MspInit+0x98>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d10e      	bne.n	8004258 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800423a:	4b0b      	ldr	r3, [pc, #44]	@ (8004268 <HAL_TIM_PWM_MspInit+0x94>)
 800423c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004240:	4a09      	ldr	r2, [pc, #36]	@ (8004268 <HAL_TIM_PWM_MspInit+0x94>)
 8004242:	f043 0304 	orr.w	r3, r3, #4
 8004246:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800424a:	4b07      	ldr	r3, [pc, #28]	@ (8004268 <HAL_TIM_PWM_MspInit+0x94>)
 800424c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	68fb      	ldr	r3, [r7, #12]
}
 8004258:	bf00      	nop
 800425a:	371c      	adds	r7, #28
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	40010000 	.word	0x40010000
 8004268:	58024400 	.word	0x58024400
 800426c:	40000800 	.word	0x40000800

08004270 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08c      	sub	sp, #48	@ 0x30
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004278:	f107 031c 	add.w	r3, r7, #28
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	605a      	str	r2, [r3, #4]
 8004282:	609a      	str	r2, [r3, #8]
 8004284:	60da      	str	r2, [r3, #12]
 8004286:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a34      	ldr	r2, [pc, #208]	@ (8004360 <HAL_TIM_IC_MspInit+0xf0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d12e      	bne.n	80042f0 <HAL_TIM_IC_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004292:	4b34      	ldr	r3, [pc, #208]	@ (8004364 <HAL_TIM_IC_MspInit+0xf4>)
 8004294:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004298:	4a32      	ldr	r2, [pc, #200]	@ (8004364 <HAL_TIM_IC_MspInit+0xf4>)
 800429a:	f043 0302 	orr.w	r3, r3, #2
 800429e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80042a2:	4b30      	ldr	r3, [pc, #192]	@ (8004364 <HAL_TIM_IC_MspInit+0xf4>)
 80042a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	61bb      	str	r3, [r7, #24]
 80042ae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042b0:	4b2c      	ldr	r3, [pc, #176]	@ (8004364 <HAL_TIM_IC_MspInit+0xf4>)
 80042b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042b6:	4a2b      	ldr	r2, [pc, #172]	@ (8004364 <HAL_TIM_IC_MspInit+0xf4>)
 80042b8:	f043 0304 	orr.w	r3, r3, #4
 80042bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80042c0:	4b28      	ldr	r3, [pc, #160]	@ (8004364 <HAL_TIM_IC_MspInit+0xf4>)
 80042c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042c6:	f003 0304 	and.w	r3, r3, #4
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80042ce:	2340      	movs	r3, #64	@ 0x40
 80042d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042d2:	2302      	movs	r3, #2
 80042d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042d6:	2301      	movs	r3, #1
 80042d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042da:	2300      	movs	r3, #0
 80042dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80042de:	2302      	movs	r3, #2
 80042e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042e2:	f107 031c 	add.w	r3, r7, #28
 80042e6:	4619      	mov	r1, r3
 80042e8:	481f      	ldr	r0, [pc, #124]	@ (8004368 <HAL_TIM_IC_MspInit+0xf8>)
 80042ea:	f006 fbc1 	bl	800aa70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80042ee:	e032      	b.n	8004356 <HAL_TIM_IC_MspInit+0xe6>
  else if(htim_ic->Instance==TIM15)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a1d      	ldr	r2, [pc, #116]	@ (800436c <HAL_TIM_IC_MspInit+0xfc>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d12d      	bne.n	8004356 <HAL_TIM_IC_MspInit+0xe6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80042fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004364 <HAL_TIM_IC_MspInit+0xf4>)
 80042fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004300:	4a18      	ldr	r2, [pc, #96]	@ (8004364 <HAL_TIM_IC_MspInit+0xf4>)
 8004302:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004306:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800430a:	4b16      	ldr	r3, [pc, #88]	@ (8004364 <HAL_TIM_IC_MspInit+0xf4>)
 800430c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004310:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004314:	613b      	str	r3, [r7, #16]
 8004316:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004318:	4b12      	ldr	r3, [pc, #72]	@ (8004364 <HAL_TIM_IC_MspInit+0xf4>)
 800431a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800431e:	4a11      	ldr	r2, [pc, #68]	@ (8004364 <HAL_TIM_IC_MspInit+0xf4>)
 8004320:	f043 0310 	orr.w	r3, r3, #16
 8004324:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004328:	4b0e      	ldr	r3, [pc, #56]	@ (8004364 <HAL_TIM_IC_MspInit+0xf4>)
 800432a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800432e:	f003 0310 	and.w	r3, r3, #16
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004336:	2320      	movs	r3, #32
 8004338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800433a:	2302      	movs	r3, #2
 800433c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800433e:	2301      	movs	r3, #1
 8004340:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004342:	2300      	movs	r3, #0
 8004344:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8004346:	2304      	movs	r3, #4
 8004348:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800434a:	f107 031c 	add.w	r3, r7, #28
 800434e:	4619      	mov	r1, r3
 8004350:	4807      	ldr	r0, [pc, #28]	@ (8004370 <HAL_TIM_IC_MspInit+0x100>)
 8004352:	f006 fb8d 	bl	800aa70 <HAL_GPIO_Init>
}
 8004356:	bf00      	nop
 8004358:	3730      	adds	r7, #48	@ 0x30
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	40000400 	.word	0x40000400
 8004364:	58024400 	.word	0x58024400
 8004368:	58020800 	.word	0x58020800
 800436c:	40014000 	.word	0x40014000
 8004370:	58021000 	.word	0x58021000

08004374 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM24)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a0b      	ldr	r2, [pc, #44]	@ (80043b0 <HAL_TIM_Base_MspInit+0x3c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d10e      	bne.n	80043a4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM24_MspInit 0 */

  /* USER CODE END TIM24_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM24_CLK_ENABLE();
 8004386:	4b0b      	ldr	r3, [pc, #44]	@ (80043b4 <HAL_TIM_Base_MspInit+0x40>)
 8004388:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800438c:	4a09      	ldr	r2, [pc, #36]	@ (80043b4 <HAL_TIM_Base_MspInit+0x40>)
 800438e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004392:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8004396:	4b07      	ldr	r3, [pc, #28]	@ (80043b4 <HAL_TIM_Base_MspInit+0x40>)
 8004398:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800439c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 80043a4:	bf00      	nop
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	4000e400 	.word	0x4000e400
 80043b4:	58024400 	.word	0x58024400

080043b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b08a      	sub	sp, #40	@ 0x28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c0:	f107 0314 	add.w	r3, r7, #20
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	605a      	str	r2, [r3, #4]
 80043ca:	609a      	str	r2, [r3, #8]
 80043cc:	60da      	str	r2, [r3, #12]
 80043ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a39      	ldr	r2, [pc, #228]	@ (80044bc <HAL_TIM_MspPostInit+0x104>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d120      	bne.n	800441c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80043da:	4b39      	ldr	r3, [pc, #228]	@ (80044c0 <HAL_TIM_MspPostInit+0x108>)
 80043dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80043e0:	4a37      	ldr	r2, [pc, #220]	@ (80044c0 <HAL_TIM_MspPostInit+0x108>)
 80043e2:	f043 0310 	orr.w	r3, r3, #16
 80043e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80043ea:	4b35      	ldr	r3, [pc, #212]	@ (80044c0 <HAL_TIM_MspPostInit+0x108>)
 80043ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80043f0:	f003 0310 	and.w	r3, r3, #16
 80043f4:	613b      	str	r3, [r7, #16]
 80043f6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_CH1N_Pin|TIM1_CH1_Pin;
 80043f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80043fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043fe:	2302      	movs	r3, #2
 8004400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004402:	2300      	movs	r3, #0
 8004404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004406:	2300      	movs	r3, #0
 8004408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800440a:	2301      	movs	r3, #1
 800440c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800440e:	f107 0314 	add.w	r3, r7, #20
 8004412:	4619      	mov	r1, r3
 8004414:	482b      	ldr	r0, [pc, #172]	@ (80044c4 <HAL_TIM_MspPostInit+0x10c>)
 8004416:	f006 fb2b 	bl	800aa70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800441a:	e04a      	b.n	80044b2 <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM2)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004424:	d120      	bne.n	8004468 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004426:	4b26      	ldr	r3, [pc, #152]	@ (80044c0 <HAL_TIM_MspPostInit+0x108>)
 8004428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800442c:	4a24      	ldr	r2, [pc, #144]	@ (80044c0 <HAL_TIM_MspPostInit+0x108>)
 800442e:	f043 0301 	orr.w	r3, r3, #1
 8004432:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004436:	4b22      	ldr	r3, [pc, #136]	@ (80044c0 <HAL_TIM_MspPostInit+0x108>)
 8004438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004444:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800444a:	2312      	movs	r3, #18
 800444c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444e:	2300      	movs	r3, #0
 8004450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004452:	2300      	movs	r3, #0
 8004454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004456:	2301      	movs	r3, #1
 8004458:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800445a:	f107 0314 	add.w	r3, r7, #20
 800445e:	4619      	mov	r1, r3
 8004460:	4819      	ldr	r0, [pc, #100]	@ (80044c8 <HAL_TIM_MspPostInit+0x110>)
 8004462:	f006 fb05 	bl	800aa70 <HAL_GPIO_Init>
}
 8004466:	e024      	b.n	80044b2 <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM4)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a17      	ldr	r2, [pc, #92]	@ (80044cc <HAL_TIM_MspPostInit+0x114>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d11f      	bne.n	80044b2 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004472:	4b13      	ldr	r3, [pc, #76]	@ (80044c0 <HAL_TIM_MspPostInit+0x108>)
 8004474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004478:	4a11      	ldr	r2, [pc, #68]	@ (80044c0 <HAL_TIM_MspPostInit+0x108>)
 800447a:	f043 0308 	orr.w	r3, r3, #8
 800447e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004482:	4b0f      	ldr	r3, [pc, #60]	@ (80044c0 <HAL_TIM_MspPostInit+0x108>)
 8004484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004488:	f003 0308 	and.w	r3, r3, #8
 800448c:	60bb      	str	r3, [r7, #8]
 800448e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004490:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004496:	2312      	movs	r3, #18
 8004498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800449a:	2300      	movs	r3, #0
 800449c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800449e:	2300      	movs	r3, #0
 80044a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80044a2:	2302      	movs	r3, #2
 80044a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044a6:	f107 0314 	add.w	r3, r7, #20
 80044aa:	4619      	mov	r1, r3
 80044ac:	4808      	ldr	r0, [pc, #32]	@ (80044d0 <HAL_TIM_MspPostInit+0x118>)
 80044ae:	f006 fadf 	bl	800aa70 <HAL_GPIO_Init>
}
 80044b2:	bf00      	nop
 80044b4:	3728      	adds	r7, #40	@ 0x28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	40010000 	.word	0x40010000
 80044c0:	58024400 	.word	0x58024400
 80044c4:	58021000 	.word	0x58021000
 80044c8:	58020000 	.word	0x58020000
 80044cc:	40000800 	.word	0x40000800
 80044d0:	58020c00 	.word	0x58020c00

080044d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80044d8:	bf00      	nop
 80044da:	e7fd      	b.n	80044d8 <NMI_Handler+0x4>

080044dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044e0:	bf00      	nop
 80044e2:	e7fd      	b.n	80044e0 <HardFault_Handler+0x4>

080044e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044e8:	bf00      	nop
 80044ea:	e7fd      	b.n	80044e8 <MemManage_Handler+0x4>

080044ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044f0:	bf00      	nop
 80044f2:	e7fd      	b.n	80044f0 <BusFault_Handler+0x4>

080044f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044f8:	bf00      	nop
 80044fa:	e7fd      	b.n	80044f8 <UsageFault_Handler+0x4>

080044fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004500:	bf00      	nop
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800450a:	b480      	push	{r7}
 800450c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800450e:	bf00      	nop
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800451c:	bf00      	nop
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800452a:	f000 fa0b 	bl	8004944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800452e:	bf00      	nop
 8004530:	bd80      	pop	{r7, pc}
	...

08004534 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004538:	4802      	ldr	r0, [pc, #8]	@ (8004544 <DMA1_Stream1_IRQHandler+0x10>)
 800453a:	f004 f985 	bl	8008848 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800453e:	bf00      	nop
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	24000c50 	.word	0x24000c50

08004548 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800454c:	4802      	ldr	r0, [pc, #8]	@ (8004558 <DMA1_Stream2_IRQHandler+0x10>)
 800454e:	f004 f97b 	bl	8008848 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004552:	bf00      	nop
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	24000bd8 	.word	0x24000bd8

0800455c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004560:	4803      	ldr	r0, [pc, #12]	@ (8004570 <ADC_IRQHandler+0x14>)
 8004562:	f001 f969 	bl	8005838 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8004566:	4803      	ldr	r0, [pc, #12]	@ (8004574 <ADC_IRQHandler+0x18>)
 8004568:	f001 f966 	bl	8005838 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800456c:	bf00      	nop
 800456e:	bd80      	pop	{r7, pc}
 8004570:	24000a88 	.word	0x24000a88
 8004574:	24000af8 	.word	0x24000af8

08004578 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INP_COMP_IRQ_Pin);
 800457c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004580:	f006 fc4f 	bl	800ae22 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(POWER_OFF_IRQ_Pin);
 8004584:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004588:	f006 fc4b 	bl	800ae22 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800458c:	bf00      	nop
 800458e:	bd80      	pop	{r7, pc}

08004590 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
  return 1;
 8004594:	2301      	movs	r3, #1
}
 8004596:	4618      	mov	r0, r3
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <_kill>:

int _kill(int pid, int sig)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80045aa:	f00d ff93 	bl	80124d4 <__errno>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2216      	movs	r2, #22
 80045b2:	601a      	str	r2, [r3, #0]
  return -1;
 80045b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3708      	adds	r7, #8
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <_exit>:

void _exit (int status)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80045c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f7ff ffe7 	bl	80045a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80045d2:	bf00      	nop
 80045d4:	e7fd      	b.n	80045d2 <_exit+0x12>

080045d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b086      	sub	sp, #24
 80045da:	af00      	add	r7, sp, #0
 80045dc:	60f8      	str	r0, [r7, #12]
 80045de:	60b9      	str	r1, [r7, #8]
 80045e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045e2:	2300      	movs	r3, #0
 80045e4:	617b      	str	r3, [r7, #20]
 80045e6:	e00a      	b.n	80045fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80045e8:	f3af 8000 	nop.w
 80045ec:	4601      	mov	r1, r0
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	1c5a      	adds	r2, r3, #1
 80045f2:	60ba      	str	r2, [r7, #8]
 80045f4:	b2ca      	uxtb	r2, r1
 80045f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	3301      	adds	r3, #1
 80045fc:	617b      	str	r3, [r7, #20]
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	429a      	cmp	r2, r3
 8004604:	dbf0      	blt.n	80045e8 <_read+0x12>
  }

  return len;
 8004606:	687b      	ldr	r3, [r7, #4]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3718      	adds	r7, #24
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800461c:	2300      	movs	r3, #0
 800461e:	617b      	str	r3, [r7, #20]
 8004620:	e009      	b.n	8004636 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	60ba      	str	r2, [r7, #8]
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	4618      	mov	r0, r3
 800462c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	3301      	adds	r3, #1
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	429a      	cmp	r2, r3
 800463c:	dbf1      	blt.n	8004622 <_write+0x12>
  }
  return len;
 800463e:	687b      	ldr	r3, [r7, #4]
}
 8004640:	4618      	mov	r0, r3
 8004642:	3718      	adds	r7, #24
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <_close>:

int _close(int file)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004650:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004654:	4618      	mov	r0, r3
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004670:	605a      	str	r2, [r3, #4]
  return 0;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <_isatty>:

int _isatty(int file)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004688:	2301      	movs	r3, #1
}
 800468a:	4618      	mov	r0, r3
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004696:	b480      	push	{r7}
 8004698:	b085      	sub	sp, #20
 800469a:	af00      	add	r7, sp, #0
 800469c:	60f8      	str	r0, [r7, #12]
 800469e:	60b9      	str	r1, [r7, #8]
 80046a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80046b8:	4a14      	ldr	r2, [pc, #80]	@ (800470c <_sbrk+0x5c>)
 80046ba:	4b15      	ldr	r3, [pc, #84]	@ (8004710 <_sbrk+0x60>)
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80046c4:	4b13      	ldr	r3, [pc, #76]	@ (8004714 <_sbrk+0x64>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d102      	bne.n	80046d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80046cc:	4b11      	ldr	r3, [pc, #68]	@ (8004714 <_sbrk+0x64>)
 80046ce:	4a12      	ldr	r2, [pc, #72]	@ (8004718 <_sbrk+0x68>)
 80046d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80046d2:	4b10      	ldr	r3, [pc, #64]	@ (8004714 <_sbrk+0x64>)
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4413      	add	r3, r2
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d207      	bcs.n	80046f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80046e0:	f00d fef8 	bl	80124d4 <__errno>
 80046e4:	4603      	mov	r3, r0
 80046e6:	220c      	movs	r2, #12
 80046e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80046ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80046ee:	e009      	b.n	8004704 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80046f0:	4b08      	ldr	r3, [pc, #32]	@ (8004714 <_sbrk+0x64>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80046f6:	4b07      	ldr	r3, [pc, #28]	@ (8004714 <_sbrk+0x64>)
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4413      	add	r3, r2
 80046fe:	4a05      	ldr	r2, [pc, #20]	@ (8004714 <_sbrk+0x64>)
 8004700:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004702:	68fb      	ldr	r3, [r7, #12]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3718      	adds	r7, #24
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	24050000 	.word	0x24050000
 8004710:	00000400 	.word	0x00000400
 8004714:	240010a0 	.word	0x240010a0
 8004718:	24001210 	.word	0x24001210

0800471c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004720:	4b32      	ldr	r3, [pc, #200]	@ (80047ec <SystemInit+0xd0>)
 8004722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004726:	4a31      	ldr	r2, [pc, #196]	@ (80047ec <SystemInit+0xd0>)
 8004728:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800472c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004730:	4b2f      	ldr	r3, [pc, #188]	@ (80047f0 <SystemInit+0xd4>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 030f 	and.w	r3, r3, #15
 8004738:	2b06      	cmp	r3, #6
 800473a:	d807      	bhi.n	800474c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800473c:	4b2c      	ldr	r3, [pc, #176]	@ (80047f0 <SystemInit+0xd4>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f023 030f 	bic.w	r3, r3, #15
 8004744:	4a2a      	ldr	r2, [pc, #168]	@ (80047f0 <SystemInit+0xd4>)
 8004746:	f043 0307 	orr.w	r3, r3, #7
 800474a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800474c:	4b29      	ldr	r3, [pc, #164]	@ (80047f4 <SystemInit+0xd8>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a28      	ldr	r2, [pc, #160]	@ (80047f4 <SystemInit+0xd8>)
 8004752:	f043 0301 	orr.w	r3, r3, #1
 8004756:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004758:	4b26      	ldr	r3, [pc, #152]	@ (80047f4 <SystemInit+0xd8>)
 800475a:	2200      	movs	r2, #0
 800475c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800475e:	4b25      	ldr	r3, [pc, #148]	@ (80047f4 <SystemInit+0xd8>)
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	4924      	ldr	r1, [pc, #144]	@ (80047f4 <SystemInit+0xd8>)
 8004764:	4b24      	ldr	r3, [pc, #144]	@ (80047f8 <SystemInit+0xdc>)
 8004766:	4013      	ands	r3, r2
 8004768:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800476a:	4b21      	ldr	r3, [pc, #132]	@ (80047f0 <SystemInit+0xd4>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0308 	and.w	r3, r3, #8
 8004772:	2b00      	cmp	r3, #0
 8004774:	d007      	beq.n	8004786 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004776:	4b1e      	ldr	r3, [pc, #120]	@ (80047f0 <SystemInit+0xd4>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f023 030f 	bic.w	r3, r3, #15
 800477e:	4a1c      	ldr	r2, [pc, #112]	@ (80047f0 <SystemInit+0xd4>)
 8004780:	f043 0307 	orr.w	r3, r3, #7
 8004784:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004786:	4b1b      	ldr	r3, [pc, #108]	@ (80047f4 <SystemInit+0xd8>)
 8004788:	2200      	movs	r2, #0
 800478a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800478c:	4b19      	ldr	r3, [pc, #100]	@ (80047f4 <SystemInit+0xd8>)
 800478e:	2200      	movs	r2, #0
 8004790:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004792:	4b18      	ldr	r3, [pc, #96]	@ (80047f4 <SystemInit+0xd8>)
 8004794:	2200      	movs	r2, #0
 8004796:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004798:	4b16      	ldr	r3, [pc, #88]	@ (80047f4 <SystemInit+0xd8>)
 800479a:	4a18      	ldr	r2, [pc, #96]	@ (80047fc <SystemInit+0xe0>)
 800479c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800479e:	4b15      	ldr	r3, [pc, #84]	@ (80047f4 <SystemInit+0xd8>)
 80047a0:	4a17      	ldr	r2, [pc, #92]	@ (8004800 <SystemInit+0xe4>)
 80047a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80047a4:	4b13      	ldr	r3, [pc, #76]	@ (80047f4 <SystemInit+0xd8>)
 80047a6:	4a17      	ldr	r2, [pc, #92]	@ (8004804 <SystemInit+0xe8>)
 80047a8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80047aa:	4b12      	ldr	r3, [pc, #72]	@ (80047f4 <SystemInit+0xd8>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80047b0:	4b10      	ldr	r3, [pc, #64]	@ (80047f4 <SystemInit+0xd8>)
 80047b2:	4a14      	ldr	r2, [pc, #80]	@ (8004804 <SystemInit+0xe8>)
 80047b4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80047b6:	4b0f      	ldr	r3, [pc, #60]	@ (80047f4 <SystemInit+0xd8>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80047bc:	4b0d      	ldr	r3, [pc, #52]	@ (80047f4 <SystemInit+0xd8>)
 80047be:	4a11      	ldr	r2, [pc, #68]	@ (8004804 <SystemInit+0xe8>)
 80047c0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80047c2:	4b0c      	ldr	r3, [pc, #48]	@ (80047f4 <SystemInit+0xd8>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80047c8:	4b0a      	ldr	r3, [pc, #40]	@ (80047f4 <SystemInit+0xd8>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a09      	ldr	r2, [pc, #36]	@ (80047f4 <SystemInit+0xd8>)
 80047ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80047d4:	4b07      	ldr	r3, [pc, #28]	@ (80047f4 <SystemInit+0xd8>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80047da:	4b0b      	ldr	r3, [pc, #44]	@ (8004808 <SystemInit+0xec>)
 80047dc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80047e0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80047e2:	bf00      	nop
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	e000ed00 	.word	0xe000ed00
 80047f0:	52002000 	.word	0x52002000
 80047f4:	58024400 	.word	0x58024400
 80047f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80047fc:	02020200 	.word	0x02020200
 8004800:	01ff0000 	.word	0x01ff0000
 8004804:	01010280 	.word	0x01010280
 8004808:	52004000 	.word	0x52004000

0800480c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800480c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004844 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004810:	f7ff ff84 	bl	800471c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004814:	480c      	ldr	r0, [pc, #48]	@ (8004848 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004816:	490d      	ldr	r1, [pc, #52]	@ (800484c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004818:	4a0d      	ldr	r2, [pc, #52]	@ (8004850 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800481a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800481c:	e002      	b.n	8004824 <LoopCopyDataInit>

0800481e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800481e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004822:	3304      	adds	r3, #4

08004824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004828:	d3f9      	bcc.n	800481e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800482a:	4a0a      	ldr	r2, [pc, #40]	@ (8004854 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800482c:	4c0a      	ldr	r4, [pc, #40]	@ (8004858 <LoopFillZerobss+0x22>)
  movs r3, #0
 800482e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004830:	e001      	b.n	8004836 <LoopFillZerobss>

08004832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004834:	3204      	adds	r2, #4

08004836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004838:	d3fb      	bcc.n	8004832 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800483a:	f00d fe51 	bl	80124e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800483e:	f7fe f931 	bl	8002aa4 <main>
  bx  lr
 8004842:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004844:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004848:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800484c:	24000210 	.word	0x24000210
  ldr r2, =_sidata
 8004850:	08015258 	.word	0x08015258
  ldr r2, =_sbss
 8004854:	240002d0 	.word	0x240002d0
  ldr r4, =_ebss
 8004858:	24001210 	.word	0x24001210

0800485c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800485c:	e7fe      	b.n	800485c <ADC3_IRQHandler>
	...

08004860 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004866:	2003      	movs	r0, #3
 8004868:	f003 f9ec 	bl	8007c44 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800486c:	f007 f8be 	bl	800b9ec <HAL_RCC_GetSysClockFreq>
 8004870:	4602      	mov	r2, r0
 8004872:	4b15      	ldr	r3, [pc, #84]	@ (80048c8 <HAL_Init+0x68>)
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	0a1b      	lsrs	r3, r3, #8
 8004878:	f003 030f 	and.w	r3, r3, #15
 800487c:	4913      	ldr	r1, [pc, #76]	@ (80048cc <HAL_Init+0x6c>)
 800487e:	5ccb      	ldrb	r3, [r1, r3]
 8004880:	f003 031f 	and.w	r3, r3, #31
 8004884:	fa22 f303 	lsr.w	r3, r2, r3
 8004888:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800488a:	4b0f      	ldr	r3, [pc, #60]	@ (80048c8 <HAL_Init+0x68>)
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	f003 030f 	and.w	r3, r3, #15
 8004892:	4a0e      	ldr	r2, [pc, #56]	@ (80048cc <HAL_Init+0x6c>)
 8004894:	5cd3      	ldrb	r3, [r2, r3]
 8004896:	f003 031f 	and.w	r3, r3, #31
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	fa22 f303 	lsr.w	r3, r2, r3
 80048a0:	4a0b      	ldr	r2, [pc, #44]	@ (80048d0 <HAL_Init+0x70>)
 80048a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80048a4:	4a0b      	ldr	r2, [pc, #44]	@ (80048d4 <HAL_Init+0x74>)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80048aa:	2000      	movs	r0, #0
 80048ac:	f000 f814 	bl	80048d8 <HAL_InitTick>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e002      	b.n	80048c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80048ba:	f7ff f913 	bl	8003ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3708      	adds	r7, #8
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	58024400 	.word	0x58024400
 80048cc:	08014e70 	.word	0x08014e70
 80048d0:	2400003c 	.word	0x2400003c
 80048d4:	24000038 	.word	0x24000038

080048d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80048e0:	4b15      	ldr	r3, [pc, #84]	@ (8004938 <HAL_InitTick+0x60>)
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e021      	b.n	8004930 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80048ec:	4b13      	ldr	r3, [pc, #76]	@ (800493c <HAL_InitTick+0x64>)
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	4b11      	ldr	r3, [pc, #68]	@ (8004938 <HAL_InitTick+0x60>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	4619      	mov	r1, r3
 80048f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80048fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80048fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004902:	4618      	mov	r0, r3
 8004904:	f003 f9d1 	bl	8007caa <HAL_SYSTICK_Config>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e00e      	b.n	8004930 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b0f      	cmp	r3, #15
 8004916:	d80a      	bhi.n	800492e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004918:	2200      	movs	r2, #0
 800491a:	6879      	ldr	r1, [r7, #4]
 800491c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004920:	f003 f99b 	bl	8007c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004924:	4a06      	ldr	r2, [pc, #24]	@ (8004940 <HAL_InitTick+0x68>)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	e000      	b.n	8004930 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
}
 8004930:	4618      	mov	r0, r3
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	24000044 	.word	0x24000044
 800493c:	24000038 	.word	0x24000038
 8004940:	24000040 	.word	0x24000040

08004944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004948:	4b06      	ldr	r3, [pc, #24]	@ (8004964 <HAL_IncTick+0x20>)
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	461a      	mov	r2, r3
 800494e:	4b06      	ldr	r3, [pc, #24]	@ (8004968 <HAL_IncTick+0x24>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4413      	add	r3, r2
 8004954:	4a04      	ldr	r2, [pc, #16]	@ (8004968 <HAL_IncTick+0x24>)
 8004956:	6013      	str	r3, [r2, #0]
}
 8004958:	bf00      	nop
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	24000044 	.word	0x24000044
 8004968:	240010a4 	.word	0x240010a4

0800496c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  return uwTick;
 8004970:	4b03      	ldr	r3, [pc, #12]	@ (8004980 <HAL_GetTick+0x14>)
 8004972:	681b      	ldr	r3, [r3, #0]
}
 8004974:	4618      	mov	r0, r3
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	240010a4 	.word	0x240010a4

08004984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800498c:	f7ff ffee 	bl	800496c <HAL_GetTick>
 8004990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800499c:	d005      	beq.n	80049aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800499e:	4b0a      	ldr	r3, [pc, #40]	@ (80049c8 <HAL_Delay+0x44>)
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	461a      	mov	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4413      	add	r3, r2
 80049a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80049aa:	bf00      	nop
 80049ac:	f7ff ffde 	bl	800496c <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d8f7      	bhi.n	80049ac <HAL_Delay+0x28>
  {
  }
}
 80049bc:	bf00      	nop
 80049be:	bf00      	nop
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	24000044 	.word	0x24000044

080049cc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80049d4:	4b06      	ldr	r3, [pc, #24]	@ (80049f0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80049dc:	4904      	ldr	r1, [pc, #16]	@ (80049f0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	604b      	str	r3, [r1, #4]
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	58000400 	.word	0x58000400

080049f4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80049fe:	4b07      	ldr	r3, [pc, #28]	@ (8004a1c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	43db      	mvns	r3, r3
 8004a06:	401a      	ands	r2, r3
 8004a08:	4904      	ldr	r1, [pc, #16]	@ (8004a1c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	604b      	str	r3, [r1, #4]
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	58000400 	.word	0x58000400

08004a20 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	431a      	orrs	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	609a      	str	r2, [r3, #8]
}
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
 8004a4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	609a      	str	r2, [r3, #8]
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b087      	sub	sp, #28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
 8004a94:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	3360      	adds	r3, #96	@ 0x60
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4413      	add	r3, r2
 8004aa2:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	4a10      	ldr	r2, [pc, #64]	@ (8004ae8 <LL_ADC_SetOffset+0x60>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d10b      	bne.n	8004ac4 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004ac2:	e00b      	b.n	8004adc <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	430b      	orrs	r3, r1
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	601a      	str	r2, [r3, #0]
}
 8004adc:	bf00      	nop
 8004ade:	371c      	adds	r7, #28
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	58026000 	.word	0x58026000

08004aec <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	3360      	adds	r3, #96	@ 0x60
 8004afa:	461a      	mov	r2, r3
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	f003 031f 	and.w	r3, r3, #31
 8004b32:	6879      	ldr	r1, [r7, #4]
 8004b34:	fa01 f303 	lsl.w	r3, r1, r3
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	611a      	str	r2, [r3, #16]
}
 8004b3e:	bf00      	nop
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
	...

08004b4c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	4a0c      	ldr	r2, [pc, #48]	@ (8004b8c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d00e      	beq.n	8004b7e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	3360      	adds	r3, #96	@ 0x60
 8004b64:	461a      	mov	r2, r3
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	601a      	str	r2, [r3, #0]
  }
}
 8004b7e:	bf00      	nop
 8004b80:	371c      	adds	r7, #28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	58026000 	.word	0x58026000

08004b90 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4a0c      	ldr	r2, [pc, #48]	@ (8004bd0 <LL_ADC_SetOffsetSaturation+0x40>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d10e      	bne.n	8004bc2 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	3360      	adds	r3, #96	@ 0x60
 8004ba8:	461a      	mov	r2, r3
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	4413      	add	r3, r2
 8004bb0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8004bc2:	bf00      	nop
 8004bc4:	371c      	adds	r7, #28
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	58026000 	.word	0x58026000

08004bd4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b087      	sub	sp, #28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4a0c      	ldr	r2, [pc, #48]	@ (8004c14 <LL_ADC_SetOffsetSign+0x40>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d10e      	bne.n	8004c06 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	3360      	adds	r3, #96	@ 0x60
 8004bec:	461a      	mov	r2, r3
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	431a      	orrs	r2, r3
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8004c06:	bf00      	nop
 8004c08:	371c      	adds	r7, #28
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	58026000 	.word	0x58026000

08004c18 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	3360      	adds	r3, #96	@ 0x60
 8004c28:	461a      	mov	r2, r3
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	4a0c      	ldr	r2, [pc, #48]	@ (8004c68 <LL_ADC_SetOffsetState+0x50>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d108      	bne.n	8004c4c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	431a      	orrs	r2, r3
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8004c4a:	e007      	b.n	8004c5c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	431a      	orrs	r2, r3
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	601a      	str	r2, [r3, #0]
}
 8004c5c:	bf00      	nop
 8004c5e:	371c      	adds	r7, #28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	58026000 	.word	0x58026000

08004c6c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004c80:	2301      	movs	r3, #1
 8004c82:	e000      	b.n	8004c86 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b087      	sub	sp, #28
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	60f8      	str	r0, [r7, #12]
 8004c9a:	60b9      	str	r1, [r7, #8]
 8004c9c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	3330      	adds	r3, #48	@ 0x30
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	0a1b      	lsrs	r3, r3, #8
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	f003 030c 	and.w	r3, r3, #12
 8004cae:	4413      	add	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f003 031f 	and.w	r3, r3, #31
 8004cbc:	211f      	movs	r1, #31
 8004cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc2:	43db      	mvns	r3, r3
 8004cc4:	401a      	ands	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	0e9b      	lsrs	r3, r3, #26
 8004cca:	f003 011f 	and.w	r1, r3, #31
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	f003 031f 	and.w	r3, r3, #31
 8004cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004cde:	bf00      	nop
 8004ce0:	371c      	adds	r7, #28
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
 8004cf2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f023 0203 	bic.w	r2, r3, #3
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	60da      	str	r2, [r3, #12]
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f043 0201 	orr.w	r2, r3, #1
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	60da      	str	r2, [r3, #12]
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a08      	ldr	r2, [pc, #32]	@ (8004d60 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d107      	bne.n	8004d52 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	f023 0203 	bic.w	r2, r3, #3
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	431a      	orrs	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	60da      	str	r2, [r3, #12]
  }
}
 8004d52:	bf00      	nop
 8004d54:	370c      	adds	r7, #12
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	58026000 	.word	0x58026000

08004d64 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d70:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d101      	bne.n	8004d7c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e000      	b.n	8004d7e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b087      	sub	sp, #28
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	60f8      	str	r0, [r7, #12]
 8004d92:	60b9      	str	r1, [r7, #8]
 8004d94:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	3314      	adds	r3, #20
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	0e5b      	lsrs	r3, r3, #25
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	f003 0304 	and.w	r3, r3, #4
 8004da6:	4413      	add	r3, r2
 8004da8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	0d1b      	lsrs	r3, r3, #20
 8004db2:	f003 031f 	and.w	r3, r3, #31
 8004db6:	2107      	movs	r1, #7
 8004db8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dbc:	43db      	mvns	r3, r3
 8004dbe:	401a      	ands	r2, r3
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	0d1b      	lsrs	r3, r3, #20
 8004dc4:	f003 031f 	and.w	r3, r3, #31
 8004dc8:	6879      	ldr	r1, [r7, #4]
 8004dca:	fa01 f303 	lsl.w	r3, r1, r3
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004dd4:	bf00      	nop
 8004dd6:	371c      	adds	r7, #28
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4a1a      	ldr	r2, [pc, #104]	@ (8004e58 <LL_ADC_SetChannelSingleDiff+0x78>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d115      	bne.n	8004e20 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e00:	43db      	mvns	r3, r3
 8004e02:	401a      	ands	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f003 0318 	and.w	r3, r3, #24
 8004e0a:	4914      	ldr	r1, [pc, #80]	@ (8004e5c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004e0c:	40d9      	lsrs	r1, r3
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	400b      	ands	r3, r1
 8004e12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e16:	431a      	orrs	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004e1e:	e014      	b.n	8004e4a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e2c:	43db      	mvns	r3, r3
 8004e2e:	401a      	ands	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f003 0318 	and.w	r3, r3, #24
 8004e36:	4909      	ldr	r1, [pc, #36]	@ (8004e5c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004e38:	40d9      	lsrs	r1, r3
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	400b      	ands	r3, r1
 8004e3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e42:	431a      	orrs	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8004e4a:	bf00      	nop
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	58026000 	.word	0x58026000
 8004e5c:	000fffff 	.word	0x000fffff

08004e60 <LL_ADC_SetAnalogWDMonitChannels>:
  *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
  *         (2) On STM32H7, parameter available only on ADC instance: ADC2.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	330c      	adds	r3, #12
 8004e70:	4618      	mov	r0, r3
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	0d1b      	lsrs	r3, r3, #20
 8004e76:	f003 0103 	and.w	r1, r3, #3
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	f003 0201 	and.w	r2, r3, #1
 8004e80:	4613      	mov	r3, r2
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	4413      	add	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	440b      	add	r3, r1
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4403      	add	r3, r0
 8004e8e:	617b      	str	r3, [r7, #20]
                                                      + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	68b9      	ldr	r1, [r7, #8]
 8004e96:	4b08      	ldr	r3, [pc, #32]	@ (8004eb8 <LL_ADC_SetAnalogWDMonitChannels+0x58>)
 8004e98:	400b      	ands	r3, r1
 8004e9a:	43db      	mvns	r3, r3
 8004e9c:	401a      	ands	r2, r3
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	400b      	ands	r3, r1
 8004ea4:	431a      	orrs	r2, r3
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8004eaa:	bf00      	nop
 8004eac:	371c      	adds	r7, #28
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	7dcfffff 	.word	0x7dcfffff

08004ebc <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdHighValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue, uint32_t AWDThresholdLowValue)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b089      	sub	sp, #36	@ 0x24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
 8004ec8:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  if (ADCx == ADC3)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4a29      	ldr	r2, [pc, #164]	@ (8004f74 <LL_ADC_ConfigAnalogWDThresholds+0xb8>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d115      	bne.n	8004efe <LL_ADC_ConfigAnalogWDThresholds+0x42>
  {
    uint32_t __IO *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3320      	adds	r3, #32
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	0d1b      	lsrs	r3, r3, #20
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	f003 030c 	and.w	r3, r3, #12
 8004ee2:	4413      	add	r3, r2
 8004ee4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 22f0 	and.w	r2, r3, #4026593280	@ 0xf000f000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	0419      	lsls	r1, r3, #16
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	430b      	orrs	r3, r1
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	601a      	str	r2, [r3, #0]
                                                         + (LL_ADC_AWD_THRESHOLD_HIGH));

    MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdLowValue);
    MODIFY_REG(*preg2, ADC_HTR_HT, AWDThresholdHighValue);
  }
}
 8004efc:	e034      	b.n	8004f68 <LL_ADC_ConfigAnalogWDThresholds+0xac>
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS) * 2UL)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	3320      	adds	r3, #32
 8004f02:	4618      	mov	r0, r3
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	0d1b      	lsrs	r3, r3, #20
 8004f08:	f003 0103 	and.w	r1, r3, #3
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	f003 0201 	and.w	r2, r3, #1
 8004f12:	4613      	mov	r3, r2
 8004f14:	011b      	lsls	r3, r3, #4
 8004f16:	4413      	add	r3, r2
 8004f18:	440b      	add	r3, r1
 8004f1a:	005b      	lsls	r3, r3, #1
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4403      	add	r3, r0
 8004f20:	61fb      	str	r3, [r7, #28]
    __IO uint32_t *preg2 = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS) * 2UL)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	3320      	adds	r3, #32
 8004f26:	4618      	mov	r0, r3
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	0d1b      	lsrs	r3, r3, #20
 8004f2c:	f003 0103 	and.w	r1, r3, #3
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f003 0201 	and.w	r2, r3, #1
 8004f36:	4613      	mov	r3, r2
 8004f38:	011b      	lsls	r3, r3, #4
 8004f3a:	4413      	add	r3, r2
 8004f3c:	440b      	add	r3, r1
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	3301      	adds	r3, #1
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4403      	add	r3, r0
 8004f46:	61bb      	str	r3, [r7, #24]
    MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdLowValue);
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 427c 	and.w	r2, r3, #4227858432	@ 0xfc000000
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	431a      	orrs	r2, r3
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	601a      	str	r2, [r3, #0]
    MODIFY_REG(*preg2, ADC_HTR_HT, AWDThresholdHighValue);
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 427c 	and.w	r2, r3, #4227858432	@ 0xfc000000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	431a      	orrs	r2, r3
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	601a      	str	r2, [r3, #0]
}
 8004f68:	bf00      	nop
 8004f6a:	3724      	adds	r7, #36	@ 0x24
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	58026000 	.word	0x58026000

08004f78 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f003 031f 	and.w	r3, r3, #31
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	4b04      	ldr	r3, [pc, #16]	@ (8004fd0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	6093      	str	r3, [r2, #8]
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	5fffffc0 	.word	0x5fffffc0

08004fd4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fe4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fe8:	d101      	bne.n	8004fee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004fea:	2301      	movs	r3, #1
 8004fec:	e000      	b.n	8004ff0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	4b05      	ldr	r3, [pc, #20]	@ (8005020 <LL_ADC_EnableInternalRegulator+0x24>)
 800500a:	4013      	ands	r3, r2
 800500c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr
 8005020:	6fffffc0 	.word	0x6fffffc0

08005024 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005034:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005038:	d101      	bne.n	800503e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800503a:	2301      	movs	r3, #1
 800503c:	e000      	b.n	8005040 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	4b05      	ldr	r3, [pc, #20]	@ (8005070 <LL_ADC_Enable+0x24>)
 800505a:	4013      	ands	r3, r2
 800505c:	f043 0201 	orr.w	r2, r3, #1
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	7fffffc0 	.word	0x7fffffc0

08005074 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	4b05      	ldr	r3, [pc, #20]	@ (8005098 <LL_ADC_Disable+0x24>)
 8005082:	4013      	ands	r3, r2
 8005084:	f043 0202 	orr.w	r2, r3, #2
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr
 8005098:	7fffffc0 	.word	0x7fffffc0

0800509c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f003 0301 	and.w	r3, r3, #1
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d101      	bne.n	80050b4 <LL_ADC_IsEnabled+0x18>
 80050b0:	2301      	movs	r3, #1
 80050b2:	e000      	b.n	80050b6 <LL_ADC_IsEnabled+0x1a>
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b083      	sub	sp, #12
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d101      	bne.n	80050da <LL_ADC_IsDisableOngoing+0x18>
 80050d6:	2301      	movs	r3, #1
 80050d8:	e000      	b.n	80050dc <LL_ADC_IsDisableOngoing+0x1a>
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	4b05      	ldr	r3, [pc, #20]	@ (800510c <LL_ADC_REG_StartConversion+0x24>)
 80050f6:	4013      	ands	r3, r2
 80050f8:	f043 0204 	orr.w	r2, r3, #4
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	7fffffc0 	.word	0x7fffffc0

08005110 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f003 0304 	and.w	r3, r3, #4
 8005120:	2b04      	cmp	r3, #4
 8005122:	d101      	bne.n	8005128 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005124:	2301      	movs	r3, #1
 8005126:	e000      	b.n	800512a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005136:	b480      	push	{r7}
 8005138:	b083      	sub	sp, #12
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f003 0308 	and.w	r3, r3, #8
 8005146:	2b08      	cmp	r3, #8
 8005148:	d101      	bne.n	800514e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800514a:	2301      	movs	r3, #1
 800514c:	e000      	b.n	8005150 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2280      	movs	r2, #128	@ 0x80
 8005168:	601a      	str	r2, [r3, #0]
}
 800516a:	bf00      	nop
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8005176:	b480      	push	{r7}
 8005178:	b083      	sub	sp, #12
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005184:	601a      	str	r2, [r3, #0]
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051a0:	601a      	str	r2, [r3, #0]
}
 80051a2:	bf00      	nop
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b083      	sub	sp, #12
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	605a      	str	r2, [r3, #4]
}
 80051c2:	bf00      	nop
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b083      	sub	sp, #12
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	605a      	str	r2, [r3, #4]
}
 80051e2:	bf00      	nop
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b083      	sub	sp, #12
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	605a      	str	r2, [r3, #4]
}
 8005202:	bf00      	nop
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 800520e:	b480      	push	{r7}
 8005210:	b083      	sub	sp, #12
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	605a      	str	r2, [r3, #4]
}
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 800522e:	b480      	push	{r7}
 8005230:	b083      	sub	sp, #12
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	605a      	str	r2, [r3, #4]
}
 8005242:	bf00      	nop
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 800524e:	b480      	push	{r7}
 8005250:	b083      	sub	sp, #12
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	605a      	str	r2, [r3, #4]
}
 8005262:	bf00      	nop
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
	...

08005270 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005270:	b590      	push	{r4, r7, lr}
 8005272:	b089      	sub	sp, #36	@ 0x24
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005278:	2300      	movs	r3, #0
 800527a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800527c:	2300      	movs	r3, #0
 800527e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e1ee      	b.n	8005668 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005294:	2b00      	cmp	r3, #0
 8005296:	d109      	bne.n	80052ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f7fe fc3d 	bl	8003b18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7ff fe8f 	bl	8004fd4 <LL_ADC_IsDeepPowerDownEnabled>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d004      	beq.n	80052c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7ff fe75 	bl	8004fb0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7ff feaa 	bl	8005024 <LL_ADC_IsInternalRegulatorEnabled>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d114      	bne.n	8005300 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4618      	mov	r0, r3
 80052dc:	f7ff fe8e 	bl	8004ffc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80052e0:	4b8e      	ldr	r3, [pc, #568]	@ (800551c <HAL_ADC_Init+0x2ac>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	099b      	lsrs	r3, r3, #6
 80052e6:	4a8e      	ldr	r2, [pc, #568]	@ (8005520 <HAL_ADC_Init+0x2b0>)
 80052e8:	fba2 2303 	umull	r2, r3, r2, r3
 80052ec:	099b      	lsrs	r3, r3, #6
 80052ee:	3301      	adds	r3, #1
 80052f0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80052f2:	e002      	b.n	80052fa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1f9      	bne.n	80052f4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4618      	mov	r0, r3
 8005306:	f7ff fe8d 	bl	8005024 <LL_ADC_IsInternalRegulatorEnabled>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10d      	bne.n	800532c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005314:	f043 0210 	orr.w	r2, r3, #16
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005320:	f043 0201 	orr.w	r2, r3, #1
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4618      	mov	r0, r3
 8005332:	f7ff feed 	bl	8005110 <LL_ADC_REG_IsConversionOngoing>
 8005336:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800533c:	f003 0310 	and.w	r3, r3, #16
 8005340:	2b00      	cmp	r3, #0
 8005342:	f040 8188 	bne.w	8005656 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	2b00      	cmp	r3, #0
 800534a:	f040 8184 	bne.w	8005656 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005352:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005356:	f043 0202 	orr.w	r2, r3, #2
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4618      	mov	r0, r3
 8005364:	f7ff fe9a 	bl	800509c <LL_ADC_IsEnabled>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d136      	bne.n	80053dc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a6c      	ldr	r2, [pc, #432]	@ (8005524 <HAL_ADC_Init+0x2b4>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d004      	beq.n	8005382 <HAL_ADC_Init+0x112>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a6a      	ldr	r2, [pc, #424]	@ (8005528 <HAL_ADC_Init+0x2b8>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d10e      	bne.n	80053a0 <HAL_ADC_Init+0x130>
 8005382:	4868      	ldr	r0, [pc, #416]	@ (8005524 <HAL_ADC_Init+0x2b4>)
 8005384:	f7ff fe8a 	bl	800509c <LL_ADC_IsEnabled>
 8005388:	4604      	mov	r4, r0
 800538a:	4867      	ldr	r0, [pc, #412]	@ (8005528 <HAL_ADC_Init+0x2b8>)
 800538c:	f7ff fe86 	bl	800509c <LL_ADC_IsEnabled>
 8005390:	4603      	mov	r3, r0
 8005392:	4323      	orrs	r3, r4
 8005394:	2b00      	cmp	r3, #0
 8005396:	bf0c      	ite	eq
 8005398:	2301      	moveq	r3, #1
 800539a:	2300      	movne	r3, #0
 800539c:	b2db      	uxtb	r3, r3
 800539e:	e008      	b.n	80053b2 <HAL_ADC_Init+0x142>
 80053a0:	4862      	ldr	r0, [pc, #392]	@ (800552c <HAL_ADC_Init+0x2bc>)
 80053a2:	f7ff fe7b 	bl	800509c <LL_ADC_IsEnabled>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	bf0c      	ite	eq
 80053ac:	2301      	moveq	r3, #1
 80053ae:	2300      	movne	r3, #0
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d012      	beq.n	80053dc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a5a      	ldr	r2, [pc, #360]	@ (8005524 <HAL_ADC_Init+0x2b4>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d004      	beq.n	80053ca <HAL_ADC_Init+0x15a>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a58      	ldr	r2, [pc, #352]	@ (8005528 <HAL_ADC_Init+0x2b8>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d101      	bne.n	80053ce <HAL_ADC_Init+0x15e>
 80053ca:	4a59      	ldr	r2, [pc, #356]	@ (8005530 <HAL_ADC_Init+0x2c0>)
 80053cc:	e000      	b.n	80053d0 <HAL_ADC_Init+0x160>
 80053ce:	4a59      	ldr	r2, [pc, #356]	@ (8005534 <HAL_ADC_Init+0x2c4>)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	4619      	mov	r1, r3
 80053d6:	4610      	mov	r0, r2
 80053d8:	f7ff fb22 	bl	8004a20 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a52      	ldr	r2, [pc, #328]	@ (800552c <HAL_ADC_Init+0x2bc>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d129      	bne.n	800543a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	7e5b      	ldrb	r3, [r3, #25]
 80053ea:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80053f0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80053f6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d013      	beq.n	8005428 <HAL_ADC_Init+0x1b8>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	2b0c      	cmp	r3, #12
 8005406:	d00d      	beq.n	8005424 <HAL_ADC_Init+0x1b4>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	2b1c      	cmp	r3, #28
 800540e:	d007      	beq.n	8005420 <HAL_ADC_Init+0x1b0>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	2b18      	cmp	r3, #24
 8005416:	d101      	bne.n	800541c <HAL_ADC_Init+0x1ac>
 8005418:	2318      	movs	r3, #24
 800541a:	e006      	b.n	800542a <HAL_ADC_Init+0x1ba>
 800541c:	2300      	movs	r3, #0
 800541e:	e004      	b.n	800542a <HAL_ADC_Init+0x1ba>
 8005420:	2310      	movs	r3, #16
 8005422:	e002      	b.n	800542a <HAL_ADC_Init+0x1ba>
 8005424:	2308      	movs	r3, #8
 8005426:	e000      	b.n	800542a <HAL_ADC_Init+0x1ba>
 8005428:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800542a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005432:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8005434:	4313      	orrs	r3, r2
 8005436:	61bb      	str	r3, [r7, #24]
 8005438:	e00e      	b.n	8005458 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	7e5b      	ldrb	r3, [r3, #25]
 800543e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005444:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800544a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005452:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005454:	4313      	orrs	r3, r2
 8005456:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d106      	bne.n	8005470 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005466:	3b01      	subs	r3, #1
 8005468:	045b      	lsls	r3, r3, #17
 800546a:	69ba      	ldr	r2, [r7, #24]
 800546c:	4313      	orrs	r3, r2
 800546e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005474:	2b00      	cmp	r3, #0
 8005476:	d009      	beq.n	800548c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800547c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005484:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005486:	69ba      	ldr	r2, [r7, #24]
 8005488:	4313      	orrs	r3, r2
 800548a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a26      	ldr	r2, [pc, #152]	@ (800552c <HAL_ADC_Init+0x2bc>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d115      	bne.n	80054c2 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68da      	ldr	r2, [r3, #12]
 800549c:	4b26      	ldr	r3, [pc, #152]	@ (8005538 <HAL_ADC_Init+0x2c8>)
 800549e:	4013      	ands	r3, r2
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	6812      	ldr	r2, [r2, #0]
 80054a4:	69b9      	ldr	r1, [r7, #24]
 80054a6:	430b      	orrs	r3, r1
 80054a8:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	611a      	str	r2, [r3, #16]
 80054c0:	e009      	b.n	80054d6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68da      	ldr	r2, [r3, #12]
 80054c8:	4b1c      	ldr	r3, [pc, #112]	@ (800553c <HAL_ADC_Init+0x2cc>)
 80054ca:	4013      	ands	r3, r2
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	6812      	ldr	r2, [r2, #0]
 80054d0:	69b9      	ldr	r1, [r7, #24]
 80054d2:	430b      	orrs	r3, r1
 80054d4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4618      	mov	r0, r3
 80054dc:	f7ff fe18 	bl	8005110 <LL_ADC_REG_IsConversionOngoing>
 80054e0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7ff fe25 	bl	8005136 <LL_ADC_INJ_IsConversionOngoing>
 80054ec:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f040 808e 	bne.w	8005612 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f040 808a 	bne.w	8005612 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a0a      	ldr	r2, [pc, #40]	@ (800552c <HAL_ADC_Init+0x2bc>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d11b      	bne.n	8005540 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	7e1b      	ldrb	r3, [r3, #24]
 800550c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005514:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8005516:	4313      	orrs	r3, r2
 8005518:	61bb      	str	r3, [r7, #24]
 800551a:	e018      	b.n	800554e <HAL_ADC_Init+0x2de>
 800551c:	24000038 	.word	0x24000038
 8005520:	053e2d63 	.word	0x053e2d63
 8005524:	40022000 	.word	0x40022000
 8005528:	40022100 	.word	0x40022100
 800552c:	58026000 	.word	0x58026000
 8005530:	40022300 	.word	0x40022300
 8005534:	58026300 	.word	0x58026300
 8005538:	fff04007 	.word	0xfff04007
 800553c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	7e1b      	ldrb	r3, [r3, #24]
 8005544:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 800554a:	4313      	orrs	r3, r2
 800554c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68da      	ldr	r2, [r3, #12]
 8005554:	4b46      	ldr	r3, [pc, #280]	@ (8005670 <HAL_ADC_Init+0x400>)
 8005556:	4013      	ands	r3, r2
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	6812      	ldr	r2, [r2, #0]
 800555c:	69b9      	ldr	r1, [r7, #24]
 800555e:	430b      	orrs	r3, r1
 8005560:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005568:	2b01      	cmp	r3, #1
 800556a:	d137      	bne.n	80055dc <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005570:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a3f      	ldr	r2, [pc, #252]	@ (8005674 <HAL_ADC_Init+0x404>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d116      	bne.n	80055aa <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	691a      	ldr	r2, [r3, #16]
 8005582:	4b3d      	ldr	r3, [pc, #244]	@ (8005678 <HAL_ADC_Init+0x408>)
 8005584:	4013      	ands	r3, r2
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800558e:	4311      	orrs	r1, r2
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005594:	4311      	orrs	r1, r2
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800559a:	430a      	orrs	r2, r1
 800559c:	431a      	orrs	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f042 0201 	orr.w	r2, r2, #1
 80055a6:	611a      	str	r2, [r3, #16]
 80055a8:	e020      	b.n	80055ec <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	691a      	ldr	r2, [r3, #16]
 80055b0:	4b32      	ldr	r3, [pc, #200]	@ (800567c <HAL_ADC_Init+0x40c>)
 80055b2:	4013      	ands	r3, r2
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80055b8:	3a01      	subs	r2, #1
 80055ba:	0411      	lsls	r1, r2, #16
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80055c0:	4311      	orrs	r1, r2
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80055c6:	4311      	orrs	r1, r2
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80055cc:	430a      	orrs	r2, r1
 80055ce:	431a      	orrs	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f042 0201 	orr.w	r2, r2, #1
 80055d8:	611a      	str	r2, [r3, #16]
 80055da:	e007      	b.n	80055ec <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	691a      	ldr	r2, [r3, #16]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f022 0201 	bic.w	r2, r2, #1
 80055ea:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a1b      	ldr	r2, [pc, #108]	@ (8005674 <HAL_ADC_Init+0x404>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d002      	beq.n	8005612 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f001 fd99 	bl	8007144 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d10c      	bne.n	8005634 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005620:	f023 010f 	bic.w	r1, r3, #15
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	69db      	ldr	r3, [r3, #28]
 8005628:	1e5a      	subs	r2, r3, #1
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	631a      	str	r2, [r3, #48]	@ 0x30
 8005632:	e007      	b.n	8005644 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 020f 	bic.w	r2, r2, #15
 8005642:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005648:	f023 0303 	bic.w	r3, r3, #3
 800564c:	f043 0201 	orr.w	r2, r3, #1
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	661a      	str	r2, [r3, #96]	@ 0x60
 8005654:	e007      	b.n	8005666 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800565a:	f043 0210 	orr.w	r2, r3, #16
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005666:	7ffb      	ldrb	r3, [r7, #31]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3724      	adds	r7, #36	@ 0x24
 800566c:	46bd      	mov	sp, r7
 800566e:	bd90      	pop	{r4, r7, pc}
 8005670:	ffffbffc 	.word	0xffffbffc
 8005674:	58026000 	.word	0x58026000
 8005678:	fc00f81f 	.word	0xfc00f81f
 800567c:	fc00f81e 	.word	0xfc00f81e

08005680 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a60      	ldr	r2, [pc, #384]	@ (8005814 <HAL_ADC_Start_DMA+0x194>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d004      	beq.n	80056a0 <HAL_ADC_Start_DMA+0x20>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a5f      	ldr	r2, [pc, #380]	@ (8005818 <HAL_ADC_Start_DMA+0x198>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d101      	bne.n	80056a4 <HAL_ADC_Start_DMA+0x24>
 80056a0:	4b5e      	ldr	r3, [pc, #376]	@ (800581c <HAL_ADC_Start_DMA+0x19c>)
 80056a2:	e000      	b.n	80056a6 <HAL_ADC_Start_DMA+0x26>
 80056a4:	4b5e      	ldr	r3, [pc, #376]	@ (8005820 <HAL_ADC_Start_DMA+0x1a0>)
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7ff fc66 	bl	8004f78 <LL_ADC_GetMultimode>
 80056ac:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7ff fd2c 	bl	8005110 <LL_ADC_REG_IsConversionOngoing>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f040 80a2 	bne.w	8005804 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d101      	bne.n	80056ce <HAL_ADC_Start_DMA+0x4e>
 80056ca:	2302      	movs	r3, #2
 80056cc:	e09d      	b.n	800580a <HAL_ADC_Start_DMA+0x18a>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d006      	beq.n	80056ea <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	2b05      	cmp	r3, #5
 80056e0:	d003      	beq.n	80056ea <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	2b09      	cmp	r3, #9
 80056e6:	f040 8086 	bne.w	80057f6 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f001 fbac 	bl	8006e48 <ADC_Enable>
 80056f0:	4603      	mov	r3, r0
 80056f2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80056f4:	7dfb      	ldrb	r3, [r7, #23]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d178      	bne.n	80057ec <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80056fe:	4b49      	ldr	r3, [pc, #292]	@ (8005824 <HAL_ADC_Start_DMA+0x1a4>)
 8005700:	4013      	ands	r3, r2
 8005702:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a42      	ldr	r2, [pc, #264]	@ (8005818 <HAL_ADC_Start_DMA+0x198>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d002      	beq.n	800571a <HAL_ADC_Start_DMA+0x9a>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	e000      	b.n	800571c <HAL_ADC_Start_DMA+0x9c>
 800571a:	4b3e      	ldr	r3, [pc, #248]	@ (8005814 <HAL_ADC_Start_DMA+0x194>)
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	6812      	ldr	r2, [r2, #0]
 8005720:	4293      	cmp	r3, r2
 8005722:	d002      	beq.n	800572a <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d105      	bne.n	8005736 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800572e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800573a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d006      	beq.n	8005750 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005746:	f023 0206 	bic.w	r2, r3, #6
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	665a      	str	r2, [r3, #100]	@ 0x64
 800574e:	e002      	b.n	8005756 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800575a:	4a33      	ldr	r2, [pc, #204]	@ (8005828 <HAL_ADC_Start_DMA+0x1a8>)
 800575c:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005762:	4a32      	ldr	r2, [pc, #200]	@ (800582c <HAL_ADC_Start_DMA+0x1ac>)
 8005764:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800576a:	4a31      	ldr	r2, [pc, #196]	@ (8005830 <HAL_ADC_Start_DMA+0x1b0>)
 800576c:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	221c      	movs	r2, #28
 8005774:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f042 0210 	orr.w	r2, r2, #16
 800578c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a28      	ldr	r2, [pc, #160]	@ (8005834 <HAL_ADC_Start_DMA+0x1b4>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d10f      	bne.n	80057b8 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	4619      	mov	r1, r3
 80057a6:	4610      	mov	r0, r2
 80057a8:	f7ff fac2 	bl	8004d30 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7ff faad 	bl	8004d10 <LL_ADC_EnableDMAReq>
 80057b6:	e007      	b.n	80057c8 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c0:	4619      	mov	r1, r3
 80057c2:	4610      	mov	r0, r2
 80057c4:	f7ff fa91 	bl	8004cea <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	3340      	adds	r3, #64	@ 0x40
 80057d2:	4619      	mov	r1, r3
 80057d4:	68ba      	ldr	r2, [r7, #8]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f002 fdcc 	bl	8008374 <HAL_DMA_Start_IT>
 80057dc:	4603      	mov	r3, r0
 80057de:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7ff fc7f 	bl	80050e8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80057ea:	e00d      	b.n	8005808 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 80057f4:	e008      	b.n	8005808 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8005802:	e001      	b.n	8005808 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005804:	2302      	movs	r3, #2
 8005806:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005808:	7dfb      	ldrb	r3, [r7, #23]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3718      	adds	r7, #24
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	40022000 	.word	0x40022000
 8005818:	40022100 	.word	0x40022100
 800581c:	40022300 	.word	0x40022300
 8005820:	58026300 	.word	0x58026300
 8005824:	fffff0fe 	.word	0xfffff0fe
 8005828:	0800701b 	.word	0x0800701b
 800582c:	080070f3 	.word	0x080070f3
 8005830:	0800710f 	.word	0x0800710f
 8005834:	58026000 	.word	0x58026000

08005838 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b08a      	sub	sp, #40	@ 0x28
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005840:	2300      	movs	r3, #0
 8005842:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a87      	ldr	r2, [pc, #540]	@ (8005a78 <HAL_ADC_IRQHandler+0x240>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d004      	beq.n	8005868 <HAL_ADC_IRQHandler+0x30>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a86      	ldr	r2, [pc, #536]	@ (8005a7c <HAL_ADC_IRQHandler+0x244>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d101      	bne.n	800586c <HAL_ADC_IRQHandler+0x34>
 8005868:	4b85      	ldr	r3, [pc, #532]	@ (8005a80 <HAL_ADC_IRQHandler+0x248>)
 800586a:	e000      	b.n	800586e <HAL_ADC_IRQHandler+0x36>
 800586c:	4b85      	ldr	r3, [pc, #532]	@ (8005a84 <HAL_ADC_IRQHandler+0x24c>)
 800586e:	4618      	mov	r0, r3
 8005870:	f7ff fb82 	bl	8004f78 <LL_ADC_GetMultimode>
 8005874:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d017      	beq.n	80058b0 <HAL_ADC_IRQHandler+0x78>
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d012      	beq.n	80058b0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800588e:	f003 0310 	and.w	r3, r3, #16
 8005892:	2b00      	cmp	r3, #0
 8005894:	d105      	bne.n	80058a2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800589a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f001 fee8 	bl	8007678 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2202      	movs	r2, #2
 80058ae:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	f003 0304 	and.w	r3, r3, #4
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d004      	beq.n	80058c4 <HAL_ADC_IRQHandler+0x8c>
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	f003 0304 	and.w	r3, r3, #4
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10a      	bne.n	80058da <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 8083 	beq.w	80059d6 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	f003 0308 	and.w	r3, r3, #8
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d07d      	beq.n	80059d6 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058de:	f003 0310 	and.w	r3, r3, #16
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d105      	bne.n	80058f2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058ea:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7ff f9b8 	bl	8004c6c <LL_ADC_REG_IsTriggerSourceSWStart>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d062      	beq.n	80059c8 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a5d      	ldr	r2, [pc, #372]	@ (8005a7c <HAL_ADC_IRQHandler+0x244>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d002      	beq.n	8005912 <HAL_ADC_IRQHandler+0xda>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	e000      	b.n	8005914 <HAL_ADC_IRQHandler+0xdc>
 8005912:	4b59      	ldr	r3, [pc, #356]	@ (8005a78 <HAL_ADC_IRQHandler+0x240>)
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	6812      	ldr	r2, [r2, #0]
 8005918:	4293      	cmp	r3, r2
 800591a:	d008      	beq.n	800592e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d005      	beq.n	800592e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2b05      	cmp	r3, #5
 8005926:	d002      	beq.n	800592e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	2b09      	cmp	r3, #9
 800592c:	d104      	bne.n	8005938 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	623b      	str	r3, [r7, #32]
 8005936:	e00c      	b.n	8005952 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a4f      	ldr	r2, [pc, #316]	@ (8005a7c <HAL_ADC_IRQHandler+0x244>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d002      	beq.n	8005948 <HAL_ADC_IRQHandler+0x110>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	e000      	b.n	800594a <HAL_ADC_IRQHandler+0x112>
 8005948:	4b4b      	ldr	r3, [pc, #300]	@ (8005a78 <HAL_ADC_IRQHandler+0x240>)
 800594a:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d135      	bne.n	80059c8 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0308 	and.w	r3, r3, #8
 8005966:	2b08      	cmp	r3, #8
 8005968:	d12e      	bne.n	80059c8 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4618      	mov	r0, r3
 8005970:	f7ff fbce 	bl	8005110 <LL_ADC_REG_IsConversionOngoing>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d11a      	bne.n	80059b0 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 020c 	bic.w	r2, r2, #12
 8005988:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800598e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800599a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d112      	bne.n	80059c8 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059a6:	f043 0201 	orr.w	r2, r3, #1
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	661a      	str	r2, [r3, #96]	@ 0x60
 80059ae:	e00b      	b.n	80059c8 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059b4:	f043 0210 	orr.w	r2, r3, #16
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059c0:	f043 0201 	orr.w	r2, r3, #1
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f7fc faaf 	bl	8001f2c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	220c      	movs	r2, #12
 80059d4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	f003 0320 	and.w	r3, r3, #32
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d004      	beq.n	80059ea <HAL_ADC_IRQHandler+0x1b2>
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	f003 0320 	and.w	r3, r3, #32
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10b      	bne.n	8005a02 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 80a0 	beq.w	8005b36 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f000 809a 	beq.w	8005b36 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a06:	f003 0310 	and.w	r3, r3, #16
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d105      	bne.n	8005a1a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a12:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7ff f9a0 	bl	8004d64 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005a24:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7ff f91e 	bl	8004c6c <LL_ADC_REG_IsTriggerSourceSWStart>
 8005a30:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a11      	ldr	r2, [pc, #68]	@ (8005a7c <HAL_ADC_IRQHandler+0x244>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d002      	beq.n	8005a42 <HAL_ADC_IRQHandler+0x20a>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	e000      	b.n	8005a44 <HAL_ADC_IRQHandler+0x20c>
 8005a42:	4b0d      	ldr	r3, [pc, #52]	@ (8005a78 <HAL_ADC_IRQHandler+0x240>)
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	6812      	ldr	r2, [r2, #0]
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d008      	beq.n	8005a5e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d005      	beq.n	8005a5e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	2b06      	cmp	r3, #6
 8005a56:	d002      	beq.n	8005a5e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	2b07      	cmp	r3, #7
 8005a5c:	d104      	bne.n	8005a68 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	623b      	str	r3, [r7, #32]
 8005a66:	e014      	b.n	8005a92 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a03      	ldr	r2, [pc, #12]	@ (8005a7c <HAL_ADC_IRQHandler+0x244>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d00a      	beq.n	8005a88 <HAL_ADC_IRQHandler+0x250>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	e008      	b.n	8005a8a <HAL_ADC_IRQHandler+0x252>
 8005a78:	40022000 	.word	0x40022000
 8005a7c:	40022100 	.word	0x40022100
 8005a80:	40022300 	.word	0x40022300
 8005a84:	58026300 	.word	0x58026300
 8005a88:	4b84      	ldr	r3, [pc, #528]	@ (8005c9c <HAL_ADC_IRQHandler+0x464>)
 8005a8a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d047      	beq.n	8005b28 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005a98:	6a3b      	ldr	r3, [r7, #32]
 8005a9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d007      	beq.n	8005ab2 <HAL_ADC_IRQHandler+0x27a>
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d03f      	beq.n	8005b28 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d13a      	bne.n	8005b28 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005abc:	2b40      	cmp	r3, #64	@ 0x40
 8005abe:	d133      	bne.n	8005b28 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d12e      	bne.n	8005b28 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7ff fb31 	bl	8005136 <LL_ADC_INJ_IsConversionOngoing>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d11a      	bne.n	8005b10 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005ae8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d112      	bne.n	8005b28 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b06:	f043 0201 	orr.w	r2, r3, #1
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	661a      	str	r2, [r3, #96]	@ 0x60
 8005b0e:	e00b      	b.n	8005b28 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b14:	f043 0210 	orr.w	r2, r3, #16
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b20:	f043 0201 	orr.w	r2, r3, #1
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f001 fd7d 	bl	8007628 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2260      	movs	r2, #96	@ 0x60
 8005b34:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d011      	beq.n	8005b64 <HAL_ADC_IRQHandler+0x32c>
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00c      	beq.n	8005b64 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b4e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f8b2 	bl	8005cc0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2280      	movs	r2, #128	@ 0x80
 8005b62:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d012      	beq.n	8005b94 <HAL_ADC_IRQHandler+0x35c>
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00d      	beq.n	8005b94 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b7c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f001 fd63 	bl	8007650 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b92:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d012      	beq.n	8005bc4 <HAL_ADC_IRQHandler+0x38c>
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00d      	beq.n	8005bc4 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bac:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f001 fd55 	bl	8007664 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bc2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	f003 0310 	and.w	r3, r3, #16
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d043      	beq.n	8005c56 <HAL_ADC_IRQHandler+0x41e>
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	f003 0310 	and.w	r3, r3, #16
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d03e      	beq.n	8005c56 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d102      	bne.n	8005be6 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8005be0:	2301      	movs	r3, #1
 8005be2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005be4:	e021      	b.n	8005c2a <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d015      	beq.n	8005c18 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a2a      	ldr	r2, [pc, #168]	@ (8005c9c <HAL_ADC_IRQHandler+0x464>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d004      	beq.n	8005c00 <HAL_ADC_IRQHandler+0x3c8>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a29      	ldr	r2, [pc, #164]	@ (8005ca0 <HAL_ADC_IRQHandler+0x468>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d101      	bne.n	8005c04 <HAL_ADC_IRQHandler+0x3cc>
 8005c00:	4b28      	ldr	r3, [pc, #160]	@ (8005ca4 <HAL_ADC_IRQHandler+0x46c>)
 8005c02:	e000      	b.n	8005c06 <HAL_ADC_IRQHandler+0x3ce>
 8005c04:	4b28      	ldr	r3, [pc, #160]	@ (8005ca8 <HAL_ADC_IRQHandler+0x470>)
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7ff f9c4 	bl	8004f94 <LL_ADC_GetMultiDMATransfer>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00b      	beq.n	8005c2a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8005c12:	2301      	movs	r3, #1
 8005c14:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c16:	e008      	b.n	8005c2a <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	f003 0303 	and.w	r3, r3, #3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8005c26:	2301      	movs	r3, #1
 8005c28:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d10e      	bne.n	8005c4e <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c34:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c40:	f043 0202 	orr.w	r2, r3, #2
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f7fc f943 	bl	8001ed4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2210      	movs	r2, #16
 8005c54:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d018      	beq.n	8005c92 <HAL_ADC_IRQHandler+0x45a>
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d013      	beq.n	8005c92 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c6e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c7a:	f043 0208 	orr.w	r2, r3, #8
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005c8a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f001 fcd5 	bl	800763c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005c92:	bf00      	nop
 8005c94:	3728      	adds	r7, #40	@ 0x28
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	40022000 	.word	0x40022000
 8005ca0:	40022100 	.word	0x40022100
 8005ca4:	40022300 	.word	0x40022300
 8005ca8:	58026300 	.word	0x58026300

08005cac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005cd4:	b590      	push	{r4, r7, lr}
 8005cd6:	b0b9      	sub	sp, #228	@ 0xe4
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005cee:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	4aa9      	ldr	r2, [pc, #676]	@ (8005f9c <HAL_ADC_ConfigChannel+0x2c8>)
 8005cf6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d102      	bne.n	8005d08 <HAL_ADC_ConfigChannel+0x34>
 8005d02:	2302      	movs	r3, #2
 8005d04:	f000 bcfa 	b.w	80066fc <HAL_ADC_ConfigChannel+0xa28>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7ff f9fb 	bl	8005110 <LL_ADC_REG_IsConversionOngoing>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f040 84de 	bne.w	80066de <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a9e      	ldr	r2, [pc, #632]	@ (8005fa0 <HAL_ADC_ConfigChannel+0x2cc>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d033      	beq.n	8005d94 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d108      	bne.n	8005d4a <HAL_ADC_ConfigChannel+0x76>
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	0e9b      	lsrs	r3, r3, #26
 8005d3e:	f003 031f 	and.w	r3, r3, #31
 8005d42:	2201      	movs	r2, #1
 8005d44:	fa02 f303 	lsl.w	r3, r2, r3
 8005d48:	e01d      	b.n	8005d86 <HAL_ADC_ConfigChannel+0xb2>
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d56:	fa93 f3a3 	rbit	r3, r3
 8005d5a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005d5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005d62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005d66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8005d6e:	2320      	movs	r3, #32
 8005d70:	e004      	b.n	8005d7c <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8005d72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005d76:	fab3 f383 	clz	r3, r3
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	f003 031f 	and.w	r3, r3, #31
 8005d80:	2201      	movs	r2, #1
 8005d82:	fa02 f303 	lsl.w	r3, r2, r3
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	6812      	ldr	r2, [r2, #0]
 8005d8a:	69d1      	ldr	r1, [r2, #28]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	6812      	ldr	r2, [r2, #0]
 8005d90:	430b      	orrs	r3, r1
 8005d92:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6818      	ldr	r0, [r3, #0]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	6859      	ldr	r1, [r3, #4]
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	461a      	mov	r2, r3
 8005da2:	f7fe ff76 	bl	8004c92 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7ff f9b0 	bl	8005110 <LL_ADC_REG_IsConversionOngoing>
 8005db0:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7ff f9bc 	bl	8005136 <LL_ADC_INJ_IsConversionOngoing>
 8005dbe:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005dc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f040 8270 	bne.w	80062ac <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005dcc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f040 826b 	bne.w	80062ac <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6818      	ldr	r0, [r3, #0]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	6819      	ldr	r1, [r3, #0]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	461a      	mov	r2, r3
 8005de4:	f7fe ffd1 	bl	8004d8a <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a6c      	ldr	r2, [pc, #432]	@ (8005fa0 <HAL_ADC_ConfigChannel+0x2cc>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d10d      	bne.n	8005e0e <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	695a      	ldr	r2, [r3, #20]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	08db      	lsrs	r3, r3, #3
 8005dfe:	f003 0303 	and.w	r3, r3, #3
 8005e02:	005b      	lsls	r3, r3, #1
 8005e04:	fa02 f303 	lsl.w	r3, r2, r3
 8005e08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e0c:	e032      	b.n	8005e74 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005e0e:	4b65      	ldr	r3, [pc, #404]	@ (8005fa4 <HAL_ADC_ConfigChannel+0x2d0>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005e16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e1a:	d10b      	bne.n	8005e34 <HAL_ADC_ConfigChannel+0x160>
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	695a      	ldr	r2, [r3, #20]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	089b      	lsrs	r3, r3, #2
 8005e28:	f003 0307 	and.w	r3, r3, #7
 8005e2c:	005b      	lsls	r3, r3, #1
 8005e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e32:	e01d      	b.n	8005e70 <HAL_ADC_ConfigChannel+0x19c>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	f003 0310 	and.w	r3, r3, #16
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d10b      	bne.n	8005e5a <HAL_ADC_ConfigChannel+0x186>
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	695a      	ldr	r2, [r3, #20]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	089b      	lsrs	r3, r3, #2
 8005e4e:	f003 0307 	and.w	r3, r3, #7
 8005e52:	005b      	lsls	r3, r3, #1
 8005e54:	fa02 f303 	lsl.w	r3, r2, r3
 8005e58:	e00a      	b.n	8005e70 <HAL_ADC_ConfigChannel+0x19c>
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	695a      	ldr	r2, [r3, #20]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	089b      	lsrs	r3, r3, #2
 8005e66:	f003 0304 	and.w	r3, r3, #4
 8005e6a:	005b      	lsls	r3, r3, #1
 8005e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	2b04      	cmp	r3, #4
 8005e7a:	d048      	beq.n	8005f0e <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6818      	ldr	r0, [r3, #0]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	6919      	ldr	r1, [r3, #16]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e8c:	f7fe fdfc 	bl	8004a88 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a42      	ldr	r2, [pc, #264]	@ (8005fa0 <HAL_ADC_ConfigChannel+0x2cc>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d119      	bne.n	8005ece <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6818      	ldr	r0, [r3, #0]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	6919      	ldr	r1, [r3, #16]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	f7fe fe94 	bl	8004bd4 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6818      	ldr	r0, [r3, #0]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	6919      	ldr	r1, [r3, #16]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d102      	bne.n	8005ec4 <HAL_ADC_ConfigChannel+0x1f0>
 8005ebe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ec2:	e000      	b.n	8005ec6 <HAL_ADC_ConfigChannel+0x1f2>
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	f7fe fe62 	bl	8004b90 <LL_ADC_SetOffsetSaturation>
 8005ecc:	e1ee      	b.n	80062ac <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6818      	ldr	r0, [r3, #0]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	6919      	ldr	r1, [r3, #16]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d102      	bne.n	8005ee6 <HAL_ADC_ConfigChannel+0x212>
 8005ee0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005ee4:	e000      	b.n	8005ee8 <HAL_ADC_ConfigChannel+0x214>
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	461a      	mov	r2, r3
 8005eea:	f7fe fe2f 	bl	8004b4c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6818      	ldr	r0, [r3, #0]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	6919      	ldr	r1, [r3, #16]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	7e1b      	ldrb	r3, [r3, #24]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d102      	bne.n	8005f04 <HAL_ADC_ConfigChannel+0x230>
 8005efe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005f02:	e000      	b.n	8005f06 <HAL_ADC_ConfigChannel+0x232>
 8005f04:	2300      	movs	r3, #0
 8005f06:	461a      	mov	r2, r3
 8005f08:	f7fe fe06 	bl	8004b18 <LL_ADC_SetDataRightShift>
 8005f0c:	e1ce      	b.n	80062ac <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a23      	ldr	r2, [pc, #140]	@ (8005fa0 <HAL_ADC_ConfigChannel+0x2cc>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	f040 8181 	bne.w	800621c <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2100      	movs	r1, #0
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7fe fde3 	bl	8004aec <LL_ADC_GetOffsetChannel>
 8005f26:	4603      	mov	r3, r0
 8005f28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10a      	bne.n	8005f46 <HAL_ADC_ConfigChannel+0x272>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2100      	movs	r1, #0
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7fe fdd8 	bl	8004aec <LL_ADC_GetOffsetChannel>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	0e9b      	lsrs	r3, r3, #26
 8005f40:	f003 021f 	and.w	r2, r3, #31
 8005f44:	e01e      	b.n	8005f84 <HAL_ADC_ConfigChannel+0x2b0>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7fe fdcd 	bl	8004aec <LL_ADC_GetOffsetChannel>
 8005f52:	4603      	mov	r3, r0
 8005f54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005f5c:	fa93 f3a3 	rbit	r3, r3
 8005f60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8005f64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005f68:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8005f6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8005f74:	2320      	movs	r3, #32
 8005f76:	e004      	b.n	8005f82 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8005f78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005f7c:	fab3 f383 	clz	r3, r3
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	461a      	mov	r2, r3
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10b      	bne.n	8005fa8 <HAL_ADC_ConfigChannel+0x2d4>
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	0e9b      	lsrs	r3, r3, #26
 8005f96:	f003 031f 	and.w	r3, r3, #31
 8005f9a:	e01e      	b.n	8005fda <HAL_ADC_ConfigChannel+0x306>
 8005f9c:	47ff0000 	.word	0x47ff0000
 8005fa0:	58026000 	.word	0x58026000
 8005fa4:	5c001000 	.word	0x5c001000
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005fb4:	fa93 f3a3 	rbit	r3, r3
 8005fb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8005fbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005fc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8005fc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8005fcc:	2320      	movs	r3, #32
 8005fce:	e004      	b.n	8005fda <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8005fd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005fd4:	fab3 f383 	clz	r3, r3
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d106      	bne.n	8005fec <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7fe fe16 	bl	8004c18 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2101      	movs	r1, #1
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7fe fd7a 	bl	8004aec <LL_ADC_GetOffsetChannel>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10a      	bne.n	8006018 <HAL_ADC_ConfigChannel+0x344>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2101      	movs	r1, #1
 8006008:	4618      	mov	r0, r3
 800600a:	f7fe fd6f 	bl	8004aec <LL_ADC_GetOffsetChannel>
 800600e:	4603      	mov	r3, r0
 8006010:	0e9b      	lsrs	r3, r3, #26
 8006012:	f003 021f 	and.w	r2, r3, #31
 8006016:	e01e      	b.n	8006056 <HAL_ADC_ConfigChannel+0x382>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2101      	movs	r1, #1
 800601e:	4618      	mov	r0, r3
 8006020:	f7fe fd64 	bl	8004aec <LL_ADC_GetOffsetChannel>
 8006024:	4603      	mov	r3, r0
 8006026:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800602a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800602e:	fa93 f3a3 	rbit	r3, r3
 8006032:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8006036:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800603a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800603e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8006046:	2320      	movs	r3, #32
 8006048:	e004      	b.n	8006054 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800604a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800604e:	fab3 f383 	clz	r3, r3
 8006052:	b2db      	uxtb	r3, r3
 8006054:	461a      	mov	r2, r3
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800605e:	2b00      	cmp	r3, #0
 8006060:	d105      	bne.n	800606e <HAL_ADC_ConfigChannel+0x39a>
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	0e9b      	lsrs	r3, r3, #26
 8006068:	f003 031f 	and.w	r3, r3, #31
 800606c:	e018      	b.n	80060a0 <HAL_ADC_ConfigChannel+0x3cc>
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006076:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800607a:	fa93 f3a3 	rbit	r3, r3
 800607e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8006082:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006086:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800608a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8006092:	2320      	movs	r3, #32
 8006094:	e004      	b.n	80060a0 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8006096:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800609a:	fab3 f383 	clz	r3, r3
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d106      	bne.n	80060b2 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2200      	movs	r2, #0
 80060aa:	2101      	movs	r1, #1
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7fe fdb3 	bl	8004c18 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2102      	movs	r1, #2
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7fe fd17 	bl	8004aec <LL_ADC_GetOffsetChannel>
 80060be:	4603      	mov	r3, r0
 80060c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d10a      	bne.n	80060de <HAL_ADC_ConfigChannel+0x40a>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2102      	movs	r1, #2
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7fe fd0c 	bl	8004aec <LL_ADC_GetOffsetChannel>
 80060d4:	4603      	mov	r3, r0
 80060d6:	0e9b      	lsrs	r3, r3, #26
 80060d8:	f003 021f 	and.w	r2, r3, #31
 80060dc:	e01e      	b.n	800611c <HAL_ADC_ConfigChannel+0x448>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2102      	movs	r1, #2
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7fe fd01 	bl	8004aec <LL_ADC_GetOffsetChannel>
 80060ea:	4603      	mov	r3, r0
 80060ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80060f4:	fa93 f3a3 	rbit	r3, r3
 80060f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80060fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006100:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8006104:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006108:	2b00      	cmp	r3, #0
 800610a:	d101      	bne.n	8006110 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 800610c:	2320      	movs	r3, #32
 800610e:	e004      	b.n	800611a <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8006110:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006114:	fab3 f383 	clz	r3, r3
 8006118:	b2db      	uxtb	r3, r3
 800611a:	461a      	mov	r2, r3
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006124:	2b00      	cmp	r3, #0
 8006126:	d105      	bne.n	8006134 <HAL_ADC_ConfigChannel+0x460>
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	0e9b      	lsrs	r3, r3, #26
 800612e:	f003 031f 	and.w	r3, r3, #31
 8006132:	e014      	b.n	800615e <HAL_ADC_ConfigChannel+0x48a>
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800613a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800613c:	fa93 f3a3 	rbit	r3, r3
 8006140:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8006142:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006144:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8006148:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800614c:	2b00      	cmp	r3, #0
 800614e:	d101      	bne.n	8006154 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8006150:	2320      	movs	r3, #32
 8006152:	e004      	b.n	800615e <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8006154:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006158:	fab3 f383 	clz	r3, r3
 800615c:	b2db      	uxtb	r3, r3
 800615e:	429a      	cmp	r2, r3
 8006160:	d106      	bne.n	8006170 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2200      	movs	r2, #0
 8006168:	2102      	movs	r1, #2
 800616a:	4618      	mov	r0, r3
 800616c:	f7fe fd54 	bl	8004c18 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2103      	movs	r1, #3
 8006176:	4618      	mov	r0, r3
 8006178:	f7fe fcb8 	bl	8004aec <LL_ADC_GetOffsetChannel>
 800617c:	4603      	mov	r3, r0
 800617e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10a      	bne.n	800619c <HAL_ADC_ConfigChannel+0x4c8>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2103      	movs	r1, #3
 800618c:	4618      	mov	r0, r3
 800618e:	f7fe fcad 	bl	8004aec <LL_ADC_GetOffsetChannel>
 8006192:	4603      	mov	r3, r0
 8006194:	0e9b      	lsrs	r3, r3, #26
 8006196:	f003 021f 	and.w	r2, r3, #31
 800619a:	e017      	b.n	80061cc <HAL_ADC_ConfigChannel+0x4f8>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2103      	movs	r1, #3
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fe fca2 	bl	8004aec <LL_ADC_GetOffsetChannel>
 80061a8:	4603      	mov	r3, r0
 80061aa:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80061ae:	fa93 f3a3 	rbit	r3, r3
 80061b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80061b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80061b6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80061b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d101      	bne.n	80061c2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80061be:	2320      	movs	r3, #32
 80061c0:	e003      	b.n	80061ca <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80061c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80061c4:	fab3 f383 	clz	r3, r3
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	461a      	mov	r2, r3
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d105      	bne.n	80061e4 <HAL_ADC_ConfigChannel+0x510>
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	0e9b      	lsrs	r3, r3, #26
 80061de:	f003 031f 	and.w	r3, r3, #31
 80061e2:	e011      	b.n	8006208 <HAL_ADC_ConfigChannel+0x534>
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061ec:	fa93 f3a3 	rbit	r3, r3
 80061f0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80061f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80061f4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80061f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d101      	bne.n	8006200 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80061fc:	2320      	movs	r3, #32
 80061fe:	e003      	b.n	8006208 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8006200:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006202:	fab3 f383 	clz	r3, r3
 8006206:	b2db      	uxtb	r3, r3
 8006208:	429a      	cmp	r2, r3
 800620a:	d14f      	bne.n	80062ac <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2200      	movs	r2, #0
 8006212:	2103      	movs	r1, #3
 8006214:	4618      	mov	r0, r3
 8006216:	f7fe fcff 	bl	8004c18 <LL_ADC_SetOffsetState>
 800621a:	e047      	b.n	80062ac <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006222:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	069b      	lsls	r3, r3, #26
 800622c:	429a      	cmp	r2, r3
 800622e:	d107      	bne.n	8006240 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800623e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006246:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	069b      	lsls	r3, r3, #26
 8006250:	429a      	cmp	r2, r3
 8006252:	d107      	bne.n	8006264 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8006262:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800626a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	069b      	lsls	r3, r3, #26
 8006274:	429a      	cmp	r2, r3
 8006276:	d107      	bne.n	8006288 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8006286:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800628e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	069b      	lsls	r3, r3, #26
 8006298:	429a      	cmp	r2, r3
 800629a:	d107      	bne.n	80062ac <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80062aa:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4618      	mov	r0, r3
 80062b2:	f7fe fef3 	bl	800509c <LL_ADC_IsEnabled>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	f040 8219 	bne.w	80066f0 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6818      	ldr	r0, [r3, #0]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	6819      	ldr	r1, [r3, #0]
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	461a      	mov	r2, r3
 80062cc:	f7fe fd88 	bl	8004de0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	4aa1      	ldr	r2, [pc, #644]	@ (800655c <HAL_ADC_ConfigChannel+0x888>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	f040 812e 	bne.w	8006538 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10b      	bne.n	8006304 <HAL_ADC_ConfigChannel+0x630>
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	0e9b      	lsrs	r3, r3, #26
 80062f2:	3301      	adds	r3, #1
 80062f4:	f003 031f 	and.w	r3, r3, #31
 80062f8:	2b09      	cmp	r3, #9
 80062fa:	bf94      	ite	ls
 80062fc:	2301      	movls	r3, #1
 80062fe:	2300      	movhi	r3, #0
 8006300:	b2db      	uxtb	r3, r3
 8006302:	e019      	b.n	8006338 <HAL_ADC_ConfigChannel+0x664>
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800630a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800630c:	fa93 f3a3 	rbit	r3, r3
 8006310:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8006312:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006314:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8006316:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 800631c:	2320      	movs	r3, #32
 800631e:	e003      	b.n	8006328 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8006320:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006322:	fab3 f383 	clz	r3, r3
 8006326:	b2db      	uxtb	r3, r3
 8006328:	3301      	adds	r3, #1
 800632a:	f003 031f 	and.w	r3, r3, #31
 800632e:	2b09      	cmp	r3, #9
 8006330:	bf94      	ite	ls
 8006332:	2301      	movls	r3, #1
 8006334:	2300      	movhi	r3, #0
 8006336:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006338:	2b00      	cmp	r3, #0
 800633a:	d079      	beq.n	8006430 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006344:	2b00      	cmp	r3, #0
 8006346:	d107      	bne.n	8006358 <HAL_ADC_ConfigChannel+0x684>
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	0e9b      	lsrs	r3, r3, #26
 800634e:	3301      	adds	r3, #1
 8006350:	069b      	lsls	r3, r3, #26
 8006352:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006356:	e015      	b.n	8006384 <HAL_ADC_ConfigChannel+0x6b0>
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800635e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006360:	fa93 f3a3 	rbit	r3, r3
 8006364:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8006366:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006368:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800636a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800636c:	2b00      	cmp	r3, #0
 800636e:	d101      	bne.n	8006374 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8006370:	2320      	movs	r3, #32
 8006372:	e003      	b.n	800637c <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8006374:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006376:	fab3 f383 	clz	r3, r3
 800637a:	b2db      	uxtb	r3, r3
 800637c:	3301      	adds	r3, #1
 800637e:	069b      	lsls	r3, r3, #26
 8006380:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800638c:	2b00      	cmp	r3, #0
 800638e:	d109      	bne.n	80063a4 <HAL_ADC_ConfigChannel+0x6d0>
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	0e9b      	lsrs	r3, r3, #26
 8006396:	3301      	adds	r3, #1
 8006398:	f003 031f 	and.w	r3, r3, #31
 800639c:	2101      	movs	r1, #1
 800639e:	fa01 f303 	lsl.w	r3, r1, r3
 80063a2:	e017      	b.n	80063d4 <HAL_ADC_ConfigChannel+0x700>
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063ac:	fa93 f3a3 	rbit	r3, r3
 80063b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80063b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063b4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80063b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d101      	bne.n	80063c0 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 80063bc:	2320      	movs	r3, #32
 80063be:	e003      	b.n	80063c8 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 80063c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063c2:	fab3 f383 	clz	r3, r3
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	3301      	adds	r3, #1
 80063ca:	f003 031f 	and.w	r3, r3, #31
 80063ce:	2101      	movs	r1, #1
 80063d0:	fa01 f303 	lsl.w	r3, r1, r3
 80063d4:	ea42 0103 	orr.w	r1, r2, r3
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10a      	bne.n	80063fa <HAL_ADC_ConfigChannel+0x726>
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	0e9b      	lsrs	r3, r3, #26
 80063ea:	3301      	adds	r3, #1
 80063ec:	f003 021f 	and.w	r2, r3, #31
 80063f0:	4613      	mov	r3, r2
 80063f2:	005b      	lsls	r3, r3, #1
 80063f4:	4413      	add	r3, r2
 80063f6:	051b      	lsls	r3, r3, #20
 80063f8:	e018      	b.n	800642c <HAL_ADC_ConfigChannel+0x758>
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006402:	fa93 f3a3 	rbit	r3, r3
 8006406:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8006408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800640c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800640e:	2b00      	cmp	r3, #0
 8006410:	d101      	bne.n	8006416 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8006412:	2320      	movs	r3, #32
 8006414:	e003      	b.n	800641e <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8006416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006418:	fab3 f383 	clz	r3, r3
 800641c:	b2db      	uxtb	r3, r3
 800641e:	3301      	adds	r3, #1
 8006420:	f003 021f 	and.w	r2, r3, #31
 8006424:	4613      	mov	r3, r2
 8006426:	005b      	lsls	r3, r3, #1
 8006428:	4413      	add	r3, r2
 800642a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800642c:	430b      	orrs	r3, r1
 800642e:	e07e      	b.n	800652e <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006438:	2b00      	cmp	r3, #0
 800643a:	d107      	bne.n	800644c <HAL_ADC_ConfigChannel+0x778>
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	0e9b      	lsrs	r3, r3, #26
 8006442:	3301      	adds	r3, #1
 8006444:	069b      	lsls	r3, r3, #26
 8006446:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800644a:	e015      	b.n	8006478 <HAL_ADC_ConfigChannel+0x7a4>
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006454:	fa93 f3a3 	rbit	r3, r3
 8006458:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800645a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800645e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8006464:	2320      	movs	r3, #32
 8006466:	e003      	b.n	8006470 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8006468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800646a:	fab3 f383 	clz	r3, r3
 800646e:	b2db      	uxtb	r3, r3
 8006470:	3301      	adds	r3, #1
 8006472:	069b      	lsls	r3, r3, #26
 8006474:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006480:	2b00      	cmp	r3, #0
 8006482:	d109      	bne.n	8006498 <HAL_ADC_ConfigChannel+0x7c4>
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	0e9b      	lsrs	r3, r3, #26
 800648a:	3301      	adds	r3, #1
 800648c:	f003 031f 	and.w	r3, r3, #31
 8006490:	2101      	movs	r1, #1
 8006492:	fa01 f303 	lsl.w	r3, r1, r3
 8006496:	e017      	b.n	80064c8 <HAL_ADC_ConfigChannel+0x7f4>
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	fa93 f3a3 	rbit	r3, r3
 80064a4:	61bb      	str	r3, [r7, #24]
  return result;
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80064aa:	6a3b      	ldr	r3, [r7, #32]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d101      	bne.n	80064b4 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80064b0:	2320      	movs	r3, #32
 80064b2:	e003      	b.n	80064bc <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 80064b4:	6a3b      	ldr	r3, [r7, #32]
 80064b6:	fab3 f383 	clz	r3, r3
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	3301      	adds	r3, #1
 80064be:	f003 031f 	and.w	r3, r3, #31
 80064c2:	2101      	movs	r1, #1
 80064c4:	fa01 f303 	lsl.w	r3, r1, r3
 80064c8:	ea42 0103 	orr.w	r1, r2, r3
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10d      	bne.n	80064f4 <HAL_ADC_ConfigChannel+0x820>
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	0e9b      	lsrs	r3, r3, #26
 80064de:	3301      	adds	r3, #1
 80064e0:	f003 021f 	and.w	r2, r3, #31
 80064e4:	4613      	mov	r3, r2
 80064e6:	005b      	lsls	r3, r3, #1
 80064e8:	4413      	add	r3, r2
 80064ea:	3b1e      	subs	r3, #30
 80064ec:	051b      	lsls	r3, r3, #20
 80064ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80064f2:	e01b      	b.n	800652c <HAL_ADC_ConfigChannel+0x858>
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	fa93 f3a3 	rbit	r3, r3
 8006500:	60fb      	str	r3, [r7, #12]
  return result;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 800650c:	2320      	movs	r3, #32
 800650e:	e003      	b.n	8006518 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	fab3 f383 	clz	r3, r3
 8006516:	b2db      	uxtb	r3, r3
 8006518:	3301      	adds	r3, #1
 800651a:	f003 021f 	and.w	r2, r3, #31
 800651e:	4613      	mov	r3, r2
 8006520:	005b      	lsls	r3, r3, #1
 8006522:	4413      	add	r3, r2
 8006524:	3b1e      	subs	r3, #30
 8006526:	051b      	lsls	r3, r3, #20
 8006528:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800652c:	430b      	orrs	r3, r1
 800652e:	683a      	ldr	r2, [r7, #0]
 8006530:	6892      	ldr	r2, [r2, #8]
 8006532:	4619      	mov	r1, r3
 8006534:	f7fe fc29 	bl	8004d8a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	f280 80d7 	bge.w	80066f0 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a06      	ldr	r2, [pc, #24]	@ (8006560 <HAL_ADC_ConfigChannel+0x88c>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d004      	beq.n	8006556 <HAL_ADC_ConfigChannel+0x882>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a04      	ldr	r2, [pc, #16]	@ (8006564 <HAL_ADC_ConfigChannel+0x890>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d10a      	bne.n	800656c <HAL_ADC_ConfigChannel+0x898>
 8006556:	4b04      	ldr	r3, [pc, #16]	@ (8006568 <HAL_ADC_ConfigChannel+0x894>)
 8006558:	e009      	b.n	800656e <HAL_ADC_ConfigChannel+0x89a>
 800655a:	bf00      	nop
 800655c:	47ff0000 	.word	0x47ff0000
 8006560:	40022000 	.word	0x40022000
 8006564:	40022100 	.word	0x40022100
 8006568:	40022300 	.word	0x40022300
 800656c:	4b65      	ldr	r3, [pc, #404]	@ (8006704 <HAL_ADC_ConfigChannel+0xa30>)
 800656e:	4618      	mov	r0, r3
 8006570:	f7fe fa7c 	bl	8004a6c <LL_ADC_GetCommonPathInternalCh>
 8006574:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a62      	ldr	r2, [pc, #392]	@ (8006708 <HAL_ADC_ConfigChannel+0xa34>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d004      	beq.n	800658c <HAL_ADC_ConfigChannel+0x8b8>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a61      	ldr	r2, [pc, #388]	@ (800670c <HAL_ADC_ConfigChannel+0xa38>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d10e      	bne.n	80065aa <HAL_ADC_ConfigChannel+0x8d6>
 800658c:	485e      	ldr	r0, [pc, #376]	@ (8006708 <HAL_ADC_ConfigChannel+0xa34>)
 800658e:	f7fe fd85 	bl	800509c <LL_ADC_IsEnabled>
 8006592:	4604      	mov	r4, r0
 8006594:	485d      	ldr	r0, [pc, #372]	@ (800670c <HAL_ADC_ConfigChannel+0xa38>)
 8006596:	f7fe fd81 	bl	800509c <LL_ADC_IsEnabled>
 800659a:	4603      	mov	r3, r0
 800659c:	4323      	orrs	r3, r4
 800659e:	2b00      	cmp	r3, #0
 80065a0:	bf0c      	ite	eq
 80065a2:	2301      	moveq	r3, #1
 80065a4:	2300      	movne	r3, #0
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	e008      	b.n	80065bc <HAL_ADC_ConfigChannel+0x8e8>
 80065aa:	4859      	ldr	r0, [pc, #356]	@ (8006710 <HAL_ADC_ConfigChannel+0xa3c>)
 80065ac:	f7fe fd76 	bl	800509c <LL_ADC_IsEnabled>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	bf0c      	ite	eq
 80065b6:	2301      	moveq	r3, #1
 80065b8:	2300      	movne	r3, #0
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f000 8084 	beq.w	80066ca <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a53      	ldr	r2, [pc, #332]	@ (8006714 <HAL_ADC_ConfigChannel+0xa40>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d132      	bne.n	8006632 <HAL_ADC_ConfigChannel+0x95e>
 80065cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d12c      	bne.n	8006632 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a4c      	ldr	r2, [pc, #304]	@ (8006710 <HAL_ADC_ConfigChannel+0xa3c>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	f040 8086 	bne.w	80066f0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a47      	ldr	r2, [pc, #284]	@ (8006708 <HAL_ADC_ConfigChannel+0xa34>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d004      	beq.n	80065f8 <HAL_ADC_ConfigChannel+0x924>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a46      	ldr	r2, [pc, #280]	@ (800670c <HAL_ADC_ConfigChannel+0xa38>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d101      	bne.n	80065fc <HAL_ADC_ConfigChannel+0x928>
 80065f8:	4a47      	ldr	r2, [pc, #284]	@ (8006718 <HAL_ADC_ConfigChannel+0xa44>)
 80065fa:	e000      	b.n	80065fe <HAL_ADC_ConfigChannel+0x92a>
 80065fc:	4a41      	ldr	r2, [pc, #260]	@ (8006704 <HAL_ADC_ConfigChannel+0xa30>)
 80065fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006602:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006606:	4619      	mov	r1, r3
 8006608:	4610      	mov	r0, r2
 800660a:	f7fe fa1c 	bl	8004a46 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800660e:	4b43      	ldr	r3, [pc, #268]	@ (800671c <HAL_ADC_ConfigChannel+0xa48>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	099b      	lsrs	r3, r3, #6
 8006614:	4a42      	ldr	r2, [pc, #264]	@ (8006720 <HAL_ADC_ConfigChannel+0xa4c>)
 8006616:	fba2 2303 	umull	r2, r3, r2, r3
 800661a:	099b      	lsrs	r3, r3, #6
 800661c:	3301      	adds	r3, #1
 800661e:	005b      	lsls	r3, r3, #1
 8006620:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006622:	e002      	b.n	800662a <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	3b01      	subs	r3, #1
 8006628:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1f9      	bne.n	8006624 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006630:	e05e      	b.n	80066f0 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a3b      	ldr	r2, [pc, #236]	@ (8006724 <HAL_ADC_ConfigChannel+0xa50>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d120      	bne.n	800667e <HAL_ADC_ConfigChannel+0x9aa>
 800663c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006640:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d11a      	bne.n	800667e <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a30      	ldr	r2, [pc, #192]	@ (8006710 <HAL_ADC_ConfigChannel+0xa3c>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d14e      	bne.n	80066f0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a2c      	ldr	r2, [pc, #176]	@ (8006708 <HAL_ADC_ConfigChannel+0xa34>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d004      	beq.n	8006666 <HAL_ADC_ConfigChannel+0x992>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a2a      	ldr	r2, [pc, #168]	@ (800670c <HAL_ADC_ConfigChannel+0xa38>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d101      	bne.n	800666a <HAL_ADC_ConfigChannel+0x996>
 8006666:	4a2c      	ldr	r2, [pc, #176]	@ (8006718 <HAL_ADC_ConfigChannel+0xa44>)
 8006668:	e000      	b.n	800666c <HAL_ADC_ConfigChannel+0x998>
 800666a:	4a26      	ldr	r2, [pc, #152]	@ (8006704 <HAL_ADC_ConfigChannel+0xa30>)
 800666c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006670:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006674:	4619      	mov	r1, r3
 8006676:	4610      	mov	r0, r2
 8006678:	f7fe f9e5 	bl	8004a46 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800667c:	e038      	b.n	80066f0 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a29      	ldr	r2, [pc, #164]	@ (8006728 <HAL_ADC_ConfigChannel+0xa54>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d133      	bne.n	80066f0 <HAL_ADC_ConfigChannel+0xa1c>
 8006688:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800668c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d12d      	bne.n	80066f0 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a1d      	ldr	r2, [pc, #116]	@ (8006710 <HAL_ADC_ConfigChannel+0xa3c>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d128      	bne.n	80066f0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a19      	ldr	r2, [pc, #100]	@ (8006708 <HAL_ADC_ConfigChannel+0xa34>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d004      	beq.n	80066b2 <HAL_ADC_ConfigChannel+0x9de>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a17      	ldr	r2, [pc, #92]	@ (800670c <HAL_ADC_ConfigChannel+0xa38>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d101      	bne.n	80066b6 <HAL_ADC_ConfigChannel+0x9e2>
 80066b2:	4a19      	ldr	r2, [pc, #100]	@ (8006718 <HAL_ADC_ConfigChannel+0xa44>)
 80066b4:	e000      	b.n	80066b8 <HAL_ADC_ConfigChannel+0x9e4>
 80066b6:	4a13      	ldr	r2, [pc, #76]	@ (8006704 <HAL_ADC_ConfigChannel+0xa30>)
 80066b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80066c0:	4619      	mov	r1, r3
 80066c2:	4610      	mov	r0, r2
 80066c4:	f7fe f9bf 	bl	8004a46 <LL_ADC_SetCommonPathInternalCh>
 80066c8:	e012      	b.n	80066f0 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066ce:	f043 0220 	orr.w	r2, r3, #32
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 80066dc:	e008      	b.n	80066f0 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066e2:	f043 0220 	orr.w	r2, r3, #32
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80066f8:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	37e4      	adds	r7, #228	@ 0xe4
 8006700:	46bd      	mov	sp, r7
 8006702:	bd90      	pop	{r4, r7, pc}
 8006704:	58026300 	.word	0x58026300
 8006708:	40022000 	.word	0x40022000
 800670c:	40022100 	.word	0x40022100
 8006710:	58026000 	.word	0x58026000
 8006714:	c7520000 	.word	0xc7520000
 8006718:	40022300 	.word	0x40022300
 800671c:	24000038 	.word	0x24000038
 8006720:	053e2d63 	.word	0x053e2d63
 8006724:	c3210000 	.word	0xc3210000
 8006728:	cb840000 	.word	0xcb840000

0800672c <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b094      	sub	sp, #80	@ 0x50
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006736:	2300      	movs	r3, #0
 8006738:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006744:	d003      	beq.n	800674e <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 800674a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }

#if defined(ADC_VER_V5_V90)

  if (hadc->Instance == ADC3)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a8c      	ldr	r2, [pc, #560]	@ (8006984 <HAL_ADC_AnalogWDGConfig+0x258>)
 8006754:	4293      	cmp	r3, r2
      assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800675c:	2b01      	cmp	r3, #1
 800675e:	d101      	bne.n	8006764 <HAL_ADC_AnalogWDGConfig+0x38>
 8006760:	2302      	movs	r3, #2
 8006762:	e36b      	b.n	8006e3c <HAL_ADC_AnalogWDGConfig+0x710>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4618      	mov	r0, r3
 8006772:	f7fe fccd 	bl	8005110 <LL_ADC_REG_IsConversionOngoing>
 8006776:	6438      	str	r0, [r7, #64]	@ 0x40
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4618      	mov	r0, r3
 800677e:	f7fe fcda 	bl	8005136 <LL_ADC_INJ_IsConversionOngoing>
 8006782:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006784:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006786:	2b00      	cmp	r3, #0
 8006788:	f040 8349 	bne.w	8006e1e <HAL_ADC_AnalogWDGConfig+0x6f2>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800678c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800678e:	2b00      	cmp	r3, #0
 8006790:	f040 8345 	bne.w	8006e1e <HAL_ADC_AnalogWDGConfig+0x6f2>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a7b      	ldr	r2, [pc, #492]	@ (8006988 <HAL_ADC_AnalogWDGConfig+0x25c>)
 800679a:	4293      	cmp	r3, r2
 800679c:	f040 8131 	bne.w	8006a02 <HAL_ADC_AnalogWDGConfig+0x2d6>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 80067a8:	d034      	beq.n	8006814 <HAL_ADC_AnalogWDGConfig+0xe8>
 80067aa:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 80067ae:	d856      	bhi.n	800685e <HAL_ADC_AnalogWDGConfig+0x132>
 80067b0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80067b4:	d04b      	beq.n	800684e <HAL_ADC_AnalogWDGConfig+0x122>
 80067b6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80067ba:	d850      	bhi.n	800685e <HAL_ADC_AnalogWDGConfig+0x132>
 80067bc:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80067c0:	d01b      	beq.n	80067fa <HAL_ADC_AnalogWDGConfig+0xce>
 80067c2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80067c6:	d84a      	bhi.n	800685e <HAL_ADC_AnalogWDGConfig+0x132>
 80067c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80067cc:	d037      	beq.n	800683e <HAL_ADC_AnalogWDGConfig+0x112>
 80067ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80067d2:	d844      	bhi.n	800685e <HAL_ADC_AnalogWDGConfig+0x132>
 80067d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80067d8:	d029      	beq.n	800682e <HAL_ADC_AnalogWDGConfig+0x102>
 80067da:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80067de:	d13e      	bne.n	800685e <HAL_ADC_AnalogWDGConfig+0x132>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6818      	ldr	r0, [r3, #0]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 80067ec:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 80067f0:	461a      	mov	r2, r3
 80067f2:	4965      	ldr	r1, [pc, #404]	@ (8006988 <HAL_ADC_AnalogWDGConfig+0x25c>)
 80067f4:	f7fe fb34 	bl	8004e60 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 80067f8:	e039      	b.n	800686e <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6818      	ldr	r0, [r3, #0]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8006806:	f043 73a0 	orr.w	r3, r3, #20971520	@ 0x1400000
 800680a:	461a      	mov	r2, r3
 800680c:	495e      	ldr	r1, [pc, #376]	@ (8006988 <HAL_ADC_AnalogWDGConfig+0x25c>)
 800680e:	f7fe fb27 	bl	8004e60 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 8006812:	e02c      	b.n	800686e <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6818      	ldr	r0, [r3, #0]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8006820:	f043 73e0 	orr.w	r3, r3, #29360128	@ 0x1c00000
 8006824:	461a      	mov	r2, r3
 8006826:	4958      	ldr	r1, [pc, #352]	@ (8006988 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8006828:	f7fe fb1a 	bl	8004e60 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 800682c:	e01f      	b.n	800686e <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a56      	ldr	r2, [pc, #344]	@ (800698c <HAL_ADC_AnalogWDGConfig+0x260>)
 8006834:	4954      	ldr	r1, [pc, #336]	@ (8006988 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8006836:	4618      	mov	r0, r3
 8006838:	f7fe fb12 	bl	8004e60 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800683c:	e017      	b.n	800686e <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a53      	ldr	r2, [pc, #332]	@ (8006990 <HAL_ADC_AnalogWDGConfig+0x264>)
 8006844:	4950      	ldr	r1, [pc, #320]	@ (8006988 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8006846:	4618      	mov	r0, r3
 8006848:	f7fe fb0a 	bl	8004e60 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800684c:	e00f      	b.n	800686e <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a50      	ldr	r2, [pc, #320]	@ (8006994 <HAL_ADC_AnalogWDGConfig+0x268>)
 8006854:	494c      	ldr	r1, [pc, #304]	@ (8006988 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8006856:	4618      	mov	r0, r3
 8006858:	f7fe fb02 	bl	8004e60 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800685c:	e007      	b.n	800686e <HAL_ADC_AnalogWDGConfig+0x142>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2200      	movs	r2, #0
 8006864:	4948      	ldr	r1, [pc, #288]	@ (8006988 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8006866:	4618      	mov	r0, r3
 8006868:	f7fe fafa 	bl	8004e60 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800686c:	bf00      	nop
      }

      /* Shift the offset in function of the selected ADC resolution:         */
      /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
      /* are set to 0                                                         */
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 800686e:	4b4a      	ldr	r3, [pc, #296]	@ (8006998 <HAL_ADC_AnalogWDGConfig+0x26c>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006876:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800687a:	d10b      	bne.n	8006894 <HAL_ADC_AnalogWDGConfig+0x168>
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	691a      	ldr	r2, [r3, #16]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	089b      	lsrs	r3, r3, #2
 8006888:	f003 0307 	and.w	r3, r3, #7
 800688c:	005b      	lsls	r3, r3, #1
 800688e:	fa02 f303 	lsl.w	r3, r2, r3
 8006892:	e01d      	b.n	80068d0 <HAL_ADC_AnalogWDGConfig+0x1a4>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	f003 0310 	and.w	r3, r3, #16
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10b      	bne.n	80068ba <HAL_ADC_AnalogWDGConfig+0x18e>
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	691a      	ldr	r2, [r3, #16]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	089b      	lsrs	r3, r3, #2
 80068ae:	f003 0307 	and.w	r3, r3, #7
 80068b2:	005b      	lsls	r3, r3, #1
 80068b4:	fa02 f303 	lsl.w	r3, r2, r3
 80068b8:	e00a      	b.n	80068d0 <HAL_ADC_AnalogWDGConfig+0x1a4>
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	691a      	ldr	r2, [r3, #16]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	089b      	lsrs	r3, r3, #2
 80068c6:	f003 0304 	and.w	r3, r3, #4
 80068ca:	005b      	lsls	r3, r3, #1
 80068cc:	fa02 f303 	lsl.w	r3, r2, r3
 80068d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80068d2:	4b31      	ldr	r3, [pc, #196]	@ (8006998 <HAL_ADC_AnalogWDGConfig+0x26c>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80068da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068de:	d10b      	bne.n	80068f8 <HAL_ADC_AnalogWDGConfig+0x1cc>
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	695a      	ldr	r2, [r3, #20]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	089b      	lsrs	r3, r3, #2
 80068ec:	f003 0307 	and.w	r3, r3, #7
 80068f0:	005b      	lsls	r3, r3, #1
 80068f2:	fa02 f303 	lsl.w	r3, r2, r3
 80068f6:	e01d      	b.n	8006934 <HAL_ADC_AnalogWDGConfig+0x208>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	f003 0310 	and.w	r3, r3, #16
 8006902:	2b00      	cmp	r3, #0
 8006904:	d10b      	bne.n	800691e <HAL_ADC_AnalogWDGConfig+0x1f2>
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	695a      	ldr	r2, [r3, #20]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	089b      	lsrs	r3, r3, #2
 8006912:	f003 0307 	and.w	r3, r3, #7
 8006916:	005b      	lsls	r3, r3, #1
 8006918:	fa02 f303 	lsl.w	r3, r2, r3
 800691c:	e00a      	b.n	8006934 <HAL_ADC_AnalogWDGConfig+0x208>
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	695a      	ldr	r2, [r3, #20]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	089b      	lsrs	r3, r3, #2
 800692a:	f003 0304 	and.w	r3, r3, #4
 800692e:	005b      	lsls	r3, r3, #1
 8006930:	fa02 f303 	lsl.w	r3, r2, r3
 8006934:	647b      	str	r3, [r7, #68]	@ 0x44

      /* Set the high and low thresholds */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a12      	ldr	r2, [pc, #72]	@ (8006984 <HAL_ADC_AnalogWDGConfig+0x258>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d131      	bne.n	80069a4 <HAL_ADC_AnalogWDGConfig+0x278>
      {
        MODIFY_REG(hadc->Instance->LTR1_TR1,
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	699a      	ldr	r2, [r3, #24]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	430a      	orrs	r2, r1
 8006954:	621a      	str	r2, [r3, #32]
                   ADC3_TR1_AWDFILT,
                   AnalogWDGConfig->FilteringConfig);
        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC3_TR1_LT1, tmpAWDLowThresholdShifted);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	6a1a      	ldr	r2, [r3, #32]
 800695c:	4b0f      	ldr	r3, [pc, #60]	@ (800699c <HAL_ADC_AnalogWDGConfig+0x270>)
 800695e:	4013      	ands	r3, r2
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	6812      	ldr	r2, [r2, #0]
 8006964:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006966:	430b      	orrs	r3, r1
 8006968:	6213      	str	r3, [r2, #32]
        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC3_TR1_HT1, (tmpAWDHighThresholdShifted << ADC3_TR1_HT1_Pos));
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	6a1a      	ldr	r2, [r3, #32]
 8006970:	4b0b      	ldr	r3, [pc, #44]	@ (80069a0 <HAL_ADC_AnalogWDGConfig+0x274>)
 8006972:	4013      	ands	r3, r2
 8006974:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006976:	0411      	lsls	r1, r2, #16
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	6812      	ldr	r2, [r2, #0]
 800697c:	430b      	orrs	r3, r1
 800697e:	6213      	str	r3, [r2, #32]
 8006980:	e024      	b.n	80069cc <HAL_ADC_AnalogWDGConfig+0x2a0>
 8006982:	bf00      	nop
 8006984:	58026000 	.word	0x58026000
 8006988:	7dc00000 	.word	0x7dc00000
 800698c:	008fffff 	.word	0x008fffff
 8006990:	010fffff 	.word	0x010fffff
 8006994:	018fffff 	.word	0x018fffff
 8006998:	5c001000 	.word	0x5c001000
 800699c:	fffff000 	.word	0xfffff000
 80069a0:	f000ffff 	.word	0xf000ffff
      }
      else
      {

        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069b4:	430a      	orrs	r2, r1
 80069b6:	621a      	str	r2, [r3, #32]
        MODIFY_REG(hadc->Instance->HTR1_TR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069be:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069c8:	430a      	orrs	r2, r1
 80069ca:	625a      	str	r2, [r3, #36]	@ 0x24
      MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
      MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
#endif

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069d0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4618      	mov	r0, r3
 80069de:	f7fe fbbd 	bl	800515c <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	7b1b      	ldrb	r3, [r3, #12]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d105      	bne.n	80069f6 <HAL_ADC_AnalogWDGConfig+0x2ca>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7fe fbdd 	bl	80051ae <LL_ADC_EnableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80069f4:	e21c      	b.n	8006e30 <HAL_ADC_AnalogWDGConfig+0x704>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7fe fc07 	bl	800520e <LL_ADC_DisableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006a00:	e216      	b.n	8006e30 <HAL_ADC_AnalogWDGConfig+0x704>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8006a0a:	d01f      	beq.n	8006a4c <HAL_ADC_AnalogWDGConfig+0x320>
 8006a0c:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8006a10:	f200 80f4 	bhi.w	8006bfc <HAL_ADC_AnalogWDGConfig+0x4d0>
 8006a14:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006a18:	d07d      	beq.n	8006b16 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8006a1a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006a1e:	f200 80ed 	bhi.w	8006bfc <HAL_ADC_AnalogWDGConfig+0x4d0>
 8006a22:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006a26:	d011      	beq.n	8006a4c <HAL_ADC_AnalogWDGConfig+0x320>
 8006a28:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006a2c:	f200 80e6 	bhi.w	8006bfc <HAL_ADC_AnalogWDGConfig+0x4d0>
 8006a30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a34:	d06f      	beq.n	8006b16 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8006a36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a3a:	f200 80df 	bhi.w	8006bfc <HAL_ADC_AnalogWDGConfig+0x4d0>
 8006a3e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006a42:	d068      	beq.n	8006b16 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8006a44:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006a48:	f040 80d8 	bne.w	8006bfc <HAL_ADC_AnalogWDGConfig+0x4d0>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a9c      	ldr	r2, [pc, #624]	@ (8006cc4 <HAL_ADC_AnalogWDGConfig+0x598>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d12f      	bne.n	8006ab6 <HAL_ADC_AnalogWDGConfig+0x38a>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d108      	bne.n	8006a74 <HAL_ADC_AnalogWDGConfig+0x348>
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	0e9b      	lsrs	r3, r3, #26
 8006a68:	f003 031f 	and.w	r3, r3, #31
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a72:	e016      	b.n	8006aa2 <HAL_ADC_AnalogWDGConfig+0x376>
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a7c:	fa93 f3a3 	rbit	r3, r3
 8006a80:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8006a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a84:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8006a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d101      	bne.n	8006a90 <HAL_ADC_AnalogWDGConfig+0x364>
    return 32U;
 8006a8c:	2320      	movs	r3, #32
 8006a8e:	e003      	b.n	8006a98 <HAL_ADC_AnalogWDGConfig+0x36c>
  return __builtin_clz(value);
 8006a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a92:	fab3 f383 	clz	r3, r3
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	f003 031f 	and.w	r3, r3, #31
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	6812      	ldr	r2, [r2, #0]
 8006aa6:	f8d2 10a0 	ldr.w	r1, [r2, #160]	@ 0xa0
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	6812      	ldr	r2, [r2, #0]
 8006aae:	430b      	orrs	r3, r1
 8006ab0:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8006ab4:	e0ab      	b.n	8006c0e <HAL_ADC_AnalogWDGConfig+0x4e2>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d108      	bne.n	8006ad4 <HAL_ADC_AnalogWDGConfig+0x3a8>
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	0e9b      	lsrs	r3, r3, #26
 8006ac8:	f003 031f 	and.w	r3, r3, #31
 8006acc:	2201      	movs	r2, #1
 8006ace:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad2:	e016      	b.n	8006b02 <HAL_ADC_AnalogWDGConfig+0x3d6>
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006adc:	fa93 f3a3 	rbit	r3, r3
 8006ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8006ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8006ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d101      	bne.n	8006af0 <HAL_ADC_AnalogWDGConfig+0x3c4>
    return 32U;
 8006aec:	2320      	movs	r3, #32
 8006aee:	e003      	b.n	8006af8 <HAL_ADC_AnalogWDGConfig+0x3cc>
  return __builtin_clz(value);
 8006af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006af2:	fab3 f383 	clz	r3, r3
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	f003 031f 	and.w	r3, r3, #31
 8006afc:	2201      	movs	r2, #1
 8006afe:	fa02 f303 	lsl.w	r3, r2, r3
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	6812      	ldr	r2, [r2, #0]
 8006b06:	f8d2 10a4 	ldr.w	r1, [r2, #164]	@ 0xa4
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	6812      	ldr	r2, [r2, #0]
 8006b0e:	430b      	orrs	r3, r1
 8006b10:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
          break;
 8006b14:	e07b      	b.n	8006c0e <HAL_ADC_AnalogWDGConfig+0x4e2>
        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:

#if defined(ADC_VER_V5_V90)
          if (hadc->Instance == ADC3)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a6b      	ldr	r2, [pc, #428]	@ (8006cc8 <HAL_ADC_AnalogWDGConfig+0x59c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d108      	bne.n	8006b32 <HAL_ADC_AnalogWDGConfig+0x406>
          {

            LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6818      	ldr	r0, [r3, #0]
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a68      	ldr	r2, [pc, #416]	@ (8006ccc <HAL_ADC_AnalogWDGConfig+0x5a0>)
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	f7fe f998 	bl	8004e60 <LL_ADC_SetAnalogWDMonitChannels>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
            }
#if defined(ADC_VER_V5_V90)
          }
#endif  /*ADC_VER_V5_V90*/
          break;
 8006b30:	e06d      	b.n	8006c0e <HAL_ADC_AnalogWDGConfig+0x4e2>
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a63      	ldr	r2, [pc, #396]	@ (8006cc4 <HAL_ADC_AnalogWDGConfig+0x598>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d12f      	bne.n	8006b9c <HAL_ADC_AnalogWDGConfig+0x470>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d108      	bne.n	8006b5a <HAL_ADC_AnalogWDGConfig+0x42e>
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	0e9b      	lsrs	r3, r3, #26
 8006b4e:	f003 031f 	and.w	r3, r3, #31
 8006b52:	2201      	movs	r2, #1
 8006b54:	fa02 f303 	lsl.w	r3, r2, r3
 8006b58:	e016      	b.n	8006b88 <HAL_ADC_AnalogWDGConfig+0x45c>
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	fa93 f3a3 	rbit	r3, r3
 8006b66:	61bb      	str	r3, [r7, #24]
  return result;
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006b6c:	6a3b      	ldr	r3, [r7, #32]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d101      	bne.n	8006b76 <HAL_ADC_AnalogWDGConfig+0x44a>
    return 32U;
 8006b72:	2320      	movs	r3, #32
 8006b74:	e003      	b.n	8006b7e <HAL_ADC_AnalogWDGConfig+0x452>
  return __builtin_clz(value);
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	fab3 f383 	clz	r3, r3
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	f003 031f 	and.w	r3, r3, #31
 8006b82:	2201      	movs	r2, #1
 8006b84:	fa02 f303 	lsl.w	r3, r2, r3
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	6812      	ldr	r2, [r2, #0]
 8006b8c:	f8d2 10a0 	ldr.w	r1, [r2, #160]	@ 0xa0
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	6812      	ldr	r2, [r2, #0]
 8006b94:	430b      	orrs	r3, r1
 8006b96:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
          break;
 8006b9a:	e038      	b.n	8006c0e <HAL_ADC_AnalogWDGConfig+0x4e2>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d108      	bne.n	8006bba <HAL_ADC_AnalogWDGConfig+0x48e>
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	0e9b      	lsrs	r3, r3, #26
 8006bae:	f003 031f 	and.w	r3, r3, #31
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb8:	e016      	b.n	8006be8 <HAL_ADC_AnalogWDGConfig+0x4bc>
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	fa93 f3a3 	rbit	r3, r3
 8006bc6:	60fb      	str	r3, [r7, #12]
  return result;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d101      	bne.n	8006bd6 <HAL_ADC_AnalogWDGConfig+0x4aa>
    return 32U;
 8006bd2:	2320      	movs	r3, #32
 8006bd4:	e003      	b.n	8006bde <HAL_ADC_AnalogWDGConfig+0x4b2>
  return __builtin_clz(value);
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	fab3 f383 	clz	r3, r3
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	f003 031f 	and.w	r3, r3, #31
 8006be2:	2201      	movs	r2, #1
 8006be4:	fa02 f303 	lsl.w	r3, r2, r3
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	6812      	ldr	r2, [r2, #0]
 8006bec:	f8d2 10a4 	ldr.w	r1, [r2, #164]	@ 0xa4
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	6812      	ldr	r2, [r2, #0]
 8006bf4:	430b      	orrs	r3, r1
 8006bf6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
          break;
 8006bfa:	e008      	b.n	8006c0e <HAL_ADC_AnalogWDGConfig+0x4e2>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6818      	ldr	r0, [r3, #0]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2200      	movs	r2, #0
 8006c06:	4619      	mov	r1, r3
 8006c08:	f7fe f92a 	bl	8004e60 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006c0c:	bf00      	nop
      }

      /* Shift the thresholds in function of the selected ADC resolution      */
      /* have to be left-aligned on bit 15, the LSB (right bits) are set to 0 */
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	f003 0310 	and.w	r3, r3, #16
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10b      	bne.n	8006c34 <HAL_ADC_AnalogWDGConfig+0x508>
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	691a      	ldr	r2, [r3, #16]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	089b      	lsrs	r3, r3, #2
 8006c28:	f003 0307 	and.w	r3, r3, #7
 8006c2c:	005b      	lsls	r3, r3, #1
 8006c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c32:	e00a      	b.n	8006c4a <HAL_ADC_AnalogWDGConfig+0x51e>
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	691a      	ldr	r2, [r3, #16]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	089b      	lsrs	r3, r3, #2
 8006c40:	f003 0304 	and.w	r3, r3, #4
 8006c44:	005b      	lsls	r3, r3, #1
 8006c46:	fa02 f303 	lsl.w	r3, r2, r3
 8006c4a:	64bb      	str	r3, [r7, #72]	@ 0x48
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	f003 0310 	and.w	r3, r3, #16
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10b      	bne.n	8006c72 <HAL_ADC_AnalogWDGConfig+0x546>
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	695a      	ldr	r2, [r3, #20]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	089b      	lsrs	r3, r3, #2
 8006c66:	f003 0307 	and.w	r3, r3, #7
 8006c6a:	005b      	lsls	r3, r3, #1
 8006c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c70:	e00a      	b.n	8006c88 <HAL_ADC_AnalogWDGConfig+0x55c>
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	695a      	ldr	r2, [r3, #20]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	089b      	lsrs	r3, r3, #2
 8006c7e:	f003 0304 	and.w	r3, r3, #4
 8006c82:	005b      	lsls	r3, r3, #1
 8006c84:	fa02 f303 	lsl.w	r3, r2, r3
 8006c88:	647b      	str	r3, [r7, #68]	@ 0x44

#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a0e      	ldr	r2, [pc, #56]	@ (8006cc8 <HAL_ADC_AnalogWDGConfig+0x59c>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d153      	bne.n	8006d3c <HAL_ADC_AnalogWDGConfig+0x610>
      {

        /* Analog watchdog thresholds configuration */
        if (AnalogWDGConfig->WatchdogNumber != ADC_ANALOGWATCHDOG_1)
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a0d      	ldr	r2, [pc, #52]	@ (8006cd0 <HAL_ADC_AnalogWDGConfig+0x5a4>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d045      	beq.n	8006d2a <HAL_ADC_AnalogWDGConfig+0x5fe>
        {
          /* Shift the offset with respect to the selected ADC resolution:        */
          /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
          /* are set to 0.                                                        */
          tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	f003 0310 	and.w	r3, r3, #16
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d113      	bne.n	8006cd4 <HAL_ADC_AnalogWDGConfig+0x5a8>
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	691a      	ldr	r2, [r3, #16]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	089b      	lsrs	r3, r3, #2
 8006cb8:	f003 0307 	and.w	r3, r3, #7
 8006cbc:	005b      	lsls	r3, r3, #1
 8006cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc2:	e012      	b.n	8006cea <HAL_ADC_AnalogWDGConfig+0x5be>
 8006cc4:	001fffff 	.word	0x001fffff
 8006cc8:	58026000 	.word	0x58026000
 8006ccc:	018fffff 	.word	0x018fffff
 8006cd0:	7dc00000 	.word	0x7dc00000
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	691a      	ldr	r2, [r3, #16]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	089b      	lsrs	r3, r3, #2
 8006ce0:	f003 0304 	and.w	r3, r3, #4
 8006ce4:	005b      	lsls	r3, r3, #1
 8006ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cea:	64bb      	str	r3, [r7, #72]	@ 0x48
          tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	f003 0310 	and.w	r3, r3, #16
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10b      	bne.n	8006d12 <HAL_ADC_AnalogWDGConfig+0x5e6>
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	695a      	ldr	r2, [r3, #20]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	089b      	lsrs	r3, r3, #2
 8006d06:	f003 0307 	and.w	r3, r3, #7
 8006d0a:	005b      	lsls	r3, r3, #1
 8006d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d10:	e00a      	b.n	8006d28 <HAL_ADC_AnalogWDGConfig+0x5fc>
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	695a      	ldr	r2, [r3, #20]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	089b      	lsrs	r3, r3, #2
 8006d1e:	f003 0304 	and.w	r3, r3, #4
 8006d22:	005b      	lsls	r3, r3, #1
 8006d24:	fa02 f303 	lsl.w	r3, r2, r3
 8006d28:	647b      	str	r3, [r7, #68]	@ 0x44
        }

        /* Set ADC analog watchdog thresholds value of both thresholds high and low */
        LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted, tmpAWDLowThresholdShifted);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6818      	ldr	r0, [r3, #0]
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	6819      	ldr	r1, [r3, #0]
 8006d32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d36:	f7fe f8c1 	bl	8004ebc <LL_ADC_ConfigAnalogWDThresholds>
 8006d3a:	e035      	b.n	8006da8 <HAL_ADC_AnalogWDGConfig+0x67c>

      }
      else
      {

        if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a40      	ldr	r2, [pc, #256]	@ (8006e44 <HAL_ADC_AnalogWDGConfig+0x718>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d118      	bne.n	8006d78 <HAL_ADC_AnalogWDGConfig+0x64c>
        {
          /* Set ADC analog watchdog thresholds value of both thresholds high and low */
          MODIFY_REG(hadc->Instance->LTR2_DIFSEL,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006d4e:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d58:	430a      	orrs	r2, r1
 8006d5a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
          MODIFY_REG(hadc->Instance->HTR2_CALFACT,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006d66:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d70:	430a      	orrs	r2, r1
 8006d72:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 8006d76:	e017      	b.n	8006da8 <HAL_ADC_AnalogWDGConfig+0x67c>
        }
        else
        {
          /* Set ADC analog watchdog thresholds value of both thresholds high and low */
          MODIFY_REG(hadc->Instance->LTR3_RES10,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006d80:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
          MODIFY_REG(hadc->Instance->HTR3_RES11,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006d98:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006da2:	430a      	orrs	r2, r1
 8006da4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
        MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
      }

#endif
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a25      	ldr	r2, [pc, #148]	@ (8006e44 <HAL_ADC_AnalogWDGConfig+0x718>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d11a      	bne.n	8006de8 <HAL_ADC_AnalogWDGConfig+0x6bc>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006db6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7fe f9d7 	bl	8005176 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	7b1b      	ldrb	r3, [r3, #12]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d105      	bne.n	8006ddc <HAL_ADC_AnalogWDGConfig+0x6b0>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7fe f9fa 	bl	80051ce <LL_ADC_EnableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006dda:	e029      	b.n	8006e30 <HAL_ADC_AnalogWDGConfig+0x704>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7fe fa24 	bl	800522e <LL_ADC_DisableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006de6:	e023      	b.n	8006e30 <HAL_ADC_AnalogWDGConfig+0x704>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dec:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7fe f9ca 	bl	8005192 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	7b1b      	ldrb	r3, [r3, #12]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d105      	bne.n	8006e12 <HAL_ADC_AnalogWDGConfig+0x6e6>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7fe f9ef 	bl	80051ee <LL_ADC_EnableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006e10:	e00e      	b.n	8006e30 <HAL_ADC_AnalogWDGConfig+0x704>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7fe fa19 	bl	800524e <LL_ADC_DisableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006e1c:	e008      	b.n	8006e30 <HAL_ADC_AnalogWDGConfig+0x704>
  /* If a conversion is on going on ADC group regular or injected, no update  */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e22:	f043 0220 	orr.w	r2, r3, #32
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8006e38:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3750      	adds	r7, #80	@ 0x50
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	001fffff 	.word	0x001fffff

08006e48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7fe f921 	bl	800509c <LL_ADC_IsEnabled>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d16e      	bne.n	8006f3e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689a      	ldr	r2, [r3, #8]
 8006e66:	4b38      	ldr	r3, [pc, #224]	@ (8006f48 <ADC_Enable+0x100>)
 8006e68:	4013      	ands	r3, r2
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00d      	beq.n	8006e8a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e72:	f043 0210 	orr.w	r2, r3, #16
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e7e:	f043 0201 	orr.w	r2, r3, #1
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e05a      	b.n	8006f40 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7fe f8dc 	bl	800504c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006e94:	f7fd fd6a 	bl	800496c <HAL_GetTick>
 8006e98:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a2b      	ldr	r2, [pc, #172]	@ (8006f4c <ADC_Enable+0x104>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d004      	beq.n	8006eae <ADC_Enable+0x66>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a29      	ldr	r2, [pc, #164]	@ (8006f50 <ADC_Enable+0x108>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d101      	bne.n	8006eb2 <ADC_Enable+0x6a>
 8006eae:	4b29      	ldr	r3, [pc, #164]	@ (8006f54 <ADC_Enable+0x10c>)
 8006eb0:	e000      	b.n	8006eb4 <ADC_Enable+0x6c>
 8006eb2:	4b29      	ldr	r3, [pc, #164]	@ (8006f58 <ADC_Enable+0x110>)
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7fe f85f 	bl	8004f78 <LL_ADC_GetMultimode>
 8006eba:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a23      	ldr	r2, [pc, #140]	@ (8006f50 <ADC_Enable+0x108>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d002      	beq.n	8006ecc <ADC_Enable+0x84>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	e000      	b.n	8006ece <ADC_Enable+0x86>
 8006ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8006f4c <ADC_Enable+0x104>)
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	6812      	ldr	r2, [r2, #0]
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d02c      	beq.n	8006f30 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d130      	bne.n	8006f3e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006edc:	e028      	b.n	8006f30 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7fe f8da 	bl	800509c <LL_ADC_IsEnabled>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d104      	bne.n	8006ef8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fe f8aa 	bl	800504c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006ef8:	f7fd fd38 	bl	800496c <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d914      	bls.n	8006f30 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 0301 	and.w	r3, r3, #1
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d00d      	beq.n	8006f30 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f18:	f043 0210 	orr.w	r2, r3, #16
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f24:	f043 0201 	orr.w	r2, r3, #1
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e007      	b.n	8006f40 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0301 	and.w	r3, r3, #1
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d1cf      	bne.n	8006ede <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	8000003f 	.word	0x8000003f
 8006f4c:	40022000 	.word	0x40022000
 8006f50:	40022100 	.word	0x40022100
 8006f54:	40022300 	.word	0x40022300
 8006f58:	58026300 	.word	0x58026300

08006f5c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7fe f8aa 	bl	80050c2 <LL_ADC_IsDisableOngoing>
 8006f6e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7fe f891 	bl	800509c <LL_ADC_IsEnabled>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d047      	beq.n	8007010 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d144      	bne.n	8007010 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f003 030d 	and.w	r3, r3, #13
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d10c      	bne.n	8006fae <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f7fe f86b 	bl	8005074 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2203      	movs	r2, #3
 8006fa4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006fa6:	f7fd fce1 	bl	800496c <HAL_GetTick>
 8006faa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006fac:	e029      	b.n	8007002 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fb2:	f043 0210 	orr.w	r2, r3, #16
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fbe:	f043 0201 	orr.w	r2, r3, #1
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e023      	b.n	8007012 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006fca:	f7fd fccf 	bl	800496c <HAL_GetTick>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d914      	bls.n	8007002 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f003 0301 	and.w	r3, r3, #1
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00d      	beq.n	8007002 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fea:	f043 0210 	orr.w	r2, r3, #16
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ff6:	f043 0201 	orr.w	r2, r3, #1
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e007      	b.n	8007012 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f003 0301 	and.w	r3, r3, #1
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1dc      	bne.n	8006fca <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800701a:	b580      	push	{r7, lr}
 800701c:	b084      	sub	sp, #16
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007026:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800702c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007030:	2b00      	cmp	r3, #0
 8007032:	d14b      	bne.n	80070cc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007038:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0308 	and.w	r3, r3, #8
 800704a:	2b00      	cmp	r3, #0
 800704c:	d021      	beq.n	8007092 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4618      	mov	r0, r3
 8007054:	f7fd fe0a 	bl	8004c6c <LL_ADC_REG_IsTriggerSourceSWStart>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d032      	beq.n	80070c4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d12b      	bne.n	80070c4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007070:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800707c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007080:	2b00      	cmp	r3, #0
 8007082:	d11f      	bne.n	80070c4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007088:	f043 0201 	orr.w	r2, r3, #1
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	661a      	str	r2, [r3, #96]	@ 0x60
 8007090:	e018      	b.n	80070c4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	f003 0303 	and.w	r3, r3, #3
 800709c:	2b00      	cmp	r3, #0
 800709e:	d111      	bne.n	80070c4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d105      	bne.n	80070c4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070bc:	f043 0201 	orr.w	r2, r3, #1
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f7fa ff31 	bl	8001f2c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80070ca:	e00e      	b.n	80070ea <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070d0:	f003 0310 	and.w	r3, r3, #16
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d003      	beq.n	80070e0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	f7fa fefb 	bl	8001ed4 <HAL_ADC_ErrorCallback>
}
 80070de:	e004      	b.n	80070ea <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	4798      	blx	r3
}
 80070ea:	bf00      	nop
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b084      	sub	sp, #16
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070fe:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f7fe fdd3 	bl	8005cac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007106:	bf00      	nop
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b084      	sub	sp, #16
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800711a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007120:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800712c:	f043 0204 	orr.w	r2, r3, #4
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f7fa fecd 	bl	8001ed4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800713a:	bf00      	nop
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
	...

08007144 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a6c      	ldr	r2, [pc, #432]	@ (8007304 <ADC_ConfigureBoostMode+0x1c0>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d004      	beq.n	8007160 <ADC_ConfigureBoostMode+0x1c>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a6b      	ldr	r2, [pc, #428]	@ (8007308 <ADC_ConfigureBoostMode+0x1c4>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d109      	bne.n	8007174 <ADC_ConfigureBoostMode+0x30>
 8007160:	4b6a      	ldr	r3, [pc, #424]	@ (800730c <ADC_ConfigureBoostMode+0x1c8>)
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007168:	2b00      	cmp	r3, #0
 800716a:	bf14      	ite	ne
 800716c:	2301      	movne	r3, #1
 800716e:	2300      	moveq	r3, #0
 8007170:	b2db      	uxtb	r3, r3
 8007172:	e008      	b.n	8007186 <ADC_ConfigureBoostMode+0x42>
 8007174:	4b66      	ldr	r3, [pc, #408]	@ (8007310 <ADC_ConfigureBoostMode+0x1cc>)
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800717c:	2b00      	cmp	r3, #0
 800717e:	bf14      	ite	ne
 8007180:	2301      	movne	r3, #1
 8007182:	2300      	moveq	r3, #0
 8007184:	b2db      	uxtb	r3, r3
 8007186:	2b00      	cmp	r3, #0
 8007188:	d01c      	beq.n	80071c4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800718a:	f004 fda9 	bl	800bce0 <HAL_RCC_GetHCLKFreq>
 800718e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007198:	d010      	beq.n	80071bc <ADC_ConfigureBoostMode+0x78>
 800719a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800719e:	d873      	bhi.n	8007288 <ADC_ConfigureBoostMode+0x144>
 80071a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071a4:	d002      	beq.n	80071ac <ADC_ConfigureBoostMode+0x68>
 80071a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071aa:	d16d      	bne.n	8007288 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	0c1b      	lsrs	r3, r3, #16
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071b8:	60fb      	str	r3, [r7, #12]
        break;
 80071ba:	e068      	b.n	800728e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	089b      	lsrs	r3, r3, #2
 80071c0:	60fb      	str	r3, [r7, #12]
        break;
 80071c2:	e064      	b.n	800728e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80071c4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80071c8:	f04f 0100 	mov.w	r1, #0
 80071cc:	f005 ff84 	bl	800d0d8 <HAL_RCCEx_GetPeriphCLKFreq>
 80071d0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80071da:	d051      	beq.n	8007280 <ADC_ConfigureBoostMode+0x13c>
 80071dc:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80071e0:	d854      	bhi.n	800728c <ADC_ConfigureBoostMode+0x148>
 80071e2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80071e6:	d047      	beq.n	8007278 <ADC_ConfigureBoostMode+0x134>
 80071e8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80071ec:	d84e      	bhi.n	800728c <ADC_ConfigureBoostMode+0x148>
 80071ee:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80071f2:	d03d      	beq.n	8007270 <ADC_ConfigureBoostMode+0x12c>
 80071f4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80071f8:	d848      	bhi.n	800728c <ADC_ConfigureBoostMode+0x148>
 80071fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071fe:	d033      	beq.n	8007268 <ADC_ConfigureBoostMode+0x124>
 8007200:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007204:	d842      	bhi.n	800728c <ADC_ConfigureBoostMode+0x148>
 8007206:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800720a:	d029      	beq.n	8007260 <ADC_ConfigureBoostMode+0x11c>
 800720c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8007210:	d83c      	bhi.n	800728c <ADC_ConfigureBoostMode+0x148>
 8007212:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007216:	d01a      	beq.n	800724e <ADC_ConfigureBoostMode+0x10a>
 8007218:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800721c:	d836      	bhi.n	800728c <ADC_ConfigureBoostMode+0x148>
 800721e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8007222:	d014      	beq.n	800724e <ADC_ConfigureBoostMode+0x10a>
 8007224:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8007228:	d830      	bhi.n	800728c <ADC_ConfigureBoostMode+0x148>
 800722a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800722e:	d00e      	beq.n	800724e <ADC_ConfigureBoostMode+0x10a>
 8007230:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007234:	d82a      	bhi.n	800728c <ADC_ConfigureBoostMode+0x148>
 8007236:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800723a:	d008      	beq.n	800724e <ADC_ConfigureBoostMode+0x10a>
 800723c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007240:	d824      	bhi.n	800728c <ADC_ConfigureBoostMode+0x148>
 8007242:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007246:	d002      	beq.n	800724e <ADC_ConfigureBoostMode+0x10a>
 8007248:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800724c:	d11e      	bne.n	800728c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	0c9b      	lsrs	r3, r3, #18
 8007254:	005b      	lsls	r3, r3, #1
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	fbb2 f3f3 	udiv	r3, r2, r3
 800725c:	60fb      	str	r3, [r7, #12]
        break;
 800725e:	e016      	b.n	800728e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	091b      	lsrs	r3, r3, #4
 8007264:	60fb      	str	r3, [r7, #12]
        break;
 8007266:	e012      	b.n	800728e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	095b      	lsrs	r3, r3, #5
 800726c:	60fb      	str	r3, [r7, #12]
        break;
 800726e:	e00e      	b.n	800728e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	099b      	lsrs	r3, r3, #6
 8007274:	60fb      	str	r3, [r7, #12]
        break;
 8007276:	e00a      	b.n	800728e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	09db      	lsrs	r3, r3, #7
 800727c:	60fb      	str	r3, [r7, #12]
        break;
 800727e:	e006      	b.n	800728e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	0a1b      	lsrs	r3, r3, #8
 8007284:	60fb      	str	r3, [r7, #12]
        break;
 8007286:	e002      	b.n	800728e <ADC_ConfigureBoostMode+0x14a>
        break;
 8007288:	bf00      	nop
 800728a:	e000      	b.n	800728e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800728c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	085b      	lsrs	r3, r3, #1
 8007292:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	4a1f      	ldr	r2, [pc, #124]	@ (8007314 <ADC_ConfigureBoostMode+0x1d0>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d808      	bhi.n	80072ae <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	689a      	ldr	r2, [r3, #8]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80072aa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80072ac:	e025      	b.n	80072fa <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	4a19      	ldr	r2, [pc, #100]	@ (8007318 <ADC_ConfigureBoostMode+0x1d4>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d80a      	bhi.n	80072cc <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80072c8:	609a      	str	r2, [r3, #8]
}
 80072ca:	e016      	b.n	80072fa <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	4a13      	ldr	r2, [pc, #76]	@ (800731c <ADC_ConfigureBoostMode+0x1d8>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d80a      	bhi.n	80072ea <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072e6:	609a      	str	r2, [r3, #8]
}
 80072e8:	e007      	b.n	80072fa <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	689a      	ldr	r2, [r3, #8]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80072f8:	609a      	str	r2, [r3, #8]
}
 80072fa:	bf00      	nop
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	40022000 	.word	0x40022000
 8007308:	40022100 	.word	0x40022100
 800730c:	40022300 	.word	0x40022300
 8007310:	58026300 	.word	0x58026300
 8007314:	005f5e10 	.word	0x005f5e10
 8007318:	00bebc20 	.word	0x00bebc20
 800731c:	017d7840 	.word	0x017d7840

08007320 <LL_ADC_IsEnabled>:
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	2b01      	cmp	r3, #1
 8007332:	d101      	bne.n	8007338 <LL_ADC_IsEnabled+0x18>
 8007334:	2301      	movs	r3, #1
 8007336:	e000      	b.n	800733a <LL_ADC_IsEnabled+0x1a>
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
	...

08007348 <LL_ADC_StartCalibration>:
{
 8007348:	b480      	push	{r7}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	689a      	ldr	r2, [r3, #8]
 8007358:	4b09      	ldr	r3, [pc, #36]	@ (8007380 <LL_ADC_StartCalibration+0x38>)
 800735a:	4013      	ands	r3, r2
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007368:	430a      	orrs	r2, r1
 800736a:	4313      	orrs	r3, r2
 800736c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	609a      	str	r2, [r3, #8]
}
 8007374:	bf00      	nop
 8007376:	3714      	adds	r7, #20
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr
 8007380:	3ffeffc0 	.word	0x3ffeffc0

08007384 <LL_ADC_IsCalibrationOnGoing>:
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007394:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007398:	d101      	bne.n	800739e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800739a:	2301      	movs	r3, #1
 800739c:	e000      	b.n	80073a0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <LL_ADC_REG_StartConversion>:
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	689a      	ldr	r2, [r3, #8]
 80073b8:	4b05      	ldr	r3, [pc, #20]	@ (80073d0 <LL_ADC_REG_StartConversion+0x24>)
 80073ba:	4013      	ands	r3, r2
 80073bc:	f043 0204 	orr.w	r2, r3, #4
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	609a      	str	r2, [r3, #8]
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr
 80073d0:	7fffffc0 	.word	0x7fffffc0

080073d4 <LL_ADC_REG_IsConversionOngoing>:
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	f003 0304 	and.w	r3, r3, #4
 80073e4:	2b04      	cmp	r3, #4
 80073e6:	d101      	bne.n	80073ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80073e8:	2301      	movs	r3, #1
 80073ea:	e000      	b.n	80073ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
	...

080073fc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b086      	sub	sp, #24
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8007408:	2300      	movs	r3, #0
 800740a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007412:	2b01      	cmp	r3, #1
 8007414:	d101      	bne.n	800741a <HAL_ADCEx_Calibration_Start+0x1e>
 8007416:	2302      	movs	r3, #2
 8007418:	e04c      	b.n	80074b4 <HAL_ADCEx_Calibration_Start+0xb8>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f7ff fd9a 	bl	8006f5c <ADC_Disable>
 8007428:	4603      	mov	r3, r0
 800742a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800742c:	7dfb      	ldrb	r3, [r7, #23]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d135      	bne.n	800749e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007436:	4b21      	ldr	r3, [pc, #132]	@ (80074bc <HAL_ADCEx_Calibration_Start+0xc0>)
 8007438:	4013      	ands	r3, r2
 800743a:	f043 0202 	orr.w	r2, r3, #2
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	661a      	str	r2, [r3, #96]	@ 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	68b9      	ldr	r1, [r7, #8]
 800744a:	4618      	mov	r0, r3
 800744c:	f7ff ff7c 	bl	8007348 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007450:	e014      	b.n	800747c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	3301      	adds	r3, #1
 8007456:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	4a19      	ldr	r2, [pc, #100]	@ (80074c0 <HAL_ADCEx_Calibration_Start+0xc4>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d30d      	bcc.n	800747c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007464:	f023 0312 	bic.w	r3, r3, #18
 8007468:	f043 0210 	orr.w	r2, r3, #16
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	e01b      	b.n	80074b4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4618      	mov	r0, r3
 8007482:	f7ff ff7f 	bl	8007384 <LL_ADC_IsCalibrationOnGoing>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1e2      	bne.n	8007452 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007490:	f023 0303 	bic.w	r3, r3, #3
 8007494:	f043 0201 	orr.w	r2, r3, #1
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	661a      	str	r2, [r3, #96]	@ 0x60
 800749c:	e005      	b.n	80074aa <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074a2:	f043 0210 	orr.w	r2, r3, #16
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80074b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3718      	adds	r7, #24
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	ffffeefd 	.word	0xffffeefd
 80074c0:	25c3f800 	.word	0x25c3f800

080074c4 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b0a2      	sub	sp, #136	@ 0x88
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7ff ff7d 	bl	80073d4 <LL_ADC_REG_IsConversionOngoing>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d001      	beq.n	80074e4 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 80074e0:	2302      	movs	r3, #2
 80074e2:	e08c      	b.n	80075fe <HAL_ADCEx_MultiModeStart_DMA+0x13a>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d101      	bne.n	80074f2 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 80074ee:	2302      	movs	r3, #2
 80074f0:	e085      	b.n	80075fe <HAL_ADCEx_MultiModeStart_DMA+0x13a>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80074fa:	2300      	movs	r3, #0
 80074fc:	673b      	str	r3, [r7, #112]	@ 0x70
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80074fe:	2300      	movs	r3, #0
 8007500:	677b      	str	r3, [r7, #116]	@ 0x74
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a40      	ldr	r2, [pc, #256]	@ (8007608 <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d102      	bne.n	8007512 <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 800750c:	4b3f      	ldr	r3, [pc, #252]	@ (800760c <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 800750e:	613b      	str	r3, [r7, #16]
 8007510:	e001      	b.n	8007516 <HAL_ADCEx_MultiModeStart_DMA+0x52>
 8007512:	2300      	movs	r3, #0
 8007514:	613b      	str	r3, [r7, #16]

    if (tmphadcSlave.Instance == NULL)
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d10b      	bne.n	8007534 <HAL_ADCEx_MultiModeStart_DMA+0x70>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007520:	f043 0220 	orr.w	r2, r3, #32
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	e064      	b.n	80075fe <HAL_ADCEx_MultiModeStart_DMA+0x13a>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f7ff fc87 	bl	8006e48 <ADC_Enable>
 800753a:	4603      	mov	r3, r0
 800753c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    if (tmp_hal_status == HAL_OK)
 8007540:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8007544:	2b00      	cmp	r3, #0
 8007546:	d107      	bne.n	8007558 <HAL_ADCEx_MultiModeStart_DMA+0x94>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8007548:	f107 0310 	add.w	r3, r7, #16
 800754c:	4618      	mov	r0, r3
 800754e:	f7ff fc7b 	bl	8006e48 <ADC_Enable>
 8007552:	4603      	mov	r3, r0
 8007554:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8007558:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800755c:	2b00      	cmp	r3, #0
 800755e:	d148      	bne.n	80075f2 <HAL_ADCEx_MultiModeStart_DMA+0x12e>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007564:	4b2a      	ldr	r3, [pc, #168]	@ (8007610 <HAL_ADCEx_MultiModeStart_DMA+0x14c>)
 8007566:	4013      	ands	r3, r2
 8007568:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	661a      	str	r2, [r3, #96]	@ 0x60
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800757a:	4a26      	ldr	r2, [pc, #152]	@ (8007614 <HAL_ADCEx_MultiModeStart_DMA+0x150>)
 800757c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007582:	4a25      	ldr	r2, [pc, #148]	@ (8007618 <HAL_ADCEx_MultiModeStart_DMA+0x154>)
 8007584:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800758a:	4a24      	ldr	r2, [pc, #144]	@ (800761c <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 800758c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a1d      	ldr	r2, [pc, #116]	@ (8007608 <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d004      	beq.n	80075a2 <HAL_ADCEx_MultiModeStart_DMA+0xde>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a1b      	ldr	r2, [pc, #108]	@ (800760c <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d101      	bne.n	80075a6 <HAL_ADCEx_MultiModeStart_DMA+0xe2>
 80075a2:	4b1f      	ldr	r3, [pc, #124]	@ (8007620 <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 80075a4:	e000      	b.n	80075a8 <HAL_ADCEx_MultiModeStart_DMA+0xe4>
 80075a6:	4b1f      	ldr	r3, [pc, #124]	@ (8007624 <HAL_ADCEx_MultiModeStart_DMA+0x160>)
 80075a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	221c      	movs	r2, #28
 80075b2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	685a      	ldr	r2, [r3, #4]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f042 0210 	orr.w	r2, r2, #16
 80075ca:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80075d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80075d4:	330c      	adds	r3, #12
 80075d6:	4619      	mov	r1, r3
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f000 feca 	bl	8008374 <HAL_DMA_Start_IT>
 80075e0:	4603      	mov	r3, r0
 80075e2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7ff fede 	bl	80073ac <LL_ADC_REG_StartConversion>
 80075f0:	e003      	b.n	80075fa <HAL_ADCEx_MultiModeStart_DMA+0x136>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    }

    /* Return function status */
    return tmp_hal_status;
 80075fa:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
  }
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3788      	adds	r7, #136	@ 0x88
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	40022000 	.word	0x40022000
 800760c:	40022100 	.word	0x40022100
 8007610:	fffff0fe 	.word	0xfffff0fe
 8007614:	0800701b 	.word	0x0800701b
 8007618:	080070f3 	.word	0x080070f3
 800761c:	0800710f 	.word	0x0800710f
 8007620:	40022300 	.word	0x40022300
 8007624:	58026300 	.word	0x58026300

08007628 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007658:	bf00      	nop
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800766c:	bf00      	nop
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007680:	bf00      	nop
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800768c:	b590      	push	{r4, r7, lr}
 800768e:	b0a3      	sub	sp, #140	@ 0x8c
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007696:	2300      	movs	r3, #0
 8007698:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d101      	bne.n	80076aa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80076a6:	2302      	movs	r3, #2
 80076a8:	e0c1      	b.n	800782e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80076b2:	2300      	movs	r3, #0
 80076b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80076b6:	2300      	movs	r3, #0
 80076b8:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a5e      	ldr	r2, [pc, #376]	@ (8007838 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d102      	bne.n	80076ca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80076c4:	4b5d      	ldr	r3, [pc, #372]	@ (800783c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80076c6:	60fb      	str	r3, [r7, #12]
 80076c8:	e001      	b.n	80076ce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80076ca:	2300      	movs	r3, #0
 80076cc:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d10b      	bne.n	80076ec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076d8:	f043 0220 	orr.w	r2, r3, #32
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e0a0      	b.n	800782e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7ff fe70 	bl	80073d4 <LL_ADC_REG_IsConversionOngoing>
 80076f4:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4618      	mov	r0, r3
 80076fe:	f7ff fe69 	bl	80073d4 <LL_ADC_REG_IsConversionOngoing>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	f040 8081 	bne.w	800780c <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800770a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800770e:	2b00      	cmp	r3, #0
 8007710:	d17c      	bne.n	800780c <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a48      	ldr	r2, [pc, #288]	@ (8007838 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d004      	beq.n	8007726 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a46      	ldr	r2, [pc, #280]	@ (800783c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d101      	bne.n	800772a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8007726:	4b46      	ldr	r3, [pc, #280]	@ (8007840 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8007728:	e000      	b.n	800772c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800772a:	4b46      	ldr	r3, [pc, #280]	@ (8007844 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800772c:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d039      	beq.n	80077aa <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8007736:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	431a      	orrs	r2, r3
 8007744:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007746:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a3a      	ldr	r2, [pc, #232]	@ (8007838 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d004      	beq.n	800775c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a39      	ldr	r2, [pc, #228]	@ (800783c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d10e      	bne.n	800777a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 800775c:	4836      	ldr	r0, [pc, #216]	@ (8007838 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800775e:	f7ff fddf 	bl	8007320 <LL_ADC_IsEnabled>
 8007762:	4604      	mov	r4, r0
 8007764:	4835      	ldr	r0, [pc, #212]	@ (800783c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007766:	f7ff fddb 	bl	8007320 <LL_ADC_IsEnabled>
 800776a:	4603      	mov	r3, r0
 800776c:	4323      	orrs	r3, r4
 800776e:	2b00      	cmp	r3, #0
 8007770:	bf0c      	ite	eq
 8007772:	2301      	moveq	r3, #1
 8007774:	2300      	movne	r3, #0
 8007776:	b2db      	uxtb	r3, r3
 8007778:	e008      	b.n	800778c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800777a:	4833      	ldr	r0, [pc, #204]	@ (8007848 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800777c:	f7ff fdd0 	bl	8007320 <LL_ADC_IsEnabled>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	bf0c      	ite	eq
 8007786:	2301      	moveq	r3, #1
 8007788:	2300      	movne	r3, #0
 800778a:	b2db      	uxtb	r3, r3
 800778c:	2b00      	cmp	r3, #0
 800778e:	d047      	beq.n	8007820 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007790:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007792:	689a      	ldr	r2, [r3, #8]
 8007794:	4b2d      	ldr	r3, [pc, #180]	@ (800784c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007796:	4013      	ands	r3, r2
 8007798:	683a      	ldr	r2, [r7, #0]
 800779a:	6811      	ldr	r1, [r2, #0]
 800779c:	683a      	ldr	r2, [r7, #0]
 800779e:	6892      	ldr	r2, [r2, #8]
 80077a0:	430a      	orrs	r2, r1
 80077a2:	431a      	orrs	r2, r3
 80077a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80077a6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80077a8:	e03a      	b.n	8007820 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80077aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80077b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80077b4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a1f      	ldr	r2, [pc, #124]	@ (8007838 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d004      	beq.n	80077ca <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a1d      	ldr	r2, [pc, #116]	@ (800783c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d10e      	bne.n	80077e8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80077ca:	481b      	ldr	r0, [pc, #108]	@ (8007838 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80077cc:	f7ff fda8 	bl	8007320 <LL_ADC_IsEnabled>
 80077d0:	4604      	mov	r4, r0
 80077d2:	481a      	ldr	r0, [pc, #104]	@ (800783c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80077d4:	f7ff fda4 	bl	8007320 <LL_ADC_IsEnabled>
 80077d8:	4603      	mov	r3, r0
 80077da:	4323      	orrs	r3, r4
 80077dc:	2b00      	cmp	r3, #0
 80077de:	bf0c      	ite	eq
 80077e0:	2301      	moveq	r3, #1
 80077e2:	2300      	movne	r3, #0
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	e008      	b.n	80077fa <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80077e8:	4817      	ldr	r0, [pc, #92]	@ (8007848 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80077ea:	f7ff fd99 	bl	8007320 <LL_ADC_IsEnabled>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	bf0c      	ite	eq
 80077f4:	2301      	moveq	r3, #1
 80077f6:	2300      	movne	r3, #0
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d010      	beq.n	8007820 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80077fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007800:	689a      	ldr	r2, [r3, #8]
 8007802:	4b12      	ldr	r3, [pc, #72]	@ (800784c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007804:	4013      	ands	r3, r2
 8007806:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007808:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800780a:	e009      	b.n	8007820 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007810:	f043 0220 	orr.w	r2, r3, #32
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800781e:	e000      	b.n	8007822 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007820:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800782a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800782e:	4618      	mov	r0, r3
 8007830:	378c      	adds	r7, #140	@ 0x8c
 8007832:	46bd      	mov	sp, r7
 8007834:	bd90      	pop	{r4, r7, pc}
 8007836:	bf00      	nop
 8007838:	40022000 	.word	0x40022000
 800783c:	40022100 	.word	0x40022100
 8007840:	40022300 	.word	0x40022300
 8007844:	58026300 	.word	0x58026300
 8007848:	58026000 	.word	0x58026000
 800784c:	fffff0e0 	.word	0xfffff0e0

08007850 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b088      	sub	sp, #32
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8007858:	2300      	movs	r3, #0
 800785a:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 800785c:	2300      	movs	r3, #0
 800785e:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d102      	bne.n	800786c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	77fb      	strb	r3, [r7, #31]
 800786a:	e10e      	b.n	8007a8a <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007876:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800787a:	d102      	bne.n	8007882 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	77fb      	strb	r3, [r7, #31]
 8007880:	e103      	b.n	8007a8a <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b00      	cmp	r3, #0
 800788c:	d109      	bne.n	80078a2 <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f7fc fab9 	bl	8003e14 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 0304 	and.w	r3, r3, #4
 80078ac:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 80078b6:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 80078bc:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 80078c2:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 80078c8:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 80078ce:	4313      	orrs	r3, r2
 80078d0:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	4b6e      	ldr	r3, [pc, #440]	@ (8007a94 <HAL_COMP_Init+0x244>)
 80078da:	4013      	ands	r3, r2
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	6812      	ldr	r2, [r2, #0]
 80078e0:	6979      	ldr	r1, [r7, #20]
 80078e2:	430b      	orrs	r3, r1
 80078e4:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	2b10      	cmp	r3, #16
 80078ec:	d108      	bne.n	8007900 <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f042 0210 	orr.w	r2, r2, #16
 80078fc:	601a      	str	r2, [r3, #0]
 80078fe:	e007      	b.n	8007910 <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f022 0210 	bic.w	r2, r2, #16
 800790e:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0304 	and.w	r3, r3, #4
 800791a:	2b00      	cmp	r3, #0
 800791c:	d016      	beq.n	800794c <HAL_COMP_Init+0xfc>
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d013      	beq.n	800794c <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007924:	4b5c      	ldr	r3, [pc, #368]	@ (8007a98 <HAL_COMP_Init+0x248>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	099b      	lsrs	r3, r3, #6
 800792a:	4a5c      	ldr	r2, [pc, #368]	@ (8007a9c <HAL_COMP_Init+0x24c>)
 800792c:	fba2 2303 	umull	r2, r3, r2, r3
 8007930:	099b      	lsrs	r3, r3, #6
 8007932:	1c5a      	adds	r2, r3, #1
 8007934:	4613      	mov	r3, r2
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	4413      	add	r3, r2
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 800793e:	e002      	b.n	8007946 <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	3b01      	subs	r3, #1
 8007944:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d1f9      	bne.n	8007940 <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a53      	ldr	r2, [pc, #332]	@ (8007aa0 <HAL_COMP_Init+0x250>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d102      	bne.n	800795c <HAL_COMP_Init+0x10c>
 8007956:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800795a:	e001      	b.n	8007960 <HAL_COMP_Init+0x110>
 800795c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007960:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a1b      	ldr	r3, [r3, #32]
 8007966:	f003 0303 	and.w	r3, r3, #3
 800796a:	2b00      	cmp	r3, #0
 800796c:	d06d      	beq.n	8007a4a <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6a1b      	ldr	r3, [r3, #32]
 8007972:	f003 0310 	and.w	r3, r3, #16
 8007976:	2b00      	cmp	r3, #0
 8007978:	d008      	beq.n	800798c <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 800797a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	4313      	orrs	r3, r2
 8007988:	600b      	str	r3, [r1, #0]
 800798a:	e008      	b.n	800799e <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 800798c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	43db      	mvns	r3, r3
 8007996:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800799a:	4013      	ands	r3, r2
 800799c:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a1b      	ldr	r3, [r3, #32]
 80079a2:	f003 0320 	and.w	r3, r3, #32
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d008      	beq.n	80079bc <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 80079aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079ae:	685a      	ldr	r2, [r3, #4]
 80079b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	604b      	str	r3, [r1, #4]
 80079ba:	e008      	b.n	80079ce <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 80079bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079c0:	685a      	ldr	r2, [r3, #4]
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	43db      	mvns	r3, r3
 80079c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80079ca:	4013      	ands	r3, r2
 80079cc:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 80079ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6a1b      	ldr	r3, [r3, #32]
 80079dc:	f003 0302 	and.w	r3, r3, #2
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00a      	beq.n	80079fa <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 80079e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079e8:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80079ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 80079f8:	e00a      	b.n	8007a10 <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 80079fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079fe:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	43db      	mvns	r3, r3
 8007a06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a1b      	ldr	r3, [r3, #32]
 8007a14:	f003 0301 	and.w	r3, r3, #1
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00a      	beq.n	8007a32 <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 8007a1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a20:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8007a24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 8007a30:	e021      	b.n	8007a76 <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 8007a32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a36:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	43db      	mvns	r3, r3
 8007a3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007a42:	4013      	ands	r3, r2
 8007a44:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 8007a48:	e015      	b.n	8007a76 <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 8007a4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a4e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	43db      	mvns	r3, r3
 8007a56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 8007a60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a64:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	43db      	mvns	r3, r3
 8007a6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007a70:	4013      	ands	r3, r2
 8007a72:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d103      	bne.n	8007a8a <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2201      	movs	r2, #1
 8007a86:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
   
  }
  
  return status;
 8007a8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3720      	adds	r7, #32
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	f0e8cce1 	.word	0xf0e8cce1
 8007a98:	24000038 	.word	0x24000038
 8007a9c:	053e2d63 	.word	0x053e2d63
 8007aa0:	5800380c 	.word	0x5800380c

08007aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b085      	sub	sp, #20
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f003 0307 	and.w	r3, r3, #7
 8007ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8007ae4 <__NVIC_SetPriorityGrouping+0x40>)
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007aba:	68ba      	ldr	r2, [r7, #8]
 8007abc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007acc:	4b06      	ldr	r3, [pc, #24]	@ (8007ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007ad2:	4a04      	ldr	r2, [pc, #16]	@ (8007ae4 <__NVIC_SetPriorityGrouping+0x40>)
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	60d3      	str	r3, [r2, #12]
}
 8007ad8:	bf00      	nop
 8007ada:	3714      	adds	r7, #20
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr
 8007ae4:	e000ed00 	.word	0xe000ed00
 8007ae8:	05fa0000 	.word	0x05fa0000

08007aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007aec:	b480      	push	{r7}
 8007aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007af0:	4b04      	ldr	r3, [pc, #16]	@ (8007b04 <__NVIC_GetPriorityGrouping+0x18>)
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	0a1b      	lsrs	r3, r3, #8
 8007af6:	f003 0307 	and.w	r3, r3, #7
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr
 8007b04:	e000ed00 	.word	0xe000ed00

08007b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	4603      	mov	r3, r0
 8007b10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007b12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	db0b      	blt.n	8007b32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b1a:	88fb      	ldrh	r3, [r7, #6]
 8007b1c:	f003 021f 	and.w	r2, r3, #31
 8007b20:	4907      	ldr	r1, [pc, #28]	@ (8007b40 <__NVIC_EnableIRQ+0x38>)
 8007b22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007b26:	095b      	lsrs	r3, r3, #5
 8007b28:	2001      	movs	r0, #1
 8007b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8007b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007b32:	bf00      	nop
 8007b34:	370c      	adds	r7, #12
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	e000e100 	.word	0xe000e100

08007b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	6039      	str	r1, [r7, #0]
 8007b4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007b50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	db0a      	blt.n	8007b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	b2da      	uxtb	r2, r3
 8007b5c:	490c      	ldr	r1, [pc, #48]	@ (8007b90 <__NVIC_SetPriority+0x4c>)
 8007b5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007b62:	0112      	lsls	r2, r2, #4
 8007b64:	b2d2      	uxtb	r2, r2
 8007b66:	440b      	add	r3, r1
 8007b68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007b6c:	e00a      	b.n	8007b84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	b2da      	uxtb	r2, r3
 8007b72:	4908      	ldr	r1, [pc, #32]	@ (8007b94 <__NVIC_SetPriority+0x50>)
 8007b74:	88fb      	ldrh	r3, [r7, #6]
 8007b76:	f003 030f 	and.w	r3, r3, #15
 8007b7a:	3b04      	subs	r3, #4
 8007b7c:	0112      	lsls	r2, r2, #4
 8007b7e:	b2d2      	uxtb	r2, r2
 8007b80:	440b      	add	r3, r1
 8007b82:	761a      	strb	r2, [r3, #24]
}
 8007b84:	bf00      	nop
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr
 8007b90:	e000e100 	.word	0xe000e100
 8007b94:	e000ed00 	.word	0xe000ed00

08007b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b089      	sub	sp, #36	@ 0x24
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f003 0307 	and.w	r3, r3, #7
 8007baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	f1c3 0307 	rsb	r3, r3, #7
 8007bb2:	2b04      	cmp	r3, #4
 8007bb4:	bf28      	it	cs
 8007bb6:	2304      	movcs	r3, #4
 8007bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	3304      	adds	r3, #4
 8007bbe:	2b06      	cmp	r3, #6
 8007bc0:	d902      	bls.n	8007bc8 <NVIC_EncodePriority+0x30>
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	3b03      	subs	r3, #3
 8007bc6:	e000      	b.n	8007bca <NVIC_EncodePriority+0x32>
 8007bc8:	2300      	movs	r3, #0
 8007bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007bcc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bd6:	43da      	mvns	r2, r3
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	401a      	ands	r2, r3
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007be0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	fa01 f303 	lsl.w	r3, r1, r3
 8007bea:	43d9      	mvns	r1, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007bf0:	4313      	orrs	r3, r2
         );
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3724      	adds	r7, #36	@ 0x24
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
	...

08007c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c10:	d301      	bcc.n	8007c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007c12:	2301      	movs	r3, #1
 8007c14:	e00f      	b.n	8007c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007c16:	4a0a      	ldr	r2, [pc, #40]	@ (8007c40 <SysTick_Config+0x40>)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007c1e:	210f      	movs	r1, #15
 8007c20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c24:	f7ff ff8e 	bl	8007b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007c28:	4b05      	ldr	r3, [pc, #20]	@ (8007c40 <SysTick_Config+0x40>)
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007c2e:	4b04      	ldr	r3, [pc, #16]	@ (8007c40 <SysTick_Config+0x40>)
 8007c30:	2207      	movs	r2, #7
 8007c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	e000e010 	.word	0xe000e010

08007c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f7ff ff29 	bl	8007aa4 <__NVIC_SetPriorityGrouping>
}
 8007c52:	bf00      	nop
 8007c54:	3708      	adds	r7, #8
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b086      	sub	sp, #24
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	4603      	mov	r3, r0
 8007c62:	60b9      	str	r1, [r7, #8]
 8007c64:	607a      	str	r2, [r7, #4]
 8007c66:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007c68:	f7ff ff40 	bl	8007aec <__NVIC_GetPriorityGrouping>
 8007c6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	68b9      	ldr	r1, [r7, #8]
 8007c72:	6978      	ldr	r0, [r7, #20]
 8007c74:	f7ff ff90 	bl	8007b98 <NVIC_EncodePriority>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007c7e:	4611      	mov	r1, r2
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7ff ff5f 	bl	8007b44 <__NVIC_SetPriority>
}
 8007c86:	bf00      	nop
 8007c88:	3718      	adds	r7, #24
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b082      	sub	sp, #8
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	4603      	mov	r3, r0
 8007c96:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007c98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7ff ff33 	bl	8007b08 <__NVIC_EnableIRQ>
}
 8007ca2:	bf00      	nop
 8007ca4:	3708      	adds	r7, #8
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b082      	sub	sp, #8
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f7ff ffa4 	bl	8007c00 <SysTick_Config>
 8007cb8:	4603      	mov	r3, r0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3708      	adds	r7, #8
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
	...

08007cc4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b086      	sub	sp, #24
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007ccc:	f7fc fe4e 	bl	800496c <HAL_GetTick>
 8007cd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d101      	bne.n	8007cdc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e312      	b.n	8008302 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a66      	ldr	r2, [pc, #408]	@ (8007e7c <HAL_DMA_Init+0x1b8>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d04a      	beq.n	8007d7c <HAL_DMA_Init+0xb8>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a65      	ldr	r2, [pc, #404]	@ (8007e80 <HAL_DMA_Init+0x1bc>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d045      	beq.n	8007d7c <HAL_DMA_Init+0xb8>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a63      	ldr	r2, [pc, #396]	@ (8007e84 <HAL_DMA_Init+0x1c0>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d040      	beq.n	8007d7c <HAL_DMA_Init+0xb8>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a62      	ldr	r2, [pc, #392]	@ (8007e88 <HAL_DMA_Init+0x1c4>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d03b      	beq.n	8007d7c <HAL_DMA_Init+0xb8>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a60      	ldr	r2, [pc, #384]	@ (8007e8c <HAL_DMA_Init+0x1c8>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d036      	beq.n	8007d7c <HAL_DMA_Init+0xb8>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a5f      	ldr	r2, [pc, #380]	@ (8007e90 <HAL_DMA_Init+0x1cc>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d031      	beq.n	8007d7c <HAL_DMA_Init+0xb8>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a5d      	ldr	r2, [pc, #372]	@ (8007e94 <HAL_DMA_Init+0x1d0>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d02c      	beq.n	8007d7c <HAL_DMA_Init+0xb8>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a5c      	ldr	r2, [pc, #368]	@ (8007e98 <HAL_DMA_Init+0x1d4>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d027      	beq.n	8007d7c <HAL_DMA_Init+0xb8>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a5a      	ldr	r2, [pc, #360]	@ (8007e9c <HAL_DMA_Init+0x1d8>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d022      	beq.n	8007d7c <HAL_DMA_Init+0xb8>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a59      	ldr	r2, [pc, #356]	@ (8007ea0 <HAL_DMA_Init+0x1dc>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d01d      	beq.n	8007d7c <HAL_DMA_Init+0xb8>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a57      	ldr	r2, [pc, #348]	@ (8007ea4 <HAL_DMA_Init+0x1e0>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d018      	beq.n	8007d7c <HAL_DMA_Init+0xb8>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a56      	ldr	r2, [pc, #344]	@ (8007ea8 <HAL_DMA_Init+0x1e4>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d013      	beq.n	8007d7c <HAL_DMA_Init+0xb8>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a54      	ldr	r2, [pc, #336]	@ (8007eac <HAL_DMA_Init+0x1e8>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d00e      	beq.n	8007d7c <HAL_DMA_Init+0xb8>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a53      	ldr	r2, [pc, #332]	@ (8007eb0 <HAL_DMA_Init+0x1ec>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d009      	beq.n	8007d7c <HAL_DMA_Init+0xb8>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a51      	ldr	r2, [pc, #324]	@ (8007eb4 <HAL_DMA_Init+0x1f0>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d004      	beq.n	8007d7c <HAL_DMA_Init+0xb8>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a50      	ldr	r2, [pc, #320]	@ (8007eb8 <HAL_DMA_Init+0x1f4>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d101      	bne.n	8007d80 <HAL_DMA_Init+0xbc>
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e000      	b.n	8007d82 <HAL_DMA_Init+0xbe>
 8007d80:	2300      	movs	r3, #0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f000 813c 	beq.w	8008000 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2202      	movs	r2, #2
 8007d8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a37      	ldr	r2, [pc, #220]	@ (8007e7c <HAL_DMA_Init+0x1b8>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d04a      	beq.n	8007e38 <HAL_DMA_Init+0x174>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a36      	ldr	r2, [pc, #216]	@ (8007e80 <HAL_DMA_Init+0x1bc>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d045      	beq.n	8007e38 <HAL_DMA_Init+0x174>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a34      	ldr	r2, [pc, #208]	@ (8007e84 <HAL_DMA_Init+0x1c0>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d040      	beq.n	8007e38 <HAL_DMA_Init+0x174>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a33      	ldr	r2, [pc, #204]	@ (8007e88 <HAL_DMA_Init+0x1c4>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d03b      	beq.n	8007e38 <HAL_DMA_Init+0x174>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a31      	ldr	r2, [pc, #196]	@ (8007e8c <HAL_DMA_Init+0x1c8>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d036      	beq.n	8007e38 <HAL_DMA_Init+0x174>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a30      	ldr	r2, [pc, #192]	@ (8007e90 <HAL_DMA_Init+0x1cc>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d031      	beq.n	8007e38 <HAL_DMA_Init+0x174>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a2e      	ldr	r2, [pc, #184]	@ (8007e94 <HAL_DMA_Init+0x1d0>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d02c      	beq.n	8007e38 <HAL_DMA_Init+0x174>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a2d      	ldr	r2, [pc, #180]	@ (8007e98 <HAL_DMA_Init+0x1d4>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d027      	beq.n	8007e38 <HAL_DMA_Init+0x174>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a2b      	ldr	r2, [pc, #172]	@ (8007e9c <HAL_DMA_Init+0x1d8>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d022      	beq.n	8007e38 <HAL_DMA_Init+0x174>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a2a      	ldr	r2, [pc, #168]	@ (8007ea0 <HAL_DMA_Init+0x1dc>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d01d      	beq.n	8007e38 <HAL_DMA_Init+0x174>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a28      	ldr	r2, [pc, #160]	@ (8007ea4 <HAL_DMA_Init+0x1e0>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d018      	beq.n	8007e38 <HAL_DMA_Init+0x174>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a27      	ldr	r2, [pc, #156]	@ (8007ea8 <HAL_DMA_Init+0x1e4>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d013      	beq.n	8007e38 <HAL_DMA_Init+0x174>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a25      	ldr	r2, [pc, #148]	@ (8007eac <HAL_DMA_Init+0x1e8>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d00e      	beq.n	8007e38 <HAL_DMA_Init+0x174>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a24      	ldr	r2, [pc, #144]	@ (8007eb0 <HAL_DMA_Init+0x1ec>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d009      	beq.n	8007e38 <HAL_DMA_Init+0x174>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a22      	ldr	r2, [pc, #136]	@ (8007eb4 <HAL_DMA_Init+0x1f0>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d004      	beq.n	8007e38 <HAL_DMA_Init+0x174>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a21      	ldr	r2, [pc, #132]	@ (8007eb8 <HAL_DMA_Init+0x1f4>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d108      	bne.n	8007e4a <HAL_DMA_Init+0x186>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f022 0201 	bic.w	r2, r2, #1
 8007e46:	601a      	str	r2, [r3, #0]
 8007e48:	e007      	b.n	8007e5a <HAL_DMA_Init+0x196>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f022 0201 	bic.w	r2, r2, #1
 8007e58:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007e5a:	e02f      	b.n	8007ebc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007e5c:	f7fc fd86 	bl	800496c <HAL_GetTick>
 8007e60:	4602      	mov	r2, r0
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	2b05      	cmp	r3, #5
 8007e68:	d928      	bls.n	8007ebc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2220      	movs	r2, #32
 8007e6e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2203      	movs	r2, #3
 8007e74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e242      	b.n	8008302 <HAL_DMA_Init+0x63e>
 8007e7c:	40020010 	.word	0x40020010
 8007e80:	40020028 	.word	0x40020028
 8007e84:	40020040 	.word	0x40020040
 8007e88:	40020058 	.word	0x40020058
 8007e8c:	40020070 	.word	0x40020070
 8007e90:	40020088 	.word	0x40020088
 8007e94:	400200a0 	.word	0x400200a0
 8007e98:	400200b8 	.word	0x400200b8
 8007e9c:	40020410 	.word	0x40020410
 8007ea0:	40020428 	.word	0x40020428
 8007ea4:	40020440 	.word	0x40020440
 8007ea8:	40020458 	.word	0x40020458
 8007eac:	40020470 	.word	0x40020470
 8007eb0:	40020488 	.word	0x40020488
 8007eb4:	400204a0 	.word	0x400204a0
 8007eb8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1c8      	bne.n	8007e5c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007ed2:	697a      	ldr	r2, [r7, #20]
 8007ed4:	4b83      	ldr	r3, [pc, #524]	@ (80080e4 <HAL_DMA_Init+0x420>)
 8007ed6:	4013      	ands	r3, r2
 8007ed8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007ee2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007eee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	699b      	ldr	r3, [r3, #24]
 8007ef4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007efa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6a1b      	ldr	r3, [r3, #32]
 8007f00:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f0c:	2b04      	cmp	r3, #4
 8007f0e:	d107      	bne.n	8007f20 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	697a      	ldr	r2, [r7, #20]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	2b28      	cmp	r3, #40	@ 0x28
 8007f26:	d903      	bls.n	8007f30 <HAL_DMA_Init+0x26c>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f2e:	d91f      	bls.n	8007f70 <HAL_DMA_Init+0x2ac>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f36:	d903      	bls.n	8007f40 <HAL_DMA_Init+0x27c>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	2b42      	cmp	r3, #66	@ 0x42
 8007f3e:	d917      	bls.n	8007f70 <HAL_DMA_Init+0x2ac>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	2b46      	cmp	r3, #70	@ 0x46
 8007f46:	d903      	bls.n	8007f50 <HAL_DMA_Init+0x28c>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	2b48      	cmp	r3, #72	@ 0x48
 8007f4e:	d90f      	bls.n	8007f70 <HAL_DMA_Init+0x2ac>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	2b4e      	cmp	r3, #78	@ 0x4e
 8007f56:	d903      	bls.n	8007f60 <HAL_DMA_Init+0x29c>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	2b52      	cmp	r3, #82	@ 0x52
 8007f5e:	d907      	bls.n	8007f70 <HAL_DMA_Init+0x2ac>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	2b73      	cmp	r3, #115	@ 0x73
 8007f66:	d905      	bls.n	8007f74 <HAL_DMA_Init+0x2b0>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	2b77      	cmp	r3, #119	@ 0x77
 8007f6e:	d801      	bhi.n	8007f74 <HAL_DMA_Init+0x2b0>
 8007f70:	2301      	movs	r3, #1
 8007f72:	e000      	b.n	8007f76 <HAL_DMA_Init+0x2b2>
 8007f74:	2300      	movs	r3, #0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d003      	beq.n	8007f82 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f80:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	697a      	ldr	r2, [r7, #20]
 8007f88:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	695b      	ldr	r3, [r3, #20]
 8007f90:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	f023 0307 	bic.w	r3, r3, #7
 8007f98:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fa8:	2b04      	cmp	r3, #4
 8007faa:	d117      	bne.n	8007fdc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fb0:	697a      	ldr	r2, [r7, #20]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00e      	beq.n	8007fdc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f001 fdca 	bl	8009b58 <DMA_CheckFifoParam>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d008      	beq.n	8007fdc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2240      	movs	r2, #64	@ 0x40
 8007fce:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e192      	b.n	8008302 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	697a      	ldr	r2, [r7, #20]
 8007fe2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f001 fd05 	bl	80099f4 <DMA_CalcBaseAndBitshift>
 8007fea:	4603      	mov	r3, r0
 8007fec:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ff2:	f003 031f 	and.w	r3, r3, #31
 8007ff6:	223f      	movs	r2, #63	@ 0x3f
 8007ff8:	409a      	lsls	r2, r3
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	609a      	str	r2, [r3, #8]
 8007ffe:	e0c8      	b.n	8008192 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a38      	ldr	r2, [pc, #224]	@ (80080e8 <HAL_DMA_Init+0x424>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d022      	beq.n	8008050 <HAL_DMA_Init+0x38c>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a37      	ldr	r2, [pc, #220]	@ (80080ec <HAL_DMA_Init+0x428>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d01d      	beq.n	8008050 <HAL_DMA_Init+0x38c>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a35      	ldr	r2, [pc, #212]	@ (80080f0 <HAL_DMA_Init+0x42c>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d018      	beq.n	8008050 <HAL_DMA_Init+0x38c>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a34      	ldr	r2, [pc, #208]	@ (80080f4 <HAL_DMA_Init+0x430>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d013      	beq.n	8008050 <HAL_DMA_Init+0x38c>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a32      	ldr	r2, [pc, #200]	@ (80080f8 <HAL_DMA_Init+0x434>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d00e      	beq.n	8008050 <HAL_DMA_Init+0x38c>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a31      	ldr	r2, [pc, #196]	@ (80080fc <HAL_DMA_Init+0x438>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d009      	beq.n	8008050 <HAL_DMA_Init+0x38c>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a2f      	ldr	r2, [pc, #188]	@ (8008100 <HAL_DMA_Init+0x43c>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d004      	beq.n	8008050 <HAL_DMA_Init+0x38c>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a2e      	ldr	r2, [pc, #184]	@ (8008104 <HAL_DMA_Init+0x440>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d101      	bne.n	8008054 <HAL_DMA_Init+0x390>
 8008050:	2301      	movs	r3, #1
 8008052:	e000      	b.n	8008056 <HAL_DMA_Init+0x392>
 8008054:	2300      	movs	r3, #0
 8008056:	2b00      	cmp	r3, #0
 8008058:	f000 8092 	beq.w	8008180 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a21      	ldr	r2, [pc, #132]	@ (80080e8 <HAL_DMA_Init+0x424>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d021      	beq.n	80080aa <HAL_DMA_Init+0x3e6>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a20      	ldr	r2, [pc, #128]	@ (80080ec <HAL_DMA_Init+0x428>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d01c      	beq.n	80080aa <HAL_DMA_Init+0x3e6>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a1e      	ldr	r2, [pc, #120]	@ (80080f0 <HAL_DMA_Init+0x42c>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d017      	beq.n	80080aa <HAL_DMA_Init+0x3e6>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a1d      	ldr	r2, [pc, #116]	@ (80080f4 <HAL_DMA_Init+0x430>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d012      	beq.n	80080aa <HAL_DMA_Init+0x3e6>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a1b      	ldr	r2, [pc, #108]	@ (80080f8 <HAL_DMA_Init+0x434>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d00d      	beq.n	80080aa <HAL_DMA_Init+0x3e6>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a1a      	ldr	r2, [pc, #104]	@ (80080fc <HAL_DMA_Init+0x438>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d008      	beq.n	80080aa <HAL_DMA_Init+0x3e6>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a18      	ldr	r2, [pc, #96]	@ (8008100 <HAL_DMA_Init+0x43c>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d003      	beq.n	80080aa <HAL_DMA_Init+0x3e6>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a17      	ldr	r2, [pc, #92]	@ (8008104 <HAL_DMA_Init+0x440>)
 80080a8:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2202      	movs	r2, #2
 80080ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80080c2:	697a      	ldr	r2, [r7, #20]
 80080c4:	4b10      	ldr	r3, [pc, #64]	@ (8008108 <HAL_DMA_Init+0x444>)
 80080c6:	4013      	ands	r3, r2
 80080c8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	2b40      	cmp	r3, #64	@ 0x40
 80080d0:	d01c      	beq.n	800810c <HAL_DMA_Init+0x448>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	2b80      	cmp	r3, #128	@ 0x80
 80080d8:	d102      	bne.n	80080e0 <HAL_DMA_Init+0x41c>
 80080da:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80080de:	e016      	b.n	800810e <HAL_DMA_Init+0x44a>
 80080e0:	2300      	movs	r3, #0
 80080e2:	e014      	b.n	800810e <HAL_DMA_Init+0x44a>
 80080e4:	fe10803f 	.word	0xfe10803f
 80080e8:	58025408 	.word	0x58025408
 80080ec:	5802541c 	.word	0x5802541c
 80080f0:	58025430 	.word	0x58025430
 80080f4:	58025444 	.word	0x58025444
 80080f8:	58025458 	.word	0x58025458
 80080fc:	5802546c 	.word	0x5802546c
 8008100:	58025480 	.word	0x58025480
 8008104:	58025494 	.word	0x58025494
 8008108:	fffe000f 	.word	0xfffe000f
 800810c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	68d2      	ldr	r2, [r2, #12]
 8008112:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008114:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800811c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	695b      	ldr	r3, [r3, #20]
 8008122:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8008124:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	699b      	ldr	r3, [r3, #24]
 800812a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800812c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	69db      	ldr	r3, [r3, #28]
 8008132:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8008134:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a1b      	ldr	r3, [r3, #32]
 800813a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800813c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800813e:	697a      	ldr	r2, [r7, #20]
 8008140:	4313      	orrs	r3, r2
 8008142:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	697a      	ldr	r2, [r7, #20]
 800814a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	461a      	mov	r2, r3
 8008152:	4b6e      	ldr	r3, [pc, #440]	@ (800830c <HAL_DMA_Init+0x648>)
 8008154:	4413      	add	r3, r2
 8008156:	4a6e      	ldr	r2, [pc, #440]	@ (8008310 <HAL_DMA_Init+0x64c>)
 8008158:	fba2 2303 	umull	r2, r3, r2, r3
 800815c:	091b      	lsrs	r3, r3, #4
 800815e:	009a      	lsls	r2, r3, #2
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f001 fc45 	bl	80099f4 <DMA_CalcBaseAndBitshift>
 800816a:	4603      	mov	r3, r0
 800816c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008172:	f003 031f 	and.w	r3, r3, #31
 8008176:	2201      	movs	r2, #1
 8008178:	409a      	lsls	r2, r3
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	605a      	str	r2, [r3, #4]
 800817e:	e008      	b.n	8008192 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2240      	movs	r2, #64	@ 0x40
 8008184:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2203      	movs	r2, #3
 800818a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	e0b7      	b.n	8008302 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a5f      	ldr	r2, [pc, #380]	@ (8008314 <HAL_DMA_Init+0x650>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d072      	beq.n	8008282 <HAL_DMA_Init+0x5be>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a5d      	ldr	r2, [pc, #372]	@ (8008318 <HAL_DMA_Init+0x654>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d06d      	beq.n	8008282 <HAL_DMA_Init+0x5be>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a5c      	ldr	r2, [pc, #368]	@ (800831c <HAL_DMA_Init+0x658>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d068      	beq.n	8008282 <HAL_DMA_Init+0x5be>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a5a      	ldr	r2, [pc, #360]	@ (8008320 <HAL_DMA_Init+0x65c>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d063      	beq.n	8008282 <HAL_DMA_Init+0x5be>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a59      	ldr	r2, [pc, #356]	@ (8008324 <HAL_DMA_Init+0x660>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d05e      	beq.n	8008282 <HAL_DMA_Init+0x5be>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a57      	ldr	r2, [pc, #348]	@ (8008328 <HAL_DMA_Init+0x664>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d059      	beq.n	8008282 <HAL_DMA_Init+0x5be>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a56      	ldr	r2, [pc, #344]	@ (800832c <HAL_DMA_Init+0x668>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d054      	beq.n	8008282 <HAL_DMA_Init+0x5be>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a54      	ldr	r2, [pc, #336]	@ (8008330 <HAL_DMA_Init+0x66c>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d04f      	beq.n	8008282 <HAL_DMA_Init+0x5be>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a53      	ldr	r2, [pc, #332]	@ (8008334 <HAL_DMA_Init+0x670>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d04a      	beq.n	8008282 <HAL_DMA_Init+0x5be>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a51      	ldr	r2, [pc, #324]	@ (8008338 <HAL_DMA_Init+0x674>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d045      	beq.n	8008282 <HAL_DMA_Init+0x5be>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a50      	ldr	r2, [pc, #320]	@ (800833c <HAL_DMA_Init+0x678>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d040      	beq.n	8008282 <HAL_DMA_Init+0x5be>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a4e      	ldr	r2, [pc, #312]	@ (8008340 <HAL_DMA_Init+0x67c>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d03b      	beq.n	8008282 <HAL_DMA_Init+0x5be>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a4d      	ldr	r2, [pc, #308]	@ (8008344 <HAL_DMA_Init+0x680>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d036      	beq.n	8008282 <HAL_DMA_Init+0x5be>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a4b      	ldr	r2, [pc, #300]	@ (8008348 <HAL_DMA_Init+0x684>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d031      	beq.n	8008282 <HAL_DMA_Init+0x5be>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a4a      	ldr	r2, [pc, #296]	@ (800834c <HAL_DMA_Init+0x688>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d02c      	beq.n	8008282 <HAL_DMA_Init+0x5be>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a48      	ldr	r2, [pc, #288]	@ (8008350 <HAL_DMA_Init+0x68c>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d027      	beq.n	8008282 <HAL_DMA_Init+0x5be>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a47      	ldr	r2, [pc, #284]	@ (8008354 <HAL_DMA_Init+0x690>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d022      	beq.n	8008282 <HAL_DMA_Init+0x5be>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a45      	ldr	r2, [pc, #276]	@ (8008358 <HAL_DMA_Init+0x694>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d01d      	beq.n	8008282 <HAL_DMA_Init+0x5be>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a44      	ldr	r2, [pc, #272]	@ (800835c <HAL_DMA_Init+0x698>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d018      	beq.n	8008282 <HAL_DMA_Init+0x5be>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a42      	ldr	r2, [pc, #264]	@ (8008360 <HAL_DMA_Init+0x69c>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d013      	beq.n	8008282 <HAL_DMA_Init+0x5be>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a41      	ldr	r2, [pc, #260]	@ (8008364 <HAL_DMA_Init+0x6a0>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d00e      	beq.n	8008282 <HAL_DMA_Init+0x5be>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a3f      	ldr	r2, [pc, #252]	@ (8008368 <HAL_DMA_Init+0x6a4>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d009      	beq.n	8008282 <HAL_DMA_Init+0x5be>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a3e      	ldr	r2, [pc, #248]	@ (800836c <HAL_DMA_Init+0x6a8>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d004      	beq.n	8008282 <HAL_DMA_Init+0x5be>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a3c      	ldr	r2, [pc, #240]	@ (8008370 <HAL_DMA_Init+0x6ac>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d101      	bne.n	8008286 <HAL_DMA_Init+0x5c2>
 8008282:	2301      	movs	r3, #1
 8008284:	e000      	b.n	8008288 <HAL_DMA_Init+0x5c4>
 8008286:	2300      	movs	r3, #0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d032      	beq.n	80082f2 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f001 fcdf 	bl	8009c50 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	2b80      	cmp	r3, #128	@ 0x80
 8008298:	d102      	bne.n	80082a0 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	685a      	ldr	r2, [r3, #4]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082a8:	b2d2      	uxtb	r2, r2
 80082aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80082b4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d010      	beq.n	80082e0 <HAL_DMA_Init+0x61c>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	2b08      	cmp	r3, #8
 80082c4:	d80c      	bhi.n	80082e0 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f001 fd5c 	bl	8009d84 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082d0:	2200      	movs	r2, #0
 80082d2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80082dc:	605a      	str	r2, [r3, #4]
 80082de:	e008      	b.n	80082f2 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3718      	adds	r7, #24
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	a7fdabf8 	.word	0xa7fdabf8
 8008310:	cccccccd 	.word	0xcccccccd
 8008314:	40020010 	.word	0x40020010
 8008318:	40020028 	.word	0x40020028
 800831c:	40020040 	.word	0x40020040
 8008320:	40020058 	.word	0x40020058
 8008324:	40020070 	.word	0x40020070
 8008328:	40020088 	.word	0x40020088
 800832c:	400200a0 	.word	0x400200a0
 8008330:	400200b8 	.word	0x400200b8
 8008334:	40020410 	.word	0x40020410
 8008338:	40020428 	.word	0x40020428
 800833c:	40020440 	.word	0x40020440
 8008340:	40020458 	.word	0x40020458
 8008344:	40020470 	.word	0x40020470
 8008348:	40020488 	.word	0x40020488
 800834c:	400204a0 	.word	0x400204a0
 8008350:	400204b8 	.word	0x400204b8
 8008354:	58025408 	.word	0x58025408
 8008358:	5802541c 	.word	0x5802541c
 800835c:	58025430 	.word	0x58025430
 8008360:	58025444 	.word	0x58025444
 8008364:	58025458 	.word	0x58025458
 8008368:	5802546c 	.word	0x5802546c
 800836c:	58025480 	.word	0x58025480
 8008370:	58025494 	.word	0x58025494

08008374 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b086      	sub	sp, #24
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	607a      	str	r2, [r7, #4]
 8008380:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008382:	2300      	movs	r3, #0
 8008384:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d101      	bne.n	8008390 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	e226      	b.n	80087de <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008396:	2b01      	cmp	r3, #1
 8008398:	d101      	bne.n	800839e <HAL_DMA_Start_IT+0x2a>
 800839a:	2302      	movs	r3, #2
 800839c:	e21f      	b.n	80087de <HAL_DMA_Start_IT+0x46a>
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2201      	movs	r2, #1
 80083a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	f040 820a 	bne.w	80087c8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2202      	movs	r2, #2
 80083b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2200      	movs	r2, #0
 80083c0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a68      	ldr	r2, [pc, #416]	@ (8008568 <HAL_DMA_Start_IT+0x1f4>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d04a      	beq.n	8008462 <HAL_DMA_Start_IT+0xee>
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a66      	ldr	r2, [pc, #408]	@ (800856c <HAL_DMA_Start_IT+0x1f8>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d045      	beq.n	8008462 <HAL_DMA_Start_IT+0xee>
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a65      	ldr	r2, [pc, #404]	@ (8008570 <HAL_DMA_Start_IT+0x1fc>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d040      	beq.n	8008462 <HAL_DMA_Start_IT+0xee>
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a63      	ldr	r2, [pc, #396]	@ (8008574 <HAL_DMA_Start_IT+0x200>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d03b      	beq.n	8008462 <HAL_DMA_Start_IT+0xee>
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a62      	ldr	r2, [pc, #392]	@ (8008578 <HAL_DMA_Start_IT+0x204>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d036      	beq.n	8008462 <HAL_DMA_Start_IT+0xee>
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a60      	ldr	r2, [pc, #384]	@ (800857c <HAL_DMA_Start_IT+0x208>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d031      	beq.n	8008462 <HAL_DMA_Start_IT+0xee>
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a5f      	ldr	r2, [pc, #380]	@ (8008580 <HAL_DMA_Start_IT+0x20c>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d02c      	beq.n	8008462 <HAL_DMA_Start_IT+0xee>
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a5d      	ldr	r2, [pc, #372]	@ (8008584 <HAL_DMA_Start_IT+0x210>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d027      	beq.n	8008462 <HAL_DMA_Start_IT+0xee>
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a5c      	ldr	r2, [pc, #368]	@ (8008588 <HAL_DMA_Start_IT+0x214>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d022      	beq.n	8008462 <HAL_DMA_Start_IT+0xee>
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a5a      	ldr	r2, [pc, #360]	@ (800858c <HAL_DMA_Start_IT+0x218>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d01d      	beq.n	8008462 <HAL_DMA_Start_IT+0xee>
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a59      	ldr	r2, [pc, #356]	@ (8008590 <HAL_DMA_Start_IT+0x21c>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d018      	beq.n	8008462 <HAL_DMA_Start_IT+0xee>
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a57      	ldr	r2, [pc, #348]	@ (8008594 <HAL_DMA_Start_IT+0x220>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d013      	beq.n	8008462 <HAL_DMA_Start_IT+0xee>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a56      	ldr	r2, [pc, #344]	@ (8008598 <HAL_DMA_Start_IT+0x224>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d00e      	beq.n	8008462 <HAL_DMA_Start_IT+0xee>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a54      	ldr	r2, [pc, #336]	@ (800859c <HAL_DMA_Start_IT+0x228>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d009      	beq.n	8008462 <HAL_DMA_Start_IT+0xee>
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a53      	ldr	r2, [pc, #332]	@ (80085a0 <HAL_DMA_Start_IT+0x22c>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d004      	beq.n	8008462 <HAL_DMA_Start_IT+0xee>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a51      	ldr	r2, [pc, #324]	@ (80085a4 <HAL_DMA_Start_IT+0x230>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d108      	bne.n	8008474 <HAL_DMA_Start_IT+0x100>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f022 0201 	bic.w	r2, r2, #1
 8008470:	601a      	str	r2, [r3, #0]
 8008472:	e007      	b.n	8008484 <HAL_DMA_Start_IT+0x110>
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f022 0201 	bic.w	r2, r2, #1
 8008482:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	68b9      	ldr	r1, [r7, #8]
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f001 f906 	bl	800969c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a34      	ldr	r2, [pc, #208]	@ (8008568 <HAL_DMA_Start_IT+0x1f4>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d04a      	beq.n	8008530 <HAL_DMA_Start_IT+0x1bc>
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a33      	ldr	r2, [pc, #204]	@ (800856c <HAL_DMA_Start_IT+0x1f8>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d045      	beq.n	8008530 <HAL_DMA_Start_IT+0x1bc>
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a31      	ldr	r2, [pc, #196]	@ (8008570 <HAL_DMA_Start_IT+0x1fc>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d040      	beq.n	8008530 <HAL_DMA_Start_IT+0x1bc>
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a30      	ldr	r2, [pc, #192]	@ (8008574 <HAL_DMA_Start_IT+0x200>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d03b      	beq.n	8008530 <HAL_DMA_Start_IT+0x1bc>
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a2e      	ldr	r2, [pc, #184]	@ (8008578 <HAL_DMA_Start_IT+0x204>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d036      	beq.n	8008530 <HAL_DMA_Start_IT+0x1bc>
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a2d      	ldr	r2, [pc, #180]	@ (800857c <HAL_DMA_Start_IT+0x208>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d031      	beq.n	8008530 <HAL_DMA_Start_IT+0x1bc>
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a2b      	ldr	r2, [pc, #172]	@ (8008580 <HAL_DMA_Start_IT+0x20c>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d02c      	beq.n	8008530 <HAL_DMA_Start_IT+0x1bc>
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a2a      	ldr	r2, [pc, #168]	@ (8008584 <HAL_DMA_Start_IT+0x210>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d027      	beq.n	8008530 <HAL_DMA_Start_IT+0x1bc>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a28      	ldr	r2, [pc, #160]	@ (8008588 <HAL_DMA_Start_IT+0x214>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d022      	beq.n	8008530 <HAL_DMA_Start_IT+0x1bc>
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a27      	ldr	r2, [pc, #156]	@ (800858c <HAL_DMA_Start_IT+0x218>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d01d      	beq.n	8008530 <HAL_DMA_Start_IT+0x1bc>
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a25      	ldr	r2, [pc, #148]	@ (8008590 <HAL_DMA_Start_IT+0x21c>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d018      	beq.n	8008530 <HAL_DMA_Start_IT+0x1bc>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a24      	ldr	r2, [pc, #144]	@ (8008594 <HAL_DMA_Start_IT+0x220>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d013      	beq.n	8008530 <HAL_DMA_Start_IT+0x1bc>
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a22      	ldr	r2, [pc, #136]	@ (8008598 <HAL_DMA_Start_IT+0x224>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d00e      	beq.n	8008530 <HAL_DMA_Start_IT+0x1bc>
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a21      	ldr	r2, [pc, #132]	@ (800859c <HAL_DMA_Start_IT+0x228>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d009      	beq.n	8008530 <HAL_DMA_Start_IT+0x1bc>
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a1f      	ldr	r2, [pc, #124]	@ (80085a0 <HAL_DMA_Start_IT+0x22c>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d004      	beq.n	8008530 <HAL_DMA_Start_IT+0x1bc>
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a1e      	ldr	r2, [pc, #120]	@ (80085a4 <HAL_DMA_Start_IT+0x230>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d101      	bne.n	8008534 <HAL_DMA_Start_IT+0x1c0>
 8008530:	2301      	movs	r3, #1
 8008532:	e000      	b.n	8008536 <HAL_DMA_Start_IT+0x1c2>
 8008534:	2300      	movs	r3, #0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d036      	beq.n	80085a8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f023 021e 	bic.w	r2, r3, #30
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f042 0216 	orr.w	r2, r2, #22
 800854c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008552:	2b00      	cmp	r3, #0
 8008554:	d03e      	beq.n	80085d4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f042 0208 	orr.w	r2, r2, #8
 8008564:	601a      	str	r2, [r3, #0]
 8008566:	e035      	b.n	80085d4 <HAL_DMA_Start_IT+0x260>
 8008568:	40020010 	.word	0x40020010
 800856c:	40020028 	.word	0x40020028
 8008570:	40020040 	.word	0x40020040
 8008574:	40020058 	.word	0x40020058
 8008578:	40020070 	.word	0x40020070
 800857c:	40020088 	.word	0x40020088
 8008580:	400200a0 	.word	0x400200a0
 8008584:	400200b8 	.word	0x400200b8
 8008588:	40020410 	.word	0x40020410
 800858c:	40020428 	.word	0x40020428
 8008590:	40020440 	.word	0x40020440
 8008594:	40020458 	.word	0x40020458
 8008598:	40020470 	.word	0x40020470
 800859c:	40020488 	.word	0x40020488
 80085a0:	400204a0 	.word	0x400204a0
 80085a4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f023 020e 	bic.w	r2, r3, #14
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f042 020a 	orr.w	r2, r2, #10
 80085ba:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d007      	beq.n	80085d4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f042 0204 	orr.w	r2, r2, #4
 80085d2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a83      	ldr	r2, [pc, #524]	@ (80087e8 <HAL_DMA_Start_IT+0x474>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d072      	beq.n	80086c4 <HAL_DMA_Start_IT+0x350>
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a82      	ldr	r2, [pc, #520]	@ (80087ec <HAL_DMA_Start_IT+0x478>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d06d      	beq.n	80086c4 <HAL_DMA_Start_IT+0x350>
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a80      	ldr	r2, [pc, #512]	@ (80087f0 <HAL_DMA_Start_IT+0x47c>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d068      	beq.n	80086c4 <HAL_DMA_Start_IT+0x350>
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a7f      	ldr	r2, [pc, #508]	@ (80087f4 <HAL_DMA_Start_IT+0x480>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d063      	beq.n	80086c4 <HAL_DMA_Start_IT+0x350>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a7d      	ldr	r2, [pc, #500]	@ (80087f8 <HAL_DMA_Start_IT+0x484>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d05e      	beq.n	80086c4 <HAL_DMA_Start_IT+0x350>
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a7c      	ldr	r2, [pc, #496]	@ (80087fc <HAL_DMA_Start_IT+0x488>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d059      	beq.n	80086c4 <HAL_DMA_Start_IT+0x350>
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a7a      	ldr	r2, [pc, #488]	@ (8008800 <HAL_DMA_Start_IT+0x48c>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d054      	beq.n	80086c4 <HAL_DMA_Start_IT+0x350>
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a79      	ldr	r2, [pc, #484]	@ (8008804 <HAL_DMA_Start_IT+0x490>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d04f      	beq.n	80086c4 <HAL_DMA_Start_IT+0x350>
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a77      	ldr	r2, [pc, #476]	@ (8008808 <HAL_DMA_Start_IT+0x494>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d04a      	beq.n	80086c4 <HAL_DMA_Start_IT+0x350>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a76      	ldr	r2, [pc, #472]	@ (800880c <HAL_DMA_Start_IT+0x498>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d045      	beq.n	80086c4 <HAL_DMA_Start_IT+0x350>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a74      	ldr	r2, [pc, #464]	@ (8008810 <HAL_DMA_Start_IT+0x49c>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d040      	beq.n	80086c4 <HAL_DMA_Start_IT+0x350>
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a73      	ldr	r2, [pc, #460]	@ (8008814 <HAL_DMA_Start_IT+0x4a0>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d03b      	beq.n	80086c4 <HAL_DMA_Start_IT+0x350>
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a71      	ldr	r2, [pc, #452]	@ (8008818 <HAL_DMA_Start_IT+0x4a4>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d036      	beq.n	80086c4 <HAL_DMA_Start_IT+0x350>
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a70      	ldr	r2, [pc, #448]	@ (800881c <HAL_DMA_Start_IT+0x4a8>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d031      	beq.n	80086c4 <HAL_DMA_Start_IT+0x350>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a6e      	ldr	r2, [pc, #440]	@ (8008820 <HAL_DMA_Start_IT+0x4ac>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d02c      	beq.n	80086c4 <HAL_DMA_Start_IT+0x350>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a6d      	ldr	r2, [pc, #436]	@ (8008824 <HAL_DMA_Start_IT+0x4b0>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d027      	beq.n	80086c4 <HAL_DMA_Start_IT+0x350>
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a6b      	ldr	r2, [pc, #428]	@ (8008828 <HAL_DMA_Start_IT+0x4b4>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d022      	beq.n	80086c4 <HAL_DMA_Start_IT+0x350>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a6a      	ldr	r2, [pc, #424]	@ (800882c <HAL_DMA_Start_IT+0x4b8>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d01d      	beq.n	80086c4 <HAL_DMA_Start_IT+0x350>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a68      	ldr	r2, [pc, #416]	@ (8008830 <HAL_DMA_Start_IT+0x4bc>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d018      	beq.n	80086c4 <HAL_DMA_Start_IT+0x350>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a67      	ldr	r2, [pc, #412]	@ (8008834 <HAL_DMA_Start_IT+0x4c0>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d013      	beq.n	80086c4 <HAL_DMA_Start_IT+0x350>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a65      	ldr	r2, [pc, #404]	@ (8008838 <HAL_DMA_Start_IT+0x4c4>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d00e      	beq.n	80086c4 <HAL_DMA_Start_IT+0x350>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a64      	ldr	r2, [pc, #400]	@ (800883c <HAL_DMA_Start_IT+0x4c8>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d009      	beq.n	80086c4 <HAL_DMA_Start_IT+0x350>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a62      	ldr	r2, [pc, #392]	@ (8008840 <HAL_DMA_Start_IT+0x4cc>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d004      	beq.n	80086c4 <HAL_DMA_Start_IT+0x350>
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a61      	ldr	r2, [pc, #388]	@ (8008844 <HAL_DMA_Start_IT+0x4d0>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d101      	bne.n	80086c8 <HAL_DMA_Start_IT+0x354>
 80086c4:	2301      	movs	r3, #1
 80086c6:	e000      	b.n	80086ca <HAL_DMA_Start_IT+0x356>
 80086c8:	2300      	movs	r3, #0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d01a      	beq.n	8008704 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d007      	beq.n	80086ec <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80086ea:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d007      	beq.n	8008704 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008702:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a37      	ldr	r2, [pc, #220]	@ (80087e8 <HAL_DMA_Start_IT+0x474>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d04a      	beq.n	80087a4 <HAL_DMA_Start_IT+0x430>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a36      	ldr	r2, [pc, #216]	@ (80087ec <HAL_DMA_Start_IT+0x478>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d045      	beq.n	80087a4 <HAL_DMA_Start_IT+0x430>
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a34      	ldr	r2, [pc, #208]	@ (80087f0 <HAL_DMA_Start_IT+0x47c>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d040      	beq.n	80087a4 <HAL_DMA_Start_IT+0x430>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a33      	ldr	r2, [pc, #204]	@ (80087f4 <HAL_DMA_Start_IT+0x480>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d03b      	beq.n	80087a4 <HAL_DMA_Start_IT+0x430>
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a31      	ldr	r2, [pc, #196]	@ (80087f8 <HAL_DMA_Start_IT+0x484>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d036      	beq.n	80087a4 <HAL_DMA_Start_IT+0x430>
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a30      	ldr	r2, [pc, #192]	@ (80087fc <HAL_DMA_Start_IT+0x488>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d031      	beq.n	80087a4 <HAL_DMA_Start_IT+0x430>
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a2e      	ldr	r2, [pc, #184]	@ (8008800 <HAL_DMA_Start_IT+0x48c>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d02c      	beq.n	80087a4 <HAL_DMA_Start_IT+0x430>
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a2d      	ldr	r2, [pc, #180]	@ (8008804 <HAL_DMA_Start_IT+0x490>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d027      	beq.n	80087a4 <HAL_DMA_Start_IT+0x430>
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a2b      	ldr	r2, [pc, #172]	@ (8008808 <HAL_DMA_Start_IT+0x494>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d022      	beq.n	80087a4 <HAL_DMA_Start_IT+0x430>
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a2a      	ldr	r2, [pc, #168]	@ (800880c <HAL_DMA_Start_IT+0x498>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d01d      	beq.n	80087a4 <HAL_DMA_Start_IT+0x430>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a28      	ldr	r2, [pc, #160]	@ (8008810 <HAL_DMA_Start_IT+0x49c>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d018      	beq.n	80087a4 <HAL_DMA_Start_IT+0x430>
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a27      	ldr	r2, [pc, #156]	@ (8008814 <HAL_DMA_Start_IT+0x4a0>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d013      	beq.n	80087a4 <HAL_DMA_Start_IT+0x430>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a25      	ldr	r2, [pc, #148]	@ (8008818 <HAL_DMA_Start_IT+0x4a4>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d00e      	beq.n	80087a4 <HAL_DMA_Start_IT+0x430>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a24      	ldr	r2, [pc, #144]	@ (800881c <HAL_DMA_Start_IT+0x4a8>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d009      	beq.n	80087a4 <HAL_DMA_Start_IT+0x430>
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a22      	ldr	r2, [pc, #136]	@ (8008820 <HAL_DMA_Start_IT+0x4ac>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d004      	beq.n	80087a4 <HAL_DMA_Start_IT+0x430>
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a21      	ldr	r2, [pc, #132]	@ (8008824 <HAL_DMA_Start_IT+0x4b0>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d108      	bne.n	80087b6 <HAL_DMA_Start_IT+0x442>
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f042 0201 	orr.w	r2, r2, #1
 80087b2:	601a      	str	r2, [r3, #0]
 80087b4:	e012      	b.n	80087dc <HAL_DMA_Start_IT+0x468>
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f042 0201 	orr.w	r2, r2, #1
 80087c4:	601a      	str	r2, [r3, #0]
 80087c6:	e009      	b.n	80087dc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80087ce:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80087dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3718      	adds	r7, #24
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	40020010 	.word	0x40020010
 80087ec:	40020028 	.word	0x40020028
 80087f0:	40020040 	.word	0x40020040
 80087f4:	40020058 	.word	0x40020058
 80087f8:	40020070 	.word	0x40020070
 80087fc:	40020088 	.word	0x40020088
 8008800:	400200a0 	.word	0x400200a0
 8008804:	400200b8 	.word	0x400200b8
 8008808:	40020410 	.word	0x40020410
 800880c:	40020428 	.word	0x40020428
 8008810:	40020440 	.word	0x40020440
 8008814:	40020458 	.word	0x40020458
 8008818:	40020470 	.word	0x40020470
 800881c:	40020488 	.word	0x40020488
 8008820:	400204a0 	.word	0x400204a0
 8008824:	400204b8 	.word	0x400204b8
 8008828:	58025408 	.word	0x58025408
 800882c:	5802541c 	.word	0x5802541c
 8008830:	58025430 	.word	0x58025430
 8008834:	58025444 	.word	0x58025444
 8008838:	58025458 	.word	0x58025458
 800883c:	5802546c 	.word	0x5802546c
 8008840:	58025480 	.word	0x58025480
 8008844:	58025494 	.word	0x58025494

08008848 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b08a      	sub	sp, #40	@ 0x28
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008850:	2300      	movs	r3, #0
 8008852:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008854:	4b67      	ldr	r3, [pc, #412]	@ (80089f4 <HAL_DMA_IRQHandler+0x1ac>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a67      	ldr	r2, [pc, #412]	@ (80089f8 <HAL_DMA_IRQHandler+0x1b0>)
 800885a:	fba2 2303 	umull	r2, r3, r2, r3
 800885e:	0a9b      	lsrs	r3, r3, #10
 8008860:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008866:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800886c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800886e:	6a3b      	ldr	r3, [r7, #32]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a5f      	ldr	r2, [pc, #380]	@ (80089fc <HAL_DMA_IRQHandler+0x1b4>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d04a      	beq.n	800891a <HAL_DMA_IRQHandler+0xd2>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a5d      	ldr	r2, [pc, #372]	@ (8008a00 <HAL_DMA_IRQHandler+0x1b8>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d045      	beq.n	800891a <HAL_DMA_IRQHandler+0xd2>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a5c      	ldr	r2, [pc, #368]	@ (8008a04 <HAL_DMA_IRQHandler+0x1bc>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d040      	beq.n	800891a <HAL_DMA_IRQHandler+0xd2>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a5a      	ldr	r2, [pc, #360]	@ (8008a08 <HAL_DMA_IRQHandler+0x1c0>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d03b      	beq.n	800891a <HAL_DMA_IRQHandler+0xd2>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a59      	ldr	r2, [pc, #356]	@ (8008a0c <HAL_DMA_IRQHandler+0x1c4>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d036      	beq.n	800891a <HAL_DMA_IRQHandler+0xd2>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a57      	ldr	r2, [pc, #348]	@ (8008a10 <HAL_DMA_IRQHandler+0x1c8>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d031      	beq.n	800891a <HAL_DMA_IRQHandler+0xd2>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a56      	ldr	r2, [pc, #344]	@ (8008a14 <HAL_DMA_IRQHandler+0x1cc>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d02c      	beq.n	800891a <HAL_DMA_IRQHandler+0xd2>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a54      	ldr	r2, [pc, #336]	@ (8008a18 <HAL_DMA_IRQHandler+0x1d0>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d027      	beq.n	800891a <HAL_DMA_IRQHandler+0xd2>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a53      	ldr	r2, [pc, #332]	@ (8008a1c <HAL_DMA_IRQHandler+0x1d4>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d022      	beq.n	800891a <HAL_DMA_IRQHandler+0xd2>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a51      	ldr	r2, [pc, #324]	@ (8008a20 <HAL_DMA_IRQHandler+0x1d8>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d01d      	beq.n	800891a <HAL_DMA_IRQHandler+0xd2>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a50      	ldr	r2, [pc, #320]	@ (8008a24 <HAL_DMA_IRQHandler+0x1dc>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d018      	beq.n	800891a <HAL_DMA_IRQHandler+0xd2>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a4e      	ldr	r2, [pc, #312]	@ (8008a28 <HAL_DMA_IRQHandler+0x1e0>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d013      	beq.n	800891a <HAL_DMA_IRQHandler+0xd2>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a4d      	ldr	r2, [pc, #308]	@ (8008a2c <HAL_DMA_IRQHandler+0x1e4>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d00e      	beq.n	800891a <HAL_DMA_IRQHandler+0xd2>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a4b      	ldr	r2, [pc, #300]	@ (8008a30 <HAL_DMA_IRQHandler+0x1e8>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d009      	beq.n	800891a <HAL_DMA_IRQHandler+0xd2>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a4a      	ldr	r2, [pc, #296]	@ (8008a34 <HAL_DMA_IRQHandler+0x1ec>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d004      	beq.n	800891a <HAL_DMA_IRQHandler+0xd2>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a48      	ldr	r2, [pc, #288]	@ (8008a38 <HAL_DMA_IRQHandler+0x1f0>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d101      	bne.n	800891e <HAL_DMA_IRQHandler+0xd6>
 800891a:	2301      	movs	r3, #1
 800891c:	e000      	b.n	8008920 <HAL_DMA_IRQHandler+0xd8>
 800891e:	2300      	movs	r3, #0
 8008920:	2b00      	cmp	r3, #0
 8008922:	f000 842b 	beq.w	800917c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800892a:	f003 031f 	and.w	r3, r3, #31
 800892e:	2208      	movs	r2, #8
 8008930:	409a      	lsls	r2, r3
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	4013      	ands	r3, r2
 8008936:	2b00      	cmp	r3, #0
 8008938:	f000 80a2 	beq.w	8008a80 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a2e      	ldr	r2, [pc, #184]	@ (80089fc <HAL_DMA_IRQHandler+0x1b4>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d04a      	beq.n	80089dc <HAL_DMA_IRQHandler+0x194>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a2d      	ldr	r2, [pc, #180]	@ (8008a00 <HAL_DMA_IRQHandler+0x1b8>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d045      	beq.n	80089dc <HAL_DMA_IRQHandler+0x194>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a2b      	ldr	r2, [pc, #172]	@ (8008a04 <HAL_DMA_IRQHandler+0x1bc>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d040      	beq.n	80089dc <HAL_DMA_IRQHandler+0x194>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a2a      	ldr	r2, [pc, #168]	@ (8008a08 <HAL_DMA_IRQHandler+0x1c0>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d03b      	beq.n	80089dc <HAL_DMA_IRQHandler+0x194>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a28      	ldr	r2, [pc, #160]	@ (8008a0c <HAL_DMA_IRQHandler+0x1c4>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d036      	beq.n	80089dc <HAL_DMA_IRQHandler+0x194>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a27      	ldr	r2, [pc, #156]	@ (8008a10 <HAL_DMA_IRQHandler+0x1c8>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d031      	beq.n	80089dc <HAL_DMA_IRQHandler+0x194>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a25      	ldr	r2, [pc, #148]	@ (8008a14 <HAL_DMA_IRQHandler+0x1cc>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d02c      	beq.n	80089dc <HAL_DMA_IRQHandler+0x194>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a24      	ldr	r2, [pc, #144]	@ (8008a18 <HAL_DMA_IRQHandler+0x1d0>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d027      	beq.n	80089dc <HAL_DMA_IRQHandler+0x194>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a22      	ldr	r2, [pc, #136]	@ (8008a1c <HAL_DMA_IRQHandler+0x1d4>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d022      	beq.n	80089dc <HAL_DMA_IRQHandler+0x194>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a21      	ldr	r2, [pc, #132]	@ (8008a20 <HAL_DMA_IRQHandler+0x1d8>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d01d      	beq.n	80089dc <HAL_DMA_IRQHandler+0x194>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a1f      	ldr	r2, [pc, #124]	@ (8008a24 <HAL_DMA_IRQHandler+0x1dc>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d018      	beq.n	80089dc <HAL_DMA_IRQHandler+0x194>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a1e      	ldr	r2, [pc, #120]	@ (8008a28 <HAL_DMA_IRQHandler+0x1e0>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d013      	beq.n	80089dc <HAL_DMA_IRQHandler+0x194>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a1c      	ldr	r2, [pc, #112]	@ (8008a2c <HAL_DMA_IRQHandler+0x1e4>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d00e      	beq.n	80089dc <HAL_DMA_IRQHandler+0x194>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a1b      	ldr	r2, [pc, #108]	@ (8008a30 <HAL_DMA_IRQHandler+0x1e8>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d009      	beq.n	80089dc <HAL_DMA_IRQHandler+0x194>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a19      	ldr	r2, [pc, #100]	@ (8008a34 <HAL_DMA_IRQHandler+0x1ec>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d004      	beq.n	80089dc <HAL_DMA_IRQHandler+0x194>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a18      	ldr	r2, [pc, #96]	@ (8008a38 <HAL_DMA_IRQHandler+0x1f0>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d12f      	bne.n	8008a3c <HAL_DMA_IRQHandler+0x1f4>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f003 0304 	and.w	r3, r3, #4
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	bf14      	ite	ne
 80089ea:	2301      	movne	r3, #1
 80089ec:	2300      	moveq	r3, #0
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	e02e      	b.n	8008a50 <HAL_DMA_IRQHandler+0x208>
 80089f2:	bf00      	nop
 80089f4:	24000038 	.word	0x24000038
 80089f8:	1b4e81b5 	.word	0x1b4e81b5
 80089fc:	40020010 	.word	0x40020010
 8008a00:	40020028 	.word	0x40020028
 8008a04:	40020040 	.word	0x40020040
 8008a08:	40020058 	.word	0x40020058
 8008a0c:	40020070 	.word	0x40020070
 8008a10:	40020088 	.word	0x40020088
 8008a14:	400200a0 	.word	0x400200a0
 8008a18:	400200b8 	.word	0x400200b8
 8008a1c:	40020410 	.word	0x40020410
 8008a20:	40020428 	.word	0x40020428
 8008a24:	40020440 	.word	0x40020440
 8008a28:	40020458 	.word	0x40020458
 8008a2c:	40020470 	.word	0x40020470
 8008a30:	40020488 	.word	0x40020488
 8008a34:	400204a0 	.word	0x400204a0
 8008a38:	400204b8 	.word	0x400204b8
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 0308 	and.w	r3, r3, #8
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	bf14      	ite	ne
 8008a4a:	2301      	movne	r3, #1
 8008a4c:	2300      	moveq	r3, #0
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d015      	beq.n	8008a80 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f022 0204 	bic.w	r2, r2, #4
 8008a62:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a68:	f003 031f 	and.w	r3, r3, #31
 8008a6c:	2208      	movs	r2, #8
 8008a6e:	409a      	lsls	r2, r3
 8008a70:	6a3b      	ldr	r3, [r7, #32]
 8008a72:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a78:	f043 0201 	orr.w	r2, r3, #1
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a84:	f003 031f 	and.w	r3, r3, #31
 8008a88:	69ba      	ldr	r2, [r7, #24]
 8008a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a8e:	f003 0301 	and.w	r3, r3, #1
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d06e      	beq.n	8008b74 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a69      	ldr	r2, [pc, #420]	@ (8008c40 <HAL_DMA_IRQHandler+0x3f8>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d04a      	beq.n	8008b36 <HAL_DMA_IRQHandler+0x2ee>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a67      	ldr	r2, [pc, #412]	@ (8008c44 <HAL_DMA_IRQHandler+0x3fc>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d045      	beq.n	8008b36 <HAL_DMA_IRQHandler+0x2ee>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a66      	ldr	r2, [pc, #408]	@ (8008c48 <HAL_DMA_IRQHandler+0x400>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d040      	beq.n	8008b36 <HAL_DMA_IRQHandler+0x2ee>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a64      	ldr	r2, [pc, #400]	@ (8008c4c <HAL_DMA_IRQHandler+0x404>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d03b      	beq.n	8008b36 <HAL_DMA_IRQHandler+0x2ee>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a63      	ldr	r2, [pc, #396]	@ (8008c50 <HAL_DMA_IRQHandler+0x408>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d036      	beq.n	8008b36 <HAL_DMA_IRQHandler+0x2ee>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a61      	ldr	r2, [pc, #388]	@ (8008c54 <HAL_DMA_IRQHandler+0x40c>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d031      	beq.n	8008b36 <HAL_DMA_IRQHandler+0x2ee>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a60      	ldr	r2, [pc, #384]	@ (8008c58 <HAL_DMA_IRQHandler+0x410>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d02c      	beq.n	8008b36 <HAL_DMA_IRQHandler+0x2ee>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a5e      	ldr	r2, [pc, #376]	@ (8008c5c <HAL_DMA_IRQHandler+0x414>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d027      	beq.n	8008b36 <HAL_DMA_IRQHandler+0x2ee>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a5d      	ldr	r2, [pc, #372]	@ (8008c60 <HAL_DMA_IRQHandler+0x418>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d022      	beq.n	8008b36 <HAL_DMA_IRQHandler+0x2ee>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a5b      	ldr	r2, [pc, #364]	@ (8008c64 <HAL_DMA_IRQHandler+0x41c>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d01d      	beq.n	8008b36 <HAL_DMA_IRQHandler+0x2ee>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a5a      	ldr	r2, [pc, #360]	@ (8008c68 <HAL_DMA_IRQHandler+0x420>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d018      	beq.n	8008b36 <HAL_DMA_IRQHandler+0x2ee>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a58      	ldr	r2, [pc, #352]	@ (8008c6c <HAL_DMA_IRQHandler+0x424>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d013      	beq.n	8008b36 <HAL_DMA_IRQHandler+0x2ee>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a57      	ldr	r2, [pc, #348]	@ (8008c70 <HAL_DMA_IRQHandler+0x428>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d00e      	beq.n	8008b36 <HAL_DMA_IRQHandler+0x2ee>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a55      	ldr	r2, [pc, #340]	@ (8008c74 <HAL_DMA_IRQHandler+0x42c>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d009      	beq.n	8008b36 <HAL_DMA_IRQHandler+0x2ee>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a54      	ldr	r2, [pc, #336]	@ (8008c78 <HAL_DMA_IRQHandler+0x430>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d004      	beq.n	8008b36 <HAL_DMA_IRQHandler+0x2ee>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a52      	ldr	r2, [pc, #328]	@ (8008c7c <HAL_DMA_IRQHandler+0x434>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d10a      	bne.n	8008b4c <HAL_DMA_IRQHandler+0x304>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	695b      	ldr	r3, [r3, #20]
 8008b3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	bf14      	ite	ne
 8008b44:	2301      	movne	r3, #1
 8008b46:	2300      	moveq	r3, #0
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	e003      	b.n	8008b54 <HAL_DMA_IRQHandler+0x30c>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2300      	movs	r3, #0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d00d      	beq.n	8008b74 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b5c:	f003 031f 	and.w	r3, r3, #31
 8008b60:	2201      	movs	r2, #1
 8008b62:	409a      	lsls	r2, r3
 8008b64:	6a3b      	ldr	r3, [r7, #32]
 8008b66:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b6c:	f043 0202 	orr.w	r2, r3, #2
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b78:	f003 031f 	and.w	r3, r3, #31
 8008b7c:	2204      	movs	r2, #4
 8008b7e:	409a      	lsls	r2, r3
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	4013      	ands	r3, r2
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f000 808f 	beq.w	8008ca8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a2c      	ldr	r2, [pc, #176]	@ (8008c40 <HAL_DMA_IRQHandler+0x3f8>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d04a      	beq.n	8008c2a <HAL_DMA_IRQHandler+0x3e2>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a2a      	ldr	r2, [pc, #168]	@ (8008c44 <HAL_DMA_IRQHandler+0x3fc>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d045      	beq.n	8008c2a <HAL_DMA_IRQHandler+0x3e2>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a29      	ldr	r2, [pc, #164]	@ (8008c48 <HAL_DMA_IRQHandler+0x400>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d040      	beq.n	8008c2a <HAL_DMA_IRQHandler+0x3e2>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a27      	ldr	r2, [pc, #156]	@ (8008c4c <HAL_DMA_IRQHandler+0x404>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d03b      	beq.n	8008c2a <HAL_DMA_IRQHandler+0x3e2>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a26      	ldr	r2, [pc, #152]	@ (8008c50 <HAL_DMA_IRQHandler+0x408>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d036      	beq.n	8008c2a <HAL_DMA_IRQHandler+0x3e2>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a24      	ldr	r2, [pc, #144]	@ (8008c54 <HAL_DMA_IRQHandler+0x40c>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d031      	beq.n	8008c2a <HAL_DMA_IRQHandler+0x3e2>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a23      	ldr	r2, [pc, #140]	@ (8008c58 <HAL_DMA_IRQHandler+0x410>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d02c      	beq.n	8008c2a <HAL_DMA_IRQHandler+0x3e2>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a21      	ldr	r2, [pc, #132]	@ (8008c5c <HAL_DMA_IRQHandler+0x414>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d027      	beq.n	8008c2a <HAL_DMA_IRQHandler+0x3e2>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a20      	ldr	r2, [pc, #128]	@ (8008c60 <HAL_DMA_IRQHandler+0x418>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d022      	beq.n	8008c2a <HAL_DMA_IRQHandler+0x3e2>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a1e      	ldr	r2, [pc, #120]	@ (8008c64 <HAL_DMA_IRQHandler+0x41c>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d01d      	beq.n	8008c2a <HAL_DMA_IRQHandler+0x3e2>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a1d      	ldr	r2, [pc, #116]	@ (8008c68 <HAL_DMA_IRQHandler+0x420>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d018      	beq.n	8008c2a <HAL_DMA_IRQHandler+0x3e2>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8008c6c <HAL_DMA_IRQHandler+0x424>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d013      	beq.n	8008c2a <HAL_DMA_IRQHandler+0x3e2>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a1a      	ldr	r2, [pc, #104]	@ (8008c70 <HAL_DMA_IRQHandler+0x428>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d00e      	beq.n	8008c2a <HAL_DMA_IRQHandler+0x3e2>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a18      	ldr	r2, [pc, #96]	@ (8008c74 <HAL_DMA_IRQHandler+0x42c>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d009      	beq.n	8008c2a <HAL_DMA_IRQHandler+0x3e2>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a17      	ldr	r2, [pc, #92]	@ (8008c78 <HAL_DMA_IRQHandler+0x430>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d004      	beq.n	8008c2a <HAL_DMA_IRQHandler+0x3e2>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a15      	ldr	r2, [pc, #84]	@ (8008c7c <HAL_DMA_IRQHandler+0x434>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d12a      	bne.n	8008c80 <HAL_DMA_IRQHandler+0x438>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f003 0302 	and.w	r3, r3, #2
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	bf14      	ite	ne
 8008c38:	2301      	movne	r3, #1
 8008c3a:	2300      	moveq	r3, #0
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	e023      	b.n	8008c88 <HAL_DMA_IRQHandler+0x440>
 8008c40:	40020010 	.word	0x40020010
 8008c44:	40020028 	.word	0x40020028
 8008c48:	40020040 	.word	0x40020040
 8008c4c:	40020058 	.word	0x40020058
 8008c50:	40020070 	.word	0x40020070
 8008c54:	40020088 	.word	0x40020088
 8008c58:	400200a0 	.word	0x400200a0
 8008c5c:	400200b8 	.word	0x400200b8
 8008c60:	40020410 	.word	0x40020410
 8008c64:	40020428 	.word	0x40020428
 8008c68:	40020440 	.word	0x40020440
 8008c6c:	40020458 	.word	0x40020458
 8008c70:	40020470 	.word	0x40020470
 8008c74:	40020488 	.word	0x40020488
 8008c78:	400204a0 	.word	0x400204a0
 8008c7c:	400204b8 	.word	0x400204b8
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2300      	movs	r3, #0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d00d      	beq.n	8008ca8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c90:	f003 031f 	and.w	r3, r3, #31
 8008c94:	2204      	movs	r2, #4
 8008c96:	409a      	lsls	r2, r3
 8008c98:	6a3b      	ldr	r3, [r7, #32]
 8008c9a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ca0:	f043 0204 	orr.w	r2, r3, #4
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008cac:	f003 031f 	and.w	r3, r3, #31
 8008cb0:	2210      	movs	r2, #16
 8008cb2:	409a      	lsls	r2, r3
 8008cb4:	69bb      	ldr	r3, [r7, #24]
 8008cb6:	4013      	ands	r3, r2
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f000 80a6 	beq.w	8008e0a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a85      	ldr	r2, [pc, #532]	@ (8008ed8 <HAL_DMA_IRQHandler+0x690>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d04a      	beq.n	8008d5e <HAL_DMA_IRQHandler+0x516>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a83      	ldr	r2, [pc, #524]	@ (8008edc <HAL_DMA_IRQHandler+0x694>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d045      	beq.n	8008d5e <HAL_DMA_IRQHandler+0x516>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a82      	ldr	r2, [pc, #520]	@ (8008ee0 <HAL_DMA_IRQHandler+0x698>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d040      	beq.n	8008d5e <HAL_DMA_IRQHandler+0x516>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a80      	ldr	r2, [pc, #512]	@ (8008ee4 <HAL_DMA_IRQHandler+0x69c>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d03b      	beq.n	8008d5e <HAL_DMA_IRQHandler+0x516>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a7f      	ldr	r2, [pc, #508]	@ (8008ee8 <HAL_DMA_IRQHandler+0x6a0>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d036      	beq.n	8008d5e <HAL_DMA_IRQHandler+0x516>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a7d      	ldr	r2, [pc, #500]	@ (8008eec <HAL_DMA_IRQHandler+0x6a4>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d031      	beq.n	8008d5e <HAL_DMA_IRQHandler+0x516>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a7c      	ldr	r2, [pc, #496]	@ (8008ef0 <HAL_DMA_IRQHandler+0x6a8>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d02c      	beq.n	8008d5e <HAL_DMA_IRQHandler+0x516>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a7a      	ldr	r2, [pc, #488]	@ (8008ef4 <HAL_DMA_IRQHandler+0x6ac>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d027      	beq.n	8008d5e <HAL_DMA_IRQHandler+0x516>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a79      	ldr	r2, [pc, #484]	@ (8008ef8 <HAL_DMA_IRQHandler+0x6b0>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d022      	beq.n	8008d5e <HAL_DMA_IRQHandler+0x516>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a77      	ldr	r2, [pc, #476]	@ (8008efc <HAL_DMA_IRQHandler+0x6b4>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d01d      	beq.n	8008d5e <HAL_DMA_IRQHandler+0x516>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a76      	ldr	r2, [pc, #472]	@ (8008f00 <HAL_DMA_IRQHandler+0x6b8>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d018      	beq.n	8008d5e <HAL_DMA_IRQHandler+0x516>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a74      	ldr	r2, [pc, #464]	@ (8008f04 <HAL_DMA_IRQHandler+0x6bc>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d013      	beq.n	8008d5e <HAL_DMA_IRQHandler+0x516>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a73      	ldr	r2, [pc, #460]	@ (8008f08 <HAL_DMA_IRQHandler+0x6c0>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d00e      	beq.n	8008d5e <HAL_DMA_IRQHandler+0x516>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a71      	ldr	r2, [pc, #452]	@ (8008f0c <HAL_DMA_IRQHandler+0x6c4>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d009      	beq.n	8008d5e <HAL_DMA_IRQHandler+0x516>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a70      	ldr	r2, [pc, #448]	@ (8008f10 <HAL_DMA_IRQHandler+0x6c8>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d004      	beq.n	8008d5e <HAL_DMA_IRQHandler+0x516>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a6e      	ldr	r2, [pc, #440]	@ (8008f14 <HAL_DMA_IRQHandler+0x6cc>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d10a      	bne.n	8008d74 <HAL_DMA_IRQHandler+0x52c>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f003 0308 	and.w	r3, r3, #8
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	bf14      	ite	ne
 8008d6c:	2301      	movne	r3, #1
 8008d6e:	2300      	moveq	r3, #0
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	e009      	b.n	8008d88 <HAL_DMA_IRQHandler+0x540>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f003 0304 	and.w	r3, r3, #4
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	bf14      	ite	ne
 8008d82:	2301      	movne	r3, #1
 8008d84:	2300      	moveq	r3, #0
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d03e      	beq.n	8008e0a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d90:	f003 031f 	and.w	r3, r3, #31
 8008d94:	2210      	movs	r2, #16
 8008d96:	409a      	lsls	r2, r3
 8008d98:	6a3b      	ldr	r3, [r7, #32]
 8008d9a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d018      	beq.n	8008ddc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d108      	bne.n	8008dca <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d024      	beq.n	8008e0a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	4798      	blx	r3
 8008dc8:	e01f      	b.n	8008e0a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d01b      	beq.n	8008e0a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	4798      	blx	r3
 8008dda:	e016      	b.n	8008e0a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d107      	bne.n	8008dfa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f022 0208 	bic.w	r2, r2, #8
 8008df8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d003      	beq.n	8008e0a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e0e:	f003 031f 	and.w	r3, r3, #31
 8008e12:	2220      	movs	r2, #32
 8008e14:	409a      	lsls	r2, r3
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	4013      	ands	r3, r2
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	f000 8110 	beq.w	8009040 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a2c      	ldr	r2, [pc, #176]	@ (8008ed8 <HAL_DMA_IRQHandler+0x690>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d04a      	beq.n	8008ec0 <HAL_DMA_IRQHandler+0x678>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a2b      	ldr	r2, [pc, #172]	@ (8008edc <HAL_DMA_IRQHandler+0x694>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d045      	beq.n	8008ec0 <HAL_DMA_IRQHandler+0x678>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a29      	ldr	r2, [pc, #164]	@ (8008ee0 <HAL_DMA_IRQHandler+0x698>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d040      	beq.n	8008ec0 <HAL_DMA_IRQHandler+0x678>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a28      	ldr	r2, [pc, #160]	@ (8008ee4 <HAL_DMA_IRQHandler+0x69c>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d03b      	beq.n	8008ec0 <HAL_DMA_IRQHandler+0x678>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a26      	ldr	r2, [pc, #152]	@ (8008ee8 <HAL_DMA_IRQHandler+0x6a0>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d036      	beq.n	8008ec0 <HAL_DMA_IRQHandler+0x678>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a25      	ldr	r2, [pc, #148]	@ (8008eec <HAL_DMA_IRQHandler+0x6a4>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d031      	beq.n	8008ec0 <HAL_DMA_IRQHandler+0x678>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a23      	ldr	r2, [pc, #140]	@ (8008ef0 <HAL_DMA_IRQHandler+0x6a8>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d02c      	beq.n	8008ec0 <HAL_DMA_IRQHandler+0x678>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a22      	ldr	r2, [pc, #136]	@ (8008ef4 <HAL_DMA_IRQHandler+0x6ac>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d027      	beq.n	8008ec0 <HAL_DMA_IRQHandler+0x678>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a20      	ldr	r2, [pc, #128]	@ (8008ef8 <HAL_DMA_IRQHandler+0x6b0>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d022      	beq.n	8008ec0 <HAL_DMA_IRQHandler+0x678>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a1f      	ldr	r2, [pc, #124]	@ (8008efc <HAL_DMA_IRQHandler+0x6b4>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d01d      	beq.n	8008ec0 <HAL_DMA_IRQHandler+0x678>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a1d      	ldr	r2, [pc, #116]	@ (8008f00 <HAL_DMA_IRQHandler+0x6b8>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d018      	beq.n	8008ec0 <HAL_DMA_IRQHandler+0x678>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a1c      	ldr	r2, [pc, #112]	@ (8008f04 <HAL_DMA_IRQHandler+0x6bc>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d013      	beq.n	8008ec0 <HAL_DMA_IRQHandler+0x678>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a1a      	ldr	r2, [pc, #104]	@ (8008f08 <HAL_DMA_IRQHandler+0x6c0>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d00e      	beq.n	8008ec0 <HAL_DMA_IRQHandler+0x678>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a19      	ldr	r2, [pc, #100]	@ (8008f0c <HAL_DMA_IRQHandler+0x6c4>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d009      	beq.n	8008ec0 <HAL_DMA_IRQHandler+0x678>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a17      	ldr	r2, [pc, #92]	@ (8008f10 <HAL_DMA_IRQHandler+0x6c8>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d004      	beq.n	8008ec0 <HAL_DMA_IRQHandler+0x678>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a16      	ldr	r2, [pc, #88]	@ (8008f14 <HAL_DMA_IRQHandler+0x6cc>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d12b      	bne.n	8008f18 <HAL_DMA_IRQHandler+0x6d0>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 0310 	and.w	r3, r3, #16
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	bf14      	ite	ne
 8008ece:	2301      	movne	r3, #1
 8008ed0:	2300      	moveq	r3, #0
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	e02a      	b.n	8008f2c <HAL_DMA_IRQHandler+0x6e4>
 8008ed6:	bf00      	nop
 8008ed8:	40020010 	.word	0x40020010
 8008edc:	40020028 	.word	0x40020028
 8008ee0:	40020040 	.word	0x40020040
 8008ee4:	40020058 	.word	0x40020058
 8008ee8:	40020070 	.word	0x40020070
 8008eec:	40020088 	.word	0x40020088
 8008ef0:	400200a0 	.word	0x400200a0
 8008ef4:	400200b8 	.word	0x400200b8
 8008ef8:	40020410 	.word	0x40020410
 8008efc:	40020428 	.word	0x40020428
 8008f00:	40020440 	.word	0x40020440
 8008f04:	40020458 	.word	0x40020458
 8008f08:	40020470 	.word	0x40020470
 8008f0c:	40020488 	.word	0x40020488
 8008f10:	400204a0 	.word	0x400204a0
 8008f14:	400204b8 	.word	0x400204b8
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f003 0302 	and.w	r3, r3, #2
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	bf14      	ite	ne
 8008f26:	2301      	movne	r3, #1
 8008f28:	2300      	moveq	r3, #0
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	f000 8087 	beq.w	8009040 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f36:	f003 031f 	and.w	r3, r3, #31
 8008f3a:	2220      	movs	r2, #32
 8008f3c:	409a      	lsls	r2, r3
 8008f3e:	6a3b      	ldr	r3, [r7, #32]
 8008f40:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	2b04      	cmp	r3, #4
 8008f4c:	d139      	bne.n	8008fc2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f022 0216 	bic.w	r2, r2, #22
 8008f5c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	695a      	ldr	r2, [r3, #20]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008f6c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d103      	bne.n	8008f7e <HAL_DMA_IRQHandler+0x736>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d007      	beq.n	8008f8e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f022 0208 	bic.w	r2, r2, #8
 8008f8c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f92:	f003 031f 	and.w	r3, r3, #31
 8008f96:	223f      	movs	r2, #63	@ 0x3f
 8008f98:	409a      	lsls	r2, r3
 8008f9a:	6a3b      	ldr	r3, [r7, #32]
 8008f9c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	f000 834a 	beq.w	800964c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	4798      	blx	r3
          }
          return;
 8008fc0:	e344      	b.n	800964c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d018      	beq.n	8009002 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d108      	bne.n	8008ff0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d02c      	beq.n	8009040 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	4798      	blx	r3
 8008fee:	e027      	b.n	8009040 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d023      	beq.n	8009040 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	4798      	blx	r3
 8009000:	e01e      	b.n	8009040 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800900c:	2b00      	cmp	r3, #0
 800900e:	d10f      	bne.n	8009030 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f022 0210 	bic.w	r2, r2, #16
 800901e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009034:	2b00      	cmp	r3, #0
 8009036:	d003      	beq.n	8009040 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009044:	2b00      	cmp	r3, #0
 8009046:	f000 8306 	beq.w	8009656 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800904e:	f003 0301 	and.w	r3, r3, #1
 8009052:	2b00      	cmp	r3, #0
 8009054:	f000 8088 	beq.w	8009168 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2204      	movs	r2, #4
 800905c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a7a      	ldr	r2, [pc, #488]	@ (8009250 <HAL_DMA_IRQHandler+0xa08>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d04a      	beq.n	8009100 <HAL_DMA_IRQHandler+0x8b8>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a79      	ldr	r2, [pc, #484]	@ (8009254 <HAL_DMA_IRQHandler+0xa0c>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d045      	beq.n	8009100 <HAL_DMA_IRQHandler+0x8b8>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a77      	ldr	r2, [pc, #476]	@ (8009258 <HAL_DMA_IRQHandler+0xa10>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d040      	beq.n	8009100 <HAL_DMA_IRQHandler+0x8b8>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a76      	ldr	r2, [pc, #472]	@ (800925c <HAL_DMA_IRQHandler+0xa14>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d03b      	beq.n	8009100 <HAL_DMA_IRQHandler+0x8b8>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a74      	ldr	r2, [pc, #464]	@ (8009260 <HAL_DMA_IRQHandler+0xa18>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d036      	beq.n	8009100 <HAL_DMA_IRQHandler+0x8b8>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a73      	ldr	r2, [pc, #460]	@ (8009264 <HAL_DMA_IRQHandler+0xa1c>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d031      	beq.n	8009100 <HAL_DMA_IRQHandler+0x8b8>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a71      	ldr	r2, [pc, #452]	@ (8009268 <HAL_DMA_IRQHandler+0xa20>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d02c      	beq.n	8009100 <HAL_DMA_IRQHandler+0x8b8>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a70      	ldr	r2, [pc, #448]	@ (800926c <HAL_DMA_IRQHandler+0xa24>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d027      	beq.n	8009100 <HAL_DMA_IRQHandler+0x8b8>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a6e      	ldr	r2, [pc, #440]	@ (8009270 <HAL_DMA_IRQHandler+0xa28>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d022      	beq.n	8009100 <HAL_DMA_IRQHandler+0x8b8>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a6d      	ldr	r2, [pc, #436]	@ (8009274 <HAL_DMA_IRQHandler+0xa2c>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d01d      	beq.n	8009100 <HAL_DMA_IRQHandler+0x8b8>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a6b      	ldr	r2, [pc, #428]	@ (8009278 <HAL_DMA_IRQHandler+0xa30>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d018      	beq.n	8009100 <HAL_DMA_IRQHandler+0x8b8>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a6a      	ldr	r2, [pc, #424]	@ (800927c <HAL_DMA_IRQHandler+0xa34>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d013      	beq.n	8009100 <HAL_DMA_IRQHandler+0x8b8>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a68      	ldr	r2, [pc, #416]	@ (8009280 <HAL_DMA_IRQHandler+0xa38>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d00e      	beq.n	8009100 <HAL_DMA_IRQHandler+0x8b8>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a67      	ldr	r2, [pc, #412]	@ (8009284 <HAL_DMA_IRQHandler+0xa3c>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d009      	beq.n	8009100 <HAL_DMA_IRQHandler+0x8b8>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a65      	ldr	r2, [pc, #404]	@ (8009288 <HAL_DMA_IRQHandler+0xa40>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d004      	beq.n	8009100 <HAL_DMA_IRQHandler+0x8b8>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a64      	ldr	r2, [pc, #400]	@ (800928c <HAL_DMA_IRQHandler+0xa44>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d108      	bne.n	8009112 <HAL_DMA_IRQHandler+0x8ca>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f022 0201 	bic.w	r2, r2, #1
 800910e:	601a      	str	r2, [r3, #0]
 8009110:	e007      	b.n	8009122 <HAL_DMA_IRQHandler+0x8da>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f022 0201 	bic.w	r2, r2, #1
 8009120:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	3301      	adds	r3, #1
 8009126:	60fb      	str	r3, [r7, #12]
 8009128:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800912a:	429a      	cmp	r2, r3
 800912c:	d307      	bcc.n	800913e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f003 0301 	and.w	r3, r3, #1
 8009138:	2b00      	cmp	r3, #0
 800913a:	d1f2      	bne.n	8009122 <HAL_DMA_IRQHandler+0x8da>
 800913c:	e000      	b.n	8009140 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800913e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f003 0301 	and.w	r3, r3, #1
 800914a:	2b00      	cmp	r3, #0
 800914c:	d004      	beq.n	8009158 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2203      	movs	r2, #3
 8009152:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8009156:	e003      	b.n	8009160 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800916c:	2b00      	cmp	r3, #0
 800916e:	f000 8272 	beq.w	8009656 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	4798      	blx	r3
 800917a:	e26c      	b.n	8009656 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a43      	ldr	r2, [pc, #268]	@ (8009290 <HAL_DMA_IRQHandler+0xa48>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d022      	beq.n	80091cc <HAL_DMA_IRQHandler+0x984>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a42      	ldr	r2, [pc, #264]	@ (8009294 <HAL_DMA_IRQHandler+0xa4c>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d01d      	beq.n	80091cc <HAL_DMA_IRQHandler+0x984>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a40      	ldr	r2, [pc, #256]	@ (8009298 <HAL_DMA_IRQHandler+0xa50>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d018      	beq.n	80091cc <HAL_DMA_IRQHandler+0x984>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a3f      	ldr	r2, [pc, #252]	@ (800929c <HAL_DMA_IRQHandler+0xa54>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d013      	beq.n	80091cc <HAL_DMA_IRQHandler+0x984>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a3d      	ldr	r2, [pc, #244]	@ (80092a0 <HAL_DMA_IRQHandler+0xa58>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d00e      	beq.n	80091cc <HAL_DMA_IRQHandler+0x984>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4a3c      	ldr	r2, [pc, #240]	@ (80092a4 <HAL_DMA_IRQHandler+0xa5c>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d009      	beq.n	80091cc <HAL_DMA_IRQHandler+0x984>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a3a      	ldr	r2, [pc, #232]	@ (80092a8 <HAL_DMA_IRQHandler+0xa60>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d004      	beq.n	80091cc <HAL_DMA_IRQHandler+0x984>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a39      	ldr	r2, [pc, #228]	@ (80092ac <HAL_DMA_IRQHandler+0xa64>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d101      	bne.n	80091d0 <HAL_DMA_IRQHandler+0x988>
 80091cc:	2301      	movs	r3, #1
 80091ce:	e000      	b.n	80091d2 <HAL_DMA_IRQHandler+0x98a>
 80091d0:	2300      	movs	r3, #0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	f000 823f 	beq.w	8009656 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091e4:	f003 031f 	and.w	r3, r3, #31
 80091e8:	2204      	movs	r2, #4
 80091ea:	409a      	lsls	r2, r3
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	4013      	ands	r3, r2
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	f000 80cd 	beq.w	8009390 <HAL_DMA_IRQHandler+0xb48>
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	f003 0304 	and.w	r3, r3, #4
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f000 80c7 	beq.w	8009390 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009206:	f003 031f 	and.w	r3, r3, #31
 800920a:	2204      	movs	r2, #4
 800920c:	409a      	lsls	r2, r3
 800920e:	69fb      	ldr	r3, [r7, #28]
 8009210:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009218:	2b00      	cmp	r3, #0
 800921a:	d049      	beq.n	80092b0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009222:	2b00      	cmp	r3, #0
 8009224:	d109      	bne.n	800923a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800922a:	2b00      	cmp	r3, #0
 800922c:	f000 8210 	beq.w	8009650 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009238:	e20a      	b.n	8009650 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800923e:	2b00      	cmp	r3, #0
 8009240:	f000 8206 	beq.w	8009650 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800924c:	e200      	b.n	8009650 <HAL_DMA_IRQHandler+0xe08>
 800924e:	bf00      	nop
 8009250:	40020010 	.word	0x40020010
 8009254:	40020028 	.word	0x40020028
 8009258:	40020040 	.word	0x40020040
 800925c:	40020058 	.word	0x40020058
 8009260:	40020070 	.word	0x40020070
 8009264:	40020088 	.word	0x40020088
 8009268:	400200a0 	.word	0x400200a0
 800926c:	400200b8 	.word	0x400200b8
 8009270:	40020410 	.word	0x40020410
 8009274:	40020428 	.word	0x40020428
 8009278:	40020440 	.word	0x40020440
 800927c:	40020458 	.word	0x40020458
 8009280:	40020470 	.word	0x40020470
 8009284:	40020488 	.word	0x40020488
 8009288:	400204a0 	.word	0x400204a0
 800928c:	400204b8 	.word	0x400204b8
 8009290:	58025408 	.word	0x58025408
 8009294:	5802541c 	.word	0x5802541c
 8009298:	58025430 	.word	0x58025430
 800929c:	58025444 	.word	0x58025444
 80092a0:	58025458 	.word	0x58025458
 80092a4:	5802546c 	.word	0x5802546c
 80092a8:	58025480 	.word	0x58025480
 80092ac:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	f003 0320 	and.w	r3, r3, #32
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d160      	bne.n	800937c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a7f      	ldr	r2, [pc, #508]	@ (80094bc <HAL_DMA_IRQHandler+0xc74>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d04a      	beq.n	800935a <HAL_DMA_IRQHandler+0xb12>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a7d      	ldr	r2, [pc, #500]	@ (80094c0 <HAL_DMA_IRQHandler+0xc78>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d045      	beq.n	800935a <HAL_DMA_IRQHandler+0xb12>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a7c      	ldr	r2, [pc, #496]	@ (80094c4 <HAL_DMA_IRQHandler+0xc7c>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d040      	beq.n	800935a <HAL_DMA_IRQHandler+0xb12>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a7a      	ldr	r2, [pc, #488]	@ (80094c8 <HAL_DMA_IRQHandler+0xc80>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d03b      	beq.n	800935a <HAL_DMA_IRQHandler+0xb12>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a79      	ldr	r2, [pc, #484]	@ (80094cc <HAL_DMA_IRQHandler+0xc84>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d036      	beq.n	800935a <HAL_DMA_IRQHandler+0xb12>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a77      	ldr	r2, [pc, #476]	@ (80094d0 <HAL_DMA_IRQHandler+0xc88>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d031      	beq.n	800935a <HAL_DMA_IRQHandler+0xb12>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a76      	ldr	r2, [pc, #472]	@ (80094d4 <HAL_DMA_IRQHandler+0xc8c>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d02c      	beq.n	800935a <HAL_DMA_IRQHandler+0xb12>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a74      	ldr	r2, [pc, #464]	@ (80094d8 <HAL_DMA_IRQHandler+0xc90>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d027      	beq.n	800935a <HAL_DMA_IRQHandler+0xb12>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a73      	ldr	r2, [pc, #460]	@ (80094dc <HAL_DMA_IRQHandler+0xc94>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d022      	beq.n	800935a <HAL_DMA_IRQHandler+0xb12>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a71      	ldr	r2, [pc, #452]	@ (80094e0 <HAL_DMA_IRQHandler+0xc98>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d01d      	beq.n	800935a <HAL_DMA_IRQHandler+0xb12>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a70      	ldr	r2, [pc, #448]	@ (80094e4 <HAL_DMA_IRQHandler+0xc9c>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d018      	beq.n	800935a <HAL_DMA_IRQHandler+0xb12>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a6e      	ldr	r2, [pc, #440]	@ (80094e8 <HAL_DMA_IRQHandler+0xca0>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d013      	beq.n	800935a <HAL_DMA_IRQHandler+0xb12>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a6d      	ldr	r2, [pc, #436]	@ (80094ec <HAL_DMA_IRQHandler+0xca4>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d00e      	beq.n	800935a <HAL_DMA_IRQHandler+0xb12>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a6b      	ldr	r2, [pc, #428]	@ (80094f0 <HAL_DMA_IRQHandler+0xca8>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d009      	beq.n	800935a <HAL_DMA_IRQHandler+0xb12>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a6a      	ldr	r2, [pc, #424]	@ (80094f4 <HAL_DMA_IRQHandler+0xcac>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d004      	beq.n	800935a <HAL_DMA_IRQHandler+0xb12>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a68      	ldr	r2, [pc, #416]	@ (80094f8 <HAL_DMA_IRQHandler+0xcb0>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d108      	bne.n	800936c <HAL_DMA_IRQHandler+0xb24>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f022 0208 	bic.w	r2, r2, #8
 8009368:	601a      	str	r2, [r3, #0]
 800936a:	e007      	b.n	800937c <HAL_DMA_IRQHandler+0xb34>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f022 0204 	bic.w	r2, r2, #4
 800937a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009380:	2b00      	cmp	r3, #0
 8009382:	f000 8165 	beq.w	8009650 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800938e:	e15f      	b.n	8009650 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009394:	f003 031f 	and.w	r3, r3, #31
 8009398:	2202      	movs	r2, #2
 800939a:	409a      	lsls	r2, r3
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	4013      	ands	r3, r2
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f000 80c5 	beq.w	8009530 <HAL_DMA_IRQHandler+0xce8>
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	f003 0302 	and.w	r3, r3, #2
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	f000 80bf 	beq.w	8009530 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80093b6:	f003 031f 	and.w	r3, r3, #31
 80093ba:	2202      	movs	r2, #2
 80093bc:	409a      	lsls	r2, r3
 80093be:	69fb      	ldr	r3, [r7, #28]
 80093c0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d018      	beq.n	80093fe <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d109      	bne.n	80093ea <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093da:	2b00      	cmp	r3, #0
 80093dc:	f000 813a 	beq.w	8009654 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80093e8:	e134      	b.n	8009654 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	f000 8130 	beq.w	8009654 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80093fc:	e12a      	b.n	8009654 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	f003 0320 	and.w	r3, r3, #32
 8009404:	2b00      	cmp	r3, #0
 8009406:	f040 8089 	bne.w	800951c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a2b      	ldr	r2, [pc, #172]	@ (80094bc <HAL_DMA_IRQHandler+0xc74>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d04a      	beq.n	80094aa <HAL_DMA_IRQHandler+0xc62>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a29      	ldr	r2, [pc, #164]	@ (80094c0 <HAL_DMA_IRQHandler+0xc78>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d045      	beq.n	80094aa <HAL_DMA_IRQHandler+0xc62>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a28      	ldr	r2, [pc, #160]	@ (80094c4 <HAL_DMA_IRQHandler+0xc7c>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d040      	beq.n	80094aa <HAL_DMA_IRQHandler+0xc62>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a26      	ldr	r2, [pc, #152]	@ (80094c8 <HAL_DMA_IRQHandler+0xc80>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d03b      	beq.n	80094aa <HAL_DMA_IRQHandler+0xc62>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a25      	ldr	r2, [pc, #148]	@ (80094cc <HAL_DMA_IRQHandler+0xc84>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d036      	beq.n	80094aa <HAL_DMA_IRQHandler+0xc62>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a23      	ldr	r2, [pc, #140]	@ (80094d0 <HAL_DMA_IRQHandler+0xc88>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d031      	beq.n	80094aa <HAL_DMA_IRQHandler+0xc62>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a22      	ldr	r2, [pc, #136]	@ (80094d4 <HAL_DMA_IRQHandler+0xc8c>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d02c      	beq.n	80094aa <HAL_DMA_IRQHandler+0xc62>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a20      	ldr	r2, [pc, #128]	@ (80094d8 <HAL_DMA_IRQHandler+0xc90>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d027      	beq.n	80094aa <HAL_DMA_IRQHandler+0xc62>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a1f      	ldr	r2, [pc, #124]	@ (80094dc <HAL_DMA_IRQHandler+0xc94>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d022      	beq.n	80094aa <HAL_DMA_IRQHandler+0xc62>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a1d      	ldr	r2, [pc, #116]	@ (80094e0 <HAL_DMA_IRQHandler+0xc98>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d01d      	beq.n	80094aa <HAL_DMA_IRQHandler+0xc62>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a1c      	ldr	r2, [pc, #112]	@ (80094e4 <HAL_DMA_IRQHandler+0xc9c>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d018      	beq.n	80094aa <HAL_DMA_IRQHandler+0xc62>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a1a      	ldr	r2, [pc, #104]	@ (80094e8 <HAL_DMA_IRQHandler+0xca0>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d013      	beq.n	80094aa <HAL_DMA_IRQHandler+0xc62>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a19      	ldr	r2, [pc, #100]	@ (80094ec <HAL_DMA_IRQHandler+0xca4>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d00e      	beq.n	80094aa <HAL_DMA_IRQHandler+0xc62>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a17      	ldr	r2, [pc, #92]	@ (80094f0 <HAL_DMA_IRQHandler+0xca8>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d009      	beq.n	80094aa <HAL_DMA_IRQHandler+0xc62>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a16      	ldr	r2, [pc, #88]	@ (80094f4 <HAL_DMA_IRQHandler+0xcac>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d004      	beq.n	80094aa <HAL_DMA_IRQHandler+0xc62>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a14      	ldr	r2, [pc, #80]	@ (80094f8 <HAL_DMA_IRQHandler+0xcb0>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d128      	bne.n	80094fc <HAL_DMA_IRQHandler+0xcb4>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	681a      	ldr	r2, [r3, #0]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f022 0214 	bic.w	r2, r2, #20
 80094b8:	601a      	str	r2, [r3, #0]
 80094ba:	e027      	b.n	800950c <HAL_DMA_IRQHandler+0xcc4>
 80094bc:	40020010 	.word	0x40020010
 80094c0:	40020028 	.word	0x40020028
 80094c4:	40020040 	.word	0x40020040
 80094c8:	40020058 	.word	0x40020058
 80094cc:	40020070 	.word	0x40020070
 80094d0:	40020088 	.word	0x40020088
 80094d4:	400200a0 	.word	0x400200a0
 80094d8:	400200b8 	.word	0x400200b8
 80094dc:	40020410 	.word	0x40020410
 80094e0:	40020428 	.word	0x40020428
 80094e4:	40020440 	.word	0x40020440
 80094e8:	40020458 	.word	0x40020458
 80094ec:	40020470 	.word	0x40020470
 80094f0:	40020488 	.word	0x40020488
 80094f4:	400204a0 	.word	0x400204a0
 80094f8:	400204b8 	.word	0x400204b8
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f022 020a 	bic.w	r2, r2, #10
 800950a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2201      	movs	r2, #1
 8009510:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009520:	2b00      	cmp	r3, #0
 8009522:	f000 8097 	beq.w	8009654 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800952e:	e091      	b.n	8009654 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009534:	f003 031f 	and.w	r3, r3, #31
 8009538:	2208      	movs	r2, #8
 800953a:	409a      	lsls	r2, r3
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	4013      	ands	r3, r2
 8009540:	2b00      	cmp	r3, #0
 8009542:	f000 8088 	beq.w	8009656 <HAL_DMA_IRQHandler+0xe0e>
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	f003 0308 	and.w	r3, r3, #8
 800954c:	2b00      	cmp	r3, #0
 800954e:	f000 8082 	beq.w	8009656 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a41      	ldr	r2, [pc, #260]	@ (800965c <HAL_DMA_IRQHandler+0xe14>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d04a      	beq.n	80095f2 <HAL_DMA_IRQHandler+0xdaa>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a3f      	ldr	r2, [pc, #252]	@ (8009660 <HAL_DMA_IRQHandler+0xe18>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d045      	beq.n	80095f2 <HAL_DMA_IRQHandler+0xdaa>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a3e      	ldr	r2, [pc, #248]	@ (8009664 <HAL_DMA_IRQHandler+0xe1c>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d040      	beq.n	80095f2 <HAL_DMA_IRQHandler+0xdaa>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a3c      	ldr	r2, [pc, #240]	@ (8009668 <HAL_DMA_IRQHandler+0xe20>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d03b      	beq.n	80095f2 <HAL_DMA_IRQHandler+0xdaa>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a3b      	ldr	r2, [pc, #236]	@ (800966c <HAL_DMA_IRQHandler+0xe24>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d036      	beq.n	80095f2 <HAL_DMA_IRQHandler+0xdaa>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a39      	ldr	r2, [pc, #228]	@ (8009670 <HAL_DMA_IRQHandler+0xe28>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d031      	beq.n	80095f2 <HAL_DMA_IRQHandler+0xdaa>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a38      	ldr	r2, [pc, #224]	@ (8009674 <HAL_DMA_IRQHandler+0xe2c>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d02c      	beq.n	80095f2 <HAL_DMA_IRQHandler+0xdaa>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a36      	ldr	r2, [pc, #216]	@ (8009678 <HAL_DMA_IRQHandler+0xe30>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d027      	beq.n	80095f2 <HAL_DMA_IRQHandler+0xdaa>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a35      	ldr	r2, [pc, #212]	@ (800967c <HAL_DMA_IRQHandler+0xe34>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d022      	beq.n	80095f2 <HAL_DMA_IRQHandler+0xdaa>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a33      	ldr	r2, [pc, #204]	@ (8009680 <HAL_DMA_IRQHandler+0xe38>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d01d      	beq.n	80095f2 <HAL_DMA_IRQHandler+0xdaa>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a32      	ldr	r2, [pc, #200]	@ (8009684 <HAL_DMA_IRQHandler+0xe3c>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d018      	beq.n	80095f2 <HAL_DMA_IRQHandler+0xdaa>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a30      	ldr	r2, [pc, #192]	@ (8009688 <HAL_DMA_IRQHandler+0xe40>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d013      	beq.n	80095f2 <HAL_DMA_IRQHandler+0xdaa>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a2f      	ldr	r2, [pc, #188]	@ (800968c <HAL_DMA_IRQHandler+0xe44>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d00e      	beq.n	80095f2 <HAL_DMA_IRQHandler+0xdaa>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a2d      	ldr	r2, [pc, #180]	@ (8009690 <HAL_DMA_IRQHandler+0xe48>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d009      	beq.n	80095f2 <HAL_DMA_IRQHandler+0xdaa>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a2c      	ldr	r2, [pc, #176]	@ (8009694 <HAL_DMA_IRQHandler+0xe4c>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d004      	beq.n	80095f2 <HAL_DMA_IRQHandler+0xdaa>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a2a      	ldr	r2, [pc, #168]	@ (8009698 <HAL_DMA_IRQHandler+0xe50>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d108      	bne.n	8009604 <HAL_DMA_IRQHandler+0xdbc>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f022 021c 	bic.w	r2, r2, #28
 8009600:	601a      	str	r2, [r3, #0]
 8009602:	e007      	b.n	8009614 <HAL_DMA_IRQHandler+0xdcc>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f022 020e 	bic.w	r2, r2, #14
 8009612:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009618:	f003 031f 	and.w	r3, r3, #31
 800961c:	2201      	movs	r2, #1
 800961e:	409a      	lsls	r2, r3
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2201      	movs	r2, #1
 8009628:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2201      	movs	r2, #1
 800962e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2200      	movs	r2, #0
 8009636:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800963e:	2b00      	cmp	r3, #0
 8009640:	d009      	beq.n	8009656 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	4798      	blx	r3
 800964a:	e004      	b.n	8009656 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800964c:	bf00      	nop
 800964e:	e002      	b.n	8009656 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009650:	bf00      	nop
 8009652:	e000      	b.n	8009656 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009654:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009656:	3728      	adds	r7, #40	@ 0x28
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}
 800965c:	40020010 	.word	0x40020010
 8009660:	40020028 	.word	0x40020028
 8009664:	40020040 	.word	0x40020040
 8009668:	40020058 	.word	0x40020058
 800966c:	40020070 	.word	0x40020070
 8009670:	40020088 	.word	0x40020088
 8009674:	400200a0 	.word	0x400200a0
 8009678:	400200b8 	.word	0x400200b8
 800967c:	40020410 	.word	0x40020410
 8009680:	40020428 	.word	0x40020428
 8009684:	40020440 	.word	0x40020440
 8009688:	40020458 	.word	0x40020458
 800968c:	40020470 	.word	0x40020470
 8009690:	40020488 	.word	0x40020488
 8009694:	400204a0 	.word	0x400204a0
 8009698:	400204b8 	.word	0x400204b8

0800969c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800969c:	b480      	push	{r7}
 800969e:	b087      	sub	sp, #28
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	607a      	str	r2, [r7, #4]
 80096a8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096ae:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096b4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a7f      	ldr	r2, [pc, #508]	@ (80098b8 <DMA_SetConfig+0x21c>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d072      	beq.n	80097a6 <DMA_SetConfig+0x10a>
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a7d      	ldr	r2, [pc, #500]	@ (80098bc <DMA_SetConfig+0x220>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d06d      	beq.n	80097a6 <DMA_SetConfig+0x10a>
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a7c      	ldr	r2, [pc, #496]	@ (80098c0 <DMA_SetConfig+0x224>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d068      	beq.n	80097a6 <DMA_SetConfig+0x10a>
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a7a      	ldr	r2, [pc, #488]	@ (80098c4 <DMA_SetConfig+0x228>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d063      	beq.n	80097a6 <DMA_SetConfig+0x10a>
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a79      	ldr	r2, [pc, #484]	@ (80098c8 <DMA_SetConfig+0x22c>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d05e      	beq.n	80097a6 <DMA_SetConfig+0x10a>
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a77      	ldr	r2, [pc, #476]	@ (80098cc <DMA_SetConfig+0x230>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d059      	beq.n	80097a6 <DMA_SetConfig+0x10a>
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a76      	ldr	r2, [pc, #472]	@ (80098d0 <DMA_SetConfig+0x234>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d054      	beq.n	80097a6 <DMA_SetConfig+0x10a>
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a74      	ldr	r2, [pc, #464]	@ (80098d4 <DMA_SetConfig+0x238>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d04f      	beq.n	80097a6 <DMA_SetConfig+0x10a>
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a73      	ldr	r2, [pc, #460]	@ (80098d8 <DMA_SetConfig+0x23c>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d04a      	beq.n	80097a6 <DMA_SetConfig+0x10a>
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a71      	ldr	r2, [pc, #452]	@ (80098dc <DMA_SetConfig+0x240>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d045      	beq.n	80097a6 <DMA_SetConfig+0x10a>
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a70      	ldr	r2, [pc, #448]	@ (80098e0 <DMA_SetConfig+0x244>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d040      	beq.n	80097a6 <DMA_SetConfig+0x10a>
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a6e      	ldr	r2, [pc, #440]	@ (80098e4 <DMA_SetConfig+0x248>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d03b      	beq.n	80097a6 <DMA_SetConfig+0x10a>
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a6d      	ldr	r2, [pc, #436]	@ (80098e8 <DMA_SetConfig+0x24c>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d036      	beq.n	80097a6 <DMA_SetConfig+0x10a>
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a6b      	ldr	r2, [pc, #428]	@ (80098ec <DMA_SetConfig+0x250>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d031      	beq.n	80097a6 <DMA_SetConfig+0x10a>
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4a6a      	ldr	r2, [pc, #424]	@ (80098f0 <DMA_SetConfig+0x254>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d02c      	beq.n	80097a6 <DMA_SetConfig+0x10a>
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a68      	ldr	r2, [pc, #416]	@ (80098f4 <DMA_SetConfig+0x258>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d027      	beq.n	80097a6 <DMA_SetConfig+0x10a>
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a67      	ldr	r2, [pc, #412]	@ (80098f8 <DMA_SetConfig+0x25c>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d022      	beq.n	80097a6 <DMA_SetConfig+0x10a>
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a65      	ldr	r2, [pc, #404]	@ (80098fc <DMA_SetConfig+0x260>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d01d      	beq.n	80097a6 <DMA_SetConfig+0x10a>
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a64      	ldr	r2, [pc, #400]	@ (8009900 <DMA_SetConfig+0x264>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d018      	beq.n	80097a6 <DMA_SetConfig+0x10a>
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a62      	ldr	r2, [pc, #392]	@ (8009904 <DMA_SetConfig+0x268>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d013      	beq.n	80097a6 <DMA_SetConfig+0x10a>
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a61      	ldr	r2, [pc, #388]	@ (8009908 <DMA_SetConfig+0x26c>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d00e      	beq.n	80097a6 <DMA_SetConfig+0x10a>
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a5f      	ldr	r2, [pc, #380]	@ (800990c <DMA_SetConfig+0x270>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d009      	beq.n	80097a6 <DMA_SetConfig+0x10a>
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a5e      	ldr	r2, [pc, #376]	@ (8009910 <DMA_SetConfig+0x274>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d004      	beq.n	80097a6 <DMA_SetConfig+0x10a>
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a5c      	ldr	r2, [pc, #368]	@ (8009914 <DMA_SetConfig+0x278>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d101      	bne.n	80097aa <DMA_SetConfig+0x10e>
 80097a6:	2301      	movs	r3, #1
 80097a8:	e000      	b.n	80097ac <DMA_SetConfig+0x110>
 80097aa:	2300      	movs	r3, #0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d00d      	beq.n	80097cc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097b4:	68fa      	ldr	r2, [r7, #12]
 80097b6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80097b8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d004      	beq.n	80097cc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097c6:	68fa      	ldr	r2, [r7, #12]
 80097c8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80097ca:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a39      	ldr	r2, [pc, #228]	@ (80098b8 <DMA_SetConfig+0x21c>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d04a      	beq.n	800986c <DMA_SetConfig+0x1d0>
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a38      	ldr	r2, [pc, #224]	@ (80098bc <DMA_SetConfig+0x220>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d045      	beq.n	800986c <DMA_SetConfig+0x1d0>
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a36      	ldr	r2, [pc, #216]	@ (80098c0 <DMA_SetConfig+0x224>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d040      	beq.n	800986c <DMA_SetConfig+0x1d0>
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a35      	ldr	r2, [pc, #212]	@ (80098c4 <DMA_SetConfig+0x228>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d03b      	beq.n	800986c <DMA_SetConfig+0x1d0>
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a33      	ldr	r2, [pc, #204]	@ (80098c8 <DMA_SetConfig+0x22c>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d036      	beq.n	800986c <DMA_SetConfig+0x1d0>
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a32      	ldr	r2, [pc, #200]	@ (80098cc <DMA_SetConfig+0x230>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d031      	beq.n	800986c <DMA_SetConfig+0x1d0>
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a30      	ldr	r2, [pc, #192]	@ (80098d0 <DMA_SetConfig+0x234>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d02c      	beq.n	800986c <DMA_SetConfig+0x1d0>
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a2f      	ldr	r2, [pc, #188]	@ (80098d4 <DMA_SetConfig+0x238>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d027      	beq.n	800986c <DMA_SetConfig+0x1d0>
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a2d      	ldr	r2, [pc, #180]	@ (80098d8 <DMA_SetConfig+0x23c>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d022      	beq.n	800986c <DMA_SetConfig+0x1d0>
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a2c      	ldr	r2, [pc, #176]	@ (80098dc <DMA_SetConfig+0x240>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d01d      	beq.n	800986c <DMA_SetConfig+0x1d0>
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a2a      	ldr	r2, [pc, #168]	@ (80098e0 <DMA_SetConfig+0x244>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d018      	beq.n	800986c <DMA_SetConfig+0x1d0>
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a29      	ldr	r2, [pc, #164]	@ (80098e4 <DMA_SetConfig+0x248>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d013      	beq.n	800986c <DMA_SetConfig+0x1d0>
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a27      	ldr	r2, [pc, #156]	@ (80098e8 <DMA_SetConfig+0x24c>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d00e      	beq.n	800986c <DMA_SetConfig+0x1d0>
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a26      	ldr	r2, [pc, #152]	@ (80098ec <DMA_SetConfig+0x250>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d009      	beq.n	800986c <DMA_SetConfig+0x1d0>
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a24      	ldr	r2, [pc, #144]	@ (80098f0 <DMA_SetConfig+0x254>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d004      	beq.n	800986c <DMA_SetConfig+0x1d0>
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a23      	ldr	r2, [pc, #140]	@ (80098f4 <DMA_SetConfig+0x258>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d101      	bne.n	8009870 <DMA_SetConfig+0x1d4>
 800986c:	2301      	movs	r3, #1
 800986e:	e000      	b.n	8009872 <DMA_SetConfig+0x1d6>
 8009870:	2300      	movs	r3, #0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d059      	beq.n	800992a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800987a:	f003 031f 	and.w	r3, r3, #31
 800987e:	223f      	movs	r2, #63	@ 0x3f
 8009880:	409a      	lsls	r2, r3
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009894:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	683a      	ldr	r2, [r7, #0]
 800989c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	2b40      	cmp	r3, #64	@ 0x40
 80098a4:	d138      	bne.n	8009918 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	68ba      	ldr	r2, [r7, #8]
 80098b4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80098b6:	e086      	b.n	80099c6 <DMA_SetConfig+0x32a>
 80098b8:	40020010 	.word	0x40020010
 80098bc:	40020028 	.word	0x40020028
 80098c0:	40020040 	.word	0x40020040
 80098c4:	40020058 	.word	0x40020058
 80098c8:	40020070 	.word	0x40020070
 80098cc:	40020088 	.word	0x40020088
 80098d0:	400200a0 	.word	0x400200a0
 80098d4:	400200b8 	.word	0x400200b8
 80098d8:	40020410 	.word	0x40020410
 80098dc:	40020428 	.word	0x40020428
 80098e0:	40020440 	.word	0x40020440
 80098e4:	40020458 	.word	0x40020458
 80098e8:	40020470 	.word	0x40020470
 80098ec:	40020488 	.word	0x40020488
 80098f0:	400204a0 	.word	0x400204a0
 80098f4:	400204b8 	.word	0x400204b8
 80098f8:	58025408 	.word	0x58025408
 80098fc:	5802541c 	.word	0x5802541c
 8009900:	58025430 	.word	0x58025430
 8009904:	58025444 	.word	0x58025444
 8009908:	58025458 	.word	0x58025458
 800990c:	5802546c 	.word	0x5802546c
 8009910:	58025480 	.word	0x58025480
 8009914:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	68ba      	ldr	r2, [r7, #8]
 800991e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	60da      	str	r2, [r3, #12]
}
 8009928:	e04d      	b.n	80099c6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a29      	ldr	r2, [pc, #164]	@ (80099d4 <DMA_SetConfig+0x338>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d022      	beq.n	800997a <DMA_SetConfig+0x2de>
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a27      	ldr	r2, [pc, #156]	@ (80099d8 <DMA_SetConfig+0x33c>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d01d      	beq.n	800997a <DMA_SetConfig+0x2de>
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a26      	ldr	r2, [pc, #152]	@ (80099dc <DMA_SetConfig+0x340>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d018      	beq.n	800997a <DMA_SetConfig+0x2de>
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a24      	ldr	r2, [pc, #144]	@ (80099e0 <DMA_SetConfig+0x344>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d013      	beq.n	800997a <DMA_SetConfig+0x2de>
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a23      	ldr	r2, [pc, #140]	@ (80099e4 <DMA_SetConfig+0x348>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d00e      	beq.n	800997a <DMA_SetConfig+0x2de>
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a21      	ldr	r2, [pc, #132]	@ (80099e8 <DMA_SetConfig+0x34c>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d009      	beq.n	800997a <DMA_SetConfig+0x2de>
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a20      	ldr	r2, [pc, #128]	@ (80099ec <DMA_SetConfig+0x350>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d004      	beq.n	800997a <DMA_SetConfig+0x2de>
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a1e      	ldr	r2, [pc, #120]	@ (80099f0 <DMA_SetConfig+0x354>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d101      	bne.n	800997e <DMA_SetConfig+0x2e2>
 800997a:	2301      	movs	r3, #1
 800997c:	e000      	b.n	8009980 <DMA_SetConfig+0x2e4>
 800997e:	2300      	movs	r3, #0
 8009980:	2b00      	cmp	r3, #0
 8009982:	d020      	beq.n	80099c6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009988:	f003 031f 	and.w	r3, r3, #31
 800998c:	2201      	movs	r2, #1
 800998e:	409a      	lsls	r2, r3
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	683a      	ldr	r2, [r7, #0]
 800999a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	2b40      	cmp	r3, #64	@ 0x40
 80099a2:	d108      	bne.n	80099b6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	68ba      	ldr	r2, [r7, #8]
 80099b2:	60da      	str	r2, [r3, #12]
}
 80099b4:	e007      	b.n	80099c6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	68ba      	ldr	r2, [r7, #8]
 80099bc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	687a      	ldr	r2, [r7, #4]
 80099c4:	60da      	str	r2, [r3, #12]
}
 80099c6:	bf00      	nop
 80099c8:	371c      	adds	r7, #28
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr
 80099d2:	bf00      	nop
 80099d4:	58025408 	.word	0x58025408
 80099d8:	5802541c 	.word	0x5802541c
 80099dc:	58025430 	.word	0x58025430
 80099e0:	58025444 	.word	0x58025444
 80099e4:	58025458 	.word	0x58025458
 80099e8:	5802546c 	.word	0x5802546c
 80099ec:	58025480 	.word	0x58025480
 80099f0:	58025494 	.word	0x58025494

080099f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b085      	sub	sp, #20
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a42      	ldr	r2, [pc, #264]	@ (8009b0c <DMA_CalcBaseAndBitshift+0x118>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d04a      	beq.n	8009a9c <DMA_CalcBaseAndBitshift+0xa8>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a41      	ldr	r2, [pc, #260]	@ (8009b10 <DMA_CalcBaseAndBitshift+0x11c>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d045      	beq.n	8009a9c <DMA_CalcBaseAndBitshift+0xa8>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a3f      	ldr	r2, [pc, #252]	@ (8009b14 <DMA_CalcBaseAndBitshift+0x120>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d040      	beq.n	8009a9c <DMA_CalcBaseAndBitshift+0xa8>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4a3e      	ldr	r2, [pc, #248]	@ (8009b18 <DMA_CalcBaseAndBitshift+0x124>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d03b      	beq.n	8009a9c <DMA_CalcBaseAndBitshift+0xa8>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a3c      	ldr	r2, [pc, #240]	@ (8009b1c <DMA_CalcBaseAndBitshift+0x128>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d036      	beq.n	8009a9c <DMA_CalcBaseAndBitshift+0xa8>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4a3b      	ldr	r2, [pc, #236]	@ (8009b20 <DMA_CalcBaseAndBitshift+0x12c>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d031      	beq.n	8009a9c <DMA_CalcBaseAndBitshift+0xa8>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a39      	ldr	r2, [pc, #228]	@ (8009b24 <DMA_CalcBaseAndBitshift+0x130>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d02c      	beq.n	8009a9c <DMA_CalcBaseAndBitshift+0xa8>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a38      	ldr	r2, [pc, #224]	@ (8009b28 <DMA_CalcBaseAndBitshift+0x134>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d027      	beq.n	8009a9c <DMA_CalcBaseAndBitshift+0xa8>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a36      	ldr	r2, [pc, #216]	@ (8009b2c <DMA_CalcBaseAndBitshift+0x138>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d022      	beq.n	8009a9c <DMA_CalcBaseAndBitshift+0xa8>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a35      	ldr	r2, [pc, #212]	@ (8009b30 <DMA_CalcBaseAndBitshift+0x13c>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d01d      	beq.n	8009a9c <DMA_CalcBaseAndBitshift+0xa8>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a33      	ldr	r2, [pc, #204]	@ (8009b34 <DMA_CalcBaseAndBitshift+0x140>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d018      	beq.n	8009a9c <DMA_CalcBaseAndBitshift+0xa8>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a32      	ldr	r2, [pc, #200]	@ (8009b38 <DMA_CalcBaseAndBitshift+0x144>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d013      	beq.n	8009a9c <DMA_CalcBaseAndBitshift+0xa8>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a30      	ldr	r2, [pc, #192]	@ (8009b3c <DMA_CalcBaseAndBitshift+0x148>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d00e      	beq.n	8009a9c <DMA_CalcBaseAndBitshift+0xa8>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a2f      	ldr	r2, [pc, #188]	@ (8009b40 <DMA_CalcBaseAndBitshift+0x14c>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d009      	beq.n	8009a9c <DMA_CalcBaseAndBitshift+0xa8>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a2d      	ldr	r2, [pc, #180]	@ (8009b44 <DMA_CalcBaseAndBitshift+0x150>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d004      	beq.n	8009a9c <DMA_CalcBaseAndBitshift+0xa8>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a2c      	ldr	r2, [pc, #176]	@ (8009b48 <DMA_CalcBaseAndBitshift+0x154>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d101      	bne.n	8009aa0 <DMA_CalcBaseAndBitshift+0xac>
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	e000      	b.n	8009aa2 <DMA_CalcBaseAndBitshift+0xae>
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d024      	beq.n	8009af0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	3b10      	subs	r3, #16
 8009aae:	4a27      	ldr	r2, [pc, #156]	@ (8009b4c <DMA_CalcBaseAndBitshift+0x158>)
 8009ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ab4:	091b      	lsrs	r3, r3, #4
 8009ab6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f003 0307 	and.w	r3, r3, #7
 8009abe:	4a24      	ldr	r2, [pc, #144]	@ (8009b50 <DMA_CalcBaseAndBitshift+0x15c>)
 8009ac0:	5cd3      	ldrb	r3, [r2, r3]
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2b03      	cmp	r3, #3
 8009acc:	d908      	bls.n	8009ae0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8009b54 <DMA_CalcBaseAndBitshift+0x160>)
 8009ad6:	4013      	ands	r3, r2
 8009ad8:	1d1a      	adds	r2, r3, #4
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	659a      	str	r2, [r3, #88]	@ 0x58
 8009ade:	e00d      	b.n	8009afc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8009b54 <DMA_CalcBaseAndBitshift+0x160>)
 8009ae8:	4013      	ands	r3, r2
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	6593      	str	r3, [r2, #88]	@ 0x58
 8009aee:	e005      	b.n	8009afc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3714      	adds	r7, #20
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr
 8009b0c:	40020010 	.word	0x40020010
 8009b10:	40020028 	.word	0x40020028
 8009b14:	40020040 	.word	0x40020040
 8009b18:	40020058 	.word	0x40020058
 8009b1c:	40020070 	.word	0x40020070
 8009b20:	40020088 	.word	0x40020088
 8009b24:	400200a0 	.word	0x400200a0
 8009b28:	400200b8 	.word	0x400200b8
 8009b2c:	40020410 	.word	0x40020410
 8009b30:	40020428 	.word	0x40020428
 8009b34:	40020440 	.word	0x40020440
 8009b38:	40020458 	.word	0x40020458
 8009b3c:	40020470 	.word	0x40020470
 8009b40:	40020488 	.word	0x40020488
 8009b44:	400204a0 	.word	0x400204a0
 8009b48:	400204b8 	.word	0x400204b8
 8009b4c:	aaaaaaab 	.word	0xaaaaaaab
 8009b50:	08014e80 	.word	0x08014e80
 8009b54:	fffffc00 	.word	0xfffffc00

08009b58 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b085      	sub	sp, #20
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b60:	2300      	movs	r3, #0
 8009b62:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	699b      	ldr	r3, [r3, #24]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d120      	bne.n	8009bae <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b70:	2b03      	cmp	r3, #3
 8009b72:	d858      	bhi.n	8009c26 <DMA_CheckFifoParam+0xce>
 8009b74:	a201      	add	r2, pc, #4	@ (adr r2, 8009b7c <DMA_CheckFifoParam+0x24>)
 8009b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b7a:	bf00      	nop
 8009b7c:	08009b8d 	.word	0x08009b8d
 8009b80:	08009b9f 	.word	0x08009b9f
 8009b84:	08009b8d 	.word	0x08009b8d
 8009b88:	08009c27 	.word	0x08009c27
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d048      	beq.n	8009c2a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009b9c:	e045      	b.n	8009c2a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ba2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009ba6:	d142      	bne.n	8009c2e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009bac:	e03f      	b.n	8009c2e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	699b      	ldr	r3, [r3, #24]
 8009bb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bb6:	d123      	bne.n	8009c00 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bbc:	2b03      	cmp	r3, #3
 8009bbe:	d838      	bhi.n	8009c32 <DMA_CheckFifoParam+0xda>
 8009bc0:	a201      	add	r2, pc, #4	@ (adr r2, 8009bc8 <DMA_CheckFifoParam+0x70>)
 8009bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc6:	bf00      	nop
 8009bc8:	08009bd9 	.word	0x08009bd9
 8009bcc:	08009bdf 	.word	0x08009bdf
 8009bd0:	08009bd9 	.word	0x08009bd9
 8009bd4:	08009bf1 	.word	0x08009bf1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	73fb      	strb	r3, [r7, #15]
        break;
 8009bdc:	e030      	b.n	8009c40 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009be2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d025      	beq.n	8009c36 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009bea:	2301      	movs	r3, #1
 8009bec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009bee:	e022      	b.n	8009c36 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bf4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009bf8:	d11f      	bne.n	8009c3a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009bfe:	e01c      	b.n	8009c3a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c04:	2b02      	cmp	r3, #2
 8009c06:	d902      	bls.n	8009c0e <DMA_CheckFifoParam+0xb6>
 8009c08:	2b03      	cmp	r3, #3
 8009c0a:	d003      	beq.n	8009c14 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009c0c:	e018      	b.n	8009c40 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	73fb      	strb	r3, [r7, #15]
        break;
 8009c12:	e015      	b.n	8009c40 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d00e      	beq.n	8009c3e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009c20:	2301      	movs	r3, #1
 8009c22:	73fb      	strb	r3, [r7, #15]
    break;
 8009c24:	e00b      	b.n	8009c3e <DMA_CheckFifoParam+0xe6>
        break;
 8009c26:	bf00      	nop
 8009c28:	e00a      	b.n	8009c40 <DMA_CheckFifoParam+0xe8>
        break;
 8009c2a:	bf00      	nop
 8009c2c:	e008      	b.n	8009c40 <DMA_CheckFifoParam+0xe8>
        break;
 8009c2e:	bf00      	nop
 8009c30:	e006      	b.n	8009c40 <DMA_CheckFifoParam+0xe8>
        break;
 8009c32:	bf00      	nop
 8009c34:	e004      	b.n	8009c40 <DMA_CheckFifoParam+0xe8>
        break;
 8009c36:	bf00      	nop
 8009c38:	e002      	b.n	8009c40 <DMA_CheckFifoParam+0xe8>
        break;
 8009c3a:	bf00      	nop
 8009c3c:	e000      	b.n	8009c40 <DMA_CheckFifoParam+0xe8>
    break;
 8009c3e:	bf00      	nop
    }
  }

  return status;
 8009c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3714      	adds	r7, #20
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr
 8009c4e:	bf00      	nop

08009c50 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b085      	sub	sp, #20
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4a38      	ldr	r2, [pc, #224]	@ (8009d44 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d022      	beq.n	8009cae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4a36      	ldr	r2, [pc, #216]	@ (8009d48 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d01d      	beq.n	8009cae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4a35      	ldr	r2, [pc, #212]	@ (8009d4c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d018      	beq.n	8009cae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a33      	ldr	r2, [pc, #204]	@ (8009d50 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d013      	beq.n	8009cae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a32      	ldr	r2, [pc, #200]	@ (8009d54 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d00e      	beq.n	8009cae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4a30      	ldr	r2, [pc, #192]	@ (8009d58 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d009      	beq.n	8009cae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a2f      	ldr	r2, [pc, #188]	@ (8009d5c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d004      	beq.n	8009cae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a2d      	ldr	r2, [pc, #180]	@ (8009d60 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d101      	bne.n	8009cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009cae:	2301      	movs	r3, #1
 8009cb0:	e000      	b.n	8009cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d01a      	beq.n	8009cee <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	b2db      	uxtb	r3, r3
 8009cbe:	3b08      	subs	r3, #8
 8009cc0:	4a28      	ldr	r2, [pc, #160]	@ (8009d64 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8009cc6:	091b      	lsrs	r3, r3, #4
 8009cc8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009cca:	68fa      	ldr	r2, [r7, #12]
 8009ccc:	4b26      	ldr	r3, [pc, #152]	@ (8009d68 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009cce:	4413      	add	r3, r2
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	4a24      	ldr	r2, [pc, #144]	@ (8009d6c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009cdc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f003 031f 	and.w	r3, r3, #31
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	409a      	lsls	r2, r3
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009cec:	e024      	b.n	8009d38 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	3b10      	subs	r3, #16
 8009cf6:	4a1e      	ldr	r2, [pc, #120]	@ (8009d70 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8009cfc:	091b      	lsrs	r3, r3, #4
 8009cfe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	4a1c      	ldr	r2, [pc, #112]	@ (8009d74 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d806      	bhi.n	8009d16 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	4a1b      	ldr	r2, [pc, #108]	@ (8009d78 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d902      	bls.n	8009d16 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	3308      	adds	r3, #8
 8009d14:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	4b18      	ldr	r3, [pc, #96]	@ (8009d7c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009d1a:	4413      	add	r3, r2
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	461a      	mov	r2, r3
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a16      	ldr	r2, [pc, #88]	@ (8009d80 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009d28:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f003 031f 	and.w	r3, r3, #31
 8009d30:	2201      	movs	r2, #1
 8009d32:	409a      	lsls	r2, r3
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009d38:	bf00      	nop
 8009d3a:	3714      	adds	r7, #20
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr
 8009d44:	58025408 	.word	0x58025408
 8009d48:	5802541c 	.word	0x5802541c
 8009d4c:	58025430 	.word	0x58025430
 8009d50:	58025444 	.word	0x58025444
 8009d54:	58025458 	.word	0x58025458
 8009d58:	5802546c 	.word	0x5802546c
 8009d5c:	58025480 	.word	0x58025480
 8009d60:	58025494 	.word	0x58025494
 8009d64:	cccccccd 	.word	0xcccccccd
 8009d68:	16009600 	.word	0x16009600
 8009d6c:	58025880 	.word	0x58025880
 8009d70:	aaaaaaab 	.word	0xaaaaaaab
 8009d74:	400204b8 	.word	0x400204b8
 8009d78:	4002040f 	.word	0x4002040f
 8009d7c:	10008200 	.word	0x10008200
 8009d80:	40020880 	.word	0x40020880

08009d84 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b085      	sub	sp, #20
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d04a      	beq.n	8009e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2b08      	cmp	r3, #8
 8009d9e:	d847      	bhi.n	8009e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a25      	ldr	r2, [pc, #148]	@ (8009e3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d022      	beq.n	8009df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a24      	ldr	r2, [pc, #144]	@ (8009e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d01d      	beq.n	8009df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a22      	ldr	r2, [pc, #136]	@ (8009e44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d018      	beq.n	8009df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a21      	ldr	r2, [pc, #132]	@ (8009e48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d013      	beq.n	8009df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a1f      	ldr	r2, [pc, #124]	@ (8009e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d00e      	beq.n	8009df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a1e      	ldr	r2, [pc, #120]	@ (8009e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d009      	beq.n	8009df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a1c      	ldr	r2, [pc, #112]	@ (8009e54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d004      	beq.n	8009df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a1b      	ldr	r2, [pc, #108]	@ (8009e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d101      	bne.n	8009df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009df0:	2301      	movs	r3, #1
 8009df2:	e000      	b.n	8009df6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009df4:	2300      	movs	r3, #0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d00a      	beq.n	8009e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	4b17      	ldr	r3, [pc, #92]	@ (8009e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009dfe:	4413      	add	r3, r2
 8009e00:	009b      	lsls	r3, r3, #2
 8009e02:	461a      	mov	r2, r3
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4a15      	ldr	r2, [pc, #84]	@ (8009e60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009e0c:	671a      	str	r2, [r3, #112]	@ 0x70
 8009e0e:	e009      	b.n	8009e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009e10:	68fa      	ldr	r2, [r7, #12]
 8009e12:	4b14      	ldr	r3, [pc, #80]	@ (8009e64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009e14:	4413      	add	r3, r2
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	461a      	mov	r2, r3
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	4a11      	ldr	r2, [pc, #68]	@ (8009e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009e22:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	3b01      	subs	r3, #1
 8009e28:	2201      	movs	r2, #1
 8009e2a:	409a      	lsls	r2, r3
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8009e30:	bf00      	nop
 8009e32:	3714      	adds	r7, #20
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr
 8009e3c:	58025408 	.word	0x58025408
 8009e40:	5802541c 	.word	0x5802541c
 8009e44:	58025430 	.word	0x58025430
 8009e48:	58025444 	.word	0x58025444
 8009e4c:	58025458 	.word	0x58025458
 8009e50:	5802546c 	.word	0x5802546c
 8009e54:	58025480 	.word	0x58025480
 8009e58:	58025494 	.word	0x58025494
 8009e5c:	1600963f 	.word	0x1600963f
 8009e60:	58025940 	.word	0x58025940
 8009e64:	1000823f 	.word	0x1000823f
 8009e68:	40020940 	.word	0x40020940

08009e6c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b084      	sub	sp, #16
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d101      	bne.n	8009e7e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	e0cf      	b.n	800a01e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d106      	bne.n	8009e96 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2223      	movs	r2, #35	@ 0x23
 8009e8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f7fa f817 	bl	8003ec4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009e96:	4b64      	ldr	r3, [pc, #400]	@ (800a028 <HAL_ETH_Init+0x1bc>)
 8009e98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009e9c:	4a62      	ldr	r2, [pc, #392]	@ (800a028 <HAL_ETH_Init+0x1bc>)
 8009e9e:	f043 0302 	orr.w	r3, r3, #2
 8009ea2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8009ea6:	4b60      	ldr	r3, [pc, #384]	@ (800a028 <HAL_ETH_Init+0x1bc>)
 8009ea8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009eac:	f003 0302 	and.w	r3, r3, #2
 8009eb0:	60bb      	str	r3, [r7, #8]
 8009eb2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	7a1b      	ldrb	r3, [r3, #8]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d103      	bne.n	8009ec4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8009ebc:	2000      	movs	r0, #0
 8009ebe:	f7fa fd85 	bl	80049cc <HAL_SYSCFG_ETHInterfaceSelect>
 8009ec2:	e003      	b.n	8009ecc <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8009ec4:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8009ec8:	f7fa fd80 	bl	80049cc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8009ecc:	4b57      	ldr	r3, [pc, #348]	@ (800a02c <HAL_ETH_Init+0x1c0>)
 8009ece:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	6812      	ldr	r2, [r2, #0]
 8009ede:	f043 0301 	orr.w	r3, r3, #1
 8009ee2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009ee6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009ee8:	f7fa fd40 	bl	800496c <HAL_GetTick>
 8009eec:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8009eee:	e011      	b.n	8009f14 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8009ef0:	f7fa fd3c 	bl	800496c <HAL_GetTick>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	1ad3      	subs	r3, r2, r3
 8009efa:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8009efe:	d909      	bls.n	8009f14 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2204      	movs	r2, #4
 8009f04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	22e0      	movs	r2, #224	@ 0xe0
 8009f0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8009f10:	2301      	movs	r3, #1
 8009f12:	e084      	b.n	800a01e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f003 0301 	and.w	r3, r3, #1
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d1e4      	bne.n	8009ef0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 f886 	bl	800a038 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8009f2c:	f001 fed8 	bl	800bce0 <HAL_RCC_GetHCLKFreq>
 8009f30:	4603      	mov	r3, r0
 8009f32:	4a3f      	ldr	r2, [pc, #252]	@ (800a030 <HAL_ETH_Init+0x1c4>)
 8009f34:	fba2 2303 	umull	r2, r3, r2, r3
 8009f38:	0c9a      	lsrs	r2, r3, #18
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	3a01      	subs	r2, #1
 8009f40:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 fa71 	bl	800a42c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f52:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8009f56:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8009f5a:	687a      	ldr	r2, [r7, #4]
 8009f5c:	6812      	ldr	r2, [r2, #0]
 8009f5e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009f62:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009f66:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	695b      	ldr	r3, [r3, #20]
 8009f6e:	f003 0303 	and.w	r3, r3, #3
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d009      	beq.n	8009f8a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2201      	movs	r2, #1
 8009f7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	22e0      	movs	r2, #224	@ 0xe0
 8009f82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8009f86:	2301      	movs	r3, #1
 8009f88:	e049      	b.n	800a01e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f92:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8009f96:	4b27      	ldr	r3, [pc, #156]	@ (800a034 <HAL_ETH_Init+0x1c8>)
 8009f98:	4013      	ands	r3, r2
 8009f9a:	687a      	ldr	r2, [r7, #4]
 8009f9c:	6952      	ldr	r2, [r2, #20]
 8009f9e:	0051      	lsls	r1, r2, #1
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	6812      	ldr	r2, [r2, #0]
 8009fa4:	430b      	orrs	r3, r1
 8009fa6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009faa:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f000 fad9 	bl	800a566 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f000 fb1f 	bl	800a5f8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	3305      	adds	r3, #5
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	021a      	lsls	r2, r3, #8
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	3304      	adds	r3, #4
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	4619      	mov	r1, r3
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	430a      	orrs	r2, r1
 8009fd4:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	3303      	adds	r3, #3
 8009fde:	781b      	ldrb	r3, [r3, #0]
 8009fe0:	061a      	lsls	r2, r3, #24
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	3302      	adds	r3, #2
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	041b      	lsls	r3, r3, #16
 8009fec:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009ff8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800a006:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800a008:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2210      	movs	r2, #16
 800a018:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a01c:	2300      	movs	r3, #0
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	58024400 	.word	0x58024400
 800a02c:	58000400 	.word	0x58000400
 800a030:	431bde83 	.word	0x431bde83
 800a034:	ffff8001 	.word	0xffff8001

0800a038 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b084      	sub	sp, #16
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a048:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a050:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800a052:	f001 fe45 	bl	800bce0 <HAL_RCC_GetHCLKFreq>
 800a056:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	4a1e      	ldr	r2, [pc, #120]	@ (800a0d4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d908      	bls.n	800a072 <HAL_ETH_SetMDIOClockRange+0x3a>
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	4a1d      	ldr	r2, [pc, #116]	@ (800a0d8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d804      	bhi.n	800a072 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a06e:	60fb      	str	r3, [r7, #12]
 800a070:	e027      	b.n	800a0c2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	4a18      	ldr	r2, [pc, #96]	@ (800a0d8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d908      	bls.n	800a08c <HAL_ETH_SetMDIOClockRange+0x54>
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	4a17      	ldr	r2, [pc, #92]	@ (800a0dc <HAL_ETH_SetMDIOClockRange+0xa4>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d204      	bcs.n	800a08c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800a088:	60fb      	str	r3, [r7, #12]
 800a08a:	e01a      	b.n	800a0c2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	4a13      	ldr	r2, [pc, #76]	@ (800a0dc <HAL_ETH_SetMDIOClockRange+0xa4>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d303      	bcc.n	800a09c <HAL_ETH_SetMDIOClockRange+0x64>
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	4a12      	ldr	r2, [pc, #72]	@ (800a0e0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d911      	bls.n	800a0c0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	4a10      	ldr	r2, [pc, #64]	@ (800a0e0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d908      	bls.n	800a0b6 <HAL_ETH_SetMDIOClockRange+0x7e>
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	4a0f      	ldr	r2, [pc, #60]	@ (800a0e4 <HAL_ETH_SetMDIOClockRange+0xac>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d804      	bhi.n	800a0b6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a0b2:	60fb      	str	r3, [r7, #12]
 800a0b4:	e005      	b.n	800a0c2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a0bc:	60fb      	str	r3, [r7, #12]
 800a0be:	e000      	b.n	800a0c2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800a0c0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	68fa      	ldr	r2, [r7, #12]
 800a0c8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800a0cc:	bf00      	nop
 800a0ce:	3710      	adds	r7, #16
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}
 800a0d4:	01312cff 	.word	0x01312cff
 800a0d8:	02160ebf 	.word	0x02160ebf
 800a0dc:	03938700 	.word	0x03938700
 800a0e0:	05f5e0ff 	.word	0x05f5e0ff
 800a0e4:	08f0d17f 	.word	0x08f0d17f

0800a0e8 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b085      	sub	sp, #20
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800a0fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	791b      	ldrb	r3, [r3, #4]
 800a100:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800a102:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	7b1b      	ldrb	r3, [r3, #12]
 800a108:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800a10a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	7b5b      	ldrb	r3, [r3, #13]
 800a110:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800a112:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	7b9b      	ldrb	r3, [r3, #14]
 800a118:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800a11a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	7bdb      	ldrb	r3, [r3, #15]
 800a120:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800a122:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800a124:	683a      	ldr	r2, [r7, #0]
 800a126:	7c12      	ldrb	r2, [r2, #16]
 800a128:	2a00      	cmp	r2, #0
 800a12a:	d102      	bne.n	800a132 <ETH_SetMACConfig+0x4a>
 800a12c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800a130:	e000      	b.n	800a134 <ETH_SetMACConfig+0x4c>
 800a132:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800a134:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800a136:	683a      	ldr	r2, [r7, #0]
 800a138:	7c52      	ldrb	r2, [r2, #17]
 800a13a:	2a00      	cmp	r2, #0
 800a13c:	d102      	bne.n	800a144 <ETH_SetMACConfig+0x5c>
 800a13e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800a142:	e000      	b.n	800a146 <ETH_SetMACConfig+0x5e>
 800a144:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800a146:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	7c9b      	ldrb	r3, [r3, #18]
 800a14c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800a14e:	431a      	orrs	r2, r3
               macconf->Speed |
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800a154:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800a15a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	7f1b      	ldrb	r3, [r3, #28]
 800a160:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800a162:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	7f5b      	ldrb	r3, [r3, #29]
 800a168:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800a16a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800a16c:	683a      	ldr	r2, [r7, #0]
 800a16e:	7f92      	ldrb	r2, [r2, #30]
 800a170:	2a00      	cmp	r2, #0
 800a172:	d102      	bne.n	800a17a <ETH_SetMACConfig+0x92>
 800a174:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a178:	e000      	b.n	800a17c <ETH_SetMACConfig+0x94>
 800a17a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800a17c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	7fdb      	ldrb	r3, [r3, #31]
 800a182:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800a184:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800a186:	683a      	ldr	r2, [r7, #0]
 800a188:	f892 2020 	ldrb.w	r2, [r2, #32]
 800a18c:	2a00      	cmp	r2, #0
 800a18e:	d102      	bne.n	800a196 <ETH_SetMACConfig+0xae>
 800a190:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a194:	e000      	b.n	800a198 <ETH_SetMACConfig+0xb0>
 800a196:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800a198:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800a19e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a1a6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800a1a8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	4b56      	ldr	r3, [pc, #344]	@ (800a314 <ETH_SetMACConfig+0x22c>)
 800a1ba:	4013      	ands	r3, r2
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	6812      	ldr	r2, [r2, #0]
 800a1c0:	68f9      	ldr	r1, [r7, #12]
 800a1c2:	430b      	orrs	r3, r1
 800a1c4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1ca:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a1d2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a1d4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a1dc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800a1de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a1e6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800a1e8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800a1ea:	683a      	ldr	r2, [r7, #0]
 800a1ec:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 800a1f0:	2a00      	cmp	r2, #0
 800a1f2:	d102      	bne.n	800a1fa <ETH_SetMACConfig+0x112>
 800a1f4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800a1f8:	e000      	b.n	800a1fc <ETH_SetMACConfig+0x114>
 800a1fa:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800a1fc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a202:	4313      	orrs	r3, r2
 800a204:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	685a      	ldr	r2, [r3, #4]
 800a20c:	4b42      	ldr	r3, [pc, #264]	@ (800a318 <ETH_SetMACConfig+0x230>)
 800a20e:	4013      	ands	r3, r2
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	6812      	ldr	r2, [r2, #0]
 800a214:	68f9      	ldr	r1, [r7, #12]
 800a216:	430b      	orrs	r3, r1
 800a218:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a220:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800a226:	4313      	orrs	r3, r2
 800a228:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	68da      	ldr	r2, [r3, #12]
 800a230:	4b3a      	ldr	r3, [pc, #232]	@ (800a31c <ETH_SetMACConfig+0x234>)
 800a232:	4013      	ands	r3, r2
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	6812      	ldr	r2, [r2, #0]
 800a238:	68f9      	ldr	r1, [r7, #12]
 800a23a:	430b      	orrs	r3, r1
 800a23c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800a244:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a24a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800a24c:	683a      	ldr	r2, [r7, #0]
 800a24e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800a252:	2a00      	cmp	r2, #0
 800a254:	d101      	bne.n	800a25a <ETH_SetMACConfig+0x172>
 800a256:	2280      	movs	r2, #128	@ 0x80
 800a258:	e000      	b.n	800a25c <ETH_SetMACConfig+0x174>
 800a25a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800a25c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a262:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a264:	4313      	orrs	r3, r2
 800a266:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a26e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800a272:	4013      	ands	r3, r2
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	6812      	ldr	r2, [r2, #0]
 800a278:	68f9      	ldr	r1, [r7, #12]
 800a27a:	430b      	orrs	r3, r1
 800a27c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800a284:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800a28c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800a28e:	4313      	orrs	r3, r2
 800a290:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a29a:	f023 0103 	bic.w	r1, r3, #3
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	68fa      	ldr	r2, [r7, #12]
 800a2a4:	430a      	orrs	r2, r1
 800a2a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800a2b2:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	430a      	orrs	r2, r1
 800a2c0:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800a2c8:	683a      	ldr	r2, [r7, #0]
 800a2ca:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800a2ce:	2a00      	cmp	r2, #0
 800a2d0:	d101      	bne.n	800a2d6 <ETH_SetMACConfig+0x1ee>
 800a2d2:	2240      	movs	r2, #64	@ 0x40
 800a2d4:	e000      	b.n	800a2d8 <ETH_SetMACConfig+0x1f0>
 800a2d6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800a2d8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800a2e0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800a2e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800a2ea:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800a2f8:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	68fa      	ldr	r2, [r7, #12]
 800a302:	430a      	orrs	r2, r1
 800a304:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 800a308:	bf00      	nop
 800a30a:	3714      	adds	r7, #20
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr
 800a314:	00048083 	.word	0x00048083
 800a318:	c0f88000 	.word	0xc0f88000
 800a31c:	fffffef0 	.word	0xfffffef0

0800a320 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800a320:	b480      	push	{r7}
 800a322:	b085      	sub	sp, #20
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	4b38      	ldr	r3, [pc, #224]	@ (800a418 <ETH_SetDMAConfig+0xf8>)
 800a336:	4013      	ands	r3, r2
 800a338:	683a      	ldr	r2, [r7, #0]
 800a33a:	6811      	ldr	r1, [r2, #0]
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	6812      	ldr	r2, [r2, #0]
 800a340:	430b      	orrs	r3, r1
 800a342:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a346:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	791b      	ldrb	r3, [r3, #4]
 800a34c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a352:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	7b1b      	ldrb	r3, [r3, #12]
 800a358:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a35a:	4313      	orrs	r3, r2
 800a35c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a366:	685a      	ldr	r2, [r3, #4]
 800a368:	4b2c      	ldr	r3, [pc, #176]	@ (800a41c <ETH_SetDMAConfig+0xfc>)
 800a36a:	4013      	ands	r3, r2
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	6812      	ldr	r2, [r2, #0]
 800a370:	68f9      	ldr	r1, [r7, #12]
 800a372:	430b      	orrs	r3, r1
 800a374:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a378:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	7b5b      	ldrb	r3, [r3, #13]
 800a37e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800a384:	4313      	orrs	r3, r2
 800a386:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a390:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800a394:	4b22      	ldr	r3, [pc, #136]	@ (800a420 <ETH_SetDMAConfig+0x100>)
 800a396:	4013      	ands	r3, r2
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	6812      	ldr	r2, [r2, #0]
 800a39c:	68f9      	ldr	r1, [r7, #12]
 800a39e:	430b      	orrs	r3, r1
 800a3a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a3a4:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	7d1b      	ldrb	r3, [r3, #20]
 800a3b0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800a3b2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	7f5b      	ldrb	r3, [r3, #29]
 800a3b8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a3c6:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800a3ca:	4b16      	ldr	r3, [pc, #88]	@ (800a424 <ETH_SetDMAConfig+0x104>)
 800a3cc:	4013      	ands	r3, r2
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	6812      	ldr	r2, [r2, #0]
 800a3d2:	68f9      	ldr	r1, [r7, #12]
 800a3d4:	430b      	orrs	r3, r1
 800a3d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a3da:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	7f1b      	ldrb	r3, [r3, #28]
 800a3e2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a3f4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800a3f8:	4b0b      	ldr	r3, [pc, #44]	@ (800a428 <ETH_SetDMAConfig+0x108>)
 800a3fa:	4013      	ands	r3, r2
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	6812      	ldr	r2, [r2, #0]
 800a400:	68f9      	ldr	r1, [r7, #12]
 800a402:	430b      	orrs	r3, r1
 800a404:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a408:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 800a40c:	bf00      	nop
 800a40e:	3714      	adds	r7, #20
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr
 800a418:	ffff87fd 	.word	0xffff87fd
 800a41c:	ffff2ffe 	.word	0xffff2ffe
 800a420:	fffec000 	.word	0xfffec000
 800a424:	ffc0efef 	.word	0xffc0efef
 800a428:	7fc0ffff 	.word	0x7fc0ffff

0800a42c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b0a4      	sub	sp, #144	@ 0x90
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800a434:	2301      	movs	r3, #1
 800a436:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800a43a:	2300      	movs	r3, #0
 800a43c:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800a43e:	2300      	movs	r3, #0
 800a440:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800a444:	2300      	movs	r3, #0
 800a446:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800a44a:	2301      	movs	r3, #1
 800a44c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800a450:	2301      	movs	r3, #1
 800a452:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800a456:	2301      	movs	r3, #1
 800a458:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800a45c:	2300      	movs	r3, #0
 800a45e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800a462:	2301      	movs	r3, #1
 800a464:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800a468:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a46c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800a46e:	2300      	movs	r3, #0
 800a470:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800a474:	2300      	movs	r3, #0
 800a476:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800a478:	2300      	movs	r3, #0
 800a47a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800a47e:	2300      	movs	r3, #0
 800a480:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800a484:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 800a488:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800a48a:	2300      	movs	r3, #0
 800a48c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800a490:	2300      	movs	r3, #0
 800a492:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 800a494:	2301      	movs	r3, #1
 800a496:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800a49a:	2300      	movs	r3, #0
 800a49c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800a4be:	2301      	movs	r3, #1
 800a4c0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800a4c4:	2320      	movs	r3, #32
 800a4c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800a4d6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800a4da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800a4dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a4e0:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800a4e8:	2302      	movs	r3, #2
 800a4ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800a500:	2301      	movs	r3, #1
 800a502:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800a506:	2300      	movs	r3, #0
 800a508:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800a50a:	2301      	movs	r3, #1
 800a50c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800a510:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a514:	4619      	mov	r1, r3
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f7ff fde6 	bl	800a0e8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800a51c:	2301      	movs	r3, #1
 800a51e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800a520:	2301      	movs	r3, #1
 800a522:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800a524:	2300      	movs	r3, #0
 800a526:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800a528:	2300      	movs	r3, #0
 800a52a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800a52e:	2300      	movs	r3, #0
 800a530:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800a532:	2300      	movs	r3, #0
 800a534:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800a536:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a53a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800a53c:	2300      	movs	r3, #0
 800a53e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800a540:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a544:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800a546:	2300      	movs	r3, #0
 800a548:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800a54c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 800a550:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800a552:	f107 0308 	add.w	r3, r7, #8
 800a556:	4619      	mov	r1, r3
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f7ff fee1 	bl	800a320 <ETH_SetDMAConfig>
}
 800a55e:	bf00      	nop
 800a560:	3790      	adds	r7, #144	@ 0x90
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800a566:	b480      	push	{r7}
 800a568:	b085      	sub	sp, #20
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800a56e:	2300      	movs	r3, #0
 800a570:	60fb      	str	r3, [r7, #12]
 800a572:	e01d      	b.n	800a5b0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	68d9      	ldr	r1, [r3, #12]
 800a578:	68fa      	ldr	r2, [r7, #12]
 800a57a:	4613      	mov	r3, r2
 800a57c:	005b      	lsls	r3, r3, #1
 800a57e:	4413      	add	r3, r2
 800a580:	00db      	lsls	r3, r3, #3
 800a582:	440b      	add	r3, r1
 800a584:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	2200      	movs	r2, #0
 800a58a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	2200      	movs	r2, #0
 800a590:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	2200      	movs	r2, #0
 800a596:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	2200      	movs	r2, #0
 800a59c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800a59e:	68b9      	ldr	r1, [r7, #8]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	68fa      	ldr	r2, [r7, #12]
 800a5a4:	3206      	adds	r2, #6
 800a5a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	60fb      	str	r3, [r7, #12]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2b03      	cmp	r3, #3
 800a5b4:	d9de      	bls.n	800a574 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	2303      	movs	r3, #3
 800a5c8:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	68da      	ldr	r2, [r3, #12]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5d8:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	68da      	ldr	r2, [r3, #12]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5e8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 800a5ec:	bf00      	nop
 800a5ee:	3714      	adds	r7, #20
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b085      	sub	sp, #20
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800a600:	2300      	movs	r3, #0
 800a602:	60fb      	str	r3, [r7, #12]
 800a604:	e023      	b.n	800a64e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6919      	ldr	r1, [r3, #16]
 800a60a:	68fa      	ldr	r2, [r7, #12]
 800a60c:	4613      	mov	r3, r2
 800a60e:	005b      	lsls	r3, r3, #1
 800a610:	4413      	add	r3, r2
 800a612:	00db      	lsls	r3, r3, #3
 800a614:	440b      	add	r3, r1
 800a616:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	2200      	movs	r2, #0
 800a61c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	2200      	movs	r2, #0
 800a622:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	2200      	movs	r2, #0
 800a628:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	2200      	movs	r2, #0
 800a62e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	2200      	movs	r2, #0
 800a634:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	2200      	movs	r2, #0
 800a63a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800a63c:	68b9      	ldr	r1, [r7, #8]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	68fa      	ldr	r2, [r7, #12]
 800a642:	3212      	adds	r2, #18
 800a644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	3301      	adds	r3, #1
 800a64c:	60fb      	str	r3, [r7, #12]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2b03      	cmp	r3, #3
 800a652:	d9d8      	bls.n	800a606 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2200      	movs	r2, #0
 800a658:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2200      	movs	r2, #0
 800a65e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2200      	movs	r2, #0
 800a664:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2200      	movs	r2, #0
 800a66a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a67a:	461a      	mov	r2, r3
 800a67c:	2303      	movs	r3, #3
 800a67e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	691a      	ldr	r2, [r3, #16]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a68e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	691b      	ldr	r3, [r3, #16]
 800a696:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a6a2:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800a6a6:	bf00      	nop
 800a6a8:	3714      	adds	r7, #20
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr
	...

0800a6b4 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b08a      	sub	sp, #40	@ 0x28
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	60f8      	str	r0, [r7, #12]
 800a6bc:	60b9      	str	r1, [r7, #8]
 800a6be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 800a6c8:	2308      	movs	r3, #8
 800a6ca:	76fb      	strb	r3, [r7, #27]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a6cc:	4b2e      	ldr	r3, [pc, #184]	@ (800a788 <HAL_FLASH_Program+0xd4>)
 800a6ce:	7d1b      	ldrb	r3, [r3, #20]
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d101      	bne.n	800a6d8 <HAL_FLASH_Program+0x24>
 800a6d4:	2302      	movs	r3, #2
 800a6d6:	e053      	b.n	800a780 <HAL_FLASH_Program+0xcc>
 800a6d8:	4b2b      	ldr	r3, [pc, #172]	@ (800a788 <HAL_FLASH_Program+0xd4>)
 800a6da:	2201      	movs	r2, #1
 800a6dc:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a6e4:	d315      	bcc.n	800a712 <HAL_FLASH_Program+0x5e>
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 800a6ec:	d211      	bcs.n	800a712 <HAL_FLASH_Program+0x5e>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	617b      	str	r3, [r7, #20]
  {
    return HAL_ERROR;
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a6f2:	4b25      	ldr	r3, [pc, #148]	@ (800a788 <HAL_FLASH_Program+0xd4>)
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800a6f8:	6979      	ldr	r1, [r7, #20]
 800a6fa:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a6fe:	f000 f88d 	bl	800a81c <FLASH_WaitForLastOperation>
 800a702:	4603      	mov	r3, r0
 800a704:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if(status == HAL_OK)
 800a708:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d002      	beq.n	800a716 <HAL_FLASH_Program+0x62>
 800a710:	e031      	b.n	800a776 <HAL_FLASH_Program+0xc2>
    return HAL_ERROR;
 800a712:	2301      	movs	r3, #1
 800a714:	e034      	b.n	800a780 <HAL_FLASH_Program+0xcc>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800a716:	4b1d      	ldr	r3, [pc, #116]	@ (800a78c <HAL_FLASH_Program+0xd8>)
 800a718:	68db      	ldr	r3, [r3, #12]
 800a71a:	4a1c      	ldr	r2, [pc, #112]	@ (800a78c <HAL_FLASH_Program+0xd8>)
 800a71c:	f043 0302 	orr.w	r3, r3, #2
 800a720:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("isb 0xF":::"memory");
 800a722:	f3bf 8f6f 	isb	sy
}
 800a726:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a728:	f3bf 8f4f 	dsb	sy
}
 800a72c:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 800a72e:	69fb      	ldr	r3, [r7, #28]
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	6a3b      	ldr	r3, [r7, #32]
 800a734:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800a736:	6a3b      	ldr	r3, [r7, #32]
 800a738:	3304      	adds	r3, #4
 800a73a:	623b      	str	r3, [r7, #32]
        src_addr++;
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	3304      	adds	r3, #4
 800a740:	61fb      	str	r3, [r7, #28]
        row_index--;
 800a742:	7efb      	ldrb	r3, [r7, #27]
 800a744:	3b01      	subs	r3, #1
 800a746:	76fb      	strb	r3, [r7, #27]
     } while (row_index != 0U);
 800a748:	7efb      	ldrb	r3, [r7, #27]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d1ef      	bne.n	800a72e <HAL_FLASH_Program+0x7a>
  __ASM volatile ("isb 0xF":::"memory");
 800a74e:	f3bf 8f6f 	isb	sy
}
 800a752:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a754:	f3bf 8f4f 	dsb	sy
}
 800a758:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800a75a:	6979      	ldr	r1, [r7, #20]
 800a75c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a760:	f000 f85c 	bl	800a81c <FLASH_WaitForLastOperation>
 800a764:	4603      	mov	r3, r0
 800a766:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* If the program operation is completed, disable the PG */
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 800a76a:	4b08      	ldr	r3, [pc, #32]	@ (800a78c <HAL_FLASH_Program+0xd8>)
 800a76c:	68db      	ldr	r3, [r3, #12]
 800a76e:	4a07      	ldr	r2, [pc, #28]	@ (800a78c <HAL_FLASH_Program+0xd8>)
 800a770:	f023 0302 	bic.w	r3, r3, #2
 800a774:	60d3      	str	r3, [r2, #12]
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a776:	4b04      	ldr	r3, [pc, #16]	@ (800a788 <HAL_FLASH_Program+0xd4>)
 800a778:	2200      	movs	r2, #0
 800a77a:	751a      	strb	r2, [r3, #20]

  return status;
 800a77c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a780:	4618      	mov	r0, r3
 800a782:	3728      	adds	r7, #40	@ 0x28
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}
 800a788:	240010a8 	.word	0x240010a8
 800a78c:	52002000 	.word	0x52002000

0800a790 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800a790:	b480      	push	{r7}
 800a792:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800a794:	4b0c      	ldr	r3, [pc, #48]	@ (800a7c8 <HAL_FLASH_Unlock+0x38>)
 800a796:	68db      	ldr	r3, [r3, #12]
 800a798:	f003 0301 	and.w	r3, r3, #1
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d00d      	beq.n	800a7bc <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 800a7a0:	4b09      	ldr	r3, [pc, #36]	@ (800a7c8 <HAL_FLASH_Unlock+0x38>)
 800a7a2:	4a0a      	ldr	r2, [pc, #40]	@ (800a7cc <HAL_FLASH_Unlock+0x3c>)
 800a7a4:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800a7a6:	4b08      	ldr	r3, [pc, #32]	@ (800a7c8 <HAL_FLASH_Unlock+0x38>)
 800a7a8:	4a09      	ldr	r2, [pc, #36]	@ (800a7d0 <HAL_FLASH_Unlock+0x40>)
 800a7aa:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800a7ac:	4b06      	ldr	r3, [pc, #24]	@ (800a7c8 <HAL_FLASH_Unlock+0x38>)
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	f003 0301 	and.w	r3, r3, #1
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d001      	beq.n	800a7bc <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	e000      	b.n	800a7be <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800a7bc:	2300      	movs	r3, #0
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr
 800a7c8:	52002000 	.word	0x52002000
 800a7cc:	45670123 	.word	0x45670123
 800a7d0:	cdef89ab 	.word	0xcdef89ab

0800a7d4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 800a7d8:	4b09      	ldr	r3, [pc, #36]	@ (800a800 <HAL_FLASH_Lock+0x2c>)
 800a7da:	68db      	ldr	r3, [r3, #12]
 800a7dc:	4a08      	ldr	r2, [pc, #32]	@ (800a800 <HAL_FLASH_Lock+0x2c>)
 800a7de:	f043 0301 	orr.w	r3, r3, #1
 800a7e2:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 800a7e4:	4b06      	ldr	r3, [pc, #24]	@ (800a800 <HAL_FLASH_Lock+0x2c>)
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	f003 0301 	and.w	r3, r3, #1
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d101      	bne.n	800a7f4 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	e000      	b.n	800a7f6 <HAL_FLASH_Lock+0x22>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr
 800a800:	52002000 	.word	0x52002000

0800a804 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_DBECC_BANK2: Double Detection ECC on Bank 2
  *            @arg HAL_FLASH_ERROR_CRCRD_BANK2: CRC Read Error on Bank 2
*/

uint32_t HAL_FLASH_GetError(void)
{
 800a804:	b480      	push	{r7}
 800a806:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800a808:	4b03      	ldr	r3, [pc, #12]	@ (800a818 <HAL_FLASH_GetError+0x14>)
 800a80a:	699b      	ldr	r3, [r3, #24]
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	46bd      	mov	sp, r7
 800a810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a814:	4770      	bx	lr
 800a816:	bf00      	nop
 800a818:	240010a8 	.word	0x240010a8

0800a81c <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b086      	sub	sp, #24
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800a826:	2304      	movs	r3, #4
 800a828:	613b      	str	r3, [r7, #16]
  uint32_t errorflag = 0;
 800a82a:	2300      	movs	r3, #0
 800a82c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a82e:	f7fa f89d 	bl	800496c <HAL_GetTick>
 800a832:	60f8      	str	r0, [r7, #12]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800a834:	e010      	b.n	800a858 <FLASH_WaitForLastOperation+0x3c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a83c:	d00c      	beq.n	800a858 <FLASH_WaitForLastOperation+0x3c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a83e:	f7fa f895 	bl	800496c <HAL_GetTick>
 800a842:	4602      	mov	r2, r0
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	1ad3      	subs	r3, r2, r3
 800a848:	687a      	ldr	r2, [r7, #4]
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d302      	bcc.n	800a854 <FLASH_WaitForLastOperation+0x38>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d101      	bne.n	800a858 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800a854:	2303      	movs	r3, #3
 800a856:	e02d      	b.n	800a8b4 <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800a858:	4b18      	ldr	r3, [pc, #96]	@ (800a8bc <FLASH_WaitForLastOperation+0xa0>)
 800a85a:	691a      	ldr	r2, [r3, #16]
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	4013      	ands	r3, r2
 800a860:	693a      	ldr	r2, [r7, #16]
 800a862:	429a      	cmp	r2, r3
 800a864:	d0e7      	beq.n	800a836 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d104      	bne.n	800a876 <FLASH_WaitForLastOperation+0x5a>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800a86c:	4b13      	ldr	r3, [pc, #76]	@ (800a8bc <FLASH_WaitForLastOperation+0xa0>)
 800a86e:	691a      	ldr	r2, [r3, #16]
 800a870:	4b13      	ldr	r3, [pc, #76]	@ (800a8c0 <FLASH_WaitForLastOperation+0xa4>)
 800a872:	4013      	ands	r3, r2
 800a874:	617b      	str	r3, [r7, #20]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d00a      	beq.n	800a896 <FLASH_WaitForLastOperation+0x7a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800a880:	4b10      	ldr	r3, [pc, #64]	@ (800a8c4 <FLASH_WaitForLastOperation+0xa8>)
 800a882:	699a      	ldr	r2, [r3, #24]
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	4313      	orrs	r3, r2
 800a888:	4a0e      	ldr	r2, [pc, #56]	@ (800a8c4 <FLASH_WaitForLastOperation+0xa8>)
 800a88a:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800a88c:	4a0b      	ldr	r2, [pc, #44]	@ (800a8bc <FLASH_WaitForLastOperation+0xa0>)
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
 800a892:	2301      	movs	r3, #1
 800a894:	e00e      	b.n	800a8b4 <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	2b01      	cmp	r3, #1
 800a89a:	d10a      	bne.n	800a8b2 <FLASH_WaitForLastOperation+0x96>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800a89c:	4b07      	ldr	r3, [pc, #28]	@ (800a8bc <FLASH_WaitForLastOperation+0xa0>)
 800a89e:	691b      	ldr	r3, [r3, #16]
 800a8a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a8a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8a8:	d103      	bne.n	800a8b2 <FLASH_WaitForLastOperation+0x96>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800a8aa:	4b04      	ldr	r3, [pc, #16]	@ (800a8bc <FLASH_WaitForLastOperation+0xa0>)
 800a8ac:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800a8b0:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800a8b2:	2300      	movs	r3, #0
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3718      	adds	r7, #24
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	52002000 	.word	0x52002000
 800a8c0:	17ee0000 	.word	0x17ee0000
 800a8c4:	240010a8 	.word	0x240010a8

0800a8c8 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b084      	sub	sp, #16
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a8d6:	4b3f      	ldr	r3, [pc, #252]	@ (800a9d4 <HAL_FLASHEx_Erase+0x10c>)
 800a8d8:	7d1b      	ldrb	r3, [r3, #20]
 800a8da:	2b01      	cmp	r3, #1
 800a8dc:	d101      	bne.n	800a8e2 <HAL_FLASHEx_Erase+0x1a>
 800a8de:	2302      	movs	r3, #2
 800a8e0:	e074      	b.n	800a9cc <HAL_FLASHEx_Erase+0x104>
 800a8e2:	4b3c      	ldr	r3, [pc, #240]	@ (800a9d4 <HAL_FLASHEx_Erase+0x10c>)
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a8e8:	4b3a      	ldr	r3, [pc, #232]	@ (800a9d4 <HAL_FLASHEx_Erase+0x10c>)
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	685b      	ldr	r3, [r3, #4]
 800a8f2:	f003 0301 	and.w	r3, r3, #1
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d009      	beq.n	800a90e <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800a8fa:	2101      	movs	r1, #1
 800a8fc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a900:	f7ff ff8c 	bl	800a81c <FLASH_WaitForLastOperation>
 800a904:	4603      	mov	r3, r0
 800a906:	2b00      	cmp	r3, #0
 800a908:	d001      	beq.n	800a90e <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800a90a:	2301      	movs	r3, #1
 800a90c:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800a90e:	7bfb      	ldrb	r3, [r7, #15]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d157      	bne.n	800a9c4 <HAL_FLASHEx_Erase+0xfc>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d11e      	bne.n	800a95a <HAL_FLASHEx_Erase+0x92>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	691a      	ldr	r2, [r3, #16]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	4619      	mov	r1, r3
 800a926:	4610      	mov	r0, r2
 800a928:	f000 f85a 	bl	800a9e0 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	685b      	ldr	r3, [r3, #4]
 800a930:	f003 0301 	and.w	r3, r3, #1
 800a934:	2b00      	cmp	r3, #0
 800a936:	d045      	beq.n	800a9c4 <HAL_FLASHEx_Erase+0xfc>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800a938:	2101      	movs	r1, #1
 800a93a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a93e:	f7ff ff6d 	bl	800a81c <FLASH_WaitForLastOperation>
 800a942:	4603      	mov	r3, r0
 800a944:	2b00      	cmp	r3, #0
 800a946:	d001      	beq.n	800a94c <HAL_FLASHEx_Erase+0x84>
        {
          status = HAL_ERROR;
 800a948:	2301      	movs	r3, #1
 800a94a:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800a94c:	4b22      	ldr	r3, [pc, #136]	@ (800a9d8 <HAL_FLASHEx_Erase+0x110>)
 800a94e:	68db      	ldr	r3, [r3, #12]
 800a950:	4a21      	ldr	r2, [pc, #132]	@ (800a9d8 <HAL_FLASHEx_Erase+0x110>)
 800a952:	f023 0308 	bic.w	r3, r3, #8
 800a956:	60d3      	str	r3, [r2, #12]
 800a958:	e034      	b.n	800a9c4 <HAL_FLASHEx_Erase+0xfc>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a960:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	689b      	ldr	r3, [r3, #8]
 800a966:	60bb      	str	r3, [r7, #8]
 800a968:	e024      	b.n	800a9b4 <HAL_FLASHEx_Erase+0xec>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6859      	ldr	r1, [r3, #4]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	691b      	ldr	r3, [r3, #16]
 800a972:	461a      	mov	r2, r3
 800a974:	68b8      	ldr	r0, [r7, #8]
 800a976:	f000 f857 	bl	800aa28 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	f003 0301 	and.w	r3, r3, #1
 800a982:	2b00      	cmp	r3, #0
 800a984:	d00c      	beq.n	800a9a0 <HAL_FLASHEx_Erase+0xd8>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800a986:	2101      	movs	r1, #1
 800a988:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a98c:	f7ff ff46 	bl	800a81c <FLASH_WaitForLastOperation>
 800a990:	4603      	mov	r3, r0
 800a992:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800a994:	4b10      	ldr	r3, [pc, #64]	@ (800a9d8 <HAL_FLASHEx_Erase+0x110>)
 800a996:	68da      	ldr	r2, [r3, #12]
 800a998:	490f      	ldr	r1, [pc, #60]	@ (800a9d8 <HAL_FLASHEx_Erase+0x110>)
 800a99a:	4b10      	ldr	r3, [pc, #64]	@ (800a9dc <HAL_FLASHEx_Erase+0x114>)
 800a99c:	4013      	ands	r3, r2
 800a99e:	60cb      	str	r3, [r1, #12]
          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800a9a0:	7bfb      	ldrb	r3, [r7, #15]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d003      	beq.n	800a9ae <HAL_FLASHEx_Erase+0xe6>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	68ba      	ldr	r2, [r7, #8]
 800a9aa:	601a      	str	r2, [r3, #0]
          break;
 800a9ac:	e00a      	b.n	800a9c4 <HAL_FLASHEx_Erase+0xfc>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	60bb      	str	r3, [r7, #8]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	68da      	ldr	r2, [r3, #12]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	4413      	add	r3, r2
 800a9be:	68ba      	ldr	r2, [r7, #8]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d3d2      	bcc.n	800a96a <HAL_FLASHEx_Erase+0xa2>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a9c4:	4b03      	ldr	r3, [pc, #12]	@ (800a9d4 <HAL_FLASHEx_Erase+0x10c>)
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	751a      	strb	r2, [r3, #20]

  return status;
 800a9ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3710      	adds	r7, #16
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}
 800a9d4:	240010a8 	.word	0x240010a8
 800a9d8:	52002000 	.word	0x52002000
 800a9dc:	fffff8fb 	.word	0xfffff8fb

0800a9e0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]
  }
  else
#endif /* DUAL_BANK */
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	f003 0301 	and.w	r3, r3, #1
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d011      	beq.n	800aa18 <FLASH_MassErase+0x38>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank1 */
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800a9f4:	4b0b      	ldr	r3, [pc, #44]	@ (800aa24 <FLASH_MassErase+0x44>)
 800a9f6:	68db      	ldr	r3, [r3, #12]
 800a9f8:	4a0a      	ldr	r2, [pc, #40]	@ (800aa24 <FLASH_MassErase+0x44>)
 800a9fa:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800a9fe:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800aa00:	4b08      	ldr	r3, [pc, #32]	@ (800aa24 <FLASH_MassErase+0x44>)
 800aa02:	68da      	ldr	r2, [r3, #12]
 800aa04:	4907      	ldr	r1, [pc, #28]	@ (800aa24 <FLASH_MassErase+0x44>)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	60cb      	str	r3, [r1, #12]
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800aa0c:	4b05      	ldr	r3, [pc, #20]	@ (800aa24 <FLASH_MassErase+0x44>)
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	4a04      	ldr	r2, [pc, #16]	@ (800aa24 <FLASH_MassErase+0x44>)
 800aa12:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 800aa16:	60d3      	str	r3, [r2, #12]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800aa18:	bf00      	nop
 800aa1a:	370c      	adds	r7, #12
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr
 800aa24:	52002000 	.word	0x52002000

0800aa28 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b085      	sub	sp, #20
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	f003 0301 	and.w	r3, r3, #1
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d010      	beq.n	800aa60 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800aa3e:	4b0b      	ldr	r3, [pc, #44]	@ (800aa6c <FLASH_Erase_Sector+0x44>)
 800aa40:	68db      	ldr	r3, [r3, #12]
 800aa42:	4a0a      	ldr	r2, [pc, #40]	@ (800aa6c <FLASH_Erase_Sector+0x44>)
 800aa44:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 800aa48:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800aa4a:	4b08      	ldr	r3, [pc, #32]	@ (800aa6c <FLASH_Erase_Sector+0x44>)
 800aa4c:	68da      	ldr	r2, [r3, #12]
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	0219      	lsls	r1, r3, #8
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	430b      	orrs	r3, r1
 800aa56:	4313      	orrs	r3, r2
 800aa58:	4a04      	ldr	r2, [pc, #16]	@ (800aa6c <FLASH_Erase_Sector+0x44>)
 800aa5a:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 800aa5e:	60d3      	str	r3, [r2, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800aa60:	bf00      	nop
 800aa62:	3714      	adds	r7, #20
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr
 800aa6c:	52002000 	.word	0x52002000

0800aa70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b089      	sub	sp, #36	@ 0x24
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800aa7e:	4b86      	ldr	r3, [pc, #536]	@ (800ac98 <HAL_GPIO_Init+0x228>)
 800aa80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800aa82:	e18c      	b.n	800ad9e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	681a      	ldr	r2, [r3, #0]
 800aa88:	2101      	movs	r1, #1
 800aa8a:	69fb      	ldr	r3, [r7, #28]
 800aa8c:	fa01 f303 	lsl.w	r3, r1, r3
 800aa90:	4013      	ands	r3, r2
 800aa92:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	f000 817e 	beq.w	800ad98 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	f003 0303 	and.w	r3, r3, #3
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d005      	beq.n	800aab4 <HAL_GPIO_Init+0x44>
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	f003 0303 	and.w	r3, r3, #3
 800aab0:	2b02      	cmp	r3, #2
 800aab2:	d130      	bne.n	800ab16 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	689b      	ldr	r3, [r3, #8]
 800aab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800aaba:	69fb      	ldr	r3, [r7, #28]
 800aabc:	005b      	lsls	r3, r3, #1
 800aabe:	2203      	movs	r2, #3
 800aac0:	fa02 f303 	lsl.w	r3, r2, r3
 800aac4:	43db      	mvns	r3, r3
 800aac6:	69ba      	ldr	r2, [r7, #24]
 800aac8:	4013      	ands	r3, r2
 800aaca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	68da      	ldr	r2, [r3, #12]
 800aad0:	69fb      	ldr	r3, [r7, #28]
 800aad2:	005b      	lsls	r3, r3, #1
 800aad4:	fa02 f303 	lsl.w	r3, r2, r3
 800aad8:	69ba      	ldr	r2, [r7, #24]
 800aada:	4313      	orrs	r3, r2
 800aadc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	69ba      	ldr	r2, [r7, #24]
 800aae2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800aaea:	2201      	movs	r2, #1
 800aaec:	69fb      	ldr	r3, [r7, #28]
 800aaee:	fa02 f303 	lsl.w	r3, r2, r3
 800aaf2:	43db      	mvns	r3, r3
 800aaf4:	69ba      	ldr	r2, [r7, #24]
 800aaf6:	4013      	ands	r3, r2
 800aaf8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	091b      	lsrs	r3, r3, #4
 800ab00:	f003 0201 	and.w	r2, r3, #1
 800ab04:	69fb      	ldr	r3, [r7, #28]
 800ab06:	fa02 f303 	lsl.w	r3, r2, r3
 800ab0a:	69ba      	ldr	r2, [r7, #24]
 800ab0c:	4313      	orrs	r3, r2
 800ab0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	69ba      	ldr	r2, [r7, #24]
 800ab14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	685b      	ldr	r3, [r3, #4]
 800ab1a:	f003 0303 	and.w	r3, r3, #3
 800ab1e:	2b03      	cmp	r3, #3
 800ab20:	d017      	beq.n	800ab52 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	68db      	ldr	r3, [r3, #12]
 800ab26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ab28:	69fb      	ldr	r3, [r7, #28]
 800ab2a:	005b      	lsls	r3, r3, #1
 800ab2c:	2203      	movs	r2, #3
 800ab2e:	fa02 f303 	lsl.w	r3, r2, r3
 800ab32:	43db      	mvns	r3, r3
 800ab34:	69ba      	ldr	r2, [r7, #24]
 800ab36:	4013      	ands	r3, r2
 800ab38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	689a      	ldr	r2, [r3, #8]
 800ab3e:	69fb      	ldr	r3, [r7, #28]
 800ab40:	005b      	lsls	r3, r3, #1
 800ab42:	fa02 f303 	lsl.w	r3, r2, r3
 800ab46:	69ba      	ldr	r2, [r7, #24]
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	69ba      	ldr	r2, [r7, #24]
 800ab50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	685b      	ldr	r3, [r3, #4]
 800ab56:	f003 0303 	and.w	r3, r3, #3
 800ab5a:	2b02      	cmp	r3, #2
 800ab5c:	d123      	bne.n	800aba6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ab5e:	69fb      	ldr	r3, [r7, #28]
 800ab60:	08da      	lsrs	r2, r3, #3
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	3208      	adds	r2, #8
 800ab66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800ab6c:	69fb      	ldr	r3, [r7, #28]
 800ab6e:	f003 0307 	and.w	r3, r3, #7
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	220f      	movs	r2, #15
 800ab76:	fa02 f303 	lsl.w	r3, r2, r3
 800ab7a:	43db      	mvns	r3, r3
 800ab7c:	69ba      	ldr	r2, [r7, #24]
 800ab7e:	4013      	ands	r3, r2
 800ab80:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	691a      	ldr	r2, [r3, #16]
 800ab86:	69fb      	ldr	r3, [r7, #28]
 800ab88:	f003 0307 	and.w	r3, r3, #7
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	fa02 f303 	lsl.w	r3, r2, r3
 800ab92:	69ba      	ldr	r2, [r7, #24]
 800ab94:	4313      	orrs	r3, r2
 800ab96:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ab98:	69fb      	ldr	r3, [r7, #28]
 800ab9a:	08da      	lsrs	r2, r3, #3
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	3208      	adds	r2, #8
 800aba0:	69b9      	ldr	r1, [r7, #24]
 800aba2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800abac:	69fb      	ldr	r3, [r7, #28]
 800abae:	005b      	lsls	r3, r3, #1
 800abb0:	2203      	movs	r2, #3
 800abb2:	fa02 f303 	lsl.w	r3, r2, r3
 800abb6:	43db      	mvns	r3, r3
 800abb8:	69ba      	ldr	r2, [r7, #24]
 800abba:	4013      	ands	r3, r2
 800abbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	f003 0203 	and.w	r2, r3, #3
 800abc6:	69fb      	ldr	r3, [r7, #28]
 800abc8:	005b      	lsls	r3, r3, #1
 800abca:	fa02 f303 	lsl.w	r3, r2, r3
 800abce:	69ba      	ldr	r2, [r7, #24]
 800abd0:	4313      	orrs	r3, r2
 800abd2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	69ba      	ldr	r2, [r7, #24]
 800abd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	f000 80d8 	beq.w	800ad98 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800abe8:	4b2c      	ldr	r3, [pc, #176]	@ (800ac9c <HAL_GPIO_Init+0x22c>)
 800abea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800abee:	4a2b      	ldr	r2, [pc, #172]	@ (800ac9c <HAL_GPIO_Init+0x22c>)
 800abf0:	f043 0302 	orr.w	r3, r3, #2
 800abf4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800abf8:	4b28      	ldr	r3, [pc, #160]	@ (800ac9c <HAL_GPIO_Init+0x22c>)
 800abfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800abfe:	f003 0302 	and.w	r3, r3, #2
 800ac02:	60fb      	str	r3, [r7, #12]
 800ac04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ac06:	4a26      	ldr	r2, [pc, #152]	@ (800aca0 <HAL_GPIO_Init+0x230>)
 800ac08:	69fb      	ldr	r3, [r7, #28]
 800ac0a:	089b      	lsrs	r3, r3, #2
 800ac0c:	3302      	adds	r3, #2
 800ac0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800ac14:	69fb      	ldr	r3, [r7, #28]
 800ac16:	f003 0303 	and.w	r3, r3, #3
 800ac1a:	009b      	lsls	r3, r3, #2
 800ac1c:	220f      	movs	r2, #15
 800ac1e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac22:	43db      	mvns	r3, r3
 800ac24:	69ba      	ldr	r2, [r7, #24]
 800ac26:	4013      	ands	r3, r2
 800ac28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	4a1d      	ldr	r2, [pc, #116]	@ (800aca4 <HAL_GPIO_Init+0x234>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d04a      	beq.n	800acc8 <HAL_GPIO_Init+0x258>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	4a1c      	ldr	r2, [pc, #112]	@ (800aca8 <HAL_GPIO_Init+0x238>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d02b      	beq.n	800ac92 <HAL_GPIO_Init+0x222>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	4a1b      	ldr	r2, [pc, #108]	@ (800acac <HAL_GPIO_Init+0x23c>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d025      	beq.n	800ac8e <HAL_GPIO_Init+0x21e>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	4a1a      	ldr	r2, [pc, #104]	@ (800acb0 <HAL_GPIO_Init+0x240>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d01f      	beq.n	800ac8a <HAL_GPIO_Init+0x21a>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	4a19      	ldr	r2, [pc, #100]	@ (800acb4 <HAL_GPIO_Init+0x244>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d019      	beq.n	800ac86 <HAL_GPIO_Init+0x216>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	4a18      	ldr	r2, [pc, #96]	@ (800acb8 <HAL_GPIO_Init+0x248>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d013      	beq.n	800ac82 <HAL_GPIO_Init+0x212>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	4a17      	ldr	r2, [pc, #92]	@ (800acbc <HAL_GPIO_Init+0x24c>)
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d00d      	beq.n	800ac7e <HAL_GPIO_Init+0x20e>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	4a16      	ldr	r2, [pc, #88]	@ (800acc0 <HAL_GPIO_Init+0x250>)
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d007      	beq.n	800ac7a <HAL_GPIO_Init+0x20a>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	4a15      	ldr	r2, [pc, #84]	@ (800acc4 <HAL_GPIO_Init+0x254>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d101      	bne.n	800ac76 <HAL_GPIO_Init+0x206>
 800ac72:	2309      	movs	r3, #9
 800ac74:	e029      	b.n	800acca <HAL_GPIO_Init+0x25a>
 800ac76:	230a      	movs	r3, #10
 800ac78:	e027      	b.n	800acca <HAL_GPIO_Init+0x25a>
 800ac7a:	2307      	movs	r3, #7
 800ac7c:	e025      	b.n	800acca <HAL_GPIO_Init+0x25a>
 800ac7e:	2306      	movs	r3, #6
 800ac80:	e023      	b.n	800acca <HAL_GPIO_Init+0x25a>
 800ac82:	2305      	movs	r3, #5
 800ac84:	e021      	b.n	800acca <HAL_GPIO_Init+0x25a>
 800ac86:	2304      	movs	r3, #4
 800ac88:	e01f      	b.n	800acca <HAL_GPIO_Init+0x25a>
 800ac8a:	2303      	movs	r3, #3
 800ac8c:	e01d      	b.n	800acca <HAL_GPIO_Init+0x25a>
 800ac8e:	2302      	movs	r3, #2
 800ac90:	e01b      	b.n	800acca <HAL_GPIO_Init+0x25a>
 800ac92:	2301      	movs	r3, #1
 800ac94:	e019      	b.n	800acca <HAL_GPIO_Init+0x25a>
 800ac96:	bf00      	nop
 800ac98:	58000080 	.word	0x58000080
 800ac9c:	58024400 	.word	0x58024400
 800aca0:	58000400 	.word	0x58000400
 800aca4:	58020000 	.word	0x58020000
 800aca8:	58020400 	.word	0x58020400
 800acac:	58020800 	.word	0x58020800
 800acb0:	58020c00 	.word	0x58020c00
 800acb4:	58021000 	.word	0x58021000
 800acb8:	58021400 	.word	0x58021400
 800acbc:	58021800 	.word	0x58021800
 800acc0:	58021c00 	.word	0x58021c00
 800acc4:	58022400 	.word	0x58022400
 800acc8:	2300      	movs	r3, #0
 800acca:	69fa      	ldr	r2, [r7, #28]
 800accc:	f002 0203 	and.w	r2, r2, #3
 800acd0:	0092      	lsls	r2, r2, #2
 800acd2:	4093      	lsls	r3, r2
 800acd4:	69ba      	ldr	r2, [r7, #24]
 800acd6:	4313      	orrs	r3, r2
 800acd8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800acda:	4938      	ldr	r1, [pc, #224]	@ (800adbc <HAL_GPIO_Init+0x34c>)
 800acdc:	69fb      	ldr	r3, [r7, #28]
 800acde:	089b      	lsrs	r3, r3, #2
 800ace0:	3302      	adds	r3, #2
 800ace2:	69ba      	ldr	r2, [r7, #24]
 800ace4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ace8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	43db      	mvns	r3, r3
 800acf4:	69ba      	ldr	r2, [r7, #24]
 800acf6:	4013      	ands	r3, r2
 800acf8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d003      	beq.n	800ad0e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800ad06:	69ba      	ldr	r2, [r7, #24]
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800ad0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ad12:	69bb      	ldr	r3, [r7, #24]
 800ad14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800ad16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	43db      	mvns	r3, r3
 800ad22:	69ba      	ldr	r2, [r7, #24]
 800ad24:	4013      	ands	r3, r2
 800ad26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d003      	beq.n	800ad3c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800ad34:	69ba      	ldr	r2, [r7, #24]
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800ad3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ad40:	69bb      	ldr	r3, [r7, #24]
 800ad42:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	685b      	ldr	r3, [r3, #4]
 800ad48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	43db      	mvns	r3, r3
 800ad4e:	69ba      	ldr	r2, [r7, #24]
 800ad50:	4013      	ands	r3, r2
 800ad52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d003      	beq.n	800ad68 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800ad60:	69ba      	ldr	r2, [r7, #24]
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	4313      	orrs	r3, r2
 800ad66:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	69ba      	ldr	r2, [r7, #24]
 800ad6c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	43db      	mvns	r3, r3
 800ad78:	69ba      	ldr	r2, [r7, #24]
 800ad7a:	4013      	ands	r3, r2
 800ad7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	685b      	ldr	r3, [r3, #4]
 800ad82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d003      	beq.n	800ad92 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800ad8a:	69ba      	ldr	r2, [r7, #24]
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	69ba      	ldr	r2, [r7, #24]
 800ad96:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800ad98:	69fb      	ldr	r3, [r7, #28]
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	681a      	ldr	r2, [r3, #0]
 800ada2:	69fb      	ldr	r3, [r7, #28]
 800ada4:	fa22 f303 	lsr.w	r3, r2, r3
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	f47f ae6b 	bne.w	800aa84 <HAL_GPIO_Init+0x14>
  }
}
 800adae:	bf00      	nop
 800adb0:	bf00      	nop
 800adb2:	3724      	adds	r7, #36	@ 0x24
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr
 800adbc:	58000400 	.word	0x58000400

0800adc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b085      	sub	sp, #20
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	460b      	mov	r3, r1
 800adca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	691a      	ldr	r2, [r3, #16]
 800add0:	887b      	ldrh	r3, [r7, #2]
 800add2:	4013      	ands	r3, r2
 800add4:	2b00      	cmp	r3, #0
 800add6:	d002      	beq.n	800adde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800add8:	2301      	movs	r3, #1
 800adda:	73fb      	strb	r3, [r7, #15]
 800addc:	e001      	b.n	800ade2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800adde:	2300      	movs	r3, #0
 800ade0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ade2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3714      	adds	r7, #20
 800ade8:	46bd      	mov	sp, r7
 800adea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adee:	4770      	bx	lr

0800adf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b083      	sub	sp, #12
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	460b      	mov	r3, r1
 800adfa:	807b      	strh	r3, [r7, #2]
 800adfc:	4613      	mov	r3, r2
 800adfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ae00:	787b      	ldrb	r3, [r7, #1]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d003      	beq.n	800ae0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ae06:	887a      	ldrh	r2, [r7, #2]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800ae0c:	e003      	b.n	800ae16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800ae0e:	887b      	ldrh	r3, [r7, #2]
 800ae10:	041a      	lsls	r2, r3, #16
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	619a      	str	r2, [r3, #24]
}
 800ae16:	bf00      	nop
 800ae18:	370c      	adds	r7, #12
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae20:	4770      	bx	lr

0800ae22 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800ae22:	b580      	push	{r7, lr}
 800ae24:	b082      	sub	sp, #8
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	4603      	mov	r3, r0
 800ae2a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800ae2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae30:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800ae34:	88fb      	ldrh	r3, [r7, #6]
 800ae36:	4013      	ands	r3, r2
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d008      	beq.n	800ae4e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ae3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ae40:	88fb      	ldrh	r3, [r7, #6]
 800ae42:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ae46:	88fb      	ldrh	r3, [r7, #6]
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f7f7 f9a5 	bl	8002198 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800ae4e:	bf00      	nop
 800ae50:	3708      	adds	r7, #8
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
	...

0800ae58 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b084      	sub	sp, #16
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800ae60:	4b19      	ldr	r3, [pc, #100]	@ (800aec8 <HAL_PWREx_ConfigSupply+0x70>)
 800ae62:	68db      	ldr	r3, [r3, #12]
 800ae64:	f003 0304 	and.w	r3, r3, #4
 800ae68:	2b04      	cmp	r3, #4
 800ae6a:	d00a      	beq.n	800ae82 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800ae6c:	4b16      	ldr	r3, [pc, #88]	@ (800aec8 <HAL_PWREx_ConfigSupply+0x70>)
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	f003 0307 	and.w	r3, r3, #7
 800ae74:	687a      	ldr	r2, [r7, #4]
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d001      	beq.n	800ae7e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	e01f      	b.n	800aebe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	e01d      	b.n	800aebe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800ae82:	4b11      	ldr	r3, [pc, #68]	@ (800aec8 <HAL_PWREx_ConfigSupply+0x70>)
 800ae84:	68db      	ldr	r3, [r3, #12]
 800ae86:	f023 0207 	bic.w	r2, r3, #7
 800ae8a:	490f      	ldr	r1, [pc, #60]	@ (800aec8 <HAL_PWREx_ConfigSupply+0x70>)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800ae92:	f7f9 fd6b 	bl	800496c <HAL_GetTick>
 800ae96:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ae98:	e009      	b.n	800aeae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ae9a:	f7f9 fd67 	bl	800496c <HAL_GetTick>
 800ae9e:	4602      	mov	r2, r0
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	1ad3      	subs	r3, r2, r3
 800aea4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aea8:	d901      	bls.n	800aeae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800aeaa:	2301      	movs	r3, #1
 800aeac:	e007      	b.n	800aebe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800aeae:	4b06      	ldr	r3, [pc, #24]	@ (800aec8 <HAL_PWREx_ConfigSupply+0x70>)
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aeb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aeba:	d1ee      	bne.n	800ae9a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800aebc:	2300      	movs	r3, #0
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3710      	adds	r7, #16
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	bf00      	nop
 800aec8:	58024800 	.word	0x58024800

0800aecc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b08c      	sub	sp, #48	@ 0x30
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d101      	bne.n	800aede <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aeda:	2301      	movs	r3, #1
 800aedc:	e3c8      	b.n	800b670 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f003 0301 	and.w	r3, r3, #1
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	f000 8087 	beq.w	800affa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aeec:	4b88      	ldr	r3, [pc, #544]	@ (800b110 <HAL_RCC_OscConfig+0x244>)
 800aeee:	691b      	ldr	r3, [r3, #16]
 800aef0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aef6:	4b86      	ldr	r3, [pc, #536]	@ (800b110 <HAL_RCC_OscConfig+0x244>)
 800aef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aefa:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800aefc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aefe:	2b10      	cmp	r3, #16
 800af00:	d007      	beq.n	800af12 <HAL_RCC_OscConfig+0x46>
 800af02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af04:	2b18      	cmp	r3, #24
 800af06:	d110      	bne.n	800af2a <HAL_RCC_OscConfig+0x5e>
 800af08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af0a:	f003 0303 	and.w	r3, r3, #3
 800af0e:	2b02      	cmp	r3, #2
 800af10:	d10b      	bne.n	800af2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af12:	4b7f      	ldr	r3, [pc, #508]	@ (800b110 <HAL_RCC_OscConfig+0x244>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d06c      	beq.n	800aff8 <HAL_RCC_OscConfig+0x12c>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d168      	bne.n	800aff8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800af26:	2301      	movs	r3, #1
 800af28:	e3a2      	b.n	800b670 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af32:	d106      	bne.n	800af42 <HAL_RCC_OscConfig+0x76>
 800af34:	4b76      	ldr	r3, [pc, #472]	@ (800b110 <HAL_RCC_OscConfig+0x244>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4a75      	ldr	r2, [pc, #468]	@ (800b110 <HAL_RCC_OscConfig+0x244>)
 800af3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800af3e:	6013      	str	r3, [r2, #0]
 800af40:	e02e      	b.n	800afa0 <HAL_RCC_OscConfig+0xd4>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d10c      	bne.n	800af64 <HAL_RCC_OscConfig+0x98>
 800af4a:	4b71      	ldr	r3, [pc, #452]	@ (800b110 <HAL_RCC_OscConfig+0x244>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	4a70      	ldr	r2, [pc, #448]	@ (800b110 <HAL_RCC_OscConfig+0x244>)
 800af50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800af54:	6013      	str	r3, [r2, #0]
 800af56:	4b6e      	ldr	r3, [pc, #440]	@ (800b110 <HAL_RCC_OscConfig+0x244>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4a6d      	ldr	r2, [pc, #436]	@ (800b110 <HAL_RCC_OscConfig+0x244>)
 800af5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800af60:	6013      	str	r3, [r2, #0]
 800af62:	e01d      	b.n	800afa0 <HAL_RCC_OscConfig+0xd4>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	685b      	ldr	r3, [r3, #4]
 800af68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800af6c:	d10c      	bne.n	800af88 <HAL_RCC_OscConfig+0xbc>
 800af6e:	4b68      	ldr	r3, [pc, #416]	@ (800b110 <HAL_RCC_OscConfig+0x244>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4a67      	ldr	r2, [pc, #412]	@ (800b110 <HAL_RCC_OscConfig+0x244>)
 800af74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800af78:	6013      	str	r3, [r2, #0]
 800af7a:	4b65      	ldr	r3, [pc, #404]	@ (800b110 <HAL_RCC_OscConfig+0x244>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	4a64      	ldr	r2, [pc, #400]	@ (800b110 <HAL_RCC_OscConfig+0x244>)
 800af80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800af84:	6013      	str	r3, [r2, #0]
 800af86:	e00b      	b.n	800afa0 <HAL_RCC_OscConfig+0xd4>
 800af88:	4b61      	ldr	r3, [pc, #388]	@ (800b110 <HAL_RCC_OscConfig+0x244>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4a60      	ldr	r2, [pc, #384]	@ (800b110 <HAL_RCC_OscConfig+0x244>)
 800af8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800af92:	6013      	str	r3, [r2, #0]
 800af94:	4b5e      	ldr	r3, [pc, #376]	@ (800b110 <HAL_RCC_OscConfig+0x244>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4a5d      	ldr	r2, [pc, #372]	@ (800b110 <HAL_RCC_OscConfig+0x244>)
 800af9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800af9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d013      	beq.n	800afd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afa8:	f7f9 fce0 	bl	800496c <HAL_GetTick>
 800afac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800afae:	e008      	b.n	800afc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800afb0:	f7f9 fcdc 	bl	800496c <HAL_GetTick>
 800afb4:	4602      	mov	r2, r0
 800afb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afb8:	1ad3      	subs	r3, r2, r3
 800afba:	2b64      	cmp	r3, #100	@ 0x64
 800afbc:	d901      	bls.n	800afc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800afbe:	2303      	movs	r3, #3
 800afc0:	e356      	b.n	800b670 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800afc2:	4b53      	ldr	r3, [pc, #332]	@ (800b110 <HAL_RCC_OscConfig+0x244>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d0f0      	beq.n	800afb0 <HAL_RCC_OscConfig+0xe4>
 800afce:	e014      	b.n	800affa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afd0:	f7f9 fccc 	bl	800496c <HAL_GetTick>
 800afd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800afd6:	e008      	b.n	800afea <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800afd8:	f7f9 fcc8 	bl	800496c <HAL_GetTick>
 800afdc:	4602      	mov	r2, r0
 800afde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afe0:	1ad3      	subs	r3, r2, r3
 800afe2:	2b64      	cmp	r3, #100	@ 0x64
 800afe4:	d901      	bls.n	800afea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800afe6:	2303      	movs	r3, #3
 800afe8:	e342      	b.n	800b670 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800afea:	4b49      	ldr	r3, [pc, #292]	@ (800b110 <HAL_RCC_OscConfig+0x244>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d1f0      	bne.n	800afd8 <HAL_RCC_OscConfig+0x10c>
 800aff6:	e000      	b.n	800affa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f003 0302 	and.w	r3, r3, #2
 800b002:	2b00      	cmp	r3, #0
 800b004:	f000 808c 	beq.w	800b120 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b008:	4b41      	ldr	r3, [pc, #260]	@ (800b110 <HAL_RCC_OscConfig+0x244>)
 800b00a:	691b      	ldr	r3, [r3, #16]
 800b00c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b010:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b012:	4b3f      	ldr	r3, [pc, #252]	@ (800b110 <HAL_RCC_OscConfig+0x244>)
 800b014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b016:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b018:	6a3b      	ldr	r3, [r7, #32]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d007      	beq.n	800b02e <HAL_RCC_OscConfig+0x162>
 800b01e:	6a3b      	ldr	r3, [r7, #32]
 800b020:	2b18      	cmp	r3, #24
 800b022:	d137      	bne.n	800b094 <HAL_RCC_OscConfig+0x1c8>
 800b024:	69fb      	ldr	r3, [r7, #28]
 800b026:	f003 0303 	and.w	r3, r3, #3
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d132      	bne.n	800b094 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b02e:	4b38      	ldr	r3, [pc, #224]	@ (800b110 <HAL_RCC_OscConfig+0x244>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f003 0304 	and.w	r3, r3, #4
 800b036:	2b00      	cmp	r3, #0
 800b038:	d005      	beq.n	800b046 <HAL_RCC_OscConfig+0x17a>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	68db      	ldr	r3, [r3, #12]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d101      	bne.n	800b046 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b042:	2301      	movs	r3, #1
 800b044:	e314      	b.n	800b670 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b046:	4b32      	ldr	r3, [pc, #200]	@ (800b110 <HAL_RCC_OscConfig+0x244>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f023 0219 	bic.w	r2, r3, #25
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	68db      	ldr	r3, [r3, #12]
 800b052:	492f      	ldr	r1, [pc, #188]	@ (800b110 <HAL_RCC_OscConfig+0x244>)
 800b054:	4313      	orrs	r3, r2
 800b056:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b058:	f7f9 fc88 	bl	800496c <HAL_GetTick>
 800b05c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b05e:	e008      	b.n	800b072 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b060:	f7f9 fc84 	bl	800496c <HAL_GetTick>
 800b064:	4602      	mov	r2, r0
 800b066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b068:	1ad3      	subs	r3, r2, r3
 800b06a:	2b02      	cmp	r3, #2
 800b06c:	d901      	bls.n	800b072 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800b06e:	2303      	movs	r3, #3
 800b070:	e2fe      	b.n	800b670 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b072:	4b27      	ldr	r3, [pc, #156]	@ (800b110 <HAL_RCC_OscConfig+0x244>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f003 0304 	and.w	r3, r3, #4
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d0f0      	beq.n	800b060 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b07e:	4b24      	ldr	r3, [pc, #144]	@ (800b110 <HAL_RCC_OscConfig+0x244>)
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	691b      	ldr	r3, [r3, #16]
 800b08a:	061b      	lsls	r3, r3, #24
 800b08c:	4920      	ldr	r1, [pc, #128]	@ (800b110 <HAL_RCC_OscConfig+0x244>)
 800b08e:	4313      	orrs	r3, r2
 800b090:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b092:	e045      	b.n	800b120 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	68db      	ldr	r3, [r3, #12]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d026      	beq.n	800b0ea <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b09c:	4b1c      	ldr	r3, [pc, #112]	@ (800b110 <HAL_RCC_OscConfig+0x244>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f023 0219 	bic.w	r2, r3, #25
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	68db      	ldr	r3, [r3, #12]
 800b0a8:	4919      	ldr	r1, [pc, #100]	@ (800b110 <HAL_RCC_OscConfig+0x244>)
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0ae:	f7f9 fc5d 	bl	800496c <HAL_GetTick>
 800b0b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b0b4:	e008      	b.n	800b0c8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b0b6:	f7f9 fc59 	bl	800496c <HAL_GetTick>
 800b0ba:	4602      	mov	r2, r0
 800b0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0be:	1ad3      	subs	r3, r2, r3
 800b0c0:	2b02      	cmp	r3, #2
 800b0c2:	d901      	bls.n	800b0c8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800b0c4:	2303      	movs	r3, #3
 800b0c6:	e2d3      	b.n	800b670 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b0c8:	4b11      	ldr	r3, [pc, #68]	@ (800b110 <HAL_RCC_OscConfig+0x244>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f003 0304 	and.w	r3, r3, #4
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d0f0      	beq.n	800b0b6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b0d4:	4b0e      	ldr	r3, [pc, #56]	@ (800b110 <HAL_RCC_OscConfig+0x244>)
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	691b      	ldr	r3, [r3, #16]
 800b0e0:	061b      	lsls	r3, r3, #24
 800b0e2:	490b      	ldr	r1, [pc, #44]	@ (800b110 <HAL_RCC_OscConfig+0x244>)
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	604b      	str	r3, [r1, #4]
 800b0e8:	e01a      	b.n	800b120 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b0ea:	4b09      	ldr	r3, [pc, #36]	@ (800b110 <HAL_RCC_OscConfig+0x244>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	4a08      	ldr	r2, [pc, #32]	@ (800b110 <HAL_RCC_OscConfig+0x244>)
 800b0f0:	f023 0301 	bic.w	r3, r3, #1
 800b0f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0f6:	f7f9 fc39 	bl	800496c <HAL_GetTick>
 800b0fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b0fc:	e00a      	b.n	800b114 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b0fe:	f7f9 fc35 	bl	800496c <HAL_GetTick>
 800b102:	4602      	mov	r2, r0
 800b104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b106:	1ad3      	subs	r3, r2, r3
 800b108:	2b02      	cmp	r3, #2
 800b10a:	d903      	bls.n	800b114 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800b10c:	2303      	movs	r3, #3
 800b10e:	e2af      	b.n	800b670 <HAL_RCC_OscConfig+0x7a4>
 800b110:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b114:	4b96      	ldr	r3, [pc, #600]	@ (800b370 <HAL_RCC_OscConfig+0x4a4>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f003 0304 	and.w	r3, r3, #4
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d1ee      	bne.n	800b0fe <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f003 0310 	and.w	r3, r3, #16
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d06a      	beq.n	800b202 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b12c:	4b90      	ldr	r3, [pc, #576]	@ (800b370 <HAL_RCC_OscConfig+0x4a4>)
 800b12e:	691b      	ldr	r3, [r3, #16]
 800b130:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b134:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b136:	4b8e      	ldr	r3, [pc, #568]	@ (800b370 <HAL_RCC_OscConfig+0x4a4>)
 800b138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b13a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b13c:	69bb      	ldr	r3, [r7, #24]
 800b13e:	2b08      	cmp	r3, #8
 800b140:	d007      	beq.n	800b152 <HAL_RCC_OscConfig+0x286>
 800b142:	69bb      	ldr	r3, [r7, #24]
 800b144:	2b18      	cmp	r3, #24
 800b146:	d11b      	bne.n	800b180 <HAL_RCC_OscConfig+0x2b4>
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	f003 0303 	and.w	r3, r3, #3
 800b14e:	2b01      	cmp	r3, #1
 800b150:	d116      	bne.n	800b180 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b152:	4b87      	ldr	r3, [pc, #540]	@ (800b370 <HAL_RCC_OscConfig+0x4a4>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d005      	beq.n	800b16a <HAL_RCC_OscConfig+0x29e>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	69db      	ldr	r3, [r3, #28]
 800b162:	2b80      	cmp	r3, #128	@ 0x80
 800b164:	d001      	beq.n	800b16a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800b166:	2301      	movs	r3, #1
 800b168:	e282      	b.n	800b670 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b16a:	4b81      	ldr	r3, [pc, #516]	@ (800b370 <HAL_RCC_OscConfig+0x4a4>)
 800b16c:	68db      	ldr	r3, [r3, #12]
 800b16e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6a1b      	ldr	r3, [r3, #32]
 800b176:	061b      	lsls	r3, r3, #24
 800b178:	497d      	ldr	r1, [pc, #500]	@ (800b370 <HAL_RCC_OscConfig+0x4a4>)
 800b17a:	4313      	orrs	r3, r2
 800b17c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b17e:	e040      	b.n	800b202 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	69db      	ldr	r3, [r3, #28]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d023      	beq.n	800b1d0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b188:	4b79      	ldr	r3, [pc, #484]	@ (800b370 <HAL_RCC_OscConfig+0x4a4>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	4a78      	ldr	r2, [pc, #480]	@ (800b370 <HAL_RCC_OscConfig+0x4a4>)
 800b18e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b194:	f7f9 fbea 	bl	800496c <HAL_GetTick>
 800b198:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b19a:	e008      	b.n	800b1ae <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b19c:	f7f9 fbe6 	bl	800496c <HAL_GetTick>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a4:	1ad3      	subs	r3, r2, r3
 800b1a6:	2b02      	cmp	r3, #2
 800b1a8:	d901      	bls.n	800b1ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800b1aa:	2303      	movs	r3, #3
 800b1ac:	e260      	b.n	800b670 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b1ae:	4b70      	ldr	r3, [pc, #448]	@ (800b370 <HAL_RCC_OscConfig+0x4a4>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d0f0      	beq.n	800b19c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b1ba:	4b6d      	ldr	r3, [pc, #436]	@ (800b370 <HAL_RCC_OscConfig+0x4a4>)
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6a1b      	ldr	r3, [r3, #32]
 800b1c6:	061b      	lsls	r3, r3, #24
 800b1c8:	4969      	ldr	r1, [pc, #420]	@ (800b370 <HAL_RCC_OscConfig+0x4a4>)
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	60cb      	str	r3, [r1, #12]
 800b1ce:	e018      	b.n	800b202 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b1d0:	4b67      	ldr	r3, [pc, #412]	@ (800b370 <HAL_RCC_OscConfig+0x4a4>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	4a66      	ldr	r2, [pc, #408]	@ (800b370 <HAL_RCC_OscConfig+0x4a4>)
 800b1d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b1da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1dc:	f7f9 fbc6 	bl	800496c <HAL_GetTick>
 800b1e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b1e2:	e008      	b.n	800b1f6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b1e4:	f7f9 fbc2 	bl	800496c <HAL_GetTick>
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ec:	1ad3      	subs	r3, r2, r3
 800b1ee:	2b02      	cmp	r3, #2
 800b1f0:	d901      	bls.n	800b1f6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800b1f2:	2303      	movs	r3, #3
 800b1f4:	e23c      	b.n	800b670 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b1f6:	4b5e      	ldr	r3, [pc, #376]	@ (800b370 <HAL_RCC_OscConfig+0x4a4>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d1f0      	bne.n	800b1e4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f003 0308 	and.w	r3, r3, #8
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d036      	beq.n	800b27c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	695b      	ldr	r3, [r3, #20]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d019      	beq.n	800b24a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b216:	4b56      	ldr	r3, [pc, #344]	@ (800b370 <HAL_RCC_OscConfig+0x4a4>)
 800b218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b21a:	4a55      	ldr	r2, [pc, #340]	@ (800b370 <HAL_RCC_OscConfig+0x4a4>)
 800b21c:	f043 0301 	orr.w	r3, r3, #1
 800b220:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b222:	f7f9 fba3 	bl	800496c <HAL_GetTick>
 800b226:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b228:	e008      	b.n	800b23c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b22a:	f7f9 fb9f 	bl	800496c <HAL_GetTick>
 800b22e:	4602      	mov	r2, r0
 800b230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b232:	1ad3      	subs	r3, r2, r3
 800b234:	2b02      	cmp	r3, #2
 800b236:	d901      	bls.n	800b23c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800b238:	2303      	movs	r3, #3
 800b23a:	e219      	b.n	800b670 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b23c:	4b4c      	ldr	r3, [pc, #304]	@ (800b370 <HAL_RCC_OscConfig+0x4a4>)
 800b23e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b240:	f003 0302 	and.w	r3, r3, #2
 800b244:	2b00      	cmp	r3, #0
 800b246:	d0f0      	beq.n	800b22a <HAL_RCC_OscConfig+0x35e>
 800b248:	e018      	b.n	800b27c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b24a:	4b49      	ldr	r3, [pc, #292]	@ (800b370 <HAL_RCC_OscConfig+0x4a4>)
 800b24c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b24e:	4a48      	ldr	r2, [pc, #288]	@ (800b370 <HAL_RCC_OscConfig+0x4a4>)
 800b250:	f023 0301 	bic.w	r3, r3, #1
 800b254:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b256:	f7f9 fb89 	bl	800496c <HAL_GetTick>
 800b25a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b25c:	e008      	b.n	800b270 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b25e:	f7f9 fb85 	bl	800496c <HAL_GetTick>
 800b262:	4602      	mov	r2, r0
 800b264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b266:	1ad3      	subs	r3, r2, r3
 800b268:	2b02      	cmp	r3, #2
 800b26a:	d901      	bls.n	800b270 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800b26c:	2303      	movs	r3, #3
 800b26e:	e1ff      	b.n	800b670 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b270:	4b3f      	ldr	r3, [pc, #252]	@ (800b370 <HAL_RCC_OscConfig+0x4a4>)
 800b272:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b274:	f003 0302 	and.w	r3, r3, #2
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d1f0      	bne.n	800b25e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f003 0320 	and.w	r3, r3, #32
 800b284:	2b00      	cmp	r3, #0
 800b286:	d036      	beq.n	800b2f6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	699b      	ldr	r3, [r3, #24]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d019      	beq.n	800b2c4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b290:	4b37      	ldr	r3, [pc, #220]	@ (800b370 <HAL_RCC_OscConfig+0x4a4>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	4a36      	ldr	r2, [pc, #216]	@ (800b370 <HAL_RCC_OscConfig+0x4a4>)
 800b296:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b29a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b29c:	f7f9 fb66 	bl	800496c <HAL_GetTick>
 800b2a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b2a2:	e008      	b.n	800b2b6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b2a4:	f7f9 fb62 	bl	800496c <HAL_GetTick>
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ac:	1ad3      	subs	r3, r2, r3
 800b2ae:	2b02      	cmp	r3, #2
 800b2b0:	d901      	bls.n	800b2b6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800b2b2:	2303      	movs	r3, #3
 800b2b4:	e1dc      	b.n	800b670 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b2b6:	4b2e      	ldr	r3, [pc, #184]	@ (800b370 <HAL_RCC_OscConfig+0x4a4>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d0f0      	beq.n	800b2a4 <HAL_RCC_OscConfig+0x3d8>
 800b2c2:	e018      	b.n	800b2f6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b2c4:	4b2a      	ldr	r3, [pc, #168]	@ (800b370 <HAL_RCC_OscConfig+0x4a4>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	4a29      	ldr	r2, [pc, #164]	@ (800b370 <HAL_RCC_OscConfig+0x4a4>)
 800b2ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b2ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b2d0:	f7f9 fb4c 	bl	800496c <HAL_GetTick>
 800b2d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b2d6:	e008      	b.n	800b2ea <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b2d8:	f7f9 fb48 	bl	800496c <HAL_GetTick>
 800b2dc:	4602      	mov	r2, r0
 800b2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2e0:	1ad3      	subs	r3, r2, r3
 800b2e2:	2b02      	cmp	r3, #2
 800b2e4:	d901      	bls.n	800b2ea <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800b2e6:	2303      	movs	r3, #3
 800b2e8:	e1c2      	b.n	800b670 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b2ea:	4b21      	ldr	r3, [pc, #132]	@ (800b370 <HAL_RCC_OscConfig+0x4a4>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d1f0      	bne.n	800b2d8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f003 0304 	and.w	r3, r3, #4
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	f000 8086 	beq.w	800b410 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b304:	4b1b      	ldr	r3, [pc, #108]	@ (800b374 <HAL_RCC_OscConfig+0x4a8>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4a1a      	ldr	r2, [pc, #104]	@ (800b374 <HAL_RCC_OscConfig+0x4a8>)
 800b30a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b30e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b310:	f7f9 fb2c 	bl	800496c <HAL_GetTick>
 800b314:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b316:	e008      	b.n	800b32a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b318:	f7f9 fb28 	bl	800496c <HAL_GetTick>
 800b31c:	4602      	mov	r2, r0
 800b31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b320:	1ad3      	subs	r3, r2, r3
 800b322:	2b64      	cmp	r3, #100	@ 0x64
 800b324:	d901      	bls.n	800b32a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800b326:	2303      	movs	r3, #3
 800b328:	e1a2      	b.n	800b670 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b32a:	4b12      	ldr	r3, [pc, #72]	@ (800b374 <HAL_RCC_OscConfig+0x4a8>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b332:	2b00      	cmp	r3, #0
 800b334:	d0f0      	beq.n	800b318 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	689b      	ldr	r3, [r3, #8]
 800b33a:	2b01      	cmp	r3, #1
 800b33c:	d106      	bne.n	800b34c <HAL_RCC_OscConfig+0x480>
 800b33e:	4b0c      	ldr	r3, [pc, #48]	@ (800b370 <HAL_RCC_OscConfig+0x4a4>)
 800b340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b342:	4a0b      	ldr	r2, [pc, #44]	@ (800b370 <HAL_RCC_OscConfig+0x4a4>)
 800b344:	f043 0301 	orr.w	r3, r3, #1
 800b348:	6713      	str	r3, [r2, #112]	@ 0x70
 800b34a:	e032      	b.n	800b3b2 <HAL_RCC_OscConfig+0x4e6>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	689b      	ldr	r3, [r3, #8]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d111      	bne.n	800b378 <HAL_RCC_OscConfig+0x4ac>
 800b354:	4b06      	ldr	r3, [pc, #24]	@ (800b370 <HAL_RCC_OscConfig+0x4a4>)
 800b356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b358:	4a05      	ldr	r2, [pc, #20]	@ (800b370 <HAL_RCC_OscConfig+0x4a4>)
 800b35a:	f023 0301 	bic.w	r3, r3, #1
 800b35e:	6713      	str	r3, [r2, #112]	@ 0x70
 800b360:	4b03      	ldr	r3, [pc, #12]	@ (800b370 <HAL_RCC_OscConfig+0x4a4>)
 800b362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b364:	4a02      	ldr	r2, [pc, #8]	@ (800b370 <HAL_RCC_OscConfig+0x4a4>)
 800b366:	f023 0304 	bic.w	r3, r3, #4
 800b36a:	6713      	str	r3, [r2, #112]	@ 0x70
 800b36c:	e021      	b.n	800b3b2 <HAL_RCC_OscConfig+0x4e6>
 800b36e:	bf00      	nop
 800b370:	58024400 	.word	0x58024400
 800b374:	58024800 	.word	0x58024800
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	689b      	ldr	r3, [r3, #8]
 800b37c:	2b05      	cmp	r3, #5
 800b37e:	d10c      	bne.n	800b39a <HAL_RCC_OscConfig+0x4ce>
 800b380:	4b83      	ldr	r3, [pc, #524]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b384:	4a82      	ldr	r2, [pc, #520]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b386:	f043 0304 	orr.w	r3, r3, #4
 800b38a:	6713      	str	r3, [r2, #112]	@ 0x70
 800b38c:	4b80      	ldr	r3, [pc, #512]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b38e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b390:	4a7f      	ldr	r2, [pc, #508]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b392:	f043 0301 	orr.w	r3, r3, #1
 800b396:	6713      	str	r3, [r2, #112]	@ 0x70
 800b398:	e00b      	b.n	800b3b2 <HAL_RCC_OscConfig+0x4e6>
 800b39a:	4b7d      	ldr	r3, [pc, #500]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b39c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b39e:	4a7c      	ldr	r2, [pc, #496]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b3a0:	f023 0301 	bic.w	r3, r3, #1
 800b3a4:	6713      	str	r3, [r2, #112]	@ 0x70
 800b3a6:	4b7a      	ldr	r3, [pc, #488]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b3a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b3aa:	4a79      	ldr	r2, [pc, #484]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b3ac:	f023 0304 	bic.w	r3, r3, #4
 800b3b0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	689b      	ldr	r3, [r3, #8]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d015      	beq.n	800b3e6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3ba:	f7f9 fad7 	bl	800496c <HAL_GetTick>
 800b3be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b3c0:	e00a      	b.n	800b3d8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b3c2:	f7f9 fad3 	bl	800496c <HAL_GetTick>
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ca:	1ad3      	subs	r3, r2, r3
 800b3cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d901      	bls.n	800b3d8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800b3d4:	2303      	movs	r3, #3
 800b3d6:	e14b      	b.n	800b670 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b3d8:	4b6d      	ldr	r3, [pc, #436]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b3da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b3dc:	f003 0302 	and.w	r3, r3, #2
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d0ee      	beq.n	800b3c2 <HAL_RCC_OscConfig+0x4f6>
 800b3e4:	e014      	b.n	800b410 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3e6:	f7f9 fac1 	bl	800496c <HAL_GetTick>
 800b3ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b3ec:	e00a      	b.n	800b404 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b3ee:	f7f9 fabd 	bl	800496c <HAL_GetTick>
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3f6:	1ad3      	subs	r3, r2, r3
 800b3f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d901      	bls.n	800b404 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800b400:	2303      	movs	r3, #3
 800b402:	e135      	b.n	800b670 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b404:	4b62      	ldr	r3, [pc, #392]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b408:	f003 0302 	and.w	r3, r3, #2
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d1ee      	bne.n	800b3ee <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b414:	2b00      	cmp	r3, #0
 800b416:	f000 812a 	beq.w	800b66e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b41a:	4b5d      	ldr	r3, [pc, #372]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b41c:	691b      	ldr	r3, [r3, #16]
 800b41e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b422:	2b18      	cmp	r3, #24
 800b424:	f000 80ba 	beq.w	800b59c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b42c:	2b02      	cmp	r3, #2
 800b42e:	f040 8095 	bne.w	800b55c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b432:	4b57      	ldr	r3, [pc, #348]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4a56      	ldr	r2, [pc, #344]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b438:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b43c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b43e:	f7f9 fa95 	bl	800496c <HAL_GetTick>
 800b442:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b444:	e008      	b.n	800b458 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b446:	f7f9 fa91 	bl	800496c <HAL_GetTick>
 800b44a:	4602      	mov	r2, r0
 800b44c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b44e:	1ad3      	subs	r3, r2, r3
 800b450:	2b02      	cmp	r3, #2
 800b452:	d901      	bls.n	800b458 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800b454:	2303      	movs	r3, #3
 800b456:	e10b      	b.n	800b670 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b458:	4b4d      	ldr	r3, [pc, #308]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b460:	2b00      	cmp	r3, #0
 800b462:	d1f0      	bne.n	800b446 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b464:	4b4a      	ldr	r3, [pc, #296]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b466:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b468:	4b4a      	ldr	r3, [pc, #296]	@ (800b594 <HAL_RCC_OscConfig+0x6c8>)
 800b46a:	4013      	ands	r3, r2
 800b46c:	687a      	ldr	r2, [r7, #4]
 800b46e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b474:	0112      	lsls	r2, r2, #4
 800b476:	430a      	orrs	r2, r1
 800b478:	4945      	ldr	r1, [pc, #276]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b47a:	4313      	orrs	r3, r2
 800b47c:	628b      	str	r3, [r1, #40]	@ 0x28
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b482:	3b01      	subs	r3, #1
 800b484:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b48c:	3b01      	subs	r3, #1
 800b48e:	025b      	lsls	r3, r3, #9
 800b490:	b29b      	uxth	r3, r3
 800b492:	431a      	orrs	r2, r3
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b498:	3b01      	subs	r3, #1
 800b49a:	041b      	lsls	r3, r3, #16
 800b49c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b4a0:	431a      	orrs	r2, r3
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4a6:	3b01      	subs	r3, #1
 800b4a8:	061b      	lsls	r3, r3, #24
 800b4aa:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b4ae:	4938      	ldr	r1, [pc, #224]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b4b0:	4313      	orrs	r3, r2
 800b4b2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800b4b4:	4b36      	ldr	r3, [pc, #216]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b4b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4b8:	4a35      	ldr	r2, [pc, #212]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b4ba:	f023 0301 	bic.w	r3, r3, #1
 800b4be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b4c0:	4b33      	ldr	r3, [pc, #204]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b4c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b4c4:	4b34      	ldr	r3, [pc, #208]	@ (800b598 <HAL_RCC_OscConfig+0x6cc>)
 800b4c6:	4013      	ands	r3, r2
 800b4c8:	687a      	ldr	r2, [r7, #4]
 800b4ca:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b4cc:	00d2      	lsls	r2, r2, #3
 800b4ce:	4930      	ldr	r1, [pc, #192]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b4d4:	4b2e      	ldr	r3, [pc, #184]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b4d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4d8:	f023 020c 	bic.w	r2, r3, #12
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4e0:	492b      	ldr	r1, [pc, #172]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b4e6:	4b2a      	ldr	r3, [pc, #168]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b4e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4ea:	f023 0202 	bic.w	r2, r3, #2
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4f2:	4927      	ldr	r1, [pc, #156]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b4f8:	4b25      	ldr	r3, [pc, #148]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b4fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4fc:	4a24      	ldr	r2, [pc, #144]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b4fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b502:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b504:	4b22      	ldr	r3, [pc, #136]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b508:	4a21      	ldr	r2, [pc, #132]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b50a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b50e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b510:	4b1f      	ldr	r3, [pc, #124]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b514:	4a1e      	ldr	r2, [pc, #120]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b516:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b51a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800b51c:	4b1c      	ldr	r3, [pc, #112]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b51e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b520:	4a1b      	ldr	r2, [pc, #108]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b522:	f043 0301 	orr.w	r3, r3, #1
 800b526:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b528:	4b19      	ldr	r3, [pc, #100]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4a18      	ldr	r2, [pc, #96]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b52e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b534:	f7f9 fa1a 	bl	800496c <HAL_GetTick>
 800b538:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b53a:	e008      	b.n	800b54e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b53c:	f7f9 fa16 	bl	800496c <HAL_GetTick>
 800b540:	4602      	mov	r2, r0
 800b542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b544:	1ad3      	subs	r3, r2, r3
 800b546:	2b02      	cmp	r3, #2
 800b548:	d901      	bls.n	800b54e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800b54a:	2303      	movs	r3, #3
 800b54c:	e090      	b.n	800b670 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b54e:	4b10      	ldr	r3, [pc, #64]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b556:	2b00      	cmp	r3, #0
 800b558:	d0f0      	beq.n	800b53c <HAL_RCC_OscConfig+0x670>
 800b55a:	e088      	b.n	800b66e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b55c:	4b0c      	ldr	r3, [pc, #48]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4a0b      	ldr	r2, [pc, #44]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b562:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b566:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b568:	f7f9 fa00 	bl	800496c <HAL_GetTick>
 800b56c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b56e:	e008      	b.n	800b582 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b570:	f7f9 f9fc 	bl	800496c <HAL_GetTick>
 800b574:	4602      	mov	r2, r0
 800b576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b578:	1ad3      	subs	r3, r2, r3
 800b57a:	2b02      	cmp	r3, #2
 800b57c:	d901      	bls.n	800b582 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800b57e:	2303      	movs	r3, #3
 800b580:	e076      	b.n	800b670 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b582:	4b03      	ldr	r3, [pc, #12]	@ (800b590 <HAL_RCC_OscConfig+0x6c4>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d1f0      	bne.n	800b570 <HAL_RCC_OscConfig+0x6a4>
 800b58e:	e06e      	b.n	800b66e <HAL_RCC_OscConfig+0x7a2>
 800b590:	58024400 	.word	0x58024400
 800b594:	fffffc0c 	.word	0xfffffc0c
 800b598:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b59c:	4b36      	ldr	r3, [pc, #216]	@ (800b678 <HAL_RCC_OscConfig+0x7ac>)
 800b59e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5a0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b5a2:	4b35      	ldr	r3, [pc, #212]	@ (800b678 <HAL_RCC_OscConfig+0x7ac>)
 800b5a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5a6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5ac:	2b01      	cmp	r3, #1
 800b5ae:	d031      	beq.n	800b614 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	f003 0203 	and.w	r2, r3, #3
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d12a      	bne.n	800b614 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	091b      	lsrs	r3, r3, #4
 800b5c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	d122      	bne.n	800b614 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d11a      	bne.n	800b614 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	0a5b      	lsrs	r3, r3, #9
 800b5e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5ea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	d111      	bne.n	800b614 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	0c1b      	lsrs	r3, r3, #16
 800b5f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d108      	bne.n	800b614 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	0e1b      	lsrs	r3, r3, #24
 800b606:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b60e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b610:	429a      	cmp	r2, r3
 800b612:	d001      	beq.n	800b618 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800b614:	2301      	movs	r3, #1
 800b616:	e02b      	b.n	800b670 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b618:	4b17      	ldr	r3, [pc, #92]	@ (800b678 <HAL_RCC_OscConfig+0x7ac>)
 800b61a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b61c:	08db      	lsrs	r3, r3, #3
 800b61e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b622:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b628:	693a      	ldr	r2, [r7, #16]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d01f      	beq.n	800b66e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800b62e:	4b12      	ldr	r3, [pc, #72]	@ (800b678 <HAL_RCC_OscConfig+0x7ac>)
 800b630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b632:	4a11      	ldr	r2, [pc, #68]	@ (800b678 <HAL_RCC_OscConfig+0x7ac>)
 800b634:	f023 0301 	bic.w	r3, r3, #1
 800b638:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b63a:	f7f9 f997 	bl	800496c <HAL_GetTick>
 800b63e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b640:	bf00      	nop
 800b642:	f7f9 f993 	bl	800496c <HAL_GetTick>
 800b646:	4602      	mov	r2, r0
 800b648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d0f9      	beq.n	800b642 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b64e:	4b0a      	ldr	r3, [pc, #40]	@ (800b678 <HAL_RCC_OscConfig+0x7ac>)
 800b650:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b652:	4b0a      	ldr	r3, [pc, #40]	@ (800b67c <HAL_RCC_OscConfig+0x7b0>)
 800b654:	4013      	ands	r3, r2
 800b656:	687a      	ldr	r2, [r7, #4]
 800b658:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b65a:	00d2      	lsls	r2, r2, #3
 800b65c:	4906      	ldr	r1, [pc, #24]	@ (800b678 <HAL_RCC_OscConfig+0x7ac>)
 800b65e:	4313      	orrs	r3, r2
 800b660:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800b662:	4b05      	ldr	r3, [pc, #20]	@ (800b678 <HAL_RCC_OscConfig+0x7ac>)
 800b664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b666:	4a04      	ldr	r2, [pc, #16]	@ (800b678 <HAL_RCC_OscConfig+0x7ac>)
 800b668:	f043 0301 	orr.w	r3, r3, #1
 800b66c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800b66e:	2300      	movs	r3, #0
}
 800b670:	4618      	mov	r0, r3
 800b672:	3730      	adds	r7, #48	@ 0x30
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}
 800b678:	58024400 	.word	0x58024400
 800b67c:	ffff0007 	.word	0xffff0007

0800b680 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b086      	sub	sp, #24
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d101      	bne.n	800b694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b690:	2301      	movs	r3, #1
 800b692:	e19c      	b.n	800b9ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b694:	4b8a      	ldr	r3, [pc, #552]	@ (800b8c0 <HAL_RCC_ClockConfig+0x240>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f003 030f 	and.w	r3, r3, #15
 800b69c:	683a      	ldr	r2, [r7, #0]
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	d910      	bls.n	800b6c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b6a2:	4b87      	ldr	r3, [pc, #540]	@ (800b8c0 <HAL_RCC_ClockConfig+0x240>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f023 020f 	bic.w	r2, r3, #15
 800b6aa:	4985      	ldr	r1, [pc, #532]	@ (800b8c0 <HAL_RCC_ClockConfig+0x240>)
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b6b2:	4b83      	ldr	r3, [pc, #524]	@ (800b8c0 <HAL_RCC_ClockConfig+0x240>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f003 030f 	and.w	r3, r3, #15
 800b6ba:	683a      	ldr	r2, [r7, #0]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d001      	beq.n	800b6c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	e184      	b.n	800b9ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f003 0304 	and.w	r3, r3, #4
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d010      	beq.n	800b6f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	691a      	ldr	r2, [r3, #16]
 800b6d4:	4b7b      	ldr	r3, [pc, #492]	@ (800b8c4 <HAL_RCC_ClockConfig+0x244>)
 800b6d6:	699b      	ldr	r3, [r3, #24]
 800b6d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d908      	bls.n	800b6f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b6e0:	4b78      	ldr	r3, [pc, #480]	@ (800b8c4 <HAL_RCC_ClockConfig+0x244>)
 800b6e2:	699b      	ldr	r3, [r3, #24]
 800b6e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	691b      	ldr	r3, [r3, #16]
 800b6ec:	4975      	ldr	r1, [pc, #468]	@ (800b8c4 <HAL_RCC_ClockConfig+0x244>)
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f003 0308 	and.w	r3, r3, #8
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d010      	beq.n	800b720 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	695a      	ldr	r2, [r3, #20]
 800b702:	4b70      	ldr	r3, [pc, #448]	@ (800b8c4 <HAL_RCC_ClockConfig+0x244>)
 800b704:	69db      	ldr	r3, [r3, #28]
 800b706:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d908      	bls.n	800b720 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b70e:	4b6d      	ldr	r3, [pc, #436]	@ (800b8c4 <HAL_RCC_ClockConfig+0x244>)
 800b710:	69db      	ldr	r3, [r3, #28]
 800b712:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	695b      	ldr	r3, [r3, #20]
 800b71a:	496a      	ldr	r1, [pc, #424]	@ (800b8c4 <HAL_RCC_ClockConfig+0x244>)
 800b71c:	4313      	orrs	r3, r2
 800b71e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f003 0310 	and.w	r3, r3, #16
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d010      	beq.n	800b74e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	699a      	ldr	r2, [r3, #24]
 800b730:	4b64      	ldr	r3, [pc, #400]	@ (800b8c4 <HAL_RCC_ClockConfig+0x244>)
 800b732:	69db      	ldr	r3, [r3, #28]
 800b734:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b738:	429a      	cmp	r2, r3
 800b73a:	d908      	bls.n	800b74e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b73c:	4b61      	ldr	r3, [pc, #388]	@ (800b8c4 <HAL_RCC_ClockConfig+0x244>)
 800b73e:	69db      	ldr	r3, [r3, #28]
 800b740:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	699b      	ldr	r3, [r3, #24]
 800b748:	495e      	ldr	r1, [pc, #376]	@ (800b8c4 <HAL_RCC_ClockConfig+0x244>)
 800b74a:	4313      	orrs	r3, r2
 800b74c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f003 0320 	and.w	r3, r3, #32
 800b756:	2b00      	cmp	r3, #0
 800b758:	d010      	beq.n	800b77c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	69da      	ldr	r2, [r3, #28]
 800b75e:	4b59      	ldr	r3, [pc, #356]	@ (800b8c4 <HAL_RCC_ClockConfig+0x244>)
 800b760:	6a1b      	ldr	r3, [r3, #32]
 800b762:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b766:	429a      	cmp	r2, r3
 800b768:	d908      	bls.n	800b77c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b76a:	4b56      	ldr	r3, [pc, #344]	@ (800b8c4 <HAL_RCC_ClockConfig+0x244>)
 800b76c:	6a1b      	ldr	r3, [r3, #32]
 800b76e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	69db      	ldr	r3, [r3, #28]
 800b776:	4953      	ldr	r1, [pc, #332]	@ (800b8c4 <HAL_RCC_ClockConfig+0x244>)
 800b778:	4313      	orrs	r3, r2
 800b77a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f003 0302 	and.w	r3, r3, #2
 800b784:	2b00      	cmp	r3, #0
 800b786:	d010      	beq.n	800b7aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	68da      	ldr	r2, [r3, #12]
 800b78c:	4b4d      	ldr	r3, [pc, #308]	@ (800b8c4 <HAL_RCC_ClockConfig+0x244>)
 800b78e:	699b      	ldr	r3, [r3, #24]
 800b790:	f003 030f 	and.w	r3, r3, #15
 800b794:	429a      	cmp	r2, r3
 800b796:	d908      	bls.n	800b7aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b798:	4b4a      	ldr	r3, [pc, #296]	@ (800b8c4 <HAL_RCC_ClockConfig+0x244>)
 800b79a:	699b      	ldr	r3, [r3, #24]
 800b79c:	f023 020f 	bic.w	r2, r3, #15
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	68db      	ldr	r3, [r3, #12]
 800b7a4:	4947      	ldr	r1, [pc, #284]	@ (800b8c4 <HAL_RCC_ClockConfig+0x244>)
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f003 0301 	and.w	r3, r3, #1
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d055      	beq.n	800b862 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b7b6:	4b43      	ldr	r3, [pc, #268]	@ (800b8c4 <HAL_RCC_ClockConfig+0x244>)
 800b7b8:	699b      	ldr	r3, [r3, #24]
 800b7ba:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	689b      	ldr	r3, [r3, #8]
 800b7c2:	4940      	ldr	r1, [pc, #256]	@ (800b8c4 <HAL_RCC_ClockConfig+0x244>)
 800b7c4:	4313      	orrs	r3, r2
 800b7c6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	2b02      	cmp	r3, #2
 800b7ce:	d107      	bne.n	800b7e0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b7d0:	4b3c      	ldr	r3, [pc, #240]	@ (800b8c4 <HAL_RCC_ClockConfig+0x244>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d121      	bne.n	800b820 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	e0f6      	b.n	800b9ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	685b      	ldr	r3, [r3, #4]
 800b7e4:	2b03      	cmp	r3, #3
 800b7e6:	d107      	bne.n	800b7f8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b7e8:	4b36      	ldr	r3, [pc, #216]	@ (800b8c4 <HAL_RCC_ClockConfig+0x244>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d115      	bne.n	800b820 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	e0ea      	b.n	800b9ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	685b      	ldr	r3, [r3, #4]
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d107      	bne.n	800b810 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b800:	4b30      	ldr	r3, [pc, #192]	@ (800b8c4 <HAL_RCC_ClockConfig+0x244>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d109      	bne.n	800b820 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b80c:	2301      	movs	r3, #1
 800b80e:	e0de      	b.n	800b9ce <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b810:	4b2c      	ldr	r3, [pc, #176]	@ (800b8c4 <HAL_RCC_ClockConfig+0x244>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f003 0304 	and.w	r3, r3, #4
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d101      	bne.n	800b820 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b81c:	2301      	movs	r3, #1
 800b81e:	e0d6      	b.n	800b9ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b820:	4b28      	ldr	r3, [pc, #160]	@ (800b8c4 <HAL_RCC_ClockConfig+0x244>)
 800b822:	691b      	ldr	r3, [r3, #16]
 800b824:	f023 0207 	bic.w	r2, r3, #7
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	685b      	ldr	r3, [r3, #4]
 800b82c:	4925      	ldr	r1, [pc, #148]	@ (800b8c4 <HAL_RCC_ClockConfig+0x244>)
 800b82e:	4313      	orrs	r3, r2
 800b830:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b832:	f7f9 f89b 	bl	800496c <HAL_GetTick>
 800b836:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b838:	e00a      	b.n	800b850 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b83a:	f7f9 f897 	bl	800496c <HAL_GetTick>
 800b83e:	4602      	mov	r2, r0
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	1ad3      	subs	r3, r2, r3
 800b844:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b848:	4293      	cmp	r3, r2
 800b84a:	d901      	bls.n	800b850 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b84c:	2303      	movs	r3, #3
 800b84e:	e0be      	b.n	800b9ce <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b850:	4b1c      	ldr	r3, [pc, #112]	@ (800b8c4 <HAL_RCC_ClockConfig+0x244>)
 800b852:	691b      	ldr	r3, [r3, #16]
 800b854:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	00db      	lsls	r3, r3, #3
 800b85e:	429a      	cmp	r2, r3
 800b860:	d1eb      	bne.n	800b83a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f003 0302 	and.w	r3, r3, #2
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d010      	beq.n	800b890 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	68da      	ldr	r2, [r3, #12]
 800b872:	4b14      	ldr	r3, [pc, #80]	@ (800b8c4 <HAL_RCC_ClockConfig+0x244>)
 800b874:	699b      	ldr	r3, [r3, #24]
 800b876:	f003 030f 	and.w	r3, r3, #15
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d208      	bcs.n	800b890 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b87e:	4b11      	ldr	r3, [pc, #68]	@ (800b8c4 <HAL_RCC_ClockConfig+0x244>)
 800b880:	699b      	ldr	r3, [r3, #24]
 800b882:	f023 020f 	bic.w	r2, r3, #15
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	68db      	ldr	r3, [r3, #12]
 800b88a:	490e      	ldr	r1, [pc, #56]	@ (800b8c4 <HAL_RCC_ClockConfig+0x244>)
 800b88c:	4313      	orrs	r3, r2
 800b88e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b890:	4b0b      	ldr	r3, [pc, #44]	@ (800b8c0 <HAL_RCC_ClockConfig+0x240>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f003 030f 	and.w	r3, r3, #15
 800b898:	683a      	ldr	r2, [r7, #0]
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d214      	bcs.n	800b8c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b89e:	4b08      	ldr	r3, [pc, #32]	@ (800b8c0 <HAL_RCC_ClockConfig+0x240>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f023 020f 	bic.w	r2, r3, #15
 800b8a6:	4906      	ldr	r1, [pc, #24]	@ (800b8c0 <HAL_RCC_ClockConfig+0x240>)
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b8ae:	4b04      	ldr	r3, [pc, #16]	@ (800b8c0 <HAL_RCC_ClockConfig+0x240>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f003 030f 	and.w	r3, r3, #15
 800b8b6:	683a      	ldr	r2, [r7, #0]
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d005      	beq.n	800b8c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b8bc:	2301      	movs	r3, #1
 800b8be:	e086      	b.n	800b9ce <HAL_RCC_ClockConfig+0x34e>
 800b8c0:	52002000 	.word	0x52002000
 800b8c4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f003 0304 	and.w	r3, r3, #4
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d010      	beq.n	800b8f6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	691a      	ldr	r2, [r3, #16]
 800b8d8:	4b3f      	ldr	r3, [pc, #252]	@ (800b9d8 <HAL_RCC_ClockConfig+0x358>)
 800b8da:	699b      	ldr	r3, [r3, #24]
 800b8dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d208      	bcs.n	800b8f6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b8e4:	4b3c      	ldr	r3, [pc, #240]	@ (800b9d8 <HAL_RCC_ClockConfig+0x358>)
 800b8e6:	699b      	ldr	r3, [r3, #24]
 800b8e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	691b      	ldr	r3, [r3, #16]
 800b8f0:	4939      	ldr	r1, [pc, #228]	@ (800b9d8 <HAL_RCC_ClockConfig+0x358>)
 800b8f2:	4313      	orrs	r3, r2
 800b8f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f003 0308 	and.w	r3, r3, #8
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d010      	beq.n	800b924 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	695a      	ldr	r2, [r3, #20]
 800b906:	4b34      	ldr	r3, [pc, #208]	@ (800b9d8 <HAL_RCC_ClockConfig+0x358>)
 800b908:	69db      	ldr	r3, [r3, #28]
 800b90a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b90e:	429a      	cmp	r2, r3
 800b910:	d208      	bcs.n	800b924 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b912:	4b31      	ldr	r3, [pc, #196]	@ (800b9d8 <HAL_RCC_ClockConfig+0x358>)
 800b914:	69db      	ldr	r3, [r3, #28]
 800b916:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	695b      	ldr	r3, [r3, #20]
 800b91e:	492e      	ldr	r1, [pc, #184]	@ (800b9d8 <HAL_RCC_ClockConfig+0x358>)
 800b920:	4313      	orrs	r3, r2
 800b922:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f003 0310 	and.w	r3, r3, #16
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d010      	beq.n	800b952 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	699a      	ldr	r2, [r3, #24]
 800b934:	4b28      	ldr	r3, [pc, #160]	@ (800b9d8 <HAL_RCC_ClockConfig+0x358>)
 800b936:	69db      	ldr	r3, [r3, #28]
 800b938:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d208      	bcs.n	800b952 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b940:	4b25      	ldr	r3, [pc, #148]	@ (800b9d8 <HAL_RCC_ClockConfig+0x358>)
 800b942:	69db      	ldr	r3, [r3, #28]
 800b944:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	699b      	ldr	r3, [r3, #24]
 800b94c:	4922      	ldr	r1, [pc, #136]	@ (800b9d8 <HAL_RCC_ClockConfig+0x358>)
 800b94e:	4313      	orrs	r3, r2
 800b950:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f003 0320 	and.w	r3, r3, #32
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d010      	beq.n	800b980 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	69da      	ldr	r2, [r3, #28]
 800b962:	4b1d      	ldr	r3, [pc, #116]	@ (800b9d8 <HAL_RCC_ClockConfig+0x358>)
 800b964:	6a1b      	ldr	r3, [r3, #32]
 800b966:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b96a:	429a      	cmp	r2, r3
 800b96c:	d208      	bcs.n	800b980 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b96e:	4b1a      	ldr	r3, [pc, #104]	@ (800b9d8 <HAL_RCC_ClockConfig+0x358>)
 800b970:	6a1b      	ldr	r3, [r3, #32]
 800b972:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	69db      	ldr	r3, [r3, #28]
 800b97a:	4917      	ldr	r1, [pc, #92]	@ (800b9d8 <HAL_RCC_ClockConfig+0x358>)
 800b97c:	4313      	orrs	r3, r2
 800b97e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b980:	f000 f834 	bl	800b9ec <HAL_RCC_GetSysClockFreq>
 800b984:	4602      	mov	r2, r0
 800b986:	4b14      	ldr	r3, [pc, #80]	@ (800b9d8 <HAL_RCC_ClockConfig+0x358>)
 800b988:	699b      	ldr	r3, [r3, #24]
 800b98a:	0a1b      	lsrs	r3, r3, #8
 800b98c:	f003 030f 	and.w	r3, r3, #15
 800b990:	4912      	ldr	r1, [pc, #72]	@ (800b9dc <HAL_RCC_ClockConfig+0x35c>)
 800b992:	5ccb      	ldrb	r3, [r1, r3]
 800b994:	f003 031f 	and.w	r3, r3, #31
 800b998:	fa22 f303 	lsr.w	r3, r2, r3
 800b99c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b99e:	4b0e      	ldr	r3, [pc, #56]	@ (800b9d8 <HAL_RCC_ClockConfig+0x358>)
 800b9a0:	699b      	ldr	r3, [r3, #24]
 800b9a2:	f003 030f 	and.w	r3, r3, #15
 800b9a6:	4a0d      	ldr	r2, [pc, #52]	@ (800b9dc <HAL_RCC_ClockConfig+0x35c>)
 800b9a8:	5cd3      	ldrb	r3, [r2, r3]
 800b9aa:	f003 031f 	and.w	r3, r3, #31
 800b9ae:	693a      	ldr	r2, [r7, #16]
 800b9b0:	fa22 f303 	lsr.w	r3, r2, r3
 800b9b4:	4a0a      	ldr	r2, [pc, #40]	@ (800b9e0 <HAL_RCC_ClockConfig+0x360>)
 800b9b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b9b8:	4a0a      	ldr	r2, [pc, #40]	@ (800b9e4 <HAL_RCC_ClockConfig+0x364>)
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b9be:	4b0a      	ldr	r3, [pc, #40]	@ (800b9e8 <HAL_RCC_ClockConfig+0x368>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7f8 ff88 	bl	80048d8 <HAL_InitTick>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b9cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3718      	adds	r7, #24
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}
 800b9d6:	bf00      	nop
 800b9d8:	58024400 	.word	0x58024400
 800b9dc:	08014e70 	.word	0x08014e70
 800b9e0:	2400003c 	.word	0x2400003c
 800b9e4:	24000038 	.word	0x24000038
 800b9e8:	24000040 	.word	0x24000040

0800b9ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b089      	sub	sp, #36	@ 0x24
 800b9f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b9f2:	4bb3      	ldr	r3, [pc, #716]	@ (800bcc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b9f4:	691b      	ldr	r3, [r3, #16]
 800b9f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b9fa:	2b18      	cmp	r3, #24
 800b9fc:	f200 8155 	bhi.w	800bcaa <HAL_RCC_GetSysClockFreq+0x2be>
 800ba00:	a201      	add	r2, pc, #4	@ (adr r2, 800ba08 <HAL_RCC_GetSysClockFreq+0x1c>)
 800ba02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba06:	bf00      	nop
 800ba08:	0800ba6d 	.word	0x0800ba6d
 800ba0c:	0800bcab 	.word	0x0800bcab
 800ba10:	0800bcab 	.word	0x0800bcab
 800ba14:	0800bcab 	.word	0x0800bcab
 800ba18:	0800bcab 	.word	0x0800bcab
 800ba1c:	0800bcab 	.word	0x0800bcab
 800ba20:	0800bcab 	.word	0x0800bcab
 800ba24:	0800bcab 	.word	0x0800bcab
 800ba28:	0800ba93 	.word	0x0800ba93
 800ba2c:	0800bcab 	.word	0x0800bcab
 800ba30:	0800bcab 	.word	0x0800bcab
 800ba34:	0800bcab 	.word	0x0800bcab
 800ba38:	0800bcab 	.word	0x0800bcab
 800ba3c:	0800bcab 	.word	0x0800bcab
 800ba40:	0800bcab 	.word	0x0800bcab
 800ba44:	0800bcab 	.word	0x0800bcab
 800ba48:	0800ba99 	.word	0x0800ba99
 800ba4c:	0800bcab 	.word	0x0800bcab
 800ba50:	0800bcab 	.word	0x0800bcab
 800ba54:	0800bcab 	.word	0x0800bcab
 800ba58:	0800bcab 	.word	0x0800bcab
 800ba5c:	0800bcab 	.word	0x0800bcab
 800ba60:	0800bcab 	.word	0x0800bcab
 800ba64:	0800bcab 	.word	0x0800bcab
 800ba68:	0800ba9f 	.word	0x0800ba9f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba6c:	4b94      	ldr	r3, [pc, #592]	@ (800bcc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f003 0320 	and.w	r3, r3, #32
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d009      	beq.n	800ba8c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba78:	4b91      	ldr	r3, [pc, #580]	@ (800bcc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	08db      	lsrs	r3, r3, #3
 800ba7e:	f003 0303 	and.w	r3, r3, #3
 800ba82:	4a90      	ldr	r2, [pc, #576]	@ (800bcc4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ba84:	fa22 f303 	lsr.w	r3, r2, r3
 800ba88:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800ba8a:	e111      	b.n	800bcb0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ba8c:	4b8d      	ldr	r3, [pc, #564]	@ (800bcc4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ba8e:	61bb      	str	r3, [r7, #24]
      break;
 800ba90:	e10e      	b.n	800bcb0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800ba92:	4b8d      	ldr	r3, [pc, #564]	@ (800bcc8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ba94:	61bb      	str	r3, [r7, #24]
      break;
 800ba96:	e10b      	b.n	800bcb0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800ba98:	4b8c      	ldr	r3, [pc, #560]	@ (800bccc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ba9a:	61bb      	str	r3, [r7, #24]
      break;
 800ba9c:	e108      	b.n	800bcb0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ba9e:	4b88      	ldr	r3, [pc, #544]	@ (800bcc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800baa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baa2:	f003 0303 	and.w	r3, r3, #3
 800baa6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800baa8:	4b85      	ldr	r3, [pc, #532]	@ (800bcc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800baaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baac:	091b      	lsrs	r3, r3, #4
 800baae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bab2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800bab4:	4b82      	ldr	r3, [pc, #520]	@ (800bcc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bab8:	f003 0301 	and.w	r3, r3, #1
 800babc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800babe:	4b80      	ldr	r3, [pc, #512]	@ (800bcc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bac2:	08db      	lsrs	r3, r3, #3
 800bac4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bac8:	68fa      	ldr	r2, [r7, #12]
 800baca:	fb02 f303 	mul.w	r3, r2, r3
 800bace:	ee07 3a90 	vmov	s15, r3
 800bad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bad6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	2b00      	cmp	r3, #0
 800bade:	f000 80e1 	beq.w	800bca4 <HAL_RCC_GetSysClockFreq+0x2b8>
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	2b02      	cmp	r3, #2
 800bae6:	f000 8083 	beq.w	800bbf0 <HAL_RCC_GetSysClockFreq+0x204>
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	2b02      	cmp	r3, #2
 800baee:	f200 80a1 	bhi.w	800bc34 <HAL_RCC_GetSysClockFreq+0x248>
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d003      	beq.n	800bb00 <HAL_RCC_GetSysClockFreq+0x114>
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	d056      	beq.n	800bbac <HAL_RCC_GetSysClockFreq+0x1c0>
 800bafe:	e099      	b.n	800bc34 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb00:	4b6f      	ldr	r3, [pc, #444]	@ (800bcc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f003 0320 	and.w	r3, r3, #32
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d02d      	beq.n	800bb68 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb0c:	4b6c      	ldr	r3, [pc, #432]	@ (800bcc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	08db      	lsrs	r3, r3, #3
 800bb12:	f003 0303 	and.w	r3, r3, #3
 800bb16:	4a6b      	ldr	r2, [pc, #428]	@ (800bcc4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bb18:	fa22 f303 	lsr.w	r3, r2, r3
 800bb1c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	ee07 3a90 	vmov	s15, r3
 800bb24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	ee07 3a90 	vmov	s15, r3
 800bb2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb36:	4b62      	ldr	r3, [pc, #392]	@ (800bcc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bb38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb3e:	ee07 3a90 	vmov	s15, r3
 800bb42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb46:	ed97 6a02 	vldr	s12, [r7, #8]
 800bb4a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800bcd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bb4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb62:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800bb66:	e087      	b.n	800bc78 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	ee07 3a90 	vmov	s15, r3
 800bb6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb72:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800bcd4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800bb76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb7a:	4b51      	ldr	r3, [pc, #324]	@ (800bcc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bb7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb82:	ee07 3a90 	vmov	s15, r3
 800bb86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb8a:	ed97 6a02 	vldr	s12, [r7, #8]
 800bb8e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800bcd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bb92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bba6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800bbaa:	e065      	b.n	800bc78 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	ee07 3a90 	vmov	s15, r3
 800bbb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbb6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800bcd8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800bbba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbbe:	4b40      	ldr	r3, [pc, #256]	@ (800bcc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bbc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbc6:	ee07 3a90 	vmov	s15, r3
 800bbca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbce:	ed97 6a02 	vldr	s12, [r7, #8]
 800bbd2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800bcd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bbd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bbe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800bbee:	e043      	b.n	800bc78 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	ee07 3a90 	vmov	s15, r3
 800bbf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbfa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800bcdc <HAL_RCC_GetSysClockFreq+0x2f0>
 800bbfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc02:	4b2f      	ldr	r3, [pc, #188]	@ (800bcc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bc04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc0a:	ee07 3a90 	vmov	s15, r3
 800bc0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc12:	ed97 6a02 	vldr	s12, [r7, #8]
 800bc16:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800bcd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bc1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800bc32:	e021      	b.n	800bc78 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	ee07 3a90 	vmov	s15, r3
 800bc3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc3e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800bcd8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800bc42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc46:	4b1e      	ldr	r3, [pc, #120]	@ (800bcc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bc48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc4e:	ee07 3a90 	vmov	s15, r3
 800bc52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc56:	ed97 6a02 	vldr	s12, [r7, #8]
 800bc5a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800bcd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bc5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800bc76:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800bc78:	4b11      	ldr	r3, [pc, #68]	@ (800bcc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bc7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc7c:	0a5b      	lsrs	r3, r3, #9
 800bc7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc82:	3301      	adds	r3, #1
 800bc84:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	ee07 3a90 	vmov	s15, r3
 800bc8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bc90:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc9c:	ee17 3a90 	vmov	r3, s15
 800bca0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800bca2:	e005      	b.n	800bcb0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800bca4:	2300      	movs	r3, #0
 800bca6:	61bb      	str	r3, [r7, #24]
      break;
 800bca8:	e002      	b.n	800bcb0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800bcaa:	4b07      	ldr	r3, [pc, #28]	@ (800bcc8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800bcac:	61bb      	str	r3, [r7, #24]
      break;
 800bcae:	bf00      	nop
  }

  return sysclockfreq;
 800bcb0:	69bb      	ldr	r3, [r7, #24]
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3724      	adds	r7, #36	@ 0x24
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbc:	4770      	bx	lr
 800bcbe:	bf00      	nop
 800bcc0:	58024400 	.word	0x58024400
 800bcc4:	03d09000 	.word	0x03d09000
 800bcc8:	003d0900 	.word	0x003d0900
 800bccc:	007a1200 	.word	0x007a1200
 800bcd0:	46000000 	.word	0x46000000
 800bcd4:	4c742400 	.word	0x4c742400
 800bcd8:	4a742400 	.word	0x4a742400
 800bcdc:	4af42400 	.word	0x4af42400

0800bce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b082      	sub	sp, #8
 800bce4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800bce6:	f7ff fe81 	bl	800b9ec <HAL_RCC_GetSysClockFreq>
 800bcea:	4602      	mov	r2, r0
 800bcec:	4b10      	ldr	r3, [pc, #64]	@ (800bd30 <HAL_RCC_GetHCLKFreq+0x50>)
 800bcee:	699b      	ldr	r3, [r3, #24]
 800bcf0:	0a1b      	lsrs	r3, r3, #8
 800bcf2:	f003 030f 	and.w	r3, r3, #15
 800bcf6:	490f      	ldr	r1, [pc, #60]	@ (800bd34 <HAL_RCC_GetHCLKFreq+0x54>)
 800bcf8:	5ccb      	ldrb	r3, [r1, r3]
 800bcfa:	f003 031f 	and.w	r3, r3, #31
 800bcfe:	fa22 f303 	lsr.w	r3, r2, r3
 800bd02:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bd04:	4b0a      	ldr	r3, [pc, #40]	@ (800bd30 <HAL_RCC_GetHCLKFreq+0x50>)
 800bd06:	699b      	ldr	r3, [r3, #24]
 800bd08:	f003 030f 	and.w	r3, r3, #15
 800bd0c:	4a09      	ldr	r2, [pc, #36]	@ (800bd34 <HAL_RCC_GetHCLKFreq+0x54>)
 800bd0e:	5cd3      	ldrb	r3, [r2, r3]
 800bd10:	f003 031f 	and.w	r3, r3, #31
 800bd14:	687a      	ldr	r2, [r7, #4]
 800bd16:	fa22 f303 	lsr.w	r3, r2, r3
 800bd1a:	4a07      	ldr	r2, [pc, #28]	@ (800bd38 <HAL_RCC_GetHCLKFreq+0x58>)
 800bd1c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800bd1e:	4a07      	ldr	r2, [pc, #28]	@ (800bd3c <HAL_RCC_GetHCLKFreq+0x5c>)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800bd24:	4b04      	ldr	r3, [pc, #16]	@ (800bd38 <HAL_RCC_GetHCLKFreq+0x58>)
 800bd26:	681b      	ldr	r3, [r3, #0]
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3708      	adds	r7, #8
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}
 800bd30:	58024400 	.word	0x58024400
 800bd34:	08014e70 	.word	0x08014e70
 800bd38:	2400003c 	.word	0x2400003c
 800bd3c:	24000038 	.word	0x24000038

0800bd40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800bd44:	f7ff ffcc 	bl	800bce0 <HAL_RCC_GetHCLKFreq>
 800bd48:	4602      	mov	r2, r0
 800bd4a:	4b06      	ldr	r3, [pc, #24]	@ (800bd64 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bd4c:	69db      	ldr	r3, [r3, #28]
 800bd4e:	091b      	lsrs	r3, r3, #4
 800bd50:	f003 0307 	and.w	r3, r3, #7
 800bd54:	4904      	ldr	r1, [pc, #16]	@ (800bd68 <HAL_RCC_GetPCLK1Freq+0x28>)
 800bd56:	5ccb      	ldrb	r3, [r1, r3]
 800bd58:	f003 031f 	and.w	r3, r3, #31
 800bd5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	bd80      	pop	{r7, pc}
 800bd64:	58024400 	.word	0x58024400
 800bd68:	08014e70 	.word	0x08014e70

0800bd6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800bd70:	f7ff ffb6 	bl	800bce0 <HAL_RCC_GetHCLKFreq>
 800bd74:	4602      	mov	r2, r0
 800bd76:	4b06      	ldr	r3, [pc, #24]	@ (800bd90 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bd78:	69db      	ldr	r3, [r3, #28]
 800bd7a:	0a1b      	lsrs	r3, r3, #8
 800bd7c:	f003 0307 	and.w	r3, r3, #7
 800bd80:	4904      	ldr	r1, [pc, #16]	@ (800bd94 <HAL_RCC_GetPCLK2Freq+0x28>)
 800bd82:	5ccb      	ldrb	r3, [r1, r3]
 800bd84:	f003 031f 	and.w	r3, r3, #31
 800bd88:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	bd80      	pop	{r7, pc}
 800bd90:	58024400 	.word	0x58024400
 800bd94:	08014e70 	.word	0x08014e70

0800bd98 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bd98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bd9c:	b0c6      	sub	sp, #280	@ 0x118
 800bd9e:	af00      	add	r7, sp, #0
 800bda0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bda4:	2300      	movs	r3, #0
 800bda6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bdaa:	2300      	movs	r3, #0
 800bdac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bdb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800bdbc:	2500      	movs	r5, #0
 800bdbe:	ea54 0305 	orrs.w	r3, r4, r5
 800bdc2:	d049      	beq.n	800be58 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800bdc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bdce:	d02f      	beq.n	800be30 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800bdd0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bdd4:	d828      	bhi.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800bdd6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bdda:	d01a      	beq.n	800be12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800bddc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bde0:	d822      	bhi.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d003      	beq.n	800bdee <HAL_RCCEx_PeriphCLKConfig+0x56>
 800bde6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bdea:	d007      	beq.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800bdec:	e01c      	b.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bdee:	4bab      	ldr	r3, [pc, #684]	@ (800c09c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bdf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdf2:	4aaa      	ldr	r2, [pc, #680]	@ (800c09c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bdf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bdf8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bdfa:	e01a      	b.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bdfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be00:	3308      	adds	r3, #8
 800be02:	2102      	movs	r1, #2
 800be04:	4618      	mov	r0, r3
 800be06:	f002 fa49 	bl	800e29c <RCCEx_PLL2_Config>
 800be0a:	4603      	mov	r3, r0
 800be0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800be10:	e00f      	b.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800be12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be16:	3328      	adds	r3, #40	@ 0x28
 800be18:	2102      	movs	r1, #2
 800be1a:	4618      	mov	r0, r3
 800be1c:	f002 faf0 	bl	800e400 <RCCEx_PLL3_Config>
 800be20:	4603      	mov	r3, r0
 800be22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800be26:	e004      	b.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be28:	2301      	movs	r3, #1
 800be2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800be2e:	e000      	b.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800be30:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be36:	2b00      	cmp	r3, #0
 800be38:	d10a      	bne.n	800be50 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800be3a:	4b98      	ldr	r3, [pc, #608]	@ (800c09c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800be3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be3e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800be42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be48:	4a94      	ldr	r2, [pc, #592]	@ (800c09c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800be4a:	430b      	orrs	r3, r1
 800be4c:	6513      	str	r3, [r2, #80]	@ 0x50
 800be4e:	e003      	b.n	800be58 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800be58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be60:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800be64:	f04f 0900 	mov.w	r9, #0
 800be68:	ea58 0309 	orrs.w	r3, r8, r9
 800be6c:	d047      	beq.n	800befe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800be6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be74:	2b04      	cmp	r3, #4
 800be76:	d82a      	bhi.n	800bece <HAL_RCCEx_PeriphCLKConfig+0x136>
 800be78:	a201      	add	r2, pc, #4	@ (adr r2, 800be80 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800be7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be7e:	bf00      	nop
 800be80:	0800be95 	.word	0x0800be95
 800be84:	0800bea3 	.word	0x0800bea3
 800be88:	0800beb9 	.word	0x0800beb9
 800be8c:	0800bed7 	.word	0x0800bed7
 800be90:	0800bed7 	.word	0x0800bed7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be94:	4b81      	ldr	r3, [pc, #516]	@ (800c09c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800be96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be98:	4a80      	ldr	r2, [pc, #512]	@ (800c09c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800be9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800be9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bea0:	e01a      	b.n	800bed8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bea6:	3308      	adds	r3, #8
 800bea8:	2100      	movs	r1, #0
 800beaa:	4618      	mov	r0, r3
 800beac:	f002 f9f6 	bl	800e29c <RCCEx_PLL2_Config>
 800beb0:	4603      	mov	r3, r0
 800beb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800beb6:	e00f      	b.n	800bed8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800beb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bebc:	3328      	adds	r3, #40	@ 0x28
 800bebe:	2100      	movs	r1, #0
 800bec0:	4618      	mov	r0, r3
 800bec2:	f002 fa9d 	bl	800e400 <RCCEx_PLL3_Config>
 800bec6:	4603      	mov	r3, r0
 800bec8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800becc:	e004      	b.n	800bed8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bece:	2301      	movs	r3, #1
 800bed0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bed4:	e000      	b.n	800bed8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800bed6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bed8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d10a      	bne.n	800bef6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bee0:	4b6e      	ldr	r3, [pc, #440]	@ (800c09c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bee4:	f023 0107 	bic.w	r1, r3, #7
 800bee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800beec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800beee:	4a6b      	ldr	r2, [pc, #428]	@ (800c09c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bef0:	430b      	orrs	r3, r1
 800bef2:	6513      	str	r3, [r2, #80]	@ 0x50
 800bef4:	e003      	b.n	800befe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bef6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800befa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800befe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf06:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800bf0a:	f04f 0b00 	mov.w	fp, #0
 800bf0e:	ea5a 030b 	orrs.w	r3, sl, fp
 800bf12:	d05b      	beq.n	800bfcc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800bf14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bf1c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800bf20:	d03b      	beq.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800bf22:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800bf26:	d834      	bhi.n	800bf92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bf28:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bf2c:	d037      	beq.n	800bf9e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800bf2e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bf32:	d82e      	bhi.n	800bf92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bf34:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bf38:	d033      	beq.n	800bfa2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800bf3a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bf3e:	d828      	bhi.n	800bf92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bf40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bf44:	d01a      	beq.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800bf46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bf4a:	d822      	bhi.n	800bf92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d003      	beq.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800bf50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bf54:	d007      	beq.n	800bf66 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800bf56:	e01c      	b.n	800bf92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf58:	4b50      	ldr	r3, [pc, #320]	@ (800c09c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bf5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf5c:	4a4f      	ldr	r2, [pc, #316]	@ (800c09c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bf5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bf62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bf64:	e01e      	b.n	800bfa4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bf66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf6a:	3308      	adds	r3, #8
 800bf6c:	2100      	movs	r1, #0
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f002 f994 	bl	800e29c <RCCEx_PLL2_Config>
 800bf74:	4603      	mov	r3, r0
 800bf76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bf7a:	e013      	b.n	800bfa4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bf7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf80:	3328      	adds	r3, #40	@ 0x28
 800bf82:	2100      	movs	r1, #0
 800bf84:	4618      	mov	r0, r3
 800bf86:	f002 fa3b 	bl	800e400 <RCCEx_PLL3_Config>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bf90:	e008      	b.n	800bfa4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bf92:	2301      	movs	r3, #1
 800bf94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bf98:	e004      	b.n	800bfa4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bf9a:	bf00      	nop
 800bf9c:	e002      	b.n	800bfa4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bf9e:	bf00      	nop
 800bfa0:	e000      	b.n	800bfa4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bfa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bfa4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d10b      	bne.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800bfac:	4b3b      	ldr	r3, [pc, #236]	@ (800c09c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bfae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bfb0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800bfb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bfbc:	4a37      	ldr	r2, [pc, #220]	@ (800c09c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bfbe:	430b      	orrs	r3, r1
 800bfc0:	6593      	str	r3, [r2, #88]	@ 0x58
 800bfc2:	e003      	b.n	800bfcc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bfc8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bfcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800bfd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bfdc:	2300      	movs	r3, #0
 800bfde:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800bfe2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800bfe6:	460b      	mov	r3, r1
 800bfe8:	4313      	orrs	r3, r2
 800bfea:	d05d      	beq.n	800c0a8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800bfec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bff0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bff4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800bff8:	d03b      	beq.n	800c072 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800bffa:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800bffe:	d834      	bhi.n	800c06a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c000:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c004:	d037      	beq.n	800c076 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800c006:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c00a:	d82e      	bhi.n	800c06a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c00c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c010:	d033      	beq.n	800c07a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800c012:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c016:	d828      	bhi.n	800c06a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c018:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c01c:	d01a      	beq.n	800c054 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800c01e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c022:	d822      	bhi.n	800c06a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c024:	2b00      	cmp	r3, #0
 800c026:	d003      	beq.n	800c030 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800c028:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c02c:	d007      	beq.n	800c03e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800c02e:	e01c      	b.n	800c06a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c030:	4b1a      	ldr	r3, [pc, #104]	@ (800c09c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c034:	4a19      	ldr	r2, [pc, #100]	@ (800c09c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c036:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c03a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c03c:	e01e      	b.n	800c07c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c03e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c042:	3308      	adds	r3, #8
 800c044:	2100      	movs	r1, #0
 800c046:	4618      	mov	r0, r3
 800c048:	f002 f928 	bl	800e29c <RCCEx_PLL2_Config>
 800c04c:	4603      	mov	r3, r0
 800c04e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c052:	e013      	b.n	800c07c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c058:	3328      	adds	r3, #40	@ 0x28
 800c05a:	2100      	movs	r1, #0
 800c05c:	4618      	mov	r0, r3
 800c05e:	f002 f9cf 	bl	800e400 <RCCEx_PLL3_Config>
 800c062:	4603      	mov	r3, r0
 800c064:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c068:	e008      	b.n	800c07c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c06a:	2301      	movs	r3, #1
 800c06c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c070:	e004      	b.n	800c07c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c072:	bf00      	nop
 800c074:	e002      	b.n	800c07c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c076:	bf00      	nop
 800c078:	e000      	b.n	800c07c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c07a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c07c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c080:	2b00      	cmp	r3, #0
 800c082:	d10d      	bne.n	800c0a0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c084:	4b05      	ldr	r3, [pc, #20]	@ (800c09c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c088:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800c08c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c090:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c094:	4a01      	ldr	r2, [pc, #4]	@ (800c09c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c096:	430b      	orrs	r3, r1
 800c098:	6593      	str	r3, [r2, #88]	@ 0x58
 800c09a:	e005      	b.n	800c0a8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800c09c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c0a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800c0a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800c0b4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c0be:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800c0c2:	460b      	mov	r3, r1
 800c0c4:	4313      	orrs	r3, r2
 800c0c6:	d03a      	beq.n	800c13e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800c0c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c0ce:	2b30      	cmp	r3, #48	@ 0x30
 800c0d0:	d01f      	beq.n	800c112 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800c0d2:	2b30      	cmp	r3, #48	@ 0x30
 800c0d4:	d819      	bhi.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800c0d6:	2b20      	cmp	r3, #32
 800c0d8:	d00c      	beq.n	800c0f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800c0da:	2b20      	cmp	r3, #32
 800c0dc:	d815      	bhi.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d019      	beq.n	800c116 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800c0e2:	2b10      	cmp	r3, #16
 800c0e4:	d111      	bne.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c0e6:	4baa      	ldr	r3, [pc, #680]	@ (800c390 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c0e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0ea:	4aa9      	ldr	r2, [pc, #676]	@ (800c390 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c0ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c0f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800c0f2:	e011      	b.n	800c118 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c0f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0f8:	3308      	adds	r3, #8
 800c0fa:	2102      	movs	r1, #2
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f002 f8cd 	bl	800e29c <RCCEx_PLL2_Config>
 800c102:	4603      	mov	r3, r0
 800c104:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800c108:	e006      	b.n	800c118 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c10a:	2301      	movs	r3, #1
 800c10c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c110:	e002      	b.n	800c118 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800c112:	bf00      	nop
 800c114:	e000      	b.n	800c118 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800c116:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c118:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d10a      	bne.n	800c136 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800c120:	4b9b      	ldr	r3, [pc, #620]	@ (800c390 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c124:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800c128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c12c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c12e:	4a98      	ldr	r2, [pc, #608]	@ (800c390 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c130:	430b      	orrs	r3, r1
 800c132:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c134:	e003      	b.n	800c13e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c136:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c13a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c13e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c146:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800c14a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c14e:	2300      	movs	r3, #0
 800c150:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c154:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800c158:	460b      	mov	r3, r1
 800c15a:	4313      	orrs	r3, r2
 800c15c:	d051      	beq.n	800c202 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800c15e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c164:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c168:	d035      	beq.n	800c1d6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800c16a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c16e:	d82e      	bhi.n	800c1ce <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c170:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c174:	d031      	beq.n	800c1da <HAL_RCCEx_PeriphCLKConfig+0x442>
 800c176:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c17a:	d828      	bhi.n	800c1ce <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c17c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c180:	d01a      	beq.n	800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800c182:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c186:	d822      	bhi.n	800c1ce <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d003      	beq.n	800c194 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800c18c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c190:	d007      	beq.n	800c1a2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800c192:	e01c      	b.n	800c1ce <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c194:	4b7e      	ldr	r3, [pc, #504]	@ (800c390 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c198:	4a7d      	ldr	r2, [pc, #500]	@ (800c390 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c19a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c19e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c1a0:	e01c      	b.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c1a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1a6:	3308      	adds	r3, #8
 800c1a8:	2100      	movs	r1, #0
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f002 f876 	bl	800e29c <RCCEx_PLL2_Config>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c1b6:	e011      	b.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c1b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1bc:	3328      	adds	r3, #40	@ 0x28
 800c1be:	2100      	movs	r1, #0
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f002 f91d 	bl	800e400 <RCCEx_PLL3_Config>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c1cc:	e006      	b.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c1d4:	e002      	b.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800c1d6:	bf00      	nop
 800c1d8:	e000      	b.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800c1da:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d10a      	bne.n	800c1fa <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c1e4:	4b6a      	ldr	r3, [pc, #424]	@ (800c390 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c1e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c1e8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800c1ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c1f2:	4a67      	ldr	r2, [pc, #412]	@ (800c390 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c1f4:	430b      	orrs	r3, r1
 800c1f6:	6513      	str	r3, [r2, #80]	@ 0x50
 800c1f8:	e003      	b.n	800c202 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c1fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c202:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800c20e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c212:	2300      	movs	r3, #0
 800c214:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c218:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800c21c:	460b      	mov	r3, r1
 800c21e:	4313      	orrs	r3, r2
 800c220:	d053      	beq.n	800c2ca <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800c222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c226:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c228:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c22c:	d033      	beq.n	800c296 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800c22e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c232:	d82c      	bhi.n	800c28e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c234:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c238:	d02f      	beq.n	800c29a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800c23a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c23e:	d826      	bhi.n	800c28e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c240:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c244:	d02b      	beq.n	800c29e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800c246:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c24a:	d820      	bhi.n	800c28e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c24c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c250:	d012      	beq.n	800c278 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800c252:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c256:	d81a      	bhi.n	800c28e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d022      	beq.n	800c2a2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800c25c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c260:	d115      	bne.n	800c28e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c266:	3308      	adds	r3, #8
 800c268:	2101      	movs	r1, #1
 800c26a:	4618      	mov	r0, r3
 800c26c:	f002 f816 	bl	800e29c <RCCEx_PLL2_Config>
 800c270:	4603      	mov	r3, r0
 800c272:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c276:	e015      	b.n	800c2a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c27c:	3328      	adds	r3, #40	@ 0x28
 800c27e:	2101      	movs	r1, #1
 800c280:	4618      	mov	r0, r3
 800c282:	f002 f8bd 	bl	800e400 <RCCEx_PLL3_Config>
 800c286:	4603      	mov	r3, r0
 800c288:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c28c:	e00a      	b.n	800c2a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c28e:	2301      	movs	r3, #1
 800c290:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c294:	e006      	b.n	800c2a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c296:	bf00      	nop
 800c298:	e004      	b.n	800c2a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c29a:	bf00      	nop
 800c29c:	e002      	b.n	800c2a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c29e:	bf00      	nop
 800c2a0:	e000      	b.n	800c2a4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c2a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c2a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d10a      	bne.n	800c2c2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c2ac:	4b38      	ldr	r3, [pc, #224]	@ (800c390 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c2ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c2b0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800c2b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c2ba:	4a35      	ldr	r2, [pc, #212]	@ (800c390 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c2bc:	430b      	orrs	r3, r1
 800c2be:	6513      	str	r3, [r2, #80]	@ 0x50
 800c2c0:	e003      	b.n	800c2ca <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c2c6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c2ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800c2d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c2da:	2300      	movs	r3, #0
 800c2dc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c2e0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c2e4:	460b      	mov	r3, r1
 800c2e6:	4313      	orrs	r3, r2
 800c2e8:	d058      	beq.n	800c39c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800c2ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c2f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c2f6:	d033      	beq.n	800c360 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800c2f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c2fc:	d82c      	bhi.n	800c358 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c2fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c302:	d02f      	beq.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800c304:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c308:	d826      	bhi.n	800c358 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c30a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c30e:	d02b      	beq.n	800c368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800c310:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c314:	d820      	bhi.n	800c358 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c316:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c31a:	d012      	beq.n	800c342 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800c31c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c320:	d81a      	bhi.n	800c358 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c322:	2b00      	cmp	r3, #0
 800c324:	d022      	beq.n	800c36c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800c326:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c32a:	d115      	bne.n	800c358 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c32c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c330:	3308      	adds	r3, #8
 800c332:	2101      	movs	r1, #1
 800c334:	4618      	mov	r0, r3
 800c336:	f001 ffb1 	bl	800e29c <RCCEx_PLL2_Config>
 800c33a:	4603      	mov	r3, r0
 800c33c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c340:	e015      	b.n	800c36e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c346:	3328      	adds	r3, #40	@ 0x28
 800c348:	2101      	movs	r1, #1
 800c34a:	4618      	mov	r0, r3
 800c34c:	f002 f858 	bl	800e400 <RCCEx_PLL3_Config>
 800c350:	4603      	mov	r3, r0
 800c352:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c356:	e00a      	b.n	800c36e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800c358:	2301      	movs	r3, #1
 800c35a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c35e:	e006      	b.n	800c36e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c360:	bf00      	nop
 800c362:	e004      	b.n	800c36e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c364:	bf00      	nop
 800c366:	e002      	b.n	800c36e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c368:	bf00      	nop
 800c36a:	e000      	b.n	800c36e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c36c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c36e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c372:	2b00      	cmp	r3, #0
 800c374:	d10e      	bne.n	800c394 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c376:	4b06      	ldr	r3, [pc, #24]	@ (800c390 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c37a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c37e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c382:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c386:	4a02      	ldr	r2, [pc, #8]	@ (800c390 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c388:	430b      	orrs	r3, r1
 800c38a:	6593      	str	r3, [r2, #88]	@ 0x58
 800c38c:	e006      	b.n	800c39c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800c38e:	bf00      	nop
 800c390:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c394:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c398:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c39c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800c3a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c3b2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800c3b6:	460b      	mov	r3, r1
 800c3b8:	4313      	orrs	r3, r2
 800c3ba:	d037      	beq.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800c3bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c3c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c3c6:	d00e      	beq.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800c3c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c3cc:	d816      	bhi.n	800c3fc <HAL_RCCEx_PeriphCLKConfig+0x664>
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d018      	beq.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800c3d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c3d6:	d111      	bne.n	800c3fc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3d8:	4bc4      	ldr	r3, [pc, #784]	@ (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c3da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3dc:	4ac3      	ldr	r2, [pc, #780]	@ (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c3de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c3e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c3e4:	e00f      	b.n	800c406 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c3e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3ea:	3308      	adds	r3, #8
 800c3ec:	2101      	movs	r1, #1
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f001 ff54 	bl	800e29c <RCCEx_PLL2_Config>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c3fa:	e004      	b.n	800c406 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c402:	e000      	b.n	800c406 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800c404:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c406:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d10a      	bne.n	800c424 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c40e:	4bb7      	ldr	r3, [pc, #732]	@ (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c410:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c412:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c41a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c41c:	4ab3      	ldr	r2, [pc, #716]	@ (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c41e:	430b      	orrs	r3, r1
 800c420:	6513      	str	r3, [r2, #80]	@ 0x50
 800c422:	e003      	b.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c424:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c428:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c42c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c434:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800c438:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c43c:	2300      	movs	r3, #0
 800c43e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c442:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800c446:	460b      	mov	r3, r1
 800c448:	4313      	orrs	r3, r2
 800c44a:	d039      	beq.n	800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800c44c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c450:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c452:	2b03      	cmp	r3, #3
 800c454:	d81c      	bhi.n	800c490 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800c456:	a201      	add	r2, pc, #4	@ (adr r2, 800c45c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800c458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c45c:	0800c499 	.word	0x0800c499
 800c460:	0800c46d 	.word	0x0800c46d
 800c464:	0800c47b 	.word	0x0800c47b
 800c468:	0800c499 	.word	0x0800c499
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c46c:	4b9f      	ldr	r3, [pc, #636]	@ (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c46e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c470:	4a9e      	ldr	r2, [pc, #632]	@ (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c472:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c476:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c478:	e00f      	b.n	800c49a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c47a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c47e:	3308      	adds	r3, #8
 800c480:	2102      	movs	r1, #2
 800c482:	4618      	mov	r0, r3
 800c484:	f001 ff0a 	bl	800e29c <RCCEx_PLL2_Config>
 800c488:	4603      	mov	r3, r0
 800c48a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c48e:	e004      	b.n	800c49a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c490:	2301      	movs	r3, #1
 800c492:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c496:	e000      	b.n	800c49a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800c498:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c49a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d10a      	bne.n	800c4b8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c4a2:	4b92      	ldr	r3, [pc, #584]	@ (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c4a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c4a6:	f023 0103 	bic.w	r1, r3, #3
 800c4aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c4b0:	4a8e      	ldr	r2, [pc, #568]	@ (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c4b2:	430b      	orrs	r3, r1
 800c4b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c4b6:	e003      	b.n	800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c4bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c4c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800c4cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c4d6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c4da:	460b      	mov	r3, r1
 800c4dc:	4313      	orrs	r3, r2
 800c4de:	f000 8099 	beq.w	800c614 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c4e2:	4b83      	ldr	r3, [pc, #524]	@ (800c6f0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	4a82      	ldr	r2, [pc, #520]	@ (800c6f0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c4e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c4ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c4ee:	f7f8 fa3d 	bl	800496c <HAL_GetTick>
 800c4f2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c4f6:	e00b      	b.n	800c510 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c4f8:	f7f8 fa38 	bl	800496c <HAL_GetTick>
 800c4fc:	4602      	mov	r2, r0
 800c4fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c502:	1ad3      	subs	r3, r2, r3
 800c504:	2b64      	cmp	r3, #100	@ 0x64
 800c506:	d903      	bls.n	800c510 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800c508:	2303      	movs	r3, #3
 800c50a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c50e:	e005      	b.n	800c51c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c510:	4b77      	ldr	r3, [pc, #476]	@ (800c6f0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d0ed      	beq.n	800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800c51c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c520:	2b00      	cmp	r3, #0
 800c522:	d173      	bne.n	800c60c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c524:	4b71      	ldr	r3, [pc, #452]	@ (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c526:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c52c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c530:	4053      	eors	r3, r2
 800c532:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c536:	2b00      	cmp	r3, #0
 800c538:	d015      	beq.n	800c566 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c53a:	4b6c      	ldr	r3, [pc, #432]	@ (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c53c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c53e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c542:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c546:	4b69      	ldr	r3, [pc, #420]	@ (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c54a:	4a68      	ldr	r2, [pc, #416]	@ (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c54c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c550:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c552:	4b66      	ldr	r3, [pc, #408]	@ (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c556:	4a65      	ldr	r2, [pc, #404]	@ (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c558:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c55c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c55e:	4a63      	ldr	r2, [pc, #396]	@ (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c560:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c564:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c566:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c56a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c56e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c572:	d118      	bne.n	800c5a6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c574:	f7f8 f9fa 	bl	800496c <HAL_GetTick>
 800c578:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c57c:	e00d      	b.n	800c59a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c57e:	f7f8 f9f5 	bl	800496c <HAL_GetTick>
 800c582:	4602      	mov	r2, r0
 800c584:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c588:	1ad2      	subs	r2, r2, r3
 800c58a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c58e:	429a      	cmp	r2, r3
 800c590:	d903      	bls.n	800c59a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800c592:	2303      	movs	r3, #3
 800c594:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800c598:	e005      	b.n	800c5a6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c59a:	4b54      	ldr	r3, [pc, #336]	@ (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c59c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c59e:	f003 0302 	and.w	r3, r3, #2
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d0eb      	beq.n	800c57e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800c5a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d129      	bne.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c5ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c5b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c5ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c5be:	d10e      	bne.n	800c5de <HAL_RCCEx_PeriphCLKConfig+0x846>
 800c5c0:	4b4a      	ldr	r3, [pc, #296]	@ (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c5c2:	691b      	ldr	r3, [r3, #16]
 800c5c4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800c5c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c5d0:	091a      	lsrs	r2, r3, #4
 800c5d2:	4b48      	ldr	r3, [pc, #288]	@ (800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800c5d4:	4013      	ands	r3, r2
 800c5d6:	4a45      	ldr	r2, [pc, #276]	@ (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c5d8:	430b      	orrs	r3, r1
 800c5da:	6113      	str	r3, [r2, #16]
 800c5dc:	e005      	b.n	800c5ea <HAL_RCCEx_PeriphCLKConfig+0x852>
 800c5de:	4b43      	ldr	r3, [pc, #268]	@ (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c5e0:	691b      	ldr	r3, [r3, #16]
 800c5e2:	4a42      	ldr	r2, [pc, #264]	@ (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c5e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c5e8:	6113      	str	r3, [r2, #16]
 800c5ea:	4b40      	ldr	r3, [pc, #256]	@ (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c5ec:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800c5ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c5f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c5fa:	4a3c      	ldr	r2, [pc, #240]	@ (800c6ec <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c5fc:	430b      	orrs	r3, r1
 800c5fe:	6713      	str	r3, [r2, #112]	@ 0x70
 800c600:	e008      	b.n	800c614 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c602:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c606:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800c60a:	e003      	b.n	800c614 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c60c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c610:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c61c:	f002 0301 	and.w	r3, r2, #1
 800c620:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c624:	2300      	movs	r3, #0
 800c626:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c62a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800c62e:	460b      	mov	r3, r1
 800c630:	4313      	orrs	r3, r2
 800c632:	f000 808f 	beq.w	800c754 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c63a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c63c:	2b28      	cmp	r3, #40	@ 0x28
 800c63e:	d871      	bhi.n	800c724 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800c640:	a201      	add	r2, pc, #4	@ (adr r2, 800c648 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800c642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c646:	bf00      	nop
 800c648:	0800c72d 	.word	0x0800c72d
 800c64c:	0800c725 	.word	0x0800c725
 800c650:	0800c725 	.word	0x0800c725
 800c654:	0800c725 	.word	0x0800c725
 800c658:	0800c725 	.word	0x0800c725
 800c65c:	0800c725 	.word	0x0800c725
 800c660:	0800c725 	.word	0x0800c725
 800c664:	0800c725 	.word	0x0800c725
 800c668:	0800c6f9 	.word	0x0800c6f9
 800c66c:	0800c725 	.word	0x0800c725
 800c670:	0800c725 	.word	0x0800c725
 800c674:	0800c725 	.word	0x0800c725
 800c678:	0800c725 	.word	0x0800c725
 800c67c:	0800c725 	.word	0x0800c725
 800c680:	0800c725 	.word	0x0800c725
 800c684:	0800c725 	.word	0x0800c725
 800c688:	0800c70f 	.word	0x0800c70f
 800c68c:	0800c725 	.word	0x0800c725
 800c690:	0800c725 	.word	0x0800c725
 800c694:	0800c725 	.word	0x0800c725
 800c698:	0800c725 	.word	0x0800c725
 800c69c:	0800c725 	.word	0x0800c725
 800c6a0:	0800c725 	.word	0x0800c725
 800c6a4:	0800c725 	.word	0x0800c725
 800c6a8:	0800c72d 	.word	0x0800c72d
 800c6ac:	0800c725 	.word	0x0800c725
 800c6b0:	0800c725 	.word	0x0800c725
 800c6b4:	0800c725 	.word	0x0800c725
 800c6b8:	0800c725 	.word	0x0800c725
 800c6bc:	0800c725 	.word	0x0800c725
 800c6c0:	0800c725 	.word	0x0800c725
 800c6c4:	0800c725 	.word	0x0800c725
 800c6c8:	0800c72d 	.word	0x0800c72d
 800c6cc:	0800c725 	.word	0x0800c725
 800c6d0:	0800c725 	.word	0x0800c725
 800c6d4:	0800c725 	.word	0x0800c725
 800c6d8:	0800c725 	.word	0x0800c725
 800c6dc:	0800c725 	.word	0x0800c725
 800c6e0:	0800c725 	.word	0x0800c725
 800c6e4:	0800c725 	.word	0x0800c725
 800c6e8:	0800c72d 	.word	0x0800c72d
 800c6ec:	58024400 	.word	0x58024400
 800c6f0:	58024800 	.word	0x58024800
 800c6f4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c6f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6fc:	3308      	adds	r3, #8
 800c6fe:	2101      	movs	r1, #1
 800c700:	4618      	mov	r0, r3
 800c702:	f001 fdcb 	bl	800e29c <RCCEx_PLL2_Config>
 800c706:	4603      	mov	r3, r0
 800c708:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c70c:	e00f      	b.n	800c72e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c70e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c712:	3328      	adds	r3, #40	@ 0x28
 800c714:	2101      	movs	r1, #1
 800c716:	4618      	mov	r0, r3
 800c718:	f001 fe72 	bl	800e400 <RCCEx_PLL3_Config>
 800c71c:	4603      	mov	r3, r0
 800c71e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c722:	e004      	b.n	800c72e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c724:	2301      	movs	r3, #1
 800c726:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c72a:	e000      	b.n	800c72e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800c72c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c72e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c732:	2b00      	cmp	r3, #0
 800c734:	d10a      	bne.n	800c74c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c736:	4bbf      	ldr	r3, [pc, #764]	@ (800ca34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c73a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800c73e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c742:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c744:	4abb      	ldr	r2, [pc, #748]	@ (800ca34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c746:	430b      	orrs	r3, r1
 800c748:	6553      	str	r3, [r2, #84]	@ 0x54
 800c74a:	e003      	b.n	800c754 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c74c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c750:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75c:	f002 0302 	and.w	r3, r2, #2
 800c760:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c764:	2300      	movs	r3, #0
 800c766:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c76a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800c76e:	460b      	mov	r3, r1
 800c770:	4313      	orrs	r3, r2
 800c772:	d041      	beq.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c778:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c77a:	2b05      	cmp	r3, #5
 800c77c:	d824      	bhi.n	800c7c8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800c77e:	a201      	add	r2, pc, #4	@ (adr r2, 800c784 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800c780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c784:	0800c7d1 	.word	0x0800c7d1
 800c788:	0800c79d 	.word	0x0800c79d
 800c78c:	0800c7b3 	.word	0x0800c7b3
 800c790:	0800c7d1 	.word	0x0800c7d1
 800c794:	0800c7d1 	.word	0x0800c7d1
 800c798:	0800c7d1 	.word	0x0800c7d1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c79c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7a0:	3308      	adds	r3, #8
 800c7a2:	2101      	movs	r1, #1
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f001 fd79 	bl	800e29c <RCCEx_PLL2_Config>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c7b0:	e00f      	b.n	800c7d2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c7b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7b6:	3328      	adds	r3, #40	@ 0x28
 800c7b8:	2101      	movs	r1, #1
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f001 fe20 	bl	800e400 <RCCEx_PLL3_Config>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c7c6:	e004      	b.n	800c7d2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c7ce:	e000      	b.n	800c7d2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800c7d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d10a      	bne.n	800c7f0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c7da:	4b96      	ldr	r3, [pc, #600]	@ (800ca34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c7dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c7de:	f023 0107 	bic.w	r1, r3, #7
 800c7e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7e8:	4a92      	ldr	r2, [pc, #584]	@ (800ca34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c7ea:	430b      	orrs	r3, r1
 800c7ec:	6553      	str	r3, [r2, #84]	@ 0x54
 800c7ee:	e003      	b.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c7f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c800:	f002 0304 	and.w	r3, r2, #4
 800c804:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c808:	2300      	movs	r3, #0
 800c80a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c80e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c812:	460b      	mov	r3, r1
 800c814:	4313      	orrs	r3, r2
 800c816:	d044      	beq.n	800c8a2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c81c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c820:	2b05      	cmp	r3, #5
 800c822:	d825      	bhi.n	800c870 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800c824:	a201      	add	r2, pc, #4	@ (adr r2, 800c82c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800c826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c82a:	bf00      	nop
 800c82c:	0800c879 	.word	0x0800c879
 800c830:	0800c845 	.word	0x0800c845
 800c834:	0800c85b 	.word	0x0800c85b
 800c838:	0800c879 	.word	0x0800c879
 800c83c:	0800c879 	.word	0x0800c879
 800c840:	0800c879 	.word	0x0800c879
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c844:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c848:	3308      	adds	r3, #8
 800c84a:	2101      	movs	r1, #1
 800c84c:	4618      	mov	r0, r3
 800c84e:	f001 fd25 	bl	800e29c <RCCEx_PLL2_Config>
 800c852:	4603      	mov	r3, r0
 800c854:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c858:	e00f      	b.n	800c87a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c85a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c85e:	3328      	adds	r3, #40	@ 0x28
 800c860:	2101      	movs	r1, #1
 800c862:	4618      	mov	r0, r3
 800c864:	f001 fdcc 	bl	800e400 <RCCEx_PLL3_Config>
 800c868:	4603      	mov	r3, r0
 800c86a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c86e:	e004      	b.n	800c87a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c870:	2301      	movs	r3, #1
 800c872:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c876:	e000      	b.n	800c87a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800c878:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c87a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d10b      	bne.n	800c89a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c882:	4b6c      	ldr	r3, [pc, #432]	@ (800ca34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c886:	f023 0107 	bic.w	r1, r3, #7
 800c88a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c88e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c892:	4a68      	ldr	r2, [pc, #416]	@ (800ca34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c894:	430b      	orrs	r3, r1
 800c896:	6593      	str	r3, [r2, #88]	@ 0x58
 800c898:	e003      	b.n	800c8a2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c89a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c89e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c8a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8aa:	f002 0320 	and.w	r3, r2, #32
 800c8ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c8b8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800c8bc:	460b      	mov	r3, r1
 800c8be:	4313      	orrs	r3, r2
 800c8c0:	d055      	beq.n	800c96e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c8c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c8ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c8ce:	d033      	beq.n	800c938 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800c8d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c8d4:	d82c      	bhi.n	800c930 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c8d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8da:	d02f      	beq.n	800c93c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c8dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8e0:	d826      	bhi.n	800c930 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c8e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c8e6:	d02b      	beq.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c8e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c8ec:	d820      	bhi.n	800c930 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c8ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c8f2:	d012      	beq.n	800c91a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800c8f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c8f8:	d81a      	bhi.n	800c930 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d022      	beq.n	800c944 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c8fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c902:	d115      	bne.n	800c930 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c908:	3308      	adds	r3, #8
 800c90a:	2100      	movs	r1, #0
 800c90c:	4618      	mov	r0, r3
 800c90e:	f001 fcc5 	bl	800e29c <RCCEx_PLL2_Config>
 800c912:	4603      	mov	r3, r0
 800c914:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c918:	e015      	b.n	800c946 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c91a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c91e:	3328      	adds	r3, #40	@ 0x28
 800c920:	2102      	movs	r1, #2
 800c922:	4618      	mov	r0, r3
 800c924:	f001 fd6c 	bl	800e400 <RCCEx_PLL3_Config>
 800c928:	4603      	mov	r3, r0
 800c92a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c92e:	e00a      	b.n	800c946 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c930:	2301      	movs	r3, #1
 800c932:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c936:	e006      	b.n	800c946 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c938:	bf00      	nop
 800c93a:	e004      	b.n	800c946 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c93c:	bf00      	nop
 800c93e:	e002      	b.n	800c946 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c940:	bf00      	nop
 800c942:	e000      	b.n	800c946 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c944:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c946:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d10b      	bne.n	800c966 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c94e:	4b39      	ldr	r3, [pc, #228]	@ (800ca34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c952:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c95a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c95e:	4a35      	ldr	r2, [pc, #212]	@ (800ca34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c960:	430b      	orrs	r3, r1
 800c962:	6553      	str	r3, [r2, #84]	@ 0x54
 800c964:	e003      	b.n	800c96e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c966:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c96a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c96e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c976:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800c97a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c97e:	2300      	movs	r3, #0
 800c980:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c984:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800c988:	460b      	mov	r3, r1
 800c98a:	4313      	orrs	r3, r2
 800c98c:	d058      	beq.n	800ca40 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c98e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c992:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c996:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c99a:	d033      	beq.n	800ca04 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800c99c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c9a0:	d82c      	bhi.n	800c9fc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c9a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c9a6:	d02f      	beq.n	800ca08 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c9a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c9ac:	d826      	bhi.n	800c9fc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c9ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c9b2:	d02b      	beq.n	800ca0c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c9b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c9b8:	d820      	bhi.n	800c9fc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c9ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c9be:	d012      	beq.n	800c9e6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800c9c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c9c4:	d81a      	bhi.n	800c9fc <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d022      	beq.n	800ca10 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c9ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c9ce:	d115      	bne.n	800c9fc <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c9d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9d4:	3308      	adds	r3, #8
 800c9d6:	2100      	movs	r1, #0
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f001 fc5f 	bl	800e29c <RCCEx_PLL2_Config>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c9e4:	e015      	b.n	800ca12 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c9e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9ea:	3328      	adds	r3, #40	@ 0x28
 800c9ec:	2102      	movs	r1, #2
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f001 fd06 	bl	800e400 <RCCEx_PLL3_Config>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c9fa:	e00a      	b.n	800ca12 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ca02:	e006      	b.n	800ca12 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ca04:	bf00      	nop
 800ca06:	e004      	b.n	800ca12 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ca08:	bf00      	nop
 800ca0a:	e002      	b.n	800ca12 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ca0c:	bf00      	nop
 800ca0e:	e000      	b.n	800ca12 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ca10:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d10e      	bne.n	800ca38 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ca1a:	4b06      	ldr	r3, [pc, #24]	@ (800ca34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ca1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca1e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800ca22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ca2a:	4a02      	ldr	r2, [pc, #8]	@ (800ca34 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ca2c:	430b      	orrs	r3, r1
 800ca2e:	6593      	str	r3, [r2, #88]	@ 0x58
 800ca30:	e006      	b.n	800ca40 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800ca32:	bf00      	nop
 800ca34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ca40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca48:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800ca4c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ca50:	2300      	movs	r3, #0
 800ca52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ca56:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800ca5a:	460b      	mov	r3, r1
 800ca5c:	4313      	orrs	r3, r2
 800ca5e:	d055      	beq.n	800cb0c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ca60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ca68:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800ca6c:	d033      	beq.n	800cad6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800ca6e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800ca72:	d82c      	bhi.n	800cace <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ca74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ca78:	d02f      	beq.n	800cada <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800ca7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ca7e:	d826      	bhi.n	800cace <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ca80:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ca84:	d02b      	beq.n	800cade <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800ca86:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ca8a:	d820      	bhi.n	800cace <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ca8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ca90:	d012      	beq.n	800cab8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800ca92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ca96:	d81a      	bhi.n	800cace <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d022      	beq.n	800cae2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800ca9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800caa0:	d115      	bne.n	800cace <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800caa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caa6:	3308      	adds	r3, #8
 800caa8:	2100      	movs	r1, #0
 800caaa:	4618      	mov	r0, r3
 800caac:	f001 fbf6 	bl	800e29c <RCCEx_PLL2_Config>
 800cab0:	4603      	mov	r3, r0
 800cab2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800cab6:	e015      	b.n	800cae4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cabc:	3328      	adds	r3, #40	@ 0x28
 800cabe:	2102      	movs	r1, #2
 800cac0:	4618      	mov	r0, r3
 800cac2:	f001 fc9d 	bl	800e400 <RCCEx_PLL3_Config>
 800cac6:	4603      	mov	r3, r0
 800cac8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800cacc:	e00a      	b.n	800cae4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cace:	2301      	movs	r3, #1
 800cad0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cad4:	e006      	b.n	800cae4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800cad6:	bf00      	nop
 800cad8:	e004      	b.n	800cae4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800cada:	bf00      	nop
 800cadc:	e002      	b.n	800cae4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800cade:	bf00      	nop
 800cae0:	e000      	b.n	800cae4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800cae2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cae4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d10b      	bne.n	800cb04 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800caec:	4ba0      	ldr	r3, [pc, #640]	@ (800cd70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800caee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800caf0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800caf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caf8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800cafc:	4a9c      	ldr	r2, [pc, #624]	@ (800cd70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cafe:	430b      	orrs	r3, r1
 800cb00:	6593      	str	r3, [r2, #88]	@ 0x58
 800cb02:	e003      	b.n	800cb0c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800cb0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb14:	f002 0308 	and.w	r3, r2, #8
 800cb18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800cb22:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800cb26:	460b      	mov	r3, r1
 800cb28:	4313      	orrs	r3, r2
 800cb2a:	d01e      	beq.n	800cb6a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800cb2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb38:	d10c      	bne.n	800cb54 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800cb3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb3e:	3328      	adds	r3, #40	@ 0x28
 800cb40:	2102      	movs	r1, #2
 800cb42:	4618      	mov	r0, r3
 800cb44:	f001 fc5c 	bl	800e400 <RCCEx_PLL3_Config>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d002      	beq.n	800cb54 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800cb4e:	2301      	movs	r3, #1
 800cb50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800cb54:	4b86      	ldr	r3, [pc, #536]	@ (800cd70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cb56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb58:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cb5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb64:	4a82      	ldr	r2, [pc, #520]	@ (800cd70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cb66:	430b      	orrs	r3, r1
 800cb68:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cb6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb72:	f002 0310 	and.w	r3, r2, #16
 800cb76:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cb80:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800cb84:	460b      	mov	r3, r1
 800cb86:	4313      	orrs	r3, r2
 800cb88:	d01e      	beq.n	800cbc8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800cb8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cb92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb96:	d10c      	bne.n	800cbb2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800cb98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb9c:	3328      	adds	r3, #40	@ 0x28
 800cb9e:	2102      	movs	r1, #2
 800cba0:	4618      	mov	r0, r3
 800cba2:	f001 fc2d 	bl	800e400 <RCCEx_PLL3_Config>
 800cba6:	4603      	mov	r3, r0
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d002      	beq.n	800cbb2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800cbac:	2301      	movs	r3, #1
 800cbae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cbb2:	4b6f      	ldr	r3, [pc, #444]	@ (800cd70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cbb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cbb6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800cbba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cbc2:	4a6b      	ldr	r2, [pc, #428]	@ (800cd70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cbc4:	430b      	orrs	r3, r1
 800cbc6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cbc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800cbd4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cbda:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800cbde:	460b      	mov	r3, r1
 800cbe0:	4313      	orrs	r3, r2
 800cbe2:	d03e      	beq.n	800cc62 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800cbe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbe8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800cbec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cbf0:	d022      	beq.n	800cc38 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800cbf2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cbf6:	d81b      	bhi.n	800cc30 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d003      	beq.n	800cc04 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800cbfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cc00:	d00b      	beq.n	800cc1a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800cc02:	e015      	b.n	800cc30 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cc04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc08:	3308      	adds	r3, #8
 800cc0a:	2100      	movs	r1, #0
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f001 fb45 	bl	800e29c <RCCEx_PLL2_Config>
 800cc12:	4603      	mov	r3, r0
 800cc14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800cc18:	e00f      	b.n	800cc3a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cc1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc1e:	3328      	adds	r3, #40	@ 0x28
 800cc20:	2102      	movs	r1, #2
 800cc22:	4618      	mov	r0, r3
 800cc24:	f001 fbec 	bl	800e400 <RCCEx_PLL3_Config>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800cc2e:	e004      	b.n	800cc3a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cc30:	2301      	movs	r3, #1
 800cc32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cc36:	e000      	b.n	800cc3a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800cc38:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d10b      	bne.n	800cc5a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cc42:	4b4b      	ldr	r3, [pc, #300]	@ (800cd70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cc44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc46:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800cc4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800cc52:	4a47      	ldr	r2, [pc, #284]	@ (800cd70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cc54:	430b      	orrs	r3, r1
 800cc56:	6593      	str	r3, [r2, #88]	@ 0x58
 800cc58:	e003      	b.n	800cc62 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc5e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800cc62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc6a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800cc6e:	673b      	str	r3, [r7, #112]	@ 0x70
 800cc70:	2300      	movs	r3, #0
 800cc72:	677b      	str	r3, [r7, #116]	@ 0x74
 800cc74:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800cc78:	460b      	mov	r3, r1
 800cc7a:	4313      	orrs	r3, r2
 800cc7c:	d03b      	beq.n	800ccf6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800cc7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cc86:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800cc8a:	d01f      	beq.n	800cccc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800cc8c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800cc90:	d818      	bhi.n	800ccc4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800cc92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cc96:	d003      	beq.n	800cca0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800cc98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cc9c:	d007      	beq.n	800ccae <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800cc9e:	e011      	b.n	800ccc4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cca0:	4b33      	ldr	r3, [pc, #204]	@ (800cd70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cca4:	4a32      	ldr	r2, [pc, #200]	@ (800cd70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cca6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ccaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ccac:	e00f      	b.n	800ccce <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ccae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccb2:	3328      	adds	r3, #40	@ 0x28
 800ccb4:	2101      	movs	r1, #1
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f001 fba2 	bl	800e400 <RCCEx_PLL3_Config>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800ccc2:	e004      	b.n	800ccce <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ccca:	e000      	b.n	800ccce <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800cccc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ccce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d10b      	bne.n	800ccee <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ccd6:	4b26      	ldr	r3, [pc, #152]	@ (800cd70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ccd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ccda:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ccde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cce6:	4a22      	ldr	r2, [pc, #136]	@ (800cd70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cce8:	430b      	orrs	r3, r1
 800ccea:	6553      	str	r3, [r2, #84]	@ 0x54
 800ccec:	e003      	b.n	800ccf6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ccf2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ccf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccfe:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800cd02:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cd04:	2300      	movs	r3, #0
 800cd06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cd08:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800cd0c:	460b      	mov	r3, r1
 800cd0e:	4313      	orrs	r3, r2
 800cd10:	d034      	beq.n	800cd7c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800cd12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d003      	beq.n	800cd24 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800cd1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd20:	d007      	beq.n	800cd32 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800cd22:	e011      	b.n	800cd48 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cd24:	4b12      	ldr	r3, [pc, #72]	@ (800cd70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cd26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd28:	4a11      	ldr	r2, [pc, #68]	@ (800cd70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cd2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cd2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800cd30:	e00e      	b.n	800cd50 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cd32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd36:	3308      	adds	r3, #8
 800cd38:	2102      	movs	r1, #2
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f001 faae 	bl	800e29c <RCCEx_PLL2_Config>
 800cd40:	4603      	mov	r3, r0
 800cd42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800cd46:	e003      	b.n	800cd50 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800cd48:	2301      	movs	r3, #1
 800cd4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cd4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d10d      	bne.n	800cd74 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800cd58:	4b05      	ldr	r3, [pc, #20]	@ (800cd70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cd5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cd5c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cd60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd66:	4a02      	ldr	r2, [pc, #8]	@ (800cd70 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cd68:	430b      	orrs	r3, r1
 800cd6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800cd6c:	e006      	b.n	800cd7c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800cd6e:	bf00      	nop
 800cd70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800cd7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd84:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800cd88:	663b      	str	r3, [r7, #96]	@ 0x60
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	667b      	str	r3, [r7, #100]	@ 0x64
 800cd8e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800cd92:	460b      	mov	r3, r1
 800cd94:	4313      	orrs	r3, r2
 800cd96:	d00c      	beq.n	800cdb2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800cd98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd9c:	3328      	adds	r3, #40	@ 0x28
 800cd9e:	2102      	movs	r1, #2
 800cda0:	4618      	mov	r0, r3
 800cda2:	f001 fb2d 	bl	800e400 <RCCEx_PLL3_Config>
 800cda6:	4603      	mov	r3, r0
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d002      	beq.n	800cdb2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800cdac:	2301      	movs	r3, #1
 800cdae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800cdb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdba:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800cdbe:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cdc4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800cdc8:	460b      	mov	r3, r1
 800cdca:	4313      	orrs	r3, r2
 800cdcc:	d036      	beq.n	800ce3c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800cdce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdd2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cdd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cdd8:	d018      	beq.n	800ce0c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800cdda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cdde:	d811      	bhi.n	800ce04 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800cde0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cde4:	d014      	beq.n	800ce10 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800cde6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cdea:	d80b      	bhi.n	800ce04 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d011      	beq.n	800ce14 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800cdf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cdf4:	d106      	bne.n	800ce04 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cdf6:	4bb7      	ldr	r3, [pc, #732]	@ (800d0d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cdf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdfa:	4ab6      	ldr	r2, [pc, #728]	@ (800d0d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cdfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ce00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ce02:	e008      	b.n	800ce16 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ce04:	2301      	movs	r3, #1
 800ce06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ce0a:	e004      	b.n	800ce16 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ce0c:	bf00      	nop
 800ce0e:	e002      	b.n	800ce16 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ce10:	bf00      	nop
 800ce12:	e000      	b.n	800ce16 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ce14:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ce16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d10a      	bne.n	800ce34 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ce1e:	4bad      	ldr	r3, [pc, #692]	@ (800d0d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ce20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce22:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ce26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ce2c:	4aa9      	ldr	r2, [pc, #676]	@ (800d0d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ce2e:	430b      	orrs	r3, r1
 800ce30:	6553      	str	r3, [r2, #84]	@ 0x54
 800ce32:	e003      	b.n	800ce3c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ce38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ce3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce44:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800ce48:	653b      	str	r3, [r7, #80]	@ 0x50
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	657b      	str	r3, [r7, #84]	@ 0x54
 800ce4e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800ce52:	460b      	mov	r3, r1
 800ce54:	4313      	orrs	r3, r2
 800ce56:	d009      	beq.n	800ce6c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ce58:	4b9e      	ldr	r3, [pc, #632]	@ (800d0d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ce5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce5c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ce60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce66:	4a9b      	ldr	r2, [pc, #620]	@ (800d0d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ce68:	430b      	orrs	r3, r1
 800ce6a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ce6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce74:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800ce78:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ce7e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800ce82:	460b      	mov	r3, r1
 800ce84:	4313      	orrs	r3, r2
 800ce86:	d009      	beq.n	800ce9c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ce88:	4b92      	ldr	r3, [pc, #584]	@ (800d0d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ce8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce8c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800ce90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ce96:	4a8f      	ldr	r2, [pc, #572]	@ (800d0d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ce98:	430b      	orrs	r3, r1
 800ce9a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ce9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cea4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800cea8:	643b      	str	r3, [r7, #64]	@ 0x40
 800ceaa:	2300      	movs	r3, #0
 800ceac:	647b      	str	r3, [r7, #68]	@ 0x44
 800ceae:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800ceb2:	460b      	mov	r3, r1
 800ceb4:	4313      	orrs	r3, r2
 800ceb6:	d00e      	beq.n	800ced6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ceb8:	4b86      	ldr	r3, [pc, #536]	@ (800d0d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ceba:	691b      	ldr	r3, [r3, #16]
 800cebc:	4a85      	ldr	r2, [pc, #532]	@ (800d0d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cebe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800cec2:	6113      	str	r3, [r2, #16]
 800cec4:	4b83      	ldr	r3, [pc, #524]	@ (800d0d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cec6:	6919      	ldr	r1, [r3, #16]
 800cec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cecc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ced0:	4a80      	ldr	r2, [pc, #512]	@ (800d0d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ced2:	430b      	orrs	r3, r1
 800ced4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ced6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ceda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cede:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800cee2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cee4:	2300      	movs	r3, #0
 800cee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cee8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800ceec:	460b      	mov	r3, r1
 800ceee:	4313      	orrs	r3, r2
 800cef0:	d009      	beq.n	800cf06 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800cef2:	4b78      	ldr	r3, [pc, #480]	@ (800d0d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cef6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800cefa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cefe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf00:	4a74      	ldr	r2, [pc, #464]	@ (800d0d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cf02:	430b      	orrs	r3, r1
 800cf04:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800cf06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf0e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800cf12:	633b      	str	r3, [r7, #48]	@ 0x30
 800cf14:	2300      	movs	r3, #0
 800cf16:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf18:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800cf1c:	460b      	mov	r3, r1
 800cf1e:	4313      	orrs	r3, r2
 800cf20:	d00a      	beq.n	800cf38 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cf22:	4b6c      	ldr	r3, [pc, #432]	@ (800d0d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cf24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf26:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800cf2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf32:	4a68      	ldr	r2, [pc, #416]	@ (800d0d4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cf34:	430b      	orrs	r3, r1
 800cf36:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800cf38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf40:	2100      	movs	r1, #0
 800cf42:	62b9      	str	r1, [r7, #40]	@ 0x28
 800cf44:	f003 0301 	and.w	r3, r3, #1
 800cf48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cf4a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800cf4e:	460b      	mov	r3, r1
 800cf50:	4313      	orrs	r3, r2
 800cf52:	d011      	beq.n	800cf78 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cf54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf58:	3308      	adds	r3, #8
 800cf5a:	2100      	movs	r1, #0
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f001 f99d 	bl	800e29c <RCCEx_PLL2_Config>
 800cf62:	4603      	mov	r3, r0
 800cf64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cf68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d003      	beq.n	800cf78 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cf74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800cf78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf80:	2100      	movs	r1, #0
 800cf82:	6239      	str	r1, [r7, #32]
 800cf84:	f003 0302 	and.w	r3, r3, #2
 800cf88:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf8a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800cf8e:	460b      	mov	r3, r1
 800cf90:	4313      	orrs	r3, r2
 800cf92:	d011      	beq.n	800cfb8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cf94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf98:	3308      	adds	r3, #8
 800cf9a:	2101      	movs	r1, #1
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f001 f97d 	bl	800e29c <RCCEx_PLL2_Config>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cfa8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d003      	beq.n	800cfb8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cfb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cfb4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800cfb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc0:	2100      	movs	r1, #0
 800cfc2:	61b9      	str	r1, [r7, #24]
 800cfc4:	f003 0304 	and.w	r3, r3, #4
 800cfc8:	61fb      	str	r3, [r7, #28]
 800cfca:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800cfce:	460b      	mov	r3, r1
 800cfd0:	4313      	orrs	r3, r2
 800cfd2:	d011      	beq.n	800cff8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cfd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfd8:	3308      	adds	r3, #8
 800cfda:	2102      	movs	r1, #2
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f001 f95d 	bl	800e29c <RCCEx_PLL2_Config>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cfe8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d003      	beq.n	800cff8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cff0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cff4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800cff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d000:	2100      	movs	r1, #0
 800d002:	6139      	str	r1, [r7, #16]
 800d004:	f003 0308 	and.w	r3, r3, #8
 800d008:	617b      	str	r3, [r7, #20]
 800d00a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d00e:	460b      	mov	r3, r1
 800d010:	4313      	orrs	r3, r2
 800d012:	d011      	beq.n	800d038 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d018:	3328      	adds	r3, #40	@ 0x28
 800d01a:	2100      	movs	r1, #0
 800d01c:	4618      	mov	r0, r3
 800d01e:	f001 f9ef 	bl	800e400 <RCCEx_PLL3_Config>
 800d022:	4603      	mov	r3, r0
 800d024:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800d028:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d003      	beq.n	800d038 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d030:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d034:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800d038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d040:	2100      	movs	r1, #0
 800d042:	60b9      	str	r1, [r7, #8]
 800d044:	f003 0310 	and.w	r3, r3, #16
 800d048:	60fb      	str	r3, [r7, #12]
 800d04a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d04e:	460b      	mov	r3, r1
 800d050:	4313      	orrs	r3, r2
 800d052:	d011      	beq.n	800d078 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d058:	3328      	adds	r3, #40	@ 0x28
 800d05a:	2101      	movs	r1, #1
 800d05c:	4618      	mov	r0, r3
 800d05e:	f001 f9cf 	bl	800e400 <RCCEx_PLL3_Config>
 800d062:	4603      	mov	r3, r0
 800d064:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d068:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d003      	beq.n	800d078 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d070:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d074:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800d078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d080:	2100      	movs	r1, #0
 800d082:	6039      	str	r1, [r7, #0]
 800d084:	f003 0320 	and.w	r3, r3, #32
 800d088:	607b      	str	r3, [r7, #4]
 800d08a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d08e:	460b      	mov	r3, r1
 800d090:	4313      	orrs	r3, r2
 800d092:	d011      	beq.n	800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d098:	3328      	adds	r3, #40	@ 0x28
 800d09a:	2102      	movs	r1, #2
 800d09c:	4618      	mov	r0, r3
 800d09e:	f001 f9af 	bl	800e400 <RCCEx_PLL3_Config>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d0a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d003      	beq.n	800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d0b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800d0b8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d101      	bne.n	800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	e000      	b.n	800d0c6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800d0c4:	2301      	movs	r3, #1
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d0d2:	bf00      	nop
 800d0d4:	58024400 	.word	0x58024400

0800d0d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b090      	sub	sp, #64	@ 0x40
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d0e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0e6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800d0ea:	430b      	orrs	r3, r1
 800d0ec:	f040 8094 	bne.w	800d218 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800d0f0:	4b9b      	ldr	r3, [pc, #620]	@ (800d360 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d0f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d0f4:	f003 0307 	and.w	r3, r3, #7
 800d0f8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800d0fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0fc:	2b04      	cmp	r3, #4
 800d0fe:	f200 8087 	bhi.w	800d210 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800d102:	a201      	add	r2, pc, #4	@ (adr r2, 800d108 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800d104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d108:	0800d11d 	.word	0x0800d11d
 800d10c:	0800d145 	.word	0x0800d145
 800d110:	0800d16d 	.word	0x0800d16d
 800d114:	0800d209 	.word	0x0800d209
 800d118:	0800d195 	.word	0x0800d195
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d11c:	4b90      	ldr	r3, [pc, #576]	@ (800d360 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d124:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d128:	d108      	bne.n	800d13c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d12a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d12e:	4618      	mov	r0, r3
 800d130:	f000 ff62 	bl	800dff8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d138:	f000 bc93 	b.w	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d13c:	2300      	movs	r3, #0
 800d13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d140:	f000 bc8f 	b.w	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d144:	4b86      	ldr	r3, [pc, #536]	@ (800d360 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d14c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d150:	d108      	bne.n	800d164 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d152:	f107 0318 	add.w	r3, r7, #24
 800d156:	4618      	mov	r0, r3
 800d158:	f000 fca6 	bl	800daa8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d15c:	69bb      	ldr	r3, [r7, #24]
 800d15e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d160:	f000 bc7f 	b.w	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d164:	2300      	movs	r3, #0
 800d166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d168:	f000 bc7b 	b.w	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d16c:	4b7c      	ldr	r3, [pc, #496]	@ (800d360 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d174:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d178:	d108      	bne.n	800d18c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d17a:	f107 030c 	add.w	r3, r7, #12
 800d17e:	4618      	mov	r0, r3
 800d180:	f000 fde6 	bl	800dd50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d188:	f000 bc6b 	b.w	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d18c:	2300      	movs	r3, #0
 800d18e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d190:	f000 bc67 	b.w	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d194:	4b72      	ldr	r3, [pc, #456]	@ (800d360 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d196:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d198:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d19c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d19e:	4b70      	ldr	r3, [pc, #448]	@ (800d360 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f003 0304 	and.w	r3, r3, #4
 800d1a6:	2b04      	cmp	r3, #4
 800d1a8:	d10c      	bne.n	800d1c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800d1aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d109      	bne.n	800d1c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d1b0:	4b6b      	ldr	r3, [pc, #428]	@ (800d360 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	08db      	lsrs	r3, r3, #3
 800d1b6:	f003 0303 	and.w	r3, r3, #3
 800d1ba:	4a6a      	ldr	r2, [pc, #424]	@ (800d364 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800d1bc:	fa22 f303 	lsr.w	r3, r2, r3
 800d1c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d1c2:	e01f      	b.n	800d204 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d1c4:	4b66      	ldr	r3, [pc, #408]	@ (800d360 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d1cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d1d0:	d106      	bne.n	800d1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800d1d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d1d8:	d102      	bne.n	800d1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d1da:	4b63      	ldr	r3, [pc, #396]	@ (800d368 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800d1dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d1de:	e011      	b.n	800d204 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d1e0:	4b5f      	ldr	r3, [pc, #380]	@ (800d360 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d1e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d1ec:	d106      	bne.n	800d1fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800d1ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d1f4:	d102      	bne.n	800d1fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d1f6:	4b5d      	ldr	r3, [pc, #372]	@ (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d1f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d1fa:	e003      	b.n	800d204 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d200:	f000 bc2f 	b.w	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d204:	f000 bc2d 	b.w	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d208:	4b59      	ldr	r3, [pc, #356]	@ (800d370 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800d20a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d20c:	f000 bc29 	b.w	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d210:	2300      	movs	r3, #0
 800d212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d214:	f000 bc25 	b.w	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800d218:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d21c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800d220:	430b      	orrs	r3, r1
 800d222:	f040 80a7 	bne.w	800d374 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800d226:	4b4e      	ldr	r3, [pc, #312]	@ (800d360 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d22a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800d22e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800d230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d232:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d236:	d054      	beq.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800d238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d23a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d23e:	f200 808b 	bhi.w	800d358 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800d242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d244:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d248:	f000 8083 	beq.w	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800d24c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d24e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d252:	f200 8081 	bhi.w	800d358 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800d256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d258:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d25c:	d02f      	beq.n	800d2be <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800d25e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d260:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d264:	d878      	bhi.n	800d358 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800d266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d004      	beq.n	800d276 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800d26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d26e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d272:	d012      	beq.n	800d29a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800d274:	e070      	b.n	800d358 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d276:	4b3a      	ldr	r3, [pc, #232]	@ (800d360 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d27e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d282:	d107      	bne.n	800d294 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d284:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d288:	4618      	mov	r0, r3
 800d28a:	f000 feb5 	bl	800dff8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d28e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d290:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d292:	e3e6      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d294:	2300      	movs	r3, #0
 800d296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d298:	e3e3      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d29a:	4b31      	ldr	r3, [pc, #196]	@ (800d360 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d2a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d2a6:	d107      	bne.n	800d2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d2a8:	f107 0318 	add.w	r3, r7, #24
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f000 fbfb 	bl	800daa8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d2b2:	69bb      	ldr	r3, [r7, #24]
 800d2b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2b6:	e3d4      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2bc:	e3d1      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d2be:	4b28      	ldr	r3, [pc, #160]	@ (800d360 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d2c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d2ca:	d107      	bne.n	800d2dc <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d2cc:	f107 030c 	add.w	r3, r7, #12
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f000 fd3d 	bl	800dd50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2da:	e3c2      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2e0:	e3bf      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d2e2:	4b1f      	ldr	r3, [pc, #124]	@ (800d360 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d2e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d2e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d2ea:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d2ec:	4b1c      	ldr	r3, [pc, #112]	@ (800d360 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	f003 0304 	and.w	r3, r3, #4
 800d2f4:	2b04      	cmp	r3, #4
 800d2f6:	d10c      	bne.n	800d312 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800d2f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d109      	bne.n	800d312 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d2fe:	4b18      	ldr	r3, [pc, #96]	@ (800d360 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	08db      	lsrs	r3, r3, #3
 800d304:	f003 0303 	and.w	r3, r3, #3
 800d308:	4a16      	ldr	r2, [pc, #88]	@ (800d364 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800d30a:	fa22 f303 	lsr.w	r3, r2, r3
 800d30e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d310:	e01e      	b.n	800d350 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d312:	4b13      	ldr	r3, [pc, #76]	@ (800d360 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d31a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d31e:	d106      	bne.n	800d32e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800d320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d322:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d326:	d102      	bne.n	800d32e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d328:	4b0f      	ldr	r3, [pc, #60]	@ (800d368 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800d32a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d32c:	e010      	b.n	800d350 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d32e:	4b0c      	ldr	r3, [pc, #48]	@ (800d360 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d336:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d33a:	d106      	bne.n	800d34a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800d33c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d33e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d342:	d102      	bne.n	800d34a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d344:	4b09      	ldr	r3, [pc, #36]	@ (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d346:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d348:	e002      	b.n	800d350 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d34a:	2300      	movs	r3, #0
 800d34c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d34e:	e388      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d350:	e387      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d352:	4b07      	ldr	r3, [pc, #28]	@ (800d370 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800d354:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d356:	e384      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d358:	2300      	movs	r3, #0
 800d35a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d35c:	e381      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d35e:	bf00      	nop
 800d360:	58024400 	.word	0x58024400
 800d364:	03d09000 	.word	0x03d09000
 800d368:	003d0900 	.word	0x003d0900
 800d36c:	007a1200 	.word	0x007a1200
 800d370:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800d374:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d378:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800d37c:	430b      	orrs	r3, r1
 800d37e:	f040 809c 	bne.w	800d4ba <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800d382:	4b9e      	ldr	r3, [pc, #632]	@ (800d5fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d386:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800d38a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800d38c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d38e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d392:	d054      	beq.n	800d43e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800d394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d396:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d39a:	f200 808b 	bhi.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800d39e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3a0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d3a4:	f000 8083 	beq.w	800d4ae <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800d3a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d3ae:	f200 8081 	bhi.w	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800d3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d3b8:	d02f      	beq.n	800d41a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800d3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d3c0:	d878      	bhi.n	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800d3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d004      	beq.n	800d3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800d3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d3ce:	d012      	beq.n	800d3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800d3d0:	e070      	b.n	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d3d2:	4b8a      	ldr	r3, [pc, #552]	@ (800d5fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d3da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d3de:	d107      	bne.n	800d3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d3e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f000 fe07 	bl	800dff8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d3ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d3ee:	e338      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3f4:	e335      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d3f6:	4b81      	ldr	r3, [pc, #516]	@ (800d5fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d3fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d402:	d107      	bne.n	800d414 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d404:	f107 0318 	add.w	r3, r7, #24
 800d408:	4618      	mov	r0, r3
 800d40a:	f000 fb4d 	bl	800daa8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d40e:	69bb      	ldr	r3, [r7, #24]
 800d410:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d412:	e326      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d414:	2300      	movs	r3, #0
 800d416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d418:	e323      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d41a:	4b78      	ldr	r3, [pc, #480]	@ (800d5fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d422:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d426:	d107      	bne.n	800d438 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d428:	f107 030c 	add.w	r3, r7, #12
 800d42c:	4618      	mov	r0, r3
 800d42e:	f000 fc8f 	bl	800dd50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d436:	e314      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d438:	2300      	movs	r3, #0
 800d43a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d43c:	e311      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d43e:	4b6f      	ldr	r3, [pc, #444]	@ (800d5fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d442:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d446:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d448:	4b6c      	ldr	r3, [pc, #432]	@ (800d5fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	f003 0304 	and.w	r3, r3, #4
 800d450:	2b04      	cmp	r3, #4
 800d452:	d10c      	bne.n	800d46e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800d454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d456:	2b00      	cmp	r3, #0
 800d458:	d109      	bne.n	800d46e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d45a:	4b68      	ldr	r3, [pc, #416]	@ (800d5fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	08db      	lsrs	r3, r3, #3
 800d460:	f003 0303 	and.w	r3, r3, #3
 800d464:	4a66      	ldr	r2, [pc, #408]	@ (800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800d466:	fa22 f303 	lsr.w	r3, r2, r3
 800d46a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d46c:	e01e      	b.n	800d4ac <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d46e:	4b63      	ldr	r3, [pc, #396]	@ (800d5fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d476:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d47a:	d106      	bne.n	800d48a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800d47c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d47e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d482:	d102      	bne.n	800d48a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d484:	4b5f      	ldr	r3, [pc, #380]	@ (800d604 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800d486:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d488:	e010      	b.n	800d4ac <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d48a:	4b5c      	ldr	r3, [pc, #368]	@ (800d5fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d492:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d496:	d106      	bne.n	800d4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800d498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d49a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d49e:	d102      	bne.n	800d4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d4a0:	4b59      	ldr	r3, [pc, #356]	@ (800d608 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d4a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d4a4:	e002      	b.n	800d4ac <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d4aa:	e2da      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d4ac:	e2d9      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d4ae:	4b57      	ldr	r3, [pc, #348]	@ (800d60c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800d4b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4b2:	e2d6      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4b8:	e2d3      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800d4ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4be:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800d4c2:	430b      	orrs	r3, r1
 800d4c4:	f040 80a7 	bne.w	800d616 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800d4c8:	4b4c      	ldr	r3, [pc, #304]	@ (800d5fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d4ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d4cc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800d4d0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d4d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d4d8:	d055      	beq.n	800d586 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800d4da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d4e0:	f200 8096 	bhi.w	800d610 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d4ea:	f000 8084 	beq.w	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800d4ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d4f4:	f200 808c 	bhi.w	800d610 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d4f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d4fe:	d030      	beq.n	800d562 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800d500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d502:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d506:	f200 8083 	bhi.w	800d610 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d50a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d004      	beq.n	800d51a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800d510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d512:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d516:	d012      	beq.n	800d53e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800d518:	e07a      	b.n	800d610 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d51a:	4b38      	ldr	r3, [pc, #224]	@ (800d5fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d522:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d526:	d107      	bne.n	800d538 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d528:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d52c:	4618      	mov	r0, r3
 800d52e:	f000 fd63 	bl	800dff8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d534:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d536:	e294      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d538:	2300      	movs	r3, #0
 800d53a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d53c:	e291      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d53e:	4b2f      	ldr	r3, [pc, #188]	@ (800d5fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d546:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d54a:	d107      	bne.n	800d55c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d54c:	f107 0318 	add.w	r3, r7, #24
 800d550:	4618      	mov	r0, r3
 800d552:	f000 faa9 	bl	800daa8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d556:	69bb      	ldr	r3, [r7, #24]
 800d558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d55a:	e282      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d55c:	2300      	movs	r3, #0
 800d55e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d560:	e27f      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d562:	4b26      	ldr	r3, [pc, #152]	@ (800d5fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d56a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d56e:	d107      	bne.n	800d580 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d570:	f107 030c 	add.w	r3, r7, #12
 800d574:	4618      	mov	r0, r3
 800d576:	f000 fbeb 	bl	800dd50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d57e:	e270      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d580:	2300      	movs	r3, #0
 800d582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d584:	e26d      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d586:	4b1d      	ldr	r3, [pc, #116]	@ (800d5fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d58a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d58e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d590:	4b1a      	ldr	r3, [pc, #104]	@ (800d5fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	f003 0304 	and.w	r3, r3, #4
 800d598:	2b04      	cmp	r3, #4
 800d59a:	d10c      	bne.n	800d5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800d59c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d109      	bne.n	800d5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d5a2:	4b16      	ldr	r3, [pc, #88]	@ (800d5fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	08db      	lsrs	r3, r3, #3
 800d5a8:	f003 0303 	and.w	r3, r3, #3
 800d5ac:	4a14      	ldr	r2, [pc, #80]	@ (800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800d5ae:	fa22 f303 	lsr.w	r3, r2, r3
 800d5b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d5b4:	e01e      	b.n	800d5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d5b6:	4b11      	ldr	r3, [pc, #68]	@ (800d5fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d5be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d5c2:	d106      	bne.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800d5c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d5ca:	d102      	bne.n	800d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d5cc:	4b0d      	ldr	r3, [pc, #52]	@ (800d604 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800d5ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d5d0:	e010      	b.n	800d5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d5d2:	4b0a      	ldr	r3, [pc, #40]	@ (800d5fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d5da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d5de:	d106      	bne.n	800d5ee <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800d5e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d5e6:	d102      	bne.n	800d5ee <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d5e8:	4b07      	ldr	r3, [pc, #28]	@ (800d608 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d5ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d5ec:	e002      	b.n	800d5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d5f2:	e236      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d5f4:	e235      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d5f6:	4b05      	ldr	r3, [pc, #20]	@ (800d60c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800d5f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5fa:	e232      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d5fc:	58024400 	.word	0x58024400
 800d600:	03d09000 	.word	0x03d09000
 800d604:	003d0900 	.word	0x003d0900
 800d608:	007a1200 	.word	0x007a1200
 800d60c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800d610:	2300      	movs	r3, #0
 800d612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d614:	e225      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800d616:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d61a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800d61e:	430b      	orrs	r3, r1
 800d620:	f040 8085 	bne.w	800d72e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800d624:	4b9c      	ldr	r3, [pc, #624]	@ (800d898 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d628:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800d62c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800d62e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d630:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d634:	d06b      	beq.n	800d70e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800d636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d638:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d63c:	d874      	bhi.n	800d728 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d640:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d644:	d056      	beq.n	800d6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800d646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d648:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d64c:	d86c      	bhi.n	800d728 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d64e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d650:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d654:	d03b      	beq.n	800d6ce <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800d656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d658:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d65c:	d864      	bhi.n	800d728 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d65e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d660:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d664:	d021      	beq.n	800d6aa <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800d666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d668:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d66c:	d85c      	bhi.n	800d728 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d66e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d670:	2b00      	cmp	r3, #0
 800d672:	d004      	beq.n	800d67e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800d674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d676:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d67a:	d004      	beq.n	800d686 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800d67c:	e054      	b.n	800d728 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800d67e:	f7fe fb5f 	bl	800bd40 <HAL_RCC_GetPCLK1Freq>
 800d682:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d684:	e1ed      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d686:	4b84      	ldr	r3, [pc, #528]	@ (800d898 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d68e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d692:	d107      	bne.n	800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d694:	f107 0318 	add.w	r3, r7, #24
 800d698:	4618      	mov	r0, r3
 800d69a:	f000 fa05 	bl	800daa8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d69e:	69fb      	ldr	r3, [r7, #28]
 800d6a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d6a2:	e1de      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d6a8:	e1db      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d6aa:	4b7b      	ldr	r3, [pc, #492]	@ (800d898 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d6b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d6b6:	d107      	bne.n	800d6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d6b8:	f107 030c 	add.w	r3, r7, #12
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f000 fb47 	bl	800dd50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d6c2:	693b      	ldr	r3, [r7, #16]
 800d6c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d6c6:	e1cc      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d6cc:	e1c9      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d6ce:	4b72      	ldr	r3, [pc, #456]	@ (800d898 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	f003 0304 	and.w	r3, r3, #4
 800d6d6:	2b04      	cmp	r3, #4
 800d6d8:	d109      	bne.n	800d6ee <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d6da:	4b6f      	ldr	r3, [pc, #444]	@ (800d898 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	08db      	lsrs	r3, r3, #3
 800d6e0:	f003 0303 	and.w	r3, r3, #3
 800d6e4:	4a6d      	ldr	r2, [pc, #436]	@ (800d89c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d6e6:	fa22 f303 	lsr.w	r3, r2, r3
 800d6ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d6ec:	e1b9      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d6f2:	e1b6      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d6f4:	4b68      	ldr	r3, [pc, #416]	@ (800d898 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d6fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d700:	d102      	bne.n	800d708 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800d702:	4b67      	ldr	r3, [pc, #412]	@ (800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d706:	e1ac      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d708:	2300      	movs	r3, #0
 800d70a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d70c:	e1a9      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d70e:	4b62      	ldr	r3, [pc, #392]	@ (800d898 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d716:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d71a:	d102      	bne.n	800d722 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800d71c:	4b61      	ldr	r3, [pc, #388]	@ (800d8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d71e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d720:	e19f      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d722:	2300      	movs	r3, #0
 800d724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d726:	e19c      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d728:	2300      	movs	r3, #0
 800d72a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d72c:	e199      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800d72e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d732:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800d736:	430b      	orrs	r3, r1
 800d738:	d173      	bne.n	800d822 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800d73a:	4b57      	ldr	r3, [pc, #348]	@ (800d898 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d73c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d73e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d742:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d746:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d74a:	d02f      	beq.n	800d7ac <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800d74c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d74e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d752:	d863      	bhi.n	800d81c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800d754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d756:	2b00      	cmp	r3, #0
 800d758:	d004      	beq.n	800d764 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800d75a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d75c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d760:	d012      	beq.n	800d788 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800d762:	e05b      	b.n	800d81c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d764:	4b4c      	ldr	r3, [pc, #304]	@ (800d898 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d76c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d770:	d107      	bne.n	800d782 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d772:	f107 0318 	add.w	r3, r7, #24
 800d776:	4618      	mov	r0, r3
 800d778:	f000 f996 	bl	800daa8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d77c:	69bb      	ldr	r3, [r7, #24]
 800d77e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d780:	e16f      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d782:	2300      	movs	r3, #0
 800d784:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d786:	e16c      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d788:	4b43      	ldr	r3, [pc, #268]	@ (800d898 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d790:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d794:	d107      	bne.n	800d7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d796:	f107 030c 	add.w	r3, r7, #12
 800d79a:	4618      	mov	r0, r3
 800d79c:	f000 fad8 	bl	800dd50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d7a4:	e15d      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7aa:	e15a      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d7ac:	4b3a      	ldr	r3, [pc, #232]	@ (800d898 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d7ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d7b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d7b4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d7b6:	4b38      	ldr	r3, [pc, #224]	@ (800d898 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	f003 0304 	and.w	r3, r3, #4
 800d7be:	2b04      	cmp	r3, #4
 800d7c0:	d10c      	bne.n	800d7dc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800d7c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d109      	bne.n	800d7dc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d7c8:	4b33      	ldr	r3, [pc, #204]	@ (800d898 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	08db      	lsrs	r3, r3, #3
 800d7ce:	f003 0303 	and.w	r3, r3, #3
 800d7d2:	4a32      	ldr	r2, [pc, #200]	@ (800d89c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d7d4:	fa22 f303 	lsr.w	r3, r2, r3
 800d7d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d7da:	e01e      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d7dc:	4b2e      	ldr	r3, [pc, #184]	@ (800d898 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d7e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d7e8:	d106      	bne.n	800d7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800d7ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d7f0:	d102      	bne.n	800d7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d7f2:	4b2b      	ldr	r3, [pc, #172]	@ (800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d7f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d7f6:	e010      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d7f8:	4b27      	ldr	r3, [pc, #156]	@ (800d898 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d800:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d804:	d106      	bne.n	800d814 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800d806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d808:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d80c:	d102      	bne.n	800d814 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d80e:	4b25      	ldr	r3, [pc, #148]	@ (800d8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d810:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d812:	e002      	b.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d814:	2300      	movs	r3, #0
 800d816:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d818:	e123      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d81a:	e122      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d81c:	2300      	movs	r3, #0
 800d81e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d820:	e11f      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d822:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d826:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800d82a:	430b      	orrs	r3, r1
 800d82c:	d13c      	bne.n	800d8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d82e:	4b1a      	ldr	r3, [pc, #104]	@ (800d898 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d832:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d836:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d004      	beq.n	800d848 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800d83e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d844:	d012      	beq.n	800d86c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800d846:	e023      	b.n	800d890 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d848:	4b13      	ldr	r3, [pc, #76]	@ (800d898 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d850:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d854:	d107      	bne.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d856:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d85a:	4618      	mov	r0, r3
 800d85c:	f000 fbcc 	bl	800dff8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d864:	e0fd      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d866:	2300      	movs	r3, #0
 800d868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d86a:	e0fa      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d86c:	4b0a      	ldr	r3, [pc, #40]	@ (800d898 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d874:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d878:	d107      	bne.n	800d88a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d87a:	f107 0318 	add.w	r3, r7, #24
 800d87e:	4618      	mov	r0, r3
 800d880:	f000 f912 	bl	800daa8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d884:	6a3b      	ldr	r3, [r7, #32]
 800d886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d888:	e0eb      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d88a:	2300      	movs	r3, #0
 800d88c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d88e:	e0e8      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d890:	2300      	movs	r3, #0
 800d892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d894:	e0e5      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d896:	bf00      	nop
 800d898:	58024400 	.word	0x58024400
 800d89c:	03d09000 	.word	0x03d09000
 800d8a0:	003d0900 	.word	0x003d0900
 800d8a4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d8a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d8ac:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800d8b0:	430b      	orrs	r3, r1
 800d8b2:	f040 8085 	bne.w	800d9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d8b6:	4b6d      	ldr	r3, [pc, #436]	@ (800da6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d8b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d8ba:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800d8be:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d8c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d8c6:	d06b      	beq.n	800d9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800d8c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d8ce:	d874      	bhi.n	800d9ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d8d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d8d6:	d056      	beq.n	800d986 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800d8d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d8de:	d86c      	bhi.n	800d9ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d8e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d8e6:	d03b      	beq.n	800d960 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800d8e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d8ee:	d864      	bhi.n	800d9ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d8f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d8f6:	d021      	beq.n	800d93c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800d8f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d8fe:	d85c      	bhi.n	800d9ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d902:	2b00      	cmp	r3, #0
 800d904:	d004      	beq.n	800d910 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800d906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d908:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d90c:	d004      	beq.n	800d918 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800d90e:	e054      	b.n	800d9ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d910:	f000 f8b4 	bl	800da7c <HAL_RCCEx_GetD3PCLK1Freq>
 800d914:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d916:	e0a4      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d918:	4b54      	ldr	r3, [pc, #336]	@ (800da6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d920:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d924:	d107      	bne.n	800d936 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d926:	f107 0318 	add.w	r3, r7, #24
 800d92a:	4618      	mov	r0, r3
 800d92c:	f000 f8bc 	bl	800daa8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d930:	69fb      	ldr	r3, [r7, #28]
 800d932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d934:	e095      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d936:	2300      	movs	r3, #0
 800d938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d93a:	e092      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d93c:	4b4b      	ldr	r3, [pc, #300]	@ (800da6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d944:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d948:	d107      	bne.n	800d95a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d94a:	f107 030c 	add.w	r3, r7, #12
 800d94e:	4618      	mov	r0, r3
 800d950:	f000 f9fe 	bl	800dd50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d954:	693b      	ldr	r3, [r7, #16]
 800d956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d958:	e083      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d95a:	2300      	movs	r3, #0
 800d95c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d95e:	e080      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d960:	4b42      	ldr	r3, [pc, #264]	@ (800da6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	f003 0304 	and.w	r3, r3, #4
 800d968:	2b04      	cmp	r3, #4
 800d96a:	d109      	bne.n	800d980 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d96c:	4b3f      	ldr	r3, [pc, #252]	@ (800da6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	08db      	lsrs	r3, r3, #3
 800d972:	f003 0303 	and.w	r3, r3, #3
 800d976:	4a3e      	ldr	r2, [pc, #248]	@ (800da70 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800d978:	fa22 f303 	lsr.w	r3, r2, r3
 800d97c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d97e:	e070      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d980:	2300      	movs	r3, #0
 800d982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d984:	e06d      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d986:	4b39      	ldr	r3, [pc, #228]	@ (800da6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d98e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d992:	d102      	bne.n	800d99a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800d994:	4b37      	ldr	r3, [pc, #220]	@ (800da74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d998:	e063      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d99a:	2300      	movs	r3, #0
 800d99c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d99e:	e060      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d9a0:	4b32      	ldr	r3, [pc, #200]	@ (800da6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d9a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d9ac:	d102      	bne.n	800d9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800d9ae:	4b32      	ldr	r3, [pc, #200]	@ (800da78 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d9b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d9b2:	e056      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d9b8:	e053      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d9be:	e050      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d9c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d9c4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800d9c8:	430b      	orrs	r3, r1
 800d9ca:	d148      	bne.n	800da5e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d9cc:	4b27      	ldr	r3, [pc, #156]	@ (800da6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d9ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d9d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d9d4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d9d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d9dc:	d02a      	beq.n	800da34 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800d9de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d9e4:	d838      	bhi.n	800da58 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800d9e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d004      	beq.n	800d9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800d9ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d9f2:	d00d      	beq.n	800da10 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800d9f4:	e030      	b.n	800da58 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d9f6:	4b1d      	ldr	r3, [pc, #116]	@ (800da6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d9fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800da02:	d102      	bne.n	800da0a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800da04:	4b1c      	ldr	r3, [pc, #112]	@ (800da78 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800da06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800da08:	e02b      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800da0a:	2300      	movs	r3, #0
 800da0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da0e:	e028      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800da10:	4b16      	ldr	r3, [pc, #88]	@ (800da6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800da18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800da1c:	d107      	bne.n	800da2e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800da1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800da22:	4618      	mov	r0, r3
 800da24:	f000 fae8 	bl	800dff8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800da28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800da2c:	e019      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800da2e:	2300      	movs	r3, #0
 800da30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da32:	e016      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800da34:	4b0d      	ldr	r3, [pc, #52]	@ (800da6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800da3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800da40:	d107      	bne.n	800da52 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800da42:	f107 0318 	add.w	r3, r7, #24
 800da46:	4618      	mov	r0, r3
 800da48:	f000 f82e 	bl	800daa8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800da4c:	69fb      	ldr	r3, [r7, #28]
 800da4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800da50:	e007      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800da52:	2300      	movs	r3, #0
 800da54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da56:	e004      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800da58:	2300      	movs	r3, #0
 800da5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da5c:	e001      	b.n	800da62 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800da5e:	2300      	movs	r3, #0
 800da60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800da62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800da64:	4618      	mov	r0, r3
 800da66:	3740      	adds	r7, #64	@ 0x40
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}
 800da6c:	58024400 	.word	0x58024400
 800da70:	03d09000 	.word	0x03d09000
 800da74:	003d0900 	.word	0x003d0900
 800da78:	007a1200 	.word	0x007a1200

0800da7c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800da80:	f7fe f92e 	bl	800bce0 <HAL_RCC_GetHCLKFreq>
 800da84:	4602      	mov	r2, r0
 800da86:	4b06      	ldr	r3, [pc, #24]	@ (800daa0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800da88:	6a1b      	ldr	r3, [r3, #32]
 800da8a:	091b      	lsrs	r3, r3, #4
 800da8c:	f003 0307 	and.w	r3, r3, #7
 800da90:	4904      	ldr	r1, [pc, #16]	@ (800daa4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800da92:	5ccb      	ldrb	r3, [r1, r3]
 800da94:	f003 031f 	and.w	r3, r3, #31
 800da98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	bd80      	pop	{r7, pc}
 800daa0:	58024400 	.word	0x58024400
 800daa4:	08014e70 	.word	0x08014e70

0800daa8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800daa8:	b480      	push	{r7}
 800daaa:	b089      	sub	sp, #36	@ 0x24
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800dab0:	4ba1      	ldr	r3, [pc, #644]	@ (800dd38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dab4:	f003 0303 	and.w	r3, r3, #3
 800dab8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800daba:	4b9f      	ldr	r3, [pc, #636]	@ (800dd38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dabc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dabe:	0b1b      	lsrs	r3, r3, #12
 800dac0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dac4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800dac6:	4b9c      	ldr	r3, [pc, #624]	@ (800dd38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800daca:	091b      	lsrs	r3, r3, #4
 800dacc:	f003 0301 	and.w	r3, r3, #1
 800dad0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800dad2:	4b99      	ldr	r3, [pc, #612]	@ (800dd38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dad6:	08db      	lsrs	r3, r3, #3
 800dad8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dadc:	693a      	ldr	r2, [r7, #16]
 800dade:	fb02 f303 	mul.w	r3, r2, r3
 800dae2:	ee07 3a90 	vmov	s15, r3
 800dae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800daea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800daee:	697b      	ldr	r3, [r7, #20]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	f000 8111 	beq.w	800dd18 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800daf6:	69bb      	ldr	r3, [r7, #24]
 800daf8:	2b02      	cmp	r3, #2
 800dafa:	f000 8083 	beq.w	800dc04 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800dafe:	69bb      	ldr	r3, [r7, #24]
 800db00:	2b02      	cmp	r3, #2
 800db02:	f200 80a1 	bhi.w	800dc48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800db06:	69bb      	ldr	r3, [r7, #24]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d003      	beq.n	800db14 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800db0c:	69bb      	ldr	r3, [r7, #24]
 800db0e:	2b01      	cmp	r3, #1
 800db10:	d056      	beq.n	800dbc0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800db12:	e099      	b.n	800dc48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800db14:	4b88      	ldr	r3, [pc, #544]	@ (800dd38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	f003 0320 	and.w	r3, r3, #32
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d02d      	beq.n	800db7c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800db20:	4b85      	ldr	r3, [pc, #532]	@ (800dd38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	08db      	lsrs	r3, r3, #3
 800db26:	f003 0303 	and.w	r3, r3, #3
 800db2a:	4a84      	ldr	r2, [pc, #528]	@ (800dd3c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800db2c:	fa22 f303 	lsr.w	r3, r2, r3
 800db30:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	ee07 3a90 	vmov	s15, r3
 800db38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db3c:	697b      	ldr	r3, [r7, #20]
 800db3e:	ee07 3a90 	vmov	s15, r3
 800db42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db4a:	4b7b      	ldr	r3, [pc, #492]	@ (800dd38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800db4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db52:	ee07 3a90 	vmov	s15, r3
 800db56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800db5e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800dd40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800db62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800db6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800db7a:	e087      	b.n	800dc8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800db7c:	697b      	ldr	r3, [r7, #20]
 800db7e:	ee07 3a90 	vmov	s15, r3
 800db82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db86:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800dd44 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800db8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db8e:	4b6a      	ldr	r3, [pc, #424]	@ (800dd38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800db90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db96:	ee07 3a90 	vmov	s15, r3
 800db9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800dba2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800dd40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800dba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dbaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dbae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dbb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dbb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dbba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dbbe:	e065      	b.n	800dc8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800dbc0:	697b      	ldr	r3, [r7, #20]
 800dbc2:	ee07 3a90 	vmov	s15, r3
 800dbc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800dd48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800dbce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dbd2:	4b59      	ldr	r3, [pc, #356]	@ (800dd38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dbd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbda:	ee07 3a90 	vmov	s15, r3
 800dbde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dbe2:	ed97 6a03 	vldr	s12, [r7, #12]
 800dbe6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800dd40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800dbea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dbee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dbf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dbf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dbfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dbfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dc02:	e043      	b.n	800dc8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	ee07 3a90 	vmov	s15, r3
 800dc0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc0e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800dd4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800dc12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc16:	4b48      	ldr	r3, [pc, #288]	@ (800dd38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dc18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc1e:	ee07 3a90 	vmov	s15, r3
 800dc22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc26:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc2a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800dd40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800dc2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dc3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dc46:	e021      	b.n	800dc8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	ee07 3a90 	vmov	s15, r3
 800dc4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc52:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800dd48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800dc56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc5a:	4b37      	ldr	r3, [pc, #220]	@ (800dd38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dc5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc62:	ee07 3a90 	vmov	s15, r3
 800dc66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc6e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800dd40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800dc72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dc7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dc8a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800dc8c:	4b2a      	ldr	r3, [pc, #168]	@ (800dd38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dc8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc90:	0a5b      	lsrs	r3, r3, #9
 800dc92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dc96:	ee07 3a90 	vmov	s15, r3
 800dc9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dca2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dca6:	edd7 6a07 	vldr	s13, [r7, #28]
 800dcaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dcae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dcb2:	ee17 2a90 	vmov	r2, s15
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800dcba:	4b1f      	ldr	r3, [pc, #124]	@ (800dd38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dcbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcbe:	0c1b      	lsrs	r3, r3, #16
 800dcc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dcc4:	ee07 3a90 	vmov	s15, r3
 800dcc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dccc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dcd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dcd4:	edd7 6a07 	vldr	s13, [r7, #28]
 800dcd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dcdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dce0:	ee17 2a90 	vmov	r2, s15
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800dce8:	4b13      	ldr	r3, [pc, #76]	@ (800dd38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dcea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcec:	0e1b      	lsrs	r3, r3, #24
 800dcee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dcf2:	ee07 3a90 	vmov	s15, r3
 800dcf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcfa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dcfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dd02:	edd7 6a07 	vldr	s13, [r7, #28]
 800dd06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd0e:	ee17 2a90 	vmov	r2, s15
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800dd16:	e008      	b.n	800dd2a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2200      	movs	r2, #0
 800dd22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2200      	movs	r2, #0
 800dd28:	609a      	str	r2, [r3, #8]
}
 800dd2a:	bf00      	nop
 800dd2c:	3724      	adds	r7, #36	@ 0x24
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd34:	4770      	bx	lr
 800dd36:	bf00      	nop
 800dd38:	58024400 	.word	0x58024400
 800dd3c:	03d09000 	.word	0x03d09000
 800dd40:	46000000 	.word	0x46000000
 800dd44:	4c742400 	.word	0x4c742400
 800dd48:	4a742400 	.word	0x4a742400
 800dd4c:	4af42400 	.word	0x4af42400

0800dd50 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800dd50:	b480      	push	{r7}
 800dd52:	b089      	sub	sp, #36	@ 0x24
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800dd58:	4ba1      	ldr	r3, [pc, #644]	@ (800dfe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd5c:	f003 0303 	and.w	r3, r3, #3
 800dd60:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800dd62:	4b9f      	ldr	r3, [pc, #636]	@ (800dfe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd66:	0d1b      	lsrs	r3, r3, #20
 800dd68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dd6c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800dd6e:	4b9c      	ldr	r3, [pc, #624]	@ (800dfe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd72:	0a1b      	lsrs	r3, r3, #8
 800dd74:	f003 0301 	and.w	r3, r3, #1
 800dd78:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800dd7a:	4b99      	ldr	r3, [pc, #612]	@ (800dfe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd7e:	08db      	lsrs	r3, r3, #3
 800dd80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dd84:	693a      	ldr	r2, [r7, #16]
 800dd86:	fb02 f303 	mul.w	r3, r2, r3
 800dd8a:	ee07 3a90 	vmov	s15, r3
 800dd8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	f000 8111 	beq.w	800dfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800dd9e:	69bb      	ldr	r3, [r7, #24]
 800dda0:	2b02      	cmp	r3, #2
 800dda2:	f000 8083 	beq.w	800deac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800dda6:	69bb      	ldr	r3, [r7, #24]
 800dda8:	2b02      	cmp	r3, #2
 800ddaa:	f200 80a1 	bhi.w	800def0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ddae:	69bb      	ldr	r3, [r7, #24]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d003      	beq.n	800ddbc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ddb4:	69bb      	ldr	r3, [r7, #24]
 800ddb6:	2b01      	cmp	r3, #1
 800ddb8:	d056      	beq.n	800de68 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ddba:	e099      	b.n	800def0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ddbc:	4b88      	ldr	r3, [pc, #544]	@ (800dfe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	f003 0320 	and.w	r3, r3, #32
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d02d      	beq.n	800de24 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ddc8:	4b85      	ldr	r3, [pc, #532]	@ (800dfe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	08db      	lsrs	r3, r3, #3
 800ddce:	f003 0303 	and.w	r3, r3, #3
 800ddd2:	4a84      	ldr	r2, [pc, #528]	@ (800dfe4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ddd4:	fa22 f303 	lsr.w	r3, r2, r3
 800ddd8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	ee07 3a90 	vmov	s15, r3
 800dde0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dde4:	697b      	ldr	r3, [r7, #20]
 800dde6:	ee07 3a90 	vmov	s15, r3
 800ddea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ddf2:	4b7b      	ldr	r3, [pc, #492]	@ (800dfe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ddf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddfa:	ee07 3a90 	vmov	s15, r3
 800ddfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de02:	ed97 6a03 	vldr	s12, [r7, #12]
 800de06:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800dfe8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800de0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800de0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800de12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800de16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800de1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800de22:	e087      	b.n	800df34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	ee07 3a90 	vmov	s15, r3
 800de2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de2e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800dfec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800de32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800de36:	4b6a      	ldr	r3, [pc, #424]	@ (800dfe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800de38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de3e:	ee07 3a90 	vmov	s15, r3
 800de42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de46:	ed97 6a03 	vldr	s12, [r7, #12]
 800de4a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800dfe8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800de4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800de52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800de56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800de5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800de5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800de66:	e065      	b.n	800df34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800de68:	697b      	ldr	r3, [r7, #20]
 800de6a:	ee07 3a90 	vmov	s15, r3
 800de6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de72:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800dff0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800de76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800de7a:	4b59      	ldr	r3, [pc, #356]	@ (800dfe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800de7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de82:	ee07 3a90 	vmov	s15, r3
 800de86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800de8e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800dfe8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800de92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800de96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800de9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800de9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dea6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800deaa:	e043      	b.n	800df34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800deac:	697b      	ldr	r3, [r7, #20]
 800deae:	ee07 3a90 	vmov	s15, r3
 800deb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800deb6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800dff4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800deba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800debe:	4b48      	ldr	r3, [pc, #288]	@ (800dfe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dec6:	ee07 3a90 	vmov	s15, r3
 800deca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dece:	ed97 6a03 	vldr	s12, [r7, #12]
 800ded2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800dfe8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ded6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800deda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dede:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800deea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800deee:	e021      	b.n	800df34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800def0:	697b      	ldr	r3, [r7, #20]
 800def2:	ee07 3a90 	vmov	s15, r3
 800def6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800defa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800dff0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800defe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df02:	4b37      	ldr	r3, [pc, #220]	@ (800dfe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800df04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df0a:	ee07 3a90 	vmov	s15, r3
 800df0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df12:	ed97 6a03 	vldr	s12, [r7, #12]
 800df16:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800dfe8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800df1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800df26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800df32:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800df34:	4b2a      	ldr	r3, [pc, #168]	@ (800dfe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800df36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df38:	0a5b      	lsrs	r3, r3, #9
 800df3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800df3e:	ee07 3a90 	vmov	s15, r3
 800df42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800df4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800df4e:	edd7 6a07 	vldr	s13, [r7, #28]
 800df52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800df56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800df5a:	ee17 2a90 	vmov	r2, s15
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800df62:	4b1f      	ldr	r3, [pc, #124]	@ (800dfe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800df64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df66:	0c1b      	lsrs	r3, r3, #16
 800df68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800df6c:	ee07 3a90 	vmov	s15, r3
 800df70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800df78:	ee37 7a87 	vadd.f32	s14, s15, s14
 800df7c:	edd7 6a07 	vldr	s13, [r7, #28]
 800df80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800df84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800df88:	ee17 2a90 	vmov	r2, s15
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800df90:	4b13      	ldr	r3, [pc, #76]	@ (800dfe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800df92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df94:	0e1b      	lsrs	r3, r3, #24
 800df96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800df9a:	ee07 3a90 	vmov	s15, r3
 800df9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfa2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dfa6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dfaa:	edd7 6a07 	vldr	s13, [r7, #28]
 800dfae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dfb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dfb6:	ee17 2a90 	vmov	r2, s15
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800dfbe:	e008      	b.n	800dfd2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2200      	movs	r2, #0
 800dfca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2200      	movs	r2, #0
 800dfd0:	609a      	str	r2, [r3, #8]
}
 800dfd2:	bf00      	nop
 800dfd4:	3724      	adds	r7, #36	@ 0x24
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfdc:	4770      	bx	lr
 800dfde:	bf00      	nop
 800dfe0:	58024400 	.word	0x58024400
 800dfe4:	03d09000 	.word	0x03d09000
 800dfe8:	46000000 	.word	0x46000000
 800dfec:	4c742400 	.word	0x4c742400
 800dff0:	4a742400 	.word	0x4a742400
 800dff4:	4af42400 	.word	0x4af42400

0800dff8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800dff8:	b480      	push	{r7}
 800dffa:	b089      	sub	sp, #36	@ 0x24
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e000:	4ba0      	ldr	r3, [pc, #640]	@ (800e284 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e004:	f003 0303 	and.w	r3, r3, #3
 800e008:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800e00a:	4b9e      	ldr	r3, [pc, #632]	@ (800e284 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e00c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e00e:	091b      	lsrs	r3, r3, #4
 800e010:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e014:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800e016:	4b9b      	ldr	r3, [pc, #620]	@ (800e284 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e01a:	f003 0301 	and.w	r3, r3, #1
 800e01e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e020:	4b98      	ldr	r3, [pc, #608]	@ (800e284 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e024:	08db      	lsrs	r3, r3, #3
 800e026:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e02a:	693a      	ldr	r2, [r7, #16]
 800e02c:	fb02 f303 	mul.w	r3, r2, r3
 800e030:	ee07 3a90 	vmov	s15, r3
 800e034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e038:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800e03c:	697b      	ldr	r3, [r7, #20]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	f000 8111 	beq.w	800e266 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800e044:	69bb      	ldr	r3, [r7, #24]
 800e046:	2b02      	cmp	r3, #2
 800e048:	f000 8083 	beq.w	800e152 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800e04c:	69bb      	ldr	r3, [r7, #24]
 800e04e:	2b02      	cmp	r3, #2
 800e050:	f200 80a1 	bhi.w	800e196 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800e054:	69bb      	ldr	r3, [r7, #24]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d003      	beq.n	800e062 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800e05a:	69bb      	ldr	r3, [r7, #24]
 800e05c:	2b01      	cmp	r3, #1
 800e05e:	d056      	beq.n	800e10e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800e060:	e099      	b.n	800e196 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e062:	4b88      	ldr	r3, [pc, #544]	@ (800e284 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	f003 0320 	and.w	r3, r3, #32
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d02d      	beq.n	800e0ca <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e06e:	4b85      	ldr	r3, [pc, #532]	@ (800e284 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	08db      	lsrs	r3, r3, #3
 800e074:	f003 0303 	and.w	r3, r3, #3
 800e078:	4a83      	ldr	r2, [pc, #524]	@ (800e288 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800e07a:	fa22 f303 	lsr.w	r3, r2, r3
 800e07e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	ee07 3a90 	vmov	s15, r3
 800e086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	ee07 3a90 	vmov	s15, r3
 800e090:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e094:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e098:	4b7a      	ldr	r3, [pc, #488]	@ (800e284 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e09a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e09c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0a0:	ee07 3a90 	vmov	s15, r3
 800e0a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e0a8:	ed97 6a03 	vldr	s12, [r7, #12]
 800e0ac:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800e28c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e0b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e0b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e0b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e0bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e0c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e0c4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e0c8:	e087      	b.n	800e1da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	ee07 3a90 	vmov	s15, r3
 800e0d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e0d4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800e290 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800e0d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e0dc:	4b69      	ldr	r3, [pc, #420]	@ (800e284 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e0de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0e4:	ee07 3a90 	vmov	s15, r3
 800e0e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e0ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800e0f0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800e28c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e0f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e0f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e0fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e100:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e104:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e108:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e10c:	e065      	b.n	800e1da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e10e:	697b      	ldr	r3, [r7, #20]
 800e110:	ee07 3a90 	vmov	s15, r3
 800e114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e118:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800e294 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800e11c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e120:	4b58      	ldr	r3, [pc, #352]	@ (800e284 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e128:	ee07 3a90 	vmov	s15, r3
 800e12c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e130:	ed97 6a03 	vldr	s12, [r7, #12]
 800e134:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800e28c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e138:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e13c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e140:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e144:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e148:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e14c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e150:	e043      	b.n	800e1da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e152:	697b      	ldr	r3, [r7, #20]
 800e154:	ee07 3a90 	vmov	s15, r3
 800e158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e15c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800e298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800e160:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e164:	4b47      	ldr	r3, [pc, #284]	@ (800e284 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e16c:	ee07 3a90 	vmov	s15, r3
 800e170:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e174:	ed97 6a03 	vldr	s12, [r7, #12]
 800e178:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800e28c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e17c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e180:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e184:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e188:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e18c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e190:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e194:	e021      	b.n	800e1da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e196:	697b      	ldr	r3, [r7, #20]
 800e198:	ee07 3a90 	vmov	s15, r3
 800e19c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e1a0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800e290 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800e1a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e1a8:	4b36      	ldr	r3, [pc, #216]	@ (800e284 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e1aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e1ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1b0:	ee07 3a90 	vmov	s15, r3
 800e1b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e1b8:	ed97 6a03 	vldr	s12, [r7, #12]
 800e1bc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800e28c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e1c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e1c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e1c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e1cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e1d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e1d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e1d8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800e1da:	4b2a      	ldr	r3, [pc, #168]	@ (800e284 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e1dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e1de:	0a5b      	lsrs	r3, r3, #9
 800e1e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e1e4:	ee07 3a90 	vmov	s15, r3
 800e1e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e1ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e1f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e1f4:	edd7 6a07 	vldr	s13, [r7, #28]
 800e1f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e1fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e200:	ee17 2a90 	vmov	r2, s15
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800e208:	4b1e      	ldr	r3, [pc, #120]	@ (800e284 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e20a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e20c:	0c1b      	lsrs	r3, r3, #16
 800e20e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e212:	ee07 3a90 	vmov	s15, r3
 800e216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e21a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e21e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e222:	edd7 6a07 	vldr	s13, [r7, #28]
 800e226:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e22a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e22e:	ee17 2a90 	vmov	r2, s15
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800e236:	4b13      	ldr	r3, [pc, #76]	@ (800e284 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e23a:	0e1b      	lsrs	r3, r3, #24
 800e23c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e240:	ee07 3a90 	vmov	s15, r3
 800e244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e248:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e24c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e250:	edd7 6a07 	vldr	s13, [r7, #28]
 800e254:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e258:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e25c:	ee17 2a90 	vmov	r2, s15
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800e264:	e008      	b.n	800e278 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2200      	movs	r2, #0
 800e26a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2200      	movs	r2, #0
 800e270:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	2200      	movs	r2, #0
 800e276:	609a      	str	r2, [r3, #8]
}
 800e278:	bf00      	nop
 800e27a:	3724      	adds	r7, #36	@ 0x24
 800e27c:	46bd      	mov	sp, r7
 800e27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e282:	4770      	bx	lr
 800e284:	58024400 	.word	0x58024400
 800e288:	03d09000 	.word	0x03d09000
 800e28c:	46000000 	.word	0x46000000
 800e290:	4c742400 	.word	0x4c742400
 800e294:	4a742400 	.word	0x4a742400
 800e298:	4af42400 	.word	0x4af42400

0800e29c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b084      	sub	sp, #16
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
 800e2a4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e2aa:	4b53      	ldr	r3, [pc, #332]	@ (800e3f8 <RCCEx_PLL2_Config+0x15c>)
 800e2ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2ae:	f003 0303 	and.w	r3, r3, #3
 800e2b2:	2b03      	cmp	r3, #3
 800e2b4:	d101      	bne.n	800e2ba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	e099      	b.n	800e3ee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800e2ba:	4b4f      	ldr	r3, [pc, #316]	@ (800e3f8 <RCCEx_PLL2_Config+0x15c>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	4a4e      	ldr	r2, [pc, #312]	@ (800e3f8 <RCCEx_PLL2_Config+0x15c>)
 800e2c0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e2c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e2c6:	f7f6 fb51 	bl	800496c <HAL_GetTick>
 800e2ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e2cc:	e008      	b.n	800e2e0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e2ce:	f7f6 fb4d 	bl	800496c <HAL_GetTick>
 800e2d2:	4602      	mov	r2, r0
 800e2d4:	68bb      	ldr	r3, [r7, #8]
 800e2d6:	1ad3      	subs	r3, r2, r3
 800e2d8:	2b02      	cmp	r3, #2
 800e2da:	d901      	bls.n	800e2e0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e2dc:	2303      	movs	r3, #3
 800e2de:	e086      	b.n	800e3ee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e2e0:	4b45      	ldr	r3, [pc, #276]	@ (800e3f8 <RCCEx_PLL2_Config+0x15c>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d1f0      	bne.n	800e2ce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800e2ec:	4b42      	ldr	r3, [pc, #264]	@ (800e3f8 <RCCEx_PLL2_Config+0x15c>)
 800e2ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2f0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	031b      	lsls	r3, r3, #12
 800e2fa:	493f      	ldr	r1, [pc, #252]	@ (800e3f8 <RCCEx_PLL2_Config+0x15c>)
 800e2fc:	4313      	orrs	r3, r2
 800e2fe:	628b      	str	r3, [r1, #40]	@ 0x28
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	685b      	ldr	r3, [r3, #4]
 800e304:	3b01      	subs	r3, #1
 800e306:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	689b      	ldr	r3, [r3, #8]
 800e30e:	3b01      	subs	r3, #1
 800e310:	025b      	lsls	r3, r3, #9
 800e312:	b29b      	uxth	r3, r3
 800e314:	431a      	orrs	r2, r3
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	68db      	ldr	r3, [r3, #12]
 800e31a:	3b01      	subs	r3, #1
 800e31c:	041b      	lsls	r3, r3, #16
 800e31e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e322:	431a      	orrs	r2, r3
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	691b      	ldr	r3, [r3, #16]
 800e328:	3b01      	subs	r3, #1
 800e32a:	061b      	lsls	r3, r3, #24
 800e32c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e330:	4931      	ldr	r1, [pc, #196]	@ (800e3f8 <RCCEx_PLL2_Config+0x15c>)
 800e332:	4313      	orrs	r3, r2
 800e334:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800e336:	4b30      	ldr	r3, [pc, #192]	@ (800e3f8 <RCCEx_PLL2_Config+0x15c>)
 800e338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e33a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	695b      	ldr	r3, [r3, #20]
 800e342:	492d      	ldr	r1, [pc, #180]	@ (800e3f8 <RCCEx_PLL2_Config+0x15c>)
 800e344:	4313      	orrs	r3, r2
 800e346:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800e348:	4b2b      	ldr	r3, [pc, #172]	@ (800e3f8 <RCCEx_PLL2_Config+0x15c>)
 800e34a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e34c:	f023 0220 	bic.w	r2, r3, #32
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	699b      	ldr	r3, [r3, #24]
 800e354:	4928      	ldr	r1, [pc, #160]	@ (800e3f8 <RCCEx_PLL2_Config+0x15c>)
 800e356:	4313      	orrs	r3, r2
 800e358:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800e35a:	4b27      	ldr	r3, [pc, #156]	@ (800e3f8 <RCCEx_PLL2_Config+0x15c>)
 800e35c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e35e:	4a26      	ldr	r2, [pc, #152]	@ (800e3f8 <RCCEx_PLL2_Config+0x15c>)
 800e360:	f023 0310 	bic.w	r3, r3, #16
 800e364:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e366:	4b24      	ldr	r3, [pc, #144]	@ (800e3f8 <RCCEx_PLL2_Config+0x15c>)
 800e368:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e36a:	4b24      	ldr	r3, [pc, #144]	@ (800e3fc <RCCEx_PLL2_Config+0x160>)
 800e36c:	4013      	ands	r3, r2
 800e36e:	687a      	ldr	r2, [r7, #4]
 800e370:	69d2      	ldr	r2, [r2, #28]
 800e372:	00d2      	lsls	r2, r2, #3
 800e374:	4920      	ldr	r1, [pc, #128]	@ (800e3f8 <RCCEx_PLL2_Config+0x15c>)
 800e376:	4313      	orrs	r3, r2
 800e378:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800e37a:	4b1f      	ldr	r3, [pc, #124]	@ (800e3f8 <RCCEx_PLL2_Config+0x15c>)
 800e37c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e37e:	4a1e      	ldr	r2, [pc, #120]	@ (800e3f8 <RCCEx_PLL2_Config+0x15c>)
 800e380:	f043 0310 	orr.w	r3, r3, #16
 800e384:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d106      	bne.n	800e39a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e38c:	4b1a      	ldr	r3, [pc, #104]	@ (800e3f8 <RCCEx_PLL2_Config+0x15c>)
 800e38e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e390:	4a19      	ldr	r2, [pc, #100]	@ (800e3f8 <RCCEx_PLL2_Config+0x15c>)
 800e392:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e396:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e398:	e00f      	b.n	800e3ba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	2b01      	cmp	r3, #1
 800e39e:	d106      	bne.n	800e3ae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800e3a0:	4b15      	ldr	r3, [pc, #84]	@ (800e3f8 <RCCEx_PLL2_Config+0x15c>)
 800e3a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3a4:	4a14      	ldr	r2, [pc, #80]	@ (800e3f8 <RCCEx_PLL2_Config+0x15c>)
 800e3a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e3aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e3ac:	e005      	b.n	800e3ba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e3ae:	4b12      	ldr	r3, [pc, #72]	@ (800e3f8 <RCCEx_PLL2_Config+0x15c>)
 800e3b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3b2:	4a11      	ldr	r2, [pc, #68]	@ (800e3f8 <RCCEx_PLL2_Config+0x15c>)
 800e3b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e3b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800e3ba:	4b0f      	ldr	r3, [pc, #60]	@ (800e3f8 <RCCEx_PLL2_Config+0x15c>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	4a0e      	ldr	r2, [pc, #56]	@ (800e3f8 <RCCEx_PLL2_Config+0x15c>)
 800e3c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e3c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e3c6:	f7f6 fad1 	bl	800496c <HAL_GetTick>
 800e3ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e3cc:	e008      	b.n	800e3e0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e3ce:	f7f6 facd 	bl	800496c <HAL_GetTick>
 800e3d2:	4602      	mov	r2, r0
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	1ad3      	subs	r3, r2, r3
 800e3d8:	2b02      	cmp	r3, #2
 800e3da:	d901      	bls.n	800e3e0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e3dc:	2303      	movs	r3, #3
 800e3de:	e006      	b.n	800e3ee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e3e0:	4b05      	ldr	r3, [pc, #20]	@ (800e3f8 <RCCEx_PLL2_Config+0x15c>)
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d0f0      	beq.n	800e3ce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800e3ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	3710      	adds	r7, #16
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}
 800e3f6:	bf00      	nop
 800e3f8:	58024400 	.word	0x58024400
 800e3fc:	ffff0007 	.word	0xffff0007

0800e400 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b084      	sub	sp, #16
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
 800e408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e40a:	2300      	movs	r3, #0
 800e40c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e40e:	4b53      	ldr	r3, [pc, #332]	@ (800e55c <RCCEx_PLL3_Config+0x15c>)
 800e410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e412:	f003 0303 	and.w	r3, r3, #3
 800e416:	2b03      	cmp	r3, #3
 800e418:	d101      	bne.n	800e41e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800e41a:	2301      	movs	r3, #1
 800e41c:	e099      	b.n	800e552 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800e41e:	4b4f      	ldr	r3, [pc, #316]	@ (800e55c <RCCEx_PLL3_Config+0x15c>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	4a4e      	ldr	r2, [pc, #312]	@ (800e55c <RCCEx_PLL3_Config+0x15c>)
 800e424:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e428:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e42a:	f7f6 fa9f 	bl	800496c <HAL_GetTick>
 800e42e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e430:	e008      	b.n	800e444 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e432:	f7f6 fa9b 	bl	800496c <HAL_GetTick>
 800e436:	4602      	mov	r2, r0
 800e438:	68bb      	ldr	r3, [r7, #8]
 800e43a:	1ad3      	subs	r3, r2, r3
 800e43c:	2b02      	cmp	r3, #2
 800e43e:	d901      	bls.n	800e444 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e440:	2303      	movs	r3, #3
 800e442:	e086      	b.n	800e552 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e444:	4b45      	ldr	r3, [pc, #276]	@ (800e55c <RCCEx_PLL3_Config+0x15c>)
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d1f0      	bne.n	800e432 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800e450:	4b42      	ldr	r3, [pc, #264]	@ (800e55c <RCCEx_PLL3_Config+0x15c>)
 800e452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e454:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	051b      	lsls	r3, r3, #20
 800e45e:	493f      	ldr	r1, [pc, #252]	@ (800e55c <RCCEx_PLL3_Config+0x15c>)
 800e460:	4313      	orrs	r3, r2
 800e462:	628b      	str	r3, [r1, #40]	@ 0x28
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	685b      	ldr	r3, [r3, #4]
 800e468:	3b01      	subs	r3, #1
 800e46a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	689b      	ldr	r3, [r3, #8]
 800e472:	3b01      	subs	r3, #1
 800e474:	025b      	lsls	r3, r3, #9
 800e476:	b29b      	uxth	r3, r3
 800e478:	431a      	orrs	r2, r3
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	68db      	ldr	r3, [r3, #12]
 800e47e:	3b01      	subs	r3, #1
 800e480:	041b      	lsls	r3, r3, #16
 800e482:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e486:	431a      	orrs	r2, r3
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	691b      	ldr	r3, [r3, #16]
 800e48c:	3b01      	subs	r3, #1
 800e48e:	061b      	lsls	r3, r3, #24
 800e490:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e494:	4931      	ldr	r1, [pc, #196]	@ (800e55c <RCCEx_PLL3_Config+0x15c>)
 800e496:	4313      	orrs	r3, r2
 800e498:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e49a:	4b30      	ldr	r3, [pc, #192]	@ (800e55c <RCCEx_PLL3_Config+0x15c>)
 800e49c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e49e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	695b      	ldr	r3, [r3, #20]
 800e4a6:	492d      	ldr	r1, [pc, #180]	@ (800e55c <RCCEx_PLL3_Config+0x15c>)
 800e4a8:	4313      	orrs	r3, r2
 800e4aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e4ac:	4b2b      	ldr	r3, [pc, #172]	@ (800e55c <RCCEx_PLL3_Config+0x15c>)
 800e4ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4b0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	699b      	ldr	r3, [r3, #24]
 800e4b8:	4928      	ldr	r1, [pc, #160]	@ (800e55c <RCCEx_PLL3_Config+0x15c>)
 800e4ba:	4313      	orrs	r3, r2
 800e4bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e4be:	4b27      	ldr	r3, [pc, #156]	@ (800e55c <RCCEx_PLL3_Config+0x15c>)
 800e4c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4c2:	4a26      	ldr	r2, [pc, #152]	@ (800e55c <RCCEx_PLL3_Config+0x15c>)
 800e4c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e4c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e4ca:	4b24      	ldr	r3, [pc, #144]	@ (800e55c <RCCEx_PLL3_Config+0x15c>)
 800e4cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e4ce:	4b24      	ldr	r3, [pc, #144]	@ (800e560 <RCCEx_PLL3_Config+0x160>)
 800e4d0:	4013      	ands	r3, r2
 800e4d2:	687a      	ldr	r2, [r7, #4]
 800e4d4:	69d2      	ldr	r2, [r2, #28]
 800e4d6:	00d2      	lsls	r2, r2, #3
 800e4d8:	4920      	ldr	r1, [pc, #128]	@ (800e55c <RCCEx_PLL3_Config+0x15c>)
 800e4da:	4313      	orrs	r3, r2
 800e4dc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e4de:	4b1f      	ldr	r3, [pc, #124]	@ (800e55c <RCCEx_PLL3_Config+0x15c>)
 800e4e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4e2:	4a1e      	ldr	r2, [pc, #120]	@ (800e55c <RCCEx_PLL3_Config+0x15c>)
 800e4e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e4e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d106      	bne.n	800e4fe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e4f0:	4b1a      	ldr	r3, [pc, #104]	@ (800e55c <RCCEx_PLL3_Config+0x15c>)
 800e4f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4f4:	4a19      	ldr	r2, [pc, #100]	@ (800e55c <RCCEx_PLL3_Config+0x15c>)
 800e4f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800e4fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e4fc:	e00f      	b.n	800e51e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	2b01      	cmp	r3, #1
 800e502:	d106      	bne.n	800e512 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e504:	4b15      	ldr	r3, [pc, #84]	@ (800e55c <RCCEx_PLL3_Config+0x15c>)
 800e506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e508:	4a14      	ldr	r2, [pc, #80]	@ (800e55c <RCCEx_PLL3_Config+0x15c>)
 800e50a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e50e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e510:	e005      	b.n	800e51e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e512:	4b12      	ldr	r3, [pc, #72]	@ (800e55c <RCCEx_PLL3_Config+0x15c>)
 800e514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e516:	4a11      	ldr	r2, [pc, #68]	@ (800e55c <RCCEx_PLL3_Config+0x15c>)
 800e518:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e51c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e51e:	4b0f      	ldr	r3, [pc, #60]	@ (800e55c <RCCEx_PLL3_Config+0x15c>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	4a0e      	ldr	r2, [pc, #56]	@ (800e55c <RCCEx_PLL3_Config+0x15c>)
 800e524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e528:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e52a:	f7f6 fa1f 	bl	800496c <HAL_GetTick>
 800e52e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e530:	e008      	b.n	800e544 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e532:	f7f6 fa1b 	bl	800496c <HAL_GetTick>
 800e536:	4602      	mov	r2, r0
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	1ad3      	subs	r3, r2, r3
 800e53c:	2b02      	cmp	r3, #2
 800e53e:	d901      	bls.n	800e544 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e540:	2303      	movs	r3, #3
 800e542:	e006      	b.n	800e552 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e544:	4b05      	ldr	r3, [pc, #20]	@ (800e55c <RCCEx_PLL3_Config+0x15c>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d0f0      	beq.n	800e532 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e550:	7bfb      	ldrb	r3, [r7, #15]
}
 800e552:	4618      	mov	r0, r3
 800e554:	3710      	adds	r7, #16
 800e556:	46bd      	mov	sp, r7
 800e558:	bd80      	pop	{r7, pc}
 800e55a:	bf00      	nop
 800e55c:	58024400 	.word	0x58024400
 800e560:	ffff0007 	.word	0xffff0007

0800e564 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b082      	sub	sp, #8
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d101      	bne.n	800e576 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e572:	2301      	movs	r3, #1
 800e574:	e049      	b.n	800e60a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e57c:	b2db      	uxtb	r3, r3
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d106      	bne.n	800e590 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2200      	movs	r2, #0
 800e586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f7f5 fef2 	bl	8004374 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2202      	movs	r2, #2
 800e594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681a      	ldr	r2, [r3, #0]
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	3304      	adds	r3, #4
 800e5a0:	4619      	mov	r1, r3
 800e5a2:	4610      	mov	r0, r2
 800e5a4:	f000 fdbe 	bl	800f124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2201      	movs	r2, #1
 800e5ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2201      	movs	r2, #1
 800e5b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2201      	movs	r2, #1
 800e5bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2201      	movs	r2, #1
 800e5c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2201      	movs	r2, #1
 800e5cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2201      	movs	r2, #1
 800e5d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2201      	movs	r2, #1
 800e5dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2201      	movs	r2, #1
 800e5e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2201      	movs	r2, #1
 800e5ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2201      	movs	r2, #1
 800e5f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2201      	movs	r2, #1
 800e5fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2201      	movs	r2, #1
 800e604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e608:	2300      	movs	r3, #0
}
 800e60a:	4618      	mov	r0, r3
 800e60c:	3708      	adds	r7, #8
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}
	...

0800e614 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e614:	b480      	push	{r7}
 800e616:	b085      	sub	sp, #20
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e622:	b2db      	uxtb	r3, r3
 800e624:	2b01      	cmp	r3, #1
 800e626:	d001      	beq.n	800e62c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800e628:	2301      	movs	r3, #1
 800e62a:	e056      	b.n	800e6da <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2202      	movs	r2, #2
 800e630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	4a2b      	ldr	r2, [pc, #172]	@ (800e6e8 <HAL_TIM_Base_Start+0xd4>)
 800e63a:	4293      	cmp	r3, r2
 800e63c:	d02c      	beq.n	800e698 <HAL_TIM_Base_Start+0x84>
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e646:	d027      	beq.n	800e698 <HAL_TIM_Base_Start+0x84>
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	4a27      	ldr	r2, [pc, #156]	@ (800e6ec <HAL_TIM_Base_Start+0xd8>)
 800e64e:	4293      	cmp	r3, r2
 800e650:	d022      	beq.n	800e698 <HAL_TIM_Base_Start+0x84>
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	4a26      	ldr	r2, [pc, #152]	@ (800e6f0 <HAL_TIM_Base_Start+0xdc>)
 800e658:	4293      	cmp	r3, r2
 800e65a:	d01d      	beq.n	800e698 <HAL_TIM_Base_Start+0x84>
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	4a24      	ldr	r2, [pc, #144]	@ (800e6f4 <HAL_TIM_Base_Start+0xe0>)
 800e662:	4293      	cmp	r3, r2
 800e664:	d018      	beq.n	800e698 <HAL_TIM_Base_Start+0x84>
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	4a23      	ldr	r2, [pc, #140]	@ (800e6f8 <HAL_TIM_Base_Start+0xe4>)
 800e66c:	4293      	cmp	r3, r2
 800e66e:	d013      	beq.n	800e698 <HAL_TIM_Base_Start+0x84>
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	4a21      	ldr	r2, [pc, #132]	@ (800e6fc <HAL_TIM_Base_Start+0xe8>)
 800e676:	4293      	cmp	r3, r2
 800e678:	d00e      	beq.n	800e698 <HAL_TIM_Base_Start+0x84>
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	4a20      	ldr	r2, [pc, #128]	@ (800e700 <HAL_TIM_Base_Start+0xec>)
 800e680:	4293      	cmp	r3, r2
 800e682:	d009      	beq.n	800e698 <HAL_TIM_Base_Start+0x84>
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	4a1e      	ldr	r2, [pc, #120]	@ (800e704 <HAL_TIM_Base_Start+0xf0>)
 800e68a:	4293      	cmp	r3, r2
 800e68c:	d004      	beq.n	800e698 <HAL_TIM_Base_Start+0x84>
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	4a1d      	ldr	r2, [pc, #116]	@ (800e708 <HAL_TIM_Base_Start+0xf4>)
 800e694:	4293      	cmp	r3, r2
 800e696:	d115      	bne.n	800e6c4 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	689a      	ldr	r2, [r3, #8]
 800e69e:	4b1b      	ldr	r3, [pc, #108]	@ (800e70c <HAL_TIM_Base_Start+0xf8>)
 800e6a0:	4013      	ands	r3, r2
 800e6a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	2b06      	cmp	r3, #6
 800e6a8:	d015      	beq.n	800e6d6 <HAL_TIM_Base_Start+0xc2>
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e6b0:	d011      	beq.n	800e6d6 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	681a      	ldr	r2, [r3, #0]
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	f042 0201 	orr.w	r2, r2, #1
 800e6c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6c2:	e008      	b.n	800e6d6 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	681a      	ldr	r2, [r3, #0]
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	f042 0201 	orr.w	r2, r2, #1
 800e6d2:	601a      	str	r2, [r3, #0]
 800e6d4:	e000      	b.n	800e6d8 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e6d8:	2300      	movs	r3, #0
}
 800e6da:	4618      	mov	r0, r3
 800e6dc:	3714      	adds	r7, #20
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e4:	4770      	bx	lr
 800e6e6:	bf00      	nop
 800e6e8:	40010000 	.word	0x40010000
 800e6ec:	40000400 	.word	0x40000400
 800e6f0:	40000800 	.word	0x40000800
 800e6f4:	40000c00 	.word	0x40000c00
 800e6f8:	40010400 	.word	0x40010400
 800e6fc:	40001800 	.word	0x40001800
 800e700:	40014000 	.word	0x40014000
 800e704:	4000e000 	.word	0x4000e000
 800e708:	4000e400 	.word	0x4000e400
 800e70c:	00010007 	.word	0x00010007

0800e710 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b082      	sub	sp, #8
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d101      	bne.n	800e722 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e71e:	2301      	movs	r3, #1
 800e720:	e049      	b.n	800e7b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e728:	b2db      	uxtb	r3, r3
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d106      	bne.n	800e73c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	2200      	movs	r2, #0
 800e732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e736:	6878      	ldr	r0, [r7, #4]
 800e738:	f7f5 fd4c 	bl	80041d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	2202      	movs	r2, #2
 800e740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681a      	ldr	r2, [r3, #0]
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	3304      	adds	r3, #4
 800e74c:	4619      	mov	r1, r3
 800e74e:	4610      	mov	r0, r2
 800e750:	f000 fce8 	bl	800f124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2201      	movs	r2, #1
 800e758:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2201      	movs	r2, #1
 800e760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2201      	movs	r2, #1
 800e768:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2201      	movs	r2, #1
 800e770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	2201      	movs	r2, #1
 800e778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2201      	movs	r2, #1
 800e780:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2201      	movs	r2, #1
 800e788:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2201      	movs	r2, #1
 800e790:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2201      	movs	r2, #1
 800e798:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2201      	movs	r2, #1
 800e7a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2201      	movs	r2, #1
 800e7a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2201      	movs	r2, #1
 800e7b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e7b4:	2300      	movs	r3, #0
}
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	3708      	adds	r7, #8
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}
	...

0800e7c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b084      	sub	sp, #16
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
 800e7c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d109      	bne.n	800e7e4 <HAL_TIM_PWM_Start+0x24>
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e7d6:	b2db      	uxtb	r3, r3
 800e7d8:	2b01      	cmp	r3, #1
 800e7da:	bf14      	ite	ne
 800e7dc:	2301      	movne	r3, #1
 800e7de:	2300      	moveq	r3, #0
 800e7e0:	b2db      	uxtb	r3, r3
 800e7e2:	e03c      	b.n	800e85e <HAL_TIM_PWM_Start+0x9e>
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	2b04      	cmp	r3, #4
 800e7e8:	d109      	bne.n	800e7fe <HAL_TIM_PWM_Start+0x3e>
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e7f0:	b2db      	uxtb	r3, r3
 800e7f2:	2b01      	cmp	r3, #1
 800e7f4:	bf14      	ite	ne
 800e7f6:	2301      	movne	r3, #1
 800e7f8:	2300      	moveq	r3, #0
 800e7fa:	b2db      	uxtb	r3, r3
 800e7fc:	e02f      	b.n	800e85e <HAL_TIM_PWM_Start+0x9e>
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	2b08      	cmp	r3, #8
 800e802:	d109      	bne.n	800e818 <HAL_TIM_PWM_Start+0x58>
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e80a:	b2db      	uxtb	r3, r3
 800e80c:	2b01      	cmp	r3, #1
 800e80e:	bf14      	ite	ne
 800e810:	2301      	movne	r3, #1
 800e812:	2300      	moveq	r3, #0
 800e814:	b2db      	uxtb	r3, r3
 800e816:	e022      	b.n	800e85e <HAL_TIM_PWM_Start+0x9e>
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	2b0c      	cmp	r3, #12
 800e81c:	d109      	bne.n	800e832 <HAL_TIM_PWM_Start+0x72>
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e824:	b2db      	uxtb	r3, r3
 800e826:	2b01      	cmp	r3, #1
 800e828:	bf14      	ite	ne
 800e82a:	2301      	movne	r3, #1
 800e82c:	2300      	moveq	r3, #0
 800e82e:	b2db      	uxtb	r3, r3
 800e830:	e015      	b.n	800e85e <HAL_TIM_PWM_Start+0x9e>
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	2b10      	cmp	r3, #16
 800e836:	d109      	bne.n	800e84c <HAL_TIM_PWM_Start+0x8c>
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e83e:	b2db      	uxtb	r3, r3
 800e840:	2b01      	cmp	r3, #1
 800e842:	bf14      	ite	ne
 800e844:	2301      	movne	r3, #1
 800e846:	2300      	moveq	r3, #0
 800e848:	b2db      	uxtb	r3, r3
 800e84a:	e008      	b.n	800e85e <HAL_TIM_PWM_Start+0x9e>
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e852:	b2db      	uxtb	r3, r3
 800e854:	2b01      	cmp	r3, #1
 800e856:	bf14      	ite	ne
 800e858:	2301      	movne	r3, #1
 800e85a:	2300      	moveq	r3, #0
 800e85c:	b2db      	uxtb	r3, r3
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d001      	beq.n	800e866 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e862:	2301      	movs	r3, #1
 800e864:	e0ab      	b.n	800e9be <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d104      	bne.n	800e876 <HAL_TIM_PWM_Start+0xb6>
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2202      	movs	r2, #2
 800e870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e874:	e023      	b.n	800e8be <HAL_TIM_PWM_Start+0xfe>
 800e876:	683b      	ldr	r3, [r7, #0]
 800e878:	2b04      	cmp	r3, #4
 800e87a:	d104      	bne.n	800e886 <HAL_TIM_PWM_Start+0xc6>
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	2202      	movs	r2, #2
 800e880:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e884:	e01b      	b.n	800e8be <HAL_TIM_PWM_Start+0xfe>
 800e886:	683b      	ldr	r3, [r7, #0]
 800e888:	2b08      	cmp	r3, #8
 800e88a:	d104      	bne.n	800e896 <HAL_TIM_PWM_Start+0xd6>
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	2202      	movs	r2, #2
 800e890:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e894:	e013      	b.n	800e8be <HAL_TIM_PWM_Start+0xfe>
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	2b0c      	cmp	r3, #12
 800e89a:	d104      	bne.n	800e8a6 <HAL_TIM_PWM_Start+0xe6>
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2202      	movs	r2, #2
 800e8a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e8a4:	e00b      	b.n	800e8be <HAL_TIM_PWM_Start+0xfe>
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	2b10      	cmp	r3, #16
 800e8aa:	d104      	bne.n	800e8b6 <HAL_TIM_PWM_Start+0xf6>
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	2202      	movs	r2, #2
 800e8b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e8b4:	e003      	b.n	800e8be <HAL_TIM_PWM_Start+0xfe>
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2202      	movs	r2, #2
 800e8ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	2201      	movs	r2, #1
 800e8c4:	6839      	ldr	r1, [r7, #0]
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	f001 f97c 	bl	800fbc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	4a3d      	ldr	r2, [pc, #244]	@ (800e9c8 <HAL_TIM_PWM_Start+0x208>)
 800e8d2:	4293      	cmp	r3, r2
 800e8d4:	d013      	beq.n	800e8fe <HAL_TIM_PWM_Start+0x13e>
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	4a3c      	ldr	r2, [pc, #240]	@ (800e9cc <HAL_TIM_PWM_Start+0x20c>)
 800e8dc:	4293      	cmp	r3, r2
 800e8de:	d00e      	beq.n	800e8fe <HAL_TIM_PWM_Start+0x13e>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	4a3a      	ldr	r2, [pc, #232]	@ (800e9d0 <HAL_TIM_PWM_Start+0x210>)
 800e8e6:	4293      	cmp	r3, r2
 800e8e8:	d009      	beq.n	800e8fe <HAL_TIM_PWM_Start+0x13e>
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	4a39      	ldr	r2, [pc, #228]	@ (800e9d4 <HAL_TIM_PWM_Start+0x214>)
 800e8f0:	4293      	cmp	r3, r2
 800e8f2:	d004      	beq.n	800e8fe <HAL_TIM_PWM_Start+0x13e>
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	4a37      	ldr	r2, [pc, #220]	@ (800e9d8 <HAL_TIM_PWM_Start+0x218>)
 800e8fa:	4293      	cmp	r3, r2
 800e8fc:	d101      	bne.n	800e902 <HAL_TIM_PWM_Start+0x142>
 800e8fe:	2301      	movs	r3, #1
 800e900:	e000      	b.n	800e904 <HAL_TIM_PWM_Start+0x144>
 800e902:	2300      	movs	r3, #0
 800e904:	2b00      	cmp	r3, #0
 800e906:	d007      	beq.n	800e918 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e916:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	4a2a      	ldr	r2, [pc, #168]	@ (800e9c8 <HAL_TIM_PWM_Start+0x208>)
 800e91e:	4293      	cmp	r3, r2
 800e920:	d02c      	beq.n	800e97c <HAL_TIM_PWM_Start+0x1bc>
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e92a:	d027      	beq.n	800e97c <HAL_TIM_PWM_Start+0x1bc>
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	4a2a      	ldr	r2, [pc, #168]	@ (800e9dc <HAL_TIM_PWM_Start+0x21c>)
 800e932:	4293      	cmp	r3, r2
 800e934:	d022      	beq.n	800e97c <HAL_TIM_PWM_Start+0x1bc>
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	4a29      	ldr	r2, [pc, #164]	@ (800e9e0 <HAL_TIM_PWM_Start+0x220>)
 800e93c:	4293      	cmp	r3, r2
 800e93e:	d01d      	beq.n	800e97c <HAL_TIM_PWM_Start+0x1bc>
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	4a27      	ldr	r2, [pc, #156]	@ (800e9e4 <HAL_TIM_PWM_Start+0x224>)
 800e946:	4293      	cmp	r3, r2
 800e948:	d018      	beq.n	800e97c <HAL_TIM_PWM_Start+0x1bc>
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	4a1f      	ldr	r2, [pc, #124]	@ (800e9cc <HAL_TIM_PWM_Start+0x20c>)
 800e950:	4293      	cmp	r3, r2
 800e952:	d013      	beq.n	800e97c <HAL_TIM_PWM_Start+0x1bc>
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	4a23      	ldr	r2, [pc, #140]	@ (800e9e8 <HAL_TIM_PWM_Start+0x228>)
 800e95a:	4293      	cmp	r3, r2
 800e95c:	d00e      	beq.n	800e97c <HAL_TIM_PWM_Start+0x1bc>
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	4a1b      	ldr	r2, [pc, #108]	@ (800e9d0 <HAL_TIM_PWM_Start+0x210>)
 800e964:	4293      	cmp	r3, r2
 800e966:	d009      	beq.n	800e97c <HAL_TIM_PWM_Start+0x1bc>
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	4a1f      	ldr	r2, [pc, #124]	@ (800e9ec <HAL_TIM_PWM_Start+0x22c>)
 800e96e:	4293      	cmp	r3, r2
 800e970:	d004      	beq.n	800e97c <HAL_TIM_PWM_Start+0x1bc>
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	4a1e      	ldr	r2, [pc, #120]	@ (800e9f0 <HAL_TIM_PWM_Start+0x230>)
 800e978:	4293      	cmp	r3, r2
 800e97a:	d115      	bne.n	800e9a8 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	689a      	ldr	r2, [r3, #8]
 800e982:	4b1c      	ldr	r3, [pc, #112]	@ (800e9f4 <HAL_TIM_PWM_Start+0x234>)
 800e984:	4013      	ands	r3, r2
 800e986:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	2b06      	cmp	r3, #6
 800e98c:	d015      	beq.n	800e9ba <HAL_TIM_PWM_Start+0x1fa>
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e994:	d011      	beq.n	800e9ba <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	681a      	ldr	r2, [r3, #0]
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	f042 0201 	orr.w	r2, r2, #1
 800e9a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e9a6:	e008      	b.n	800e9ba <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	681a      	ldr	r2, [r3, #0]
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	f042 0201 	orr.w	r2, r2, #1
 800e9b6:	601a      	str	r2, [r3, #0]
 800e9b8:	e000      	b.n	800e9bc <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e9ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e9bc:	2300      	movs	r3, #0
}
 800e9be:	4618      	mov	r0, r3
 800e9c0:	3710      	adds	r7, #16
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}
 800e9c6:	bf00      	nop
 800e9c8:	40010000 	.word	0x40010000
 800e9cc:	40010400 	.word	0x40010400
 800e9d0:	40014000 	.word	0x40014000
 800e9d4:	40014400 	.word	0x40014400
 800e9d8:	40014800 	.word	0x40014800
 800e9dc:	40000400 	.word	0x40000400
 800e9e0:	40000800 	.word	0x40000800
 800e9e4:	40000c00 	.word	0x40000c00
 800e9e8:	40001800 	.word	0x40001800
 800e9ec:	4000e000 	.word	0x4000e000
 800e9f0:	4000e400 	.word	0x4000e400
 800e9f4:	00010007 	.word	0x00010007

0800e9f8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b082      	sub	sp, #8
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
 800ea00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	2200      	movs	r2, #0
 800ea08:	6839      	ldr	r1, [r7, #0]
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	f001 f8da 	bl	800fbc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	4a3e      	ldr	r2, [pc, #248]	@ (800eb10 <HAL_TIM_PWM_Stop+0x118>)
 800ea16:	4293      	cmp	r3, r2
 800ea18:	d013      	beq.n	800ea42 <HAL_TIM_PWM_Stop+0x4a>
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	4a3d      	ldr	r2, [pc, #244]	@ (800eb14 <HAL_TIM_PWM_Stop+0x11c>)
 800ea20:	4293      	cmp	r3, r2
 800ea22:	d00e      	beq.n	800ea42 <HAL_TIM_PWM_Stop+0x4a>
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	4a3b      	ldr	r2, [pc, #236]	@ (800eb18 <HAL_TIM_PWM_Stop+0x120>)
 800ea2a:	4293      	cmp	r3, r2
 800ea2c:	d009      	beq.n	800ea42 <HAL_TIM_PWM_Stop+0x4a>
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	4a3a      	ldr	r2, [pc, #232]	@ (800eb1c <HAL_TIM_PWM_Stop+0x124>)
 800ea34:	4293      	cmp	r3, r2
 800ea36:	d004      	beq.n	800ea42 <HAL_TIM_PWM_Stop+0x4a>
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	4a38      	ldr	r2, [pc, #224]	@ (800eb20 <HAL_TIM_PWM_Stop+0x128>)
 800ea3e:	4293      	cmp	r3, r2
 800ea40:	d101      	bne.n	800ea46 <HAL_TIM_PWM_Stop+0x4e>
 800ea42:	2301      	movs	r3, #1
 800ea44:	e000      	b.n	800ea48 <HAL_TIM_PWM_Stop+0x50>
 800ea46:	2300      	movs	r3, #0
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d017      	beq.n	800ea7c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	6a1a      	ldr	r2, [r3, #32]
 800ea52:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ea56:	4013      	ands	r3, r2
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d10f      	bne.n	800ea7c <HAL_TIM_PWM_Stop+0x84>
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	6a1a      	ldr	r2, [r3, #32]
 800ea62:	f240 4344 	movw	r3, #1092	@ 0x444
 800ea66:	4013      	ands	r3, r2
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d107      	bne.n	800ea7c <HAL_TIM_PWM_Stop+0x84>
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ea7a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	6a1a      	ldr	r2, [r3, #32]
 800ea82:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ea86:	4013      	ands	r3, r2
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d10f      	bne.n	800eaac <HAL_TIM_PWM_Stop+0xb4>
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	6a1a      	ldr	r2, [r3, #32]
 800ea92:	f240 4344 	movw	r3, #1092	@ 0x444
 800ea96:	4013      	ands	r3, r2
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d107      	bne.n	800eaac <HAL_TIM_PWM_Stop+0xb4>
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	681a      	ldr	r2, [r3, #0]
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	f022 0201 	bic.w	r2, r2, #1
 800eaaa:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d104      	bne.n	800eabc <HAL_TIM_PWM_Stop+0xc4>
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	2201      	movs	r2, #1
 800eab6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800eaba:	e023      	b.n	800eb04 <HAL_TIM_PWM_Stop+0x10c>
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	2b04      	cmp	r3, #4
 800eac0:	d104      	bne.n	800eacc <HAL_TIM_PWM_Stop+0xd4>
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2201      	movs	r2, #1
 800eac6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800eaca:	e01b      	b.n	800eb04 <HAL_TIM_PWM_Stop+0x10c>
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	2b08      	cmp	r3, #8
 800ead0:	d104      	bne.n	800eadc <HAL_TIM_PWM_Stop+0xe4>
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	2201      	movs	r2, #1
 800ead6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800eada:	e013      	b.n	800eb04 <HAL_TIM_PWM_Stop+0x10c>
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	2b0c      	cmp	r3, #12
 800eae0:	d104      	bne.n	800eaec <HAL_TIM_PWM_Stop+0xf4>
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2201      	movs	r2, #1
 800eae6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800eaea:	e00b      	b.n	800eb04 <HAL_TIM_PWM_Stop+0x10c>
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	2b10      	cmp	r3, #16
 800eaf0:	d104      	bne.n	800eafc <HAL_TIM_PWM_Stop+0x104>
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2201      	movs	r2, #1
 800eaf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800eafa:	e003      	b.n	800eb04 <HAL_TIM_PWM_Stop+0x10c>
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2201      	movs	r2, #1
 800eb00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800eb04:	2300      	movs	r3, #0
}
 800eb06:	4618      	mov	r0, r3
 800eb08:	3708      	adds	r7, #8
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}
 800eb0e:	bf00      	nop
 800eb10:	40010000 	.word	0x40010000
 800eb14:	40010400 	.word	0x40010400
 800eb18:	40014000 	.word	0x40014000
 800eb1c:	40014400 	.word	0x40014400
 800eb20:	40014800 	.word	0x40014800

0800eb24 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b082      	sub	sp, #8
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d101      	bne.n	800eb36 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800eb32:	2301      	movs	r3, #1
 800eb34:	e049      	b.n	800ebca <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800eb3c:	b2db      	uxtb	r3, r3
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d106      	bne.n	800eb50 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2200      	movs	r2, #0
 800eb46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800eb4a:	6878      	ldr	r0, [r7, #4]
 800eb4c:	f7f5 fb90 	bl	8004270 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2202      	movs	r2, #2
 800eb54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681a      	ldr	r2, [r3, #0]
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	3304      	adds	r3, #4
 800eb60:	4619      	mov	r1, r3
 800eb62:	4610      	mov	r0, r2
 800eb64:	f000 fade 	bl	800f124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2201      	movs	r2, #1
 800eb6c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2201      	movs	r2, #1
 800eb74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2201      	movs	r2, #1
 800eb7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2201      	movs	r2, #1
 800eb84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2201      	movs	r2, #1
 800eb8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2201      	movs	r2, #1
 800eb94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2201      	movs	r2, #1
 800eb9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	2201      	movs	r2, #1
 800eba4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2201      	movs	r2, #1
 800ebac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2201      	movs	r2, #1
 800ebb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2201      	movs	r2, #1
 800ebbc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2201      	movs	r2, #1
 800ebc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ebc8:	2300      	movs	r3, #0
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	3708      	adds	r7, #8
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}

0800ebd2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800ebd2:	b580      	push	{r7, lr}
 800ebd4:	b086      	sub	sp, #24
 800ebd6:	af00      	add	r7, sp, #0
 800ebd8:	60f8      	str	r0, [r7, #12]
 800ebda:	60b9      	str	r1, [r7, #8]
 800ebdc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ebe8:	2b01      	cmp	r3, #1
 800ebea:	d101      	bne.n	800ebf0 <HAL_TIM_IC_ConfigChannel+0x1e>
 800ebec:	2302      	movs	r3, #2
 800ebee:	e088      	b.n	800ed02 <HAL_TIM_IC_ConfigChannel+0x130>
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	2201      	movs	r2, #1
 800ebf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d11b      	bne.n	800ec36 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ec06:	68bb      	ldr	r3, [r7, #8]
 800ec08:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ec0a:	68bb      	ldr	r3, [r7, #8]
 800ec0c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800ec0e:	f000 fe05 	bl	800f81c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	699a      	ldr	r2, [r3, #24]
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	f022 020c 	bic.w	r2, r2, #12
 800ec20:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	6999      	ldr	r1, [r3, #24]
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	689a      	ldr	r2, [r3, #8]
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	430a      	orrs	r2, r1
 800ec32:	619a      	str	r2, [r3, #24]
 800ec34:	e060      	b.n	800ecf8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2b04      	cmp	r3, #4
 800ec3a:	d11c      	bne.n	800ec76 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ec40:	68bb      	ldr	r3, [r7, #8]
 800ec42:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ec44:	68bb      	ldr	r3, [r7, #8]
 800ec46:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800ec4c:	f000 fe95 	bl	800f97a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	699a      	ldr	r2, [r3, #24]
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800ec5e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	6999      	ldr	r1, [r3, #24]
 800ec66:	68bb      	ldr	r3, [r7, #8]
 800ec68:	689b      	ldr	r3, [r3, #8]
 800ec6a:	021a      	lsls	r2, r3, #8
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	430a      	orrs	r2, r1
 800ec72:	619a      	str	r2, [r3, #24]
 800ec74:	e040      	b.n	800ecf8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2b08      	cmp	r3, #8
 800ec7a:	d11b      	bne.n	800ecb4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ec84:	68bb      	ldr	r3, [r7, #8]
 800ec86:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ec88:	68bb      	ldr	r3, [r7, #8]
 800ec8a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800ec8c:	f000 fee2 	bl	800fa54 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	69da      	ldr	r2, [r3, #28]
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	f022 020c 	bic.w	r2, r2, #12
 800ec9e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	69d9      	ldr	r1, [r3, #28]
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	689a      	ldr	r2, [r3, #8]
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	430a      	orrs	r2, r1
 800ecb0:	61da      	str	r2, [r3, #28]
 800ecb2:	e021      	b.n	800ecf8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	2b0c      	cmp	r3, #12
 800ecb8:	d11c      	bne.n	800ecf4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ecbe:	68bb      	ldr	r3, [r7, #8]
 800ecc0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ecc2:	68bb      	ldr	r3, [r7, #8]
 800ecc4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800ecca:	f000 feff 	bl	800facc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	69da      	ldr	r2, [r3, #28]
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800ecdc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	69d9      	ldr	r1, [r3, #28]
 800ece4:	68bb      	ldr	r3, [r7, #8]
 800ece6:	689b      	ldr	r3, [r3, #8]
 800ece8:	021a      	lsls	r2, r3, #8
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	430a      	orrs	r2, r1
 800ecf0:	61da      	str	r2, [r3, #28]
 800ecf2:	e001      	b.n	800ecf8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800ecf4:	2301      	movs	r3, #1
 800ecf6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ed00:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed02:	4618      	mov	r0, r3
 800ed04:	3718      	adds	r7, #24
 800ed06:	46bd      	mov	sp, r7
 800ed08:	bd80      	pop	{r7, pc}
	...

0800ed0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b086      	sub	sp, #24
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	60f8      	str	r0, [r7, #12]
 800ed14:	60b9      	str	r1, [r7, #8]
 800ed16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ed18:	2300      	movs	r3, #0
 800ed1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ed22:	2b01      	cmp	r3, #1
 800ed24:	d101      	bne.n	800ed2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ed26:	2302      	movs	r3, #2
 800ed28:	e0ff      	b.n	800ef2a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	2201      	movs	r2, #1
 800ed2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2b14      	cmp	r3, #20
 800ed36:	f200 80f0 	bhi.w	800ef1a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ed3a:	a201      	add	r2, pc, #4	@ (adr r2, 800ed40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ed3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed40:	0800ed95 	.word	0x0800ed95
 800ed44:	0800ef1b 	.word	0x0800ef1b
 800ed48:	0800ef1b 	.word	0x0800ef1b
 800ed4c:	0800ef1b 	.word	0x0800ef1b
 800ed50:	0800edd5 	.word	0x0800edd5
 800ed54:	0800ef1b 	.word	0x0800ef1b
 800ed58:	0800ef1b 	.word	0x0800ef1b
 800ed5c:	0800ef1b 	.word	0x0800ef1b
 800ed60:	0800ee17 	.word	0x0800ee17
 800ed64:	0800ef1b 	.word	0x0800ef1b
 800ed68:	0800ef1b 	.word	0x0800ef1b
 800ed6c:	0800ef1b 	.word	0x0800ef1b
 800ed70:	0800ee57 	.word	0x0800ee57
 800ed74:	0800ef1b 	.word	0x0800ef1b
 800ed78:	0800ef1b 	.word	0x0800ef1b
 800ed7c:	0800ef1b 	.word	0x0800ef1b
 800ed80:	0800ee99 	.word	0x0800ee99
 800ed84:	0800ef1b 	.word	0x0800ef1b
 800ed88:	0800ef1b 	.word	0x0800ef1b
 800ed8c:	0800ef1b 	.word	0x0800ef1b
 800ed90:	0800eed9 	.word	0x0800eed9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	68b9      	ldr	r1, [r7, #8]
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f000 fa68 	bl	800f270 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	699a      	ldr	r2, [r3, #24]
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	f042 0208 	orr.w	r2, r2, #8
 800edae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	699a      	ldr	r2, [r3, #24]
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	f022 0204 	bic.w	r2, r2, #4
 800edbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	6999      	ldr	r1, [r3, #24]
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	691a      	ldr	r2, [r3, #16]
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	430a      	orrs	r2, r1
 800edd0:	619a      	str	r2, [r3, #24]
      break;
 800edd2:	e0a5      	b.n	800ef20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	68b9      	ldr	r1, [r7, #8]
 800edda:	4618      	mov	r0, r3
 800eddc:	f000 fad8 	bl	800f390 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	699a      	ldr	r2, [r3, #24]
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800edee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	699a      	ldr	r2, [r3, #24]
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800edfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	6999      	ldr	r1, [r3, #24]
 800ee06:	68bb      	ldr	r3, [r7, #8]
 800ee08:	691b      	ldr	r3, [r3, #16]
 800ee0a:	021a      	lsls	r2, r3, #8
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	430a      	orrs	r2, r1
 800ee12:	619a      	str	r2, [r3, #24]
      break;
 800ee14:	e084      	b.n	800ef20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	68b9      	ldr	r1, [r7, #8]
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	f000 fb41 	bl	800f4a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	69da      	ldr	r2, [r3, #28]
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	f042 0208 	orr.w	r2, r2, #8
 800ee30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	69da      	ldr	r2, [r3, #28]
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	f022 0204 	bic.w	r2, r2, #4
 800ee40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	69d9      	ldr	r1, [r3, #28]
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	691a      	ldr	r2, [r3, #16]
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	430a      	orrs	r2, r1
 800ee52:	61da      	str	r2, [r3, #28]
      break;
 800ee54:	e064      	b.n	800ef20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	68b9      	ldr	r1, [r7, #8]
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	f000 fba9 	bl	800f5b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	69da      	ldr	r2, [r3, #28]
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ee70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	69da      	ldr	r2, [r3, #28]
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ee80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	69d9      	ldr	r1, [r3, #28]
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	691b      	ldr	r3, [r3, #16]
 800ee8c:	021a      	lsls	r2, r3, #8
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	430a      	orrs	r2, r1
 800ee94:	61da      	str	r2, [r3, #28]
      break;
 800ee96:	e043      	b.n	800ef20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	68b9      	ldr	r1, [r7, #8]
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f000 fbf2 	bl	800f688 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	f042 0208 	orr.w	r2, r2, #8
 800eeb2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	f022 0204 	bic.w	r2, r2, #4
 800eec2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800eeca:	68bb      	ldr	r3, [r7, #8]
 800eecc:	691a      	ldr	r2, [r3, #16]
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	430a      	orrs	r2, r1
 800eed4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800eed6:	e023      	b.n	800ef20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	68b9      	ldr	r1, [r7, #8]
 800eede:	4618      	mov	r0, r3
 800eee0:	f000 fc36 	bl	800f750 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800eef2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ef02:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	691b      	ldr	r3, [r3, #16]
 800ef0e:	021a      	lsls	r2, r3, #8
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	430a      	orrs	r2, r1
 800ef16:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ef18:	e002      	b.n	800ef20 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ef1a:	2301      	movs	r3, #1
 800ef1c:	75fb      	strb	r3, [r7, #23]
      break;
 800ef1e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	2200      	movs	r2, #0
 800ef24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ef28:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	3718      	adds	r7, #24
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}
 800ef32:	bf00      	nop

0800ef34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b084      	sub	sp, #16
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
 800ef3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ef3e:	2300      	movs	r3, #0
 800ef40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ef48:	2b01      	cmp	r3, #1
 800ef4a:	d101      	bne.n	800ef50 <HAL_TIM_ConfigClockSource+0x1c>
 800ef4c:	2302      	movs	r3, #2
 800ef4e:	e0dc      	b.n	800f10a <HAL_TIM_ConfigClockSource+0x1d6>
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	2201      	movs	r2, #1
 800ef54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2202      	movs	r2, #2
 800ef5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	689b      	ldr	r3, [r3, #8]
 800ef66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ef68:	68ba      	ldr	r2, [r7, #8]
 800ef6a:	4b6a      	ldr	r3, [pc, #424]	@ (800f114 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ef6c:	4013      	ands	r3, r2
 800ef6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ef70:	68bb      	ldr	r3, [r7, #8]
 800ef72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ef76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	68ba      	ldr	r2, [r7, #8]
 800ef7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	4a64      	ldr	r2, [pc, #400]	@ (800f118 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ef86:	4293      	cmp	r3, r2
 800ef88:	f000 80a9 	beq.w	800f0de <HAL_TIM_ConfigClockSource+0x1aa>
 800ef8c:	4a62      	ldr	r2, [pc, #392]	@ (800f118 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ef8e:	4293      	cmp	r3, r2
 800ef90:	f200 80ae 	bhi.w	800f0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800ef94:	4a61      	ldr	r2, [pc, #388]	@ (800f11c <HAL_TIM_ConfigClockSource+0x1e8>)
 800ef96:	4293      	cmp	r3, r2
 800ef98:	f000 80a1 	beq.w	800f0de <HAL_TIM_ConfigClockSource+0x1aa>
 800ef9c:	4a5f      	ldr	r2, [pc, #380]	@ (800f11c <HAL_TIM_ConfigClockSource+0x1e8>)
 800ef9e:	4293      	cmp	r3, r2
 800efa0:	f200 80a6 	bhi.w	800f0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800efa4:	4a5e      	ldr	r2, [pc, #376]	@ (800f120 <HAL_TIM_ConfigClockSource+0x1ec>)
 800efa6:	4293      	cmp	r3, r2
 800efa8:	f000 8099 	beq.w	800f0de <HAL_TIM_ConfigClockSource+0x1aa>
 800efac:	4a5c      	ldr	r2, [pc, #368]	@ (800f120 <HAL_TIM_ConfigClockSource+0x1ec>)
 800efae:	4293      	cmp	r3, r2
 800efb0:	f200 809e 	bhi.w	800f0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800efb4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800efb8:	f000 8091 	beq.w	800f0de <HAL_TIM_ConfigClockSource+0x1aa>
 800efbc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800efc0:	f200 8096 	bhi.w	800f0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800efc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800efc8:	f000 8089 	beq.w	800f0de <HAL_TIM_ConfigClockSource+0x1aa>
 800efcc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800efd0:	f200 808e 	bhi.w	800f0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800efd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800efd8:	d03e      	beq.n	800f058 <HAL_TIM_ConfigClockSource+0x124>
 800efda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800efde:	f200 8087 	bhi.w	800f0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800efe2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800efe6:	f000 8086 	beq.w	800f0f6 <HAL_TIM_ConfigClockSource+0x1c2>
 800efea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800efee:	d87f      	bhi.n	800f0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800eff0:	2b70      	cmp	r3, #112	@ 0x70
 800eff2:	d01a      	beq.n	800f02a <HAL_TIM_ConfigClockSource+0xf6>
 800eff4:	2b70      	cmp	r3, #112	@ 0x70
 800eff6:	d87b      	bhi.n	800f0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800eff8:	2b60      	cmp	r3, #96	@ 0x60
 800effa:	d050      	beq.n	800f09e <HAL_TIM_ConfigClockSource+0x16a>
 800effc:	2b60      	cmp	r3, #96	@ 0x60
 800effe:	d877      	bhi.n	800f0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f000:	2b50      	cmp	r3, #80	@ 0x50
 800f002:	d03c      	beq.n	800f07e <HAL_TIM_ConfigClockSource+0x14a>
 800f004:	2b50      	cmp	r3, #80	@ 0x50
 800f006:	d873      	bhi.n	800f0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f008:	2b40      	cmp	r3, #64	@ 0x40
 800f00a:	d058      	beq.n	800f0be <HAL_TIM_ConfigClockSource+0x18a>
 800f00c:	2b40      	cmp	r3, #64	@ 0x40
 800f00e:	d86f      	bhi.n	800f0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f010:	2b30      	cmp	r3, #48	@ 0x30
 800f012:	d064      	beq.n	800f0de <HAL_TIM_ConfigClockSource+0x1aa>
 800f014:	2b30      	cmp	r3, #48	@ 0x30
 800f016:	d86b      	bhi.n	800f0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f018:	2b20      	cmp	r3, #32
 800f01a:	d060      	beq.n	800f0de <HAL_TIM_ConfigClockSource+0x1aa>
 800f01c:	2b20      	cmp	r3, #32
 800f01e:	d867      	bhi.n	800f0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800f020:	2b00      	cmp	r3, #0
 800f022:	d05c      	beq.n	800f0de <HAL_TIM_ConfigClockSource+0x1aa>
 800f024:	2b10      	cmp	r3, #16
 800f026:	d05a      	beq.n	800f0de <HAL_TIM_ConfigClockSource+0x1aa>
 800f028:	e062      	b.n	800f0f0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f02e:	683b      	ldr	r3, [r7, #0]
 800f030:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f032:	683b      	ldr	r3, [r7, #0]
 800f034:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f036:	683b      	ldr	r3, [r7, #0]
 800f038:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f03a:	f000 fda3 	bl	800fb84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	689b      	ldr	r3, [r3, #8]
 800f044:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f046:	68bb      	ldr	r3, [r7, #8]
 800f048:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f04c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	68ba      	ldr	r2, [r7, #8]
 800f054:	609a      	str	r2, [r3, #8]
      break;
 800f056:	e04f      	b.n	800f0f8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f068:	f000 fd8c 	bl	800fb84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	689a      	ldr	r2, [r3, #8]
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f07a:	609a      	str	r2, [r3, #8]
      break;
 800f07c:	e03c      	b.n	800f0f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f082:	683b      	ldr	r3, [r7, #0]
 800f084:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f086:	683b      	ldr	r3, [r7, #0]
 800f088:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f08a:	461a      	mov	r2, r3
 800f08c:	f000 fc46 	bl	800f91c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	2150      	movs	r1, #80	@ 0x50
 800f096:	4618      	mov	r0, r3
 800f098:	f000 fd56 	bl	800fb48 <TIM_ITRx_SetConfig>
      break;
 800f09c:	e02c      	b.n	800f0f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f0a2:	683b      	ldr	r3, [r7, #0]
 800f0a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f0aa:	461a      	mov	r2, r3
 800f0ac:	f000 fca2 	bl	800f9f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	2160      	movs	r1, #96	@ 0x60
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f000 fd46 	bl	800fb48 <TIM_ITRx_SetConfig>
      break;
 800f0bc:	e01c      	b.n	800f0f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f0ca:	461a      	mov	r2, r3
 800f0cc:	f000 fc26 	bl	800f91c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	2140      	movs	r1, #64	@ 0x40
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f000 fd36 	bl	800fb48 <TIM_ITRx_SetConfig>
      break;
 800f0dc:	e00c      	b.n	800f0f8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681a      	ldr	r2, [r3, #0]
 800f0e2:	683b      	ldr	r3, [r7, #0]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	4619      	mov	r1, r3
 800f0e8:	4610      	mov	r0, r2
 800f0ea:	f000 fd2d 	bl	800fb48 <TIM_ITRx_SetConfig>
      break;
 800f0ee:	e003      	b.n	800f0f8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f0f0:	2301      	movs	r3, #1
 800f0f2:	73fb      	strb	r3, [r7, #15]
      break;
 800f0f4:	e000      	b.n	800f0f8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f0f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2201      	movs	r2, #1
 800f0fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2200      	movs	r2, #0
 800f104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f108:	7bfb      	ldrb	r3, [r7, #15]
}
 800f10a:	4618      	mov	r0, r3
 800f10c:	3710      	adds	r7, #16
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}
 800f112:	bf00      	nop
 800f114:	ffceff88 	.word	0xffceff88
 800f118:	00100040 	.word	0x00100040
 800f11c:	00100030 	.word	0x00100030
 800f120:	00100020 	.word	0x00100020

0800f124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f124:	b480      	push	{r7}
 800f126:	b085      	sub	sp, #20
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
 800f12c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	4a44      	ldr	r2, [pc, #272]	@ (800f248 <TIM_Base_SetConfig+0x124>)
 800f138:	4293      	cmp	r3, r2
 800f13a:	d013      	beq.n	800f164 <TIM_Base_SetConfig+0x40>
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f142:	d00f      	beq.n	800f164 <TIM_Base_SetConfig+0x40>
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	4a41      	ldr	r2, [pc, #260]	@ (800f24c <TIM_Base_SetConfig+0x128>)
 800f148:	4293      	cmp	r3, r2
 800f14a:	d00b      	beq.n	800f164 <TIM_Base_SetConfig+0x40>
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	4a40      	ldr	r2, [pc, #256]	@ (800f250 <TIM_Base_SetConfig+0x12c>)
 800f150:	4293      	cmp	r3, r2
 800f152:	d007      	beq.n	800f164 <TIM_Base_SetConfig+0x40>
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	4a3f      	ldr	r2, [pc, #252]	@ (800f254 <TIM_Base_SetConfig+0x130>)
 800f158:	4293      	cmp	r3, r2
 800f15a:	d003      	beq.n	800f164 <TIM_Base_SetConfig+0x40>
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	4a3e      	ldr	r2, [pc, #248]	@ (800f258 <TIM_Base_SetConfig+0x134>)
 800f160:	4293      	cmp	r3, r2
 800f162:	d108      	bne.n	800f176 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f16a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	685b      	ldr	r3, [r3, #4]
 800f170:	68fa      	ldr	r2, [r7, #12]
 800f172:	4313      	orrs	r3, r2
 800f174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	4a33      	ldr	r2, [pc, #204]	@ (800f248 <TIM_Base_SetConfig+0x124>)
 800f17a:	4293      	cmp	r3, r2
 800f17c:	d027      	beq.n	800f1ce <TIM_Base_SetConfig+0xaa>
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f184:	d023      	beq.n	800f1ce <TIM_Base_SetConfig+0xaa>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	4a30      	ldr	r2, [pc, #192]	@ (800f24c <TIM_Base_SetConfig+0x128>)
 800f18a:	4293      	cmp	r3, r2
 800f18c:	d01f      	beq.n	800f1ce <TIM_Base_SetConfig+0xaa>
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	4a2f      	ldr	r2, [pc, #188]	@ (800f250 <TIM_Base_SetConfig+0x12c>)
 800f192:	4293      	cmp	r3, r2
 800f194:	d01b      	beq.n	800f1ce <TIM_Base_SetConfig+0xaa>
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	4a2e      	ldr	r2, [pc, #184]	@ (800f254 <TIM_Base_SetConfig+0x130>)
 800f19a:	4293      	cmp	r3, r2
 800f19c:	d017      	beq.n	800f1ce <TIM_Base_SetConfig+0xaa>
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	4a2d      	ldr	r2, [pc, #180]	@ (800f258 <TIM_Base_SetConfig+0x134>)
 800f1a2:	4293      	cmp	r3, r2
 800f1a4:	d013      	beq.n	800f1ce <TIM_Base_SetConfig+0xaa>
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	4a2c      	ldr	r2, [pc, #176]	@ (800f25c <TIM_Base_SetConfig+0x138>)
 800f1aa:	4293      	cmp	r3, r2
 800f1ac:	d00f      	beq.n	800f1ce <TIM_Base_SetConfig+0xaa>
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	4a2b      	ldr	r2, [pc, #172]	@ (800f260 <TIM_Base_SetConfig+0x13c>)
 800f1b2:	4293      	cmp	r3, r2
 800f1b4:	d00b      	beq.n	800f1ce <TIM_Base_SetConfig+0xaa>
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	4a2a      	ldr	r2, [pc, #168]	@ (800f264 <TIM_Base_SetConfig+0x140>)
 800f1ba:	4293      	cmp	r3, r2
 800f1bc:	d007      	beq.n	800f1ce <TIM_Base_SetConfig+0xaa>
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	4a29      	ldr	r2, [pc, #164]	@ (800f268 <TIM_Base_SetConfig+0x144>)
 800f1c2:	4293      	cmp	r3, r2
 800f1c4:	d003      	beq.n	800f1ce <TIM_Base_SetConfig+0xaa>
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	4a28      	ldr	r2, [pc, #160]	@ (800f26c <TIM_Base_SetConfig+0x148>)
 800f1ca:	4293      	cmp	r3, r2
 800f1cc:	d108      	bne.n	800f1e0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f1d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	68db      	ldr	r3, [r3, #12]
 800f1da:	68fa      	ldr	r2, [r7, #12]
 800f1dc:	4313      	orrs	r3, r2
 800f1de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	695b      	ldr	r3, [r3, #20]
 800f1ea:	4313      	orrs	r3, r2
 800f1ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	68fa      	ldr	r2, [r7, #12]
 800f1f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f1f4:	683b      	ldr	r3, [r7, #0]
 800f1f6:	689a      	ldr	r2, [r3, #8]
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	681a      	ldr	r2, [r3, #0]
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	4a10      	ldr	r2, [pc, #64]	@ (800f248 <TIM_Base_SetConfig+0x124>)
 800f208:	4293      	cmp	r3, r2
 800f20a:	d00f      	beq.n	800f22c <TIM_Base_SetConfig+0x108>
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	4a12      	ldr	r2, [pc, #72]	@ (800f258 <TIM_Base_SetConfig+0x134>)
 800f210:	4293      	cmp	r3, r2
 800f212:	d00b      	beq.n	800f22c <TIM_Base_SetConfig+0x108>
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	4a11      	ldr	r2, [pc, #68]	@ (800f25c <TIM_Base_SetConfig+0x138>)
 800f218:	4293      	cmp	r3, r2
 800f21a:	d007      	beq.n	800f22c <TIM_Base_SetConfig+0x108>
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	4a10      	ldr	r2, [pc, #64]	@ (800f260 <TIM_Base_SetConfig+0x13c>)
 800f220:	4293      	cmp	r3, r2
 800f222:	d003      	beq.n	800f22c <TIM_Base_SetConfig+0x108>
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	4a0f      	ldr	r2, [pc, #60]	@ (800f264 <TIM_Base_SetConfig+0x140>)
 800f228:	4293      	cmp	r3, r2
 800f22a:	d103      	bne.n	800f234 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	691a      	ldr	r2, [r3, #16]
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2201      	movs	r2, #1
 800f238:	615a      	str	r2, [r3, #20]
}
 800f23a:	bf00      	nop
 800f23c:	3714      	adds	r7, #20
 800f23e:	46bd      	mov	sp, r7
 800f240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f244:	4770      	bx	lr
 800f246:	bf00      	nop
 800f248:	40010000 	.word	0x40010000
 800f24c:	40000400 	.word	0x40000400
 800f250:	40000800 	.word	0x40000800
 800f254:	40000c00 	.word	0x40000c00
 800f258:	40010400 	.word	0x40010400
 800f25c:	40014000 	.word	0x40014000
 800f260:	40014400 	.word	0x40014400
 800f264:	40014800 	.word	0x40014800
 800f268:	4000e000 	.word	0x4000e000
 800f26c:	4000e400 	.word	0x4000e400

0800f270 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f270:	b480      	push	{r7}
 800f272:	b087      	sub	sp, #28
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
 800f278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	6a1b      	ldr	r3, [r3, #32]
 800f27e:	f023 0201 	bic.w	r2, r3, #1
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	6a1b      	ldr	r3, [r3, #32]
 800f28a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	685b      	ldr	r3, [r3, #4]
 800f290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	699b      	ldr	r3, [r3, #24]
 800f296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f298:	68fa      	ldr	r2, [r7, #12]
 800f29a:	4b37      	ldr	r3, [pc, #220]	@ (800f378 <TIM_OC1_SetConfig+0x108>)
 800f29c:	4013      	ands	r3, r2
 800f29e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	f023 0303 	bic.w	r3, r3, #3
 800f2a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	68fa      	ldr	r2, [r7, #12]
 800f2ae:	4313      	orrs	r3, r2
 800f2b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f2b2:	697b      	ldr	r3, [r7, #20]
 800f2b4:	f023 0302 	bic.w	r3, r3, #2
 800f2b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	689b      	ldr	r3, [r3, #8]
 800f2be:	697a      	ldr	r2, [r7, #20]
 800f2c0:	4313      	orrs	r3, r2
 800f2c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	4a2d      	ldr	r2, [pc, #180]	@ (800f37c <TIM_OC1_SetConfig+0x10c>)
 800f2c8:	4293      	cmp	r3, r2
 800f2ca:	d00f      	beq.n	800f2ec <TIM_OC1_SetConfig+0x7c>
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	4a2c      	ldr	r2, [pc, #176]	@ (800f380 <TIM_OC1_SetConfig+0x110>)
 800f2d0:	4293      	cmp	r3, r2
 800f2d2:	d00b      	beq.n	800f2ec <TIM_OC1_SetConfig+0x7c>
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	4a2b      	ldr	r2, [pc, #172]	@ (800f384 <TIM_OC1_SetConfig+0x114>)
 800f2d8:	4293      	cmp	r3, r2
 800f2da:	d007      	beq.n	800f2ec <TIM_OC1_SetConfig+0x7c>
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	4a2a      	ldr	r2, [pc, #168]	@ (800f388 <TIM_OC1_SetConfig+0x118>)
 800f2e0:	4293      	cmp	r3, r2
 800f2e2:	d003      	beq.n	800f2ec <TIM_OC1_SetConfig+0x7c>
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	4a29      	ldr	r2, [pc, #164]	@ (800f38c <TIM_OC1_SetConfig+0x11c>)
 800f2e8:	4293      	cmp	r3, r2
 800f2ea:	d10c      	bne.n	800f306 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f2ec:	697b      	ldr	r3, [r7, #20]
 800f2ee:	f023 0308 	bic.w	r3, r3, #8
 800f2f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	68db      	ldr	r3, [r3, #12]
 800f2f8:	697a      	ldr	r2, [r7, #20]
 800f2fa:	4313      	orrs	r3, r2
 800f2fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f2fe:	697b      	ldr	r3, [r7, #20]
 800f300:	f023 0304 	bic.w	r3, r3, #4
 800f304:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	4a1c      	ldr	r2, [pc, #112]	@ (800f37c <TIM_OC1_SetConfig+0x10c>)
 800f30a:	4293      	cmp	r3, r2
 800f30c:	d00f      	beq.n	800f32e <TIM_OC1_SetConfig+0xbe>
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	4a1b      	ldr	r2, [pc, #108]	@ (800f380 <TIM_OC1_SetConfig+0x110>)
 800f312:	4293      	cmp	r3, r2
 800f314:	d00b      	beq.n	800f32e <TIM_OC1_SetConfig+0xbe>
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	4a1a      	ldr	r2, [pc, #104]	@ (800f384 <TIM_OC1_SetConfig+0x114>)
 800f31a:	4293      	cmp	r3, r2
 800f31c:	d007      	beq.n	800f32e <TIM_OC1_SetConfig+0xbe>
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	4a19      	ldr	r2, [pc, #100]	@ (800f388 <TIM_OC1_SetConfig+0x118>)
 800f322:	4293      	cmp	r3, r2
 800f324:	d003      	beq.n	800f32e <TIM_OC1_SetConfig+0xbe>
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	4a18      	ldr	r2, [pc, #96]	@ (800f38c <TIM_OC1_SetConfig+0x11c>)
 800f32a:	4293      	cmp	r3, r2
 800f32c:	d111      	bne.n	800f352 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f32e:	693b      	ldr	r3, [r7, #16]
 800f330:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f336:	693b      	ldr	r3, [r7, #16]
 800f338:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f33c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	695b      	ldr	r3, [r3, #20]
 800f342:	693a      	ldr	r2, [r7, #16]
 800f344:	4313      	orrs	r3, r2
 800f346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	699b      	ldr	r3, [r3, #24]
 800f34c:	693a      	ldr	r2, [r7, #16]
 800f34e:	4313      	orrs	r3, r2
 800f350:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	693a      	ldr	r2, [r7, #16]
 800f356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	68fa      	ldr	r2, [r7, #12]
 800f35c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	685a      	ldr	r2, [r3, #4]
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	697a      	ldr	r2, [r7, #20]
 800f36a:	621a      	str	r2, [r3, #32]
}
 800f36c:	bf00      	nop
 800f36e:	371c      	adds	r7, #28
 800f370:	46bd      	mov	sp, r7
 800f372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f376:	4770      	bx	lr
 800f378:	fffeff8f 	.word	0xfffeff8f
 800f37c:	40010000 	.word	0x40010000
 800f380:	40010400 	.word	0x40010400
 800f384:	40014000 	.word	0x40014000
 800f388:	40014400 	.word	0x40014400
 800f38c:	40014800 	.word	0x40014800

0800f390 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f390:	b480      	push	{r7}
 800f392:	b087      	sub	sp, #28
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
 800f398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	6a1b      	ldr	r3, [r3, #32]
 800f39e:	f023 0210 	bic.w	r2, r3, #16
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	6a1b      	ldr	r3, [r3, #32]
 800f3aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	685b      	ldr	r3, [r3, #4]
 800f3b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	699b      	ldr	r3, [r3, #24]
 800f3b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f3b8:	68fa      	ldr	r2, [r7, #12]
 800f3ba:	4b34      	ldr	r3, [pc, #208]	@ (800f48c <TIM_OC2_SetConfig+0xfc>)
 800f3bc:	4013      	ands	r3, r2
 800f3be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f3c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	021b      	lsls	r3, r3, #8
 800f3ce:	68fa      	ldr	r2, [r7, #12]
 800f3d0:	4313      	orrs	r3, r2
 800f3d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f3d4:	697b      	ldr	r3, [r7, #20]
 800f3d6:	f023 0320 	bic.w	r3, r3, #32
 800f3da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	689b      	ldr	r3, [r3, #8]
 800f3e0:	011b      	lsls	r3, r3, #4
 800f3e2:	697a      	ldr	r2, [r7, #20]
 800f3e4:	4313      	orrs	r3, r2
 800f3e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	4a29      	ldr	r2, [pc, #164]	@ (800f490 <TIM_OC2_SetConfig+0x100>)
 800f3ec:	4293      	cmp	r3, r2
 800f3ee:	d003      	beq.n	800f3f8 <TIM_OC2_SetConfig+0x68>
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	4a28      	ldr	r2, [pc, #160]	@ (800f494 <TIM_OC2_SetConfig+0x104>)
 800f3f4:	4293      	cmp	r3, r2
 800f3f6:	d10d      	bne.n	800f414 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f3f8:	697b      	ldr	r3, [r7, #20]
 800f3fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f3fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	68db      	ldr	r3, [r3, #12]
 800f404:	011b      	lsls	r3, r3, #4
 800f406:	697a      	ldr	r2, [r7, #20]
 800f408:	4313      	orrs	r3, r2
 800f40a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f40c:	697b      	ldr	r3, [r7, #20]
 800f40e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f412:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	4a1e      	ldr	r2, [pc, #120]	@ (800f490 <TIM_OC2_SetConfig+0x100>)
 800f418:	4293      	cmp	r3, r2
 800f41a:	d00f      	beq.n	800f43c <TIM_OC2_SetConfig+0xac>
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	4a1d      	ldr	r2, [pc, #116]	@ (800f494 <TIM_OC2_SetConfig+0x104>)
 800f420:	4293      	cmp	r3, r2
 800f422:	d00b      	beq.n	800f43c <TIM_OC2_SetConfig+0xac>
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	4a1c      	ldr	r2, [pc, #112]	@ (800f498 <TIM_OC2_SetConfig+0x108>)
 800f428:	4293      	cmp	r3, r2
 800f42a:	d007      	beq.n	800f43c <TIM_OC2_SetConfig+0xac>
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	4a1b      	ldr	r2, [pc, #108]	@ (800f49c <TIM_OC2_SetConfig+0x10c>)
 800f430:	4293      	cmp	r3, r2
 800f432:	d003      	beq.n	800f43c <TIM_OC2_SetConfig+0xac>
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	4a1a      	ldr	r2, [pc, #104]	@ (800f4a0 <TIM_OC2_SetConfig+0x110>)
 800f438:	4293      	cmp	r3, r2
 800f43a:	d113      	bne.n	800f464 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f43c:	693b      	ldr	r3, [r7, #16]
 800f43e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f442:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f444:	693b      	ldr	r3, [r7, #16]
 800f446:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f44a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	695b      	ldr	r3, [r3, #20]
 800f450:	009b      	lsls	r3, r3, #2
 800f452:	693a      	ldr	r2, [r7, #16]
 800f454:	4313      	orrs	r3, r2
 800f456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f458:	683b      	ldr	r3, [r7, #0]
 800f45a:	699b      	ldr	r3, [r3, #24]
 800f45c:	009b      	lsls	r3, r3, #2
 800f45e:	693a      	ldr	r2, [r7, #16]
 800f460:	4313      	orrs	r3, r2
 800f462:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	693a      	ldr	r2, [r7, #16]
 800f468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	68fa      	ldr	r2, [r7, #12]
 800f46e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	685a      	ldr	r2, [r3, #4]
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	697a      	ldr	r2, [r7, #20]
 800f47c:	621a      	str	r2, [r3, #32]
}
 800f47e:	bf00      	nop
 800f480:	371c      	adds	r7, #28
 800f482:	46bd      	mov	sp, r7
 800f484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f488:	4770      	bx	lr
 800f48a:	bf00      	nop
 800f48c:	feff8fff 	.word	0xfeff8fff
 800f490:	40010000 	.word	0x40010000
 800f494:	40010400 	.word	0x40010400
 800f498:	40014000 	.word	0x40014000
 800f49c:	40014400 	.word	0x40014400
 800f4a0:	40014800 	.word	0x40014800

0800f4a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f4a4:	b480      	push	{r7}
 800f4a6:	b087      	sub	sp, #28
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
 800f4ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	6a1b      	ldr	r3, [r3, #32]
 800f4b2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	6a1b      	ldr	r3, [r3, #32]
 800f4be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	685b      	ldr	r3, [r3, #4]
 800f4c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	69db      	ldr	r3, [r3, #28]
 800f4ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f4cc:	68fa      	ldr	r2, [r7, #12]
 800f4ce:	4b33      	ldr	r3, [pc, #204]	@ (800f59c <TIM_OC3_SetConfig+0xf8>)
 800f4d0:	4013      	ands	r3, r2
 800f4d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	f023 0303 	bic.w	r3, r3, #3
 800f4da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f4dc:	683b      	ldr	r3, [r7, #0]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	68fa      	ldr	r2, [r7, #12]
 800f4e2:	4313      	orrs	r3, r2
 800f4e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f4ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	689b      	ldr	r3, [r3, #8]
 800f4f2:	021b      	lsls	r3, r3, #8
 800f4f4:	697a      	ldr	r2, [r7, #20]
 800f4f6:	4313      	orrs	r3, r2
 800f4f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	4a28      	ldr	r2, [pc, #160]	@ (800f5a0 <TIM_OC3_SetConfig+0xfc>)
 800f4fe:	4293      	cmp	r3, r2
 800f500:	d003      	beq.n	800f50a <TIM_OC3_SetConfig+0x66>
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	4a27      	ldr	r2, [pc, #156]	@ (800f5a4 <TIM_OC3_SetConfig+0x100>)
 800f506:	4293      	cmp	r3, r2
 800f508:	d10d      	bne.n	800f526 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f50a:	697b      	ldr	r3, [r7, #20]
 800f50c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f510:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f512:	683b      	ldr	r3, [r7, #0]
 800f514:	68db      	ldr	r3, [r3, #12]
 800f516:	021b      	lsls	r3, r3, #8
 800f518:	697a      	ldr	r2, [r7, #20]
 800f51a:	4313      	orrs	r3, r2
 800f51c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f51e:	697b      	ldr	r3, [r7, #20]
 800f520:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f524:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	4a1d      	ldr	r2, [pc, #116]	@ (800f5a0 <TIM_OC3_SetConfig+0xfc>)
 800f52a:	4293      	cmp	r3, r2
 800f52c:	d00f      	beq.n	800f54e <TIM_OC3_SetConfig+0xaa>
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	4a1c      	ldr	r2, [pc, #112]	@ (800f5a4 <TIM_OC3_SetConfig+0x100>)
 800f532:	4293      	cmp	r3, r2
 800f534:	d00b      	beq.n	800f54e <TIM_OC3_SetConfig+0xaa>
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	4a1b      	ldr	r2, [pc, #108]	@ (800f5a8 <TIM_OC3_SetConfig+0x104>)
 800f53a:	4293      	cmp	r3, r2
 800f53c:	d007      	beq.n	800f54e <TIM_OC3_SetConfig+0xaa>
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	4a1a      	ldr	r2, [pc, #104]	@ (800f5ac <TIM_OC3_SetConfig+0x108>)
 800f542:	4293      	cmp	r3, r2
 800f544:	d003      	beq.n	800f54e <TIM_OC3_SetConfig+0xaa>
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	4a19      	ldr	r2, [pc, #100]	@ (800f5b0 <TIM_OC3_SetConfig+0x10c>)
 800f54a:	4293      	cmp	r3, r2
 800f54c:	d113      	bne.n	800f576 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f54e:	693b      	ldr	r3, [r7, #16]
 800f550:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f554:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f556:	693b      	ldr	r3, [r7, #16]
 800f558:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f55c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	695b      	ldr	r3, [r3, #20]
 800f562:	011b      	lsls	r3, r3, #4
 800f564:	693a      	ldr	r2, [r7, #16]
 800f566:	4313      	orrs	r3, r2
 800f568:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	699b      	ldr	r3, [r3, #24]
 800f56e:	011b      	lsls	r3, r3, #4
 800f570:	693a      	ldr	r2, [r7, #16]
 800f572:	4313      	orrs	r3, r2
 800f574:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	693a      	ldr	r2, [r7, #16]
 800f57a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	68fa      	ldr	r2, [r7, #12]
 800f580:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	685a      	ldr	r2, [r3, #4]
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	697a      	ldr	r2, [r7, #20]
 800f58e:	621a      	str	r2, [r3, #32]
}
 800f590:	bf00      	nop
 800f592:	371c      	adds	r7, #28
 800f594:	46bd      	mov	sp, r7
 800f596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59a:	4770      	bx	lr
 800f59c:	fffeff8f 	.word	0xfffeff8f
 800f5a0:	40010000 	.word	0x40010000
 800f5a4:	40010400 	.word	0x40010400
 800f5a8:	40014000 	.word	0x40014000
 800f5ac:	40014400 	.word	0x40014400
 800f5b0:	40014800 	.word	0x40014800

0800f5b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f5b4:	b480      	push	{r7}
 800f5b6:	b087      	sub	sp, #28
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
 800f5bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	6a1b      	ldr	r3, [r3, #32]
 800f5c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	6a1b      	ldr	r3, [r3, #32]
 800f5ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	685b      	ldr	r3, [r3, #4]
 800f5d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	69db      	ldr	r3, [r3, #28]
 800f5da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f5dc:	68fa      	ldr	r2, [r7, #12]
 800f5de:	4b24      	ldr	r3, [pc, #144]	@ (800f670 <TIM_OC4_SetConfig+0xbc>)
 800f5e0:	4013      	ands	r3, r2
 800f5e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f5ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f5ec:	683b      	ldr	r3, [r7, #0]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	021b      	lsls	r3, r3, #8
 800f5f2:	68fa      	ldr	r2, [r7, #12]
 800f5f4:	4313      	orrs	r3, r2
 800f5f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f5f8:	693b      	ldr	r3, [r7, #16]
 800f5fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f5fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	689b      	ldr	r3, [r3, #8]
 800f604:	031b      	lsls	r3, r3, #12
 800f606:	693a      	ldr	r2, [r7, #16]
 800f608:	4313      	orrs	r3, r2
 800f60a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	4a19      	ldr	r2, [pc, #100]	@ (800f674 <TIM_OC4_SetConfig+0xc0>)
 800f610:	4293      	cmp	r3, r2
 800f612:	d00f      	beq.n	800f634 <TIM_OC4_SetConfig+0x80>
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	4a18      	ldr	r2, [pc, #96]	@ (800f678 <TIM_OC4_SetConfig+0xc4>)
 800f618:	4293      	cmp	r3, r2
 800f61a:	d00b      	beq.n	800f634 <TIM_OC4_SetConfig+0x80>
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	4a17      	ldr	r2, [pc, #92]	@ (800f67c <TIM_OC4_SetConfig+0xc8>)
 800f620:	4293      	cmp	r3, r2
 800f622:	d007      	beq.n	800f634 <TIM_OC4_SetConfig+0x80>
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	4a16      	ldr	r2, [pc, #88]	@ (800f680 <TIM_OC4_SetConfig+0xcc>)
 800f628:	4293      	cmp	r3, r2
 800f62a:	d003      	beq.n	800f634 <TIM_OC4_SetConfig+0x80>
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	4a15      	ldr	r2, [pc, #84]	@ (800f684 <TIM_OC4_SetConfig+0xd0>)
 800f630:	4293      	cmp	r3, r2
 800f632:	d109      	bne.n	800f648 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f634:	697b      	ldr	r3, [r7, #20]
 800f636:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f63a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	695b      	ldr	r3, [r3, #20]
 800f640:	019b      	lsls	r3, r3, #6
 800f642:	697a      	ldr	r2, [r7, #20]
 800f644:	4313      	orrs	r3, r2
 800f646:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	697a      	ldr	r2, [r7, #20]
 800f64c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	68fa      	ldr	r2, [r7, #12]
 800f652:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f654:	683b      	ldr	r3, [r7, #0]
 800f656:	685a      	ldr	r2, [r3, #4]
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	693a      	ldr	r2, [r7, #16]
 800f660:	621a      	str	r2, [r3, #32]
}
 800f662:	bf00      	nop
 800f664:	371c      	adds	r7, #28
 800f666:	46bd      	mov	sp, r7
 800f668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66c:	4770      	bx	lr
 800f66e:	bf00      	nop
 800f670:	feff8fff 	.word	0xfeff8fff
 800f674:	40010000 	.word	0x40010000
 800f678:	40010400 	.word	0x40010400
 800f67c:	40014000 	.word	0x40014000
 800f680:	40014400 	.word	0x40014400
 800f684:	40014800 	.word	0x40014800

0800f688 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f688:	b480      	push	{r7}
 800f68a:	b087      	sub	sp, #28
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6a1b      	ldr	r3, [r3, #32]
 800f696:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	6a1b      	ldr	r3, [r3, #32]
 800f6a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	685b      	ldr	r3, [r3, #4]
 800f6a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f6ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f6b0:	68fa      	ldr	r2, [r7, #12]
 800f6b2:	4b21      	ldr	r3, [pc, #132]	@ (800f738 <TIM_OC5_SetConfig+0xb0>)
 800f6b4:	4013      	ands	r3, r2
 800f6b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	68fa      	ldr	r2, [r7, #12]
 800f6be:	4313      	orrs	r3, r2
 800f6c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f6c2:	693b      	ldr	r3, [r7, #16]
 800f6c4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f6c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	689b      	ldr	r3, [r3, #8]
 800f6ce:	041b      	lsls	r3, r3, #16
 800f6d0:	693a      	ldr	r2, [r7, #16]
 800f6d2:	4313      	orrs	r3, r2
 800f6d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	4a18      	ldr	r2, [pc, #96]	@ (800f73c <TIM_OC5_SetConfig+0xb4>)
 800f6da:	4293      	cmp	r3, r2
 800f6dc:	d00f      	beq.n	800f6fe <TIM_OC5_SetConfig+0x76>
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	4a17      	ldr	r2, [pc, #92]	@ (800f740 <TIM_OC5_SetConfig+0xb8>)
 800f6e2:	4293      	cmp	r3, r2
 800f6e4:	d00b      	beq.n	800f6fe <TIM_OC5_SetConfig+0x76>
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	4a16      	ldr	r2, [pc, #88]	@ (800f744 <TIM_OC5_SetConfig+0xbc>)
 800f6ea:	4293      	cmp	r3, r2
 800f6ec:	d007      	beq.n	800f6fe <TIM_OC5_SetConfig+0x76>
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	4a15      	ldr	r2, [pc, #84]	@ (800f748 <TIM_OC5_SetConfig+0xc0>)
 800f6f2:	4293      	cmp	r3, r2
 800f6f4:	d003      	beq.n	800f6fe <TIM_OC5_SetConfig+0x76>
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	4a14      	ldr	r2, [pc, #80]	@ (800f74c <TIM_OC5_SetConfig+0xc4>)
 800f6fa:	4293      	cmp	r3, r2
 800f6fc:	d109      	bne.n	800f712 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f6fe:	697b      	ldr	r3, [r7, #20]
 800f700:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f704:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	695b      	ldr	r3, [r3, #20]
 800f70a:	021b      	lsls	r3, r3, #8
 800f70c:	697a      	ldr	r2, [r7, #20]
 800f70e:	4313      	orrs	r3, r2
 800f710:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	697a      	ldr	r2, [r7, #20]
 800f716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	68fa      	ldr	r2, [r7, #12]
 800f71c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f71e:	683b      	ldr	r3, [r7, #0]
 800f720:	685a      	ldr	r2, [r3, #4]
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	693a      	ldr	r2, [r7, #16]
 800f72a:	621a      	str	r2, [r3, #32]
}
 800f72c:	bf00      	nop
 800f72e:	371c      	adds	r7, #28
 800f730:	46bd      	mov	sp, r7
 800f732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f736:	4770      	bx	lr
 800f738:	fffeff8f 	.word	0xfffeff8f
 800f73c:	40010000 	.word	0x40010000
 800f740:	40010400 	.word	0x40010400
 800f744:	40014000 	.word	0x40014000
 800f748:	40014400 	.word	0x40014400
 800f74c:	40014800 	.word	0x40014800

0800f750 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f750:	b480      	push	{r7}
 800f752:	b087      	sub	sp, #28
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
 800f758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	6a1b      	ldr	r3, [r3, #32]
 800f75e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	6a1b      	ldr	r3, [r3, #32]
 800f76a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	685b      	ldr	r3, [r3, #4]
 800f770:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f778:	68fa      	ldr	r2, [r7, #12]
 800f77a:	4b22      	ldr	r3, [pc, #136]	@ (800f804 <TIM_OC6_SetConfig+0xb4>)
 800f77c:	4013      	ands	r3, r2
 800f77e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	021b      	lsls	r3, r3, #8
 800f786:	68fa      	ldr	r2, [r7, #12]
 800f788:	4313      	orrs	r3, r2
 800f78a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f78c:	693b      	ldr	r3, [r7, #16]
 800f78e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f792:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	689b      	ldr	r3, [r3, #8]
 800f798:	051b      	lsls	r3, r3, #20
 800f79a:	693a      	ldr	r2, [r7, #16]
 800f79c:	4313      	orrs	r3, r2
 800f79e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	4a19      	ldr	r2, [pc, #100]	@ (800f808 <TIM_OC6_SetConfig+0xb8>)
 800f7a4:	4293      	cmp	r3, r2
 800f7a6:	d00f      	beq.n	800f7c8 <TIM_OC6_SetConfig+0x78>
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	4a18      	ldr	r2, [pc, #96]	@ (800f80c <TIM_OC6_SetConfig+0xbc>)
 800f7ac:	4293      	cmp	r3, r2
 800f7ae:	d00b      	beq.n	800f7c8 <TIM_OC6_SetConfig+0x78>
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	4a17      	ldr	r2, [pc, #92]	@ (800f810 <TIM_OC6_SetConfig+0xc0>)
 800f7b4:	4293      	cmp	r3, r2
 800f7b6:	d007      	beq.n	800f7c8 <TIM_OC6_SetConfig+0x78>
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	4a16      	ldr	r2, [pc, #88]	@ (800f814 <TIM_OC6_SetConfig+0xc4>)
 800f7bc:	4293      	cmp	r3, r2
 800f7be:	d003      	beq.n	800f7c8 <TIM_OC6_SetConfig+0x78>
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	4a15      	ldr	r2, [pc, #84]	@ (800f818 <TIM_OC6_SetConfig+0xc8>)
 800f7c4:	4293      	cmp	r3, r2
 800f7c6:	d109      	bne.n	800f7dc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f7c8:	697b      	ldr	r3, [r7, #20]
 800f7ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f7ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	695b      	ldr	r3, [r3, #20]
 800f7d4:	029b      	lsls	r3, r3, #10
 800f7d6:	697a      	ldr	r2, [r7, #20]
 800f7d8:	4313      	orrs	r3, r2
 800f7da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	697a      	ldr	r2, [r7, #20]
 800f7e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	68fa      	ldr	r2, [r7, #12]
 800f7e6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	685a      	ldr	r2, [r3, #4]
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	693a      	ldr	r2, [r7, #16]
 800f7f4:	621a      	str	r2, [r3, #32]
}
 800f7f6:	bf00      	nop
 800f7f8:	371c      	adds	r7, #28
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f800:	4770      	bx	lr
 800f802:	bf00      	nop
 800f804:	feff8fff 	.word	0xfeff8fff
 800f808:	40010000 	.word	0x40010000
 800f80c:	40010400 	.word	0x40010400
 800f810:	40014000 	.word	0x40014000
 800f814:	40014400 	.word	0x40014400
 800f818:	40014800 	.word	0x40014800

0800f81c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800f81c:	b480      	push	{r7}
 800f81e:	b087      	sub	sp, #28
 800f820:	af00      	add	r7, sp, #0
 800f822:	60f8      	str	r0, [r7, #12]
 800f824:	60b9      	str	r1, [r7, #8]
 800f826:	607a      	str	r2, [r7, #4]
 800f828:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	6a1b      	ldr	r3, [r3, #32]
 800f82e:	f023 0201 	bic.w	r2, r3, #1
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	699b      	ldr	r3, [r3, #24]
 800f83a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	6a1b      	ldr	r3, [r3, #32]
 800f840:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	4a2c      	ldr	r2, [pc, #176]	@ (800f8f8 <TIM_TI1_SetConfig+0xdc>)
 800f846:	4293      	cmp	r3, r2
 800f848:	d023      	beq.n	800f892 <TIM_TI1_SetConfig+0x76>
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f850:	d01f      	beq.n	800f892 <TIM_TI1_SetConfig+0x76>
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	4a29      	ldr	r2, [pc, #164]	@ (800f8fc <TIM_TI1_SetConfig+0xe0>)
 800f856:	4293      	cmp	r3, r2
 800f858:	d01b      	beq.n	800f892 <TIM_TI1_SetConfig+0x76>
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	4a28      	ldr	r2, [pc, #160]	@ (800f900 <TIM_TI1_SetConfig+0xe4>)
 800f85e:	4293      	cmp	r3, r2
 800f860:	d017      	beq.n	800f892 <TIM_TI1_SetConfig+0x76>
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	4a27      	ldr	r2, [pc, #156]	@ (800f904 <TIM_TI1_SetConfig+0xe8>)
 800f866:	4293      	cmp	r3, r2
 800f868:	d013      	beq.n	800f892 <TIM_TI1_SetConfig+0x76>
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	4a26      	ldr	r2, [pc, #152]	@ (800f908 <TIM_TI1_SetConfig+0xec>)
 800f86e:	4293      	cmp	r3, r2
 800f870:	d00f      	beq.n	800f892 <TIM_TI1_SetConfig+0x76>
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	4a25      	ldr	r2, [pc, #148]	@ (800f90c <TIM_TI1_SetConfig+0xf0>)
 800f876:	4293      	cmp	r3, r2
 800f878:	d00b      	beq.n	800f892 <TIM_TI1_SetConfig+0x76>
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	4a24      	ldr	r2, [pc, #144]	@ (800f910 <TIM_TI1_SetConfig+0xf4>)
 800f87e:	4293      	cmp	r3, r2
 800f880:	d007      	beq.n	800f892 <TIM_TI1_SetConfig+0x76>
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	4a23      	ldr	r2, [pc, #140]	@ (800f914 <TIM_TI1_SetConfig+0xf8>)
 800f886:	4293      	cmp	r3, r2
 800f888:	d003      	beq.n	800f892 <TIM_TI1_SetConfig+0x76>
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	4a22      	ldr	r2, [pc, #136]	@ (800f918 <TIM_TI1_SetConfig+0xfc>)
 800f88e:	4293      	cmp	r3, r2
 800f890:	d101      	bne.n	800f896 <TIM_TI1_SetConfig+0x7a>
 800f892:	2301      	movs	r3, #1
 800f894:	e000      	b.n	800f898 <TIM_TI1_SetConfig+0x7c>
 800f896:	2300      	movs	r3, #0
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d008      	beq.n	800f8ae <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800f89c:	697b      	ldr	r3, [r7, #20]
 800f89e:	f023 0303 	bic.w	r3, r3, #3
 800f8a2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800f8a4:	697a      	ldr	r2, [r7, #20]
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	4313      	orrs	r3, r2
 800f8aa:	617b      	str	r3, [r7, #20]
 800f8ac:	e003      	b.n	800f8b6 <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800f8ae:	697b      	ldr	r3, [r7, #20]
 800f8b0:	f043 0301 	orr.w	r3, r3, #1
 800f8b4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f8b6:	697b      	ldr	r3, [r7, #20]
 800f8b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f8bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	011b      	lsls	r3, r3, #4
 800f8c2:	b2db      	uxtb	r3, r3
 800f8c4:	697a      	ldr	r2, [r7, #20]
 800f8c6:	4313      	orrs	r3, r2
 800f8c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f8ca:	693b      	ldr	r3, [r7, #16]
 800f8cc:	f023 030a 	bic.w	r3, r3, #10
 800f8d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800f8d2:	68bb      	ldr	r3, [r7, #8]
 800f8d4:	f003 030a 	and.w	r3, r3, #10
 800f8d8:	693a      	ldr	r2, [r7, #16]
 800f8da:	4313      	orrs	r3, r2
 800f8dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	697a      	ldr	r2, [r7, #20]
 800f8e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	693a      	ldr	r2, [r7, #16]
 800f8e8:	621a      	str	r2, [r3, #32]
}
 800f8ea:	bf00      	nop
 800f8ec:	371c      	adds	r7, #28
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f4:	4770      	bx	lr
 800f8f6:	bf00      	nop
 800f8f8:	40010000 	.word	0x40010000
 800f8fc:	40000400 	.word	0x40000400
 800f900:	40000800 	.word	0x40000800
 800f904:	40000c00 	.word	0x40000c00
 800f908:	40010400 	.word	0x40010400
 800f90c:	40001800 	.word	0x40001800
 800f910:	40014000 	.word	0x40014000
 800f914:	4000e000 	.word	0x4000e000
 800f918:	4000e400 	.word	0x4000e400

0800f91c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f91c:	b480      	push	{r7}
 800f91e:	b087      	sub	sp, #28
 800f920:	af00      	add	r7, sp, #0
 800f922:	60f8      	str	r0, [r7, #12]
 800f924:	60b9      	str	r1, [r7, #8]
 800f926:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	6a1b      	ldr	r3, [r3, #32]
 800f92c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	6a1b      	ldr	r3, [r3, #32]
 800f932:	f023 0201 	bic.w	r2, r3, #1
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	699b      	ldr	r3, [r3, #24]
 800f93e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f940:	693b      	ldr	r3, [r7, #16]
 800f942:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	011b      	lsls	r3, r3, #4
 800f94c:	693a      	ldr	r2, [r7, #16]
 800f94e:	4313      	orrs	r3, r2
 800f950:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f952:	697b      	ldr	r3, [r7, #20]
 800f954:	f023 030a 	bic.w	r3, r3, #10
 800f958:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f95a:	697a      	ldr	r2, [r7, #20]
 800f95c:	68bb      	ldr	r3, [r7, #8]
 800f95e:	4313      	orrs	r3, r2
 800f960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	693a      	ldr	r2, [r7, #16]
 800f966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	697a      	ldr	r2, [r7, #20]
 800f96c:	621a      	str	r2, [r3, #32]
}
 800f96e:	bf00      	nop
 800f970:	371c      	adds	r7, #28
 800f972:	46bd      	mov	sp, r7
 800f974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f978:	4770      	bx	lr

0800f97a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f97a:	b480      	push	{r7}
 800f97c:	b087      	sub	sp, #28
 800f97e:	af00      	add	r7, sp, #0
 800f980:	60f8      	str	r0, [r7, #12]
 800f982:	60b9      	str	r1, [r7, #8]
 800f984:	607a      	str	r2, [r7, #4]
 800f986:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	6a1b      	ldr	r3, [r3, #32]
 800f98c:	f023 0210 	bic.w	r2, r3, #16
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	699b      	ldr	r3, [r3, #24]
 800f998:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	6a1b      	ldr	r3, [r3, #32]
 800f99e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800f9a0:	697b      	ldr	r3, [r7, #20]
 800f9a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f9a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	021b      	lsls	r3, r3, #8
 800f9ac:	697a      	ldr	r2, [r7, #20]
 800f9ae:	4313      	orrs	r3, r2
 800f9b0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f9b2:	697b      	ldr	r3, [r7, #20]
 800f9b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f9b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	031b      	lsls	r3, r3, #12
 800f9be:	b29b      	uxth	r3, r3
 800f9c0:	697a      	ldr	r2, [r7, #20]
 800f9c2:	4313      	orrs	r3, r2
 800f9c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f9c6:	693b      	ldr	r3, [r7, #16]
 800f9c8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f9cc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800f9ce:	68bb      	ldr	r3, [r7, #8]
 800f9d0:	011b      	lsls	r3, r3, #4
 800f9d2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800f9d6:	693a      	ldr	r2, [r7, #16]
 800f9d8:	4313      	orrs	r3, r2
 800f9da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	697a      	ldr	r2, [r7, #20]
 800f9e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	693a      	ldr	r2, [r7, #16]
 800f9e6:	621a      	str	r2, [r3, #32]
}
 800f9e8:	bf00      	nop
 800f9ea:	371c      	adds	r7, #28
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f2:	4770      	bx	lr

0800f9f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f9f4:	b480      	push	{r7}
 800f9f6:	b087      	sub	sp, #28
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	60f8      	str	r0, [r7, #12]
 800f9fc:	60b9      	str	r1, [r7, #8]
 800f9fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	6a1b      	ldr	r3, [r3, #32]
 800fa04:	f023 0210 	bic.w	r2, r3, #16
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	699b      	ldr	r3, [r3, #24]
 800fa10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	6a1b      	ldr	r3, [r3, #32]
 800fa16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fa18:	697b      	ldr	r3, [r7, #20]
 800fa1a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800fa1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	031b      	lsls	r3, r3, #12
 800fa24:	697a      	ldr	r2, [r7, #20]
 800fa26:	4313      	orrs	r3, r2
 800fa28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fa2a:	693b      	ldr	r3, [r7, #16]
 800fa2c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800fa30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fa32:	68bb      	ldr	r3, [r7, #8]
 800fa34:	011b      	lsls	r3, r3, #4
 800fa36:	693a      	ldr	r2, [r7, #16]
 800fa38:	4313      	orrs	r3, r2
 800fa3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	697a      	ldr	r2, [r7, #20]
 800fa40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	693a      	ldr	r2, [r7, #16]
 800fa46:	621a      	str	r2, [r3, #32]
}
 800fa48:	bf00      	nop
 800fa4a:	371c      	adds	r7, #28
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa52:	4770      	bx	lr

0800fa54 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fa54:	b480      	push	{r7}
 800fa56:	b087      	sub	sp, #28
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	60f8      	str	r0, [r7, #12]
 800fa5c:	60b9      	str	r1, [r7, #8]
 800fa5e:	607a      	str	r2, [r7, #4]
 800fa60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	6a1b      	ldr	r3, [r3, #32]
 800fa66:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	69db      	ldr	r3, [r3, #28]
 800fa72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	6a1b      	ldr	r3, [r3, #32]
 800fa78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800fa7a:	697b      	ldr	r3, [r7, #20]
 800fa7c:	f023 0303 	bic.w	r3, r3, #3
 800fa80:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800fa82:	697a      	ldr	r2, [r7, #20]
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	4313      	orrs	r3, r2
 800fa88:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800fa8a:	697b      	ldr	r3, [r7, #20]
 800fa8c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800fa90:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800fa92:	683b      	ldr	r3, [r7, #0]
 800fa94:	011b      	lsls	r3, r3, #4
 800fa96:	b2db      	uxtb	r3, r3
 800fa98:	697a      	ldr	r2, [r7, #20]
 800fa9a:	4313      	orrs	r3, r2
 800fa9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800fa9e:	693b      	ldr	r3, [r7, #16]
 800faa0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800faa4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800faa6:	68bb      	ldr	r3, [r7, #8]
 800faa8:	021b      	lsls	r3, r3, #8
 800faaa:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800faae:	693a      	ldr	r2, [r7, #16]
 800fab0:	4313      	orrs	r3, r2
 800fab2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	697a      	ldr	r2, [r7, #20]
 800fab8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	693a      	ldr	r2, [r7, #16]
 800fabe:	621a      	str	r2, [r3, #32]
}
 800fac0:	bf00      	nop
 800fac2:	371c      	adds	r7, #28
 800fac4:	46bd      	mov	sp, r7
 800fac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faca:	4770      	bx	lr

0800facc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800facc:	b480      	push	{r7}
 800face:	b087      	sub	sp, #28
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	60f8      	str	r0, [r7, #12]
 800fad4:	60b9      	str	r1, [r7, #8]
 800fad6:	607a      	str	r2, [r7, #4]
 800fad8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	6a1b      	ldr	r3, [r3, #32]
 800fade:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	69db      	ldr	r3, [r3, #28]
 800faea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	6a1b      	ldr	r3, [r3, #32]
 800faf0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800faf2:	697b      	ldr	r3, [r7, #20]
 800faf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800faf8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	021b      	lsls	r3, r3, #8
 800fafe:	697a      	ldr	r2, [r7, #20]
 800fb00:	4313      	orrs	r3, r2
 800fb02:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800fb04:	697b      	ldr	r3, [r7, #20]
 800fb06:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800fb0a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	031b      	lsls	r3, r3, #12
 800fb10:	b29b      	uxth	r3, r3
 800fb12:	697a      	ldr	r2, [r7, #20]
 800fb14:	4313      	orrs	r3, r2
 800fb16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800fb18:	693b      	ldr	r3, [r7, #16]
 800fb1a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800fb1e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800fb20:	68bb      	ldr	r3, [r7, #8]
 800fb22:	031b      	lsls	r3, r3, #12
 800fb24:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800fb28:	693a      	ldr	r2, [r7, #16]
 800fb2a:	4313      	orrs	r3, r2
 800fb2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	697a      	ldr	r2, [r7, #20]
 800fb32:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	693a      	ldr	r2, [r7, #16]
 800fb38:	621a      	str	r2, [r3, #32]
}
 800fb3a:	bf00      	nop
 800fb3c:	371c      	adds	r7, #28
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb44:	4770      	bx	lr
	...

0800fb48 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fb48:	b480      	push	{r7}
 800fb4a:	b085      	sub	sp, #20
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
 800fb50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	689b      	ldr	r3, [r3, #8]
 800fb56:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fb58:	68fa      	ldr	r2, [r7, #12]
 800fb5a:	4b09      	ldr	r3, [pc, #36]	@ (800fb80 <TIM_ITRx_SetConfig+0x38>)
 800fb5c:	4013      	ands	r3, r2
 800fb5e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fb60:	683a      	ldr	r2, [r7, #0]
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	4313      	orrs	r3, r2
 800fb66:	f043 0307 	orr.w	r3, r3, #7
 800fb6a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	68fa      	ldr	r2, [r7, #12]
 800fb70:	609a      	str	r2, [r3, #8]
}
 800fb72:	bf00      	nop
 800fb74:	3714      	adds	r7, #20
 800fb76:	46bd      	mov	sp, r7
 800fb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7c:	4770      	bx	lr
 800fb7e:	bf00      	nop
 800fb80:	ffcfff8f 	.word	0xffcfff8f

0800fb84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fb84:	b480      	push	{r7}
 800fb86:	b087      	sub	sp, #28
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	60f8      	str	r0, [r7, #12]
 800fb8c:	60b9      	str	r1, [r7, #8]
 800fb8e:	607a      	str	r2, [r7, #4]
 800fb90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	689b      	ldr	r3, [r3, #8]
 800fb96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fb98:	697b      	ldr	r3, [r7, #20]
 800fb9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fb9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fba0:	683b      	ldr	r3, [r7, #0]
 800fba2:	021a      	lsls	r2, r3, #8
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	431a      	orrs	r2, r3
 800fba8:	68bb      	ldr	r3, [r7, #8]
 800fbaa:	4313      	orrs	r3, r2
 800fbac:	697a      	ldr	r2, [r7, #20]
 800fbae:	4313      	orrs	r3, r2
 800fbb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	697a      	ldr	r2, [r7, #20]
 800fbb6:	609a      	str	r2, [r3, #8]
}
 800fbb8:	bf00      	nop
 800fbba:	371c      	adds	r7, #28
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc2:	4770      	bx	lr

0800fbc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fbc4:	b480      	push	{r7}
 800fbc6:	b087      	sub	sp, #28
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	60f8      	str	r0, [r7, #12]
 800fbcc:	60b9      	str	r1, [r7, #8]
 800fbce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fbd0:	68bb      	ldr	r3, [r7, #8]
 800fbd2:	f003 031f 	and.w	r3, r3, #31
 800fbd6:	2201      	movs	r2, #1
 800fbd8:	fa02 f303 	lsl.w	r3, r2, r3
 800fbdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	6a1a      	ldr	r2, [r3, #32]
 800fbe2:	697b      	ldr	r3, [r7, #20]
 800fbe4:	43db      	mvns	r3, r3
 800fbe6:	401a      	ands	r2, r3
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	6a1a      	ldr	r2, [r3, #32]
 800fbf0:	68bb      	ldr	r3, [r7, #8]
 800fbf2:	f003 031f 	and.w	r3, r3, #31
 800fbf6:	6879      	ldr	r1, [r7, #4]
 800fbf8:	fa01 f303 	lsl.w	r3, r1, r3
 800fbfc:	431a      	orrs	r2, r3
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	621a      	str	r2, [r3, #32]
}
 800fc02:	bf00      	nop
 800fc04:	371c      	adds	r7, #28
 800fc06:	46bd      	mov	sp, r7
 800fc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0c:	4770      	bx	lr
	...

0800fc10 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b084      	sub	sp, #16
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
 800fc18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800fc1a:	683b      	ldr	r3, [r7, #0]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d109      	bne.n	800fc34 <HAL_TIMEx_PWMN_Start+0x24>
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fc26:	b2db      	uxtb	r3, r3
 800fc28:	2b01      	cmp	r3, #1
 800fc2a:	bf14      	ite	ne
 800fc2c:	2301      	movne	r3, #1
 800fc2e:	2300      	moveq	r3, #0
 800fc30:	b2db      	uxtb	r3, r3
 800fc32:	e022      	b.n	800fc7a <HAL_TIMEx_PWMN_Start+0x6a>
 800fc34:	683b      	ldr	r3, [r7, #0]
 800fc36:	2b04      	cmp	r3, #4
 800fc38:	d109      	bne.n	800fc4e <HAL_TIMEx_PWMN_Start+0x3e>
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fc40:	b2db      	uxtb	r3, r3
 800fc42:	2b01      	cmp	r3, #1
 800fc44:	bf14      	ite	ne
 800fc46:	2301      	movne	r3, #1
 800fc48:	2300      	moveq	r3, #0
 800fc4a:	b2db      	uxtb	r3, r3
 800fc4c:	e015      	b.n	800fc7a <HAL_TIMEx_PWMN_Start+0x6a>
 800fc4e:	683b      	ldr	r3, [r7, #0]
 800fc50:	2b08      	cmp	r3, #8
 800fc52:	d109      	bne.n	800fc68 <HAL_TIMEx_PWMN_Start+0x58>
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800fc5a:	b2db      	uxtb	r3, r3
 800fc5c:	2b01      	cmp	r3, #1
 800fc5e:	bf14      	ite	ne
 800fc60:	2301      	movne	r3, #1
 800fc62:	2300      	moveq	r3, #0
 800fc64:	b2db      	uxtb	r3, r3
 800fc66:	e008      	b.n	800fc7a <HAL_TIMEx_PWMN_Start+0x6a>
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800fc6e:	b2db      	uxtb	r3, r3
 800fc70:	2b01      	cmp	r3, #1
 800fc72:	bf14      	ite	ne
 800fc74:	2301      	movne	r3, #1
 800fc76:	2300      	moveq	r3, #0
 800fc78:	b2db      	uxtb	r3, r3
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d001      	beq.n	800fc82 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800fc7e:	2301      	movs	r3, #1
 800fc80:	e07d      	b.n	800fd7e <HAL_TIMEx_PWMN_Start+0x16e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d104      	bne.n	800fc92 <HAL_TIMEx_PWMN_Start+0x82>
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	2202      	movs	r2, #2
 800fc8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fc90:	e013      	b.n	800fcba <HAL_TIMEx_PWMN_Start+0xaa>
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	2b04      	cmp	r3, #4
 800fc96:	d104      	bne.n	800fca2 <HAL_TIMEx_PWMN_Start+0x92>
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	2202      	movs	r2, #2
 800fc9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fca0:	e00b      	b.n	800fcba <HAL_TIMEx_PWMN_Start+0xaa>
 800fca2:	683b      	ldr	r3, [r7, #0]
 800fca4:	2b08      	cmp	r3, #8
 800fca6:	d104      	bne.n	800fcb2 <HAL_TIMEx_PWMN_Start+0xa2>
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	2202      	movs	r2, #2
 800fcac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800fcb0:	e003      	b.n	800fcba <HAL_TIMEx_PWMN_Start+0xaa>
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	2202      	movs	r2, #2
 800fcb6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	2204      	movs	r2, #4
 800fcc0:	6839      	ldr	r1, [r7, #0]
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f000 fa0e 	bl	80100e4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800fcd6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	4a2a      	ldr	r2, [pc, #168]	@ (800fd88 <HAL_TIMEx_PWMN_Start+0x178>)
 800fcde:	4293      	cmp	r3, r2
 800fce0:	d02c      	beq.n	800fd3c <HAL_TIMEx_PWMN_Start+0x12c>
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fcea:	d027      	beq.n	800fd3c <HAL_TIMEx_PWMN_Start+0x12c>
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	4a26      	ldr	r2, [pc, #152]	@ (800fd8c <HAL_TIMEx_PWMN_Start+0x17c>)
 800fcf2:	4293      	cmp	r3, r2
 800fcf4:	d022      	beq.n	800fd3c <HAL_TIMEx_PWMN_Start+0x12c>
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	4a25      	ldr	r2, [pc, #148]	@ (800fd90 <HAL_TIMEx_PWMN_Start+0x180>)
 800fcfc:	4293      	cmp	r3, r2
 800fcfe:	d01d      	beq.n	800fd3c <HAL_TIMEx_PWMN_Start+0x12c>
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	4a23      	ldr	r2, [pc, #140]	@ (800fd94 <HAL_TIMEx_PWMN_Start+0x184>)
 800fd06:	4293      	cmp	r3, r2
 800fd08:	d018      	beq.n	800fd3c <HAL_TIMEx_PWMN_Start+0x12c>
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	4a22      	ldr	r2, [pc, #136]	@ (800fd98 <HAL_TIMEx_PWMN_Start+0x188>)
 800fd10:	4293      	cmp	r3, r2
 800fd12:	d013      	beq.n	800fd3c <HAL_TIMEx_PWMN_Start+0x12c>
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	4a20      	ldr	r2, [pc, #128]	@ (800fd9c <HAL_TIMEx_PWMN_Start+0x18c>)
 800fd1a:	4293      	cmp	r3, r2
 800fd1c:	d00e      	beq.n	800fd3c <HAL_TIMEx_PWMN_Start+0x12c>
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	4a1f      	ldr	r2, [pc, #124]	@ (800fda0 <HAL_TIMEx_PWMN_Start+0x190>)
 800fd24:	4293      	cmp	r3, r2
 800fd26:	d009      	beq.n	800fd3c <HAL_TIMEx_PWMN_Start+0x12c>
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	4a1d      	ldr	r2, [pc, #116]	@ (800fda4 <HAL_TIMEx_PWMN_Start+0x194>)
 800fd2e:	4293      	cmp	r3, r2
 800fd30:	d004      	beq.n	800fd3c <HAL_TIMEx_PWMN_Start+0x12c>
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	4a1c      	ldr	r2, [pc, #112]	@ (800fda8 <HAL_TIMEx_PWMN_Start+0x198>)
 800fd38:	4293      	cmp	r3, r2
 800fd3a:	d115      	bne.n	800fd68 <HAL_TIMEx_PWMN_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	689a      	ldr	r2, [r3, #8]
 800fd42:	4b1a      	ldr	r3, [pc, #104]	@ (800fdac <HAL_TIMEx_PWMN_Start+0x19c>)
 800fd44:	4013      	ands	r3, r2
 800fd46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	2b06      	cmp	r3, #6
 800fd4c:	d015      	beq.n	800fd7a <HAL_TIMEx_PWMN_Start+0x16a>
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fd54:	d011      	beq.n	800fd7a <HAL_TIMEx_PWMN_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	681a      	ldr	r2, [r3, #0]
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	f042 0201 	orr.w	r2, r2, #1
 800fd64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fd66:	e008      	b.n	800fd7a <HAL_TIMEx_PWMN_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	681a      	ldr	r2, [r3, #0]
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	f042 0201 	orr.w	r2, r2, #1
 800fd76:	601a      	str	r2, [r3, #0]
 800fd78:	e000      	b.n	800fd7c <HAL_TIMEx_PWMN_Start+0x16c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fd7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fd7c:	2300      	movs	r3, #0
}
 800fd7e:	4618      	mov	r0, r3
 800fd80:	3710      	adds	r7, #16
 800fd82:	46bd      	mov	sp, r7
 800fd84:	bd80      	pop	{r7, pc}
 800fd86:	bf00      	nop
 800fd88:	40010000 	.word	0x40010000
 800fd8c:	40000400 	.word	0x40000400
 800fd90:	40000800 	.word	0x40000800
 800fd94:	40000c00 	.word	0x40000c00
 800fd98:	40010400 	.word	0x40010400
 800fd9c:	40001800 	.word	0x40001800
 800fda0:	40014000 	.word	0x40014000
 800fda4:	4000e000 	.word	0x4000e000
 800fda8:	4000e400 	.word	0x4000e400
 800fdac:	00010007 	.word	0x00010007

0800fdb0 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b082      	sub	sp, #8
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
 800fdb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	6839      	ldr	r1, [r7, #0]
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f000 f98e 	bl	80100e4 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	6a1a      	ldr	r2, [r3, #32]
 800fdce:	f241 1311 	movw	r3, #4369	@ 0x1111
 800fdd2:	4013      	ands	r3, r2
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d10f      	bne.n	800fdf8 <HAL_TIMEx_PWMN_Stop+0x48>
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	6a1a      	ldr	r2, [r3, #32]
 800fdde:	f240 4344 	movw	r3, #1092	@ 0x444
 800fde2:	4013      	ands	r3, r2
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d107      	bne.n	800fdf8 <HAL_TIMEx_PWMN_Stop+0x48>
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800fdf6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	6a1a      	ldr	r2, [r3, #32]
 800fdfe:	f241 1311 	movw	r3, #4369	@ 0x1111
 800fe02:	4013      	ands	r3, r2
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d10f      	bne.n	800fe28 <HAL_TIMEx_PWMN_Stop+0x78>
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	6a1a      	ldr	r2, [r3, #32]
 800fe0e:	f240 4344 	movw	r3, #1092	@ 0x444
 800fe12:	4013      	ands	r3, r2
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d107      	bne.n	800fe28 <HAL_TIMEx_PWMN_Stop+0x78>
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	681a      	ldr	r2, [r3, #0]
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	f022 0201 	bic.w	r2, r2, #1
 800fe26:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800fe28:	683b      	ldr	r3, [r7, #0]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d104      	bne.n	800fe38 <HAL_TIMEx_PWMN_Stop+0x88>
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	2201      	movs	r2, #1
 800fe32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fe36:	e013      	b.n	800fe60 <HAL_TIMEx_PWMN_Stop+0xb0>
 800fe38:	683b      	ldr	r3, [r7, #0]
 800fe3a:	2b04      	cmp	r3, #4
 800fe3c:	d104      	bne.n	800fe48 <HAL_TIMEx_PWMN_Stop+0x98>
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	2201      	movs	r2, #1
 800fe42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fe46:	e00b      	b.n	800fe60 <HAL_TIMEx_PWMN_Stop+0xb0>
 800fe48:	683b      	ldr	r3, [r7, #0]
 800fe4a:	2b08      	cmp	r3, #8
 800fe4c:	d104      	bne.n	800fe58 <HAL_TIMEx_PWMN_Stop+0xa8>
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	2201      	movs	r2, #1
 800fe52:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800fe56:	e003      	b.n	800fe60 <HAL_TIMEx_PWMN_Stop+0xb0>
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	2201      	movs	r2, #1
 800fe5c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 800fe60:	2300      	movs	r3, #0
}
 800fe62:	4618      	mov	r0, r3
 800fe64:	3708      	adds	r7, #8
 800fe66:	46bd      	mov	sp, r7
 800fe68:	bd80      	pop	{r7, pc}
	...

0800fe6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fe6c:	b480      	push	{r7}
 800fe6e:	b085      	sub	sp, #20
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
 800fe74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fe7c:	2b01      	cmp	r3, #1
 800fe7e:	d101      	bne.n	800fe84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fe80:	2302      	movs	r3, #2
 800fe82:	e077      	b.n	800ff74 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	2201      	movs	r2, #1
 800fe88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	2202      	movs	r2, #2
 800fe90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	685b      	ldr	r3, [r3, #4]
 800fe9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	689b      	ldr	r3, [r3, #8]
 800fea2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	4a35      	ldr	r2, [pc, #212]	@ (800ff80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800feaa:	4293      	cmp	r3, r2
 800feac:	d004      	beq.n	800feb8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	4a34      	ldr	r2, [pc, #208]	@ (800ff84 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800feb4:	4293      	cmp	r3, r2
 800feb6:	d108      	bne.n	800feca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800febe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fec0:	683b      	ldr	r3, [r7, #0]
 800fec2:	685b      	ldr	r3, [r3, #4]
 800fec4:	68fa      	ldr	r2, [r7, #12]
 800fec6:	4313      	orrs	r3, r2
 800fec8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fed0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fed2:	683b      	ldr	r3, [r7, #0]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	68fa      	ldr	r2, [r7, #12]
 800fed8:	4313      	orrs	r3, r2
 800feda:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	68fa      	ldr	r2, [r7, #12]
 800fee2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	4a25      	ldr	r2, [pc, #148]	@ (800ff80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800feea:	4293      	cmp	r3, r2
 800feec:	d02c      	beq.n	800ff48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fef6:	d027      	beq.n	800ff48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	4a22      	ldr	r2, [pc, #136]	@ (800ff88 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800fefe:	4293      	cmp	r3, r2
 800ff00:	d022      	beq.n	800ff48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	4a21      	ldr	r2, [pc, #132]	@ (800ff8c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ff08:	4293      	cmp	r3, r2
 800ff0a:	d01d      	beq.n	800ff48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	4a1f      	ldr	r2, [pc, #124]	@ (800ff90 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ff12:	4293      	cmp	r3, r2
 800ff14:	d018      	beq.n	800ff48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	4a1a      	ldr	r2, [pc, #104]	@ (800ff84 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ff1c:	4293      	cmp	r3, r2
 800ff1e:	d013      	beq.n	800ff48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	4a1b      	ldr	r2, [pc, #108]	@ (800ff94 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ff26:	4293      	cmp	r3, r2
 800ff28:	d00e      	beq.n	800ff48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	4a1a      	ldr	r2, [pc, #104]	@ (800ff98 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800ff30:	4293      	cmp	r3, r2
 800ff32:	d009      	beq.n	800ff48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	4a18      	ldr	r2, [pc, #96]	@ (800ff9c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800ff3a:	4293      	cmp	r3, r2
 800ff3c:	d004      	beq.n	800ff48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	4a17      	ldr	r2, [pc, #92]	@ (800ffa0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800ff44:	4293      	cmp	r3, r2
 800ff46:	d10c      	bne.n	800ff62 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ff48:	68bb      	ldr	r3, [r7, #8]
 800ff4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ff4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ff50:	683b      	ldr	r3, [r7, #0]
 800ff52:	689b      	ldr	r3, [r3, #8]
 800ff54:	68ba      	ldr	r2, [r7, #8]
 800ff56:	4313      	orrs	r3, r2
 800ff58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	68ba      	ldr	r2, [r7, #8]
 800ff60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	2201      	movs	r2, #1
 800ff66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ff72:	2300      	movs	r3, #0
}
 800ff74:	4618      	mov	r0, r3
 800ff76:	3714      	adds	r7, #20
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7e:	4770      	bx	lr
 800ff80:	40010000 	.word	0x40010000
 800ff84:	40010400 	.word	0x40010400
 800ff88:	40000400 	.word	0x40000400
 800ff8c:	40000800 	.word	0x40000800
 800ff90:	40000c00 	.word	0x40000c00
 800ff94:	40001800 	.word	0x40001800
 800ff98:	40014000 	.word	0x40014000
 800ff9c:	4000e000 	.word	0x4000e000
 800ffa0:	4000e400 	.word	0x4000e400

0800ffa4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ffa4:	b480      	push	{r7}
 800ffa6:	b085      	sub	sp, #20
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
 800ffac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ffae:	2300      	movs	r3, #0
 800ffb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ffb8:	2b01      	cmp	r3, #1
 800ffba:	d101      	bne.n	800ffc0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ffbc:	2302      	movs	r3, #2
 800ffbe:	e087      	b.n	80100d0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2201      	movs	r2, #1
 800ffc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ffce:	683b      	ldr	r3, [r7, #0]
 800ffd0:	68db      	ldr	r3, [r3, #12]
 800ffd2:	4313      	orrs	r3, r2
 800ffd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ffdc:	683b      	ldr	r3, [r7, #0]
 800ffde:	689b      	ldr	r3, [r3, #8]
 800ffe0:	4313      	orrs	r3, r2
 800ffe2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ffea:	683b      	ldr	r3, [r7, #0]
 800ffec:	685b      	ldr	r3, [r3, #4]
 800ffee:	4313      	orrs	r3, r2
 800fff0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	4313      	orrs	r3, r2
 800fffe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	691b      	ldr	r3, [r3, #16]
 801000a:	4313      	orrs	r3, r2
 801000c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	695b      	ldr	r3, [r3, #20]
 8010018:	4313      	orrs	r3, r2
 801001a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8010022:	683b      	ldr	r3, [r7, #0]
 8010024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010026:	4313      	orrs	r3, r2
 8010028:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8010030:	683b      	ldr	r3, [r7, #0]
 8010032:	699b      	ldr	r3, [r3, #24]
 8010034:	041b      	lsls	r3, r3, #16
 8010036:	4313      	orrs	r3, r2
 8010038:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	4a27      	ldr	r2, [pc, #156]	@ (80100dc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8010040:	4293      	cmp	r3, r2
 8010042:	d004      	beq.n	801004e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	4a25      	ldr	r2, [pc, #148]	@ (80100e0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 801004a:	4293      	cmp	r3, r2
 801004c:	d106      	bne.n	801005c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8010054:	683b      	ldr	r3, [r7, #0]
 8010056:	69db      	ldr	r3, [r3, #28]
 8010058:	4313      	orrs	r3, r2
 801005a:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	4a1e      	ldr	r2, [pc, #120]	@ (80100dc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8010062:	4293      	cmp	r3, r2
 8010064:	d004      	beq.n	8010070 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	4a1d      	ldr	r2, [pc, #116]	@ (80100e0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 801006c:	4293      	cmp	r3, r2
 801006e:	d126      	bne.n	80100be <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8010076:	683b      	ldr	r3, [r7, #0]
 8010078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801007a:	051b      	lsls	r3, r3, #20
 801007c:	4313      	orrs	r3, r2
 801007e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	6a1b      	ldr	r3, [r3, #32]
 801008a:	4313      	orrs	r3, r2
 801008c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010098:	4313      	orrs	r3, r2
 801009a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	4a0e      	ldr	r2, [pc, #56]	@ (80100dc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80100a2:	4293      	cmp	r3, r2
 80100a4:	d004      	beq.n	80100b0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	4a0d      	ldr	r2, [pc, #52]	@ (80100e0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80100ac:	4293      	cmp	r3, r2
 80100ae:	d106      	bne.n	80100be <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100ba:	4313      	orrs	r3, r2
 80100bc:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	68fa      	ldr	r2, [r7, #12]
 80100c4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	2200      	movs	r2, #0
 80100ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80100ce:	2300      	movs	r3, #0
}
 80100d0:	4618      	mov	r0, r3
 80100d2:	3714      	adds	r7, #20
 80100d4:	46bd      	mov	sp, r7
 80100d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100da:	4770      	bx	lr
 80100dc:	40010000 	.word	0x40010000
 80100e0:	40010400 	.word	0x40010400

080100e4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80100e4:	b480      	push	{r7}
 80100e6:	b087      	sub	sp, #28
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	60f8      	str	r0, [r7, #12]
 80100ec:	60b9      	str	r1, [r7, #8]
 80100ee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80100f0:	68bb      	ldr	r3, [r7, #8]
 80100f2:	f003 031f 	and.w	r3, r3, #31
 80100f6:	2204      	movs	r2, #4
 80100f8:	fa02 f303 	lsl.w	r3, r2, r3
 80100fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	6a1a      	ldr	r2, [r3, #32]
 8010102:	697b      	ldr	r3, [r7, #20]
 8010104:	43db      	mvns	r3, r3
 8010106:	401a      	ands	r2, r3
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	6a1a      	ldr	r2, [r3, #32]
 8010110:	68bb      	ldr	r3, [r7, #8]
 8010112:	f003 031f 	and.w	r3, r3, #31
 8010116:	6879      	ldr	r1, [r7, #4]
 8010118:	fa01 f303 	lsl.w	r3, r1, r3
 801011c:	431a      	orrs	r2, r3
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	621a      	str	r2, [r3, #32]
}
 8010122:	bf00      	nop
 8010124:	371c      	adds	r7, #28
 8010126:	46bd      	mov	sp, r7
 8010128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012c:	4770      	bx	lr

0801012e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801012e:	b580      	push	{r7, lr}
 8010130:	b082      	sub	sp, #8
 8010132:	af00      	add	r7, sp, #0
 8010134:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d101      	bne.n	8010140 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801013c:	2301      	movs	r3, #1
 801013e:	e042      	b.n	80101c6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010146:	2b00      	cmp	r3, #0
 8010148:	d106      	bne.n	8010158 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	2200      	movs	r2, #0
 801014e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	f7f3 ff84 	bl	8004060 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	2224      	movs	r2, #36	@ 0x24
 801015c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	681a      	ldr	r2, [r3, #0]
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	f022 0201 	bic.w	r2, r2, #1
 801016e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010170:	6878      	ldr	r0, [r7, #4]
 8010172:	f000 f983 	bl	801047c <UART_SetConfig>
 8010176:	4603      	mov	r3, r0
 8010178:	2b01      	cmp	r3, #1
 801017a:	d101      	bne.n	8010180 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801017c:	2301      	movs	r3, #1
 801017e:	e022      	b.n	80101c6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010184:	2b00      	cmp	r3, #0
 8010186:	d002      	beq.n	801018e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010188:	6878      	ldr	r0, [r7, #4]
 801018a:	f000 ffe3 	bl	8011154 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	685a      	ldr	r2, [r3, #4]
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801019c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	689a      	ldr	r2, [r3, #8]
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80101ac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	681a      	ldr	r2, [r3, #0]
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	f042 0201 	orr.w	r2, r2, #1
 80101bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80101be:	6878      	ldr	r0, [r7, #4]
 80101c0:	f001 f86a 	bl	8011298 <UART_CheckIdleState>
 80101c4:	4603      	mov	r3, r0
}
 80101c6:	4618      	mov	r0, r3
 80101c8:	3708      	adds	r7, #8
 80101ca:	46bd      	mov	sp, r7
 80101cc:	bd80      	pop	{r7, pc}

080101ce <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80101ce:	b580      	push	{r7, lr}
 80101d0:	b08a      	sub	sp, #40	@ 0x28
 80101d2:	af02      	add	r7, sp, #8
 80101d4:	60f8      	str	r0, [r7, #12]
 80101d6:	60b9      	str	r1, [r7, #8]
 80101d8:	603b      	str	r3, [r7, #0]
 80101da:	4613      	mov	r3, r2
 80101dc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80101e4:	2b20      	cmp	r3, #32
 80101e6:	d17b      	bne.n	80102e0 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80101e8:	68bb      	ldr	r3, [r7, #8]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d002      	beq.n	80101f4 <HAL_UART_Transmit+0x26>
 80101ee:	88fb      	ldrh	r3, [r7, #6]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d101      	bne.n	80101f8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80101f4:	2301      	movs	r3, #1
 80101f6:	e074      	b.n	80102e2 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	2200      	movs	r2, #0
 80101fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	2221      	movs	r2, #33	@ 0x21
 8010204:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010208:	f7f4 fbb0 	bl	800496c <HAL_GetTick>
 801020c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	88fa      	ldrh	r2, [r7, #6]
 8010212:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	88fa      	ldrh	r2, [r7, #6]
 801021a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	689b      	ldr	r3, [r3, #8]
 8010222:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010226:	d108      	bne.n	801023a <HAL_UART_Transmit+0x6c>
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	691b      	ldr	r3, [r3, #16]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d104      	bne.n	801023a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8010230:	2300      	movs	r3, #0
 8010232:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010234:	68bb      	ldr	r3, [r7, #8]
 8010236:	61bb      	str	r3, [r7, #24]
 8010238:	e003      	b.n	8010242 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 801023a:	68bb      	ldr	r3, [r7, #8]
 801023c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801023e:	2300      	movs	r3, #0
 8010240:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010242:	e030      	b.n	80102a6 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010244:	683b      	ldr	r3, [r7, #0]
 8010246:	9300      	str	r3, [sp, #0]
 8010248:	697b      	ldr	r3, [r7, #20]
 801024a:	2200      	movs	r2, #0
 801024c:	2180      	movs	r1, #128	@ 0x80
 801024e:	68f8      	ldr	r0, [r7, #12]
 8010250:	f001 f8cc 	bl	80113ec <UART_WaitOnFlagUntilTimeout>
 8010254:	4603      	mov	r3, r0
 8010256:	2b00      	cmp	r3, #0
 8010258:	d005      	beq.n	8010266 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	2220      	movs	r2, #32
 801025e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8010262:	2303      	movs	r3, #3
 8010264:	e03d      	b.n	80102e2 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8010266:	69fb      	ldr	r3, [r7, #28]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d10b      	bne.n	8010284 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801026c:	69bb      	ldr	r3, [r7, #24]
 801026e:	881b      	ldrh	r3, [r3, #0]
 8010270:	461a      	mov	r2, r3
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801027a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801027c:	69bb      	ldr	r3, [r7, #24]
 801027e:	3302      	adds	r3, #2
 8010280:	61bb      	str	r3, [r7, #24]
 8010282:	e007      	b.n	8010294 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010284:	69fb      	ldr	r3, [r7, #28]
 8010286:	781a      	ldrb	r2, [r3, #0]
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801028e:	69fb      	ldr	r3, [r7, #28]
 8010290:	3301      	adds	r3, #1
 8010292:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801029a:	b29b      	uxth	r3, r3
 801029c:	3b01      	subs	r3, #1
 801029e:	b29a      	uxth	r2, r3
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80102ac:	b29b      	uxth	r3, r3
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d1c8      	bne.n	8010244 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80102b2:	683b      	ldr	r3, [r7, #0]
 80102b4:	9300      	str	r3, [sp, #0]
 80102b6:	697b      	ldr	r3, [r7, #20]
 80102b8:	2200      	movs	r2, #0
 80102ba:	2140      	movs	r1, #64	@ 0x40
 80102bc:	68f8      	ldr	r0, [r7, #12]
 80102be:	f001 f895 	bl	80113ec <UART_WaitOnFlagUntilTimeout>
 80102c2:	4603      	mov	r3, r0
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d005      	beq.n	80102d4 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	2220      	movs	r2, #32
 80102cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80102d0:	2303      	movs	r3, #3
 80102d2:	e006      	b.n	80102e2 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	2220      	movs	r2, #32
 80102d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80102dc:	2300      	movs	r3, #0
 80102de:	e000      	b.n	80102e2 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80102e0:	2302      	movs	r3, #2
  }
}
 80102e2:	4618      	mov	r0, r3
 80102e4:	3720      	adds	r7, #32
 80102e6:	46bd      	mov	sp, r7
 80102e8:	bd80      	pop	{r7, pc}

080102ea <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80102ea:	b580      	push	{r7, lr}
 80102ec:	b08a      	sub	sp, #40	@ 0x28
 80102ee:	af02      	add	r7, sp, #8
 80102f0:	60f8      	str	r0, [r7, #12]
 80102f2:	60b9      	str	r1, [r7, #8]
 80102f4:	603b      	str	r3, [r7, #0]
 80102f6:	4613      	mov	r3, r2
 80102f8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010300:	2b20      	cmp	r3, #32
 8010302:	f040 80b5 	bne.w	8010470 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8010306:	68bb      	ldr	r3, [r7, #8]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d002      	beq.n	8010312 <HAL_UART_Receive+0x28>
 801030c:	88fb      	ldrh	r3, [r7, #6]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d101      	bne.n	8010316 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8010312:	2301      	movs	r3, #1
 8010314:	e0ad      	b.n	8010472 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	2200      	movs	r2, #0
 801031a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	2222      	movs	r2, #34	@ 0x22
 8010322:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	2200      	movs	r2, #0
 801032a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801032c:	f7f4 fb1e 	bl	800496c <HAL_GetTick>
 8010330:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	88fa      	ldrh	r2, [r7, #6]
 8010336:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	88fa      	ldrh	r2, [r7, #6]
 801033e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	689b      	ldr	r3, [r3, #8]
 8010346:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801034a:	d10e      	bne.n	801036a <HAL_UART_Receive+0x80>
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	691b      	ldr	r3, [r3, #16]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d105      	bne.n	8010360 <HAL_UART_Receive+0x76>
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	f240 12ff 	movw	r2, #511	@ 0x1ff
 801035a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801035e:	e02d      	b.n	80103bc <HAL_UART_Receive+0xd2>
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	22ff      	movs	r2, #255	@ 0xff
 8010364:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010368:	e028      	b.n	80103bc <HAL_UART_Receive+0xd2>
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	689b      	ldr	r3, [r3, #8]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d10d      	bne.n	801038e <HAL_UART_Receive+0xa4>
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	691b      	ldr	r3, [r3, #16]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d104      	bne.n	8010384 <HAL_UART_Receive+0x9a>
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	22ff      	movs	r2, #255	@ 0xff
 801037e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010382:	e01b      	b.n	80103bc <HAL_UART_Receive+0xd2>
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	227f      	movs	r2, #127	@ 0x7f
 8010388:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801038c:	e016      	b.n	80103bc <HAL_UART_Receive+0xd2>
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	689b      	ldr	r3, [r3, #8]
 8010392:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010396:	d10d      	bne.n	80103b4 <HAL_UART_Receive+0xca>
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	691b      	ldr	r3, [r3, #16]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d104      	bne.n	80103aa <HAL_UART_Receive+0xc0>
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	227f      	movs	r2, #127	@ 0x7f
 80103a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80103a8:	e008      	b.n	80103bc <HAL_UART_Receive+0xd2>
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	223f      	movs	r2, #63	@ 0x3f
 80103ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80103b2:	e003      	b.n	80103bc <HAL_UART_Receive+0xd2>
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	2200      	movs	r2, #0
 80103b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80103c2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	689b      	ldr	r3, [r3, #8]
 80103c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80103cc:	d108      	bne.n	80103e0 <HAL_UART_Receive+0xf6>
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	691b      	ldr	r3, [r3, #16]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d104      	bne.n	80103e0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80103d6:	2300      	movs	r3, #0
 80103d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80103da:	68bb      	ldr	r3, [r7, #8]
 80103dc:	61bb      	str	r3, [r7, #24]
 80103de:	e003      	b.n	80103e8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80103e0:	68bb      	ldr	r3, [r7, #8]
 80103e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80103e4:	2300      	movs	r3, #0
 80103e6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80103e8:	e036      	b.n	8010458 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80103ea:	683b      	ldr	r3, [r7, #0]
 80103ec:	9300      	str	r3, [sp, #0]
 80103ee:	697b      	ldr	r3, [r7, #20]
 80103f0:	2200      	movs	r2, #0
 80103f2:	2120      	movs	r1, #32
 80103f4:	68f8      	ldr	r0, [r7, #12]
 80103f6:	f000 fff9 	bl	80113ec <UART_WaitOnFlagUntilTimeout>
 80103fa:	4603      	mov	r3, r0
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d005      	beq.n	801040c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	2220      	movs	r2, #32
 8010404:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8010408:	2303      	movs	r3, #3
 801040a:	e032      	b.n	8010472 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 801040c:	69fb      	ldr	r3, [r7, #28]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d10c      	bne.n	801042c <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010418:	b29a      	uxth	r2, r3
 801041a:	8a7b      	ldrh	r3, [r7, #18]
 801041c:	4013      	ands	r3, r2
 801041e:	b29a      	uxth	r2, r3
 8010420:	69bb      	ldr	r3, [r7, #24]
 8010422:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8010424:	69bb      	ldr	r3, [r7, #24]
 8010426:	3302      	adds	r3, #2
 8010428:	61bb      	str	r3, [r7, #24]
 801042a:	e00c      	b.n	8010446 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010432:	b2da      	uxtb	r2, r3
 8010434:	8a7b      	ldrh	r3, [r7, #18]
 8010436:	b2db      	uxtb	r3, r3
 8010438:	4013      	ands	r3, r2
 801043a:	b2da      	uxtb	r2, r3
 801043c:	69fb      	ldr	r3, [r7, #28]
 801043e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8010440:	69fb      	ldr	r3, [r7, #28]
 8010442:	3301      	adds	r3, #1
 8010444:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801044c:	b29b      	uxth	r3, r3
 801044e:	3b01      	subs	r3, #1
 8010450:	b29a      	uxth	r2, r3
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801045e:	b29b      	uxth	r3, r3
 8010460:	2b00      	cmp	r3, #0
 8010462:	d1c2      	bne.n	80103ea <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	2220      	movs	r2, #32
 8010468:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 801046c:	2300      	movs	r3, #0
 801046e:	e000      	b.n	8010472 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8010470:	2302      	movs	r3, #2
  }
}
 8010472:	4618      	mov	r0, r3
 8010474:	3720      	adds	r7, #32
 8010476:	46bd      	mov	sp, r7
 8010478:	bd80      	pop	{r7, pc}
	...

0801047c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801047c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010480:	b092      	sub	sp, #72	@ 0x48
 8010482:	af00      	add	r7, sp, #0
 8010484:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010486:	2300      	movs	r3, #0
 8010488:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801048c:	697b      	ldr	r3, [r7, #20]
 801048e:	689a      	ldr	r2, [r3, #8]
 8010490:	697b      	ldr	r3, [r7, #20]
 8010492:	691b      	ldr	r3, [r3, #16]
 8010494:	431a      	orrs	r2, r3
 8010496:	697b      	ldr	r3, [r7, #20]
 8010498:	695b      	ldr	r3, [r3, #20]
 801049a:	431a      	orrs	r2, r3
 801049c:	697b      	ldr	r3, [r7, #20]
 801049e:	69db      	ldr	r3, [r3, #28]
 80104a0:	4313      	orrs	r3, r2
 80104a2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80104a4:	697b      	ldr	r3, [r7, #20]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	681a      	ldr	r2, [r3, #0]
 80104aa:	4bbe      	ldr	r3, [pc, #760]	@ (80107a4 <UART_SetConfig+0x328>)
 80104ac:	4013      	ands	r3, r2
 80104ae:	697a      	ldr	r2, [r7, #20]
 80104b0:	6812      	ldr	r2, [r2, #0]
 80104b2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80104b4:	430b      	orrs	r3, r1
 80104b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80104b8:	697b      	ldr	r3, [r7, #20]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	685b      	ldr	r3, [r3, #4]
 80104be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80104c2:	697b      	ldr	r3, [r7, #20]
 80104c4:	68da      	ldr	r2, [r3, #12]
 80104c6:	697b      	ldr	r3, [r7, #20]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	430a      	orrs	r2, r1
 80104cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80104ce:	697b      	ldr	r3, [r7, #20]
 80104d0:	699b      	ldr	r3, [r3, #24]
 80104d2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80104d4:	697b      	ldr	r3, [r7, #20]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	4ab3      	ldr	r2, [pc, #716]	@ (80107a8 <UART_SetConfig+0x32c>)
 80104da:	4293      	cmp	r3, r2
 80104dc:	d004      	beq.n	80104e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80104de:	697b      	ldr	r3, [r7, #20]
 80104e0:	6a1b      	ldr	r3, [r3, #32]
 80104e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80104e4:	4313      	orrs	r3, r2
 80104e6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80104e8:	697b      	ldr	r3, [r7, #20]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	689a      	ldr	r2, [r3, #8]
 80104ee:	4baf      	ldr	r3, [pc, #700]	@ (80107ac <UART_SetConfig+0x330>)
 80104f0:	4013      	ands	r3, r2
 80104f2:	697a      	ldr	r2, [r7, #20]
 80104f4:	6812      	ldr	r2, [r2, #0]
 80104f6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80104f8:	430b      	orrs	r3, r1
 80104fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80104fc:	697b      	ldr	r3, [r7, #20]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010502:	f023 010f 	bic.w	r1, r3, #15
 8010506:	697b      	ldr	r3, [r7, #20]
 8010508:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801050a:	697b      	ldr	r3, [r7, #20]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	430a      	orrs	r2, r1
 8010510:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010512:	697b      	ldr	r3, [r7, #20]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	4aa6      	ldr	r2, [pc, #664]	@ (80107b0 <UART_SetConfig+0x334>)
 8010518:	4293      	cmp	r3, r2
 801051a:	d177      	bne.n	801060c <UART_SetConfig+0x190>
 801051c:	4ba5      	ldr	r3, [pc, #660]	@ (80107b4 <UART_SetConfig+0x338>)
 801051e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010520:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010524:	2b28      	cmp	r3, #40	@ 0x28
 8010526:	d86d      	bhi.n	8010604 <UART_SetConfig+0x188>
 8010528:	a201      	add	r2, pc, #4	@ (adr r2, 8010530 <UART_SetConfig+0xb4>)
 801052a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801052e:	bf00      	nop
 8010530:	080105d5 	.word	0x080105d5
 8010534:	08010605 	.word	0x08010605
 8010538:	08010605 	.word	0x08010605
 801053c:	08010605 	.word	0x08010605
 8010540:	08010605 	.word	0x08010605
 8010544:	08010605 	.word	0x08010605
 8010548:	08010605 	.word	0x08010605
 801054c:	08010605 	.word	0x08010605
 8010550:	080105dd 	.word	0x080105dd
 8010554:	08010605 	.word	0x08010605
 8010558:	08010605 	.word	0x08010605
 801055c:	08010605 	.word	0x08010605
 8010560:	08010605 	.word	0x08010605
 8010564:	08010605 	.word	0x08010605
 8010568:	08010605 	.word	0x08010605
 801056c:	08010605 	.word	0x08010605
 8010570:	080105e5 	.word	0x080105e5
 8010574:	08010605 	.word	0x08010605
 8010578:	08010605 	.word	0x08010605
 801057c:	08010605 	.word	0x08010605
 8010580:	08010605 	.word	0x08010605
 8010584:	08010605 	.word	0x08010605
 8010588:	08010605 	.word	0x08010605
 801058c:	08010605 	.word	0x08010605
 8010590:	080105ed 	.word	0x080105ed
 8010594:	08010605 	.word	0x08010605
 8010598:	08010605 	.word	0x08010605
 801059c:	08010605 	.word	0x08010605
 80105a0:	08010605 	.word	0x08010605
 80105a4:	08010605 	.word	0x08010605
 80105a8:	08010605 	.word	0x08010605
 80105ac:	08010605 	.word	0x08010605
 80105b0:	080105f5 	.word	0x080105f5
 80105b4:	08010605 	.word	0x08010605
 80105b8:	08010605 	.word	0x08010605
 80105bc:	08010605 	.word	0x08010605
 80105c0:	08010605 	.word	0x08010605
 80105c4:	08010605 	.word	0x08010605
 80105c8:	08010605 	.word	0x08010605
 80105cc:	08010605 	.word	0x08010605
 80105d0:	080105fd 	.word	0x080105fd
 80105d4:	2301      	movs	r3, #1
 80105d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80105da:	e326      	b.n	8010c2a <UART_SetConfig+0x7ae>
 80105dc:	2304      	movs	r3, #4
 80105de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80105e2:	e322      	b.n	8010c2a <UART_SetConfig+0x7ae>
 80105e4:	2308      	movs	r3, #8
 80105e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80105ea:	e31e      	b.n	8010c2a <UART_SetConfig+0x7ae>
 80105ec:	2310      	movs	r3, #16
 80105ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80105f2:	e31a      	b.n	8010c2a <UART_SetConfig+0x7ae>
 80105f4:	2320      	movs	r3, #32
 80105f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80105fa:	e316      	b.n	8010c2a <UART_SetConfig+0x7ae>
 80105fc:	2340      	movs	r3, #64	@ 0x40
 80105fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010602:	e312      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010604:	2380      	movs	r3, #128	@ 0x80
 8010606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801060a:	e30e      	b.n	8010c2a <UART_SetConfig+0x7ae>
 801060c:	697b      	ldr	r3, [r7, #20]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	4a69      	ldr	r2, [pc, #420]	@ (80107b8 <UART_SetConfig+0x33c>)
 8010612:	4293      	cmp	r3, r2
 8010614:	d130      	bne.n	8010678 <UART_SetConfig+0x1fc>
 8010616:	4b67      	ldr	r3, [pc, #412]	@ (80107b4 <UART_SetConfig+0x338>)
 8010618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801061a:	f003 0307 	and.w	r3, r3, #7
 801061e:	2b05      	cmp	r3, #5
 8010620:	d826      	bhi.n	8010670 <UART_SetConfig+0x1f4>
 8010622:	a201      	add	r2, pc, #4	@ (adr r2, 8010628 <UART_SetConfig+0x1ac>)
 8010624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010628:	08010641 	.word	0x08010641
 801062c:	08010649 	.word	0x08010649
 8010630:	08010651 	.word	0x08010651
 8010634:	08010659 	.word	0x08010659
 8010638:	08010661 	.word	0x08010661
 801063c:	08010669 	.word	0x08010669
 8010640:	2300      	movs	r3, #0
 8010642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010646:	e2f0      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010648:	2304      	movs	r3, #4
 801064a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801064e:	e2ec      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010650:	2308      	movs	r3, #8
 8010652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010656:	e2e8      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010658:	2310      	movs	r3, #16
 801065a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801065e:	e2e4      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010660:	2320      	movs	r3, #32
 8010662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010666:	e2e0      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010668:	2340      	movs	r3, #64	@ 0x40
 801066a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801066e:	e2dc      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010670:	2380      	movs	r3, #128	@ 0x80
 8010672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010676:	e2d8      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010678:	697b      	ldr	r3, [r7, #20]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	4a4f      	ldr	r2, [pc, #316]	@ (80107bc <UART_SetConfig+0x340>)
 801067e:	4293      	cmp	r3, r2
 8010680:	d130      	bne.n	80106e4 <UART_SetConfig+0x268>
 8010682:	4b4c      	ldr	r3, [pc, #304]	@ (80107b4 <UART_SetConfig+0x338>)
 8010684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010686:	f003 0307 	and.w	r3, r3, #7
 801068a:	2b05      	cmp	r3, #5
 801068c:	d826      	bhi.n	80106dc <UART_SetConfig+0x260>
 801068e:	a201      	add	r2, pc, #4	@ (adr r2, 8010694 <UART_SetConfig+0x218>)
 8010690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010694:	080106ad 	.word	0x080106ad
 8010698:	080106b5 	.word	0x080106b5
 801069c:	080106bd 	.word	0x080106bd
 80106a0:	080106c5 	.word	0x080106c5
 80106a4:	080106cd 	.word	0x080106cd
 80106a8:	080106d5 	.word	0x080106d5
 80106ac:	2300      	movs	r3, #0
 80106ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106b2:	e2ba      	b.n	8010c2a <UART_SetConfig+0x7ae>
 80106b4:	2304      	movs	r3, #4
 80106b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106ba:	e2b6      	b.n	8010c2a <UART_SetConfig+0x7ae>
 80106bc:	2308      	movs	r3, #8
 80106be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106c2:	e2b2      	b.n	8010c2a <UART_SetConfig+0x7ae>
 80106c4:	2310      	movs	r3, #16
 80106c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106ca:	e2ae      	b.n	8010c2a <UART_SetConfig+0x7ae>
 80106cc:	2320      	movs	r3, #32
 80106ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106d2:	e2aa      	b.n	8010c2a <UART_SetConfig+0x7ae>
 80106d4:	2340      	movs	r3, #64	@ 0x40
 80106d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106da:	e2a6      	b.n	8010c2a <UART_SetConfig+0x7ae>
 80106dc:	2380      	movs	r3, #128	@ 0x80
 80106de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106e2:	e2a2      	b.n	8010c2a <UART_SetConfig+0x7ae>
 80106e4:	697b      	ldr	r3, [r7, #20]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	4a35      	ldr	r2, [pc, #212]	@ (80107c0 <UART_SetConfig+0x344>)
 80106ea:	4293      	cmp	r3, r2
 80106ec:	d130      	bne.n	8010750 <UART_SetConfig+0x2d4>
 80106ee:	4b31      	ldr	r3, [pc, #196]	@ (80107b4 <UART_SetConfig+0x338>)
 80106f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80106f2:	f003 0307 	and.w	r3, r3, #7
 80106f6:	2b05      	cmp	r3, #5
 80106f8:	d826      	bhi.n	8010748 <UART_SetConfig+0x2cc>
 80106fa:	a201      	add	r2, pc, #4	@ (adr r2, 8010700 <UART_SetConfig+0x284>)
 80106fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010700:	08010719 	.word	0x08010719
 8010704:	08010721 	.word	0x08010721
 8010708:	08010729 	.word	0x08010729
 801070c:	08010731 	.word	0x08010731
 8010710:	08010739 	.word	0x08010739
 8010714:	08010741 	.word	0x08010741
 8010718:	2300      	movs	r3, #0
 801071a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801071e:	e284      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010720:	2304      	movs	r3, #4
 8010722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010726:	e280      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010728:	2308      	movs	r3, #8
 801072a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801072e:	e27c      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010730:	2310      	movs	r3, #16
 8010732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010736:	e278      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010738:	2320      	movs	r3, #32
 801073a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801073e:	e274      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010740:	2340      	movs	r3, #64	@ 0x40
 8010742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010746:	e270      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010748:	2380      	movs	r3, #128	@ 0x80
 801074a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801074e:	e26c      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010750:	697b      	ldr	r3, [r7, #20]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	4a1b      	ldr	r2, [pc, #108]	@ (80107c4 <UART_SetConfig+0x348>)
 8010756:	4293      	cmp	r3, r2
 8010758:	d142      	bne.n	80107e0 <UART_SetConfig+0x364>
 801075a:	4b16      	ldr	r3, [pc, #88]	@ (80107b4 <UART_SetConfig+0x338>)
 801075c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801075e:	f003 0307 	and.w	r3, r3, #7
 8010762:	2b05      	cmp	r3, #5
 8010764:	d838      	bhi.n	80107d8 <UART_SetConfig+0x35c>
 8010766:	a201      	add	r2, pc, #4	@ (adr r2, 801076c <UART_SetConfig+0x2f0>)
 8010768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801076c:	08010785 	.word	0x08010785
 8010770:	0801078d 	.word	0x0801078d
 8010774:	08010795 	.word	0x08010795
 8010778:	0801079d 	.word	0x0801079d
 801077c:	080107c9 	.word	0x080107c9
 8010780:	080107d1 	.word	0x080107d1
 8010784:	2300      	movs	r3, #0
 8010786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801078a:	e24e      	b.n	8010c2a <UART_SetConfig+0x7ae>
 801078c:	2304      	movs	r3, #4
 801078e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010792:	e24a      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010794:	2308      	movs	r3, #8
 8010796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801079a:	e246      	b.n	8010c2a <UART_SetConfig+0x7ae>
 801079c:	2310      	movs	r3, #16
 801079e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107a2:	e242      	b.n	8010c2a <UART_SetConfig+0x7ae>
 80107a4:	cfff69f3 	.word	0xcfff69f3
 80107a8:	58000c00 	.word	0x58000c00
 80107ac:	11fff4ff 	.word	0x11fff4ff
 80107b0:	40011000 	.word	0x40011000
 80107b4:	58024400 	.word	0x58024400
 80107b8:	40004400 	.word	0x40004400
 80107bc:	40004800 	.word	0x40004800
 80107c0:	40004c00 	.word	0x40004c00
 80107c4:	40005000 	.word	0x40005000
 80107c8:	2320      	movs	r3, #32
 80107ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107ce:	e22c      	b.n	8010c2a <UART_SetConfig+0x7ae>
 80107d0:	2340      	movs	r3, #64	@ 0x40
 80107d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107d6:	e228      	b.n	8010c2a <UART_SetConfig+0x7ae>
 80107d8:	2380      	movs	r3, #128	@ 0x80
 80107da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107de:	e224      	b.n	8010c2a <UART_SetConfig+0x7ae>
 80107e0:	697b      	ldr	r3, [r7, #20]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	4ab1      	ldr	r2, [pc, #708]	@ (8010aac <UART_SetConfig+0x630>)
 80107e6:	4293      	cmp	r3, r2
 80107e8:	d176      	bne.n	80108d8 <UART_SetConfig+0x45c>
 80107ea:	4bb1      	ldr	r3, [pc, #708]	@ (8010ab0 <UART_SetConfig+0x634>)
 80107ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80107ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80107f2:	2b28      	cmp	r3, #40	@ 0x28
 80107f4:	d86c      	bhi.n	80108d0 <UART_SetConfig+0x454>
 80107f6:	a201      	add	r2, pc, #4	@ (adr r2, 80107fc <UART_SetConfig+0x380>)
 80107f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107fc:	080108a1 	.word	0x080108a1
 8010800:	080108d1 	.word	0x080108d1
 8010804:	080108d1 	.word	0x080108d1
 8010808:	080108d1 	.word	0x080108d1
 801080c:	080108d1 	.word	0x080108d1
 8010810:	080108d1 	.word	0x080108d1
 8010814:	080108d1 	.word	0x080108d1
 8010818:	080108d1 	.word	0x080108d1
 801081c:	080108a9 	.word	0x080108a9
 8010820:	080108d1 	.word	0x080108d1
 8010824:	080108d1 	.word	0x080108d1
 8010828:	080108d1 	.word	0x080108d1
 801082c:	080108d1 	.word	0x080108d1
 8010830:	080108d1 	.word	0x080108d1
 8010834:	080108d1 	.word	0x080108d1
 8010838:	080108d1 	.word	0x080108d1
 801083c:	080108b1 	.word	0x080108b1
 8010840:	080108d1 	.word	0x080108d1
 8010844:	080108d1 	.word	0x080108d1
 8010848:	080108d1 	.word	0x080108d1
 801084c:	080108d1 	.word	0x080108d1
 8010850:	080108d1 	.word	0x080108d1
 8010854:	080108d1 	.word	0x080108d1
 8010858:	080108d1 	.word	0x080108d1
 801085c:	080108b9 	.word	0x080108b9
 8010860:	080108d1 	.word	0x080108d1
 8010864:	080108d1 	.word	0x080108d1
 8010868:	080108d1 	.word	0x080108d1
 801086c:	080108d1 	.word	0x080108d1
 8010870:	080108d1 	.word	0x080108d1
 8010874:	080108d1 	.word	0x080108d1
 8010878:	080108d1 	.word	0x080108d1
 801087c:	080108c1 	.word	0x080108c1
 8010880:	080108d1 	.word	0x080108d1
 8010884:	080108d1 	.word	0x080108d1
 8010888:	080108d1 	.word	0x080108d1
 801088c:	080108d1 	.word	0x080108d1
 8010890:	080108d1 	.word	0x080108d1
 8010894:	080108d1 	.word	0x080108d1
 8010898:	080108d1 	.word	0x080108d1
 801089c:	080108c9 	.word	0x080108c9
 80108a0:	2301      	movs	r3, #1
 80108a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108a6:	e1c0      	b.n	8010c2a <UART_SetConfig+0x7ae>
 80108a8:	2304      	movs	r3, #4
 80108aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108ae:	e1bc      	b.n	8010c2a <UART_SetConfig+0x7ae>
 80108b0:	2308      	movs	r3, #8
 80108b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108b6:	e1b8      	b.n	8010c2a <UART_SetConfig+0x7ae>
 80108b8:	2310      	movs	r3, #16
 80108ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108be:	e1b4      	b.n	8010c2a <UART_SetConfig+0x7ae>
 80108c0:	2320      	movs	r3, #32
 80108c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108c6:	e1b0      	b.n	8010c2a <UART_SetConfig+0x7ae>
 80108c8:	2340      	movs	r3, #64	@ 0x40
 80108ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108ce:	e1ac      	b.n	8010c2a <UART_SetConfig+0x7ae>
 80108d0:	2380      	movs	r3, #128	@ 0x80
 80108d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80108d6:	e1a8      	b.n	8010c2a <UART_SetConfig+0x7ae>
 80108d8:	697b      	ldr	r3, [r7, #20]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	4a75      	ldr	r2, [pc, #468]	@ (8010ab4 <UART_SetConfig+0x638>)
 80108de:	4293      	cmp	r3, r2
 80108e0:	d130      	bne.n	8010944 <UART_SetConfig+0x4c8>
 80108e2:	4b73      	ldr	r3, [pc, #460]	@ (8010ab0 <UART_SetConfig+0x634>)
 80108e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80108e6:	f003 0307 	and.w	r3, r3, #7
 80108ea:	2b05      	cmp	r3, #5
 80108ec:	d826      	bhi.n	801093c <UART_SetConfig+0x4c0>
 80108ee:	a201      	add	r2, pc, #4	@ (adr r2, 80108f4 <UART_SetConfig+0x478>)
 80108f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108f4:	0801090d 	.word	0x0801090d
 80108f8:	08010915 	.word	0x08010915
 80108fc:	0801091d 	.word	0x0801091d
 8010900:	08010925 	.word	0x08010925
 8010904:	0801092d 	.word	0x0801092d
 8010908:	08010935 	.word	0x08010935
 801090c:	2300      	movs	r3, #0
 801090e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010912:	e18a      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010914:	2304      	movs	r3, #4
 8010916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801091a:	e186      	b.n	8010c2a <UART_SetConfig+0x7ae>
 801091c:	2308      	movs	r3, #8
 801091e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010922:	e182      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010924:	2310      	movs	r3, #16
 8010926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801092a:	e17e      	b.n	8010c2a <UART_SetConfig+0x7ae>
 801092c:	2320      	movs	r3, #32
 801092e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010932:	e17a      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010934:	2340      	movs	r3, #64	@ 0x40
 8010936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801093a:	e176      	b.n	8010c2a <UART_SetConfig+0x7ae>
 801093c:	2380      	movs	r3, #128	@ 0x80
 801093e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010942:	e172      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010944:	697b      	ldr	r3, [r7, #20]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	4a5b      	ldr	r2, [pc, #364]	@ (8010ab8 <UART_SetConfig+0x63c>)
 801094a:	4293      	cmp	r3, r2
 801094c:	d130      	bne.n	80109b0 <UART_SetConfig+0x534>
 801094e:	4b58      	ldr	r3, [pc, #352]	@ (8010ab0 <UART_SetConfig+0x634>)
 8010950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010952:	f003 0307 	and.w	r3, r3, #7
 8010956:	2b05      	cmp	r3, #5
 8010958:	d826      	bhi.n	80109a8 <UART_SetConfig+0x52c>
 801095a:	a201      	add	r2, pc, #4	@ (adr r2, 8010960 <UART_SetConfig+0x4e4>)
 801095c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010960:	08010979 	.word	0x08010979
 8010964:	08010981 	.word	0x08010981
 8010968:	08010989 	.word	0x08010989
 801096c:	08010991 	.word	0x08010991
 8010970:	08010999 	.word	0x08010999
 8010974:	080109a1 	.word	0x080109a1
 8010978:	2300      	movs	r3, #0
 801097a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801097e:	e154      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010980:	2304      	movs	r3, #4
 8010982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010986:	e150      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010988:	2308      	movs	r3, #8
 801098a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801098e:	e14c      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010990:	2310      	movs	r3, #16
 8010992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010996:	e148      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010998:	2320      	movs	r3, #32
 801099a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801099e:	e144      	b.n	8010c2a <UART_SetConfig+0x7ae>
 80109a0:	2340      	movs	r3, #64	@ 0x40
 80109a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109a6:	e140      	b.n	8010c2a <UART_SetConfig+0x7ae>
 80109a8:	2380      	movs	r3, #128	@ 0x80
 80109aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109ae:	e13c      	b.n	8010c2a <UART_SetConfig+0x7ae>
 80109b0:	697b      	ldr	r3, [r7, #20]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	4a41      	ldr	r2, [pc, #260]	@ (8010abc <UART_SetConfig+0x640>)
 80109b6:	4293      	cmp	r3, r2
 80109b8:	f040 8082 	bne.w	8010ac0 <UART_SetConfig+0x644>
 80109bc:	4b3c      	ldr	r3, [pc, #240]	@ (8010ab0 <UART_SetConfig+0x634>)
 80109be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80109c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80109c4:	2b28      	cmp	r3, #40	@ 0x28
 80109c6:	d86d      	bhi.n	8010aa4 <UART_SetConfig+0x628>
 80109c8:	a201      	add	r2, pc, #4	@ (adr r2, 80109d0 <UART_SetConfig+0x554>)
 80109ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109ce:	bf00      	nop
 80109d0:	08010a75 	.word	0x08010a75
 80109d4:	08010aa5 	.word	0x08010aa5
 80109d8:	08010aa5 	.word	0x08010aa5
 80109dc:	08010aa5 	.word	0x08010aa5
 80109e0:	08010aa5 	.word	0x08010aa5
 80109e4:	08010aa5 	.word	0x08010aa5
 80109e8:	08010aa5 	.word	0x08010aa5
 80109ec:	08010aa5 	.word	0x08010aa5
 80109f0:	08010a7d 	.word	0x08010a7d
 80109f4:	08010aa5 	.word	0x08010aa5
 80109f8:	08010aa5 	.word	0x08010aa5
 80109fc:	08010aa5 	.word	0x08010aa5
 8010a00:	08010aa5 	.word	0x08010aa5
 8010a04:	08010aa5 	.word	0x08010aa5
 8010a08:	08010aa5 	.word	0x08010aa5
 8010a0c:	08010aa5 	.word	0x08010aa5
 8010a10:	08010a85 	.word	0x08010a85
 8010a14:	08010aa5 	.word	0x08010aa5
 8010a18:	08010aa5 	.word	0x08010aa5
 8010a1c:	08010aa5 	.word	0x08010aa5
 8010a20:	08010aa5 	.word	0x08010aa5
 8010a24:	08010aa5 	.word	0x08010aa5
 8010a28:	08010aa5 	.word	0x08010aa5
 8010a2c:	08010aa5 	.word	0x08010aa5
 8010a30:	08010a8d 	.word	0x08010a8d
 8010a34:	08010aa5 	.word	0x08010aa5
 8010a38:	08010aa5 	.word	0x08010aa5
 8010a3c:	08010aa5 	.word	0x08010aa5
 8010a40:	08010aa5 	.word	0x08010aa5
 8010a44:	08010aa5 	.word	0x08010aa5
 8010a48:	08010aa5 	.word	0x08010aa5
 8010a4c:	08010aa5 	.word	0x08010aa5
 8010a50:	08010a95 	.word	0x08010a95
 8010a54:	08010aa5 	.word	0x08010aa5
 8010a58:	08010aa5 	.word	0x08010aa5
 8010a5c:	08010aa5 	.word	0x08010aa5
 8010a60:	08010aa5 	.word	0x08010aa5
 8010a64:	08010aa5 	.word	0x08010aa5
 8010a68:	08010aa5 	.word	0x08010aa5
 8010a6c:	08010aa5 	.word	0x08010aa5
 8010a70:	08010a9d 	.word	0x08010a9d
 8010a74:	2301      	movs	r3, #1
 8010a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a7a:	e0d6      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010a7c:	2304      	movs	r3, #4
 8010a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a82:	e0d2      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010a84:	2308      	movs	r3, #8
 8010a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a8a:	e0ce      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010a8c:	2310      	movs	r3, #16
 8010a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a92:	e0ca      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010a94:	2320      	movs	r3, #32
 8010a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a9a:	e0c6      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010a9c:	2340      	movs	r3, #64	@ 0x40
 8010a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010aa2:	e0c2      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010aa4:	2380      	movs	r3, #128	@ 0x80
 8010aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010aaa:	e0be      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010aac:	40011400 	.word	0x40011400
 8010ab0:	58024400 	.word	0x58024400
 8010ab4:	40007800 	.word	0x40007800
 8010ab8:	40007c00 	.word	0x40007c00
 8010abc:	40011800 	.word	0x40011800
 8010ac0:	697b      	ldr	r3, [r7, #20]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	4aad      	ldr	r2, [pc, #692]	@ (8010d7c <UART_SetConfig+0x900>)
 8010ac6:	4293      	cmp	r3, r2
 8010ac8:	d176      	bne.n	8010bb8 <UART_SetConfig+0x73c>
 8010aca:	4bad      	ldr	r3, [pc, #692]	@ (8010d80 <UART_SetConfig+0x904>)
 8010acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010ace:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010ad2:	2b28      	cmp	r3, #40	@ 0x28
 8010ad4:	d86c      	bhi.n	8010bb0 <UART_SetConfig+0x734>
 8010ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8010adc <UART_SetConfig+0x660>)
 8010ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010adc:	08010b81 	.word	0x08010b81
 8010ae0:	08010bb1 	.word	0x08010bb1
 8010ae4:	08010bb1 	.word	0x08010bb1
 8010ae8:	08010bb1 	.word	0x08010bb1
 8010aec:	08010bb1 	.word	0x08010bb1
 8010af0:	08010bb1 	.word	0x08010bb1
 8010af4:	08010bb1 	.word	0x08010bb1
 8010af8:	08010bb1 	.word	0x08010bb1
 8010afc:	08010b89 	.word	0x08010b89
 8010b00:	08010bb1 	.word	0x08010bb1
 8010b04:	08010bb1 	.word	0x08010bb1
 8010b08:	08010bb1 	.word	0x08010bb1
 8010b0c:	08010bb1 	.word	0x08010bb1
 8010b10:	08010bb1 	.word	0x08010bb1
 8010b14:	08010bb1 	.word	0x08010bb1
 8010b18:	08010bb1 	.word	0x08010bb1
 8010b1c:	08010b91 	.word	0x08010b91
 8010b20:	08010bb1 	.word	0x08010bb1
 8010b24:	08010bb1 	.word	0x08010bb1
 8010b28:	08010bb1 	.word	0x08010bb1
 8010b2c:	08010bb1 	.word	0x08010bb1
 8010b30:	08010bb1 	.word	0x08010bb1
 8010b34:	08010bb1 	.word	0x08010bb1
 8010b38:	08010bb1 	.word	0x08010bb1
 8010b3c:	08010b99 	.word	0x08010b99
 8010b40:	08010bb1 	.word	0x08010bb1
 8010b44:	08010bb1 	.word	0x08010bb1
 8010b48:	08010bb1 	.word	0x08010bb1
 8010b4c:	08010bb1 	.word	0x08010bb1
 8010b50:	08010bb1 	.word	0x08010bb1
 8010b54:	08010bb1 	.word	0x08010bb1
 8010b58:	08010bb1 	.word	0x08010bb1
 8010b5c:	08010ba1 	.word	0x08010ba1
 8010b60:	08010bb1 	.word	0x08010bb1
 8010b64:	08010bb1 	.word	0x08010bb1
 8010b68:	08010bb1 	.word	0x08010bb1
 8010b6c:	08010bb1 	.word	0x08010bb1
 8010b70:	08010bb1 	.word	0x08010bb1
 8010b74:	08010bb1 	.word	0x08010bb1
 8010b78:	08010bb1 	.word	0x08010bb1
 8010b7c:	08010ba9 	.word	0x08010ba9
 8010b80:	2301      	movs	r3, #1
 8010b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b86:	e050      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010b88:	2304      	movs	r3, #4
 8010b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b8e:	e04c      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010b90:	2308      	movs	r3, #8
 8010b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b96:	e048      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010b98:	2310      	movs	r3, #16
 8010b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b9e:	e044      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010ba0:	2320      	movs	r3, #32
 8010ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ba6:	e040      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010ba8:	2340      	movs	r3, #64	@ 0x40
 8010baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bae:	e03c      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010bb0:	2380      	movs	r3, #128	@ 0x80
 8010bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bb6:	e038      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010bb8:	697b      	ldr	r3, [r7, #20]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	4a71      	ldr	r2, [pc, #452]	@ (8010d84 <UART_SetConfig+0x908>)
 8010bbe:	4293      	cmp	r3, r2
 8010bc0:	d130      	bne.n	8010c24 <UART_SetConfig+0x7a8>
 8010bc2:	4b6f      	ldr	r3, [pc, #444]	@ (8010d80 <UART_SetConfig+0x904>)
 8010bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010bc6:	f003 0307 	and.w	r3, r3, #7
 8010bca:	2b05      	cmp	r3, #5
 8010bcc:	d826      	bhi.n	8010c1c <UART_SetConfig+0x7a0>
 8010bce:	a201      	add	r2, pc, #4	@ (adr r2, 8010bd4 <UART_SetConfig+0x758>)
 8010bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bd4:	08010bed 	.word	0x08010bed
 8010bd8:	08010bf5 	.word	0x08010bf5
 8010bdc:	08010bfd 	.word	0x08010bfd
 8010be0:	08010c05 	.word	0x08010c05
 8010be4:	08010c0d 	.word	0x08010c0d
 8010be8:	08010c15 	.word	0x08010c15
 8010bec:	2302      	movs	r3, #2
 8010bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bf2:	e01a      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010bf4:	2304      	movs	r3, #4
 8010bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bfa:	e016      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010bfc:	2308      	movs	r3, #8
 8010bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c02:	e012      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010c04:	2310      	movs	r3, #16
 8010c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c0a:	e00e      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010c0c:	2320      	movs	r3, #32
 8010c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c12:	e00a      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010c14:	2340      	movs	r3, #64	@ 0x40
 8010c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c1a:	e006      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010c1c:	2380      	movs	r3, #128	@ 0x80
 8010c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c22:	e002      	b.n	8010c2a <UART_SetConfig+0x7ae>
 8010c24:	2380      	movs	r3, #128	@ 0x80
 8010c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010c2a:	697b      	ldr	r3, [r7, #20]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	4a55      	ldr	r2, [pc, #340]	@ (8010d84 <UART_SetConfig+0x908>)
 8010c30:	4293      	cmp	r3, r2
 8010c32:	f040 80f8 	bne.w	8010e26 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010c36:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010c3a:	2b20      	cmp	r3, #32
 8010c3c:	dc46      	bgt.n	8010ccc <UART_SetConfig+0x850>
 8010c3e:	2b02      	cmp	r3, #2
 8010c40:	db75      	blt.n	8010d2e <UART_SetConfig+0x8b2>
 8010c42:	3b02      	subs	r3, #2
 8010c44:	2b1e      	cmp	r3, #30
 8010c46:	d872      	bhi.n	8010d2e <UART_SetConfig+0x8b2>
 8010c48:	a201      	add	r2, pc, #4	@ (adr r2, 8010c50 <UART_SetConfig+0x7d4>)
 8010c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c4e:	bf00      	nop
 8010c50:	08010cd3 	.word	0x08010cd3
 8010c54:	08010d2f 	.word	0x08010d2f
 8010c58:	08010cdb 	.word	0x08010cdb
 8010c5c:	08010d2f 	.word	0x08010d2f
 8010c60:	08010d2f 	.word	0x08010d2f
 8010c64:	08010d2f 	.word	0x08010d2f
 8010c68:	08010ceb 	.word	0x08010ceb
 8010c6c:	08010d2f 	.word	0x08010d2f
 8010c70:	08010d2f 	.word	0x08010d2f
 8010c74:	08010d2f 	.word	0x08010d2f
 8010c78:	08010d2f 	.word	0x08010d2f
 8010c7c:	08010d2f 	.word	0x08010d2f
 8010c80:	08010d2f 	.word	0x08010d2f
 8010c84:	08010d2f 	.word	0x08010d2f
 8010c88:	08010cfb 	.word	0x08010cfb
 8010c8c:	08010d2f 	.word	0x08010d2f
 8010c90:	08010d2f 	.word	0x08010d2f
 8010c94:	08010d2f 	.word	0x08010d2f
 8010c98:	08010d2f 	.word	0x08010d2f
 8010c9c:	08010d2f 	.word	0x08010d2f
 8010ca0:	08010d2f 	.word	0x08010d2f
 8010ca4:	08010d2f 	.word	0x08010d2f
 8010ca8:	08010d2f 	.word	0x08010d2f
 8010cac:	08010d2f 	.word	0x08010d2f
 8010cb0:	08010d2f 	.word	0x08010d2f
 8010cb4:	08010d2f 	.word	0x08010d2f
 8010cb8:	08010d2f 	.word	0x08010d2f
 8010cbc:	08010d2f 	.word	0x08010d2f
 8010cc0:	08010d2f 	.word	0x08010d2f
 8010cc4:	08010d2f 	.word	0x08010d2f
 8010cc8:	08010d21 	.word	0x08010d21
 8010ccc:	2b40      	cmp	r3, #64	@ 0x40
 8010cce:	d02a      	beq.n	8010d26 <UART_SetConfig+0x8aa>
 8010cd0:	e02d      	b.n	8010d2e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010cd2:	f7fc fed3 	bl	800da7c <HAL_RCCEx_GetD3PCLK1Freq>
 8010cd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010cd8:	e02f      	b.n	8010d3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010cda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f7fc fee2 	bl	800daa8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010ce8:	e027      	b.n	8010d3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010cea:	f107 0318 	add.w	r3, r7, #24
 8010cee:	4618      	mov	r0, r3
 8010cf0:	f7fd f82e 	bl	800dd50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010cf4:	69fb      	ldr	r3, [r7, #28]
 8010cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010cf8:	e01f      	b.n	8010d3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010cfa:	4b21      	ldr	r3, [pc, #132]	@ (8010d80 <UART_SetConfig+0x904>)
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	f003 0320 	and.w	r3, r3, #32
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d009      	beq.n	8010d1a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010d06:	4b1e      	ldr	r3, [pc, #120]	@ (8010d80 <UART_SetConfig+0x904>)
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	08db      	lsrs	r3, r3, #3
 8010d0c:	f003 0303 	and.w	r3, r3, #3
 8010d10:	4a1d      	ldr	r2, [pc, #116]	@ (8010d88 <UART_SetConfig+0x90c>)
 8010d12:	fa22 f303 	lsr.w	r3, r2, r3
 8010d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010d18:	e00f      	b.n	8010d3a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8010d88 <UART_SetConfig+0x90c>)
 8010d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010d1e:	e00c      	b.n	8010d3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010d20:	4b1a      	ldr	r3, [pc, #104]	@ (8010d8c <UART_SetConfig+0x910>)
 8010d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010d24:	e009      	b.n	8010d3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010d26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010d2c:	e005      	b.n	8010d3a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010d2e:	2300      	movs	r3, #0
 8010d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010d32:	2301      	movs	r3, #1
 8010d34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010d38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010d3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	f000 81ee 	beq.w	801111e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010d42:	697b      	ldr	r3, [r7, #20]
 8010d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d46:	4a12      	ldr	r2, [pc, #72]	@ (8010d90 <UART_SetConfig+0x914>)
 8010d48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d4c:	461a      	mov	r2, r3
 8010d4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d50:	fbb3 f3f2 	udiv	r3, r3, r2
 8010d54:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010d56:	697b      	ldr	r3, [r7, #20]
 8010d58:	685a      	ldr	r2, [r3, #4]
 8010d5a:	4613      	mov	r3, r2
 8010d5c:	005b      	lsls	r3, r3, #1
 8010d5e:	4413      	add	r3, r2
 8010d60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010d62:	429a      	cmp	r2, r3
 8010d64:	d305      	bcc.n	8010d72 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010d66:	697b      	ldr	r3, [r7, #20]
 8010d68:	685b      	ldr	r3, [r3, #4]
 8010d6a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010d6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010d6e:	429a      	cmp	r2, r3
 8010d70:	d910      	bls.n	8010d94 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8010d72:	2301      	movs	r3, #1
 8010d74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010d78:	e1d1      	b.n	801111e <UART_SetConfig+0xca2>
 8010d7a:	bf00      	nop
 8010d7c:	40011c00 	.word	0x40011c00
 8010d80:	58024400 	.word	0x58024400
 8010d84:	58000c00 	.word	0x58000c00
 8010d88:	03d09000 	.word	0x03d09000
 8010d8c:	003d0900 	.word	0x003d0900
 8010d90:	08014e88 	.word	0x08014e88
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010d94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d96:	2200      	movs	r2, #0
 8010d98:	60bb      	str	r3, [r7, #8]
 8010d9a:	60fa      	str	r2, [r7, #12]
 8010d9c:	697b      	ldr	r3, [r7, #20]
 8010d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010da0:	4ac0      	ldr	r2, [pc, #768]	@ (80110a4 <UART_SetConfig+0xc28>)
 8010da2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010da6:	b29b      	uxth	r3, r3
 8010da8:	2200      	movs	r2, #0
 8010daa:	603b      	str	r3, [r7, #0]
 8010dac:	607a      	str	r2, [r7, #4]
 8010dae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010db2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010db6:	f7ef fb13 	bl	80003e0 <__aeabi_uldivmod>
 8010dba:	4602      	mov	r2, r0
 8010dbc:	460b      	mov	r3, r1
 8010dbe:	4610      	mov	r0, r2
 8010dc0:	4619      	mov	r1, r3
 8010dc2:	f04f 0200 	mov.w	r2, #0
 8010dc6:	f04f 0300 	mov.w	r3, #0
 8010dca:	020b      	lsls	r3, r1, #8
 8010dcc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010dd0:	0202      	lsls	r2, r0, #8
 8010dd2:	6979      	ldr	r1, [r7, #20]
 8010dd4:	6849      	ldr	r1, [r1, #4]
 8010dd6:	0849      	lsrs	r1, r1, #1
 8010dd8:	2000      	movs	r0, #0
 8010dda:	460c      	mov	r4, r1
 8010ddc:	4605      	mov	r5, r0
 8010dde:	eb12 0804 	adds.w	r8, r2, r4
 8010de2:	eb43 0905 	adc.w	r9, r3, r5
 8010de6:	697b      	ldr	r3, [r7, #20]
 8010de8:	685b      	ldr	r3, [r3, #4]
 8010dea:	2200      	movs	r2, #0
 8010dec:	469a      	mov	sl, r3
 8010dee:	4693      	mov	fp, r2
 8010df0:	4652      	mov	r2, sl
 8010df2:	465b      	mov	r3, fp
 8010df4:	4640      	mov	r0, r8
 8010df6:	4649      	mov	r1, r9
 8010df8:	f7ef faf2 	bl	80003e0 <__aeabi_uldivmod>
 8010dfc:	4602      	mov	r2, r0
 8010dfe:	460b      	mov	r3, r1
 8010e00:	4613      	mov	r3, r2
 8010e02:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010e0a:	d308      	bcc.n	8010e1e <UART_SetConfig+0x9a2>
 8010e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010e12:	d204      	bcs.n	8010e1e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8010e14:	697b      	ldr	r3, [r7, #20]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010e1a:	60da      	str	r2, [r3, #12]
 8010e1c:	e17f      	b.n	801111e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8010e1e:	2301      	movs	r3, #1
 8010e20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010e24:	e17b      	b.n	801111e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010e26:	697b      	ldr	r3, [r7, #20]
 8010e28:	69db      	ldr	r3, [r3, #28]
 8010e2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010e2e:	f040 80bd 	bne.w	8010fac <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8010e32:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010e36:	2b20      	cmp	r3, #32
 8010e38:	dc48      	bgt.n	8010ecc <UART_SetConfig+0xa50>
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	db7b      	blt.n	8010f36 <UART_SetConfig+0xaba>
 8010e3e:	2b20      	cmp	r3, #32
 8010e40:	d879      	bhi.n	8010f36 <UART_SetConfig+0xaba>
 8010e42:	a201      	add	r2, pc, #4	@ (adr r2, 8010e48 <UART_SetConfig+0x9cc>)
 8010e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e48:	08010ed3 	.word	0x08010ed3
 8010e4c:	08010edb 	.word	0x08010edb
 8010e50:	08010f37 	.word	0x08010f37
 8010e54:	08010f37 	.word	0x08010f37
 8010e58:	08010ee3 	.word	0x08010ee3
 8010e5c:	08010f37 	.word	0x08010f37
 8010e60:	08010f37 	.word	0x08010f37
 8010e64:	08010f37 	.word	0x08010f37
 8010e68:	08010ef3 	.word	0x08010ef3
 8010e6c:	08010f37 	.word	0x08010f37
 8010e70:	08010f37 	.word	0x08010f37
 8010e74:	08010f37 	.word	0x08010f37
 8010e78:	08010f37 	.word	0x08010f37
 8010e7c:	08010f37 	.word	0x08010f37
 8010e80:	08010f37 	.word	0x08010f37
 8010e84:	08010f37 	.word	0x08010f37
 8010e88:	08010f03 	.word	0x08010f03
 8010e8c:	08010f37 	.word	0x08010f37
 8010e90:	08010f37 	.word	0x08010f37
 8010e94:	08010f37 	.word	0x08010f37
 8010e98:	08010f37 	.word	0x08010f37
 8010e9c:	08010f37 	.word	0x08010f37
 8010ea0:	08010f37 	.word	0x08010f37
 8010ea4:	08010f37 	.word	0x08010f37
 8010ea8:	08010f37 	.word	0x08010f37
 8010eac:	08010f37 	.word	0x08010f37
 8010eb0:	08010f37 	.word	0x08010f37
 8010eb4:	08010f37 	.word	0x08010f37
 8010eb8:	08010f37 	.word	0x08010f37
 8010ebc:	08010f37 	.word	0x08010f37
 8010ec0:	08010f37 	.word	0x08010f37
 8010ec4:	08010f37 	.word	0x08010f37
 8010ec8:	08010f29 	.word	0x08010f29
 8010ecc:	2b40      	cmp	r3, #64	@ 0x40
 8010ece:	d02e      	beq.n	8010f2e <UART_SetConfig+0xab2>
 8010ed0:	e031      	b.n	8010f36 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010ed2:	f7fa ff35 	bl	800bd40 <HAL_RCC_GetPCLK1Freq>
 8010ed6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010ed8:	e033      	b.n	8010f42 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010eda:	f7fa ff47 	bl	800bd6c <HAL_RCC_GetPCLK2Freq>
 8010ede:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010ee0:	e02f      	b.n	8010f42 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010ee2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f7fc fdde 	bl	800daa8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010ef0:	e027      	b.n	8010f42 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010ef2:	f107 0318 	add.w	r3, r7, #24
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	f7fc ff2a 	bl	800dd50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010efc:	69fb      	ldr	r3, [r7, #28]
 8010efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010f00:	e01f      	b.n	8010f42 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010f02:	4b69      	ldr	r3, [pc, #420]	@ (80110a8 <UART_SetConfig+0xc2c>)
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	f003 0320 	and.w	r3, r3, #32
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d009      	beq.n	8010f22 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010f0e:	4b66      	ldr	r3, [pc, #408]	@ (80110a8 <UART_SetConfig+0xc2c>)
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	08db      	lsrs	r3, r3, #3
 8010f14:	f003 0303 	and.w	r3, r3, #3
 8010f18:	4a64      	ldr	r2, [pc, #400]	@ (80110ac <UART_SetConfig+0xc30>)
 8010f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8010f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010f20:	e00f      	b.n	8010f42 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8010f22:	4b62      	ldr	r3, [pc, #392]	@ (80110ac <UART_SetConfig+0xc30>)
 8010f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010f26:	e00c      	b.n	8010f42 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010f28:	4b61      	ldr	r3, [pc, #388]	@ (80110b0 <UART_SetConfig+0xc34>)
 8010f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010f2c:	e009      	b.n	8010f42 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010f2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010f34:	e005      	b.n	8010f42 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8010f36:	2300      	movs	r3, #0
 8010f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010f3a:	2301      	movs	r3, #1
 8010f3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010f40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	f000 80ea 	beq.w	801111e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010f4a:	697b      	ldr	r3, [r7, #20]
 8010f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f4e:	4a55      	ldr	r2, [pc, #340]	@ (80110a4 <UART_SetConfig+0xc28>)
 8010f50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f54:	461a      	mov	r2, r3
 8010f56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f58:	fbb3 f3f2 	udiv	r3, r3, r2
 8010f5c:	005a      	lsls	r2, r3, #1
 8010f5e:	697b      	ldr	r3, [r7, #20]
 8010f60:	685b      	ldr	r3, [r3, #4]
 8010f62:	085b      	lsrs	r3, r3, #1
 8010f64:	441a      	add	r2, r3
 8010f66:	697b      	ldr	r3, [r7, #20]
 8010f68:	685b      	ldr	r3, [r3, #4]
 8010f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f72:	2b0f      	cmp	r3, #15
 8010f74:	d916      	bls.n	8010fa4 <UART_SetConfig+0xb28>
 8010f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010f7c:	d212      	bcs.n	8010fa4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f80:	b29b      	uxth	r3, r3
 8010f82:	f023 030f 	bic.w	r3, r3, #15
 8010f86:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f8a:	085b      	lsrs	r3, r3, #1
 8010f8c:	b29b      	uxth	r3, r3
 8010f8e:	f003 0307 	and.w	r3, r3, #7
 8010f92:	b29a      	uxth	r2, r3
 8010f94:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010f96:	4313      	orrs	r3, r2
 8010f98:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8010f9a:	697b      	ldr	r3, [r7, #20]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010fa0:	60da      	str	r2, [r3, #12]
 8010fa2:	e0bc      	b.n	801111e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8010fa4:	2301      	movs	r3, #1
 8010fa6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010faa:	e0b8      	b.n	801111e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010fac:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010fb0:	2b20      	cmp	r3, #32
 8010fb2:	dc4b      	bgt.n	801104c <UART_SetConfig+0xbd0>
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	f2c0 8087 	blt.w	80110c8 <UART_SetConfig+0xc4c>
 8010fba:	2b20      	cmp	r3, #32
 8010fbc:	f200 8084 	bhi.w	80110c8 <UART_SetConfig+0xc4c>
 8010fc0:	a201      	add	r2, pc, #4	@ (adr r2, 8010fc8 <UART_SetConfig+0xb4c>)
 8010fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fc6:	bf00      	nop
 8010fc8:	08011053 	.word	0x08011053
 8010fcc:	0801105b 	.word	0x0801105b
 8010fd0:	080110c9 	.word	0x080110c9
 8010fd4:	080110c9 	.word	0x080110c9
 8010fd8:	08011063 	.word	0x08011063
 8010fdc:	080110c9 	.word	0x080110c9
 8010fe0:	080110c9 	.word	0x080110c9
 8010fe4:	080110c9 	.word	0x080110c9
 8010fe8:	08011073 	.word	0x08011073
 8010fec:	080110c9 	.word	0x080110c9
 8010ff0:	080110c9 	.word	0x080110c9
 8010ff4:	080110c9 	.word	0x080110c9
 8010ff8:	080110c9 	.word	0x080110c9
 8010ffc:	080110c9 	.word	0x080110c9
 8011000:	080110c9 	.word	0x080110c9
 8011004:	080110c9 	.word	0x080110c9
 8011008:	08011083 	.word	0x08011083
 801100c:	080110c9 	.word	0x080110c9
 8011010:	080110c9 	.word	0x080110c9
 8011014:	080110c9 	.word	0x080110c9
 8011018:	080110c9 	.word	0x080110c9
 801101c:	080110c9 	.word	0x080110c9
 8011020:	080110c9 	.word	0x080110c9
 8011024:	080110c9 	.word	0x080110c9
 8011028:	080110c9 	.word	0x080110c9
 801102c:	080110c9 	.word	0x080110c9
 8011030:	080110c9 	.word	0x080110c9
 8011034:	080110c9 	.word	0x080110c9
 8011038:	080110c9 	.word	0x080110c9
 801103c:	080110c9 	.word	0x080110c9
 8011040:	080110c9 	.word	0x080110c9
 8011044:	080110c9 	.word	0x080110c9
 8011048:	080110bb 	.word	0x080110bb
 801104c:	2b40      	cmp	r3, #64	@ 0x40
 801104e:	d037      	beq.n	80110c0 <UART_SetConfig+0xc44>
 8011050:	e03a      	b.n	80110c8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011052:	f7fa fe75 	bl	800bd40 <HAL_RCC_GetPCLK1Freq>
 8011056:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011058:	e03c      	b.n	80110d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801105a:	f7fa fe87 	bl	800bd6c <HAL_RCC_GetPCLK2Freq>
 801105e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011060:	e038      	b.n	80110d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011062:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011066:	4618      	mov	r0, r3
 8011068:	f7fc fd1e 	bl	800daa8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801106c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801106e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011070:	e030      	b.n	80110d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011072:	f107 0318 	add.w	r3, r7, #24
 8011076:	4618      	mov	r0, r3
 8011078:	f7fc fe6a 	bl	800dd50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801107c:	69fb      	ldr	r3, [r7, #28]
 801107e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011080:	e028      	b.n	80110d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011082:	4b09      	ldr	r3, [pc, #36]	@ (80110a8 <UART_SetConfig+0xc2c>)
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	f003 0320 	and.w	r3, r3, #32
 801108a:	2b00      	cmp	r3, #0
 801108c:	d012      	beq.n	80110b4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801108e:	4b06      	ldr	r3, [pc, #24]	@ (80110a8 <UART_SetConfig+0xc2c>)
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	08db      	lsrs	r3, r3, #3
 8011094:	f003 0303 	and.w	r3, r3, #3
 8011098:	4a04      	ldr	r2, [pc, #16]	@ (80110ac <UART_SetConfig+0xc30>)
 801109a:	fa22 f303 	lsr.w	r3, r2, r3
 801109e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80110a0:	e018      	b.n	80110d4 <UART_SetConfig+0xc58>
 80110a2:	bf00      	nop
 80110a4:	08014e88 	.word	0x08014e88
 80110a8:	58024400 	.word	0x58024400
 80110ac:	03d09000 	.word	0x03d09000
 80110b0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80110b4:	4b24      	ldr	r3, [pc, #144]	@ (8011148 <UART_SetConfig+0xccc>)
 80110b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80110b8:	e00c      	b.n	80110d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80110ba:	4b24      	ldr	r3, [pc, #144]	@ (801114c <UART_SetConfig+0xcd0>)
 80110bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80110be:	e009      	b.n	80110d4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80110c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80110c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80110c6:	e005      	b.n	80110d4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80110c8:	2300      	movs	r3, #0
 80110ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80110cc:	2301      	movs	r3, #1
 80110ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80110d2:	bf00      	nop
    }

    if (pclk != 0U)
 80110d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d021      	beq.n	801111e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80110da:	697b      	ldr	r3, [r7, #20]
 80110dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110de:	4a1c      	ldr	r2, [pc, #112]	@ (8011150 <UART_SetConfig+0xcd4>)
 80110e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80110e4:	461a      	mov	r2, r3
 80110e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80110e8:	fbb3 f2f2 	udiv	r2, r3, r2
 80110ec:	697b      	ldr	r3, [r7, #20]
 80110ee:	685b      	ldr	r3, [r3, #4]
 80110f0:	085b      	lsrs	r3, r3, #1
 80110f2:	441a      	add	r2, r3
 80110f4:	697b      	ldr	r3, [r7, #20]
 80110f6:	685b      	ldr	r3, [r3, #4]
 80110f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80110fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80110fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011100:	2b0f      	cmp	r3, #15
 8011102:	d909      	bls.n	8011118 <UART_SetConfig+0xc9c>
 8011104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011106:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801110a:	d205      	bcs.n	8011118 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801110c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801110e:	b29a      	uxth	r2, r3
 8011110:	697b      	ldr	r3, [r7, #20]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	60da      	str	r2, [r3, #12]
 8011116:	e002      	b.n	801111e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011118:	2301      	movs	r3, #1
 801111a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801111e:	697b      	ldr	r3, [r7, #20]
 8011120:	2201      	movs	r2, #1
 8011122:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8011126:	697b      	ldr	r3, [r7, #20]
 8011128:	2201      	movs	r2, #1
 801112a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801112e:	697b      	ldr	r3, [r7, #20]
 8011130:	2200      	movs	r2, #0
 8011132:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8011134:	697b      	ldr	r3, [r7, #20]
 8011136:	2200      	movs	r2, #0
 8011138:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801113a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 801113e:	4618      	mov	r0, r3
 8011140:	3748      	adds	r7, #72	@ 0x48
 8011142:	46bd      	mov	sp, r7
 8011144:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011148:	03d09000 	.word	0x03d09000
 801114c:	003d0900 	.word	0x003d0900
 8011150:	08014e88 	.word	0x08014e88

08011154 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011154:	b480      	push	{r7}
 8011156:	b083      	sub	sp, #12
 8011158:	af00      	add	r7, sp, #0
 801115a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011160:	f003 0301 	and.w	r3, r3, #1
 8011164:	2b00      	cmp	r3, #0
 8011166:	d00a      	beq.n	801117e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	685b      	ldr	r3, [r3, #4]
 801116e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	430a      	orrs	r2, r1
 801117c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011182:	f003 0302 	and.w	r3, r3, #2
 8011186:	2b00      	cmp	r3, #0
 8011188:	d00a      	beq.n	80111a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	685b      	ldr	r3, [r3, #4]
 8011190:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	430a      	orrs	r2, r1
 801119e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80111a4:	f003 0304 	and.w	r3, r3, #4
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d00a      	beq.n	80111c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	685b      	ldr	r3, [r3, #4]
 80111b2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	430a      	orrs	r2, r1
 80111c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80111c6:	f003 0308 	and.w	r3, r3, #8
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d00a      	beq.n	80111e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	685b      	ldr	r3, [r3, #4]
 80111d4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	430a      	orrs	r2, r1
 80111e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80111e8:	f003 0310 	and.w	r3, r3, #16
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d00a      	beq.n	8011206 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	689b      	ldr	r3, [r3, #8]
 80111f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	430a      	orrs	r2, r1
 8011204:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801120a:	f003 0320 	and.w	r3, r3, #32
 801120e:	2b00      	cmp	r3, #0
 8011210:	d00a      	beq.n	8011228 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	689b      	ldr	r3, [r3, #8]
 8011218:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	430a      	orrs	r2, r1
 8011226:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801122c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011230:	2b00      	cmp	r3, #0
 8011232:	d01a      	beq.n	801126a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	685b      	ldr	r3, [r3, #4]
 801123a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	430a      	orrs	r2, r1
 8011248:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801124e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011252:	d10a      	bne.n	801126a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	685b      	ldr	r3, [r3, #4]
 801125a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	430a      	orrs	r2, r1
 8011268:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801126e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011272:	2b00      	cmp	r3, #0
 8011274:	d00a      	beq.n	801128c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	685b      	ldr	r3, [r3, #4]
 801127c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	430a      	orrs	r2, r1
 801128a:	605a      	str	r2, [r3, #4]
  }
}
 801128c:	bf00      	nop
 801128e:	370c      	adds	r7, #12
 8011290:	46bd      	mov	sp, r7
 8011292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011296:	4770      	bx	lr

08011298 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011298:	b580      	push	{r7, lr}
 801129a:	b098      	sub	sp, #96	@ 0x60
 801129c:	af02      	add	r7, sp, #8
 801129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	2200      	movs	r2, #0
 80112a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80112a8:	f7f3 fb60 	bl	800496c <HAL_GetTick>
 80112ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	f003 0308 	and.w	r3, r3, #8
 80112b8:	2b08      	cmp	r3, #8
 80112ba:	d12f      	bne.n	801131c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80112bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80112c0:	9300      	str	r3, [sp, #0]
 80112c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80112c4:	2200      	movs	r2, #0
 80112c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80112ca:	6878      	ldr	r0, [r7, #4]
 80112cc:	f000 f88e 	bl	80113ec <UART_WaitOnFlagUntilTimeout>
 80112d0:	4603      	mov	r3, r0
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d022      	beq.n	801131c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112de:	e853 3f00 	ldrex	r3, [r3]
 80112e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80112e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80112ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	461a      	mov	r2, r3
 80112f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80112f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80112f6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80112fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80112fc:	e841 2300 	strex	r3, r2, [r1]
 8011300:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011304:	2b00      	cmp	r3, #0
 8011306:	d1e6      	bne.n	80112d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	2220      	movs	r2, #32
 801130c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	2200      	movs	r2, #0
 8011314:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011318:	2303      	movs	r3, #3
 801131a:	e063      	b.n	80113e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	f003 0304 	and.w	r3, r3, #4
 8011326:	2b04      	cmp	r3, #4
 8011328:	d149      	bne.n	80113be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801132a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801132e:	9300      	str	r3, [sp, #0]
 8011330:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011332:	2200      	movs	r2, #0
 8011334:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8011338:	6878      	ldr	r0, [r7, #4]
 801133a:	f000 f857 	bl	80113ec <UART_WaitOnFlagUntilTimeout>
 801133e:	4603      	mov	r3, r0
 8011340:	2b00      	cmp	r3, #0
 8011342:	d03c      	beq.n	80113be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801134a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801134c:	e853 3f00 	ldrex	r3, [r3]
 8011350:	623b      	str	r3, [r7, #32]
   return(result);
 8011352:	6a3b      	ldr	r3, [r7, #32]
 8011354:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011358:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	461a      	mov	r2, r3
 8011360:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011362:	633b      	str	r3, [r7, #48]	@ 0x30
 8011364:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011366:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011368:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801136a:	e841 2300 	strex	r3, r2, [r1]
 801136e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011372:	2b00      	cmp	r3, #0
 8011374:	d1e6      	bne.n	8011344 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	3308      	adds	r3, #8
 801137c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801137e:	693b      	ldr	r3, [r7, #16]
 8011380:	e853 3f00 	ldrex	r3, [r3]
 8011384:	60fb      	str	r3, [r7, #12]
   return(result);
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	f023 0301 	bic.w	r3, r3, #1
 801138c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	3308      	adds	r3, #8
 8011394:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011396:	61fa      	str	r2, [r7, #28]
 8011398:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801139a:	69b9      	ldr	r1, [r7, #24]
 801139c:	69fa      	ldr	r2, [r7, #28]
 801139e:	e841 2300 	strex	r3, r2, [r1]
 80113a2:	617b      	str	r3, [r7, #20]
   return(result);
 80113a4:	697b      	ldr	r3, [r7, #20]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d1e5      	bne.n	8011376 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	2220      	movs	r2, #32
 80113ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	2200      	movs	r2, #0
 80113b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80113ba:	2303      	movs	r3, #3
 80113bc:	e012      	b.n	80113e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	2220      	movs	r2, #32
 80113c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	2220      	movs	r2, #32
 80113ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	2200      	movs	r2, #0
 80113d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	2200      	movs	r2, #0
 80113d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	2200      	movs	r2, #0
 80113de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80113e2:	2300      	movs	r3, #0
}
 80113e4:	4618      	mov	r0, r3
 80113e6:	3758      	adds	r7, #88	@ 0x58
 80113e8:	46bd      	mov	sp, r7
 80113ea:	bd80      	pop	{r7, pc}

080113ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80113ec:	b580      	push	{r7, lr}
 80113ee:	b084      	sub	sp, #16
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	60f8      	str	r0, [r7, #12]
 80113f4:	60b9      	str	r1, [r7, #8]
 80113f6:	603b      	str	r3, [r7, #0]
 80113f8:	4613      	mov	r3, r2
 80113fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80113fc:	e049      	b.n	8011492 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80113fe:	69bb      	ldr	r3, [r7, #24]
 8011400:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011404:	d045      	beq.n	8011492 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011406:	f7f3 fab1 	bl	800496c <HAL_GetTick>
 801140a:	4602      	mov	r2, r0
 801140c:	683b      	ldr	r3, [r7, #0]
 801140e:	1ad3      	subs	r3, r2, r3
 8011410:	69ba      	ldr	r2, [r7, #24]
 8011412:	429a      	cmp	r2, r3
 8011414:	d302      	bcc.n	801141c <UART_WaitOnFlagUntilTimeout+0x30>
 8011416:	69bb      	ldr	r3, [r7, #24]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d101      	bne.n	8011420 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801141c:	2303      	movs	r3, #3
 801141e:	e048      	b.n	80114b2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	f003 0304 	and.w	r3, r3, #4
 801142a:	2b00      	cmp	r3, #0
 801142c:	d031      	beq.n	8011492 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	69db      	ldr	r3, [r3, #28]
 8011434:	f003 0308 	and.w	r3, r3, #8
 8011438:	2b08      	cmp	r3, #8
 801143a:	d110      	bne.n	801145e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	2208      	movs	r2, #8
 8011442:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8011444:	68f8      	ldr	r0, [r7, #12]
 8011446:	f000 f839 	bl	80114bc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	2208      	movs	r2, #8
 801144e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	2200      	movs	r2, #0
 8011456:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 801145a:	2301      	movs	r3, #1
 801145c:	e029      	b.n	80114b2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	69db      	ldr	r3, [r3, #28]
 8011464:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011468:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801146c:	d111      	bne.n	8011492 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011476:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011478:	68f8      	ldr	r0, [r7, #12]
 801147a:	f000 f81f 	bl	80114bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	2220      	movs	r2, #32
 8011482:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	2200      	movs	r2, #0
 801148a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801148e:	2303      	movs	r3, #3
 8011490:	e00f      	b.n	80114b2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	69da      	ldr	r2, [r3, #28]
 8011498:	68bb      	ldr	r3, [r7, #8]
 801149a:	4013      	ands	r3, r2
 801149c:	68ba      	ldr	r2, [r7, #8]
 801149e:	429a      	cmp	r2, r3
 80114a0:	bf0c      	ite	eq
 80114a2:	2301      	moveq	r3, #1
 80114a4:	2300      	movne	r3, #0
 80114a6:	b2db      	uxtb	r3, r3
 80114a8:	461a      	mov	r2, r3
 80114aa:	79fb      	ldrb	r3, [r7, #7]
 80114ac:	429a      	cmp	r2, r3
 80114ae:	d0a6      	beq.n	80113fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80114b0:	2300      	movs	r3, #0
}
 80114b2:	4618      	mov	r0, r3
 80114b4:	3710      	adds	r7, #16
 80114b6:	46bd      	mov	sp, r7
 80114b8:	bd80      	pop	{r7, pc}
	...

080114bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80114bc:	b480      	push	{r7}
 80114be:	b095      	sub	sp, #84	@ 0x54
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80114cc:	e853 3f00 	ldrex	r3, [r3]
 80114d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80114d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80114d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	461a      	mov	r2, r3
 80114e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80114e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80114e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80114e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80114ea:	e841 2300 	strex	r3, r2, [r1]
 80114ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80114f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d1e6      	bne.n	80114c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	3308      	adds	r3, #8
 80114fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114fe:	6a3b      	ldr	r3, [r7, #32]
 8011500:	e853 3f00 	ldrex	r3, [r3]
 8011504:	61fb      	str	r3, [r7, #28]
   return(result);
 8011506:	69fa      	ldr	r2, [r7, #28]
 8011508:	4b1e      	ldr	r3, [pc, #120]	@ (8011584 <UART_EndRxTransfer+0xc8>)
 801150a:	4013      	ands	r3, r2
 801150c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	3308      	adds	r3, #8
 8011514:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011516:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011518:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801151a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801151c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801151e:	e841 2300 	strex	r3, r2, [r1]
 8011522:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011526:	2b00      	cmp	r3, #0
 8011528:	d1e5      	bne.n	80114f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801152e:	2b01      	cmp	r3, #1
 8011530:	d118      	bne.n	8011564 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	e853 3f00 	ldrex	r3, [r3]
 801153e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011540:	68bb      	ldr	r3, [r7, #8]
 8011542:	f023 0310 	bic.w	r3, r3, #16
 8011546:	647b      	str	r3, [r7, #68]	@ 0x44
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	461a      	mov	r2, r3
 801154e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011550:	61bb      	str	r3, [r7, #24]
 8011552:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011554:	6979      	ldr	r1, [r7, #20]
 8011556:	69ba      	ldr	r2, [r7, #24]
 8011558:	e841 2300 	strex	r3, r2, [r1]
 801155c:	613b      	str	r3, [r7, #16]
   return(result);
 801155e:	693b      	ldr	r3, [r7, #16]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d1e6      	bne.n	8011532 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	2220      	movs	r2, #32
 8011568:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	2200      	movs	r2, #0
 8011570:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	2200      	movs	r2, #0
 8011576:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8011578:	bf00      	nop
 801157a:	3754      	adds	r7, #84	@ 0x54
 801157c:	46bd      	mov	sp, r7
 801157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011582:	4770      	bx	lr
 8011584:	effffffe 	.word	0xeffffffe

08011588 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011588:	b480      	push	{r7}
 801158a:	b085      	sub	sp, #20
 801158c:	af00      	add	r7, sp, #0
 801158e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011596:	2b01      	cmp	r3, #1
 8011598:	d101      	bne.n	801159e <HAL_UARTEx_DisableFifoMode+0x16>
 801159a:	2302      	movs	r3, #2
 801159c:	e027      	b.n	80115ee <HAL_UARTEx_DisableFifoMode+0x66>
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	2201      	movs	r2, #1
 80115a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	2224      	movs	r2, #36	@ 0x24
 80115aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	681a      	ldr	r2, [r3, #0]
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	f022 0201 	bic.w	r2, r2, #1
 80115c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80115cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	2200      	movs	r2, #0
 80115d2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	68fa      	ldr	r2, [r7, #12]
 80115da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	2220      	movs	r2, #32
 80115e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	2200      	movs	r2, #0
 80115e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80115ec:	2300      	movs	r3, #0
}
 80115ee:	4618      	mov	r0, r3
 80115f0:	3714      	adds	r7, #20
 80115f2:	46bd      	mov	sp, r7
 80115f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f8:	4770      	bx	lr

080115fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80115fa:	b580      	push	{r7, lr}
 80115fc:	b084      	sub	sp, #16
 80115fe:	af00      	add	r7, sp, #0
 8011600:	6078      	str	r0, [r7, #4]
 8011602:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801160a:	2b01      	cmp	r3, #1
 801160c:	d101      	bne.n	8011612 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801160e:	2302      	movs	r3, #2
 8011610:	e02d      	b.n	801166e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	2201      	movs	r2, #1
 8011616:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	2224      	movs	r2, #36	@ 0x24
 801161e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	681a      	ldr	r2, [r3, #0]
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	f022 0201 	bic.w	r2, r2, #1
 8011638:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	689b      	ldr	r3, [r3, #8]
 8011640:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	683a      	ldr	r2, [r7, #0]
 801164a:	430a      	orrs	r2, r1
 801164c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801164e:	6878      	ldr	r0, [r7, #4]
 8011650:	f000 f850 	bl	80116f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	68fa      	ldr	r2, [r7, #12]
 801165a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	2220      	movs	r2, #32
 8011660:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	2200      	movs	r2, #0
 8011668:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801166c:	2300      	movs	r3, #0
}
 801166e:	4618      	mov	r0, r3
 8011670:	3710      	adds	r7, #16
 8011672:	46bd      	mov	sp, r7
 8011674:	bd80      	pop	{r7, pc}

08011676 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011676:	b580      	push	{r7, lr}
 8011678:	b084      	sub	sp, #16
 801167a:	af00      	add	r7, sp, #0
 801167c:	6078      	str	r0, [r7, #4]
 801167e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011686:	2b01      	cmp	r3, #1
 8011688:	d101      	bne.n	801168e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801168a:	2302      	movs	r3, #2
 801168c:	e02d      	b.n	80116ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	2201      	movs	r2, #1
 8011692:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	2224      	movs	r2, #36	@ 0x24
 801169a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	681a      	ldr	r2, [r3, #0]
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	f022 0201 	bic.w	r2, r2, #1
 80116b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	689b      	ldr	r3, [r3, #8]
 80116bc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	683a      	ldr	r2, [r7, #0]
 80116c6:	430a      	orrs	r2, r1
 80116c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80116ca:	6878      	ldr	r0, [r7, #4]
 80116cc:	f000 f812 	bl	80116f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	68fa      	ldr	r2, [r7, #12]
 80116d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	2220      	movs	r2, #32
 80116dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	2200      	movs	r2, #0
 80116e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80116e8:	2300      	movs	r3, #0
}
 80116ea:	4618      	mov	r0, r3
 80116ec:	3710      	adds	r7, #16
 80116ee:	46bd      	mov	sp, r7
 80116f0:	bd80      	pop	{r7, pc}
	...

080116f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80116f4:	b480      	push	{r7}
 80116f6:	b085      	sub	sp, #20
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011700:	2b00      	cmp	r3, #0
 8011702:	d108      	bne.n	8011716 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	2201      	movs	r2, #1
 8011708:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	2201      	movs	r2, #1
 8011710:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011714:	e031      	b.n	801177a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011716:	2310      	movs	r3, #16
 8011718:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801171a:	2310      	movs	r3, #16
 801171c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	689b      	ldr	r3, [r3, #8]
 8011724:	0e5b      	lsrs	r3, r3, #25
 8011726:	b2db      	uxtb	r3, r3
 8011728:	f003 0307 	and.w	r3, r3, #7
 801172c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	689b      	ldr	r3, [r3, #8]
 8011734:	0f5b      	lsrs	r3, r3, #29
 8011736:	b2db      	uxtb	r3, r3
 8011738:	f003 0307 	and.w	r3, r3, #7
 801173c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801173e:	7bbb      	ldrb	r3, [r7, #14]
 8011740:	7b3a      	ldrb	r2, [r7, #12]
 8011742:	4911      	ldr	r1, [pc, #68]	@ (8011788 <UARTEx_SetNbDataToProcess+0x94>)
 8011744:	5c8a      	ldrb	r2, [r1, r2]
 8011746:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801174a:	7b3a      	ldrb	r2, [r7, #12]
 801174c:	490f      	ldr	r1, [pc, #60]	@ (801178c <UARTEx_SetNbDataToProcess+0x98>)
 801174e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011750:	fb93 f3f2 	sdiv	r3, r3, r2
 8011754:	b29a      	uxth	r2, r3
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801175c:	7bfb      	ldrb	r3, [r7, #15]
 801175e:	7b7a      	ldrb	r2, [r7, #13]
 8011760:	4909      	ldr	r1, [pc, #36]	@ (8011788 <UARTEx_SetNbDataToProcess+0x94>)
 8011762:	5c8a      	ldrb	r2, [r1, r2]
 8011764:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011768:	7b7a      	ldrb	r2, [r7, #13]
 801176a:	4908      	ldr	r1, [pc, #32]	@ (801178c <UARTEx_SetNbDataToProcess+0x98>)
 801176c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801176e:	fb93 f3f2 	sdiv	r3, r3, r2
 8011772:	b29a      	uxth	r2, r3
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801177a:	bf00      	nop
 801177c:	3714      	adds	r7, #20
 801177e:	46bd      	mov	sp, r7
 8011780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011784:	4770      	bx	lr
 8011786:	bf00      	nop
 8011788:	08014ea0 	.word	0x08014ea0
 801178c:	08014ea8 	.word	0x08014ea8

08011790 <atoi>:
 8011790:	220a      	movs	r2, #10
 8011792:	2100      	movs	r1, #0
 8011794:	f000 b894 	b.w	80118c0 <strtol>

08011798 <__itoa>:
 8011798:	1e93      	subs	r3, r2, #2
 801179a:	2b22      	cmp	r3, #34	@ 0x22
 801179c:	b510      	push	{r4, lr}
 801179e:	460c      	mov	r4, r1
 80117a0:	d904      	bls.n	80117ac <__itoa+0x14>
 80117a2:	2300      	movs	r3, #0
 80117a4:	700b      	strb	r3, [r1, #0]
 80117a6:	461c      	mov	r4, r3
 80117a8:	4620      	mov	r0, r4
 80117aa:	bd10      	pop	{r4, pc}
 80117ac:	2a0a      	cmp	r2, #10
 80117ae:	d109      	bne.n	80117c4 <__itoa+0x2c>
 80117b0:	2800      	cmp	r0, #0
 80117b2:	da07      	bge.n	80117c4 <__itoa+0x2c>
 80117b4:	232d      	movs	r3, #45	@ 0x2d
 80117b6:	700b      	strb	r3, [r1, #0]
 80117b8:	4240      	negs	r0, r0
 80117ba:	2101      	movs	r1, #1
 80117bc:	4421      	add	r1, r4
 80117be:	f000 f889 	bl	80118d4 <__utoa>
 80117c2:	e7f1      	b.n	80117a8 <__itoa+0x10>
 80117c4:	2100      	movs	r1, #0
 80117c6:	e7f9      	b.n	80117bc <__itoa+0x24>

080117c8 <itoa>:
 80117c8:	f7ff bfe6 	b.w	8011798 <__itoa>

080117cc <_strtol_l.constprop.0>:
 80117cc:	2b24      	cmp	r3, #36	@ 0x24
 80117ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117d2:	4686      	mov	lr, r0
 80117d4:	4690      	mov	r8, r2
 80117d6:	d801      	bhi.n	80117dc <_strtol_l.constprop.0+0x10>
 80117d8:	2b01      	cmp	r3, #1
 80117da:	d106      	bne.n	80117ea <_strtol_l.constprop.0+0x1e>
 80117dc:	f000 fe7a 	bl	80124d4 <__errno>
 80117e0:	2316      	movs	r3, #22
 80117e2:	6003      	str	r3, [r0, #0]
 80117e4:	2000      	movs	r0, #0
 80117e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117ea:	4834      	ldr	r0, [pc, #208]	@ (80118bc <_strtol_l.constprop.0+0xf0>)
 80117ec:	460d      	mov	r5, r1
 80117ee:	462a      	mov	r2, r5
 80117f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80117f4:	5d06      	ldrb	r6, [r0, r4]
 80117f6:	f016 0608 	ands.w	r6, r6, #8
 80117fa:	d1f8      	bne.n	80117ee <_strtol_l.constprop.0+0x22>
 80117fc:	2c2d      	cmp	r4, #45	@ 0x2d
 80117fe:	d12d      	bne.n	801185c <_strtol_l.constprop.0+0x90>
 8011800:	782c      	ldrb	r4, [r5, #0]
 8011802:	2601      	movs	r6, #1
 8011804:	1c95      	adds	r5, r2, #2
 8011806:	f033 0210 	bics.w	r2, r3, #16
 801180a:	d109      	bne.n	8011820 <_strtol_l.constprop.0+0x54>
 801180c:	2c30      	cmp	r4, #48	@ 0x30
 801180e:	d12a      	bne.n	8011866 <_strtol_l.constprop.0+0x9a>
 8011810:	782a      	ldrb	r2, [r5, #0]
 8011812:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011816:	2a58      	cmp	r2, #88	@ 0x58
 8011818:	d125      	bne.n	8011866 <_strtol_l.constprop.0+0x9a>
 801181a:	786c      	ldrb	r4, [r5, #1]
 801181c:	2310      	movs	r3, #16
 801181e:	3502      	adds	r5, #2
 8011820:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011824:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8011828:	2200      	movs	r2, #0
 801182a:	fbbc f9f3 	udiv	r9, ip, r3
 801182e:	4610      	mov	r0, r2
 8011830:	fb03 ca19 	mls	sl, r3, r9, ip
 8011834:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011838:	2f09      	cmp	r7, #9
 801183a:	d81b      	bhi.n	8011874 <_strtol_l.constprop.0+0xa8>
 801183c:	463c      	mov	r4, r7
 801183e:	42a3      	cmp	r3, r4
 8011840:	dd27      	ble.n	8011892 <_strtol_l.constprop.0+0xc6>
 8011842:	1c57      	adds	r7, r2, #1
 8011844:	d007      	beq.n	8011856 <_strtol_l.constprop.0+0x8a>
 8011846:	4581      	cmp	r9, r0
 8011848:	d320      	bcc.n	801188c <_strtol_l.constprop.0+0xc0>
 801184a:	d101      	bne.n	8011850 <_strtol_l.constprop.0+0x84>
 801184c:	45a2      	cmp	sl, r4
 801184e:	db1d      	blt.n	801188c <_strtol_l.constprop.0+0xc0>
 8011850:	fb00 4003 	mla	r0, r0, r3, r4
 8011854:	2201      	movs	r2, #1
 8011856:	f815 4b01 	ldrb.w	r4, [r5], #1
 801185a:	e7eb      	b.n	8011834 <_strtol_l.constprop.0+0x68>
 801185c:	2c2b      	cmp	r4, #43	@ 0x2b
 801185e:	bf04      	itt	eq
 8011860:	782c      	ldrbeq	r4, [r5, #0]
 8011862:	1c95      	addeq	r5, r2, #2
 8011864:	e7cf      	b.n	8011806 <_strtol_l.constprop.0+0x3a>
 8011866:	2b00      	cmp	r3, #0
 8011868:	d1da      	bne.n	8011820 <_strtol_l.constprop.0+0x54>
 801186a:	2c30      	cmp	r4, #48	@ 0x30
 801186c:	bf0c      	ite	eq
 801186e:	2308      	moveq	r3, #8
 8011870:	230a      	movne	r3, #10
 8011872:	e7d5      	b.n	8011820 <_strtol_l.constprop.0+0x54>
 8011874:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011878:	2f19      	cmp	r7, #25
 801187a:	d801      	bhi.n	8011880 <_strtol_l.constprop.0+0xb4>
 801187c:	3c37      	subs	r4, #55	@ 0x37
 801187e:	e7de      	b.n	801183e <_strtol_l.constprop.0+0x72>
 8011880:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011884:	2f19      	cmp	r7, #25
 8011886:	d804      	bhi.n	8011892 <_strtol_l.constprop.0+0xc6>
 8011888:	3c57      	subs	r4, #87	@ 0x57
 801188a:	e7d8      	b.n	801183e <_strtol_l.constprop.0+0x72>
 801188c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011890:	e7e1      	b.n	8011856 <_strtol_l.constprop.0+0x8a>
 8011892:	1c53      	adds	r3, r2, #1
 8011894:	d108      	bne.n	80118a8 <_strtol_l.constprop.0+0xdc>
 8011896:	2322      	movs	r3, #34	@ 0x22
 8011898:	f8ce 3000 	str.w	r3, [lr]
 801189c:	4660      	mov	r0, ip
 801189e:	f1b8 0f00 	cmp.w	r8, #0
 80118a2:	d0a0      	beq.n	80117e6 <_strtol_l.constprop.0+0x1a>
 80118a4:	1e69      	subs	r1, r5, #1
 80118a6:	e006      	b.n	80118b6 <_strtol_l.constprop.0+0xea>
 80118a8:	b106      	cbz	r6, 80118ac <_strtol_l.constprop.0+0xe0>
 80118aa:	4240      	negs	r0, r0
 80118ac:	f1b8 0f00 	cmp.w	r8, #0
 80118b0:	d099      	beq.n	80117e6 <_strtol_l.constprop.0+0x1a>
 80118b2:	2a00      	cmp	r2, #0
 80118b4:	d1f6      	bne.n	80118a4 <_strtol_l.constprop.0+0xd8>
 80118b6:	f8c8 1000 	str.w	r1, [r8]
 80118ba:	e794      	b.n	80117e6 <_strtol_l.constprop.0+0x1a>
 80118bc:	08014ed6 	.word	0x08014ed6

080118c0 <strtol>:
 80118c0:	4613      	mov	r3, r2
 80118c2:	460a      	mov	r2, r1
 80118c4:	4601      	mov	r1, r0
 80118c6:	4802      	ldr	r0, [pc, #8]	@ (80118d0 <strtol+0x10>)
 80118c8:	6800      	ldr	r0, [r0, #0]
 80118ca:	f7ff bf7f 	b.w	80117cc <_strtol_l.constprop.0>
 80118ce:	bf00      	nop
 80118d0:	24000054 	.word	0x24000054

080118d4 <__utoa>:
 80118d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118d6:	4c1f      	ldr	r4, [pc, #124]	@ (8011954 <__utoa+0x80>)
 80118d8:	b08b      	sub	sp, #44	@ 0x2c
 80118da:	4605      	mov	r5, r0
 80118dc:	460b      	mov	r3, r1
 80118de:	466e      	mov	r6, sp
 80118e0:	f104 0c20 	add.w	ip, r4, #32
 80118e4:	6820      	ldr	r0, [r4, #0]
 80118e6:	6861      	ldr	r1, [r4, #4]
 80118e8:	4637      	mov	r7, r6
 80118ea:	c703      	stmia	r7!, {r0, r1}
 80118ec:	3408      	adds	r4, #8
 80118ee:	4564      	cmp	r4, ip
 80118f0:	463e      	mov	r6, r7
 80118f2:	d1f7      	bne.n	80118e4 <__utoa+0x10>
 80118f4:	7921      	ldrb	r1, [r4, #4]
 80118f6:	7139      	strb	r1, [r7, #4]
 80118f8:	1e91      	subs	r1, r2, #2
 80118fa:	6820      	ldr	r0, [r4, #0]
 80118fc:	6038      	str	r0, [r7, #0]
 80118fe:	2922      	cmp	r1, #34	@ 0x22
 8011900:	f04f 0100 	mov.w	r1, #0
 8011904:	d904      	bls.n	8011910 <__utoa+0x3c>
 8011906:	7019      	strb	r1, [r3, #0]
 8011908:	460b      	mov	r3, r1
 801190a:	4618      	mov	r0, r3
 801190c:	b00b      	add	sp, #44	@ 0x2c
 801190e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011910:	1e58      	subs	r0, r3, #1
 8011912:	4684      	mov	ip, r0
 8011914:	fbb5 f7f2 	udiv	r7, r5, r2
 8011918:	fb02 5617 	mls	r6, r2, r7, r5
 801191c:	3628      	adds	r6, #40	@ 0x28
 801191e:	446e      	add	r6, sp
 8011920:	460c      	mov	r4, r1
 8011922:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8011926:	f80c 6f01 	strb.w	r6, [ip, #1]!
 801192a:	462e      	mov	r6, r5
 801192c:	42b2      	cmp	r2, r6
 801192e:	f101 0101 	add.w	r1, r1, #1
 8011932:	463d      	mov	r5, r7
 8011934:	d9ee      	bls.n	8011914 <__utoa+0x40>
 8011936:	2200      	movs	r2, #0
 8011938:	545a      	strb	r2, [r3, r1]
 801193a:	1919      	adds	r1, r3, r4
 801193c:	1aa5      	subs	r5, r4, r2
 801193e:	42aa      	cmp	r2, r5
 8011940:	dae3      	bge.n	801190a <__utoa+0x36>
 8011942:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8011946:	780e      	ldrb	r6, [r1, #0]
 8011948:	7006      	strb	r6, [r0, #0]
 801194a:	3201      	adds	r2, #1
 801194c:	f801 5901 	strb.w	r5, [r1], #-1
 8011950:	e7f4      	b.n	801193c <__utoa+0x68>
 8011952:	bf00      	nop
 8011954:	08014eb0 	.word	0x08014eb0

08011958 <__cvt>:
 8011958:	b5f0      	push	{r4, r5, r6, r7, lr}
 801195a:	ed2d 8b02 	vpush	{d8}
 801195e:	eeb0 8b40 	vmov.f64	d8, d0
 8011962:	b085      	sub	sp, #20
 8011964:	4617      	mov	r7, r2
 8011966:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8011968:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801196a:	ee18 2a90 	vmov	r2, s17
 801196e:	f025 0520 	bic.w	r5, r5, #32
 8011972:	2a00      	cmp	r2, #0
 8011974:	bfb6      	itet	lt
 8011976:	222d      	movlt	r2, #45	@ 0x2d
 8011978:	2200      	movge	r2, #0
 801197a:	eeb1 8b40 	vneglt.f64	d8, d0
 801197e:	2d46      	cmp	r5, #70	@ 0x46
 8011980:	460c      	mov	r4, r1
 8011982:	701a      	strb	r2, [r3, #0]
 8011984:	d004      	beq.n	8011990 <__cvt+0x38>
 8011986:	2d45      	cmp	r5, #69	@ 0x45
 8011988:	d100      	bne.n	801198c <__cvt+0x34>
 801198a:	3401      	adds	r4, #1
 801198c:	2102      	movs	r1, #2
 801198e:	e000      	b.n	8011992 <__cvt+0x3a>
 8011990:	2103      	movs	r1, #3
 8011992:	ab03      	add	r3, sp, #12
 8011994:	9301      	str	r3, [sp, #4]
 8011996:	ab02      	add	r3, sp, #8
 8011998:	9300      	str	r3, [sp, #0]
 801199a:	4622      	mov	r2, r4
 801199c:	4633      	mov	r3, r6
 801199e:	eeb0 0b48 	vmov.f64	d0, d8
 80119a2:	f000 fe55 	bl	8012650 <_dtoa_r>
 80119a6:	2d47      	cmp	r5, #71	@ 0x47
 80119a8:	d114      	bne.n	80119d4 <__cvt+0x7c>
 80119aa:	07fb      	lsls	r3, r7, #31
 80119ac:	d50a      	bpl.n	80119c4 <__cvt+0x6c>
 80119ae:	1902      	adds	r2, r0, r4
 80119b0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80119b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119b8:	bf08      	it	eq
 80119ba:	9203      	streq	r2, [sp, #12]
 80119bc:	2130      	movs	r1, #48	@ 0x30
 80119be:	9b03      	ldr	r3, [sp, #12]
 80119c0:	4293      	cmp	r3, r2
 80119c2:	d319      	bcc.n	80119f8 <__cvt+0xa0>
 80119c4:	9b03      	ldr	r3, [sp, #12]
 80119c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80119c8:	1a1b      	subs	r3, r3, r0
 80119ca:	6013      	str	r3, [r2, #0]
 80119cc:	b005      	add	sp, #20
 80119ce:	ecbd 8b02 	vpop	{d8}
 80119d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119d4:	2d46      	cmp	r5, #70	@ 0x46
 80119d6:	eb00 0204 	add.w	r2, r0, r4
 80119da:	d1e9      	bne.n	80119b0 <__cvt+0x58>
 80119dc:	7803      	ldrb	r3, [r0, #0]
 80119de:	2b30      	cmp	r3, #48	@ 0x30
 80119e0:	d107      	bne.n	80119f2 <__cvt+0x9a>
 80119e2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80119e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119ea:	bf1c      	itt	ne
 80119ec:	f1c4 0401 	rsbne	r4, r4, #1
 80119f0:	6034      	strne	r4, [r6, #0]
 80119f2:	6833      	ldr	r3, [r6, #0]
 80119f4:	441a      	add	r2, r3
 80119f6:	e7db      	b.n	80119b0 <__cvt+0x58>
 80119f8:	1c5c      	adds	r4, r3, #1
 80119fa:	9403      	str	r4, [sp, #12]
 80119fc:	7019      	strb	r1, [r3, #0]
 80119fe:	e7de      	b.n	80119be <__cvt+0x66>

08011a00 <__exponent>:
 8011a00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011a02:	2900      	cmp	r1, #0
 8011a04:	bfba      	itte	lt
 8011a06:	4249      	neglt	r1, r1
 8011a08:	232d      	movlt	r3, #45	@ 0x2d
 8011a0a:	232b      	movge	r3, #43	@ 0x2b
 8011a0c:	2909      	cmp	r1, #9
 8011a0e:	7002      	strb	r2, [r0, #0]
 8011a10:	7043      	strb	r3, [r0, #1]
 8011a12:	dd29      	ble.n	8011a68 <__exponent+0x68>
 8011a14:	f10d 0307 	add.w	r3, sp, #7
 8011a18:	461d      	mov	r5, r3
 8011a1a:	270a      	movs	r7, #10
 8011a1c:	461a      	mov	r2, r3
 8011a1e:	fbb1 f6f7 	udiv	r6, r1, r7
 8011a22:	fb07 1416 	mls	r4, r7, r6, r1
 8011a26:	3430      	adds	r4, #48	@ 0x30
 8011a28:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011a2c:	460c      	mov	r4, r1
 8011a2e:	2c63      	cmp	r4, #99	@ 0x63
 8011a30:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8011a34:	4631      	mov	r1, r6
 8011a36:	dcf1      	bgt.n	8011a1c <__exponent+0x1c>
 8011a38:	3130      	adds	r1, #48	@ 0x30
 8011a3a:	1e94      	subs	r4, r2, #2
 8011a3c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011a40:	1c41      	adds	r1, r0, #1
 8011a42:	4623      	mov	r3, r4
 8011a44:	42ab      	cmp	r3, r5
 8011a46:	d30a      	bcc.n	8011a5e <__exponent+0x5e>
 8011a48:	f10d 0309 	add.w	r3, sp, #9
 8011a4c:	1a9b      	subs	r3, r3, r2
 8011a4e:	42ac      	cmp	r4, r5
 8011a50:	bf88      	it	hi
 8011a52:	2300      	movhi	r3, #0
 8011a54:	3302      	adds	r3, #2
 8011a56:	4403      	add	r3, r0
 8011a58:	1a18      	subs	r0, r3, r0
 8011a5a:	b003      	add	sp, #12
 8011a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a5e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011a62:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011a66:	e7ed      	b.n	8011a44 <__exponent+0x44>
 8011a68:	2330      	movs	r3, #48	@ 0x30
 8011a6a:	3130      	adds	r1, #48	@ 0x30
 8011a6c:	7083      	strb	r3, [r0, #2]
 8011a6e:	70c1      	strb	r1, [r0, #3]
 8011a70:	1d03      	adds	r3, r0, #4
 8011a72:	e7f1      	b.n	8011a58 <__exponent+0x58>
 8011a74:	0000      	movs	r0, r0
	...

08011a78 <_printf_float>:
 8011a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a7c:	b08d      	sub	sp, #52	@ 0x34
 8011a7e:	460c      	mov	r4, r1
 8011a80:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011a84:	4616      	mov	r6, r2
 8011a86:	461f      	mov	r7, r3
 8011a88:	4605      	mov	r5, r0
 8011a8a:	f000 fcd9 	bl	8012440 <_localeconv_r>
 8011a8e:	f8d0 b000 	ldr.w	fp, [r0]
 8011a92:	4658      	mov	r0, fp
 8011a94:	f7ee fc9c 	bl	80003d0 <strlen>
 8011a98:	2300      	movs	r3, #0
 8011a9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8011a9c:	f8d8 3000 	ldr.w	r3, [r8]
 8011aa0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011aa4:	6822      	ldr	r2, [r4, #0]
 8011aa6:	9005      	str	r0, [sp, #20]
 8011aa8:	3307      	adds	r3, #7
 8011aaa:	f023 0307 	bic.w	r3, r3, #7
 8011aae:	f103 0108 	add.w	r1, r3, #8
 8011ab2:	f8c8 1000 	str.w	r1, [r8]
 8011ab6:	ed93 0b00 	vldr	d0, [r3]
 8011aba:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8011d18 <_printf_float+0x2a0>
 8011abe:	eeb0 7bc0 	vabs.f64	d7, d0
 8011ac2:	eeb4 7b46 	vcmp.f64	d7, d6
 8011ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aca:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8011ace:	dd24      	ble.n	8011b1a <_printf_float+0xa2>
 8011ad0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ad8:	d502      	bpl.n	8011ae0 <_printf_float+0x68>
 8011ada:	232d      	movs	r3, #45	@ 0x2d
 8011adc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011ae0:	498f      	ldr	r1, [pc, #572]	@ (8011d20 <_printf_float+0x2a8>)
 8011ae2:	4b90      	ldr	r3, [pc, #576]	@ (8011d24 <_printf_float+0x2ac>)
 8011ae4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8011ae8:	bf94      	ite	ls
 8011aea:	4688      	movls	r8, r1
 8011aec:	4698      	movhi	r8, r3
 8011aee:	f022 0204 	bic.w	r2, r2, #4
 8011af2:	2303      	movs	r3, #3
 8011af4:	6123      	str	r3, [r4, #16]
 8011af6:	6022      	str	r2, [r4, #0]
 8011af8:	f04f 0a00 	mov.w	sl, #0
 8011afc:	9700      	str	r7, [sp, #0]
 8011afe:	4633      	mov	r3, r6
 8011b00:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011b02:	4621      	mov	r1, r4
 8011b04:	4628      	mov	r0, r5
 8011b06:	f000 f9d1 	bl	8011eac <_printf_common>
 8011b0a:	3001      	adds	r0, #1
 8011b0c:	f040 8089 	bne.w	8011c22 <_printf_float+0x1aa>
 8011b10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011b14:	b00d      	add	sp, #52	@ 0x34
 8011b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b1a:	eeb4 0b40 	vcmp.f64	d0, d0
 8011b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b22:	d709      	bvc.n	8011b38 <_printf_float+0xc0>
 8011b24:	ee10 3a90 	vmov	r3, s1
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	bfbc      	itt	lt
 8011b2c:	232d      	movlt	r3, #45	@ 0x2d
 8011b2e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011b32:	497d      	ldr	r1, [pc, #500]	@ (8011d28 <_printf_float+0x2b0>)
 8011b34:	4b7d      	ldr	r3, [pc, #500]	@ (8011d2c <_printf_float+0x2b4>)
 8011b36:	e7d5      	b.n	8011ae4 <_printf_float+0x6c>
 8011b38:	6863      	ldr	r3, [r4, #4]
 8011b3a:	1c59      	adds	r1, r3, #1
 8011b3c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8011b40:	d139      	bne.n	8011bb6 <_printf_float+0x13e>
 8011b42:	2306      	movs	r3, #6
 8011b44:	6063      	str	r3, [r4, #4]
 8011b46:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	6022      	str	r2, [r4, #0]
 8011b4e:	9303      	str	r3, [sp, #12]
 8011b50:	ab0a      	add	r3, sp, #40	@ 0x28
 8011b52:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8011b56:	ab09      	add	r3, sp, #36	@ 0x24
 8011b58:	9300      	str	r3, [sp, #0]
 8011b5a:	6861      	ldr	r1, [r4, #4]
 8011b5c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011b60:	4628      	mov	r0, r5
 8011b62:	f7ff fef9 	bl	8011958 <__cvt>
 8011b66:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011b6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011b6c:	4680      	mov	r8, r0
 8011b6e:	d129      	bne.n	8011bc4 <_printf_float+0x14c>
 8011b70:	1cc8      	adds	r0, r1, #3
 8011b72:	db02      	blt.n	8011b7a <_printf_float+0x102>
 8011b74:	6863      	ldr	r3, [r4, #4]
 8011b76:	4299      	cmp	r1, r3
 8011b78:	dd41      	ble.n	8011bfe <_printf_float+0x186>
 8011b7a:	f1a9 0902 	sub.w	r9, r9, #2
 8011b7e:	fa5f f989 	uxtb.w	r9, r9
 8011b82:	3901      	subs	r1, #1
 8011b84:	464a      	mov	r2, r9
 8011b86:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011b8a:	9109      	str	r1, [sp, #36]	@ 0x24
 8011b8c:	f7ff ff38 	bl	8011a00 <__exponent>
 8011b90:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011b92:	1813      	adds	r3, r2, r0
 8011b94:	2a01      	cmp	r2, #1
 8011b96:	4682      	mov	sl, r0
 8011b98:	6123      	str	r3, [r4, #16]
 8011b9a:	dc02      	bgt.n	8011ba2 <_printf_float+0x12a>
 8011b9c:	6822      	ldr	r2, [r4, #0]
 8011b9e:	07d2      	lsls	r2, r2, #31
 8011ba0:	d501      	bpl.n	8011ba6 <_printf_float+0x12e>
 8011ba2:	3301      	adds	r3, #1
 8011ba4:	6123      	str	r3, [r4, #16]
 8011ba6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d0a6      	beq.n	8011afc <_printf_float+0x84>
 8011bae:	232d      	movs	r3, #45	@ 0x2d
 8011bb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011bb4:	e7a2      	b.n	8011afc <_printf_float+0x84>
 8011bb6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011bba:	d1c4      	bne.n	8011b46 <_printf_float+0xce>
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d1c2      	bne.n	8011b46 <_printf_float+0xce>
 8011bc0:	2301      	movs	r3, #1
 8011bc2:	e7bf      	b.n	8011b44 <_printf_float+0xcc>
 8011bc4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8011bc8:	d9db      	bls.n	8011b82 <_printf_float+0x10a>
 8011bca:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8011bce:	d118      	bne.n	8011c02 <_printf_float+0x18a>
 8011bd0:	2900      	cmp	r1, #0
 8011bd2:	6863      	ldr	r3, [r4, #4]
 8011bd4:	dd0b      	ble.n	8011bee <_printf_float+0x176>
 8011bd6:	6121      	str	r1, [r4, #16]
 8011bd8:	b913      	cbnz	r3, 8011be0 <_printf_float+0x168>
 8011bda:	6822      	ldr	r2, [r4, #0]
 8011bdc:	07d0      	lsls	r0, r2, #31
 8011bde:	d502      	bpl.n	8011be6 <_printf_float+0x16e>
 8011be0:	3301      	adds	r3, #1
 8011be2:	440b      	add	r3, r1
 8011be4:	6123      	str	r3, [r4, #16]
 8011be6:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011be8:	f04f 0a00 	mov.w	sl, #0
 8011bec:	e7db      	b.n	8011ba6 <_printf_float+0x12e>
 8011bee:	b913      	cbnz	r3, 8011bf6 <_printf_float+0x17e>
 8011bf0:	6822      	ldr	r2, [r4, #0]
 8011bf2:	07d2      	lsls	r2, r2, #31
 8011bf4:	d501      	bpl.n	8011bfa <_printf_float+0x182>
 8011bf6:	3302      	adds	r3, #2
 8011bf8:	e7f4      	b.n	8011be4 <_printf_float+0x16c>
 8011bfa:	2301      	movs	r3, #1
 8011bfc:	e7f2      	b.n	8011be4 <_printf_float+0x16c>
 8011bfe:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8011c02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011c04:	4299      	cmp	r1, r3
 8011c06:	db05      	blt.n	8011c14 <_printf_float+0x19c>
 8011c08:	6823      	ldr	r3, [r4, #0]
 8011c0a:	6121      	str	r1, [r4, #16]
 8011c0c:	07d8      	lsls	r0, r3, #31
 8011c0e:	d5ea      	bpl.n	8011be6 <_printf_float+0x16e>
 8011c10:	1c4b      	adds	r3, r1, #1
 8011c12:	e7e7      	b.n	8011be4 <_printf_float+0x16c>
 8011c14:	2900      	cmp	r1, #0
 8011c16:	bfd4      	ite	le
 8011c18:	f1c1 0202 	rsble	r2, r1, #2
 8011c1c:	2201      	movgt	r2, #1
 8011c1e:	4413      	add	r3, r2
 8011c20:	e7e0      	b.n	8011be4 <_printf_float+0x16c>
 8011c22:	6823      	ldr	r3, [r4, #0]
 8011c24:	055a      	lsls	r2, r3, #21
 8011c26:	d407      	bmi.n	8011c38 <_printf_float+0x1c0>
 8011c28:	6923      	ldr	r3, [r4, #16]
 8011c2a:	4642      	mov	r2, r8
 8011c2c:	4631      	mov	r1, r6
 8011c2e:	4628      	mov	r0, r5
 8011c30:	47b8      	blx	r7
 8011c32:	3001      	adds	r0, #1
 8011c34:	d12a      	bne.n	8011c8c <_printf_float+0x214>
 8011c36:	e76b      	b.n	8011b10 <_printf_float+0x98>
 8011c38:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8011c3c:	f240 80e0 	bls.w	8011e00 <_printf_float+0x388>
 8011c40:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8011c44:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c4c:	d133      	bne.n	8011cb6 <_printf_float+0x23e>
 8011c4e:	4a38      	ldr	r2, [pc, #224]	@ (8011d30 <_printf_float+0x2b8>)
 8011c50:	2301      	movs	r3, #1
 8011c52:	4631      	mov	r1, r6
 8011c54:	4628      	mov	r0, r5
 8011c56:	47b8      	blx	r7
 8011c58:	3001      	adds	r0, #1
 8011c5a:	f43f af59 	beq.w	8011b10 <_printf_float+0x98>
 8011c5e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011c62:	4543      	cmp	r3, r8
 8011c64:	db02      	blt.n	8011c6c <_printf_float+0x1f4>
 8011c66:	6823      	ldr	r3, [r4, #0]
 8011c68:	07d8      	lsls	r0, r3, #31
 8011c6a:	d50f      	bpl.n	8011c8c <_printf_float+0x214>
 8011c6c:	9b05      	ldr	r3, [sp, #20]
 8011c6e:	465a      	mov	r2, fp
 8011c70:	4631      	mov	r1, r6
 8011c72:	4628      	mov	r0, r5
 8011c74:	47b8      	blx	r7
 8011c76:	3001      	adds	r0, #1
 8011c78:	f43f af4a 	beq.w	8011b10 <_printf_float+0x98>
 8011c7c:	f04f 0900 	mov.w	r9, #0
 8011c80:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8011c84:	f104 0a1a 	add.w	sl, r4, #26
 8011c88:	45c8      	cmp	r8, r9
 8011c8a:	dc09      	bgt.n	8011ca0 <_printf_float+0x228>
 8011c8c:	6823      	ldr	r3, [r4, #0]
 8011c8e:	079b      	lsls	r3, r3, #30
 8011c90:	f100 8107 	bmi.w	8011ea2 <_printf_float+0x42a>
 8011c94:	68e0      	ldr	r0, [r4, #12]
 8011c96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011c98:	4298      	cmp	r0, r3
 8011c9a:	bfb8      	it	lt
 8011c9c:	4618      	movlt	r0, r3
 8011c9e:	e739      	b.n	8011b14 <_printf_float+0x9c>
 8011ca0:	2301      	movs	r3, #1
 8011ca2:	4652      	mov	r2, sl
 8011ca4:	4631      	mov	r1, r6
 8011ca6:	4628      	mov	r0, r5
 8011ca8:	47b8      	blx	r7
 8011caa:	3001      	adds	r0, #1
 8011cac:	f43f af30 	beq.w	8011b10 <_printf_float+0x98>
 8011cb0:	f109 0901 	add.w	r9, r9, #1
 8011cb4:	e7e8      	b.n	8011c88 <_printf_float+0x210>
 8011cb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	dc3b      	bgt.n	8011d34 <_printf_float+0x2bc>
 8011cbc:	4a1c      	ldr	r2, [pc, #112]	@ (8011d30 <_printf_float+0x2b8>)
 8011cbe:	2301      	movs	r3, #1
 8011cc0:	4631      	mov	r1, r6
 8011cc2:	4628      	mov	r0, r5
 8011cc4:	47b8      	blx	r7
 8011cc6:	3001      	adds	r0, #1
 8011cc8:	f43f af22 	beq.w	8011b10 <_printf_float+0x98>
 8011ccc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011cd0:	ea59 0303 	orrs.w	r3, r9, r3
 8011cd4:	d102      	bne.n	8011cdc <_printf_float+0x264>
 8011cd6:	6823      	ldr	r3, [r4, #0]
 8011cd8:	07d9      	lsls	r1, r3, #31
 8011cda:	d5d7      	bpl.n	8011c8c <_printf_float+0x214>
 8011cdc:	9b05      	ldr	r3, [sp, #20]
 8011cde:	465a      	mov	r2, fp
 8011ce0:	4631      	mov	r1, r6
 8011ce2:	4628      	mov	r0, r5
 8011ce4:	47b8      	blx	r7
 8011ce6:	3001      	adds	r0, #1
 8011ce8:	f43f af12 	beq.w	8011b10 <_printf_float+0x98>
 8011cec:	f04f 0a00 	mov.w	sl, #0
 8011cf0:	f104 0b1a 	add.w	fp, r4, #26
 8011cf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011cf6:	425b      	negs	r3, r3
 8011cf8:	4553      	cmp	r3, sl
 8011cfa:	dc01      	bgt.n	8011d00 <_printf_float+0x288>
 8011cfc:	464b      	mov	r3, r9
 8011cfe:	e794      	b.n	8011c2a <_printf_float+0x1b2>
 8011d00:	2301      	movs	r3, #1
 8011d02:	465a      	mov	r2, fp
 8011d04:	4631      	mov	r1, r6
 8011d06:	4628      	mov	r0, r5
 8011d08:	47b8      	blx	r7
 8011d0a:	3001      	adds	r0, #1
 8011d0c:	f43f af00 	beq.w	8011b10 <_printf_float+0x98>
 8011d10:	f10a 0a01 	add.w	sl, sl, #1
 8011d14:	e7ee      	b.n	8011cf4 <_printf_float+0x27c>
 8011d16:	bf00      	nop
 8011d18:	ffffffff 	.word	0xffffffff
 8011d1c:	7fefffff 	.word	0x7fefffff
 8011d20:	08014fd6 	.word	0x08014fd6
 8011d24:	08014fda 	.word	0x08014fda
 8011d28:	08014fde 	.word	0x08014fde
 8011d2c:	08014fe2 	.word	0x08014fe2
 8011d30:	08014fe6 	.word	0x08014fe6
 8011d34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011d36:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011d3a:	4553      	cmp	r3, sl
 8011d3c:	bfa8      	it	ge
 8011d3e:	4653      	movge	r3, sl
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	4699      	mov	r9, r3
 8011d44:	dc37      	bgt.n	8011db6 <_printf_float+0x33e>
 8011d46:	2300      	movs	r3, #0
 8011d48:	9307      	str	r3, [sp, #28]
 8011d4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011d4e:	f104 021a 	add.w	r2, r4, #26
 8011d52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011d54:	9907      	ldr	r1, [sp, #28]
 8011d56:	9306      	str	r3, [sp, #24]
 8011d58:	eba3 0309 	sub.w	r3, r3, r9
 8011d5c:	428b      	cmp	r3, r1
 8011d5e:	dc31      	bgt.n	8011dc4 <_printf_float+0x34c>
 8011d60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d62:	459a      	cmp	sl, r3
 8011d64:	dc3b      	bgt.n	8011dde <_printf_float+0x366>
 8011d66:	6823      	ldr	r3, [r4, #0]
 8011d68:	07da      	lsls	r2, r3, #31
 8011d6a:	d438      	bmi.n	8011dde <_printf_float+0x366>
 8011d6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d6e:	ebaa 0903 	sub.w	r9, sl, r3
 8011d72:	9b06      	ldr	r3, [sp, #24]
 8011d74:	ebaa 0303 	sub.w	r3, sl, r3
 8011d78:	4599      	cmp	r9, r3
 8011d7a:	bfa8      	it	ge
 8011d7c:	4699      	movge	r9, r3
 8011d7e:	f1b9 0f00 	cmp.w	r9, #0
 8011d82:	dc34      	bgt.n	8011dee <_printf_float+0x376>
 8011d84:	f04f 0800 	mov.w	r8, #0
 8011d88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011d8c:	f104 0b1a 	add.w	fp, r4, #26
 8011d90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d92:	ebaa 0303 	sub.w	r3, sl, r3
 8011d96:	eba3 0309 	sub.w	r3, r3, r9
 8011d9a:	4543      	cmp	r3, r8
 8011d9c:	f77f af76 	ble.w	8011c8c <_printf_float+0x214>
 8011da0:	2301      	movs	r3, #1
 8011da2:	465a      	mov	r2, fp
 8011da4:	4631      	mov	r1, r6
 8011da6:	4628      	mov	r0, r5
 8011da8:	47b8      	blx	r7
 8011daa:	3001      	adds	r0, #1
 8011dac:	f43f aeb0 	beq.w	8011b10 <_printf_float+0x98>
 8011db0:	f108 0801 	add.w	r8, r8, #1
 8011db4:	e7ec      	b.n	8011d90 <_printf_float+0x318>
 8011db6:	4642      	mov	r2, r8
 8011db8:	4631      	mov	r1, r6
 8011dba:	4628      	mov	r0, r5
 8011dbc:	47b8      	blx	r7
 8011dbe:	3001      	adds	r0, #1
 8011dc0:	d1c1      	bne.n	8011d46 <_printf_float+0x2ce>
 8011dc2:	e6a5      	b.n	8011b10 <_printf_float+0x98>
 8011dc4:	2301      	movs	r3, #1
 8011dc6:	4631      	mov	r1, r6
 8011dc8:	4628      	mov	r0, r5
 8011dca:	9206      	str	r2, [sp, #24]
 8011dcc:	47b8      	blx	r7
 8011dce:	3001      	adds	r0, #1
 8011dd0:	f43f ae9e 	beq.w	8011b10 <_printf_float+0x98>
 8011dd4:	9b07      	ldr	r3, [sp, #28]
 8011dd6:	9a06      	ldr	r2, [sp, #24]
 8011dd8:	3301      	adds	r3, #1
 8011dda:	9307      	str	r3, [sp, #28]
 8011ddc:	e7b9      	b.n	8011d52 <_printf_float+0x2da>
 8011dde:	9b05      	ldr	r3, [sp, #20]
 8011de0:	465a      	mov	r2, fp
 8011de2:	4631      	mov	r1, r6
 8011de4:	4628      	mov	r0, r5
 8011de6:	47b8      	blx	r7
 8011de8:	3001      	adds	r0, #1
 8011dea:	d1bf      	bne.n	8011d6c <_printf_float+0x2f4>
 8011dec:	e690      	b.n	8011b10 <_printf_float+0x98>
 8011dee:	9a06      	ldr	r2, [sp, #24]
 8011df0:	464b      	mov	r3, r9
 8011df2:	4442      	add	r2, r8
 8011df4:	4631      	mov	r1, r6
 8011df6:	4628      	mov	r0, r5
 8011df8:	47b8      	blx	r7
 8011dfa:	3001      	adds	r0, #1
 8011dfc:	d1c2      	bne.n	8011d84 <_printf_float+0x30c>
 8011dfe:	e687      	b.n	8011b10 <_printf_float+0x98>
 8011e00:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8011e04:	f1b9 0f01 	cmp.w	r9, #1
 8011e08:	dc01      	bgt.n	8011e0e <_printf_float+0x396>
 8011e0a:	07db      	lsls	r3, r3, #31
 8011e0c:	d536      	bpl.n	8011e7c <_printf_float+0x404>
 8011e0e:	2301      	movs	r3, #1
 8011e10:	4642      	mov	r2, r8
 8011e12:	4631      	mov	r1, r6
 8011e14:	4628      	mov	r0, r5
 8011e16:	47b8      	blx	r7
 8011e18:	3001      	adds	r0, #1
 8011e1a:	f43f ae79 	beq.w	8011b10 <_printf_float+0x98>
 8011e1e:	9b05      	ldr	r3, [sp, #20]
 8011e20:	465a      	mov	r2, fp
 8011e22:	4631      	mov	r1, r6
 8011e24:	4628      	mov	r0, r5
 8011e26:	47b8      	blx	r7
 8011e28:	3001      	adds	r0, #1
 8011e2a:	f43f ae71 	beq.w	8011b10 <_printf_float+0x98>
 8011e2e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8011e32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e3a:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8011e3e:	d018      	beq.n	8011e72 <_printf_float+0x3fa>
 8011e40:	464b      	mov	r3, r9
 8011e42:	f108 0201 	add.w	r2, r8, #1
 8011e46:	4631      	mov	r1, r6
 8011e48:	4628      	mov	r0, r5
 8011e4a:	47b8      	blx	r7
 8011e4c:	3001      	adds	r0, #1
 8011e4e:	d10c      	bne.n	8011e6a <_printf_float+0x3f2>
 8011e50:	e65e      	b.n	8011b10 <_printf_float+0x98>
 8011e52:	2301      	movs	r3, #1
 8011e54:	465a      	mov	r2, fp
 8011e56:	4631      	mov	r1, r6
 8011e58:	4628      	mov	r0, r5
 8011e5a:	47b8      	blx	r7
 8011e5c:	3001      	adds	r0, #1
 8011e5e:	f43f ae57 	beq.w	8011b10 <_printf_float+0x98>
 8011e62:	f108 0801 	add.w	r8, r8, #1
 8011e66:	45c8      	cmp	r8, r9
 8011e68:	dbf3      	blt.n	8011e52 <_printf_float+0x3da>
 8011e6a:	4653      	mov	r3, sl
 8011e6c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011e70:	e6dc      	b.n	8011c2c <_printf_float+0x1b4>
 8011e72:	f04f 0800 	mov.w	r8, #0
 8011e76:	f104 0b1a 	add.w	fp, r4, #26
 8011e7a:	e7f4      	b.n	8011e66 <_printf_float+0x3ee>
 8011e7c:	2301      	movs	r3, #1
 8011e7e:	4642      	mov	r2, r8
 8011e80:	e7e1      	b.n	8011e46 <_printf_float+0x3ce>
 8011e82:	2301      	movs	r3, #1
 8011e84:	464a      	mov	r2, r9
 8011e86:	4631      	mov	r1, r6
 8011e88:	4628      	mov	r0, r5
 8011e8a:	47b8      	blx	r7
 8011e8c:	3001      	adds	r0, #1
 8011e8e:	f43f ae3f 	beq.w	8011b10 <_printf_float+0x98>
 8011e92:	f108 0801 	add.w	r8, r8, #1
 8011e96:	68e3      	ldr	r3, [r4, #12]
 8011e98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011e9a:	1a5b      	subs	r3, r3, r1
 8011e9c:	4543      	cmp	r3, r8
 8011e9e:	dcf0      	bgt.n	8011e82 <_printf_float+0x40a>
 8011ea0:	e6f8      	b.n	8011c94 <_printf_float+0x21c>
 8011ea2:	f04f 0800 	mov.w	r8, #0
 8011ea6:	f104 0919 	add.w	r9, r4, #25
 8011eaa:	e7f4      	b.n	8011e96 <_printf_float+0x41e>

08011eac <_printf_common>:
 8011eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011eb0:	4616      	mov	r6, r2
 8011eb2:	4698      	mov	r8, r3
 8011eb4:	688a      	ldr	r2, [r1, #8]
 8011eb6:	690b      	ldr	r3, [r1, #16]
 8011eb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011ebc:	4293      	cmp	r3, r2
 8011ebe:	bfb8      	it	lt
 8011ec0:	4613      	movlt	r3, r2
 8011ec2:	6033      	str	r3, [r6, #0]
 8011ec4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011ec8:	4607      	mov	r7, r0
 8011eca:	460c      	mov	r4, r1
 8011ecc:	b10a      	cbz	r2, 8011ed2 <_printf_common+0x26>
 8011ece:	3301      	adds	r3, #1
 8011ed0:	6033      	str	r3, [r6, #0]
 8011ed2:	6823      	ldr	r3, [r4, #0]
 8011ed4:	0699      	lsls	r1, r3, #26
 8011ed6:	bf42      	ittt	mi
 8011ed8:	6833      	ldrmi	r3, [r6, #0]
 8011eda:	3302      	addmi	r3, #2
 8011edc:	6033      	strmi	r3, [r6, #0]
 8011ede:	6825      	ldr	r5, [r4, #0]
 8011ee0:	f015 0506 	ands.w	r5, r5, #6
 8011ee4:	d106      	bne.n	8011ef4 <_printf_common+0x48>
 8011ee6:	f104 0a19 	add.w	sl, r4, #25
 8011eea:	68e3      	ldr	r3, [r4, #12]
 8011eec:	6832      	ldr	r2, [r6, #0]
 8011eee:	1a9b      	subs	r3, r3, r2
 8011ef0:	42ab      	cmp	r3, r5
 8011ef2:	dc26      	bgt.n	8011f42 <_printf_common+0x96>
 8011ef4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011ef8:	6822      	ldr	r2, [r4, #0]
 8011efa:	3b00      	subs	r3, #0
 8011efc:	bf18      	it	ne
 8011efe:	2301      	movne	r3, #1
 8011f00:	0692      	lsls	r2, r2, #26
 8011f02:	d42b      	bmi.n	8011f5c <_printf_common+0xb0>
 8011f04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011f08:	4641      	mov	r1, r8
 8011f0a:	4638      	mov	r0, r7
 8011f0c:	47c8      	blx	r9
 8011f0e:	3001      	adds	r0, #1
 8011f10:	d01e      	beq.n	8011f50 <_printf_common+0xa4>
 8011f12:	6823      	ldr	r3, [r4, #0]
 8011f14:	6922      	ldr	r2, [r4, #16]
 8011f16:	f003 0306 	and.w	r3, r3, #6
 8011f1a:	2b04      	cmp	r3, #4
 8011f1c:	bf02      	ittt	eq
 8011f1e:	68e5      	ldreq	r5, [r4, #12]
 8011f20:	6833      	ldreq	r3, [r6, #0]
 8011f22:	1aed      	subeq	r5, r5, r3
 8011f24:	68a3      	ldr	r3, [r4, #8]
 8011f26:	bf0c      	ite	eq
 8011f28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011f2c:	2500      	movne	r5, #0
 8011f2e:	4293      	cmp	r3, r2
 8011f30:	bfc4      	itt	gt
 8011f32:	1a9b      	subgt	r3, r3, r2
 8011f34:	18ed      	addgt	r5, r5, r3
 8011f36:	2600      	movs	r6, #0
 8011f38:	341a      	adds	r4, #26
 8011f3a:	42b5      	cmp	r5, r6
 8011f3c:	d11a      	bne.n	8011f74 <_printf_common+0xc8>
 8011f3e:	2000      	movs	r0, #0
 8011f40:	e008      	b.n	8011f54 <_printf_common+0xa8>
 8011f42:	2301      	movs	r3, #1
 8011f44:	4652      	mov	r2, sl
 8011f46:	4641      	mov	r1, r8
 8011f48:	4638      	mov	r0, r7
 8011f4a:	47c8      	blx	r9
 8011f4c:	3001      	adds	r0, #1
 8011f4e:	d103      	bne.n	8011f58 <_printf_common+0xac>
 8011f50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f58:	3501      	adds	r5, #1
 8011f5a:	e7c6      	b.n	8011eea <_printf_common+0x3e>
 8011f5c:	18e1      	adds	r1, r4, r3
 8011f5e:	1c5a      	adds	r2, r3, #1
 8011f60:	2030      	movs	r0, #48	@ 0x30
 8011f62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011f66:	4422      	add	r2, r4
 8011f68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011f6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011f70:	3302      	adds	r3, #2
 8011f72:	e7c7      	b.n	8011f04 <_printf_common+0x58>
 8011f74:	2301      	movs	r3, #1
 8011f76:	4622      	mov	r2, r4
 8011f78:	4641      	mov	r1, r8
 8011f7a:	4638      	mov	r0, r7
 8011f7c:	47c8      	blx	r9
 8011f7e:	3001      	adds	r0, #1
 8011f80:	d0e6      	beq.n	8011f50 <_printf_common+0xa4>
 8011f82:	3601      	adds	r6, #1
 8011f84:	e7d9      	b.n	8011f3a <_printf_common+0x8e>
	...

08011f88 <_printf_i>:
 8011f88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011f8c:	7e0f      	ldrb	r7, [r1, #24]
 8011f8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011f90:	2f78      	cmp	r7, #120	@ 0x78
 8011f92:	4691      	mov	r9, r2
 8011f94:	4680      	mov	r8, r0
 8011f96:	460c      	mov	r4, r1
 8011f98:	469a      	mov	sl, r3
 8011f9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011f9e:	d807      	bhi.n	8011fb0 <_printf_i+0x28>
 8011fa0:	2f62      	cmp	r7, #98	@ 0x62
 8011fa2:	d80a      	bhi.n	8011fba <_printf_i+0x32>
 8011fa4:	2f00      	cmp	r7, #0
 8011fa6:	f000 80d2 	beq.w	801214e <_printf_i+0x1c6>
 8011faa:	2f58      	cmp	r7, #88	@ 0x58
 8011fac:	f000 80b9 	beq.w	8012122 <_printf_i+0x19a>
 8011fb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011fb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011fb8:	e03a      	b.n	8012030 <_printf_i+0xa8>
 8011fba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011fbe:	2b15      	cmp	r3, #21
 8011fc0:	d8f6      	bhi.n	8011fb0 <_printf_i+0x28>
 8011fc2:	a101      	add	r1, pc, #4	@ (adr r1, 8011fc8 <_printf_i+0x40>)
 8011fc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011fc8:	08012021 	.word	0x08012021
 8011fcc:	08012035 	.word	0x08012035
 8011fd0:	08011fb1 	.word	0x08011fb1
 8011fd4:	08011fb1 	.word	0x08011fb1
 8011fd8:	08011fb1 	.word	0x08011fb1
 8011fdc:	08011fb1 	.word	0x08011fb1
 8011fe0:	08012035 	.word	0x08012035
 8011fe4:	08011fb1 	.word	0x08011fb1
 8011fe8:	08011fb1 	.word	0x08011fb1
 8011fec:	08011fb1 	.word	0x08011fb1
 8011ff0:	08011fb1 	.word	0x08011fb1
 8011ff4:	08012135 	.word	0x08012135
 8011ff8:	0801205f 	.word	0x0801205f
 8011ffc:	080120ef 	.word	0x080120ef
 8012000:	08011fb1 	.word	0x08011fb1
 8012004:	08011fb1 	.word	0x08011fb1
 8012008:	08012157 	.word	0x08012157
 801200c:	08011fb1 	.word	0x08011fb1
 8012010:	0801205f 	.word	0x0801205f
 8012014:	08011fb1 	.word	0x08011fb1
 8012018:	08011fb1 	.word	0x08011fb1
 801201c:	080120f7 	.word	0x080120f7
 8012020:	6833      	ldr	r3, [r6, #0]
 8012022:	1d1a      	adds	r2, r3, #4
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	6032      	str	r2, [r6, #0]
 8012028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801202c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012030:	2301      	movs	r3, #1
 8012032:	e09d      	b.n	8012170 <_printf_i+0x1e8>
 8012034:	6833      	ldr	r3, [r6, #0]
 8012036:	6820      	ldr	r0, [r4, #0]
 8012038:	1d19      	adds	r1, r3, #4
 801203a:	6031      	str	r1, [r6, #0]
 801203c:	0606      	lsls	r6, r0, #24
 801203e:	d501      	bpl.n	8012044 <_printf_i+0xbc>
 8012040:	681d      	ldr	r5, [r3, #0]
 8012042:	e003      	b.n	801204c <_printf_i+0xc4>
 8012044:	0645      	lsls	r5, r0, #25
 8012046:	d5fb      	bpl.n	8012040 <_printf_i+0xb8>
 8012048:	f9b3 5000 	ldrsh.w	r5, [r3]
 801204c:	2d00      	cmp	r5, #0
 801204e:	da03      	bge.n	8012058 <_printf_i+0xd0>
 8012050:	232d      	movs	r3, #45	@ 0x2d
 8012052:	426d      	negs	r5, r5
 8012054:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012058:	4859      	ldr	r0, [pc, #356]	@ (80121c0 <_printf_i+0x238>)
 801205a:	230a      	movs	r3, #10
 801205c:	e011      	b.n	8012082 <_printf_i+0xfa>
 801205e:	6821      	ldr	r1, [r4, #0]
 8012060:	6833      	ldr	r3, [r6, #0]
 8012062:	0608      	lsls	r0, r1, #24
 8012064:	f853 5b04 	ldr.w	r5, [r3], #4
 8012068:	d402      	bmi.n	8012070 <_printf_i+0xe8>
 801206a:	0649      	lsls	r1, r1, #25
 801206c:	bf48      	it	mi
 801206e:	b2ad      	uxthmi	r5, r5
 8012070:	2f6f      	cmp	r7, #111	@ 0x6f
 8012072:	4853      	ldr	r0, [pc, #332]	@ (80121c0 <_printf_i+0x238>)
 8012074:	6033      	str	r3, [r6, #0]
 8012076:	bf14      	ite	ne
 8012078:	230a      	movne	r3, #10
 801207a:	2308      	moveq	r3, #8
 801207c:	2100      	movs	r1, #0
 801207e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012082:	6866      	ldr	r6, [r4, #4]
 8012084:	60a6      	str	r6, [r4, #8]
 8012086:	2e00      	cmp	r6, #0
 8012088:	bfa2      	ittt	ge
 801208a:	6821      	ldrge	r1, [r4, #0]
 801208c:	f021 0104 	bicge.w	r1, r1, #4
 8012090:	6021      	strge	r1, [r4, #0]
 8012092:	b90d      	cbnz	r5, 8012098 <_printf_i+0x110>
 8012094:	2e00      	cmp	r6, #0
 8012096:	d04b      	beq.n	8012130 <_printf_i+0x1a8>
 8012098:	4616      	mov	r6, r2
 801209a:	fbb5 f1f3 	udiv	r1, r5, r3
 801209e:	fb03 5711 	mls	r7, r3, r1, r5
 80120a2:	5dc7      	ldrb	r7, [r0, r7]
 80120a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80120a8:	462f      	mov	r7, r5
 80120aa:	42bb      	cmp	r3, r7
 80120ac:	460d      	mov	r5, r1
 80120ae:	d9f4      	bls.n	801209a <_printf_i+0x112>
 80120b0:	2b08      	cmp	r3, #8
 80120b2:	d10b      	bne.n	80120cc <_printf_i+0x144>
 80120b4:	6823      	ldr	r3, [r4, #0]
 80120b6:	07df      	lsls	r7, r3, #31
 80120b8:	d508      	bpl.n	80120cc <_printf_i+0x144>
 80120ba:	6923      	ldr	r3, [r4, #16]
 80120bc:	6861      	ldr	r1, [r4, #4]
 80120be:	4299      	cmp	r1, r3
 80120c0:	bfde      	ittt	le
 80120c2:	2330      	movle	r3, #48	@ 0x30
 80120c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80120c8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80120cc:	1b92      	subs	r2, r2, r6
 80120ce:	6122      	str	r2, [r4, #16]
 80120d0:	f8cd a000 	str.w	sl, [sp]
 80120d4:	464b      	mov	r3, r9
 80120d6:	aa03      	add	r2, sp, #12
 80120d8:	4621      	mov	r1, r4
 80120da:	4640      	mov	r0, r8
 80120dc:	f7ff fee6 	bl	8011eac <_printf_common>
 80120e0:	3001      	adds	r0, #1
 80120e2:	d14a      	bne.n	801217a <_printf_i+0x1f2>
 80120e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80120e8:	b004      	add	sp, #16
 80120ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120ee:	6823      	ldr	r3, [r4, #0]
 80120f0:	f043 0320 	orr.w	r3, r3, #32
 80120f4:	6023      	str	r3, [r4, #0]
 80120f6:	4833      	ldr	r0, [pc, #204]	@ (80121c4 <_printf_i+0x23c>)
 80120f8:	2778      	movs	r7, #120	@ 0x78
 80120fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80120fe:	6823      	ldr	r3, [r4, #0]
 8012100:	6831      	ldr	r1, [r6, #0]
 8012102:	061f      	lsls	r7, r3, #24
 8012104:	f851 5b04 	ldr.w	r5, [r1], #4
 8012108:	d402      	bmi.n	8012110 <_printf_i+0x188>
 801210a:	065f      	lsls	r7, r3, #25
 801210c:	bf48      	it	mi
 801210e:	b2ad      	uxthmi	r5, r5
 8012110:	6031      	str	r1, [r6, #0]
 8012112:	07d9      	lsls	r1, r3, #31
 8012114:	bf44      	itt	mi
 8012116:	f043 0320 	orrmi.w	r3, r3, #32
 801211a:	6023      	strmi	r3, [r4, #0]
 801211c:	b11d      	cbz	r5, 8012126 <_printf_i+0x19e>
 801211e:	2310      	movs	r3, #16
 8012120:	e7ac      	b.n	801207c <_printf_i+0xf4>
 8012122:	4827      	ldr	r0, [pc, #156]	@ (80121c0 <_printf_i+0x238>)
 8012124:	e7e9      	b.n	80120fa <_printf_i+0x172>
 8012126:	6823      	ldr	r3, [r4, #0]
 8012128:	f023 0320 	bic.w	r3, r3, #32
 801212c:	6023      	str	r3, [r4, #0]
 801212e:	e7f6      	b.n	801211e <_printf_i+0x196>
 8012130:	4616      	mov	r6, r2
 8012132:	e7bd      	b.n	80120b0 <_printf_i+0x128>
 8012134:	6833      	ldr	r3, [r6, #0]
 8012136:	6825      	ldr	r5, [r4, #0]
 8012138:	6961      	ldr	r1, [r4, #20]
 801213a:	1d18      	adds	r0, r3, #4
 801213c:	6030      	str	r0, [r6, #0]
 801213e:	062e      	lsls	r6, r5, #24
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	d501      	bpl.n	8012148 <_printf_i+0x1c0>
 8012144:	6019      	str	r1, [r3, #0]
 8012146:	e002      	b.n	801214e <_printf_i+0x1c6>
 8012148:	0668      	lsls	r0, r5, #25
 801214a:	d5fb      	bpl.n	8012144 <_printf_i+0x1bc>
 801214c:	8019      	strh	r1, [r3, #0]
 801214e:	2300      	movs	r3, #0
 8012150:	6123      	str	r3, [r4, #16]
 8012152:	4616      	mov	r6, r2
 8012154:	e7bc      	b.n	80120d0 <_printf_i+0x148>
 8012156:	6833      	ldr	r3, [r6, #0]
 8012158:	1d1a      	adds	r2, r3, #4
 801215a:	6032      	str	r2, [r6, #0]
 801215c:	681e      	ldr	r6, [r3, #0]
 801215e:	6862      	ldr	r2, [r4, #4]
 8012160:	2100      	movs	r1, #0
 8012162:	4630      	mov	r0, r6
 8012164:	f7ee f8e4 	bl	8000330 <memchr>
 8012168:	b108      	cbz	r0, 801216e <_printf_i+0x1e6>
 801216a:	1b80      	subs	r0, r0, r6
 801216c:	6060      	str	r0, [r4, #4]
 801216e:	6863      	ldr	r3, [r4, #4]
 8012170:	6123      	str	r3, [r4, #16]
 8012172:	2300      	movs	r3, #0
 8012174:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012178:	e7aa      	b.n	80120d0 <_printf_i+0x148>
 801217a:	6923      	ldr	r3, [r4, #16]
 801217c:	4632      	mov	r2, r6
 801217e:	4649      	mov	r1, r9
 8012180:	4640      	mov	r0, r8
 8012182:	47d0      	blx	sl
 8012184:	3001      	adds	r0, #1
 8012186:	d0ad      	beq.n	80120e4 <_printf_i+0x15c>
 8012188:	6823      	ldr	r3, [r4, #0]
 801218a:	079b      	lsls	r3, r3, #30
 801218c:	d413      	bmi.n	80121b6 <_printf_i+0x22e>
 801218e:	68e0      	ldr	r0, [r4, #12]
 8012190:	9b03      	ldr	r3, [sp, #12]
 8012192:	4298      	cmp	r0, r3
 8012194:	bfb8      	it	lt
 8012196:	4618      	movlt	r0, r3
 8012198:	e7a6      	b.n	80120e8 <_printf_i+0x160>
 801219a:	2301      	movs	r3, #1
 801219c:	4632      	mov	r2, r6
 801219e:	4649      	mov	r1, r9
 80121a0:	4640      	mov	r0, r8
 80121a2:	47d0      	blx	sl
 80121a4:	3001      	adds	r0, #1
 80121a6:	d09d      	beq.n	80120e4 <_printf_i+0x15c>
 80121a8:	3501      	adds	r5, #1
 80121aa:	68e3      	ldr	r3, [r4, #12]
 80121ac:	9903      	ldr	r1, [sp, #12]
 80121ae:	1a5b      	subs	r3, r3, r1
 80121b0:	42ab      	cmp	r3, r5
 80121b2:	dcf2      	bgt.n	801219a <_printf_i+0x212>
 80121b4:	e7eb      	b.n	801218e <_printf_i+0x206>
 80121b6:	2500      	movs	r5, #0
 80121b8:	f104 0619 	add.w	r6, r4, #25
 80121bc:	e7f5      	b.n	80121aa <_printf_i+0x222>
 80121be:	bf00      	nop
 80121c0:	08014fe8 	.word	0x08014fe8
 80121c4:	08014ff9 	.word	0x08014ff9

080121c8 <std>:
 80121c8:	2300      	movs	r3, #0
 80121ca:	b510      	push	{r4, lr}
 80121cc:	4604      	mov	r4, r0
 80121ce:	e9c0 3300 	strd	r3, r3, [r0]
 80121d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80121d6:	6083      	str	r3, [r0, #8]
 80121d8:	8181      	strh	r1, [r0, #12]
 80121da:	6643      	str	r3, [r0, #100]	@ 0x64
 80121dc:	81c2      	strh	r2, [r0, #14]
 80121de:	6183      	str	r3, [r0, #24]
 80121e0:	4619      	mov	r1, r3
 80121e2:	2208      	movs	r2, #8
 80121e4:	305c      	adds	r0, #92	@ 0x5c
 80121e6:	f000 f914 	bl	8012412 <memset>
 80121ea:	4b0d      	ldr	r3, [pc, #52]	@ (8012220 <std+0x58>)
 80121ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80121ee:	4b0d      	ldr	r3, [pc, #52]	@ (8012224 <std+0x5c>)
 80121f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80121f2:	4b0d      	ldr	r3, [pc, #52]	@ (8012228 <std+0x60>)
 80121f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80121f6:	4b0d      	ldr	r3, [pc, #52]	@ (801222c <std+0x64>)
 80121f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80121fa:	4b0d      	ldr	r3, [pc, #52]	@ (8012230 <std+0x68>)
 80121fc:	6224      	str	r4, [r4, #32]
 80121fe:	429c      	cmp	r4, r3
 8012200:	d006      	beq.n	8012210 <std+0x48>
 8012202:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012206:	4294      	cmp	r4, r2
 8012208:	d002      	beq.n	8012210 <std+0x48>
 801220a:	33d0      	adds	r3, #208	@ 0xd0
 801220c:	429c      	cmp	r4, r3
 801220e:	d105      	bne.n	801221c <std+0x54>
 8012210:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012218:	f000 b986 	b.w	8012528 <__retarget_lock_init_recursive>
 801221c:	bd10      	pop	{r4, pc}
 801221e:	bf00      	nop
 8012220:	0801238d 	.word	0x0801238d
 8012224:	080123af 	.word	0x080123af
 8012228:	080123e7 	.word	0x080123e7
 801222c:	0801240b 	.word	0x0801240b
 8012230:	240010c4 	.word	0x240010c4

08012234 <stdio_exit_handler>:
 8012234:	4a02      	ldr	r2, [pc, #8]	@ (8012240 <stdio_exit_handler+0xc>)
 8012236:	4903      	ldr	r1, [pc, #12]	@ (8012244 <stdio_exit_handler+0x10>)
 8012238:	4803      	ldr	r0, [pc, #12]	@ (8012248 <stdio_exit_handler+0x14>)
 801223a:	f000 b869 	b.w	8012310 <_fwalk_sglue>
 801223e:	bf00      	nop
 8012240:	24000048 	.word	0x24000048
 8012244:	08013db9 	.word	0x08013db9
 8012248:	24000058 	.word	0x24000058

0801224c <cleanup_stdio>:
 801224c:	6841      	ldr	r1, [r0, #4]
 801224e:	4b0c      	ldr	r3, [pc, #48]	@ (8012280 <cleanup_stdio+0x34>)
 8012250:	4299      	cmp	r1, r3
 8012252:	b510      	push	{r4, lr}
 8012254:	4604      	mov	r4, r0
 8012256:	d001      	beq.n	801225c <cleanup_stdio+0x10>
 8012258:	f001 fdae 	bl	8013db8 <_fflush_r>
 801225c:	68a1      	ldr	r1, [r4, #8]
 801225e:	4b09      	ldr	r3, [pc, #36]	@ (8012284 <cleanup_stdio+0x38>)
 8012260:	4299      	cmp	r1, r3
 8012262:	d002      	beq.n	801226a <cleanup_stdio+0x1e>
 8012264:	4620      	mov	r0, r4
 8012266:	f001 fda7 	bl	8013db8 <_fflush_r>
 801226a:	68e1      	ldr	r1, [r4, #12]
 801226c:	4b06      	ldr	r3, [pc, #24]	@ (8012288 <cleanup_stdio+0x3c>)
 801226e:	4299      	cmp	r1, r3
 8012270:	d004      	beq.n	801227c <cleanup_stdio+0x30>
 8012272:	4620      	mov	r0, r4
 8012274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012278:	f001 bd9e 	b.w	8013db8 <_fflush_r>
 801227c:	bd10      	pop	{r4, pc}
 801227e:	bf00      	nop
 8012280:	240010c4 	.word	0x240010c4
 8012284:	2400112c 	.word	0x2400112c
 8012288:	24001194 	.word	0x24001194

0801228c <global_stdio_init.part.0>:
 801228c:	b510      	push	{r4, lr}
 801228e:	4b0b      	ldr	r3, [pc, #44]	@ (80122bc <global_stdio_init.part.0+0x30>)
 8012290:	4c0b      	ldr	r4, [pc, #44]	@ (80122c0 <global_stdio_init.part.0+0x34>)
 8012292:	4a0c      	ldr	r2, [pc, #48]	@ (80122c4 <global_stdio_init.part.0+0x38>)
 8012294:	601a      	str	r2, [r3, #0]
 8012296:	4620      	mov	r0, r4
 8012298:	2200      	movs	r2, #0
 801229a:	2104      	movs	r1, #4
 801229c:	f7ff ff94 	bl	80121c8 <std>
 80122a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80122a4:	2201      	movs	r2, #1
 80122a6:	2109      	movs	r1, #9
 80122a8:	f7ff ff8e 	bl	80121c8 <std>
 80122ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80122b0:	2202      	movs	r2, #2
 80122b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80122b6:	2112      	movs	r1, #18
 80122b8:	f7ff bf86 	b.w	80121c8 <std>
 80122bc:	240011fc 	.word	0x240011fc
 80122c0:	240010c4 	.word	0x240010c4
 80122c4:	08012235 	.word	0x08012235

080122c8 <__sfp_lock_acquire>:
 80122c8:	4801      	ldr	r0, [pc, #4]	@ (80122d0 <__sfp_lock_acquire+0x8>)
 80122ca:	f000 b92e 	b.w	801252a <__retarget_lock_acquire_recursive>
 80122ce:	bf00      	nop
 80122d0:	24001205 	.word	0x24001205

080122d4 <__sfp_lock_release>:
 80122d4:	4801      	ldr	r0, [pc, #4]	@ (80122dc <__sfp_lock_release+0x8>)
 80122d6:	f000 b929 	b.w	801252c <__retarget_lock_release_recursive>
 80122da:	bf00      	nop
 80122dc:	24001205 	.word	0x24001205

080122e0 <__sinit>:
 80122e0:	b510      	push	{r4, lr}
 80122e2:	4604      	mov	r4, r0
 80122e4:	f7ff fff0 	bl	80122c8 <__sfp_lock_acquire>
 80122e8:	6a23      	ldr	r3, [r4, #32]
 80122ea:	b11b      	cbz	r3, 80122f4 <__sinit+0x14>
 80122ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80122f0:	f7ff bff0 	b.w	80122d4 <__sfp_lock_release>
 80122f4:	4b04      	ldr	r3, [pc, #16]	@ (8012308 <__sinit+0x28>)
 80122f6:	6223      	str	r3, [r4, #32]
 80122f8:	4b04      	ldr	r3, [pc, #16]	@ (801230c <__sinit+0x2c>)
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d1f5      	bne.n	80122ec <__sinit+0xc>
 8012300:	f7ff ffc4 	bl	801228c <global_stdio_init.part.0>
 8012304:	e7f2      	b.n	80122ec <__sinit+0xc>
 8012306:	bf00      	nop
 8012308:	0801224d 	.word	0x0801224d
 801230c:	240011fc 	.word	0x240011fc

08012310 <_fwalk_sglue>:
 8012310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012314:	4607      	mov	r7, r0
 8012316:	4688      	mov	r8, r1
 8012318:	4614      	mov	r4, r2
 801231a:	2600      	movs	r6, #0
 801231c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012320:	f1b9 0901 	subs.w	r9, r9, #1
 8012324:	d505      	bpl.n	8012332 <_fwalk_sglue+0x22>
 8012326:	6824      	ldr	r4, [r4, #0]
 8012328:	2c00      	cmp	r4, #0
 801232a:	d1f7      	bne.n	801231c <_fwalk_sglue+0xc>
 801232c:	4630      	mov	r0, r6
 801232e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012332:	89ab      	ldrh	r3, [r5, #12]
 8012334:	2b01      	cmp	r3, #1
 8012336:	d907      	bls.n	8012348 <_fwalk_sglue+0x38>
 8012338:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801233c:	3301      	adds	r3, #1
 801233e:	d003      	beq.n	8012348 <_fwalk_sglue+0x38>
 8012340:	4629      	mov	r1, r5
 8012342:	4638      	mov	r0, r7
 8012344:	47c0      	blx	r8
 8012346:	4306      	orrs	r6, r0
 8012348:	3568      	adds	r5, #104	@ 0x68
 801234a:	e7e9      	b.n	8012320 <_fwalk_sglue+0x10>

0801234c <siprintf>:
 801234c:	b40e      	push	{r1, r2, r3}
 801234e:	b500      	push	{lr}
 8012350:	b09c      	sub	sp, #112	@ 0x70
 8012352:	ab1d      	add	r3, sp, #116	@ 0x74
 8012354:	9002      	str	r0, [sp, #8]
 8012356:	9006      	str	r0, [sp, #24]
 8012358:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801235c:	4809      	ldr	r0, [pc, #36]	@ (8012384 <siprintf+0x38>)
 801235e:	9107      	str	r1, [sp, #28]
 8012360:	9104      	str	r1, [sp, #16]
 8012362:	4909      	ldr	r1, [pc, #36]	@ (8012388 <siprintf+0x3c>)
 8012364:	f853 2b04 	ldr.w	r2, [r3], #4
 8012368:	9105      	str	r1, [sp, #20]
 801236a:	6800      	ldr	r0, [r0, #0]
 801236c:	9301      	str	r3, [sp, #4]
 801236e:	a902      	add	r1, sp, #8
 8012370:	f001 fba2 	bl	8013ab8 <_svfiprintf_r>
 8012374:	9b02      	ldr	r3, [sp, #8]
 8012376:	2200      	movs	r2, #0
 8012378:	701a      	strb	r2, [r3, #0]
 801237a:	b01c      	add	sp, #112	@ 0x70
 801237c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012380:	b003      	add	sp, #12
 8012382:	4770      	bx	lr
 8012384:	24000054 	.word	0x24000054
 8012388:	ffff0208 	.word	0xffff0208

0801238c <__sread>:
 801238c:	b510      	push	{r4, lr}
 801238e:	460c      	mov	r4, r1
 8012390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012394:	f000 f87a 	bl	801248c <_read_r>
 8012398:	2800      	cmp	r0, #0
 801239a:	bfab      	itete	ge
 801239c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801239e:	89a3      	ldrhlt	r3, [r4, #12]
 80123a0:	181b      	addge	r3, r3, r0
 80123a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80123a6:	bfac      	ite	ge
 80123a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80123aa:	81a3      	strhlt	r3, [r4, #12]
 80123ac:	bd10      	pop	{r4, pc}

080123ae <__swrite>:
 80123ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123b2:	461f      	mov	r7, r3
 80123b4:	898b      	ldrh	r3, [r1, #12]
 80123b6:	05db      	lsls	r3, r3, #23
 80123b8:	4605      	mov	r5, r0
 80123ba:	460c      	mov	r4, r1
 80123bc:	4616      	mov	r6, r2
 80123be:	d505      	bpl.n	80123cc <__swrite+0x1e>
 80123c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123c4:	2302      	movs	r3, #2
 80123c6:	2200      	movs	r2, #0
 80123c8:	f000 f84e 	bl	8012468 <_lseek_r>
 80123cc:	89a3      	ldrh	r3, [r4, #12]
 80123ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80123d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80123d6:	81a3      	strh	r3, [r4, #12]
 80123d8:	4632      	mov	r2, r6
 80123da:	463b      	mov	r3, r7
 80123dc:	4628      	mov	r0, r5
 80123de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80123e2:	f000 b865 	b.w	80124b0 <_write_r>

080123e6 <__sseek>:
 80123e6:	b510      	push	{r4, lr}
 80123e8:	460c      	mov	r4, r1
 80123ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123ee:	f000 f83b 	bl	8012468 <_lseek_r>
 80123f2:	1c43      	adds	r3, r0, #1
 80123f4:	89a3      	ldrh	r3, [r4, #12]
 80123f6:	bf15      	itete	ne
 80123f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80123fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80123fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012402:	81a3      	strheq	r3, [r4, #12]
 8012404:	bf18      	it	ne
 8012406:	81a3      	strhne	r3, [r4, #12]
 8012408:	bd10      	pop	{r4, pc}

0801240a <__sclose>:
 801240a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801240e:	f000 b81b 	b.w	8012448 <_close_r>

08012412 <memset>:
 8012412:	4402      	add	r2, r0
 8012414:	4603      	mov	r3, r0
 8012416:	4293      	cmp	r3, r2
 8012418:	d100      	bne.n	801241c <memset+0xa>
 801241a:	4770      	bx	lr
 801241c:	f803 1b01 	strb.w	r1, [r3], #1
 8012420:	e7f9      	b.n	8012416 <memset+0x4>

08012422 <strcat>:
 8012422:	b510      	push	{r4, lr}
 8012424:	4602      	mov	r2, r0
 8012426:	7814      	ldrb	r4, [r2, #0]
 8012428:	4613      	mov	r3, r2
 801242a:	3201      	adds	r2, #1
 801242c:	2c00      	cmp	r4, #0
 801242e:	d1fa      	bne.n	8012426 <strcat+0x4>
 8012430:	3b01      	subs	r3, #1
 8012432:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012436:	f803 2f01 	strb.w	r2, [r3, #1]!
 801243a:	2a00      	cmp	r2, #0
 801243c:	d1f9      	bne.n	8012432 <strcat+0x10>
 801243e:	bd10      	pop	{r4, pc}

08012440 <_localeconv_r>:
 8012440:	4800      	ldr	r0, [pc, #0]	@ (8012444 <_localeconv_r+0x4>)
 8012442:	4770      	bx	lr
 8012444:	24000194 	.word	0x24000194

08012448 <_close_r>:
 8012448:	b538      	push	{r3, r4, r5, lr}
 801244a:	4d06      	ldr	r5, [pc, #24]	@ (8012464 <_close_r+0x1c>)
 801244c:	2300      	movs	r3, #0
 801244e:	4604      	mov	r4, r0
 8012450:	4608      	mov	r0, r1
 8012452:	602b      	str	r3, [r5, #0]
 8012454:	f7f2 f8f8 	bl	8004648 <_close>
 8012458:	1c43      	adds	r3, r0, #1
 801245a:	d102      	bne.n	8012462 <_close_r+0x1a>
 801245c:	682b      	ldr	r3, [r5, #0]
 801245e:	b103      	cbz	r3, 8012462 <_close_r+0x1a>
 8012460:	6023      	str	r3, [r4, #0]
 8012462:	bd38      	pop	{r3, r4, r5, pc}
 8012464:	24001200 	.word	0x24001200

08012468 <_lseek_r>:
 8012468:	b538      	push	{r3, r4, r5, lr}
 801246a:	4d07      	ldr	r5, [pc, #28]	@ (8012488 <_lseek_r+0x20>)
 801246c:	4604      	mov	r4, r0
 801246e:	4608      	mov	r0, r1
 8012470:	4611      	mov	r1, r2
 8012472:	2200      	movs	r2, #0
 8012474:	602a      	str	r2, [r5, #0]
 8012476:	461a      	mov	r2, r3
 8012478:	f7f2 f90d 	bl	8004696 <_lseek>
 801247c:	1c43      	adds	r3, r0, #1
 801247e:	d102      	bne.n	8012486 <_lseek_r+0x1e>
 8012480:	682b      	ldr	r3, [r5, #0]
 8012482:	b103      	cbz	r3, 8012486 <_lseek_r+0x1e>
 8012484:	6023      	str	r3, [r4, #0]
 8012486:	bd38      	pop	{r3, r4, r5, pc}
 8012488:	24001200 	.word	0x24001200

0801248c <_read_r>:
 801248c:	b538      	push	{r3, r4, r5, lr}
 801248e:	4d07      	ldr	r5, [pc, #28]	@ (80124ac <_read_r+0x20>)
 8012490:	4604      	mov	r4, r0
 8012492:	4608      	mov	r0, r1
 8012494:	4611      	mov	r1, r2
 8012496:	2200      	movs	r2, #0
 8012498:	602a      	str	r2, [r5, #0]
 801249a:	461a      	mov	r2, r3
 801249c:	f7f2 f89b 	bl	80045d6 <_read>
 80124a0:	1c43      	adds	r3, r0, #1
 80124a2:	d102      	bne.n	80124aa <_read_r+0x1e>
 80124a4:	682b      	ldr	r3, [r5, #0]
 80124a6:	b103      	cbz	r3, 80124aa <_read_r+0x1e>
 80124a8:	6023      	str	r3, [r4, #0]
 80124aa:	bd38      	pop	{r3, r4, r5, pc}
 80124ac:	24001200 	.word	0x24001200

080124b0 <_write_r>:
 80124b0:	b538      	push	{r3, r4, r5, lr}
 80124b2:	4d07      	ldr	r5, [pc, #28]	@ (80124d0 <_write_r+0x20>)
 80124b4:	4604      	mov	r4, r0
 80124b6:	4608      	mov	r0, r1
 80124b8:	4611      	mov	r1, r2
 80124ba:	2200      	movs	r2, #0
 80124bc:	602a      	str	r2, [r5, #0]
 80124be:	461a      	mov	r2, r3
 80124c0:	f7f2 f8a6 	bl	8004610 <_write>
 80124c4:	1c43      	adds	r3, r0, #1
 80124c6:	d102      	bne.n	80124ce <_write_r+0x1e>
 80124c8:	682b      	ldr	r3, [r5, #0]
 80124ca:	b103      	cbz	r3, 80124ce <_write_r+0x1e>
 80124cc:	6023      	str	r3, [r4, #0]
 80124ce:	bd38      	pop	{r3, r4, r5, pc}
 80124d0:	24001200 	.word	0x24001200

080124d4 <__errno>:
 80124d4:	4b01      	ldr	r3, [pc, #4]	@ (80124dc <__errno+0x8>)
 80124d6:	6818      	ldr	r0, [r3, #0]
 80124d8:	4770      	bx	lr
 80124da:	bf00      	nop
 80124dc:	24000054 	.word	0x24000054

080124e0 <__libc_init_array>:
 80124e0:	b570      	push	{r4, r5, r6, lr}
 80124e2:	4d0d      	ldr	r5, [pc, #52]	@ (8012518 <__libc_init_array+0x38>)
 80124e4:	4c0d      	ldr	r4, [pc, #52]	@ (801251c <__libc_init_array+0x3c>)
 80124e6:	1b64      	subs	r4, r4, r5
 80124e8:	10a4      	asrs	r4, r4, #2
 80124ea:	2600      	movs	r6, #0
 80124ec:	42a6      	cmp	r6, r4
 80124ee:	d109      	bne.n	8012504 <__libc_init_array+0x24>
 80124f0:	4d0b      	ldr	r5, [pc, #44]	@ (8012520 <__libc_init_array+0x40>)
 80124f2:	4c0c      	ldr	r4, [pc, #48]	@ (8012524 <__libc_init_array+0x44>)
 80124f4:	f001 fffe 	bl	80144f4 <_init>
 80124f8:	1b64      	subs	r4, r4, r5
 80124fa:	10a4      	asrs	r4, r4, #2
 80124fc:	2600      	movs	r6, #0
 80124fe:	42a6      	cmp	r6, r4
 8012500:	d105      	bne.n	801250e <__libc_init_array+0x2e>
 8012502:	bd70      	pop	{r4, r5, r6, pc}
 8012504:	f855 3b04 	ldr.w	r3, [r5], #4
 8012508:	4798      	blx	r3
 801250a:	3601      	adds	r6, #1
 801250c:	e7ee      	b.n	80124ec <__libc_init_array+0xc>
 801250e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012512:	4798      	blx	r3
 8012514:	3601      	adds	r6, #1
 8012516:	e7f2      	b.n	80124fe <__libc_init_array+0x1e>
 8012518:	08015250 	.word	0x08015250
 801251c:	08015250 	.word	0x08015250
 8012520:	08015250 	.word	0x08015250
 8012524:	08015254 	.word	0x08015254

08012528 <__retarget_lock_init_recursive>:
 8012528:	4770      	bx	lr

0801252a <__retarget_lock_acquire_recursive>:
 801252a:	4770      	bx	lr

0801252c <__retarget_lock_release_recursive>:
 801252c:	4770      	bx	lr

0801252e <strcpy>:
 801252e:	4603      	mov	r3, r0
 8012530:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012534:	f803 2b01 	strb.w	r2, [r3], #1
 8012538:	2a00      	cmp	r2, #0
 801253a:	d1f9      	bne.n	8012530 <strcpy+0x2>
 801253c:	4770      	bx	lr

0801253e <quorem>:
 801253e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012542:	6903      	ldr	r3, [r0, #16]
 8012544:	690c      	ldr	r4, [r1, #16]
 8012546:	42a3      	cmp	r3, r4
 8012548:	4607      	mov	r7, r0
 801254a:	db7e      	blt.n	801264a <quorem+0x10c>
 801254c:	3c01      	subs	r4, #1
 801254e:	f101 0814 	add.w	r8, r1, #20
 8012552:	00a3      	lsls	r3, r4, #2
 8012554:	f100 0514 	add.w	r5, r0, #20
 8012558:	9300      	str	r3, [sp, #0]
 801255a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801255e:	9301      	str	r3, [sp, #4]
 8012560:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012564:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012568:	3301      	adds	r3, #1
 801256a:	429a      	cmp	r2, r3
 801256c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012570:	fbb2 f6f3 	udiv	r6, r2, r3
 8012574:	d32e      	bcc.n	80125d4 <quorem+0x96>
 8012576:	f04f 0a00 	mov.w	sl, #0
 801257a:	46c4      	mov	ip, r8
 801257c:	46ae      	mov	lr, r5
 801257e:	46d3      	mov	fp, sl
 8012580:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012584:	b298      	uxth	r0, r3
 8012586:	fb06 a000 	mla	r0, r6, r0, sl
 801258a:	0c02      	lsrs	r2, r0, #16
 801258c:	0c1b      	lsrs	r3, r3, #16
 801258e:	fb06 2303 	mla	r3, r6, r3, r2
 8012592:	f8de 2000 	ldr.w	r2, [lr]
 8012596:	b280      	uxth	r0, r0
 8012598:	b292      	uxth	r2, r2
 801259a:	1a12      	subs	r2, r2, r0
 801259c:	445a      	add	r2, fp
 801259e:	f8de 0000 	ldr.w	r0, [lr]
 80125a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80125a6:	b29b      	uxth	r3, r3
 80125a8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80125ac:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80125b0:	b292      	uxth	r2, r2
 80125b2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80125b6:	45e1      	cmp	r9, ip
 80125b8:	f84e 2b04 	str.w	r2, [lr], #4
 80125bc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80125c0:	d2de      	bcs.n	8012580 <quorem+0x42>
 80125c2:	9b00      	ldr	r3, [sp, #0]
 80125c4:	58eb      	ldr	r3, [r5, r3]
 80125c6:	b92b      	cbnz	r3, 80125d4 <quorem+0x96>
 80125c8:	9b01      	ldr	r3, [sp, #4]
 80125ca:	3b04      	subs	r3, #4
 80125cc:	429d      	cmp	r5, r3
 80125ce:	461a      	mov	r2, r3
 80125d0:	d32f      	bcc.n	8012632 <quorem+0xf4>
 80125d2:	613c      	str	r4, [r7, #16]
 80125d4:	4638      	mov	r0, r7
 80125d6:	f001 f90b 	bl	80137f0 <__mcmp>
 80125da:	2800      	cmp	r0, #0
 80125dc:	db25      	blt.n	801262a <quorem+0xec>
 80125de:	4629      	mov	r1, r5
 80125e0:	2000      	movs	r0, #0
 80125e2:	f858 2b04 	ldr.w	r2, [r8], #4
 80125e6:	f8d1 c000 	ldr.w	ip, [r1]
 80125ea:	fa1f fe82 	uxth.w	lr, r2
 80125ee:	fa1f f38c 	uxth.w	r3, ip
 80125f2:	eba3 030e 	sub.w	r3, r3, lr
 80125f6:	4403      	add	r3, r0
 80125f8:	0c12      	lsrs	r2, r2, #16
 80125fa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80125fe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012602:	b29b      	uxth	r3, r3
 8012604:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012608:	45c1      	cmp	r9, r8
 801260a:	f841 3b04 	str.w	r3, [r1], #4
 801260e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012612:	d2e6      	bcs.n	80125e2 <quorem+0xa4>
 8012614:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012618:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801261c:	b922      	cbnz	r2, 8012628 <quorem+0xea>
 801261e:	3b04      	subs	r3, #4
 8012620:	429d      	cmp	r5, r3
 8012622:	461a      	mov	r2, r3
 8012624:	d30b      	bcc.n	801263e <quorem+0x100>
 8012626:	613c      	str	r4, [r7, #16]
 8012628:	3601      	adds	r6, #1
 801262a:	4630      	mov	r0, r6
 801262c:	b003      	add	sp, #12
 801262e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012632:	6812      	ldr	r2, [r2, #0]
 8012634:	3b04      	subs	r3, #4
 8012636:	2a00      	cmp	r2, #0
 8012638:	d1cb      	bne.n	80125d2 <quorem+0x94>
 801263a:	3c01      	subs	r4, #1
 801263c:	e7c6      	b.n	80125cc <quorem+0x8e>
 801263e:	6812      	ldr	r2, [r2, #0]
 8012640:	3b04      	subs	r3, #4
 8012642:	2a00      	cmp	r2, #0
 8012644:	d1ef      	bne.n	8012626 <quorem+0xe8>
 8012646:	3c01      	subs	r4, #1
 8012648:	e7ea      	b.n	8012620 <quorem+0xe2>
 801264a:	2000      	movs	r0, #0
 801264c:	e7ee      	b.n	801262c <quorem+0xee>
	...

08012650 <_dtoa_r>:
 8012650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012654:	ed2d 8b02 	vpush	{d8}
 8012658:	69c7      	ldr	r7, [r0, #28]
 801265a:	b091      	sub	sp, #68	@ 0x44
 801265c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012660:	ec55 4b10 	vmov	r4, r5, d0
 8012664:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8012666:	9107      	str	r1, [sp, #28]
 8012668:	4681      	mov	r9, r0
 801266a:	9209      	str	r2, [sp, #36]	@ 0x24
 801266c:	930d      	str	r3, [sp, #52]	@ 0x34
 801266e:	b97f      	cbnz	r7, 8012690 <_dtoa_r+0x40>
 8012670:	2010      	movs	r0, #16
 8012672:	f000 fd8d 	bl	8013190 <malloc>
 8012676:	4602      	mov	r2, r0
 8012678:	f8c9 001c 	str.w	r0, [r9, #28]
 801267c:	b920      	cbnz	r0, 8012688 <_dtoa_r+0x38>
 801267e:	4ba0      	ldr	r3, [pc, #640]	@ (8012900 <_dtoa_r+0x2b0>)
 8012680:	21ef      	movs	r1, #239	@ 0xef
 8012682:	48a0      	ldr	r0, [pc, #640]	@ (8012904 <_dtoa_r+0x2b4>)
 8012684:	f001 fbf8 	bl	8013e78 <__assert_func>
 8012688:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801268c:	6007      	str	r7, [r0, #0]
 801268e:	60c7      	str	r7, [r0, #12]
 8012690:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012694:	6819      	ldr	r1, [r3, #0]
 8012696:	b159      	cbz	r1, 80126b0 <_dtoa_r+0x60>
 8012698:	685a      	ldr	r2, [r3, #4]
 801269a:	604a      	str	r2, [r1, #4]
 801269c:	2301      	movs	r3, #1
 801269e:	4093      	lsls	r3, r2
 80126a0:	608b      	str	r3, [r1, #8]
 80126a2:	4648      	mov	r0, r9
 80126a4:	f000 fe6a 	bl	801337c <_Bfree>
 80126a8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80126ac:	2200      	movs	r2, #0
 80126ae:	601a      	str	r2, [r3, #0]
 80126b0:	1e2b      	subs	r3, r5, #0
 80126b2:	bfbb      	ittet	lt
 80126b4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80126b8:	9303      	strlt	r3, [sp, #12]
 80126ba:	2300      	movge	r3, #0
 80126bc:	2201      	movlt	r2, #1
 80126be:	bfac      	ite	ge
 80126c0:	6033      	strge	r3, [r6, #0]
 80126c2:	6032      	strlt	r2, [r6, #0]
 80126c4:	4b90      	ldr	r3, [pc, #576]	@ (8012908 <_dtoa_r+0x2b8>)
 80126c6:	9e03      	ldr	r6, [sp, #12]
 80126c8:	43b3      	bics	r3, r6
 80126ca:	d110      	bne.n	80126ee <_dtoa_r+0x9e>
 80126cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80126ce:	f242 730f 	movw	r3, #9999	@ 0x270f
 80126d2:	6013      	str	r3, [r2, #0]
 80126d4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80126d8:	4323      	orrs	r3, r4
 80126da:	f000 84de 	beq.w	801309a <_dtoa_r+0xa4a>
 80126de:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80126e0:	4f8a      	ldr	r7, [pc, #552]	@ (801290c <_dtoa_r+0x2bc>)
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	f000 84e0 	beq.w	80130a8 <_dtoa_r+0xa58>
 80126e8:	1cfb      	adds	r3, r7, #3
 80126ea:	f000 bcdb 	b.w	80130a4 <_dtoa_r+0xa54>
 80126ee:	ed9d 8b02 	vldr	d8, [sp, #8]
 80126f2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80126f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126fa:	d10a      	bne.n	8012712 <_dtoa_r+0xc2>
 80126fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80126fe:	2301      	movs	r3, #1
 8012700:	6013      	str	r3, [r2, #0]
 8012702:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012704:	b113      	cbz	r3, 801270c <_dtoa_r+0xbc>
 8012706:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012708:	4b81      	ldr	r3, [pc, #516]	@ (8012910 <_dtoa_r+0x2c0>)
 801270a:	6013      	str	r3, [r2, #0]
 801270c:	4f81      	ldr	r7, [pc, #516]	@ (8012914 <_dtoa_r+0x2c4>)
 801270e:	f000 bccb 	b.w	80130a8 <_dtoa_r+0xa58>
 8012712:	aa0e      	add	r2, sp, #56	@ 0x38
 8012714:	a90f      	add	r1, sp, #60	@ 0x3c
 8012716:	4648      	mov	r0, r9
 8012718:	eeb0 0b48 	vmov.f64	d0, d8
 801271c:	f001 f918 	bl	8013950 <__d2b>
 8012720:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8012724:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012726:	9001      	str	r0, [sp, #4]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d045      	beq.n	80127b8 <_dtoa_r+0x168>
 801272c:	eeb0 7b48 	vmov.f64	d7, d8
 8012730:	ee18 1a90 	vmov	r1, s17
 8012734:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012738:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801273c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8012740:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8012744:	2500      	movs	r5, #0
 8012746:	ee07 1a90 	vmov	s15, r1
 801274a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801274e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80128e8 <_dtoa_r+0x298>
 8012752:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012756:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80128f0 <_dtoa_r+0x2a0>
 801275a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801275e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80128f8 <_dtoa_r+0x2a8>
 8012762:	ee07 3a90 	vmov	s15, r3
 8012766:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801276a:	eeb0 7b46 	vmov.f64	d7, d6
 801276e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8012772:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012776:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801277a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801277e:	ee16 8a90 	vmov	r8, s13
 8012782:	d508      	bpl.n	8012796 <_dtoa_r+0x146>
 8012784:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012788:	eeb4 6b47 	vcmp.f64	d6, d7
 801278c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012790:	bf18      	it	ne
 8012792:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 8012796:	f1b8 0f16 	cmp.w	r8, #22
 801279a:	d82b      	bhi.n	80127f4 <_dtoa_r+0x1a4>
 801279c:	495e      	ldr	r1, [pc, #376]	@ (8012918 <_dtoa_r+0x2c8>)
 801279e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80127a2:	ed91 7b00 	vldr	d7, [r1]
 80127a6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80127aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127ae:	d501      	bpl.n	80127b4 <_dtoa_r+0x164>
 80127b0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80127b4:	2100      	movs	r1, #0
 80127b6:	e01e      	b.n	80127f6 <_dtoa_r+0x1a6>
 80127b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80127ba:	4413      	add	r3, r2
 80127bc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80127c0:	2920      	cmp	r1, #32
 80127c2:	bfc1      	itttt	gt
 80127c4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80127c8:	408e      	lslgt	r6, r1
 80127ca:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80127ce:	fa24 f101 	lsrgt.w	r1, r4, r1
 80127d2:	bfd6      	itet	le
 80127d4:	f1c1 0120 	rsble	r1, r1, #32
 80127d8:	4331      	orrgt	r1, r6
 80127da:	fa04 f101 	lslle.w	r1, r4, r1
 80127de:	ee07 1a90 	vmov	s15, r1
 80127e2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80127e6:	3b01      	subs	r3, #1
 80127e8:	ee17 1a90 	vmov	r1, s15
 80127ec:	2501      	movs	r5, #1
 80127ee:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80127f2:	e7a8      	b.n	8012746 <_dtoa_r+0xf6>
 80127f4:	2101      	movs	r1, #1
 80127f6:	1ad2      	subs	r2, r2, r3
 80127f8:	1e53      	subs	r3, r2, #1
 80127fa:	9306      	str	r3, [sp, #24]
 80127fc:	bf45      	ittet	mi
 80127fe:	f1c2 0301 	rsbmi	r3, r2, #1
 8012802:	9305      	strmi	r3, [sp, #20]
 8012804:	2300      	movpl	r3, #0
 8012806:	2300      	movmi	r3, #0
 8012808:	bf4c      	ite	mi
 801280a:	9306      	strmi	r3, [sp, #24]
 801280c:	9305      	strpl	r3, [sp, #20]
 801280e:	f1b8 0f00 	cmp.w	r8, #0
 8012812:	910c      	str	r1, [sp, #48]	@ 0x30
 8012814:	db18      	blt.n	8012848 <_dtoa_r+0x1f8>
 8012816:	9b06      	ldr	r3, [sp, #24]
 8012818:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801281c:	4443      	add	r3, r8
 801281e:	9306      	str	r3, [sp, #24]
 8012820:	2300      	movs	r3, #0
 8012822:	9a07      	ldr	r2, [sp, #28]
 8012824:	2a09      	cmp	r2, #9
 8012826:	d849      	bhi.n	80128bc <_dtoa_r+0x26c>
 8012828:	2a05      	cmp	r2, #5
 801282a:	bfc4      	itt	gt
 801282c:	3a04      	subgt	r2, #4
 801282e:	9207      	strgt	r2, [sp, #28]
 8012830:	9a07      	ldr	r2, [sp, #28]
 8012832:	f1a2 0202 	sub.w	r2, r2, #2
 8012836:	bfcc      	ite	gt
 8012838:	2400      	movgt	r4, #0
 801283a:	2401      	movle	r4, #1
 801283c:	2a03      	cmp	r2, #3
 801283e:	d848      	bhi.n	80128d2 <_dtoa_r+0x282>
 8012840:	e8df f002 	tbb	[pc, r2]
 8012844:	3a2c2e0b 	.word	0x3a2c2e0b
 8012848:	9b05      	ldr	r3, [sp, #20]
 801284a:	2200      	movs	r2, #0
 801284c:	eba3 0308 	sub.w	r3, r3, r8
 8012850:	9305      	str	r3, [sp, #20]
 8012852:	920a      	str	r2, [sp, #40]	@ 0x28
 8012854:	f1c8 0300 	rsb	r3, r8, #0
 8012858:	e7e3      	b.n	8012822 <_dtoa_r+0x1d2>
 801285a:	2200      	movs	r2, #0
 801285c:	9208      	str	r2, [sp, #32]
 801285e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012860:	2a00      	cmp	r2, #0
 8012862:	dc39      	bgt.n	80128d8 <_dtoa_r+0x288>
 8012864:	f04f 0b01 	mov.w	fp, #1
 8012868:	46da      	mov	sl, fp
 801286a:	465a      	mov	r2, fp
 801286c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8012870:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8012874:	2100      	movs	r1, #0
 8012876:	2004      	movs	r0, #4
 8012878:	f100 0614 	add.w	r6, r0, #20
 801287c:	4296      	cmp	r6, r2
 801287e:	d930      	bls.n	80128e2 <_dtoa_r+0x292>
 8012880:	6079      	str	r1, [r7, #4]
 8012882:	4648      	mov	r0, r9
 8012884:	9304      	str	r3, [sp, #16]
 8012886:	f000 fd39 	bl	80132fc <_Balloc>
 801288a:	9b04      	ldr	r3, [sp, #16]
 801288c:	4607      	mov	r7, r0
 801288e:	2800      	cmp	r0, #0
 8012890:	d146      	bne.n	8012920 <_dtoa_r+0x2d0>
 8012892:	4b22      	ldr	r3, [pc, #136]	@ (801291c <_dtoa_r+0x2cc>)
 8012894:	4602      	mov	r2, r0
 8012896:	f240 11af 	movw	r1, #431	@ 0x1af
 801289a:	e6f2      	b.n	8012682 <_dtoa_r+0x32>
 801289c:	2201      	movs	r2, #1
 801289e:	e7dd      	b.n	801285c <_dtoa_r+0x20c>
 80128a0:	2200      	movs	r2, #0
 80128a2:	9208      	str	r2, [sp, #32]
 80128a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80128a6:	eb08 0b02 	add.w	fp, r8, r2
 80128aa:	f10b 0a01 	add.w	sl, fp, #1
 80128ae:	4652      	mov	r2, sl
 80128b0:	2a01      	cmp	r2, #1
 80128b2:	bfb8      	it	lt
 80128b4:	2201      	movlt	r2, #1
 80128b6:	e7db      	b.n	8012870 <_dtoa_r+0x220>
 80128b8:	2201      	movs	r2, #1
 80128ba:	e7f2      	b.n	80128a2 <_dtoa_r+0x252>
 80128bc:	2401      	movs	r4, #1
 80128be:	2200      	movs	r2, #0
 80128c0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80128c4:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80128c8:	2100      	movs	r1, #0
 80128ca:	46da      	mov	sl, fp
 80128cc:	2212      	movs	r2, #18
 80128ce:	9109      	str	r1, [sp, #36]	@ 0x24
 80128d0:	e7ce      	b.n	8012870 <_dtoa_r+0x220>
 80128d2:	2201      	movs	r2, #1
 80128d4:	9208      	str	r2, [sp, #32]
 80128d6:	e7f5      	b.n	80128c4 <_dtoa_r+0x274>
 80128d8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80128dc:	46da      	mov	sl, fp
 80128de:	465a      	mov	r2, fp
 80128e0:	e7c6      	b.n	8012870 <_dtoa_r+0x220>
 80128e2:	3101      	adds	r1, #1
 80128e4:	0040      	lsls	r0, r0, #1
 80128e6:	e7c7      	b.n	8012878 <_dtoa_r+0x228>
 80128e8:	636f4361 	.word	0x636f4361
 80128ec:	3fd287a7 	.word	0x3fd287a7
 80128f0:	8b60c8b3 	.word	0x8b60c8b3
 80128f4:	3fc68a28 	.word	0x3fc68a28
 80128f8:	509f79fb 	.word	0x509f79fb
 80128fc:	3fd34413 	.word	0x3fd34413
 8012900:	08015017 	.word	0x08015017
 8012904:	0801502e 	.word	0x0801502e
 8012908:	7ff00000 	.word	0x7ff00000
 801290c:	08015013 	.word	0x08015013
 8012910:	08014fe7 	.word	0x08014fe7
 8012914:	08014fe6 	.word	0x08014fe6
 8012918:	08015128 	.word	0x08015128
 801291c:	08015086 	.word	0x08015086
 8012920:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8012924:	f1ba 0f0e 	cmp.w	sl, #14
 8012928:	6010      	str	r0, [r2, #0]
 801292a:	d86f      	bhi.n	8012a0c <_dtoa_r+0x3bc>
 801292c:	2c00      	cmp	r4, #0
 801292e:	d06d      	beq.n	8012a0c <_dtoa_r+0x3bc>
 8012930:	f1b8 0f00 	cmp.w	r8, #0
 8012934:	f340 80c2 	ble.w	8012abc <_dtoa_r+0x46c>
 8012938:	4aca      	ldr	r2, [pc, #808]	@ (8012c64 <_dtoa_r+0x614>)
 801293a:	f008 010f 	and.w	r1, r8, #15
 801293e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8012942:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8012946:	ed92 7b00 	vldr	d7, [r2]
 801294a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801294e:	f000 80a9 	beq.w	8012aa4 <_dtoa_r+0x454>
 8012952:	4ac5      	ldr	r2, [pc, #788]	@ (8012c68 <_dtoa_r+0x618>)
 8012954:	ed92 6b08 	vldr	d6, [r2, #32]
 8012958:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801295c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012960:	f001 010f 	and.w	r1, r1, #15
 8012964:	2203      	movs	r2, #3
 8012966:	48c0      	ldr	r0, [pc, #768]	@ (8012c68 <_dtoa_r+0x618>)
 8012968:	2900      	cmp	r1, #0
 801296a:	f040 809d 	bne.w	8012aa8 <_dtoa_r+0x458>
 801296e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012972:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012976:	ed8d 7b02 	vstr	d7, [sp, #8]
 801297a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801297c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012980:	2900      	cmp	r1, #0
 8012982:	f000 80c1 	beq.w	8012b08 <_dtoa_r+0x4b8>
 8012986:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801298a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801298e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012992:	f140 80b9 	bpl.w	8012b08 <_dtoa_r+0x4b8>
 8012996:	f1ba 0f00 	cmp.w	sl, #0
 801299a:	f000 80b5 	beq.w	8012b08 <_dtoa_r+0x4b8>
 801299e:	f1bb 0f00 	cmp.w	fp, #0
 80129a2:	dd31      	ble.n	8012a08 <_dtoa_r+0x3b8>
 80129a4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80129a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80129ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 80129b0:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 80129b4:	9104      	str	r1, [sp, #16]
 80129b6:	3201      	adds	r2, #1
 80129b8:	465c      	mov	r4, fp
 80129ba:	ed9d 6b02 	vldr	d6, [sp, #8]
 80129be:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80129c2:	ee07 2a90 	vmov	s15, r2
 80129c6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80129ca:	eea7 5b06 	vfma.f64	d5, d7, d6
 80129ce:	ee15 2a90 	vmov	r2, s11
 80129d2:	ec51 0b15 	vmov	r0, r1, d5
 80129d6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80129da:	2c00      	cmp	r4, #0
 80129dc:	f040 8098 	bne.w	8012b10 <_dtoa_r+0x4c0>
 80129e0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80129e4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80129e8:	ec41 0b17 	vmov	d7, r0, r1
 80129ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80129f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129f4:	f300 8261 	bgt.w	8012eba <_dtoa_r+0x86a>
 80129f8:	eeb1 7b47 	vneg.f64	d7, d7
 80129fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a04:	f100 80f5 	bmi.w	8012bf2 <_dtoa_r+0x5a2>
 8012a08:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012a0c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012a0e:	2a00      	cmp	r2, #0
 8012a10:	f2c0 812c 	blt.w	8012c6c <_dtoa_r+0x61c>
 8012a14:	f1b8 0f0e 	cmp.w	r8, #14
 8012a18:	f300 8128 	bgt.w	8012c6c <_dtoa_r+0x61c>
 8012a1c:	4b91      	ldr	r3, [pc, #580]	@ (8012c64 <_dtoa_r+0x614>)
 8012a1e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012a22:	ed93 6b00 	vldr	d6, [r3]
 8012a26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	da03      	bge.n	8012a34 <_dtoa_r+0x3e4>
 8012a2c:	f1ba 0f00 	cmp.w	sl, #0
 8012a30:	f340 80d2 	ble.w	8012bd8 <_dtoa_r+0x588>
 8012a34:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8012a38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012a3c:	463e      	mov	r6, r7
 8012a3e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012a42:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012a46:	ee15 3a10 	vmov	r3, s10
 8012a4a:	3330      	adds	r3, #48	@ 0x30
 8012a4c:	f806 3b01 	strb.w	r3, [r6], #1
 8012a50:	1bf3      	subs	r3, r6, r7
 8012a52:	459a      	cmp	sl, r3
 8012a54:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012a58:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012a5c:	f040 80f8 	bne.w	8012c50 <_dtoa_r+0x600>
 8012a60:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012a64:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a6c:	f300 80dd 	bgt.w	8012c2a <_dtoa_r+0x5da>
 8012a70:	eeb4 7b46 	vcmp.f64	d7, d6
 8012a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a78:	d104      	bne.n	8012a84 <_dtoa_r+0x434>
 8012a7a:	ee15 3a10 	vmov	r3, s10
 8012a7e:	07db      	lsls	r3, r3, #31
 8012a80:	f100 80d3 	bmi.w	8012c2a <_dtoa_r+0x5da>
 8012a84:	9901      	ldr	r1, [sp, #4]
 8012a86:	4648      	mov	r0, r9
 8012a88:	f000 fc78 	bl	801337c <_Bfree>
 8012a8c:	2300      	movs	r3, #0
 8012a8e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012a90:	7033      	strb	r3, [r6, #0]
 8012a92:	f108 0301 	add.w	r3, r8, #1
 8012a96:	6013      	str	r3, [r2, #0]
 8012a98:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	f000 8304 	beq.w	80130a8 <_dtoa_r+0xa58>
 8012aa0:	601e      	str	r6, [r3, #0]
 8012aa2:	e301      	b.n	80130a8 <_dtoa_r+0xa58>
 8012aa4:	2202      	movs	r2, #2
 8012aa6:	e75e      	b.n	8012966 <_dtoa_r+0x316>
 8012aa8:	07cc      	lsls	r4, r1, #31
 8012aaa:	d504      	bpl.n	8012ab6 <_dtoa_r+0x466>
 8012aac:	ed90 6b00 	vldr	d6, [r0]
 8012ab0:	3201      	adds	r2, #1
 8012ab2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012ab6:	1049      	asrs	r1, r1, #1
 8012ab8:	3008      	adds	r0, #8
 8012aba:	e755      	b.n	8012968 <_dtoa_r+0x318>
 8012abc:	d022      	beq.n	8012b04 <_dtoa_r+0x4b4>
 8012abe:	f1c8 0100 	rsb	r1, r8, #0
 8012ac2:	4a68      	ldr	r2, [pc, #416]	@ (8012c64 <_dtoa_r+0x614>)
 8012ac4:	f001 000f 	and.w	r0, r1, #15
 8012ac8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012acc:	ed92 7b00 	vldr	d7, [r2]
 8012ad0:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012ad4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012ad8:	4863      	ldr	r0, [pc, #396]	@ (8012c68 <_dtoa_r+0x618>)
 8012ada:	1109      	asrs	r1, r1, #4
 8012adc:	2400      	movs	r4, #0
 8012ade:	2202      	movs	r2, #2
 8012ae0:	b929      	cbnz	r1, 8012aee <_dtoa_r+0x49e>
 8012ae2:	2c00      	cmp	r4, #0
 8012ae4:	f43f af49 	beq.w	801297a <_dtoa_r+0x32a>
 8012ae8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012aec:	e745      	b.n	801297a <_dtoa_r+0x32a>
 8012aee:	07ce      	lsls	r6, r1, #31
 8012af0:	d505      	bpl.n	8012afe <_dtoa_r+0x4ae>
 8012af2:	ed90 6b00 	vldr	d6, [r0]
 8012af6:	3201      	adds	r2, #1
 8012af8:	2401      	movs	r4, #1
 8012afa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012afe:	1049      	asrs	r1, r1, #1
 8012b00:	3008      	adds	r0, #8
 8012b02:	e7ed      	b.n	8012ae0 <_dtoa_r+0x490>
 8012b04:	2202      	movs	r2, #2
 8012b06:	e738      	b.n	801297a <_dtoa_r+0x32a>
 8012b08:	f8cd 8010 	str.w	r8, [sp, #16]
 8012b0c:	4654      	mov	r4, sl
 8012b0e:	e754      	b.n	80129ba <_dtoa_r+0x36a>
 8012b10:	4a54      	ldr	r2, [pc, #336]	@ (8012c64 <_dtoa_r+0x614>)
 8012b12:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8012b16:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012b1a:	9a08      	ldr	r2, [sp, #32]
 8012b1c:	ec41 0b17 	vmov	d7, r0, r1
 8012b20:	443c      	add	r4, r7
 8012b22:	b34a      	cbz	r2, 8012b78 <_dtoa_r+0x528>
 8012b24:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8012b28:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8012b2c:	463e      	mov	r6, r7
 8012b2e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012b32:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8012b36:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012b3a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012b3e:	ee14 2a90 	vmov	r2, s9
 8012b42:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012b46:	3230      	adds	r2, #48	@ 0x30
 8012b48:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012b4c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b54:	f806 2b01 	strb.w	r2, [r6], #1
 8012b58:	d438      	bmi.n	8012bcc <_dtoa_r+0x57c>
 8012b5a:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012b5e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b66:	d462      	bmi.n	8012c2e <_dtoa_r+0x5de>
 8012b68:	42a6      	cmp	r6, r4
 8012b6a:	f43f af4d 	beq.w	8012a08 <_dtoa_r+0x3b8>
 8012b6e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012b72:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012b76:	e7e0      	b.n	8012b3a <_dtoa_r+0x4ea>
 8012b78:	4621      	mov	r1, r4
 8012b7a:	463e      	mov	r6, r7
 8012b7c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012b80:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8012b84:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012b88:	ee14 2a90 	vmov	r2, s9
 8012b8c:	3230      	adds	r2, #48	@ 0x30
 8012b8e:	f806 2b01 	strb.w	r2, [r6], #1
 8012b92:	42a6      	cmp	r6, r4
 8012b94:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012b98:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012b9c:	d119      	bne.n	8012bd2 <_dtoa_r+0x582>
 8012b9e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8012ba2:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012ba6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bae:	dc3e      	bgt.n	8012c2e <_dtoa_r+0x5de>
 8012bb0:	ee35 5b47 	vsub.f64	d5, d5, d7
 8012bb4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8012bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bbc:	f57f af24 	bpl.w	8012a08 <_dtoa_r+0x3b8>
 8012bc0:	460e      	mov	r6, r1
 8012bc2:	3901      	subs	r1, #1
 8012bc4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012bc8:	2b30      	cmp	r3, #48	@ 0x30
 8012bca:	d0f9      	beq.n	8012bc0 <_dtoa_r+0x570>
 8012bcc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012bd0:	e758      	b.n	8012a84 <_dtoa_r+0x434>
 8012bd2:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012bd6:	e7d5      	b.n	8012b84 <_dtoa_r+0x534>
 8012bd8:	d10b      	bne.n	8012bf2 <_dtoa_r+0x5a2>
 8012bda:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8012bde:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012be2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012be6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bee:	f2c0 8161 	blt.w	8012eb4 <_dtoa_r+0x864>
 8012bf2:	2400      	movs	r4, #0
 8012bf4:	4625      	mov	r5, r4
 8012bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012bf8:	43db      	mvns	r3, r3
 8012bfa:	9304      	str	r3, [sp, #16]
 8012bfc:	463e      	mov	r6, r7
 8012bfe:	f04f 0800 	mov.w	r8, #0
 8012c02:	4621      	mov	r1, r4
 8012c04:	4648      	mov	r0, r9
 8012c06:	f000 fbb9 	bl	801337c <_Bfree>
 8012c0a:	2d00      	cmp	r5, #0
 8012c0c:	d0de      	beq.n	8012bcc <_dtoa_r+0x57c>
 8012c0e:	f1b8 0f00 	cmp.w	r8, #0
 8012c12:	d005      	beq.n	8012c20 <_dtoa_r+0x5d0>
 8012c14:	45a8      	cmp	r8, r5
 8012c16:	d003      	beq.n	8012c20 <_dtoa_r+0x5d0>
 8012c18:	4641      	mov	r1, r8
 8012c1a:	4648      	mov	r0, r9
 8012c1c:	f000 fbae 	bl	801337c <_Bfree>
 8012c20:	4629      	mov	r1, r5
 8012c22:	4648      	mov	r0, r9
 8012c24:	f000 fbaa 	bl	801337c <_Bfree>
 8012c28:	e7d0      	b.n	8012bcc <_dtoa_r+0x57c>
 8012c2a:	f8cd 8010 	str.w	r8, [sp, #16]
 8012c2e:	4633      	mov	r3, r6
 8012c30:	461e      	mov	r6, r3
 8012c32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012c36:	2a39      	cmp	r2, #57	@ 0x39
 8012c38:	d106      	bne.n	8012c48 <_dtoa_r+0x5f8>
 8012c3a:	429f      	cmp	r7, r3
 8012c3c:	d1f8      	bne.n	8012c30 <_dtoa_r+0x5e0>
 8012c3e:	9a04      	ldr	r2, [sp, #16]
 8012c40:	3201      	adds	r2, #1
 8012c42:	9204      	str	r2, [sp, #16]
 8012c44:	2230      	movs	r2, #48	@ 0x30
 8012c46:	703a      	strb	r2, [r7, #0]
 8012c48:	781a      	ldrb	r2, [r3, #0]
 8012c4a:	3201      	adds	r2, #1
 8012c4c:	701a      	strb	r2, [r3, #0]
 8012c4e:	e7bd      	b.n	8012bcc <_dtoa_r+0x57c>
 8012c50:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012c54:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c5c:	f47f aeef 	bne.w	8012a3e <_dtoa_r+0x3ee>
 8012c60:	e710      	b.n	8012a84 <_dtoa_r+0x434>
 8012c62:	bf00      	nop
 8012c64:	08015128 	.word	0x08015128
 8012c68:	08015100 	.word	0x08015100
 8012c6c:	9908      	ldr	r1, [sp, #32]
 8012c6e:	2900      	cmp	r1, #0
 8012c70:	f000 80e3 	beq.w	8012e3a <_dtoa_r+0x7ea>
 8012c74:	9907      	ldr	r1, [sp, #28]
 8012c76:	2901      	cmp	r1, #1
 8012c78:	f300 80c8 	bgt.w	8012e0c <_dtoa_r+0x7bc>
 8012c7c:	2d00      	cmp	r5, #0
 8012c7e:	f000 80c1 	beq.w	8012e04 <_dtoa_r+0x7b4>
 8012c82:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8012c86:	9e05      	ldr	r6, [sp, #20]
 8012c88:	461c      	mov	r4, r3
 8012c8a:	9304      	str	r3, [sp, #16]
 8012c8c:	9b05      	ldr	r3, [sp, #20]
 8012c8e:	4413      	add	r3, r2
 8012c90:	9305      	str	r3, [sp, #20]
 8012c92:	9b06      	ldr	r3, [sp, #24]
 8012c94:	2101      	movs	r1, #1
 8012c96:	4413      	add	r3, r2
 8012c98:	4648      	mov	r0, r9
 8012c9a:	9306      	str	r3, [sp, #24]
 8012c9c:	f000 fc22 	bl	80134e4 <__i2b>
 8012ca0:	9b04      	ldr	r3, [sp, #16]
 8012ca2:	4605      	mov	r5, r0
 8012ca4:	b166      	cbz	r6, 8012cc0 <_dtoa_r+0x670>
 8012ca6:	9a06      	ldr	r2, [sp, #24]
 8012ca8:	2a00      	cmp	r2, #0
 8012caa:	dd09      	ble.n	8012cc0 <_dtoa_r+0x670>
 8012cac:	42b2      	cmp	r2, r6
 8012cae:	9905      	ldr	r1, [sp, #20]
 8012cb0:	bfa8      	it	ge
 8012cb2:	4632      	movge	r2, r6
 8012cb4:	1a89      	subs	r1, r1, r2
 8012cb6:	9105      	str	r1, [sp, #20]
 8012cb8:	9906      	ldr	r1, [sp, #24]
 8012cba:	1ab6      	subs	r6, r6, r2
 8012cbc:	1a8a      	subs	r2, r1, r2
 8012cbe:	9206      	str	r2, [sp, #24]
 8012cc0:	b1fb      	cbz	r3, 8012d02 <_dtoa_r+0x6b2>
 8012cc2:	9a08      	ldr	r2, [sp, #32]
 8012cc4:	2a00      	cmp	r2, #0
 8012cc6:	f000 80bc 	beq.w	8012e42 <_dtoa_r+0x7f2>
 8012cca:	b19c      	cbz	r4, 8012cf4 <_dtoa_r+0x6a4>
 8012ccc:	4629      	mov	r1, r5
 8012cce:	4622      	mov	r2, r4
 8012cd0:	4648      	mov	r0, r9
 8012cd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012cd4:	f000 fcc6 	bl	8013664 <__pow5mult>
 8012cd8:	9a01      	ldr	r2, [sp, #4]
 8012cda:	4601      	mov	r1, r0
 8012cdc:	4605      	mov	r5, r0
 8012cde:	4648      	mov	r0, r9
 8012ce0:	f000 fc16 	bl	8013510 <__multiply>
 8012ce4:	9901      	ldr	r1, [sp, #4]
 8012ce6:	9004      	str	r0, [sp, #16]
 8012ce8:	4648      	mov	r0, r9
 8012cea:	f000 fb47 	bl	801337c <_Bfree>
 8012cee:	9a04      	ldr	r2, [sp, #16]
 8012cf0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012cf2:	9201      	str	r2, [sp, #4]
 8012cf4:	1b1a      	subs	r2, r3, r4
 8012cf6:	d004      	beq.n	8012d02 <_dtoa_r+0x6b2>
 8012cf8:	9901      	ldr	r1, [sp, #4]
 8012cfa:	4648      	mov	r0, r9
 8012cfc:	f000 fcb2 	bl	8013664 <__pow5mult>
 8012d00:	9001      	str	r0, [sp, #4]
 8012d02:	2101      	movs	r1, #1
 8012d04:	4648      	mov	r0, r9
 8012d06:	f000 fbed 	bl	80134e4 <__i2b>
 8012d0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012d0c:	4604      	mov	r4, r0
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	f000 81d0 	beq.w	80130b4 <_dtoa_r+0xa64>
 8012d14:	461a      	mov	r2, r3
 8012d16:	4601      	mov	r1, r0
 8012d18:	4648      	mov	r0, r9
 8012d1a:	f000 fca3 	bl	8013664 <__pow5mult>
 8012d1e:	9b07      	ldr	r3, [sp, #28]
 8012d20:	2b01      	cmp	r3, #1
 8012d22:	4604      	mov	r4, r0
 8012d24:	f300 8095 	bgt.w	8012e52 <_dtoa_r+0x802>
 8012d28:	9b02      	ldr	r3, [sp, #8]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	f040 808b 	bne.w	8012e46 <_dtoa_r+0x7f6>
 8012d30:	9b03      	ldr	r3, [sp, #12]
 8012d32:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8012d36:	2a00      	cmp	r2, #0
 8012d38:	f040 8087 	bne.w	8012e4a <_dtoa_r+0x7fa>
 8012d3c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8012d40:	0d12      	lsrs	r2, r2, #20
 8012d42:	0512      	lsls	r2, r2, #20
 8012d44:	2a00      	cmp	r2, #0
 8012d46:	f000 8082 	beq.w	8012e4e <_dtoa_r+0x7fe>
 8012d4a:	9b05      	ldr	r3, [sp, #20]
 8012d4c:	3301      	adds	r3, #1
 8012d4e:	9305      	str	r3, [sp, #20]
 8012d50:	9b06      	ldr	r3, [sp, #24]
 8012d52:	3301      	adds	r3, #1
 8012d54:	9306      	str	r3, [sp, #24]
 8012d56:	2301      	movs	r3, #1
 8012d58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012d5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	f000 81af 	beq.w	80130c0 <_dtoa_r+0xa70>
 8012d62:	6922      	ldr	r2, [r4, #16]
 8012d64:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012d68:	6910      	ldr	r0, [r2, #16]
 8012d6a:	f000 fb6f 	bl	801344c <__hi0bits>
 8012d6e:	f1c0 0020 	rsb	r0, r0, #32
 8012d72:	9b06      	ldr	r3, [sp, #24]
 8012d74:	4418      	add	r0, r3
 8012d76:	f010 001f 	ands.w	r0, r0, #31
 8012d7a:	d076      	beq.n	8012e6a <_dtoa_r+0x81a>
 8012d7c:	f1c0 0220 	rsb	r2, r0, #32
 8012d80:	2a04      	cmp	r2, #4
 8012d82:	dd69      	ble.n	8012e58 <_dtoa_r+0x808>
 8012d84:	9b05      	ldr	r3, [sp, #20]
 8012d86:	f1c0 001c 	rsb	r0, r0, #28
 8012d8a:	4403      	add	r3, r0
 8012d8c:	9305      	str	r3, [sp, #20]
 8012d8e:	9b06      	ldr	r3, [sp, #24]
 8012d90:	4406      	add	r6, r0
 8012d92:	4403      	add	r3, r0
 8012d94:	9306      	str	r3, [sp, #24]
 8012d96:	9b05      	ldr	r3, [sp, #20]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	dd05      	ble.n	8012da8 <_dtoa_r+0x758>
 8012d9c:	9901      	ldr	r1, [sp, #4]
 8012d9e:	461a      	mov	r2, r3
 8012da0:	4648      	mov	r0, r9
 8012da2:	f000 fcb9 	bl	8013718 <__lshift>
 8012da6:	9001      	str	r0, [sp, #4]
 8012da8:	9b06      	ldr	r3, [sp, #24]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	dd05      	ble.n	8012dba <_dtoa_r+0x76a>
 8012dae:	4621      	mov	r1, r4
 8012db0:	461a      	mov	r2, r3
 8012db2:	4648      	mov	r0, r9
 8012db4:	f000 fcb0 	bl	8013718 <__lshift>
 8012db8:	4604      	mov	r4, r0
 8012dba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d056      	beq.n	8012e6e <_dtoa_r+0x81e>
 8012dc0:	9801      	ldr	r0, [sp, #4]
 8012dc2:	4621      	mov	r1, r4
 8012dc4:	f000 fd14 	bl	80137f0 <__mcmp>
 8012dc8:	2800      	cmp	r0, #0
 8012dca:	da50      	bge.n	8012e6e <_dtoa_r+0x81e>
 8012dcc:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8012dd0:	9304      	str	r3, [sp, #16]
 8012dd2:	9901      	ldr	r1, [sp, #4]
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	220a      	movs	r2, #10
 8012dd8:	4648      	mov	r0, r9
 8012dda:	f000 faf1 	bl	80133c0 <__multadd>
 8012dde:	9b08      	ldr	r3, [sp, #32]
 8012de0:	9001      	str	r0, [sp, #4]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	f000 816e 	beq.w	80130c4 <_dtoa_r+0xa74>
 8012de8:	4629      	mov	r1, r5
 8012dea:	2300      	movs	r3, #0
 8012dec:	220a      	movs	r2, #10
 8012dee:	4648      	mov	r0, r9
 8012df0:	f000 fae6 	bl	80133c0 <__multadd>
 8012df4:	f1bb 0f00 	cmp.w	fp, #0
 8012df8:	4605      	mov	r5, r0
 8012dfa:	dc64      	bgt.n	8012ec6 <_dtoa_r+0x876>
 8012dfc:	9b07      	ldr	r3, [sp, #28]
 8012dfe:	2b02      	cmp	r3, #2
 8012e00:	dc3e      	bgt.n	8012e80 <_dtoa_r+0x830>
 8012e02:	e060      	b.n	8012ec6 <_dtoa_r+0x876>
 8012e04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012e06:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8012e0a:	e73c      	b.n	8012c86 <_dtoa_r+0x636>
 8012e0c:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 8012e10:	42a3      	cmp	r3, r4
 8012e12:	bfbf      	itttt	lt
 8012e14:	1ae2      	sublt	r2, r4, r3
 8012e16:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8012e18:	189b      	addlt	r3, r3, r2
 8012e1a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8012e1c:	bfae      	itee	ge
 8012e1e:	1b1c      	subge	r4, r3, r4
 8012e20:	4623      	movlt	r3, r4
 8012e22:	2400      	movlt	r4, #0
 8012e24:	f1ba 0f00 	cmp.w	sl, #0
 8012e28:	bfb5      	itete	lt
 8012e2a:	9a05      	ldrlt	r2, [sp, #20]
 8012e2c:	9e05      	ldrge	r6, [sp, #20]
 8012e2e:	eba2 060a 	sublt.w	r6, r2, sl
 8012e32:	4652      	movge	r2, sl
 8012e34:	bfb8      	it	lt
 8012e36:	2200      	movlt	r2, #0
 8012e38:	e727      	b.n	8012c8a <_dtoa_r+0x63a>
 8012e3a:	9e05      	ldr	r6, [sp, #20]
 8012e3c:	9d08      	ldr	r5, [sp, #32]
 8012e3e:	461c      	mov	r4, r3
 8012e40:	e730      	b.n	8012ca4 <_dtoa_r+0x654>
 8012e42:	461a      	mov	r2, r3
 8012e44:	e758      	b.n	8012cf8 <_dtoa_r+0x6a8>
 8012e46:	2300      	movs	r3, #0
 8012e48:	e786      	b.n	8012d58 <_dtoa_r+0x708>
 8012e4a:	9b02      	ldr	r3, [sp, #8]
 8012e4c:	e784      	b.n	8012d58 <_dtoa_r+0x708>
 8012e4e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012e50:	e783      	b.n	8012d5a <_dtoa_r+0x70a>
 8012e52:	2300      	movs	r3, #0
 8012e54:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012e56:	e784      	b.n	8012d62 <_dtoa_r+0x712>
 8012e58:	d09d      	beq.n	8012d96 <_dtoa_r+0x746>
 8012e5a:	9b05      	ldr	r3, [sp, #20]
 8012e5c:	321c      	adds	r2, #28
 8012e5e:	4413      	add	r3, r2
 8012e60:	9305      	str	r3, [sp, #20]
 8012e62:	9b06      	ldr	r3, [sp, #24]
 8012e64:	4416      	add	r6, r2
 8012e66:	4413      	add	r3, r2
 8012e68:	e794      	b.n	8012d94 <_dtoa_r+0x744>
 8012e6a:	4602      	mov	r2, r0
 8012e6c:	e7f5      	b.n	8012e5a <_dtoa_r+0x80a>
 8012e6e:	f1ba 0f00 	cmp.w	sl, #0
 8012e72:	f8cd 8010 	str.w	r8, [sp, #16]
 8012e76:	46d3      	mov	fp, sl
 8012e78:	dc21      	bgt.n	8012ebe <_dtoa_r+0x86e>
 8012e7a:	9b07      	ldr	r3, [sp, #28]
 8012e7c:	2b02      	cmp	r3, #2
 8012e7e:	dd1e      	ble.n	8012ebe <_dtoa_r+0x86e>
 8012e80:	f1bb 0f00 	cmp.w	fp, #0
 8012e84:	f47f aeb7 	bne.w	8012bf6 <_dtoa_r+0x5a6>
 8012e88:	4621      	mov	r1, r4
 8012e8a:	465b      	mov	r3, fp
 8012e8c:	2205      	movs	r2, #5
 8012e8e:	4648      	mov	r0, r9
 8012e90:	f000 fa96 	bl	80133c0 <__multadd>
 8012e94:	4601      	mov	r1, r0
 8012e96:	4604      	mov	r4, r0
 8012e98:	9801      	ldr	r0, [sp, #4]
 8012e9a:	f000 fca9 	bl	80137f0 <__mcmp>
 8012e9e:	2800      	cmp	r0, #0
 8012ea0:	f77f aea9 	ble.w	8012bf6 <_dtoa_r+0x5a6>
 8012ea4:	463e      	mov	r6, r7
 8012ea6:	2331      	movs	r3, #49	@ 0x31
 8012ea8:	f806 3b01 	strb.w	r3, [r6], #1
 8012eac:	9b04      	ldr	r3, [sp, #16]
 8012eae:	3301      	adds	r3, #1
 8012eb0:	9304      	str	r3, [sp, #16]
 8012eb2:	e6a4      	b.n	8012bfe <_dtoa_r+0x5ae>
 8012eb4:	f8cd 8010 	str.w	r8, [sp, #16]
 8012eb8:	4654      	mov	r4, sl
 8012eba:	4625      	mov	r5, r4
 8012ebc:	e7f2      	b.n	8012ea4 <_dtoa_r+0x854>
 8012ebe:	9b08      	ldr	r3, [sp, #32]
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	f000 8103 	beq.w	80130cc <_dtoa_r+0xa7c>
 8012ec6:	2e00      	cmp	r6, #0
 8012ec8:	dd05      	ble.n	8012ed6 <_dtoa_r+0x886>
 8012eca:	4629      	mov	r1, r5
 8012ecc:	4632      	mov	r2, r6
 8012ece:	4648      	mov	r0, r9
 8012ed0:	f000 fc22 	bl	8013718 <__lshift>
 8012ed4:	4605      	mov	r5, r0
 8012ed6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d058      	beq.n	8012f8e <_dtoa_r+0x93e>
 8012edc:	6869      	ldr	r1, [r5, #4]
 8012ede:	4648      	mov	r0, r9
 8012ee0:	f000 fa0c 	bl	80132fc <_Balloc>
 8012ee4:	4606      	mov	r6, r0
 8012ee6:	b928      	cbnz	r0, 8012ef4 <_dtoa_r+0x8a4>
 8012ee8:	4b82      	ldr	r3, [pc, #520]	@ (80130f4 <_dtoa_r+0xaa4>)
 8012eea:	4602      	mov	r2, r0
 8012eec:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012ef0:	f7ff bbc7 	b.w	8012682 <_dtoa_r+0x32>
 8012ef4:	692a      	ldr	r2, [r5, #16]
 8012ef6:	3202      	adds	r2, #2
 8012ef8:	0092      	lsls	r2, r2, #2
 8012efa:	f105 010c 	add.w	r1, r5, #12
 8012efe:	300c      	adds	r0, #12
 8012f00:	f000 ffac 	bl	8013e5c <memcpy>
 8012f04:	2201      	movs	r2, #1
 8012f06:	4631      	mov	r1, r6
 8012f08:	4648      	mov	r0, r9
 8012f0a:	f000 fc05 	bl	8013718 <__lshift>
 8012f0e:	1c7b      	adds	r3, r7, #1
 8012f10:	9305      	str	r3, [sp, #20]
 8012f12:	eb07 030b 	add.w	r3, r7, fp
 8012f16:	9309      	str	r3, [sp, #36]	@ 0x24
 8012f18:	9b02      	ldr	r3, [sp, #8]
 8012f1a:	f003 0301 	and.w	r3, r3, #1
 8012f1e:	46a8      	mov	r8, r5
 8012f20:	9308      	str	r3, [sp, #32]
 8012f22:	4605      	mov	r5, r0
 8012f24:	9b05      	ldr	r3, [sp, #20]
 8012f26:	9801      	ldr	r0, [sp, #4]
 8012f28:	4621      	mov	r1, r4
 8012f2a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8012f2e:	f7ff fb06 	bl	801253e <quorem>
 8012f32:	4641      	mov	r1, r8
 8012f34:	9002      	str	r0, [sp, #8]
 8012f36:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8012f3a:	9801      	ldr	r0, [sp, #4]
 8012f3c:	f000 fc58 	bl	80137f0 <__mcmp>
 8012f40:	462a      	mov	r2, r5
 8012f42:	9006      	str	r0, [sp, #24]
 8012f44:	4621      	mov	r1, r4
 8012f46:	4648      	mov	r0, r9
 8012f48:	f000 fc6e 	bl	8013828 <__mdiff>
 8012f4c:	68c2      	ldr	r2, [r0, #12]
 8012f4e:	4606      	mov	r6, r0
 8012f50:	b9fa      	cbnz	r2, 8012f92 <_dtoa_r+0x942>
 8012f52:	4601      	mov	r1, r0
 8012f54:	9801      	ldr	r0, [sp, #4]
 8012f56:	f000 fc4b 	bl	80137f0 <__mcmp>
 8012f5a:	4602      	mov	r2, r0
 8012f5c:	4631      	mov	r1, r6
 8012f5e:	4648      	mov	r0, r9
 8012f60:	920a      	str	r2, [sp, #40]	@ 0x28
 8012f62:	f000 fa0b 	bl	801337c <_Bfree>
 8012f66:	9b07      	ldr	r3, [sp, #28]
 8012f68:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012f6a:	9e05      	ldr	r6, [sp, #20]
 8012f6c:	ea43 0102 	orr.w	r1, r3, r2
 8012f70:	9b08      	ldr	r3, [sp, #32]
 8012f72:	4319      	orrs	r1, r3
 8012f74:	d10f      	bne.n	8012f96 <_dtoa_r+0x946>
 8012f76:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012f7a:	d028      	beq.n	8012fce <_dtoa_r+0x97e>
 8012f7c:	9b06      	ldr	r3, [sp, #24]
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	dd02      	ble.n	8012f88 <_dtoa_r+0x938>
 8012f82:	9b02      	ldr	r3, [sp, #8]
 8012f84:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8012f88:	f88b a000 	strb.w	sl, [fp]
 8012f8c:	e639      	b.n	8012c02 <_dtoa_r+0x5b2>
 8012f8e:	4628      	mov	r0, r5
 8012f90:	e7bd      	b.n	8012f0e <_dtoa_r+0x8be>
 8012f92:	2201      	movs	r2, #1
 8012f94:	e7e2      	b.n	8012f5c <_dtoa_r+0x90c>
 8012f96:	9b06      	ldr	r3, [sp, #24]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	db04      	blt.n	8012fa6 <_dtoa_r+0x956>
 8012f9c:	9907      	ldr	r1, [sp, #28]
 8012f9e:	430b      	orrs	r3, r1
 8012fa0:	9908      	ldr	r1, [sp, #32]
 8012fa2:	430b      	orrs	r3, r1
 8012fa4:	d120      	bne.n	8012fe8 <_dtoa_r+0x998>
 8012fa6:	2a00      	cmp	r2, #0
 8012fa8:	ddee      	ble.n	8012f88 <_dtoa_r+0x938>
 8012faa:	9901      	ldr	r1, [sp, #4]
 8012fac:	2201      	movs	r2, #1
 8012fae:	4648      	mov	r0, r9
 8012fb0:	f000 fbb2 	bl	8013718 <__lshift>
 8012fb4:	4621      	mov	r1, r4
 8012fb6:	9001      	str	r0, [sp, #4]
 8012fb8:	f000 fc1a 	bl	80137f0 <__mcmp>
 8012fbc:	2800      	cmp	r0, #0
 8012fbe:	dc03      	bgt.n	8012fc8 <_dtoa_r+0x978>
 8012fc0:	d1e2      	bne.n	8012f88 <_dtoa_r+0x938>
 8012fc2:	f01a 0f01 	tst.w	sl, #1
 8012fc6:	d0df      	beq.n	8012f88 <_dtoa_r+0x938>
 8012fc8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012fcc:	d1d9      	bne.n	8012f82 <_dtoa_r+0x932>
 8012fce:	2339      	movs	r3, #57	@ 0x39
 8012fd0:	f88b 3000 	strb.w	r3, [fp]
 8012fd4:	4633      	mov	r3, r6
 8012fd6:	461e      	mov	r6, r3
 8012fd8:	3b01      	subs	r3, #1
 8012fda:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012fde:	2a39      	cmp	r2, #57	@ 0x39
 8012fe0:	d053      	beq.n	801308a <_dtoa_r+0xa3a>
 8012fe2:	3201      	adds	r2, #1
 8012fe4:	701a      	strb	r2, [r3, #0]
 8012fe6:	e60c      	b.n	8012c02 <_dtoa_r+0x5b2>
 8012fe8:	2a00      	cmp	r2, #0
 8012fea:	dd07      	ble.n	8012ffc <_dtoa_r+0x9ac>
 8012fec:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012ff0:	d0ed      	beq.n	8012fce <_dtoa_r+0x97e>
 8012ff2:	f10a 0301 	add.w	r3, sl, #1
 8012ff6:	f88b 3000 	strb.w	r3, [fp]
 8012ffa:	e602      	b.n	8012c02 <_dtoa_r+0x5b2>
 8012ffc:	9b05      	ldr	r3, [sp, #20]
 8012ffe:	9a05      	ldr	r2, [sp, #20]
 8013000:	f803 ac01 	strb.w	sl, [r3, #-1]
 8013004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013006:	4293      	cmp	r3, r2
 8013008:	d029      	beq.n	801305e <_dtoa_r+0xa0e>
 801300a:	9901      	ldr	r1, [sp, #4]
 801300c:	2300      	movs	r3, #0
 801300e:	220a      	movs	r2, #10
 8013010:	4648      	mov	r0, r9
 8013012:	f000 f9d5 	bl	80133c0 <__multadd>
 8013016:	45a8      	cmp	r8, r5
 8013018:	9001      	str	r0, [sp, #4]
 801301a:	f04f 0300 	mov.w	r3, #0
 801301e:	f04f 020a 	mov.w	r2, #10
 8013022:	4641      	mov	r1, r8
 8013024:	4648      	mov	r0, r9
 8013026:	d107      	bne.n	8013038 <_dtoa_r+0x9e8>
 8013028:	f000 f9ca 	bl	80133c0 <__multadd>
 801302c:	4680      	mov	r8, r0
 801302e:	4605      	mov	r5, r0
 8013030:	9b05      	ldr	r3, [sp, #20]
 8013032:	3301      	adds	r3, #1
 8013034:	9305      	str	r3, [sp, #20]
 8013036:	e775      	b.n	8012f24 <_dtoa_r+0x8d4>
 8013038:	f000 f9c2 	bl	80133c0 <__multadd>
 801303c:	4629      	mov	r1, r5
 801303e:	4680      	mov	r8, r0
 8013040:	2300      	movs	r3, #0
 8013042:	220a      	movs	r2, #10
 8013044:	4648      	mov	r0, r9
 8013046:	f000 f9bb 	bl	80133c0 <__multadd>
 801304a:	4605      	mov	r5, r0
 801304c:	e7f0      	b.n	8013030 <_dtoa_r+0x9e0>
 801304e:	f1bb 0f00 	cmp.w	fp, #0
 8013052:	bfcc      	ite	gt
 8013054:	465e      	movgt	r6, fp
 8013056:	2601      	movle	r6, #1
 8013058:	443e      	add	r6, r7
 801305a:	f04f 0800 	mov.w	r8, #0
 801305e:	9901      	ldr	r1, [sp, #4]
 8013060:	2201      	movs	r2, #1
 8013062:	4648      	mov	r0, r9
 8013064:	f000 fb58 	bl	8013718 <__lshift>
 8013068:	4621      	mov	r1, r4
 801306a:	9001      	str	r0, [sp, #4]
 801306c:	f000 fbc0 	bl	80137f0 <__mcmp>
 8013070:	2800      	cmp	r0, #0
 8013072:	dcaf      	bgt.n	8012fd4 <_dtoa_r+0x984>
 8013074:	d102      	bne.n	801307c <_dtoa_r+0xa2c>
 8013076:	f01a 0f01 	tst.w	sl, #1
 801307a:	d1ab      	bne.n	8012fd4 <_dtoa_r+0x984>
 801307c:	4633      	mov	r3, r6
 801307e:	461e      	mov	r6, r3
 8013080:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013084:	2a30      	cmp	r2, #48	@ 0x30
 8013086:	d0fa      	beq.n	801307e <_dtoa_r+0xa2e>
 8013088:	e5bb      	b.n	8012c02 <_dtoa_r+0x5b2>
 801308a:	429f      	cmp	r7, r3
 801308c:	d1a3      	bne.n	8012fd6 <_dtoa_r+0x986>
 801308e:	9b04      	ldr	r3, [sp, #16]
 8013090:	3301      	adds	r3, #1
 8013092:	9304      	str	r3, [sp, #16]
 8013094:	2331      	movs	r3, #49	@ 0x31
 8013096:	703b      	strb	r3, [r7, #0]
 8013098:	e5b3      	b.n	8012c02 <_dtoa_r+0x5b2>
 801309a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801309c:	4f16      	ldr	r7, [pc, #88]	@ (80130f8 <_dtoa_r+0xaa8>)
 801309e:	b11b      	cbz	r3, 80130a8 <_dtoa_r+0xa58>
 80130a0:	f107 0308 	add.w	r3, r7, #8
 80130a4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80130a6:	6013      	str	r3, [r2, #0]
 80130a8:	4638      	mov	r0, r7
 80130aa:	b011      	add	sp, #68	@ 0x44
 80130ac:	ecbd 8b02 	vpop	{d8}
 80130b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130b4:	9b07      	ldr	r3, [sp, #28]
 80130b6:	2b01      	cmp	r3, #1
 80130b8:	f77f ae36 	ble.w	8012d28 <_dtoa_r+0x6d8>
 80130bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80130be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80130c0:	2001      	movs	r0, #1
 80130c2:	e656      	b.n	8012d72 <_dtoa_r+0x722>
 80130c4:	f1bb 0f00 	cmp.w	fp, #0
 80130c8:	f77f aed7 	ble.w	8012e7a <_dtoa_r+0x82a>
 80130cc:	463e      	mov	r6, r7
 80130ce:	9801      	ldr	r0, [sp, #4]
 80130d0:	4621      	mov	r1, r4
 80130d2:	f7ff fa34 	bl	801253e <quorem>
 80130d6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80130da:	f806 ab01 	strb.w	sl, [r6], #1
 80130de:	1bf2      	subs	r2, r6, r7
 80130e0:	4593      	cmp	fp, r2
 80130e2:	ddb4      	ble.n	801304e <_dtoa_r+0x9fe>
 80130e4:	9901      	ldr	r1, [sp, #4]
 80130e6:	2300      	movs	r3, #0
 80130e8:	220a      	movs	r2, #10
 80130ea:	4648      	mov	r0, r9
 80130ec:	f000 f968 	bl	80133c0 <__multadd>
 80130f0:	9001      	str	r0, [sp, #4]
 80130f2:	e7ec      	b.n	80130ce <_dtoa_r+0xa7e>
 80130f4:	08015086 	.word	0x08015086
 80130f8:	0801500a 	.word	0x0801500a

080130fc <_free_r>:
 80130fc:	b538      	push	{r3, r4, r5, lr}
 80130fe:	4605      	mov	r5, r0
 8013100:	2900      	cmp	r1, #0
 8013102:	d041      	beq.n	8013188 <_free_r+0x8c>
 8013104:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013108:	1f0c      	subs	r4, r1, #4
 801310a:	2b00      	cmp	r3, #0
 801310c:	bfb8      	it	lt
 801310e:	18e4      	addlt	r4, r4, r3
 8013110:	f000 f8e8 	bl	80132e4 <__malloc_lock>
 8013114:	4a1d      	ldr	r2, [pc, #116]	@ (801318c <_free_r+0x90>)
 8013116:	6813      	ldr	r3, [r2, #0]
 8013118:	b933      	cbnz	r3, 8013128 <_free_r+0x2c>
 801311a:	6063      	str	r3, [r4, #4]
 801311c:	6014      	str	r4, [r2, #0]
 801311e:	4628      	mov	r0, r5
 8013120:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013124:	f000 b8e4 	b.w	80132f0 <__malloc_unlock>
 8013128:	42a3      	cmp	r3, r4
 801312a:	d908      	bls.n	801313e <_free_r+0x42>
 801312c:	6820      	ldr	r0, [r4, #0]
 801312e:	1821      	adds	r1, r4, r0
 8013130:	428b      	cmp	r3, r1
 8013132:	bf01      	itttt	eq
 8013134:	6819      	ldreq	r1, [r3, #0]
 8013136:	685b      	ldreq	r3, [r3, #4]
 8013138:	1809      	addeq	r1, r1, r0
 801313a:	6021      	streq	r1, [r4, #0]
 801313c:	e7ed      	b.n	801311a <_free_r+0x1e>
 801313e:	461a      	mov	r2, r3
 8013140:	685b      	ldr	r3, [r3, #4]
 8013142:	b10b      	cbz	r3, 8013148 <_free_r+0x4c>
 8013144:	42a3      	cmp	r3, r4
 8013146:	d9fa      	bls.n	801313e <_free_r+0x42>
 8013148:	6811      	ldr	r1, [r2, #0]
 801314a:	1850      	adds	r0, r2, r1
 801314c:	42a0      	cmp	r0, r4
 801314e:	d10b      	bne.n	8013168 <_free_r+0x6c>
 8013150:	6820      	ldr	r0, [r4, #0]
 8013152:	4401      	add	r1, r0
 8013154:	1850      	adds	r0, r2, r1
 8013156:	4283      	cmp	r3, r0
 8013158:	6011      	str	r1, [r2, #0]
 801315a:	d1e0      	bne.n	801311e <_free_r+0x22>
 801315c:	6818      	ldr	r0, [r3, #0]
 801315e:	685b      	ldr	r3, [r3, #4]
 8013160:	6053      	str	r3, [r2, #4]
 8013162:	4408      	add	r0, r1
 8013164:	6010      	str	r0, [r2, #0]
 8013166:	e7da      	b.n	801311e <_free_r+0x22>
 8013168:	d902      	bls.n	8013170 <_free_r+0x74>
 801316a:	230c      	movs	r3, #12
 801316c:	602b      	str	r3, [r5, #0]
 801316e:	e7d6      	b.n	801311e <_free_r+0x22>
 8013170:	6820      	ldr	r0, [r4, #0]
 8013172:	1821      	adds	r1, r4, r0
 8013174:	428b      	cmp	r3, r1
 8013176:	bf04      	itt	eq
 8013178:	6819      	ldreq	r1, [r3, #0]
 801317a:	685b      	ldreq	r3, [r3, #4]
 801317c:	6063      	str	r3, [r4, #4]
 801317e:	bf04      	itt	eq
 8013180:	1809      	addeq	r1, r1, r0
 8013182:	6021      	streq	r1, [r4, #0]
 8013184:	6054      	str	r4, [r2, #4]
 8013186:	e7ca      	b.n	801311e <_free_r+0x22>
 8013188:	bd38      	pop	{r3, r4, r5, pc}
 801318a:	bf00      	nop
 801318c:	2400120c 	.word	0x2400120c

08013190 <malloc>:
 8013190:	4b02      	ldr	r3, [pc, #8]	@ (801319c <malloc+0xc>)
 8013192:	4601      	mov	r1, r0
 8013194:	6818      	ldr	r0, [r3, #0]
 8013196:	f000 b825 	b.w	80131e4 <_malloc_r>
 801319a:	bf00      	nop
 801319c:	24000054 	.word	0x24000054

080131a0 <sbrk_aligned>:
 80131a0:	b570      	push	{r4, r5, r6, lr}
 80131a2:	4e0f      	ldr	r6, [pc, #60]	@ (80131e0 <sbrk_aligned+0x40>)
 80131a4:	460c      	mov	r4, r1
 80131a6:	6831      	ldr	r1, [r6, #0]
 80131a8:	4605      	mov	r5, r0
 80131aa:	b911      	cbnz	r1, 80131b2 <sbrk_aligned+0x12>
 80131ac:	f000 fe46 	bl	8013e3c <_sbrk_r>
 80131b0:	6030      	str	r0, [r6, #0]
 80131b2:	4621      	mov	r1, r4
 80131b4:	4628      	mov	r0, r5
 80131b6:	f000 fe41 	bl	8013e3c <_sbrk_r>
 80131ba:	1c43      	adds	r3, r0, #1
 80131bc:	d103      	bne.n	80131c6 <sbrk_aligned+0x26>
 80131be:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80131c2:	4620      	mov	r0, r4
 80131c4:	bd70      	pop	{r4, r5, r6, pc}
 80131c6:	1cc4      	adds	r4, r0, #3
 80131c8:	f024 0403 	bic.w	r4, r4, #3
 80131cc:	42a0      	cmp	r0, r4
 80131ce:	d0f8      	beq.n	80131c2 <sbrk_aligned+0x22>
 80131d0:	1a21      	subs	r1, r4, r0
 80131d2:	4628      	mov	r0, r5
 80131d4:	f000 fe32 	bl	8013e3c <_sbrk_r>
 80131d8:	3001      	adds	r0, #1
 80131da:	d1f2      	bne.n	80131c2 <sbrk_aligned+0x22>
 80131dc:	e7ef      	b.n	80131be <sbrk_aligned+0x1e>
 80131de:	bf00      	nop
 80131e0:	24001208 	.word	0x24001208

080131e4 <_malloc_r>:
 80131e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80131e8:	1ccd      	adds	r5, r1, #3
 80131ea:	f025 0503 	bic.w	r5, r5, #3
 80131ee:	3508      	adds	r5, #8
 80131f0:	2d0c      	cmp	r5, #12
 80131f2:	bf38      	it	cc
 80131f4:	250c      	movcc	r5, #12
 80131f6:	2d00      	cmp	r5, #0
 80131f8:	4606      	mov	r6, r0
 80131fa:	db01      	blt.n	8013200 <_malloc_r+0x1c>
 80131fc:	42a9      	cmp	r1, r5
 80131fe:	d904      	bls.n	801320a <_malloc_r+0x26>
 8013200:	230c      	movs	r3, #12
 8013202:	6033      	str	r3, [r6, #0]
 8013204:	2000      	movs	r0, #0
 8013206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801320a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80132e0 <_malloc_r+0xfc>
 801320e:	f000 f869 	bl	80132e4 <__malloc_lock>
 8013212:	f8d8 3000 	ldr.w	r3, [r8]
 8013216:	461c      	mov	r4, r3
 8013218:	bb44      	cbnz	r4, 801326c <_malloc_r+0x88>
 801321a:	4629      	mov	r1, r5
 801321c:	4630      	mov	r0, r6
 801321e:	f7ff ffbf 	bl	80131a0 <sbrk_aligned>
 8013222:	1c43      	adds	r3, r0, #1
 8013224:	4604      	mov	r4, r0
 8013226:	d158      	bne.n	80132da <_malloc_r+0xf6>
 8013228:	f8d8 4000 	ldr.w	r4, [r8]
 801322c:	4627      	mov	r7, r4
 801322e:	2f00      	cmp	r7, #0
 8013230:	d143      	bne.n	80132ba <_malloc_r+0xd6>
 8013232:	2c00      	cmp	r4, #0
 8013234:	d04b      	beq.n	80132ce <_malloc_r+0xea>
 8013236:	6823      	ldr	r3, [r4, #0]
 8013238:	4639      	mov	r1, r7
 801323a:	4630      	mov	r0, r6
 801323c:	eb04 0903 	add.w	r9, r4, r3
 8013240:	f000 fdfc 	bl	8013e3c <_sbrk_r>
 8013244:	4581      	cmp	r9, r0
 8013246:	d142      	bne.n	80132ce <_malloc_r+0xea>
 8013248:	6821      	ldr	r1, [r4, #0]
 801324a:	1a6d      	subs	r5, r5, r1
 801324c:	4629      	mov	r1, r5
 801324e:	4630      	mov	r0, r6
 8013250:	f7ff ffa6 	bl	80131a0 <sbrk_aligned>
 8013254:	3001      	adds	r0, #1
 8013256:	d03a      	beq.n	80132ce <_malloc_r+0xea>
 8013258:	6823      	ldr	r3, [r4, #0]
 801325a:	442b      	add	r3, r5
 801325c:	6023      	str	r3, [r4, #0]
 801325e:	f8d8 3000 	ldr.w	r3, [r8]
 8013262:	685a      	ldr	r2, [r3, #4]
 8013264:	bb62      	cbnz	r2, 80132c0 <_malloc_r+0xdc>
 8013266:	f8c8 7000 	str.w	r7, [r8]
 801326a:	e00f      	b.n	801328c <_malloc_r+0xa8>
 801326c:	6822      	ldr	r2, [r4, #0]
 801326e:	1b52      	subs	r2, r2, r5
 8013270:	d420      	bmi.n	80132b4 <_malloc_r+0xd0>
 8013272:	2a0b      	cmp	r2, #11
 8013274:	d917      	bls.n	80132a6 <_malloc_r+0xc2>
 8013276:	1961      	adds	r1, r4, r5
 8013278:	42a3      	cmp	r3, r4
 801327a:	6025      	str	r5, [r4, #0]
 801327c:	bf18      	it	ne
 801327e:	6059      	strne	r1, [r3, #4]
 8013280:	6863      	ldr	r3, [r4, #4]
 8013282:	bf08      	it	eq
 8013284:	f8c8 1000 	streq.w	r1, [r8]
 8013288:	5162      	str	r2, [r4, r5]
 801328a:	604b      	str	r3, [r1, #4]
 801328c:	4630      	mov	r0, r6
 801328e:	f000 f82f 	bl	80132f0 <__malloc_unlock>
 8013292:	f104 000b 	add.w	r0, r4, #11
 8013296:	1d23      	adds	r3, r4, #4
 8013298:	f020 0007 	bic.w	r0, r0, #7
 801329c:	1ac2      	subs	r2, r0, r3
 801329e:	bf1c      	itt	ne
 80132a0:	1a1b      	subne	r3, r3, r0
 80132a2:	50a3      	strne	r3, [r4, r2]
 80132a4:	e7af      	b.n	8013206 <_malloc_r+0x22>
 80132a6:	6862      	ldr	r2, [r4, #4]
 80132a8:	42a3      	cmp	r3, r4
 80132aa:	bf0c      	ite	eq
 80132ac:	f8c8 2000 	streq.w	r2, [r8]
 80132b0:	605a      	strne	r2, [r3, #4]
 80132b2:	e7eb      	b.n	801328c <_malloc_r+0xa8>
 80132b4:	4623      	mov	r3, r4
 80132b6:	6864      	ldr	r4, [r4, #4]
 80132b8:	e7ae      	b.n	8013218 <_malloc_r+0x34>
 80132ba:	463c      	mov	r4, r7
 80132bc:	687f      	ldr	r7, [r7, #4]
 80132be:	e7b6      	b.n	801322e <_malloc_r+0x4a>
 80132c0:	461a      	mov	r2, r3
 80132c2:	685b      	ldr	r3, [r3, #4]
 80132c4:	42a3      	cmp	r3, r4
 80132c6:	d1fb      	bne.n	80132c0 <_malloc_r+0xdc>
 80132c8:	2300      	movs	r3, #0
 80132ca:	6053      	str	r3, [r2, #4]
 80132cc:	e7de      	b.n	801328c <_malloc_r+0xa8>
 80132ce:	230c      	movs	r3, #12
 80132d0:	6033      	str	r3, [r6, #0]
 80132d2:	4630      	mov	r0, r6
 80132d4:	f000 f80c 	bl	80132f0 <__malloc_unlock>
 80132d8:	e794      	b.n	8013204 <_malloc_r+0x20>
 80132da:	6005      	str	r5, [r0, #0]
 80132dc:	e7d6      	b.n	801328c <_malloc_r+0xa8>
 80132de:	bf00      	nop
 80132e0:	2400120c 	.word	0x2400120c

080132e4 <__malloc_lock>:
 80132e4:	4801      	ldr	r0, [pc, #4]	@ (80132ec <__malloc_lock+0x8>)
 80132e6:	f7ff b920 	b.w	801252a <__retarget_lock_acquire_recursive>
 80132ea:	bf00      	nop
 80132ec:	24001204 	.word	0x24001204

080132f0 <__malloc_unlock>:
 80132f0:	4801      	ldr	r0, [pc, #4]	@ (80132f8 <__malloc_unlock+0x8>)
 80132f2:	f7ff b91b 	b.w	801252c <__retarget_lock_release_recursive>
 80132f6:	bf00      	nop
 80132f8:	24001204 	.word	0x24001204

080132fc <_Balloc>:
 80132fc:	b570      	push	{r4, r5, r6, lr}
 80132fe:	69c6      	ldr	r6, [r0, #28]
 8013300:	4604      	mov	r4, r0
 8013302:	460d      	mov	r5, r1
 8013304:	b976      	cbnz	r6, 8013324 <_Balloc+0x28>
 8013306:	2010      	movs	r0, #16
 8013308:	f7ff ff42 	bl	8013190 <malloc>
 801330c:	4602      	mov	r2, r0
 801330e:	61e0      	str	r0, [r4, #28]
 8013310:	b920      	cbnz	r0, 801331c <_Balloc+0x20>
 8013312:	4b18      	ldr	r3, [pc, #96]	@ (8013374 <_Balloc+0x78>)
 8013314:	4818      	ldr	r0, [pc, #96]	@ (8013378 <_Balloc+0x7c>)
 8013316:	216b      	movs	r1, #107	@ 0x6b
 8013318:	f000 fdae 	bl	8013e78 <__assert_func>
 801331c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013320:	6006      	str	r6, [r0, #0]
 8013322:	60c6      	str	r6, [r0, #12]
 8013324:	69e6      	ldr	r6, [r4, #28]
 8013326:	68f3      	ldr	r3, [r6, #12]
 8013328:	b183      	cbz	r3, 801334c <_Balloc+0x50>
 801332a:	69e3      	ldr	r3, [r4, #28]
 801332c:	68db      	ldr	r3, [r3, #12]
 801332e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013332:	b9b8      	cbnz	r0, 8013364 <_Balloc+0x68>
 8013334:	2101      	movs	r1, #1
 8013336:	fa01 f605 	lsl.w	r6, r1, r5
 801333a:	1d72      	adds	r2, r6, #5
 801333c:	0092      	lsls	r2, r2, #2
 801333e:	4620      	mov	r0, r4
 8013340:	f000 fdb8 	bl	8013eb4 <_calloc_r>
 8013344:	b160      	cbz	r0, 8013360 <_Balloc+0x64>
 8013346:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801334a:	e00e      	b.n	801336a <_Balloc+0x6e>
 801334c:	2221      	movs	r2, #33	@ 0x21
 801334e:	2104      	movs	r1, #4
 8013350:	4620      	mov	r0, r4
 8013352:	f000 fdaf 	bl	8013eb4 <_calloc_r>
 8013356:	69e3      	ldr	r3, [r4, #28]
 8013358:	60f0      	str	r0, [r6, #12]
 801335a:	68db      	ldr	r3, [r3, #12]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d1e4      	bne.n	801332a <_Balloc+0x2e>
 8013360:	2000      	movs	r0, #0
 8013362:	bd70      	pop	{r4, r5, r6, pc}
 8013364:	6802      	ldr	r2, [r0, #0]
 8013366:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801336a:	2300      	movs	r3, #0
 801336c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013370:	e7f7      	b.n	8013362 <_Balloc+0x66>
 8013372:	bf00      	nop
 8013374:	08015017 	.word	0x08015017
 8013378:	08015097 	.word	0x08015097

0801337c <_Bfree>:
 801337c:	b570      	push	{r4, r5, r6, lr}
 801337e:	69c6      	ldr	r6, [r0, #28]
 8013380:	4605      	mov	r5, r0
 8013382:	460c      	mov	r4, r1
 8013384:	b976      	cbnz	r6, 80133a4 <_Bfree+0x28>
 8013386:	2010      	movs	r0, #16
 8013388:	f7ff ff02 	bl	8013190 <malloc>
 801338c:	4602      	mov	r2, r0
 801338e:	61e8      	str	r0, [r5, #28]
 8013390:	b920      	cbnz	r0, 801339c <_Bfree+0x20>
 8013392:	4b09      	ldr	r3, [pc, #36]	@ (80133b8 <_Bfree+0x3c>)
 8013394:	4809      	ldr	r0, [pc, #36]	@ (80133bc <_Bfree+0x40>)
 8013396:	218f      	movs	r1, #143	@ 0x8f
 8013398:	f000 fd6e 	bl	8013e78 <__assert_func>
 801339c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80133a0:	6006      	str	r6, [r0, #0]
 80133a2:	60c6      	str	r6, [r0, #12]
 80133a4:	b13c      	cbz	r4, 80133b6 <_Bfree+0x3a>
 80133a6:	69eb      	ldr	r3, [r5, #28]
 80133a8:	6862      	ldr	r2, [r4, #4]
 80133aa:	68db      	ldr	r3, [r3, #12]
 80133ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80133b0:	6021      	str	r1, [r4, #0]
 80133b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80133b6:	bd70      	pop	{r4, r5, r6, pc}
 80133b8:	08015017 	.word	0x08015017
 80133bc:	08015097 	.word	0x08015097

080133c0 <__multadd>:
 80133c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133c4:	690d      	ldr	r5, [r1, #16]
 80133c6:	4607      	mov	r7, r0
 80133c8:	460c      	mov	r4, r1
 80133ca:	461e      	mov	r6, r3
 80133cc:	f101 0c14 	add.w	ip, r1, #20
 80133d0:	2000      	movs	r0, #0
 80133d2:	f8dc 3000 	ldr.w	r3, [ip]
 80133d6:	b299      	uxth	r1, r3
 80133d8:	fb02 6101 	mla	r1, r2, r1, r6
 80133dc:	0c1e      	lsrs	r6, r3, #16
 80133de:	0c0b      	lsrs	r3, r1, #16
 80133e0:	fb02 3306 	mla	r3, r2, r6, r3
 80133e4:	b289      	uxth	r1, r1
 80133e6:	3001      	adds	r0, #1
 80133e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80133ec:	4285      	cmp	r5, r0
 80133ee:	f84c 1b04 	str.w	r1, [ip], #4
 80133f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80133f6:	dcec      	bgt.n	80133d2 <__multadd+0x12>
 80133f8:	b30e      	cbz	r6, 801343e <__multadd+0x7e>
 80133fa:	68a3      	ldr	r3, [r4, #8]
 80133fc:	42ab      	cmp	r3, r5
 80133fe:	dc19      	bgt.n	8013434 <__multadd+0x74>
 8013400:	6861      	ldr	r1, [r4, #4]
 8013402:	4638      	mov	r0, r7
 8013404:	3101      	adds	r1, #1
 8013406:	f7ff ff79 	bl	80132fc <_Balloc>
 801340a:	4680      	mov	r8, r0
 801340c:	b928      	cbnz	r0, 801341a <__multadd+0x5a>
 801340e:	4602      	mov	r2, r0
 8013410:	4b0c      	ldr	r3, [pc, #48]	@ (8013444 <__multadd+0x84>)
 8013412:	480d      	ldr	r0, [pc, #52]	@ (8013448 <__multadd+0x88>)
 8013414:	21ba      	movs	r1, #186	@ 0xba
 8013416:	f000 fd2f 	bl	8013e78 <__assert_func>
 801341a:	6922      	ldr	r2, [r4, #16]
 801341c:	3202      	adds	r2, #2
 801341e:	f104 010c 	add.w	r1, r4, #12
 8013422:	0092      	lsls	r2, r2, #2
 8013424:	300c      	adds	r0, #12
 8013426:	f000 fd19 	bl	8013e5c <memcpy>
 801342a:	4621      	mov	r1, r4
 801342c:	4638      	mov	r0, r7
 801342e:	f7ff ffa5 	bl	801337c <_Bfree>
 8013432:	4644      	mov	r4, r8
 8013434:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013438:	3501      	adds	r5, #1
 801343a:	615e      	str	r6, [r3, #20]
 801343c:	6125      	str	r5, [r4, #16]
 801343e:	4620      	mov	r0, r4
 8013440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013444:	08015086 	.word	0x08015086
 8013448:	08015097 	.word	0x08015097

0801344c <__hi0bits>:
 801344c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013450:	4603      	mov	r3, r0
 8013452:	bf36      	itet	cc
 8013454:	0403      	lslcc	r3, r0, #16
 8013456:	2000      	movcs	r0, #0
 8013458:	2010      	movcc	r0, #16
 801345a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801345e:	bf3c      	itt	cc
 8013460:	021b      	lslcc	r3, r3, #8
 8013462:	3008      	addcc	r0, #8
 8013464:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013468:	bf3c      	itt	cc
 801346a:	011b      	lslcc	r3, r3, #4
 801346c:	3004      	addcc	r0, #4
 801346e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013472:	bf3c      	itt	cc
 8013474:	009b      	lslcc	r3, r3, #2
 8013476:	3002      	addcc	r0, #2
 8013478:	2b00      	cmp	r3, #0
 801347a:	db05      	blt.n	8013488 <__hi0bits+0x3c>
 801347c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013480:	f100 0001 	add.w	r0, r0, #1
 8013484:	bf08      	it	eq
 8013486:	2020      	moveq	r0, #32
 8013488:	4770      	bx	lr

0801348a <__lo0bits>:
 801348a:	6803      	ldr	r3, [r0, #0]
 801348c:	4602      	mov	r2, r0
 801348e:	f013 0007 	ands.w	r0, r3, #7
 8013492:	d00b      	beq.n	80134ac <__lo0bits+0x22>
 8013494:	07d9      	lsls	r1, r3, #31
 8013496:	d421      	bmi.n	80134dc <__lo0bits+0x52>
 8013498:	0798      	lsls	r0, r3, #30
 801349a:	bf49      	itett	mi
 801349c:	085b      	lsrmi	r3, r3, #1
 801349e:	089b      	lsrpl	r3, r3, #2
 80134a0:	2001      	movmi	r0, #1
 80134a2:	6013      	strmi	r3, [r2, #0]
 80134a4:	bf5c      	itt	pl
 80134a6:	6013      	strpl	r3, [r2, #0]
 80134a8:	2002      	movpl	r0, #2
 80134aa:	4770      	bx	lr
 80134ac:	b299      	uxth	r1, r3
 80134ae:	b909      	cbnz	r1, 80134b4 <__lo0bits+0x2a>
 80134b0:	0c1b      	lsrs	r3, r3, #16
 80134b2:	2010      	movs	r0, #16
 80134b4:	b2d9      	uxtb	r1, r3
 80134b6:	b909      	cbnz	r1, 80134bc <__lo0bits+0x32>
 80134b8:	3008      	adds	r0, #8
 80134ba:	0a1b      	lsrs	r3, r3, #8
 80134bc:	0719      	lsls	r1, r3, #28
 80134be:	bf04      	itt	eq
 80134c0:	091b      	lsreq	r3, r3, #4
 80134c2:	3004      	addeq	r0, #4
 80134c4:	0799      	lsls	r1, r3, #30
 80134c6:	bf04      	itt	eq
 80134c8:	089b      	lsreq	r3, r3, #2
 80134ca:	3002      	addeq	r0, #2
 80134cc:	07d9      	lsls	r1, r3, #31
 80134ce:	d403      	bmi.n	80134d8 <__lo0bits+0x4e>
 80134d0:	085b      	lsrs	r3, r3, #1
 80134d2:	f100 0001 	add.w	r0, r0, #1
 80134d6:	d003      	beq.n	80134e0 <__lo0bits+0x56>
 80134d8:	6013      	str	r3, [r2, #0]
 80134da:	4770      	bx	lr
 80134dc:	2000      	movs	r0, #0
 80134de:	4770      	bx	lr
 80134e0:	2020      	movs	r0, #32
 80134e2:	4770      	bx	lr

080134e4 <__i2b>:
 80134e4:	b510      	push	{r4, lr}
 80134e6:	460c      	mov	r4, r1
 80134e8:	2101      	movs	r1, #1
 80134ea:	f7ff ff07 	bl	80132fc <_Balloc>
 80134ee:	4602      	mov	r2, r0
 80134f0:	b928      	cbnz	r0, 80134fe <__i2b+0x1a>
 80134f2:	4b05      	ldr	r3, [pc, #20]	@ (8013508 <__i2b+0x24>)
 80134f4:	4805      	ldr	r0, [pc, #20]	@ (801350c <__i2b+0x28>)
 80134f6:	f240 1145 	movw	r1, #325	@ 0x145
 80134fa:	f000 fcbd 	bl	8013e78 <__assert_func>
 80134fe:	2301      	movs	r3, #1
 8013500:	6144      	str	r4, [r0, #20]
 8013502:	6103      	str	r3, [r0, #16]
 8013504:	bd10      	pop	{r4, pc}
 8013506:	bf00      	nop
 8013508:	08015086 	.word	0x08015086
 801350c:	08015097 	.word	0x08015097

08013510 <__multiply>:
 8013510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013514:	4614      	mov	r4, r2
 8013516:	690a      	ldr	r2, [r1, #16]
 8013518:	6923      	ldr	r3, [r4, #16]
 801351a:	429a      	cmp	r2, r3
 801351c:	bfa8      	it	ge
 801351e:	4623      	movge	r3, r4
 8013520:	460f      	mov	r7, r1
 8013522:	bfa4      	itt	ge
 8013524:	460c      	movge	r4, r1
 8013526:	461f      	movge	r7, r3
 8013528:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801352c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013530:	68a3      	ldr	r3, [r4, #8]
 8013532:	6861      	ldr	r1, [r4, #4]
 8013534:	eb0a 0609 	add.w	r6, sl, r9
 8013538:	42b3      	cmp	r3, r6
 801353a:	b085      	sub	sp, #20
 801353c:	bfb8      	it	lt
 801353e:	3101      	addlt	r1, #1
 8013540:	f7ff fedc 	bl	80132fc <_Balloc>
 8013544:	b930      	cbnz	r0, 8013554 <__multiply+0x44>
 8013546:	4602      	mov	r2, r0
 8013548:	4b44      	ldr	r3, [pc, #272]	@ (801365c <__multiply+0x14c>)
 801354a:	4845      	ldr	r0, [pc, #276]	@ (8013660 <__multiply+0x150>)
 801354c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013550:	f000 fc92 	bl	8013e78 <__assert_func>
 8013554:	f100 0514 	add.w	r5, r0, #20
 8013558:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801355c:	462b      	mov	r3, r5
 801355e:	2200      	movs	r2, #0
 8013560:	4543      	cmp	r3, r8
 8013562:	d321      	bcc.n	80135a8 <__multiply+0x98>
 8013564:	f107 0114 	add.w	r1, r7, #20
 8013568:	f104 0214 	add.w	r2, r4, #20
 801356c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013570:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013574:	9302      	str	r3, [sp, #8]
 8013576:	1b13      	subs	r3, r2, r4
 8013578:	3b15      	subs	r3, #21
 801357a:	f023 0303 	bic.w	r3, r3, #3
 801357e:	3304      	adds	r3, #4
 8013580:	f104 0715 	add.w	r7, r4, #21
 8013584:	42ba      	cmp	r2, r7
 8013586:	bf38      	it	cc
 8013588:	2304      	movcc	r3, #4
 801358a:	9301      	str	r3, [sp, #4]
 801358c:	9b02      	ldr	r3, [sp, #8]
 801358e:	9103      	str	r1, [sp, #12]
 8013590:	428b      	cmp	r3, r1
 8013592:	d80c      	bhi.n	80135ae <__multiply+0x9e>
 8013594:	2e00      	cmp	r6, #0
 8013596:	dd03      	ble.n	80135a0 <__multiply+0x90>
 8013598:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801359c:	2b00      	cmp	r3, #0
 801359e:	d05b      	beq.n	8013658 <__multiply+0x148>
 80135a0:	6106      	str	r6, [r0, #16]
 80135a2:	b005      	add	sp, #20
 80135a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135a8:	f843 2b04 	str.w	r2, [r3], #4
 80135ac:	e7d8      	b.n	8013560 <__multiply+0x50>
 80135ae:	f8b1 a000 	ldrh.w	sl, [r1]
 80135b2:	f1ba 0f00 	cmp.w	sl, #0
 80135b6:	d024      	beq.n	8013602 <__multiply+0xf2>
 80135b8:	f104 0e14 	add.w	lr, r4, #20
 80135bc:	46a9      	mov	r9, r5
 80135be:	f04f 0c00 	mov.w	ip, #0
 80135c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80135c6:	f8d9 3000 	ldr.w	r3, [r9]
 80135ca:	fa1f fb87 	uxth.w	fp, r7
 80135ce:	b29b      	uxth	r3, r3
 80135d0:	fb0a 330b 	mla	r3, sl, fp, r3
 80135d4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80135d8:	f8d9 7000 	ldr.w	r7, [r9]
 80135dc:	4463      	add	r3, ip
 80135de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80135e2:	fb0a c70b 	mla	r7, sl, fp, ip
 80135e6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80135ea:	b29b      	uxth	r3, r3
 80135ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80135f0:	4572      	cmp	r2, lr
 80135f2:	f849 3b04 	str.w	r3, [r9], #4
 80135f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80135fa:	d8e2      	bhi.n	80135c2 <__multiply+0xb2>
 80135fc:	9b01      	ldr	r3, [sp, #4]
 80135fe:	f845 c003 	str.w	ip, [r5, r3]
 8013602:	9b03      	ldr	r3, [sp, #12]
 8013604:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013608:	3104      	adds	r1, #4
 801360a:	f1b9 0f00 	cmp.w	r9, #0
 801360e:	d021      	beq.n	8013654 <__multiply+0x144>
 8013610:	682b      	ldr	r3, [r5, #0]
 8013612:	f104 0c14 	add.w	ip, r4, #20
 8013616:	46ae      	mov	lr, r5
 8013618:	f04f 0a00 	mov.w	sl, #0
 801361c:	f8bc b000 	ldrh.w	fp, [ip]
 8013620:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013624:	fb09 770b 	mla	r7, r9, fp, r7
 8013628:	4457      	add	r7, sl
 801362a:	b29b      	uxth	r3, r3
 801362c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013630:	f84e 3b04 	str.w	r3, [lr], #4
 8013634:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013638:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801363c:	f8be 3000 	ldrh.w	r3, [lr]
 8013640:	fb09 330a 	mla	r3, r9, sl, r3
 8013644:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013648:	4562      	cmp	r2, ip
 801364a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801364e:	d8e5      	bhi.n	801361c <__multiply+0x10c>
 8013650:	9f01      	ldr	r7, [sp, #4]
 8013652:	51eb      	str	r3, [r5, r7]
 8013654:	3504      	adds	r5, #4
 8013656:	e799      	b.n	801358c <__multiply+0x7c>
 8013658:	3e01      	subs	r6, #1
 801365a:	e79b      	b.n	8013594 <__multiply+0x84>
 801365c:	08015086 	.word	0x08015086
 8013660:	08015097 	.word	0x08015097

08013664 <__pow5mult>:
 8013664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013668:	4615      	mov	r5, r2
 801366a:	f012 0203 	ands.w	r2, r2, #3
 801366e:	4607      	mov	r7, r0
 8013670:	460e      	mov	r6, r1
 8013672:	d007      	beq.n	8013684 <__pow5mult+0x20>
 8013674:	4c25      	ldr	r4, [pc, #148]	@ (801370c <__pow5mult+0xa8>)
 8013676:	3a01      	subs	r2, #1
 8013678:	2300      	movs	r3, #0
 801367a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801367e:	f7ff fe9f 	bl	80133c0 <__multadd>
 8013682:	4606      	mov	r6, r0
 8013684:	10ad      	asrs	r5, r5, #2
 8013686:	d03d      	beq.n	8013704 <__pow5mult+0xa0>
 8013688:	69fc      	ldr	r4, [r7, #28]
 801368a:	b97c      	cbnz	r4, 80136ac <__pow5mult+0x48>
 801368c:	2010      	movs	r0, #16
 801368e:	f7ff fd7f 	bl	8013190 <malloc>
 8013692:	4602      	mov	r2, r0
 8013694:	61f8      	str	r0, [r7, #28]
 8013696:	b928      	cbnz	r0, 80136a4 <__pow5mult+0x40>
 8013698:	4b1d      	ldr	r3, [pc, #116]	@ (8013710 <__pow5mult+0xac>)
 801369a:	481e      	ldr	r0, [pc, #120]	@ (8013714 <__pow5mult+0xb0>)
 801369c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80136a0:	f000 fbea 	bl	8013e78 <__assert_func>
 80136a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80136a8:	6004      	str	r4, [r0, #0]
 80136aa:	60c4      	str	r4, [r0, #12]
 80136ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80136b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80136b4:	b94c      	cbnz	r4, 80136ca <__pow5mult+0x66>
 80136b6:	f240 2171 	movw	r1, #625	@ 0x271
 80136ba:	4638      	mov	r0, r7
 80136bc:	f7ff ff12 	bl	80134e4 <__i2b>
 80136c0:	2300      	movs	r3, #0
 80136c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80136c6:	4604      	mov	r4, r0
 80136c8:	6003      	str	r3, [r0, #0]
 80136ca:	f04f 0900 	mov.w	r9, #0
 80136ce:	07eb      	lsls	r3, r5, #31
 80136d0:	d50a      	bpl.n	80136e8 <__pow5mult+0x84>
 80136d2:	4631      	mov	r1, r6
 80136d4:	4622      	mov	r2, r4
 80136d6:	4638      	mov	r0, r7
 80136d8:	f7ff ff1a 	bl	8013510 <__multiply>
 80136dc:	4631      	mov	r1, r6
 80136de:	4680      	mov	r8, r0
 80136e0:	4638      	mov	r0, r7
 80136e2:	f7ff fe4b 	bl	801337c <_Bfree>
 80136e6:	4646      	mov	r6, r8
 80136e8:	106d      	asrs	r5, r5, #1
 80136ea:	d00b      	beq.n	8013704 <__pow5mult+0xa0>
 80136ec:	6820      	ldr	r0, [r4, #0]
 80136ee:	b938      	cbnz	r0, 8013700 <__pow5mult+0x9c>
 80136f0:	4622      	mov	r2, r4
 80136f2:	4621      	mov	r1, r4
 80136f4:	4638      	mov	r0, r7
 80136f6:	f7ff ff0b 	bl	8013510 <__multiply>
 80136fa:	6020      	str	r0, [r4, #0]
 80136fc:	f8c0 9000 	str.w	r9, [r0]
 8013700:	4604      	mov	r4, r0
 8013702:	e7e4      	b.n	80136ce <__pow5mult+0x6a>
 8013704:	4630      	mov	r0, r6
 8013706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801370a:	bf00      	nop
 801370c:	080150f0 	.word	0x080150f0
 8013710:	08015017 	.word	0x08015017
 8013714:	08015097 	.word	0x08015097

08013718 <__lshift>:
 8013718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801371c:	460c      	mov	r4, r1
 801371e:	6849      	ldr	r1, [r1, #4]
 8013720:	6923      	ldr	r3, [r4, #16]
 8013722:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013726:	68a3      	ldr	r3, [r4, #8]
 8013728:	4607      	mov	r7, r0
 801372a:	4691      	mov	r9, r2
 801372c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013730:	f108 0601 	add.w	r6, r8, #1
 8013734:	42b3      	cmp	r3, r6
 8013736:	db0b      	blt.n	8013750 <__lshift+0x38>
 8013738:	4638      	mov	r0, r7
 801373a:	f7ff fddf 	bl	80132fc <_Balloc>
 801373e:	4605      	mov	r5, r0
 8013740:	b948      	cbnz	r0, 8013756 <__lshift+0x3e>
 8013742:	4602      	mov	r2, r0
 8013744:	4b28      	ldr	r3, [pc, #160]	@ (80137e8 <__lshift+0xd0>)
 8013746:	4829      	ldr	r0, [pc, #164]	@ (80137ec <__lshift+0xd4>)
 8013748:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801374c:	f000 fb94 	bl	8013e78 <__assert_func>
 8013750:	3101      	adds	r1, #1
 8013752:	005b      	lsls	r3, r3, #1
 8013754:	e7ee      	b.n	8013734 <__lshift+0x1c>
 8013756:	2300      	movs	r3, #0
 8013758:	f100 0114 	add.w	r1, r0, #20
 801375c:	f100 0210 	add.w	r2, r0, #16
 8013760:	4618      	mov	r0, r3
 8013762:	4553      	cmp	r3, sl
 8013764:	db33      	blt.n	80137ce <__lshift+0xb6>
 8013766:	6920      	ldr	r0, [r4, #16]
 8013768:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801376c:	f104 0314 	add.w	r3, r4, #20
 8013770:	f019 091f 	ands.w	r9, r9, #31
 8013774:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013778:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801377c:	d02b      	beq.n	80137d6 <__lshift+0xbe>
 801377e:	f1c9 0e20 	rsb	lr, r9, #32
 8013782:	468a      	mov	sl, r1
 8013784:	2200      	movs	r2, #0
 8013786:	6818      	ldr	r0, [r3, #0]
 8013788:	fa00 f009 	lsl.w	r0, r0, r9
 801378c:	4310      	orrs	r0, r2
 801378e:	f84a 0b04 	str.w	r0, [sl], #4
 8013792:	f853 2b04 	ldr.w	r2, [r3], #4
 8013796:	459c      	cmp	ip, r3
 8013798:	fa22 f20e 	lsr.w	r2, r2, lr
 801379c:	d8f3      	bhi.n	8013786 <__lshift+0x6e>
 801379e:	ebac 0304 	sub.w	r3, ip, r4
 80137a2:	3b15      	subs	r3, #21
 80137a4:	f023 0303 	bic.w	r3, r3, #3
 80137a8:	3304      	adds	r3, #4
 80137aa:	f104 0015 	add.w	r0, r4, #21
 80137ae:	4584      	cmp	ip, r0
 80137b0:	bf38      	it	cc
 80137b2:	2304      	movcc	r3, #4
 80137b4:	50ca      	str	r2, [r1, r3]
 80137b6:	b10a      	cbz	r2, 80137bc <__lshift+0xa4>
 80137b8:	f108 0602 	add.w	r6, r8, #2
 80137bc:	3e01      	subs	r6, #1
 80137be:	4638      	mov	r0, r7
 80137c0:	612e      	str	r6, [r5, #16]
 80137c2:	4621      	mov	r1, r4
 80137c4:	f7ff fdda 	bl	801337c <_Bfree>
 80137c8:	4628      	mov	r0, r5
 80137ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80137d2:	3301      	adds	r3, #1
 80137d4:	e7c5      	b.n	8013762 <__lshift+0x4a>
 80137d6:	3904      	subs	r1, #4
 80137d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80137dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80137e0:	459c      	cmp	ip, r3
 80137e2:	d8f9      	bhi.n	80137d8 <__lshift+0xc0>
 80137e4:	e7ea      	b.n	80137bc <__lshift+0xa4>
 80137e6:	bf00      	nop
 80137e8:	08015086 	.word	0x08015086
 80137ec:	08015097 	.word	0x08015097

080137f0 <__mcmp>:
 80137f0:	690a      	ldr	r2, [r1, #16]
 80137f2:	4603      	mov	r3, r0
 80137f4:	6900      	ldr	r0, [r0, #16]
 80137f6:	1a80      	subs	r0, r0, r2
 80137f8:	b530      	push	{r4, r5, lr}
 80137fa:	d10e      	bne.n	801381a <__mcmp+0x2a>
 80137fc:	3314      	adds	r3, #20
 80137fe:	3114      	adds	r1, #20
 8013800:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013804:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013808:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801380c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013810:	4295      	cmp	r5, r2
 8013812:	d003      	beq.n	801381c <__mcmp+0x2c>
 8013814:	d205      	bcs.n	8013822 <__mcmp+0x32>
 8013816:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801381a:	bd30      	pop	{r4, r5, pc}
 801381c:	42a3      	cmp	r3, r4
 801381e:	d3f3      	bcc.n	8013808 <__mcmp+0x18>
 8013820:	e7fb      	b.n	801381a <__mcmp+0x2a>
 8013822:	2001      	movs	r0, #1
 8013824:	e7f9      	b.n	801381a <__mcmp+0x2a>
	...

08013828 <__mdiff>:
 8013828:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801382c:	4689      	mov	r9, r1
 801382e:	4606      	mov	r6, r0
 8013830:	4611      	mov	r1, r2
 8013832:	4648      	mov	r0, r9
 8013834:	4614      	mov	r4, r2
 8013836:	f7ff ffdb 	bl	80137f0 <__mcmp>
 801383a:	1e05      	subs	r5, r0, #0
 801383c:	d112      	bne.n	8013864 <__mdiff+0x3c>
 801383e:	4629      	mov	r1, r5
 8013840:	4630      	mov	r0, r6
 8013842:	f7ff fd5b 	bl	80132fc <_Balloc>
 8013846:	4602      	mov	r2, r0
 8013848:	b928      	cbnz	r0, 8013856 <__mdiff+0x2e>
 801384a:	4b3f      	ldr	r3, [pc, #252]	@ (8013948 <__mdiff+0x120>)
 801384c:	f240 2137 	movw	r1, #567	@ 0x237
 8013850:	483e      	ldr	r0, [pc, #248]	@ (801394c <__mdiff+0x124>)
 8013852:	f000 fb11 	bl	8013e78 <__assert_func>
 8013856:	2301      	movs	r3, #1
 8013858:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801385c:	4610      	mov	r0, r2
 801385e:	b003      	add	sp, #12
 8013860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013864:	bfbc      	itt	lt
 8013866:	464b      	movlt	r3, r9
 8013868:	46a1      	movlt	r9, r4
 801386a:	4630      	mov	r0, r6
 801386c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013870:	bfba      	itte	lt
 8013872:	461c      	movlt	r4, r3
 8013874:	2501      	movlt	r5, #1
 8013876:	2500      	movge	r5, #0
 8013878:	f7ff fd40 	bl	80132fc <_Balloc>
 801387c:	4602      	mov	r2, r0
 801387e:	b918      	cbnz	r0, 8013888 <__mdiff+0x60>
 8013880:	4b31      	ldr	r3, [pc, #196]	@ (8013948 <__mdiff+0x120>)
 8013882:	f240 2145 	movw	r1, #581	@ 0x245
 8013886:	e7e3      	b.n	8013850 <__mdiff+0x28>
 8013888:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801388c:	6926      	ldr	r6, [r4, #16]
 801388e:	60c5      	str	r5, [r0, #12]
 8013890:	f109 0310 	add.w	r3, r9, #16
 8013894:	f109 0514 	add.w	r5, r9, #20
 8013898:	f104 0e14 	add.w	lr, r4, #20
 801389c:	f100 0b14 	add.w	fp, r0, #20
 80138a0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80138a4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80138a8:	9301      	str	r3, [sp, #4]
 80138aa:	46d9      	mov	r9, fp
 80138ac:	f04f 0c00 	mov.w	ip, #0
 80138b0:	9b01      	ldr	r3, [sp, #4]
 80138b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80138b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80138ba:	9301      	str	r3, [sp, #4]
 80138bc:	fa1f f38a 	uxth.w	r3, sl
 80138c0:	4619      	mov	r1, r3
 80138c2:	b283      	uxth	r3, r0
 80138c4:	1acb      	subs	r3, r1, r3
 80138c6:	0c00      	lsrs	r0, r0, #16
 80138c8:	4463      	add	r3, ip
 80138ca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80138ce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80138d2:	b29b      	uxth	r3, r3
 80138d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80138d8:	4576      	cmp	r6, lr
 80138da:	f849 3b04 	str.w	r3, [r9], #4
 80138de:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80138e2:	d8e5      	bhi.n	80138b0 <__mdiff+0x88>
 80138e4:	1b33      	subs	r3, r6, r4
 80138e6:	3b15      	subs	r3, #21
 80138e8:	f023 0303 	bic.w	r3, r3, #3
 80138ec:	3415      	adds	r4, #21
 80138ee:	3304      	adds	r3, #4
 80138f0:	42a6      	cmp	r6, r4
 80138f2:	bf38      	it	cc
 80138f4:	2304      	movcc	r3, #4
 80138f6:	441d      	add	r5, r3
 80138f8:	445b      	add	r3, fp
 80138fa:	461e      	mov	r6, r3
 80138fc:	462c      	mov	r4, r5
 80138fe:	4544      	cmp	r4, r8
 8013900:	d30e      	bcc.n	8013920 <__mdiff+0xf8>
 8013902:	f108 0103 	add.w	r1, r8, #3
 8013906:	1b49      	subs	r1, r1, r5
 8013908:	f021 0103 	bic.w	r1, r1, #3
 801390c:	3d03      	subs	r5, #3
 801390e:	45a8      	cmp	r8, r5
 8013910:	bf38      	it	cc
 8013912:	2100      	movcc	r1, #0
 8013914:	440b      	add	r3, r1
 8013916:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801391a:	b191      	cbz	r1, 8013942 <__mdiff+0x11a>
 801391c:	6117      	str	r7, [r2, #16]
 801391e:	e79d      	b.n	801385c <__mdiff+0x34>
 8013920:	f854 1b04 	ldr.w	r1, [r4], #4
 8013924:	46e6      	mov	lr, ip
 8013926:	0c08      	lsrs	r0, r1, #16
 8013928:	fa1c fc81 	uxtah	ip, ip, r1
 801392c:	4471      	add	r1, lr
 801392e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013932:	b289      	uxth	r1, r1
 8013934:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013938:	f846 1b04 	str.w	r1, [r6], #4
 801393c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013940:	e7dd      	b.n	80138fe <__mdiff+0xd6>
 8013942:	3f01      	subs	r7, #1
 8013944:	e7e7      	b.n	8013916 <__mdiff+0xee>
 8013946:	bf00      	nop
 8013948:	08015086 	.word	0x08015086
 801394c:	08015097 	.word	0x08015097

08013950 <__d2b>:
 8013950:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013954:	460f      	mov	r7, r1
 8013956:	2101      	movs	r1, #1
 8013958:	ec59 8b10 	vmov	r8, r9, d0
 801395c:	4616      	mov	r6, r2
 801395e:	f7ff fccd 	bl	80132fc <_Balloc>
 8013962:	4604      	mov	r4, r0
 8013964:	b930      	cbnz	r0, 8013974 <__d2b+0x24>
 8013966:	4602      	mov	r2, r0
 8013968:	4b23      	ldr	r3, [pc, #140]	@ (80139f8 <__d2b+0xa8>)
 801396a:	4824      	ldr	r0, [pc, #144]	@ (80139fc <__d2b+0xac>)
 801396c:	f240 310f 	movw	r1, #783	@ 0x30f
 8013970:	f000 fa82 	bl	8013e78 <__assert_func>
 8013974:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013978:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801397c:	b10d      	cbz	r5, 8013982 <__d2b+0x32>
 801397e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013982:	9301      	str	r3, [sp, #4]
 8013984:	f1b8 0300 	subs.w	r3, r8, #0
 8013988:	d023      	beq.n	80139d2 <__d2b+0x82>
 801398a:	4668      	mov	r0, sp
 801398c:	9300      	str	r3, [sp, #0]
 801398e:	f7ff fd7c 	bl	801348a <__lo0bits>
 8013992:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013996:	b1d0      	cbz	r0, 80139ce <__d2b+0x7e>
 8013998:	f1c0 0320 	rsb	r3, r0, #32
 801399c:	fa02 f303 	lsl.w	r3, r2, r3
 80139a0:	430b      	orrs	r3, r1
 80139a2:	40c2      	lsrs	r2, r0
 80139a4:	6163      	str	r3, [r4, #20]
 80139a6:	9201      	str	r2, [sp, #4]
 80139a8:	9b01      	ldr	r3, [sp, #4]
 80139aa:	61a3      	str	r3, [r4, #24]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	bf0c      	ite	eq
 80139b0:	2201      	moveq	r2, #1
 80139b2:	2202      	movne	r2, #2
 80139b4:	6122      	str	r2, [r4, #16]
 80139b6:	b1a5      	cbz	r5, 80139e2 <__d2b+0x92>
 80139b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80139bc:	4405      	add	r5, r0
 80139be:	603d      	str	r5, [r7, #0]
 80139c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80139c4:	6030      	str	r0, [r6, #0]
 80139c6:	4620      	mov	r0, r4
 80139c8:	b003      	add	sp, #12
 80139ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80139ce:	6161      	str	r1, [r4, #20]
 80139d0:	e7ea      	b.n	80139a8 <__d2b+0x58>
 80139d2:	a801      	add	r0, sp, #4
 80139d4:	f7ff fd59 	bl	801348a <__lo0bits>
 80139d8:	9b01      	ldr	r3, [sp, #4]
 80139da:	6163      	str	r3, [r4, #20]
 80139dc:	3020      	adds	r0, #32
 80139de:	2201      	movs	r2, #1
 80139e0:	e7e8      	b.n	80139b4 <__d2b+0x64>
 80139e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80139e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80139ea:	6038      	str	r0, [r7, #0]
 80139ec:	6918      	ldr	r0, [r3, #16]
 80139ee:	f7ff fd2d 	bl	801344c <__hi0bits>
 80139f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80139f6:	e7e5      	b.n	80139c4 <__d2b+0x74>
 80139f8:	08015086 	.word	0x08015086
 80139fc:	08015097 	.word	0x08015097

08013a00 <__ssputs_r>:
 8013a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a04:	688e      	ldr	r6, [r1, #8]
 8013a06:	461f      	mov	r7, r3
 8013a08:	42be      	cmp	r6, r7
 8013a0a:	680b      	ldr	r3, [r1, #0]
 8013a0c:	4682      	mov	sl, r0
 8013a0e:	460c      	mov	r4, r1
 8013a10:	4690      	mov	r8, r2
 8013a12:	d82d      	bhi.n	8013a70 <__ssputs_r+0x70>
 8013a14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013a18:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013a1c:	d026      	beq.n	8013a6c <__ssputs_r+0x6c>
 8013a1e:	6965      	ldr	r5, [r4, #20]
 8013a20:	6909      	ldr	r1, [r1, #16]
 8013a22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013a26:	eba3 0901 	sub.w	r9, r3, r1
 8013a2a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013a2e:	1c7b      	adds	r3, r7, #1
 8013a30:	444b      	add	r3, r9
 8013a32:	106d      	asrs	r5, r5, #1
 8013a34:	429d      	cmp	r5, r3
 8013a36:	bf38      	it	cc
 8013a38:	461d      	movcc	r5, r3
 8013a3a:	0553      	lsls	r3, r2, #21
 8013a3c:	d527      	bpl.n	8013a8e <__ssputs_r+0x8e>
 8013a3e:	4629      	mov	r1, r5
 8013a40:	f7ff fbd0 	bl	80131e4 <_malloc_r>
 8013a44:	4606      	mov	r6, r0
 8013a46:	b360      	cbz	r0, 8013aa2 <__ssputs_r+0xa2>
 8013a48:	6921      	ldr	r1, [r4, #16]
 8013a4a:	464a      	mov	r2, r9
 8013a4c:	f000 fa06 	bl	8013e5c <memcpy>
 8013a50:	89a3      	ldrh	r3, [r4, #12]
 8013a52:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013a56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013a5a:	81a3      	strh	r3, [r4, #12]
 8013a5c:	6126      	str	r6, [r4, #16]
 8013a5e:	6165      	str	r5, [r4, #20]
 8013a60:	444e      	add	r6, r9
 8013a62:	eba5 0509 	sub.w	r5, r5, r9
 8013a66:	6026      	str	r6, [r4, #0]
 8013a68:	60a5      	str	r5, [r4, #8]
 8013a6a:	463e      	mov	r6, r7
 8013a6c:	42be      	cmp	r6, r7
 8013a6e:	d900      	bls.n	8013a72 <__ssputs_r+0x72>
 8013a70:	463e      	mov	r6, r7
 8013a72:	6820      	ldr	r0, [r4, #0]
 8013a74:	4632      	mov	r2, r6
 8013a76:	4641      	mov	r1, r8
 8013a78:	f000 f9c6 	bl	8013e08 <memmove>
 8013a7c:	68a3      	ldr	r3, [r4, #8]
 8013a7e:	1b9b      	subs	r3, r3, r6
 8013a80:	60a3      	str	r3, [r4, #8]
 8013a82:	6823      	ldr	r3, [r4, #0]
 8013a84:	4433      	add	r3, r6
 8013a86:	6023      	str	r3, [r4, #0]
 8013a88:	2000      	movs	r0, #0
 8013a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a8e:	462a      	mov	r2, r5
 8013a90:	f000 fa36 	bl	8013f00 <_realloc_r>
 8013a94:	4606      	mov	r6, r0
 8013a96:	2800      	cmp	r0, #0
 8013a98:	d1e0      	bne.n	8013a5c <__ssputs_r+0x5c>
 8013a9a:	6921      	ldr	r1, [r4, #16]
 8013a9c:	4650      	mov	r0, sl
 8013a9e:	f7ff fb2d 	bl	80130fc <_free_r>
 8013aa2:	230c      	movs	r3, #12
 8013aa4:	f8ca 3000 	str.w	r3, [sl]
 8013aa8:	89a3      	ldrh	r3, [r4, #12]
 8013aaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013aae:	81a3      	strh	r3, [r4, #12]
 8013ab0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013ab4:	e7e9      	b.n	8013a8a <__ssputs_r+0x8a>
	...

08013ab8 <_svfiprintf_r>:
 8013ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013abc:	4698      	mov	r8, r3
 8013abe:	898b      	ldrh	r3, [r1, #12]
 8013ac0:	061b      	lsls	r3, r3, #24
 8013ac2:	b09d      	sub	sp, #116	@ 0x74
 8013ac4:	4607      	mov	r7, r0
 8013ac6:	460d      	mov	r5, r1
 8013ac8:	4614      	mov	r4, r2
 8013aca:	d510      	bpl.n	8013aee <_svfiprintf_r+0x36>
 8013acc:	690b      	ldr	r3, [r1, #16]
 8013ace:	b973      	cbnz	r3, 8013aee <_svfiprintf_r+0x36>
 8013ad0:	2140      	movs	r1, #64	@ 0x40
 8013ad2:	f7ff fb87 	bl	80131e4 <_malloc_r>
 8013ad6:	6028      	str	r0, [r5, #0]
 8013ad8:	6128      	str	r0, [r5, #16]
 8013ada:	b930      	cbnz	r0, 8013aea <_svfiprintf_r+0x32>
 8013adc:	230c      	movs	r3, #12
 8013ade:	603b      	str	r3, [r7, #0]
 8013ae0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013ae4:	b01d      	add	sp, #116	@ 0x74
 8013ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013aea:	2340      	movs	r3, #64	@ 0x40
 8013aec:	616b      	str	r3, [r5, #20]
 8013aee:	2300      	movs	r3, #0
 8013af0:	9309      	str	r3, [sp, #36]	@ 0x24
 8013af2:	2320      	movs	r3, #32
 8013af4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013af8:	f8cd 800c 	str.w	r8, [sp, #12]
 8013afc:	2330      	movs	r3, #48	@ 0x30
 8013afe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013c9c <_svfiprintf_r+0x1e4>
 8013b02:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013b06:	f04f 0901 	mov.w	r9, #1
 8013b0a:	4623      	mov	r3, r4
 8013b0c:	469a      	mov	sl, r3
 8013b0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b12:	b10a      	cbz	r2, 8013b18 <_svfiprintf_r+0x60>
 8013b14:	2a25      	cmp	r2, #37	@ 0x25
 8013b16:	d1f9      	bne.n	8013b0c <_svfiprintf_r+0x54>
 8013b18:	ebba 0b04 	subs.w	fp, sl, r4
 8013b1c:	d00b      	beq.n	8013b36 <_svfiprintf_r+0x7e>
 8013b1e:	465b      	mov	r3, fp
 8013b20:	4622      	mov	r2, r4
 8013b22:	4629      	mov	r1, r5
 8013b24:	4638      	mov	r0, r7
 8013b26:	f7ff ff6b 	bl	8013a00 <__ssputs_r>
 8013b2a:	3001      	adds	r0, #1
 8013b2c:	f000 80a7 	beq.w	8013c7e <_svfiprintf_r+0x1c6>
 8013b30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013b32:	445a      	add	r2, fp
 8013b34:	9209      	str	r2, [sp, #36]	@ 0x24
 8013b36:	f89a 3000 	ldrb.w	r3, [sl]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	f000 809f 	beq.w	8013c7e <_svfiprintf_r+0x1c6>
 8013b40:	2300      	movs	r3, #0
 8013b42:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013b46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013b4a:	f10a 0a01 	add.w	sl, sl, #1
 8013b4e:	9304      	str	r3, [sp, #16]
 8013b50:	9307      	str	r3, [sp, #28]
 8013b52:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013b56:	931a      	str	r3, [sp, #104]	@ 0x68
 8013b58:	4654      	mov	r4, sl
 8013b5a:	2205      	movs	r2, #5
 8013b5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b60:	484e      	ldr	r0, [pc, #312]	@ (8013c9c <_svfiprintf_r+0x1e4>)
 8013b62:	f7ec fbe5 	bl	8000330 <memchr>
 8013b66:	9a04      	ldr	r2, [sp, #16]
 8013b68:	b9d8      	cbnz	r0, 8013ba2 <_svfiprintf_r+0xea>
 8013b6a:	06d0      	lsls	r0, r2, #27
 8013b6c:	bf44      	itt	mi
 8013b6e:	2320      	movmi	r3, #32
 8013b70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013b74:	0711      	lsls	r1, r2, #28
 8013b76:	bf44      	itt	mi
 8013b78:	232b      	movmi	r3, #43	@ 0x2b
 8013b7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013b7e:	f89a 3000 	ldrb.w	r3, [sl]
 8013b82:	2b2a      	cmp	r3, #42	@ 0x2a
 8013b84:	d015      	beq.n	8013bb2 <_svfiprintf_r+0xfa>
 8013b86:	9a07      	ldr	r2, [sp, #28]
 8013b88:	4654      	mov	r4, sl
 8013b8a:	2000      	movs	r0, #0
 8013b8c:	f04f 0c0a 	mov.w	ip, #10
 8013b90:	4621      	mov	r1, r4
 8013b92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013b96:	3b30      	subs	r3, #48	@ 0x30
 8013b98:	2b09      	cmp	r3, #9
 8013b9a:	d94b      	bls.n	8013c34 <_svfiprintf_r+0x17c>
 8013b9c:	b1b0      	cbz	r0, 8013bcc <_svfiprintf_r+0x114>
 8013b9e:	9207      	str	r2, [sp, #28]
 8013ba0:	e014      	b.n	8013bcc <_svfiprintf_r+0x114>
 8013ba2:	eba0 0308 	sub.w	r3, r0, r8
 8013ba6:	fa09 f303 	lsl.w	r3, r9, r3
 8013baa:	4313      	orrs	r3, r2
 8013bac:	9304      	str	r3, [sp, #16]
 8013bae:	46a2      	mov	sl, r4
 8013bb0:	e7d2      	b.n	8013b58 <_svfiprintf_r+0xa0>
 8013bb2:	9b03      	ldr	r3, [sp, #12]
 8013bb4:	1d19      	adds	r1, r3, #4
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	9103      	str	r1, [sp, #12]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	bfbb      	ittet	lt
 8013bbe:	425b      	neglt	r3, r3
 8013bc0:	f042 0202 	orrlt.w	r2, r2, #2
 8013bc4:	9307      	strge	r3, [sp, #28]
 8013bc6:	9307      	strlt	r3, [sp, #28]
 8013bc8:	bfb8      	it	lt
 8013bca:	9204      	strlt	r2, [sp, #16]
 8013bcc:	7823      	ldrb	r3, [r4, #0]
 8013bce:	2b2e      	cmp	r3, #46	@ 0x2e
 8013bd0:	d10a      	bne.n	8013be8 <_svfiprintf_r+0x130>
 8013bd2:	7863      	ldrb	r3, [r4, #1]
 8013bd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8013bd6:	d132      	bne.n	8013c3e <_svfiprintf_r+0x186>
 8013bd8:	9b03      	ldr	r3, [sp, #12]
 8013bda:	1d1a      	adds	r2, r3, #4
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	9203      	str	r2, [sp, #12]
 8013be0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013be4:	3402      	adds	r4, #2
 8013be6:	9305      	str	r3, [sp, #20]
 8013be8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013cac <_svfiprintf_r+0x1f4>
 8013bec:	7821      	ldrb	r1, [r4, #0]
 8013bee:	2203      	movs	r2, #3
 8013bf0:	4650      	mov	r0, sl
 8013bf2:	f7ec fb9d 	bl	8000330 <memchr>
 8013bf6:	b138      	cbz	r0, 8013c08 <_svfiprintf_r+0x150>
 8013bf8:	9b04      	ldr	r3, [sp, #16]
 8013bfa:	eba0 000a 	sub.w	r0, r0, sl
 8013bfe:	2240      	movs	r2, #64	@ 0x40
 8013c00:	4082      	lsls	r2, r0
 8013c02:	4313      	orrs	r3, r2
 8013c04:	3401      	adds	r4, #1
 8013c06:	9304      	str	r3, [sp, #16]
 8013c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c0c:	4824      	ldr	r0, [pc, #144]	@ (8013ca0 <_svfiprintf_r+0x1e8>)
 8013c0e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013c12:	2206      	movs	r2, #6
 8013c14:	f7ec fb8c 	bl	8000330 <memchr>
 8013c18:	2800      	cmp	r0, #0
 8013c1a:	d036      	beq.n	8013c8a <_svfiprintf_r+0x1d2>
 8013c1c:	4b21      	ldr	r3, [pc, #132]	@ (8013ca4 <_svfiprintf_r+0x1ec>)
 8013c1e:	bb1b      	cbnz	r3, 8013c68 <_svfiprintf_r+0x1b0>
 8013c20:	9b03      	ldr	r3, [sp, #12]
 8013c22:	3307      	adds	r3, #7
 8013c24:	f023 0307 	bic.w	r3, r3, #7
 8013c28:	3308      	adds	r3, #8
 8013c2a:	9303      	str	r3, [sp, #12]
 8013c2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c2e:	4433      	add	r3, r6
 8013c30:	9309      	str	r3, [sp, #36]	@ 0x24
 8013c32:	e76a      	b.n	8013b0a <_svfiprintf_r+0x52>
 8013c34:	fb0c 3202 	mla	r2, ip, r2, r3
 8013c38:	460c      	mov	r4, r1
 8013c3a:	2001      	movs	r0, #1
 8013c3c:	e7a8      	b.n	8013b90 <_svfiprintf_r+0xd8>
 8013c3e:	2300      	movs	r3, #0
 8013c40:	3401      	adds	r4, #1
 8013c42:	9305      	str	r3, [sp, #20]
 8013c44:	4619      	mov	r1, r3
 8013c46:	f04f 0c0a 	mov.w	ip, #10
 8013c4a:	4620      	mov	r0, r4
 8013c4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c50:	3a30      	subs	r2, #48	@ 0x30
 8013c52:	2a09      	cmp	r2, #9
 8013c54:	d903      	bls.n	8013c5e <_svfiprintf_r+0x1a6>
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d0c6      	beq.n	8013be8 <_svfiprintf_r+0x130>
 8013c5a:	9105      	str	r1, [sp, #20]
 8013c5c:	e7c4      	b.n	8013be8 <_svfiprintf_r+0x130>
 8013c5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013c62:	4604      	mov	r4, r0
 8013c64:	2301      	movs	r3, #1
 8013c66:	e7f0      	b.n	8013c4a <_svfiprintf_r+0x192>
 8013c68:	ab03      	add	r3, sp, #12
 8013c6a:	9300      	str	r3, [sp, #0]
 8013c6c:	462a      	mov	r2, r5
 8013c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8013ca8 <_svfiprintf_r+0x1f0>)
 8013c70:	a904      	add	r1, sp, #16
 8013c72:	4638      	mov	r0, r7
 8013c74:	f7fd ff00 	bl	8011a78 <_printf_float>
 8013c78:	1c42      	adds	r2, r0, #1
 8013c7a:	4606      	mov	r6, r0
 8013c7c:	d1d6      	bne.n	8013c2c <_svfiprintf_r+0x174>
 8013c7e:	89ab      	ldrh	r3, [r5, #12]
 8013c80:	065b      	lsls	r3, r3, #25
 8013c82:	f53f af2d 	bmi.w	8013ae0 <_svfiprintf_r+0x28>
 8013c86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013c88:	e72c      	b.n	8013ae4 <_svfiprintf_r+0x2c>
 8013c8a:	ab03      	add	r3, sp, #12
 8013c8c:	9300      	str	r3, [sp, #0]
 8013c8e:	462a      	mov	r2, r5
 8013c90:	4b05      	ldr	r3, [pc, #20]	@ (8013ca8 <_svfiprintf_r+0x1f0>)
 8013c92:	a904      	add	r1, sp, #16
 8013c94:	4638      	mov	r0, r7
 8013c96:	f7fe f977 	bl	8011f88 <_printf_i>
 8013c9a:	e7ed      	b.n	8013c78 <_svfiprintf_r+0x1c0>
 8013c9c:	080151f0 	.word	0x080151f0
 8013ca0:	080151fa 	.word	0x080151fa
 8013ca4:	08011a79 	.word	0x08011a79
 8013ca8:	08013a01 	.word	0x08013a01
 8013cac:	080151f6 	.word	0x080151f6

08013cb0 <__sflush_r>:
 8013cb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cb8:	0716      	lsls	r6, r2, #28
 8013cba:	4605      	mov	r5, r0
 8013cbc:	460c      	mov	r4, r1
 8013cbe:	d454      	bmi.n	8013d6a <__sflush_r+0xba>
 8013cc0:	684b      	ldr	r3, [r1, #4]
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	dc02      	bgt.n	8013ccc <__sflush_r+0x1c>
 8013cc6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	dd48      	ble.n	8013d5e <__sflush_r+0xae>
 8013ccc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013cce:	2e00      	cmp	r6, #0
 8013cd0:	d045      	beq.n	8013d5e <__sflush_r+0xae>
 8013cd2:	2300      	movs	r3, #0
 8013cd4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013cd8:	682f      	ldr	r7, [r5, #0]
 8013cda:	6a21      	ldr	r1, [r4, #32]
 8013cdc:	602b      	str	r3, [r5, #0]
 8013cde:	d030      	beq.n	8013d42 <__sflush_r+0x92>
 8013ce0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013ce2:	89a3      	ldrh	r3, [r4, #12]
 8013ce4:	0759      	lsls	r1, r3, #29
 8013ce6:	d505      	bpl.n	8013cf4 <__sflush_r+0x44>
 8013ce8:	6863      	ldr	r3, [r4, #4]
 8013cea:	1ad2      	subs	r2, r2, r3
 8013cec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013cee:	b10b      	cbz	r3, 8013cf4 <__sflush_r+0x44>
 8013cf0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013cf2:	1ad2      	subs	r2, r2, r3
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013cf8:	6a21      	ldr	r1, [r4, #32]
 8013cfa:	4628      	mov	r0, r5
 8013cfc:	47b0      	blx	r6
 8013cfe:	1c43      	adds	r3, r0, #1
 8013d00:	89a3      	ldrh	r3, [r4, #12]
 8013d02:	d106      	bne.n	8013d12 <__sflush_r+0x62>
 8013d04:	6829      	ldr	r1, [r5, #0]
 8013d06:	291d      	cmp	r1, #29
 8013d08:	d82b      	bhi.n	8013d62 <__sflush_r+0xb2>
 8013d0a:	4a2a      	ldr	r2, [pc, #168]	@ (8013db4 <__sflush_r+0x104>)
 8013d0c:	410a      	asrs	r2, r1
 8013d0e:	07d6      	lsls	r6, r2, #31
 8013d10:	d427      	bmi.n	8013d62 <__sflush_r+0xb2>
 8013d12:	2200      	movs	r2, #0
 8013d14:	6062      	str	r2, [r4, #4]
 8013d16:	04d9      	lsls	r1, r3, #19
 8013d18:	6922      	ldr	r2, [r4, #16]
 8013d1a:	6022      	str	r2, [r4, #0]
 8013d1c:	d504      	bpl.n	8013d28 <__sflush_r+0x78>
 8013d1e:	1c42      	adds	r2, r0, #1
 8013d20:	d101      	bne.n	8013d26 <__sflush_r+0x76>
 8013d22:	682b      	ldr	r3, [r5, #0]
 8013d24:	b903      	cbnz	r3, 8013d28 <__sflush_r+0x78>
 8013d26:	6560      	str	r0, [r4, #84]	@ 0x54
 8013d28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013d2a:	602f      	str	r7, [r5, #0]
 8013d2c:	b1b9      	cbz	r1, 8013d5e <__sflush_r+0xae>
 8013d2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013d32:	4299      	cmp	r1, r3
 8013d34:	d002      	beq.n	8013d3c <__sflush_r+0x8c>
 8013d36:	4628      	mov	r0, r5
 8013d38:	f7ff f9e0 	bl	80130fc <_free_r>
 8013d3c:	2300      	movs	r3, #0
 8013d3e:	6363      	str	r3, [r4, #52]	@ 0x34
 8013d40:	e00d      	b.n	8013d5e <__sflush_r+0xae>
 8013d42:	2301      	movs	r3, #1
 8013d44:	4628      	mov	r0, r5
 8013d46:	47b0      	blx	r6
 8013d48:	4602      	mov	r2, r0
 8013d4a:	1c50      	adds	r0, r2, #1
 8013d4c:	d1c9      	bne.n	8013ce2 <__sflush_r+0x32>
 8013d4e:	682b      	ldr	r3, [r5, #0]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d0c6      	beq.n	8013ce2 <__sflush_r+0x32>
 8013d54:	2b1d      	cmp	r3, #29
 8013d56:	d001      	beq.n	8013d5c <__sflush_r+0xac>
 8013d58:	2b16      	cmp	r3, #22
 8013d5a:	d11e      	bne.n	8013d9a <__sflush_r+0xea>
 8013d5c:	602f      	str	r7, [r5, #0]
 8013d5e:	2000      	movs	r0, #0
 8013d60:	e022      	b.n	8013da8 <__sflush_r+0xf8>
 8013d62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013d66:	b21b      	sxth	r3, r3
 8013d68:	e01b      	b.n	8013da2 <__sflush_r+0xf2>
 8013d6a:	690f      	ldr	r7, [r1, #16]
 8013d6c:	2f00      	cmp	r7, #0
 8013d6e:	d0f6      	beq.n	8013d5e <__sflush_r+0xae>
 8013d70:	0793      	lsls	r3, r2, #30
 8013d72:	680e      	ldr	r6, [r1, #0]
 8013d74:	bf08      	it	eq
 8013d76:	694b      	ldreq	r3, [r1, #20]
 8013d78:	600f      	str	r7, [r1, #0]
 8013d7a:	bf18      	it	ne
 8013d7c:	2300      	movne	r3, #0
 8013d7e:	eba6 0807 	sub.w	r8, r6, r7
 8013d82:	608b      	str	r3, [r1, #8]
 8013d84:	f1b8 0f00 	cmp.w	r8, #0
 8013d88:	dde9      	ble.n	8013d5e <__sflush_r+0xae>
 8013d8a:	6a21      	ldr	r1, [r4, #32]
 8013d8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013d8e:	4643      	mov	r3, r8
 8013d90:	463a      	mov	r2, r7
 8013d92:	4628      	mov	r0, r5
 8013d94:	47b0      	blx	r6
 8013d96:	2800      	cmp	r0, #0
 8013d98:	dc08      	bgt.n	8013dac <__sflush_r+0xfc>
 8013d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013da2:	81a3      	strh	r3, [r4, #12]
 8013da4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dac:	4407      	add	r7, r0
 8013dae:	eba8 0800 	sub.w	r8, r8, r0
 8013db2:	e7e7      	b.n	8013d84 <__sflush_r+0xd4>
 8013db4:	dfbffffe 	.word	0xdfbffffe

08013db8 <_fflush_r>:
 8013db8:	b538      	push	{r3, r4, r5, lr}
 8013dba:	690b      	ldr	r3, [r1, #16]
 8013dbc:	4605      	mov	r5, r0
 8013dbe:	460c      	mov	r4, r1
 8013dc0:	b913      	cbnz	r3, 8013dc8 <_fflush_r+0x10>
 8013dc2:	2500      	movs	r5, #0
 8013dc4:	4628      	mov	r0, r5
 8013dc6:	bd38      	pop	{r3, r4, r5, pc}
 8013dc8:	b118      	cbz	r0, 8013dd2 <_fflush_r+0x1a>
 8013dca:	6a03      	ldr	r3, [r0, #32]
 8013dcc:	b90b      	cbnz	r3, 8013dd2 <_fflush_r+0x1a>
 8013dce:	f7fe fa87 	bl	80122e0 <__sinit>
 8013dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d0f3      	beq.n	8013dc2 <_fflush_r+0xa>
 8013dda:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013ddc:	07d0      	lsls	r0, r2, #31
 8013dde:	d404      	bmi.n	8013dea <_fflush_r+0x32>
 8013de0:	0599      	lsls	r1, r3, #22
 8013de2:	d402      	bmi.n	8013dea <_fflush_r+0x32>
 8013de4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013de6:	f7fe fba0 	bl	801252a <__retarget_lock_acquire_recursive>
 8013dea:	4628      	mov	r0, r5
 8013dec:	4621      	mov	r1, r4
 8013dee:	f7ff ff5f 	bl	8013cb0 <__sflush_r>
 8013df2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013df4:	07da      	lsls	r2, r3, #31
 8013df6:	4605      	mov	r5, r0
 8013df8:	d4e4      	bmi.n	8013dc4 <_fflush_r+0xc>
 8013dfa:	89a3      	ldrh	r3, [r4, #12]
 8013dfc:	059b      	lsls	r3, r3, #22
 8013dfe:	d4e1      	bmi.n	8013dc4 <_fflush_r+0xc>
 8013e00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013e02:	f7fe fb93 	bl	801252c <__retarget_lock_release_recursive>
 8013e06:	e7dd      	b.n	8013dc4 <_fflush_r+0xc>

08013e08 <memmove>:
 8013e08:	4288      	cmp	r0, r1
 8013e0a:	b510      	push	{r4, lr}
 8013e0c:	eb01 0402 	add.w	r4, r1, r2
 8013e10:	d902      	bls.n	8013e18 <memmove+0x10>
 8013e12:	4284      	cmp	r4, r0
 8013e14:	4623      	mov	r3, r4
 8013e16:	d807      	bhi.n	8013e28 <memmove+0x20>
 8013e18:	1e43      	subs	r3, r0, #1
 8013e1a:	42a1      	cmp	r1, r4
 8013e1c:	d008      	beq.n	8013e30 <memmove+0x28>
 8013e1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013e22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013e26:	e7f8      	b.n	8013e1a <memmove+0x12>
 8013e28:	4402      	add	r2, r0
 8013e2a:	4601      	mov	r1, r0
 8013e2c:	428a      	cmp	r2, r1
 8013e2e:	d100      	bne.n	8013e32 <memmove+0x2a>
 8013e30:	bd10      	pop	{r4, pc}
 8013e32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013e36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013e3a:	e7f7      	b.n	8013e2c <memmove+0x24>

08013e3c <_sbrk_r>:
 8013e3c:	b538      	push	{r3, r4, r5, lr}
 8013e3e:	4d06      	ldr	r5, [pc, #24]	@ (8013e58 <_sbrk_r+0x1c>)
 8013e40:	2300      	movs	r3, #0
 8013e42:	4604      	mov	r4, r0
 8013e44:	4608      	mov	r0, r1
 8013e46:	602b      	str	r3, [r5, #0]
 8013e48:	f7f0 fc32 	bl	80046b0 <_sbrk>
 8013e4c:	1c43      	adds	r3, r0, #1
 8013e4e:	d102      	bne.n	8013e56 <_sbrk_r+0x1a>
 8013e50:	682b      	ldr	r3, [r5, #0]
 8013e52:	b103      	cbz	r3, 8013e56 <_sbrk_r+0x1a>
 8013e54:	6023      	str	r3, [r4, #0]
 8013e56:	bd38      	pop	{r3, r4, r5, pc}
 8013e58:	24001200 	.word	0x24001200

08013e5c <memcpy>:
 8013e5c:	440a      	add	r2, r1
 8013e5e:	4291      	cmp	r1, r2
 8013e60:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8013e64:	d100      	bne.n	8013e68 <memcpy+0xc>
 8013e66:	4770      	bx	lr
 8013e68:	b510      	push	{r4, lr}
 8013e6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013e6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013e72:	4291      	cmp	r1, r2
 8013e74:	d1f9      	bne.n	8013e6a <memcpy+0xe>
 8013e76:	bd10      	pop	{r4, pc}

08013e78 <__assert_func>:
 8013e78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013e7a:	4614      	mov	r4, r2
 8013e7c:	461a      	mov	r2, r3
 8013e7e:	4b09      	ldr	r3, [pc, #36]	@ (8013ea4 <__assert_func+0x2c>)
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	4605      	mov	r5, r0
 8013e84:	68d8      	ldr	r0, [r3, #12]
 8013e86:	b954      	cbnz	r4, 8013e9e <__assert_func+0x26>
 8013e88:	4b07      	ldr	r3, [pc, #28]	@ (8013ea8 <__assert_func+0x30>)
 8013e8a:	461c      	mov	r4, r3
 8013e8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013e90:	9100      	str	r1, [sp, #0]
 8013e92:	462b      	mov	r3, r5
 8013e94:	4905      	ldr	r1, [pc, #20]	@ (8013eac <__assert_func+0x34>)
 8013e96:	f000 f86f 	bl	8013f78 <fiprintf>
 8013e9a:	f000 f87f 	bl	8013f9c <abort>
 8013e9e:	4b04      	ldr	r3, [pc, #16]	@ (8013eb0 <__assert_func+0x38>)
 8013ea0:	e7f4      	b.n	8013e8c <__assert_func+0x14>
 8013ea2:	bf00      	nop
 8013ea4:	24000054 	.word	0x24000054
 8013ea8:	08015246 	.word	0x08015246
 8013eac:	08015218 	.word	0x08015218
 8013eb0:	0801520b 	.word	0x0801520b

08013eb4 <_calloc_r>:
 8013eb4:	b570      	push	{r4, r5, r6, lr}
 8013eb6:	fba1 5402 	umull	r5, r4, r1, r2
 8013eba:	b93c      	cbnz	r4, 8013ecc <_calloc_r+0x18>
 8013ebc:	4629      	mov	r1, r5
 8013ebe:	f7ff f991 	bl	80131e4 <_malloc_r>
 8013ec2:	4606      	mov	r6, r0
 8013ec4:	b928      	cbnz	r0, 8013ed2 <_calloc_r+0x1e>
 8013ec6:	2600      	movs	r6, #0
 8013ec8:	4630      	mov	r0, r6
 8013eca:	bd70      	pop	{r4, r5, r6, pc}
 8013ecc:	220c      	movs	r2, #12
 8013ece:	6002      	str	r2, [r0, #0]
 8013ed0:	e7f9      	b.n	8013ec6 <_calloc_r+0x12>
 8013ed2:	462a      	mov	r2, r5
 8013ed4:	4621      	mov	r1, r4
 8013ed6:	f7fe fa9c 	bl	8012412 <memset>
 8013eda:	e7f5      	b.n	8013ec8 <_calloc_r+0x14>

08013edc <__ascii_mbtowc>:
 8013edc:	b082      	sub	sp, #8
 8013ede:	b901      	cbnz	r1, 8013ee2 <__ascii_mbtowc+0x6>
 8013ee0:	a901      	add	r1, sp, #4
 8013ee2:	b142      	cbz	r2, 8013ef6 <__ascii_mbtowc+0x1a>
 8013ee4:	b14b      	cbz	r3, 8013efa <__ascii_mbtowc+0x1e>
 8013ee6:	7813      	ldrb	r3, [r2, #0]
 8013ee8:	600b      	str	r3, [r1, #0]
 8013eea:	7812      	ldrb	r2, [r2, #0]
 8013eec:	1e10      	subs	r0, r2, #0
 8013eee:	bf18      	it	ne
 8013ef0:	2001      	movne	r0, #1
 8013ef2:	b002      	add	sp, #8
 8013ef4:	4770      	bx	lr
 8013ef6:	4610      	mov	r0, r2
 8013ef8:	e7fb      	b.n	8013ef2 <__ascii_mbtowc+0x16>
 8013efa:	f06f 0001 	mvn.w	r0, #1
 8013efe:	e7f8      	b.n	8013ef2 <__ascii_mbtowc+0x16>

08013f00 <_realloc_r>:
 8013f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f04:	4680      	mov	r8, r0
 8013f06:	4615      	mov	r5, r2
 8013f08:	460c      	mov	r4, r1
 8013f0a:	b921      	cbnz	r1, 8013f16 <_realloc_r+0x16>
 8013f0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013f10:	4611      	mov	r1, r2
 8013f12:	f7ff b967 	b.w	80131e4 <_malloc_r>
 8013f16:	b92a      	cbnz	r2, 8013f24 <_realloc_r+0x24>
 8013f18:	f7ff f8f0 	bl	80130fc <_free_r>
 8013f1c:	2400      	movs	r4, #0
 8013f1e:	4620      	mov	r0, r4
 8013f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f24:	f000 f841 	bl	8013faa <_malloc_usable_size_r>
 8013f28:	4285      	cmp	r5, r0
 8013f2a:	4606      	mov	r6, r0
 8013f2c:	d802      	bhi.n	8013f34 <_realloc_r+0x34>
 8013f2e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8013f32:	d8f4      	bhi.n	8013f1e <_realloc_r+0x1e>
 8013f34:	4629      	mov	r1, r5
 8013f36:	4640      	mov	r0, r8
 8013f38:	f7ff f954 	bl	80131e4 <_malloc_r>
 8013f3c:	4607      	mov	r7, r0
 8013f3e:	2800      	cmp	r0, #0
 8013f40:	d0ec      	beq.n	8013f1c <_realloc_r+0x1c>
 8013f42:	42b5      	cmp	r5, r6
 8013f44:	462a      	mov	r2, r5
 8013f46:	4621      	mov	r1, r4
 8013f48:	bf28      	it	cs
 8013f4a:	4632      	movcs	r2, r6
 8013f4c:	f7ff ff86 	bl	8013e5c <memcpy>
 8013f50:	4621      	mov	r1, r4
 8013f52:	4640      	mov	r0, r8
 8013f54:	f7ff f8d2 	bl	80130fc <_free_r>
 8013f58:	463c      	mov	r4, r7
 8013f5a:	e7e0      	b.n	8013f1e <_realloc_r+0x1e>

08013f5c <__ascii_wctomb>:
 8013f5c:	4603      	mov	r3, r0
 8013f5e:	4608      	mov	r0, r1
 8013f60:	b141      	cbz	r1, 8013f74 <__ascii_wctomb+0x18>
 8013f62:	2aff      	cmp	r2, #255	@ 0xff
 8013f64:	d904      	bls.n	8013f70 <__ascii_wctomb+0x14>
 8013f66:	228a      	movs	r2, #138	@ 0x8a
 8013f68:	601a      	str	r2, [r3, #0]
 8013f6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013f6e:	4770      	bx	lr
 8013f70:	700a      	strb	r2, [r1, #0]
 8013f72:	2001      	movs	r0, #1
 8013f74:	4770      	bx	lr
	...

08013f78 <fiprintf>:
 8013f78:	b40e      	push	{r1, r2, r3}
 8013f7a:	b503      	push	{r0, r1, lr}
 8013f7c:	4601      	mov	r1, r0
 8013f7e:	ab03      	add	r3, sp, #12
 8013f80:	4805      	ldr	r0, [pc, #20]	@ (8013f98 <fiprintf+0x20>)
 8013f82:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f86:	6800      	ldr	r0, [r0, #0]
 8013f88:	9301      	str	r3, [sp, #4]
 8013f8a:	f000 f83f 	bl	801400c <_vfiprintf_r>
 8013f8e:	b002      	add	sp, #8
 8013f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8013f94:	b003      	add	sp, #12
 8013f96:	4770      	bx	lr
 8013f98:	24000054 	.word	0x24000054

08013f9c <abort>:
 8013f9c:	b508      	push	{r3, lr}
 8013f9e:	2006      	movs	r0, #6
 8013fa0:	f000 fa08 	bl	80143b4 <raise>
 8013fa4:	2001      	movs	r0, #1
 8013fa6:	f7f0 fb0b 	bl	80045c0 <_exit>

08013faa <_malloc_usable_size_r>:
 8013faa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013fae:	1f18      	subs	r0, r3, #4
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	bfbc      	itt	lt
 8013fb4:	580b      	ldrlt	r3, [r1, r0]
 8013fb6:	18c0      	addlt	r0, r0, r3
 8013fb8:	4770      	bx	lr

08013fba <__sfputc_r>:
 8013fba:	6893      	ldr	r3, [r2, #8]
 8013fbc:	3b01      	subs	r3, #1
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	b410      	push	{r4}
 8013fc2:	6093      	str	r3, [r2, #8]
 8013fc4:	da08      	bge.n	8013fd8 <__sfputc_r+0x1e>
 8013fc6:	6994      	ldr	r4, [r2, #24]
 8013fc8:	42a3      	cmp	r3, r4
 8013fca:	db01      	blt.n	8013fd0 <__sfputc_r+0x16>
 8013fcc:	290a      	cmp	r1, #10
 8013fce:	d103      	bne.n	8013fd8 <__sfputc_r+0x1e>
 8013fd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013fd4:	f000 b932 	b.w	801423c <__swbuf_r>
 8013fd8:	6813      	ldr	r3, [r2, #0]
 8013fda:	1c58      	adds	r0, r3, #1
 8013fdc:	6010      	str	r0, [r2, #0]
 8013fde:	7019      	strb	r1, [r3, #0]
 8013fe0:	4608      	mov	r0, r1
 8013fe2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013fe6:	4770      	bx	lr

08013fe8 <__sfputs_r>:
 8013fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fea:	4606      	mov	r6, r0
 8013fec:	460f      	mov	r7, r1
 8013fee:	4614      	mov	r4, r2
 8013ff0:	18d5      	adds	r5, r2, r3
 8013ff2:	42ac      	cmp	r4, r5
 8013ff4:	d101      	bne.n	8013ffa <__sfputs_r+0x12>
 8013ff6:	2000      	movs	r0, #0
 8013ff8:	e007      	b.n	801400a <__sfputs_r+0x22>
 8013ffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ffe:	463a      	mov	r2, r7
 8014000:	4630      	mov	r0, r6
 8014002:	f7ff ffda 	bl	8013fba <__sfputc_r>
 8014006:	1c43      	adds	r3, r0, #1
 8014008:	d1f3      	bne.n	8013ff2 <__sfputs_r+0xa>
 801400a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801400c <_vfiprintf_r>:
 801400c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014010:	460d      	mov	r5, r1
 8014012:	b09d      	sub	sp, #116	@ 0x74
 8014014:	4614      	mov	r4, r2
 8014016:	4698      	mov	r8, r3
 8014018:	4606      	mov	r6, r0
 801401a:	b118      	cbz	r0, 8014024 <_vfiprintf_r+0x18>
 801401c:	6a03      	ldr	r3, [r0, #32]
 801401e:	b90b      	cbnz	r3, 8014024 <_vfiprintf_r+0x18>
 8014020:	f7fe f95e 	bl	80122e0 <__sinit>
 8014024:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014026:	07d9      	lsls	r1, r3, #31
 8014028:	d405      	bmi.n	8014036 <_vfiprintf_r+0x2a>
 801402a:	89ab      	ldrh	r3, [r5, #12]
 801402c:	059a      	lsls	r2, r3, #22
 801402e:	d402      	bmi.n	8014036 <_vfiprintf_r+0x2a>
 8014030:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014032:	f7fe fa7a 	bl	801252a <__retarget_lock_acquire_recursive>
 8014036:	89ab      	ldrh	r3, [r5, #12]
 8014038:	071b      	lsls	r3, r3, #28
 801403a:	d501      	bpl.n	8014040 <_vfiprintf_r+0x34>
 801403c:	692b      	ldr	r3, [r5, #16]
 801403e:	b99b      	cbnz	r3, 8014068 <_vfiprintf_r+0x5c>
 8014040:	4629      	mov	r1, r5
 8014042:	4630      	mov	r0, r6
 8014044:	f000 f938 	bl	80142b8 <__swsetup_r>
 8014048:	b170      	cbz	r0, 8014068 <_vfiprintf_r+0x5c>
 801404a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801404c:	07dc      	lsls	r4, r3, #31
 801404e:	d504      	bpl.n	801405a <_vfiprintf_r+0x4e>
 8014050:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014054:	b01d      	add	sp, #116	@ 0x74
 8014056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801405a:	89ab      	ldrh	r3, [r5, #12]
 801405c:	0598      	lsls	r0, r3, #22
 801405e:	d4f7      	bmi.n	8014050 <_vfiprintf_r+0x44>
 8014060:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014062:	f7fe fa63 	bl	801252c <__retarget_lock_release_recursive>
 8014066:	e7f3      	b.n	8014050 <_vfiprintf_r+0x44>
 8014068:	2300      	movs	r3, #0
 801406a:	9309      	str	r3, [sp, #36]	@ 0x24
 801406c:	2320      	movs	r3, #32
 801406e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014072:	f8cd 800c 	str.w	r8, [sp, #12]
 8014076:	2330      	movs	r3, #48	@ 0x30
 8014078:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014228 <_vfiprintf_r+0x21c>
 801407c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014080:	f04f 0901 	mov.w	r9, #1
 8014084:	4623      	mov	r3, r4
 8014086:	469a      	mov	sl, r3
 8014088:	f813 2b01 	ldrb.w	r2, [r3], #1
 801408c:	b10a      	cbz	r2, 8014092 <_vfiprintf_r+0x86>
 801408e:	2a25      	cmp	r2, #37	@ 0x25
 8014090:	d1f9      	bne.n	8014086 <_vfiprintf_r+0x7a>
 8014092:	ebba 0b04 	subs.w	fp, sl, r4
 8014096:	d00b      	beq.n	80140b0 <_vfiprintf_r+0xa4>
 8014098:	465b      	mov	r3, fp
 801409a:	4622      	mov	r2, r4
 801409c:	4629      	mov	r1, r5
 801409e:	4630      	mov	r0, r6
 80140a0:	f7ff ffa2 	bl	8013fe8 <__sfputs_r>
 80140a4:	3001      	adds	r0, #1
 80140a6:	f000 80a7 	beq.w	80141f8 <_vfiprintf_r+0x1ec>
 80140aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80140ac:	445a      	add	r2, fp
 80140ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80140b0:	f89a 3000 	ldrb.w	r3, [sl]
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	f000 809f 	beq.w	80141f8 <_vfiprintf_r+0x1ec>
 80140ba:	2300      	movs	r3, #0
 80140bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80140c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80140c4:	f10a 0a01 	add.w	sl, sl, #1
 80140c8:	9304      	str	r3, [sp, #16]
 80140ca:	9307      	str	r3, [sp, #28]
 80140cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80140d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80140d2:	4654      	mov	r4, sl
 80140d4:	2205      	movs	r2, #5
 80140d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80140da:	4853      	ldr	r0, [pc, #332]	@ (8014228 <_vfiprintf_r+0x21c>)
 80140dc:	f7ec f928 	bl	8000330 <memchr>
 80140e0:	9a04      	ldr	r2, [sp, #16]
 80140e2:	b9d8      	cbnz	r0, 801411c <_vfiprintf_r+0x110>
 80140e4:	06d1      	lsls	r1, r2, #27
 80140e6:	bf44      	itt	mi
 80140e8:	2320      	movmi	r3, #32
 80140ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80140ee:	0713      	lsls	r3, r2, #28
 80140f0:	bf44      	itt	mi
 80140f2:	232b      	movmi	r3, #43	@ 0x2b
 80140f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80140f8:	f89a 3000 	ldrb.w	r3, [sl]
 80140fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80140fe:	d015      	beq.n	801412c <_vfiprintf_r+0x120>
 8014100:	9a07      	ldr	r2, [sp, #28]
 8014102:	4654      	mov	r4, sl
 8014104:	2000      	movs	r0, #0
 8014106:	f04f 0c0a 	mov.w	ip, #10
 801410a:	4621      	mov	r1, r4
 801410c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014110:	3b30      	subs	r3, #48	@ 0x30
 8014112:	2b09      	cmp	r3, #9
 8014114:	d94b      	bls.n	80141ae <_vfiprintf_r+0x1a2>
 8014116:	b1b0      	cbz	r0, 8014146 <_vfiprintf_r+0x13a>
 8014118:	9207      	str	r2, [sp, #28]
 801411a:	e014      	b.n	8014146 <_vfiprintf_r+0x13a>
 801411c:	eba0 0308 	sub.w	r3, r0, r8
 8014120:	fa09 f303 	lsl.w	r3, r9, r3
 8014124:	4313      	orrs	r3, r2
 8014126:	9304      	str	r3, [sp, #16]
 8014128:	46a2      	mov	sl, r4
 801412a:	e7d2      	b.n	80140d2 <_vfiprintf_r+0xc6>
 801412c:	9b03      	ldr	r3, [sp, #12]
 801412e:	1d19      	adds	r1, r3, #4
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	9103      	str	r1, [sp, #12]
 8014134:	2b00      	cmp	r3, #0
 8014136:	bfbb      	ittet	lt
 8014138:	425b      	neglt	r3, r3
 801413a:	f042 0202 	orrlt.w	r2, r2, #2
 801413e:	9307      	strge	r3, [sp, #28]
 8014140:	9307      	strlt	r3, [sp, #28]
 8014142:	bfb8      	it	lt
 8014144:	9204      	strlt	r2, [sp, #16]
 8014146:	7823      	ldrb	r3, [r4, #0]
 8014148:	2b2e      	cmp	r3, #46	@ 0x2e
 801414a:	d10a      	bne.n	8014162 <_vfiprintf_r+0x156>
 801414c:	7863      	ldrb	r3, [r4, #1]
 801414e:	2b2a      	cmp	r3, #42	@ 0x2a
 8014150:	d132      	bne.n	80141b8 <_vfiprintf_r+0x1ac>
 8014152:	9b03      	ldr	r3, [sp, #12]
 8014154:	1d1a      	adds	r2, r3, #4
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	9203      	str	r2, [sp, #12]
 801415a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801415e:	3402      	adds	r4, #2
 8014160:	9305      	str	r3, [sp, #20]
 8014162:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014238 <_vfiprintf_r+0x22c>
 8014166:	7821      	ldrb	r1, [r4, #0]
 8014168:	2203      	movs	r2, #3
 801416a:	4650      	mov	r0, sl
 801416c:	f7ec f8e0 	bl	8000330 <memchr>
 8014170:	b138      	cbz	r0, 8014182 <_vfiprintf_r+0x176>
 8014172:	9b04      	ldr	r3, [sp, #16]
 8014174:	eba0 000a 	sub.w	r0, r0, sl
 8014178:	2240      	movs	r2, #64	@ 0x40
 801417a:	4082      	lsls	r2, r0
 801417c:	4313      	orrs	r3, r2
 801417e:	3401      	adds	r4, #1
 8014180:	9304      	str	r3, [sp, #16]
 8014182:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014186:	4829      	ldr	r0, [pc, #164]	@ (801422c <_vfiprintf_r+0x220>)
 8014188:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801418c:	2206      	movs	r2, #6
 801418e:	f7ec f8cf 	bl	8000330 <memchr>
 8014192:	2800      	cmp	r0, #0
 8014194:	d03f      	beq.n	8014216 <_vfiprintf_r+0x20a>
 8014196:	4b26      	ldr	r3, [pc, #152]	@ (8014230 <_vfiprintf_r+0x224>)
 8014198:	bb1b      	cbnz	r3, 80141e2 <_vfiprintf_r+0x1d6>
 801419a:	9b03      	ldr	r3, [sp, #12]
 801419c:	3307      	adds	r3, #7
 801419e:	f023 0307 	bic.w	r3, r3, #7
 80141a2:	3308      	adds	r3, #8
 80141a4:	9303      	str	r3, [sp, #12]
 80141a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80141a8:	443b      	add	r3, r7
 80141aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80141ac:	e76a      	b.n	8014084 <_vfiprintf_r+0x78>
 80141ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80141b2:	460c      	mov	r4, r1
 80141b4:	2001      	movs	r0, #1
 80141b6:	e7a8      	b.n	801410a <_vfiprintf_r+0xfe>
 80141b8:	2300      	movs	r3, #0
 80141ba:	3401      	adds	r4, #1
 80141bc:	9305      	str	r3, [sp, #20]
 80141be:	4619      	mov	r1, r3
 80141c0:	f04f 0c0a 	mov.w	ip, #10
 80141c4:	4620      	mov	r0, r4
 80141c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80141ca:	3a30      	subs	r2, #48	@ 0x30
 80141cc:	2a09      	cmp	r2, #9
 80141ce:	d903      	bls.n	80141d8 <_vfiprintf_r+0x1cc>
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d0c6      	beq.n	8014162 <_vfiprintf_r+0x156>
 80141d4:	9105      	str	r1, [sp, #20]
 80141d6:	e7c4      	b.n	8014162 <_vfiprintf_r+0x156>
 80141d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80141dc:	4604      	mov	r4, r0
 80141de:	2301      	movs	r3, #1
 80141e0:	e7f0      	b.n	80141c4 <_vfiprintf_r+0x1b8>
 80141e2:	ab03      	add	r3, sp, #12
 80141e4:	9300      	str	r3, [sp, #0]
 80141e6:	462a      	mov	r2, r5
 80141e8:	4b12      	ldr	r3, [pc, #72]	@ (8014234 <_vfiprintf_r+0x228>)
 80141ea:	a904      	add	r1, sp, #16
 80141ec:	4630      	mov	r0, r6
 80141ee:	f7fd fc43 	bl	8011a78 <_printf_float>
 80141f2:	4607      	mov	r7, r0
 80141f4:	1c78      	adds	r0, r7, #1
 80141f6:	d1d6      	bne.n	80141a6 <_vfiprintf_r+0x19a>
 80141f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80141fa:	07d9      	lsls	r1, r3, #31
 80141fc:	d405      	bmi.n	801420a <_vfiprintf_r+0x1fe>
 80141fe:	89ab      	ldrh	r3, [r5, #12]
 8014200:	059a      	lsls	r2, r3, #22
 8014202:	d402      	bmi.n	801420a <_vfiprintf_r+0x1fe>
 8014204:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014206:	f7fe f991 	bl	801252c <__retarget_lock_release_recursive>
 801420a:	89ab      	ldrh	r3, [r5, #12]
 801420c:	065b      	lsls	r3, r3, #25
 801420e:	f53f af1f 	bmi.w	8014050 <_vfiprintf_r+0x44>
 8014212:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014214:	e71e      	b.n	8014054 <_vfiprintf_r+0x48>
 8014216:	ab03      	add	r3, sp, #12
 8014218:	9300      	str	r3, [sp, #0]
 801421a:	462a      	mov	r2, r5
 801421c:	4b05      	ldr	r3, [pc, #20]	@ (8014234 <_vfiprintf_r+0x228>)
 801421e:	a904      	add	r1, sp, #16
 8014220:	4630      	mov	r0, r6
 8014222:	f7fd feb1 	bl	8011f88 <_printf_i>
 8014226:	e7e4      	b.n	80141f2 <_vfiprintf_r+0x1e6>
 8014228:	080151f0 	.word	0x080151f0
 801422c:	080151fa 	.word	0x080151fa
 8014230:	08011a79 	.word	0x08011a79
 8014234:	08013fe9 	.word	0x08013fe9
 8014238:	080151f6 	.word	0x080151f6

0801423c <__swbuf_r>:
 801423c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801423e:	460e      	mov	r6, r1
 8014240:	4614      	mov	r4, r2
 8014242:	4605      	mov	r5, r0
 8014244:	b118      	cbz	r0, 801424e <__swbuf_r+0x12>
 8014246:	6a03      	ldr	r3, [r0, #32]
 8014248:	b90b      	cbnz	r3, 801424e <__swbuf_r+0x12>
 801424a:	f7fe f849 	bl	80122e0 <__sinit>
 801424e:	69a3      	ldr	r3, [r4, #24]
 8014250:	60a3      	str	r3, [r4, #8]
 8014252:	89a3      	ldrh	r3, [r4, #12]
 8014254:	071a      	lsls	r2, r3, #28
 8014256:	d501      	bpl.n	801425c <__swbuf_r+0x20>
 8014258:	6923      	ldr	r3, [r4, #16]
 801425a:	b943      	cbnz	r3, 801426e <__swbuf_r+0x32>
 801425c:	4621      	mov	r1, r4
 801425e:	4628      	mov	r0, r5
 8014260:	f000 f82a 	bl	80142b8 <__swsetup_r>
 8014264:	b118      	cbz	r0, 801426e <__swbuf_r+0x32>
 8014266:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801426a:	4638      	mov	r0, r7
 801426c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801426e:	6823      	ldr	r3, [r4, #0]
 8014270:	6922      	ldr	r2, [r4, #16]
 8014272:	1a98      	subs	r0, r3, r2
 8014274:	6963      	ldr	r3, [r4, #20]
 8014276:	b2f6      	uxtb	r6, r6
 8014278:	4283      	cmp	r3, r0
 801427a:	4637      	mov	r7, r6
 801427c:	dc05      	bgt.n	801428a <__swbuf_r+0x4e>
 801427e:	4621      	mov	r1, r4
 8014280:	4628      	mov	r0, r5
 8014282:	f7ff fd99 	bl	8013db8 <_fflush_r>
 8014286:	2800      	cmp	r0, #0
 8014288:	d1ed      	bne.n	8014266 <__swbuf_r+0x2a>
 801428a:	68a3      	ldr	r3, [r4, #8]
 801428c:	3b01      	subs	r3, #1
 801428e:	60a3      	str	r3, [r4, #8]
 8014290:	6823      	ldr	r3, [r4, #0]
 8014292:	1c5a      	adds	r2, r3, #1
 8014294:	6022      	str	r2, [r4, #0]
 8014296:	701e      	strb	r6, [r3, #0]
 8014298:	6962      	ldr	r2, [r4, #20]
 801429a:	1c43      	adds	r3, r0, #1
 801429c:	429a      	cmp	r2, r3
 801429e:	d004      	beq.n	80142aa <__swbuf_r+0x6e>
 80142a0:	89a3      	ldrh	r3, [r4, #12]
 80142a2:	07db      	lsls	r3, r3, #31
 80142a4:	d5e1      	bpl.n	801426a <__swbuf_r+0x2e>
 80142a6:	2e0a      	cmp	r6, #10
 80142a8:	d1df      	bne.n	801426a <__swbuf_r+0x2e>
 80142aa:	4621      	mov	r1, r4
 80142ac:	4628      	mov	r0, r5
 80142ae:	f7ff fd83 	bl	8013db8 <_fflush_r>
 80142b2:	2800      	cmp	r0, #0
 80142b4:	d0d9      	beq.n	801426a <__swbuf_r+0x2e>
 80142b6:	e7d6      	b.n	8014266 <__swbuf_r+0x2a>

080142b8 <__swsetup_r>:
 80142b8:	b538      	push	{r3, r4, r5, lr}
 80142ba:	4b29      	ldr	r3, [pc, #164]	@ (8014360 <__swsetup_r+0xa8>)
 80142bc:	4605      	mov	r5, r0
 80142be:	6818      	ldr	r0, [r3, #0]
 80142c0:	460c      	mov	r4, r1
 80142c2:	b118      	cbz	r0, 80142cc <__swsetup_r+0x14>
 80142c4:	6a03      	ldr	r3, [r0, #32]
 80142c6:	b90b      	cbnz	r3, 80142cc <__swsetup_r+0x14>
 80142c8:	f7fe f80a 	bl	80122e0 <__sinit>
 80142cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80142d0:	0719      	lsls	r1, r3, #28
 80142d2:	d422      	bmi.n	801431a <__swsetup_r+0x62>
 80142d4:	06da      	lsls	r2, r3, #27
 80142d6:	d407      	bmi.n	80142e8 <__swsetup_r+0x30>
 80142d8:	2209      	movs	r2, #9
 80142da:	602a      	str	r2, [r5, #0]
 80142dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80142e0:	81a3      	strh	r3, [r4, #12]
 80142e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80142e6:	e033      	b.n	8014350 <__swsetup_r+0x98>
 80142e8:	0758      	lsls	r0, r3, #29
 80142ea:	d512      	bpl.n	8014312 <__swsetup_r+0x5a>
 80142ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80142ee:	b141      	cbz	r1, 8014302 <__swsetup_r+0x4a>
 80142f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80142f4:	4299      	cmp	r1, r3
 80142f6:	d002      	beq.n	80142fe <__swsetup_r+0x46>
 80142f8:	4628      	mov	r0, r5
 80142fa:	f7fe feff 	bl	80130fc <_free_r>
 80142fe:	2300      	movs	r3, #0
 8014300:	6363      	str	r3, [r4, #52]	@ 0x34
 8014302:	89a3      	ldrh	r3, [r4, #12]
 8014304:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014308:	81a3      	strh	r3, [r4, #12]
 801430a:	2300      	movs	r3, #0
 801430c:	6063      	str	r3, [r4, #4]
 801430e:	6923      	ldr	r3, [r4, #16]
 8014310:	6023      	str	r3, [r4, #0]
 8014312:	89a3      	ldrh	r3, [r4, #12]
 8014314:	f043 0308 	orr.w	r3, r3, #8
 8014318:	81a3      	strh	r3, [r4, #12]
 801431a:	6923      	ldr	r3, [r4, #16]
 801431c:	b94b      	cbnz	r3, 8014332 <__swsetup_r+0x7a>
 801431e:	89a3      	ldrh	r3, [r4, #12]
 8014320:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014324:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014328:	d003      	beq.n	8014332 <__swsetup_r+0x7a>
 801432a:	4621      	mov	r1, r4
 801432c:	4628      	mov	r0, r5
 801432e:	f000 f883 	bl	8014438 <__smakebuf_r>
 8014332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014336:	f013 0201 	ands.w	r2, r3, #1
 801433a:	d00a      	beq.n	8014352 <__swsetup_r+0x9a>
 801433c:	2200      	movs	r2, #0
 801433e:	60a2      	str	r2, [r4, #8]
 8014340:	6962      	ldr	r2, [r4, #20]
 8014342:	4252      	negs	r2, r2
 8014344:	61a2      	str	r2, [r4, #24]
 8014346:	6922      	ldr	r2, [r4, #16]
 8014348:	b942      	cbnz	r2, 801435c <__swsetup_r+0xa4>
 801434a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801434e:	d1c5      	bne.n	80142dc <__swsetup_r+0x24>
 8014350:	bd38      	pop	{r3, r4, r5, pc}
 8014352:	0799      	lsls	r1, r3, #30
 8014354:	bf58      	it	pl
 8014356:	6962      	ldrpl	r2, [r4, #20]
 8014358:	60a2      	str	r2, [r4, #8]
 801435a:	e7f4      	b.n	8014346 <__swsetup_r+0x8e>
 801435c:	2000      	movs	r0, #0
 801435e:	e7f7      	b.n	8014350 <__swsetup_r+0x98>
 8014360:	24000054 	.word	0x24000054

08014364 <_raise_r>:
 8014364:	291f      	cmp	r1, #31
 8014366:	b538      	push	{r3, r4, r5, lr}
 8014368:	4605      	mov	r5, r0
 801436a:	460c      	mov	r4, r1
 801436c:	d904      	bls.n	8014378 <_raise_r+0x14>
 801436e:	2316      	movs	r3, #22
 8014370:	6003      	str	r3, [r0, #0]
 8014372:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014376:	bd38      	pop	{r3, r4, r5, pc}
 8014378:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801437a:	b112      	cbz	r2, 8014382 <_raise_r+0x1e>
 801437c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014380:	b94b      	cbnz	r3, 8014396 <_raise_r+0x32>
 8014382:	4628      	mov	r0, r5
 8014384:	f000 f830 	bl	80143e8 <_getpid_r>
 8014388:	4622      	mov	r2, r4
 801438a:	4601      	mov	r1, r0
 801438c:	4628      	mov	r0, r5
 801438e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014392:	f000 b817 	b.w	80143c4 <_kill_r>
 8014396:	2b01      	cmp	r3, #1
 8014398:	d00a      	beq.n	80143b0 <_raise_r+0x4c>
 801439a:	1c59      	adds	r1, r3, #1
 801439c:	d103      	bne.n	80143a6 <_raise_r+0x42>
 801439e:	2316      	movs	r3, #22
 80143a0:	6003      	str	r3, [r0, #0]
 80143a2:	2001      	movs	r0, #1
 80143a4:	e7e7      	b.n	8014376 <_raise_r+0x12>
 80143a6:	2100      	movs	r1, #0
 80143a8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80143ac:	4620      	mov	r0, r4
 80143ae:	4798      	blx	r3
 80143b0:	2000      	movs	r0, #0
 80143b2:	e7e0      	b.n	8014376 <_raise_r+0x12>

080143b4 <raise>:
 80143b4:	4b02      	ldr	r3, [pc, #8]	@ (80143c0 <raise+0xc>)
 80143b6:	4601      	mov	r1, r0
 80143b8:	6818      	ldr	r0, [r3, #0]
 80143ba:	f7ff bfd3 	b.w	8014364 <_raise_r>
 80143be:	bf00      	nop
 80143c0:	24000054 	.word	0x24000054

080143c4 <_kill_r>:
 80143c4:	b538      	push	{r3, r4, r5, lr}
 80143c6:	4d07      	ldr	r5, [pc, #28]	@ (80143e4 <_kill_r+0x20>)
 80143c8:	2300      	movs	r3, #0
 80143ca:	4604      	mov	r4, r0
 80143cc:	4608      	mov	r0, r1
 80143ce:	4611      	mov	r1, r2
 80143d0:	602b      	str	r3, [r5, #0]
 80143d2:	f7f0 f8e5 	bl	80045a0 <_kill>
 80143d6:	1c43      	adds	r3, r0, #1
 80143d8:	d102      	bne.n	80143e0 <_kill_r+0x1c>
 80143da:	682b      	ldr	r3, [r5, #0]
 80143dc:	b103      	cbz	r3, 80143e0 <_kill_r+0x1c>
 80143de:	6023      	str	r3, [r4, #0]
 80143e0:	bd38      	pop	{r3, r4, r5, pc}
 80143e2:	bf00      	nop
 80143e4:	24001200 	.word	0x24001200

080143e8 <_getpid_r>:
 80143e8:	f7f0 b8d2 	b.w	8004590 <_getpid>

080143ec <__swhatbuf_r>:
 80143ec:	b570      	push	{r4, r5, r6, lr}
 80143ee:	460c      	mov	r4, r1
 80143f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143f4:	2900      	cmp	r1, #0
 80143f6:	b096      	sub	sp, #88	@ 0x58
 80143f8:	4615      	mov	r5, r2
 80143fa:	461e      	mov	r6, r3
 80143fc:	da0d      	bge.n	801441a <__swhatbuf_r+0x2e>
 80143fe:	89a3      	ldrh	r3, [r4, #12]
 8014400:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014404:	f04f 0100 	mov.w	r1, #0
 8014408:	bf14      	ite	ne
 801440a:	2340      	movne	r3, #64	@ 0x40
 801440c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014410:	2000      	movs	r0, #0
 8014412:	6031      	str	r1, [r6, #0]
 8014414:	602b      	str	r3, [r5, #0]
 8014416:	b016      	add	sp, #88	@ 0x58
 8014418:	bd70      	pop	{r4, r5, r6, pc}
 801441a:	466a      	mov	r2, sp
 801441c:	f000 f848 	bl	80144b0 <_fstat_r>
 8014420:	2800      	cmp	r0, #0
 8014422:	dbec      	blt.n	80143fe <__swhatbuf_r+0x12>
 8014424:	9901      	ldr	r1, [sp, #4]
 8014426:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801442a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801442e:	4259      	negs	r1, r3
 8014430:	4159      	adcs	r1, r3
 8014432:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014436:	e7eb      	b.n	8014410 <__swhatbuf_r+0x24>

08014438 <__smakebuf_r>:
 8014438:	898b      	ldrh	r3, [r1, #12]
 801443a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801443c:	079d      	lsls	r5, r3, #30
 801443e:	4606      	mov	r6, r0
 8014440:	460c      	mov	r4, r1
 8014442:	d507      	bpl.n	8014454 <__smakebuf_r+0x1c>
 8014444:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014448:	6023      	str	r3, [r4, #0]
 801444a:	6123      	str	r3, [r4, #16]
 801444c:	2301      	movs	r3, #1
 801444e:	6163      	str	r3, [r4, #20]
 8014450:	b003      	add	sp, #12
 8014452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014454:	ab01      	add	r3, sp, #4
 8014456:	466a      	mov	r2, sp
 8014458:	f7ff ffc8 	bl	80143ec <__swhatbuf_r>
 801445c:	9f00      	ldr	r7, [sp, #0]
 801445e:	4605      	mov	r5, r0
 8014460:	4639      	mov	r1, r7
 8014462:	4630      	mov	r0, r6
 8014464:	f7fe febe 	bl	80131e4 <_malloc_r>
 8014468:	b948      	cbnz	r0, 801447e <__smakebuf_r+0x46>
 801446a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801446e:	059a      	lsls	r2, r3, #22
 8014470:	d4ee      	bmi.n	8014450 <__smakebuf_r+0x18>
 8014472:	f023 0303 	bic.w	r3, r3, #3
 8014476:	f043 0302 	orr.w	r3, r3, #2
 801447a:	81a3      	strh	r3, [r4, #12]
 801447c:	e7e2      	b.n	8014444 <__smakebuf_r+0xc>
 801447e:	89a3      	ldrh	r3, [r4, #12]
 8014480:	6020      	str	r0, [r4, #0]
 8014482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014486:	81a3      	strh	r3, [r4, #12]
 8014488:	9b01      	ldr	r3, [sp, #4]
 801448a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801448e:	b15b      	cbz	r3, 80144a8 <__smakebuf_r+0x70>
 8014490:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014494:	4630      	mov	r0, r6
 8014496:	f000 f81d 	bl	80144d4 <_isatty_r>
 801449a:	b128      	cbz	r0, 80144a8 <__smakebuf_r+0x70>
 801449c:	89a3      	ldrh	r3, [r4, #12]
 801449e:	f023 0303 	bic.w	r3, r3, #3
 80144a2:	f043 0301 	orr.w	r3, r3, #1
 80144a6:	81a3      	strh	r3, [r4, #12]
 80144a8:	89a3      	ldrh	r3, [r4, #12]
 80144aa:	431d      	orrs	r5, r3
 80144ac:	81a5      	strh	r5, [r4, #12]
 80144ae:	e7cf      	b.n	8014450 <__smakebuf_r+0x18>

080144b0 <_fstat_r>:
 80144b0:	b538      	push	{r3, r4, r5, lr}
 80144b2:	4d07      	ldr	r5, [pc, #28]	@ (80144d0 <_fstat_r+0x20>)
 80144b4:	2300      	movs	r3, #0
 80144b6:	4604      	mov	r4, r0
 80144b8:	4608      	mov	r0, r1
 80144ba:	4611      	mov	r1, r2
 80144bc:	602b      	str	r3, [r5, #0]
 80144be:	f7f0 f8cf 	bl	8004660 <_fstat>
 80144c2:	1c43      	adds	r3, r0, #1
 80144c4:	d102      	bne.n	80144cc <_fstat_r+0x1c>
 80144c6:	682b      	ldr	r3, [r5, #0]
 80144c8:	b103      	cbz	r3, 80144cc <_fstat_r+0x1c>
 80144ca:	6023      	str	r3, [r4, #0]
 80144cc:	bd38      	pop	{r3, r4, r5, pc}
 80144ce:	bf00      	nop
 80144d0:	24001200 	.word	0x24001200

080144d4 <_isatty_r>:
 80144d4:	b538      	push	{r3, r4, r5, lr}
 80144d6:	4d06      	ldr	r5, [pc, #24]	@ (80144f0 <_isatty_r+0x1c>)
 80144d8:	2300      	movs	r3, #0
 80144da:	4604      	mov	r4, r0
 80144dc:	4608      	mov	r0, r1
 80144de:	602b      	str	r3, [r5, #0]
 80144e0:	f7f0 f8ce 	bl	8004680 <_isatty>
 80144e4:	1c43      	adds	r3, r0, #1
 80144e6:	d102      	bne.n	80144ee <_isatty_r+0x1a>
 80144e8:	682b      	ldr	r3, [r5, #0]
 80144ea:	b103      	cbz	r3, 80144ee <_isatty_r+0x1a>
 80144ec:	6023      	str	r3, [r4, #0]
 80144ee:	bd38      	pop	{r3, r4, r5, pc}
 80144f0:	24001200 	.word	0x24001200

080144f4 <_init>:
 80144f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144f6:	bf00      	nop
 80144f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80144fa:	bc08      	pop	{r3}
 80144fc:	469e      	mov	lr, r3
 80144fe:	4770      	bx	lr

08014500 <_fini>:
 8014500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014502:	bf00      	nop
 8014504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014506:	bc08      	pop	{r3}
 8014508:	469e      	mov	lr, r3
 801450a:	4770      	bx	lr
