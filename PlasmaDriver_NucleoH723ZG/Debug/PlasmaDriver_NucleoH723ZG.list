
PlasmaDriver_NucleoH723ZG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000137dc  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ce0  08013ab0  08013ab0  00014ab0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014790  08014790  00015790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014798  08014798  00015798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801479c  0801479c  0001579c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000210  24000000  080147a0  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000210  080149b0  00016210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000270  08014a10  00016270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000eec  240002d0  08014a70  000162d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240011bc  08014a70  000171bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000162d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023fb5  00000000  00000000  000162fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b25  00000000  00000000  0003a2b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b78  00000000  00000000  0003ddd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001577  00000000  00000000  0003f950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003804c  00000000  00000000  00040ec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002232f  00000000  00000000  00078f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016e073  00000000  00000000  0009b242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002092b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000087d4  00000000  00000000  002092f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00211acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002d0 	.word	0x240002d0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08013a94 	.word	0x08013a94

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002d4 	.word	0x240002d4
 800030c:	08013a94 	.word	0x08013a94

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <writeConfigFlash>:
// Prototypes
void measureVoltagesTemperaturesADC3(void);

// Write configuration to flash
static uint32_t writeConfigFlash(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
	uint32_t faultySector;	//Contains error code for faulty sector
	uint32_t error_code = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]

	// Unlock Flash
	HAL_FLASH_Unlock();
 80006ba:	f009 fda7 	bl	800a20c <HAL_FLASH_Unlock>

	// Erase flash sector 7
	if (HAL_FLASHEx_Erase(&sFlashErase, &faultySector) == HAL_OK)
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	4619      	mov	r1, r3
 80006c2:	4815      	ldr	r0, [pc, #84]	@ (8000718 <writeConfigFlash+0x68>)
 80006c4:	f009 fe3e 	bl	800a344 <HAL_FLASHEx_Erase>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d119      	bne.n	8000702 <writeConfigFlash+0x52>
	{
		for (uint32_t offset = 0; offset < sizeof(sFlashConfig); offset += FLASH_WORD)
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	e012      	b.n	80006fa <writeConfigFlash+0x4a>
		{
			// Program one flash word (8*4 bytes)
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, FLASH_SECTOR7_START_ADDR + offset, ((uint32_t) &sFlashConfig) + offset) != HAL_OK)
 80006d4:	68ba      	ldr	r2, [r7, #8]
 80006d6:	4b11      	ldr	r3, [pc, #68]	@ (800071c <writeConfigFlash+0x6c>)
 80006d8:	4413      	add	r3, r2
 80006da:	4911      	ldr	r1, [pc, #68]	@ (8000720 <writeConfigFlash+0x70>)
 80006dc:	68ba      	ldr	r2, [r7, #8]
 80006de:	440a      	add	r2, r1
 80006e0:	4619      	mov	r1, r3
 80006e2:	2001      	movs	r0, #1
 80006e4:	f009 fd24 	bl	800a130 <HAL_FLASH_Program>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d002      	beq.n	80006f4 <writeConfigFlash+0x44>
			{
				// Error during flash write
				error_code = HAL_FLASH_GetError();
 80006ee:	f009 fdc7 	bl	800a280 <HAL_FLASH_GetError>
 80006f2:	60f8      	str	r0, [r7, #12]
		for (uint32_t offset = 0; offset < sizeof(sFlashConfig); offset += FLASH_WORD)
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	3320      	adds	r3, #32
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d0e9      	beq.n	80006d4 <writeConfigFlash+0x24>
 8000700:	e002      	b.n	8000708 <writeConfigFlash+0x58>
			}
		}
	}
	else
	{
		error_code = HAL_FLASH_GetError();
 8000702:	f009 fdbd 	bl	800a280 <HAL_FLASH_GetError>
 8000706:	60f8      	str	r0, [r7, #12]
	}

	  // Lock Flash
	  HAL_FLASH_Lock();
 8000708:	f009 fda2 	bl	800a250 <HAL_FLASH_Lock>

	  return error_code;
 800070c:	68fb      	ldr	r3, [r7, #12]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	24000024 	.word	0x24000024
 800071c:	080e0000 	.word	0x080e0000
 8000720:	24000a40 	.word	0x24000a40

08000724 <readConfigFlash>:

// Read configuration from flash
static void readConfigFlash(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
	// Read configuration from flash
	memcpy(&sFlashConfig, (void *) FLASH_SECTOR7_START_ADDR, sizeof(sFlashConfig));
 8000728:	4b04      	ldr	r3, [pc, #16]	@ (800073c <readConfigFlash+0x18>)
 800072a:	781a      	ldrb	r2, [r3, #0]
 800072c:	4b04      	ldr	r3, [pc, #16]	@ (8000740 <readConfigFlash+0x1c>)
 800072e:	701a      	strb	r2, [r3, #0]
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	080e0000 	.word	0x080e0000
 8000740:	24000a40 	.word	0x24000a40

08000744 <printCR>:

// Print CR
static void printCR(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, (uint8_t *) "\n\r", 2, 1000);
 8000748:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800074c:	2202      	movs	r2, #2
 800074e:	4903      	ldr	r1, [pc, #12]	@ (800075c <printCR+0x18>)
 8000750:	4803      	ldr	r0, [pc, #12]	@ (8000760 <printCR+0x1c>)
 8000752:	f00f f80e 	bl	800f772 <HAL_UART_Transmit>
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	08013ab0 	.word	0x08013ab0
 8000760:	24000e30 	.word	0x24000e30

08000764 <printString>:

// Print string on UART3
static void printString(char *str)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) str, strlen(str), 1000);
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff fe1f 	bl	80003b0 <strlen>
 8000772:	4603      	mov	r3, r0
 8000774:	b29a      	uxth	r2, r3
 8000776:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800077a:	6879      	ldr	r1, [r7, #4]
 800077c:	4803      	ldr	r0, [pc, #12]	@ (800078c <printString+0x28>)
 800077e:	f00e fff8 	bl	800f772 <HAL_UART_Transmit>
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	24000e30 	.word	0x24000e30

08000790 <printConfigFlash>:

// Print configuration on UART3
static void printConfigFlash(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	printString("\n\rCurrent configuration:");
 8000794:	480e      	ldr	r0, [pc, #56]	@ (80007d0 <printConfigFlash+0x40>)
 8000796:	f7ff ffe5 	bl	8000764 <printString>
	printString("\n\r  Mode = ");
 800079a:	480e      	ldr	r0, [pc, #56]	@ (80007d4 <printConfigFlash+0x44>)
 800079c:	f7ff ffe2 	bl	8000764 <printString>
	if (sFlashConfig.mode == TEST_MODE)
 80007a0:	4b0d      	ldr	r3, [pc, #52]	@ (80007d8 <printConfigFlash+0x48>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d103      	bne.n	80007b0 <printConfigFlash+0x20>
		printString("TEST");
 80007a8:	480c      	ldr	r0, [pc, #48]	@ (80007dc <printConfigFlash+0x4c>)
 80007aa:	f7ff ffdb 	bl	8000764 <printString>
 80007ae:	e00a      	b.n	80007c6 <printConfigFlash+0x36>
	else if (sFlashConfig.mode == RUN_MODE)
 80007b0:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <printConfigFlash+0x48>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d103      	bne.n	80007c0 <printConfigFlash+0x30>
		printString("RUN");
 80007b8:	4809      	ldr	r0, [pc, #36]	@ (80007e0 <printConfigFlash+0x50>)
 80007ba:	f7ff ffd3 	bl	8000764 <printString>
 80007be:	e002      	b.n	80007c6 <printConfigFlash+0x36>
	else
		printString("UNKNOWN");
 80007c0:	4808      	ldr	r0, [pc, #32]	@ (80007e4 <printConfigFlash+0x54>)
 80007c2:	f7ff ffcf 	bl	8000764 <printString>
	printCR();
 80007c6:	f7ff ffbd 	bl	8000744 <printCR>
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	08013ab4 	.word	0x08013ab4
 80007d4:	08013ad0 	.word	0x08013ad0
 80007d8:	24000a40 	.word	0x24000a40
 80007dc:	08013adc 	.word	0x08013adc
 80007e0:	08013ae4 	.word	0x08013ae4
 80007e4:	08013ae8 	.word	0x08013ae8

080007e8 <printNumber>:

// Print 16bit unsigned integer on UART3
static void printNumber(const char *text, uint16_t number, uint8_t CR)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b09e      	sub	sp, #120	@ 0x78
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	460b      	mov	r3, r1
 80007f2:	807b      	strh	r3, [r7, #2]
 80007f4:	4613      	mov	r3, r2
 80007f6:	707b      	strb	r3, [r7, #1]
	char s_output[100];
	char s_number[7];
	strcpy(s_output, text);
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	6879      	ldr	r1, [r7, #4]
 80007fe:	4618      	mov	r0, r3
 8000800:	f011 f965 	bl	8011ace <strcpy>
	itoa(number, s_number, 10);
 8000804:	887b      	ldrh	r3, [r7, #2]
 8000806:	f107 010c 	add.w	r1, r7, #12
 800080a:	220a      	movs	r2, #10
 800080c:	4618      	mov	r0, r3
 800080e:	f010 faad 	bl	8010d6c <itoa>
	strcat(s_output, s_number);
 8000812:	f107 020c 	add.w	r2, r7, #12
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4611      	mov	r1, r2
 800081c:	4618      	mov	r0, r3
 800081e:	f011 f8d0 	bl	80119c2 <strcat>
	if (CR)
 8000822:	787b      	ldrb	r3, [r7, #1]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d00e      	beq.n	8000846 <printNumber+0x5e>
	{
		strcat(s_output, "\n\r");
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff fdbf 	bl	80003b0 <strlen>
 8000832:	4603      	mov	r3, r0
 8000834:	461a      	mov	r2, r3
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4413      	add	r3, r2
 800083c:	4a0b      	ldr	r2, [pc, #44]	@ (800086c <printNumber+0x84>)
 800083e:	8811      	ldrh	r1, [r2, #0]
 8000840:	7892      	ldrb	r2, [r2, #2]
 8000842:	8019      	strh	r1, [r3, #0]
 8000844:	709a      	strb	r2, [r3, #2]
	}
	HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff fdb0 	bl	80003b0 <strlen>
 8000850:	4603      	mov	r3, r0
 8000852:	b29a      	uxth	r2, r3
 8000854:	f107 0114 	add.w	r1, r7, #20
 8000858:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800085c:	4804      	ldr	r0, [pc, #16]	@ (8000870 <printNumber+0x88>)
 800085e:	f00e ff88 	bl	800f772 <HAL_UART_Transmit>
}
 8000862:	bf00      	nop
 8000864:	3778      	adds	r7, #120	@ 0x78
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	08013ab0 	.word	0x08013ab0
 8000870:	24000e30 	.word	0x24000e30

08000874 <printHALErrorStatus>:

// Print HAL error status on UART3
static void	printHALErrorStatus(HAL_StatusTypeDef HALresp, const char *text)
{
 8000874:	b5b0      	push	{r4, r5, r7, lr}
 8000876:	b09c      	sub	sp, #112	@ 0x70
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	6039      	str	r1, [r7, #0]
 800087e:	71fb      	strb	r3, [r7, #7]
	char s_output[100];

	switch (HALresp)
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	2b03      	cmp	r3, #3
 8000884:	d828      	bhi.n	80008d8 <printHALErrorStatus+0x64>
 8000886:	a201      	add	r2, pc, #4	@ (adr r2, 800088c <printHALErrorStatus+0x18>)
 8000888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800088c:	080008d9 	.word	0x080008d9
 8000890:	0800089d 	.word	0x0800089d
 8000894:	080008b1 	.word	0x080008b1
 8000898:	080008c5 	.word	0x080008c5
	{
		case HAL_ERROR:
			strcpy(s_output, "** HAL ERROR **: ");
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	4a15      	ldr	r2, [pc, #84]	@ (80008f8 <printHALErrorStatus+0x84>)
 80008a2:	461c      	mov	r4, r3
 80008a4:	4615      	mov	r5, r2
 80008a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008aa:	682b      	ldr	r3, [r5, #0]
 80008ac:	8023      	strh	r3, [r4, #0]
		break;
 80008ae:	e013      	b.n	80008d8 <printHALErrorStatus+0x64>

		case HAL_BUSY:
			strcpy(s_output, "** HAL BUSY **: ");
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	4a11      	ldr	r2, [pc, #68]	@ (80008fc <printHALErrorStatus+0x88>)
 80008b6:	461c      	mov	r4, r3
 80008b8:	4615      	mov	r5, r2
 80008ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008be:	682b      	ldr	r3, [r5, #0]
 80008c0:	7023      	strb	r3, [r4, #0]
		break;
 80008c2:	e009      	b.n	80008d8 <printHALErrorStatus+0x64>

		case HAL_TIMEOUT:
			strcpy(s_output, "** HAL TIMEOUT **: ");
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000900 <printHALErrorStatus+0x8c>)
 80008ca:	461c      	mov	r4, r3
 80008cc:	4615      	mov	r5, r2
 80008ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008d2:	682b      	ldr	r3, [r5, #0]
 80008d4:	6023      	str	r3, [r4, #0]
		break;
 80008d6:	bf00      	nop

		case HAL_OK:
		break;
	}
	strcat(s_output, text);
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	6839      	ldr	r1, [r7, #0]
 80008de:	4618      	mov	r0, r3
 80008e0:	f011 f86f 	bl	80119c2 <strcat>
	printString(s_output);
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff3b 	bl	8000764 <printString>
}
 80008ee:	bf00      	nop
 80008f0:	3770      	adds	r7, #112	@ 0x70
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bdb0      	pop	{r4, r5, r7, pc}
 80008f6:	bf00      	nop
 80008f8:	08013af0 	.word	0x08013af0
 80008fc:	08013b04 	.word	0x08013b04
 8000900:	08013b18 	.word	0x08013b18

08000904 <stopHbridge>:

void stopHbridge(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]

	//Stop TIMER 1 PWM & interrupts
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);  //This will stop channel PWM1
 8000918:	2100      	movs	r1, #0
 800091a:	480f      	ldr	r0, [pc, #60]	@ (8000958 <stopHbridge+0x54>)
 800091c:	f00d fcd4 	bl	800e2c8 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); //This will stop channel PWM1N
 8000920:	2100      	movs	r1, #0
 8000922:	480d      	ldr	r0, [pc, #52]	@ (8000958 <stopHbridge+0x54>)
 8000924:	f00e fd16 	bl	800f354 <HAL_TIMEx_PWMN_Stop>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, TIM1_CH1N_Pin|TIM1_CH1_Pin, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800092e:	480b      	ldr	r0, [pc, #44]	@ (800095c <stopHbridge+0x58>)
 8000930:	f009 ff9c 	bl	800a86c <HAL_GPIO_WritePin>
	/*Configure GPIO pins : LED_GREEN_Pin LINE_DRIVER1_ENABLE_Pin LINE_DRIVER2_ENABLE_Pin LED_RED_Pin */
	GPIO_InitStruct.Pin = TIM1_CH1N_Pin|TIM1_CH1_Pin;
 8000934:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000938:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	4619      	mov	r1, r3
 800094a:	4804      	ldr	r0, [pc, #16]	@ (800095c <stopHbridge+0x58>)
 800094c:	f009 fdce 	bl	800a4ec <HAL_GPIO_Init>

}
 8000950:	bf00      	nop
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	24000ec4 	.word	0x24000ec4
 800095c:	58021000 	.word	0x58021000

08000960 <printHbridgeData>:

// Print H-bridge data on UART3
static void printHbridgeData(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b09c      	sub	sp, #112	@ 0x70
 8000964:	af02      	add	r7, sp, #8
	char s_output[100];
	sprintf(s_output, "\n\rH-bridge 1=On 0=Off: %u, Frequency: %u (Hz), Dead time: %u (%%)\n\r", sHbridge.on, sHbridge.frequency, sHbridge.deadtime);
 8000966:	4b0f      	ldr	r3, [pc, #60]	@ (80009a4 <printHbridgeData+0x44>)
 8000968:	881b      	ldrh	r3, [r3, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	4b0d      	ldr	r3, [pc, #52]	@ (80009a4 <printHbridgeData+0x44>)
 800096e:	885b      	ldrh	r3, [r3, #2]
 8000970:	4619      	mov	r1, r3
 8000972:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <printHbridgeData+0x44>)
 8000974:	889b      	ldrh	r3, [r3, #4]
 8000976:	1d38      	adds	r0, r7, #4
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	460b      	mov	r3, r1
 800097c:	490a      	ldr	r1, [pc, #40]	@ (80009a8 <printHbridgeData+0x48>)
 800097e:	f010 ffb5 	bl	80118ec <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff fd13 	bl	80003b0 <strlen>
 800098a:	4603      	mov	r3, r0
 800098c:	b29a      	uxth	r2, r3
 800098e:	1d39      	adds	r1, r7, #4
 8000990:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000994:	4805      	ldr	r0, [pc, #20]	@ (80009ac <printHbridgeData+0x4c>)
 8000996:	f00e feec 	bl	800f772 <HAL_UART_Transmit>
}
 800099a:	bf00      	nop
 800099c:	3768      	adds	r7, #104	@ 0x68
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	2400001c 	.word	0x2400001c
 80009a8:	08013b2c 	.word	0x08013b2c
 80009ac:	24000e30 	.word	0x24000e30

080009b0 <programHbridge>:



// Program TIMER 1 controlling the H-bridge
static void programHbridge()
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b0a6      	sub	sp, #152	@ 0x98
 80009b4:	af00      	add	r7, sp, #0
	uint8_t DT, DTG;
	float tDTS = 1E6/((float) TIMER_BASE_CLOCK);  //Minimum step in usec
 80009b6:	4b90      	ldr	r3, [pc, #576]	@ (8000bf8 <programHbridge+0x248>)
 80009b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	// TIMER 1 has already been initialized using HAL.
	// Program the H-bridge TIMER 1 - Clock TIMER_BASE_CLOCK

	// Calculate the period and duty cycle based on the frequency requested.
	timARR_f = ((float) TIMER_BASE_CLOCK) / ((float) sHbridge.frequency);
 80009bc:	4b8f      	ldr	r3, [pc, #572]	@ (8000bfc <programHbridge+0x24c>)
 80009be:	885b      	ldrh	r3, [r3, #2]
 80009c0:	ee07 3a90 	vmov	s15, r3
 80009c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009c8:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8000c00 <programHbridge+0x250>
 80009cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009d0:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
	timARR = (uint32_t) (timARR_f + 0.5);							// Set period counter
 80009d4:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80009d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009dc:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 80009e0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80009e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80009e8:	ee17 3a90 	vmov	r3, s15
 80009ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	timCCR1 = timARR / 2;  											// 50% duty cycle
 80009f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80009f4:	085b      	lsrs	r3, r3, #1
 80009f6:	67fb      	str	r3, [r7, #124]	@ 0x7c

	// Print out the set frequency
	if (debug == 1)
 80009f8:	4b82      	ldr	r3, [pc, #520]	@ (8000c04 <programHbridge+0x254>)
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d105      	bne.n	8000a0c <programHbridge+0x5c>
	{
		value_int = ((uint32_t) TIMER_BASE_CLOCK) / timARR;
 8000a00:	4a81      	ldr	r2, [pc, #516]	@ (8000c08 <programHbridge+0x258>)
 8000a02:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0a:	67bb      	str	r3, [r7, #120]	@ 0x78
	//  DTG[7:5] = 10x => DT = (64 + DTG[5:0]) x tDTG with tDTG =2xtDTS.	 max (64 + 63)*2*tDTS  	: 3.7236 usec - 7.3890 usec
	//  DTG[7:5] = 110 => DT = (32 + DTG[4:0]) x tDTG with tDTG =8xtDTS.     max (32 + 31)*8*tDTS   : 7.4472 usec - 14.662 usec
	//  DTG[7:5] = 111 => DT = (32 + DTG[4:0]) x tDTG with tDTG = 16 x tDTS. max (32 + 31)*16*tDTS 	: 14.895 usec - 29.324 usec

	// Calculate dead time in usec
	req_dtime_us = (((float) sHbridge.deadtime))*(10000./(float) sHbridge.frequency);
 8000a0c:	4b7b      	ldr	r3, [pc, #492]	@ (8000bfc <programHbridge+0x24c>)
 8000a0e:	889b      	ldrh	r3, [r3, #4]
 8000a10:	ee07 3a90 	vmov	s15, r3
 8000a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a18:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000a1c:	4b77      	ldr	r3, [pc, #476]	@ (8000bfc <programHbridge+0x24c>)
 8000a1e:	885b      	ldrh	r3, [r3, #2]
 8000a20:	ee07 3a90 	vmov	s15, r3
 8000a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a28:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000a2c:	ed9f 4b70 	vldr	d4, [pc, #448]	@ 8000bf0 <programHbridge+0x240>
 8000a30:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000a34:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000a38:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a3c:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
		printString(s_output);
	}
*/

	// Minimum allowed dead time is 1 usec.
	if (req_dtime_us < 1.0)
 8000a40:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8000a44:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000a48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a50:	d503      	bpl.n	8000a5a <programHbridge+0xaa>
		req_dtime_us = 1.0;
 8000a52:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000a56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	if (req_dtime_us <= 127*tDTS) //3.6946
 8000a5a:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000a5e:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8000c0c <programHbridge+0x25c>
 8000a62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a66:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000a6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a72:	d81e      	bhi.n	8000ab2 <programHbridge+0x102>
	{
		DT = (uint8_t) (req_dtime_us/tDTS + 0.5);
 8000a74:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000a78:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000a7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a84:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000a88:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000a8c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a90:	edc7 7a01 	vstr	s15, [r7, #4]
 8000a94:	793b      	ldrb	r3, [r7, #4]
 8000a96:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 127)
 8000a9a:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	da02      	bge.n	8000aa8 <programHbridge+0xf8>
			DT = 127;
 8000aa2:	237f      	movs	r3, #127	@ 0x7f
 8000aa4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT;
 8000aa8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000aac:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000ab0:	e0bb      	b.n	8000c2a <programHbridge+0x27a>
	}
	else if (req_dtime_us <= 127*2*tDTS) //7.3890
 8000ab2:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000ab6:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8000c10 <programHbridge+0x260>
 8000aba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000abe:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000ac2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aca:	d825      	bhi.n	8000b18 <programHbridge+0x168>
	{
		DT = (uint8_t) ((req_dtime_us/(2*tDTS)) - 64 + 0.5);
 8000acc:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000ad0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000ad4:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000ad8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000adc:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8000c14 <programHbridge+0x264>
 8000ae0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ae4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ae8:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000aec:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000af0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000af4:	edc7 7a01 	vstr	s15, [r7, #4]
 8000af8:	793b      	ldrb	r3, [r7, #4]
 8000afa:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 63)
 8000afe:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000b02:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b04:	d902      	bls.n	8000b0c <programHbridge+0x15c>
			DT = 63;
 8000b06:	233f      	movs	r3, #63	@ 0x3f
 8000b08:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT + 0x80;
 8000b0c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000b10:	3b80      	subs	r3, #128	@ 0x80
 8000b12:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000b16:	e088      	b.n	8000c2a <programHbridge+0x27a>
	}
	else if (req_dtime_us <= 63*8*tDTS) //14.662
 8000b18:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000b1c:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8000c18 <programHbridge+0x268>
 8000b20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b24:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000b28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b30:	d827      	bhi.n	8000b82 <programHbridge+0x1d2>
	{
		DT = (uint8_t) ((req_dtime_us/(8*tDTS)) - 32 + 0.5);
 8000b32:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000b36:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8000b3a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b3e:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000b42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b46:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8000c1c <programHbridge+0x26c>
 8000b4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b4e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b52:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000b56:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b5a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b5e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000b62:	793b      	ldrb	r3, [r7, #4]
 8000b64:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 31)
 8000b68:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000b6c:	2b1f      	cmp	r3, #31
 8000b6e:	d902      	bls.n	8000b76 <programHbridge+0x1c6>
			DT = 31;
 8000b70:	231f      	movs	r3, #31
 8000b72:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT + 0xC0;
 8000b76:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000b7a:	3b40      	subs	r3, #64	@ 0x40
 8000b7c:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000b80:	e053      	b.n	8000c2a <programHbridge+0x27a>
	}
	else if (req_dtime_us <= 63*16*tDTS) //29.324
 8000b82:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000b86:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8000c20 <programHbridge+0x270>
 8000b8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b8e:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000b92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b9a:	d843      	bhi.n	8000c24 <programHbridge+0x274>
	{
		DT = (uint8_t) ((req_dtime_us/(16*tDTS)) - 32 + 0.5);
 8000b9c:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000ba0:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8000ba4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ba8:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000bac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bb0:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000c1c <programHbridge+0x26c>
 8000bb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000bb8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bbc:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000bc0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000bc4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000bc8:	edc7 7a01 	vstr	s15, [r7, #4]
 8000bcc:	793b      	ldrb	r3, [r7, #4]
 8000bce:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 31)
 8000bd2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000bd6:	2b1f      	cmp	r3, #31
 8000bd8:	d902      	bls.n	8000be0 <programHbridge+0x230>
			DT = 31;
 8000bda:	231f      	movs	r3, #31
 8000bdc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT + 0xE0;
 8000be0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000be4:	3b20      	subs	r3, #32
 8000be6:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000bea:	e01e      	b.n	8000c2a <programHbridge+0x27a>
 8000bec:	f3af 8000 	nop.w
 8000bf0:	00000000 	.word	0x00000000
 8000bf4:	40c38800 	.word	0x40c38800
 8000bf8:	3cee500f 	.word	0x3cee500f
 8000bfc:	2400001c 	.word	0x2400001c
 8000c00:	4c032156 	.word	0x4c032156
 8000c04:	24000000 	.word	0x24000000
 8000c08:	020c8558 	.word	0x020c8558
 8000c0c:	42fe0000 	.word	0x42fe0000
 8000c10:	437e0000 	.word	0x437e0000
 8000c14:	42800000 	.word	0x42800000
 8000c18:	43fc0000 	.word	0x43fc0000
 8000c1c:	42000000 	.word	0x42000000
 8000c20:	447c0000 	.word	0x447c0000
	}
	else
		DTG = 255;
 8000c24:	23ff      	movs	r3, #255	@ 0xff
 8000c26:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96

	uint32_t temp = TIM1->BDTR & 0xFFFFFF00;		//Mask out DTG
 8000c2a:	4b4e      	ldr	r3, [pc, #312]	@ (8000d64 <programHbridge+0x3b4>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000c32:	677b      	str	r3, [r7, #116]	@ 0x74
	timBDTR = temp | DTG;							//Add new DTG
 8000c34:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000c38:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	673b      	str	r3, [r7, #112]	@ 0x70

	//Change timer1 settings
	htim1.Init.Period = timARR;   // Updating internal structure for timer
 8000c3e:	4a4a      	ldr	r2, [pc, #296]	@ (8000d68 <programHbridge+0x3b8>)
 8000c40:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000c44:	60d3      	str	r3, [r2, #12]
	TIM1->ARR = timARR;			  // Update period
 8000c46:	4a47      	ldr	r2, [pc, #284]	@ (8000d64 <programHbridge+0x3b4>)
 8000c48:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000c4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM1->CCR1 = timCCR1;		  // Update duty cycle
 8000c4e:	4a45      	ldr	r2, [pc, #276]	@ (8000d64 <programHbridge+0x3b4>)
 8000c50:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000c52:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM1->BDTR = timBDTR;	      // Update dead time
 8000c54:	4a43      	ldr	r2, [pc, #268]	@ (8000d64 <programHbridge+0x3b4>)
 8000c56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000c58:	6453      	str	r3, [r2, #68]	@ 0x44

	if (debug == 1) {
 8000c5a:	4b44      	ldr	r3, [pc, #272]	@ (8000d6c <programHbridge+0x3bc>)
 8000c5c:	881b      	ldrh	r3, [r3, #0]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d160      	bne.n	8000d24 <programHbridge+0x374>
		//sprintf(s_output, "ARR %lu CCR1 %lu BDTR %lu", timARR, timCCR1, timBDTR & 0xFF);
		//printString(s_output);

		float calcDT = 0;
 8000c62:	f04f 0300 	mov.w	r3, #0
 8000c66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		//  DTG[7:5] = 0xx => DT = DTG[7:0] x tDTG with tDTG = tDTS.			 max 127*tDTS   		: 0.0000 usec - 3.6946 usec
		if ((DTG & 0x80) == 0) {
 8000c6a:	f997 3096 	ldrsb.w	r3, [r7, #150]	@ 0x96
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	db0b      	blt.n	8000c8a <programHbridge+0x2da>
			calcDT = DTG*tDTS;
 8000c72:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000c76:	ee07 3a90 	vmov	s15, r3
 8000c7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c7e:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c86:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		//  DTG[7:5] = 10x => DT = (64 + DTG[5:0]) x tDTG with tDTG =2xtDTS.	 max (64 + 63)*2*tDTS  	: 3.7236 usec - 7.3890 usec
		if ((DTG & 0xC0) == 0x80) {
 8000c8a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000c8e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000c92:	2b80      	cmp	r3, #128	@ 0x80
 8000c94:	d10f      	bne.n	8000cb6 <programHbridge+0x306>
			calcDT = (64 + (DTG & 0x3F))*2*tDTS;
 8000c96:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000c9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000c9e:	3340      	adds	r3, #64	@ 0x40
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	ee07 3a90 	vmov	s15, r3
 8000ca6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000caa:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cb2:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		//  DTG[7:5] = 110 => DT = (32 + DTG[4:0]) x tDTG with tDTG =8xtDTS.     max (32 + 31)*8*tDTS   : 7.4472 usec - 14.662 usec
		if ((DTG & 0xE0) == 0xC0) {
 8000cb6:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000cba:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000cbe:	2bc0      	cmp	r3, #192	@ 0xc0
 8000cc0:	d10f      	bne.n	8000ce2 <programHbridge+0x332>
			calcDT = (32 + (DTG & 0x1F))*8*tDTS;
 8000cc2:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000cc6:	f003 031f 	and.w	r3, r3, #31
 8000cca:	3320      	adds	r3, #32
 8000ccc:	00db      	lsls	r3, r3, #3
 8000cce:	ee07 3a90 	vmov	s15, r3
 8000cd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cd6:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cde:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		//  DTG[7:5] = 111 => DT = (32 + DTG[4:0]) x tDTG with tDTG = 16 x tDTS. max (32 + 31)*16*tDTS 	: 14.895 usec - 29.324 usec
		if ((DTG & 0xE0) == 0xE0) {
 8000ce2:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000ce6:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000cea:	2be0      	cmp	r3, #224	@ 0xe0
 8000cec:	d10f      	bne.n	8000d0e <programHbridge+0x35e>
			calcDT = (32 + (DTG & 0x1F))*16*tDTS;
 8000cee:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000cf2:	f003 031f 	and.w	r3, r3, #31
 8000cf6:	3320      	adds	r3, #32
 8000cf8:	011b      	lsls	r3, r3, #4
 8000cfa:	ee07 3a90 	vmov	s15, r3
 8000cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d02:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d0a:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		value_int = (uint32_t) 1000*calcDT;
 8000d0e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8000d12:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000d70 <programHbridge+0x3c0>
 8000d16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d1e:	ee17 3a90 	vmov	r3, s15
 8000d22:	67bb      	str	r3, [r7, #120]	@ 0x78
		//sprintf(s_output, "\n\rSet dead time: %lu (ns)\n\r", value_int);
		//printString(s_output);
	}

	//Start driving the H-bridge
	if (sHbridge.on && (TIM_CHANNEL_STATE_GET(&htim1, TIM_CHANNEL_1) == HAL_TIM_CHANNEL_STATE_READY))
 8000d24:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <programHbridge+0x3c4>)
 8000d26:	881b      	ldrh	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d010      	beq.n	8000d4e <programHbridge+0x39e>
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d68 <programHbridge+0x3b8>)
 8000d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d10a      	bne.n	8000d4e <programHbridge+0x39e>
	{
		HAL_TIM_MspPostInit(&htim1);	//Setup GPIO for timer alternate function
 8000d38:	480b      	ldr	r0, [pc, #44]	@ (8000d68 <programHbridge+0x3b8>)
 8000d3a:	f003 f87b 	bl	8003e34 <HAL_TIM_MspPostInit>
		//Start TIMER 1 PWM & interrupts
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  //This will start channel PWM1
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4809      	ldr	r0, [pc, #36]	@ (8000d68 <programHbridge+0x3b8>)
 8000d42:	f00d f9a5 	bl	800e090 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); //This will start channel PWM1N
 8000d46:	2100      	movs	r1, #0
 8000d48:	4807      	ldr	r0, [pc, #28]	@ (8000d68 <programHbridge+0x3b8>)
 8000d4a:	f00e fa33 	bl	800f1b4 <HAL_TIMEx_PWMN_Start>
	}

	//Stop driving the H-bridge
	if (!sHbridge.on)
 8000d4e:	4b09      	ldr	r3, [pc, #36]	@ (8000d74 <programHbridge+0x3c4>)
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d101      	bne.n	8000d5a <programHbridge+0x3aa>
	{
		stopHbridge();
 8000d56:	f7ff fdd5 	bl	8000904 <stopHbridge>
	}

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);

}
 8000d5a:	bf00      	nop
 8000d5c:	3798      	adds	r7, #152	@ 0x98
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40010000 	.word	0x40010000
 8000d68:	24000ec4 	.word	0x24000ec4
 8000d6c:	24000000 	.word	0x24000000
 8000d70:	447a0000 	.word	0x447a0000
 8000d74:	2400001c 	.word	0x2400001c

08000d78 <convertADC12data>:
#define ADC1_VplaL1			4	//Plasma voltage L1
#define ADC2_VplaL2			5	//Plasma voltage L2

//Convert ADC1 & ADC2 data to voltages and current
float convertADC12data(uint32_t item, char **text)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
	float result = 0;
 8000d82:	f04f 0300 	mov.w	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
* 3.3           *   (ADCData/65536.0)       *    1000
*   ^                   ^       ^                  ^
*   |                   |       |                  |
 * full scale V      Raw Data   Max ADC Value    Convert to mV
 */
	switch (item % (2*ADC12_NO_CHANNELS)) {
 8000d88:	6879      	ldr	r1, [r7, #4]
 8000d8a:	4b99      	ldr	r3, [pc, #612]	@ (8000ff0 <convertADC12data+0x278>)
 8000d8c:	fba3 2301 	umull	r2, r3, r3, r1
 8000d90:	089a      	lsrs	r2, r3, #2
 8000d92:	4613      	mov	r3, r2
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	4413      	add	r3, r2
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	1aca      	subs	r2, r1, r3
 8000d9c:	2a05      	cmp	r2, #5
 8000d9e:	f200 80f4 	bhi.w	8000f8a <convertADC12data+0x212>
 8000da2:	a301      	add	r3, pc, #4	@ (adr r3, 8000da8 <convertADC12data+0x30>)
 8000da4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8000da8:	08000dc1 	.word	0x08000dc1
 8000dac:	08000de5 	.word	0x08000de5
 8000db0:	08000e51 	.word	0x08000e51
 8000db4:	08000e8b 	.word	0x08000e8b
 8000db8:	08000ec5 	.word	0x08000ec5
 8000dbc:	08000f2f 	.word	0x08000f2f
		case ADC1_TIM1_CH1:
			result = sADC.adc12_data[item];
 8000dc0:	4a8c      	ldr	r2, [pc, #560]	@ (8000ff4 <convertADC12data+0x27c>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dc8:	ee07 3a90 	vmov	s15, r3
 8000dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dd0:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f000 80cc 	beq.w	8000f74 <convertADC12data+0x1fc>
				*text ="ADC1_TIM1_CH1";
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	4a86      	ldr	r2, [pc, #536]	@ (8000ff8 <convertADC12data+0x280>)
 8000de0:	601a      	str	r2, [r3, #0]
			break;
 8000de2:	e0c7      	b.n	8000f74 <convertADC12data+0x1fc>

		case ADC2_Is:
			V = 3.3*(((float) sADC.adc12_data[item])/65536.0)*1000;
 8000de4:	4a83      	ldr	r2, [pc, #524]	@ (8000ff4 <convertADC12data+0x27c>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dec:	ee07 3a90 	vmov	s15, r3
 8000df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000df4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000df8:	ed9f 5b69 	vldr	d5, [pc, #420]	@ 8000fa0 <convertADC12data+0x228>
 8000dfc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e00:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8000fa8 <convertADC12data+0x230>
 8000e04:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e08:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8000fb0 <convertADC12data+0x238>
 8000e0c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e10:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e14:	edc7 7a02 	vstr	s15, [r7, #8]
			result =  2000*(V - 1.585714)/3.594286; //V;
 8000e18:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e1c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e20:	ed9f 6b65 	vldr	d6, [pc, #404]	@ 8000fb8 <convertADC12data+0x240>
 8000e24:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e28:	ed9f 6b65 	vldr	d6, [pc, #404]	@ 8000fc0 <convertADC12data+0x248>
 8000e2c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000e30:	ed9f 5b65 	vldr	d5, [pc, #404]	@ 8000fc8 <convertADC12data+0x250>
 8000e34:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e38:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e3c:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f000 8098 	beq.w	8000f78 <convertADC12data+0x200>
				*text ="ADC2_Is(mA)";
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	4a6c      	ldr	r2, [pc, #432]	@ (8000ffc <convertADC12data+0x284>)
 8000e4c:	601a      	str	r2, [r3, #0]
			break;
 8000e4e:	e093      	b.n	8000f78 <convertADC12data+0x200>

		case ADC1_VbriS1:
			result =  1000*((12.0+2000.0)/12.0)*3.3*(((float) sADC.adc12_data[item])/65536.0); // 3.3*(((float) sADC.adc12_data[item])/65536.0)*1000;
 8000e50:	4a68      	ldr	r2, [pc, #416]	@ (8000ff4 <convertADC12data+0x27c>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e58:	ee07 3a90 	vmov	s15, r3
 8000e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e60:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e64:	ed9f 5b4e 	vldr	d5, [pc, #312]	@ 8000fa0 <convertADC12data+0x228>
 8000e68:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e6c:	ed9f 6b58 	vldr	d6, [pc, #352]	@ 8000fd0 <convertADC12data+0x258>
 8000e70:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e74:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e78:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d07c      	beq.n	8000f7c <convertADC12data+0x204>
				*text ="ADC1_VbriS1(mV)";
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	4a5e      	ldr	r2, [pc, #376]	@ (8001000 <convertADC12data+0x288>)
 8000e86:	601a      	str	r2, [r3, #0]
			break;
 8000e88:	e078      	b.n	8000f7c <convertADC12data+0x204>

		case ADC2_VbriS2:
			result =  1000*((12.0+2000.0)/12.0)*3.3*(((float) sADC.adc12_data[item])/65536.0); //3.3*(((float) sADC.adc12_data[item])/65536.0) * 1000;
 8000e8a:	4a5a      	ldr	r2, [pc, #360]	@ (8000ff4 <convertADC12data+0x27c>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e92:	ee07 3a90 	vmov	s15, r3
 8000e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e9a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e9e:	ed9f 5b40 	vldr	d5, [pc, #256]	@ 8000fa0 <convertADC12data+0x228>
 8000ea2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ea6:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 8000fd0 <convertADC12data+0x258>
 8000eaa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000eae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000eb2:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d061      	beq.n	8000f80 <convertADC12data+0x208>
				*text ="ADC2_VbriS2(mV)";
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	4a51      	ldr	r2, [pc, #324]	@ (8001004 <convertADC12data+0x28c>)
 8000ec0:	601a      	str	r2, [r3, #0]
			break;
 8000ec2:	e05d      	b.n	8000f80 <convertADC12data+0x208>

		case ADC1_VplaL1:
			V = 3.3*(((float) sADC.adc12_data[item])/65536.0) * 1000;
 8000ec4:	4a4b      	ldr	r2, [pc, #300]	@ (8000ff4 <convertADC12data+0x27c>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ecc:	ee07 3a90 	vmov	s15, r3
 8000ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ed4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000ed8:	ed9f 5b31 	vldr	d5, [pc, #196]	@ 8000fa0 <convertADC12data+0x228>
 8000edc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ee0:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 8000fa8 <convertADC12data+0x230>
 8000ee4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ee8:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 8000fb0 <convertADC12data+0x238>
 8000eec:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ef0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ef4:	edc7 7a02 	vstr	s15, [r7, #8]
			result =  1E6*(V-1.648348)/0.999; //V;//
 8000ef8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000efc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f00:	ed9f 6b35 	vldr	d6, [pc, #212]	@ 8000fd8 <convertADC12data+0x260>
 8000f04:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f08:	ed9f 6b35 	vldr	d6, [pc, #212]	@ 8000fe0 <convertADC12data+0x268>
 8000f0c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f10:	ed9f 5b35 	vldr	d5, [pc, #212]	@ 8000fe8 <convertADC12data+0x270>
 8000f14:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f18:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f1c:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d02e      	beq.n	8000f84 <convertADC12data+0x20c>
				*text ="ADC1_VplaL1(mV)";
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	4a37      	ldr	r2, [pc, #220]	@ (8001008 <convertADC12data+0x290>)
 8000f2a:	601a      	str	r2, [r3, #0]
			break;
 8000f2c:	e02a      	b.n	8000f84 <convertADC12data+0x20c>

		case ADC2_VplaL2:
			//V is the directly measured voltage from the ADC in mV
			V = 3.3*(((float) sADC.adc12_data[item])/65536.0) * 1000;
 8000f2e:	4a31      	ldr	r2, [pc, #196]	@ (8000ff4 <convertADC12data+0x27c>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f36:	ee07 3a90 	vmov	s15, r3
 8000f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f3e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000f42:	ed9f 5b17 	vldr	d5, [pc, #92]	@ 8000fa0 <convertADC12data+0x228>
 8000f46:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f4a:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 8000fa8 <convertADC12data+0x230>
 8000f4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f52:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 8000fb0 <convertADC12data+0x238>
 8000f56:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f5a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f5e:	edc7 7a02 	vstr	s15, [r7, #8]
			//result is the True voltage at L2 (corrected for voltage divider)
			result =  V;//1E6*(V-1.648348)/0.999;
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	60fb      	str	r3, [r7, #12]
			if (text)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d00d      	beq.n	8000f88 <convertADC12data+0x210>
				*text ="ADC2_VplaL2(mV)";
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	4a27      	ldr	r2, [pc, #156]	@ (800100c <convertADC12data+0x294>)
 8000f70:	601a      	str	r2, [r3, #0]
			break;
 8000f72:	e009      	b.n	8000f88 <convertADC12data+0x210>
			break;
 8000f74:	bf00      	nop
 8000f76:	e008      	b.n	8000f8a <convertADC12data+0x212>
			break;
 8000f78:	bf00      	nop
 8000f7a:	e006      	b.n	8000f8a <convertADC12data+0x212>
			break;
 8000f7c:	bf00      	nop
 8000f7e:	e004      	b.n	8000f8a <convertADC12data+0x212>
			break;
 8000f80:	bf00      	nop
 8000f82:	e002      	b.n	8000f8a <convertADC12data+0x212>
			break;
 8000f84:	bf00      	nop
 8000f86:	e000      	b.n	8000f8a <convertADC12data+0x212>
			break;
 8000f88:	bf00      	nop
	}

	return(result);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	ee07 3a90 	vmov	s15, r3
}
 8000f90:	eeb0 0a67 	vmov.f32	s0, s15
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	00000000 	.word	0x00000000
 8000fa4:	40f00000 	.word	0x40f00000
 8000fa8:	66666666 	.word	0x66666666
 8000fac:	400a6666 	.word	0x400a6666
 8000fb0:	00000000 	.word	0x00000000
 8000fb4:	408f4000 	.word	0x408f4000
 8000fb8:	a4acf313 	.word	0xa4acf313
 8000fbc:	3ff95f15 	.word	0x3ff95f15
 8000fc0:	00000000 	.word	0x00000000
 8000fc4:	409f4000 	.word	0x409f4000
 8000fc8:	04b3c3e7 	.word	0x04b3c3e7
 8000fcc:	400cc119 	.word	0x400cc119
 8000fd0:	ffffffff 	.word	0xffffffff
 8000fd4:	4120e2a7 	.word	0x4120e2a7
 8000fd8:	2706d506 	.word	0x2706d506
 8000fdc:	3ffa5fa2 	.word	0x3ffa5fa2
 8000fe0:	00000000 	.word	0x00000000
 8000fe4:	412e8480 	.word	0x412e8480
 8000fe8:	d916872b 	.word	0xd916872b
 8000fec:	3feff7ce 	.word	0x3feff7ce
 8000ff0:	aaaaaaab 	.word	0xaaaaaaab
 8000ff4:	2400032c 	.word	0x2400032c
 8000ff8:	08013b70 	.word	0x08013b70
 8000ffc:	08013b80 	.word	0x08013b80
 8001000:	08013b8c 	.word	0x08013b8c
 8001004:	08013b9c 	.word	0x08013b9c
 8001008:	08013bac 	.word	0x08013bac
 800100c:	08013bbc 	.word	0x08013bbc

08001010 <printADC12data>:

//Print measured ADC1 and ADC2 data on UART3
void printADC12data(void)
{
 8001010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001012:	b0f7      	sub	sp, #476	@ 0x1dc
 8001014:	af10      	add	r7, sp, #64	@ 0x40
	char *p_text[2*ADC12_NO_CHANNELS];
	float result[2*ADC12_NO_CHANNELS];

	if (debug == 1)
 8001016:	4ba0      	ldr	r3, [pc, #640]	@ (8001298 <printADC12data+0x288>)
 8001018:	881b      	ldrh	r3, [r3, #0]
 800101a:	2b01      	cmp	r3, #1
 800101c:	f040 8136 	bne.w	800128c <printADC12data+0x27c>
	{
		printCR();
 8001020:	f7ff fb90 	bl	8000744 <printCR>
		printNumber("No data: ", sADC.nADC12Read, 1);
 8001024:	4b9d      	ldr	r3, [pc, #628]	@ (800129c <printADC12data+0x28c>)
 8001026:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 800102a:	b29b      	uxth	r3, r3
 800102c:	2201      	movs	r2, #1
 800102e:	4619      	mov	r1, r3
 8001030:	489b      	ldr	r0, [pc, #620]	@ (80012a0 <printADC12data+0x290>)
 8001032:	f7ff fbd9 	bl	80007e8 <printNumber>
		for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i++)
 8001036:	2300      	movs	r3, #0
 8001038:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 800103c:	e119      	b.n	8001272 <printADC12data+0x262>
		{
			int ii = i % (2*ADC12_NO_CHANNELS);
 800103e:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001042:	4b98      	ldr	r3, [pc, #608]	@ (80012a4 <printADC12data+0x294>)
 8001044:	fb83 3102 	smull	r3, r1, r3, r2
 8001048:	17d3      	asrs	r3, r2, #31
 800104a:	1ac9      	subs	r1, r1, r3
 800104c:	460b      	mov	r3, r1
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	440b      	add	r3, r1
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
			result[ii] = convertADC12data(i, &p_text[ii]);
 800105a:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 800105e:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 8001062:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	4619      	mov	r1, r3
 800106c:	f7ff fe84 	bl	8000d78 <convertADC12data>
 8001070:	eef0 7a40 	vmov.f32	s15, s0
 8001074:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800107e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001082:	4413      	add	r3, r2
 8001084:	3b38      	subs	r3, #56	@ 0x38
 8001086:	edc3 7a00 	vstr	s15, [r3]
			char text[300];
			if (ii == 5)
 800108a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800108e:	2b05      	cmp	r3, #5
 8001090:	f040 80ea 	bne.w	8001268 <printADC12data+0x258>
			{
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001094:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001098:	4a82      	ldr	r2, [pc, #520]	@ (80012a4 <printADC12data+0x294>)
 800109a:	fb82 1203 	smull	r1, r2, r2, r3
 800109e:	17db      	asrs	r3, r3, #31
 80010a0:	eba2 0c03 	sub.w	ip, r2, r3
						p_text[ii-5],                     sADC.adc12_data[i-5],
 80010a4:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80010a8:	3b05      	subs	r3, #5
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80010b0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80010b4:	4413      	add	r3, r2
 80010b6:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80010ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
						p_text[ii-5],                     sADC.adc12_data[i-5],
 80010bc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80010c0:	3b05      	subs	r3, #5
 80010c2:	4a76      	ldr	r2, [pc, #472]	@ (800129c <printADC12data+0x28c>)
 80010c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80010c8:	62bb      	str	r3, [r7, #40]	@ 0x28
						p_text[ii-4], (int) result[ii-4], sADC.adc12_data[i-4],
 80010ca:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80010ce:	3b04      	subs	r3, #4
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 80010d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010da:	18d3      	adds	r3, r2, r3
 80010dc:	f853 5c20 	ldr.w	r5, [r3, #-32]
						p_text[ii-4], (int) result[ii-4], sADC.adc12_data[i-4],
 80010e0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80010e4:	3b04      	subs	r3, #4
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 80010ec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010f0:	18d3      	adds	r3, r2, r3
 80010f2:	3b38      	subs	r3, #56	@ 0x38
 80010f4:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80010f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010fc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
						p_text[ii-4], (int) result[ii-4], sADC.adc12_data[i-4],
 8001100:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001104:	3b04      	subs	r3, #4
 8001106:	4a65      	ldr	r2, [pc, #404]	@ (800129c <printADC12data+0x28c>)
 8001108:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800110c:	623b      	str	r3, [r7, #32]
						p_text[ii-3], (int) result[ii-3], sADC.adc12_data[i-3],
 800110e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001112:	3b03      	subs	r3, #3
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 800111a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800111e:	18d3      	adds	r3, r2, r3
 8001120:	f853 6c20 	ldr.w	r6, [r3, #-32]
						p_text[ii-3], (int) result[ii-3], sADC.adc12_data[i-3],
 8001124:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001128:	3b03      	subs	r3, #3
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 8001130:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001134:	18d3      	adds	r3, r2, r3
 8001136:	3b38      	subs	r3, #56	@ 0x38
 8001138:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800113c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001140:	edc7 7a07 	vstr	s15, [r7, #28]
						p_text[ii-3], (int) result[ii-3], sADC.adc12_data[i-3],
 8001144:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001148:	3b03      	subs	r3, #3
 800114a:	4a54      	ldr	r2, [pc, #336]	@ (800129c <printADC12data+0x28c>)
 800114c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001150:	61bb      	str	r3, [r7, #24]
						p_text[ii-2], (int) result[ii-2], sADC.adc12_data[i-2],
 8001152:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001156:	3b02      	subs	r3, #2
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 800115e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001162:	18d3      	adds	r3, r2, r3
 8001164:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8001168:	617a      	str	r2, [r7, #20]
						p_text[ii-2], (int) result[ii-2], sADC.adc12_data[i-2],
 800116a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800116e:	3b02      	subs	r3, #2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	f503 71b4 	add.w	r1, r3, #360	@ 0x168
 8001176:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800117a:	18cb      	adds	r3, r1, r3
 800117c:	3b38      	subs	r3, #56	@ 0x38
 800117e:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001182:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001186:	edc7 7a04 	vstr	s15, [r7, #16]
						p_text[ii-2], (int) result[ii-2], sADC.adc12_data[i-2],
 800118a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800118e:	3b02      	subs	r3, #2
 8001190:	4a42      	ldr	r2, [pc, #264]	@ (800129c <printADC12data+0x28c>)
 8001192:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001196:	60fb      	str	r3, [r7, #12]
						p_text[ii-1], (int) result[ii-1], sADC.adc12_data[i-1],
 8001198:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800119c:	3b01      	subs	r3, #1
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	f503 71b4 	add.w	r1, r3, #360	@ 0x168
 80011a4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011a8:	18cb      	adds	r3, r1, r3
 80011aa:	f853 1c20 	ldr.w	r1, [r3, #-32]
 80011ae:	60b9      	str	r1, [r7, #8]
						p_text[ii-1], (int) result[ii-1], sADC.adc12_data[i-1],
 80011b0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80011b4:	3b01      	subs	r3, #1
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	f503 70b4 	add.w	r0, r3, #360	@ 0x168
 80011bc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011c0:	18c3      	adds	r3, r0, r3
 80011c2:	3b38      	subs	r3, #56	@ 0x38
 80011c4:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011cc:	edc7 7a01 	vstr	s15, [r7, #4]
						p_text[ii-1], (int) result[ii-1], sADC.adc12_data[i-1],
 80011d0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80011d4:	1e5a      	subs	r2, r3, #1
 80011d6:	4b31      	ldr	r3, [pc, #196]	@ (800129c <printADC12data+0x28c>)
 80011d8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011dc:	603b      	str	r3, [r7, #0]
 80011de:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	f503 70b4 	add.w	r0, r3, #360	@ 0x168
 80011e8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011ec:	18c3      	adds	r3, r0, r3
 80011ee:	f853 1c20 	ldr.w	r1, [r3, #-32]
						p_text[ii],   (int) result[ii],   sADC.adc12_data[i]);
 80011f2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	f503 70b4 	add.w	r0, r3, #360	@ 0x168
 80011fc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001200:	18c3      	adds	r3, r0, r3
 8001202:	3b38      	subs	r3, #56	@ 0x38
 8001204:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001208:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800120c:	ee17 4a90 	vmov	r4, s15
						p_text[ii],   (int) result[ii],   sADC.adc12_data[i]);
 8001210:	4a22      	ldr	r2, [pc, #136]	@ (800129c <printADC12data+0x28c>)
 8001212:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001216:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800121a:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800121e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8001220:	940e      	str	r4, [sp, #56]	@ 0x38
 8001222:	910d      	str	r1, [sp, #52]	@ 0x34
 8001224:	683c      	ldr	r4, [r7, #0]
 8001226:	940c      	str	r4, [sp, #48]	@ 0x30
 8001228:	687c      	ldr	r4, [r7, #4]
 800122a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800122c:	68b9      	ldr	r1, [r7, #8]
 800122e:	910a      	str	r1, [sp, #40]	@ 0x28
 8001230:	68f9      	ldr	r1, [r7, #12]
 8001232:	9109      	str	r1, [sp, #36]	@ 0x24
 8001234:	6939      	ldr	r1, [r7, #16]
 8001236:	9108      	str	r1, [sp, #32]
 8001238:	697a      	ldr	r2, [r7, #20]
 800123a:	9207      	str	r2, [sp, #28]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	9206      	str	r2, [sp, #24]
 8001240:	69fa      	ldr	r2, [r7, #28]
 8001242:	9205      	str	r2, [sp, #20]
 8001244:	9604      	str	r6, [sp, #16]
 8001246:	6a3a      	ldr	r2, [r7, #32]
 8001248:	9203      	str	r2, [sp, #12]
 800124a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800124c:	9202      	str	r2, [sp, #8]
 800124e:	9501      	str	r5, [sp, #4]
 8001250:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001252:	9200      	str	r2, [sp, #0]
 8001254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001256:	4662      	mov	r2, ip
 8001258:	4913      	ldr	r1, [pc, #76]	@ (80012a8 <printADC12data+0x298>)
 800125a:	f010 fb47 	bl	80118ec <siprintf>
				printString(text);
 800125e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fa7e 	bl	8000764 <printString>
		for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i++)
 8001268:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800126c:	3301      	adds	r3, #1
 800126e:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8001272:	4b0a      	ldr	r3, [pc, #40]	@ (800129c <printADC12data+0x28c>)
 8001274:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 8001278:	4613      	mov	r3, r2
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	4413      	add	r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	461a      	mov	r2, r3
 8001282:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001286:	429a      	cmp	r2, r3
 8001288:	f63f aed9 	bhi.w	800103e <printADC12data+0x2e>
			}
		}
	}
}
 800128c:	bf00      	nop
 800128e:	f507 77ce 	add.w	r7, r7, #412	@ 0x19c
 8001292:	46bd      	mov	sp, r7
 8001294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001296:	bf00      	nop
 8001298:	24000000 	.word	0x24000000
 800129c:	2400032c 	.word	0x2400032c
 80012a0:	08013bcc 	.word	0x08013bcc
 80012a4:	2aaaaaab 	.word	0x2aaaaaab
 80012a8:	08013bd8 	.word	0x08013bd8

080012ac <freqCorrection>:

//Calculate frequency correction
//Returns 1 if a valid frequency correction is calculated, otherwise 0
uint8_t freqCorrection(int16_t *freqCorr)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08e      	sub	sp, #56	@ 0x38
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	int start_index=0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	637b      	str	r3, [r7, #52]	@ 0x34
	int stop_index=0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	633b      	str	r3, [r7, #48]	@ 0x30
	int number_of_lows=0;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
	int lowDetected = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int highDetected = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62bb      	str	r3, [r7, #40]	@ 0x28
	float min = 100000;
 80012c8:	4b54      	ldr	r3, [pc, #336]	@ (800141c <freqCorrection+0x170>)
 80012ca:	627b      	str	r3, [r7, #36]	@ 0x24
	float max = -100000;
 80012cc:	4b54      	ldr	r3, [pc, #336]	@ (8001420 <freqCorrection+0x174>)
 80012ce:	623b      	str	r3, [r7, #32]
	float norm = 0;
 80012d0:	f04f 0300 	mov.w	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]

	//Find when MOSFET branch is on (start and stop time)
	//Find minimum and maximum value of bridge current
 	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 80012d6:	2300      	movs	r3, #0
 80012d8:	61bb      	str	r3, [r7, #24]
 80012da:	e041      	b.n	8001360 <freqCorrection+0xb4>
	{
		// Find minimum of bridge current
		float data = convertADC12data(i+ADC2_Is, NULL);
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	3301      	adds	r3, #1
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fd48 	bl	8000d78 <convertADC12data>
 80012e8:	ed87 0a02 	vstr	s0, [r7, #8]
		if (data < min)
 80012ec:	ed97 7a02 	vldr	s14, [r7, #8]
 80012f0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80012f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fc:	d501      	bpl.n	8001302 <freqCorrection+0x56>
		{
			min = data;
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	627b      	str	r3, [r7, #36]	@ 0x24
			//HAL_UART_Transmit(huart3, min);
			//printCR();
		}
		// Find maximum
		if (data > max)
 8001302:	ed97 7a02 	vldr	s14, [r7, #8]
 8001306:	edd7 7a08 	vldr	s15, [r7, #32]
 800130a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800130e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001312:	dd01      	ble.n	8001318 <freqCorrection+0x6c>
		{
			max = data;
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	623b      	str	r3, [r7, #32]
		}
		// Check for low
		if (!lowDetected && sADC.adc12_data[i+ADC1_TIM1_CH1] < 500)
 8001318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800131a:	2b00      	cmp	r3, #0
 800131c:	d10a      	bne.n	8001334 <freqCorrection+0x88>
 800131e:	4a41      	ldr	r2, [pc, #260]	@ (8001424 <freqCorrection+0x178>)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001326:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800132a:	d203      	bcs.n	8001334 <freqCorrection+0x88>
		{
			//First low detected
			start_index = i; 		// Store index of first low detected
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	637b      	str	r3, [r7, #52]	@ 0x34
			lowDetected = 1;
 8001330:	2301      	movs	r3, #1
 8001332:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
		//Check for high
		if (!highDetected && lowDetected && sADC.adc12_data[i+ADC1_TIM1_CH1] > 65000)
 8001334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001336:	2b00      	cmp	r3, #0
 8001338:	d10f      	bne.n	800135a <freqCorrection+0xae>
 800133a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00c      	beq.n	800135a <freqCorrection+0xae>
 8001340:	4a38      	ldr	r2, [pc, #224]	@ (8001424 <freqCorrection+0x178>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001348:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 800134c:	4293      	cmp	r3, r2
 800134e:	d904      	bls.n	800135a <freqCorrection+0xae>
		{
			//High after first low detected
			stop_index = i-6;		// Store index of last low
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	3b06      	subs	r3, #6
 8001354:	633b      	str	r3, [r7, #48]	@ 0x30
			highDetected = 1;
 8001356:	2301      	movs	r3, #1
 8001358:	62bb      	str	r3, [r7, #40]	@ 0x28
 	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	3306      	adds	r3, #6
 800135e:	61bb      	str	r3, [r7, #24]
 8001360:	4b30      	ldr	r3, [pc, #192]	@ (8001424 <freqCorrection+0x178>)
 8001362:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 8001366:	4613      	mov	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	4413      	add	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	461a      	mov	r2, r3
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	429a      	cmp	r2, r3
 8001374:	d8b2      	bhi.n	80012dc <freqCorrection+0x30>
		}
	}

	// Check maximum and minimum difference
	norm = max - min;
 8001376:	ed97 7a08 	vldr	s14, [r7, #32]
 800137a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800137e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001382:	edc7 7a07 	vstr	s15, [r7, #28]
	if (norm < 10)
 8001386:	edd7 7a07 	vldr	s15, [r7, #28]
 800138a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800138e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001396:	d501      	bpl.n	800139c <freqCorrection+0xf0>
		norm = max;
 8001398:	6a3b      	ldr	r3, [r7, #32]
 800139a:	61fb      	str	r3, [r7, #28]

	number_of_lows = (stop_index - start_index)/6 + 1;
 800139c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800139e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	4a21      	ldr	r2, [pc, #132]	@ (8001428 <freqCorrection+0x17c>)
 80013a4:	fb82 1203 	smull	r1, r2, r2, r3
 80013a8:	17db      	asrs	r3, r3, #31
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	3301      	adds	r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
	if (lowDetected && highDetected && (number_of_lows >= 5))
 80013b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d02c      	beq.n	8001410 <freqCorrection+0x164>
 80013b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d029      	beq.n	8001410 <freqCorrection+0x164>
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	2b04      	cmp	r3, #4
 80013c0:	dd26      	ble.n	8001410 <freqCorrection+0x164>
	{
		float upper = convertADC12data(start_index+ADC2_Is+6, NULL);
 80013c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013c4:	3307      	adds	r3, #7
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fcd5 	bl	8000d78 <convertADC12data>
 80013ce:	ed87 0a04 	vstr	s0, [r7, #16]
		float lower = convertADC12data(stop_index+ADC2_Is-6, NULL);
 80013d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013d4:	3b05      	subs	r3, #5
 80013d6:	2100      	movs	r1, #0
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fccd 	bl	8000d78 <convertADC12data>
 80013de:	ed87 0a03 	vstr	s0, [r7, #12]
		*freqCorr = (int16_t) 1000*(upper - lower)/norm;
 80013e2:	ed97 7a04 	vldr	s14, [r7, #16]
 80013e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80013ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ee:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800142c <freqCorrection+0x180>
 80013f2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80013f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80013fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001402:	ee17 3a90 	vmov	r3, s15
 8001406:	b21a      	sxth	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	801a      	strh	r2, [r3, #0]
		return(1);
 800140c:	2301      	movs	r3, #1
 800140e:	e000      	b.n	8001412 <freqCorrection+0x166>
	}
	else
		return(0);
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3738      	adds	r7, #56	@ 0x38
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	47c35000 	.word	0x47c35000
 8001420:	c7c35000 	.word	0xc7c35000
 8001424:	2400032c 	.word	0x2400032c
 8001428:	2aaaaaab 	.word	0x2aaaaaab
 800142c:	447a0000 	.word	0x447a0000

08001430 <measureBridgePlasmaADC12>:


// Measure bridge current, plasma voltage, and bridge current using ADC1 and ADC2 for one period
// After the measurement is done the function doneMeasuringBridgePlasmaADC12 is called
void measureBridgePlasmaADC12(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	//Calculate number of reads needed for one period
	sADC.nADC12Read = 2 * ((uint32_t) ((1/(float) sHbridge.frequency)/ADC12_GROUP_READTIME));
 8001436:	4b26      	ldr	r3, [pc, #152]	@ (80014d0 <measureBridgePlasmaADC12+0xa0>)
 8001438:	885b      	ldrh	r3, [r3, #2]
 800143a:	ee07 3a90 	vmov	s15, r3
 800143e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001442:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001446:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800144a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800144e:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 80014c8 <measureBridgePlasmaADC12+0x98>
 8001452:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001456:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800145a:	ee17 3a90 	vmov	r3, s15
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4a1c      	ldr	r2, [pc, #112]	@ (80014d4 <measureBridgePlasmaADC12+0xa4>)
 8001462:	f8c2 3708 	str.w	r3, [r2, #1800]	@ 0x708
	sADC.nADC12Read +=2; //Add to see the start of next period
 8001466:	4b1b      	ldr	r3, [pc, #108]	@ (80014d4 <measureBridgePlasmaADC12+0xa4>)
 8001468:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 800146c:	3302      	adds	r3, #2
 800146e:	4a19      	ldr	r2, [pc, #100]	@ (80014d4 <measureBridgePlasmaADC12+0xa4>)
 8001470:	f8c2 3708 	str.w	r3, [r2, #1800]	@ 0x708

	//Start ADC1 and ADC2 measurements
	if (sADC.nADC12Read <= ADC12_MAX_GROUP)
 8001474:	4b17      	ldr	r3, [pc, #92]	@ (80014d4 <measureBridgePlasmaADC12+0xa4>)
 8001476:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 800147a:	2b64      	cmp	r3, #100	@ 0x64
 800147c:	d81a      	bhi.n	80014b4 <measureBridgePlasmaADC12+0x84>
	{
		//Calculate the number DMA transfers needed
		uint32_t noDMARequests = ADC12_NO_CHANNELS*sADC.nADC12Read;
 800147e:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <measureBridgePlasmaADC12+0xa4>)
 8001480:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 8001484:	4613      	mov	r3, r2
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	4413      	add	r3, r2
 800148a:	607b      	str	r3, [r7, #4]

		// Start reading ADC1 and ADC2
		sADC.adc12_reading = 1;
 800148c:	4b11      	ldr	r3, [pc, #68]	@ (80014d4 <measureBridgePlasmaADC12+0xa4>)
 800148e:	2201      	movs	r2, #1
 8001490:	f8a3 270e 	strh.w	r2, [r3, #1806]	@ 0x70e

		//This will start the ADC1 and ADC2 measurements when H-BRIDGE_B_CTRL (TIM1_CH1) goes from 0 to 1.
		//When the measurements are done doneMeasuringBridgePlasmaADC12 is called.
		HAL_StatusTypeDef HALresp = HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t *) sADC.adc12_data, noDMARequests);
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	490f      	ldr	r1, [pc, #60]	@ (80014d4 <measureBridgePlasmaADC12+0xa4>)
 8001498:	480f      	ldr	r0, [pc, #60]	@ (80014d8 <measureBridgePlasmaADC12+0xa8>)
 800149a:	f005 fd51 	bl	8006f40 <HAL_ADCEx_MultiModeStart_DMA>
 800149e:	4603      	mov	r3, r0
 80014a0:	70fb      	strb	r3, [r7, #3]
		if (HALresp != HAL_OK)
 80014a2:	78fb      	ldrb	r3, [r7, #3]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d008      	beq.n	80014ba <measureBridgePlasmaADC12+0x8a>
		{
			printHALErrorStatus(HALresp, "measureBridgePlasmaADC12");
 80014a8:	78fb      	ldrb	r3, [r7, #3]
 80014aa:	490c      	ldr	r1, [pc, #48]	@ (80014dc <measureBridgePlasmaADC12+0xac>)
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f9e1 	bl	8000874 <printHALErrorStatus>
	}
	else
		printString("** ERROR ** pADC.nRead > ADC12_MAX_GROUP");

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 80014b2:	e002      	b.n	80014ba <measureBridgePlasmaADC12+0x8a>
		printString("** ERROR ** pADC.nRead > ADC12_MAX_GROUP");
 80014b4:	480a      	ldr	r0, [pc, #40]	@ (80014e0 <measureBridgePlasmaADC12+0xb0>)
 80014b6:	f7ff f955 	bl	8000764 <printString>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	f3af 8000 	nop.w
 80014c8:	a0b5ed8d 	.word	0xa0b5ed8d
 80014cc:	3eb0c6f7 	.word	0x3eb0c6f7
 80014d0:	2400001c 	.word	0x2400001c
 80014d4:	2400032c 	.word	0x2400032c
 80014d8:	24000a80 	.word	0x24000a80
 80014dc:	08013c30 	.word	0x08013c30
 80014e0:	08013c4c 	.word	0x08013c4c

080014e4 <doneMeasuringBridgePlasmaADC12>:

// Done measuring bridge current, plasma voltage, and bridge current
void doneMeasuringBridgePlasmaADC12(uint32_t errorCode)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	static uint32_t count = 0;

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	count++;
 80014ec:	4b22      	ldr	r3, [pc, #136]	@ (8001578 <doneMeasuringBridgePlasmaADC12+0x94>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	3301      	adds	r3, #1
 80014f2:	4a21      	ldr	r2, [pc, #132]	@ (8001578 <doneMeasuringBridgePlasmaADC12+0x94>)
 80014f4:	6013      	str	r3, [r2, #0]

	// Done reading ADC1 and ADC2
	sADC.adc12_reading = 0;
 80014f6:	4b21      	ldr	r3, [pc, #132]	@ (800157c <doneMeasuringBridgePlasmaADC12+0x98>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	f8a3 270e 	strh.w	r2, [r3, #1806]	@ 0x70e

	if (errorCode == HAL_ADC_ERROR_NONE)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d128      	bne.n	8001556 <doneMeasuringBridgePlasmaADC12+0x72>
	{
		if (sFlashConfig.mode == RUN_MODE)
 8001504:	4b1e      	ldr	r3, [pc, #120]	@ (8001580 <doneMeasuringBridgePlasmaADC12+0x9c>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d12b      	bne.n	8001564 <doneMeasuringBridgePlasmaADC12+0x80>

			//TODO Check plasma voltage VplaL1 and VplaL2 (To high? Not present?)
			//TODO Calculate plasma voltage Vrms, Vmax and Vmin

			//Adjust H-bridge frequency
			if (powerStatus == V500_ON)
 800150c:	4b1d      	ldr	r3, [pc, #116]	@ (8001584 <doneMeasuringBridgePlasmaADC12+0xa0>)
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d127      	bne.n	8001564 <doneMeasuringBridgePlasmaADC12+0x80>
			{
				//Adjust H-bridge frequency
				int16_t freqCorr = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	81fb      	strh	r3, [r7, #14]
				if (freqCorrection(&freqCorr))
 8001518:	f107 030e 	add.w	r3, r7, #14
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fec5 	bl	80012ac <freqCorrection>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d008      	beq.n	800153a <doneMeasuringBridgePlasmaADC12+0x56>
					sHbridge.frequency += freqCorr;
 8001528:	4b17      	ldr	r3, [pc, #92]	@ (8001588 <doneMeasuringBridgePlasmaADC12+0xa4>)
 800152a:	885a      	ldrh	r2, [r3, #2]
 800152c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001530:	b29b      	uxth	r3, r3
 8001532:	4413      	add	r3, r2
 8001534:	b29a      	uxth	r2, r3
 8001536:	4b14      	ldr	r3, [pc, #80]	@ (8001588 <doneMeasuringBridgePlasmaADC12+0xa4>)
 8001538:	805a      	strh	r2, [r3, #2]
				//TODO Adjust H-bridge dead time
				//sHbridge.deadtime = new setting;
				programHbridge();
 800153a:	f7ff fa39 	bl	80009b0 <programHbridge>
					HAL_Delay(1);	//Allow H-bridge to settle with new settings
 800153e:	2001      	movs	r0, #1
 8001540:	f002 ff5e 	bl	8004400 <HAL_Delay>
				if (count % 2048)
 8001544:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <doneMeasuringBridgePlasmaADC12+0x94>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800154c:	2b00      	cmp	r3, #0
 800154e:	d009      	beq.n	8001564 <doneMeasuringBridgePlasmaADC12+0x80>
					printHbridgeData();
 8001550:	f7ff fa06 	bl	8000960 <printHbridgeData>
 8001554:	e006      	b.n	8001564 <doneMeasuringBridgePlasmaADC12+0x80>
			}
		}
	}
	else
	{
		printNumber("ADC12 Error Code: ", errorCode, 1);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	b29b      	uxth	r3, r3
 800155a:	2201      	movs	r2, #1
 800155c:	4619      	mov	r1, r3
 800155e:	480b      	ldr	r0, [pc, #44]	@ (800158c <doneMeasuringBridgePlasmaADC12+0xa8>)
 8001560:	f7ff f942 	bl	80007e8 <printNumber>
	}

	//Measure ADC3 voltages
	if (sFlashConfig.mode == RUN_MODE)
 8001564:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <doneMeasuringBridgePlasmaADC12+0x9c>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d101      	bne.n	8001570 <doneMeasuringBridgePlasmaADC12+0x8c>
		measureVoltagesTemperaturesADC3();
 800156c:	f000 fa94 	bl	8001a98 <measureVoltagesTemperaturesADC3>

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 8001570:	bf00      	nop
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	24000a44 	.word	0x24000a44
 800157c:	2400032c 	.word	0x2400032c
 8001580:	24000a40 	.word	0x24000a40
 8001584:	24000a3c 	.word	0x24000a3c
 8001588:	2400001c 	.word	0x2400001c
 800158c:	08013c78 	.word	0x08013c78

08001590 <printHbridgeDatalogging>:
// Print H-bridge data on UART3 formatted for CSV datalogging
// Prints: Hbridge Freq, Deadtime, Is, VplaL1, VplaL2, VbrS1, VbriS2
// Parameter:
//		startTime: denotes the system time when ADC measurement was started
static void printHbridgeDatalogging(uint32_t startTime)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	f5ad 6d88 	sub.w	sp, sp, #1088	@ 0x440
 8001596:	af0c      	add	r7, sp, #48	@ 0x30
 8001598:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800159c:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 80015a0:	6018      	str	r0, [r3, #0]
	char s_output[1000];
	//Convert from ms to sec
	float startTimeSec = (float) startTime / 1000;
 80015a2:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80015a6:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	ee07 3a90 	vmov	s15, r3
 80015b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015b4:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8001720 <printHbridgeDatalogging+0x190>
 80015b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015bc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80015c0:	edc3 7a00 	vstr	s15, [r3]
	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 80015c4:	2300      	movs	r3, #0
 80015c6:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 80015ca:	e090      	b.n	80016ee <printHbridgeDatalogging+0x15e>
		{
			//calculate time of current measurement (start time + ADC sample rate)
			//TODO: This is likely not exactly accurate. Better way to record time of measurement accounting for conversion/DMA time?
			float measTime = startTimeSec + (ADC12_GROUP_READTIME * i);
 80015cc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80015d0:	edd3 7a00 	vldr	s15, [r3]
 80015d4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80015d8:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 80015dc:	ee07 3a90 	vmov	s15, r3
 80015e0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80015e4:	ed9f 5b4c 	vldr	d5, [pc, #304]	@ 8001718 <printHbridgeDatalogging+0x188>
 80015e8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80015ec:	ee36 7b07 	vadd.f64	d7, d6, d7
 80015f0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015f4:	f207 4304 	addw	r3, r7, #1028	@ 0x404
 80015f8:	edc3 7a00 	vstr	s15, [r3]

			float Is = convertADC12data(i+ADC2_Is, NULL);
 80015fc:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8001600:	3301      	adds	r3, #1
 8001602:	2100      	movs	r1, #0
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fbb7 	bl	8000d78 <convertADC12data>
 800160a:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 800160e:	ed83 0a00 	vstr	s0, [r3]
			float VplaL1 = convertADC12data(i+ADC1_VplaL1, NULL);
 8001612:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8001616:	3304      	adds	r3, #4
 8001618:	2100      	movs	r1, #0
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fbac 	bl	8000d78 <convertADC12data>
 8001620:	ed87 0aff 	vstr	s0, [r7, #1020]	@ 0x3fc
			float VplaL2 = convertADC12data(i+ADC2_VplaL2, NULL);
 8001624:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8001628:	3305      	adds	r3, #5
 800162a:	2100      	movs	r1, #0
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff fba3 	bl	8000d78 <convertADC12data>
 8001632:	ed87 0afe 	vstr	s0, [r7, #1016]	@ 0x3f8
			float VbriS1 = convertADC12data(i+ADC1_VbriS1, NULL);
 8001636:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 800163a:	3302      	adds	r3, #2
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fb9a 	bl	8000d78 <convertADC12data>
 8001644:	ed87 0afd 	vstr	s0, [r7, #1012]	@ 0x3f4
			float VbriS2 = convertADC12data(i+ADC2_VbriS2, NULL);
 8001648:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 800164c:	3303      	adds	r3, #3
 800164e:	2100      	movs	r1, #0
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fb91 	bl	8000d78 <convertADC12data>
 8001656:	ed87 0afc 	vstr	s0, [r7, #1008]	@ 0x3f0

			sprintf(s_output, "%f,%u,%u,%f,%f,%f,%f,%f", measTime, sHbridge.frequency, sHbridge.deadtime,Is,VplaL1,VplaL2,VbriS1,VbriS2);
 800165a:	f207 4304 	addw	r3, r7, #1028	@ 0x404
 800165e:	edd3 7a00 	vldr	s15, [r3]
 8001662:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
 8001666:	4b2f      	ldr	r3, [pc, #188]	@ (8001724 <printHbridgeDatalogging+0x194>)
 8001668:	885b      	ldrh	r3, [r3, #2]
 800166a:	461a      	mov	r2, r3
 800166c:	4b2d      	ldr	r3, [pc, #180]	@ (8001724 <printHbridgeDatalogging+0x194>)
 800166e:	889b      	ldrh	r3, [r3, #4]
 8001670:	f507 6180 	add.w	r1, r7, #1024	@ 0x400
 8001674:	edd1 7a00 	vldr	s15, [r1]
 8001678:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800167c:	edd7 6aff 	vldr	s13, [r7, #1020]	@ 0x3fc
 8001680:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001684:	edd7 5afe 	vldr	s11, [r7, #1016]	@ 0x3f8
 8001688:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 800168c:	edd7 4afd 	vldr	s9, [r7, #1012]	@ 0x3f4
 8001690:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8001694:	edd7 3afc 	vldr	s7, [r7, #1008]	@ 0x3f0
 8001698:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 800169c:	f107 0008 	add.w	r0, r7, #8
 80016a0:	ed8d 3b0a 	vstr	d3, [sp, #40]	@ 0x28
 80016a4:	ed8d 4b08 	vstr	d4, [sp, #32]
 80016a8:	ed8d 5b06 	vstr	d5, [sp, #24]
 80016ac:	ed8d 6b04 	vstr	d6, [sp, #16]
 80016b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80016b4:	9301      	str	r3, [sp, #4]
 80016b6:	9200      	str	r2, [sp, #0]
 80016b8:	ec53 2b12 	vmov	r2, r3, d2
 80016bc:	491a      	ldr	r1, [pc, #104]	@ (8001728 <printHbridgeDatalogging+0x198>)
 80016be:	f010 f915 	bl	80118ec <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe fe72 	bl	80003b0 <strlen>
 80016cc:	4603      	mov	r3, r0
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	f107 0108 	add.w	r1, r7, #8
 80016d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016d8:	4814      	ldr	r0, [pc, #80]	@ (800172c <printHbridgeDatalogging+0x19c>)
 80016da:	f00e f84a 	bl	800f772 <HAL_UART_Transmit>
			printString("\n");
 80016de:	4814      	ldr	r0, [pc, #80]	@ (8001730 <printHbridgeDatalogging+0x1a0>)
 80016e0:	f7ff f840 	bl	8000764 <printString>
	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 80016e4:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 80016e8:	3306      	adds	r3, #6
 80016ea:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 80016ee:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <printHbridgeDatalogging+0x1a4>)
 80016f0:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 80016f4:	4613      	mov	r3, r2
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	4413      	add	r3, r2
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	461a      	mov	r2, r3
 80016fe:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8001702:	429a      	cmp	r2, r3
 8001704:	f63f af62 	bhi.w	80015cc <printHbridgeDatalogging+0x3c>
		}
}
 8001708:	bf00      	nop
 800170a:	bf00      	nop
 800170c:	f507 6782 	add.w	r7, r7, #1040	@ 0x410
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	f3af 8000 	nop.w
 8001718:	a0b5ed8d 	.word	0xa0b5ed8d
 800171c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001720:	447a0000 	.word	0x447a0000
 8001724:	2400001c 	.word	0x2400001c
 8001728:	08013c8c 	.word	0x08013c8c
 800172c:	24000e30 	.word	0x24000e30
 8001730:	08013ca4 	.word	0x08013ca4
 8001734:	2400032c 	.word	0x2400032c

08001738 <autoFreqAdj>:

// Automatically Correct the Drive Frequency until user presses any key
void autoFreqAdj(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
	char input;


	//printString("\n\r%Press any key to exit"); //Commented out to allow for automated remote serial control (datalogging)

	printString("Time(s),Freq (Hz),Deadtime (%),Bridge I,VplaL1,VplaL2,VbriS1,VbriS2");
 800173e:	4828      	ldr	r0, [pc, #160]	@ (80017e0 <autoFreqAdj+0xa8>)
 8001740:	f7ff f810 	bl	8000764 <printString>
	printCR();
 8001744:	f7fe fffe 	bl	8000744 <printCR>
	while (!(HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK))
 8001748:	e03b      	b.n	80017c2 <autoFreqAdj+0x8a>
	{
		uint32_t startTime = HAL_GetTick();
 800174a:	f002 fe4d 	bl	80043e8 <HAL_GetTick>
 800174e:	6078      	str	r0, [r7, #4]
		measureBridgePlasmaADC12();
 8001750:	f7ff fe6e 	bl	8001430 <measureBridgePlasmaADC12>
		//Wait until ADC3 reading is done
		while (sADC.adc12_reading);
 8001754:	bf00      	nop
 8001756:	4b23      	ldr	r3, [pc, #140]	@ (80017e4 <autoFreqAdj+0xac>)
 8001758:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	@ 0x70e
 800175c:	b29b      	uxth	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f9      	bne.n	8001756 <autoFreqAdj+0x1e>
		//printADC12data();

		//Calculate delta f
		int16_t freqCorr;
		freqCorrection(&freqCorr);
 8001762:	463b      	mov	r3, r7
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fda1 	bl	80012ac <freqCorrection>

		//char text[100];
		//sprintf(text, "\n\rFrequency correction: %i", (int) freqCorr);
		//printString(text);

		if (sHbridge.frequency + freqCorr > MAX_FREQUENCY) //GetUint16Input(&sHbridge.frequency, 1, MIN_FREQUENCY, MAX_FREQUENCY))
 800176a:	4b1f      	ldr	r3, [pc, #124]	@ (80017e8 <autoFreqAdj+0xb0>)
 800176c:	885b      	ldrh	r3, [r3, #2]
 800176e:	461a      	mov	r2, r3
 8001770:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001774:	4413      	add	r3, r2
 8001776:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 800177a:	4293      	cmp	r3, r2
 800177c:	dd04      	ble.n	8001788 <autoFreqAdj+0x50>
		{   // Calculated freq is higher than max

			//sprintf(text, "\n\r%i is higher than max freq", (int) sHbridge.frequency + freqCorr);
			//printString(text);
			sHbridge.frequency = MAX_FREQUENCY;
 800177e:	4b1a      	ldr	r3, [pc, #104]	@ (80017e8 <autoFreqAdj+0xb0>)
 8001780:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 8001784:	805a      	strh	r2, [r3, #2]
 8001786:	e017      	b.n	80017b8 <autoFreqAdj+0x80>
		}
		else if (sHbridge.frequency + freqCorr < MIN_FREQUENCY)
 8001788:	4b17      	ldr	r3, [pc, #92]	@ (80017e8 <autoFreqAdj+0xb0>)
 800178a:	885b      	ldrh	r3, [r3, #2]
 800178c:	461a      	mov	r2, r3
 800178e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001792:	4413      	add	r3, r2
 8001794:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8001798:	4293      	cmp	r3, r2
 800179a:	dc04      	bgt.n	80017a6 <autoFreqAdj+0x6e>
		{
			//sprintf(text, "\n\r%i is lower than min freq", (int) sHbridge.frequency + freqCorr);
			//printString(text);

			sHbridge.frequency = MIN_FREQUENCY;
 800179c:	4b12      	ldr	r3, [pc, #72]	@ (80017e8 <autoFreqAdj+0xb0>)
 800179e:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80017a2:	805a      	strh	r2, [r3, #2]
 80017a4:	e008      	b.n	80017b8 <autoFreqAdj+0x80>

		}
		else
		{
			sHbridge.frequency = sHbridge.frequency + freqCorr;
 80017a6:	4b10      	ldr	r3, [pc, #64]	@ (80017e8 <autoFreqAdj+0xb0>)
 80017a8:	885a      	ldrh	r2, [r3, #2]
 80017aa:	f9b7 3000 	ldrsh.w	r3, [r7]
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	4413      	add	r3, r2
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	4b0c      	ldr	r3, [pc, #48]	@ (80017e8 <autoFreqAdj+0xb0>)
 80017b6:	805a      	strh	r2, [r3, #2]
		}

		programHbridge();
 80017b8:	f7ff f8fa 	bl	80009b0 <programHbridge>

		//Print current ADC data
		printHbridgeDatalogging(startTime);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff fee7 	bl	8001590 <printHbridgeDatalogging>
	while (!(HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK))
 80017c2:	1cf9      	adds	r1, r7, #3
 80017c4:	2301      	movs	r3, #1
 80017c6:	2201      	movs	r2, #1
 80017c8:	4808      	ldr	r0, [pc, #32]	@ (80017ec <autoFreqAdj+0xb4>)
 80017ca:	f00e f860 	bl	800f88e <HAL_UART_Receive>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1ba      	bne.n	800174a <autoFreqAdj+0x12>


	}
}
 80017d4:	bf00      	nop
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	08013ca8 	.word	0x08013ca8
 80017e4:	2400032c 	.word	0x2400032c
 80017e8:	2400001c 	.word	0x2400001c
 80017ec:	24000e30 	.word	0x24000e30

080017f0 <convertADC3data>:

//Convert ADC3 data to voltages
float convertADC3data(uint32_t item, char **text)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
	float result = 0;
 80017fa:	f04f 0300 	mov.w	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]

	switch (item) {
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b0a      	cmp	r3, #10
 8001804:	f200 80c5 	bhi.w	8001992 <convertADC3data+0x1a2>
 8001808:	a201      	add	r2, pc, #4	@ (adr r2, 8001810 <convertADC3data+0x20>)
 800180a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800180e:	bf00      	nop
 8001810:	0800183d 	.word	0x0800183d
 8001814:	0800186f 	.word	0x0800186f
 8001818:	080018a1 	.word	0x080018a1
 800181c:	080018d3 	.word	0x080018d3
 8001820:	080018e1 	.word	0x080018e1
 8001824:	0800191b 	.word	0x0800191b
 8001828:	0800194d 	.word	0x0800194d
 800182c:	0800195b 	.word	0x0800195b
 8001830:	08001969 	.word	0x08001969
 8001834:	08001977 	.word	0x08001977
 8001838:	08001985 	.word	0x08001985
		case ADC3_VBAT:
			result =  1000*((9.76+169.0)/9.76)*3.3*(((float) sADC.adc3_data[ADC3_VBAT])/4096.0);
 800183c:	4b66      	ldr	r3, [pc, #408]	@ (80019d8 <convertADC3data+0x1e8>)
 800183e:	f8b3 34b0 	ldrh.w	r3, [r3, #1200]	@ 0x4b0
 8001842:	ee07 3a90 	vmov	s15, r3
 8001846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800184a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800184e:	ed9f 5b56 	vldr	d5, [pc, #344]	@ 80019a8 <convertADC3data+0x1b8>
 8001852:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001856:	ed9f 6b56 	vldr	d6, [pc, #344]	@ 80019b0 <convertADC3data+0x1c0>
 800185a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800185e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001862:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_VBAT (mV)";
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	4a5c      	ldr	r2, [pc, #368]	@ (80019dc <convertADC3data+0x1ec>)
 800186a:	601a      	str	r2, [r3, #0]
			break;
 800186c:	e091      	b.n	8001992 <convertADC3data+0x1a2>
		case ADC3_15V:
			result =  1000*((30.0+120.0)/30.0)*3.3*(((float) sADC.adc3_data[ADC3_15V])/4096.0);
 800186e:	4b5a      	ldr	r3, [pc, #360]	@ (80019d8 <convertADC3data+0x1e8>)
 8001870:	f8b3 34b2 	ldrh.w	r3, [r3, #1202]	@ 0x4b2
 8001874:	ee07 3a90 	vmov	s15, r3
 8001878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800187c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001880:	ed9f 5b49 	vldr	d5, [pc, #292]	@ 80019a8 <convertADC3data+0x1b8>
 8001884:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001888:	ed9f 6b4b 	vldr	d6, [pc, #300]	@ 80019b8 <convertADC3data+0x1c8>
 800188c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001890:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001894:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_15V (mV)";
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	4a51      	ldr	r2, [pc, #324]	@ (80019e0 <convertADC3data+0x1f0>)
 800189c:	601a      	str	r2, [r3, #0]
			break;
 800189e:	e078      	b.n	8001992 <convertADC3data+0x1a2>
		case ADC3_3_3V:
			result =  1000*((30.0+3.0)/30.0)*3.3*(((float) sADC.adc3_data[ADC3_3_3V])/4096.0);
 80018a0:	4b4d      	ldr	r3, [pc, #308]	@ (80019d8 <convertADC3data+0x1e8>)
 80018a2:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	@ 0x4b4
 80018a6:	ee07 3a90 	vmov	s15, r3
 80018aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018ae:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80018b2:	ed9f 5b3d 	vldr	d5, [pc, #244]	@ 80019a8 <convertADC3data+0x1b8>
 80018b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018ba:	ed9f 6b41 	vldr	d6, [pc, #260]	@ 80019c0 <convertADC3data+0x1d0>
 80018be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80018c2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80018c6:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_3_3V (mV)";
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	4a45      	ldr	r2, [pc, #276]	@ (80019e4 <convertADC3data+0x1f4>)
 80018ce:	601a      	str	r2, [r3, #0]
			break;
 80018d0:	e05f      	b.n	8001992 <convertADC3data+0x1a2>
		case ADC3_NC3:
			result = 0;
 80018d2:	f04f 0300 	mov.w	r3, #0
 80018d6:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_NC3";
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	4a43      	ldr	r2, [pc, #268]	@ (80019e8 <convertADC3data+0x1f8>)
 80018dc:	601a      	str	r2, [r3, #0]
			break;
 80018de:	e058      	b.n	8001992 <convertADC3data+0x1a2>
		case ADC3_BridgeTemp:
			result = 1000*((float) sADC.adc3_data[ADC3_BridgeTemp])*3.3/4096.0;
 80018e0:	4b3d      	ldr	r3, [pc, #244]	@ (80019d8 <convertADC3data+0x1e8>)
 80018e2:	f8b3 34b8 	ldrh.w	r3, [r3, #1208]	@ 0x4b8
 80018e6:	ee07 3a90 	vmov	s15, r3
 80018ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018ee:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80019ec <convertADC3data+0x1fc>
 80018f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018fa:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 80019c8 <convertADC3data+0x1d8>
 80018fe:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001902:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 80019a8 <convertADC3data+0x1b8>
 8001906:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800190a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800190e:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_BridgeTemp (mV)";
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	4a36      	ldr	r2, [pc, #216]	@ (80019f0 <convertADC3data+0x200>)
 8001916:	601a      	str	r2, [r3, #0]
			break;
 8001918:	e03b      	b.n	8001992 <convertADC3data+0x1a2>
		case ADC3_500VDC:
			result =  1000*((12.0+2000.0)/12.0)*3.3*(((float) sADC.adc3_data[ADC3_500VDC])/4096.0);
 800191a:	4b2f      	ldr	r3, [pc, #188]	@ (80019d8 <convertADC3data+0x1e8>)
 800191c:	f8b3 34ba 	ldrh.w	r3, [r3, #1210]	@ 0x4ba
 8001920:	ee07 3a90 	vmov	s15, r3
 8001924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001928:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800192c:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 80019a8 <convertADC3data+0x1b8>
 8001930:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001934:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 80019d0 <convertADC3data+0x1e0>
 8001938:	ee27 7b06 	vmul.f64	d7, d7, d6
 800193c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001940:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_500VDC (mV)";
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	4a2b      	ldr	r2, [pc, #172]	@ (80019f4 <convertADC3data+0x204>)
 8001948:	601a      	str	r2, [r3, #0]
			break;
 800194a:	e022      	b.n	8001992 <convertADC3data+0x1a2>
		case ADC3_Thermistor1:
			result = 0;
 800194c:	f04f 0300 	mov.w	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor1";
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	4a28      	ldr	r2, [pc, #160]	@ (80019f8 <convertADC3data+0x208>)
 8001956:	601a      	str	r2, [r3, #0]
			break;
 8001958:	e01b      	b.n	8001992 <convertADC3data+0x1a2>
		case ADC3_Thermistor2:
			result = 0;
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor2";
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	4a26      	ldr	r2, [pc, #152]	@ (80019fc <convertADC3data+0x20c>)
 8001964:	601a      	str	r2, [r3, #0]
			break;
 8001966:	e014      	b.n	8001992 <convertADC3data+0x1a2>
		case ADC3_Thermistor3:
			result = 0;
 8001968:	f04f 0300 	mov.w	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor3";
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	4a23      	ldr	r2, [pc, #140]	@ (8001a00 <convertADC3data+0x210>)
 8001972:	601a      	str	r2, [r3, #0]
			break;
 8001974:	e00d      	b.n	8001992 <convertADC3data+0x1a2>
		case ADC3_Thermistor4:
			result = 0;
 8001976:	f04f 0300 	mov.w	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor4";
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	4a21      	ldr	r2, [pc, #132]	@ (8001a04 <convertADC3data+0x214>)
 8001980:	601a      	str	r2, [r3, #0]
			break;
 8001982:	e006      	b.n	8001992 <convertADC3data+0x1a2>
		case ADC3_NC10:
			result = 0;
 8001984:	f04f 0300 	mov.w	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_NC10";
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	4a1e      	ldr	r2, [pc, #120]	@ (8001a08 <convertADC3data+0x218>)
 800198e:	601a      	str	r2, [r3, #0]
			break;
 8001990:	bf00      	nop
	}

	return(result);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	ee07 3a90 	vmov	s15, r3
}
 8001998:	eeb0 0a67 	vmov.f32	s0, s15
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	00000000 	.word	0x00000000
 80019ac:	40b00000 	.word	0x40b00000
 80019b0:	9714fbcd 	.word	0x9714fbcd
 80019b4:	40ed832c 	.word	0x40ed832c
 80019b8:	00000000 	.word	0x00000000
 80019bc:	40d01d00 	.word	0x40d01d00
 80019c0:	00000000 	.word	0x00000000
 80019c4:	40ac5c00 	.word	0x40ac5c00
 80019c8:	66666666 	.word	0x66666666
 80019cc:	400a6666 	.word	0x400a6666
 80019d0:	ffffffff 	.word	0xffffffff
 80019d4:	4120e2a7 	.word	0x4120e2a7
 80019d8:	2400032c 	.word	0x2400032c
 80019dc:	08013cec 	.word	0x08013cec
 80019e0:	08013cfc 	.word	0x08013cfc
 80019e4:	08013d0c 	.word	0x08013d0c
 80019e8:	08013d1c 	.word	0x08013d1c
 80019ec:	447a0000 	.word	0x447a0000
 80019f0:	08013d28 	.word	0x08013d28
 80019f4:	08013d40 	.word	0x08013d40
 80019f8:	08013d54 	.word	0x08013d54
 80019fc:	08013d68 	.word	0x08013d68
 8001a00:	08013d7c 	.word	0x08013d7c
 8001a04:	08013d90 	.word	0x08013d90
 8001a08:	08013da4 	.word	0x08013da4

08001a0c <printADC3data>:

//Print measured ADC3 data on UART3
void printADC3data(void)
{
 8001a0c:	b590      	push	{r4, r7, lr}
 8001a0e:	b09f      	sub	sp, #124	@ 0x7c
 8001a10:	af02      	add	r7, sp, #8
	if (debug == 1)
 8001a12:	4b1d      	ldr	r3, [pc, #116]	@ (8001a88 <printADC3data+0x7c>)
 8001a14:	881b      	ldrh	r3, [r3, #0]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d131      	bne.n	8001a7e <printADC3data+0x72>
	{
		printCR();
 8001a1a:	f7fe fe93 	bl	8000744 <printCR>
		printNumber("No data: ", ADC3_DMA_REQUESTS, 1);
 8001a1e:	2201      	movs	r2, #1
 8001a20:	210b      	movs	r1, #11
 8001a22:	481a      	ldr	r0, [pc, #104]	@ (8001a8c <printADC3data+0x80>)
 8001a24:	f7fe fee0 	bl	80007e8 <printNumber>
		for (int i=0; i<ADC3_DMA_REQUESTS; i++)
 8001a28:	2300      	movs	r3, #0
 8001a2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001a2c:	e024      	b.n	8001a78 <printADC3data+0x6c>
		{
			char text[100];
			char *p_text;
			float result = convertADC3data(i, &p_text);
 8001a2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001a30:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8001a34:	4611      	mov	r1, r2
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff feda 	bl	80017f0 <convertADC3data>
 8001a3c:	ed87 0a1a 	vstr	s0, [r7, #104]	@ 0x68
			sprintf(text, "%2u %20s: %7u    (%6u)\n\r", i, p_text, (int) result, sADC.adc3_data[i]);
 8001a40:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001a42:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001a46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a4a:	ee17 4a90 	vmov	r4, s15
 8001a4e:	4910      	ldr	r1, [pc, #64]	@ (8001a90 <printADC3data+0x84>)
 8001a50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001a52:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001a56:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001a5a:	4638      	mov	r0, r7
 8001a5c:	9301      	str	r3, [sp, #4]
 8001a5e:	9400      	str	r4, [sp, #0]
 8001a60:	4613      	mov	r3, r2
 8001a62:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001a64:	490b      	ldr	r1, [pc, #44]	@ (8001a94 <printADC3data+0x88>)
 8001a66:	f00f ff41 	bl	80118ec <siprintf>
			printString(text);
 8001a6a:	463b      	mov	r3, r7
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe fe79 	bl	8000764 <printString>
		for (int i=0; i<ADC3_DMA_REQUESTS; i++)
 8001a72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001a74:	3301      	adds	r3, #1
 8001a76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001a78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001a7a:	2b0a      	cmp	r3, #10
 8001a7c:	ddd7      	ble.n	8001a2e <printADC3data+0x22>
		}
	}
}
 8001a7e:	bf00      	nop
 8001a80:	3774      	adds	r7, #116	@ 0x74
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd90      	pop	{r4, r7, pc}
 8001a86:	bf00      	nop
 8001a88:	24000000 	.word	0x24000000
 8001a8c:	08013bcc 	.word	0x08013bcc
 8001a90:	2400032c 	.word	0x2400032c
 8001a94:	08013db0 	.word	0x08013db0

08001a98 <measureVoltagesTemperaturesADC3>:

// Measure voltages and temperatures using ADC3
// After the measurement is done the function doneMeasuringVoltagesTemperaturesADC3 is called
void measureVoltagesTemperaturesADC3(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	// This will start the measurement of voltages and temperatures using ADC3
	sADC.adc3_reading = 1; //Started to read ADC3
 8001a9c:	4b05      	ldr	r3, [pc, #20]	@ (8001ab4 <measureVoltagesTemperaturesADC3+0x1c>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f8a3 270c 	strh.w	r2, [r3, #1804]	@ 0x70c
	HAL_ADC_Start_DMA(&hadc3, (uint32_t *) sADC.adc3_data, ADC3_DMA_REQUESTS);
 8001aa4:	220b      	movs	r2, #11
 8001aa6:	4904      	ldr	r1, [pc, #16]	@ (8001ab8 <measureVoltagesTemperaturesADC3+0x20>)
 8001aa8:	4804      	ldr	r0, [pc, #16]	@ (8001abc <measureVoltagesTemperaturesADC3+0x24>)
 8001aaa:	f003 fb27 	bl	80050fc <HAL_ADC_Start_DMA>

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	2400032c 	.word	0x2400032c
 8001ab8:	240007dc 	.word	0x240007dc
 8001abc:	24000b60 	.word	0x24000b60

08001ac0 <doneMeasuringVoltagesTemperaturesADC3>:


// Done measuring voltages and temperatures
void doneMeasuringVoltagesTemperaturesADC3(uint32_t errorCode)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	sADC.adc3_reading = 0; //Done reading ADC3
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8001af8 <doneMeasuringVoltagesTemperaturesADC3+0x38>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	f8a3 270c 	strh.w	r2, [r3, #1804]	@ 0x70c

	if (errorCode == HAL_ADC_ERROR_NONE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d006      	beq.n	8001ae4 <doneMeasuringVoltagesTemperaturesADC3+0x24>
		// TODO Check temperatures

	}
	else
	{
		printNumber("ADC12 Error Code: ", errorCode, 1);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	2201      	movs	r2, #1
 8001adc:	4619      	mov	r1, r3
 8001ade:	4807      	ldr	r0, [pc, #28]	@ (8001afc <doneMeasuringVoltagesTemperaturesADC3+0x3c>)
 8001ae0:	f7fe fe82 	bl	80007e8 <printNumber>
	}


	//Start ADC1 and ADC2 measurements
	if (sFlashConfig.mode == RUN_MODE)
 8001ae4:	4b06      	ldr	r3, [pc, #24]	@ (8001b00 <doneMeasuringVoltagesTemperaturesADC3+0x40>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d101      	bne.n	8001af0 <doneMeasuringVoltagesTemperaturesADC3+0x30>
		measureBridgePlasmaADC12();
 8001aec:	f7ff fca0 	bl	8001430 <measureBridgePlasmaADC12>

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	2400032c 	.word	0x2400032c
 8001afc:	08013c78 	.word	0x08013c78
 8001b00:	24000a40 	.word	0x24000a40

08001b04 <GetNumber>:

// Get an integer number from UART3. If the number is valid, the function returns 1, otherwise 0.
static uint8_t GetNumber(int *number)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08a      	sub	sp, #40	@ 0x28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
	char input;
	char s_input[MAX_INPUT];
	int pos = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	627b      	str	r3, [r7, #36]	@ 0x24
	//Wait for user input
	HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 100000);
 8001b10:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8001b14:	4b2f      	ldr	r3, [pc, #188]	@ (8001bd4 <GetNumber+0xd0>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	482f      	ldr	r0, [pc, #188]	@ (8001bd8 <GetNumber+0xd4>)
 8001b1a:	f00d feb8 	bl	800f88e <HAL_UART_Receive>
	while (input != 13)
 8001b1e:	e039      	b.n	8001b94 <GetNumber+0x90>
	{
		// Backspace?
		if ((input == 127) && (pos > 0))
 8001b20:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001b24:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b26:	d10e      	bne.n	8001b46 <GetNumber+0x42>
 8001b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	dd0b      	ble.n	8001b46 <GetNumber+0x42>
		{
			// Delete digit
			HAL_UART_Transmit(&huart3, (uint8_t *) &input, 1, 1000);
 8001b2e:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8001b32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b36:	2201      	movs	r2, #1
 8001b38:	4827      	ldr	r0, [pc, #156]	@ (8001bd8 <GetNumber+0xd4>)
 8001b3a:	f00d fe1a 	bl	800f772 <HAL_UART_Transmit>
			pos--;
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b40:	3b01      	subs	r3, #1
 8001b42:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b44:	e018      	b.n	8001b78 <GetNumber+0x74>
		}
		// A digit?
		else if ((input >= 48) && (input <=57))
 8001b46:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001b4a:	2b2f      	cmp	r3, #47	@ 0x2f
 8001b4c:	d914      	bls.n	8001b78 <GetNumber+0x74>
 8001b4e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001b52:	2b39      	cmp	r3, #57	@ 0x39
 8001b54:	d810      	bhi.n	8001b78 <GetNumber+0x74>
		{
			// Echo digit and store it
			HAL_UART_Transmit(&huart3, (uint8_t *) &input, 1, 1000);
 8001b56:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8001b5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b5e:	2201      	movs	r2, #1
 8001b60:	481d      	ldr	r0, [pc, #116]	@ (8001bd8 <GetNumber+0xd4>)
 8001b62:	f00d fe06 	bl	800f772 <HAL_UART_Transmit>
			s_input[pos++] = input;
 8001b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	627a      	str	r2, [r7, #36]	@ 0x24
 8001b6c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001b70:	3328      	adds	r3, #40	@ 0x28
 8001b72:	443b      	add	r3, r7
 8001b74:	f803 2c1c 	strb.w	r2, [r3, #-28]
		}

		// Get next character
		if (pos < MAX_INPUT-1)
 8001b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7a:	2b12      	cmp	r3, #18
 8001b7c:	dc07      	bgt.n	8001b8e <GetNumber+0x8a>
		{
			HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 100000);
 8001b7e:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8001b82:	4b14      	ldr	r3, [pc, #80]	@ (8001bd4 <GetNumber+0xd0>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	4814      	ldr	r0, [pc, #80]	@ (8001bd8 <GetNumber+0xd4>)
 8001b88:	f00d fe81 	bl	800f88e <HAL_UART_Receive>
 8001b8c:	e002      	b.n	8001b94 <GetNumber+0x90>
		}
		else
		{
			input = 13; // Terminate while loop
 8001b8e:	230d      	movs	r3, #13
 8001b90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	while (input != 13)
 8001b94:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001b98:	2b0d      	cmp	r3, #13
 8001b9a:	d1c1      	bne.n	8001b20 <GetNumber+0x1c>
		}
	}
	s_input[pos] = 0;
 8001b9c:	f107 020c 	add.w	r2, r7, #12
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba2:	4413      	add	r3, r2
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]
	if (pos > 0)
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	dd07      	ble.n	8001bbe <GetNumber+0xba>
		*number = atoi(s_input);
 8001bae:	f107 030c 	add.w	r3, r7, #12
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f00f f8be 	bl	8010d34 <atoi>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	601a      	str	r2, [r3, #0]
	return(pos > 0);
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	bfcc      	ite	gt
 8001bc4:	2301      	movgt	r3, #1
 8001bc6:	2300      	movle	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3728      	adds	r7, #40	@ 0x28
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	000186a0 	.word	0x000186a0
 8001bd8:	24000e30 	.word	0x24000e30

08001bdc <GetUint16Input>:

// Get an 16bit unsigned number from UAR3 and validate the input againts min and max values
static uint8_t GetUint16Input(uint16_t *input, uint8_t bValidate, uint16_t min, uint16_t max)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b0a0      	sub	sp, #128	@ 0x80
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	4608      	mov	r0, r1
 8001be6:	4611      	mov	r1, r2
 8001be8:	461a      	mov	r2, r3
 8001bea:	4603      	mov	r3, r0
 8001bec:	72fb      	strb	r3, [r7, #11]
 8001bee:	460b      	mov	r3, r1
 8001bf0:	813b      	strh	r3, [r7, #8]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	80fb      	strh	r3, [r7, #6]
	int number;
	char s_output[100];
	uint8_t result;

	result = GetNumber(&number);
 8001bf6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff ff82 	bl	8001b04 <GetNumber>
 8001c00:	4603      	mov	r3, r0
 8001c02:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (bValidate)
 8001c06:	7afb      	ldrb	r3, [r7, #11]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d02f      	beq.n	8001c6c <GetUint16Input+0x90>
	{
		if (result && (number >= min) && (number <= max))
 8001c0c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d013      	beq.n	8001c3c <GetUint16Input+0x60>
 8001c14:	893a      	ldrh	r2, [r7, #8]
 8001c16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	dc0f      	bgt.n	8001c3c <GetUint16Input+0x60>
 8001c1c:	88fa      	ldrh	r2, [r7, #6]
 8001c1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c20:	429a      	cmp	r2, r3
 8001c22:	db0b      	blt.n	8001c3c <GetUint16Input+0x60>
		{
			*input =  number;
 8001c24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, (uint8_t *) " - Ok\n\r", 7, 1000);
 8001c2c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c30:	2207      	movs	r2, #7
 8001c32:	4911      	ldr	r1, [pc, #68]	@ (8001c78 <GetUint16Input+0x9c>)
 8001c34:	4811      	ldr	r0, [pc, #68]	@ (8001c7c <GetUint16Input+0xa0>)
 8001c36:	f00d fd9c 	bl	800f772 <HAL_UART_Transmit>
 8001c3a:	e017      	b.n	8001c6c <GetUint16Input+0x90>
		}
		else
		{
			result = 0; //Indicate failure
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			sprintf(s_output, " - Invalid number, valid range %u - %u\n\r", min, max);
 8001c42:	893a      	ldrh	r2, [r7, #8]
 8001c44:	88fb      	ldrh	r3, [r7, #6]
 8001c46:	f107 0014 	add.w	r0, r7, #20
 8001c4a:	490d      	ldr	r1, [pc, #52]	@ (8001c80 <GetUint16Input+0xa4>)
 8001c4c:	f00f fe4e 	bl	80118ec <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fbab 	bl	80003b0 <strlen>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	f107 0114 	add.w	r1, r7, #20
 8001c62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c66:	4805      	ldr	r0, [pc, #20]	@ (8001c7c <GetUint16Input+0xa0>)
 8001c68:	f00d fd83 	bl	800f772 <HAL_UART_Transmit>
		}
	}
	return(result);
 8001c6c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3780      	adds	r7, #128	@ 0x80
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	08013dcc 	.word	0x08013dcc
 8001c7c:	24000e30 	.word	0x24000e30
 8001c80:	08013dd4 	.word	0x08013dd4

08001c84 <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef* hadc)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	// ADC1 is master and ADC2 is slave
	if (hadc->Instance == ADC1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a0e      	ldr	r2, [pc, #56]	@ (8001ccc <HAL_ADC_ErrorCallback+0x48>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d108      	bne.n	8001ca8 <HAL_ADC_ErrorCallback+0x24>
	{
		printNumber("** ERROR ** ADC12 Error Code: ", hadc->ErrorCode, 1);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	480b      	ldr	r0, [pc, #44]	@ (8001cd0 <HAL_ADC_ErrorCallback+0x4c>)
 8001ca2:	f7fe fda1 	bl	80007e8 <printNumber>
	}
	else if ((hadc->Instance == ADC3))
	{
		printNumber("** ERROR ** ADC3 Error Code: ", hadc->ErrorCode, 1);
	}
}
 8001ca6:	e00c      	b.n	8001cc2 <HAL_ADC_ErrorCallback+0x3e>
	else if ((hadc->Instance == ADC3))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a09      	ldr	r2, [pc, #36]	@ (8001cd4 <HAL_ADC_ErrorCallback+0x50>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d107      	bne.n	8001cc2 <HAL_ADC_ErrorCallback+0x3e>
		printNumber("** ERROR ** ADC3 Error Code: ", hadc->ErrorCode, 1);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	2201      	movs	r2, #1
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4806      	ldr	r0, [pc, #24]	@ (8001cd8 <HAL_ADC_ErrorCallback+0x54>)
 8001cbe:	f7fe fd93 	bl	80007e8 <printNumber>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40022000 	.word	0x40022000
 8001cd0:	08013e00 	.word	0x08013e00
 8001cd4:	58026000 	.word	0x58026000
 8001cd8:	08013e20 	.word	0x08013e20

08001cdc <HAL_ADC_ConvCpltCallback>:

// ADC conversion and DMA transfer complete
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
	// ADC1 is master and ADC2 is slave
	if (hadc->Instance == ADC1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a10      	ldr	r2, [pc, #64]	@ (8001d2c <HAL_ADC_ConvCpltCallback+0x50>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d105      	bne.n	8001cfa <HAL_ADC_ConvCpltCallback+0x1e>
	{
		//HAL_ADCEx_MultiModeStop_DMA(&hadc1);
		doneMeasuringBridgePlasmaADC12(hadc->ErrorCode);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff fbf6 	bl	80014e4 <doneMeasuringBridgePlasmaADC12>
	else
	{
		HAL_UART_Transmit(&huart3, (uint8_t *) "** ERROR ** Unknown ADC\n\r", 25, 1000);
		printCR();
	}
}
 8001cf8:	e013      	b.n	8001d22 <HAL_ADC_ConvCpltCallback+0x46>
	else if (hadc->Instance == ADC3)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a0c      	ldr	r2, [pc, #48]	@ (8001d30 <HAL_ADC_ConvCpltCallback+0x54>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d105      	bne.n	8001d10 <HAL_ADC_ConvCpltCallback+0x34>
		doneMeasuringVoltagesTemperaturesADC3(hadc->ErrorCode);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff fed9 	bl	8001ac0 <doneMeasuringVoltagesTemperaturesADC3>
}
 8001d0e:	e008      	b.n	8001d22 <HAL_ADC_ConvCpltCallback+0x46>
		HAL_UART_Transmit(&huart3, (uint8_t *) "** ERROR ** Unknown ADC\n\r", 25, 1000);
 8001d10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d14:	2219      	movs	r2, #25
 8001d16:	4907      	ldr	r1, [pc, #28]	@ (8001d34 <HAL_ADC_ConvCpltCallback+0x58>)
 8001d18:	4807      	ldr	r0, [pc, #28]	@ (8001d38 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001d1a:	f00d fd2a 	bl	800f772 <HAL_UART_Transmit>
		printCR();
 8001d1e:	f7fe fd11 	bl	8000744 <printCR>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40022000 	.word	0x40022000
 8001d30:	58026000 	.word	0x58026000
 8001d34:	08013e40 	.word	0x08013e40
 8001d38:	24000e30 	.word	0x24000e30

08001d3c <PowerOffLowSupplies>:

//Power Off Supplies in order3.3V switch and 15V
void PowerOffLowSupplies(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
	if (powerStatus == V500_OFF)
 8001d40:	4b0d      	ldr	r3, [pc, #52]	@ (8001d78 <PowerOffLowSupplies+0x3c>)
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d110      	bne.n	8001d6a <PowerOffLowSupplies+0x2e>
	{
		//Power off 3.3V switch voltage
		HAL_GPIO_WritePin(OUT_3V3_SWITCH_GPIO_Port, OUT_3V3_SWITCH_Pin, GPIO_PIN_SET);
 8001d48:	2201      	movs	r2, #1
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	480b      	ldr	r0, [pc, #44]	@ (8001d7c <PowerOffLowSupplies+0x40>)
 8001d4e:	f008 fd8d 	bl	800a86c <HAL_GPIO_WritePin>
		HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001d52:	2001      	movs	r0, #1
 8001d54:	f002 fb54 	bl	8004400 <HAL_Delay>

		//Power off 15V
		HAL_GPIO_WritePin(OUT_15V_ENABLE_GPIO_Port, OUT_15V_ENABLE_Pin, GPIO_PIN_SET);		//There is an inverter between MCU and the output, thus SET
 8001d58:	2201      	movs	r2, #1
 8001d5a:	2102      	movs	r1, #2
 8001d5c:	4807      	ldr	r0, [pc, #28]	@ (8001d7c <PowerOffLowSupplies+0x40>)
 8001d5e:	f008 fd85 	bl	800a86c <HAL_GPIO_WritePin>
		HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001d62:	2001      	movs	r0, #1
 8001d64:	f002 fb4c 	bl	8004400 <HAL_Delay>
	else
	{
		printString("** ERROR ** PowerOffLowSupplies: 500V is On\n\r");
		printCR();
	}
}
 8001d68:	e004      	b.n	8001d74 <PowerOffLowSupplies+0x38>
		printString("** ERROR ** PowerOffLowSupplies: 500V is On\n\r");
 8001d6a:	4805      	ldr	r0, [pc, #20]	@ (8001d80 <PowerOffLowSupplies+0x44>)
 8001d6c:	f7fe fcfa 	bl	8000764 <printString>
		printCR();
 8001d70:	f7fe fce8 	bl	8000744 <printCR>
}
 8001d74:	bf00      	nop
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	24000a3c 	.word	0x24000a3c
 8001d7c:	58020c00 	.word	0x58020c00
 8001d80:	08013e5c 	.word	0x08013e5c

08001d84 <PowerOffHighSupplies>:


//Power Off Supply 500V
void PowerOffHighSupplies(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
	//Make sure the H-bridge outputs are zero before turning off power
	stopHbridge();
 8001d88:	f7fe fdbc 	bl	8000904 <stopHbridge>

	//Power off 500V
	HAL_GPIO_WritePin(OUT_500V_ENABLE_GPIO_Port, OUT_500V_ENABLE_Pin, GPIO_PIN_SET);	//There is an inverter between MCU and the output, thus SET
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	2101      	movs	r1, #1
 8001d90:	480b      	ldr	r0, [pc, #44]	@ (8001dc0 <PowerOffHighSupplies+0x3c>)
 8001d92:	f008 fd6b 	bl	800a86c <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001d96:	2001      	movs	r0, #1
 8001d98:	f002 fb32 	bl	8004400 <HAL_Delay>

	//Disable Line Drive 1
	HAL_GPIO_WritePin(LINE_DRIVER1_ENABLE_GPIO_Port, LINE_DRIVER1_ENABLE_Pin, GPIO_PIN_SET);
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	2104      	movs	r1, #4
 8001da0:	4808      	ldr	r0, [pc, #32]	@ (8001dc4 <PowerOffHighSupplies+0x40>)
 8001da2:	f008 fd63 	bl	800a86c <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001da6:	2001      	movs	r0, #1
 8001da8:	f002 fb2a 	bl	8004400 <HAL_Delay>

	//Signal to robot controller all power supplies are inactive.
	HAL_GPIO_WritePin(LED_ACTIVE_GPIO_Port, LED_ACTIVE_Pin, GPIO_PIN_SET);			//There is an inverter between MCU and the output, thus SET
 8001dac:	2201      	movs	r2, #1
 8001dae:	2101      	movs	r1, #1
 8001db0:	4805      	ldr	r0, [pc, #20]	@ (8001dc8 <PowerOffHighSupplies+0x44>)
 8001db2:	f008 fd5b 	bl	800a86c <HAL_GPIO_WritePin>

	powerStatus = V500_OFF;
 8001db6:	4b05      	ldr	r3, [pc, #20]	@ (8001dcc <PowerOffHighSupplies+0x48>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	801a      	strh	r2, [r3, #0]
}
 8001dbc:	bf00      	nop
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	58021800 	.word	0x58021800
 8001dc4:	58020400 	.word	0x58020400
 8001dc8:	58021000 	.word	0x58021000
 8001dcc:	24000a3c 	.word	0x24000a3c

08001dd0 <PowerOffSupplies>:

void PowerOffSupplies(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
	PowerOffHighSupplies();
 8001dd4:	f7ff ffd6 	bl	8001d84 <PowerOffHighSupplies>
	PowerOffLowSupplies();
 8001dd8:	f7ff ffb0 	bl	8001d3c <PowerOffLowSupplies>
}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <PowerOnLowSupplies>:

//Power On Supplies in order 15V, 3.3V switch
//Returns 1 if the power up sequence was successful, and 0 if it failed
int PowerOnLowSupplies(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
	//Power on 15V
	//printString("\n\rPower on 15V - ");
	HAL_GPIO_WritePin(OUT_15V_ENABLE_GPIO_Port, OUT_15V_ENABLE_Pin, GPIO_PIN_RESET);	//There is an inverter between MCU and the output, thus RESET
 8001de4:	2200      	movs	r2, #0
 8001de6:	2102      	movs	r1, #2
 8001de8:	4818      	ldr	r0, [pc, #96]	@ (8001e4c <PowerOnLowSupplies+0x6c>)
 8001dea:	f008 fd3f 	bl	800a86c <HAL_GPIO_WritePin>
	printString("\n\rPower on 15V - ");
 8001dee:	4818      	ldr	r0, [pc, #96]	@ (8001e50 <PowerOnLowSupplies+0x70>)
 8001df0:	f7fe fcb8 	bl	8000764 <printString>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001df4:	2001      	movs	r0, #1
 8001df6:	f002 fb03 	bl	8004400 <HAL_Delay>

	//Start reading ADC3 channels
	measureVoltagesTemperaturesADC3();
 8001dfa:	f7ff fe4d 	bl	8001a98 <measureVoltagesTemperaturesADC3>
	//Wait until ADC3 reading is done
	while (sADC.adc3_reading) ;
 8001dfe:	bf00      	nop
 8001e00:	4b14      	ldr	r3, [pc, #80]	@ (8001e54 <PowerOnLowSupplies+0x74>)
 8001e02:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	@ 0x70c
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1f9      	bne.n	8001e00 <PowerOnLowSupplies+0x20>

	//Check 15V voltage
	if (sADC.adc3_data[ADC3_15V] >= sADC3threshold[ADC3_15V])
 8001e0c:	4b11      	ldr	r3, [pc, #68]	@ (8001e54 <PowerOnLowSupplies+0x74>)
 8001e0e:	f8b3 24b2 	ldrh.w	r2, [r3, #1202]	@ 0x4b2
 8001e12:	4b11      	ldr	r3, [pc, #68]	@ (8001e58 <PowerOnLowSupplies+0x78>)
 8001e14:	885b      	ldrh	r3, [r3, #2]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d30f      	bcc.n	8001e3a <PowerOnLowSupplies+0x5a>
		printString("Ok");
 8001e1a:	4810      	ldr	r0, [pc, #64]	@ (8001e5c <PowerOnLowSupplies+0x7c>)
 8001e1c:	f7fe fca2 	bl	8000764 <printString>
		PowerOffLowSupplies();
		return(0);
	}

	//Power on 3.3V switch voltage
	printString("\n\rPower on 3.3V switch");
 8001e20:	480f      	ldr	r0, [pc, #60]	@ (8001e60 <PowerOnLowSupplies+0x80>)
 8001e22:	f7fe fc9f 	bl	8000764 <printString>
	HAL_GPIO_WritePin(OUT_3V3_SWITCH_GPIO_Port, OUT_3V3_SWITCH_Pin, GPIO_PIN_RESET);
 8001e26:	2200      	movs	r2, #0
 8001e28:	2101      	movs	r1, #1
 8001e2a:	4808      	ldr	r0, [pc, #32]	@ (8001e4c <PowerOnLowSupplies+0x6c>)
 8001e2c:	f008 fd1e 	bl	800a86c <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001e30:	2001      	movs	r0, #1
 8001e32:	f002 fae5 	bl	8004400 <HAL_Delay>

	return(1);
 8001e36:	2301      	movs	r3, #1
 8001e38:	e005      	b.n	8001e46 <PowerOnLowSupplies+0x66>
		printString("Fail");
 8001e3a:	480a      	ldr	r0, [pc, #40]	@ (8001e64 <PowerOnLowSupplies+0x84>)
 8001e3c:	f7fe fc92 	bl	8000764 <printString>
		PowerOffLowSupplies();
 8001e40:	f7ff ff7c 	bl	8001d3c <PowerOffLowSupplies>
		return(0);
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	58020c00 	.word	0x58020c00
 8001e50:	08013e8c 	.word	0x08013e8c
 8001e54:	2400032c 	.word	0x2400032c
 8001e58:	24000004 	.word	0x24000004
 8001e5c:	08013ea0 	.word	0x08013ea0
 8001e60:	08013eac 	.word	0x08013eac
 8001e64:	08013ea4 	.word	0x08013ea4

08001e68 <PowerOnHighSupplies>:

//Power On Supply 500V
//Returns 1 if the power up was successful, and 0 if it failed
int PowerOnHighSupplies(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
	stopHbridge(); 	//Make sure the H-bridge outputs are zero before enabling the line driver
 8001e6c:	f7fe fd4a 	bl	8000904 <stopHbridge>

	//Enable Line Drive 1
	printString("\n\rEnable Line Drive 1");
 8001e70:	481b      	ldr	r0, [pc, #108]	@ (8001ee0 <PowerOnHighSupplies+0x78>)
 8001e72:	f7fe fc77 	bl	8000764 <printString>
	HAL_GPIO_WritePin(LINE_DRIVER1_ENABLE_GPIO_Port, LINE_DRIVER1_ENABLE_Pin, GPIO_PIN_RESET);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2104      	movs	r1, #4
 8001e7a:	481a      	ldr	r0, [pc, #104]	@ (8001ee4 <PowerOnHighSupplies+0x7c>)
 8001e7c:	f008 fcf6 	bl	800a86c <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001e80:	2001      	movs	r0, #1
 8001e82:	f002 fabd 	bl	8004400 <HAL_Delay>

	//Power on 500V
	printString("\n\rPower on 500V - ");
 8001e86:	4818      	ldr	r0, [pc, #96]	@ (8001ee8 <PowerOnHighSupplies+0x80>)
 8001e88:	f7fe fc6c 	bl	8000764 <printString>
	HAL_GPIO_WritePin(OUT_500V_ENABLE_GPIO_Port, OUT_500V_ENABLE_Pin, GPIO_PIN_RESET);	//There is an inverter between MCU and the output, thus RESET
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	2101      	movs	r1, #1
 8001e90:	4816      	ldr	r0, [pc, #88]	@ (8001eec <PowerOnHighSupplies+0x84>)
 8001e92:	f008 fceb 	bl	800a86c <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001e96:	2001      	movs	r0, #1
 8001e98:	f002 fab2 	bl	8004400 <HAL_Delay>

	//Start reading ADC3 channels
	measureVoltagesTemperaturesADC3();
 8001e9c:	f7ff fdfc 	bl	8001a98 <measureVoltagesTemperaturesADC3>
	//Wait until ADC reading is done
	while (sADC.adc3_reading) ;
 8001ea0:	bf00      	nop
 8001ea2:	4b13      	ldr	r3, [pc, #76]	@ (8001ef0 <PowerOnHighSupplies+0x88>)
 8001ea4:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	@ 0x70c
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f9      	bne.n	8001ea2 <PowerOnHighSupplies+0x3a>

	//Check 500V voltage
	if (sADC.adc3_data[ADC3_500VDC] >= sADC3threshold[ADC3_500VDC])
 8001eae:	4b10      	ldr	r3, [pc, #64]	@ (8001ef0 <PowerOnHighSupplies+0x88>)
 8001eb0:	f8b3 24ba 	ldrh.w	r2, [r3, #1210]	@ 0x4ba
 8001eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef4 <PowerOnHighSupplies+0x8c>)
 8001eb6:	895b      	ldrh	r3, [r3, #10]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d303      	bcc.n	8001ec4 <PowerOnHighSupplies+0x5c>
		printString("Ok");
 8001ebc:	480e      	ldr	r0, [pc, #56]	@ (8001ef8 <PowerOnHighSupplies+0x90>)
 8001ebe:	f7fe fc51 	bl	8000764 <printString>
 8001ec2:	e002      	b.n	8001eca <PowerOnHighSupplies+0x62>
	else
	{
		//printString("Fail");
		printString("debug");
 8001ec4:	480d      	ldr	r0, [pc, #52]	@ (8001efc <PowerOnHighSupplies+0x94>)
 8001ec6:	f7fe fc4d 	bl	8000764 <printString>
		//PowerOffHighSupplies();
		//return(0);
	}

	//Signal to robot controller all power supplies are active
	HAL_GPIO_WritePin(LED_ACTIVE_GPIO_Port, LED_ACTIVE_Pin, GPIO_PIN_RESET);	//There is an inverter between MCU and the output, thus RESET
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2101      	movs	r1, #1
 8001ece:	480c      	ldr	r0, [pc, #48]	@ (8001f00 <PowerOnHighSupplies+0x98>)
 8001ed0:	f008 fccc 	bl	800a86c <HAL_GPIO_WritePin>

	powerStatus = V500_ON;
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f04 <PowerOnHighSupplies+0x9c>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	801a      	strh	r2, [r3, #0]

	return(1);
 8001eda:	2301      	movs	r3, #1
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	08013ec4 	.word	0x08013ec4
 8001ee4:	58020400 	.word	0x58020400
 8001ee8:	08013edc 	.word	0x08013edc
 8001eec:	58021800 	.word	0x58021800
 8001ef0:	2400032c 	.word	0x2400032c
 8001ef4:	24000004 	.word	0x24000004
 8001ef8:	08013ea0 	.word	0x08013ea0
 8001efc:	08013ef0 	.word	0x08013ef0
 8001f00:	58021000 	.word	0x58021000
 8001f04:	24000a3c 	.word	0x24000a3c

08001f08 <HAL_GPIO_EXTI_Callback>:

// GPIO interrupt handler
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	80fb      	strh	r3, [r7, #6]
	if (sFlashConfig.mode == RUN_MODE)
 8001f12:	4b07      	ldr	r3, [pc, #28]	@ (8001f30 <HAL_GPIO_EXTI_Callback+0x28>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d105      	bne.n	8001f26 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		// Power off request received
		if(GPIO_Pin == POWER_OFF_IRQ_Pin)
 8001f1a:	88fb      	ldrh	r3, [r7, #6]
 8001f1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f20:	d101      	bne.n	8001f26 <HAL_GPIO_EXTI_Callback+0x1e>
			PowerOffSupplies();
 8001f22:	f7ff ff55 	bl	8001dd0 <PowerOffSupplies>
	}
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	24000a40 	.word	0x24000a40

08001f34 <InitializeConfigMenu>:

// Initialize the UART3 configuration menu
static void InitializeConfigMenu(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
	int item = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	607b      	str	r3, [r7, #4]

	config_menu[item++] = "\n\rPlasma Driver Configuration Menu";
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	607a      	str	r2, [r7, #4]
 8001f44:	4a0c      	ldr	r2, [pc, #48]	@ (8001f78 <InitializeConfigMenu+0x44>)
 8001f46:	490d      	ldr	r1, [pc, #52]	@ (8001f7c <InitializeConfigMenu+0x48>)
 8001f48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	config_menu[item++] = "   m: Change mode (Test/Run)";
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	607a      	str	r2, [r7, #4]
 8001f52:	4a09      	ldr	r2, [pc, #36]	@ (8001f78 <InitializeConfigMenu+0x44>)
 8001f54:	490a      	ldr	r1, [pc, #40]	@ (8001f80 <InitializeConfigMenu+0x4c>)
 8001f56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if (item > CONFIG_MENU_SIZE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	dd06      	ble.n	8001f6e <InitializeConfigMenu+0x3a>
		HAL_UART_Transmit(&huart3, (uint8_t *) "\n\rIncrease CONFIG_MENU_SIZE", 20, 1000);
 8001f60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f64:	2214      	movs	r2, #20
 8001f66:	4907      	ldr	r1, [pc, #28]	@ (8001f84 <InitializeConfigMenu+0x50>)
 8001f68:	4807      	ldr	r0, [pc, #28]	@ (8001f88 <InitializeConfigMenu+0x54>)
 8001f6a:	f00d fc02 	bl	800f772 <HAL_UART_Transmit>

}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	24000324 	.word	0x24000324
 8001f7c:	08013ef8 	.word	0x08013ef8
 8001f80:	08013f1c 	.word	0x08013f1c
 8001f84:	08013f3c 	.word	0x08013f3c
 8001f88:	24000e30 	.word	0x24000e30

08001f8c <InitializeMenu>:

// Initialize the UART3 menu
static void InitializeMenu(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
	int item = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	607b      	str	r3, [r7, #4]

	//Clear previous menu
	for (int i=0; i < MAX_MENU_SIZE; ++i)
 8001f96:	2300      	movs	r3, #0
 8001f98:	603b      	str	r3, [r7, #0]
 8001f9a:	e007      	b.n	8001fac <InitializeMenu+0x20>
	{
		menu[i] = "";
 8001f9c:	4a4b      	ldr	r2, [pc, #300]	@ (80020cc <InitializeMenu+0x140>)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	494b      	ldr	r1, [pc, #300]	@ (80020d0 <InitializeMenu+0x144>)
 8001fa2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0; i < MAX_MENU_SIZE; ++i)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	2b0c      	cmp	r3, #12
 8001fb0:	ddf4      	ble.n	8001f9c <InitializeMenu+0x10>
	}

	if (sFlashConfig.mode == TEST_MODE)
 8001fb2:	4b48      	ldr	r3, [pc, #288]	@ (80020d4 <InitializeMenu+0x148>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d15b      	bne.n	8002072 <InitializeMenu+0xe6>
	{
		menu[item++] = "\n\rPlasma Driver TEST Menu";
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	1c5a      	adds	r2, r3, #1
 8001fbe:	607a      	str	r2, [r7, #4]
 8001fc0:	4a42      	ldr	r2, [pc, #264]	@ (80020cc <InitializeMenu+0x140>)
 8001fc2:	4945      	ldr	r1, [pc, #276]	@ (80020d8 <InitializeMenu+0x14c>)
 8001fc4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   p: Power on supplies";
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	607a      	str	r2, [r7, #4]
 8001fce:	4a3f      	ldr	r2, [pc, #252]	@ (80020cc <InitializeMenu+0x140>)
 8001fd0:	4942      	ldr	r1, [pc, #264]	@ (80020dc <InitializeMenu+0x150>)
 8001fd2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   o: Power off supplies";
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	1c5a      	adds	r2, r3, #1
 8001fda:	607a      	str	r2, [r7, #4]
 8001fdc:	4a3b      	ldr	r2, [pc, #236]	@ (80020cc <InitializeMenu+0x140>)
 8001fde:	4940      	ldr	r1, [pc, #256]	@ (80020e0 <InitializeMenu+0x154>)
 8001fe0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   s: Start/stop driving H-Bridge";
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	1c5a      	adds	r2, r3, #1
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	4a38      	ldr	r2, [pc, #224]	@ (80020cc <InitializeMenu+0x140>)
 8001fec:	493d      	ldr	r1, [pc, #244]	@ (80020e4 <InitializeMenu+0x158>)
 8001fee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   f: Set H-bridge frequency (Hz)";
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	1c5a      	adds	r2, r3, #1
 8001ff6:	607a      	str	r2, [r7, #4]
 8001ff8:	4a34      	ldr	r2, [pc, #208]	@ (80020cc <InitializeMenu+0x140>)
 8001ffa:	493b      	ldr	r1, [pc, #236]	@ (80020e8 <InitializeMenu+0x15c>)
 8001ffc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   d: Set H-bridge dead time (%)";
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	1c5a      	adds	r2, r3, #1
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	4a31      	ldr	r2, [pc, #196]	@ (80020cc <InitializeMenu+0x140>)
 8002008:	4938      	ldr	r1, [pc, #224]	@ (80020ec <InitializeMenu+0x160>)
 800200a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   a: Start ADC1 and ADC2 measurement";
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	1c5a      	adds	r2, r3, #1
 8002012:	607a      	str	r2, [r7, #4]
 8002014:	4a2d      	ldr	r2, [pc, #180]	@ (80020cc <InitializeMenu+0x140>)
 8002016:	4936      	ldr	r1, [pc, #216]	@ (80020f0 <InitializeMenu+0x164>)
 8002018:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   b: Start ADC3 measurement";
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	1c5a      	adds	r2, r3, #1
 8002020:	607a      	str	r2, [r7, #4]
 8002022:	4a2a      	ldr	r2, [pc, #168]	@ (80020cc <InitializeMenu+0x140>)
 8002024:	4933      	ldr	r1, [pc, #204]	@ (80020f4 <InitializeMenu+0x168>)
 8002026:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   q: Frequency correction";
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	1c5a      	adds	r2, r3, #1
 800202e:	607a      	str	r2, [r7, #4]
 8002030:	4a26      	ldr	r2, [pc, #152]	@ (80020cc <InitializeMenu+0x140>)
 8002032:	4931      	ldr	r1, [pc, #196]	@ (80020f8 <InitializeMenu+0x16c>)
 8002034:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   z: Debug output (On/Off)";
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	1c5a      	adds	r2, r3, #1
 800203c:	607a      	str	r2, [r7, #4]
 800203e:	4a23      	ldr	r2, [pc, #140]	@ (80020cc <InitializeMenu+0x140>)
 8002040:	492e      	ldr	r1, [pc, #184]	@ (80020fc <InitializeMenu+0x170>)
 8002042:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   c: Show/Change configuration";
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	1c5a      	adds	r2, r3, #1
 800204a:	607a      	str	r2, [r7, #4]
 800204c:	4a1f      	ldr	r2, [pc, #124]	@ (80020cc <InitializeMenu+0x140>)
 800204e:	492c      	ldr	r1, [pc, #176]	@ (8002100 <InitializeMenu+0x174>)
 8002050:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   t: Test GPIO";
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	1c5a      	adds	r2, r3, #1
 8002058:	607a      	str	r2, [r7, #4]
 800205a:	4a1c      	ldr	r2, [pc, #112]	@ (80020cc <InitializeMenu+0x140>)
 800205c:	4929      	ldr	r1, [pc, #164]	@ (8002104 <InitializeMenu+0x178>)
 800205e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   y: Auto Frequency Adjustment";
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	1c5a      	adds	r2, r3, #1
 8002066:	607a      	str	r2, [r7, #4]
 8002068:	4a18      	ldr	r2, [pc, #96]	@ (80020cc <InitializeMenu+0x140>)
 800206a:	4927      	ldr	r1, [pc, #156]	@ (8002108 <InitializeMenu+0x17c>)
 800206c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8002070:	e019      	b.n	80020a6 <InitializeMenu+0x11a>
	}
	else if ((sFlashConfig.mode == RUN_MODE))
 8002072:	4b18      	ldr	r3, [pc, #96]	@ (80020d4 <InitializeMenu+0x148>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d10e      	bne.n	8002098 <InitializeMenu+0x10c>
	{
		menu[item++] = "\n\rPlasma Driver RUN Menu";
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	1c5a      	adds	r2, r3, #1
 800207e:	607a      	str	r2, [r7, #4]
 8002080:	4a12      	ldr	r2, [pc, #72]	@ (80020cc <InitializeMenu+0x140>)
 8002082:	4922      	ldr	r1, [pc, #136]	@ (800210c <InitializeMenu+0x180>)
 8002084:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   c: Show/Change current configuration";
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	607a      	str	r2, [r7, #4]
 800208e:	4a0f      	ldr	r2, [pc, #60]	@ (80020cc <InitializeMenu+0x140>)
 8002090:	491f      	ldr	r1, [pc, #124]	@ (8002110 <InitializeMenu+0x184>)
 8002092:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8002096:	e006      	b.n	80020a6 <InitializeMenu+0x11a>
	}
	else
	{
		menu[item++] = "\n\rERROR SETTING UP MENU";
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	1c5a      	adds	r2, r3, #1
 800209c:	607a      	str	r2, [r7, #4]
 800209e:	4a0b      	ldr	r2, [pc, #44]	@ (80020cc <InitializeMenu+0x140>)
 80020a0:	491c      	ldr	r1, [pc, #112]	@ (8002114 <InitializeMenu+0x188>)
 80020a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	menu_size = item;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002118 <InitializeMenu+0x18c>)
 80020ac:	801a      	strh	r2, [r3, #0]

	if (menu_size> MAX_MENU_SIZE)
 80020ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002118 <InitializeMenu+0x18c>)
 80020b0:	881b      	ldrh	r3, [r3, #0]
 80020b2:	2b0d      	cmp	r3, #13
 80020b4:	d906      	bls.n	80020c4 <InitializeMenu+0x138>
		HAL_UART_Transmit(&huart3, (uint8_t *) "\n\rIncrease MENU_SIZE", 20, 1000);
 80020b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020ba:	2214      	movs	r2, #20
 80020bc:	4917      	ldr	r1, [pc, #92]	@ (800211c <InitializeMenu+0x190>)
 80020be:	4818      	ldr	r0, [pc, #96]	@ (8002120 <InitializeMenu+0x194>)
 80020c0:	f00d fb57 	bl	800f772 <HAL_UART_Transmit>

}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	240002ec 	.word	0x240002ec
 80020d0:	08013f58 	.word	0x08013f58
 80020d4:	24000a40 	.word	0x24000a40
 80020d8:	08013f5c 	.word	0x08013f5c
 80020dc:	08013f78 	.word	0x08013f78
 80020e0:	08013f90 	.word	0x08013f90
 80020e4:	08013fac 	.word	0x08013fac
 80020e8:	08013fd0 	.word	0x08013fd0
 80020ec:	08013ff4 	.word	0x08013ff4
 80020f0:	08014018 	.word	0x08014018
 80020f4:	08014040 	.word	0x08014040
 80020f8:	08014060 	.word	0x08014060
 80020fc:	0801407c 	.word	0x0801407c
 8002100:	08014098 	.word	0x08014098
 8002104:	080140b8 	.word	0x080140b8
 8002108:	080140c8 	.word	0x080140c8
 800210c:	080140e8 	.word	0x080140e8
 8002110:	08014104 	.word	0x08014104
 8002114:	0801412c 	.word	0x0801412c
 8002118:	24000320 	.word	0x24000320
 800211c:	08014144 	.word	0x08014144
 8002120:	24000e30 	.word	0x24000e30

08002124 <ShowChangeConfigFlash>:

// Show configuration. Add option to change configuration
void ShowChangeConfigFlash(void)
{
 8002124:	b590      	push	{r4, r7, lr}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
	uint16_t aYes;
	uint16_t mode;
	char input;

	printConfigFlash();
 800212a:	f7fe fb31 	bl	8000790 <printConfigFlash>
	printString("\n\rChange configuration (0:No 1:Yes)? ");
 800212e:	482e      	ldr	r0, [pc, #184]	@ (80021e8 <ShowChangeConfigFlash+0xc4>)
 8002130:	f7fe fb18 	bl	8000764 <printString>
	if (GetUint16Input(&aYes, 1, 0, 1))
 8002134:	f107 000a 	add.w	r0, r7, #10
 8002138:	2301      	movs	r3, #1
 800213a:	2200      	movs	r2, #0
 800213c:	2101      	movs	r1, #1
 800213e:	f7ff fd4d 	bl	8001bdc <GetUint16Input>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d04b      	beq.n	80021e0 <ShowChangeConfigFlash+0xbc>
	{
		if (aYes)
 8002148:	897b      	ldrh	r3, [r7, #10]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d048      	beq.n	80021e0 <ShowChangeConfigFlash+0xbc>
		{
			for (int i=0; i<CONFIG_MENU_SIZE; i++)
 800214e:	2300      	movs	r3, #0
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	e017      	b.n	8002184 <ShowChangeConfigFlash+0x60>
			{
				HAL_UART_Transmit(&huart3, (uint8_t *) config_menu[i], strlen(config_menu[i]), 1000);
 8002154:	4a25      	ldr	r2, [pc, #148]	@ (80021ec <ShowChangeConfigFlash+0xc8>)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800215c:	4a23      	ldr	r2, [pc, #140]	@ (80021ec <ShowChangeConfigFlash+0xc8>)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe f923 	bl	80003b0 <strlen>
 800216a:	4603      	mov	r3, r0
 800216c:	b29a      	uxth	r2, r3
 800216e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002172:	4621      	mov	r1, r4
 8002174:	481e      	ldr	r0, [pc, #120]	@ (80021f0 <ShowChangeConfigFlash+0xcc>)
 8002176:	f00d fafc 	bl	800f772 <HAL_UART_Transmit>
				printCR();
 800217a:	f7fe fae3 	bl	8000744 <printCR>
			for (int i=0; i<CONFIG_MENU_SIZE; i++)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	3301      	adds	r3, #1
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2b01      	cmp	r3, #1
 8002188:	dde4      	ble.n	8002154 <ShowChangeConfigFlash+0x30>
			}
			printCR();
 800218a:	f7fe fadb 	bl	8000744 <printCR>

			//Wait for user input
			if (HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 60000) == HAL_OK)
 800218e:	1df9      	adds	r1, r7, #7
 8002190:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8002194:	2201      	movs	r2, #1
 8002196:	4816      	ldr	r0, [pc, #88]	@ (80021f0 <ShowChangeConfigFlash+0xcc>)
 8002198:	f00d fb79 	bl	800f88e <HAL_UART_Receive>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d11e      	bne.n	80021e0 <ShowChangeConfigFlash+0xbc>
			{
				switch (input)
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	2b6d      	cmp	r3, #109	@ 0x6d
 80021a6:	d11b      	bne.n	80021e0 <ShowChangeConfigFlash+0xbc>
				{
					case 'm': //Change mode
						printString("\n\rChange mode (0:Test 1:Run)? ");
 80021a8:	4812      	ldr	r0, [pc, #72]	@ (80021f4 <ShowChangeConfigFlash+0xd0>)
 80021aa:	f7fe fadb 	bl	8000764 <printString>
						if (GetUint16Input(&mode, 1, 0, 1))
 80021ae:	f107 0008 	add.w	r0, r7, #8
 80021b2:	2301      	movs	r3, #1
 80021b4:	2200      	movs	r2, #0
 80021b6:	2101      	movs	r1, #1
 80021b8:	f7ff fd10 	bl	8001bdc <GetUint16Input>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00d      	beq.n	80021de <ShowChangeConfigFlash+0xba>
						{   // Data entry valid
							if (sFlashConfig.mode != mode)
 80021c2:	4b0d      	ldr	r3, [pc, #52]	@ (80021f8 <ShowChangeConfigFlash+0xd4>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	461a      	mov	r2, r3
 80021c8:	893b      	ldrh	r3, [r7, #8]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d007      	beq.n	80021de <ShowChangeConfigFlash+0xba>
							{
								sFlashConfig.mode = mode;
 80021ce:	893b      	ldrh	r3, [r7, #8]
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	4b09      	ldr	r3, [pc, #36]	@ (80021f8 <ShowChangeConfigFlash+0xd4>)
 80021d4:	701a      	strb	r2, [r3, #0]
								InitializeMenu();
 80021d6:	f7ff fed9 	bl	8001f8c <InitializeMenu>
								writeConfigFlash();
 80021da:	f7fe fa69 	bl	80006b0 <writeConfigFlash>
							}
						}
					break;
 80021de:	bf00      	nop
				}
			}
		}
	}
}
 80021e0:	bf00      	nop
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd90      	pop	{r4, r7, pc}
 80021e8:	0801415c 	.word	0x0801415c
 80021ec:	24000324 	.word	0x24000324
 80021f0:	24000e30 	.word	0x24000e30
 80021f4:	08014184 	.word	0x08014184
 80021f8:	24000a40 	.word	0x24000a40

080021fc <testGPIO>:

//Test GPIO settings
void testGPIO(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0

		printString("\n\rClear LED_GREEN");
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
		GetUint16Input(&aYes, 1, 0, 1);
*/
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <RunModeAction>:

// Action table for the run mode menu
static void RunModeAction(char input)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	4603      	mov	r3, r0
 8002212:	71fb      	strb	r3, [r7, #7]
	switch (input)
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	2b63      	cmp	r3, #99	@ 0x63
 8002218:	d102      	bne.n	8002220 <RunModeAction+0x16>
	{
		case 'c': //Show/Change current configuration
			ShowChangeConfigFlash();
 800221a:	f7ff ff83 	bl	8002124 <ShowChangeConfigFlash>
			break;
 800221e:	bf00      	nop
	}
}
 8002220:	bf00      	nop
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <TestModeAction>:

// Action table for the test mode menu
static void TestModeAction(char input)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b09c      	sub	sp, #112	@ 0x70
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	71fb      	strb	r3, [r7, #7]
	switch (input)
 8002232:	79fb      	ldrb	r3, [r7, #7]
 8002234:	3b61      	subs	r3, #97	@ 0x61
 8002236:	2b19      	cmp	r3, #25
 8002238:	f200 80e6 	bhi.w	8002408 <TestModeAction+0x1e0>
 800223c:	a201      	add	r2, pc, #4	@ (adr r2, 8002244 <TestModeAction+0x1c>)
 800223e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002242:	bf00      	nop
 8002244:	080022e3 	.word	0x080022e3
 8002248:	0800230b 	.word	0x0800230b
 800224c:	080023e9 	.word	0x080023e9
 8002250:	0800234d 	.word	0x0800234d
 8002254:	08002409 	.word	0x08002409
 8002258:	08002323 	.word	0x08002323
 800225c:	08002409 	.word	0x08002409
 8002260:	08002409 	.word	0x08002409
 8002264:	08002409 	.word	0x08002409
 8002268:	08002409 	.word	0x08002409
 800226c:	08002409 	.word	0x08002409
 8002270:	08002409 	.word	0x08002409
 8002274:	08002409 	.word	0x08002409
 8002278:	08002409 	.word	0x08002409
 800227c:	080022d7 	.word	0x080022d7
 8002280:	080022ad 	.word	0x080022ad
 8002284:	08002399 	.word	0x08002399
 8002288:	08002409 	.word	0x08002409
 800228c:	08002373 	.word	0x08002373
 8002290:	080023ef 	.word	0x080023ef
 8002294:	08002409 	.word	0x08002409
 8002298:	08002409 	.word	0x08002409
 800229c:	08002409 	.word	0x08002409
 80022a0:	08002409 	.word	0x08002409
 80022a4:	080023f5 	.word	0x080023f5
 80022a8:	080023c7 	.word	0x080023c7
	{
		case 'p': //Power supplies on
			if (powerStatus == V500_OFF)
 80022ac:	4b58      	ldr	r3, [pc, #352]	@ (8002410 <TestModeAction+0x1e8>)
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10c      	bne.n	80022ce <TestModeAction+0xa6>
			{
				if (PowerOnHighSupplies() == POWERON_FAILED)
 80022b4:	f7ff fdd8 	bl	8001e68 <PowerOnHighSupplies>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d103      	bne.n	80022c6 <TestModeAction+0x9e>
				{
					printString("\n\rPower on failed\n\r");
 80022be:	4855      	ldr	r0, [pc, #340]	@ (8002414 <TestModeAction+0x1ec>)
 80022c0:	f7fe fa50 	bl	8000764 <printString>
			}
			else
			{
				printString("\n\rPower supplies are on\n\r");
			}
			break;
 80022c4:	e0a0      	b.n	8002408 <TestModeAction+0x1e0>
					printString("\n\rPower on succeeded\n\r");
 80022c6:	4854      	ldr	r0, [pc, #336]	@ (8002418 <TestModeAction+0x1f0>)
 80022c8:	f7fe fa4c 	bl	8000764 <printString>
			break;
 80022cc:	e09c      	b.n	8002408 <TestModeAction+0x1e0>
				printString("\n\rPower supplies are on\n\r");
 80022ce:	4853      	ldr	r0, [pc, #332]	@ (800241c <TestModeAction+0x1f4>)
 80022d0:	f7fe fa48 	bl	8000764 <printString>
			break;
 80022d4:	e098      	b.n	8002408 <TestModeAction+0x1e0>

		case 'o': //Power supplies off
			printString("\n\rPower off supplies\n\r");
 80022d6:	4852      	ldr	r0, [pc, #328]	@ (8002420 <TestModeAction+0x1f8>)
 80022d8:	f7fe fa44 	bl	8000764 <printString>
			PowerOffHighSupplies();
 80022dc:	f7ff fd52 	bl	8001d84 <PowerOffHighSupplies>
			break;
 80022e0:	e092      	b.n	8002408 <TestModeAction+0x1e0>

		case 'a': //Start ADC1 and ADC2 analog voltage measurement
			if (sHbridge.on)
 80022e2:	4b50      	ldr	r3, [pc, #320]	@ (8002424 <TestModeAction+0x1fc>)
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00b      	beq.n	8002302 <TestModeAction+0xda>
			{
				//Setup to read ADC1 and ADC2 channels
				//Reading will start at TIM1 CH1 0->1 interrupt
				measureBridgePlasmaADC12();
 80022ea:	f7ff f8a1 	bl	8001430 <measureBridgePlasmaADC12>
				//Wait until ADC3 reading is done
				while (sADC.adc12_reading) ;
 80022ee:	bf00      	nop
 80022f0:	4b4d      	ldr	r3, [pc, #308]	@ (8002428 <TestModeAction+0x200>)
 80022f2:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	@ 0x70e
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1f9      	bne.n	80022f0 <TestModeAction+0xc8>
				//Print ADC3 data on UART3
				printADC12data();
 80022fc:	f7fe fe88 	bl	8001010 <printADC12data>
			}
			else
			{
				printString("\n\r ---- H-Bridge needs to be on");
			}
			break;
 8002300:	e082      	b.n	8002408 <TestModeAction+0x1e0>
				printString("\n\r ---- H-Bridge needs to be on");
 8002302:	484a      	ldr	r0, [pc, #296]	@ (800242c <TestModeAction+0x204>)
 8002304:	f7fe fa2e 	bl	8000764 <printString>
			break;
 8002308:	e07e      	b.n	8002408 <TestModeAction+0x1e0>

		case 'b': //Start ADC3 analog voltage measurement
				//Start reading ADC3 channels
				measureVoltagesTemperaturesADC3();
 800230a:	f7ff fbc5 	bl	8001a98 <measureVoltagesTemperaturesADC3>
				//Wait until ADC3 reading is done
				while (sADC.adc3_reading) ;
 800230e:	bf00      	nop
 8002310:	4b45      	ldr	r3, [pc, #276]	@ (8002428 <TestModeAction+0x200>)
 8002312:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	@ 0x70c
 8002316:	b29b      	uxth	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1f9      	bne.n	8002310 <TestModeAction+0xe8>
				//Print ADC3 data on UART3
				printADC3data();
 800231c:	f7ff fb76 	bl	8001a0c <printADC3data>
			break;
 8002320:	e072      	b.n	8002408 <TestModeAction+0x1e0>

		case 'f': //Enter frequency (Hz)
			printHbridgeData();
 8002322:	f7fe fb1d 	bl	8000960 <printHbridgeData>
			printString("\n\rEnter frequency (Hz): ");
 8002326:	4842      	ldr	r0, [pc, #264]	@ (8002430 <TestModeAction+0x208>)
 8002328:	f7fe fa1c 	bl	8000764 <printString>
			if (GetUint16Input(&sHbridge.frequency, 1, MIN_FREQUENCY, MAX_FREQUENCY))
 800232c:	f64f 53e8 	movw	r3, #65000	@ 0xfde8
 8002330:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8002334:	2101      	movs	r1, #1
 8002336:	483f      	ldr	r0, [pc, #252]	@ (8002434 <TestModeAction+0x20c>)
 8002338:	f7ff fc50 	bl	8001bdc <GetUint16Input>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d05b      	beq.n	80023fa <TestModeAction+0x1d2>
			{   // Data entry valid
				programHbridge();
 8002342:	f7fe fb35 	bl	80009b0 <programHbridge>
				printHbridgeData();
 8002346:	f7fe fb0b 	bl	8000960 <printHbridgeData>
			}
			break;
 800234a:	e056      	b.n	80023fa <TestModeAction+0x1d2>

		case 'd': //Enter dead time (%)
			printHbridgeData();
 800234c:	f7fe fb08 	bl	8000960 <printHbridgeData>
			printString("\n\rEnter dead time (%): ");
 8002350:	4839      	ldr	r0, [pc, #228]	@ (8002438 <TestModeAction+0x210>)
 8002352:	f7fe fa07 	bl	8000764 <printString>
			if (GetUint16Input(&sHbridge.deadtime, 1, MIN_DEADTIME, MAX_DEADTIME))
 8002356:	2328      	movs	r3, #40	@ 0x28
 8002358:	2201      	movs	r2, #1
 800235a:	2101      	movs	r1, #1
 800235c:	4837      	ldr	r0, [pc, #220]	@ (800243c <TestModeAction+0x214>)
 800235e:	f7ff fc3d 	bl	8001bdc <GetUint16Input>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d04a      	beq.n	80023fe <TestModeAction+0x1d6>
			{   // Data entry valid
				programHbridge();
 8002368:	f7fe fb22 	bl	80009b0 <programHbridge>
				printHbridgeData();
 800236c:	f7fe faf8 	bl	8000960 <printHbridgeData>
			}
			break;
 8002370:	e045      	b.n	80023fe <TestModeAction+0x1d6>

		case 's': //Start/stop driving H-bridge
			printHbridgeData();
 8002372:	f7fe faf5 	bl	8000960 <printHbridgeData>
			printString("\n\rDrive H-bridge 1:Yes 0:No : ");
 8002376:	4832      	ldr	r0, [pc, #200]	@ (8002440 <TestModeAction+0x218>)
 8002378:	f7fe f9f4 	bl	8000764 <printString>
			if (GetUint16Input(&sHbridge.on, 1, 0, 1))
 800237c:	2301      	movs	r3, #1
 800237e:	2200      	movs	r2, #0
 8002380:	2101      	movs	r1, #1
 8002382:	4828      	ldr	r0, [pc, #160]	@ (8002424 <TestModeAction+0x1fc>)
 8002384:	f7ff fc2a 	bl	8001bdc <GetUint16Input>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d039      	beq.n	8002402 <TestModeAction+0x1da>
			{   // Data entry valid
				programHbridge();
 800238e:	f7fe fb0f 	bl	80009b0 <programHbridge>
				printHbridgeData();
 8002392:	f7fe fae5 	bl	8000960 <printHbridgeData>
			}
			break;
 8002396:	e034      	b.n	8002402 <TestModeAction+0x1da>

		case 'q': //Frequency correction
			int16_t freqCorr;
			if (freqCorrection(&freqCorr))
 8002398:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe ff85 	bl	80012ac <freqCorrection>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d02e      	beq.n	8002406 <TestModeAction+0x1de>
			{
				char text[100];
				sprintf(text, "\n\rFrequency correction: %i", (int) freqCorr);
 80023a8:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 80023ac:	461a      	mov	r2, r3
 80023ae:	f107 0308 	add.w	r3, r7, #8
 80023b2:	4924      	ldr	r1, [pc, #144]	@ (8002444 <TestModeAction+0x21c>)
 80023b4:	4618      	mov	r0, r3
 80023b6:	f00f fa99 	bl	80118ec <siprintf>
				printString(text);
 80023ba:	f107 0308 	add.w	r3, r7, #8
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe f9d0 	bl	8000764 <printString>
			}
			break;
 80023c4:	e01f      	b.n	8002406 <TestModeAction+0x1de>

		case 'z': //Debug output
			printNumber("\n\rCurrent Debug output: ", debug, 0);
 80023c6:	4b20      	ldr	r3, [pc, #128]	@ (8002448 <TestModeAction+0x220>)
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	2200      	movs	r2, #0
 80023cc:	4619      	mov	r1, r3
 80023ce:	481f      	ldr	r0, [pc, #124]	@ (800244c <TestModeAction+0x224>)
 80023d0:	f7fe fa0a 	bl	80007e8 <printNumber>
			printString("\n\rSet Debug output 1:On 0:Off : ");
 80023d4:	481e      	ldr	r0, [pc, #120]	@ (8002450 <TestModeAction+0x228>)
 80023d6:	f7fe f9c5 	bl	8000764 <printString>
			GetUint16Input(&debug, 1, 0, 1);
 80023da:	2301      	movs	r3, #1
 80023dc:	2200      	movs	r2, #0
 80023de:	2101      	movs	r1, #1
 80023e0:	4819      	ldr	r0, [pc, #100]	@ (8002448 <TestModeAction+0x220>)
 80023e2:	f7ff fbfb 	bl	8001bdc <GetUint16Input>
			break;
 80023e6:	e00f      	b.n	8002408 <TestModeAction+0x1e0>

		case 'c': //Show/Change current configuration
			ShowChangeConfigFlash();
 80023e8:	f7ff fe9c 	bl	8002124 <ShowChangeConfigFlash>
			break;
 80023ec:	e00c      	b.n	8002408 <TestModeAction+0x1e0>

		case 't': //Test GPIO
			testGPIO();
 80023ee:	f7ff ff05 	bl	80021fc <testGPIO>
			break;
 80023f2:	e009      	b.n	8002408 <TestModeAction+0x1e0>

		case 'y': //Auto Freq Adjust
			autoFreqAdj();
 80023f4:	f7ff f9a0 	bl	8001738 <autoFreqAdj>
			break;
 80023f8:	e006      	b.n	8002408 <TestModeAction+0x1e0>
			break;
 80023fa:	bf00      	nop
 80023fc:	e004      	b.n	8002408 <TestModeAction+0x1e0>
			break;
 80023fe:	bf00      	nop
 8002400:	e002      	b.n	8002408 <TestModeAction+0x1e0>
			break;
 8002402:	bf00      	nop
 8002404:	e000      	b.n	8002408 <TestModeAction+0x1e0>
			break;
 8002406:	bf00      	nop
	}
}
 8002408:	bf00      	nop
 800240a:	3770      	adds	r7, #112	@ 0x70
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	24000a3c 	.word	0x24000a3c
 8002414:	080141a4 	.word	0x080141a4
 8002418:	080141b8 	.word	0x080141b8
 800241c:	080141d0 	.word	0x080141d0
 8002420:	080141ec 	.word	0x080141ec
 8002424:	2400001c 	.word	0x2400001c
 8002428:	2400032c 	.word	0x2400032c
 800242c:	08014204 	.word	0x08014204
 8002430:	08014224 	.word	0x08014224
 8002434:	2400001e 	.word	0x2400001e
 8002438:	08014240 	.word	0x08014240
 800243c:	24000020 	.word	0x24000020
 8002440:	08014258 	.word	0x08014258
 8002444:	08014278 	.word	0x08014278
 8002448:	24000000 	.word	0x24000000
 800244c:	08014294 	.word	0x08014294
 8002450:	080142b0 	.word	0x080142b0

08002454 <PlasmaDriverMenu>:

// Print the plasma driver menu on UART3, and execute entered command.
static void PlasmaDriverMenu(void)
{
 8002454:	b590      	push	{r4, r7, lr}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
	char input;

	//Wait for user input
	if (HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK)
 800245a:	1cf9      	adds	r1, r7, #3
 800245c:	2301      	movs	r3, #1
 800245e:	2201      	movs	r2, #1
 8002460:	4822      	ldr	r0, [pc, #136]	@ (80024ec <PlasmaDriverMenu+0x98>)
 8002462:	f00d fa14 	bl	800f88e <HAL_UART_Receive>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d13b      	bne.n	80024e4 <PlasmaDriverMenu+0x90>
	{
		// Return pressed -- Display Menu
		if (input == 13)
 800246c:	78fb      	ldrb	r3, [r7, #3]
 800246e:	2b0d      	cmp	r3, #13
 8002470:	d123      	bne.n	80024ba <PlasmaDriverMenu+0x66>
		{
			for (int i=0; i<menu_size; i++)
 8002472:	2300      	movs	r3, #0
 8002474:	607b      	str	r3, [r7, #4]
 8002476:	e017      	b.n	80024a8 <PlasmaDriverMenu+0x54>
			{
				HAL_UART_Transmit(&huart3, (uint8_t *) menu[i], strlen(menu[i]), 1000);
 8002478:	4a1d      	ldr	r2, [pc, #116]	@ (80024f0 <PlasmaDriverMenu+0x9c>)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002480:	4a1b      	ldr	r2, [pc, #108]	@ (80024f0 <PlasmaDriverMenu+0x9c>)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002488:	4618      	mov	r0, r3
 800248a:	f7fd ff91 	bl	80003b0 <strlen>
 800248e:	4603      	mov	r3, r0
 8002490:	b29a      	uxth	r2, r3
 8002492:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002496:	4621      	mov	r1, r4
 8002498:	4814      	ldr	r0, [pc, #80]	@ (80024ec <PlasmaDriverMenu+0x98>)
 800249a:	f00d f96a 	bl	800f772 <HAL_UART_Transmit>
				printCR();
 800249e:	f7fe f951 	bl	8000744 <printCR>
			for (int i=0; i<menu_size; i++)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3301      	adds	r3, #1
 80024a6:	607b      	str	r3, [r7, #4]
 80024a8:	4b12      	ldr	r3, [pc, #72]	@ (80024f4 <PlasmaDriverMenu+0xa0>)
 80024aa:	881b      	ldrh	r3, [r3, #0]
 80024ac:	461a      	mov	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4293      	cmp	r3, r2
 80024b2:	dbe1      	blt.n	8002478 <PlasmaDriverMenu+0x24>
			}
			printCR();
 80024b4:	f7fe f946 	bl	8000744 <printCR>
				RunModeAction(input);
			else
				printString("\n\r*** ERROR *** Invalid mode");
		}
	}
}
 80024b8:	e014      	b.n	80024e4 <PlasmaDriverMenu+0x90>
			if (sFlashConfig.mode == TEST_MODE)
 80024ba:	4b0f      	ldr	r3, [pc, #60]	@ (80024f8 <PlasmaDriverMenu+0xa4>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d104      	bne.n	80024cc <PlasmaDriverMenu+0x78>
				TestModeAction(input);
 80024c2:	78fb      	ldrb	r3, [r7, #3]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff feaf 	bl	8002228 <TestModeAction>
}
 80024ca:	e00b      	b.n	80024e4 <PlasmaDriverMenu+0x90>
			else if (sFlashConfig.mode == RUN_MODE)
 80024cc:	4b0a      	ldr	r3, [pc, #40]	@ (80024f8 <PlasmaDriverMenu+0xa4>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d104      	bne.n	80024de <PlasmaDriverMenu+0x8a>
				RunModeAction(input);
 80024d4:	78fb      	ldrb	r3, [r7, #3]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff fe97 	bl	800220a <RunModeAction>
}
 80024dc:	e002      	b.n	80024e4 <PlasmaDriverMenu+0x90>
				printString("\n\r*** ERROR *** Invalid mode");
 80024de:	4807      	ldr	r0, [pc, #28]	@ (80024fc <PlasmaDriverMenu+0xa8>)
 80024e0:	f7fe f940 	bl	8000764 <printString>
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd90      	pop	{r4, r7, pc}
 80024ec:	24000e30 	.word	0x24000e30
 80024f0:	240002ec 	.word	0x240002ec
 80024f4:	24000320 	.word	0x24000320
 80024f8:	24000a40 	.word	0x24000a40
 80024fc:	080142d4 	.word	0x080142d4

08002500 <PlasmaDriverInit>:

// Initialize the plasma driver
void PlasmaDriverInit(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
	//Enable line driver 2 (HAL has initialized all GPIO)
	HAL_GPIO_WritePin(LINE_DRIVER2_ENABLE_GPIO_Port, LINE_DRIVER2_ENABLE_Pin, GPIO_PIN_RESET);  //Enable = Low
 8002504:	2200      	movs	r2, #0
 8002506:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800250a:	4821      	ldr	r0, [pc, #132]	@ (8002590 <PlasmaDriverInit+0x90>)
 800250c:	f008 f9ae 	bl	800a86c <HAL_GPIO_WritePin>
	printString("\n\rEnable Line Drive 2");
 8002510:	4820      	ldr	r0, [pc, #128]	@ (8002594 <PlasmaDriverInit+0x94>)
 8002512:	f7fe f927 	bl	8000764 <printString>

	//Power On Supplies in order 15V, 3.3V switch
	PowerOnLowSupplies();
 8002516:	f7ff fc63 	bl	8001de0 <PowerOnLowSupplies>

	//Read configuration from flash
	readConfigFlash();
 800251a:	f7fe f903 	bl	8000724 <readConfigFlash>

	//Has the flash configuration been initialized?
	if (sFlashConfig.mode == 0xFF)
 800251e:	4b1e      	ldr	r3, [pc, #120]	@ (8002598 <PlasmaDriverInit+0x98>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	2bff      	cmp	r3, #255	@ 0xff
 8002524:	d107      	bne.n	8002536 <PlasmaDriverInit+0x36>
	{
		// write default configuration to flash
		if (writeConfigFlash() != 0)
 8002526:	f7fe f8c3 	bl	80006b0 <writeConfigFlash>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d002      	beq.n	8002536 <PlasmaDriverInit+0x36>
			printString("\n\r*** ERROR FLASH");
 8002530:	481a      	ldr	r0, [pc, #104]	@ (800259c <PlasmaDriverInit+0x9c>)
 8002532:	f7fe f917 	bl	8000764 <printString>
	}

	//Initialize menu and configuration menu
	InitializeMenu();
 8002536:	f7ff fd29 	bl	8001f8c <InitializeMenu>
	InitializeConfigMenu();
 800253a:	f7ff fcfb 	bl	8001f34 <InitializeConfigMenu>

	//Calibrate ADC1, ADC2 and ADC3
	printString("\n\rCalibrate ADC1, ADC2 and ADC3");
 800253e:	4818      	ldr	r0, [pc, #96]	@ (80025a0 <PlasmaDriverInit+0xa0>)
 8002540:	f7fe f910 	bl	8000764 <printString>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8002544:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002548:	2100      	movs	r1, #0
 800254a:	4816      	ldr	r0, [pc, #88]	@ (80025a4 <PlasmaDriverInit+0xa4>)
 800254c:	f004 fc94 	bl	8006e78 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8002550:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002554:	2100      	movs	r1, #0
 8002556:	4814      	ldr	r0, [pc, #80]	@ (80025a8 <PlasmaDriverInit+0xa8>)
 8002558:	f004 fc8e 	bl	8006e78 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 800255c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002560:	2100      	movs	r1, #0
 8002562:	4812      	ldr	r0, [pc, #72]	@ (80025ac <PlasmaDriverInit+0xac>)
 8002564:	f004 fc88 	bl	8006e78 <HAL_ADCEx_Calibration_Start>

	//Power On Supply 500V
	if (sFlashConfig.mode == RUN_MODE)
 8002568:	4b0b      	ldr	r3, [pc, #44]	@ (8002598 <PlasmaDriverInit+0x98>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d10d      	bne.n	800258c <PlasmaDriverInit+0x8c>
	{
		//POWER_OFF_IRQ needs to be high before powering On
		if (HAL_GPIO_ReadPin(POWER_OFF_IRQ_GPIO_Port, POWER_OFF_IRQ_Pin) == GPIO_PIN_RESET)		//There is an inverter between MCU and the input, thus check RESET
 8002570:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002574:	480e      	ldr	r0, [pc, #56]	@ (80025b0 <PlasmaDriverInit+0xb0>)
 8002576:	f008 f961 	bl	800a83c <HAL_GPIO_ReadPin>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d102      	bne.n	8002586 <PlasmaDriverInit+0x86>
			PowerOnHighSupplies();
 8002580:	f7ff fc72 	bl	8001e68 <PowerOnHighSupplies>
		else
		printString("\n\rPOWER_OFF_IRQ line is not high - 500V is not powered on");
	}
}
 8002584:	e002      	b.n	800258c <PlasmaDriverInit+0x8c>
		printString("\n\rPOWER_OFF_IRQ line is not high - 500V is not powered on");
 8002586:	480b      	ldr	r0, [pc, #44]	@ (80025b4 <PlasmaDriverInit+0xb4>)
 8002588:	f7fe f8ec 	bl	8000764 <printString>
}
 800258c:	bf00      	nop
 800258e:	bd80      	pop	{r7, pc}
 8002590:	58020400 	.word	0x58020400
 8002594:	080142f4 	.word	0x080142f4
 8002598:	24000a40 	.word	0x24000a40
 800259c:	0801430c 	.word	0x0801430c
 80025a0:	08014320 	.word	0x08014320
 80025a4:	24000a80 	.word	0x24000a80
 80025a8:	24000af0 	.word	0x24000af0
 80025ac:	24000b60 	.word	0x24000b60
 80025b0:	58021000 	.word	0x58021000
 80025b4:	08014340 	.word	0x08014340

080025b8 <PlasmaDoTask>:

// This command is called from a while loop, and will execute any needed task.
void PlasmaDoTask(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
	PlasmaDriverMenu(); //Check UART3 and execute command
 80025bc:	f7ff ff4a 	bl	8002454 <PlasmaDriverMenu>

	if (sFlashConfig.mode == RUN_MODE)
 80025c0:	4b0d      	ldr	r3, [pc, #52]	@ (80025f8 <PlasmaDoTask+0x40>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d114      	bne.n	80025f2 <PlasmaDoTask+0x3a>
	{
		//Check if robot controller requested the plasma On or Off
		if (HAL_GPIO_ReadPin(TURN_PLASMA_ON_GPIO_Port, TURN_PLASMA_ON_Pin) == GPIO_PIN_RESET)		//There is an inverter between MCU and the input, thus check RESET
 80025c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80025cc:	480b      	ldr	r0, [pc, #44]	@ (80025fc <PlasmaDoTask+0x44>)
 80025ce:	f008 f935 	bl	800a83c <HAL_GPIO_ReadPin>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10c      	bne.n	80025f2 <PlasmaDoTask+0x3a>
		{
			if (powerStatus == V500_ON)
 80025d8:	4b09      	ldr	r3, [pc, #36]	@ (8002600 <PlasmaDoTask+0x48>)
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d105      	bne.n	80025ec <PlasmaDoTask+0x34>
			{
				sHbridge.on = 1; // Turn Hbridge on
 80025e0:	4b08      	ldr	r3, [pc, #32]	@ (8002604 <PlasmaDoTask+0x4c>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	801a      	strh	r2, [r3, #0]
				programHbridge();
 80025e6:	f7fe f9e3 	bl	80009b0 <programHbridge>
			}
			else
				printString("\n\rUnable to turn H-bridge on, since 500V is not powered on");
		}
	}
}
 80025ea:	e002      	b.n	80025f2 <PlasmaDoTask+0x3a>
				printString("\n\rUnable to turn H-bridge on, since 500V is not powered on");
 80025ec:	4806      	ldr	r0, [pc, #24]	@ (8002608 <PlasmaDoTask+0x50>)
 80025ee:	f7fe f8b9 	bl	8000764 <printString>
}
 80025f2:	bf00      	nop
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	24000a40 	.word	0x24000a40
 80025fc:	58021000 	.word	0x58021000
 8002600:	24000a3c 	.word	0x24000a3c
 8002604:	2400001c 	.word	0x2400001c
 8002608:	0801437c 	.word	0x0801437c

0800260c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002610:	f001 fe64 	bl	80042dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002614:	f000 f826 	bl	8002664 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002618:	f000 f894 	bl	8002744 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800261c:	f000 fe4c 	bl	80032b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002620:	f000 fe22 	bl	8003268 <MX_DMA_Init>
  MX_TIM1_Init();
 8002624:	f000 fc26 	bl	8002e74 <MX_TIM1_Init>
  MX_ETH_Init();
 8002628:	f000 fb3e 	bl	8002ca8 <MX_ETH_Init>
  MX_ADC2_Init();
 800262c:	f000 f958 	bl	80028e0 <MX_ADC2_Init>
  MX_USB_OTG_HS_USB_Init();
 8002630:	f000 fe12 	bl	8003258 <MX_USB_OTG_HS_USB_Init>
  MX_ADC3_Init();
 8002634:	f000 f9f8 	bl	8002a28 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 8002638:	f000 fbd0 	bl	8002ddc <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800263c:	f000 f8b2 	bl	80027a4 <MX_ADC1_Init>
  MX_COMP2_Init();
 8002640:	f000 fb04 	bl	8002c4c <MX_COMP2_Init>
  MX_TIM2_Init();
 8002644:	f000 fca8 	bl	8002f98 <MX_TIM2_Init>
  MX_LPUART1_UART_Init();
 8002648:	f000 fb7a 	bl	8002d40 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 800264c:	f000 fcfe 	bl	800304c <MX_TIM3_Init>
  MX_TIM4_Init();
 8002650:	f000 fd50 	bl	80030f4 <MX_TIM4_Init>
  MX_TIM15_Init();
 8002654:	f000 fda8 	bl	80031a8 <MX_TIM15_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  PlasmaDriverInit();  			//Initialize plasma driver
 8002658:	f7ff ff52 	bl	8002500 <PlasmaDriverInit>
  while (1)
  {
	PlasmaDoTask();     	    //Handle plasma driver task
 800265c:	f7ff ffac 	bl	80025b8 <PlasmaDoTask>
 8002660:	e7fc      	b.n	800265c <main+0x50>
	...

08002664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b09c      	sub	sp, #112	@ 0x70
 8002668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800266a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800266e:	224c      	movs	r2, #76	@ 0x4c
 8002670:	2100      	movs	r1, #0
 8002672:	4618      	mov	r0, r3
 8002674:	f00f f99d 	bl	80119b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002678:	1d3b      	adds	r3, r7, #4
 800267a:	2220      	movs	r2, #32
 800267c:	2100      	movs	r1, #0
 800267e:	4618      	mov	r0, r3
 8002680:	f00f f997 	bl	80119b2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002684:	2002      	movs	r0, #2
 8002686:	f008 f925 	bl	800a8d4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800268a:	2300      	movs	r3, #0
 800268c:	603b      	str	r3, [r7, #0]
 800268e:	4b2c      	ldr	r3, [pc, #176]	@ (8002740 <SystemClock_Config+0xdc>)
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	4a2b      	ldr	r2, [pc, #172]	@ (8002740 <SystemClock_Config+0xdc>)
 8002694:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002698:	6193      	str	r3, [r2, #24]
 800269a:	4b29      	ldr	r3, [pc, #164]	@ (8002740 <SystemClock_Config+0xdc>)
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80026a2:	603b      	str	r3, [r7, #0]
 80026a4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80026a6:	bf00      	nop
 80026a8:	4b25      	ldr	r3, [pc, #148]	@ (8002740 <SystemClock_Config+0xdc>)
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026b4:	d1f8      	bne.n	80026a8 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80026b6:	2321      	movs	r3, #33	@ 0x21
 80026b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80026ba:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80026be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80026c0:	2301      	movs	r3, #1
 80026c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026c4:	2302      	movs	r3, #2
 80026c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026c8:	2302      	movs	r3, #2
 80026ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80026cc:	2304      	movs	r3, #4
 80026ce:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80026d0:	f240 1313 	movw	r3, #275	@ 0x113
 80026d4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80026d6:	2301      	movs	r3, #1
 80026d8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80026da:	2304      	movs	r3, #4
 80026dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80026de:	2302      	movs	r3, #2
 80026e0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80026e2:	2304      	movs	r3, #4
 80026e4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80026e6:	2300      	movs	r3, #0
 80026e8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80026ea:	2300      	movs	r3, #0
 80026ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026f2:	4618      	mov	r0, r3
 80026f4:	f008 f928 	bl	800a948 <HAL_RCC_OscConfig>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80026fe:	f000 ff4b 	bl	8003598 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002702:	233f      	movs	r3, #63	@ 0x3f
 8002704:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002706:	2303      	movs	r3, #3
 8002708:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800270e:	2308      	movs	r3, #8
 8002710:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002712:	2340      	movs	r3, #64	@ 0x40
 8002714:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002716:	2340      	movs	r3, #64	@ 0x40
 8002718:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 800271a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800271e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002720:	2340      	movs	r3, #64	@ 0x40
 8002722:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002724:	1d3b      	adds	r3, r7, #4
 8002726:	2103      	movs	r1, #3
 8002728:	4618      	mov	r0, r3
 800272a:	f008 fce7 	bl	800b0fc <HAL_RCC_ClockConfig>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002734:	f000 ff30 	bl	8003598 <Error_Handler>
  }
}
 8002738:	bf00      	nop
 800273a:	3770      	adds	r7, #112	@ 0x70
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	58024800 	.word	0x58024800

08002744 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b0ae      	sub	sp, #184	@ 0xb8
 8002748:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800274a:	463b      	mov	r3, r7
 800274c:	22b8      	movs	r2, #184	@ 0xb8
 800274e:	2100      	movs	r1, #0
 8002750:	4618      	mov	r0, r3
 8002752:	f00f f92e 	bl	80119b2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002756:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800275a:	f04f 0300 	mov.w	r3, #0
 800275e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8002762:	2301      	movs	r3, #1
 8002764:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 8002766:	2318      	movs	r3, #24
 8002768:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800276a:	2302      	movs	r3, #2
 800276c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800276e:	2302      	movs	r3, #2
 8002770:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002772:	2302      	movs	r3, #2
 8002774:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8002776:	23c0      	movs	r3, #192	@ 0xc0
 8002778:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800277a:	2300      	movs	r3, #0
 800277c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800277e:	2300      	movs	r3, #0
 8002780:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002782:	2300      	movs	r3, #0
 8002784:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002788:	463b      	mov	r3, r7
 800278a:	4618      	mov	r0, r3
 800278c:	f009 f842 	bl	800b814 <HAL_RCCEx_PeriphCLKConfig>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8002796:	f000 feff 	bl	8003598 <Error_Handler>
  }
}
 800279a:	bf00      	nop
 800279c:	37b8      	adds	r7, #184	@ 0xb8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
	...

080027a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08c      	sub	sp, #48	@ 0x30
 80027a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80027aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	605a      	str	r2, [r3, #4]
 80027b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80027b6:	463b      	mov	r3, r7
 80027b8:	2224      	movs	r2, #36	@ 0x24
 80027ba:	2100      	movs	r1, #0
 80027bc:	4618      	mov	r0, r3
 80027be:	f00f f8f8 	bl	80119b2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80027c2:	4b42      	ldr	r3, [pc, #264]	@ (80028cc <MX_ADC1_Init+0x128>)
 80027c4:	4a42      	ldr	r2, [pc, #264]	@ (80028d0 <MX_ADC1_Init+0x12c>)
 80027c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80027c8:	4b40      	ldr	r3, [pc, #256]	@ (80028cc <MX_ADC1_Init+0x128>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80027ce:	4b3f      	ldr	r3, [pc, #252]	@ (80028cc <MX_ADC1_Init+0x128>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80027d4:	4b3d      	ldr	r3, [pc, #244]	@ (80028cc <MX_ADC1_Init+0x128>)
 80027d6:	2201      	movs	r2, #1
 80027d8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80027da:	4b3c      	ldr	r3, [pc, #240]	@ (80028cc <MX_ADC1_Init+0x128>)
 80027dc:	2208      	movs	r2, #8
 80027de:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80027e0:	4b3a      	ldr	r3, [pc, #232]	@ (80028cc <MX_ADC1_Init+0x128>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80027e6:	4b39      	ldr	r3, [pc, #228]	@ (80028cc <MX_ADC1_Init+0x128>)
 80027e8:	2201      	movs	r2, #1
 80027ea:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 80027ec:	4b37      	ldr	r3, [pc, #220]	@ (80028cc <MX_ADC1_Init+0x128>)
 80027ee:	2203      	movs	r2, #3
 80027f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80027f2:	4b36      	ldr	r3, [pc, #216]	@ (80028cc <MX_ADC1_Init+0x128>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 80027fa:	4b34      	ldr	r3, [pc, #208]	@ (80028cc <MX_ADC1_Init+0x128>)
 80027fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002800:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002802:	4b32      	ldr	r3, [pc, #200]	@ (80028cc <MX_ADC1_Init+0x128>)
 8002804:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002808:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 800280a:	4b30      	ldr	r3, [pc, #192]	@ (80028cc <MX_ADC1_Init+0x128>)
 800280c:	2201      	movs	r2, #1
 800280e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002810:	4b2e      	ldr	r3, [pc, #184]	@ (80028cc <MX_ADC1_Init+0x128>)
 8002812:	2200      	movs	r2, #0
 8002814:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002816:	4b2d      	ldr	r3, [pc, #180]	@ (80028cc <MX_ADC1_Init+0x128>)
 8002818:	2200      	movs	r2, #0
 800281a:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800281c:	4b2b      	ldr	r3, [pc, #172]	@ (80028cc <MX_ADC1_Init+0x128>)
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002824:	4829      	ldr	r0, [pc, #164]	@ (80028cc <MX_ADC1_Init+0x128>)
 8002826:	f002 fa61 	bl	8004cec <HAL_ADC_Init>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002830:	f000 feb2 	bl	8003598 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8002834:	2306      	movs	r3, #6
 8002836:	627b      	str	r3, [r7, #36]	@ 0x24
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 8002838:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800283c:	62bb      	str	r3, [r7, #40]	@ 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 800283e:	2300      	movs	r3, #0
 8002840:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002842:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002846:	4619      	mov	r1, r3
 8002848:	4820      	ldr	r0, [pc, #128]	@ (80028cc <MX_ADC1_Init+0x128>)
 800284a:	f004 fc5d 	bl	8007108 <HAL_ADCEx_MultiModeConfigChannel>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8002854:	f000 fea0 	bl	8003598 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002858:	4b1e      	ldr	r3, [pc, #120]	@ (80028d4 <MX_ADC1_Init+0x130>)
 800285a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800285c:	2306      	movs	r3, #6
 800285e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8002860:	2302      	movs	r3, #2
 8002862:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002864:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002868:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800286a:	2304      	movs	r3, #4
 800286c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8002872:	2300      	movs	r3, #0
 8002874:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002878:	463b      	mov	r3, r7
 800287a:	4619      	mov	r1, r3
 800287c:	4813      	ldr	r0, [pc, #76]	@ (80028cc <MX_ADC1_Init+0x128>)
 800287e:	f002 ff67 	bl	8005750 <HAL_ADC_ConfigChannel>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8002888:	f000 fe86 	bl	8003598 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 800288c:	4b12      	ldr	r3, [pc, #72]	@ (80028d8 <MX_ADC1_Init+0x134>)
 800288e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002890:	230c      	movs	r3, #12
 8002892:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002894:	463b      	mov	r3, r7
 8002896:	4619      	mov	r1, r3
 8002898:	480c      	ldr	r0, [pc, #48]	@ (80028cc <MX_ADC1_Init+0x128>)
 800289a:	f002 ff59 	bl	8005750 <HAL_ADC_ConfigChannel>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 80028a4:	f000 fe78 	bl	8003598 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80028a8:	4b0c      	ldr	r3, [pc, #48]	@ (80028dc <MX_ADC1_Init+0x138>)
 80028aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80028ac:	2312      	movs	r3, #18
 80028ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028b0:	463b      	mov	r3, r7
 80028b2:	4619      	mov	r1, r3
 80028b4:	4805      	ldr	r0, [pc, #20]	@ (80028cc <MX_ADC1_Init+0x128>)
 80028b6:	f002 ff4b 	bl	8005750 <HAL_ADC_ConfigChannel>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 80028c0:	f000 fe6a 	bl	8003598 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80028c4:	bf00      	nop
 80028c6:	3730      	adds	r7, #48	@ 0x30
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	24000a80 	.word	0x24000a80
 80028d0:	40022000 	.word	0x40022000
 80028d4:	3ef08000 	.word	0x3ef08000
 80028d8:	4b840000 	.word	0x4b840000
 80028dc:	43210000 	.word	0x43210000

080028e0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b090      	sub	sp, #64	@ 0x40
 80028e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80028e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	605a      	str	r2, [r3, #4]
 80028f0:	609a      	str	r2, [r3, #8]
 80028f2:	60da      	str	r2, [r3, #12]
 80028f4:	611a      	str	r2, [r3, #16]
 80028f6:	615a      	str	r2, [r3, #20]
 80028f8:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 80028fa:	463b      	mov	r3, r7
 80028fc:	2224      	movs	r2, #36	@ 0x24
 80028fe:	2100      	movs	r1, #0
 8002900:	4618      	mov	r0, r3
 8002902:	f00f f856 	bl	80119b2 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002906:	4b42      	ldr	r3, [pc, #264]	@ (8002a10 <MX_ADC2_Init+0x130>)
 8002908:	4a42      	ldr	r2, [pc, #264]	@ (8002a14 <MX_ADC2_Init+0x134>)
 800290a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800290c:	4b40      	ldr	r3, [pc, #256]	@ (8002a10 <MX_ADC2_Init+0x130>)
 800290e:	2200      	movs	r2, #0
 8002910:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8002912:	4b3f      	ldr	r3, [pc, #252]	@ (8002a10 <MX_ADC2_Init+0x130>)
 8002914:	2200      	movs	r2, #0
 8002916:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002918:	4b3d      	ldr	r3, [pc, #244]	@ (8002a10 <MX_ADC2_Init+0x130>)
 800291a:	2201      	movs	r2, #1
 800291c:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800291e:	4b3c      	ldr	r3, [pc, #240]	@ (8002a10 <MX_ADC2_Init+0x130>)
 8002920:	2208      	movs	r2, #8
 8002922:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002924:	4b3a      	ldr	r3, [pc, #232]	@ (8002a10 <MX_ADC2_Init+0x130>)
 8002926:	2200      	movs	r2, #0
 8002928:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800292a:	4b39      	ldr	r3, [pc, #228]	@ (8002a10 <MX_ADC2_Init+0x130>)
 800292c:	2201      	movs	r2, #1
 800292e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 3;
 8002930:	4b37      	ldr	r3, [pc, #220]	@ (8002a10 <MX_ADC2_Init+0x130>)
 8002932:	2203      	movs	r2, #3
 8002934:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002936:	4b36      	ldr	r3, [pc, #216]	@ (8002a10 <MX_ADC2_Init+0x130>)
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800293e:	4b34      	ldr	r3, [pc, #208]	@ (8002a10 <MX_ADC2_Init+0x130>)
 8002940:	2200      	movs	r2, #0
 8002942:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002944:	4b32      	ldr	r3, [pc, #200]	@ (8002a10 <MX_ADC2_Init+0x130>)
 8002946:	2200      	movs	r2, #0
 8002948:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800294a:	4b31      	ldr	r3, [pc, #196]	@ (8002a10 <MX_ADC2_Init+0x130>)
 800294c:	2200      	movs	r2, #0
 800294e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8002950:	4b2f      	ldr	r3, [pc, #188]	@ (8002a10 <MX_ADC2_Init+0x130>)
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002958:	482d      	ldr	r0, [pc, #180]	@ (8002a10 <MX_ADC2_Init+0x130>)
 800295a:	f002 f9c7 	bl	8004cec <HAL_ADC_Init>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8002964:	f000 fe18 	bl	8003598 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8002968:	4b2b      	ldr	r3, [pc, #172]	@ (8002a18 <MX_ADC2_Init+0x138>)
 800296a:	627b      	str	r3, [r7, #36]	@ 0x24
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 800296c:	f44f 0340 	mov.w	r3, #12582912	@ 0xc00000
 8002970:	62bb      	str	r3, [r7, #40]	@ 0x28
  AnalogWDGConfig.Channel = ADC_CHANNEL_3;
 8002972:	4b2a      	ldr	r3, [pc, #168]	@ (8002a1c <MX_ADC2_Init+0x13c>)
 8002974:	62fb      	str	r3, [r7, #44]	@ 0x2c
  AnalogWDGConfig.ITMode = DISABLE;
 8002976:	2300      	movs	r3, #0
 8002978:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  AnalogWDGConfig.HighThreshold = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	637b      	str	r3, [r7, #52]	@ 0x34
  AnalogWDGConfig.LowThreshold = 0;
 8002980:	2300      	movs	r3, #0
 8002982:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 8002984:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002988:	4619      	mov	r1, r3
 800298a:	4821      	ldr	r0, [pc, #132]	@ (8002a10 <MX_ADC2_Init+0x130>)
 800298c:	f003 fc0c 	bl	80061a8 <HAL_ADC_AnalogWDGConfig>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8002996:	f000 fdff 	bl	8003598 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800299a:	4b20      	ldr	r3, [pc, #128]	@ (8002a1c <MX_ADC2_Init+0x13c>)
 800299c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800299e:	2306      	movs	r3, #6
 80029a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 80029a2:	2302      	movs	r3, #2
 80029a4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80029a6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80029aa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80029ac:	2304      	movs	r3, #4
 80029ae:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80029b4:	2300      	movs	r3, #0
 80029b6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80029ba:	463b      	mov	r3, r7
 80029bc:	4619      	mov	r1, r3
 80029be:	4814      	ldr	r0, [pc, #80]	@ (8002a10 <MX_ADC2_Init+0x130>)
 80029c0:	f002 fec6 	bl	8005750 <HAL_ADC_ConfigChannel>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 80029ca:	f000 fde5 	bl	8003598 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 80029ce:	4b14      	ldr	r3, [pc, #80]	@ (8002a20 <MX_ADC2_Init+0x140>)
 80029d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80029d2:	230c      	movs	r3, #12
 80029d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80029d6:	463b      	mov	r3, r7
 80029d8:	4619      	mov	r1, r3
 80029da:	480d      	ldr	r0, [pc, #52]	@ (8002a10 <MX_ADC2_Init+0x130>)
 80029dc:	f002 feb8 	bl	8005750 <HAL_ADC_ConfigChannel>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <MX_ADC2_Init+0x10a>
  {
    Error_Handler();
 80029e6:	f000 fdd7 	bl	8003598 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80029ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002a24 <MX_ADC2_Init+0x144>)
 80029ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80029ee:	2312      	movs	r3, #18
 80029f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80029f2:	463b      	mov	r3, r7
 80029f4:	4619      	mov	r1, r3
 80029f6:	4806      	ldr	r0, [pc, #24]	@ (8002a10 <MX_ADC2_Init+0x130>)
 80029f8:	f002 feaa 	bl	8005750 <HAL_ADC_ConfigChannel>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <MX_ADC2_Init+0x126>
  {
    Error_Handler();
 8002a02:	f000 fdc9 	bl	8003598 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002a06:	bf00      	nop
 8002a08:	3740      	adds	r7, #64	@ 0x40
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	24000af0 	.word	0x24000af0
 8002a14:	40022100 	.word	0x40022100
 8002a18:	7dc00000 	.word	0x7dc00000
 8002a1c:	0c900008 	.word	0x0c900008
 8002a20:	4fb80000 	.word	0x4fb80000
 8002a24:	14f00020 	.word	0x14f00020

08002a28 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b08a      	sub	sp, #40	@ 0x28
 8002a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002a2e:	1d3b      	adds	r3, r7, #4
 8002a30:	2224      	movs	r2, #36	@ 0x24
 8002a32:	2100      	movs	r1, #0
 8002a34:	4618      	mov	r0, r3
 8002a36:	f00e ffbc 	bl	80119b2 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8002a3a:	4b78      	ldr	r3, [pc, #480]	@ (8002c1c <MX_ADC3_Init+0x1f4>)
 8002a3c:	4a78      	ldr	r2, [pc, #480]	@ (8002c20 <MX_ADC3_Init+0x1f8>)
 8002a3e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002a40:	4b76      	ldr	r3, [pc, #472]	@ (8002c1c <MX_ADC3_Init+0x1f4>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002a46:	4b75      	ldr	r3, [pc, #468]	@ (8002c1c <MX_ADC3_Init+0x1f4>)
 8002a48:	2208      	movs	r2, #8
 8002a4a:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8002a4c:	4b73      	ldr	r3, [pc, #460]	@ (8002c1c <MX_ADC3_Init+0x1f4>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002a52:	4b72      	ldr	r3, [pc, #456]	@ (8002c1c <MX_ADC3_Init+0x1f4>)
 8002a54:	2201      	movs	r2, #1
 8002a56:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002a58:	4b70      	ldr	r3, [pc, #448]	@ (8002c1c <MX_ADC3_Init+0x1f4>)
 8002a5a:	2208      	movs	r2, #8
 8002a5c:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002a5e:	4b6f      	ldr	r3, [pc, #444]	@ (8002c1c <MX_ADC3_Init+0x1f4>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002a64:	4b6d      	ldr	r3, [pc, #436]	@ (8002c1c <MX_ADC3_Init+0x1f4>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 11;
 8002a6a:	4b6c      	ldr	r3, [pc, #432]	@ (8002c1c <MX_ADC3_Init+0x1f4>)
 8002a6c:	220b      	movs	r2, #11
 8002a6e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002a70:	4b6a      	ldr	r3, [pc, #424]	@ (8002c1c <MX_ADC3_Init+0x1f4>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a78:	4b68      	ldr	r3, [pc, #416]	@ (8002c1c <MX_ADC3_Init+0x1f4>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a7e:	4b67      	ldr	r3, [pc, #412]	@ (8002c1c <MX_ADC3_Init+0x1f4>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8002a84:	4b65      	ldr	r3, [pc, #404]	@ (8002c1c <MX_ADC3_Init+0x1f4>)
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8002a8c:	4b63      	ldr	r3, [pc, #396]	@ (8002c1c <MX_ADC3_Init+0x1f4>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 8002a92:	4b62      	ldr	r3, [pc, #392]	@ (8002c1c <MX_ADC3_Init+0x1f4>)
 8002a94:	2201      	movs	r2, #1
 8002a96:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002a98:	4b60      	ldr	r3, [pc, #384]	@ (8002c1c <MX_ADC3_Init+0x1f4>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002a9e:	4b5f      	ldr	r3, [pc, #380]	@ (8002c1c <MX_ADC3_Init+0x1f4>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8002aa4:	4b5d      	ldr	r3, [pc, #372]	@ (8002c1c <MX_ADC3_Init+0x1f4>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002aac:	485b      	ldr	r0, [pc, #364]	@ (8002c1c <MX_ADC3_Init+0x1f4>)
 8002aae:	f002 f91d 	bl	8004cec <HAL_ADC_Init>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8002ab8:	f000 fd6e 	bl	8003598 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002abc:	2301      	movs	r3, #1
 8002abe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002ac0:	2306      	movs	r3, #6
 8002ac2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_6CYCLES_5;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002ac8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002acc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002ace:	2304      	movs	r3, #4
 8002ad0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002ada:	1d3b      	adds	r3, r7, #4
 8002adc:	4619      	mov	r1, r3
 8002ade:	484f      	ldr	r0, [pc, #316]	@ (8002c1c <MX_ADC3_Init+0x1f4>)
 8002ae0:	f002 fe36 	bl	8005750 <HAL_ADC_ConfigChannel>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <MX_ADC3_Init+0xc6>
  {
    Error_Handler();
 8002aea:	f000 fd55 	bl	8003598 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002aee:	4b4d      	ldr	r3, [pc, #308]	@ (8002c24 <MX_ADC3_Init+0x1fc>)
 8002af0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002af2:	230c      	movs	r3, #12
 8002af4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002af6:	1d3b      	adds	r3, r7, #4
 8002af8:	4619      	mov	r1, r3
 8002afa:	4848      	ldr	r0, [pc, #288]	@ (8002c1c <MX_ADC3_Init+0x1f4>)
 8002afc:	f002 fe28 	bl	8005750 <HAL_ADC_ConfigChannel>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <MX_ADC3_Init+0xe2>
  {
    Error_Handler();
 8002b06:	f000 fd47 	bl	8003598 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002b0a:	4b47      	ldr	r3, [pc, #284]	@ (8002c28 <MX_ADC3_Init+0x200>)
 8002b0c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002b0e:	2312      	movs	r3, #18
 8002b10:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002b12:	1d3b      	adds	r3, r7, #4
 8002b14:	4619      	mov	r1, r3
 8002b16:	4841      	ldr	r0, [pc, #260]	@ (8002c1c <MX_ADC3_Init+0x1f4>)
 8002b18:	f002 fe1a 	bl	8005750 <HAL_ADC_ConfigChannel>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <MX_ADC3_Init+0xfe>
  {
    Error_Handler();
 8002b22:	f000 fd39 	bl	8003598 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002b26:	4b41      	ldr	r3, [pc, #260]	@ (8002c2c <MX_ADC3_Init+0x204>)
 8002b28:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002b2a:	2318      	movs	r3, #24
 8002b2c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002b2e:	1d3b      	adds	r3, r7, #4
 8002b30:	4619      	mov	r1, r3
 8002b32:	483a      	ldr	r0, [pc, #232]	@ (8002c1c <MX_ADC3_Init+0x1f4>)
 8002b34:	f002 fe0c 	bl	8005750 <HAL_ADC_ConfigChannel>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <MX_ADC3_Init+0x11a>
  {
    Error_Handler();
 8002b3e:	f000 fd2b 	bl	8003598 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002b42:	4b3b      	ldr	r3, [pc, #236]	@ (8002c30 <MX_ADC3_Init+0x208>)
 8002b44:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002b46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b4a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002b4c:	1d3b      	adds	r3, r7, #4
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4832      	ldr	r0, [pc, #200]	@ (8002c1c <MX_ADC3_Init+0x1f4>)
 8002b52:	f002 fdfd 	bl	8005750 <HAL_ADC_ConfigChannel>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <MX_ADC3_Init+0x138>
  {
    Error_Handler();
 8002b5c:	f000 fd1c 	bl	8003598 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002b60:	4b34      	ldr	r3, [pc, #208]	@ (8002c34 <MX_ADC3_Init+0x20c>)
 8002b62:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002b64:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8002b68:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002b6a:	1d3b      	adds	r3, r7, #4
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	482b      	ldr	r0, [pc, #172]	@ (8002c1c <MX_ADC3_Init+0x1f4>)
 8002b70:	f002 fdee 	bl	8005750 <HAL_ADC_ConfigChannel>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <MX_ADC3_Init+0x156>
  {
    Error_Handler();
 8002b7a:	f000 fd0d 	bl	8003598 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002b7e:	4b2e      	ldr	r3, [pc, #184]	@ (8002c38 <MX_ADC3_Init+0x210>)
 8002b80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8002b82:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8002b86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002b88:	1d3b      	adds	r3, r7, #4
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4823      	ldr	r0, [pc, #140]	@ (8002c1c <MX_ADC3_Init+0x1f4>)
 8002b8e:	f002 fddf 	bl	8005750 <HAL_ADC_ConfigChannel>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <MX_ADC3_Init+0x174>
  {
    Error_Handler();
 8002b98:	f000 fcfe 	bl	8003598 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002b9c:	4b27      	ldr	r3, [pc, #156]	@ (8002c3c <MX_ADC3_Init+0x214>)
 8002b9e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8002ba0:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8002ba4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002ba6:	1d3b      	adds	r3, r7, #4
 8002ba8:	4619      	mov	r1, r3
 8002baa:	481c      	ldr	r0, [pc, #112]	@ (8002c1c <MX_ADC3_Init+0x1f4>)
 8002bac:	f002 fdd0 	bl	8005750 <HAL_ADC_ConfigChannel>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <MX_ADC3_Init+0x192>
  {
    Error_Handler();
 8002bb6:	f000 fcef 	bl	8003598 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002bba:	4b21      	ldr	r3, [pc, #132]	@ (8002c40 <MX_ADC3_Init+0x218>)
 8002bbc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8002bbe:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8002bc2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002bc4:	1d3b      	adds	r3, r7, #4
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4814      	ldr	r0, [pc, #80]	@ (8002c1c <MX_ADC3_Init+0x1f4>)
 8002bca:	f002 fdc1 	bl	8005750 <HAL_ADC_ConfigChannel>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <MX_ADC3_Init+0x1b0>
  {
    Error_Handler();
 8002bd4:	f000 fce0 	bl	8003598 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8002c44 <MX_ADC3_Init+0x21c>)
 8002bda:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8002bdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002be0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002be2:	1d3b      	adds	r3, r7, #4
 8002be4:	4619      	mov	r1, r3
 8002be6:	480d      	ldr	r0, [pc, #52]	@ (8002c1c <MX_ADC3_Init+0x1f4>)
 8002be8:	f002 fdb2 	bl	8005750 <HAL_ADC_ConfigChannel>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <MX_ADC3_Init+0x1ce>
  {
    Error_Handler();
 8002bf2:	f000 fcd1 	bl	8003598 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002bf6:	4b14      	ldr	r3, [pc, #80]	@ (8002c48 <MX_ADC3_Init+0x220>)
 8002bf8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8002bfa:	f240 2306 	movw	r3, #518	@ 0x206
 8002bfe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002c00:	1d3b      	adds	r3, r7, #4
 8002c02:	4619      	mov	r1, r3
 8002c04:	4805      	ldr	r0, [pc, #20]	@ (8002c1c <MX_ADC3_Init+0x1f4>)
 8002c06:	f002 fda3 	bl	8005750 <HAL_ADC_ConfigChannel>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <MX_ADC3_Init+0x1ec>
  {
    Error_Handler();
 8002c10:	f000 fcc2 	bl	8003598 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002c14:	bf00      	nop
 8002c16:	3728      	adds	r7, #40	@ 0x28
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	24000b60 	.word	0x24000b60
 8002c20:	58026000 	.word	0x58026000
 8002c24:	04300002 	.word	0x04300002
 8002c28:	08600004 	.word	0x08600004
 8002c2c:	0c900008 	.word	0x0c900008
 8002c30:	10c00010 	.word	0x10c00010
 8002c34:	14f00020 	.word	0x14f00020
 8002c38:	19200040 	.word	0x19200040
 8002c3c:	1d500080 	.word	0x1d500080
 8002c40:	21800100 	.word	0x21800100
 8002c44:	25b00200 	.word	0x25b00200
 8002c48:	2a000400 	.word	0x2a000400

08002c4c <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8002c50:	4b13      	ldr	r3, [pc, #76]	@ (8002ca0 <MX_COMP2_Init+0x54>)
 8002c52:	4a14      	ldr	r2, [pc, #80]	@ (8002ca4 <MX_COMP2_Init+0x58>)
 8002c54:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 8002c56:	4b12      	ldr	r3, [pc, #72]	@ (8002ca0 <MX_COMP2_Init+0x54>)
 8002c58:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8002c5c:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8002c5e:	4b10      	ldr	r3, [pc, #64]	@ (8002ca0 <MX_COMP2_Init+0x54>)
 8002c60:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002c64:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8002c66:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca0 <MX_COMP2_Init+0x54>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca0 <MX_COMP2_Init+0x54>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8002c72:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca0 <MX_COMP2_Init+0x54>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8002c78:	4b09      	ldr	r3, [pc, #36]	@ (8002ca0 <MX_COMP2_Init+0x54>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8002c7e:	4b08      	ldr	r3, [pc, #32]	@ (8002ca0 <MX_COMP2_Init+0x54>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8002c84:	4b06      	ldr	r3, [pc, #24]	@ (8002ca0 <MX_COMP2_Init+0x54>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8002c8a:	4805      	ldr	r0, [pc, #20]	@ (8002ca0 <MX_COMP2_Init+0x54>)
 8002c8c:	f004 fb1e 	bl	80072cc <HAL_COMP_Init>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MX_COMP2_Init+0x4e>
  {
    Error_Handler();
 8002c96:	f000 fc7f 	bl	8003598 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	24000cc0 	.word	0x24000cc0
 8002ca4:	58003810 	.word	0x58003810

08002ca8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002cac:	4b1e      	ldr	r3, [pc, #120]	@ (8002d28 <MX_ETH_Init+0x80>)
 8002cae:	4a1f      	ldr	r2, [pc, #124]	@ (8002d2c <MX_ETH_Init+0x84>)
 8002cb0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8002cb2:	4b1f      	ldr	r3, [pc, #124]	@ (8002d30 <MX_ETH_Init+0x88>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8002cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d30 <MX_ETH_Init+0x88>)
 8002cba:	2280      	movs	r2, #128	@ 0x80
 8002cbc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8002cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8002d30 <MX_ETH_Init+0x88>)
 8002cc0:	22e1      	movs	r2, #225	@ 0xe1
 8002cc2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d30 <MX_ETH_Init+0x88>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8002cca:	4b19      	ldr	r3, [pc, #100]	@ (8002d30 <MX_ETH_Init+0x88>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8002cd0:	4b17      	ldr	r3, [pc, #92]	@ (8002d30 <MX_ETH_Init+0x88>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8002cd6:	4b14      	ldr	r3, [pc, #80]	@ (8002d28 <MX_ETH_Init+0x80>)
 8002cd8:	4a15      	ldr	r2, [pc, #84]	@ (8002d30 <MX_ETH_Init+0x88>)
 8002cda:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002cdc:	4b12      	ldr	r3, [pc, #72]	@ (8002d28 <MX_ETH_Init+0x80>)
 8002cde:	2201      	movs	r2, #1
 8002ce0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002ce2:	4b11      	ldr	r3, [pc, #68]	@ (8002d28 <MX_ETH_Init+0x80>)
 8002ce4:	4a13      	ldr	r2, [pc, #76]	@ (8002d34 <MX_ETH_Init+0x8c>)
 8002ce6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8002ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8002d28 <MX_ETH_Init+0x80>)
 8002cea:	4a13      	ldr	r2, [pc, #76]	@ (8002d38 <MX_ETH_Init+0x90>)
 8002cec:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8002cee:	4b0e      	ldr	r3, [pc, #56]	@ (8002d28 <MX_ETH_Init+0x80>)
 8002cf0:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8002cf4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002cf6:	480c      	ldr	r0, [pc, #48]	@ (8002d28 <MX_ETH_Init+0x80>)
 8002cf8:	f006 fdf6 	bl	80098e8 <HAL_ETH_Init>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8002d02:	f000 fc49 	bl	8003598 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002d06:	2238      	movs	r2, #56	@ 0x38
 8002d08:	2100      	movs	r1, #0
 8002d0a:	480c      	ldr	r0, [pc, #48]	@ (8002d3c <MX_ETH_Init+0x94>)
 8002d0c:	f00e fe51 	bl	80119b2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002d10:	4b0a      	ldr	r3, [pc, #40]	@ (8002d3c <MX_ETH_Init+0x94>)
 8002d12:	2221      	movs	r2, #33	@ 0x21
 8002d14:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002d16:	4b09      	ldr	r3, [pc, #36]	@ (8002d3c <MX_ETH_Init+0x94>)
 8002d18:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002d1c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002d1e:	4b07      	ldr	r3, [pc, #28]	@ (8002d3c <MX_ETH_Init+0x94>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8002d24:	bf00      	nop
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	24000cec 	.word	0x24000cec
 8002d2c:	40028000 	.word	0x40028000
 8002d30:	24001040 	.word	0x24001040
 8002d34:	24000270 	.word	0x24000270
 8002d38:	24000210 	.word	0x24000210
 8002d3c:	24000a48 	.word	0x24000a48

08002d40 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002d44:	4b22      	ldr	r3, [pc, #136]	@ (8002dd0 <MX_LPUART1_UART_Init+0x90>)
 8002d46:	4a23      	ldr	r2, [pc, #140]	@ (8002dd4 <MX_LPUART1_UART_Init+0x94>)
 8002d48:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8002d4a:	4b21      	ldr	r3, [pc, #132]	@ (8002dd0 <MX_LPUART1_UART_Init+0x90>)
 8002d4c:	4a22      	ldr	r2, [pc, #136]	@ (8002dd8 <MX_LPUART1_UART_Init+0x98>)
 8002d4e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d50:	4b1f      	ldr	r3, [pc, #124]	@ (8002dd0 <MX_LPUART1_UART_Init+0x90>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002d56:	4b1e      	ldr	r3, [pc, #120]	@ (8002dd0 <MX_LPUART1_UART_Init+0x90>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002d5c:	4b1c      	ldr	r3, [pc, #112]	@ (8002dd0 <MX_LPUART1_UART_Init+0x90>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002d62:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd0 <MX_LPUART1_UART_Init+0x90>)
 8002d64:	220c      	movs	r2, #12
 8002d66:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d68:	4b19      	ldr	r3, [pc, #100]	@ (8002dd0 <MX_LPUART1_UART_Init+0x90>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d6e:	4b18      	ldr	r3, [pc, #96]	@ (8002dd0 <MX_LPUART1_UART_Init+0x90>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d74:	4b16      	ldr	r3, [pc, #88]	@ (8002dd0 <MX_LPUART1_UART_Init+0x90>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d7a:	4b15      	ldr	r3, [pc, #84]	@ (8002dd0 <MX_LPUART1_UART_Init+0x90>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002d80:	4b13      	ldr	r3, [pc, #76]	@ (8002dd0 <MX_LPUART1_UART_Init+0x90>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002d86:	4812      	ldr	r0, [pc, #72]	@ (8002dd0 <MX_LPUART1_UART_Init+0x90>)
 8002d88:	f00c fca3 	bl	800f6d2 <HAL_UART_Init>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8002d92:	f000 fc01 	bl	8003598 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d96:	2100      	movs	r1, #0
 8002d98:	480d      	ldr	r0, [pc, #52]	@ (8002dd0 <MX_LPUART1_UART_Init+0x90>)
 8002d9a:	f00d ff00 	bl	8010b9e <HAL_UARTEx_SetTxFifoThreshold>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8002da4:	f000 fbf8 	bl	8003598 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002da8:	2100      	movs	r1, #0
 8002daa:	4809      	ldr	r0, [pc, #36]	@ (8002dd0 <MX_LPUART1_UART_Init+0x90>)
 8002dac:	f00d ff35 	bl	8010c1a <HAL_UARTEx_SetRxFifoThreshold>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8002db6:	f000 fbef 	bl	8003598 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002dba:	4805      	ldr	r0, [pc, #20]	@ (8002dd0 <MX_LPUART1_UART_Init+0x90>)
 8002dbc:	f00d feb6 	bl	8010b2c <HAL_UARTEx_DisableFifoMode>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8002dc6:	f000 fbe7 	bl	8003598 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002dca:	bf00      	nop
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	24000d9c 	.word	0x24000d9c
 8002dd4:	58000c00 	.word	0x58000c00
 8002dd8:	00033324 	.word	0x00033324

08002ddc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002de0:	4b22      	ldr	r3, [pc, #136]	@ (8002e6c <MX_USART3_UART_Init+0x90>)
 8002de2:	4a23      	ldr	r2, [pc, #140]	@ (8002e70 <MX_USART3_UART_Init+0x94>)
 8002de4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002de6:	4b21      	ldr	r3, [pc, #132]	@ (8002e6c <MX_USART3_UART_Init+0x90>)
 8002de8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002dec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002dee:	4b1f      	ldr	r3, [pc, #124]	@ (8002e6c <MX_USART3_UART_Init+0x90>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002df4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e6c <MX_USART3_UART_Init+0x90>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002dfa:	4b1c      	ldr	r3, [pc, #112]	@ (8002e6c <MX_USART3_UART_Init+0x90>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e00:	4b1a      	ldr	r3, [pc, #104]	@ (8002e6c <MX_USART3_UART_Init+0x90>)
 8002e02:	220c      	movs	r2, #12
 8002e04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e06:	4b19      	ldr	r3, [pc, #100]	@ (8002e6c <MX_USART3_UART_Init+0x90>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e0c:	4b17      	ldr	r3, [pc, #92]	@ (8002e6c <MX_USART3_UART_Init+0x90>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e12:	4b16      	ldr	r3, [pc, #88]	@ (8002e6c <MX_USART3_UART_Init+0x90>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e18:	4b14      	ldr	r3, [pc, #80]	@ (8002e6c <MX_USART3_UART_Init+0x90>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e1e:	4b13      	ldr	r3, [pc, #76]	@ (8002e6c <MX_USART3_UART_Init+0x90>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e24:	4811      	ldr	r0, [pc, #68]	@ (8002e6c <MX_USART3_UART_Init+0x90>)
 8002e26:	f00c fc54 	bl	800f6d2 <HAL_UART_Init>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002e30:	f000 fbb2 	bl	8003598 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e34:	2100      	movs	r1, #0
 8002e36:	480d      	ldr	r0, [pc, #52]	@ (8002e6c <MX_USART3_UART_Init+0x90>)
 8002e38:	f00d feb1 	bl	8010b9e <HAL_UARTEx_SetTxFifoThreshold>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002e42:	f000 fba9 	bl	8003598 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e46:	2100      	movs	r1, #0
 8002e48:	4808      	ldr	r0, [pc, #32]	@ (8002e6c <MX_USART3_UART_Init+0x90>)
 8002e4a:	f00d fee6 	bl	8010c1a <HAL_UARTEx_SetRxFifoThreshold>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002e54:	f000 fba0 	bl	8003598 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002e58:	4804      	ldr	r0, [pc, #16]	@ (8002e6c <MX_USART3_UART_Init+0x90>)
 8002e5a:	f00d fe67 	bl	8010b2c <HAL_UARTEx_DisableFifoMode>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002e64:	f000 fb98 	bl	8003598 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e68:	bf00      	nop
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	24000e30 	.word	0x24000e30
 8002e70:	40004800 	.word	0x40004800

08002e74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b098      	sub	sp, #96	@ 0x60
 8002e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e7a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e7e:	2200      	movs	r2, #0
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	605a      	str	r2, [r3, #4]
 8002e84:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e86:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	605a      	str	r2, [r3, #4]
 8002e90:	609a      	str	r2, [r3, #8]
 8002e92:	60da      	str	r2, [r3, #12]
 8002e94:	611a      	str	r2, [r3, #16]
 8002e96:	615a      	str	r2, [r3, #20]
 8002e98:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002e9a:	1d3b      	adds	r3, r7, #4
 8002e9c:	2234      	movs	r2, #52	@ 0x34
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f00e fd86 	bl	80119b2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ea6:	4b3a      	ldr	r3, [pc, #232]	@ (8002f90 <MX_TIM1_Init+0x11c>)
 8002ea8:	4a3a      	ldr	r2, [pc, #232]	@ (8002f94 <MX_TIM1_Init+0x120>)
 8002eaa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002eac:	4b38      	ldr	r3, [pc, #224]	@ (8002f90 <MX_TIM1_Init+0x11c>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eb2:	4b37      	ldr	r3, [pc, #220]	@ (8002f90 <MX_TIM1_Init+0x11c>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3240;
 8002eb8:	4b35      	ldr	r3, [pc, #212]	@ (8002f90 <MX_TIM1_Init+0x11c>)
 8002eba:	f640 42a8 	movw	r2, #3240	@ 0xca8
 8002ebe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ec0:	4b33      	ldr	r3, [pc, #204]	@ (8002f90 <MX_TIM1_Init+0x11c>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ec6:	4b32      	ldr	r3, [pc, #200]	@ (8002f90 <MX_TIM1_Init+0x11c>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ecc:	4b30      	ldr	r3, [pc, #192]	@ (8002f90 <MX_TIM1_Init+0x11c>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002ed2:	482f      	ldr	r0, [pc, #188]	@ (8002f90 <MX_TIM1_Init+0x11c>)
 8002ed4:	f00b f884 	bl	800dfe0 <HAL_TIM_PWM_Init>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002ede:	f000 fb5b 	bl	8003598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eea:	2300      	movs	r3, #0
 8002eec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002eee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4826      	ldr	r0, [pc, #152]	@ (8002f90 <MX_TIM1_Init+0x11c>)
 8002ef6:	f00c fa8b 	bl	800f410 <HAL_TIMEx_MasterConfigSynchronization>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002f00:	f000 fb4a 	bl	8003598 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f04:	2360      	movs	r3, #96	@ 0x60
 8002f06:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 1620;
 8002f08:	f240 6354 	movw	r3, #1620	@ 0x654
 8002f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8002f12:	2308      	movs	r3, #8
 8002f14:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f16:	2300      	movs	r3, #0
 8002f18:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8002f1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8002f20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f24:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f26:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4818      	ldr	r0, [pc, #96]	@ (8002f90 <MX_TIM1_Init+0x11c>)
 8002f30:	f00b fb54 	bl	800e5dc <HAL_TIM_PWM_ConfigChannel>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002f3a:	f000 fb2d 	bl	8003598 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f46:	2300      	movs	r3, #0
 8002f48:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0xFF;
 8002f4a:	23ff      	movs	r3, #255	@ 0xff
 8002f4c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002f52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f56:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002f60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f64:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002f66:	2300      	movs	r3, #0
 8002f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002f6e:	1d3b      	adds	r3, r7, #4
 8002f70:	4619      	mov	r1, r3
 8002f72:	4807      	ldr	r0, [pc, #28]	@ (8002f90 <MX_TIM1_Init+0x11c>)
 8002f74:	f00c fae8 	bl	800f548 <HAL_TIMEx_ConfigBreakDeadTime>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8002f7e:	f000 fb0b 	bl	8003598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002f82:	4803      	ldr	r0, [pc, #12]	@ (8002f90 <MX_TIM1_Init+0x11c>)
 8002f84:	f000 ff56 	bl	8003e34 <HAL_TIM_MspPostInit>

}
 8002f88:	bf00      	nop
 8002f8a:	3760      	adds	r7, #96	@ 0x60
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	24000ec4 	.word	0x24000ec4
 8002f94:	40010000 	.word	0x40010000

08002f98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b08a      	sub	sp, #40	@ 0x28
 8002f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f9e:	f107 031c 	add.w	r3, r7, #28
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	605a      	str	r2, [r3, #4]
 8002fa8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002faa:	463b      	mov	r3, r7
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	609a      	str	r2, [r3, #8]
 8002fb4:	60da      	str	r2, [r3, #12]
 8002fb6:	611a      	str	r2, [r3, #16]
 8002fb8:	615a      	str	r2, [r3, #20]
 8002fba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002fbc:	4b22      	ldr	r3, [pc, #136]	@ (8003048 <MX_TIM2_Init+0xb0>)
 8002fbe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002fc2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002fc4:	4b20      	ldr	r3, [pc, #128]	@ (8003048 <MX_TIM2_Init+0xb0>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fca:	4b1f      	ldr	r3, [pc, #124]	@ (8003048 <MX_TIM2_Init+0xb0>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8003048 <MX_TIM2_Init+0xb0>)
 8002fd2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002fd6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8003048 <MX_TIM2_Init+0xb0>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fde:	4b1a      	ldr	r3, [pc, #104]	@ (8003048 <MX_TIM2_Init+0xb0>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002fe4:	4818      	ldr	r0, [pc, #96]	@ (8003048 <MX_TIM2_Init+0xb0>)
 8002fe6:	f00a fffb 	bl	800dfe0 <HAL_TIM_PWM_Init>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002ff0:	f000 fad2 	bl	8003598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ffc:	f107 031c 	add.w	r3, r7, #28
 8003000:	4619      	mov	r1, r3
 8003002:	4811      	ldr	r0, [pc, #68]	@ (8003048 <MX_TIM2_Init+0xb0>)
 8003004:	f00c fa04 	bl	800f410 <HAL_TIMEx_MasterConfigSynchronization>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800300e:	f000 fac3 	bl	8003598 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003012:	2360      	movs	r3, #96	@ 0x60
 8003014:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003016:	2300      	movs	r3, #0
 8003018:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800301a:	2300      	movs	r3, #0
 800301c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800301e:	2300      	movs	r3, #0
 8003020:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003022:	463b      	mov	r3, r7
 8003024:	2200      	movs	r2, #0
 8003026:	4619      	mov	r1, r3
 8003028:	4807      	ldr	r0, [pc, #28]	@ (8003048 <MX_TIM2_Init+0xb0>)
 800302a:	f00b fad7 	bl	800e5dc <HAL_TIM_PWM_ConfigChannel>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8003034:	f000 fab0 	bl	8003598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003038:	4803      	ldr	r0, [pc, #12]	@ (8003048 <MX_TIM2_Init+0xb0>)
 800303a:	f000 fefb 	bl	8003e34 <HAL_TIM_MspPostInit>

}
 800303e:	bf00      	nop
 8003040:	3728      	adds	r7, #40	@ 0x28
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	24000f10 	.word	0x24000f10

0800304c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b088      	sub	sp, #32
 8003050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003052:	f107 0314 	add.w	r3, r7, #20
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	605a      	str	r2, [r3, #4]
 800305c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800305e:	1d3b      	adds	r3, r7, #4
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	605a      	str	r2, [r3, #4]
 8003066:	609a      	str	r2, [r3, #8]
 8003068:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800306a:	4b20      	ldr	r3, [pc, #128]	@ (80030ec <MX_TIM3_Init+0xa0>)
 800306c:	4a20      	ldr	r2, [pc, #128]	@ (80030f0 <MX_TIM3_Init+0xa4>)
 800306e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003070:	4b1e      	ldr	r3, [pc, #120]	@ (80030ec <MX_TIM3_Init+0xa0>)
 8003072:	2200      	movs	r2, #0
 8003074:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003076:	4b1d      	ldr	r3, [pc, #116]	@ (80030ec <MX_TIM3_Init+0xa0>)
 8003078:	2200      	movs	r2, #0
 800307a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800307c:	4b1b      	ldr	r3, [pc, #108]	@ (80030ec <MX_TIM3_Init+0xa0>)
 800307e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003082:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003084:	4b19      	ldr	r3, [pc, #100]	@ (80030ec <MX_TIM3_Init+0xa0>)
 8003086:	2200      	movs	r2, #0
 8003088:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800308a:	4b18      	ldr	r3, [pc, #96]	@ (80030ec <MX_TIM3_Init+0xa0>)
 800308c:	2200      	movs	r2, #0
 800308e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003090:	4816      	ldr	r0, [pc, #88]	@ (80030ec <MX_TIM3_Init+0xa0>)
 8003092:	f00b f9af 	bl	800e3f4 <HAL_TIM_IC_Init>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800309c:	f000 fa7c 	bl	8003598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030a0:	2300      	movs	r3, #0
 80030a2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030a4:	2300      	movs	r3, #0
 80030a6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80030a8:	f107 0314 	add.w	r3, r7, #20
 80030ac:	4619      	mov	r1, r3
 80030ae:	480f      	ldr	r0, [pc, #60]	@ (80030ec <MX_TIM3_Init+0xa0>)
 80030b0:	f00c f9ae 	bl	800f410 <HAL_TIMEx_MasterConfigSynchronization>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80030ba:	f000 fa6d 	bl	8003598 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80030be:	2300      	movs	r3, #0
 80030c0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80030c2:	2301      	movs	r3, #1
 80030c4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80030c6:	2300      	movs	r3, #0
 80030c8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80030ca:	2300      	movs	r3, #0
 80030cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80030ce:	1d3b      	adds	r3, r7, #4
 80030d0:	2200      	movs	r2, #0
 80030d2:	4619      	mov	r1, r3
 80030d4:	4805      	ldr	r0, [pc, #20]	@ (80030ec <MX_TIM3_Init+0xa0>)
 80030d6:	f00b f9e4 	bl	800e4a2 <HAL_TIM_IC_ConfigChannel>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80030e0:	f000 fa5a 	bl	8003598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80030e4:	bf00      	nop
 80030e6:	3720      	adds	r7, #32
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	24000f5c 	.word	0x24000f5c
 80030f0:	40000400 	.word	0x40000400

080030f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08a      	sub	sp, #40	@ 0x28
 80030f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030fa:	f107 031c 	add.w	r3, r7, #28
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	605a      	str	r2, [r3, #4]
 8003104:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003106:	463b      	mov	r3, r7
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	605a      	str	r2, [r3, #4]
 800310e:	609a      	str	r2, [r3, #8]
 8003110:	60da      	str	r2, [r3, #12]
 8003112:	611a      	str	r2, [r3, #16]
 8003114:	615a      	str	r2, [r3, #20]
 8003116:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003118:	4b21      	ldr	r3, [pc, #132]	@ (80031a0 <MX_TIM4_Init+0xac>)
 800311a:	4a22      	ldr	r2, [pc, #136]	@ (80031a4 <MX_TIM4_Init+0xb0>)
 800311c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800311e:	4b20      	ldr	r3, [pc, #128]	@ (80031a0 <MX_TIM4_Init+0xac>)
 8003120:	2200      	movs	r2, #0
 8003122:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003124:	4b1e      	ldr	r3, [pc, #120]	@ (80031a0 <MX_TIM4_Init+0xac>)
 8003126:	2200      	movs	r2, #0
 8003128:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800312a:	4b1d      	ldr	r3, [pc, #116]	@ (80031a0 <MX_TIM4_Init+0xac>)
 800312c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003130:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003132:	4b1b      	ldr	r3, [pc, #108]	@ (80031a0 <MX_TIM4_Init+0xac>)
 8003134:	2200      	movs	r2, #0
 8003136:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003138:	4b19      	ldr	r3, [pc, #100]	@ (80031a0 <MX_TIM4_Init+0xac>)
 800313a:	2200      	movs	r2, #0
 800313c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800313e:	4818      	ldr	r0, [pc, #96]	@ (80031a0 <MX_TIM4_Init+0xac>)
 8003140:	f00a ff4e 	bl	800dfe0 <HAL_TIM_PWM_Init>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800314a:	f000 fa25 	bl	8003598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800314e:	2300      	movs	r3, #0
 8003150:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003152:	2300      	movs	r3, #0
 8003154:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003156:	f107 031c 	add.w	r3, r7, #28
 800315a:	4619      	mov	r1, r3
 800315c:	4810      	ldr	r0, [pc, #64]	@ (80031a0 <MX_TIM4_Init+0xac>)
 800315e:	f00c f957 	bl	800f410 <HAL_TIMEx_MasterConfigSynchronization>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8003168:	f000 fa16 	bl	8003598 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800316c:	2360      	movs	r3, #96	@ 0x60
 800316e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003170:	2300      	movs	r3, #0
 8003172:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003174:	2300      	movs	r3, #0
 8003176:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003178:	2300      	movs	r3, #0
 800317a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800317c:	463b      	mov	r3, r7
 800317e:	2200      	movs	r2, #0
 8003180:	4619      	mov	r1, r3
 8003182:	4807      	ldr	r0, [pc, #28]	@ (80031a0 <MX_TIM4_Init+0xac>)
 8003184:	f00b fa2a 	bl	800e5dc <HAL_TIM_PWM_ConfigChannel>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800318e:	f000 fa03 	bl	8003598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003192:	4803      	ldr	r0, [pc, #12]	@ (80031a0 <MX_TIM4_Init+0xac>)
 8003194:	f000 fe4e 	bl	8003e34 <HAL_TIM_MspPostInit>

}
 8003198:	bf00      	nop
 800319a:	3728      	adds	r7, #40	@ 0x28
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	24000fa8 	.word	0x24000fa8
 80031a4:	40000800 	.word	0x40000800

080031a8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b088      	sub	sp, #32
 80031ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031ae:	f107 0314 	add.w	r3, r7, #20
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	605a      	str	r2, [r3, #4]
 80031b8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80031ba:	1d3b      	adds	r3, r7, #4
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	605a      	str	r2, [r3, #4]
 80031c2:	609a      	str	r2, [r3, #8]
 80031c4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80031c6:	4b22      	ldr	r3, [pc, #136]	@ (8003250 <MX_TIM15_Init+0xa8>)
 80031c8:	4a22      	ldr	r2, [pc, #136]	@ (8003254 <MX_TIM15_Init+0xac>)
 80031ca:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80031cc:	4b20      	ldr	r3, [pc, #128]	@ (8003250 <MX_TIM15_Init+0xa8>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031d2:	4b1f      	ldr	r3, [pc, #124]	@ (8003250 <MX_TIM15_Init+0xa8>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80031d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003250 <MX_TIM15_Init+0xa8>)
 80031da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80031de:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003250 <MX_TIM15_Init+0xa8>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80031e6:	4b1a      	ldr	r3, [pc, #104]	@ (8003250 <MX_TIM15_Init+0xa8>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031ec:	4b18      	ldr	r3, [pc, #96]	@ (8003250 <MX_TIM15_Init+0xa8>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 80031f2:	4817      	ldr	r0, [pc, #92]	@ (8003250 <MX_TIM15_Init+0xa8>)
 80031f4:	f00b f8fe 	bl	800e3f4 <HAL_TIM_IC_Init>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80031fe:	f000 f9cb 	bl	8003598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800320a:	f107 0314 	add.w	r3, r7, #20
 800320e:	4619      	mov	r1, r3
 8003210:	480f      	ldr	r0, [pc, #60]	@ (8003250 <MX_TIM15_Init+0xa8>)
 8003212:	f00c f8fd 	bl	800f410 <HAL_TIMEx_MasterConfigSynchronization>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 800321c:	f000 f9bc 	bl	8003598 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003220:	2300      	movs	r3, #0
 8003222:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003224:	2301      	movs	r3, #1
 8003226:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003228:	2300      	movs	r3, #0
 800322a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800322c:	2300      	movs	r3, #0
 800322e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003230:	1d3b      	adds	r3, r7, #4
 8003232:	2200      	movs	r2, #0
 8003234:	4619      	mov	r1, r3
 8003236:	4806      	ldr	r0, [pc, #24]	@ (8003250 <MX_TIM15_Init+0xa8>)
 8003238:	f00b f933 	bl	800e4a2 <HAL_TIM_IC_ConfigChannel>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <MX_TIM15_Init+0x9e>
  {
    Error_Handler();
 8003242:	f000 f9a9 	bl	8003598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8003246:	bf00      	nop
 8003248:	3720      	adds	r7, #32
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	24000ff4 	.word	0x24000ff4
 8003254:	40014000 	.word	0x40014000

08003258 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800325c:	bf00      	nop
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
	...

08003268 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800326e:	4b11      	ldr	r3, [pc, #68]	@ (80032b4 <MX_DMA_Init+0x4c>)
 8003270:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003274:	4a0f      	ldr	r2, [pc, #60]	@ (80032b4 <MX_DMA_Init+0x4c>)
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800327e:	4b0d      	ldr	r3, [pc, #52]	@ (80032b4 <MX_DMA_Init+0x4c>)
 8003280:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	607b      	str	r3, [r7, #4]
 800328a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800328c:	2200      	movs	r2, #0
 800328e:	2100      	movs	r1, #0
 8003290:	200c      	movs	r0, #12
 8003292:	f004 fa20 	bl	80076d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003296:	200c      	movs	r0, #12
 8003298:	f004 fa37 	bl	800770a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800329c:	2200      	movs	r2, #0
 800329e:	2100      	movs	r1, #0
 80032a0:	200d      	movs	r0, #13
 80032a2:	f004 fa18 	bl	80076d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80032a6:	200d      	movs	r0, #13
 80032a8:	f004 fa2f 	bl	800770a <HAL_NVIC_EnableIRQ>

}
 80032ac:	bf00      	nop
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	58024400 	.word	0x58024400

080032b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b08e      	sub	sp, #56	@ 0x38
 80032bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	605a      	str	r2, [r3, #4]
 80032c8:	609a      	str	r2, [r3, #8]
 80032ca:	60da      	str	r2, [r3, #12]
 80032cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80032ce:	4bab      	ldr	r3, [pc, #684]	@ (800357c <MX_GPIO_Init+0x2c4>)
 80032d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032d4:	4aa9      	ldr	r2, [pc, #676]	@ (800357c <MX_GPIO_Init+0x2c4>)
 80032d6:	f043 0310 	orr.w	r3, r3, #16
 80032da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80032de:	4ba7      	ldr	r3, [pc, #668]	@ (800357c <MX_GPIO_Init+0x2c4>)
 80032e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032e4:	f003 0310 	and.w	r3, r3, #16
 80032e8:	623b      	str	r3, [r7, #32]
 80032ea:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032ec:	4ba3      	ldr	r3, [pc, #652]	@ (800357c <MX_GPIO_Init+0x2c4>)
 80032ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032f2:	4aa2      	ldr	r2, [pc, #648]	@ (800357c <MX_GPIO_Init+0x2c4>)
 80032f4:	f043 0304 	orr.w	r3, r3, #4
 80032f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80032fc:	4b9f      	ldr	r3, [pc, #636]	@ (800357c <MX_GPIO_Init+0x2c4>)
 80032fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003302:	f003 0304 	and.w	r3, r3, #4
 8003306:	61fb      	str	r3, [r7, #28]
 8003308:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800330a:	4b9c      	ldr	r3, [pc, #624]	@ (800357c <MX_GPIO_Init+0x2c4>)
 800330c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003310:	4a9a      	ldr	r2, [pc, #616]	@ (800357c <MX_GPIO_Init+0x2c4>)
 8003312:	f043 0320 	orr.w	r3, r3, #32
 8003316:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800331a:	4b98      	ldr	r3, [pc, #608]	@ (800357c <MX_GPIO_Init+0x2c4>)
 800331c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003320:	f003 0320 	and.w	r3, r3, #32
 8003324:	61bb      	str	r3, [r7, #24]
 8003326:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003328:	4b94      	ldr	r3, [pc, #592]	@ (800357c <MX_GPIO_Init+0x2c4>)
 800332a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800332e:	4a93      	ldr	r2, [pc, #588]	@ (800357c <MX_GPIO_Init+0x2c4>)
 8003330:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003334:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003338:	4b90      	ldr	r3, [pc, #576]	@ (800357c <MX_GPIO_Init+0x2c4>)
 800333a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800333e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003346:	4b8d      	ldr	r3, [pc, #564]	@ (800357c <MX_GPIO_Init+0x2c4>)
 8003348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800334c:	4a8b      	ldr	r2, [pc, #556]	@ (800357c <MX_GPIO_Init+0x2c4>)
 800334e:	f043 0301 	orr.w	r3, r3, #1
 8003352:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003356:	4b89      	ldr	r3, [pc, #548]	@ (800357c <MX_GPIO_Init+0x2c4>)
 8003358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	613b      	str	r3, [r7, #16]
 8003362:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003364:	4b85      	ldr	r3, [pc, #532]	@ (800357c <MX_GPIO_Init+0x2c4>)
 8003366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800336a:	4a84      	ldr	r2, [pc, #528]	@ (800357c <MX_GPIO_Init+0x2c4>)
 800336c:	f043 0302 	orr.w	r3, r3, #2
 8003370:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003374:	4b81      	ldr	r3, [pc, #516]	@ (800357c <MX_GPIO_Init+0x2c4>)
 8003376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003382:	4b7e      	ldr	r3, [pc, #504]	@ (800357c <MX_GPIO_Init+0x2c4>)
 8003384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003388:	4a7c      	ldr	r2, [pc, #496]	@ (800357c <MX_GPIO_Init+0x2c4>)
 800338a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800338e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003392:	4b7a      	ldr	r3, [pc, #488]	@ (800357c <MX_GPIO_Init+0x2c4>)
 8003394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800339c:	60bb      	str	r3, [r7, #8]
 800339e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033a0:	4b76      	ldr	r3, [pc, #472]	@ (800357c <MX_GPIO_Init+0x2c4>)
 80033a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033a6:	4a75      	ldr	r2, [pc, #468]	@ (800357c <MX_GPIO_Init+0x2c4>)
 80033a8:	f043 0308 	orr.w	r3, r3, #8
 80033ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033b0:	4b72      	ldr	r3, [pc, #456]	@ (800357c <MX_GPIO_Init+0x2c4>)
 80033b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	607b      	str	r3, [r7, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LINE_DRIVER1_ENABLE_Pin|LINE_DRIVER2_ENABLE_Pin, GPIO_PIN_SET);
 80033be:	2201      	movs	r2, #1
 80033c0:	f640 0105 	movw	r1, #2053	@ 0x805
 80033c4:	486e      	ldr	r0, [pc, #440]	@ (8003580 <MX_GPIO_Init+0x2c8>)
 80033c6:	f007 fa51 	bl	800a86c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
 80033ca:	2200      	movs	r2, #0
 80033cc:	2102      	movs	r1, #2
 80033ce:	486d      	ldr	r0, [pc, #436]	@ (8003584 <MX_GPIO_Init+0x2cc>)
 80033d0:	f007 fa4c 	bl	800a86c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80033d4:	2200      	movs	r2, #0
 80033d6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80033da:	4869      	ldr	r0, [pc, #420]	@ (8003580 <MX_GPIO_Init+0x2c8>)
 80033dc:	f007 fa46 	bl	800a86c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_3V3_SWITCH_GPIO_Port, OUT_3V3_SWITCH_Pin, GPIO_PIN_SET);
 80033e0:	2201      	movs	r2, #1
 80033e2:	2101      	movs	r1, #1
 80033e4:	4868      	ldr	r0, [pc, #416]	@ (8003588 <MX_GPIO_Init+0x2d0>)
 80033e6:	f007 fa41 	bl	800a86c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ACTIVE_GPIO_Port, LED_ACTIVE_Pin, GPIO_PIN_SET);
 80033ea:	2201      	movs	r2, #1
 80033ec:	2101      	movs	r1, #1
 80033ee:	4867      	ldr	r0, [pc, #412]	@ (800358c <MX_GPIO_Init+0x2d4>)
 80033f0:	f007 fa3c 	bl	800a86c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80033f4:	2200      	movs	r2, #0
 80033f6:	2102      	movs	r1, #2
 80033f8:	4864      	ldr	r0, [pc, #400]	@ (800358c <MX_GPIO_Init+0x2d4>)
 80033fa:	f007 fa37 	bl	800a86c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80033fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003402:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003404:	2300      	movs	r3, #0
 8003406:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003408:	2300      	movs	r3, #0
 800340a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800340c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003410:	4619      	mov	r1, r3
 8003412:	485f      	ldr	r0, [pc, #380]	@ (8003590 <MX_GPIO_Init+0x2d8>)
 8003414:	f007 f86a 	bl	800a4ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LINE_DRIVER1_ENABLE_Pin LINE_DRIVER2_ENABLE_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LINE_DRIVER1_ENABLE_Pin|LINE_DRIVER2_ENABLE_Pin|LED_RED_Pin;
 8003418:	f644 0305 	movw	r3, #18437	@ 0x4805
 800341c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800341e:	2301      	movs	r3, #1
 8003420:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003422:	2300      	movs	r3, #0
 8003424:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003426:	2300      	movs	r3, #0
 8003428:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800342a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800342e:	4619      	mov	r1, r3
 8003430:	4853      	ldr	r0, [pc, #332]	@ (8003580 <MX_GPIO_Init+0x2c8>)
 8003432:	f007 f85b 	bl	800a4ec <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_500V_ENABLE_Pin */
  GPIO_InitStruct.Pin = OUT_500V_ENABLE_Pin;
 8003436:	2301      	movs	r3, #1
 8003438:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800343a:	2300      	movs	r3, #0
 800343c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343e:	2300      	movs	r3, #0
 8003440:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OUT_500V_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003442:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003446:	4619      	mov	r1, r3
 8003448:	484e      	ldr	r0, [pc, #312]	@ (8003584 <MX_GPIO_Init+0x2cc>)
 800344a:	f007 f84f 	bl	800a4ec <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_OUTPUT_Pin */
  GPIO_InitStruct.Pin = TEST_OUTPUT_Pin;
 800344e:	2302      	movs	r3, #2
 8003450:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003452:	2301      	movs	r3, #1
 8003454:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003456:	2300      	movs	r3, #0
 8003458:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800345a:	2300      	movs	r3, #0
 800345c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TEST_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 800345e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003462:	4619      	mov	r1, r3
 8003464:	4847      	ldr	r0, [pc, #284]	@ (8003584 <MX_GPIO_Init+0x2cc>)
 8003466:	f007 f841 	bl	800a4ec <HAL_GPIO_Init>

  /*Configure GPIO pin : TURN_PLASMA_ON_Pin */
  GPIO_InitStruct.Pin = TURN_PLASMA_ON_Pin;
 800346a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800346e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003470:	2300      	movs	r3, #0
 8003472:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003474:	2300      	movs	r3, #0
 8003476:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TURN_PLASMA_ON_GPIO_Port, &GPIO_InitStruct);
 8003478:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800347c:	4619      	mov	r1, r3
 800347e:	4843      	ldr	r0, [pc, #268]	@ (800358c <MX_GPIO_Init+0x2d4>)
 8003480:	f007 f834 	bl	800a4ec <HAL_GPIO_Init>

  /*Configure GPIO pin : INP_COMP_IRQ_Pin */
  GPIO_InitStruct.Pin = INP_COMP_IRQ_Pin;
 8003484:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003488:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800348a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800348e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003490:	2300      	movs	r3, #0
 8003492:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(INP_COMP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003494:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003498:	4619      	mov	r1, r3
 800349a:	483c      	ldr	r0, [pc, #240]	@ (800358c <MX_GPIO_Init+0x2d4>)
 800349c:	f007 f826 	bl	800a4ec <HAL_GPIO_Init>

  /*Configure GPIO pin : POWER_OFF_IRQ_Pin */
  GPIO_InitStruct.Pin = POWER_OFF_IRQ_Pin;
 80034a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80034a6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80034aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ac:	2300      	movs	r3, #0
 80034ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(POWER_OFF_IRQ_GPIO_Port, &GPIO_InitStruct);
 80034b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034b4:	4619      	mov	r1, r3
 80034b6:	4835      	ldr	r0, [pc, #212]	@ (800358c <MX_GPIO_Init+0x2d4>)
 80034b8:	f007 f818 	bl	800a4ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80034bc:	2380      	movs	r3, #128	@ 0x80
 80034be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80034c0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80034c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c6:	2300      	movs	r3, #0
 80034c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80034ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034ce:	4619      	mov	r1, r3
 80034d0:	482c      	ldr	r0, [pc, #176]	@ (8003584 <MX_GPIO_Init+0x2cc>)
 80034d2:	f007 f80b 	bl	800a4ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80034d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80034da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034dc:	2300      	movs	r3, #0
 80034de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80034e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034e8:	4619      	mov	r1, r3
 80034ea:	482a      	ldr	r0, [pc, #168]	@ (8003594 <MX_GPIO_Init+0x2dc>)
 80034ec:	f006 fffe 	bl	800a4ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80034f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80034f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f6:	2302      	movs	r3, #2
 80034f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fa:	2300      	movs	r3, #0
 80034fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034fe:	2300      	movs	r3, #0
 8003500:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8003502:	230a      	movs	r3, #10
 8003504:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8003506:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800350a:	4619      	mov	r1, r3
 800350c:	4821      	ldr	r0, [pc, #132]	@ (8003594 <MX_GPIO_Init+0x2dc>)
 800350e:	f006 ffed 	bl	800a4ec <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_3V3_SWITCH_Pin */
  GPIO_InitStruct.Pin = OUT_3V3_SWITCH_Pin;
 8003512:	2301      	movs	r3, #1
 8003514:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003516:	2301      	movs	r3, #1
 8003518:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351a:	2300      	movs	r3, #0
 800351c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800351e:	2300      	movs	r3, #0
 8003520:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(OUT_3V3_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8003522:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003526:	4619      	mov	r1, r3
 8003528:	4817      	ldr	r0, [pc, #92]	@ (8003588 <MX_GPIO_Init+0x2d0>)
 800352a:	f006 ffdf 	bl	800a4ec <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_15V_ENABLE_Pin */
  GPIO_InitStruct.Pin = OUT_15V_ENABLE_Pin;
 800352e:	2302      	movs	r3, #2
 8003530:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003532:	2300      	movs	r3, #0
 8003534:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003536:	2300      	movs	r3, #0
 8003538:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OUT_15V_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800353a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800353e:	4619      	mov	r1, r3
 8003540:	4811      	ldr	r0, [pc, #68]	@ (8003588 <MX_GPIO_Init+0x2d0>)
 8003542:	f006 ffd3 	bl	800a4ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ACTIVE_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_ACTIVE_Pin|LED_YELLOW_Pin;
 8003546:	2303      	movs	r3, #3
 8003548:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800354a:	2301      	movs	r3, #1
 800354c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354e:	2300      	movs	r3, #0
 8003550:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003552:	2300      	movs	r3, #0
 8003554:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003556:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800355a:	4619      	mov	r1, r3
 800355c:	480b      	ldr	r0, [pc, #44]	@ (800358c <MX_GPIO_Init+0x2d4>)
 800355e:	f006 ffc5 	bl	800a4ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003562:	2200      	movs	r2, #0
 8003564:	2100      	movs	r1, #0
 8003566:	2028      	movs	r0, #40	@ 0x28
 8003568:	f004 f8b5 	bl	80076d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800356c:	2028      	movs	r0, #40	@ 0x28
 800356e:	f004 f8cc 	bl	800770a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003572:	bf00      	nop
 8003574:	3738      	adds	r7, #56	@ 0x38
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	58024400 	.word	0x58024400
 8003580:	58020400 	.word	0x58020400
 8003584:	58021800 	.word	0x58021800
 8003588:	58020c00 	.word	0x58020c00
 800358c:	58021000 	.word	0x58021000
 8003590:	58020800 	.word	0x58020800
 8003594:	58020000 	.word	0x58020000

08003598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800359c:	b672      	cpsid	i
}
 800359e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035a0:	bf00      	nop
 80035a2:	e7fd      	b.n	80035a0 <Error_Handler+0x8>

080035a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035aa:	4b0a      	ldr	r3, [pc, #40]	@ (80035d4 <HAL_MspInit+0x30>)
 80035ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80035b0:	4a08      	ldr	r2, [pc, #32]	@ (80035d4 <HAL_MspInit+0x30>)
 80035b2:	f043 0302 	orr.w	r3, r3, #2
 80035b6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80035ba:	4b06      	ldr	r3, [pc, #24]	@ (80035d4 <HAL_MspInit+0x30>)
 80035bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	607b      	str	r3, [r7, #4]
 80035c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	58024400 	.word	0x58024400

080035d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b090      	sub	sp, #64	@ 0x40
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	605a      	str	r2, [r3, #4]
 80035ea:	609a      	str	r2, [r3, #8]
 80035ec:	60da      	str	r2, [r3, #12]
 80035ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4aaa      	ldr	r2, [pc, #680]	@ (80038a0 <HAL_ADC_MspInit+0x2c8>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d16b      	bne.n	80036d2 <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80035fa:	4baa      	ldr	r3, [pc, #680]	@ (80038a4 <HAL_ADC_MspInit+0x2cc>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	3301      	adds	r3, #1
 8003600:	4aa8      	ldr	r2, [pc, #672]	@ (80038a4 <HAL_ADC_MspInit+0x2cc>)
 8003602:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003604:	4ba7      	ldr	r3, [pc, #668]	@ (80038a4 <HAL_ADC_MspInit+0x2cc>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d10e      	bne.n	800362a <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800360c:	4ba6      	ldr	r3, [pc, #664]	@ (80038a8 <HAL_ADC_MspInit+0x2d0>)
 800360e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003612:	4aa5      	ldr	r2, [pc, #660]	@ (80038a8 <HAL_ADC_MspInit+0x2d0>)
 8003614:	f043 0320 	orr.w	r3, r3, #32
 8003618:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800361c:	4ba2      	ldr	r3, [pc, #648]	@ (80038a8 <HAL_ADC_MspInit+0x2d0>)
 800361e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003622:	f003 0320 	and.w	r3, r3, #32
 8003626:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800362a:	4b9f      	ldr	r3, [pc, #636]	@ (80038a8 <HAL_ADC_MspInit+0x2d0>)
 800362c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003630:	4a9d      	ldr	r2, [pc, #628]	@ (80038a8 <HAL_ADC_MspInit+0x2d0>)
 8003632:	f043 0301 	orr.w	r3, r3, #1
 8003636:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800363a:	4b9b      	ldr	r3, [pc, #620]	@ (80038a8 <HAL_ADC_MspInit+0x2d0>)
 800363c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	627b      	str	r3, [r7, #36]	@ 0x24
 8003646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    PA3     ------> ADC1_INP15
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8003648:	2319      	movs	r3, #25
 800364a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800364c:	2303      	movs	r3, #3
 800364e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003650:	2300      	movs	r3, #0
 8003652:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003654:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003658:	4619      	mov	r1, r3
 800365a:	4894      	ldr	r0, [pc, #592]	@ (80038ac <HAL_ADC_MspInit+0x2d4>)
 800365c:	f006 ff46 	bl	800a4ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream2;
 8003660:	4b93      	ldr	r3, [pc, #588]	@ (80038b0 <HAL_ADC_MspInit+0x2d8>)
 8003662:	4a94      	ldr	r2, [pc, #592]	@ (80038b4 <HAL_ADC_MspInit+0x2dc>)
 8003664:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003666:	4b92      	ldr	r3, [pc, #584]	@ (80038b0 <HAL_ADC_MspInit+0x2d8>)
 8003668:	2209      	movs	r2, #9
 800366a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800366c:	4b90      	ldr	r3, [pc, #576]	@ (80038b0 <HAL_ADC_MspInit+0x2d8>)
 800366e:	2200      	movs	r2, #0
 8003670:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003672:	4b8f      	ldr	r3, [pc, #572]	@ (80038b0 <HAL_ADC_MspInit+0x2d8>)
 8003674:	2200      	movs	r2, #0
 8003676:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003678:	4b8d      	ldr	r3, [pc, #564]	@ (80038b0 <HAL_ADC_MspInit+0x2d8>)
 800367a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800367e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003680:	4b8b      	ldr	r3, [pc, #556]	@ (80038b0 <HAL_ADC_MspInit+0x2d8>)
 8003682:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003686:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003688:	4b89      	ldr	r3, [pc, #548]	@ (80038b0 <HAL_ADC_MspInit+0x2d8>)
 800368a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800368e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003690:	4b87      	ldr	r3, [pc, #540]	@ (80038b0 <HAL_ADC_MspInit+0x2d8>)
 8003692:	2200      	movs	r2, #0
 8003694:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8003696:	4b86      	ldr	r3, [pc, #536]	@ (80038b0 <HAL_ADC_MspInit+0x2d8>)
 8003698:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800369c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800369e:	4b84      	ldr	r3, [pc, #528]	@ (80038b0 <HAL_ADC_MspInit+0x2d8>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80036a4:	4882      	ldr	r0, [pc, #520]	@ (80038b0 <HAL_ADC_MspInit+0x2d8>)
 80036a6:	f004 f84b 	bl	8007740 <HAL_DMA_Init>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <HAL_ADC_MspInit+0xdc>
    {
      Error_Handler();
 80036b0:	f7ff ff72 	bl	8003598 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a7e      	ldr	r2, [pc, #504]	@ (80038b0 <HAL_ADC_MspInit+0x2d8>)
 80036b8:	659a      	str	r2, [r3, #88]	@ 0x58
 80036ba:	4a7d      	ldr	r2, [pc, #500]	@ (80038b0 <HAL_ADC_MspInit+0x2d8>)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80036c0:	2200      	movs	r2, #0
 80036c2:	2100      	movs	r1, #0
 80036c4:	2012      	movs	r0, #18
 80036c6:	f004 f806 	bl	80076d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80036ca:	2012      	movs	r0, #18
 80036cc:	f004 f81d 	bl	800770a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80036d0:	e0e2      	b.n	8003898 <HAL_ADC_MspInit+0x2c0>
  else if(hadc->Instance==ADC2)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a78      	ldr	r2, [pc, #480]	@ (80038b8 <HAL_ADC_MspInit+0x2e0>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d156      	bne.n	800378a <HAL_ADC_MspInit+0x1b2>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80036dc:	4b71      	ldr	r3, [pc, #452]	@ (80038a4 <HAL_ADC_MspInit+0x2cc>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	3301      	adds	r3, #1
 80036e2:	4a70      	ldr	r2, [pc, #448]	@ (80038a4 <HAL_ADC_MspInit+0x2cc>)
 80036e4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80036e6:	4b6f      	ldr	r3, [pc, #444]	@ (80038a4 <HAL_ADC_MspInit+0x2cc>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d10e      	bne.n	800370c <HAL_ADC_MspInit+0x134>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80036ee:	4b6e      	ldr	r3, [pc, #440]	@ (80038a8 <HAL_ADC_MspInit+0x2d0>)
 80036f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80036f4:	4a6c      	ldr	r2, [pc, #432]	@ (80038a8 <HAL_ADC_MspInit+0x2d0>)
 80036f6:	f043 0320 	orr.w	r3, r3, #32
 80036fa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80036fe:	4b6a      	ldr	r3, [pc, #424]	@ (80038a8 <HAL_ADC_MspInit+0x2d0>)
 8003700:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003704:	f003 0320 	and.w	r3, r3, #32
 8003708:	623b      	str	r3, [r7, #32]
 800370a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800370c:	4b66      	ldr	r3, [pc, #408]	@ (80038a8 <HAL_ADC_MspInit+0x2d0>)
 800370e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003712:	4a65      	ldr	r2, [pc, #404]	@ (80038a8 <HAL_ADC_MspInit+0x2d0>)
 8003714:	f043 0301 	orr.w	r3, r3, #1
 8003718:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800371c:	4b62      	ldr	r3, [pc, #392]	@ (80038a8 <HAL_ADC_MspInit+0x2d0>)
 800371e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	61fb      	str	r3, [r7, #28]
 8003728:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800372a:	4b5f      	ldr	r3, [pc, #380]	@ (80038a8 <HAL_ADC_MspInit+0x2d0>)
 800372c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003730:	4a5d      	ldr	r2, [pc, #372]	@ (80038a8 <HAL_ADC_MspInit+0x2d0>)
 8003732:	f043 0302 	orr.w	r3, r3, #2
 8003736:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800373a:	4b5b      	ldr	r3, [pc, #364]	@ (80038a8 <HAL_ADC_MspInit+0x2d0>)
 800373c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	61bb      	str	r3, [r7, #24]
 8003746:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003748:	2360      	movs	r3, #96	@ 0x60
 800374a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800374c:	2303      	movs	r3, #3
 800374e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003750:	2300      	movs	r3, #0
 8003752:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003754:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003758:	4619      	mov	r1, r3
 800375a:	4854      	ldr	r0, [pc, #336]	@ (80038ac <HAL_ADC_MspInit+0x2d4>)
 800375c:	f006 fec6 	bl	800a4ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003760:	2302      	movs	r3, #2
 8003762:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003764:	2303      	movs	r3, #3
 8003766:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003768:	2300      	movs	r3, #0
 800376a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800376c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003770:	4619      	mov	r1, r3
 8003772:	4852      	ldr	r0, [pc, #328]	@ (80038bc <HAL_ADC_MspInit+0x2e4>)
 8003774:	f006 feba 	bl	800a4ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003778:	2200      	movs	r2, #0
 800377a:	2100      	movs	r1, #0
 800377c:	2012      	movs	r0, #18
 800377e:	f003 ffaa 	bl	80076d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003782:	2012      	movs	r0, #18
 8003784:	f003 ffc1 	bl	800770a <HAL_NVIC_EnableIRQ>
}
 8003788:	e086      	b.n	8003898 <HAL_ADC_MspInit+0x2c0>
  else if(hadc->Instance==ADC3)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a4c      	ldr	r2, [pc, #304]	@ (80038c0 <HAL_ADC_MspInit+0x2e8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	f040 8081 	bne.w	8003898 <HAL_ADC_MspInit+0x2c0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003796:	4b44      	ldr	r3, [pc, #272]	@ (80038a8 <HAL_ADC_MspInit+0x2d0>)
 8003798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800379c:	4a42      	ldr	r2, [pc, #264]	@ (80038a8 <HAL_ADC_MspInit+0x2d0>)
 800379e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80037a6:	4b40      	ldr	r3, [pc, #256]	@ (80038a8 <HAL_ADC_MspInit+0x2d0>)
 80037a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037b0:	617b      	str	r3, [r7, #20]
 80037b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80037b4:	4b3c      	ldr	r3, [pc, #240]	@ (80038a8 <HAL_ADC_MspInit+0x2d0>)
 80037b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037ba:	4a3b      	ldr	r2, [pc, #236]	@ (80038a8 <HAL_ADC_MspInit+0x2d0>)
 80037bc:	f043 0320 	orr.w	r3, r3, #32
 80037c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80037c4:	4b38      	ldr	r3, [pc, #224]	@ (80038a8 <HAL_ADC_MspInit+0x2d0>)
 80037c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037ca:	f003 0320 	and.w	r3, r3, #32
 80037ce:	613b      	str	r3, [r7, #16]
 80037d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037d2:	4b35      	ldr	r3, [pc, #212]	@ (80038a8 <HAL_ADC_MspInit+0x2d0>)
 80037d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037d8:	4a33      	ldr	r2, [pc, #204]	@ (80038a8 <HAL_ADC_MspInit+0x2d0>)
 80037da:	f043 0304 	orr.w	r3, r3, #4
 80037de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80037e2:	4b31      	ldr	r3, [pc, #196]	@ (80038a8 <HAL_ADC_MspInit+0x2d0>)
 80037e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80037f0:	f44f 63ff 	mov.w	r3, #2040	@ 0x7f8
 80037f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037f6:	2303      	movs	r3, #3
 80037f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fa:	2300      	movs	r3, #0
 80037fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80037fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003802:	4619      	mov	r1, r3
 8003804:	482f      	ldr	r0, [pc, #188]	@ (80038c4 <HAL_ADC_MspInit+0x2ec>)
 8003806:	f006 fe71 	bl	800a4ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800380a:	2301      	movs	r3, #1
 800380c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800380e:	2303      	movs	r3, #3
 8003810:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003812:	2300      	movs	r3, #0
 8003814:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003816:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800381a:	4619      	mov	r1, r3
 800381c:	482a      	ldr	r0, [pc, #168]	@ (80038c8 <HAL_ADC_MspInit+0x2f0>)
 800381e:	f006 fe65 	bl	800a4ec <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8003822:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8003826:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800382a:	f000 fe21 	bl	8004470 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800382e:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8003832:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8003836:	f000 fe1b 	bl	8004470 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 800383a:	4b24      	ldr	r3, [pc, #144]	@ (80038cc <HAL_ADC_MspInit+0x2f4>)
 800383c:	4a24      	ldr	r2, [pc, #144]	@ (80038d0 <HAL_ADC_MspInit+0x2f8>)
 800383e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8003840:	4b22      	ldr	r3, [pc, #136]	@ (80038cc <HAL_ADC_MspInit+0x2f4>)
 8003842:	2273      	movs	r2, #115	@ 0x73
 8003844:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003846:	4b21      	ldr	r3, [pc, #132]	@ (80038cc <HAL_ADC_MspInit+0x2f4>)
 8003848:	2200      	movs	r2, #0
 800384a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800384c:	4b1f      	ldr	r3, [pc, #124]	@ (80038cc <HAL_ADC_MspInit+0x2f4>)
 800384e:	2200      	movs	r2, #0
 8003850:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003852:	4b1e      	ldr	r3, [pc, #120]	@ (80038cc <HAL_ADC_MspInit+0x2f4>)
 8003854:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003858:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800385a:	4b1c      	ldr	r3, [pc, #112]	@ (80038cc <HAL_ADC_MspInit+0x2f4>)
 800385c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003860:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003862:	4b1a      	ldr	r3, [pc, #104]	@ (80038cc <HAL_ADC_MspInit+0x2f4>)
 8003864:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003868:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 800386a:	4b18      	ldr	r3, [pc, #96]	@ (80038cc <HAL_ADC_MspInit+0x2f4>)
 800386c:	2200      	movs	r2, #0
 800386e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003870:	4b16      	ldr	r3, [pc, #88]	@ (80038cc <HAL_ADC_MspInit+0x2f4>)
 8003872:	2200      	movs	r2, #0
 8003874:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003876:	4b15      	ldr	r3, [pc, #84]	@ (80038cc <HAL_ADC_MspInit+0x2f4>)
 8003878:	2200      	movs	r2, #0
 800387a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800387c:	4813      	ldr	r0, [pc, #76]	@ (80038cc <HAL_ADC_MspInit+0x2f4>)
 800387e:	f003 ff5f 	bl	8007740 <HAL_DMA_Init>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <HAL_ADC_MspInit+0x2b4>
      Error_Handler();
 8003888:	f7ff fe86 	bl	8003598 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a0f      	ldr	r2, [pc, #60]	@ (80038cc <HAL_ADC_MspInit+0x2f4>)
 8003890:	659a      	str	r2, [r3, #88]	@ 0x58
 8003892:	4a0e      	ldr	r2, [pc, #56]	@ (80038cc <HAL_ADC_MspInit+0x2f4>)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003898:	bf00      	nop
 800389a:	3740      	adds	r7, #64	@ 0x40
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40022000 	.word	0x40022000
 80038a4:	24001048 	.word	0x24001048
 80038a8:	58024400 	.word	0x58024400
 80038ac:	58020000 	.word	0x58020000
 80038b0:	24000bd0 	.word	0x24000bd0
 80038b4:	40020040 	.word	0x40020040
 80038b8:	40022100 	.word	0x40022100
 80038bc:	58020400 	.word	0x58020400
 80038c0:	58026000 	.word	0x58026000
 80038c4:	58021400 	.word	0x58021400
 80038c8:	58020800 	.word	0x58020800
 80038cc:	24000c48 	.word	0x24000c48
 80038d0:	40020028 	.word	0x40020028

080038d4 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b08a      	sub	sp, #40	@ 0x28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038dc:	f107 0314 	add.w	r3, r7, #20
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	605a      	str	r2, [r3, #4]
 80038e6:	609a      	str	r2, [r3, #8]
 80038e8:	60da      	str	r2, [r3, #12]
 80038ea:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a21      	ldr	r2, [pc, #132]	@ (8003978 <HAL_COMP_MspInit+0xa4>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d13b      	bne.n	800396e <HAL_COMP_MspInit+0x9a>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 80038f6:	4b21      	ldr	r3, [pc, #132]	@ (800397c <HAL_COMP_MspInit+0xa8>)
 80038f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80038fc:	4a1f      	ldr	r2, [pc, #124]	@ (800397c <HAL_COMP_MspInit+0xa8>)
 80038fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003902:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003906:	4b1d      	ldr	r3, [pc, #116]	@ (800397c <HAL_COMP_MspInit+0xa8>)
 8003908:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800390c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003910:	613b      	str	r3, [r7, #16]
 8003912:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003914:	4b19      	ldr	r3, [pc, #100]	@ (800397c <HAL_COMP_MspInit+0xa8>)
 8003916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800391a:	4a18      	ldr	r2, [pc, #96]	@ (800397c <HAL_COMP_MspInit+0xa8>)
 800391c:	f043 0310 	orr.w	r3, r3, #16
 8003920:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003924:	4b15      	ldr	r3, [pc, #84]	@ (800397c <HAL_COMP_MspInit+0xa8>)
 8003926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800392a:	f003 0310 	and.w	r3, r3, #16
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PE7     ------> COMP2_INM
    PE11     ------> COMP2_INP
    PE13     ------> COMP2_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_11;
 8003932:	f44f 6308 	mov.w	r3, #2176	@ 0x880
 8003936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003938:	2303      	movs	r3, #3
 800393a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393c:	2300      	movs	r3, #0
 800393e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003940:	f107 0314 	add.w	r3, r7, #20
 8003944:	4619      	mov	r1, r3
 8003946:	480e      	ldr	r0, [pc, #56]	@ (8003980 <HAL_COMP_MspInit+0xac>)
 8003948:	f006 fdd0 	bl	800a4ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800394c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003952:	2302      	movs	r3, #2
 8003954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003956:	2300      	movs	r3, #0
 8003958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800395a:	2300      	movs	r3, #0
 800395c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_COMP2;
 800395e:	230d      	movs	r3, #13
 8003960:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003962:	f107 0314 	add.w	r3, r7, #20
 8003966:	4619      	mov	r1, r3
 8003968:	4805      	ldr	r0, [pc, #20]	@ (8003980 <HAL_COMP_MspInit+0xac>)
 800396a:	f006 fdbf 	bl	800a4ec <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 800396e:	bf00      	nop
 8003970:	3728      	adds	r7, #40	@ 0x28
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	58003810 	.word	0x58003810
 800397c:	58024400 	.word	0x58024400
 8003980:	58021000 	.word	0x58021000

08003984 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b08e      	sub	sp, #56	@ 0x38
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800398c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	605a      	str	r2, [r3, #4]
 8003996:	609a      	str	r2, [r3, #8]
 8003998:	60da      	str	r2, [r3, #12]
 800399a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a59      	ldr	r2, [pc, #356]	@ (8003b08 <HAL_ETH_MspInit+0x184>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	f040 80ab 	bne.w	8003afe <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80039a8:	4b58      	ldr	r3, [pc, #352]	@ (8003b0c <HAL_ETH_MspInit+0x188>)
 80039aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80039ae:	4a57      	ldr	r2, [pc, #348]	@ (8003b0c <HAL_ETH_MspInit+0x188>)
 80039b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039b4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80039b8:	4b54      	ldr	r3, [pc, #336]	@ (8003b0c <HAL_ETH_MspInit+0x188>)
 80039ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80039be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039c2:	623b      	str	r3, [r7, #32]
 80039c4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80039c6:	4b51      	ldr	r3, [pc, #324]	@ (8003b0c <HAL_ETH_MspInit+0x188>)
 80039c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80039cc:	4a4f      	ldr	r2, [pc, #316]	@ (8003b0c <HAL_ETH_MspInit+0x188>)
 80039ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039d2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80039d6:	4b4d      	ldr	r3, [pc, #308]	@ (8003b0c <HAL_ETH_MspInit+0x188>)
 80039d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80039dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039e0:	61fb      	str	r3, [r7, #28]
 80039e2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80039e4:	4b49      	ldr	r3, [pc, #292]	@ (8003b0c <HAL_ETH_MspInit+0x188>)
 80039e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80039ea:	4a48      	ldr	r2, [pc, #288]	@ (8003b0c <HAL_ETH_MspInit+0x188>)
 80039ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039f0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80039f4:	4b45      	ldr	r3, [pc, #276]	@ (8003b0c <HAL_ETH_MspInit+0x188>)
 80039f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80039fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039fe:	61bb      	str	r3, [r7, #24]
 8003a00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a02:	4b42      	ldr	r3, [pc, #264]	@ (8003b0c <HAL_ETH_MspInit+0x188>)
 8003a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a08:	4a40      	ldr	r2, [pc, #256]	@ (8003b0c <HAL_ETH_MspInit+0x188>)
 8003a0a:	f043 0304 	orr.w	r3, r3, #4
 8003a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a12:	4b3e      	ldr	r3, [pc, #248]	@ (8003b0c <HAL_ETH_MspInit+0x188>)
 8003a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a20:	4b3a      	ldr	r3, [pc, #232]	@ (8003b0c <HAL_ETH_MspInit+0x188>)
 8003a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a26:	4a39      	ldr	r2, [pc, #228]	@ (8003b0c <HAL_ETH_MspInit+0x188>)
 8003a28:	f043 0301 	orr.w	r3, r3, #1
 8003a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a30:	4b36      	ldr	r3, [pc, #216]	@ (8003b0c <HAL_ETH_MspInit+0x188>)
 8003a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	613b      	str	r3, [r7, #16]
 8003a3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a3e:	4b33      	ldr	r3, [pc, #204]	@ (8003b0c <HAL_ETH_MspInit+0x188>)
 8003a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a44:	4a31      	ldr	r2, [pc, #196]	@ (8003b0c <HAL_ETH_MspInit+0x188>)
 8003a46:	f043 0302 	orr.w	r3, r3, #2
 8003a4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a4e:	4b2f      	ldr	r3, [pc, #188]	@ (8003b0c <HAL_ETH_MspInit+0x188>)
 8003a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a5c:	4b2b      	ldr	r3, [pc, #172]	@ (8003b0c <HAL_ETH_MspInit+0x188>)
 8003a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a62:	4a2a      	ldr	r2, [pc, #168]	@ (8003b0c <HAL_ETH_MspInit+0x188>)
 8003a64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a6c:	4b27      	ldr	r3, [pc, #156]	@ (8003b0c <HAL_ETH_MspInit+0x188>)
 8003a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a76:	60bb      	str	r3, [r7, #8]
 8003a78:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003a7a:	2332      	movs	r3, #50	@ 0x32
 8003a7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a7e:	2302      	movs	r3, #2
 8003a80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a82:	2300      	movs	r3, #0
 8003a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a86:	2300      	movs	r3, #0
 8003a88:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a8a:	230b      	movs	r3, #11
 8003a8c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a92:	4619      	mov	r1, r3
 8003a94:	481e      	ldr	r0, [pc, #120]	@ (8003b10 <HAL_ETH_MspInit+0x18c>)
 8003a96:	f006 fd29 	bl	800a4ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003a9a:	2386      	movs	r3, #134	@ 0x86
 8003a9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003aaa:	230b      	movs	r3, #11
 8003aac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4817      	ldr	r0, [pc, #92]	@ (8003b14 <HAL_ETH_MspInit+0x190>)
 8003ab6:	f006 fd19 	bl	800a4ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003aba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003abe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003acc:	230b      	movs	r3, #11
 8003ace:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003ad0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4810      	ldr	r0, [pc, #64]	@ (8003b18 <HAL_ETH_MspInit+0x194>)
 8003ad8:	f006 fd08 	bl	800a4ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003adc:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8003ae0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aea:	2300      	movs	r3, #0
 8003aec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003aee:	230b      	movs	r3, #11
 8003af0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003af2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003af6:	4619      	mov	r1, r3
 8003af8:	4808      	ldr	r0, [pc, #32]	@ (8003b1c <HAL_ETH_MspInit+0x198>)
 8003afa:	f006 fcf7 	bl	800a4ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8003afe:	bf00      	nop
 8003b00:	3738      	adds	r7, #56	@ 0x38
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	40028000 	.word	0x40028000
 8003b0c:	58024400 	.word	0x58024400
 8003b10:	58020800 	.word	0x58020800
 8003b14:	58020000 	.word	0x58020000
 8003b18:	58020400 	.word	0x58020400
 8003b1c:	58021800 	.word	0x58021800

08003b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b0ba      	sub	sp, #232	@ 0xe8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b28:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	605a      	str	r2, [r3, #4]
 8003b32:	609a      	str	r2, [r3, #8]
 8003b34:	60da      	str	r2, [r3, #12]
 8003b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b38:	f107 0318 	add.w	r3, r7, #24
 8003b3c:	22b8      	movs	r2, #184	@ 0xb8
 8003b3e:	2100      	movs	r1, #0
 8003b40:	4618      	mov	r0, r3
 8003b42:	f00d ff36 	bl	80119b2 <memset>
  if(huart->Instance==LPUART1)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a4d      	ldr	r2, [pc, #308]	@ (8003c80 <HAL_UART_MspInit+0x160>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d146      	bne.n	8003bde <HAL_UART_MspInit+0xbe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003b50:	f04f 0204 	mov.w	r2, #4
 8003b54:	f04f 0300 	mov.w	r3, #0
 8003b58:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b62:	f107 0318 	add.w	r3, r7, #24
 8003b66:	4618      	mov	r0, r3
 8003b68:	f007 fe54 	bl	800b814 <HAL_RCCEx_PeriphCLKConfig>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003b72:	f7ff fd11 	bl	8003598 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003b76:	4b43      	ldr	r3, [pc, #268]	@ (8003c84 <HAL_UART_MspInit+0x164>)
 8003b78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003b7c:	4a41      	ldr	r2, [pc, #260]	@ (8003c84 <HAL_UART_MspInit+0x164>)
 8003b7e:	f043 0308 	orr.w	r3, r3, #8
 8003b82:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003b86:	4b3f      	ldr	r3, [pc, #252]	@ (8003c84 <HAL_UART_MspInit+0x164>)
 8003b88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003b8c:	f003 0308 	and.w	r3, r3, #8
 8003b90:	617b      	str	r3, [r7, #20]
 8003b92:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b94:	4b3b      	ldr	r3, [pc, #236]	@ (8003c84 <HAL_UART_MspInit+0x164>)
 8003b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b9a:	4a3a      	ldr	r2, [pc, #232]	@ (8003c84 <HAL_UART_MspInit+0x164>)
 8003b9c:	f043 0302 	orr.w	r3, r3, #2
 8003ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003ba4:	4b37      	ldr	r3, [pc, #220]	@ (8003c84 <HAL_UART_MspInit+0x164>)
 8003ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	613b      	str	r3, [r7, #16]
 8003bb0:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003bb2:	23c0      	movs	r3, #192	@ 0xc0
 8003bb4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb8:	2302      	movs	r3, #2
 8003bba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART;
 8003bca:	2308      	movs	r3, #8
 8003bcc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bd0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	482c      	ldr	r0, [pc, #176]	@ (8003c88 <HAL_UART_MspInit+0x168>)
 8003bd8:	f006 fc88 	bl	800a4ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003bdc:	e04b      	b.n	8003c76 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART3)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a2a      	ldr	r2, [pc, #168]	@ (8003c8c <HAL_UART_MspInit+0x16c>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d146      	bne.n	8003c76 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003be8:	f04f 0202 	mov.w	r2, #2
 8003bec:	f04f 0300 	mov.w	r3, #0
 8003bf0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bfa:	f107 0318 	add.w	r3, r7, #24
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f007 fe08 	bl	800b814 <HAL_RCCEx_PeriphCLKConfig>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <HAL_UART_MspInit+0xee>
      Error_Handler();
 8003c0a:	f7ff fcc5 	bl	8003598 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8003c84 <HAL_UART_MspInit+0x164>)
 8003c10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003c14:	4a1b      	ldr	r2, [pc, #108]	@ (8003c84 <HAL_UART_MspInit+0x164>)
 8003c16:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c1a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003c1e:	4b19      	ldr	r3, [pc, #100]	@ (8003c84 <HAL_UART_MspInit+0x164>)
 8003c20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003c24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c2c:	4b15      	ldr	r3, [pc, #84]	@ (8003c84 <HAL_UART_MspInit+0x164>)
 8003c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c32:	4a14      	ldr	r2, [pc, #80]	@ (8003c84 <HAL_UART_MspInit+0x164>)
 8003c34:	f043 0308 	orr.w	r3, r3, #8
 8003c38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c3c:	4b11      	ldr	r3, [pc, #68]	@ (8003c84 <HAL_UART_MspInit+0x164>)
 8003c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c42:	f003 0308 	and.w	r3, r3, #8
 8003c46:	60bb      	str	r3, [r7, #8]
 8003c48:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8003c4a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003c4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c52:	2302      	movs	r3, #2
 8003c54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003c64:	2307      	movs	r3, #7
 8003c66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c6a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003c6e:	4619      	mov	r1, r3
 8003c70:	4807      	ldr	r0, [pc, #28]	@ (8003c90 <HAL_UART_MspInit+0x170>)
 8003c72:	f006 fc3b 	bl	800a4ec <HAL_GPIO_Init>
}
 8003c76:	bf00      	nop
 8003c78:	37e8      	adds	r7, #232	@ 0xe8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	58000c00 	.word	0x58000c00
 8003c84:	58024400 	.word	0x58024400
 8003c88:	58020400 	.word	0x58020400
 8003c8c:	40004800 	.word	0x40004800
 8003c90:	58020c00 	.word	0x58020c00

08003c94 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a20      	ldr	r2, [pc, #128]	@ (8003d24 <HAL_TIM_PWM_MspInit+0x90>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d10f      	bne.n	8003cc6 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ca6:	4b20      	ldr	r3, [pc, #128]	@ (8003d28 <HAL_TIM_PWM_MspInit+0x94>)
 8003ca8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cac:	4a1e      	ldr	r2, [pc, #120]	@ (8003d28 <HAL_TIM_PWM_MspInit+0x94>)
 8003cae:	f043 0301 	orr.w	r3, r3, #1
 8003cb2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8003d28 <HAL_TIM_PWM_MspInit+0x94>)
 8003cb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	617b      	str	r3, [r7, #20]
 8003cc2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003cc4:	e028      	b.n	8003d18 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM2)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cce:	d10f      	bne.n	8003cf0 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003cd0:	4b15      	ldr	r3, [pc, #84]	@ (8003d28 <HAL_TIM_PWM_MspInit+0x94>)
 8003cd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003cd6:	4a14      	ldr	r2, [pc, #80]	@ (8003d28 <HAL_TIM_PWM_MspInit+0x94>)
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003ce0:	4b11      	ldr	r3, [pc, #68]	@ (8003d28 <HAL_TIM_PWM_MspInit+0x94>)
 8003ce2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	613b      	str	r3, [r7, #16]
 8003cec:	693b      	ldr	r3, [r7, #16]
}
 8003cee:	e013      	b.n	8003d18 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM4)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8003d2c <HAL_TIM_PWM_MspInit+0x98>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d10e      	bne.n	8003d18 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8003d28 <HAL_TIM_PWM_MspInit+0x94>)
 8003cfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003d00:	4a09      	ldr	r2, [pc, #36]	@ (8003d28 <HAL_TIM_PWM_MspInit+0x94>)
 8003d02:	f043 0304 	orr.w	r3, r3, #4
 8003d06:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003d0a:	4b07      	ldr	r3, [pc, #28]	@ (8003d28 <HAL_TIM_PWM_MspInit+0x94>)
 8003d0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	68fb      	ldr	r3, [r7, #12]
}
 8003d18:	bf00      	nop
 8003d1a:	371c      	adds	r7, #28
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	40010000 	.word	0x40010000
 8003d28:	58024400 	.word	0x58024400
 8003d2c:	40000800 	.word	0x40000800

08003d30 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08c      	sub	sp, #48	@ 0x30
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d38:	f107 031c 	add.w	r3, r7, #28
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	605a      	str	r2, [r3, #4]
 8003d42:	609a      	str	r2, [r3, #8]
 8003d44:	60da      	str	r2, [r3, #12]
 8003d46:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a34      	ldr	r2, [pc, #208]	@ (8003e20 <HAL_TIM_IC_MspInit+0xf0>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d12e      	bne.n	8003db0 <HAL_TIM_IC_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d52:	4b34      	ldr	r3, [pc, #208]	@ (8003e24 <HAL_TIM_IC_MspInit+0xf4>)
 8003d54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003d58:	4a32      	ldr	r2, [pc, #200]	@ (8003e24 <HAL_TIM_IC_MspInit+0xf4>)
 8003d5a:	f043 0302 	orr.w	r3, r3, #2
 8003d5e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003d62:	4b30      	ldr	r3, [pc, #192]	@ (8003e24 <HAL_TIM_IC_MspInit+0xf4>)
 8003d64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	61bb      	str	r3, [r7, #24]
 8003d6e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d70:	4b2c      	ldr	r3, [pc, #176]	@ (8003e24 <HAL_TIM_IC_MspInit+0xf4>)
 8003d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d76:	4a2b      	ldr	r2, [pc, #172]	@ (8003e24 <HAL_TIM_IC_MspInit+0xf4>)
 8003d78:	f043 0304 	orr.w	r3, r3, #4
 8003d7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003d80:	4b28      	ldr	r3, [pc, #160]	@ (8003e24 <HAL_TIM_IC_MspInit+0xf4>)
 8003d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d86:	f003 0304 	and.w	r3, r3, #4
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003d8e:	2340      	movs	r3, #64	@ 0x40
 8003d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d92:	2302      	movs	r3, #2
 8003d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d96:	2301      	movs	r3, #1
 8003d98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003d9e:	2302      	movs	r3, #2
 8003da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003da2:	f107 031c 	add.w	r3, r7, #28
 8003da6:	4619      	mov	r1, r3
 8003da8:	481f      	ldr	r0, [pc, #124]	@ (8003e28 <HAL_TIM_IC_MspInit+0xf8>)
 8003daa:	f006 fb9f 	bl	800a4ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003dae:	e032      	b.n	8003e16 <HAL_TIM_IC_MspInit+0xe6>
  else if(htim_ic->Instance==TIM15)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a1d      	ldr	r2, [pc, #116]	@ (8003e2c <HAL_TIM_IC_MspInit+0xfc>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d12d      	bne.n	8003e16 <HAL_TIM_IC_MspInit+0xe6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003dba:	4b1a      	ldr	r3, [pc, #104]	@ (8003e24 <HAL_TIM_IC_MspInit+0xf4>)
 8003dbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dc0:	4a18      	ldr	r2, [pc, #96]	@ (8003e24 <HAL_TIM_IC_MspInit+0xf4>)
 8003dc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dc6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003dca:	4b16      	ldr	r3, [pc, #88]	@ (8003e24 <HAL_TIM_IC_MspInit+0xf4>)
 8003dcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dd4:	613b      	str	r3, [r7, #16]
 8003dd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003dd8:	4b12      	ldr	r3, [pc, #72]	@ (8003e24 <HAL_TIM_IC_MspInit+0xf4>)
 8003dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003dde:	4a11      	ldr	r2, [pc, #68]	@ (8003e24 <HAL_TIM_IC_MspInit+0xf4>)
 8003de0:	f043 0310 	orr.w	r3, r3, #16
 8003de4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003de8:	4b0e      	ldr	r3, [pc, #56]	@ (8003e24 <HAL_TIM_IC_MspInit+0xf4>)
 8003dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003dee:	f003 0310 	and.w	r3, r3, #16
 8003df2:	60fb      	str	r3, [r7, #12]
 8003df4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003df6:	2320      	movs	r3, #32
 8003df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e02:	2300      	movs	r3, #0
 8003e04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8003e06:	2304      	movs	r3, #4
 8003e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e0a:	f107 031c 	add.w	r3, r7, #28
 8003e0e:	4619      	mov	r1, r3
 8003e10:	4807      	ldr	r0, [pc, #28]	@ (8003e30 <HAL_TIM_IC_MspInit+0x100>)
 8003e12:	f006 fb6b 	bl	800a4ec <HAL_GPIO_Init>
}
 8003e16:	bf00      	nop
 8003e18:	3730      	adds	r7, #48	@ 0x30
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40000400 	.word	0x40000400
 8003e24:	58024400 	.word	0x58024400
 8003e28:	58020800 	.word	0x58020800
 8003e2c:	40014000 	.word	0x40014000
 8003e30:	58021000 	.word	0x58021000

08003e34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b08a      	sub	sp, #40	@ 0x28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e3c:	f107 0314 	add.w	r3, r7, #20
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	605a      	str	r2, [r3, #4]
 8003e46:	609a      	str	r2, [r3, #8]
 8003e48:	60da      	str	r2, [r3, #12]
 8003e4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a39      	ldr	r2, [pc, #228]	@ (8003f38 <HAL_TIM_MspPostInit+0x104>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d120      	bne.n	8003e98 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e56:	4b39      	ldr	r3, [pc, #228]	@ (8003f3c <HAL_TIM_MspPostInit+0x108>)
 8003e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e5c:	4a37      	ldr	r2, [pc, #220]	@ (8003f3c <HAL_TIM_MspPostInit+0x108>)
 8003e5e:	f043 0310 	orr.w	r3, r3, #16
 8003e62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003e66:	4b35      	ldr	r3, [pc, #212]	@ (8003f3c <HAL_TIM_MspPostInit+0x108>)
 8003e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e6c:	f003 0310 	and.w	r3, r3, #16
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_CH1N_Pin|TIM1_CH1_Pin;
 8003e74:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e82:	2300      	movs	r3, #0
 8003e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003e86:	2301      	movs	r3, #1
 8003e88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e8a:	f107 0314 	add.w	r3, r7, #20
 8003e8e:	4619      	mov	r1, r3
 8003e90:	482b      	ldr	r0, [pc, #172]	@ (8003f40 <HAL_TIM_MspPostInit+0x10c>)
 8003e92:	f006 fb2b 	bl	800a4ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003e96:	e04a      	b.n	8003f2e <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM2)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ea0:	d120      	bne.n	8003ee4 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ea2:	4b26      	ldr	r3, [pc, #152]	@ (8003f3c <HAL_TIM_MspPostInit+0x108>)
 8003ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ea8:	4a24      	ldr	r2, [pc, #144]	@ (8003f3c <HAL_TIM_MspPostInit+0x108>)
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003eb2:	4b22      	ldr	r3, [pc, #136]	@ (8003f3c <HAL_TIM_MspPostInit+0x108>)
 8003eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	60fb      	str	r3, [r7, #12]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003ec0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ec6:	2312      	movs	r3, #18
 8003ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ed6:	f107 0314 	add.w	r3, r7, #20
 8003eda:	4619      	mov	r1, r3
 8003edc:	4819      	ldr	r0, [pc, #100]	@ (8003f44 <HAL_TIM_MspPostInit+0x110>)
 8003ede:	f006 fb05 	bl	800a4ec <HAL_GPIO_Init>
}
 8003ee2:	e024      	b.n	8003f2e <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM4)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a17      	ldr	r2, [pc, #92]	@ (8003f48 <HAL_TIM_MspPostInit+0x114>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d11f      	bne.n	8003f2e <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003eee:	4b13      	ldr	r3, [pc, #76]	@ (8003f3c <HAL_TIM_MspPostInit+0x108>)
 8003ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ef4:	4a11      	ldr	r2, [pc, #68]	@ (8003f3c <HAL_TIM_MspPostInit+0x108>)
 8003ef6:	f043 0308 	orr.w	r3, r3, #8
 8003efa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003efe:	4b0f      	ldr	r3, [pc, #60]	@ (8003f3c <HAL_TIM_MspPostInit+0x108>)
 8003f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	60bb      	str	r3, [r7, #8]
 8003f0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003f0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f12:	2312      	movs	r3, #18
 8003f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f16:	2300      	movs	r3, #0
 8003f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003f1e:	2302      	movs	r3, #2
 8003f20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f22:	f107 0314 	add.w	r3, r7, #20
 8003f26:	4619      	mov	r1, r3
 8003f28:	4808      	ldr	r0, [pc, #32]	@ (8003f4c <HAL_TIM_MspPostInit+0x118>)
 8003f2a:	f006 fadf 	bl	800a4ec <HAL_GPIO_Init>
}
 8003f2e:	bf00      	nop
 8003f30:	3728      	adds	r7, #40	@ 0x28
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	40010000 	.word	0x40010000
 8003f3c:	58024400 	.word	0x58024400
 8003f40:	58021000 	.word	0x58021000
 8003f44:	58020000 	.word	0x58020000
 8003f48:	40000800 	.word	0x40000800
 8003f4c:	58020c00 	.word	0x58020c00

08003f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f54:	bf00      	nop
 8003f56:	e7fd      	b.n	8003f54 <NMI_Handler+0x4>

08003f58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f5c:	bf00      	nop
 8003f5e:	e7fd      	b.n	8003f5c <HardFault_Handler+0x4>

08003f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f64:	bf00      	nop
 8003f66:	e7fd      	b.n	8003f64 <MemManage_Handler+0x4>

08003f68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f6c:	bf00      	nop
 8003f6e:	e7fd      	b.n	8003f6c <BusFault_Handler+0x4>

08003f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f74:	bf00      	nop
 8003f76:	e7fd      	b.n	8003f74 <UsageFault_Handler+0x4>

08003f78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f7c:	bf00      	nop
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f86:	b480      	push	{r7}
 8003f88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f8a:	bf00      	nop
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f98:	bf00      	nop
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003fa6:	f000 fa0b 	bl	80043c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003faa:	bf00      	nop
 8003fac:	bd80      	pop	{r7, pc}
	...

08003fb0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003fb4:	4802      	ldr	r0, [pc, #8]	@ (8003fc0 <DMA1_Stream1_IRQHandler+0x10>)
 8003fb6:	f004 f985 	bl	80082c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003fba:	bf00      	nop
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	24000c48 	.word	0x24000c48

08003fc4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003fc8:	4802      	ldr	r0, [pc, #8]	@ (8003fd4 <DMA1_Stream2_IRQHandler+0x10>)
 8003fca:	f004 f97b 	bl	80082c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003fce:	bf00      	nop
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	24000bd0 	.word	0x24000bd0

08003fd8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003fdc:	4803      	ldr	r0, [pc, #12]	@ (8003fec <ADC_IRQHandler+0x14>)
 8003fde:	f001 f969 	bl	80052b4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003fe2:	4803      	ldr	r0, [pc, #12]	@ (8003ff0 <ADC_IRQHandler+0x18>)
 8003fe4:	f001 f966 	bl	80052b4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003fe8:	bf00      	nop
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	24000a80 	.word	0x24000a80
 8003ff0:	24000af0 	.word	0x24000af0

08003ff4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INP_COMP_IRQ_Pin);
 8003ff8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003ffc:	f006 fc4f 	bl	800a89e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(POWER_OFF_IRQ_Pin);
 8004000:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004004:	f006 fc4b 	bl	800a89e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004008:	bf00      	nop
 800400a:	bd80      	pop	{r7, pc}

0800400c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  return 1;
 8004010:	2301      	movs	r3, #1
}
 8004012:	4618      	mov	r0, r3
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <_kill>:

int _kill(int pid, int sig)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004026:	f00d fd25 	bl	8011a74 <__errno>
 800402a:	4603      	mov	r3, r0
 800402c:	2216      	movs	r2, #22
 800402e:	601a      	str	r2, [r3, #0]
  return -1;
 8004030:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004034:	4618      	mov	r0, r3
 8004036:	3708      	adds	r7, #8
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <_exit>:

void _exit (int status)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004044:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f7ff ffe7 	bl	800401c <_kill>
  while (1) {}    /* Make sure we hang here */
 800404e:	bf00      	nop
 8004050:	e7fd      	b.n	800404e <_exit+0x12>

08004052 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b086      	sub	sp, #24
 8004056:	af00      	add	r7, sp, #0
 8004058:	60f8      	str	r0, [r7, #12]
 800405a:	60b9      	str	r1, [r7, #8]
 800405c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800405e:	2300      	movs	r3, #0
 8004060:	617b      	str	r3, [r7, #20]
 8004062:	e00a      	b.n	800407a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004064:	f3af 8000 	nop.w
 8004068:	4601      	mov	r1, r0
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	1c5a      	adds	r2, r3, #1
 800406e:	60ba      	str	r2, [r7, #8]
 8004070:	b2ca      	uxtb	r2, r1
 8004072:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	3301      	adds	r3, #1
 8004078:	617b      	str	r3, [r7, #20]
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	429a      	cmp	r2, r3
 8004080:	dbf0      	blt.n	8004064 <_read+0x12>
  }

  return len;
 8004082:	687b      	ldr	r3, [r7, #4]
}
 8004084:	4618      	mov	r0, r3
 8004086:	3718      	adds	r7, #24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004098:	2300      	movs	r3, #0
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	e009      	b.n	80040b2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	60ba      	str	r2, [r7, #8]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	3301      	adds	r3, #1
 80040b0:	617b      	str	r3, [r7, #20]
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	dbf1      	blt.n	800409e <_write+0x12>
  }
  return len;
 80040ba:	687b      	ldr	r3, [r7, #4]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <_close>:

int _close(int file)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80040cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80040ec:	605a      	str	r2, [r3, #4]
  return 0;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <_isatty>:

int _isatty(int file)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004104:	2301      	movs	r3, #1
}
 8004106:	4618      	mov	r0, r3
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004112:	b480      	push	{r7}
 8004114:	b085      	sub	sp, #20
 8004116:	af00      	add	r7, sp, #0
 8004118:	60f8      	str	r0, [r7, #12]
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3714      	adds	r7, #20
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004134:	4a14      	ldr	r2, [pc, #80]	@ (8004188 <_sbrk+0x5c>)
 8004136:	4b15      	ldr	r3, [pc, #84]	@ (800418c <_sbrk+0x60>)
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004140:	4b13      	ldr	r3, [pc, #76]	@ (8004190 <_sbrk+0x64>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d102      	bne.n	800414e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004148:	4b11      	ldr	r3, [pc, #68]	@ (8004190 <_sbrk+0x64>)
 800414a:	4a12      	ldr	r2, [pc, #72]	@ (8004194 <_sbrk+0x68>)
 800414c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800414e:	4b10      	ldr	r3, [pc, #64]	@ (8004190 <_sbrk+0x64>)
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4413      	add	r3, r2
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	429a      	cmp	r2, r3
 800415a:	d207      	bcs.n	800416c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800415c:	f00d fc8a 	bl	8011a74 <__errno>
 8004160:	4603      	mov	r3, r0
 8004162:	220c      	movs	r2, #12
 8004164:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004166:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800416a:	e009      	b.n	8004180 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800416c:	4b08      	ldr	r3, [pc, #32]	@ (8004190 <_sbrk+0x64>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004172:	4b07      	ldr	r3, [pc, #28]	@ (8004190 <_sbrk+0x64>)
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4413      	add	r3, r2
 800417a:	4a05      	ldr	r2, [pc, #20]	@ (8004190 <_sbrk+0x64>)
 800417c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800417e:	68fb      	ldr	r3, [r7, #12]
}
 8004180:	4618      	mov	r0, r3
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	24050000 	.word	0x24050000
 800418c:	00000400 	.word	0x00000400
 8004190:	2400104c 	.word	0x2400104c
 8004194:	240011c0 	.word	0x240011c0

08004198 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800419c:	4b32      	ldr	r3, [pc, #200]	@ (8004268 <SystemInit+0xd0>)
 800419e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a2:	4a31      	ldr	r2, [pc, #196]	@ (8004268 <SystemInit+0xd0>)
 80041a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80041a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80041ac:	4b2f      	ldr	r3, [pc, #188]	@ (800426c <SystemInit+0xd4>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 030f 	and.w	r3, r3, #15
 80041b4:	2b06      	cmp	r3, #6
 80041b6:	d807      	bhi.n	80041c8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80041b8:	4b2c      	ldr	r3, [pc, #176]	@ (800426c <SystemInit+0xd4>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f023 030f 	bic.w	r3, r3, #15
 80041c0:	4a2a      	ldr	r2, [pc, #168]	@ (800426c <SystemInit+0xd4>)
 80041c2:	f043 0307 	orr.w	r3, r3, #7
 80041c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80041c8:	4b29      	ldr	r3, [pc, #164]	@ (8004270 <SystemInit+0xd8>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a28      	ldr	r2, [pc, #160]	@ (8004270 <SystemInit+0xd8>)
 80041ce:	f043 0301 	orr.w	r3, r3, #1
 80041d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80041d4:	4b26      	ldr	r3, [pc, #152]	@ (8004270 <SystemInit+0xd8>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80041da:	4b25      	ldr	r3, [pc, #148]	@ (8004270 <SystemInit+0xd8>)
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	4924      	ldr	r1, [pc, #144]	@ (8004270 <SystemInit+0xd8>)
 80041e0:	4b24      	ldr	r3, [pc, #144]	@ (8004274 <SystemInit+0xdc>)
 80041e2:	4013      	ands	r3, r2
 80041e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80041e6:	4b21      	ldr	r3, [pc, #132]	@ (800426c <SystemInit+0xd4>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d007      	beq.n	8004202 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80041f2:	4b1e      	ldr	r3, [pc, #120]	@ (800426c <SystemInit+0xd4>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f023 030f 	bic.w	r3, r3, #15
 80041fa:	4a1c      	ldr	r2, [pc, #112]	@ (800426c <SystemInit+0xd4>)
 80041fc:	f043 0307 	orr.w	r3, r3, #7
 8004200:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004202:	4b1b      	ldr	r3, [pc, #108]	@ (8004270 <SystemInit+0xd8>)
 8004204:	2200      	movs	r2, #0
 8004206:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004208:	4b19      	ldr	r3, [pc, #100]	@ (8004270 <SystemInit+0xd8>)
 800420a:	2200      	movs	r2, #0
 800420c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800420e:	4b18      	ldr	r3, [pc, #96]	@ (8004270 <SystemInit+0xd8>)
 8004210:	2200      	movs	r2, #0
 8004212:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004214:	4b16      	ldr	r3, [pc, #88]	@ (8004270 <SystemInit+0xd8>)
 8004216:	4a18      	ldr	r2, [pc, #96]	@ (8004278 <SystemInit+0xe0>)
 8004218:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800421a:	4b15      	ldr	r3, [pc, #84]	@ (8004270 <SystemInit+0xd8>)
 800421c:	4a17      	ldr	r2, [pc, #92]	@ (800427c <SystemInit+0xe4>)
 800421e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004220:	4b13      	ldr	r3, [pc, #76]	@ (8004270 <SystemInit+0xd8>)
 8004222:	4a17      	ldr	r2, [pc, #92]	@ (8004280 <SystemInit+0xe8>)
 8004224:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004226:	4b12      	ldr	r3, [pc, #72]	@ (8004270 <SystemInit+0xd8>)
 8004228:	2200      	movs	r2, #0
 800422a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800422c:	4b10      	ldr	r3, [pc, #64]	@ (8004270 <SystemInit+0xd8>)
 800422e:	4a14      	ldr	r2, [pc, #80]	@ (8004280 <SystemInit+0xe8>)
 8004230:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004232:	4b0f      	ldr	r3, [pc, #60]	@ (8004270 <SystemInit+0xd8>)
 8004234:	2200      	movs	r2, #0
 8004236:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004238:	4b0d      	ldr	r3, [pc, #52]	@ (8004270 <SystemInit+0xd8>)
 800423a:	4a11      	ldr	r2, [pc, #68]	@ (8004280 <SystemInit+0xe8>)
 800423c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800423e:	4b0c      	ldr	r3, [pc, #48]	@ (8004270 <SystemInit+0xd8>)
 8004240:	2200      	movs	r2, #0
 8004242:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004244:	4b0a      	ldr	r3, [pc, #40]	@ (8004270 <SystemInit+0xd8>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a09      	ldr	r2, [pc, #36]	@ (8004270 <SystemInit+0xd8>)
 800424a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800424e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004250:	4b07      	ldr	r3, [pc, #28]	@ (8004270 <SystemInit+0xd8>)
 8004252:	2200      	movs	r2, #0
 8004254:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004256:	4b0b      	ldr	r3, [pc, #44]	@ (8004284 <SystemInit+0xec>)
 8004258:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800425c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800425e:	bf00      	nop
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	e000ed00 	.word	0xe000ed00
 800426c:	52002000 	.word	0x52002000
 8004270:	58024400 	.word	0x58024400
 8004274:	eaf6ed7f 	.word	0xeaf6ed7f
 8004278:	02020200 	.word	0x02020200
 800427c:	01ff0000 	.word	0x01ff0000
 8004280:	01010280 	.word	0x01010280
 8004284:	52004000 	.word	0x52004000

08004288 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004288:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80042c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800428c:	f7ff ff84 	bl	8004198 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004290:	480c      	ldr	r0, [pc, #48]	@ (80042c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004292:	490d      	ldr	r1, [pc, #52]	@ (80042c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004294:	4a0d      	ldr	r2, [pc, #52]	@ (80042cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004298:	e002      	b.n	80042a0 <LoopCopyDataInit>

0800429a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800429a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800429c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800429e:	3304      	adds	r3, #4

080042a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042a4:	d3f9      	bcc.n	800429a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042a6:	4a0a      	ldr	r2, [pc, #40]	@ (80042d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80042a8:	4c0a      	ldr	r4, [pc, #40]	@ (80042d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80042aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042ac:	e001      	b.n	80042b2 <LoopFillZerobss>

080042ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042b0:	3204      	adds	r2, #4

080042b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042b4:	d3fb      	bcc.n	80042ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80042b6:	f00d fbe3 	bl	8011a80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042ba:	f7fe f9a7 	bl	800260c <main>
  bx  lr
 80042be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80042c0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80042c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80042c8:	24000210 	.word	0x24000210
  ldr r2, =_sidata
 80042cc:	080147a0 	.word	0x080147a0
  ldr r2, =_sbss
 80042d0:	240002d0 	.word	0x240002d0
  ldr r4, =_ebss
 80042d4:	240011bc 	.word	0x240011bc

080042d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042d8:	e7fe      	b.n	80042d8 <ADC3_IRQHandler>
	...

080042dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042e2:	2003      	movs	r0, #3
 80042e4:	f003 f9ec 	bl	80076c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80042e8:	f007 f8be 	bl	800b468 <HAL_RCC_GetSysClockFreq>
 80042ec:	4602      	mov	r2, r0
 80042ee:	4b15      	ldr	r3, [pc, #84]	@ (8004344 <HAL_Init+0x68>)
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	0a1b      	lsrs	r3, r3, #8
 80042f4:	f003 030f 	and.w	r3, r3, #15
 80042f8:	4913      	ldr	r1, [pc, #76]	@ (8004348 <HAL_Init+0x6c>)
 80042fa:	5ccb      	ldrb	r3, [r1, r3]
 80042fc:	f003 031f 	and.w	r3, r3, #31
 8004300:	fa22 f303 	lsr.w	r3, r2, r3
 8004304:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004306:	4b0f      	ldr	r3, [pc, #60]	@ (8004344 <HAL_Init+0x68>)
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	4a0e      	ldr	r2, [pc, #56]	@ (8004348 <HAL_Init+0x6c>)
 8004310:	5cd3      	ldrb	r3, [r2, r3]
 8004312:	f003 031f 	and.w	r3, r3, #31
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	fa22 f303 	lsr.w	r3, r2, r3
 800431c:	4a0b      	ldr	r2, [pc, #44]	@ (800434c <HAL_Init+0x70>)
 800431e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004320:	4a0b      	ldr	r2, [pc, #44]	@ (8004350 <HAL_Init+0x74>)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004326:	2000      	movs	r0, #0
 8004328:	f000 f814 	bl	8004354 <HAL_InitTick>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e002      	b.n	800433c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004336:	f7ff f935 	bl	80035a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	58024400 	.word	0x58024400
 8004348:	080143b8 	.word	0x080143b8
 800434c:	2400003c 	.word	0x2400003c
 8004350:	24000038 	.word	0x24000038

08004354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800435c:	4b15      	ldr	r3, [pc, #84]	@ (80043b4 <HAL_InitTick+0x60>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e021      	b.n	80043ac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004368:	4b13      	ldr	r3, [pc, #76]	@ (80043b8 <HAL_InitTick+0x64>)
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	4b11      	ldr	r3, [pc, #68]	@ (80043b4 <HAL_InitTick+0x60>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	4619      	mov	r1, r3
 8004372:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004376:	fbb3 f3f1 	udiv	r3, r3, r1
 800437a:	fbb2 f3f3 	udiv	r3, r2, r3
 800437e:	4618      	mov	r0, r3
 8004380:	f003 f9d1 	bl	8007726 <HAL_SYSTICK_Config>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e00e      	b.n	80043ac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b0f      	cmp	r3, #15
 8004392:	d80a      	bhi.n	80043aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004394:	2200      	movs	r2, #0
 8004396:	6879      	ldr	r1, [r7, #4]
 8004398:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800439c:	f003 f99b 	bl	80076d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043a0:	4a06      	ldr	r2, [pc, #24]	@ (80043bc <HAL_InitTick+0x68>)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
 80043a8:	e000      	b.n	80043ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	24000044 	.word	0x24000044
 80043b8:	24000038 	.word	0x24000038
 80043bc:	24000040 	.word	0x24000040

080043c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80043c4:	4b06      	ldr	r3, [pc, #24]	@ (80043e0 <HAL_IncTick+0x20>)
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	461a      	mov	r2, r3
 80043ca:	4b06      	ldr	r3, [pc, #24]	@ (80043e4 <HAL_IncTick+0x24>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4413      	add	r3, r2
 80043d0:	4a04      	ldr	r2, [pc, #16]	@ (80043e4 <HAL_IncTick+0x24>)
 80043d2:	6013      	str	r3, [r2, #0]
}
 80043d4:	bf00      	nop
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	24000044 	.word	0x24000044
 80043e4:	24001050 	.word	0x24001050

080043e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
  return uwTick;
 80043ec:	4b03      	ldr	r3, [pc, #12]	@ (80043fc <HAL_GetTick+0x14>)
 80043ee:	681b      	ldr	r3, [r3, #0]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	24001050 	.word	0x24001050

08004400 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004408:	f7ff ffee 	bl	80043e8 <HAL_GetTick>
 800440c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004418:	d005      	beq.n	8004426 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800441a:	4b0a      	ldr	r3, [pc, #40]	@ (8004444 <HAL_Delay+0x44>)
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	461a      	mov	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4413      	add	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004426:	bf00      	nop
 8004428:	f7ff ffde 	bl	80043e8 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	429a      	cmp	r2, r3
 8004436:	d8f7      	bhi.n	8004428 <HAL_Delay+0x28>
  {
  }
}
 8004438:	bf00      	nop
 800443a:	bf00      	nop
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	24000044 	.word	0x24000044

08004448 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8004450:	4b06      	ldr	r3, [pc, #24]	@ (800446c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8004458:	4904      	ldr	r1, [pc, #16]	@ (800446c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4313      	orrs	r3, r2
 800445e:	604b      	str	r3, [r1, #4]
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	58000400 	.word	0x58000400

08004470 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800447a:	4b07      	ldr	r3, [pc, #28]	@ (8004498 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	43db      	mvns	r3, r3
 8004482:	401a      	ands	r2, r3
 8004484:	4904      	ldr	r1, [pc, #16]	@ (8004498 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	4313      	orrs	r3, r2
 800448a:	604b      	str	r3, [r1, #4]
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr
 8004498:	58000400 	.word	0x58000400

0800449c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	431a      	orrs	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	609a      	str	r2, [r3, #8]
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b083      	sub	sp, #12
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
 80044ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	609a      	str	r2, [r3, #8]
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004504:	b480      	push	{r7}
 8004506:	b087      	sub	sp, #28
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
 8004510:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	3360      	adds	r3, #96	@ 0x60
 8004516:	461a      	mov	r2, r3
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	4413      	add	r3, r2
 800451e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4a10      	ldr	r2, [pc, #64]	@ (8004564 <LL_ADC_SetOffset+0x60>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d10b      	bne.n	8004540 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	4313      	orrs	r3, r2
 8004536:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800453e:	e00b      	b.n	8004558 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	430b      	orrs	r3, r1
 8004552:	431a      	orrs	r2, r3
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	601a      	str	r2, [r3, #0]
}
 8004558:	bf00      	nop
 800455a:	371c      	adds	r7, #28
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr
 8004564:	58026000 	.word	0x58026000

08004568 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	3360      	adds	r3, #96	@ 0x60
 8004576:	461a      	mov	r2, r3
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4413      	add	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004588:	4618      	mov	r0, r3
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	f003 031f 	and.w	r3, r3, #31
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	fa01 f303 	lsl.w	r3, r1, r3
 80045b4:	431a      	orrs	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	611a      	str	r2, [r3, #16]
}
 80045ba:	bf00      	nop
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
	...

080045c8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b087      	sub	sp, #28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4a0c      	ldr	r2, [pc, #48]	@ (8004608 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d00e      	beq.n	80045fa <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	3360      	adds	r3, #96	@ 0x60
 80045e0:	461a      	mov	r2, r3
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4413      	add	r3, r2
 80045e8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	431a      	orrs	r2, r3
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	601a      	str	r2, [r3, #0]
  }
}
 80045fa:	bf00      	nop
 80045fc:	371c      	adds	r7, #28
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	58026000 	.word	0x58026000

0800460c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4a0c      	ldr	r2, [pc, #48]	@ (800464c <LL_ADC_SetOffsetSaturation+0x40>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d10e      	bne.n	800463e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	3360      	adds	r3, #96	@ 0x60
 8004624:	461a      	mov	r2, r3
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4413      	add	r3, r2
 800462c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	431a      	orrs	r2, r3
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800463e:	bf00      	nop
 8004640:	371c      	adds	r7, #28
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	58026000 	.word	0x58026000

08004650 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004650:	b480      	push	{r7}
 8004652:	b087      	sub	sp, #28
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4a0c      	ldr	r2, [pc, #48]	@ (8004690 <LL_ADC_SetOffsetSign+0x40>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d10e      	bne.n	8004682 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	3360      	adds	r3, #96	@ 0x60
 8004668:	461a      	mov	r2, r3
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	431a      	orrs	r2, r3
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8004682:	bf00      	nop
 8004684:	371c      	adds	r7, #28
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	58026000 	.word	0x58026000

08004694 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004694:	b480      	push	{r7}
 8004696:	b087      	sub	sp, #28
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	3360      	adds	r3, #96	@ 0x60
 80046a4:	461a      	mov	r2, r3
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4a0c      	ldr	r2, [pc, #48]	@ (80046e4 <LL_ADC_SetOffsetState+0x50>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d108      	bne.n	80046c8 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	431a      	orrs	r2, r3
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80046c6:	e007      	b.n	80046d8 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	431a      	orrs	r2, r3
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	601a      	str	r2, [r3, #0]
}
 80046d8:	bf00      	nop
 80046da:	371c      	adds	r7, #28
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr
 80046e4:	58026000 	.word	0x58026000

080046e8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80046fc:	2301      	movs	r3, #1
 80046fe:	e000      	b.n	8004702 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800470e:	b480      	push	{r7}
 8004710:	b087      	sub	sp, #28
 8004712:	af00      	add	r7, sp, #0
 8004714:	60f8      	str	r0, [r7, #12]
 8004716:	60b9      	str	r1, [r7, #8]
 8004718:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	3330      	adds	r3, #48	@ 0x30
 800471e:	461a      	mov	r2, r3
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	0a1b      	lsrs	r3, r3, #8
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	f003 030c 	and.w	r3, r3, #12
 800472a:	4413      	add	r3, r2
 800472c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	f003 031f 	and.w	r3, r3, #31
 8004738:	211f      	movs	r1, #31
 800473a:	fa01 f303 	lsl.w	r3, r1, r3
 800473e:	43db      	mvns	r3, r3
 8004740:	401a      	ands	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	0e9b      	lsrs	r3, r3, #26
 8004746:	f003 011f 	and.w	r1, r3, #31
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	f003 031f 	and.w	r3, r3, #31
 8004750:	fa01 f303 	lsl.w	r3, r1, r3
 8004754:	431a      	orrs	r2, r3
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800475a:	bf00      	nop
 800475c:	371c      	adds	r7, #28
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8004766:	b480      	push	{r7}
 8004768:	b083      	sub	sp, #12
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
 800476e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f023 0203 	bic.w	r2, r3, #3
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	60da      	str	r2, [r3, #12]
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f043 0201 	orr.w	r2, r3, #1
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	60da      	str	r2, [r3, #12]
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a08      	ldr	r2, [pc, #32]	@ (80047dc <LL_ADC_REG_SetDMATransferMode+0x30>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d107      	bne.n	80047ce <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	f023 0203 	bic.w	r2, r3, #3
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	431a      	orrs	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	60da      	str	r2, [r3, #12]
  }
}
 80047ce:	bf00      	nop
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	58026000 	.word	0x58026000

080047e0 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047ec:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d101      	bne.n	80047f8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80047f4:	2301      	movs	r3, #1
 80047f6:	e000      	b.n	80047fa <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004806:	b480      	push	{r7}
 8004808:	b087      	sub	sp, #28
 800480a:	af00      	add	r7, sp, #0
 800480c:	60f8      	str	r0, [r7, #12]
 800480e:	60b9      	str	r1, [r7, #8]
 8004810:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	3314      	adds	r3, #20
 8004816:	461a      	mov	r2, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	0e5b      	lsrs	r3, r3, #25
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	4413      	add	r3, r2
 8004824:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	0d1b      	lsrs	r3, r3, #20
 800482e:	f003 031f 	and.w	r3, r3, #31
 8004832:	2107      	movs	r1, #7
 8004834:	fa01 f303 	lsl.w	r3, r1, r3
 8004838:	43db      	mvns	r3, r3
 800483a:	401a      	ands	r2, r3
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	0d1b      	lsrs	r3, r3, #20
 8004840:	f003 031f 	and.w	r3, r3, #31
 8004844:	6879      	ldr	r1, [r7, #4]
 8004846:	fa01 f303 	lsl.w	r3, r1, r3
 800484a:	431a      	orrs	r2, r3
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004850:	bf00      	nop
 8004852:	371c      	adds	r7, #28
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4a1a      	ldr	r2, [pc, #104]	@ (80048d4 <LL_ADC_SetChannelSingleDiff+0x78>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d115      	bne.n	800489c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800487c:	43db      	mvns	r3, r3
 800487e:	401a      	ands	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f003 0318 	and.w	r3, r3, #24
 8004886:	4914      	ldr	r1, [pc, #80]	@ (80048d8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004888:	40d9      	lsrs	r1, r3
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	400b      	ands	r3, r1
 800488e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004892:	431a      	orrs	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800489a:	e014      	b.n	80048c6 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048a8:	43db      	mvns	r3, r3
 80048aa:	401a      	ands	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f003 0318 	and.w	r3, r3, #24
 80048b2:	4909      	ldr	r1, [pc, #36]	@ (80048d8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80048b4:	40d9      	lsrs	r1, r3
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	400b      	ands	r3, r1
 80048ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048be:	431a      	orrs	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 80048c6:	bf00      	nop
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	58026000 	.word	0x58026000
 80048d8:	000fffff 	.word	0x000fffff

080048dc <LL_ADC_SetAnalogWDMonitChannels>:
  *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
  *         (2) On STM32H7, parameter available only on ADC instance: ADC2.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 80048dc:	b480      	push	{r7}
 80048de:	b087      	sub	sp, #28
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	330c      	adds	r3, #12
 80048ec:	4618      	mov	r0, r3
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	0d1b      	lsrs	r3, r3, #20
 80048f2:	f003 0103 	and.w	r1, r3, #3
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	f003 0201 	and.w	r2, r3, #1
 80048fc:	4613      	mov	r3, r2
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	4413      	add	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	440b      	add	r3, r1
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4403      	add	r3, r0
 800490a:	617b      	str	r3, [r7, #20]
                                                      + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	68b9      	ldr	r1, [r7, #8]
 8004912:	4b08      	ldr	r3, [pc, #32]	@ (8004934 <LL_ADC_SetAnalogWDMonitChannels+0x58>)
 8004914:	400b      	ands	r3, r1
 8004916:	43db      	mvns	r3, r3
 8004918:	401a      	ands	r2, r3
 800491a:	6879      	ldr	r1, [r7, #4]
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	400b      	ands	r3, r1
 8004920:	431a      	orrs	r2, r3
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8004926:	bf00      	nop
 8004928:	371c      	adds	r7, #28
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	7dcfffff 	.word	0x7dcfffff

08004938 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdHighValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue, uint32_t AWDThresholdLowValue)
{
 8004938:	b480      	push	{r7}
 800493a:	b089      	sub	sp, #36	@ 0x24
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  if (ADCx == ADC3)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4a29      	ldr	r2, [pc, #164]	@ (80049f0 <LL_ADC_ConfigAnalogWDThresholds+0xb8>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d115      	bne.n	800497a <LL_ADC_ConfigAnalogWDThresholds+0x42>
  {
    uint32_t __IO *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	3320      	adds	r3, #32
 8004952:	461a      	mov	r2, r3
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	0d1b      	lsrs	r3, r3, #20
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	f003 030c 	and.w	r3, r3, #12
 800495e:	4413      	add	r3, r2
 8004960:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 22f0 	and.w	r2, r3, #4026593280	@ 0xf000f000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	0419      	lsls	r1, r3, #16
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	430b      	orrs	r3, r1
 8004972:	431a      	orrs	r2, r3
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	601a      	str	r2, [r3, #0]
                                                         + (LL_ADC_AWD_THRESHOLD_HIGH));

    MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdLowValue);
    MODIFY_REG(*preg2, ADC_HTR_HT, AWDThresholdHighValue);
  }
}
 8004978:	e034      	b.n	80049e4 <LL_ADC_ConfigAnalogWDThresholds+0xac>
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS) * 2UL)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	3320      	adds	r3, #32
 800497e:	4618      	mov	r0, r3
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	0d1b      	lsrs	r3, r3, #20
 8004984:	f003 0103 	and.w	r1, r3, #3
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f003 0201 	and.w	r2, r3, #1
 800498e:	4613      	mov	r3, r2
 8004990:	011b      	lsls	r3, r3, #4
 8004992:	4413      	add	r3, r2
 8004994:	440b      	add	r3, r1
 8004996:	005b      	lsls	r3, r3, #1
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4403      	add	r3, r0
 800499c:	61fb      	str	r3, [r7, #28]
    __IO uint32_t *preg2 = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS) * 2UL)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	3320      	adds	r3, #32
 80049a2:	4618      	mov	r0, r3
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	0d1b      	lsrs	r3, r3, #20
 80049a8:	f003 0103 	and.w	r1, r3, #3
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f003 0201 	and.w	r2, r3, #1
 80049b2:	4613      	mov	r3, r2
 80049b4:	011b      	lsls	r3, r3, #4
 80049b6:	4413      	add	r3, r2
 80049b8:	440b      	add	r3, r1
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	3301      	adds	r3, #1
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4403      	add	r3, r0
 80049c2:	61bb      	str	r3, [r7, #24]
    MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdLowValue);
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 427c 	and.w	r2, r3, #4227858432	@ 0xfc000000
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	431a      	orrs	r2, r3
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	601a      	str	r2, [r3, #0]
    MODIFY_REG(*preg2, ADC_HTR_HT, AWDThresholdHighValue);
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 427c 	and.w	r2, r3, #4227858432	@ 0xfc000000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	431a      	orrs	r2, r3
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	601a      	str	r2, [r3, #0]
}
 80049e4:	bf00      	nop
 80049e6:	3724      	adds	r7, #36	@ 0x24
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	58026000 	.word	0x58026000

080049f4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f003 031f 	and.w	r3, r3, #31
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	4b04      	ldr	r3, [pc, #16]	@ (8004a4c <LL_ADC_DisableDeepPowerDown+0x20>)
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6093      	str	r3, [r2, #8]
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	5fffffc0 	.word	0x5fffffc0

08004a50 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a64:	d101      	bne.n	8004a6a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004a66:	2301      	movs	r3, #1
 8004a68:	e000      	b.n	8004a6c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	4b05      	ldr	r3, [pc, #20]	@ (8004a9c <LL_ADC_EnableInternalRegulator+0x24>)
 8004a86:	4013      	ands	r3, r2
 8004a88:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	6fffffc0 	.word	0x6fffffc0

08004aa0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ab0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ab4:	d101      	bne.n	8004aba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e000      	b.n	8004abc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	4b05      	ldr	r3, [pc, #20]	@ (8004aec <LL_ADC_Enable+0x24>)
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	f043 0201 	orr.w	r2, r3, #1
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	7fffffc0 	.word	0x7fffffc0

08004af0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	4b05      	ldr	r3, [pc, #20]	@ (8004b14 <LL_ADC_Disable+0x24>)
 8004afe:	4013      	ands	r3, r2
 8004b00:	f043 0202 	orr.w	r2, r3, #2
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr
 8004b14:	7fffffc0 	.word	0x7fffffc0

08004b18 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d101      	bne.n	8004b30 <LL_ADC_IsEnabled+0x18>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e000      	b.n	8004b32 <LL_ADC_IsEnabled+0x1a>
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d101      	bne.n	8004b56 <LL_ADC_IsDisableOngoing+0x18>
 8004b52:	2301      	movs	r3, #1
 8004b54:	e000      	b.n	8004b58 <LL_ADC_IsDisableOngoing+0x1a>
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	4b05      	ldr	r3, [pc, #20]	@ (8004b88 <LL_ADC_REG_StartConversion+0x24>)
 8004b72:	4013      	ands	r3, r2
 8004b74:	f043 0204 	orr.w	r2, r3, #4
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	7fffffc0 	.word	0x7fffffc0

08004b8c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b04      	cmp	r3, #4
 8004b9e:	d101      	bne.n	8004ba4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e000      	b.n	8004ba6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b083      	sub	sp, #12
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f003 0308 	and.w	r3, r3, #8
 8004bc2:	2b08      	cmp	r3, #8
 8004bc4:	d101      	bne.n	8004bca <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e000      	b.n	8004bcc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2280      	movs	r2, #128	@ 0x80
 8004be4:	601a      	str	r2, [r3, #0]
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b083      	sub	sp, #12
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c00:	601a      	str	r2, [r3, #0]
}
 8004c02:	bf00      	nop
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c1c:	601a      	str	r2, [r3, #0]
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	605a      	str	r2, [r3, #4]
}
 8004c3e:	bf00      	nop
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	605a      	str	r2, [r3, #4]
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b083      	sub	sp, #12
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	605a      	str	r2, [r3, #4]
}
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b083      	sub	sp, #12
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	605a      	str	r2, [r3, #4]
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b083      	sub	sp, #12
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	605a      	str	r2, [r3, #4]
}
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b083      	sub	sp, #12
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	605a      	str	r2, [r3, #4]
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
	...

08004cec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004cec:	b590      	push	{r4, r7, lr}
 8004cee:	b089      	sub	sp, #36	@ 0x24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e1ee      	b.n	80050e4 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d109      	bne.n	8004d28 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7fe fc5f 	bl	80035d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7ff fe8f 	bl	8004a50 <LL_ADC_IsDeepPowerDownEnabled>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d004      	beq.n	8004d42 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7ff fe75 	bl	8004a2c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7ff feaa 	bl	8004aa0 <LL_ADC_IsInternalRegulatorEnabled>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d114      	bne.n	8004d7c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7ff fe8e 	bl	8004a78 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d5c:	4b8e      	ldr	r3, [pc, #568]	@ (8004f98 <HAL_ADC_Init+0x2ac>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	099b      	lsrs	r3, r3, #6
 8004d62:	4a8e      	ldr	r2, [pc, #568]	@ (8004f9c <HAL_ADC_Init+0x2b0>)
 8004d64:	fba2 2303 	umull	r2, r3, r2, r3
 8004d68:	099b      	lsrs	r3, r3, #6
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004d6e:	e002      	b.n	8004d76 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	3b01      	subs	r3, #1
 8004d74:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1f9      	bne.n	8004d70 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7ff fe8d 	bl	8004aa0 <LL_ADC_IsInternalRegulatorEnabled>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10d      	bne.n	8004da8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d90:	f043 0210 	orr.w	r2, r3, #16
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d9c:	f043 0201 	orr.w	r2, r3, #1
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7ff feed 	bl	8004b8c <LL_ADC_REG_IsConversionOngoing>
 8004db2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004db8:	f003 0310 	and.w	r3, r3, #16
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f040 8188 	bne.w	80050d2 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f040 8184 	bne.w	80050d2 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dce:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004dd2:	f043 0202 	orr.w	r2, r3, #2
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7ff fe9a 	bl	8004b18 <LL_ADC_IsEnabled>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d136      	bne.n	8004e58 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a6c      	ldr	r2, [pc, #432]	@ (8004fa0 <HAL_ADC_Init+0x2b4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d004      	beq.n	8004dfe <HAL_ADC_Init+0x112>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a6a      	ldr	r2, [pc, #424]	@ (8004fa4 <HAL_ADC_Init+0x2b8>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d10e      	bne.n	8004e1c <HAL_ADC_Init+0x130>
 8004dfe:	4868      	ldr	r0, [pc, #416]	@ (8004fa0 <HAL_ADC_Init+0x2b4>)
 8004e00:	f7ff fe8a 	bl	8004b18 <LL_ADC_IsEnabled>
 8004e04:	4604      	mov	r4, r0
 8004e06:	4867      	ldr	r0, [pc, #412]	@ (8004fa4 <HAL_ADC_Init+0x2b8>)
 8004e08:	f7ff fe86 	bl	8004b18 <LL_ADC_IsEnabled>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	4323      	orrs	r3, r4
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	bf0c      	ite	eq
 8004e14:	2301      	moveq	r3, #1
 8004e16:	2300      	movne	r3, #0
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	e008      	b.n	8004e2e <HAL_ADC_Init+0x142>
 8004e1c:	4862      	ldr	r0, [pc, #392]	@ (8004fa8 <HAL_ADC_Init+0x2bc>)
 8004e1e:	f7ff fe7b 	bl	8004b18 <LL_ADC_IsEnabled>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	bf0c      	ite	eq
 8004e28:	2301      	moveq	r3, #1
 8004e2a:	2300      	movne	r3, #0
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d012      	beq.n	8004e58 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a5a      	ldr	r2, [pc, #360]	@ (8004fa0 <HAL_ADC_Init+0x2b4>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d004      	beq.n	8004e46 <HAL_ADC_Init+0x15a>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a58      	ldr	r2, [pc, #352]	@ (8004fa4 <HAL_ADC_Init+0x2b8>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d101      	bne.n	8004e4a <HAL_ADC_Init+0x15e>
 8004e46:	4a59      	ldr	r2, [pc, #356]	@ (8004fac <HAL_ADC_Init+0x2c0>)
 8004e48:	e000      	b.n	8004e4c <HAL_ADC_Init+0x160>
 8004e4a:	4a59      	ldr	r2, [pc, #356]	@ (8004fb0 <HAL_ADC_Init+0x2c4>)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	4619      	mov	r1, r3
 8004e52:	4610      	mov	r0, r2
 8004e54:	f7ff fb22 	bl	800449c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a52      	ldr	r2, [pc, #328]	@ (8004fa8 <HAL_ADC_Init+0x2bc>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d129      	bne.n	8004eb6 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	7e5b      	ldrb	r3, [r3, #25]
 8004e66:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004e6c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8004e72:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d013      	beq.n	8004ea4 <HAL_ADC_Init+0x1b8>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	2b0c      	cmp	r3, #12
 8004e82:	d00d      	beq.n	8004ea0 <HAL_ADC_Init+0x1b4>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	2b1c      	cmp	r3, #28
 8004e8a:	d007      	beq.n	8004e9c <HAL_ADC_Init+0x1b0>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	2b18      	cmp	r3, #24
 8004e92:	d101      	bne.n	8004e98 <HAL_ADC_Init+0x1ac>
 8004e94:	2318      	movs	r3, #24
 8004e96:	e006      	b.n	8004ea6 <HAL_ADC_Init+0x1ba>
 8004e98:	2300      	movs	r3, #0
 8004e9a:	e004      	b.n	8004ea6 <HAL_ADC_Init+0x1ba>
 8004e9c:	2310      	movs	r3, #16
 8004e9e:	e002      	b.n	8004ea6 <HAL_ADC_Init+0x1ba>
 8004ea0:	2308      	movs	r3, #8
 8004ea2:	e000      	b.n	8004ea6 <HAL_ADC_Init+0x1ba>
 8004ea4:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8004ea6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004eae:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	61bb      	str	r3, [r7, #24]
 8004eb4:	e00e      	b.n	8004ed4 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	7e5b      	ldrb	r3, [r3, #25]
 8004eba:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004ec0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004ec6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ece:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d106      	bne.n	8004eec <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	045b      	lsls	r3, r3, #17
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d009      	beq.n	8004f08 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f00:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a26      	ldr	r2, [pc, #152]	@ (8004fa8 <HAL_ADC_Init+0x2bc>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d115      	bne.n	8004f3e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68da      	ldr	r2, [r3, #12]
 8004f18:	4b26      	ldr	r3, [pc, #152]	@ (8004fb4 <HAL_ADC_Init+0x2c8>)
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	6812      	ldr	r2, [r2, #0]
 8004f20:	69b9      	ldr	r1, [r7, #24]
 8004f22:	430b      	orrs	r3, r1
 8004f24:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	611a      	str	r2, [r3, #16]
 8004f3c:	e009      	b.n	8004f52 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68da      	ldr	r2, [r3, #12]
 8004f44:	4b1c      	ldr	r3, [pc, #112]	@ (8004fb8 <HAL_ADC_Init+0x2cc>)
 8004f46:	4013      	ands	r3, r2
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	6812      	ldr	r2, [r2, #0]
 8004f4c:	69b9      	ldr	r1, [r7, #24]
 8004f4e:	430b      	orrs	r3, r1
 8004f50:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7ff fe18 	bl	8004b8c <LL_ADC_REG_IsConversionOngoing>
 8004f5c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7ff fe25 	bl	8004bb2 <LL_ADC_INJ_IsConversionOngoing>
 8004f68:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f040 808e 	bne.w	800508e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f040 808a 	bne.w	800508e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8004fa8 <HAL_ADC_Init+0x2bc>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d11b      	bne.n	8004fbc <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	7e1b      	ldrb	r3, [r3, #24]
 8004f88:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004f90:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004f92:	4313      	orrs	r3, r2
 8004f94:	61bb      	str	r3, [r7, #24]
 8004f96:	e018      	b.n	8004fca <HAL_ADC_Init+0x2de>
 8004f98:	24000038 	.word	0x24000038
 8004f9c:	053e2d63 	.word	0x053e2d63
 8004fa0:	40022000 	.word	0x40022000
 8004fa4:	40022100 	.word	0x40022100
 8004fa8:	58026000 	.word	0x58026000
 8004fac:	40022300 	.word	0x40022300
 8004fb0:	58026300 	.word	0x58026300
 8004fb4:	fff04007 	.word	0xfff04007
 8004fb8:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	7e1b      	ldrb	r3, [r3, #24]
 8004fc0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68da      	ldr	r2, [r3, #12]
 8004fd0:	4b46      	ldr	r3, [pc, #280]	@ (80050ec <HAL_ADC_Init+0x400>)
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6812      	ldr	r2, [r2, #0]
 8004fd8:	69b9      	ldr	r1, [r7, #24]
 8004fda:	430b      	orrs	r3, r1
 8004fdc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d137      	bne.n	8005058 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fec:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a3f      	ldr	r2, [pc, #252]	@ (80050f0 <HAL_ADC_Init+0x404>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d116      	bne.n	8005026 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	691a      	ldr	r2, [r3, #16]
 8004ffe:	4b3d      	ldr	r3, [pc, #244]	@ (80050f4 <HAL_ADC_Init+0x408>)
 8005000:	4013      	ands	r3, r2
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800500a:	4311      	orrs	r1, r2
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005010:	4311      	orrs	r1, r2
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005016:	430a      	orrs	r2, r1
 8005018:	431a      	orrs	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 0201 	orr.w	r2, r2, #1
 8005022:	611a      	str	r2, [r3, #16]
 8005024:	e020      	b.n	8005068 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	4b32      	ldr	r3, [pc, #200]	@ (80050f8 <HAL_ADC_Init+0x40c>)
 800502e:	4013      	ands	r3, r2
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005034:	3a01      	subs	r2, #1
 8005036:	0411      	lsls	r1, r2, #16
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800503c:	4311      	orrs	r1, r2
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005042:	4311      	orrs	r1, r2
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005048:	430a      	orrs	r2, r1
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f042 0201 	orr.w	r2, r2, #1
 8005054:	611a      	str	r2, [r3, #16]
 8005056:	e007      	b.n	8005068 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	691a      	ldr	r2, [r3, #16]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f022 0201 	bic.w	r2, r2, #1
 8005066:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a1b      	ldr	r2, [pc, #108]	@ (80050f0 <HAL_ADC_Init+0x404>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d002      	beq.n	800508e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f001 fd99 	bl	8006bc0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d10c      	bne.n	80050b0 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800509c:	f023 010f 	bic.w	r1, r3, #15
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	69db      	ldr	r3, [r3, #28]
 80050a4:	1e5a      	subs	r2, r3, #1
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80050ae:	e007      	b.n	80050c0 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f022 020f 	bic.w	r2, r2, #15
 80050be:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050c4:	f023 0303 	bic.w	r3, r3, #3
 80050c8:	f043 0201 	orr.w	r2, r3, #1
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	661a      	str	r2, [r3, #96]	@ 0x60
 80050d0:	e007      	b.n	80050e2 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050d6:	f043 0210 	orr.w	r2, r3, #16
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80050e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3724      	adds	r7, #36	@ 0x24
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd90      	pop	{r4, r7, pc}
 80050ec:	ffffbffc 	.word	0xffffbffc
 80050f0:	58026000 	.word	0x58026000
 80050f4:	fc00f81f 	.word	0xfc00f81f
 80050f8:	fc00f81e 	.word	0xfc00f81e

080050fc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a60      	ldr	r2, [pc, #384]	@ (8005290 <HAL_ADC_Start_DMA+0x194>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d004      	beq.n	800511c <HAL_ADC_Start_DMA+0x20>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a5f      	ldr	r2, [pc, #380]	@ (8005294 <HAL_ADC_Start_DMA+0x198>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d101      	bne.n	8005120 <HAL_ADC_Start_DMA+0x24>
 800511c:	4b5e      	ldr	r3, [pc, #376]	@ (8005298 <HAL_ADC_Start_DMA+0x19c>)
 800511e:	e000      	b.n	8005122 <HAL_ADC_Start_DMA+0x26>
 8005120:	4b5e      	ldr	r3, [pc, #376]	@ (800529c <HAL_ADC_Start_DMA+0x1a0>)
 8005122:	4618      	mov	r0, r3
 8005124:	f7ff fc66 	bl	80049f4 <LL_ADC_GetMultimode>
 8005128:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4618      	mov	r0, r3
 8005130:	f7ff fd2c 	bl	8004b8c <LL_ADC_REG_IsConversionOngoing>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	f040 80a2 	bne.w	8005280 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005142:	2b01      	cmp	r3, #1
 8005144:	d101      	bne.n	800514a <HAL_ADC_Start_DMA+0x4e>
 8005146:	2302      	movs	r3, #2
 8005148:	e09d      	b.n	8005286 <HAL_ADC_Start_DMA+0x18a>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d006      	beq.n	8005166 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	2b05      	cmp	r3, #5
 800515c:	d003      	beq.n	8005166 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	2b09      	cmp	r3, #9
 8005162:	f040 8086 	bne.w	8005272 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f001 fbac 	bl	80068c4 <ADC_Enable>
 800516c:	4603      	mov	r3, r0
 800516e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005170:	7dfb      	ldrb	r3, [r7, #23]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d178      	bne.n	8005268 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800517a:	4b49      	ldr	r3, [pc, #292]	@ (80052a0 <HAL_ADC_Start_DMA+0x1a4>)
 800517c:	4013      	ands	r3, r2
 800517e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a42      	ldr	r2, [pc, #264]	@ (8005294 <HAL_ADC_Start_DMA+0x198>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d002      	beq.n	8005196 <HAL_ADC_Start_DMA+0x9a>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	e000      	b.n	8005198 <HAL_ADC_Start_DMA+0x9c>
 8005196:	4b3e      	ldr	r3, [pc, #248]	@ (8005290 <HAL_ADC_Start_DMA+0x194>)
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	6812      	ldr	r2, [r2, #0]
 800519c:	4293      	cmp	r3, r2
 800519e:	d002      	beq.n	80051a6 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d105      	bne.n	80051b2 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051aa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d006      	beq.n	80051cc <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051c2:	f023 0206 	bic.w	r2, r3, #6
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	665a      	str	r2, [r3, #100]	@ 0x64
 80051ca:	e002      	b.n	80051d2 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051d6:	4a33      	ldr	r2, [pc, #204]	@ (80052a4 <HAL_ADC_Start_DMA+0x1a8>)
 80051d8:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051de:	4a32      	ldr	r2, [pc, #200]	@ (80052a8 <HAL_ADC_Start_DMA+0x1ac>)
 80051e0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051e6:	4a31      	ldr	r2, [pc, #196]	@ (80052ac <HAL_ADC_Start_DMA+0x1b0>)
 80051e8:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	221c      	movs	r2, #28
 80051f0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	685a      	ldr	r2, [r3, #4]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f042 0210 	orr.w	r2, r2, #16
 8005208:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a28      	ldr	r2, [pc, #160]	@ (80052b0 <HAL_ADC_Start_DMA+0x1b4>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d10f      	bne.n	8005234 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	4619      	mov	r1, r3
 8005222:	4610      	mov	r0, r2
 8005224:	f7ff fac2 	bl	80047ac <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4618      	mov	r0, r3
 800522e:	f7ff faad 	bl	800478c <LL_ADC_EnableDMAReq>
 8005232:	e007      	b.n	8005244 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800523c:	4619      	mov	r1, r3
 800523e:	4610      	mov	r0, r2
 8005240:	f7ff fa91 	bl	8004766 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	3340      	adds	r3, #64	@ 0x40
 800524e:	4619      	mov	r1, r3
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f002 fdcc 	bl	8007df0 <HAL_DMA_Start_IT>
 8005258:	4603      	mov	r3, r0
 800525a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4618      	mov	r0, r3
 8005262:	f7ff fc7f 	bl	8004b64 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005266:	e00d      	b.n	8005284 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8005270:	e008      	b.n	8005284 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800527e:	e001      	b.n	8005284 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005280:	2302      	movs	r3, #2
 8005282:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005284:	7dfb      	ldrb	r3, [r7, #23]
}
 8005286:	4618      	mov	r0, r3
 8005288:	3718      	adds	r7, #24
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	40022000 	.word	0x40022000
 8005294:	40022100 	.word	0x40022100
 8005298:	40022300 	.word	0x40022300
 800529c:	58026300 	.word	0x58026300
 80052a0:	fffff0fe 	.word	0xfffff0fe
 80052a4:	08006a97 	.word	0x08006a97
 80052a8:	08006b6f 	.word	0x08006b6f
 80052ac:	08006b8b 	.word	0x08006b8b
 80052b0:	58026000 	.word	0x58026000

080052b4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b08a      	sub	sp, #40	@ 0x28
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80052bc:	2300      	movs	r3, #0
 80052be:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a87      	ldr	r2, [pc, #540]	@ (80054f4 <HAL_ADC_IRQHandler+0x240>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d004      	beq.n	80052e4 <HAL_ADC_IRQHandler+0x30>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a86      	ldr	r2, [pc, #536]	@ (80054f8 <HAL_ADC_IRQHandler+0x244>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d101      	bne.n	80052e8 <HAL_ADC_IRQHandler+0x34>
 80052e4:	4b85      	ldr	r3, [pc, #532]	@ (80054fc <HAL_ADC_IRQHandler+0x248>)
 80052e6:	e000      	b.n	80052ea <HAL_ADC_IRQHandler+0x36>
 80052e8:	4b85      	ldr	r3, [pc, #532]	@ (8005500 <HAL_ADC_IRQHandler+0x24c>)
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7ff fb82 	bl	80049f4 <LL_ADC_GetMultimode>
 80052f0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	f003 0302 	and.w	r3, r3, #2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d017      	beq.n	800532c <HAL_ADC_IRQHandler+0x78>
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b00      	cmp	r3, #0
 8005304:	d012      	beq.n	800532c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800530a:	f003 0310 	and.w	r3, r3, #16
 800530e:	2b00      	cmp	r3, #0
 8005310:	d105      	bne.n	800531e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005316:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f001 fee8 	bl	80070f4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2202      	movs	r2, #2
 800532a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	f003 0304 	and.w	r3, r3, #4
 8005332:	2b00      	cmp	r3, #0
 8005334:	d004      	beq.n	8005340 <HAL_ADC_IRQHandler+0x8c>
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	f003 0304 	and.w	r3, r3, #4
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10a      	bne.n	8005356 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005346:	2b00      	cmp	r3, #0
 8005348:	f000 8083 	beq.w	8005452 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	f003 0308 	and.w	r3, r3, #8
 8005352:	2b00      	cmp	r3, #0
 8005354:	d07d      	beq.n	8005452 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800535a:	f003 0310 	and.w	r3, r3, #16
 800535e:	2b00      	cmp	r3, #0
 8005360:	d105      	bne.n	800536e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005366:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4618      	mov	r0, r3
 8005374:	f7ff f9b8 	bl	80046e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d062      	beq.n	8005444 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a5d      	ldr	r2, [pc, #372]	@ (80054f8 <HAL_ADC_IRQHandler+0x244>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d002      	beq.n	800538e <HAL_ADC_IRQHandler+0xda>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	e000      	b.n	8005390 <HAL_ADC_IRQHandler+0xdc>
 800538e:	4b59      	ldr	r3, [pc, #356]	@ (80054f4 <HAL_ADC_IRQHandler+0x240>)
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6812      	ldr	r2, [r2, #0]
 8005394:	4293      	cmp	r3, r2
 8005396:	d008      	beq.n	80053aa <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d005      	beq.n	80053aa <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2b05      	cmp	r3, #5
 80053a2:	d002      	beq.n	80053aa <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	2b09      	cmp	r3, #9
 80053a8:	d104      	bne.n	80053b4 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	623b      	str	r3, [r7, #32]
 80053b2:	e00c      	b.n	80053ce <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a4f      	ldr	r2, [pc, #316]	@ (80054f8 <HAL_ADC_IRQHandler+0x244>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d002      	beq.n	80053c4 <HAL_ADC_IRQHandler+0x110>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	e000      	b.n	80053c6 <HAL_ADC_IRQHandler+0x112>
 80053c4:	4b4b      	ldr	r3, [pc, #300]	@ (80054f4 <HAL_ADC_IRQHandler+0x240>)
 80053c6:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d135      	bne.n	8005444 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0308 	and.w	r3, r3, #8
 80053e2:	2b08      	cmp	r3, #8
 80053e4:	d12e      	bne.n	8005444 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7ff fbce 	bl	8004b8c <LL_ADC_REG_IsConversionOngoing>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d11a      	bne.n	800542c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f022 020c 	bic.w	r2, r2, #12
 8005404:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800540a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005416:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d112      	bne.n	8005444 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005422:	f043 0201 	orr.w	r2, r3, #1
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	661a      	str	r2, [r3, #96]	@ 0x60
 800542a:	e00b      	b.n	8005444 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005430:	f043 0210 	orr.w	r2, r3, #16
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800543c:	f043 0201 	orr.w	r2, r3, #1
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f7fc fc49 	bl	8001cdc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	220c      	movs	r2, #12
 8005450:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	f003 0320 	and.w	r3, r3, #32
 8005458:	2b00      	cmp	r3, #0
 800545a:	d004      	beq.n	8005466 <HAL_ADC_IRQHandler+0x1b2>
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	f003 0320 	and.w	r3, r3, #32
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10b      	bne.n	800547e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 80a0 	beq.w	80055b2 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 809a 	beq.w	80055b2 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005482:	f003 0310 	and.w	r3, r3, #16
 8005486:	2b00      	cmp	r3, #0
 8005488:	d105      	bne.n	8005496 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800548e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4618      	mov	r0, r3
 800549c:	f7ff f9a0 	bl	80047e0 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80054a0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7ff f91e 	bl	80046e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80054ac:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a11      	ldr	r2, [pc, #68]	@ (80054f8 <HAL_ADC_IRQHandler+0x244>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d002      	beq.n	80054be <HAL_ADC_IRQHandler+0x20a>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	e000      	b.n	80054c0 <HAL_ADC_IRQHandler+0x20c>
 80054be:	4b0d      	ldr	r3, [pc, #52]	@ (80054f4 <HAL_ADC_IRQHandler+0x240>)
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	6812      	ldr	r2, [r2, #0]
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d008      	beq.n	80054da <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d005      	beq.n	80054da <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	2b06      	cmp	r3, #6
 80054d2:	d002      	beq.n	80054da <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	2b07      	cmp	r3, #7
 80054d8:	d104      	bne.n	80054e4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	623b      	str	r3, [r7, #32]
 80054e2:	e014      	b.n	800550e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a03      	ldr	r2, [pc, #12]	@ (80054f8 <HAL_ADC_IRQHandler+0x244>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d00a      	beq.n	8005504 <HAL_ADC_IRQHandler+0x250>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	e008      	b.n	8005506 <HAL_ADC_IRQHandler+0x252>
 80054f4:	40022000 	.word	0x40022000
 80054f8:	40022100 	.word	0x40022100
 80054fc:	40022300 	.word	0x40022300
 8005500:	58026300 	.word	0x58026300
 8005504:	4b84      	ldr	r3, [pc, #528]	@ (8005718 <HAL_ADC_IRQHandler+0x464>)
 8005506:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d047      	beq.n	80055a4 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005514:	6a3b      	ldr	r3, [r7, #32]
 8005516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d007      	beq.n	800552e <HAL_ADC_IRQHandler+0x27a>
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d03f      	beq.n	80055a4 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800552a:	2b00      	cmp	r3, #0
 800552c:	d13a      	bne.n	80055a4 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005538:	2b40      	cmp	r3, #64	@ 0x40
 800553a:	d133      	bne.n	80055a4 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800553c:	6a3b      	ldr	r3, [r7, #32]
 800553e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d12e      	bne.n	80055a4 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4618      	mov	r0, r3
 800554c:	f7ff fb31 	bl	8004bb2 <LL_ADC_INJ_IsConversionOngoing>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d11a      	bne.n	800558c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005564:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800556a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800557a:	2b00      	cmp	r3, #0
 800557c:	d112      	bne.n	80055a4 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005582:	f043 0201 	orr.w	r2, r3, #1
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	661a      	str	r2, [r3, #96]	@ 0x60
 800558a:	e00b      	b.n	80055a4 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005590:	f043 0210 	orr.w	r2, r3, #16
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800559c:	f043 0201 	orr.w	r2, r3, #1
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f001 fd7d 	bl	80070a4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2260      	movs	r2, #96	@ 0x60
 80055b0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d011      	beq.n	80055e0 <HAL_ADC_IRQHandler+0x32c>
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00c      	beq.n	80055e0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055ca:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f8b2 	bl	800573c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2280      	movs	r2, #128	@ 0x80
 80055de:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d012      	beq.n	8005610 <HAL_ADC_IRQHandler+0x35c>
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00d      	beq.n	8005610 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055f8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f001 fd63 	bl	80070cc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800560e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005616:	2b00      	cmp	r3, #0
 8005618:	d012      	beq.n	8005640 <HAL_ADC_IRQHandler+0x38c>
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00d      	beq.n	8005640 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005628:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f001 fd55 	bl	80070e0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800563e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	f003 0310 	and.w	r3, r3, #16
 8005646:	2b00      	cmp	r3, #0
 8005648:	d043      	beq.n	80056d2 <HAL_ADC_IRQHandler+0x41e>
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	f003 0310 	and.w	r3, r3, #16
 8005650:	2b00      	cmp	r3, #0
 8005652:	d03e      	beq.n	80056d2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005658:	2b00      	cmp	r3, #0
 800565a:	d102      	bne.n	8005662 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800565c:	2301      	movs	r3, #1
 800565e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005660:	e021      	b.n	80056a6 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d015      	beq.n	8005694 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a2a      	ldr	r2, [pc, #168]	@ (8005718 <HAL_ADC_IRQHandler+0x464>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d004      	beq.n	800567c <HAL_ADC_IRQHandler+0x3c8>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a29      	ldr	r2, [pc, #164]	@ (800571c <HAL_ADC_IRQHandler+0x468>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d101      	bne.n	8005680 <HAL_ADC_IRQHandler+0x3cc>
 800567c:	4b28      	ldr	r3, [pc, #160]	@ (8005720 <HAL_ADC_IRQHandler+0x46c>)
 800567e:	e000      	b.n	8005682 <HAL_ADC_IRQHandler+0x3ce>
 8005680:	4b28      	ldr	r3, [pc, #160]	@ (8005724 <HAL_ADC_IRQHandler+0x470>)
 8005682:	4618      	mov	r0, r3
 8005684:	f7ff f9c4 	bl	8004a10 <LL_ADC_GetMultiDMATransfer>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00b      	beq.n	80056a6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800568e:	2301      	movs	r3, #1
 8005690:	627b      	str	r3, [r7, #36]	@ 0x24
 8005692:	e008      	b.n	80056a6 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f003 0303 	and.w	r3, r3, #3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d001      	beq.n	80056a6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80056a2:	2301      	movs	r3, #1
 80056a4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80056a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d10e      	bne.n	80056ca <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056b0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056bc:	f043 0202 	orr.w	r2, r3, #2
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f7fc fadd 	bl	8001c84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2210      	movs	r2, #16
 80056d0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d018      	beq.n	800570e <HAL_ADC_IRQHandler+0x45a>
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d013      	beq.n	800570e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056ea:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056f6:	f043 0208 	orr.w	r2, r3, #8
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005706:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f001 fcd5 	bl	80070b8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800570e:	bf00      	nop
 8005710:	3728      	adds	r7, #40	@ 0x28
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	40022000 	.word	0x40022000
 800571c:	40022100 	.word	0x40022100
 8005720:	40022300 	.word	0x40022300
 8005724:	58026300 	.word	0x58026300

08005728 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005750:	b590      	push	{r4, r7, lr}
 8005752:	b0b9      	sub	sp, #228	@ 0xe4
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800575a:	2300      	movs	r3, #0
 800575c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005760:	2300      	movs	r3, #0
 8005762:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800576a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	4aa9      	ldr	r2, [pc, #676]	@ (8005a18 <HAL_ADC_ConfigChannel+0x2c8>)
 8005772:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800577a:	2b01      	cmp	r3, #1
 800577c:	d102      	bne.n	8005784 <HAL_ADC_ConfigChannel+0x34>
 800577e:	2302      	movs	r3, #2
 8005780:	f000 bcfa 	b.w	8006178 <HAL_ADC_ConfigChannel+0xa28>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4618      	mov	r0, r3
 8005792:	f7ff f9fb 	bl	8004b8c <LL_ADC_REG_IsConversionOngoing>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	f040 84de 	bne.w	800615a <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a9e      	ldr	r2, [pc, #632]	@ (8005a1c <HAL_ADC_ConfigChannel+0x2cc>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d033      	beq.n	8005810 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d108      	bne.n	80057c6 <HAL_ADC_ConfigChannel+0x76>
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	0e9b      	lsrs	r3, r3, #26
 80057ba:	f003 031f 	and.w	r3, r3, #31
 80057be:	2201      	movs	r2, #1
 80057c0:	fa02 f303 	lsl.w	r3, r2, r3
 80057c4:	e01d      	b.n	8005802 <HAL_ADC_ConfigChannel+0xb2>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80057d2:	fa93 f3a3 	rbit	r3, r3
 80057d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80057da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80057de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80057e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d101      	bne.n	80057ee <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80057ea:	2320      	movs	r3, #32
 80057ec:	e004      	b.n	80057f8 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80057ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80057f2:	fab3 f383 	clz	r3, r3
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	f003 031f 	and.w	r3, r3, #31
 80057fc:	2201      	movs	r2, #1
 80057fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	6812      	ldr	r2, [r2, #0]
 8005806:	69d1      	ldr	r1, [r2, #28]
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	6812      	ldr	r2, [r2, #0]
 800580c:	430b      	orrs	r3, r1
 800580e:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6818      	ldr	r0, [r3, #0]
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	6859      	ldr	r1, [r3, #4]
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	461a      	mov	r2, r3
 800581e:	f7fe ff76 	bl	800470e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4618      	mov	r0, r3
 8005828:	f7ff f9b0 	bl	8004b8c <LL_ADC_REG_IsConversionOngoing>
 800582c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4618      	mov	r0, r3
 8005836:	f7ff f9bc 	bl	8004bb2 <LL_ADC_INJ_IsConversionOngoing>
 800583a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800583e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005842:	2b00      	cmp	r3, #0
 8005844:	f040 8270 	bne.w	8005d28 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005848:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800584c:	2b00      	cmp	r3, #0
 800584e:	f040 826b 	bne.w	8005d28 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6818      	ldr	r0, [r3, #0]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	6819      	ldr	r1, [r3, #0]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	461a      	mov	r2, r3
 8005860:	f7fe ffd1 	bl	8004806 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a6c      	ldr	r2, [pc, #432]	@ (8005a1c <HAL_ADC_ConfigChannel+0x2cc>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d10d      	bne.n	800588a <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	695a      	ldr	r2, [r3, #20]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	08db      	lsrs	r3, r3, #3
 800587a:	f003 0303 	and.w	r3, r3, #3
 800587e:	005b      	lsls	r3, r3, #1
 8005880:	fa02 f303 	lsl.w	r3, r2, r3
 8005884:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005888:	e032      	b.n	80058f0 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800588a:	4b65      	ldr	r3, [pc, #404]	@ (8005a20 <HAL_ADC_ConfigChannel+0x2d0>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005892:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005896:	d10b      	bne.n	80058b0 <HAL_ADC_ConfigChannel+0x160>
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	695a      	ldr	r2, [r3, #20]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	089b      	lsrs	r3, r3, #2
 80058a4:	f003 0307 	and.w	r3, r3, #7
 80058a8:	005b      	lsls	r3, r3, #1
 80058aa:	fa02 f303 	lsl.w	r3, r2, r3
 80058ae:	e01d      	b.n	80058ec <HAL_ADC_ConfigChannel+0x19c>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	f003 0310 	and.w	r3, r3, #16
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10b      	bne.n	80058d6 <HAL_ADC_ConfigChannel+0x186>
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	695a      	ldr	r2, [r3, #20]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	089b      	lsrs	r3, r3, #2
 80058ca:	f003 0307 	and.w	r3, r3, #7
 80058ce:	005b      	lsls	r3, r3, #1
 80058d0:	fa02 f303 	lsl.w	r3, r2, r3
 80058d4:	e00a      	b.n	80058ec <HAL_ADC_ConfigChannel+0x19c>
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	695a      	ldr	r2, [r3, #20]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	089b      	lsrs	r3, r3, #2
 80058e2:	f003 0304 	and.w	r3, r3, #4
 80058e6:	005b      	lsls	r3, r3, #1
 80058e8:	fa02 f303 	lsl.w	r3, r2, r3
 80058ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	2b04      	cmp	r3, #4
 80058f6:	d048      	beq.n	800598a <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6818      	ldr	r0, [r3, #0]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	6919      	ldr	r1, [r3, #16]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005908:	f7fe fdfc 	bl	8004504 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a42      	ldr	r2, [pc, #264]	@ (8005a1c <HAL_ADC_ConfigChannel+0x2cc>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d119      	bne.n	800594a <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6818      	ldr	r0, [r3, #0]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	6919      	ldr	r1, [r3, #16]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	69db      	ldr	r3, [r3, #28]
 8005922:	461a      	mov	r2, r3
 8005924:	f7fe fe94 	bl	8004650 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6818      	ldr	r0, [r3, #0]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	6919      	ldr	r1, [r3, #16]
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d102      	bne.n	8005940 <HAL_ADC_ConfigChannel+0x1f0>
 800593a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800593e:	e000      	b.n	8005942 <HAL_ADC_ConfigChannel+0x1f2>
 8005940:	2300      	movs	r3, #0
 8005942:	461a      	mov	r2, r3
 8005944:	f7fe fe62 	bl	800460c <LL_ADC_SetOffsetSaturation>
 8005948:	e1ee      	b.n	8005d28 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6818      	ldr	r0, [r3, #0]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	6919      	ldr	r1, [r3, #16]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005958:	2b01      	cmp	r3, #1
 800595a:	d102      	bne.n	8005962 <HAL_ADC_ConfigChannel+0x212>
 800595c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005960:	e000      	b.n	8005964 <HAL_ADC_ConfigChannel+0x214>
 8005962:	2300      	movs	r3, #0
 8005964:	461a      	mov	r2, r3
 8005966:	f7fe fe2f 	bl	80045c8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6818      	ldr	r0, [r3, #0]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	6919      	ldr	r1, [r3, #16]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	7e1b      	ldrb	r3, [r3, #24]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d102      	bne.n	8005980 <HAL_ADC_ConfigChannel+0x230>
 800597a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800597e:	e000      	b.n	8005982 <HAL_ADC_ConfigChannel+0x232>
 8005980:	2300      	movs	r3, #0
 8005982:	461a      	mov	r2, r3
 8005984:	f7fe fe06 	bl	8004594 <LL_ADC_SetDataRightShift>
 8005988:	e1ce      	b.n	8005d28 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a23      	ldr	r2, [pc, #140]	@ (8005a1c <HAL_ADC_ConfigChannel+0x2cc>)
 8005990:	4293      	cmp	r3, r2
 8005992:	f040 8181 	bne.w	8005c98 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2100      	movs	r1, #0
 800599c:	4618      	mov	r0, r3
 800599e:	f7fe fde3 	bl	8004568 <LL_ADC_GetOffsetChannel>
 80059a2:	4603      	mov	r3, r0
 80059a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10a      	bne.n	80059c2 <HAL_ADC_ConfigChannel+0x272>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2100      	movs	r1, #0
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7fe fdd8 	bl	8004568 <LL_ADC_GetOffsetChannel>
 80059b8:	4603      	mov	r3, r0
 80059ba:	0e9b      	lsrs	r3, r3, #26
 80059bc:	f003 021f 	and.w	r2, r3, #31
 80059c0:	e01e      	b.n	8005a00 <HAL_ADC_ConfigChannel+0x2b0>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2100      	movs	r1, #0
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7fe fdcd 	bl	8004568 <LL_ADC_GetOffsetChannel>
 80059ce:	4603      	mov	r3, r0
 80059d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80059d8:	fa93 f3a3 	rbit	r3, r3
 80059dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80059e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80059e4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80059e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d101      	bne.n	80059f4 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80059f0:	2320      	movs	r3, #32
 80059f2:	e004      	b.n	80059fe <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80059f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80059f8:	fab3 f383 	clz	r3, r3
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	461a      	mov	r2, r3
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10b      	bne.n	8005a24 <HAL_ADC_ConfigChannel+0x2d4>
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	0e9b      	lsrs	r3, r3, #26
 8005a12:	f003 031f 	and.w	r3, r3, #31
 8005a16:	e01e      	b.n	8005a56 <HAL_ADC_ConfigChannel+0x306>
 8005a18:	47ff0000 	.word	0x47ff0000
 8005a1c:	58026000 	.word	0x58026000
 8005a20:	5c001000 	.word	0x5c001000
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a30:	fa93 f3a3 	rbit	r3, r3
 8005a34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8005a38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005a3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8005a40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8005a48:	2320      	movs	r3, #32
 8005a4a:	e004      	b.n	8005a56 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8005a4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005a50:	fab3 f383 	clz	r3, r3
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d106      	bne.n	8005a68 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	2100      	movs	r1, #0
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fe fe16 	bl	8004694 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2101      	movs	r1, #1
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fe fd7a 	bl	8004568 <LL_ADC_GetOffsetChannel>
 8005a74:	4603      	mov	r3, r0
 8005a76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10a      	bne.n	8005a94 <HAL_ADC_ConfigChannel+0x344>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2101      	movs	r1, #1
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7fe fd6f 	bl	8004568 <LL_ADC_GetOffsetChannel>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	0e9b      	lsrs	r3, r3, #26
 8005a8e:	f003 021f 	and.w	r2, r3, #31
 8005a92:	e01e      	b.n	8005ad2 <HAL_ADC_ConfigChannel+0x382>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2101      	movs	r1, #1
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fe fd64 	bl	8004568 <LL_ADC_GetOffsetChannel>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005aaa:	fa93 f3a3 	rbit	r3, r3
 8005aae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8005ab2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ab6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8005aba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8005ac2:	2320      	movs	r3, #32
 8005ac4:	e004      	b.n	8005ad0 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8005ac6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005aca:	fab3 f383 	clz	r3, r3
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d105      	bne.n	8005aea <HAL_ADC_ConfigChannel+0x39a>
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	0e9b      	lsrs	r3, r3, #26
 8005ae4:	f003 031f 	and.w	r3, r3, #31
 8005ae8:	e018      	b.n	8005b1c <HAL_ADC_ConfigChannel+0x3cc>
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005af2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005af6:	fa93 f3a3 	rbit	r3, r3
 8005afa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8005afe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005b02:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8005b06:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8005b0e:	2320      	movs	r3, #32
 8005b10:	e004      	b.n	8005b1c <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8005b12:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b16:	fab3 f383 	clz	r3, r3
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d106      	bne.n	8005b2e <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2200      	movs	r2, #0
 8005b26:	2101      	movs	r1, #1
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7fe fdb3 	bl	8004694 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2102      	movs	r1, #2
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7fe fd17 	bl	8004568 <LL_ADC_GetOffsetChannel>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10a      	bne.n	8005b5a <HAL_ADC_ConfigChannel+0x40a>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2102      	movs	r1, #2
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7fe fd0c 	bl	8004568 <LL_ADC_GetOffsetChannel>
 8005b50:	4603      	mov	r3, r0
 8005b52:	0e9b      	lsrs	r3, r3, #26
 8005b54:	f003 021f 	and.w	r2, r3, #31
 8005b58:	e01e      	b.n	8005b98 <HAL_ADC_ConfigChannel+0x448>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2102      	movs	r1, #2
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7fe fd01 	bl	8004568 <LL_ADC_GetOffsetChannel>
 8005b66:	4603      	mov	r3, r0
 8005b68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005b70:	fa93 f3a3 	rbit	r3, r3
 8005b74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8005b78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8005b80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d101      	bne.n	8005b8c <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8005b88:	2320      	movs	r3, #32
 8005b8a:	e004      	b.n	8005b96 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8005b8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b90:	fab3 f383 	clz	r3, r3
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	461a      	mov	r2, r3
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d105      	bne.n	8005bb0 <HAL_ADC_ConfigChannel+0x460>
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	0e9b      	lsrs	r3, r3, #26
 8005baa:	f003 031f 	and.w	r3, r3, #31
 8005bae:	e014      	b.n	8005bda <HAL_ADC_ConfigChannel+0x48a>
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bb6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005bb8:	fa93 f3a3 	rbit	r3, r3
 8005bbc:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8005bbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005bc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8005bc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d101      	bne.n	8005bd0 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8005bcc:	2320      	movs	r3, #32
 8005bce:	e004      	b.n	8005bda <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8005bd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005bd4:	fab3 f383 	clz	r3, r3
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d106      	bne.n	8005bec <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2200      	movs	r2, #0
 8005be4:	2102      	movs	r1, #2
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7fe fd54 	bl	8004694 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2103      	movs	r1, #3
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fe fcb8 	bl	8004568 <LL_ADC_GetOffsetChannel>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10a      	bne.n	8005c18 <HAL_ADC_ConfigChannel+0x4c8>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2103      	movs	r1, #3
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7fe fcad 	bl	8004568 <LL_ADC_GetOffsetChannel>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	0e9b      	lsrs	r3, r3, #26
 8005c12:	f003 021f 	and.w	r2, r3, #31
 8005c16:	e017      	b.n	8005c48 <HAL_ADC_ConfigChannel+0x4f8>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2103      	movs	r1, #3
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fe fca2 	bl	8004568 <LL_ADC_GetOffsetChannel>
 8005c24:	4603      	mov	r3, r0
 8005c26:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c2a:	fa93 f3a3 	rbit	r3, r3
 8005c2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005c30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c32:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8005c34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8005c3a:	2320      	movs	r3, #32
 8005c3c:	e003      	b.n	8005c46 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8005c3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c40:	fab3 f383 	clz	r3, r3
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	461a      	mov	r2, r3
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d105      	bne.n	8005c60 <HAL_ADC_ConfigChannel+0x510>
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	0e9b      	lsrs	r3, r3, #26
 8005c5a:	f003 031f 	and.w	r3, r3, #31
 8005c5e:	e011      	b.n	8005c84 <HAL_ADC_ConfigChannel+0x534>
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c68:	fa93 f3a3 	rbit	r3, r3
 8005c6c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8005c6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c70:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8005c72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d101      	bne.n	8005c7c <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8005c78:	2320      	movs	r3, #32
 8005c7a:	e003      	b.n	8005c84 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8005c7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c7e:	fab3 f383 	clz	r3, r3
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d14f      	bne.n	8005d28 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	2103      	movs	r1, #3
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7fe fcff 	bl	8004694 <LL_ADC_SetOffsetState>
 8005c96:	e047      	b.n	8005d28 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c9e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	069b      	lsls	r3, r3, #26
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d107      	bne.n	8005cbc <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005cba:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cc2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	069b      	lsls	r3, r3, #26
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d107      	bne.n	8005ce0 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005cde:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ce6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	069b      	lsls	r3, r3, #26
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d107      	bne.n	8005d04 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005d02:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d0a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	069b      	lsls	r3, r3, #26
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d107      	bne.n	8005d28 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005d26:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7fe fef3 	bl	8004b18 <LL_ADC_IsEnabled>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f040 8219 	bne.w	800616c <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6818      	ldr	r0, [r3, #0]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	6819      	ldr	r1, [r3, #0]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	461a      	mov	r2, r3
 8005d48:	f7fe fd88 	bl	800485c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	4aa1      	ldr	r2, [pc, #644]	@ (8005fd8 <HAL_ADC_ConfigChannel+0x888>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	f040 812e 	bne.w	8005fb4 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10b      	bne.n	8005d80 <HAL_ADC_ConfigChannel+0x630>
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	0e9b      	lsrs	r3, r3, #26
 8005d6e:	3301      	adds	r3, #1
 8005d70:	f003 031f 	and.w	r3, r3, #31
 8005d74:	2b09      	cmp	r3, #9
 8005d76:	bf94      	ite	ls
 8005d78:	2301      	movls	r3, #1
 8005d7a:	2300      	movhi	r3, #0
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	e019      	b.n	8005db4 <HAL_ADC_ConfigChannel+0x664>
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d88:	fa93 f3a3 	rbit	r3, r3
 8005d8c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8005d8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d90:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8005d92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d101      	bne.n	8005d9c <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8005d98:	2320      	movs	r3, #32
 8005d9a:	e003      	b.n	8005da4 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8005d9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d9e:	fab3 f383 	clz	r3, r3
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	3301      	adds	r3, #1
 8005da6:	f003 031f 	and.w	r3, r3, #31
 8005daa:	2b09      	cmp	r3, #9
 8005dac:	bf94      	ite	ls
 8005dae:	2301      	movls	r3, #1
 8005db0:	2300      	movhi	r3, #0
 8005db2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d079      	beq.n	8005eac <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d107      	bne.n	8005dd4 <HAL_ADC_ConfigChannel+0x684>
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	0e9b      	lsrs	r3, r3, #26
 8005dca:	3301      	adds	r3, #1
 8005dcc:	069b      	lsls	r3, r3, #26
 8005dce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005dd2:	e015      	b.n	8005e00 <HAL_ADC_ConfigChannel+0x6b0>
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ddc:	fa93 f3a3 	rbit	r3, r3
 8005de0:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8005de2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005de4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8005de6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d101      	bne.n	8005df0 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8005dec:	2320      	movs	r3, #32
 8005dee:	e003      	b.n	8005df8 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8005df0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005df2:	fab3 f383 	clz	r3, r3
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	3301      	adds	r3, #1
 8005dfa:	069b      	lsls	r3, r3, #26
 8005dfc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d109      	bne.n	8005e20 <HAL_ADC_ConfigChannel+0x6d0>
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	0e9b      	lsrs	r3, r3, #26
 8005e12:	3301      	adds	r3, #1
 8005e14:	f003 031f 	and.w	r3, r3, #31
 8005e18:	2101      	movs	r1, #1
 8005e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e1e:	e017      	b.n	8005e50 <HAL_ADC_ConfigChannel+0x700>
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e28:	fa93 f3a3 	rbit	r3, r3
 8005e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8005e2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e30:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8005e32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d101      	bne.n	8005e3c <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8005e38:	2320      	movs	r3, #32
 8005e3a:	e003      	b.n	8005e44 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8005e3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e3e:	fab3 f383 	clz	r3, r3
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	3301      	adds	r3, #1
 8005e46:	f003 031f 	and.w	r3, r3, #31
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e50:	ea42 0103 	orr.w	r1, r2, r3
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10a      	bne.n	8005e76 <HAL_ADC_ConfigChannel+0x726>
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	0e9b      	lsrs	r3, r3, #26
 8005e66:	3301      	adds	r3, #1
 8005e68:	f003 021f 	and.w	r2, r3, #31
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	005b      	lsls	r3, r3, #1
 8005e70:	4413      	add	r3, r2
 8005e72:	051b      	lsls	r3, r3, #20
 8005e74:	e018      	b.n	8005ea8 <HAL_ADC_ConfigChannel+0x758>
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e7e:	fa93 f3a3 	rbit	r3, r3
 8005e82:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8005e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e86:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8005e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8005e8e:	2320      	movs	r3, #32
 8005e90:	e003      	b.n	8005e9a <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8005e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e94:	fab3 f383 	clz	r3, r3
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	f003 021f 	and.w	r2, r3, #31
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	005b      	lsls	r3, r3, #1
 8005ea4:	4413      	add	r3, r2
 8005ea6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005ea8:	430b      	orrs	r3, r1
 8005eaa:	e07e      	b.n	8005faa <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d107      	bne.n	8005ec8 <HAL_ADC_ConfigChannel+0x778>
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	0e9b      	lsrs	r3, r3, #26
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	069b      	lsls	r3, r3, #26
 8005ec2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005ec6:	e015      	b.n	8005ef4 <HAL_ADC_ConfigChannel+0x7a4>
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed0:	fa93 f3a3 	rbit	r3, r3
 8005ed4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8005eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8005ee0:	2320      	movs	r3, #32
 8005ee2:	e003      	b.n	8005eec <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8005ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ee6:	fab3 f383 	clz	r3, r3
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	3301      	adds	r3, #1
 8005eee:	069b      	lsls	r3, r3, #26
 8005ef0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d109      	bne.n	8005f14 <HAL_ADC_ConfigChannel+0x7c4>
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	0e9b      	lsrs	r3, r3, #26
 8005f06:	3301      	adds	r3, #1
 8005f08:	f003 031f 	and.w	r3, r3, #31
 8005f0c:	2101      	movs	r1, #1
 8005f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f12:	e017      	b.n	8005f44 <HAL_ADC_ConfigChannel+0x7f4>
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	fa93 f3a3 	rbit	r3, r3
 8005f20:	61bb      	str	r3, [r7, #24]
  return result;
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005f26:	6a3b      	ldr	r3, [r7, #32]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8005f2c:	2320      	movs	r3, #32
 8005f2e:	e003      	b.n	8005f38 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8005f30:	6a3b      	ldr	r3, [r7, #32]
 8005f32:	fab3 f383 	clz	r3, r3
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	3301      	adds	r3, #1
 8005f3a:	f003 031f 	and.w	r3, r3, #31
 8005f3e:	2101      	movs	r1, #1
 8005f40:	fa01 f303 	lsl.w	r3, r1, r3
 8005f44:	ea42 0103 	orr.w	r1, r2, r3
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10d      	bne.n	8005f70 <HAL_ADC_ConfigChannel+0x820>
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	0e9b      	lsrs	r3, r3, #26
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	f003 021f 	and.w	r2, r3, #31
 8005f60:	4613      	mov	r3, r2
 8005f62:	005b      	lsls	r3, r3, #1
 8005f64:	4413      	add	r3, r2
 8005f66:	3b1e      	subs	r3, #30
 8005f68:	051b      	lsls	r3, r3, #20
 8005f6a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005f6e:	e01b      	b.n	8005fa8 <HAL_ADC_ConfigChannel+0x858>
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	fa93 f3a3 	rbit	r3, r3
 8005f7c:	60fb      	str	r3, [r7, #12]
  return result;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d101      	bne.n	8005f8c <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8005f88:	2320      	movs	r3, #32
 8005f8a:	e003      	b.n	8005f94 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	fab3 f383 	clz	r3, r3
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	3301      	adds	r3, #1
 8005f96:	f003 021f 	and.w	r2, r3, #31
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	005b      	lsls	r3, r3, #1
 8005f9e:	4413      	add	r3, r2
 8005fa0:	3b1e      	subs	r3, #30
 8005fa2:	051b      	lsls	r3, r3, #20
 8005fa4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005fa8:	430b      	orrs	r3, r1
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	6892      	ldr	r2, [r2, #8]
 8005fae:	4619      	mov	r1, r3
 8005fb0:	f7fe fc29 	bl	8004806 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f280 80d7 	bge.w	800616c <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a06      	ldr	r2, [pc, #24]	@ (8005fdc <HAL_ADC_ConfigChannel+0x88c>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d004      	beq.n	8005fd2 <HAL_ADC_ConfigChannel+0x882>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a04      	ldr	r2, [pc, #16]	@ (8005fe0 <HAL_ADC_ConfigChannel+0x890>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d10a      	bne.n	8005fe8 <HAL_ADC_ConfigChannel+0x898>
 8005fd2:	4b04      	ldr	r3, [pc, #16]	@ (8005fe4 <HAL_ADC_ConfigChannel+0x894>)
 8005fd4:	e009      	b.n	8005fea <HAL_ADC_ConfigChannel+0x89a>
 8005fd6:	bf00      	nop
 8005fd8:	47ff0000 	.word	0x47ff0000
 8005fdc:	40022000 	.word	0x40022000
 8005fe0:	40022100 	.word	0x40022100
 8005fe4:	40022300 	.word	0x40022300
 8005fe8:	4b65      	ldr	r3, [pc, #404]	@ (8006180 <HAL_ADC_ConfigChannel+0xa30>)
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7fe fa7c 	bl	80044e8 <LL_ADC_GetCommonPathInternalCh>
 8005ff0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a62      	ldr	r2, [pc, #392]	@ (8006184 <HAL_ADC_ConfigChannel+0xa34>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d004      	beq.n	8006008 <HAL_ADC_ConfigChannel+0x8b8>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a61      	ldr	r2, [pc, #388]	@ (8006188 <HAL_ADC_ConfigChannel+0xa38>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d10e      	bne.n	8006026 <HAL_ADC_ConfigChannel+0x8d6>
 8006008:	485e      	ldr	r0, [pc, #376]	@ (8006184 <HAL_ADC_ConfigChannel+0xa34>)
 800600a:	f7fe fd85 	bl	8004b18 <LL_ADC_IsEnabled>
 800600e:	4604      	mov	r4, r0
 8006010:	485d      	ldr	r0, [pc, #372]	@ (8006188 <HAL_ADC_ConfigChannel+0xa38>)
 8006012:	f7fe fd81 	bl	8004b18 <LL_ADC_IsEnabled>
 8006016:	4603      	mov	r3, r0
 8006018:	4323      	orrs	r3, r4
 800601a:	2b00      	cmp	r3, #0
 800601c:	bf0c      	ite	eq
 800601e:	2301      	moveq	r3, #1
 8006020:	2300      	movne	r3, #0
 8006022:	b2db      	uxtb	r3, r3
 8006024:	e008      	b.n	8006038 <HAL_ADC_ConfigChannel+0x8e8>
 8006026:	4859      	ldr	r0, [pc, #356]	@ (800618c <HAL_ADC_ConfigChannel+0xa3c>)
 8006028:	f7fe fd76 	bl	8004b18 <LL_ADC_IsEnabled>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	bf0c      	ite	eq
 8006032:	2301      	moveq	r3, #1
 8006034:	2300      	movne	r3, #0
 8006036:	b2db      	uxtb	r3, r3
 8006038:	2b00      	cmp	r3, #0
 800603a:	f000 8084 	beq.w	8006146 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a53      	ldr	r2, [pc, #332]	@ (8006190 <HAL_ADC_ConfigChannel+0xa40>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d132      	bne.n	80060ae <HAL_ADC_ConfigChannel+0x95e>
 8006048:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800604c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d12c      	bne.n	80060ae <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a4c      	ldr	r2, [pc, #304]	@ (800618c <HAL_ADC_ConfigChannel+0xa3c>)
 800605a:	4293      	cmp	r3, r2
 800605c:	f040 8086 	bne.w	800616c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a47      	ldr	r2, [pc, #284]	@ (8006184 <HAL_ADC_ConfigChannel+0xa34>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d004      	beq.n	8006074 <HAL_ADC_ConfigChannel+0x924>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a46      	ldr	r2, [pc, #280]	@ (8006188 <HAL_ADC_ConfigChannel+0xa38>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d101      	bne.n	8006078 <HAL_ADC_ConfigChannel+0x928>
 8006074:	4a47      	ldr	r2, [pc, #284]	@ (8006194 <HAL_ADC_ConfigChannel+0xa44>)
 8006076:	e000      	b.n	800607a <HAL_ADC_ConfigChannel+0x92a>
 8006078:	4a41      	ldr	r2, [pc, #260]	@ (8006180 <HAL_ADC_ConfigChannel+0xa30>)
 800607a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800607e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006082:	4619      	mov	r1, r3
 8006084:	4610      	mov	r0, r2
 8006086:	f7fe fa1c 	bl	80044c2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800608a:	4b43      	ldr	r3, [pc, #268]	@ (8006198 <HAL_ADC_ConfigChannel+0xa48>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	099b      	lsrs	r3, r3, #6
 8006090:	4a42      	ldr	r2, [pc, #264]	@ (800619c <HAL_ADC_ConfigChannel+0xa4c>)
 8006092:	fba2 2303 	umull	r2, r3, r2, r3
 8006096:	099b      	lsrs	r3, r3, #6
 8006098:	3301      	adds	r3, #1
 800609a:	005b      	lsls	r3, r3, #1
 800609c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800609e:	e002      	b.n	80060a6 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	3b01      	subs	r3, #1
 80060a4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1f9      	bne.n	80060a0 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80060ac:	e05e      	b.n	800616c <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a3b      	ldr	r2, [pc, #236]	@ (80061a0 <HAL_ADC_ConfigChannel+0xa50>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d120      	bne.n	80060fa <HAL_ADC_ConfigChannel+0x9aa>
 80060b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d11a      	bne.n	80060fa <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a30      	ldr	r2, [pc, #192]	@ (800618c <HAL_ADC_ConfigChannel+0xa3c>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d14e      	bne.n	800616c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a2c      	ldr	r2, [pc, #176]	@ (8006184 <HAL_ADC_ConfigChannel+0xa34>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d004      	beq.n	80060e2 <HAL_ADC_ConfigChannel+0x992>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a2a      	ldr	r2, [pc, #168]	@ (8006188 <HAL_ADC_ConfigChannel+0xa38>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d101      	bne.n	80060e6 <HAL_ADC_ConfigChannel+0x996>
 80060e2:	4a2c      	ldr	r2, [pc, #176]	@ (8006194 <HAL_ADC_ConfigChannel+0xa44>)
 80060e4:	e000      	b.n	80060e8 <HAL_ADC_ConfigChannel+0x998>
 80060e6:	4a26      	ldr	r2, [pc, #152]	@ (8006180 <HAL_ADC_ConfigChannel+0xa30>)
 80060e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80060ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80060f0:	4619      	mov	r1, r3
 80060f2:	4610      	mov	r0, r2
 80060f4:	f7fe f9e5 	bl	80044c2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80060f8:	e038      	b.n	800616c <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a29      	ldr	r2, [pc, #164]	@ (80061a4 <HAL_ADC_ConfigChannel+0xa54>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d133      	bne.n	800616c <HAL_ADC_ConfigChannel+0xa1c>
 8006104:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006108:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d12d      	bne.n	800616c <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a1d      	ldr	r2, [pc, #116]	@ (800618c <HAL_ADC_ConfigChannel+0xa3c>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d128      	bne.n	800616c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a19      	ldr	r2, [pc, #100]	@ (8006184 <HAL_ADC_ConfigChannel+0xa34>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d004      	beq.n	800612e <HAL_ADC_ConfigChannel+0x9de>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a17      	ldr	r2, [pc, #92]	@ (8006188 <HAL_ADC_ConfigChannel+0xa38>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d101      	bne.n	8006132 <HAL_ADC_ConfigChannel+0x9e2>
 800612e:	4a19      	ldr	r2, [pc, #100]	@ (8006194 <HAL_ADC_ConfigChannel+0xa44>)
 8006130:	e000      	b.n	8006134 <HAL_ADC_ConfigChannel+0x9e4>
 8006132:	4a13      	ldr	r2, [pc, #76]	@ (8006180 <HAL_ADC_ConfigChannel+0xa30>)
 8006134:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006138:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800613c:	4619      	mov	r1, r3
 800613e:	4610      	mov	r0, r2
 8006140:	f7fe f9bf 	bl	80044c2 <LL_ADC_SetCommonPathInternalCh>
 8006144:	e012      	b.n	800616c <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800614a:	f043 0220 	orr.w	r2, r3, #32
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8006158:	e008      	b.n	800616c <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800615e:	f043 0220 	orr.w	r2, r3, #32
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8006174:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8006178:	4618      	mov	r0, r3
 800617a:	37e4      	adds	r7, #228	@ 0xe4
 800617c:	46bd      	mov	sp, r7
 800617e:	bd90      	pop	{r4, r7, pc}
 8006180:	58026300 	.word	0x58026300
 8006184:	40022000 	.word	0x40022000
 8006188:	40022100 	.word	0x40022100
 800618c:	58026000 	.word	0x58026000
 8006190:	c7520000 	.word	0xc7520000
 8006194:	40022300 	.word	0x40022300
 8006198:	24000038 	.word	0x24000038
 800619c:	053e2d63 	.word	0x053e2d63
 80061a0:	c3210000 	.word	0xc3210000
 80061a4:	cb840000 	.word	0xcb840000

080061a8 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b094      	sub	sp, #80	@ 0x50
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80061c0:	d003      	beq.n	80061ca <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80061c6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }

#if defined(ADC_VER_V5_V90)

  if (hadc->Instance == ADC3)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a8c      	ldr	r2, [pc, #560]	@ (8006400 <HAL_ADC_AnalogWDGConfig+0x258>)
 80061d0:	4293      	cmp	r3, r2
      assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d101      	bne.n	80061e0 <HAL_ADC_AnalogWDGConfig+0x38>
 80061dc:	2302      	movs	r3, #2
 80061de:	e36b      	b.n	80068b8 <HAL_ADC_AnalogWDGConfig+0x710>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7fe fccd 	bl	8004b8c <LL_ADC_REG_IsConversionOngoing>
 80061f2:	6438      	str	r0, [r7, #64]	@ 0x40
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7fe fcda 	bl	8004bb2 <LL_ADC_INJ_IsConversionOngoing>
 80061fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006200:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006202:	2b00      	cmp	r3, #0
 8006204:	f040 8349 	bne.w	800689a <HAL_ADC_AnalogWDGConfig+0x6f2>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006208:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800620a:	2b00      	cmp	r3, #0
 800620c:	f040 8345 	bne.w	800689a <HAL_ADC_AnalogWDGConfig+0x6f2>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a7b      	ldr	r2, [pc, #492]	@ (8006404 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8006216:	4293      	cmp	r3, r2
 8006218:	f040 8131 	bne.w	800647e <HAL_ADC_AnalogWDGConfig+0x2d6>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8006224:	d034      	beq.n	8006290 <HAL_ADC_AnalogWDGConfig+0xe8>
 8006226:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 800622a:	d856      	bhi.n	80062da <HAL_ADC_AnalogWDGConfig+0x132>
 800622c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006230:	d04b      	beq.n	80062ca <HAL_ADC_AnalogWDGConfig+0x122>
 8006232:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006236:	d850      	bhi.n	80062da <HAL_ADC_AnalogWDGConfig+0x132>
 8006238:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800623c:	d01b      	beq.n	8006276 <HAL_ADC_AnalogWDGConfig+0xce>
 800623e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006242:	d84a      	bhi.n	80062da <HAL_ADC_AnalogWDGConfig+0x132>
 8006244:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006248:	d037      	beq.n	80062ba <HAL_ADC_AnalogWDGConfig+0x112>
 800624a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800624e:	d844      	bhi.n	80062da <HAL_ADC_AnalogWDGConfig+0x132>
 8006250:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006254:	d029      	beq.n	80062aa <HAL_ADC_AnalogWDGConfig+0x102>
 8006256:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800625a:	d13e      	bne.n	80062da <HAL_ADC_AnalogWDGConfig+0x132>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6818      	ldr	r0, [r3, #0]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8006268:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 800626c:	461a      	mov	r2, r3
 800626e:	4965      	ldr	r1, [pc, #404]	@ (8006404 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8006270:	f7fe fb34 	bl	80048dc <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 8006274:	e039      	b.n	80062ea <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6818      	ldr	r0, [r3, #0]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8006282:	f043 73a0 	orr.w	r3, r3, #20971520	@ 0x1400000
 8006286:	461a      	mov	r2, r3
 8006288:	495e      	ldr	r1, [pc, #376]	@ (8006404 <HAL_ADC_AnalogWDGConfig+0x25c>)
 800628a:	f7fe fb27 	bl	80048dc <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 800628e:	e02c      	b.n	80062ea <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6818      	ldr	r0, [r3, #0]
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 800629c:	f043 73e0 	orr.w	r3, r3, #29360128	@ 0x1c00000
 80062a0:	461a      	mov	r2, r3
 80062a2:	4958      	ldr	r1, [pc, #352]	@ (8006404 <HAL_ADC_AnalogWDGConfig+0x25c>)
 80062a4:	f7fe fb1a 	bl	80048dc <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 80062a8:	e01f      	b.n	80062ea <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a56      	ldr	r2, [pc, #344]	@ (8006408 <HAL_ADC_AnalogWDGConfig+0x260>)
 80062b0:	4954      	ldr	r1, [pc, #336]	@ (8006404 <HAL_ADC_AnalogWDGConfig+0x25c>)
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7fe fb12 	bl	80048dc <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80062b8:	e017      	b.n	80062ea <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a53      	ldr	r2, [pc, #332]	@ (800640c <HAL_ADC_AnalogWDGConfig+0x264>)
 80062c0:	4950      	ldr	r1, [pc, #320]	@ (8006404 <HAL_ADC_AnalogWDGConfig+0x25c>)
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7fe fb0a 	bl	80048dc <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80062c8:	e00f      	b.n	80062ea <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a50      	ldr	r2, [pc, #320]	@ (8006410 <HAL_ADC_AnalogWDGConfig+0x268>)
 80062d0:	494c      	ldr	r1, [pc, #304]	@ (8006404 <HAL_ADC_AnalogWDGConfig+0x25c>)
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7fe fb02 	bl	80048dc <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80062d8:	e007      	b.n	80062ea <HAL_ADC_AnalogWDGConfig+0x142>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2200      	movs	r2, #0
 80062e0:	4948      	ldr	r1, [pc, #288]	@ (8006404 <HAL_ADC_AnalogWDGConfig+0x25c>)
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fe fafa 	bl	80048dc <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80062e8:	bf00      	nop
      }

      /* Shift the offset in function of the selected ADC resolution:         */
      /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
      /* are set to 0                                                         */
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80062ea:	4b4a      	ldr	r3, [pc, #296]	@ (8006414 <HAL_ADC_AnalogWDGConfig+0x26c>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80062f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062f6:	d10b      	bne.n	8006310 <HAL_ADC_AnalogWDGConfig+0x168>
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	691a      	ldr	r2, [r3, #16]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	089b      	lsrs	r3, r3, #2
 8006304:	f003 0307 	and.w	r3, r3, #7
 8006308:	005b      	lsls	r3, r3, #1
 800630a:	fa02 f303 	lsl.w	r3, r2, r3
 800630e:	e01d      	b.n	800634c <HAL_ADC_AnalogWDGConfig+0x1a4>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	f003 0310 	and.w	r3, r3, #16
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10b      	bne.n	8006336 <HAL_ADC_AnalogWDGConfig+0x18e>
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	691a      	ldr	r2, [r3, #16]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	089b      	lsrs	r3, r3, #2
 800632a:	f003 0307 	and.w	r3, r3, #7
 800632e:	005b      	lsls	r3, r3, #1
 8006330:	fa02 f303 	lsl.w	r3, r2, r3
 8006334:	e00a      	b.n	800634c <HAL_ADC_AnalogWDGConfig+0x1a4>
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	691a      	ldr	r2, [r3, #16]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	089b      	lsrs	r3, r3, #2
 8006342:	f003 0304 	and.w	r3, r3, #4
 8006346:	005b      	lsls	r3, r3, #1
 8006348:	fa02 f303 	lsl.w	r3, r2, r3
 800634c:	64bb      	str	r3, [r7, #72]	@ 0x48
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 800634e:	4b31      	ldr	r3, [pc, #196]	@ (8006414 <HAL_ADC_AnalogWDGConfig+0x26c>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006356:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800635a:	d10b      	bne.n	8006374 <HAL_ADC_AnalogWDGConfig+0x1cc>
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	695a      	ldr	r2, [r3, #20]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	089b      	lsrs	r3, r3, #2
 8006368:	f003 0307 	and.w	r3, r3, #7
 800636c:	005b      	lsls	r3, r3, #1
 800636e:	fa02 f303 	lsl.w	r3, r2, r3
 8006372:	e01d      	b.n	80063b0 <HAL_ADC_AnalogWDGConfig+0x208>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	f003 0310 	and.w	r3, r3, #16
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10b      	bne.n	800639a <HAL_ADC_AnalogWDGConfig+0x1f2>
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	695a      	ldr	r2, [r3, #20]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	089b      	lsrs	r3, r3, #2
 800638e:	f003 0307 	and.w	r3, r3, #7
 8006392:	005b      	lsls	r3, r3, #1
 8006394:	fa02 f303 	lsl.w	r3, r2, r3
 8006398:	e00a      	b.n	80063b0 <HAL_ADC_AnalogWDGConfig+0x208>
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	695a      	ldr	r2, [r3, #20]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	089b      	lsrs	r3, r3, #2
 80063a6:	f003 0304 	and.w	r3, r3, #4
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	fa02 f303 	lsl.w	r3, r2, r3
 80063b0:	647b      	str	r3, [r7, #68]	@ 0x44

      /* Set the high and low thresholds */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a12      	ldr	r2, [pc, #72]	@ (8006400 <HAL_ADC_AnalogWDGConfig+0x258>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d131      	bne.n	8006420 <HAL_ADC_AnalogWDGConfig+0x278>
      {
        MODIFY_REG(hadc->Instance->LTR1_TR1,
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	699a      	ldr	r2, [r3, #24]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	430a      	orrs	r2, r1
 80063d0:	621a      	str	r2, [r3, #32]
                   ADC3_TR1_AWDFILT,
                   AnalogWDGConfig->FilteringConfig);
        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC3_TR1_LT1, tmpAWDLowThresholdShifted);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	6a1a      	ldr	r2, [r3, #32]
 80063d8:	4b0f      	ldr	r3, [pc, #60]	@ (8006418 <HAL_ADC_AnalogWDGConfig+0x270>)
 80063da:	4013      	ands	r3, r2
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	6812      	ldr	r2, [r2, #0]
 80063e0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80063e2:	430b      	orrs	r3, r1
 80063e4:	6213      	str	r3, [r2, #32]
        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC3_TR1_HT1, (tmpAWDHighThresholdShifted << ADC3_TR1_HT1_Pos));
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6a1a      	ldr	r2, [r3, #32]
 80063ec:	4b0b      	ldr	r3, [pc, #44]	@ (800641c <HAL_ADC_AnalogWDGConfig+0x274>)
 80063ee:	4013      	ands	r3, r2
 80063f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063f2:	0411      	lsls	r1, r2, #16
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	6812      	ldr	r2, [r2, #0]
 80063f8:	430b      	orrs	r3, r1
 80063fa:	6213      	str	r3, [r2, #32]
 80063fc:	e024      	b.n	8006448 <HAL_ADC_AnalogWDGConfig+0x2a0>
 80063fe:	bf00      	nop
 8006400:	58026000 	.word	0x58026000
 8006404:	7dc00000 	.word	0x7dc00000
 8006408:	008fffff 	.word	0x008fffff
 800640c:	010fffff 	.word	0x010fffff
 8006410:	018fffff 	.word	0x018fffff
 8006414:	5c001000 	.word	0x5c001000
 8006418:	fffff000 	.word	0xfffff000
 800641c:	f000ffff 	.word	0xf000ffff
      }
      else
      {

        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6a1b      	ldr	r3, [r3, #32]
 8006426:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006430:	430a      	orrs	r2, r1
 8006432:	621a      	str	r2, [r3, #32]
        MODIFY_REG(hadc->Instance->HTR1_TR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800643a:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006444:	430a      	orrs	r2, r1
 8006446:	625a      	str	r2, [r3, #36]	@ 0x24
      MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
      MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
#endif

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800644c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4618      	mov	r0, r3
 800645a:	f7fe fbbd 	bl	8004bd8 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	7b1b      	ldrb	r3, [r3, #12]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d105      	bne.n	8006472 <HAL_ADC_AnalogWDGConfig+0x2ca>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4618      	mov	r0, r3
 800646c:	f7fe fbdd 	bl	8004c2a <LL_ADC_EnableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006470:	e21c      	b.n	80068ac <HAL_ADC_AnalogWDGConfig+0x704>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4618      	mov	r0, r3
 8006478:	f7fe fc07 	bl	8004c8a <LL_ADC_DisableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800647c:	e216      	b.n	80068ac <HAL_ADC_AnalogWDGConfig+0x704>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8006486:	d01f      	beq.n	80064c8 <HAL_ADC_AnalogWDGConfig+0x320>
 8006488:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 800648c:	f200 80f4 	bhi.w	8006678 <HAL_ADC_AnalogWDGConfig+0x4d0>
 8006490:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006494:	d07d      	beq.n	8006592 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8006496:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800649a:	f200 80ed 	bhi.w	8006678 <HAL_ADC_AnalogWDGConfig+0x4d0>
 800649e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80064a2:	d011      	beq.n	80064c8 <HAL_ADC_AnalogWDGConfig+0x320>
 80064a4:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80064a8:	f200 80e6 	bhi.w	8006678 <HAL_ADC_AnalogWDGConfig+0x4d0>
 80064ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80064b0:	d06f      	beq.n	8006592 <HAL_ADC_AnalogWDGConfig+0x3ea>
 80064b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80064b6:	f200 80df 	bhi.w	8006678 <HAL_ADC_AnalogWDGConfig+0x4d0>
 80064ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80064be:	d068      	beq.n	8006592 <HAL_ADC_AnalogWDGConfig+0x3ea>
 80064c0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80064c4:	f040 80d8 	bne.w	8006678 <HAL_ADC_AnalogWDGConfig+0x4d0>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a9c      	ldr	r2, [pc, #624]	@ (8006740 <HAL_ADC_AnalogWDGConfig+0x598>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d12f      	bne.n	8006532 <HAL_ADC_AnalogWDGConfig+0x38a>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d108      	bne.n	80064f0 <HAL_ADC_AnalogWDGConfig+0x348>
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	0e9b      	lsrs	r3, r3, #26
 80064e4:	f003 031f 	and.w	r3, r3, #31
 80064e8:	2201      	movs	r2, #1
 80064ea:	fa02 f303 	lsl.w	r3, r2, r3
 80064ee:	e016      	b.n	800651e <HAL_ADC_AnalogWDGConfig+0x376>
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064f8:	fa93 f3a3 	rbit	r3, r3
 80064fc:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80064fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006500:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8006502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <HAL_ADC_AnalogWDGConfig+0x364>
    return 32U;
 8006508:	2320      	movs	r3, #32
 800650a:	e003      	b.n	8006514 <HAL_ADC_AnalogWDGConfig+0x36c>
  return __builtin_clz(value);
 800650c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800650e:	fab3 f383 	clz	r3, r3
 8006512:	b2db      	uxtb	r3, r3
 8006514:	f003 031f 	and.w	r3, r3, #31
 8006518:	2201      	movs	r2, #1
 800651a:	fa02 f303 	lsl.w	r3, r2, r3
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	6812      	ldr	r2, [r2, #0]
 8006522:	f8d2 10a0 	ldr.w	r1, [r2, #160]	@ 0xa0
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	6812      	ldr	r2, [r2, #0]
 800652a:	430b      	orrs	r3, r1
 800652c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8006530:	e0ab      	b.n	800668a <HAL_ADC_AnalogWDGConfig+0x4e2>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800653a:	2b00      	cmp	r3, #0
 800653c:	d108      	bne.n	8006550 <HAL_ADC_AnalogWDGConfig+0x3a8>
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	0e9b      	lsrs	r3, r3, #26
 8006544:	f003 031f 	and.w	r3, r3, #31
 8006548:	2201      	movs	r2, #1
 800654a:	fa02 f303 	lsl.w	r3, r2, r3
 800654e:	e016      	b.n	800657e <HAL_ADC_AnalogWDGConfig+0x3d6>
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006558:	fa93 f3a3 	rbit	r3, r3
 800655c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800655e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006560:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8006562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006564:	2b00      	cmp	r3, #0
 8006566:	d101      	bne.n	800656c <HAL_ADC_AnalogWDGConfig+0x3c4>
    return 32U;
 8006568:	2320      	movs	r3, #32
 800656a:	e003      	b.n	8006574 <HAL_ADC_AnalogWDGConfig+0x3cc>
  return __builtin_clz(value);
 800656c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800656e:	fab3 f383 	clz	r3, r3
 8006572:	b2db      	uxtb	r3, r3
 8006574:	f003 031f 	and.w	r3, r3, #31
 8006578:	2201      	movs	r2, #1
 800657a:	fa02 f303 	lsl.w	r3, r2, r3
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	6812      	ldr	r2, [r2, #0]
 8006582:	f8d2 10a4 	ldr.w	r1, [r2, #164]	@ 0xa4
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	6812      	ldr	r2, [r2, #0]
 800658a:	430b      	orrs	r3, r1
 800658c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
          break;
 8006590:	e07b      	b.n	800668a <HAL_ADC_AnalogWDGConfig+0x4e2>
        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:

#if defined(ADC_VER_V5_V90)
          if (hadc->Instance == ADC3)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a6b      	ldr	r2, [pc, #428]	@ (8006744 <HAL_ADC_AnalogWDGConfig+0x59c>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d108      	bne.n	80065ae <HAL_ADC_AnalogWDGConfig+0x406>
          {

            LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6818      	ldr	r0, [r3, #0]
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a68      	ldr	r2, [pc, #416]	@ (8006748 <HAL_ADC_AnalogWDGConfig+0x5a0>)
 80065a6:	4619      	mov	r1, r3
 80065a8:	f7fe f998 	bl	80048dc <LL_ADC_SetAnalogWDMonitChannels>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
            }
#if defined(ADC_VER_V5_V90)
          }
#endif  /*ADC_VER_V5_V90*/
          break;
 80065ac:	e06d      	b.n	800668a <HAL_ADC_AnalogWDGConfig+0x4e2>
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a63      	ldr	r2, [pc, #396]	@ (8006740 <HAL_ADC_AnalogWDGConfig+0x598>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d12f      	bne.n	8006618 <HAL_ADC_AnalogWDGConfig+0x470>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d108      	bne.n	80065d6 <HAL_ADC_AnalogWDGConfig+0x42e>
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	0e9b      	lsrs	r3, r3, #26
 80065ca:	f003 031f 	and.w	r3, r3, #31
 80065ce:	2201      	movs	r2, #1
 80065d0:	fa02 f303 	lsl.w	r3, r2, r3
 80065d4:	e016      	b.n	8006604 <HAL_ADC_AnalogWDGConfig+0x45c>
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	fa93 f3a3 	rbit	r3, r3
 80065e2:	61bb      	str	r3, [r7, #24]
  return result;
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80065e8:	6a3b      	ldr	r3, [r7, #32]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d101      	bne.n	80065f2 <HAL_ADC_AnalogWDGConfig+0x44a>
    return 32U;
 80065ee:	2320      	movs	r3, #32
 80065f0:	e003      	b.n	80065fa <HAL_ADC_AnalogWDGConfig+0x452>
  return __builtin_clz(value);
 80065f2:	6a3b      	ldr	r3, [r7, #32]
 80065f4:	fab3 f383 	clz	r3, r3
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	f003 031f 	and.w	r3, r3, #31
 80065fe:	2201      	movs	r2, #1
 8006600:	fa02 f303 	lsl.w	r3, r2, r3
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	6812      	ldr	r2, [r2, #0]
 8006608:	f8d2 10a0 	ldr.w	r1, [r2, #160]	@ 0xa0
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	6812      	ldr	r2, [r2, #0]
 8006610:	430b      	orrs	r3, r1
 8006612:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
          break;
 8006616:	e038      	b.n	800668a <HAL_ADC_AnalogWDGConfig+0x4e2>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006620:	2b00      	cmp	r3, #0
 8006622:	d108      	bne.n	8006636 <HAL_ADC_AnalogWDGConfig+0x48e>
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	0e9b      	lsrs	r3, r3, #26
 800662a:	f003 031f 	and.w	r3, r3, #31
 800662e:	2201      	movs	r2, #1
 8006630:	fa02 f303 	lsl.w	r3, r2, r3
 8006634:	e016      	b.n	8006664 <HAL_ADC_AnalogWDGConfig+0x4bc>
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	fa93 f3a3 	rbit	r3, r3
 8006642:	60fb      	str	r3, [r7, #12]
  return result;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d101      	bne.n	8006652 <HAL_ADC_AnalogWDGConfig+0x4aa>
    return 32U;
 800664e:	2320      	movs	r3, #32
 8006650:	e003      	b.n	800665a <HAL_ADC_AnalogWDGConfig+0x4b2>
  return __builtin_clz(value);
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	fab3 f383 	clz	r3, r3
 8006658:	b2db      	uxtb	r3, r3
 800665a:	f003 031f 	and.w	r3, r3, #31
 800665e:	2201      	movs	r2, #1
 8006660:	fa02 f303 	lsl.w	r3, r2, r3
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	6812      	ldr	r2, [r2, #0]
 8006668:	f8d2 10a4 	ldr.w	r1, [r2, #164]	@ 0xa4
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	6812      	ldr	r2, [r2, #0]
 8006670:	430b      	orrs	r3, r1
 8006672:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
          break;
 8006676:	e008      	b.n	800668a <HAL_ADC_AnalogWDGConfig+0x4e2>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6818      	ldr	r0, [r3, #0]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2200      	movs	r2, #0
 8006682:	4619      	mov	r1, r3
 8006684:	f7fe f92a 	bl	80048dc <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006688:	bf00      	nop
      }

      /* Shift the thresholds in function of the selected ADC resolution      */
      /* have to be left-aligned on bit 15, the LSB (right bits) are set to 0 */
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	f003 0310 	and.w	r3, r3, #16
 8006694:	2b00      	cmp	r3, #0
 8006696:	d10b      	bne.n	80066b0 <HAL_ADC_AnalogWDGConfig+0x508>
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	691a      	ldr	r2, [r3, #16]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	089b      	lsrs	r3, r3, #2
 80066a4:	f003 0307 	and.w	r3, r3, #7
 80066a8:	005b      	lsls	r3, r3, #1
 80066aa:	fa02 f303 	lsl.w	r3, r2, r3
 80066ae:	e00a      	b.n	80066c6 <HAL_ADC_AnalogWDGConfig+0x51e>
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	691a      	ldr	r2, [r3, #16]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	089b      	lsrs	r3, r3, #2
 80066bc:	f003 0304 	and.w	r3, r3, #4
 80066c0:	005b      	lsls	r3, r3, #1
 80066c2:	fa02 f303 	lsl.w	r3, r2, r3
 80066c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	f003 0310 	and.w	r3, r3, #16
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10b      	bne.n	80066ee <HAL_ADC_AnalogWDGConfig+0x546>
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	695a      	ldr	r2, [r3, #20]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	089b      	lsrs	r3, r3, #2
 80066e2:	f003 0307 	and.w	r3, r3, #7
 80066e6:	005b      	lsls	r3, r3, #1
 80066e8:	fa02 f303 	lsl.w	r3, r2, r3
 80066ec:	e00a      	b.n	8006704 <HAL_ADC_AnalogWDGConfig+0x55c>
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	695a      	ldr	r2, [r3, #20]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	089b      	lsrs	r3, r3, #2
 80066fa:	f003 0304 	and.w	r3, r3, #4
 80066fe:	005b      	lsls	r3, r3, #1
 8006700:	fa02 f303 	lsl.w	r3, r2, r3
 8006704:	647b      	str	r3, [r7, #68]	@ 0x44

#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a0e      	ldr	r2, [pc, #56]	@ (8006744 <HAL_ADC_AnalogWDGConfig+0x59c>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d153      	bne.n	80067b8 <HAL_ADC_AnalogWDGConfig+0x610>
      {

        /* Analog watchdog thresholds configuration */
        if (AnalogWDGConfig->WatchdogNumber != ADC_ANALOGWATCHDOG_1)
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a0d      	ldr	r2, [pc, #52]	@ (800674c <HAL_ADC_AnalogWDGConfig+0x5a4>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d045      	beq.n	80067a6 <HAL_ADC_AnalogWDGConfig+0x5fe>
        {
          /* Shift the offset with respect to the selected ADC resolution:        */
          /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
          /* are set to 0.                                                        */
          tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	f003 0310 	and.w	r3, r3, #16
 8006724:	2b00      	cmp	r3, #0
 8006726:	d113      	bne.n	8006750 <HAL_ADC_AnalogWDGConfig+0x5a8>
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	691a      	ldr	r2, [r3, #16]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	089b      	lsrs	r3, r3, #2
 8006734:	f003 0307 	and.w	r3, r3, #7
 8006738:	005b      	lsls	r3, r3, #1
 800673a:	fa02 f303 	lsl.w	r3, r2, r3
 800673e:	e012      	b.n	8006766 <HAL_ADC_AnalogWDGConfig+0x5be>
 8006740:	001fffff 	.word	0x001fffff
 8006744:	58026000 	.word	0x58026000
 8006748:	018fffff 	.word	0x018fffff
 800674c:	7dc00000 	.word	0x7dc00000
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	691a      	ldr	r2, [r3, #16]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	089b      	lsrs	r3, r3, #2
 800675c:	f003 0304 	and.w	r3, r3, #4
 8006760:	005b      	lsls	r3, r3, #1
 8006762:	fa02 f303 	lsl.w	r3, r2, r3
 8006766:	64bb      	str	r3, [r7, #72]	@ 0x48
          tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	f003 0310 	and.w	r3, r3, #16
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10b      	bne.n	800678e <HAL_ADC_AnalogWDGConfig+0x5e6>
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	695a      	ldr	r2, [r3, #20]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	089b      	lsrs	r3, r3, #2
 8006782:	f003 0307 	and.w	r3, r3, #7
 8006786:	005b      	lsls	r3, r3, #1
 8006788:	fa02 f303 	lsl.w	r3, r2, r3
 800678c:	e00a      	b.n	80067a4 <HAL_ADC_AnalogWDGConfig+0x5fc>
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	695a      	ldr	r2, [r3, #20]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	089b      	lsrs	r3, r3, #2
 800679a:	f003 0304 	and.w	r3, r3, #4
 800679e:	005b      	lsls	r3, r3, #1
 80067a0:	fa02 f303 	lsl.w	r3, r2, r3
 80067a4:	647b      	str	r3, [r7, #68]	@ 0x44
        }

        /* Set ADC analog watchdog thresholds value of both thresholds high and low */
        LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted, tmpAWDLowThresholdShifted);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6818      	ldr	r0, [r3, #0]
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	6819      	ldr	r1, [r3, #0]
 80067ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067b2:	f7fe f8c1 	bl	8004938 <LL_ADC_ConfigAnalogWDThresholds>
 80067b6:	e035      	b.n	8006824 <HAL_ADC_AnalogWDGConfig+0x67c>

      }
      else
      {

        if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a40      	ldr	r2, [pc, #256]	@ (80068c0 <HAL_ADC_AnalogWDGConfig+0x718>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d118      	bne.n	80067f4 <HAL_ADC_AnalogWDGConfig+0x64c>
        {
          /* Set ADC analog watchdog thresholds value of both thresholds high and low */
          MODIFY_REG(hadc->Instance->LTR2_DIFSEL,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80067ca:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067d4:	430a      	orrs	r2, r1
 80067d6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
          MODIFY_REG(hadc->Instance->HTR2_CALFACT,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80067e2:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067ec:	430a      	orrs	r2, r1
 80067ee:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 80067f2:	e017      	b.n	8006824 <HAL_ADC_AnalogWDGConfig+0x67c>
        }
        else
        {
          /* Set ADC analog watchdog thresholds value of both thresholds high and low */
          MODIFY_REG(hadc->Instance->LTR3_RES10,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80067fc:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006806:	430a      	orrs	r2, r1
 8006808:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
          MODIFY_REG(hadc->Instance->HTR3_RES11,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006814:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800681e:	430a      	orrs	r2, r1
 8006820:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
        MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
      }

#endif
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a25      	ldr	r2, [pc, #148]	@ (80068c0 <HAL_ADC_AnalogWDGConfig+0x718>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d11a      	bne.n	8006864 <HAL_ADC_AnalogWDGConfig+0x6bc>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006832:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4618      	mov	r0, r3
 8006840:	f7fe f9d7 	bl	8004bf2 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	7b1b      	ldrb	r3, [r3, #12]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d105      	bne.n	8006858 <HAL_ADC_AnalogWDGConfig+0x6b0>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4618      	mov	r0, r3
 8006852:	f7fe f9fa 	bl	8004c4a <LL_ADC_EnableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006856:	e029      	b.n	80068ac <HAL_ADC_AnalogWDGConfig+0x704>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4618      	mov	r0, r3
 800685e:	f7fe fa24 	bl	8004caa <LL_ADC_DisableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006862:	e023      	b.n	80068ac <HAL_ADC_AnalogWDGConfig+0x704>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006868:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4618      	mov	r0, r3
 8006876:	f7fe f9ca 	bl	8004c0e <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	7b1b      	ldrb	r3, [r3, #12]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d105      	bne.n	800688e <HAL_ADC_AnalogWDGConfig+0x6e6>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4618      	mov	r0, r3
 8006888:	f7fe f9ef 	bl	8004c6a <LL_ADC_EnableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800688c:	e00e      	b.n	80068ac <HAL_ADC_AnalogWDGConfig+0x704>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4618      	mov	r0, r3
 8006894:	f7fe fa19 	bl	8004cca <LL_ADC_DisableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006898:	e008      	b.n	80068ac <HAL_ADC_AnalogWDGConfig+0x704>
  /* If a conversion is on going on ADC group regular or injected, no update  */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800689e:	f043 0220 	orr.w	r2, r3, #32
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80068b4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3750      	adds	r7, #80	@ 0x50
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	001fffff 	.word	0x001fffff

080068c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7fe f921 	bl	8004b18 <LL_ADC_IsEnabled>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d16e      	bne.n	80069ba <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	689a      	ldr	r2, [r3, #8]
 80068e2:	4b38      	ldr	r3, [pc, #224]	@ (80069c4 <ADC_Enable+0x100>)
 80068e4:	4013      	ands	r3, r2
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00d      	beq.n	8006906 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068ee:	f043 0210 	orr.w	r2, r3, #16
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068fa:	f043 0201 	orr.w	r2, r3, #1
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e05a      	b.n	80069bc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4618      	mov	r0, r3
 800690c:	f7fe f8dc 	bl	8004ac8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006910:	f7fd fd6a 	bl	80043e8 <HAL_GetTick>
 8006914:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a2b      	ldr	r2, [pc, #172]	@ (80069c8 <ADC_Enable+0x104>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d004      	beq.n	800692a <ADC_Enable+0x66>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a29      	ldr	r2, [pc, #164]	@ (80069cc <ADC_Enable+0x108>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d101      	bne.n	800692e <ADC_Enable+0x6a>
 800692a:	4b29      	ldr	r3, [pc, #164]	@ (80069d0 <ADC_Enable+0x10c>)
 800692c:	e000      	b.n	8006930 <ADC_Enable+0x6c>
 800692e:	4b29      	ldr	r3, [pc, #164]	@ (80069d4 <ADC_Enable+0x110>)
 8006930:	4618      	mov	r0, r3
 8006932:	f7fe f85f 	bl	80049f4 <LL_ADC_GetMultimode>
 8006936:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a23      	ldr	r2, [pc, #140]	@ (80069cc <ADC_Enable+0x108>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d002      	beq.n	8006948 <ADC_Enable+0x84>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	e000      	b.n	800694a <ADC_Enable+0x86>
 8006948:	4b1f      	ldr	r3, [pc, #124]	@ (80069c8 <ADC_Enable+0x104>)
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	6812      	ldr	r2, [r2, #0]
 800694e:	4293      	cmp	r3, r2
 8006950:	d02c      	beq.n	80069ac <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d130      	bne.n	80069ba <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006958:	e028      	b.n	80069ac <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4618      	mov	r0, r3
 8006960:	f7fe f8da 	bl	8004b18 <LL_ADC_IsEnabled>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d104      	bne.n	8006974 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4618      	mov	r0, r3
 8006970:	f7fe f8aa 	bl	8004ac8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006974:	f7fd fd38 	bl	80043e8 <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	2b02      	cmp	r3, #2
 8006980:	d914      	bls.n	80069ac <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0301 	and.w	r3, r3, #1
 800698c:	2b01      	cmp	r3, #1
 800698e:	d00d      	beq.n	80069ac <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006994:	f043 0210 	orr.w	r2, r3, #16
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069a0:	f043 0201 	orr.w	r2, r3, #1
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e007      	b.n	80069bc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d1cf      	bne.n	800695a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	8000003f 	.word	0x8000003f
 80069c8:	40022000 	.word	0x40022000
 80069cc:	40022100 	.word	0x40022100
 80069d0:	40022300 	.word	0x40022300
 80069d4:	58026300 	.word	0x58026300

080069d8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7fe f8aa 	bl	8004b3e <LL_ADC_IsDisableOngoing>
 80069ea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7fe f891 	bl	8004b18 <LL_ADC_IsEnabled>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d047      	beq.n	8006a8c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d144      	bne.n	8006a8c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	f003 030d 	and.w	r3, r3, #13
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d10c      	bne.n	8006a2a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7fe f86b 	bl	8004af0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2203      	movs	r2, #3
 8006a20:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006a22:	f7fd fce1 	bl	80043e8 <HAL_GetTick>
 8006a26:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006a28:	e029      	b.n	8006a7e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a2e:	f043 0210 	orr.w	r2, r3, #16
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a3a:	f043 0201 	orr.w	r2, r3, #1
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e023      	b.n	8006a8e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006a46:	f7fd fccf 	bl	80043e8 <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d914      	bls.n	8006a7e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	f003 0301 	and.w	r3, r3, #1
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00d      	beq.n	8006a7e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a66:	f043 0210 	orr.w	r2, r3, #16
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a72:	f043 0201 	orr.w	r2, r3, #1
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e007      	b.n	8006a8e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	f003 0301 	and.w	r3, r3, #1
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1dc      	bne.n	8006a46 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b084      	sub	sp, #16
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006aa8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d14b      	bne.n	8006b48 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ab4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0308 	and.w	r3, r3, #8
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d021      	beq.n	8006b0e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7fd fe0a 	bl	80046e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d032      	beq.n	8006b40 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d12b      	bne.n	8006b40 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006aec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006af8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d11f      	bne.n	8006b40 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b04:	f043 0201 	orr.w	r2, r3, #1
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	661a      	str	r2, [r3, #96]	@ 0x60
 8006b0c:	e018      	b.n	8006b40 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	f003 0303 	and.w	r3, r3, #3
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d111      	bne.n	8006b40 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d105      	bne.n	8006b40 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b38:	f043 0201 	orr.w	r2, r3, #1
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f7fb f8cb 	bl	8001cdc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006b46:	e00e      	b.n	8006b66 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b4c:	f003 0310 	and.w	r3, r3, #16
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d003      	beq.n	8006b5c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f7fb f895 	bl	8001c84 <HAL_ADC_ErrorCallback>
}
 8006b5a:	e004      	b.n	8006b66 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	4798      	blx	r3
}
 8006b66:	bf00      	nop
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b084      	sub	sp, #16
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f7fe fdd3 	bl	8005728 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006b82:	bf00      	nop
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b084      	sub	sp, #16
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b9c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ba8:	f043 0204 	orr.w	r2, r3, #4
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f7fb f867 	bl	8001c84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006bb6:	bf00      	nop
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
	...

08006bc0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a6c      	ldr	r2, [pc, #432]	@ (8006d80 <ADC_ConfigureBoostMode+0x1c0>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d004      	beq.n	8006bdc <ADC_ConfigureBoostMode+0x1c>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a6b      	ldr	r2, [pc, #428]	@ (8006d84 <ADC_ConfigureBoostMode+0x1c4>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d109      	bne.n	8006bf0 <ADC_ConfigureBoostMode+0x30>
 8006bdc:	4b6a      	ldr	r3, [pc, #424]	@ (8006d88 <ADC_ConfigureBoostMode+0x1c8>)
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	bf14      	ite	ne
 8006be8:	2301      	movne	r3, #1
 8006bea:	2300      	moveq	r3, #0
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	e008      	b.n	8006c02 <ADC_ConfigureBoostMode+0x42>
 8006bf0:	4b66      	ldr	r3, [pc, #408]	@ (8006d8c <ADC_ConfigureBoostMode+0x1cc>)
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	bf14      	ite	ne
 8006bfc:	2301      	movne	r3, #1
 8006bfe:	2300      	moveq	r3, #0
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d01c      	beq.n	8006c40 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006c06:	f004 fda9 	bl	800b75c <HAL_RCC_GetHCLKFreq>
 8006c0a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006c14:	d010      	beq.n	8006c38 <ADC_ConfigureBoostMode+0x78>
 8006c16:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006c1a:	d873      	bhi.n	8006d04 <ADC_ConfigureBoostMode+0x144>
 8006c1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c20:	d002      	beq.n	8006c28 <ADC_ConfigureBoostMode+0x68>
 8006c22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c26:	d16d      	bne.n	8006d04 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	0c1b      	lsrs	r3, r3, #16
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c34:	60fb      	str	r3, [r7, #12]
        break;
 8006c36:	e068      	b.n	8006d0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	089b      	lsrs	r3, r3, #2
 8006c3c:	60fb      	str	r3, [r7, #12]
        break;
 8006c3e:	e064      	b.n	8006d0a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006c40:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8006c44:	f04f 0100 	mov.w	r1, #0
 8006c48:	f005 ff84 	bl	800cb54 <HAL_RCCEx_GetPeriphCLKFreq>
 8006c4c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8006c56:	d051      	beq.n	8006cfc <ADC_ConfigureBoostMode+0x13c>
 8006c58:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8006c5c:	d854      	bhi.n	8006d08 <ADC_ConfigureBoostMode+0x148>
 8006c5e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8006c62:	d047      	beq.n	8006cf4 <ADC_ConfigureBoostMode+0x134>
 8006c64:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8006c68:	d84e      	bhi.n	8006d08 <ADC_ConfigureBoostMode+0x148>
 8006c6a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8006c6e:	d03d      	beq.n	8006cec <ADC_ConfigureBoostMode+0x12c>
 8006c70:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8006c74:	d848      	bhi.n	8006d08 <ADC_ConfigureBoostMode+0x148>
 8006c76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c7a:	d033      	beq.n	8006ce4 <ADC_ConfigureBoostMode+0x124>
 8006c7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c80:	d842      	bhi.n	8006d08 <ADC_ConfigureBoostMode+0x148>
 8006c82:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8006c86:	d029      	beq.n	8006cdc <ADC_ConfigureBoostMode+0x11c>
 8006c88:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8006c8c:	d83c      	bhi.n	8006d08 <ADC_ConfigureBoostMode+0x148>
 8006c8e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006c92:	d01a      	beq.n	8006cca <ADC_ConfigureBoostMode+0x10a>
 8006c94:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006c98:	d836      	bhi.n	8006d08 <ADC_ConfigureBoostMode+0x148>
 8006c9a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006c9e:	d014      	beq.n	8006cca <ADC_ConfigureBoostMode+0x10a>
 8006ca0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006ca4:	d830      	bhi.n	8006d08 <ADC_ConfigureBoostMode+0x148>
 8006ca6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006caa:	d00e      	beq.n	8006cca <ADC_ConfigureBoostMode+0x10a>
 8006cac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cb0:	d82a      	bhi.n	8006d08 <ADC_ConfigureBoostMode+0x148>
 8006cb2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006cb6:	d008      	beq.n	8006cca <ADC_ConfigureBoostMode+0x10a>
 8006cb8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006cbc:	d824      	bhi.n	8006d08 <ADC_ConfigureBoostMode+0x148>
 8006cbe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006cc2:	d002      	beq.n	8006cca <ADC_ConfigureBoostMode+0x10a>
 8006cc4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006cc8:	d11e      	bne.n	8006d08 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	0c9b      	lsrs	r3, r3, #18
 8006cd0:	005b      	lsls	r3, r3, #1
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cd8:	60fb      	str	r3, [r7, #12]
        break;
 8006cda:	e016      	b.n	8006d0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	091b      	lsrs	r3, r3, #4
 8006ce0:	60fb      	str	r3, [r7, #12]
        break;
 8006ce2:	e012      	b.n	8006d0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	095b      	lsrs	r3, r3, #5
 8006ce8:	60fb      	str	r3, [r7, #12]
        break;
 8006cea:	e00e      	b.n	8006d0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	099b      	lsrs	r3, r3, #6
 8006cf0:	60fb      	str	r3, [r7, #12]
        break;
 8006cf2:	e00a      	b.n	8006d0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	09db      	lsrs	r3, r3, #7
 8006cf8:	60fb      	str	r3, [r7, #12]
        break;
 8006cfa:	e006      	b.n	8006d0a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	0a1b      	lsrs	r3, r3, #8
 8006d00:	60fb      	str	r3, [r7, #12]
        break;
 8006d02:	e002      	b.n	8006d0a <ADC_ConfigureBoostMode+0x14a>
        break;
 8006d04:	bf00      	nop
 8006d06:	e000      	b.n	8006d0a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006d08:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	085b      	lsrs	r3, r3, #1
 8006d0e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4a1f      	ldr	r2, [pc, #124]	@ (8006d90 <ADC_ConfigureBoostMode+0x1d0>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d808      	bhi.n	8006d2a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	689a      	ldr	r2, [r3, #8]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006d26:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006d28:	e025      	b.n	8006d76 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	4a19      	ldr	r2, [pc, #100]	@ (8006d94 <ADC_ConfigureBoostMode+0x1d4>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d80a      	bhi.n	8006d48 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d44:	609a      	str	r2, [r3, #8]
}
 8006d46:	e016      	b.n	8006d76 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	4a13      	ldr	r2, [pc, #76]	@ (8006d98 <ADC_ConfigureBoostMode+0x1d8>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d80a      	bhi.n	8006d66 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d62:	609a      	str	r2, [r3, #8]
}
 8006d64:	e007      	b.n	8006d76 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	689a      	ldr	r2, [r3, #8]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006d74:	609a      	str	r2, [r3, #8]
}
 8006d76:	bf00      	nop
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	40022000 	.word	0x40022000
 8006d84:	40022100 	.word	0x40022100
 8006d88:	40022300 	.word	0x40022300
 8006d8c:	58026300 	.word	0x58026300
 8006d90:	005f5e10 	.word	0x005f5e10
 8006d94:	00bebc20 	.word	0x00bebc20
 8006d98:	017d7840 	.word	0x017d7840

08006d9c <LL_ADC_IsEnabled>:
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f003 0301 	and.w	r3, r3, #1
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d101      	bne.n	8006db4 <LL_ADC_IsEnabled+0x18>
 8006db0:	2301      	movs	r3, #1
 8006db2:	e000      	b.n	8006db6 <LL_ADC_IsEnabled+0x1a>
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	370c      	adds	r7, #12
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
	...

08006dc4 <LL_ADC_StartCalibration>:
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	689a      	ldr	r2, [r3, #8]
 8006dd4:	4b09      	ldr	r3, [pc, #36]	@ (8006dfc <LL_ADC_StartCalibration+0x38>)
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006de4:	430a      	orrs	r2, r1
 8006de6:	4313      	orrs	r3, r2
 8006de8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	609a      	str	r2, [r3, #8]
}
 8006df0:	bf00      	nop
 8006df2:	3714      	adds	r7, #20
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	3ffeffc0 	.word	0x3ffeffc0

08006e00 <LL_ADC_IsCalibrationOnGoing>:
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e14:	d101      	bne.n	8006e1a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006e16:	2301      	movs	r3, #1
 8006e18:	e000      	b.n	8006e1c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <LL_ADC_REG_StartConversion>:
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	689a      	ldr	r2, [r3, #8]
 8006e34:	4b05      	ldr	r3, [pc, #20]	@ (8006e4c <LL_ADC_REG_StartConversion+0x24>)
 8006e36:	4013      	ands	r3, r2
 8006e38:	f043 0204 	orr.w	r2, r3, #4
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	609a      	str	r2, [r3, #8]
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr
 8006e4c:	7fffffc0 	.word	0x7fffffc0

08006e50 <LL_ADC_REG_IsConversionOngoing>:
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f003 0304 	and.w	r3, r3, #4
 8006e60:	2b04      	cmp	r3, #4
 8006e62:	d101      	bne.n	8006e68 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006e64:	2301      	movs	r3, #1
 8006e66:	e000      	b.n	8006e6a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	370c      	adds	r7, #12
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
	...

08006e78 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b086      	sub	sp, #24
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006e84:	2300      	movs	r3, #0
 8006e86:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d101      	bne.n	8006e96 <HAL_ADCEx_Calibration_Start+0x1e>
 8006e92:	2302      	movs	r3, #2
 8006e94:	e04c      	b.n	8006f30 <HAL_ADCEx_Calibration_Start+0xb8>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	f7ff fd9a 	bl	80069d8 <ADC_Disable>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006ea8:	7dfb      	ldrb	r3, [r7, #23]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d135      	bne.n	8006f1a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006eb2:	4b21      	ldr	r3, [pc, #132]	@ (8006f38 <HAL_ADCEx_Calibration_Start+0xc0>)
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	f043 0202 	orr.w	r2, r3, #2
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	661a      	str	r2, [r3, #96]	@ 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	68b9      	ldr	r1, [r7, #8]
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7ff ff7c 	bl	8006dc4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006ecc:	e014      	b.n	8006ef8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	4a19      	ldr	r2, [pc, #100]	@ (8006f3c <HAL_ADCEx_Calibration_Start+0xc4>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d30d      	bcc.n	8006ef8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ee0:	f023 0312 	bic.w	r3, r3, #18
 8006ee4:	f043 0210 	orr.w	r2, r3, #16
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e01b      	b.n	8006f30 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7ff ff7f 	bl	8006e00 <LL_ADC_IsCalibrationOnGoing>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1e2      	bne.n	8006ece <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f0c:	f023 0303 	bic.w	r3, r3, #3
 8006f10:	f043 0201 	orr.w	r2, r3, #1
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	661a      	str	r2, [r3, #96]	@ 0x60
 8006f18:	e005      	b.n	8006f26 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f1e:	f043 0210 	orr.w	r2, r3, #16
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8006f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3718      	adds	r7, #24
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	ffffeefd 	.word	0xffffeefd
 8006f3c:	25c3f800 	.word	0x25c3f800

08006f40 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b0a2      	sub	sp, #136	@ 0x88
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7ff ff7d 	bl	8006e50 <LL_ADC_REG_IsConversionOngoing>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d001      	beq.n	8006f60 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	e08c      	b.n	800707a <HAL_ADCEx_MultiModeStart_DMA+0x13a>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d101      	bne.n	8006f6e <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	e085      	b.n	800707a <HAL_ADCEx_MultiModeStart_DMA+0x13a>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2201      	movs	r2, #1
 8006f72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006f76:	2300      	movs	r3, #0
 8006f78:	673b      	str	r3, [r7, #112]	@ 0x70
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	677b      	str	r3, [r7, #116]	@ 0x74
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a40      	ldr	r2, [pc, #256]	@ (8007084 <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d102      	bne.n	8006f8e <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 8006f88:	4b3f      	ldr	r3, [pc, #252]	@ (8007088 <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 8006f8a:	613b      	str	r3, [r7, #16]
 8006f8c:	e001      	b.n	8006f92 <HAL_ADCEx_MultiModeStart_DMA+0x52>
 8006f8e:	2300      	movs	r3, #0
 8006f90:	613b      	str	r3, [r7, #16]

    if (tmphadcSlave.Instance == NULL)
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d10b      	bne.n	8006fb0 <HAL_ADCEx_MultiModeStart_DMA+0x70>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f9c:	f043 0220 	orr.w	r2, r3, #32
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e064      	b.n	800707a <HAL_ADCEx_MultiModeStart_DMA+0x13a>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f7ff fc87 	bl	80068c4 <ADC_Enable>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    if (tmp_hal_status == HAL_OK)
 8006fbc:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d107      	bne.n	8006fd4 <HAL_ADCEx_MultiModeStart_DMA+0x94>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8006fc4:	f107 0310 	add.w	r3, r7, #16
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f7ff fc7b 	bl	80068c4 <ADC_Enable>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8006fd4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d148      	bne.n	800706e <HAL_ADCEx_MultiModeStart_DMA+0x12e>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006fe0:	4b2a      	ldr	r3, [pc, #168]	@ (800708c <HAL_ADCEx_MultiModeStart_DMA+0x14c>)
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	661a      	str	r2, [r3, #96]	@ 0x60
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ff6:	4a26      	ldr	r2, [pc, #152]	@ (8007090 <HAL_ADCEx_MultiModeStart_DMA+0x150>)
 8006ff8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ffe:	4a25      	ldr	r2, [pc, #148]	@ (8007094 <HAL_ADCEx_MultiModeStart_DMA+0x154>)
 8007000:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007006:	4a24      	ldr	r2, [pc, #144]	@ (8007098 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 8007008:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a1d      	ldr	r2, [pc, #116]	@ (8007084 <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d004      	beq.n	800701e <HAL_ADCEx_MultiModeStart_DMA+0xde>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a1b      	ldr	r2, [pc, #108]	@ (8007088 <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d101      	bne.n	8007022 <HAL_ADCEx_MultiModeStart_DMA+0xe2>
 800701e:	4b1f      	ldr	r3, [pc, #124]	@ (800709c <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 8007020:	e000      	b.n	8007024 <HAL_ADCEx_MultiModeStart_DMA+0xe4>
 8007022:	4b1f      	ldr	r3, [pc, #124]	@ (80070a0 <HAL_ADCEx_MultiModeStart_DMA+0x160>)
 8007024:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	221c      	movs	r2, #28
 800702e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	685a      	ldr	r2, [r3, #4]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f042 0210 	orr.w	r2, r2, #16
 8007046:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800704c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007050:	330c      	adds	r3, #12
 8007052:	4619      	mov	r1, r3
 8007054:	68ba      	ldr	r2, [r7, #8]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f000 feca 	bl	8007df0 <HAL_DMA_Start_IT>
 800705c:	4603      	mov	r3, r0
 800705e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4618      	mov	r0, r3
 8007068:	f7ff fede 	bl	8006e28 <LL_ADC_REG_StartConversion>
 800706c:	e003      	b.n	8007076 <HAL_ADCEx_MultiModeStart_DMA+0x136>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    }

    /* Return function status */
    return tmp_hal_status;
 8007076:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
  }
}
 800707a:	4618      	mov	r0, r3
 800707c:	3788      	adds	r7, #136	@ 0x88
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	40022000 	.word	0x40022000
 8007088:	40022100 	.word	0x40022100
 800708c:	fffff0fe 	.word	0xfffff0fe
 8007090:	08006a97 	.word	0x08006a97
 8007094:	08006b6f 	.word	0x08006b6f
 8007098:	08006b8b 	.word	0x08006b8b
 800709c:	40022300 	.word	0x40022300
 80070a0:	58026300 	.word	0x58026300

080070a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80070c0:	bf00      	nop
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80070fc:	bf00      	nop
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8007108:	b590      	push	{r4, r7, lr}
 800710a:	b0a3      	sub	sp, #140	@ 0x8c
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007112:	2300      	movs	r3, #0
 8007114:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800711e:	2b01      	cmp	r3, #1
 8007120:	d101      	bne.n	8007126 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007122:	2302      	movs	r3, #2
 8007124:	e0c1      	b.n	80072aa <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800712e:	2300      	movs	r3, #0
 8007130:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8007132:	2300      	movs	r3, #0
 8007134:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a5e      	ldr	r2, [pc, #376]	@ (80072b4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d102      	bne.n	8007146 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007140:	4b5d      	ldr	r3, [pc, #372]	@ (80072b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007142:	60fb      	str	r3, [r7, #12]
 8007144:	e001      	b.n	800714a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8007146:	2300      	movs	r3, #0
 8007148:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10b      	bne.n	8007168 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007154:	f043 0220 	orr.w	r2, r3, #32
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	e0a0      	b.n	80072aa <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	4618      	mov	r0, r3
 800716c:	f7ff fe70 	bl	8006e50 <LL_ADC_REG_IsConversionOngoing>
 8007170:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4618      	mov	r0, r3
 800717a:	f7ff fe69 	bl	8006e50 <LL_ADC_REG_IsConversionOngoing>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	f040 8081 	bne.w	8007288 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8007186:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800718a:	2b00      	cmp	r3, #0
 800718c:	d17c      	bne.n	8007288 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a48      	ldr	r2, [pc, #288]	@ (80072b4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d004      	beq.n	80071a2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a46      	ldr	r2, [pc, #280]	@ (80072b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d101      	bne.n	80071a6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80071a2:	4b46      	ldr	r3, [pc, #280]	@ (80072bc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80071a4:	e000      	b.n	80071a8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80071a6:	4b46      	ldr	r3, [pc, #280]	@ (80072c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80071a8:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d039      	beq.n	8007226 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80071b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	431a      	orrs	r2, r3
 80071c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80071c2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a3a      	ldr	r2, [pc, #232]	@ (80072b4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d004      	beq.n	80071d8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a39      	ldr	r2, [pc, #228]	@ (80072b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d10e      	bne.n	80071f6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80071d8:	4836      	ldr	r0, [pc, #216]	@ (80072b4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80071da:	f7ff fddf 	bl	8006d9c <LL_ADC_IsEnabled>
 80071de:	4604      	mov	r4, r0
 80071e0:	4835      	ldr	r0, [pc, #212]	@ (80072b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80071e2:	f7ff fddb 	bl	8006d9c <LL_ADC_IsEnabled>
 80071e6:	4603      	mov	r3, r0
 80071e8:	4323      	orrs	r3, r4
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	bf0c      	ite	eq
 80071ee:	2301      	moveq	r3, #1
 80071f0:	2300      	movne	r3, #0
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	e008      	b.n	8007208 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80071f6:	4833      	ldr	r0, [pc, #204]	@ (80072c4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80071f8:	f7ff fdd0 	bl	8006d9c <LL_ADC_IsEnabled>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	bf0c      	ite	eq
 8007202:	2301      	moveq	r3, #1
 8007204:	2300      	movne	r3, #0
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b00      	cmp	r3, #0
 800720a:	d047      	beq.n	800729c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800720c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800720e:	689a      	ldr	r2, [r3, #8]
 8007210:	4b2d      	ldr	r3, [pc, #180]	@ (80072c8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007212:	4013      	ands	r3, r2
 8007214:	683a      	ldr	r2, [r7, #0]
 8007216:	6811      	ldr	r1, [r2, #0]
 8007218:	683a      	ldr	r2, [r7, #0]
 800721a:	6892      	ldr	r2, [r2, #8]
 800721c:	430a      	orrs	r2, r1
 800721e:	431a      	orrs	r2, r3
 8007220:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007222:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007224:	e03a      	b.n	800729c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8007226:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800722e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007230:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a1f      	ldr	r2, [pc, #124]	@ (80072b4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d004      	beq.n	8007246 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a1d      	ldr	r2, [pc, #116]	@ (80072b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d10e      	bne.n	8007264 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8007246:	481b      	ldr	r0, [pc, #108]	@ (80072b4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007248:	f7ff fda8 	bl	8006d9c <LL_ADC_IsEnabled>
 800724c:	4604      	mov	r4, r0
 800724e:	481a      	ldr	r0, [pc, #104]	@ (80072b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007250:	f7ff fda4 	bl	8006d9c <LL_ADC_IsEnabled>
 8007254:	4603      	mov	r3, r0
 8007256:	4323      	orrs	r3, r4
 8007258:	2b00      	cmp	r3, #0
 800725a:	bf0c      	ite	eq
 800725c:	2301      	moveq	r3, #1
 800725e:	2300      	movne	r3, #0
 8007260:	b2db      	uxtb	r3, r3
 8007262:	e008      	b.n	8007276 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8007264:	4817      	ldr	r0, [pc, #92]	@ (80072c4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8007266:	f7ff fd99 	bl	8006d9c <LL_ADC_IsEnabled>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	bf0c      	ite	eq
 8007270:	2301      	moveq	r3, #1
 8007272:	2300      	movne	r3, #0
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b00      	cmp	r3, #0
 8007278:	d010      	beq.n	800729c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800727a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800727c:	689a      	ldr	r2, [r3, #8]
 800727e:	4b12      	ldr	r3, [pc, #72]	@ (80072c8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007280:	4013      	ands	r3, r2
 8007282:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007284:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007286:	e009      	b.n	800729c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800728c:	f043 0220 	orr.w	r2, r3, #32
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800729a:	e000      	b.n	800729e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800729c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80072a6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	378c      	adds	r7, #140	@ 0x8c
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd90      	pop	{r4, r7, pc}
 80072b2:	bf00      	nop
 80072b4:	40022000 	.word	0x40022000
 80072b8:	40022100 	.word	0x40022100
 80072bc:	40022300 	.word	0x40022300
 80072c0:	58026300 	.word	0x58026300
 80072c4:	58026000 	.word	0x58026000
 80072c8:	fffff0e0 	.word	0xfffff0e0

080072cc <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b088      	sub	sp, #32
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80072d4:	2300      	movs	r3, #0
 80072d6:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 80072d8:	2300      	movs	r3, #0
 80072da:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d102      	bne.n	80072e8 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	77fb      	strb	r3, [r7, #31]
 80072e6:	e10e      	b.n	8007506 <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072f6:	d102      	bne.n	80072fe <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	77fb      	strb	r3, [r7, #31]
 80072fc:	e103      	b.n	8007506 <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007304:	b2db      	uxtb	r3, r3
 8007306:	2b00      	cmp	r3, #0
 8007308:	d109      	bne.n	800731e <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f7fc fadb 	bl	80038d4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 0304 	and.w	r3, r3, #4
 8007328:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8007332:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 8007338:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 800733e:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 8007344:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800734a:	4313      	orrs	r3, r2
 800734c:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	4b6e      	ldr	r3, [pc, #440]	@ (8007510 <HAL_COMP_Init+0x244>)
 8007356:	4013      	ands	r3, r2
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	6812      	ldr	r2, [r2, #0]
 800735c:	6979      	ldr	r1, [r7, #20]
 800735e:	430b      	orrs	r3, r1
 8007360:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	2b10      	cmp	r3, #16
 8007368:	d108      	bne.n	800737c <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f042 0210 	orr.w	r2, r2, #16
 8007378:	601a      	str	r2, [r3, #0]
 800737a:	e007      	b.n	800738c <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f022 0210 	bic.w	r2, r2, #16
 800738a:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0304 	and.w	r3, r3, #4
 8007396:	2b00      	cmp	r3, #0
 8007398:	d016      	beq.n	80073c8 <HAL_COMP_Init+0xfc>
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d013      	beq.n	80073c8 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80073a0:	4b5c      	ldr	r3, [pc, #368]	@ (8007514 <HAL_COMP_Init+0x248>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	099b      	lsrs	r3, r3, #6
 80073a6:	4a5c      	ldr	r2, [pc, #368]	@ (8007518 <HAL_COMP_Init+0x24c>)
 80073a8:	fba2 2303 	umull	r2, r3, r2, r3
 80073ac:	099b      	lsrs	r3, r3, #6
 80073ae:	1c5a      	adds	r2, r3, #1
 80073b0:	4613      	mov	r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4413      	add	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 80073ba:	e002      	b.n	80073c2 <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	3b01      	subs	r3, #1
 80073c0:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1f9      	bne.n	80073bc <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a53      	ldr	r2, [pc, #332]	@ (800751c <HAL_COMP_Init+0x250>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d102      	bne.n	80073d8 <HAL_COMP_Init+0x10c>
 80073d2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80073d6:	e001      	b.n	80073dc <HAL_COMP_Init+0x110>
 80073d8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80073dc:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	f003 0303 	and.w	r3, r3, #3
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d06d      	beq.n	80074c6 <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	f003 0310 	and.w	r3, r3, #16
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d008      	beq.n	8007408 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 80073f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	4313      	orrs	r3, r2
 8007404:	600b      	str	r3, [r1, #0]
 8007406:	e008      	b.n	800741a <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 8007408:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	43db      	mvns	r3, r3
 8007412:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007416:	4013      	ands	r3, r2
 8007418:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	f003 0320 	and.w	r3, r3, #32
 8007422:	2b00      	cmp	r3, #0
 8007424:	d008      	beq.n	8007438 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 8007426:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800742a:	685a      	ldr	r2, [r3, #4]
 800742c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	4313      	orrs	r3, r2
 8007434:	604b      	str	r3, [r1, #4]
 8007436:	e008      	b.n	800744a <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 8007438:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800743c:	685a      	ldr	r2, [r3, #4]
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	43db      	mvns	r3, r3
 8007442:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007446:	4013      	ands	r3, r2
 8007448:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 800744a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a1b      	ldr	r3, [r3, #32]
 8007458:	f003 0302 	and.w	r3, r3, #2
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00a      	beq.n	8007476 <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 8007460:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007464:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007468:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	4313      	orrs	r3, r2
 8007470:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 8007474:	e00a      	b.n	800748c <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 8007476:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800747a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	43db      	mvns	r3, r3
 8007482:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007486:	4013      	ands	r3, r2
 8007488:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a1b      	ldr	r3, [r3, #32]
 8007490:	f003 0301 	and.w	r3, r3, #1
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00a      	beq.n	80074ae <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 8007498:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800749c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80074a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 80074ac:	e021      	b.n	80074f2 <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 80074ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074b2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	43db      	mvns	r3, r3
 80074ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80074be:	4013      	ands	r3, r2
 80074c0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 80074c4:	e015      	b.n	80074f2 <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 80074c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074ca:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	43db      	mvns	r3, r3
 80074d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80074d6:	4013      	ands	r3, r2
 80074d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 80074dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074e0:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	43db      	mvns	r3, r3
 80074e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80074ec:	4013      	ands	r3, r2
 80074ee:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d103      	bne.n	8007506 <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2201      	movs	r2, #1
 8007502:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
   
  }
  
  return status;
 8007506:	7ffb      	ldrb	r3, [r7, #31]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3720      	adds	r7, #32
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	f0e8cce1 	.word	0xf0e8cce1
 8007514:	24000038 	.word	0x24000038
 8007518:	053e2d63 	.word	0x053e2d63
 800751c:	5800380c 	.word	0x5800380c

08007520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f003 0307 	and.w	r3, r3, #7
 800752e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007530:	4b0b      	ldr	r3, [pc, #44]	@ (8007560 <__NVIC_SetPriorityGrouping+0x40>)
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800753c:	4013      	ands	r3, r2
 800753e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007548:	4b06      	ldr	r3, [pc, #24]	@ (8007564 <__NVIC_SetPriorityGrouping+0x44>)
 800754a:	4313      	orrs	r3, r2
 800754c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800754e:	4a04      	ldr	r2, [pc, #16]	@ (8007560 <__NVIC_SetPriorityGrouping+0x40>)
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	60d3      	str	r3, [r2, #12]
}
 8007554:	bf00      	nop
 8007556:	3714      	adds	r7, #20
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr
 8007560:	e000ed00 	.word	0xe000ed00
 8007564:	05fa0000 	.word	0x05fa0000

08007568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007568:	b480      	push	{r7}
 800756a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800756c:	4b04      	ldr	r3, [pc, #16]	@ (8007580 <__NVIC_GetPriorityGrouping+0x18>)
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	0a1b      	lsrs	r3, r3, #8
 8007572:	f003 0307 	and.w	r3, r3, #7
}
 8007576:	4618      	mov	r0, r3
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr
 8007580:	e000ed00 	.word	0xe000ed00

08007584 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	4603      	mov	r3, r0
 800758c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800758e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007592:	2b00      	cmp	r3, #0
 8007594:	db0b      	blt.n	80075ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007596:	88fb      	ldrh	r3, [r7, #6]
 8007598:	f003 021f 	and.w	r2, r3, #31
 800759c:	4907      	ldr	r1, [pc, #28]	@ (80075bc <__NVIC_EnableIRQ+0x38>)
 800759e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075a2:	095b      	lsrs	r3, r3, #5
 80075a4:	2001      	movs	r0, #1
 80075a6:	fa00 f202 	lsl.w	r2, r0, r2
 80075aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80075ae:	bf00      	nop
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	e000e100 	.word	0xe000e100

080075c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	4603      	mov	r3, r0
 80075c8:	6039      	str	r1, [r7, #0]
 80075ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80075cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	db0a      	blt.n	80075ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	b2da      	uxtb	r2, r3
 80075d8:	490c      	ldr	r1, [pc, #48]	@ (800760c <__NVIC_SetPriority+0x4c>)
 80075da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075de:	0112      	lsls	r2, r2, #4
 80075e0:	b2d2      	uxtb	r2, r2
 80075e2:	440b      	add	r3, r1
 80075e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80075e8:	e00a      	b.n	8007600 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	4908      	ldr	r1, [pc, #32]	@ (8007610 <__NVIC_SetPriority+0x50>)
 80075f0:	88fb      	ldrh	r3, [r7, #6]
 80075f2:	f003 030f 	and.w	r3, r3, #15
 80075f6:	3b04      	subs	r3, #4
 80075f8:	0112      	lsls	r2, r2, #4
 80075fa:	b2d2      	uxtb	r2, r2
 80075fc:	440b      	add	r3, r1
 80075fe:	761a      	strb	r2, [r3, #24]
}
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	e000e100 	.word	0xe000e100
 8007610:	e000ed00 	.word	0xe000ed00

08007614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007614:	b480      	push	{r7}
 8007616:	b089      	sub	sp, #36	@ 0x24
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f003 0307 	and.w	r3, r3, #7
 8007626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	f1c3 0307 	rsb	r3, r3, #7
 800762e:	2b04      	cmp	r3, #4
 8007630:	bf28      	it	cs
 8007632:	2304      	movcs	r3, #4
 8007634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	3304      	adds	r3, #4
 800763a:	2b06      	cmp	r3, #6
 800763c:	d902      	bls.n	8007644 <NVIC_EncodePriority+0x30>
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	3b03      	subs	r3, #3
 8007642:	e000      	b.n	8007646 <NVIC_EncodePriority+0x32>
 8007644:	2300      	movs	r3, #0
 8007646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007648:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	fa02 f303 	lsl.w	r3, r2, r3
 8007652:	43da      	mvns	r2, r3
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	401a      	ands	r2, r3
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800765c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	fa01 f303 	lsl.w	r3, r1, r3
 8007666:	43d9      	mvns	r1, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800766c:	4313      	orrs	r3, r2
         );
}
 800766e:	4618      	mov	r0, r3
 8007670:	3724      	adds	r7, #36	@ 0x24
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
	...

0800767c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	3b01      	subs	r3, #1
 8007688:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800768c:	d301      	bcc.n	8007692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800768e:	2301      	movs	r3, #1
 8007690:	e00f      	b.n	80076b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007692:	4a0a      	ldr	r2, [pc, #40]	@ (80076bc <SysTick_Config+0x40>)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	3b01      	subs	r3, #1
 8007698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800769a:	210f      	movs	r1, #15
 800769c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076a0:	f7ff ff8e 	bl	80075c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80076a4:	4b05      	ldr	r3, [pc, #20]	@ (80076bc <SysTick_Config+0x40>)
 80076a6:	2200      	movs	r2, #0
 80076a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80076aa:	4b04      	ldr	r3, [pc, #16]	@ (80076bc <SysTick_Config+0x40>)
 80076ac:	2207      	movs	r2, #7
 80076ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3708      	adds	r7, #8
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	e000e010 	.word	0xe000e010

080076c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f7ff ff29 	bl	8007520 <__NVIC_SetPriorityGrouping>
}
 80076ce:	bf00      	nop
 80076d0:	3708      	adds	r7, #8
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b086      	sub	sp, #24
 80076da:	af00      	add	r7, sp, #0
 80076dc:	4603      	mov	r3, r0
 80076de:	60b9      	str	r1, [r7, #8]
 80076e0:	607a      	str	r2, [r7, #4]
 80076e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80076e4:	f7ff ff40 	bl	8007568 <__NVIC_GetPriorityGrouping>
 80076e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	68b9      	ldr	r1, [r7, #8]
 80076ee:	6978      	ldr	r0, [r7, #20]
 80076f0:	f7ff ff90 	bl	8007614 <NVIC_EncodePriority>
 80076f4:	4602      	mov	r2, r0
 80076f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80076fa:	4611      	mov	r1, r2
 80076fc:	4618      	mov	r0, r3
 80076fe:	f7ff ff5f 	bl	80075c0 <__NVIC_SetPriority>
}
 8007702:	bf00      	nop
 8007704:	3718      	adds	r7, #24
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b082      	sub	sp, #8
 800770e:	af00      	add	r7, sp, #0
 8007710:	4603      	mov	r3, r0
 8007712:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007714:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007718:	4618      	mov	r0, r3
 800771a:	f7ff ff33 	bl	8007584 <__NVIC_EnableIRQ>
}
 800771e:	bf00      	nop
 8007720:	3708      	adds	r7, #8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b082      	sub	sp, #8
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f7ff ffa4 	bl	800767c <SysTick_Config>
 8007734:	4603      	mov	r3, r0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
	...

08007740 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007748:	f7fc fe4e 	bl	80043e8 <HAL_GetTick>
 800774c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d101      	bne.n	8007758 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	e312      	b.n	8007d7e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a66      	ldr	r2, [pc, #408]	@ (80078f8 <HAL_DMA_Init+0x1b8>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d04a      	beq.n	80077f8 <HAL_DMA_Init+0xb8>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a65      	ldr	r2, [pc, #404]	@ (80078fc <HAL_DMA_Init+0x1bc>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d045      	beq.n	80077f8 <HAL_DMA_Init+0xb8>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a63      	ldr	r2, [pc, #396]	@ (8007900 <HAL_DMA_Init+0x1c0>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d040      	beq.n	80077f8 <HAL_DMA_Init+0xb8>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a62      	ldr	r2, [pc, #392]	@ (8007904 <HAL_DMA_Init+0x1c4>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d03b      	beq.n	80077f8 <HAL_DMA_Init+0xb8>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a60      	ldr	r2, [pc, #384]	@ (8007908 <HAL_DMA_Init+0x1c8>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d036      	beq.n	80077f8 <HAL_DMA_Init+0xb8>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a5f      	ldr	r2, [pc, #380]	@ (800790c <HAL_DMA_Init+0x1cc>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d031      	beq.n	80077f8 <HAL_DMA_Init+0xb8>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a5d      	ldr	r2, [pc, #372]	@ (8007910 <HAL_DMA_Init+0x1d0>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d02c      	beq.n	80077f8 <HAL_DMA_Init+0xb8>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a5c      	ldr	r2, [pc, #368]	@ (8007914 <HAL_DMA_Init+0x1d4>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d027      	beq.n	80077f8 <HAL_DMA_Init+0xb8>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a5a      	ldr	r2, [pc, #360]	@ (8007918 <HAL_DMA_Init+0x1d8>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d022      	beq.n	80077f8 <HAL_DMA_Init+0xb8>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a59      	ldr	r2, [pc, #356]	@ (800791c <HAL_DMA_Init+0x1dc>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d01d      	beq.n	80077f8 <HAL_DMA_Init+0xb8>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a57      	ldr	r2, [pc, #348]	@ (8007920 <HAL_DMA_Init+0x1e0>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d018      	beq.n	80077f8 <HAL_DMA_Init+0xb8>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a56      	ldr	r2, [pc, #344]	@ (8007924 <HAL_DMA_Init+0x1e4>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d013      	beq.n	80077f8 <HAL_DMA_Init+0xb8>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a54      	ldr	r2, [pc, #336]	@ (8007928 <HAL_DMA_Init+0x1e8>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d00e      	beq.n	80077f8 <HAL_DMA_Init+0xb8>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a53      	ldr	r2, [pc, #332]	@ (800792c <HAL_DMA_Init+0x1ec>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d009      	beq.n	80077f8 <HAL_DMA_Init+0xb8>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a51      	ldr	r2, [pc, #324]	@ (8007930 <HAL_DMA_Init+0x1f0>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d004      	beq.n	80077f8 <HAL_DMA_Init+0xb8>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a50      	ldr	r2, [pc, #320]	@ (8007934 <HAL_DMA_Init+0x1f4>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d101      	bne.n	80077fc <HAL_DMA_Init+0xbc>
 80077f8:	2301      	movs	r3, #1
 80077fa:	e000      	b.n	80077fe <HAL_DMA_Init+0xbe>
 80077fc:	2300      	movs	r3, #0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f000 813c 	beq.w	8007a7c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2202      	movs	r2, #2
 8007808:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a37      	ldr	r2, [pc, #220]	@ (80078f8 <HAL_DMA_Init+0x1b8>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d04a      	beq.n	80078b4 <HAL_DMA_Init+0x174>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a36      	ldr	r2, [pc, #216]	@ (80078fc <HAL_DMA_Init+0x1bc>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d045      	beq.n	80078b4 <HAL_DMA_Init+0x174>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a34      	ldr	r2, [pc, #208]	@ (8007900 <HAL_DMA_Init+0x1c0>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d040      	beq.n	80078b4 <HAL_DMA_Init+0x174>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a33      	ldr	r2, [pc, #204]	@ (8007904 <HAL_DMA_Init+0x1c4>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d03b      	beq.n	80078b4 <HAL_DMA_Init+0x174>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a31      	ldr	r2, [pc, #196]	@ (8007908 <HAL_DMA_Init+0x1c8>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d036      	beq.n	80078b4 <HAL_DMA_Init+0x174>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a30      	ldr	r2, [pc, #192]	@ (800790c <HAL_DMA_Init+0x1cc>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d031      	beq.n	80078b4 <HAL_DMA_Init+0x174>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a2e      	ldr	r2, [pc, #184]	@ (8007910 <HAL_DMA_Init+0x1d0>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d02c      	beq.n	80078b4 <HAL_DMA_Init+0x174>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a2d      	ldr	r2, [pc, #180]	@ (8007914 <HAL_DMA_Init+0x1d4>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d027      	beq.n	80078b4 <HAL_DMA_Init+0x174>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a2b      	ldr	r2, [pc, #172]	@ (8007918 <HAL_DMA_Init+0x1d8>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d022      	beq.n	80078b4 <HAL_DMA_Init+0x174>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a2a      	ldr	r2, [pc, #168]	@ (800791c <HAL_DMA_Init+0x1dc>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d01d      	beq.n	80078b4 <HAL_DMA_Init+0x174>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a28      	ldr	r2, [pc, #160]	@ (8007920 <HAL_DMA_Init+0x1e0>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d018      	beq.n	80078b4 <HAL_DMA_Init+0x174>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a27      	ldr	r2, [pc, #156]	@ (8007924 <HAL_DMA_Init+0x1e4>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d013      	beq.n	80078b4 <HAL_DMA_Init+0x174>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a25      	ldr	r2, [pc, #148]	@ (8007928 <HAL_DMA_Init+0x1e8>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d00e      	beq.n	80078b4 <HAL_DMA_Init+0x174>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a24      	ldr	r2, [pc, #144]	@ (800792c <HAL_DMA_Init+0x1ec>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d009      	beq.n	80078b4 <HAL_DMA_Init+0x174>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a22      	ldr	r2, [pc, #136]	@ (8007930 <HAL_DMA_Init+0x1f0>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d004      	beq.n	80078b4 <HAL_DMA_Init+0x174>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a21      	ldr	r2, [pc, #132]	@ (8007934 <HAL_DMA_Init+0x1f4>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d108      	bne.n	80078c6 <HAL_DMA_Init+0x186>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f022 0201 	bic.w	r2, r2, #1
 80078c2:	601a      	str	r2, [r3, #0]
 80078c4:	e007      	b.n	80078d6 <HAL_DMA_Init+0x196>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f022 0201 	bic.w	r2, r2, #1
 80078d4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80078d6:	e02f      	b.n	8007938 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80078d8:	f7fc fd86 	bl	80043e8 <HAL_GetTick>
 80078dc:	4602      	mov	r2, r0
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	2b05      	cmp	r3, #5
 80078e4:	d928      	bls.n	8007938 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2220      	movs	r2, #32
 80078ea:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2203      	movs	r2, #3
 80078f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	e242      	b.n	8007d7e <HAL_DMA_Init+0x63e>
 80078f8:	40020010 	.word	0x40020010
 80078fc:	40020028 	.word	0x40020028
 8007900:	40020040 	.word	0x40020040
 8007904:	40020058 	.word	0x40020058
 8007908:	40020070 	.word	0x40020070
 800790c:	40020088 	.word	0x40020088
 8007910:	400200a0 	.word	0x400200a0
 8007914:	400200b8 	.word	0x400200b8
 8007918:	40020410 	.word	0x40020410
 800791c:	40020428 	.word	0x40020428
 8007920:	40020440 	.word	0x40020440
 8007924:	40020458 	.word	0x40020458
 8007928:	40020470 	.word	0x40020470
 800792c:	40020488 	.word	0x40020488
 8007930:	400204a0 	.word	0x400204a0
 8007934:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 0301 	and.w	r3, r3, #1
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1c8      	bne.n	80078d8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	4b83      	ldr	r3, [pc, #524]	@ (8007b60 <HAL_DMA_Init+0x420>)
 8007952:	4013      	ands	r3, r2
 8007954:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800795e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800796a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007976:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a1b      	ldr	r3, [r3, #32]
 800797c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800797e:	697a      	ldr	r2, [r7, #20]
 8007980:	4313      	orrs	r3, r2
 8007982:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007988:	2b04      	cmp	r3, #4
 800798a:	d107      	bne.n	800799c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007994:	4313      	orrs	r3, r2
 8007996:	697a      	ldr	r2, [r7, #20]
 8007998:	4313      	orrs	r3, r2
 800799a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	2b28      	cmp	r3, #40	@ 0x28
 80079a2:	d903      	bls.n	80079ac <HAL_DMA_Init+0x26c>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80079aa:	d91f      	bls.n	80079ec <HAL_DMA_Init+0x2ac>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80079b2:	d903      	bls.n	80079bc <HAL_DMA_Init+0x27c>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	2b42      	cmp	r3, #66	@ 0x42
 80079ba:	d917      	bls.n	80079ec <HAL_DMA_Init+0x2ac>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	2b46      	cmp	r3, #70	@ 0x46
 80079c2:	d903      	bls.n	80079cc <HAL_DMA_Init+0x28c>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	2b48      	cmp	r3, #72	@ 0x48
 80079ca:	d90f      	bls.n	80079ec <HAL_DMA_Init+0x2ac>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	2b4e      	cmp	r3, #78	@ 0x4e
 80079d2:	d903      	bls.n	80079dc <HAL_DMA_Init+0x29c>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	2b52      	cmp	r3, #82	@ 0x52
 80079da:	d907      	bls.n	80079ec <HAL_DMA_Init+0x2ac>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	2b73      	cmp	r3, #115	@ 0x73
 80079e2:	d905      	bls.n	80079f0 <HAL_DMA_Init+0x2b0>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	2b77      	cmp	r3, #119	@ 0x77
 80079ea:	d801      	bhi.n	80079f0 <HAL_DMA_Init+0x2b0>
 80079ec:	2301      	movs	r3, #1
 80079ee:	e000      	b.n	80079f2 <HAL_DMA_Init+0x2b2>
 80079f0:	2300      	movs	r3, #0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d003      	beq.n	80079fe <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80079fc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	695b      	ldr	r3, [r3, #20]
 8007a0c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	f023 0307 	bic.w	r3, r3, #7
 8007a14:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a1a:	697a      	ldr	r2, [r7, #20]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a24:	2b04      	cmp	r3, #4
 8007a26:	d117      	bne.n	8007a58 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00e      	beq.n	8007a58 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f001 fdca 	bl	80095d4 <DMA_CheckFifoParam>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d008      	beq.n	8007a58 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2240      	movs	r2, #64	@ 0x40
 8007a4a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	e192      	b.n	8007d7e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	697a      	ldr	r2, [r7, #20]
 8007a5e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f001 fd05 	bl	8009470 <DMA_CalcBaseAndBitshift>
 8007a66:	4603      	mov	r3, r0
 8007a68:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a6e:	f003 031f 	and.w	r3, r3, #31
 8007a72:	223f      	movs	r2, #63	@ 0x3f
 8007a74:	409a      	lsls	r2, r3
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	609a      	str	r2, [r3, #8]
 8007a7a:	e0c8      	b.n	8007c0e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a38      	ldr	r2, [pc, #224]	@ (8007b64 <HAL_DMA_Init+0x424>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d022      	beq.n	8007acc <HAL_DMA_Init+0x38c>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a37      	ldr	r2, [pc, #220]	@ (8007b68 <HAL_DMA_Init+0x428>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d01d      	beq.n	8007acc <HAL_DMA_Init+0x38c>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a35      	ldr	r2, [pc, #212]	@ (8007b6c <HAL_DMA_Init+0x42c>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d018      	beq.n	8007acc <HAL_DMA_Init+0x38c>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a34      	ldr	r2, [pc, #208]	@ (8007b70 <HAL_DMA_Init+0x430>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d013      	beq.n	8007acc <HAL_DMA_Init+0x38c>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a32      	ldr	r2, [pc, #200]	@ (8007b74 <HAL_DMA_Init+0x434>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d00e      	beq.n	8007acc <HAL_DMA_Init+0x38c>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a31      	ldr	r2, [pc, #196]	@ (8007b78 <HAL_DMA_Init+0x438>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d009      	beq.n	8007acc <HAL_DMA_Init+0x38c>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a2f      	ldr	r2, [pc, #188]	@ (8007b7c <HAL_DMA_Init+0x43c>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d004      	beq.n	8007acc <HAL_DMA_Init+0x38c>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a2e      	ldr	r2, [pc, #184]	@ (8007b80 <HAL_DMA_Init+0x440>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d101      	bne.n	8007ad0 <HAL_DMA_Init+0x390>
 8007acc:	2301      	movs	r3, #1
 8007ace:	e000      	b.n	8007ad2 <HAL_DMA_Init+0x392>
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f000 8092 	beq.w	8007bfc <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a21      	ldr	r2, [pc, #132]	@ (8007b64 <HAL_DMA_Init+0x424>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d021      	beq.n	8007b26 <HAL_DMA_Init+0x3e6>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a20      	ldr	r2, [pc, #128]	@ (8007b68 <HAL_DMA_Init+0x428>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d01c      	beq.n	8007b26 <HAL_DMA_Init+0x3e6>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a1e      	ldr	r2, [pc, #120]	@ (8007b6c <HAL_DMA_Init+0x42c>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d017      	beq.n	8007b26 <HAL_DMA_Init+0x3e6>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a1d      	ldr	r2, [pc, #116]	@ (8007b70 <HAL_DMA_Init+0x430>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d012      	beq.n	8007b26 <HAL_DMA_Init+0x3e6>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a1b      	ldr	r2, [pc, #108]	@ (8007b74 <HAL_DMA_Init+0x434>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d00d      	beq.n	8007b26 <HAL_DMA_Init+0x3e6>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a1a      	ldr	r2, [pc, #104]	@ (8007b78 <HAL_DMA_Init+0x438>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d008      	beq.n	8007b26 <HAL_DMA_Init+0x3e6>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a18      	ldr	r2, [pc, #96]	@ (8007b7c <HAL_DMA_Init+0x43c>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d003      	beq.n	8007b26 <HAL_DMA_Init+0x3e6>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a17      	ldr	r2, [pc, #92]	@ (8007b80 <HAL_DMA_Init+0x440>)
 8007b24:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2202      	movs	r2, #2
 8007b2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	4b10      	ldr	r3, [pc, #64]	@ (8007b84 <HAL_DMA_Init+0x444>)
 8007b42:	4013      	ands	r3, r2
 8007b44:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	2b40      	cmp	r3, #64	@ 0x40
 8007b4c:	d01c      	beq.n	8007b88 <HAL_DMA_Init+0x448>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	2b80      	cmp	r3, #128	@ 0x80
 8007b54:	d102      	bne.n	8007b5c <HAL_DMA_Init+0x41c>
 8007b56:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007b5a:	e016      	b.n	8007b8a <HAL_DMA_Init+0x44a>
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	e014      	b.n	8007b8a <HAL_DMA_Init+0x44a>
 8007b60:	fe10803f 	.word	0xfe10803f
 8007b64:	58025408 	.word	0x58025408
 8007b68:	5802541c 	.word	0x5802541c
 8007b6c:	58025430 	.word	0x58025430
 8007b70:	58025444 	.word	0x58025444
 8007b74:	58025458 	.word	0x58025458
 8007b78:	5802546c 	.word	0x5802546c
 8007b7c:	58025480 	.word	0x58025480
 8007b80:	58025494 	.word	0x58025494
 8007b84:	fffe000f 	.word	0xfffe000f
 8007b88:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	68d2      	ldr	r2, [r2, #12]
 8007b8e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007b90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007b98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	695b      	ldr	r3, [r3, #20]
 8007b9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007ba0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	699b      	ldr	r3, [r3, #24]
 8007ba6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007ba8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	69db      	ldr	r3, [r3, #28]
 8007bae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007bb0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a1b      	ldr	r3, [r3, #32]
 8007bb6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007bb8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007bba:	697a      	ldr	r2, [r7, #20]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	697a      	ldr	r2, [r7, #20]
 8007bc6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	461a      	mov	r2, r3
 8007bce:	4b6e      	ldr	r3, [pc, #440]	@ (8007d88 <HAL_DMA_Init+0x648>)
 8007bd0:	4413      	add	r3, r2
 8007bd2:	4a6e      	ldr	r2, [pc, #440]	@ (8007d8c <HAL_DMA_Init+0x64c>)
 8007bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd8:	091b      	lsrs	r3, r3, #4
 8007bda:	009a      	lsls	r2, r3, #2
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f001 fc45 	bl	8009470 <DMA_CalcBaseAndBitshift>
 8007be6:	4603      	mov	r3, r0
 8007be8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bee:	f003 031f 	and.w	r3, r3, #31
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	409a      	lsls	r2, r3
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	605a      	str	r2, [r3, #4]
 8007bfa:	e008      	b.n	8007c0e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2240      	movs	r2, #64	@ 0x40
 8007c00:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2203      	movs	r2, #3
 8007c06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e0b7      	b.n	8007d7e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a5f      	ldr	r2, [pc, #380]	@ (8007d90 <HAL_DMA_Init+0x650>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d072      	beq.n	8007cfe <HAL_DMA_Init+0x5be>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a5d      	ldr	r2, [pc, #372]	@ (8007d94 <HAL_DMA_Init+0x654>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d06d      	beq.n	8007cfe <HAL_DMA_Init+0x5be>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a5c      	ldr	r2, [pc, #368]	@ (8007d98 <HAL_DMA_Init+0x658>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d068      	beq.n	8007cfe <HAL_DMA_Init+0x5be>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a5a      	ldr	r2, [pc, #360]	@ (8007d9c <HAL_DMA_Init+0x65c>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d063      	beq.n	8007cfe <HAL_DMA_Init+0x5be>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a59      	ldr	r2, [pc, #356]	@ (8007da0 <HAL_DMA_Init+0x660>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d05e      	beq.n	8007cfe <HAL_DMA_Init+0x5be>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a57      	ldr	r2, [pc, #348]	@ (8007da4 <HAL_DMA_Init+0x664>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d059      	beq.n	8007cfe <HAL_DMA_Init+0x5be>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a56      	ldr	r2, [pc, #344]	@ (8007da8 <HAL_DMA_Init+0x668>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d054      	beq.n	8007cfe <HAL_DMA_Init+0x5be>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a54      	ldr	r2, [pc, #336]	@ (8007dac <HAL_DMA_Init+0x66c>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d04f      	beq.n	8007cfe <HAL_DMA_Init+0x5be>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a53      	ldr	r2, [pc, #332]	@ (8007db0 <HAL_DMA_Init+0x670>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d04a      	beq.n	8007cfe <HAL_DMA_Init+0x5be>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a51      	ldr	r2, [pc, #324]	@ (8007db4 <HAL_DMA_Init+0x674>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d045      	beq.n	8007cfe <HAL_DMA_Init+0x5be>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a50      	ldr	r2, [pc, #320]	@ (8007db8 <HAL_DMA_Init+0x678>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d040      	beq.n	8007cfe <HAL_DMA_Init+0x5be>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a4e      	ldr	r2, [pc, #312]	@ (8007dbc <HAL_DMA_Init+0x67c>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d03b      	beq.n	8007cfe <HAL_DMA_Init+0x5be>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a4d      	ldr	r2, [pc, #308]	@ (8007dc0 <HAL_DMA_Init+0x680>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d036      	beq.n	8007cfe <HAL_DMA_Init+0x5be>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a4b      	ldr	r2, [pc, #300]	@ (8007dc4 <HAL_DMA_Init+0x684>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d031      	beq.n	8007cfe <HAL_DMA_Init+0x5be>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a4a      	ldr	r2, [pc, #296]	@ (8007dc8 <HAL_DMA_Init+0x688>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d02c      	beq.n	8007cfe <HAL_DMA_Init+0x5be>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a48      	ldr	r2, [pc, #288]	@ (8007dcc <HAL_DMA_Init+0x68c>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d027      	beq.n	8007cfe <HAL_DMA_Init+0x5be>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a47      	ldr	r2, [pc, #284]	@ (8007dd0 <HAL_DMA_Init+0x690>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d022      	beq.n	8007cfe <HAL_DMA_Init+0x5be>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a45      	ldr	r2, [pc, #276]	@ (8007dd4 <HAL_DMA_Init+0x694>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d01d      	beq.n	8007cfe <HAL_DMA_Init+0x5be>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a44      	ldr	r2, [pc, #272]	@ (8007dd8 <HAL_DMA_Init+0x698>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d018      	beq.n	8007cfe <HAL_DMA_Init+0x5be>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a42      	ldr	r2, [pc, #264]	@ (8007ddc <HAL_DMA_Init+0x69c>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d013      	beq.n	8007cfe <HAL_DMA_Init+0x5be>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a41      	ldr	r2, [pc, #260]	@ (8007de0 <HAL_DMA_Init+0x6a0>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d00e      	beq.n	8007cfe <HAL_DMA_Init+0x5be>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a3f      	ldr	r2, [pc, #252]	@ (8007de4 <HAL_DMA_Init+0x6a4>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d009      	beq.n	8007cfe <HAL_DMA_Init+0x5be>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a3e      	ldr	r2, [pc, #248]	@ (8007de8 <HAL_DMA_Init+0x6a8>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d004      	beq.n	8007cfe <HAL_DMA_Init+0x5be>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a3c      	ldr	r2, [pc, #240]	@ (8007dec <HAL_DMA_Init+0x6ac>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d101      	bne.n	8007d02 <HAL_DMA_Init+0x5c2>
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e000      	b.n	8007d04 <HAL_DMA_Init+0x5c4>
 8007d02:	2300      	movs	r3, #0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d032      	beq.n	8007d6e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f001 fcdf 	bl	80096cc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	2b80      	cmp	r3, #128	@ 0x80
 8007d14:	d102      	bne.n	8007d1c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	685a      	ldr	r2, [r3, #4]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d24:	b2d2      	uxtb	r2, r2
 8007d26:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007d30:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d010      	beq.n	8007d5c <HAL_DMA_Init+0x61c>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	2b08      	cmp	r3, #8
 8007d40:	d80c      	bhi.n	8007d5c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f001 fd5c 	bl	8009800 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007d58:	605a      	str	r2, [r3, #4]
 8007d5a:	e008      	b.n	8007d6e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2200      	movs	r2, #0
 8007d72:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3718      	adds	r7, #24
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	a7fdabf8 	.word	0xa7fdabf8
 8007d8c:	cccccccd 	.word	0xcccccccd
 8007d90:	40020010 	.word	0x40020010
 8007d94:	40020028 	.word	0x40020028
 8007d98:	40020040 	.word	0x40020040
 8007d9c:	40020058 	.word	0x40020058
 8007da0:	40020070 	.word	0x40020070
 8007da4:	40020088 	.word	0x40020088
 8007da8:	400200a0 	.word	0x400200a0
 8007dac:	400200b8 	.word	0x400200b8
 8007db0:	40020410 	.word	0x40020410
 8007db4:	40020428 	.word	0x40020428
 8007db8:	40020440 	.word	0x40020440
 8007dbc:	40020458 	.word	0x40020458
 8007dc0:	40020470 	.word	0x40020470
 8007dc4:	40020488 	.word	0x40020488
 8007dc8:	400204a0 	.word	0x400204a0
 8007dcc:	400204b8 	.word	0x400204b8
 8007dd0:	58025408 	.word	0x58025408
 8007dd4:	5802541c 	.word	0x5802541c
 8007dd8:	58025430 	.word	0x58025430
 8007ddc:	58025444 	.word	0x58025444
 8007de0:	58025458 	.word	0x58025458
 8007de4:	5802546c 	.word	0x5802546c
 8007de8:	58025480 	.word	0x58025480
 8007dec:	58025494 	.word	0x58025494

08007df0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b086      	sub	sp, #24
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
 8007dfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d101      	bne.n	8007e0c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e226      	b.n	800825a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d101      	bne.n	8007e1a <HAL_DMA_Start_IT+0x2a>
 8007e16:	2302      	movs	r3, #2
 8007e18:	e21f      	b.n	800825a <HAL_DMA_Start_IT+0x46a>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	f040 820a 	bne.w	8008244 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2202      	movs	r2, #2
 8007e34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a68      	ldr	r2, [pc, #416]	@ (8007fe4 <HAL_DMA_Start_IT+0x1f4>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d04a      	beq.n	8007ede <HAL_DMA_Start_IT+0xee>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a66      	ldr	r2, [pc, #408]	@ (8007fe8 <HAL_DMA_Start_IT+0x1f8>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d045      	beq.n	8007ede <HAL_DMA_Start_IT+0xee>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a65      	ldr	r2, [pc, #404]	@ (8007fec <HAL_DMA_Start_IT+0x1fc>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d040      	beq.n	8007ede <HAL_DMA_Start_IT+0xee>
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a63      	ldr	r2, [pc, #396]	@ (8007ff0 <HAL_DMA_Start_IT+0x200>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d03b      	beq.n	8007ede <HAL_DMA_Start_IT+0xee>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a62      	ldr	r2, [pc, #392]	@ (8007ff4 <HAL_DMA_Start_IT+0x204>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d036      	beq.n	8007ede <HAL_DMA_Start_IT+0xee>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a60      	ldr	r2, [pc, #384]	@ (8007ff8 <HAL_DMA_Start_IT+0x208>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d031      	beq.n	8007ede <HAL_DMA_Start_IT+0xee>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a5f      	ldr	r2, [pc, #380]	@ (8007ffc <HAL_DMA_Start_IT+0x20c>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d02c      	beq.n	8007ede <HAL_DMA_Start_IT+0xee>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a5d      	ldr	r2, [pc, #372]	@ (8008000 <HAL_DMA_Start_IT+0x210>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d027      	beq.n	8007ede <HAL_DMA_Start_IT+0xee>
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a5c      	ldr	r2, [pc, #368]	@ (8008004 <HAL_DMA_Start_IT+0x214>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d022      	beq.n	8007ede <HAL_DMA_Start_IT+0xee>
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a5a      	ldr	r2, [pc, #360]	@ (8008008 <HAL_DMA_Start_IT+0x218>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d01d      	beq.n	8007ede <HAL_DMA_Start_IT+0xee>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a59      	ldr	r2, [pc, #356]	@ (800800c <HAL_DMA_Start_IT+0x21c>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d018      	beq.n	8007ede <HAL_DMA_Start_IT+0xee>
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a57      	ldr	r2, [pc, #348]	@ (8008010 <HAL_DMA_Start_IT+0x220>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d013      	beq.n	8007ede <HAL_DMA_Start_IT+0xee>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a56      	ldr	r2, [pc, #344]	@ (8008014 <HAL_DMA_Start_IT+0x224>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d00e      	beq.n	8007ede <HAL_DMA_Start_IT+0xee>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a54      	ldr	r2, [pc, #336]	@ (8008018 <HAL_DMA_Start_IT+0x228>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d009      	beq.n	8007ede <HAL_DMA_Start_IT+0xee>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a53      	ldr	r2, [pc, #332]	@ (800801c <HAL_DMA_Start_IT+0x22c>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d004      	beq.n	8007ede <HAL_DMA_Start_IT+0xee>
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a51      	ldr	r2, [pc, #324]	@ (8008020 <HAL_DMA_Start_IT+0x230>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d108      	bne.n	8007ef0 <HAL_DMA_Start_IT+0x100>
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f022 0201 	bic.w	r2, r2, #1
 8007eec:	601a      	str	r2, [r3, #0]
 8007eee:	e007      	b.n	8007f00 <HAL_DMA_Start_IT+0x110>
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f022 0201 	bic.w	r2, r2, #1
 8007efe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	68b9      	ldr	r1, [r7, #8]
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	f001 f906 	bl	8009118 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a34      	ldr	r2, [pc, #208]	@ (8007fe4 <HAL_DMA_Start_IT+0x1f4>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d04a      	beq.n	8007fac <HAL_DMA_Start_IT+0x1bc>
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a33      	ldr	r2, [pc, #204]	@ (8007fe8 <HAL_DMA_Start_IT+0x1f8>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d045      	beq.n	8007fac <HAL_DMA_Start_IT+0x1bc>
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a31      	ldr	r2, [pc, #196]	@ (8007fec <HAL_DMA_Start_IT+0x1fc>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d040      	beq.n	8007fac <HAL_DMA_Start_IT+0x1bc>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a30      	ldr	r2, [pc, #192]	@ (8007ff0 <HAL_DMA_Start_IT+0x200>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d03b      	beq.n	8007fac <HAL_DMA_Start_IT+0x1bc>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a2e      	ldr	r2, [pc, #184]	@ (8007ff4 <HAL_DMA_Start_IT+0x204>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d036      	beq.n	8007fac <HAL_DMA_Start_IT+0x1bc>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a2d      	ldr	r2, [pc, #180]	@ (8007ff8 <HAL_DMA_Start_IT+0x208>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d031      	beq.n	8007fac <HAL_DMA_Start_IT+0x1bc>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a2b      	ldr	r2, [pc, #172]	@ (8007ffc <HAL_DMA_Start_IT+0x20c>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d02c      	beq.n	8007fac <HAL_DMA_Start_IT+0x1bc>
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a2a      	ldr	r2, [pc, #168]	@ (8008000 <HAL_DMA_Start_IT+0x210>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d027      	beq.n	8007fac <HAL_DMA_Start_IT+0x1bc>
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a28      	ldr	r2, [pc, #160]	@ (8008004 <HAL_DMA_Start_IT+0x214>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d022      	beq.n	8007fac <HAL_DMA_Start_IT+0x1bc>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a27      	ldr	r2, [pc, #156]	@ (8008008 <HAL_DMA_Start_IT+0x218>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d01d      	beq.n	8007fac <HAL_DMA_Start_IT+0x1bc>
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a25      	ldr	r2, [pc, #148]	@ (800800c <HAL_DMA_Start_IT+0x21c>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d018      	beq.n	8007fac <HAL_DMA_Start_IT+0x1bc>
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a24      	ldr	r2, [pc, #144]	@ (8008010 <HAL_DMA_Start_IT+0x220>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d013      	beq.n	8007fac <HAL_DMA_Start_IT+0x1bc>
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a22      	ldr	r2, [pc, #136]	@ (8008014 <HAL_DMA_Start_IT+0x224>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d00e      	beq.n	8007fac <HAL_DMA_Start_IT+0x1bc>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a21      	ldr	r2, [pc, #132]	@ (8008018 <HAL_DMA_Start_IT+0x228>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d009      	beq.n	8007fac <HAL_DMA_Start_IT+0x1bc>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a1f      	ldr	r2, [pc, #124]	@ (800801c <HAL_DMA_Start_IT+0x22c>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d004      	beq.n	8007fac <HAL_DMA_Start_IT+0x1bc>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a1e      	ldr	r2, [pc, #120]	@ (8008020 <HAL_DMA_Start_IT+0x230>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d101      	bne.n	8007fb0 <HAL_DMA_Start_IT+0x1c0>
 8007fac:	2301      	movs	r3, #1
 8007fae:	e000      	b.n	8007fb2 <HAL_DMA_Start_IT+0x1c2>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d036      	beq.n	8008024 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f023 021e 	bic.w	r2, r3, #30
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f042 0216 	orr.w	r2, r2, #22
 8007fc8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d03e      	beq.n	8008050 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f042 0208 	orr.w	r2, r2, #8
 8007fe0:	601a      	str	r2, [r3, #0]
 8007fe2:	e035      	b.n	8008050 <HAL_DMA_Start_IT+0x260>
 8007fe4:	40020010 	.word	0x40020010
 8007fe8:	40020028 	.word	0x40020028
 8007fec:	40020040 	.word	0x40020040
 8007ff0:	40020058 	.word	0x40020058
 8007ff4:	40020070 	.word	0x40020070
 8007ff8:	40020088 	.word	0x40020088
 8007ffc:	400200a0 	.word	0x400200a0
 8008000:	400200b8 	.word	0x400200b8
 8008004:	40020410 	.word	0x40020410
 8008008:	40020428 	.word	0x40020428
 800800c:	40020440 	.word	0x40020440
 8008010:	40020458 	.word	0x40020458
 8008014:	40020470 	.word	0x40020470
 8008018:	40020488 	.word	0x40020488
 800801c:	400204a0 	.word	0x400204a0
 8008020:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f023 020e 	bic.w	r2, r3, #14
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f042 020a 	orr.w	r2, r2, #10
 8008036:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800803c:	2b00      	cmp	r3, #0
 800803e:	d007      	beq.n	8008050 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f042 0204 	orr.w	r2, r2, #4
 800804e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a83      	ldr	r2, [pc, #524]	@ (8008264 <HAL_DMA_Start_IT+0x474>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d072      	beq.n	8008140 <HAL_DMA_Start_IT+0x350>
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a82      	ldr	r2, [pc, #520]	@ (8008268 <HAL_DMA_Start_IT+0x478>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d06d      	beq.n	8008140 <HAL_DMA_Start_IT+0x350>
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a80      	ldr	r2, [pc, #512]	@ (800826c <HAL_DMA_Start_IT+0x47c>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d068      	beq.n	8008140 <HAL_DMA_Start_IT+0x350>
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a7f      	ldr	r2, [pc, #508]	@ (8008270 <HAL_DMA_Start_IT+0x480>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d063      	beq.n	8008140 <HAL_DMA_Start_IT+0x350>
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a7d      	ldr	r2, [pc, #500]	@ (8008274 <HAL_DMA_Start_IT+0x484>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d05e      	beq.n	8008140 <HAL_DMA_Start_IT+0x350>
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a7c      	ldr	r2, [pc, #496]	@ (8008278 <HAL_DMA_Start_IT+0x488>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d059      	beq.n	8008140 <HAL_DMA_Start_IT+0x350>
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a7a      	ldr	r2, [pc, #488]	@ (800827c <HAL_DMA_Start_IT+0x48c>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d054      	beq.n	8008140 <HAL_DMA_Start_IT+0x350>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a79      	ldr	r2, [pc, #484]	@ (8008280 <HAL_DMA_Start_IT+0x490>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d04f      	beq.n	8008140 <HAL_DMA_Start_IT+0x350>
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a77      	ldr	r2, [pc, #476]	@ (8008284 <HAL_DMA_Start_IT+0x494>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d04a      	beq.n	8008140 <HAL_DMA_Start_IT+0x350>
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a76      	ldr	r2, [pc, #472]	@ (8008288 <HAL_DMA_Start_IT+0x498>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d045      	beq.n	8008140 <HAL_DMA_Start_IT+0x350>
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a74      	ldr	r2, [pc, #464]	@ (800828c <HAL_DMA_Start_IT+0x49c>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d040      	beq.n	8008140 <HAL_DMA_Start_IT+0x350>
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a73      	ldr	r2, [pc, #460]	@ (8008290 <HAL_DMA_Start_IT+0x4a0>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d03b      	beq.n	8008140 <HAL_DMA_Start_IT+0x350>
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a71      	ldr	r2, [pc, #452]	@ (8008294 <HAL_DMA_Start_IT+0x4a4>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d036      	beq.n	8008140 <HAL_DMA_Start_IT+0x350>
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a70      	ldr	r2, [pc, #448]	@ (8008298 <HAL_DMA_Start_IT+0x4a8>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d031      	beq.n	8008140 <HAL_DMA_Start_IT+0x350>
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a6e      	ldr	r2, [pc, #440]	@ (800829c <HAL_DMA_Start_IT+0x4ac>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d02c      	beq.n	8008140 <HAL_DMA_Start_IT+0x350>
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a6d      	ldr	r2, [pc, #436]	@ (80082a0 <HAL_DMA_Start_IT+0x4b0>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d027      	beq.n	8008140 <HAL_DMA_Start_IT+0x350>
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a6b      	ldr	r2, [pc, #428]	@ (80082a4 <HAL_DMA_Start_IT+0x4b4>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d022      	beq.n	8008140 <HAL_DMA_Start_IT+0x350>
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a6a      	ldr	r2, [pc, #424]	@ (80082a8 <HAL_DMA_Start_IT+0x4b8>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d01d      	beq.n	8008140 <HAL_DMA_Start_IT+0x350>
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a68      	ldr	r2, [pc, #416]	@ (80082ac <HAL_DMA_Start_IT+0x4bc>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d018      	beq.n	8008140 <HAL_DMA_Start_IT+0x350>
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a67      	ldr	r2, [pc, #412]	@ (80082b0 <HAL_DMA_Start_IT+0x4c0>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d013      	beq.n	8008140 <HAL_DMA_Start_IT+0x350>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a65      	ldr	r2, [pc, #404]	@ (80082b4 <HAL_DMA_Start_IT+0x4c4>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d00e      	beq.n	8008140 <HAL_DMA_Start_IT+0x350>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a64      	ldr	r2, [pc, #400]	@ (80082b8 <HAL_DMA_Start_IT+0x4c8>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d009      	beq.n	8008140 <HAL_DMA_Start_IT+0x350>
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a62      	ldr	r2, [pc, #392]	@ (80082bc <HAL_DMA_Start_IT+0x4cc>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d004      	beq.n	8008140 <HAL_DMA_Start_IT+0x350>
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a61      	ldr	r2, [pc, #388]	@ (80082c0 <HAL_DMA_Start_IT+0x4d0>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d101      	bne.n	8008144 <HAL_DMA_Start_IT+0x354>
 8008140:	2301      	movs	r3, #1
 8008142:	e000      	b.n	8008146 <HAL_DMA_Start_IT+0x356>
 8008144:	2300      	movs	r3, #0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d01a      	beq.n	8008180 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008154:	2b00      	cmp	r3, #0
 8008156:	d007      	beq.n	8008168 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008162:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008166:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800816c:	2b00      	cmp	r3, #0
 800816e:	d007      	beq.n	8008180 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800817a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800817e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a37      	ldr	r2, [pc, #220]	@ (8008264 <HAL_DMA_Start_IT+0x474>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d04a      	beq.n	8008220 <HAL_DMA_Start_IT+0x430>
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a36      	ldr	r2, [pc, #216]	@ (8008268 <HAL_DMA_Start_IT+0x478>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d045      	beq.n	8008220 <HAL_DMA_Start_IT+0x430>
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a34      	ldr	r2, [pc, #208]	@ (800826c <HAL_DMA_Start_IT+0x47c>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d040      	beq.n	8008220 <HAL_DMA_Start_IT+0x430>
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a33      	ldr	r2, [pc, #204]	@ (8008270 <HAL_DMA_Start_IT+0x480>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d03b      	beq.n	8008220 <HAL_DMA_Start_IT+0x430>
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a31      	ldr	r2, [pc, #196]	@ (8008274 <HAL_DMA_Start_IT+0x484>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d036      	beq.n	8008220 <HAL_DMA_Start_IT+0x430>
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a30      	ldr	r2, [pc, #192]	@ (8008278 <HAL_DMA_Start_IT+0x488>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d031      	beq.n	8008220 <HAL_DMA_Start_IT+0x430>
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a2e      	ldr	r2, [pc, #184]	@ (800827c <HAL_DMA_Start_IT+0x48c>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d02c      	beq.n	8008220 <HAL_DMA_Start_IT+0x430>
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a2d      	ldr	r2, [pc, #180]	@ (8008280 <HAL_DMA_Start_IT+0x490>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d027      	beq.n	8008220 <HAL_DMA_Start_IT+0x430>
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a2b      	ldr	r2, [pc, #172]	@ (8008284 <HAL_DMA_Start_IT+0x494>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d022      	beq.n	8008220 <HAL_DMA_Start_IT+0x430>
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a2a      	ldr	r2, [pc, #168]	@ (8008288 <HAL_DMA_Start_IT+0x498>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d01d      	beq.n	8008220 <HAL_DMA_Start_IT+0x430>
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a28      	ldr	r2, [pc, #160]	@ (800828c <HAL_DMA_Start_IT+0x49c>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d018      	beq.n	8008220 <HAL_DMA_Start_IT+0x430>
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a27      	ldr	r2, [pc, #156]	@ (8008290 <HAL_DMA_Start_IT+0x4a0>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d013      	beq.n	8008220 <HAL_DMA_Start_IT+0x430>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a25      	ldr	r2, [pc, #148]	@ (8008294 <HAL_DMA_Start_IT+0x4a4>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d00e      	beq.n	8008220 <HAL_DMA_Start_IT+0x430>
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a24      	ldr	r2, [pc, #144]	@ (8008298 <HAL_DMA_Start_IT+0x4a8>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d009      	beq.n	8008220 <HAL_DMA_Start_IT+0x430>
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a22      	ldr	r2, [pc, #136]	@ (800829c <HAL_DMA_Start_IT+0x4ac>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d004      	beq.n	8008220 <HAL_DMA_Start_IT+0x430>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a21      	ldr	r2, [pc, #132]	@ (80082a0 <HAL_DMA_Start_IT+0x4b0>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d108      	bne.n	8008232 <HAL_DMA_Start_IT+0x442>
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f042 0201 	orr.w	r2, r2, #1
 800822e:	601a      	str	r2, [r3, #0]
 8008230:	e012      	b.n	8008258 <HAL_DMA_Start_IT+0x468>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f042 0201 	orr.w	r2, r2, #1
 8008240:	601a      	str	r2, [r3, #0]
 8008242:	e009      	b.n	8008258 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800824a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008258:	7dfb      	ldrb	r3, [r7, #23]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3718      	adds	r7, #24
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	40020010 	.word	0x40020010
 8008268:	40020028 	.word	0x40020028
 800826c:	40020040 	.word	0x40020040
 8008270:	40020058 	.word	0x40020058
 8008274:	40020070 	.word	0x40020070
 8008278:	40020088 	.word	0x40020088
 800827c:	400200a0 	.word	0x400200a0
 8008280:	400200b8 	.word	0x400200b8
 8008284:	40020410 	.word	0x40020410
 8008288:	40020428 	.word	0x40020428
 800828c:	40020440 	.word	0x40020440
 8008290:	40020458 	.word	0x40020458
 8008294:	40020470 	.word	0x40020470
 8008298:	40020488 	.word	0x40020488
 800829c:	400204a0 	.word	0x400204a0
 80082a0:	400204b8 	.word	0x400204b8
 80082a4:	58025408 	.word	0x58025408
 80082a8:	5802541c 	.word	0x5802541c
 80082ac:	58025430 	.word	0x58025430
 80082b0:	58025444 	.word	0x58025444
 80082b4:	58025458 	.word	0x58025458
 80082b8:	5802546c 	.word	0x5802546c
 80082bc:	58025480 	.word	0x58025480
 80082c0:	58025494 	.word	0x58025494

080082c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b08a      	sub	sp, #40	@ 0x28
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80082cc:	2300      	movs	r3, #0
 80082ce:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80082d0:	4b67      	ldr	r3, [pc, #412]	@ (8008470 <HAL_DMA_IRQHandler+0x1ac>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a67      	ldr	r2, [pc, #412]	@ (8008474 <HAL_DMA_IRQHandler+0x1b0>)
 80082d6:	fba2 2303 	umull	r2, r3, r2, r3
 80082da:	0a9b      	lsrs	r3, r3, #10
 80082dc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082e2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082e8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80082ea:	6a3b      	ldr	r3, [r7, #32]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a5f      	ldr	r2, [pc, #380]	@ (8008478 <HAL_DMA_IRQHandler+0x1b4>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d04a      	beq.n	8008396 <HAL_DMA_IRQHandler+0xd2>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a5d      	ldr	r2, [pc, #372]	@ (800847c <HAL_DMA_IRQHandler+0x1b8>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d045      	beq.n	8008396 <HAL_DMA_IRQHandler+0xd2>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a5c      	ldr	r2, [pc, #368]	@ (8008480 <HAL_DMA_IRQHandler+0x1bc>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d040      	beq.n	8008396 <HAL_DMA_IRQHandler+0xd2>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a5a      	ldr	r2, [pc, #360]	@ (8008484 <HAL_DMA_IRQHandler+0x1c0>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d03b      	beq.n	8008396 <HAL_DMA_IRQHandler+0xd2>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a59      	ldr	r2, [pc, #356]	@ (8008488 <HAL_DMA_IRQHandler+0x1c4>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d036      	beq.n	8008396 <HAL_DMA_IRQHandler+0xd2>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a57      	ldr	r2, [pc, #348]	@ (800848c <HAL_DMA_IRQHandler+0x1c8>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d031      	beq.n	8008396 <HAL_DMA_IRQHandler+0xd2>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a56      	ldr	r2, [pc, #344]	@ (8008490 <HAL_DMA_IRQHandler+0x1cc>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d02c      	beq.n	8008396 <HAL_DMA_IRQHandler+0xd2>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a54      	ldr	r2, [pc, #336]	@ (8008494 <HAL_DMA_IRQHandler+0x1d0>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d027      	beq.n	8008396 <HAL_DMA_IRQHandler+0xd2>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a53      	ldr	r2, [pc, #332]	@ (8008498 <HAL_DMA_IRQHandler+0x1d4>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d022      	beq.n	8008396 <HAL_DMA_IRQHandler+0xd2>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a51      	ldr	r2, [pc, #324]	@ (800849c <HAL_DMA_IRQHandler+0x1d8>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d01d      	beq.n	8008396 <HAL_DMA_IRQHandler+0xd2>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a50      	ldr	r2, [pc, #320]	@ (80084a0 <HAL_DMA_IRQHandler+0x1dc>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d018      	beq.n	8008396 <HAL_DMA_IRQHandler+0xd2>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a4e      	ldr	r2, [pc, #312]	@ (80084a4 <HAL_DMA_IRQHandler+0x1e0>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d013      	beq.n	8008396 <HAL_DMA_IRQHandler+0xd2>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a4d      	ldr	r2, [pc, #308]	@ (80084a8 <HAL_DMA_IRQHandler+0x1e4>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d00e      	beq.n	8008396 <HAL_DMA_IRQHandler+0xd2>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a4b      	ldr	r2, [pc, #300]	@ (80084ac <HAL_DMA_IRQHandler+0x1e8>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d009      	beq.n	8008396 <HAL_DMA_IRQHandler+0xd2>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a4a      	ldr	r2, [pc, #296]	@ (80084b0 <HAL_DMA_IRQHandler+0x1ec>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d004      	beq.n	8008396 <HAL_DMA_IRQHandler+0xd2>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a48      	ldr	r2, [pc, #288]	@ (80084b4 <HAL_DMA_IRQHandler+0x1f0>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d101      	bne.n	800839a <HAL_DMA_IRQHandler+0xd6>
 8008396:	2301      	movs	r3, #1
 8008398:	e000      	b.n	800839c <HAL_DMA_IRQHandler+0xd8>
 800839a:	2300      	movs	r3, #0
 800839c:	2b00      	cmp	r3, #0
 800839e:	f000 842b 	beq.w	8008bf8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083a6:	f003 031f 	and.w	r3, r3, #31
 80083aa:	2208      	movs	r2, #8
 80083ac:	409a      	lsls	r2, r3
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	4013      	ands	r3, r2
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f000 80a2 	beq.w	80084fc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a2e      	ldr	r2, [pc, #184]	@ (8008478 <HAL_DMA_IRQHandler+0x1b4>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d04a      	beq.n	8008458 <HAL_DMA_IRQHandler+0x194>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a2d      	ldr	r2, [pc, #180]	@ (800847c <HAL_DMA_IRQHandler+0x1b8>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d045      	beq.n	8008458 <HAL_DMA_IRQHandler+0x194>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a2b      	ldr	r2, [pc, #172]	@ (8008480 <HAL_DMA_IRQHandler+0x1bc>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d040      	beq.n	8008458 <HAL_DMA_IRQHandler+0x194>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a2a      	ldr	r2, [pc, #168]	@ (8008484 <HAL_DMA_IRQHandler+0x1c0>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d03b      	beq.n	8008458 <HAL_DMA_IRQHandler+0x194>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a28      	ldr	r2, [pc, #160]	@ (8008488 <HAL_DMA_IRQHandler+0x1c4>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d036      	beq.n	8008458 <HAL_DMA_IRQHandler+0x194>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a27      	ldr	r2, [pc, #156]	@ (800848c <HAL_DMA_IRQHandler+0x1c8>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d031      	beq.n	8008458 <HAL_DMA_IRQHandler+0x194>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a25      	ldr	r2, [pc, #148]	@ (8008490 <HAL_DMA_IRQHandler+0x1cc>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d02c      	beq.n	8008458 <HAL_DMA_IRQHandler+0x194>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a24      	ldr	r2, [pc, #144]	@ (8008494 <HAL_DMA_IRQHandler+0x1d0>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d027      	beq.n	8008458 <HAL_DMA_IRQHandler+0x194>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a22      	ldr	r2, [pc, #136]	@ (8008498 <HAL_DMA_IRQHandler+0x1d4>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d022      	beq.n	8008458 <HAL_DMA_IRQHandler+0x194>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a21      	ldr	r2, [pc, #132]	@ (800849c <HAL_DMA_IRQHandler+0x1d8>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d01d      	beq.n	8008458 <HAL_DMA_IRQHandler+0x194>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a1f      	ldr	r2, [pc, #124]	@ (80084a0 <HAL_DMA_IRQHandler+0x1dc>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d018      	beq.n	8008458 <HAL_DMA_IRQHandler+0x194>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a1e      	ldr	r2, [pc, #120]	@ (80084a4 <HAL_DMA_IRQHandler+0x1e0>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d013      	beq.n	8008458 <HAL_DMA_IRQHandler+0x194>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a1c      	ldr	r2, [pc, #112]	@ (80084a8 <HAL_DMA_IRQHandler+0x1e4>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d00e      	beq.n	8008458 <HAL_DMA_IRQHandler+0x194>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a1b      	ldr	r2, [pc, #108]	@ (80084ac <HAL_DMA_IRQHandler+0x1e8>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d009      	beq.n	8008458 <HAL_DMA_IRQHandler+0x194>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a19      	ldr	r2, [pc, #100]	@ (80084b0 <HAL_DMA_IRQHandler+0x1ec>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d004      	beq.n	8008458 <HAL_DMA_IRQHandler+0x194>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a18      	ldr	r2, [pc, #96]	@ (80084b4 <HAL_DMA_IRQHandler+0x1f0>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d12f      	bne.n	80084b8 <HAL_DMA_IRQHandler+0x1f4>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 0304 	and.w	r3, r3, #4
 8008462:	2b00      	cmp	r3, #0
 8008464:	bf14      	ite	ne
 8008466:	2301      	movne	r3, #1
 8008468:	2300      	moveq	r3, #0
 800846a:	b2db      	uxtb	r3, r3
 800846c:	e02e      	b.n	80084cc <HAL_DMA_IRQHandler+0x208>
 800846e:	bf00      	nop
 8008470:	24000038 	.word	0x24000038
 8008474:	1b4e81b5 	.word	0x1b4e81b5
 8008478:	40020010 	.word	0x40020010
 800847c:	40020028 	.word	0x40020028
 8008480:	40020040 	.word	0x40020040
 8008484:	40020058 	.word	0x40020058
 8008488:	40020070 	.word	0x40020070
 800848c:	40020088 	.word	0x40020088
 8008490:	400200a0 	.word	0x400200a0
 8008494:	400200b8 	.word	0x400200b8
 8008498:	40020410 	.word	0x40020410
 800849c:	40020428 	.word	0x40020428
 80084a0:	40020440 	.word	0x40020440
 80084a4:	40020458 	.word	0x40020458
 80084a8:	40020470 	.word	0x40020470
 80084ac:	40020488 	.word	0x40020488
 80084b0:	400204a0 	.word	0x400204a0
 80084b4:	400204b8 	.word	0x400204b8
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f003 0308 	and.w	r3, r3, #8
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	bf14      	ite	ne
 80084c6:	2301      	movne	r3, #1
 80084c8:	2300      	moveq	r3, #0
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d015      	beq.n	80084fc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f022 0204 	bic.w	r2, r2, #4
 80084de:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084e4:	f003 031f 	and.w	r3, r3, #31
 80084e8:	2208      	movs	r2, #8
 80084ea:	409a      	lsls	r2, r3
 80084ec:	6a3b      	ldr	r3, [r7, #32]
 80084ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084f4:	f043 0201 	orr.w	r2, r3, #1
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008500:	f003 031f 	and.w	r3, r3, #31
 8008504:	69ba      	ldr	r2, [r7, #24]
 8008506:	fa22 f303 	lsr.w	r3, r2, r3
 800850a:	f003 0301 	and.w	r3, r3, #1
 800850e:	2b00      	cmp	r3, #0
 8008510:	d06e      	beq.n	80085f0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a69      	ldr	r2, [pc, #420]	@ (80086bc <HAL_DMA_IRQHandler+0x3f8>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d04a      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x2ee>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a67      	ldr	r2, [pc, #412]	@ (80086c0 <HAL_DMA_IRQHandler+0x3fc>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d045      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x2ee>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a66      	ldr	r2, [pc, #408]	@ (80086c4 <HAL_DMA_IRQHandler+0x400>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d040      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x2ee>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a64      	ldr	r2, [pc, #400]	@ (80086c8 <HAL_DMA_IRQHandler+0x404>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d03b      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x2ee>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a63      	ldr	r2, [pc, #396]	@ (80086cc <HAL_DMA_IRQHandler+0x408>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d036      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x2ee>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a61      	ldr	r2, [pc, #388]	@ (80086d0 <HAL_DMA_IRQHandler+0x40c>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d031      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x2ee>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a60      	ldr	r2, [pc, #384]	@ (80086d4 <HAL_DMA_IRQHandler+0x410>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d02c      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x2ee>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a5e      	ldr	r2, [pc, #376]	@ (80086d8 <HAL_DMA_IRQHandler+0x414>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d027      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x2ee>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a5d      	ldr	r2, [pc, #372]	@ (80086dc <HAL_DMA_IRQHandler+0x418>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d022      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x2ee>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a5b      	ldr	r2, [pc, #364]	@ (80086e0 <HAL_DMA_IRQHandler+0x41c>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d01d      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x2ee>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a5a      	ldr	r2, [pc, #360]	@ (80086e4 <HAL_DMA_IRQHandler+0x420>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d018      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x2ee>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a58      	ldr	r2, [pc, #352]	@ (80086e8 <HAL_DMA_IRQHandler+0x424>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d013      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x2ee>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a57      	ldr	r2, [pc, #348]	@ (80086ec <HAL_DMA_IRQHandler+0x428>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d00e      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x2ee>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a55      	ldr	r2, [pc, #340]	@ (80086f0 <HAL_DMA_IRQHandler+0x42c>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d009      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x2ee>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a54      	ldr	r2, [pc, #336]	@ (80086f4 <HAL_DMA_IRQHandler+0x430>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d004      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x2ee>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a52      	ldr	r2, [pc, #328]	@ (80086f8 <HAL_DMA_IRQHandler+0x434>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d10a      	bne.n	80085c8 <HAL_DMA_IRQHandler+0x304>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	695b      	ldr	r3, [r3, #20]
 80085b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085bc:	2b00      	cmp	r3, #0
 80085be:	bf14      	ite	ne
 80085c0:	2301      	movne	r3, #1
 80085c2:	2300      	moveq	r3, #0
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	e003      	b.n	80085d0 <HAL_DMA_IRQHandler+0x30c>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2300      	movs	r3, #0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00d      	beq.n	80085f0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085d8:	f003 031f 	and.w	r3, r3, #31
 80085dc:	2201      	movs	r2, #1
 80085de:	409a      	lsls	r2, r3
 80085e0:	6a3b      	ldr	r3, [r7, #32]
 80085e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085e8:	f043 0202 	orr.w	r2, r3, #2
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085f4:	f003 031f 	and.w	r3, r3, #31
 80085f8:	2204      	movs	r2, #4
 80085fa:	409a      	lsls	r2, r3
 80085fc:	69bb      	ldr	r3, [r7, #24]
 80085fe:	4013      	ands	r3, r2
 8008600:	2b00      	cmp	r3, #0
 8008602:	f000 808f 	beq.w	8008724 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a2c      	ldr	r2, [pc, #176]	@ (80086bc <HAL_DMA_IRQHandler+0x3f8>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d04a      	beq.n	80086a6 <HAL_DMA_IRQHandler+0x3e2>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a2a      	ldr	r2, [pc, #168]	@ (80086c0 <HAL_DMA_IRQHandler+0x3fc>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d045      	beq.n	80086a6 <HAL_DMA_IRQHandler+0x3e2>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a29      	ldr	r2, [pc, #164]	@ (80086c4 <HAL_DMA_IRQHandler+0x400>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d040      	beq.n	80086a6 <HAL_DMA_IRQHandler+0x3e2>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a27      	ldr	r2, [pc, #156]	@ (80086c8 <HAL_DMA_IRQHandler+0x404>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d03b      	beq.n	80086a6 <HAL_DMA_IRQHandler+0x3e2>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a26      	ldr	r2, [pc, #152]	@ (80086cc <HAL_DMA_IRQHandler+0x408>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d036      	beq.n	80086a6 <HAL_DMA_IRQHandler+0x3e2>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a24      	ldr	r2, [pc, #144]	@ (80086d0 <HAL_DMA_IRQHandler+0x40c>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d031      	beq.n	80086a6 <HAL_DMA_IRQHandler+0x3e2>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a23      	ldr	r2, [pc, #140]	@ (80086d4 <HAL_DMA_IRQHandler+0x410>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d02c      	beq.n	80086a6 <HAL_DMA_IRQHandler+0x3e2>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a21      	ldr	r2, [pc, #132]	@ (80086d8 <HAL_DMA_IRQHandler+0x414>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d027      	beq.n	80086a6 <HAL_DMA_IRQHandler+0x3e2>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a20      	ldr	r2, [pc, #128]	@ (80086dc <HAL_DMA_IRQHandler+0x418>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d022      	beq.n	80086a6 <HAL_DMA_IRQHandler+0x3e2>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a1e      	ldr	r2, [pc, #120]	@ (80086e0 <HAL_DMA_IRQHandler+0x41c>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d01d      	beq.n	80086a6 <HAL_DMA_IRQHandler+0x3e2>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a1d      	ldr	r2, [pc, #116]	@ (80086e4 <HAL_DMA_IRQHandler+0x420>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d018      	beq.n	80086a6 <HAL_DMA_IRQHandler+0x3e2>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a1b      	ldr	r2, [pc, #108]	@ (80086e8 <HAL_DMA_IRQHandler+0x424>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d013      	beq.n	80086a6 <HAL_DMA_IRQHandler+0x3e2>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a1a      	ldr	r2, [pc, #104]	@ (80086ec <HAL_DMA_IRQHandler+0x428>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d00e      	beq.n	80086a6 <HAL_DMA_IRQHandler+0x3e2>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a18      	ldr	r2, [pc, #96]	@ (80086f0 <HAL_DMA_IRQHandler+0x42c>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d009      	beq.n	80086a6 <HAL_DMA_IRQHandler+0x3e2>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a17      	ldr	r2, [pc, #92]	@ (80086f4 <HAL_DMA_IRQHandler+0x430>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d004      	beq.n	80086a6 <HAL_DMA_IRQHandler+0x3e2>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a15      	ldr	r2, [pc, #84]	@ (80086f8 <HAL_DMA_IRQHandler+0x434>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d12a      	bne.n	80086fc <HAL_DMA_IRQHandler+0x438>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f003 0302 	and.w	r3, r3, #2
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	bf14      	ite	ne
 80086b4:	2301      	movne	r3, #1
 80086b6:	2300      	moveq	r3, #0
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	e023      	b.n	8008704 <HAL_DMA_IRQHandler+0x440>
 80086bc:	40020010 	.word	0x40020010
 80086c0:	40020028 	.word	0x40020028
 80086c4:	40020040 	.word	0x40020040
 80086c8:	40020058 	.word	0x40020058
 80086cc:	40020070 	.word	0x40020070
 80086d0:	40020088 	.word	0x40020088
 80086d4:	400200a0 	.word	0x400200a0
 80086d8:	400200b8 	.word	0x400200b8
 80086dc:	40020410 	.word	0x40020410
 80086e0:	40020428 	.word	0x40020428
 80086e4:	40020440 	.word	0x40020440
 80086e8:	40020458 	.word	0x40020458
 80086ec:	40020470 	.word	0x40020470
 80086f0:	40020488 	.word	0x40020488
 80086f4:	400204a0 	.word	0x400204a0
 80086f8:	400204b8 	.word	0x400204b8
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	2300      	movs	r3, #0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00d      	beq.n	8008724 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800870c:	f003 031f 	and.w	r3, r3, #31
 8008710:	2204      	movs	r2, #4
 8008712:	409a      	lsls	r2, r3
 8008714:	6a3b      	ldr	r3, [r7, #32]
 8008716:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800871c:	f043 0204 	orr.w	r2, r3, #4
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008728:	f003 031f 	and.w	r3, r3, #31
 800872c:	2210      	movs	r2, #16
 800872e:	409a      	lsls	r2, r3
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	4013      	ands	r3, r2
 8008734:	2b00      	cmp	r3, #0
 8008736:	f000 80a6 	beq.w	8008886 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a85      	ldr	r2, [pc, #532]	@ (8008954 <HAL_DMA_IRQHandler+0x690>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d04a      	beq.n	80087da <HAL_DMA_IRQHandler+0x516>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a83      	ldr	r2, [pc, #524]	@ (8008958 <HAL_DMA_IRQHandler+0x694>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d045      	beq.n	80087da <HAL_DMA_IRQHandler+0x516>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a82      	ldr	r2, [pc, #520]	@ (800895c <HAL_DMA_IRQHandler+0x698>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d040      	beq.n	80087da <HAL_DMA_IRQHandler+0x516>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a80      	ldr	r2, [pc, #512]	@ (8008960 <HAL_DMA_IRQHandler+0x69c>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d03b      	beq.n	80087da <HAL_DMA_IRQHandler+0x516>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a7f      	ldr	r2, [pc, #508]	@ (8008964 <HAL_DMA_IRQHandler+0x6a0>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d036      	beq.n	80087da <HAL_DMA_IRQHandler+0x516>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a7d      	ldr	r2, [pc, #500]	@ (8008968 <HAL_DMA_IRQHandler+0x6a4>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d031      	beq.n	80087da <HAL_DMA_IRQHandler+0x516>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a7c      	ldr	r2, [pc, #496]	@ (800896c <HAL_DMA_IRQHandler+0x6a8>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d02c      	beq.n	80087da <HAL_DMA_IRQHandler+0x516>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a7a      	ldr	r2, [pc, #488]	@ (8008970 <HAL_DMA_IRQHandler+0x6ac>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d027      	beq.n	80087da <HAL_DMA_IRQHandler+0x516>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a79      	ldr	r2, [pc, #484]	@ (8008974 <HAL_DMA_IRQHandler+0x6b0>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d022      	beq.n	80087da <HAL_DMA_IRQHandler+0x516>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a77      	ldr	r2, [pc, #476]	@ (8008978 <HAL_DMA_IRQHandler+0x6b4>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d01d      	beq.n	80087da <HAL_DMA_IRQHandler+0x516>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a76      	ldr	r2, [pc, #472]	@ (800897c <HAL_DMA_IRQHandler+0x6b8>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d018      	beq.n	80087da <HAL_DMA_IRQHandler+0x516>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a74      	ldr	r2, [pc, #464]	@ (8008980 <HAL_DMA_IRQHandler+0x6bc>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d013      	beq.n	80087da <HAL_DMA_IRQHandler+0x516>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a73      	ldr	r2, [pc, #460]	@ (8008984 <HAL_DMA_IRQHandler+0x6c0>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d00e      	beq.n	80087da <HAL_DMA_IRQHandler+0x516>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a71      	ldr	r2, [pc, #452]	@ (8008988 <HAL_DMA_IRQHandler+0x6c4>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d009      	beq.n	80087da <HAL_DMA_IRQHandler+0x516>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a70      	ldr	r2, [pc, #448]	@ (800898c <HAL_DMA_IRQHandler+0x6c8>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d004      	beq.n	80087da <HAL_DMA_IRQHandler+0x516>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a6e      	ldr	r2, [pc, #440]	@ (8008990 <HAL_DMA_IRQHandler+0x6cc>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d10a      	bne.n	80087f0 <HAL_DMA_IRQHandler+0x52c>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 0308 	and.w	r3, r3, #8
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	bf14      	ite	ne
 80087e8:	2301      	movne	r3, #1
 80087ea:	2300      	moveq	r3, #0
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	e009      	b.n	8008804 <HAL_DMA_IRQHandler+0x540>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f003 0304 	and.w	r3, r3, #4
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	bf14      	ite	ne
 80087fe:	2301      	movne	r3, #1
 8008800:	2300      	moveq	r3, #0
 8008802:	b2db      	uxtb	r3, r3
 8008804:	2b00      	cmp	r3, #0
 8008806:	d03e      	beq.n	8008886 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800880c:	f003 031f 	and.w	r3, r3, #31
 8008810:	2210      	movs	r2, #16
 8008812:	409a      	lsls	r2, r3
 8008814:	6a3b      	ldr	r3, [r7, #32]
 8008816:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008822:	2b00      	cmp	r3, #0
 8008824:	d018      	beq.n	8008858 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008830:	2b00      	cmp	r3, #0
 8008832:	d108      	bne.n	8008846 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008838:	2b00      	cmp	r3, #0
 800883a:	d024      	beq.n	8008886 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	4798      	blx	r3
 8008844:	e01f      	b.n	8008886 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800884a:	2b00      	cmp	r3, #0
 800884c:	d01b      	beq.n	8008886 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	4798      	blx	r3
 8008856:	e016      	b.n	8008886 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008862:	2b00      	cmp	r3, #0
 8008864:	d107      	bne.n	8008876 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f022 0208 	bic.w	r2, r2, #8
 8008874:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800887a:	2b00      	cmp	r3, #0
 800887c:	d003      	beq.n	8008886 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800888a:	f003 031f 	and.w	r3, r3, #31
 800888e:	2220      	movs	r2, #32
 8008890:	409a      	lsls	r2, r3
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	4013      	ands	r3, r2
 8008896:	2b00      	cmp	r3, #0
 8008898:	f000 8110 	beq.w	8008abc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a2c      	ldr	r2, [pc, #176]	@ (8008954 <HAL_DMA_IRQHandler+0x690>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d04a      	beq.n	800893c <HAL_DMA_IRQHandler+0x678>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a2b      	ldr	r2, [pc, #172]	@ (8008958 <HAL_DMA_IRQHandler+0x694>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d045      	beq.n	800893c <HAL_DMA_IRQHandler+0x678>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a29      	ldr	r2, [pc, #164]	@ (800895c <HAL_DMA_IRQHandler+0x698>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d040      	beq.n	800893c <HAL_DMA_IRQHandler+0x678>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a28      	ldr	r2, [pc, #160]	@ (8008960 <HAL_DMA_IRQHandler+0x69c>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d03b      	beq.n	800893c <HAL_DMA_IRQHandler+0x678>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a26      	ldr	r2, [pc, #152]	@ (8008964 <HAL_DMA_IRQHandler+0x6a0>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d036      	beq.n	800893c <HAL_DMA_IRQHandler+0x678>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a25      	ldr	r2, [pc, #148]	@ (8008968 <HAL_DMA_IRQHandler+0x6a4>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d031      	beq.n	800893c <HAL_DMA_IRQHandler+0x678>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a23      	ldr	r2, [pc, #140]	@ (800896c <HAL_DMA_IRQHandler+0x6a8>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d02c      	beq.n	800893c <HAL_DMA_IRQHandler+0x678>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a22      	ldr	r2, [pc, #136]	@ (8008970 <HAL_DMA_IRQHandler+0x6ac>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d027      	beq.n	800893c <HAL_DMA_IRQHandler+0x678>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a20      	ldr	r2, [pc, #128]	@ (8008974 <HAL_DMA_IRQHandler+0x6b0>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d022      	beq.n	800893c <HAL_DMA_IRQHandler+0x678>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a1f      	ldr	r2, [pc, #124]	@ (8008978 <HAL_DMA_IRQHandler+0x6b4>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d01d      	beq.n	800893c <HAL_DMA_IRQHandler+0x678>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a1d      	ldr	r2, [pc, #116]	@ (800897c <HAL_DMA_IRQHandler+0x6b8>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d018      	beq.n	800893c <HAL_DMA_IRQHandler+0x678>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a1c      	ldr	r2, [pc, #112]	@ (8008980 <HAL_DMA_IRQHandler+0x6bc>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d013      	beq.n	800893c <HAL_DMA_IRQHandler+0x678>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a1a      	ldr	r2, [pc, #104]	@ (8008984 <HAL_DMA_IRQHandler+0x6c0>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d00e      	beq.n	800893c <HAL_DMA_IRQHandler+0x678>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a19      	ldr	r2, [pc, #100]	@ (8008988 <HAL_DMA_IRQHandler+0x6c4>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d009      	beq.n	800893c <HAL_DMA_IRQHandler+0x678>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a17      	ldr	r2, [pc, #92]	@ (800898c <HAL_DMA_IRQHandler+0x6c8>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d004      	beq.n	800893c <HAL_DMA_IRQHandler+0x678>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a16      	ldr	r2, [pc, #88]	@ (8008990 <HAL_DMA_IRQHandler+0x6cc>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d12b      	bne.n	8008994 <HAL_DMA_IRQHandler+0x6d0>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f003 0310 	and.w	r3, r3, #16
 8008946:	2b00      	cmp	r3, #0
 8008948:	bf14      	ite	ne
 800894a:	2301      	movne	r3, #1
 800894c:	2300      	moveq	r3, #0
 800894e:	b2db      	uxtb	r3, r3
 8008950:	e02a      	b.n	80089a8 <HAL_DMA_IRQHandler+0x6e4>
 8008952:	bf00      	nop
 8008954:	40020010 	.word	0x40020010
 8008958:	40020028 	.word	0x40020028
 800895c:	40020040 	.word	0x40020040
 8008960:	40020058 	.word	0x40020058
 8008964:	40020070 	.word	0x40020070
 8008968:	40020088 	.word	0x40020088
 800896c:	400200a0 	.word	0x400200a0
 8008970:	400200b8 	.word	0x400200b8
 8008974:	40020410 	.word	0x40020410
 8008978:	40020428 	.word	0x40020428
 800897c:	40020440 	.word	0x40020440
 8008980:	40020458 	.word	0x40020458
 8008984:	40020470 	.word	0x40020470
 8008988:	40020488 	.word	0x40020488
 800898c:	400204a0 	.word	0x400204a0
 8008990:	400204b8 	.word	0x400204b8
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f003 0302 	and.w	r3, r3, #2
 800899e:	2b00      	cmp	r3, #0
 80089a0:	bf14      	ite	ne
 80089a2:	2301      	movne	r3, #1
 80089a4:	2300      	moveq	r3, #0
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f000 8087 	beq.w	8008abc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089b2:	f003 031f 	and.w	r3, r3, #31
 80089b6:	2220      	movs	r2, #32
 80089b8:	409a      	lsls	r2, r3
 80089ba:	6a3b      	ldr	r3, [r7, #32]
 80089bc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b04      	cmp	r3, #4
 80089c8:	d139      	bne.n	8008a3e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f022 0216 	bic.w	r2, r2, #22
 80089d8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	695a      	ldr	r2, [r3, #20]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80089e8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d103      	bne.n	80089fa <HAL_DMA_IRQHandler+0x736>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d007      	beq.n	8008a0a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f022 0208 	bic.w	r2, r2, #8
 8008a08:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a0e:	f003 031f 	and.w	r3, r3, #31
 8008a12:	223f      	movs	r2, #63	@ 0x3f
 8008a14:	409a      	lsls	r2, r3
 8008a16:	6a3b      	ldr	r3, [r7, #32]
 8008a18:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	f000 834a 	beq.w	80090c8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	4798      	blx	r3
          }
          return;
 8008a3c:	e344      	b.n	80090c8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d018      	beq.n	8008a7e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d108      	bne.n	8008a6c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d02c      	beq.n	8008abc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	4798      	blx	r3
 8008a6a:	e027      	b.n	8008abc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d023      	beq.n	8008abc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	4798      	blx	r3
 8008a7c:	e01e      	b.n	8008abc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d10f      	bne.n	8008aac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f022 0210 	bic.w	r2, r2, #16
 8008a9a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d003      	beq.n	8008abc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f000 8306 	beq.w	80090d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aca:	f003 0301 	and.w	r3, r3, #1
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	f000 8088 	beq.w	8008be4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2204      	movs	r2, #4
 8008ad8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a7a      	ldr	r2, [pc, #488]	@ (8008ccc <HAL_DMA_IRQHandler+0xa08>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d04a      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x8b8>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a79      	ldr	r2, [pc, #484]	@ (8008cd0 <HAL_DMA_IRQHandler+0xa0c>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d045      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x8b8>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a77      	ldr	r2, [pc, #476]	@ (8008cd4 <HAL_DMA_IRQHandler+0xa10>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d040      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x8b8>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a76      	ldr	r2, [pc, #472]	@ (8008cd8 <HAL_DMA_IRQHandler+0xa14>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d03b      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x8b8>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a74      	ldr	r2, [pc, #464]	@ (8008cdc <HAL_DMA_IRQHandler+0xa18>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d036      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x8b8>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a73      	ldr	r2, [pc, #460]	@ (8008ce0 <HAL_DMA_IRQHandler+0xa1c>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d031      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x8b8>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a71      	ldr	r2, [pc, #452]	@ (8008ce4 <HAL_DMA_IRQHandler+0xa20>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d02c      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x8b8>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a70      	ldr	r2, [pc, #448]	@ (8008ce8 <HAL_DMA_IRQHandler+0xa24>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d027      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x8b8>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a6e      	ldr	r2, [pc, #440]	@ (8008cec <HAL_DMA_IRQHandler+0xa28>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d022      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x8b8>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a6d      	ldr	r2, [pc, #436]	@ (8008cf0 <HAL_DMA_IRQHandler+0xa2c>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d01d      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x8b8>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a6b      	ldr	r2, [pc, #428]	@ (8008cf4 <HAL_DMA_IRQHandler+0xa30>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d018      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x8b8>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a6a      	ldr	r2, [pc, #424]	@ (8008cf8 <HAL_DMA_IRQHandler+0xa34>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d013      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x8b8>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a68      	ldr	r2, [pc, #416]	@ (8008cfc <HAL_DMA_IRQHandler+0xa38>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d00e      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x8b8>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a67      	ldr	r2, [pc, #412]	@ (8008d00 <HAL_DMA_IRQHandler+0xa3c>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d009      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x8b8>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a65      	ldr	r2, [pc, #404]	@ (8008d04 <HAL_DMA_IRQHandler+0xa40>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d004      	beq.n	8008b7c <HAL_DMA_IRQHandler+0x8b8>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a64      	ldr	r2, [pc, #400]	@ (8008d08 <HAL_DMA_IRQHandler+0xa44>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d108      	bne.n	8008b8e <HAL_DMA_IRQHandler+0x8ca>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f022 0201 	bic.w	r2, r2, #1
 8008b8a:	601a      	str	r2, [r3, #0]
 8008b8c:	e007      	b.n	8008b9e <HAL_DMA_IRQHandler+0x8da>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f022 0201 	bic.w	r2, r2, #1
 8008b9c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	3301      	adds	r3, #1
 8008ba2:	60fb      	str	r3, [r7, #12]
 8008ba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d307      	bcc.n	8008bba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 0301 	and.w	r3, r3, #1
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1f2      	bne.n	8008b9e <HAL_DMA_IRQHandler+0x8da>
 8008bb8:	e000      	b.n	8008bbc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008bba:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f003 0301 	and.w	r3, r3, #1
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d004      	beq.n	8008bd4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2203      	movs	r2, #3
 8008bce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8008bd2:	e003      	b.n	8008bdc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	f000 8272 	beq.w	80090d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	4798      	blx	r3
 8008bf6:	e26c      	b.n	80090d2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a43      	ldr	r2, [pc, #268]	@ (8008d0c <HAL_DMA_IRQHandler+0xa48>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d022      	beq.n	8008c48 <HAL_DMA_IRQHandler+0x984>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a42      	ldr	r2, [pc, #264]	@ (8008d10 <HAL_DMA_IRQHandler+0xa4c>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d01d      	beq.n	8008c48 <HAL_DMA_IRQHandler+0x984>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a40      	ldr	r2, [pc, #256]	@ (8008d14 <HAL_DMA_IRQHandler+0xa50>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d018      	beq.n	8008c48 <HAL_DMA_IRQHandler+0x984>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a3f      	ldr	r2, [pc, #252]	@ (8008d18 <HAL_DMA_IRQHandler+0xa54>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d013      	beq.n	8008c48 <HAL_DMA_IRQHandler+0x984>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a3d      	ldr	r2, [pc, #244]	@ (8008d1c <HAL_DMA_IRQHandler+0xa58>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d00e      	beq.n	8008c48 <HAL_DMA_IRQHandler+0x984>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a3c      	ldr	r2, [pc, #240]	@ (8008d20 <HAL_DMA_IRQHandler+0xa5c>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d009      	beq.n	8008c48 <HAL_DMA_IRQHandler+0x984>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a3a      	ldr	r2, [pc, #232]	@ (8008d24 <HAL_DMA_IRQHandler+0xa60>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d004      	beq.n	8008c48 <HAL_DMA_IRQHandler+0x984>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a39      	ldr	r2, [pc, #228]	@ (8008d28 <HAL_DMA_IRQHandler+0xa64>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d101      	bne.n	8008c4c <HAL_DMA_IRQHandler+0x988>
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e000      	b.n	8008c4e <HAL_DMA_IRQHandler+0x98a>
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	f000 823f 	beq.w	80090d2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c60:	f003 031f 	and.w	r3, r3, #31
 8008c64:	2204      	movs	r2, #4
 8008c66:	409a      	lsls	r2, r3
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f000 80cd 	beq.w	8008e0c <HAL_DMA_IRQHandler+0xb48>
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	f003 0304 	and.w	r3, r3, #4
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	f000 80c7 	beq.w	8008e0c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c82:	f003 031f 	and.w	r3, r3, #31
 8008c86:	2204      	movs	r2, #4
 8008c88:	409a      	lsls	r2, r3
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d049      	beq.n	8008d2c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d109      	bne.n	8008cb6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f000 8210 	beq.w	80090cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008cb4:	e20a      	b.n	80090cc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	f000 8206 	beq.w	80090cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008cc8:	e200      	b.n	80090cc <HAL_DMA_IRQHandler+0xe08>
 8008cca:	bf00      	nop
 8008ccc:	40020010 	.word	0x40020010
 8008cd0:	40020028 	.word	0x40020028
 8008cd4:	40020040 	.word	0x40020040
 8008cd8:	40020058 	.word	0x40020058
 8008cdc:	40020070 	.word	0x40020070
 8008ce0:	40020088 	.word	0x40020088
 8008ce4:	400200a0 	.word	0x400200a0
 8008ce8:	400200b8 	.word	0x400200b8
 8008cec:	40020410 	.word	0x40020410
 8008cf0:	40020428 	.word	0x40020428
 8008cf4:	40020440 	.word	0x40020440
 8008cf8:	40020458 	.word	0x40020458
 8008cfc:	40020470 	.word	0x40020470
 8008d00:	40020488 	.word	0x40020488
 8008d04:	400204a0 	.word	0x400204a0
 8008d08:	400204b8 	.word	0x400204b8
 8008d0c:	58025408 	.word	0x58025408
 8008d10:	5802541c 	.word	0x5802541c
 8008d14:	58025430 	.word	0x58025430
 8008d18:	58025444 	.word	0x58025444
 8008d1c:	58025458 	.word	0x58025458
 8008d20:	5802546c 	.word	0x5802546c
 8008d24:	58025480 	.word	0x58025480
 8008d28:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	f003 0320 	and.w	r3, r3, #32
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d160      	bne.n	8008df8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a7f      	ldr	r2, [pc, #508]	@ (8008f38 <HAL_DMA_IRQHandler+0xc74>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d04a      	beq.n	8008dd6 <HAL_DMA_IRQHandler+0xb12>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a7d      	ldr	r2, [pc, #500]	@ (8008f3c <HAL_DMA_IRQHandler+0xc78>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d045      	beq.n	8008dd6 <HAL_DMA_IRQHandler+0xb12>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a7c      	ldr	r2, [pc, #496]	@ (8008f40 <HAL_DMA_IRQHandler+0xc7c>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d040      	beq.n	8008dd6 <HAL_DMA_IRQHandler+0xb12>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a7a      	ldr	r2, [pc, #488]	@ (8008f44 <HAL_DMA_IRQHandler+0xc80>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d03b      	beq.n	8008dd6 <HAL_DMA_IRQHandler+0xb12>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a79      	ldr	r2, [pc, #484]	@ (8008f48 <HAL_DMA_IRQHandler+0xc84>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d036      	beq.n	8008dd6 <HAL_DMA_IRQHandler+0xb12>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a77      	ldr	r2, [pc, #476]	@ (8008f4c <HAL_DMA_IRQHandler+0xc88>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d031      	beq.n	8008dd6 <HAL_DMA_IRQHandler+0xb12>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a76      	ldr	r2, [pc, #472]	@ (8008f50 <HAL_DMA_IRQHandler+0xc8c>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d02c      	beq.n	8008dd6 <HAL_DMA_IRQHandler+0xb12>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a74      	ldr	r2, [pc, #464]	@ (8008f54 <HAL_DMA_IRQHandler+0xc90>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d027      	beq.n	8008dd6 <HAL_DMA_IRQHandler+0xb12>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a73      	ldr	r2, [pc, #460]	@ (8008f58 <HAL_DMA_IRQHandler+0xc94>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d022      	beq.n	8008dd6 <HAL_DMA_IRQHandler+0xb12>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a71      	ldr	r2, [pc, #452]	@ (8008f5c <HAL_DMA_IRQHandler+0xc98>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d01d      	beq.n	8008dd6 <HAL_DMA_IRQHandler+0xb12>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a70      	ldr	r2, [pc, #448]	@ (8008f60 <HAL_DMA_IRQHandler+0xc9c>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d018      	beq.n	8008dd6 <HAL_DMA_IRQHandler+0xb12>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a6e      	ldr	r2, [pc, #440]	@ (8008f64 <HAL_DMA_IRQHandler+0xca0>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d013      	beq.n	8008dd6 <HAL_DMA_IRQHandler+0xb12>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a6d      	ldr	r2, [pc, #436]	@ (8008f68 <HAL_DMA_IRQHandler+0xca4>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d00e      	beq.n	8008dd6 <HAL_DMA_IRQHandler+0xb12>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a6b      	ldr	r2, [pc, #428]	@ (8008f6c <HAL_DMA_IRQHandler+0xca8>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d009      	beq.n	8008dd6 <HAL_DMA_IRQHandler+0xb12>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a6a      	ldr	r2, [pc, #424]	@ (8008f70 <HAL_DMA_IRQHandler+0xcac>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d004      	beq.n	8008dd6 <HAL_DMA_IRQHandler+0xb12>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a68      	ldr	r2, [pc, #416]	@ (8008f74 <HAL_DMA_IRQHandler+0xcb0>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d108      	bne.n	8008de8 <HAL_DMA_IRQHandler+0xb24>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f022 0208 	bic.w	r2, r2, #8
 8008de4:	601a      	str	r2, [r3, #0]
 8008de6:	e007      	b.n	8008df8 <HAL_DMA_IRQHandler+0xb34>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f022 0204 	bic.w	r2, r2, #4
 8008df6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f000 8165 	beq.w	80090cc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008e0a:	e15f      	b.n	80090cc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e10:	f003 031f 	and.w	r3, r3, #31
 8008e14:	2202      	movs	r2, #2
 8008e16:	409a      	lsls	r2, r3
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	4013      	ands	r3, r2
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	f000 80c5 	beq.w	8008fac <HAL_DMA_IRQHandler+0xce8>
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	f003 0302 	and.w	r3, r3, #2
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f000 80bf 	beq.w	8008fac <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e32:	f003 031f 	and.w	r3, r3, #31
 8008e36:	2202      	movs	r2, #2
 8008e38:	409a      	lsls	r2, r3
 8008e3a:	69fb      	ldr	r3, [r7, #28]
 8008e3c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d018      	beq.n	8008e7a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d109      	bne.n	8008e66 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	f000 813a 	beq.w	80090d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008e64:	e134      	b.n	80090d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	f000 8130 	beq.w	80090d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008e78:	e12a      	b.n	80090d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	f003 0320 	and.w	r3, r3, #32
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	f040 8089 	bne.w	8008f98 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a2b      	ldr	r2, [pc, #172]	@ (8008f38 <HAL_DMA_IRQHandler+0xc74>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d04a      	beq.n	8008f26 <HAL_DMA_IRQHandler+0xc62>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a29      	ldr	r2, [pc, #164]	@ (8008f3c <HAL_DMA_IRQHandler+0xc78>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d045      	beq.n	8008f26 <HAL_DMA_IRQHandler+0xc62>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a28      	ldr	r2, [pc, #160]	@ (8008f40 <HAL_DMA_IRQHandler+0xc7c>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d040      	beq.n	8008f26 <HAL_DMA_IRQHandler+0xc62>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a26      	ldr	r2, [pc, #152]	@ (8008f44 <HAL_DMA_IRQHandler+0xc80>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d03b      	beq.n	8008f26 <HAL_DMA_IRQHandler+0xc62>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a25      	ldr	r2, [pc, #148]	@ (8008f48 <HAL_DMA_IRQHandler+0xc84>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d036      	beq.n	8008f26 <HAL_DMA_IRQHandler+0xc62>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a23      	ldr	r2, [pc, #140]	@ (8008f4c <HAL_DMA_IRQHandler+0xc88>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d031      	beq.n	8008f26 <HAL_DMA_IRQHandler+0xc62>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a22      	ldr	r2, [pc, #136]	@ (8008f50 <HAL_DMA_IRQHandler+0xc8c>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d02c      	beq.n	8008f26 <HAL_DMA_IRQHandler+0xc62>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a20      	ldr	r2, [pc, #128]	@ (8008f54 <HAL_DMA_IRQHandler+0xc90>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d027      	beq.n	8008f26 <HAL_DMA_IRQHandler+0xc62>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a1f      	ldr	r2, [pc, #124]	@ (8008f58 <HAL_DMA_IRQHandler+0xc94>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d022      	beq.n	8008f26 <HAL_DMA_IRQHandler+0xc62>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a1d      	ldr	r2, [pc, #116]	@ (8008f5c <HAL_DMA_IRQHandler+0xc98>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d01d      	beq.n	8008f26 <HAL_DMA_IRQHandler+0xc62>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a1c      	ldr	r2, [pc, #112]	@ (8008f60 <HAL_DMA_IRQHandler+0xc9c>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d018      	beq.n	8008f26 <HAL_DMA_IRQHandler+0xc62>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a1a      	ldr	r2, [pc, #104]	@ (8008f64 <HAL_DMA_IRQHandler+0xca0>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d013      	beq.n	8008f26 <HAL_DMA_IRQHandler+0xc62>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a19      	ldr	r2, [pc, #100]	@ (8008f68 <HAL_DMA_IRQHandler+0xca4>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d00e      	beq.n	8008f26 <HAL_DMA_IRQHandler+0xc62>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a17      	ldr	r2, [pc, #92]	@ (8008f6c <HAL_DMA_IRQHandler+0xca8>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d009      	beq.n	8008f26 <HAL_DMA_IRQHandler+0xc62>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a16      	ldr	r2, [pc, #88]	@ (8008f70 <HAL_DMA_IRQHandler+0xcac>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d004      	beq.n	8008f26 <HAL_DMA_IRQHandler+0xc62>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a14      	ldr	r2, [pc, #80]	@ (8008f74 <HAL_DMA_IRQHandler+0xcb0>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d128      	bne.n	8008f78 <HAL_DMA_IRQHandler+0xcb4>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f022 0214 	bic.w	r2, r2, #20
 8008f34:	601a      	str	r2, [r3, #0]
 8008f36:	e027      	b.n	8008f88 <HAL_DMA_IRQHandler+0xcc4>
 8008f38:	40020010 	.word	0x40020010
 8008f3c:	40020028 	.word	0x40020028
 8008f40:	40020040 	.word	0x40020040
 8008f44:	40020058 	.word	0x40020058
 8008f48:	40020070 	.word	0x40020070
 8008f4c:	40020088 	.word	0x40020088
 8008f50:	400200a0 	.word	0x400200a0
 8008f54:	400200b8 	.word	0x400200b8
 8008f58:	40020410 	.word	0x40020410
 8008f5c:	40020428 	.word	0x40020428
 8008f60:	40020440 	.word	0x40020440
 8008f64:	40020458 	.word	0x40020458
 8008f68:	40020470 	.word	0x40020470
 8008f6c:	40020488 	.word	0x40020488
 8008f70:	400204a0 	.word	0x400204a0
 8008f74:	400204b8 	.word	0x400204b8
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f022 020a 	bic.w	r2, r2, #10
 8008f86:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f000 8097 	beq.w	80090d0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008faa:	e091      	b.n	80090d0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fb0:	f003 031f 	and.w	r3, r3, #31
 8008fb4:	2208      	movs	r2, #8
 8008fb6:	409a      	lsls	r2, r3
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	4013      	ands	r3, r2
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	f000 8088 	beq.w	80090d2 <HAL_DMA_IRQHandler+0xe0e>
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	f003 0308 	and.w	r3, r3, #8
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f000 8082 	beq.w	80090d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a41      	ldr	r2, [pc, #260]	@ (80090d8 <HAL_DMA_IRQHandler+0xe14>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d04a      	beq.n	800906e <HAL_DMA_IRQHandler+0xdaa>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a3f      	ldr	r2, [pc, #252]	@ (80090dc <HAL_DMA_IRQHandler+0xe18>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d045      	beq.n	800906e <HAL_DMA_IRQHandler+0xdaa>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a3e      	ldr	r2, [pc, #248]	@ (80090e0 <HAL_DMA_IRQHandler+0xe1c>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d040      	beq.n	800906e <HAL_DMA_IRQHandler+0xdaa>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a3c      	ldr	r2, [pc, #240]	@ (80090e4 <HAL_DMA_IRQHandler+0xe20>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d03b      	beq.n	800906e <HAL_DMA_IRQHandler+0xdaa>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a3b      	ldr	r2, [pc, #236]	@ (80090e8 <HAL_DMA_IRQHandler+0xe24>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d036      	beq.n	800906e <HAL_DMA_IRQHandler+0xdaa>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a39      	ldr	r2, [pc, #228]	@ (80090ec <HAL_DMA_IRQHandler+0xe28>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d031      	beq.n	800906e <HAL_DMA_IRQHandler+0xdaa>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a38      	ldr	r2, [pc, #224]	@ (80090f0 <HAL_DMA_IRQHandler+0xe2c>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d02c      	beq.n	800906e <HAL_DMA_IRQHandler+0xdaa>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a36      	ldr	r2, [pc, #216]	@ (80090f4 <HAL_DMA_IRQHandler+0xe30>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d027      	beq.n	800906e <HAL_DMA_IRQHandler+0xdaa>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a35      	ldr	r2, [pc, #212]	@ (80090f8 <HAL_DMA_IRQHandler+0xe34>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d022      	beq.n	800906e <HAL_DMA_IRQHandler+0xdaa>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a33      	ldr	r2, [pc, #204]	@ (80090fc <HAL_DMA_IRQHandler+0xe38>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d01d      	beq.n	800906e <HAL_DMA_IRQHandler+0xdaa>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a32      	ldr	r2, [pc, #200]	@ (8009100 <HAL_DMA_IRQHandler+0xe3c>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d018      	beq.n	800906e <HAL_DMA_IRQHandler+0xdaa>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a30      	ldr	r2, [pc, #192]	@ (8009104 <HAL_DMA_IRQHandler+0xe40>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d013      	beq.n	800906e <HAL_DMA_IRQHandler+0xdaa>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a2f      	ldr	r2, [pc, #188]	@ (8009108 <HAL_DMA_IRQHandler+0xe44>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d00e      	beq.n	800906e <HAL_DMA_IRQHandler+0xdaa>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a2d      	ldr	r2, [pc, #180]	@ (800910c <HAL_DMA_IRQHandler+0xe48>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d009      	beq.n	800906e <HAL_DMA_IRQHandler+0xdaa>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a2c      	ldr	r2, [pc, #176]	@ (8009110 <HAL_DMA_IRQHandler+0xe4c>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d004      	beq.n	800906e <HAL_DMA_IRQHandler+0xdaa>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a2a      	ldr	r2, [pc, #168]	@ (8009114 <HAL_DMA_IRQHandler+0xe50>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d108      	bne.n	8009080 <HAL_DMA_IRQHandler+0xdbc>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f022 021c 	bic.w	r2, r2, #28
 800907c:	601a      	str	r2, [r3, #0]
 800907e:	e007      	b.n	8009090 <HAL_DMA_IRQHandler+0xdcc>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f022 020e 	bic.w	r2, r2, #14
 800908e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009094:	f003 031f 	and.w	r3, r3, #31
 8009098:	2201      	movs	r2, #1
 800909a:	409a      	lsls	r2, r3
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2201      	movs	r2, #1
 80090a4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2201      	movs	r2, #1
 80090aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d009      	beq.n	80090d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	4798      	blx	r3
 80090c6:	e004      	b.n	80090d2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80090c8:	bf00      	nop
 80090ca:	e002      	b.n	80090d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80090cc:	bf00      	nop
 80090ce:	e000      	b.n	80090d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80090d0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80090d2:	3728      	adds	r7, #40	@ 0x28
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	40020010 	.word	0x40020010
 80090dc:	40020028 	.word	0x40020028
 80090e0:	40020040 	.word	0x40020040
 80090e4:	40020058 	.word	0x40020058
 80090e8:	40020070 	.word	0x40020070
 80090ec:	40020088 	.word	0x40020088
 80090f0:	400200a0 	.word	0x400200a0
 80090f4:	400200b8 	.word	0x400200b8
 80090f8:	40020410 	.word	0x40020410
 80090fc:	40020428 	.word	0x40020428
 8009100:	40020440 	.word	0x40020440
 8009104:	40020458 	.word	0x40020458
 8009108:	40020470 	.word	0x40020470
 800910c:	40020488 	.word	0x40020488
 8009110:	400204a0 	.word	0x400204a0
 8009114:	400204b8 	.word	0x400204b8

08009118 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009118:	b480      	push	{r7}
 800911a:	b087      	sub	sp, #28
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	607a      	str	r2, [r7, #4]
 8009124:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800912a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009130:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a7f      	ldr	r2, [pc, #508]	@ (8009334 <DMA_SetConfig+0x21c>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d072      	beq.n	8009222 <DMA_SetConfig+0x10a>
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a7d      	ldr	r2, [pc, #500]	@ (8009338 <DMA_SetConfig+0x220>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d06d      	beq.n	8009222 <DMA_SetConfig+0x10a>
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a7c      	ldr	r2, [pc, #496]	@ (800933c <DMA_SetConfig+0x224>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d068      	beq.n	8009222 <DMA_SetConfig+0x10a>
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a7a      	ldr	r2, [pc, #488]	@ (8009340 <DMA_SetConfig+0x228>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d063      	beq.n	8009222 <DMA_SetConfig+0x10a>
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a79      	ldr	r2, [pc, #484]	@ (8009344 <DMA_SetConfig+0x22c>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d05e      	beq.n	8009222 <DMA_SetConfig+0x10a>
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a77      	ldr	r2, [pc, #476]	@ (8009348 <DMA_SetConfig+0x230>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d059      	beq.n	8009222 <DMA_SetConfig+0x10a>
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a76      	ldr	r2, [pc, #472]	@ (800934c <DMA_SetConfig+0x234>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d054      	beq.n	8009222 <DMA_SetConfig+0x10a>
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a74      	ldr	r2, [pc, #464]	@ (8009350 <DMA_SetConfig+0x238>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d04f      	beq.n	8009222 <DMA_SetConfig+0x10a>
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a73      	ldr	r2, [pc, #460]	@ (8009354 <DMA_SetConfig+0x23c>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d04a      	beq.n	8009222 <DMA_SetConfig+0x10a>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a71      	ldr	r2, [pc, #452]	@ (8009358 <DMA_SetConfig+0x240>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d045      	beq.n	8009222 <DMA_SetConfig+0x10a>
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a70      	ldr	r2, [pc, #448]	@ (800935c <DMA_SetConfig+0x244>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d040      	beq.n	8009222 <DMA_SetConfig+0x10a>
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a6e      	ldr	r2, [pc, #440]	@ (8009360 <DMA_SetConfig+0x248>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d03b      	beq.n	8009222 <DMA_SetConfig+0x10a>
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a6d      	ldr	r2, [pc, #436]	@ (8009364 <DMA_SetConfig+0x24c>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d036      	beq.n	8009222 <DMA_SetConfig+0x10a>
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a6b      	ldr	r2, [pc, #428]	@ (8009368 <DMA_SetConfig+0x250>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d031      	beq.n	8009222 <DMA_SetConfig+0x10a>
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a6a      	ldr	r2, [pc, #424]	@ (800936c <DMA_SetConfig+0x254>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d02c      	beq.n	8009222 <DMA_SetConfig+0x10a>
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a68      	ldr	r2, [pc, #416]	@ (8009370 <DMA_SetConfig+0x258>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d027      	beq.n	8009222 <DMA_SetConfig+0x10a>
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a67      	ldr	r2, [pc, #412]	@ (8009374 <DMA_SetConfig+0x25c>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d022      	beq.n	8009222 <DMA_SetConfig+0x10a>
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a65      	ldr	r2, [pc, #404]	@ (8009378 <DMA_SetConfig+0x260>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d01d      	beq.n	8009222 <DMA_SetConfig+0x10a>
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a64      	ldr	r2, [pc, #400]	@ (800937c <DMA_SetConfig+0x264>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d018      	beq.n	8009222 <DMA_SetConfig+0x10a>
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a62      	ldr	r2, [pc, #392]	@ (8009380 <DMA_SetConfig+0x268>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d013      	beq.n	8009222 <DMA_SetConfig+0x10a>
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a61      	ldr	r2, [pc, #388]	@ (8009384 <DMA_SetConfig+0x26c>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d00e      	beq.n	8009222 <DMA_SetConfig+0x10a>
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a5f      	ldr	r2, [pc, #380]	@ (8009388 <DMA_SetConfig+0x270>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d009      	beq.n	8009222 <DMA_SetConfig+0x10a>
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a5e      	ldr	r2, [pc, #376]	@ (800938c <DMA_SetConfig+0x274>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d004      	beq.n	8009222 <DMA_SetConfig+0x10a>
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a5c      	ldr	r2, [pc, #368]	@ (8009390 <DMA_SetConfig+0x278>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d101      	bne.n	8009226 <DMA_SetConfig+0x10e>
 8009222:	2301      	movs	r3, #1
 8009224:	e000      	b.n	8009228 <DMA_SetConfig+0x110>
 8009226:	2300      	movs	r3, #0
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00d      	beq.n	8009248 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009234:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800923a:	2b00      	cmp	r3, #0
 800923c:	d004      	beq.n	8009248 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009242:	68fa      	ldr	r2, [r7, #12]
 8009244:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009246:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a39      	ldr	r2, [pc, #228]	@ (8009334 <DMA_SetConfig+0x21c>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d04a      	beq.n	80092e8 <DMA_SetConfig+0x1d0>
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a38      	ldr	r2, [pc, #224]	@ (8009338 <DMA_SetConfig+0x220>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d045      	beq.n	80092e8 <DMA_SetConfig+0x1d0>
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a36      	ldr	r2, [pc, #216]	@ (800933c <DMA_SetConfig+0x224>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d040      	beq.n	80092e8 <DMA_SetConfig+0x1d0>
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a35      	ldr	r2, [pc, #212]	@ (8009340 <DMA_SetConfig+0x228>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d03b      	beq.n	80092e8 <DMA_SetConfig+0x1d0>
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a33      	ldr	r2, [pc, #204]	@ (8009344 <DMA_SetConfig+0x22c>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d036      	beq.n	80092e8 <DMA_SetConfig+0x1d0>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a32      	ldr	r2, [pc, #200]	@ (8009348 <DMA_SetConfig+0x230>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d031      	beq.n	80092e8 <DMA_SetConfig+0x1d0>
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a30      	ldr	r2, [pc, #192]	@ (800934c <DMA_SetConfig+0x234>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d02c      	beq.n	80092e8 <DMA_SetConfig+0x1d0>
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a2f      	ldr	r2, [pc, #188]	@ (8009350 <DMA_SetConfig+0x238>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d027      	beq.n	80092e8 <DMA_SetConfig+0x1d0>
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a2d      	ldr	r2, [pc, #180]	@ (8009354 <DMA_SetConfig+0x23c>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d022      	beq.n	80092e8 <DMA_SetConfig+0x1d0>
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a2c      	ldr	r2, [pc, #176]	@ (8009358 <DMA_SetConfig+0x240>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d01d      	beq.n	80092e8 <DMA_SetConfig+0x1d0>
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a2a      	ldr	r2, [pc, #168]	@ (800935c <DMA_SetConfig+0x244>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d018      	beq.n	80092e8 <DMA_SetConfig+0x1d0>
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a29      	ldr	r2, [pc, #164]	@ (8009360 <DMA_SetConfig+0x248>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d013      	beq.n	80092e8 <DMA_SetConfig+0x1d0>
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a27      	ldr	r2, [pc, #156]	@ (8009364 <DMA_SetConfig+0x24c>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d00e      	beq.n	80092e8 <DMA_SetConfig+0x1d0>
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a26      	ldr	r2, [pc, #152]	@ (8009368 <DMA_SetConfig+0x250>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d009      	beq.n	80092e8 <DMA_SetConfig+0x1d0>
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a24      	ldr	r2, [pc, #144]	@ (800936c <DMA_SetConfig+0x254>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d004      	beq.n	80092e8 <DMA_SetConfig+0x1d0>
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a23      	ldr	r2, [pc, #140]	@ (8009370 <DMA_SetConfig+0x258>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d101      	bne.n	80092ec <DMA_SetConfig+0x1d4>
 80092e8:	2301      	movs	r3, #1
 80092ea:	e000      	b.n	80092ee <DMA_SetConfig+0x1d6>
 80092ec:	2300      	movs	r3, #0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d059      	beq.n	80093a6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092f6:	f003 031f 	and.w	r3, r3, #31
 80092fa:	223f      	movs	r2, #63	@ 0x3f
 80092fc:	409a      	lsls	r2, r3
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009310:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	683a      	ldr	r2, [r7, #0]
 8009318:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	2b40      	cmp	r3, #64	@ 0x40
 8009320:	d138      	bne.n	8009394 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	68ba      	ldr	r2, [r7, #8]
 8009330:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009332:	e086      	b.n	8009442 <DMA_SetConfig+0x32a>
 8009334:	40020010 	.word	0x40020010
 8009338:	40020028 	.word	0x40020028
 800933c:	40020040 	.word	0x40020040
 8009340:	40020058 	.word	0x40020058
 8009344:	40020070 	.word	0x40020070
 8009348:	40020088 	.word	0x40020088
 800934c:	400200a0 	.word	0x400200a0
 8009350:	400200b8 	.word	0x400200b8
 8009354:	40020410 	.word	0x40020410
 8009358:	40020428 	.word	0x40020428
 800935c:	40020440 	.word	0x40020440
 8009360:	40020458 	.word	0x40020458
 8009364:	40020470 	.word	0x40020470
 8009368:	40020488 	.word	0x40020488
 800936c:	400204a0 	.word	0x400204a0
 8009370:	400204b8 	.word	0x400204b8
 8009374:	58025408 	.word	0x58025408
 8009378:	5802541c 	.word	0x5802541c
 800937c:	58025430 	.word	0x58025430
 8009380:	58025444 	.word	0x58025444
 8009384:	58025458 	.word	0x58025458
 8009388:	5802546c 	.word	0x5802546c
 800938c:	58025480 	.word	0x58025480
 8009390:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	68ba      	ldr	r2, [r7, #8]
 800939a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	60da      	str	r2, [r3, #12]
}
 80093a4:	e04d      	b.n	8009442 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a29      	ldr	r2, [pc, #164]	@ (8009450 <DMA_SetConfig+0x338>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d022      	beq.n	80093f6 <DMA_SetConfig+0x2de>
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a27      	ldr	r2, [pc, #156]	@ (8009454 <DMA_SetConfig+0x33c>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d01d      	beq.n	80093f6 <DMA_SetConfig+0x2de>
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a26      	ldr	r2, [pc, #152]	@ (8009458 <DMA_SetConfig+0x340>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d018      	beq.n	80093f6 <DMA_SetConfig+0x2de>
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a24      	ldr	r2, [pc, #144]	@ (800945c <DMA_SetConfig+0x344>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d013      	beq.n	80093f6 <DMA_SetConfig+0x2de>
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a23      	ldr	r2, [pc, #140]	@ (8009460 <DMA_SetConfig+0x348>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d00e      	beq.n	80093f6 <DMA_SetConfig+0x2de>
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a21      	ldr	r2, [pc, #132]	@ (8009464 <DMA_SetConfig+0x34c>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d009      	beq.n	80093f6 <DMA_SetConfig+0x2de>
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a20      	ldr	r2, [pc, #128]	@ (8009468 <DMA_SetConfig+0x350>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d004      	beq.n	80093f6 <DMA_SetConfig+0x2de>
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a1e      	ldr	r2, [pc, #120]	@ (800946c <DMA_SetConfig+0x354>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d101      	bne.n	80093fa <DMA_SetConfig+0x2e2>
 80093f6:	2301      	movs	r3, #1
 80093f8:	e000      	b.n	80093fc <DMA_SetConfig+0x2e4>
 80093fa:	2300      	movs	r3, #0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d020      	beq.n	8009442 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009404:	f003 031f 	and.w	r3, r3, #31
 8009408:	2201      	movs	r2, #1
 800940a:	409a      	lsls	r2, r3
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	683a      	ldr	r2, [r7, #0]
 8009416:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	689b      	ldr	r3, [r3, #8]
 800941c:	2b40      	cmp	r3, #64	@ 0x40
 800941e:	d108      	bne.n	8009432 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	68ba      	ldr	r2, [r7, #8]
 800942e:	60da      	str	r2, [r3, #12]
}
 8009430:	e007      	b.n	8009442 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	68ba      	ldr	r2, [r7, #8]
 8009438:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	60da      	str	r2, [r3, #12]
}
 8009442:	bf00      	nop
 8009444:	371c      	adds	r7, #28
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr
 800944e:	bf00      	nop
 8009450:	58025408 	.word	0x58025408
 8009454:	5802541c 	.word	0x5802541c
 8009458:	58025430 	.word	0x58025430
 800945c:	58025444 	.word	0x58025444
 8009460:	58025458 	.word	0x58025458
 8009464:	5802546c 	.word	0x5802546c
 8009468:	58025480 	.word	0x58025480
 800946c:	58025494 	.word	0x58025494

08009470 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009470:	b480      	push	{r7}
 8009472:	b085      	sub	sp, #20
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a42      	ldr	r2, [pc, #264]	@ (8009588 <DMA_CalcBaseAndBitshift+0x118>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d04a      	beq.n	8009518 <DMA_CalcBaseAndBitshift+0xa8>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a41      	ldr	r2, [pc, #260]	@ (800958c <DMA_CalcBaseAndBitshift+0x11c>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d045      	beq.n	8009518 <DMA_CalcBaseAndBitshift+0xa8>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a3f      	ldr	r2, [pc, #252]	@ (8009590 <DMA_CalcBaseAndBitshift+0x120>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d040      	beq.n	8009518 <DMA_CalcBaseAndBitshift+0xa8>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a3e      	ldr	r2, [pc, #248]	@ (8009594 <DMA_CalcBaseAndBitshift+0x124>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d03b      	beq.n	8009518 <DMA_CalcBaseAndBitshift+0xa8>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a3c      	ldr	r2, [pc, #240]	@ (8009598 <DMA_CalcBaseAndBitshift+0x128>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d036      	beq.n	8009518 <DMA_CalcBaseAndBitshift+0xa8>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a3b      	ldr	r2, [pc, #236]	@ (800959c <DMA_CalcBaseAndBitshift+0x12c>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d031      	beq.n	8009518 <DMA_CalcBaseAndBitshift+0xa8>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a39      	ldr	r2, [pc, #228]	@ (80095a0 <DMA_CalcBaseAndBitshift+0x130>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d02c      	beq.n	8009518 <DMA_CalcBaseAndBitshift+0xa8>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a38      	ldr	r2, [pc, #224]	@ (80095a4 <DMA_CalcBaseAndBitshift+0x134>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d027      	beq.n	8009518 <DMA_CalcBaseAndBitshift+0xa8>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a36      	ldr	r2, [pc, #216]	@ (80095a8 <DMA_CalcBaseAndBitshift+0x138>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d022      	beq.n	8009518 <DMA_CalcBaseAndBitshift+0xa8>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a35      	ldr	r2, [pc, #212]	@ (80095ac <DMA_CalcBaseAndBitshift+0x13c>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d01d      	beq.n	8009518 <DMA_CalcBaseAndBitshift+0xa8>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a33      	ldr	r2, [pc, #204]	@ (80095b0 <DMA_CalcBaseAndBitshift+0x140>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d018      	beq.n	8009518 <DMA_CalcBaseAndBitshift+0xa8>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a32      	ldr	r2, [pc, #200]	@ (80095b4 <DMA_CalcBaseAndBitshift+0x144>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d013      	beq.n	8009518 <DMA_CalcBaseAndBitshift+0xa8>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a30      	ldr	r2, [pc, #192]	@ (80095b8 <DMA_CalcBaseAndBitshift+0x148>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d00e      	beq.n	8009518 <DMA_CalcBaseAndBitshift+0xa8>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a2f      	ldr	r2, [pc, #188]	@ (80095bc <DMA_CalcBaseAndBitshift+0x14c>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d009      	beq.n	8009518 <DMA_CalcBaseAndBitshift+0xa8>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a2d      	ldr	r2, [pc, #180]	@ (80095c0 <DMA_CalcBaseAndBitshift+0x150>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d004      	beq.n	8009518 <DMA_CalcBaseAndBitshift+0xa8>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a2c      	ldr	r2, [pc, #176]	@ (80095c4 <DMA_CalcBaseAndBitshift+0x154>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d101      	bne.n	800951c <DMA_CalcBaseAndBitshift+0xac>
 8009518:	2301      	movs	r3, #1
 800951a:	e000      	b.n	800951e <DMA_CalcBaseAndBitshift+0xae>
 800951c:	2300      	movs	r3, #0
 800951e:	2b00      	cmp	r3, #0
 8009520:	d024      	beq.n	800956c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	b2db      	uxtb	r3, r3
 8009528:	3b10      	subs	r3, #16
 800952a:	4a27      	ldr	r2, [pc, #156]	@ (80095c8 <DMA_CalcBaseAndBitshift+0x158>)
 800952c:	fba2 2303 	umull	r2, r3, r2, r3
 8009530:	091b      	lsrs	r3, r3, #4
 8009532:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f003 0307 	and.w	r3, r3, #7
 800953a:	4a24      	ldr	r2, [pc, #144]	@ (80095cc <DMA_CalcBaseAndBitshift+0x15c>)
 800953c:	5cd3      	ldrb	r3, [r2, r3]
 800953e:	461a      	mov	r2, r3
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2b03      	cmp	r3, #3
 8009548:	d908      	bls.n	800955c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	461a      	mov	r2, r3
 8009550:	4b1f      	ldr	r3, [pc, #124]	@ (80095d0 <DMA_CalcBaseAndBitshift+0x160>)
 8009552:	4013      	ands	r3, r2
 8009554:	1d1a      	adds	r2, r3, #4
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	659a      	str	r2, [r3, #88]	@ 0x58
 800955a:	e00d      	b.n	8009578 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	461a      	mov	r2, r3
 8009562:	4b1b      	ldr	r3, [pc, #108]	@ (80095d0 <DMA_CalcBaseAndBitshift+0x160>)
 8009564:	4013      	ands	r3, r2
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	6593      	str	r3, [r2, #88]	@ 0x58
 800956a:	e005      	b.n	8009578 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800957c:	4618      	mov	r0, r3
 800957e:	3714      	adds	r7, #20
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr
 8009588:	40020010 	.word	0x40020010
 800958c:	40020028 	.word	0x40020028
 8009590:	40020040 	.word	0x40020040
 8009594:	40020058 	.word	0x40020058
 8009598:	40020070 	.word	0x40020070
 800959c:	40020088 	.word	0x40020088
 80095a0:	400200a0 	.word	0x400200a0
 80095a4:	400200b8 	.word	0x400200b8
 80095a8:	40020410 	.word	0x40020410
 80095ac:	40020428 	.word	0x40020428
 80095b0:	40020440 	.word	0x40020440
 80095b4:	40020458 	.word	0x40020458
 80095b8:	40020470 	.word	0x40020470
 80095bc:	40020488 	.word	0x40020488
 80095c0:	400204a0 	.word	0x400204a0
 80095c4:	400204b8 	.word	0x400204b8
 80095c8:	aaaaaaab 	.word	0xaaaaaaab
 80095cc:	080143c8 	.word	0x080143c8
 80095d0:	fffffc00 	.word	0xfffffc00

080095d4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095dc:	2300      	movs	r3, #0
 80095de:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	699b      	ldr	r3, [r3, #24]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d120      	bne.n	800962a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ec:	2b03      	cmp	r3, #3
 80095ee:	d858      	bhi.n	80096a2 <DMA_CheckFifoParam+0xce>
 80095f0:	a201      	add	r2, pc, #4	@ (adr r2, 80095f8 <DMA_CheckFifoParam+0x24>)
 80095f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f6:	bf00      	nop
 80095f8:	08009609 	.word	0x08009609
 80095fc:	0800961b 	.word	0x0800961b
 8009600:	08009609 	.word	0x08009609
 8009604:	080096a3 	.word	0x080096a3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800960c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009610:	2b00      	cmp	r3, #0
 8009612:	d048      	beq.n	80096a6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009614:	2301      	movs	r3, #1
 8009616:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009618:	e045      	b.n	80096a6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800961e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009622:	d142      	bne.n	80096aa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009624:	2301      	movs	r3, #1
 8009626:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009628:	e03f      	b.n	80096aa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	699b      	ldr	r3, [r3, #24]
 800962e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009632:	d123      	bne.n	800967c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009638:	2b03      	cmp	r3, #3
 800963a:	d838      	bhi.n	80096ae <DMA_CheckFifoParam+0xda>
 800963c:	a201      	add	r2, pc, #4	@ (adr r2, 8009644 <DMA_CheckFifoParam+0x70>)
 800963e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009642:	bf00      	nop
 8009644:	08009655 	.word	0x08009655
 8009648:	0800965b 	.word	0x0800965b
 800964c:	08009655 	.word	0x08009655
 8009650:	0800966d 	.word	0x0800966d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009654:	2301      	movs	r3, #1
 8009656:	73fb      	strb	r3, [r7, #15]
        break;
 8009658:	e030      	b.n	80096bc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800965e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009662:	2b00      	cmp	r3, #0
 8009664:	d025      	beq.n	80096b2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009666:	2301      	movs	r3, #1
 8009668:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800966a:	e022      	b.n	80096b2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009670:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009674:	d11f      	bne.n	80096b6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009676:	2301      	movs	r3, #1
 8009678:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800967a:	e01c      	b.n	80096b6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009680:	2b02      	cmp	r3, #2
 8009682:	d902      	bls.n	800968a <DMA_CheckFifoParam+0xb6>
 8009684:	2b03      	cmp	r3, #3
 8009686:	d003      	beq.n	8009690 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009688:	e018      	b.n	80096bc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800968a:	2301      	movs	r3, #1
 800968c:	73fb      	strb	r3, [r7, #15]
        break;
 800968e:	e015      	b.n	80096bc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009694:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009698:	2b00      	cmp	r3, #0
 800969a:	d00e      	beq.n	80096ba <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800969c:	2301      	movs	r3, #1
 800969e:	73fb      	strb	r3, [r7, #15]
    break;
 80096a0:	e00b      	b.n	80096ba <DMA_CheckFifoParam+0xe6>
        break;
 80096a2:	bf00      	nop
 80096a4:	e00a      	b.n	80096bc <DMA_CheckFifoParam+0xe8>
        break;
 80096a6:	bf00      	nop
 80096a8:	e008      	b.n	80096bc <DMA_CheckFifoParam+0xe8>
        break;
 80096aa:	bf00      	nop
 80096ac:	e006      	b.n	80096bc <DMA_CheckFifoParam+0xe8>
        break;
 80096ae:	bf00      	nop
 80096b0:	e004      	b.n	80096bc <DMA_CheckFifoParam+0xe8>
        break;
 80096b2:	bf00      	nop
 80096b4:	e002      	b.n	80096bc <DMA_CheckFifoParam+0xe8>
        break;
 80096b6:	bf00      	nop
 80096b8:	e000      	b.n	80096bc <DMA_CheckFifoParam+0xe8>
    break;
 80096ba:	bf00      	nop
    }
  }

  return status;
 80096bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3714      	adds	r7, #20
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr
 80096ca:	bf00      	nop

080096cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b085      	sub	sp, #20
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a38      	ldr	r2, [pc, #224]	@ (80097c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d022      	beq.n	800972a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a36      	ldr	r2, [pc, #216]	@ (80097c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d01d      	beq.n	800972a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4a35      	ldr	r2, [pc, #212]	@ (80097c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d018      	beq.n	800972a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a33      	ldr	r2, [pc, #204]	@ (80097cc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d013      	beq.n	800972a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a32      	ldr	r2, [pc, #200]	@ (80097d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d00e      	beq.n	800972a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4a30      	ldr	r2, [pc, #192]	@ (80097d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d009      	beq.n	800972a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a2f      	ldr	r2, [pc, #188]	@ (80097d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d004      	beq.n	800972a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a2d      	ldr	r2, [pc, #180]	@ (80097dc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d101      	bne.n	800972e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800972a:	2301      	movs	r3, #1
 800972c:	e000      	b.n	8009730 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800972e:	2300      	movs	r3, #0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d01a      	beq.n	800976a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	b2db      	uxtb	r3, r3
 800973a:	3b08      	subs	r3, #8
 800973c:	4a28      	ldr	r2, [pc, #160]	@ (80097e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800973e:	fba2 2303 	umull	r2, r3, r2, r3
 8009742:	091b      	lsrs	r3, r3, #4
 8009744:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009746:	68fa      	ldr	r2, [r7, #12]
 8009748:	4b26      	ldr	r3, [pc, #152]	@ (80097e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800974a:	4413      	add	r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	461a      	mov	r2, r3
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	4a24      	ldr	r2, [pc, #144]	@ (80097e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009758:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f003 031f 	and.w	r3, r3, #31
 8009760:	2201      	movs	r2, #1
 8009762:	409a      	lsls	r2, r3
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009768:	e024      	b.n	80097b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	b2db      	uxtb	r3, r3
 8009770:	3b10      	subs	r3, #16
 8009772:	4a1e      	ldr	r2, [pc, #120]	@ (80097ec <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009774:	fba2 2303 	umull	r2, r3, r2, r3
 8009778:	091b      	lsrs	r3, r3, #4
 800977a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	4a1c      	ldr	r2, [pc, #112]	@ (80097f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d806      	bhi.n	8009792 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	4a1b      	ldr	r2, [pc, #108]	@ (80097f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d902      	bls.n	8009792 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	3308      	adds	r3, #8
 8009790:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009792:	68fa      	ldr	r2, [r7, #12]
 8009794:	4b18      	ldr	r3, [pc, #96]	@ (80097f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009796:	4413      	add	r3, r2
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	461a      	mov	r2, r3
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a16      	ldr	r2, [pc, #88]	@ (80097fc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80097a4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f003 031f 	and.w	r3, r3, #31
 80097ac:	2201      	movs	r2, #1
 80097ae:	409a      	lsls	r2, r3
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80097b4:	bf00      	nop
 80097b6:	3714      	adds	r7, #20
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr
 80097c0:	58025408 	.word	0x58025408
 80097c4:	5802541c 	.word	0x5802541c
 80097c8:	58025430 	.word	0x58025430
 80097cc:	58025444 	.word	0x58025444
 80097d0:	58025458 	.word	0x58025458
 80097d4:	5802546c 	.word	0x5802546c
 80097d8:	58025480 	.word	0x58025480
 80097dc:	58025494 	.word	0x58025494
 80097e0:	cccccccd 	.word	0xcccccccd
 80097e4:	16009600 	.word	0x16009600
 80097e8:	58025880 	.word	0x58025880
 80097ec:	aaaaaaab 	.word	0xaaaaaaab
 80097f0:	400204b8 	.word	0x400204b8
 80097f4:	4002040f 	.word	0x4002040f
 80097f8:	10008200 	.word	0x10008200
 80097fc:	40020880 	.word	0x40020880

08009800 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	b2db      	uxtb	r3, r3
 800980e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d04a      	beq.n	80098ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2b08      	cmp	r3, #8
 800981a:	d847      	bhi.n	80098ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a25      	ldr	r2, [pc, #148]	@ (80098b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d022      	beq.n	800986c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a24      	ldr	r2, [pc, #144]	@ (80098bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d01d      	beq.n	800986c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a22      	ldr	r2, [pc, #136]	@ (80098c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d018      	beq.n	800986c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a21      	ldr	r2, [pc, #132]	@ (80098c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d013      	beq.n	800986c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a1f      	ldr	r2, [pc, #124]	@ (80098c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d00e      	beq.n	800986c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a1e      	ldr	r2, [pc, #120]	@ (80098cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d009      	beq.n	800986c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a1c      	ldr	r2, [pc, #112]	@ (80098d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d004      	beq.n	800986c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a1b      	ldr	r2, [pc, #108]	@ (80098d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d101      	bne.n	8009870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800986c:	2301      	movs	r3, #1
 800986e:	e000      	b.n	8009872 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009870:	2300      	movs	r3, #0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d00a      	beq.n	800988c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009876:	68fa      	ldr	r2, [r7, #12]
 8009878:	4b17      	ldr	r3, [pc, #92]	@ (80098d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800987a:	4413      	add	r3, r2
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	461a      	mov	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4a15      	ldr	r2, [pc, #84]	@ (80098dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009888:	671a      	str	r2, [r3, #112]	@ 0x70
 800988a:	e009      	b.n	80098a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	4b14      	ldr	r3, [pc, #80]	@ (80098e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009890:	4413      	add	r3, r2
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	461a      	mov	r2, r3
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	4a11      	ldr	r2, [pc, #68]	@ (80098e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800989e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	3b01      	subs	r3, #1
 80098a4:	2201      	movs	r2, #1
 80098a6:	409a      	lsls	r2, r3
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80098ac:	bf00      	nop
 80098ae:	3714      	adds	r7, #20
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr
 80098b8:	58025408 	.word	0x58025408
 80098bc:	5802541c 	.word	0x5802541c
 80098c0:	58025430 	.word	0x58025430
 80098c4:	58025444 	.word	0x58025444
 80098c8:	58025458 	.word	0x58025458
 80098cc:	5802546c 	.word	0x5802546c
 80098d0:	58025480 	.word	0x58025480
 80098d4:	58025494 	.word	0x58025494
 80098d8:	1600963f 	.word	0x1600963f
 80098dc:	58025940 	.word	0x58025940
 80098e0:	1000823f 	.word	0x1000823f
 80098e4:	40020940 	.word	0x40020940

080098e8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d101      	bne.n	80098fa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80098f6:	2301      	movs	r3, #1
 80098f8:	e0cf      	b.n	8009a9a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009900:	2b00      	cmp	r3, #0
 8009902:	d106      	bne.n	8009912 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2223      	movs	r2, #35	@ 0x23
 8009908:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f7fa f839 	bl	8003984 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009912:	4b64      	ldr	r3, [pc, #400]	@ (8009aa4 <HAL_ETH_Init+0x1bc>)
 8009914:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009918:	4a62      	ldr	r2, [pc, #392]	@ (8009aa4 <HAL_ETH_Init+0x1bc>)
 800991a:	f043 0302 	orr.w	r3, r3, #2
 800991e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8009922:	4b60      	ldr	r3, [pc, #384]	@ (8009aa4 <HAL_ETH_Init+0x1bc>)
 8009924:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009928:	f003 0302 	and.w	r3, r3, #2
 800992c:	60bb      	str	r3, [r7, #8]
 800992e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	7a1b      	ldrb	r3, [r3, #8]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d103      	bne.n	8009940 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8009938:	2000      	movs	r0, #0
 800993a:	f7fa fd85 	bl	8004448 <HAL_SYSCFG_ETHInterfaceSelect>
 800993e:	e003      	b.n	8009948 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8009940:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8009944:	f7fa fd80 	bl	8004448 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8009948:	4b57      	ldr	r3, [pc, #348]	@ (8009aa8 <HAL_ETH_Init+0x1c0>)
 800994a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	6812      	ldr	r2, [r2, #0]
 800995a:	f043 0301 	orr.w	r3, r3, #1
 800995e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009962:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009964:	f7fa fd40 	bl	80043e8 <HAL_GetTick>
 8009968:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800996a:	e011      	b.n	8009990 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800996c:	f7fa fd3c 	bl	80043e8 <HAL_GetTick>
 8009970:	4602      	mov	r2, r0
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	1ad3      	subs	r3, r2, r3
 8009976:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800997a:	d909      	bls.n	8009990 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2204      	movs	r2, #4
 8009980:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	22e0      	movs	r2, #224	@ 0xe0
 8009988:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800998c:	2301      	movs	r3, #1
 800998e:	e084      	b.n	8009a9a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f003 0301 	and.w	r3, r3, #1
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d1e4      	bne.n	800996c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 f886 	bl	8009ab4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80099a8:	f001 fed8 	bl	800b75c <HAL_RCC_GetHCLKFreq>
 80099ac:	4603      	mov	r3, r0
 80099ae:	4a3f      	ldr	r2, [pc, #252]	@ (8009aac <HAL_ETH_Init+0x1c4>)
 80099b0:	fba2 2303 	umull	r2, r3, r2, r3
 80099b4:	0c9a      	lsrs	r2, r3, #18
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	3a01      	subs	r2, #1
 80099bc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 fa71 	bl	8009ea8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80099ce:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80099d2:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	6812      	ldr	r2, [r2, #0]
 80099da:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80099de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80099e2:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	695b      	ldr	r3, [r3, #20]
 80099ea:	f003 0303 	and.w	r3, r3, #3
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d009      	beq.n	8009a06 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2201      	movs	r2, #1
 80099f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	22e0      	movs	r2, #224	@ 0xe0
 80099fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8009a02:	2301      	movs	r3, #1
 8009a04:	e049      	b.n	8009a9a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a0e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8009a12:	4b27      	ldr	r3, [pc, #156]	@ (8009ab0 <HAL_ETH_Init+0x1c8>)
 8009a14:	4013      	ands	r3, r2
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	6952      	ldr	r2, [r2, #20]
 8009a1a:	0051      	lsls	r1, r2, #1
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	6812      	ldr	r2, [r2, #0]
 8009a20:	430b      	orrs	r3, r1
 8009a22:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009a26:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f000 fad9 	bl	8009fe2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 fb1f 	bl	800a074 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	3305      	adds	r3, #5
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	021a      	lsls	r2, r3, #8
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	3304      	adds	r3, #4
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	4619      	mov	r1, r3
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	430a      	orrs	r2, r1
 8009a50:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	3303      	adds	r3, #3
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	061a      	lsls	r2, r3, #24
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	3302      	adds	r3, #2
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	041b      	lsls	r3, r3, #16
 8009a68:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	3301      	adds	r3, #1
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009a74:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009a82:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009a84:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2210      	movs	r2, #16
 8009a94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a98:	2300      	movs	r3, #0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3710      	adds	r7, #16
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	58024400 	.word	0x58024400
 8009aa8:	58000400 	.word	0x58000400
 8009aac:	431bde83 	.word	0x431bde83
 8009ab0:	ffff8001 	.word	0xffff8001

08009ab4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009ac4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009acc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8009ace:	f001 fe45 	bl	800b75c <HAL_RCC_GetHCLKFreq>
 8009ad2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	4a1e      	ldr	r2, [pc, #120]	@ (8009b50 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d908      	bls.n	8009aee <HAL_ETH_SetMDIOClockRange+0x3a>
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	4a1d      	ldr	r2, [pc, #116]	@ (8009b54 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d804      	bhi.n	8009aee <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009aea:	60fb      	str	r3, [r7, #12]
 8009aec:	e027      	b.n	8009b3e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	4a18      	ldr	r2, [pc, #96]	@ (8009b54 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d908      	bls.n	8009b08 <HAL_ETH_SetMDIOClockRange+0x54>
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	4a17      	ldr	r2, [pc, #92]	@ (8009b58 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d204      	bcs.n	8009b08 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009b04:	60fb      	str	r3, [r7, #12]
 8009b06:	e01a      	b.n	8009b3e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	4a13      	ldr	r2, [pc, #76]	@ (8009b58 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d303      	bcc.n	8009b18 <HAL_ETH_SetMDIOClockRange+0x64>
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	4a12      	ldr	r2, [pc, #72]	@ (8009b5c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d911      	bls.n	8009b3c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	4a10      	ldr	r2, [pc, #64]	@ (8009b5c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d908      	bls.n	8009b32 <HAL_ETH_SetMDIOClockRange+0x7e>
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	4a0f      	ldr	r2, [pc, #60]	@ (8009b60 <HAL_ETH_SetMDIOClockRange+0xac>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d804      	bhi.n	8009b32 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b2e:	60fb      	str	r3, [r7, #12]
 8009b30:	e005      	b.n	8009b3e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009b38:	60fb      	str	r3, [r7, #12]
 8009b3a:	e000      	b.n	8009b3e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8009b3c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	68fa      	ldr	r2, [r7, #12]
 8009b44:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8009b48:	bf00      	nop
 8009b4a:	3710      	adds	r7, #16
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}
 8009b50:	01312cff 	.word	0x01312cff
 8009b54:	02160ebf 	.word	0x02160ebf
 8009b58:	03938700 	.word	0x03938700
 8009b5c:	05f5e0ff 	.word	0x05f5e0ff
 8009b60:	08f0d17f 	.word	0x08f0d17f

08009b64 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b085      	sub	sp, #20
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8009b76:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	791b      	ldrb	r3, [r3, #4]
 8009b7c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8009b7e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	7b1b      	ldrb	r3, [r3, #12]
 8009b84:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8009b86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	7b5b      	ldrb	r3, [r3, #13]
 8009b8c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8009b8e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	7b9b      	ldrb	r3, [r3, #14]
 8009b94:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8009b96:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	7bdb      	ldrb	r3, [r3, #15]
 8009b9c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8009b9e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8009ba0:	683a      	ldr	r2, [r7, #0]
 8009ba2:	7c12      	ldrb	r2, [r2, #16]
 8009ba4:	2a00      	cmp	r2, #0
 8009ba6:	d102      	bne.n	8009bae <ETH_SetMACConfig+0x4a>
 8009ba8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8009bac:	e000      	b.n	8009bb0 <ETH_SetMACConfig+0x4c>
 8009bae:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8009bb0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8009bb2:	683a      	ldr	r2, [r7, #0]
 8009bb4:	7c52      	ldrb	r2, [r2, #17]
 8009bb6:	2a00      	cmp	r2, #0
 8009bb8:	d102      	bne.n	8009bc0 <ETH_SetMACConfig+0x5c>
 8009bba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009bbe:	e000      	b.n	8009bc2 <ETH_SetMACConfig+0x5e>
 8009bc0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8009bc2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	7c9b      	ldrb	r3, [r3, #18]
 8009bc8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8009bca:	431a      	orrs	r2, r3
               macconf->Speed |
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8009bd0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8009bd6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	7f1b      	ldrb	r3, [r3, #28]
 8009bdc:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8009bde:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	7f5b      	ldrb	r3, [r3, #29]
 8009be4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8009be6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8009be8:	683a      	ldr	r2, [r7, #0]
 8009bea:	7f92      	ldrb	r2, [r2, #30]
 8009bec:	2a00      	cmp	r2, #0
 8009bee:	d102      	bne.n	8009bf6 <ETH_SetMACConfig+0x92>
 8009bf0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009bf4:	e000      	b.n	8009bf8 <ETH_SetMACConfig+0x94>
 8009bf6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8009bf8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	7fdb      	ldrb	r3, [r3, #31]
 8009bfe:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8009c00:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8009c02:	683a      	ldr	r2, [r7, #0]
 8009c04:	f892 2020 	ldrb.w	r2, [r2, #32]
 8009c08:	2a00      	cmp	r2, #0
 8009c0a:	d102      	bne.n	8009c12 <ETH_SetMACConfig+0xae>
 8009c0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009c10:	e000      	b.n	8009c14 <ETH_SetMACConfig+0xb0>
 8009c12:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8009c14:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8009c1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c22:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8009c24:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	4b56      	ldr	r3, [pc, #344]	@ (8009d90 <ETH_SetMACConfig+0x22c>)
 8009c36:	4013      	ands	r3, r2
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	6812      	ldr	r2, [r2, #0]
 8009c3c:	68f9      	ldr	r1, [r7, #12]
 8009c3e:	430b      	orrs	r3, r1
 8009c40:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c46:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009c4e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8009c50:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009c58:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8009c5a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009c62:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8009c64:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8009c66:	683a      	ldr	r2, [r7, #0]
 8009c68:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8009c6c:	2a00      	cmp	r2, #0
 8009c6e:	d102      	bne.n	8009c76 <ETH_SetMACConfig+0x112>
 8009c70:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8009c74:	e000      	b.n	8009c78 <ETH_SetMACConfig+0x114>
 8009c76:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8009c78:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	685a      	ldr	r2, [r3, #4]
 8009c88:	4b42      	ldr	r3, [pc, #264]	@ (8009d94 <ETH_SetMACConfig+0x230>)
 8009c8a:	4013      	ands	r3, r2
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	6812      	ldr	r2, [r2, #0]
 8009c90:	68f9      	ldr	r1, [r7, #12]
 8009c92:	430b      	orrs	r3, r1
 8009c94:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009c9c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	68da      	ldr	r2, [r3, #12]
 8009cac:	4b3a      	ldr	r3, [pc, #232]	@ (8009d98 <ETH_SetMACConfig+0x234>)
 8009cae:	4013      	ands	r3, r2
 8009cb0:	687a      	ldr	r2, [r7, #4]
 8009cb2:	6812      	ldr	r2, [r2, #0]
 8009cb4:	68f9      	ldr	r1, [r7, #12]
 8009cb6:	430b      	orrs	r3, r1
 8009cb8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8009cc0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009cc6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8009cc8:	683a      	ldr	r2, [r7, #0]
 8009cca:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8009cce:	2a00      	cmp	r2, #0
 8009cd0:	d101      	bne.n	8009cd6 <ETH_SetMACConfig+0x172>
 8009cd2:	2280      	movs	r2, #128	@ 0x80
 8009cd4:	e000      	b.n	8009cd8 <ETH_SetMACConfig+0x174>
 8009cd6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8009cd8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009cde:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009cea:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8009cee:	4013      	ands	r3, r2
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	6812      	ldr	r2, [r2, #0]
 8009cf4:	68f9      	ldr	r1, [r7, #12]
 8009cf6:	430b      	orrs	r3, r1
 8009cf8:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009d00:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8009d08:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d16:	f023 0103 	bic.w	r1, r3, #3
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	68fa      	ldr	r2, [r7, #12]
 8009d20:	430a      	orrs	r2, r1
 8009d22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8009d2e:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	430a      	orrs	r2, r1
 8009d3c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8009d44:	683a      	ldr	r2, [r7, #0]
 8009d46:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8009d4a:	2a00      	cmp	r2, #0
 8009d4c:	d101      	bne.n	8009d52 <ETH_SetMACConfig+0x1ee>
 8009d4e:	2240      	movs	r2, #64	@ 0x40
 8009d50:	e000      	b.n	8009d54 <ETH_SetMACConfig+0x1f0>
 8009d52:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8009d54:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8009d5c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8009d5e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8009d66:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8009d74:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	68fa      	ldr	r2, [r7, #12]
 8009d7e:	430a      	orrs	r2, r1
 8009d80:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8009d84:	bf00      	nop
 8009d86:	3714      	adds	r7, #20
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr
 8009d90:	00048083 	.word	0x00048083
 8009d94:	c0f88000 	.word	0xc0f88000
 8009d98:	fffffef0 	.word	0xfffffef0

08009d9c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b085      	sub	sp, #20
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	4b38      	ldr	r3, [pc, #224]	@ (8009e94 <ETH_SetDMAConfig+0xf8>)
 8009db2:	4013      	ands	r3, r2
 8009db4:	683a      	ldr	r2, [r7, #0]
 8009db6:	6811      	ldr	r1, [r2, #0]
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	6812      	ldr	r2, [r2, #0]
 8009dbc:	430b      	orrs	r3, r1
 8009dbe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009dc2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	791b      	ldrb	r3, [r3, #4]
 8009dc8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009dce:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	7b1b      	ldrb	r3, [r3, #12]
 8009dd4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009de2:	685a      	ldr	r2, [r3, #4]
 8009de4:	4b2c      	ldr	r3, [pc, #176]	@ (8009e98 <ETH_SetDMAConfig+0xfc>)
 8009de6:	4013      	ands	r3, r2
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	6812      	ldr	r2, [r2, #0]
 8009dec:	68f9      	ldr	r1, [r7, #12]
 8009dee:	430b      	orrs	r3, r1
 8009df0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009df4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	7b5b      	ldrb	r3, [r3, #13]
 8009dfa:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8009e00:	4313      	orrs	r3, r2
 8009e02:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e0c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8009e10:	4b22      	ldr	r3, [pc, #136]	@ (8009e9c <ETH_SetDMAConfig+0x100>)
 8009e12:	4013      	ands	r3, r2
 8009e14:	687a      	ldr	r2, [r7, #4]
 8009e16:	6812      	ldr	r2, [r2, #0]
 8009e18:	68f9      	ldr	r1, [r7, #12]
 8009e1a:	430b      	orrs	r3, r1
 8009e1c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009e20:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	7d1b      	ldrb	r3, [r3, #20]
 8009e2c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8009e2e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	7f5b      	ldrb	r3, [r3, #29]
 8009e34:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8009e36:	4313      	orrs	r3, r2
 8009e38:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e42:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8009e46:	4b16      	ldr	r3, [pc, #88]	@ (8009ea0 <ETH_SetDMAConfig+0x104>)
 8009e48:	4013      	ands	r3, r2
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	6812      	ldr	r2, [r2, #0]
 8009e4e:	68f9      	ldr	r1, [r7, #12]
 8009e50:	430b      	orrs	r3, r1
 8009e52:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009e56:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	7f1b      	ldrb	r3, [r3, #28]
 8009e5e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8009e64:	4313      	orrs	r3, r2
 8009e66:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e70:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8009e74:	4b0b      	ldr	r3, [pc, #44]	@ (8009ea4 <ETH_SetDMAConfig+0x108>)
 8009e76:	4013      	ands	r3, r2
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	6812      	ldr	r2, [r2, #0]
 8009e7c:	68f9      	ldr	r1, [r7, #12]
 8009e7e:	430b      	orrs	r3, r1
 8009e80:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009e84:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8009e88:	bf00      	nop
 8009e8a:	3714      	adds	r7, #20
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr
 8009e94:	ffff87fd 	.word	0xffff87fd
 8009e98:	ffff2ffe 	.word	0xffff2ffe
 8009e9c:	fffec000 	.word	0xfffec000
 8009ea0:	ffc0efef 	.word	0xffc0efef
 8009ea4:	7fc0ffff 	.word	0x7fc0ffff

08009ea8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b0a4      	sub	sp, #144	@ 0x90
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8009ee4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009ee8:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8009eea:	2300      	movs	r3, #0
 8009eec:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8009efa:	2300      	movs	r3, #0
 8009efc:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8009f00:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8009f04:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8009f06:	2300      	movs	r3, #0
 8009f08:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8009f10:	2301      	movs	r3, #1
 8009f12:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8009f16:	2300      	movs	r3, #0
 8009f18:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8009f22:	2300      	movs	r3, #0
 8009f24:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0;
 8009f26:	2300      	movs	r3, #0
 8009f28:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8009f34:	2300      	movs	r3, #0
 8009f36:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8009f40:	2320      	movs	r3, #32
 8009f42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8009f46:	2301      	movs	r3, #1
 8009f48:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8009f52:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8009f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8009f58:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009f5c:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8009f64:	2302      	movs	r3, #2
 8009f66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8009f70:	2300      	movs	r3, #0
 8009f72:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8009f76:	2300      	movs	r3, #0
 8009f78:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8009f82:	2300      	movs	r3, #0
 8009f84:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8009f86:	2301      	movs	r3, #1
 8009f88:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8009f8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009f90:	4619      	mov	r1, r3
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f7ff fde6 	bl	8009b64 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8009faa:	2300      	movs	r3, #0
 8009fac:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8009fb2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009fb6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8009fbc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009fc0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8009fc8:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8009fcc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8009fce:	f107 0308 	add.w	r3, r7, #8
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f7ff fee1 	bl	8009d9c <ETH_SetDMAConfig>
}
 8009fda:	bf00      	nop
 8009fdc:	3790      	adds	r7, #144	@ 0x90
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}

08009fe2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8009fe2:	b480      	push	{r7}
 8009fe4:	b085      	sub	sp, #20
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8009fea:	2300      	movs	r3, #0
 8009fec:	60fb      	str	r3, [r7, #12]
 8009fee:	e01d      	b.n	800a02c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	68d9      	ldr	r1, [r3, #12]
 8009ff4:	68fa      	ldr	r2, [r7, #12]
 8009ff6:	4613      	mov	r3, r2
 8009ff8:	005b      	lsls	r3, r3, #1
 8009ffa:	4413      	add	r3, r2
 8009ffc:	00db      	lsls	r3, r3, #3
 8009ffe:	440b      	add	r3, r1
 800a000:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	2200      	movs	r2, #0
 800a006:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	2200      	movs	r2, #0
 800a00c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	2200      	movs	r2, #0
 800a012:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	2200      	movs	r2, #0
 800a018:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800a01a:	68b9      	ldr	r1, [r7, #8]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	68fa      	ldr	r2, [r7, #12]
 800a020:	3206      	adds	r2, #6
 800a022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	3301      	adds	r3, #1
 800a02a:	60fb      	str	r3, [r7, #12]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2b03      	cmp	r3, #3
 800a030:	d9de      	bls.n	8009ff0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a040:	461a      	mov	r2, r3
 800a042:	2303      	movs	r3, #3
 800a044:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	68da      	ldr	r2, [r3, #12]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a054:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	68da      	ldr	r2, [r3, #12]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a064:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 800a068:	bf00      	nop
 800a06a:	3714      	adds	r7, #20
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr

0800a074 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800a074:	b480      	push	{r7}
 800a076:	b085      	sub	sp, #20
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800a07c:	2300      	movs	r3, #0
 800a07e:	60fb      	str	r3, [r7, #12]
 800a080:	e023      	b.n	800a0ca <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6919      	ldr	r1, [r3, #16]
 800a086:	68fa      	ldr	r2, [r7, #12]
 800a088:	4613      	mov	r3, r2
 800a08a:	005b      	lsls	r3, r3, #1
 800a08c:	4413      	add	r3, r2
 800a08e:	00db      	lsls	r3, r3, #3
 800a090:	440b      	add	r3, r1
 800a092:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	2200      	movs	r2, #0
 800a098:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	2200      	movs	r2, #0
 800a09e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800a0b8:	68b9      	ldr	r1, [r7, #8]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	68fa      	ldr	r2, [r7, #12]
 800a0be:	3212      	adds	r2, #18
 800a0c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	60fb      	str	r3, [r7, #12]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2b03      	cmp	r3, #3
 800a0ce:	d9d8      	bls.n	800a082 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	2303      	movs	r3, #3
 800a0fa:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	691a      	ldr	r2, [r3, #16]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a10a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	691b      	ldr	r3, [r3, #16]
 800a112:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a11e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800a122:	bf00      	nop
 800a124:	3714      	adds	r7, #20
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr
	...

0800a130 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b08a      	sub	sp, #40	@ 0x28
 800a134:	af00      	add	r7, sp, #0
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	60b9      	str	r1, [r7, #8]
 800a13a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 800a144:	2308      	movs	r3, #8
 800a146:	76fb      	strb	r3, [r7, #27]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a148:	4b2e      	ldr	r3, [pc, #184]	@ (800a204 <HAL_FLASH_Program+0xd4>)
 800a14a:	7d1b      	ldrb	r3, [r3, #20]
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d101      	bne.n	800a154 <HAL_FLASH_Program+0x24>
 800a150:	2302      	movs	r3, #2
 800a152:	e053      	b.n	800a1fc <HAL_FLASH_Program+0xcc>
 800a154:	4b2b      	ldr	r3, [pc, #172]	@ (800a204 <HAL_FLASH_Program+0xd4>)
 800a156:	2201      	movs	r2, #1
 800a158:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a160:	d315      	bcc.n	800a18e <HAL_FLASH_Program+0x5e>
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 800a168:	d211      	bcs.n	800a18e <HAL_FLASH_Program+0x5e>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 800a16a:	2301      	movs	r3, #1
 800a16c:	617b      	str	r3, [r7, #20]
  {
    return HAL_ERROR;
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a16e:	4b25      	ldr	r3, [pc, #148]	@ (800a204 <HAL_FLASH_Program+0xd4>)
 800a170:	2200      	movs	r2, #0
 800a172:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800a174:	6979      	ldr	r1, [r7, #20]
 800a176:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a17a:	f000 f88d 	bl	800a298 <FLASH_WaitForLastOperation>
 800a17e:	4603      	mov	r3, r0
 800a180:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if(status == HAL_OK)
 800a184:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d002      	beq.n	800a192 <HAL_FLASH_Program+0x62>
 800a18c:	e031      	b.n	800a1f2 <HAL_FLASH_Program+0xc2>
    return HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	e034      	b.n	800a1fc <HAL_FLASH_Program+0xcc>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800a192:	4b1d      	ldr	r3, [pc, #116]	@ (800a208 <HAL_FLASH_Program+0xd8>)
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	4a1c      	ldr	r2, [pc, #112]	@ (800a208 <HAL_FLASH_Program+0xd8>)
 800a198:	f043 0302 	orr.w	r3, r3, #2
 800a19c:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("isb 0xF":::"memory");
 800a19e:	f3bf 8f6f 	isb	sy
}
 800a1a2:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a1a4:	f3bf 8f4f 	dsb	sy
}
 800a1a8:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	6a3b      	ldr	r3, [r7, #32]
 800a1b0:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800a1b2:	6a3b      	ldr	r3, [r7, #32]
 800a1b4:	3304      	adds	r3, #4
 800a1b6:	623b      	str	r3, [r7, #32]
        src_addr++;
 800a1b8:	69fb      	ldr	r3, [r7, #28]
 800a1ba:	3304      	adds	r3, #4
 800a1bc:	61fb      	str	r3, [r7, #28]
        row_index--;
 800a1be:	7efb      	ldrb	r3, [r7, #27]
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	76fb      	strb	r3, [r7, #27]
     } while (row_index != 0U);
 800a1c4:	7efb      	ldrb	r3, [r7, #27]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d1ef      	bne.n	800a1aa <HAL_FLASH_Program+0x7a>
  __ASM volatile ("isb 0xF":::"memory");
 800a1ca:	f3bf 8f6f 	isb	sy
}
 800a1ce:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a1d0:	f3bf 8f4f 	dsb	sy
}
 800a1d4:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800a1d6:	6979      	ldr	r1, [r7, #20]
 800a1d8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a1dc:	f000 f85c 	bl	800a298 <FLASH_WaitForLastOperation>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* If the program operation is completed, disable the PG */
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 800a1e6:	4b08      	ldr	r3, [pc, #32]	@ (800a208 <HAL_FLASH_Program+0xd8>)
 800a1e8:	68db      	ldr	r3, [r3, #12]
 800a1ea:	4a07      	ldr	r2, [pc, #28]	@ (800a208 <HAL_FLASH_Program+0xd8>)
 800a1ec:	f023 0302 	bic.w	r3, r3, #2
 800a1f0:	60d3      	str	r3, [r2, #12]
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a1f2:	4b04      	ldr	r3, [pc, #16]	@ (800a204 <HAL_FLASH_Program+0xd4>)
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	751a      	strb	r2, [r3, #20]

  return status;
 800a1f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3728      	adds	r7, #40	@ 0x28
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}
 800a204:	24001054 	.word	0x24001054
 800a208:	52002000 	.word	0x52002000

0800a20c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800a20c:	b480      	push	{r7}
 800a20e:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800a210:	4b0c      	ldr	r3, [pc, #48]	@ (800a244 <HAL_FLASH_Unlock+0x38>)
 800a212:	68db      	ldr	r3, [r3, #12]
 800a214:	f003 0301 	and.w	r3, r3, #1
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d00d      	beq.n	800a238 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 800a21c:	4b09      	ldr	r3, [pc, #36]	@ (800a244 <HAL_FLASH_Unlock+0x38>)
 800a21e:	4a0a      	ldr	r2, [pc, #40]	@ (800a248 <HAL_FLASH_Unlock+0x3c>)
 800a220:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800a222:	4b08      	ldr	r3, [pc, #32]	@ (800a244 <HAL_FLASH_Unlock+0x38>)
 800a224:	4a09      	ldr	r2, [pc, #36]	@ (800a24c <HAL_FLASH_Unlock+0x40>)
 800a226:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800a228:	4b06      	ldr	r3, [pc, #24]	@ (800a244 <HAL_FLASH_Unlock+0x38>)
 800a22a:	68db      	ldr	r3, [r3, #12]
 800a22c:	f003 0301 	and.w	r3, r3, #1
 800a230:	2b00      	cmp	r3, #0
 800a232:	d001      	beq.n	800a238 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 800a234:	2301      	movs	r3, #1
 800a236:	e000      	b.n	800a23a <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800a238:	2300      	movs	r3, #0
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr
 800a244:	52002000 	.word	0x52002000
 800a248:	45670123 	.word	0x45670123
 800a24c:	cdef89ab 	.word	0xcdef89ab

0800a250 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800a250:	b480      	push	{r7}
 800a252:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 800a254:	4b09      	ldr	r3, [pc, #36]	@ (800a27c <HAL_FLASH_Lock+0x2c>)
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	4a08      	ldr	r2, [pc, #32]	@ (800a27c <HAL_FLASH_Lock+0x2c>)
 800a25a:	f043 0301 	orr.w	r3, r3, #1
 800a25e:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 800a260:	4b06      	ldr	r3, [pc, #24]	@ (800a27c <HAL_FLASH_Lock+0x2c>)
 800a262:	68db      	ldr	r3, [r3, #12]
 800a264:	f003 0301 	and.w	r3, r3, #1
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d101      	bne.n	800a270 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 800a26c:	2301      	movs	r3, #1
 800a26e:	e000      	b.n	800a272 <HAL_FLASH_Lock+0x22>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800a270:	2300      	movs	r3, #0
}
 800a272:	4618      	mov	r0, r3
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr
 800a27c:	52002000 	.word	0x52002000

0800a280 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_DBECC_BANK2: Double Detection ECC on Bank 2
  *            @arg HAL_FLASH_ERROR_CRCRD_BANK2: CRC Read Error on Bank 2
*/

uint32_t HAL_FLASH_GetError(void)
{
 800a280:	b480      	push	{r7}
 800a282:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800a284:	4b03      	ldr	r3, [pc, #12]	@ (800a294 <HAL_FLASH_GetError+0x14>)
 800a286:	699b      	ldr	r3, [r3, #24]
}
 800a288:	4618      	mov	r0, r3
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr
 800a292:	bf00      	nop
 800a294:	24001054 	.word	0x24001054

0800a298 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b086      	sub	sp, #24
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800a2a2:	2304      	movs	r3, #4
 800a2a4:	613b      	str	r3, [r7, #16]
  uint32_t errorflag = 0;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a2aa:	f7fa f89d 	bl	80043e8 <HAL_GetTick>
 800a2ae:	60f8      	str	r0, [r7, #12]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800a2b0:	e010      	b.n	800a2d4 <FLASH_WaitForLastOperation+0x3c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a2b8:	d00c      	beq.n	800a2d4 <FLASH_WaitForLastOperation+0x3c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a2ba:	f7fa f895 	bl	80043e8 <HAL_GetTick>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	1ad3      	subs	r3, r2, r3
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d302      	bcc.n	800a2d0 <FLASH_WaitForLastOperation+0x38>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d101      	bne.n	800a2d4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800a2d0:	2303      	movs	r3, #3
 800a2d2:	e02d      	b.n	800a330 <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800a2d4:	4b18      	ldr	r3, [pc, #96]	@ (800a338 <FLASH_WaitForLastOperation+0xa0>)
 800a2d6:	691a      	ldr	r2, [r3, #16]
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	4013      	ands	r3, r2
 800a2dc:	693a      	ldr	r2, [r7, #16]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d0e7      	beq.n	800a2b2 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d104      	bne.n	800a2f2 <FLASH_WaitForLastOperation+0x5a>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800a2e8:	4b13      	ldr	r3, [pc, #76]	@ (800a338 <FLASH_WaitForLastOperation+0xa0>)
 800a2ea:	691a      	ldr	r2, [r3, #16]
 800a2ec:	4b13      	ldr	r3, [pc, #76]	@ (800a33c <FLASH_WaitForLastOperation+0xa4>)
 800a2ee:	4013      	ands	r3, r2
 800a2f0:	617b      	str	r3, [r7, #20]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d00a      	beq.n	800a312 <FLASH_WaitForLastOperation+0x7a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800a2fc:	4b10      	ldr	r3, [pc, #64]	@ (800a340 <FLASH_WaitForLastOperation+0xa8>)
 800a2fe:	699a      	ldr	r2, [r3, #24]
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	4313      	orrs	r3, r2
 800a304:	4a0e      	ldr	r2, [pc, #56]	@ (800a340 <FLASH_WaitForLastOperation+0xa8>)
 800a306:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800a308:	4a0b      	ldr	r2, [pc, #44]	@ (800a338 <FLASH_WaitForLastOperation+0xa0>)
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
 800a30e:	2301      	movs	r3, #1
 800a310:	e00e      	b.n	800a330 <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	2b01      	cmp	r3, #1
 800a316:	d10a      	bne.n	800a32e <FLASH_WaitForLastOperation+0x96>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800a318:	4b07      	ldr	r3, [pc, #28]	@ (800a338 <FLASH_WaitForLastOperation+0xa0>)
 800a31a:	691b      	ldr	r3, [r3, #16]
 800a31c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a324:	d103      	bne.n	800a32e <FLASH_WaitForLastOperation+0x96>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800a326:	4b04      	ldr	r3, [pc, #16]	@ (800a338 <FLASH_WaitForLastOperation+0xa0>)
 800a328:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800a32c:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800a32e:	2300      	movs	r3, #0
}
 800a330:	4618      	mov	r0, r3
 800a332:	3718      	adds	r7, #24
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}
 800a338:	52002000 	.word	0x52002000
 800a33c:	17ee0000 	.word	0x17ee0000
 800a340:	24001054 	.word	0x24001054

0800a344 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a34e:	2300      	movs	r3, #0
 800a350:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a352:	4b3f      	ldr	r3, [pc, #252]	@ (800a450 <HAL_FLASHEx_Erase+0x10c>)
 800a354:	7d1b      	ldrb	r3, [r3, #20]
 800a356:	2b01      	cmp	r3, #1
 800a358:	d101      	bne.n	800a35e <HAL_FLASHEx_Erase+0x1a>
 800a35a:	2302      	movs	r3, #2
 800a35c:	e074      	b.n	800a448 <HAL_FLASHEx_Erase+0x104>
 800a35e:	4b3c      	ldr	r3, [pc, #240]	@ (800a450 <HAL_FLASHEx_Erase+0x10c>)
 800a360:	2201      	movs	r2, #1
 800a362:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a364:	4b3a      	ldr	r3, [pc, #232]	@ (800a450 <HAL_FLASHEx_Erase+0x10c>)
 800a366:	2200      	movs	r2, #0
 800a368:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	f003 0301 	and.w	r3, r3, #1
 800a372:	2b00      	cmp	r3, #0
 800a374:	d009      	beq.n	800a38a <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800a376:	2101      	movs	r1, #1
 800a378:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a37c:	f7ff ff8c 	bl	800a298 <FLASH_WaitForLastOperation>
 800a380:	4603      	mov	r3, r0
 800a382:	2b00      	cmp	r3, #0
 800a384:	d001      	beq.n	800a38a <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800a38a:	7bfb      	ldrb	r3, [r7, #15]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d157      	bne.n	800a440 <HAL_FLASHEx_Erase+0xfc>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	2b01      	cmp	r3, #1
 800a396:	d11e      	bne.n	800a3d6 <HAL_FLASHEx_Erase+0x92>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	691a      	ldr	r2, [r3, #16]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	4610      	mov	r0, r2
 800a3a4:	f000 f85a 	bl	800a45c <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	f003 0301 	and.w	r3, r3, #1
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d045      	beq.n	800a440 <HAL_FLASHEx_Erase+0xfc>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800a3b4:	2101      	movs	r1, #1
 800a3b6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a3ba:	f7ff ff6d 	bl	800a298 <FLASH_WaitForLastOperation>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d001      	beq.n	800a3c8 <HAL_FLASHEx_Erase+0x84>
        {
          status = HAL_ERROR;
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800a3c8:	4b22      	ldr	r3, [pc, #136]	@ (800a454 <HAL_FLASHEx_Erase+0x110>)
 800a3ca:	68db      	ldr	r3, [r3, #12]
 800a3cc:	4a21      	ldr	r2, [pc, #132]	@ (800a454 <HAL_FLASHEx_Erase+0x110>)
 800a3ce:	f023 0308 	bic.w	r3, r3, #8
 800a3d2:	60d3      	str	r3, [r2, #12]
 800a3d4:	e034      	b.n	800a440 <HAL_FLASHEx_Erase+0xfc>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a3dc:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	689b      	ldr	r3, [r3, #8]
 800a3e2:	60bb      	str	r3, [r7, #8]
 800a3e4:	e024      	b.n	800a430 <HAL_FLASHEx_Erase+0xec>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6859      	ldr	r1, [r3, #4]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	691b      	ldr	r3, [r3, #16]
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	68b8      	ldr	r0, [r7, #8]
 800a3f2:	f000 f857 	bl	800a4a4 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	f003 0301 	and.w	r3, r3, #1
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d00c      	beq.n	800a41c <HAL_FLASHEx_Erase+0xd8>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800a402:	2101      	movs	r1, #1
 800a404:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a408:	f7ff ff46 	bl	800a298 <FLASH_WaitForLastOperation>
 800a40c:	4603      	mov	r3, r0
 800a40e:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800a410:	4b10      	ldr	r3, [pc, #64]	@ (800a454 <HAL_FLASHEx_Erase+0x110>)
 800a412:	68da      	ldr	r2, [r3, #12]
 800a414:	490f      	ldr	r1, [pc, #60]	@ (800a454 <HAL_FLASHEx_Erase+0x110>)
 800a416:	4b10      	ldr	r3, [pc, #64]	@ (800a458 <HAL_FLASHEx_Erase+0x114>)
 800a418:	4013      	ands	r3, r2
 800a41a:	60cb      	str	r3, [r1, #12]
          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800a41c:	7bfb      	ldrb	r3, [r7, #15]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d003      	beq.n	800a42a <HAL_FLASHEx_Erase+0xe6>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	68ba      	ldr	r2, [r7, #8]
 800a426:	601a      	str	r2, [r3, #0]
          break;
 800a428:	e00a      	b.n	800a440 <HAL_FLASHEx_Erase+0xfc>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	3301      	adds	r3, #1
 800a42e:	60bb      	str	r3, [r7, #8]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	68da      	ldr	r2, [r3, #12]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	689b      	ldr	r3, [r3, #8]
 800a438:	4413      	add	r3, r2
 800a43a:	68ba      	ldr	r2, [r7, #8]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d3d2      	bcc.n	800a3e6 <HAL_FLASHEx_Erase+0xa2>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a440:	4b03      	ldr	r3, [pc, #12]	@ (800a450 <HAL_FLASHEx_Erase+0x10c>)
 800a442:	2200      	movs	r2, #0
 800a444:	751a      	strb	r2, [r3, #20]

  return status;
 800a446:	7bfb      	ldrb	r3, [r7, #15]
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3710      	adds	r7, #16
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}
 800a450:	24001054 	.word	0x24001054
 800a454:	52002000 	.word	0x52002000
 800a458:	fffff8fb 	.word	0xfffff8fb

0800a45c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
  }
  else
#endif /* DUAL_BANK */
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	f003 0301 	and.w	r3, r3, #1
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d011      	beq.n	800a494 <FLASH_MassErase+0x38>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank1 */
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800a470:	4b0b      	ldr	r3, [pc, #44]	@ (800a4a0 <FLASH_MassErase+0x44>)
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	4a0a      	ldr	r2, [pc, #40]	@ (800a4a0 <FLASH_MassErase+0x44>)
 800a476:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800a47a:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800a47c:	4b08      	ldr	r3, [pc, #32]	@ (800a4a0 <FLASH_MassErase+0x44>)
 800a47e:	68da      	ldr	r2, [r3, #12]
 800a480:	4907      	ldr	r1, [pc, #28]	@ (800a4a0 <FLASH_MassErase+0x44>)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	4313      	orrs	r3, r2
 800a486:	60cb      	str	r3, [r1, #12]
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800a488:	4b05      	ldr	r3, [pc, #20]	@ (800a4a0 <FLASH_MassErase+0x44>)
 800a48a:	68db      	ldr	r3, [r3, #12]
 800a48c:	4a04      	ldr	r2, [pc, #16]	@ (800a4a0 <FLASH_MassErase+0x44>)
 800a48e:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 800a492:	60d3      	str	r3, [r2, #12]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800a494:	bf00      	nop
 800a496:	370c      	adds	r7, #12
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr
 800a4a0:	52002000 	.word	0x52002000

0800a4a4 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b085      	sub	sp, #20
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	60f8      	str	r0, [r7, #12]
 800a4ac:	60b9      	str	r1, [r7, #8]
 800a4ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	f003 0301 	and.w	r3, r3, #1
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d010      	beq.n	800a4dc <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800a4ba:	4b0b      	ldr	r3, [pc, #44]	@ (800a4e8 <FLASH_Erase_Sector+0x44>)
 800a4bc:	68db      	ldr	r3, [r3, #12]
 800a4be:	4a0a      	ldr	r2, [pc, #40]	@ (800a4e8 <FLASH_Erase_Sector+0x44>)
 800a4c0:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 800a4c4:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800a4c6:	4b08      	ldr	r3, [pc, #32]	@ (800a4e8 <FLASH_Erase_Sector+0x44>)
 800a4c8:	68da      	ldr	r2, [r3, #12]
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	0219      	lsls	r1, r3, #8
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	430b      	orrs	r3, r1
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	4a04      	ldr	r2, [pc, #16]	@ (800a4e8 <FLASH_Erase_Sector+0x44>)
 800a4d6:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 800a4da:	60d3      	str	r3, [r2, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800a4dc:	bf00      	nop
 800a4de:	3714      	adds	r7, #20
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr
 800a4e8:	52002000 	.word	0x52002000

0800a4ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b089      	sub	sp, #36	@ 0x24
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a4fa:	4b86      	ldr	r3, [pc, #536]	@ (800a714 <HAL_GPIO_Init+0x228>)
 800a4fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a4fe:	e18c      	b.n	800a81a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	681a      	ldr	r2, [r3, #0]
 800a504:	2101      	movs	r1, #1
 800a506:	69fb      	ldr	r3, [r7, #28]
 800a508:	fa01 f303 	lsl.w	r3, r1, r3
 800a50c:	4013      	ands	r3, r2
 800a50e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	2b00      	cmp	r3, #0
 800a514:	f000 817e 	beq.w	800a814 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	f003 0303 	and.w	r3, r3, #3
 800a520:	2b01      	cmp	r3, #1
 800a522:	d005      	beq.n	800a530 <HAL_GPIO_Init+0x44>
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	f003 0303 	and.w	r3, r3, #3
 800a52c:	2b02      	cmp	r3, #2
 800a52e:	d130      	bne.n	800a592 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	689b      	ldr	r3, [r3, #8]
 800a534:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a536:	69fb      	ldr	r3, [r7, #28]
 800a538:	005b      	lsls	r3, r3, #1
 800a53a:	2203      	movs	r2, #3
 800a53c:	fa02 f303 	lsl.w	r3, r2, r3
 800a540:	43db      	mvns	r3, r3
 800a542:	69ba      	ldr	r2, [r7, #24]
 800a544:	4013      	ands	r3, r2
 800a546:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	68da      	ldr	r2, [r3, #12]
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	005b      	lsls	r3, r3, #1
 800a550:	fa02 f303 	lsl.w	r3, r2, r3
 800a554:	69ba      	ldr	r2, [r7, #24]
 800a556:	4313      	orrs	r3, r2
 800a558:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	69ba      	ldr	r2, [r7, #24]
 800a55e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a566:	2201      	movs	r2, #1
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	fa02 f303 	lsl.w	r3, r2, r3
 800a56e:	43db      	mvns	r3, r3
 800a570:	69ba      	ldr	r2, [r7, #24]
 800a572:	4013      	ands	r3, r2
 800a574:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	091b      	lsrs	r3, r3, #4
 800a57c:	f003 0201 	and.w	r2, r3, #1
 800a580:	69fb      	ldr	r3, [r7, #28]
 800a582:	fa02 f303 	lsl.w	r3, r2, r3
 800a586:	69ba      	ldr	r2, [r7, #24]
 800a588:	4313      	orrs	r3, r2
 800a58a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	69ba      	ldr	r2, [r7, #24]
 800a590:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	f003 0303 	and.w	r3, r3, #3
 800a59a:	2b03      	cmp	r3, #3
 800a59c:	d017      	beq.n	800a5ce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	68db      	ldr	r3, [r3, #12]
 800a5a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	005b      	lsls	r3, r3, #1
 800a5a8:	2203      	movs	r2, #3
 800a5aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a5ae:	43db      	mvns	r3, r3
 800a5b0:	69ba      	ldr	r2, [r7, #24]
 800a5b2:	4013      	ands	r3, r2
 800a5b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	689a      	ldr	r2, [r3, #8]
 800a5ba:	69fb      	ldr	r3, [r7, #28]
 800a5bc:	005b      	lsls	r3, r3, #1
 800a5be:	fa02 f303 	lsl.w	r3, r2, r3
 800a5c2:	69ba      	ldr	r2, [r7, #24]
 800a5c4:	4313      	orrs	r3, r2
 800a5c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	69ba      	ldr	r2, [r7, #24]
 800a5cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	f003 0303 	and.w	r3, r3, #3
 800a5d6:	2b02      	cmp	r3, #2
 800a5d8:	d123      	bne.n	800a622 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	08da      	lsrs	r2, r3, #3
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	3208      	adds	r2, #8
 800a5e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	f003 0307 	and.w	r3, r3, #7
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	220f      	movs	r2, #15
 800a5f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a5f6:	43db      	mvns	r3, r3
 800a5f8:	69ba      	ldr	r2, [r7, #24]
 800a5fa:	4013      	ands	r3, r2
 800a5fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	691a      	ldr	r2, [r3, #16]
 800a602:	69fb      	ldr	r3, [r7, #28]
 800a604:	f003 0307 	and.w	r3, r3, #7
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	fa02 f303 	lsl.w	r3, r2, r3
 800a60e:	69ba      	ldr	r2, [r7, #24]
 800a610:	4313      	orrs	r3, r2
 800a612:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a614:	69fb      	ldr	r3, [r7, #28]
 800a616:	08da      	lsrs	r2, r3, #3
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	3208      	adds	r2, #8
 800a61c:	69b9      	ldr	r1, [r7, #24]
 800a61e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	005b      	lsls	r3, r3, #1
 800a62c:	2203      	movs	r2, #3
 800a62e:	fa02 f303 	lsl.w	r3, r2, r3
 800a632:	43db      	mvns	r3, r3
 800a634:	69ba      	ldr	r2, [r7, #24]
 800a636:	4013      	ands	r3, r2
 800a638:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	f003 0203 	and.w	r2, r3, #3
 800a642:	69fb      	ldr	r3, [r7, #28]
 800a644:	005b      	lsls	r3, r3, #1
 800a646:	fa02 f303 	lsl.w	r3, r2, r3
 800a64a:	69ba      	ldr	r2, [r7, #24]
 800a64c:	4313      	orrs	r3, r2
 800a64e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	69ba      	ldr	r2, [r7, #24]
 800a654:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a65e:	2b00      	cmp	r3, #0
 800a660:	f000 80d8 	beq.w	800a814 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a664:	4b2c      	ldr	r3, [pc, #176]	@ (800a718 <HAL_GPIO_Init+0x22c>)
 800a666:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a66a:	4a2b      	ldr	r2, [pc, #172]	@ (800a718 <HAL_GPIO_Init+0x22c>)
 800a66c:	f043 0302 	orr.w	r3, r3, #2
 800a670:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800a674:	4b28      	ldr	r3, [pc, #160]	@ (800a718 <HAL_GPIO_Init+0x22c>)
 800a676:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a67a:	f003 0302 	and.w	r3, r3, #2
 800a67e:	60fb      	str	r3, [r7, #12]
 800a680:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a682:	4a26      	ldr	r2, [pc, #152]	@ (800a71c <HAL_GPIO_Init+0x230>)
 800a684:	69fb      	ldr	r3, [r7, #28]
 800a686:	089b      	lsrs	r3, r3, #2
 800a688:	3302      	adds	r3, #2
 800a68a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a68e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a690:	69fb      	ldr	r3, [r7, #28]
 800a692:	f003 0303 	and.w	r3, r3, #3
 800a696:	009b      	lsls	r3, r3, #2
 800a698:	220f      	movs	r2, #15
 800a69a:	fa02 f303 	lsl.w	r3, r2, r3
 800a69e:	43db      	mvns	r3, r3
 800a6a0:	69ba      	ldr	r2, [r7, #24]
 800a6a2:	4013      	ands	r3, r2
 800a6a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	4a1d      	ldr	r2, [pc, #116]	@ (800a720 <HAL_GPIO_Init+0x234>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d04a      	beq.n	800a744 <HAL_GPIO_Init+0x258>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	4a1c      	ldr	r2, [pc, #112]	@ (800a724 <HAL_GPIO_Init+0x238>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d02b      	beq.n	800a70e <HAL_GPIO_Init+0x222>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	4a1b      	ldr	r2, [pc, #108]	@ (800a728 <HAL_GPIO_Init+0x23c>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d025      	beq.n	800a70a <HAL_GPIO_Init+0x21e>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	4a1a      	ldr	r2, [pc, #104]	@ (800a72c <HAL_GPIO_Init+0x240>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d01f      	beq.n	800a706 <HAL_GPIO_Init+0x21a>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	4a19      	ldr	r2, [pc, #100]	@ (800a730 <HAL_GPIO_Init+0x244>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d019      	beq.n	800a702 <HAL_GPIO_Init+0x216>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	4a18      	ldr	r2, [pc, #96]	@ (800a734 <HAL_GPIO_Init+0x248>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d013      	beq.n	800a6fe <HAL_GPIO_Init+0x212>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	4a17      	ldr	r2, [pc, #92]	@ (800a738 <HAL_GPIO_Init+0x24c>)
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d00d      	beq.n	800a6fa <HAL_GPIO_Init+0x20e>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	4a16      	ldr	r2, [pc, #88]	@ (800a73c <HAL_GPIO_Init+0x250>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d007      	beq.n	800a6f6 <HAL_GPIO_Init+0x20a>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	4a15      	ldr	r2, [pc, #84]	@ (800a740 <HAL_GPIO_Init+0x254>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d101      	bne.n	800a6f2 <HAL_GPIO_Init+0x206>
 800a6ee:	2309      	movs	r3, #9
 800a6f0:	e029      	b.n	800a746 <HAL_GPIO_Init+0x25a>
 800a6f2:	230a      	movs	r3, #10
 800a6f4:	e027      	b.n	800a746 <HAL_GPIO_Init+0x25a>
 800a6f6:	2307      	movs	r3, #7
 800a6f8:	e025      	b.n	800a746 <HAL_GPIO_Init+0x25a>
 800a6fa:	2306      	movs	r3, #6
 800a6fc:	e023      	b.n	800a746 <HAL_GPIO_Init+0x25a>
 800a6fe:	2305      	movs	r3, #5
 800a700:	e021      	b.n	800a746 <HAL_GPIO_Init+0x25a>
 800a702:	2304      	movs	r3, #4
 800a704:	e01f      	b.n	800a746 <HAL_GPIO_Init+0x25a>
 800a706:	2303      	movs	r3, #3
 800a708:	e01d      	b.n	800a746 <HAL_GPIO_Init+0x25a>
 800a70a:	2302      	movs	r3, #2
 800a70c:	e01b      	b.n	800a746 <HAL_GPIO_Init+0x25a>
 800a70e:	2301      	movs	r3, #1
 800a710:	e019      	b.n	800a746 <HAL_GPIO_Init+0x25a>
 800a712:	bf00      	nop
 800a714:	58000080 	.word	0x58000080
 800a718:	58024400 	.word	0x58024400
 800a71c:	58000400 	.word	0x58000400
 800a720:	58020000 	.word	0x58020000
 800a724:	58020400 	.word	0x58020400
 800a728:	58020800 	.word	0x58020800
 800a72c:	58020c00 	.word	0x58020c00
 800a730:	58021000 	.word	0x58021000
 800a734:	58021400 	.word	0x58021400
 800a738:	58021800 	.word	0x58021800
 800a73c:	58021c00 	.word	0x58021c00
 800a740:	58022400 	.word	0x58022400
 800a744:	2300      	movs	r3, #0
 800a746:	69fa      	ldr	r2, [r7, #28]
 800a748:	f002 0203 	and.w	r2, r2, #3
 800a74c:	0092      	lsls	r2, r2, #2
 800a74e:	4093      	lsls	r3, r2
 800a750:	69ba      	ldr	r2, [r7, #24]
 800a752:	4313      	orrs	r3, r2
 800a754:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a756:	4938      	ldr	r1, [pc, #224]	@ (800a838 <HAL_GPIO_Init+0x34c>)
 800a758:	69fb      	ldr	r3, [r7, #28]
 800a75a:	089b      	lsrs	r3, r3, #2
 800a75c:	3302      	adds	r3, #2
 800a75e:	69ba      	ldr	r2, [r7, #24]
 800a760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a764:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	43db      	mvns	r3, r3
 800a770:	69ba      	ldr	r2, [r7, #24]
 800a772:	4013      	ands	r3, r2
 800a774:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d003      	beq.n	800a78a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800a782:	69ba      	ldr	r2, [r7, #24]
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	4313      	orrs	r3, r2
 800a788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a78a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a78e:	69bb      	ldr	r3, [r7, #24]
 800a790:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a792:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	43db      	mvns	r3, r3
 800a79e:	69ba      	ldr	r2, [r7, #24]
 800a7a0:	4013      	ands	r3, r2
 800a7a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	685b      	ldr	r3, [r3, #4]
 800a7a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d003      	beq.n	800a7b8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800a7b0:	69ba      	ldr	r2, [r7, #24]
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a7b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a7bc:	69bb      	ldr	r3, [r7, #24]
 800a7be:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	43db      	mvns	r3, r3
 800a7ca:	69ba      	ldr	r2, [r7, #24]
 800a7cc:	4013      	ands	r3, r2
 800a7ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d003      	beq.n	800a7e4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800a7dc:	69ba      	ldr	r2, [r7, #24]
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	69ba      	ldr	r2, [r7, #24]
 800a7e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	43db      	mvns	r3, r3
 800a7f4:	69ba      	ldr	r2, [r7, #24]
 800a7f6:	4013      	ands	r3, r2
 800a7f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a802:	2b00      	cmp	r3, #0
 800a804:	d003      	beq.n	800a80e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800a806:	69ba      	ldr	r2, [r7, #24]
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	4313      	orrs	r3, r2
 800a80c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	69ba      	ldr	r2, [r7, #24]
 800a812:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	3301      	adds	r3, #1
 800a818:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	681a      	ldr	r2, [r3, #0]
 800a81e:	69fb      	ldr	r3, [r7, #28]
 800a820:	fa22 f303 	lsr.w	r3, r2, r3
 800a824:	2b00      	cmp	r3, #0
 800a826:	f47f ae6b 	bne.w	800a500 <HAL_GPIO_Init+0x14>
  }
}
 800a82a:	bf00      	nop
 800a82c:	bf00      	nop
 800a82e:	3724      	adds	r7, #36	@ 0x24
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr
 800a838:	58000400 	.word	0x58000400

0800a83c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b085      	sub	sp, #20
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	460b      	mov	r3, r1
 800a846:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	691a      	ldr	r2, [r3, #16]
 800a84c:	887b      	ldrh	r3, [r7, #2]
 800a84e:	4013      	ands	r3, r2
 800a850:	2b00      	cmp	r3, #0
 800a852:	d002      	beq.n	800a85a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a854:	2301      	movs	r3, #1
 800a856:	73fb      	strb	r3, [r7, #15]
 800a858:	e001      	b.n	800a85e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a85a:	2300      	movs	r3, #0
 800a85c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a85e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a860:	4618      	mov	r0, r3
 800a862:	3714      	adds	r7, #20
 800a864:	46bd      	mov	sp, r7
 800a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86a:	4770      	bx	lr

0800a86c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b083      	sub	sp, #12
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	460b      	mov	r3, r1
 800a876:	807b      	strh	r3, [r7, #2]
 800a878:	4613      	mov	r3, r2
 800a87a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a87c:	787b      	ldrb	r3, [r7, #1]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d003      	beq.n	800a88a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a882:	887a      	ldrh	r2, [r7, #2]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a888:	e003      	b.n	800a892 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a88a:	887b      	ldrh	r3, [r7, #2]
 800a88c:	041a      	lsls	r2, r3, #16
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	619a      	str	r2, [r3, #24]
}
 800a892:	bf00      	nop
 800a894:	370c      	adds	r7, #12
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr

0800a89e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a89e:	b580      	push	{r7, lr}
 800a8a0:	b082      	sub	sp, #8
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800a8a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a8ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800a8b0:	88fb      	ldrh	r3, [r7, #6]
 800a8b2:	4013      	ands	r3, r2
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d008      	beq.n	800a8ca <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a8b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a8bc:	88fb      	ldrh	r3, [r7, #6]
 800a8be:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a8c2:	88fb      	ldrh	r3, [r7, #6]
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f7f7 fb1f 	bl	8001f08 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800a8ca:	bf00      	nop
 800a8cc:	3708      	adds	r7, #8
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
	...

0800a8d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b084      	sub	sp, #16
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a8dc:	4b19      	ldr	r3, [pc, #100]	@ (800a944 <HAL_PWREx_ConfigSupply+0x70>)
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	f003 0304 	and.w	r3, r3, #4
 800a8e4:	2b04      	cmp	r3, #4
 800a8e6:	d00a      	beq.n	800a8fe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a8e8:	4b16      	ldr	r3, [pc, #88]	@ (800a944 <HAL_PWREx_ConfigSupply+0x70>)
 800a8ea:	68db      	ldr	r3, [r3, #12]
 800a8ec:	f003 0307 	and.w	r3, r3, #7
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d001      	beq.n	800a8fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e01f      	b.n	800a93a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	e01d      	b.n	800a93a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a8fe:	4b11      	ldr	r3, [pc, #68]	@ (800a944 <HAL_PWREx_ConfigSupply+0x70>)
 800a900:	68db      	ldr	r3, [r3, #12]
 800a902:	f023 0207 	bic.w	r2, r3, #7
 800a906:	490f      	ldr	r1, [pc, #60]	@ (800a944 <HAL_PWREx_ConfigSupply+0x70>)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	4313      	orrs	r3, r2
 800a90c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a90e:	f7f9 fd6b 	bl	80043e8 <HAL_GetTick>
 800a912:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a914:	e009      	b.n	800a92a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a916:	f7f9 fd67 	bl	80043e8 <HAL_GetTick>
 800a91a:	4602      	mov	r2, r0
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	1ad3      	subs	r3, r2, r3
 800a920:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a924:	d901      	bls.n	800a92a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a926:	2301      	movs	r3, #1
 800a928:	e007      	b.n	800a93a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a92a:	4b06      	ldr	r3, [pc, #24]	@ (800a944 <HAL_PWREx_ConfigSupply+0x70>)
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a932:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a936:	d1ee      	bne.n	800a916 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a938:	2300      	movs	r3, #0
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3710      	adds	r7, #16
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	58024800 	.word	0x58024800

0800a948 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b08c      	sub	sp, #48	@ 0x30
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d101      	bne.n	800a95a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a956:	2301      	movs	r3, #1
 800a958:	e3c8      	b.n	800b0ec <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f003 0301 	and.w	r3, r3, #1
 800a962:	2b00      	cmp	r3, #0
 800a964:	f000 8087 	beq.w	800aa76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a968:	4b88      	ldr	r3, [pc, #544]	@ (800ab8c <HAL_RCC_OscConfig+0x244>)
 800a96a:	691b      	ldr	r3, [r3, #16]
 800a96c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a970:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a972:	4b86      	ldr	r3, [pc, #536]	@ (800ab8c <HAL_RCC_OscConfig+0x244>)
 800a974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a976:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a97a:	2b10      	cmp	r3, #16
 800a97c:	d007      	beq.n	800a98e <HAL_RCC_OscConfig+0x46>
 800a97e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a980:	2b18      	cmp	r3, #24
 800a982:	d110      	bne.n	800a9a6 <HAL_RCC_OscConfig+0x5e>
 800a984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a986:	f003 0303 	and.w	r3, r3, #3
 800a98a:	2b02      	cmp	r3, #2
 800a98c:	d10b      	bne.n	800a9a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a98e:	4b7f      	ldr	r3, [pc, #508]	@ (800ab8c <HAL_RCC_OscConfig+0x244>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a996:	2b00      	cmp	r3, #0
 800a998:	d06c      	beq.n	800aa74 <HAL_RCC_OscConfig+0x12c>
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d168      	bne.n	800aa74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e3a2      	b.n	800b0ec <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9ae:	d106      	bne.n	800a9be <HAL_RCC_OscConfig+0x76>
 800a9b0:	4b76      	ldr	r3, [pc, #472]	@ (800ab8c <HAL_RCC_OscConfig+0x244>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4a75      	ldr	r2, [pc, #468]	@ (800ab8c <HAL_RCC_OscConfig+0x244>)
 800a9b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a9ba:	6013      	str	r3, [r2, #0]
 800a9bc:	e02e      	b.n	800aa1c <HAL_RCC_OscConfig+0xd4>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d10c      	bne.n	800a9e0 <HAL_RCC_OscConfig+0x98>
 800a9c6:	4b71      	ldr	r3, [pc, #452]	@ (800ab8c <HAL_RCC_OscConfig+0x244>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4a70      	ldr	r2, [pc, #448]	@ (800ab8c <HAL_RCC_OscConfig+0x244>)
 800a9cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a9d0:	6013      	str	r3, [r2, #0]
 800a9d2:	4b6e      	ldr	r3, [pc, #440]	@ (800ab8c <HAL_RCC_OscConfig+0x244>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4a6d      	ldr	r2, [pc, #436]	@ (800ab8c <HAL_RCC_OscConfig+0x244>)
 800a9d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a9dc:	6013      	str	r3, [r2, #0]
 800a9de:	e01d      	b.n	800aa1c <HAL_RCC_OscConfig+0xd4>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a9e8:	d10c      	bne.n	800aa04 <HAL_RCC_OscConfig+0xbc>
 800a9ea:	4b68      	ldr	r3, [pc, #416]	@ (800ab8c <HAL_RCC_OscConfig+0x244>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4a67      	ldr	r2, [pc, #412]	@ (800ab8c <HAL_RCC_OscConfig+0x244>)
 800a9f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a9f4:	6013      	str	r3, [r2, #0]
 800a9f6:	4b65      	ldr	r3, [pc, #404]	@ (800ab8c <HAL_RCC_OscConfig+0x244>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4a64      	ldr	r2, [pc, #400]	@ (800ab8c <HAL_RCC_OscConfig+0x244>)
 800a9fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aa00:	6013      	str	r3, [r2, #0]
 800aa02:	e00b      	b.n	800aa1c <HAL_RCC_OscConfig+0xd4>
 800aa04:	4b61      	ldr	r3, [pc, #388]	@ (800ab8c <HAL_RCC_OscConfig+0x244>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4a60      	ldr	r2, [pc, #384]	@ (800ab8c <HAL_RCC_OscConfig+0x244>)
 800aa0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa0e:	6013      	str	r3, [r2, #0]
 800aa10:	4b5e      	ldr	r3, [pc, #376]	@ (800ab8c <HAL_RCC_OscConfig+0x244>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a5d      	ldr	r2, [pc, #372]	@ (800ab8c <HAL_RCC_OscConfig+0x244>)
 800aa16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800aa1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d013      	beq.n	800aa4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa24:	f7f9 fce0 	bl	80043e8 <HAL_GetTick>
 800aa28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aa2a:	e008      	b.n	800aa3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aa2c:	f7f9 fcdc 	bl	80043e8 <HAL_GetTick>
 800aa30:	4602      	mov	r2, r0
 800aa32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa34:	1ad3      	subs	r3, r2, r3
 800aa36:	2b64      	cmp	r3, #100	@ 0x64
 800aa38:	d901      	bls.n	800aa3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800aa3a:	2303      	movs	r3, #3
 800aa3c:	e356      	b.n	800b0ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aa3e:	4b53      	ldr	r3, [pc, #332]	@ (800ab8c <HAL_RCC_OscConfig+0x244>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d0f0      	beq.n	800aa2c <HAL_RCC_OscConfig+0xe4>
 800aa4a:	e014      	b.n	800aa76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa4c:	f7f9 fccc 	bl	80043e8 <HAL_GetTick>
 800aa50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800aa52:	e008      	b.n	800aa66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aa54:	f7f9 fcc8 	bl	80043e8 <HAL_GetTick>
 800aa58:	4602      	mov	r2, r0
 800aa5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa5c:	1ad3      	subs	r3, r2, r3
 800aa5e:	2b64      	cmp	r3, #100	@ 0x64
 800aa60:	d901      	bls.n	800aa66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800aa62:	2303      	movs	r3, #3
 800aa64:	e342      	b.n	800b0ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800aa66:	4b49      	ldr	r3, [pc, #292]	@ (800ab8c <HAL_RCC_OscConfig+0x244>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d1f0      	bne.n	800aa54 <HAL_RCC_OscConfig+0x10c>
 800aa72:	e000      	b.n	800aa76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f003 0302 	and.w	r3, r3, #2
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	f000 808c 	beq.w	800ab9c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa84:	4b41      	ldr	r3, [pc, #260]	@ (800ab8c <HAL_RCC_OscConfig+0x244>)
 800aa86:	691b      	ldr	r3, [r3, #16]
 800aa88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aa8c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aa8e:	4b3f      	ldr	r3, [pc, #252]	@ (800ab8c <HAL_RCC_OscConfig+0x244>)
 800aa90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa92:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800aa94:	6a3b      	ldr	r3, [r7, #32]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d007      	beq.n	800aaaa <HAL_RCC_OscConfig+0x162>
 800aa9a:	6a3b      	ldr	r3, [r7, #32]
 800aa9c:	2b18      	cmp	r3, #24
 800aa9e:	d137      	bne.n	800ab10 <HAL_RCC_OscConfig+0x1c8>
 800aaa0:	69fb      	ldr	r3, [r7, #28]
 800aaa2:	f003 0303 	and.w	r3, r3, #3
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d132      	bne.n	800ab10 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aaaa:	4b38      	ldr	r3, [pc, #224]	@ (800ab8c <HAL_RCC_OscConfig+0x244>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f003 0304 	and.w	r3, r3, #4
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d005      	beq.n	800aac2 <HAL_RCC_OscConfig+0x17a>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	68db      	ldr	r3, [r3, #12]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d101      	bne.n	800aac2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800aabe:	2301      	movs	r3, #1
 800aac0:	e314      	b.n	800b0ec <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800aac2:	4b32      	ldr	r3, [pc, #200]	@ (800ab8c <HAL_RCC_OscConfig+0x244>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f023 0219 	bic.w	r2, r3, #25
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	68db      	ldr	r3, [r3, #12]
 800aace:	492f      	ldr	r1, [pc, #188]	@ (800ab8c <HAL_RCC_OscConfig+0x244>)
 800aad0:	4313      	orrs	r3, r2
 800aad2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aad4:	f7f9 fc88 	bl	80043e8 <HAL_GetTick>
 800aad8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aada:	e008      	b.n	800aaee <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aadc:	f7f9 fc84 	bl	80043e8 <HAL_GetTick>
 800aae0:	4602      	mov	r2, r0
 800aae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aae4:	1ad3      	subs	r3, r2, r3
 800aae6:	2b02      	cmp	r3, #2
 800aae8:	d901      	bls.n	800aaee <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800aaea:	2303      	movs	r3, #3
 800aaec:	e2fe      	b.n	800b0ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aaee:	4b27      	ldr	r3, [pc, #156]	@ (800ab8c <HAL_RCC_OscConfig+0x244>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f003 0304 	and.w	r3, r3, #4
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d0f0      	beq.n	800aadc <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aafa:	4b24      	ldr	r3, [pc, #144]	@ (800ab8c <HAL_RCC_OscConfig+0x244>)
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	691b      	ldr	r3, [r3, #16]
 800ab06:	061b      	lsls	r3, r3, #24
 800ab08:	4920      	ldr	r1, [pc, #128]	@ (800ab8c <HAL_RCC_OscConfig+0x244>)
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ab0e:	e045      	b.n	800ab9c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	68db      	ldr	r3, [r3, #12]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d026      	beq.n	800ab66 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ab18:	4b1c      	ldr	r3, [pc, #112]	@ (800ab8c <HAL_RCC_OscConfig+0x244>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f023 0219 	bic.w	r2, r3, #25
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	68db      	ldr	r3, [r3, #12]
 800ab24:	4919      	ldr	r1, [pc, #100]	@ (800ab8c <HAL_RCC_OscConfig+0x244>)
 800ab26:	4313      	orrs	r3, r2
 800ab28:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab2a:	f7f9 fc5d 	bl	80043e8 <HAL_GetTick>
 800ab2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ab30:	e008      	b.n	800ab44 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ab32:	f7f9 fc59 	bl	80043e8 <HAL_GetTick>
 800ab36:	4602      	mov	r2, r0
 800ab38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab3a:	1ad3      	subs	r3, r2, r3
 800ab3c:	2b02      	cmp	r3, #2
 800ab3e:	d901      	bls.n	800ab44 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800ab40:	2303      	movs	r3, #3
 800ab42:	e2d3      	b.n	800b0ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ab44:	4b11      	ldr	r3, [pc, #68]	@ (800ab8c <HAL_RCC_OscConfig+0x244>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f003 0304 	and.w	r3, r3, #4
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d0f0      	beq.n	800ab32 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab50:	4b0e      	ldr	r3, [pc, #56]	@ (800ab8c <HAL_RCC_OscConfig+0x244>)
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	691b      	ldr	r3, [r3, #16]
 800ab5c:	061b      	lsls	r3, r3, #24
 800ab5e:	490b      	ldr	r1, [pc, #44]	@ (800ab8c <HAL_RCC_OscConfig+0x244>)
 800ab60:	4313      	orrs	r3, r2
 800ab62:	604b      	str	r3, [r1, #4]
 800ab64:	e01a      	b.n	800ab9c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ab66:	4b09      	ldr	r3, [pc, #36]	@ (800ab8c <HAL_RCC_OscConfig+0x244>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4a08      	ldr	r2, [pc, #32]	@ (800ab8c <HAL_RCC_OscConfig+0x244>)
 800ab6c:	f023 0301 	bic.w	r3, r3, #1
 800ab70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab72:	f7f9 fc39 	bl	80043e8 <HAL_GetTick>
 800ab76:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ab78:	e00a      	b.n	800ab90 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ab7a:	f7f9 fc35 	bl	80043e8 <HAL_GetTick>
 800ab7e:	4602      	mov	r2, r0
 800ab80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab82:	1ad3      	subs	r3, r2, r3
 800ab84:	2b02      	cmp	r3, #2
 800ab86:	d903      	bls.n	800ab90 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800ab88:	2303      	movs	r3, #3
 800ab8a:	e2af      	b.n	800b0ec <HAL_RCC_OscConfig+0x7a4>
 800ab8c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ab90:	4b96      	ldr	r3, [pc, #600]	@ (800adec <HAL_RCC_OscConfig+0x4a4>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f003 0304 	and.w	r3, r3, #4
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d1ee      	bne.n	800ab7a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f003 0310 	and.w	r3, r3, #16
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d06a      	beq.n	800ac7e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aba8:	4b90      	ldr	r3, [pc, #576]	@ (800adec <HAL_RCC_OscConfig+0x4a4>)
 800abaa:	691b      	ldr	r3, [r3, #16]
 800abac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800abb0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800abb2:	4b8e      	ldr	r3, [pc, #568]	@ (800adec <HAL_RCC_OscConfig+0x4a4>)
 800abb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abb6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800abb8:	69bb      	ldr	r3, [r7, #24]
 800abba:	2b08      	cmp	r3, #8
 800abbc:	d007      	beq.n	800abce <HAL_RCC_OscConfig+0x286>
 800abbe:	69bb      	ldr	r3, [r7, #24]
 800abc0:	2b18      	cmp	r3, #24
 800abc2:	d11b      	bne.n	800abfc <HAL_RCC_OscConfig+0x2b4>
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	f003 0303 	and.w	r3, r3, #3
 800abca:	2b01      	cmp	r3, #1
 800abcc:	d116      	bne.n	800abfc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800abce:	4b87      	ldr	r3, [pc, #540]	@ (800adec <HAL_RCC_OscConfig+0x4a4>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d005      	beq.n	800abe6 <HAL_RCC_OscConfig+0x29e>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	69db      	ldr	r3, [r3, #28]
 800abde:	2b80      	cmp	r3, #128	@ 0x80
 800abe0:	d001      	beq.n	800abe6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800abe2:	2301      	movs	r3, #1
 800abe4:	e282      	b.n	800b0ec <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800abe6:	4b81      	ldr	r3, [pc, #516]	@ (800adec <HAL_RCC_OscConfig+0x4a4>)
 800abe8:	68db      	ldr	r3, [r3, #12]
 800abea:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6a1b      	ldr	r3, [r3, #32]
 800abf2:	061b      	lsls	r3, r3, #24
 800abf4:	497d      	ldr	r1, [pc, #500]	@ (800adec <HAL_RCC_OscConfig+0x4a4>)
 800abf6:	4313      	orrs	r3, r2
 800abf8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800abfa:	e040      	b.n	800ac7e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	69db      	ldr	r3, [r3, #28]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d023      	beq.n	800ac4c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800ac04:	4b79      	ldr	r3, [pc, #484]	@ (800adec <HAL_RCC_OscConfig+0x4a4>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4a78      	ldr	r2, [pc, #480]	@ (800adec <HAL_RCC_OscConfig+0x4a4>)
 800ac0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac10:	f7f9 fbea 	bl	80043e8 <HAL_GetTick>
 800ac14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ac16:	e008      	b.n	800ac2a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ac18:	f7f9 fbe6 	bl	80043e8 <HAL_GetTick>
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac20:	1ad3      	subs	r3, r2, r3
 800ac22:	2b02      	cmp	r3, #2
 800ac24:	d901      	bls.n	800ac2a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800ac26:	2303      	movs	r3, #3
 800ac28:	e260      	b.n	800b0ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ac2a:	4b70      	ldr	r3, [pc, #448]	@ (800adec <HAL_RCC_OscConfig+0x4a4>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d0f0      	beq.n	800ac18 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ac36:	4b6d      	ldr	r3, [pc, #436]	@ (800adec <HAL_RCC_OscConfig+0x4a4>)
 800ac38:	68db      	ldr	r3, [r3, #12]
 800ac3a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6a1b      	ldr	r3, [r3, #32]
 800ac42:	061b      	lsls	r3, r3, #24
 800ac44:	4969      	ldr	r1, [pc, #420]	@ (800adec <HAL_RCC_OscConfig+0x4a4>)
 800ac46:	4313      	orrs	r3, r2
 800ac48:	60cb      	str	r3, [r1, #12]
 800ac4a:	e018      	b.n	800ac7e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ac4c:	4b67      	ldr	r3, [pc, #412]	@ (800adec <HAL_RCC_OscConfig+0x4a4>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4a66      	ldr	r2, [pc, #408]	@ (800adec <HAL_RCC_OscConfig+0x4a4>)
 800ac52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac58:	f7f9 fbc6 	bl	80043e8 <HAL_GetTick>
 800ac5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ac5e:	e008      	b.n	800ac72 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ac60:	f7f9 fbc2 	bl	80043e8 <HAL_GetTick>
 800ac64:	4602      	mov	r2, r0
 800ac66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac68:	1ad3      	subs	r3, r2, r3
 800ac6a:	2b02      	cmp	r3, #2
 800ac6c:	d901      	bls.n	800ac72 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800ac6e:	2303      	movs	r3, #3
 800ac70:	e23c      	b.n	800b0ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ac72:	4b5e      	ldr	r3, [pc, #376]	@ (800adec <HAL_RCC_OscConfig+0x4a4>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d1f0      	bne.n	800ac60 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f003 0308 	and.w	r3, r3, #8
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d036      	beq.n	800acf8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	695b      	ldr	r3, [r3, #20]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d019      	beq.n	800acc6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ac92:	4b56      	ldr	r3, [pc, #344]	@ (800adec <HAL_RCC_OscConfig+0x4a4>)
 800ac94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac96:	4a55      	ldr	r2, [pc, #340]	@ (800adec <HAL_RCC_OscConfig+0x4a4>)
 800ac98:	f043 0301 	orr.w	r3, r3, #1
 800ac9c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac9e:	f7f9 fba3 	bl	80043e8 <HAL_GetTick>
 800aca2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aca4:	e008      	b.n	800acb8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aca6:	f7f9 fb9f 	bl	80043e8 <HAL_GetTick>
 800acaa:	4602      	mov	r2, r0
 800acac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acae:	1ad3      	subs	r3, r2, r3
 800acb0:	2b02      	cmp	r3, #2
 800acb2:	d901      	bls.n	800acb8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800acb4:	2303      	movs	r3, #3
 800acb6:	e219      	b.n	800b0ec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800acb8:	4b4c      	ldr	r3, [pc, #304]	@ (800adec <HAL_RCC_OscConfig+0x4a4>)
 800acba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acbc:	f003 0302 	and.w	r3, r3, #2
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d0f0      	beq.n	800aca6 <HAL_RCC_OscConfig+0x35e>
 800acc4:	e018      	b.n	800acf8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800acc6:	4b49      	ldr	r3, [pc, #292]	@ (800adec <HAL_RCC_OscConfig+0x4a4>)
 800acc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acca:	4a48      	ldr	r2, [pc, #288]	@ (800adec <HAL_RCC_OscConfig+0x4a4>)
 800accc:	f023 0301 	bic.w	r3, r3, #1
 800acd0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acd2:	f7f9 fb89 	bl	80043e8 <HAL_GetTick>
 800acd6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800acd8:	e008      	b.n	800acec <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800acda:	f7f9 fb85 	bl	80043e8 <HAL_GetTick>
 800acde:	4602      	mov	r2, r0
 800ace0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace2:	1ad3      	subs	r3, r2, r3
 800ace4:	2b02      	cmp	r3, #2
 800ace6:	d901      	bls.n	800acec <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800ace8:	2303      	movs	r3, #3
 800acea:	e1ff      	b.n	800b0ec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800acec:	4b3f      	ldr	r3, [pc, #252]	@ (800adec <HAL_RCC_OscConfig+0x4a4>)
 800acee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acf0:	f003 0302 	and.w	r3, r3, #2
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d1f0      	bne.n	800acda <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f003 0320 	and.w	r3, r3, #32
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d036      	beq.n	800ad72 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	699b      	ldr	r3, [r3, #24]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d019      	beq.n	800ad40 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ad0c:	4b37      	ldr	r3, [pc, #220]	@ (800adec <HAL_RCC_OscConfig+0x4a4>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a36      	ldr	r2, [pc, #216]	@ (800adec <HAL_RCC_OscConfig+0x4a4>)
 800ad12:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ad16:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ad18:	f7f9 fb66 	bl	80043e8 <HAL_GetTick>
 800ad1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ad1e:	e008      	b.n	800ad32 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ad20:	f7f9 fb62 	bl	80043e8 <HAL_GetTick>
 800ad24:	4602      	mov	r2, r0
 800ad26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad28:	1ad3      	subs	r3, r2, r3
 800ad2a:	2b02      	cmp	r3, #2
 800ad2c:	d901      	bls.n	800ad32 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800ad2e:	2303      	movs	r3, #3
 800ad30:	e1dc      	b.n	800b0ec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ad32:	4b2e      	ldr	r3, [pc, #184]	@ (800adec <HAL_RCC_OscConfig+0x4a4>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d0f0      	beq.n	800ad20 <HAL_RCC_OscConfig+0x3d8>
 800ad3e:	e018      	b.n	800ad72 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ad40:	4b2a      	ldr	r3, [pc, #168]	@ (800adec <HAL_RCC_OscConfig+0x4a4>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a29      	ldr	r2, [pc, #164]	@ (800adec <HAL_RCC_OscConfig+0x4a4>)
 800ad46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad4a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ad4c:	f7f9 fb4c 	bl	80043e8 <HAL_GetTick>
 800ad50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ad52:	e008      	b.n	800ad66 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ad54:	f7f9 fb48 	bl	80043e8 <HAL_GetTick>
 800ad58:	4602      	mov	r2, r0
 800ad5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad5c:	1ad3      	subs	r3, r2, r3
 800ad5e:	2b02      	cmp	r3, #2
 800ad60:	d901      	bls.n	800ad66 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800ad62:	2303      	movs	r3, #3
 800ad64:	e1c2      	b.n	800b0ec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ad66:	4b21      	ldr	r3, [pc, #132]	@ (800adec <HAL_RCC_OscConfig+0x4a4>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d1f0      	bne.n	800ad54 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f003 0304 	and.w	r3, r3, #4
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	f000 8086 	beq.w	800ae8c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ad80:	4b1b      	ldr	r3, [pc, #108]	@ (800adf0 <HAL_RCC_OscConfig+0x4a8>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	4a1a      	ldr	r2, [pc, #104]	@ (800adf0 <HAL_RCC_OscConfig+0x4a8>)
 800ad86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ad8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ad8c:	f7f9 fb2c 	bl	80043e8 <HAL_GetTick>
 800ad90:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ad92:	e008      	b.n	800ada6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ad94:	f7f9 fb28 	bl	80043e8 <HAL_GetTick>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad9c:	1ad3      	subs	r3, r2, r3
 800ad9e:	2b64      	cmp	r3, #100	@ 0x64
 800ada0:	d901      	bls.n	800ada6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800ada2:	2303      	movs	r3, #3
 800ada4:	e1a2      	b.n	800b0ec <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ada6:	4b12      	ldr	r3, [pc, #72]	@ (800adf0 <HAL_RCC_OscConfig+0x4a8>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d0f0      	beq.n	800ad94 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	689b      	ldr	r3, [r3, #8]
 800adb6:	2b01      	cmp	r3, #1
 800adb8:	d106      	bne.n	800adc8 <HAL_RCC_OscConfig+0x480>
 800adba:	4b0c      	ldr	r3, [pc, #48]	@ (800adec <HAL_RCC_OscConfig+0x4a4>)
 800adbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adbe:	4a0b      	ldr	r2, [pc, #44]	@ (800adec <HAL_RCC_OscConfig+0x4a4>)
 800adc0:	f043 0301 	orr.w	r3, r3, #1
 800adc4:	6713      	str	r3, [r2, #112]	@ 0x70
 800adc6:	e032      	b.n	800ae2e <HAL_RCC_OscConfig+0x4e6>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d111      	bne.n	800adf4 <HAL_RCC_OscConfig+0x4ac>
 800add0:	4b06      	ldr	r3, [pc, #24]	@ (800adec <HAL_RCC_OscConfig+0x4a4>)
 800add2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800add4:	4a05      	ldr	r2, [pc, #20]	@ (800adec <HAL_RCC_OscConfig+0x4a4>)
 800add6:	f023 0301 	bic.w	r3, r3, #1
 800adda:	6713      	str	r3, [r2, #112]	@ 0x70
 800addc:	4b03      	ldr	r3, [pc, #12]	@ (800adec <HAL_RCC_OscConfig+0x4a4>)
 800adde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ade0:	4a02      	ldr	r2, [pc, #8]	@ (800adec <HAL_RCC_OscConfig+0x4a4>)
 800ade2:	f023 0304 	bic.w	r3, r3, #4
 800ade6:	6713      	str	r3, [r2, #112]	@ 0x70
 800ade8:	e021      	b.n	800ae2e <HAL_RCC_OscConfig+0x4e6>
 800adea:	bf00      	nop
 800adec:	58024400 	.word	0x58024400
 800adf0:	58024800 	.word	0x58024800
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	689b      	ldr	r3, [r3, #8]
 800adf8:	2b05      	cmp	r3, #5
 800adfa:	d10c      	bne.n	800ae16 <HAL_RCC_OscConfig+0x4ce>
 800adfc:	4b83      	ldr	r3, [pc, #524]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800adfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae00:	4a82      	ldr	r2, [pc, #520]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800ae02:	f043 0304 	orr.w	r3, r3, #4
 800ae06:	6713      	str	r3, [r2, #112]	@ 0x70
 800ae08:	4b80      	ldr	r3, [pc, #512]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800ae0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae0c:	4a7f      	ldr	r2, [pc, #508]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800ae0e:	f043 0301 	orr.w	r3, r3, #1
 800ae12:	6713      	str	r3, [r2, #112]	@ 0x70
 800ae14:	e00b      	b.n	800ae2e <HAL_RCC_OscConfig+0x4e6>
 800ae16:	4b7d      	ldr	r3, [pc, #500]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800ae18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae1a:	4a7c      	ldr	r2, [pc, #496]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800ae1c:	f023 0301 	bic.w	r3, r3, #1
 800ae20:	6713      	str	r3, [r2, #112]	@ 0x70
 800ae22:	4b7a      	ldr	r3, [pc, #488]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800ae24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae26:	4a79      	ldr	r2, [pc, #484]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800ae28:	f023 0304 	bic.w	r3, r3, #4
 800ae2c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	689b      	ldr	r3, [r3, #8]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d015      	beq.n	800ae62 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae36:	f7f9 fad7 	bl	80043e8 <HAL_GetTick>
 800ae3a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ae3c:	e00a      	b.n	800ae54 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae3e:	f7f9 fad3 	bl	80043e8 <HAL_GetTick>
 800ae42:	4602      	mov	r2, r0
 800ae44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae46:	1ad3      	subs	r3, r2, r3
 800ae48:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d901      	bls.n	800ae54 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800ae50:	2303      	movs	r3, #3
 800ae52:	e14b      	b.n	800b0ec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ae54:	4b6d      	ldr	r3, [pc, #436]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800ae56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae58:	f003 0302 	and.w	r3, r3, #2
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d0ee      	beq.n	800ae3e <HAL_RCC_OscConfig+0x4f6>
 800ae60:	e014      	b.n	800ae8c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae62:	f7f9 fac1 	bl	80043e8 <HAL_GetTick>
 800ae66:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ae68:	e00a      	b.n	800ae80 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae6a:	f7f9 fabd 	bl	80043e8 <HAL_GetTick>
 800ae6e:	4602      	mov	r2, r0
 800ae70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae72:	1ad3      	subs	r3, r2, r3
 800ae74:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d901      	bls.n	800ae80 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800ae7c:	2303      	movs	r3, #3
 800ae7e:	e135      	b.n	800b0ec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ae80:	4b62      	ldr	r3, [pc, #392]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800ae82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae84:	f003 0302 	and.w	r3, r3, #2
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d1ee      	bne.n	800ae6a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	f000 812a 	beq.w	800b0ea <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ae96:	4b5d      	ldr	r3, [pc, #372]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800ae98:	691b      	ldr	r3, [r3, #16]
 800ae9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ae9e:	2b18      	cmp	r3, #24
 800aea0:	f000 80ba 	beq.w	800b018 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aea8:	2b02      	cmp	r3, #2
 800aeaa:	f040 8095 	bne.w	800afd8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aeae:	4b57      	ldr	r3, [pc, #348]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4a56      	ldr	r2, [pc, #344]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800aeb4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aeb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aeba:	f7f9 fa95 	bl	80043e8 <HAL_GetTick>
 800aebe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aec0:	e008      	b.n	800aed4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aec2:	f7f9 fa91 	bl	80043e8 <HAL_GetTick>
 800aec6:	4602      	mov	r2, r0
 800aec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeca:	1ad3      	subs	r3, r2, r3
 800aecc:	2b02      	cmp	r3, #2
 800aece:	d901      	bls.n	800aed4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800aed0:	2303      	movs	r3, #3
 800aed2:	e10b      	b.n	800b0ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aed4:	4b4d      	ldr	r3, [pc, #308]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d1f0      	bne.n	800aec2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aee0:	4b4a      	ldr	r3, [pc, #296]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800aee2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aee4:	4b4a      	ldr	r3, [pc, #296]	@ (800b010 <HAL_RCC_OscConfig+0x6c8>)
 800aee6:	4013      	ands	r3, r2
 800aee8:	687a      	ldr	r2, [r7, #4]
 800aeea:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800aef0:	0112      	lsls	r2, r2, #4
 800aef2:	430a      	orrs	r2, r1
 800aef4:	4945      	ldr	r1, [pc, #276]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800aef6:	4313      	orrs	r3, r2
 800aef8:	628b      	str	r3, [r1, #40]	@ 0x28
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aefe:	3b01      	subs	r3, #1
 800af00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af08:	3b01      	subs	r3, #1
 800af0a:	025b      	lsls	r3, r3, #9
 800af0c:	b29b      	uxth	r3, r3
 800af0e:	431a      	orrs	r2, r3
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af14:	3b01      	subs	r3, #1
 800af16:	041b      	lsls	r3, r3, #16
 800af18:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800af1c:	431a      	orrs	r2, r3
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af22:	3b01      	subs	r3, #1
 800af24:	061b      	lsls	r3, r3, #24
 800af26:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800af2a:	4938      	ldr	r1, [pc, #224]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800af2c:	4313      	orrs	r3, r2
 800af2e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800af30:	4b36      	ldr	r3, [pc, #216]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800af32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af34:	4a35      	ldr	r2, [pc, #212]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800af36:	f023 0301 	bic.w	r3, r3, #1
 800af3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800af3c:	4b33      	ldr	r3, [pc, #204]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800af3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af40:	4b34      	ldr	r3, [pc, #208]	@ (800b014 <HAL_RCC_OscConfig+0x6cc>)
 800af42:	4013      	ands	r3, r2
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800af48:	00d2      	lsls	r2, r2, #3
 800af4a:	4930      	ldr	r1, [pc, #192]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800af4c:	4313      	orrs	r3, r2
 800af4e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800af50:	4b2e      	ldr	r3, [pc, #184]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800af52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af54:	f023 020c 	bic.w	r2, r3, #12
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af5c:	492b      	ldr	r1, [pc, #172]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800af5e:	4313      	orrs	r3, r2
 800af60:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800af62:	4b2a      	ldr	r3, [pc, #168]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800af64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af66:	f023 0202 	bic.w	r2, r3, #2
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af6e:	4927      	ldr	r1, [pc, #156]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800af70:	4313      	orrs	r3, r2
 800af72:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800af74:	4b25      	ldr	r3, [pc, #148]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800af76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af78:	4a24      	ldr	r2, [pc, #144]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800af7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800af7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af80:	4b22      	ldr	r3, [pc, #136]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800af82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af84:	4a21      	ldr	r2, [pc, #132]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800af86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800af8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800af8c:	4b1f      	ldr	r3, [pc, #124]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800af8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af90:	4a1e      	ldr	r2, [pc, #120]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800af92:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800af96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800af98:	4b1c      	ldr	r3, [pc, #112]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800af9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af9c:	4a1b      	ldr	r2, [pc, #108]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800af9e:	f043 0301 	orr.w	r3, r3, #1
 800afa2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800afa4:	4b19      	ldr	r3, [pc, #100]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4a18      	ldr	r2, [pc, #96]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800afaa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800afae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afb0:	f7f9 fa1a 	bl	80043e8 <HAL_GetTick>
 800afb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800afb6:	e008      	b.n	800afca <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800afb8:	f7f9 fa16 	bl	80043e8 <HAL_GetTick>
 800afbc:	4602      	mov	r2, r0
 800afbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afc0:	1ad3      	subs	r3, r2, r3
 800afc2:	2b02      	cmp	r3, #2
 800afc4:	d901      	bls.n	800afca <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800afc6:	2303      	movs	r3, #3
 800afc8:	e090      	b.n	800b0ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800afca:	4b10      	ldr	r3, [pc, #64]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d0f0      	beq.n	800afb8 <HAL_RCC_OscConfig+0x670>
 800afd6:	e088      	b.n	800b0ea <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800afd8:	4b0c      	ldr	r3, [pc, #48]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4a0b      	ldr	r2, [pc, #44]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800afde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800afe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afe4:	f7f9 fa00 	bl	80043e8 <HAL_GetTick>
 800afe8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800afea:	e008      	b.n	800affe <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800afec:	f7f9 f9fc 	bl	80043e8 <HAL_GetTick>
 800aff0:	4602      	mov	r2, r0
 800aff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aff4:	1ad3      	subs	r3, r2, r3
 800aff6:	2b02      	cmp	r3, #2
 800aff8:	d901      	bls.n	800affe <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800affa:	2303      	movs	r3, #3
 800affc:	e076      	b.n	800b0ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800affe:	4b03      	ldr	r3, [pc, #12]	@ (800b00c <HAL_RCC_OscConfig+0x6c4>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b006:	2b00      	cmp	r3, #0
 800b008:	d1f0      	bne.n	800afec <HAL_RCC_OscConfig+0x6a4>
 800b00a:	e06e      	b.n	800b0ea <HAL_RCC_OscConfig+0x7a2>
 800b00c:	58024400 	.word	0x58024400
 800b010:	fffffc0c 	.word	0xfffffc0c
 800b014:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b018:	4b36      	ldr	r3, [pc, #216]	@ (800b0f4 <HAL_RCC_OscConfig+0x7ac>)
 800b01a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b01c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b01e:	4b35      	ldr	r3, [pc, #212]	@ (800b0f4 <HAL_RCC_OscConfig+0x7ac>)
 800b020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b022:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b028:	2b01      	cmp	r3, #1
 800b02a:	d031      	beq.n	800b090 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	f003 0203 	and.w	r2, r3, #3
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b036:	429a      	cmp	r2, r3
 800b038:	d12a      	bne.n	800b090 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	091b      	lsrs	r3, r3, #4
 800b03e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b046:	429a      	cmp	r2, r3
 800b048:	d122      	bne.n	800b090 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b054:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b056:	429a      	cmp	r2, r3
 800b058:	d11a      	bne.n	800b090 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	0a5b      	lsrs	r3, r3, #9
 800b05e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b066:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b068:	429a      	cmp	r2, r3
 800b06a:	d111      	bne.n	800b090 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	0c1b      	lsrs	r3, r3, #16
 800b070:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b078:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d108      	bne.n	800b090 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	0e1b      	lsrs	r3, r3, #24
 800b082:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b08a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d001      	beq.n	800b094 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800b090:	2301      	movs	r3, #1
 800b092:	e02b      	b.n	800b0ec <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b094:	4b17      	ldr	r3, [pc, #92]	@ (800b0f4 <HAL_RCC_OscConfig+0x7ac>)
 800b096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b098:	08db      	lsrs	r3, r3, #3
 800b09a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b09e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b0a4:	693a      	ldr	r2, [r7, #16]
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	d01f      	beq.n	800b0ea <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800b0aa:	4b12      	ldr	r3, [pc, #72]	@ (800b0f4 <HAL_RCC_OscConfig+0x7ac>)
 800b0ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0ae:	4a11      	ldr	r2, [pc, #68]	@ (800b0f4 <HAL_RCC_OscConfig+0x7ac>)
 800b0b0:	f023 0301 	bic.w	r3, r3, #1
 800b0b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b0b6:	f7f9 f997 	bl	80043e8 <HAL_GetTick>
 800b0ba:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b0bc:	bf00      	nop
 800b0be:	f7f9 f993 	bl	80043e8 <HAL_GetTick>
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d0f9      	beq.n	800b0be <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b0ca:	4b0a      	ldr	r3, [pc, #40]	@ (800b0f4 <HAL_RCC_OscConfig+0x7ac>)
 800b0cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b0ce:	4b0a      	ldr	r3, [pc, #40]	@ (800b0f8 <HAL_RCC_OscConfig+0x7b0>)
 800b0d0:	4013      	ands	r3, r2
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b0d6:	00d2      	lsls	r2, r2, #3
 800b0d8:	4906      	ldr	r1, [pc, #24]	@ (800b0f4 <HAL_RCC_OscConfig+0x7ac>)
 800b0da:	4313      	orrs	r3, r2
 800b0dc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800b0de:	4b05      	ldr	r3, [pc, #20]	@ (800b0f4 <HAL_RCC_OscConfig+0x7ac>)
 800b0e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0e2:	4a04      	ldr	r2, [pc, #16]	@ (800b0f4 <HAL_RCC_OscConfig+0x7ac>)
 800b0e4:	f043 0301 	orr.w	r3, r3, #1
 800b0e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800b0ea:	2300      	movs	r3, #0
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3730      	adds	r7, #48	@ 0x30
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}
 800b0f4:	58024400 	.word	0x58024400
 800b0f8:	ffff0007 	.word	0xffff0007

0800b0fc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b086      	sub	sp, #24
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d101      	bne.n	800b110 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b10c:	2301      	movs	r3, #1
 800b10e:	e19c      	b.n	800b44a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b110:	4b8a      	ldr	r3, [pc, #552]	@ (800b33c <HAL_RCC_ClockConfig+0x240>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f003 030f 	and.w	r3, r3, #15
 800b118:	683a      	ldr	r2, [r7, #0]
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d910      	bls.n	800b140 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b11e:	4b87      	ldr	r3, [pc, #540]	@ (800b33c <HAL_RCC_ClockConfig+0x240>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f023 020f 	bic.w	r2, r3, #15
 800b126:	4985      	ldr	r1, [pc, #532]	@ (800b33c <HAL_RCC_ClockConfig+0x240>)
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	4313      	orrs	r3, r2
 800b12c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b12e:	4b83      	ldr	r3, [pc, #524]	@ (800b33c <HAL_RCC_ClockConfig+0x240>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f003 030f 	and.w	r3, r3, #15
 800b136:	683a      	ldr	r2, [r7, #0]
 800b138:	429a      	cmp	r2, r3
 800b13a:	d001      	beq.n	800b140 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b13c:	2301      	movs	r3, #1
 800b13e:	e184      	b.n	800b44a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f003 0304 	and.w	r3, r3, #4
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d010      	beq.n	800b16e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	691a      	ldr	r2, [r3, #16]
 800b150:	4b7b      	ldr	r3, [pc, #492]	@ (800b340 <HAL_RCC_ClockConfig+0x244>)
 800b152:	699b      	ldr	r3, [r3, #24]
 800b154:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b158:	429a      	cmp	r2, r3
 800b15a:	d908      	bls.n	800b16e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b15c:	4b78      	ldr	r3, [pc, #480]	@ (800b340 <HAL_RCC_ClockConfig+0x244>)
 800b15e:	699b      	ldr	r3, [r3, #24]
 800b160:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	691b      	ldr	r3, [r3, #16]
 800b168:	4975      	ldr	r1, [pc, #468]	@ (800b340 <HAL_RCC_ClockConfig+0x244>)
 800b16a:	4313      	orrs	r3, r2
 800b16c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f003 0308 	and.w	r3, r3, #8
 800b176:	2b00      	cmp	r3, #0
 800b178:	d010      	beq.n	800b19c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	695a      	ldr	r2, [r3, #20]
 800b17e:	4b70      	ldr	r3, [pc, #448]	@ (800b340 <HAL_RCC_ClockConfig+0x244>)
 800b180:	69db      	ldr	r3, [r3, #28]
 800b182:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b186:	429a      	cmp	r2, r3
 800b188:	d908      	bls.n	800b19c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b18a:	4b6d      	ldr	r3, [pc, #436]	@ (800b340 <HAL_RCC_ClockConfig+0x244>)
 800b18c:	69db      	ldr	r3, [r3, #28]
 800b18e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	695b      	ldr	r3, [r3, #20]
 800b196:	496a      	ldr	r1, [pc, #424]	@ (800b340 <HAL_RCC_ClockConfig+0x244>)
 800b198:	4313      	orrs	r3, r2
 800b19a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f003 0310 	and.w	r3, r3, #16
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d010      	beq.n	800b1ca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	699a      	ldr	r2, [r3, #24]
 800b1ac:	4b64      	ldr	r3, [pc, #400]	@ (800b340 <HAL_RCC_ClockConfig+0x244>)
 800b1ae:	69db      	ldr	r3, [r3, #28]
 800b1b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d908      	bls.n	800b1ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b1b8:	4b61      	ldr	r3, [pc, #388]	@ (800b340 <HAL_RCC_ClockConfig+0x244>)
 800b1ba:	69db      	ldr	r3, [r3, #28]
 800b1bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	699b      	ldr	r3, [r3, #24]
 800b1c4:	495e      	ldr	r1, [pc, #376]	@ (800b340 <HAL_RCC_ClockConfig+0x244>)
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f003 0320 	and.w	r3, r3, #32
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d010      	beq.n	800b1f8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	69da      	ldr	r2, [r3, #28]
 800b1da:	4b59      	ldr	r3, [pc, #356]	@ (800b340 <HAL_RCC_ClockConfig+0x244>)
 800b1dc:	6a1b      	ldr	r3, [r3, #32]
 800b1de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d908      	bls.n	800b1f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b1e6:	4b56      	ldr	r3, [pc, #344]	@ (800b340 <HAL_RCC_ClockConfig+0x244>)
 800b1e8:	6a1b      	ldr	r3, [r3, #32]
 800b1ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	69db      	ldr	r3, [r3, #28]
 800b1f2:	4953      	ldr	r1, [pc, #332]	@ (800b340 <HAL_RCC_ClockConfig+0x244>)
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f003 0302 	and.w	r3, r3, #2
 800b200:	2b00      	cmp	r3, #0
 800b202:	d010      	beq.n	800b226 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	68da      	ldr	r2, [r3, #12]
 800b208:	4b4d      	ldr	r3, [pc, #308]	@ (800b340 <HAL_RCC_ClockConfig+0x244>)
 800b20a:	699b      	ldr	r3, [r3, #24]
 800b20c:	f003 030f 	and.w	r3, r3, #15
 800b210:	429a      	cmp	r2, r3
 800b212:	d908      	bls.n	800b226 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b214:	4b4a      	ldr	r3, [pc, #296]	@ (800b340 <HAL_RCC_ClockConfig+0x244>)
 800b216:	699b      	ldr	r3, [r3, #24]
 800b218:	f023 020f 	bic.w	r2, r3, #15
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	68db      	ldr	r3, [r3, #12]
 800b220:	4947      	ldr	r1, [pc, #284]	@ (800b340 <HAL_RCC_ClockConfig+0x244>)
 800b222:	4313      	orrs	r3, r2
 800b224:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f003 0301 	and.w	r3, r3, #1
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d055      	beq.n	800b2de <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b232:	4b43      	ldr	r3, [pc, #268]	@ (800b340 <HAL_RCC_ClockConfig+0x244>)
 800b234:	699b      	ldr	r3, [r3, #24]
 800b236:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	689b      	ldr	r3, [r3, #8]
 800b23e:	4940      	ldr	r1, [pc, #256]	@ (800b340 <HAL_RCC_ClockConfig+0x244>)
 800b240:	4313      	orrs	r3, r2
 800b242:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	2b02      	cmp	r3, #2
 800b24a:	d107      	bne.n	800b25c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b24c:	4b3c      	ldr	r3, [pc, #240]	@ (800b340 <HAL_RCC_ClockConfig+0x244>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b254:	2b00      	cmp	r3, #0
 800b256:	d121      	bne.n	800b29c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b258:	2301      	movs	r3, #1
 800b25a:	e0f6      	b.n	800b44a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	2b03      	cmp	r3, #3
 800b262:	d107      	bne.n	800b274 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b264:	4b36      	ldr	r3, [pc, #216]	@ (800b340 <HAL_RCC_ClockConfig+0x244>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d115      	bne.n	800b29c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b270:	2301      	movs	r3, #1
 800b272:	e0ea      	b.n	800b44a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d107      	bne.n	800b28c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b27c:	4b30      	ldr	r3, [pc, #192]	@ (800b340 <HAL_RCC_ClockConfig+0x244>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b284:	2b00      	cmp	r3, #0
 800b286:	d109      	bne.n	800b29c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b288:	2301      	movs	r3, #1
 800b28a:	e0de      	b.n	800b44a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b28c:	4b2c      	ldr	r3, [pc, #176]	@ (800b340 <HAL_RCC_ClockConfig+0x244>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f003 0304 	and.w	r3, r3, #4
 800b294:	2b00      	cmp	r3, #0
 800b296:	d101      	bne.n	800b29c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b298:	2301      	movs	r3, #1
 800b29a:	e0d6      	b.n	800b44a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b29c:	4b28      	ldr	r3, [pc, #160]	@ (800b340 <HAL_RCC_ClockConfig+0x244>)
 800b29e:	691b      	ldr	r3, [r3, #16]
 800b2a0:	f023 0207 	bic.w	r2, r3, #7
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	4925      	ldr	r1, [pc, #148]	@ (800b340 <HAL_RCC_ClockConfig+0x244>)
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2ae:	f7f9 f89b 	bl	80043e8 <HAL_GetTick>
 800b2b2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b2b4:	e00a      	b.n	800b2cc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b2b6:	f7f9 f897 	bl	80043e8 <HAL_GetTick>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	1ad3      	subs	r3, r2, r3
 800b2c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d901      	bls.n	800b2cc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b2c8:	2303      	movs	r3, #3
 800b2ca:	e0be      	b.n	800b44a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b2cc:	4b1c      	ldr	r3, [pc, #112]	@ (800b340 <HAL_RCC_ClockConfig+0x244>)
 800b2ce:	691b      	ldr	r3, [r3, #16]
 800b2d0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	00db      	lsls	r3, r3, #3
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d1eb      	bne.n	800b2b6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f003 0302 	and.w	r3, r3, #2
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d010      	beq.n	800b30c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	68da      	ldr	r2, [r3, #12]
 800b2ee:	4b14      	ldr	r3, [pc, #80]	@ (800b340 <HAL_RCC_ClockConfig+0x244>)
 800b2f0:	699b      	ldr	r3, [r3, #24]
 800b2f2:	f003 030f 	and.w	r3, r3, #15
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d208      	bcs.n	800b30c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b2fa:	4b11      	ldr	r3, [pc, #68]	@ (800b340 <HAL_RCC_ClockConfig+0x244>)
 800b2fc:	699b      	ldr	r3, [r3, #24]
 800b2fe:	f023 020f 	bic.w	r2, r3, #15
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	68db      	ldr	r3, [r3, #12]
 800b306:	490e      	ldr	r1, [pc, #56]	@ (800b340 <HAL_RCC_ClockConfig+0x244>)
 800b308:	4313      	orrs	r3, r2
 800b30a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b30c:	4b0b      	ldr	r3, [pc, #44]	@ (800b33c <HAL_RCC_ClockConfig+0x240>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f003 030f 	and.w	r3, r3, #15
 800b314:	683a      	ldr	r2, [r7, #0]
 800b316:	429a      	cmp	r2, r3
 800b318:	d214      	bcs.n	800b344 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b31a:	4b08      	ldr	r3, [pc, #32]	@ (800b33c <HAL_RCC_ClockConfig+0x240>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f023 020f 	bic.w	r2, r3, #15
 800b322:	4906      	ldr	r1, [pc, #24]	@ (800b33c <HAL_RCC_ClockConfig+0x240>)
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	4313      	orrs	r3, r2
 800b328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b32a:	4b04      	ldr	r3, [pc, #16]	@ (800b33c <HAL_RCC_ClockConfig+0x240>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f003 030f 	and.w	r3, r3, #15
 800b332:	683a      	ldr	r2, [r7, #0]
 800b334:	429a      	cmp	r2, r3
 800b336:	d005      	beq.n	800b344 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b338:	2301      	movs	r3, #1
 800b33a:	e086      	b.n	800b44a <HAL_RCC_ClockConfig+0x34e>
 800b33c:	52002000 	.word	0x52002000
 800b340:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f003 0304 	and.w	r3, r3, #4
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d010      	beq.n	800b372 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	691a      	ldr	r2, [r3, #16]
 800b354:	4b3f      	ldr	r3, [pc, #252]	@ (800b454 <HAL_RCC_ClockConfig+0x358>)
 800b356:	699b      	ldr	r3, [r3, #24]
 800b358:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b35c:	429a      	cmp	r2, r3
 800b35e:	d208      	bcs.n	800b372 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b360:	4b3c      	ldr	r3, [pc, #240]	@ (800b454 <HAL_RCC_ClockConfig+0x358>)
 800b362:	699b      	ldr	r3, [r3, #24]
 800b364:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	691b      	ldr	r3, [r3, #16]
 800b36c:	4939      	ldr	r1, [pc, #228]	@ (800b454 <HAL_RCC_ClockConfig+0x358>)
 800b36e:	4313      	orrs	r3, r2
 800b370:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f003 0308 	and.w	r3, r3, #8
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d010      	beq.n	800b3a0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	695a      	ldr	r2, [r3, #20]
 800b382:	4b34      	ldr	r3, [pc, #208]	@ (800b454 <HAL_RCC_ClockConfig+0x358>)
 800b384:	69db      	ldr	r3, [r3, #28]
 800b386:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d208      	bcs.n	800b3a0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b38e:	4b31      	ldr	r3, [pc, #196]	@ (800b454 <HAL_RCC_ClockConfig+0x358>)
 800b390:	69db      	ldr	r3, [r3, #28]
 800b392:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	695b      	ldr	r3, [r3, #20]
 800b39a:	492e      	ldr	r1, [pc, #184]	@ (800b454 <HAL_RCC_ClockConfig+0x358>)
 800b39c:	4313      	orrs	r3, r2
 800b39e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f003 0310 	and.w	r3, r3, #16
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d010      	beq.n	800b3ce <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	699a      	ldr	r2, [r3, #24]
 800b3b0:	4b28      	ldr	r3, [pc, #160]	@ (800b454 <HAL_RCC_ClockConfig+0x358>)
 800b3b2:	69db      	ldr	r3, [r3, #28]
 800b3b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d208      	bcs.n	800b3ce <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b3bc:	4b25      	ldr	r3, [pc, #148]	@ (800b454 <HAL_RCC_ClockConfig+0x358>)
 800b3be:	69db      	ldr	r3, [r3, #28]
 800b3c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	699b      	ldr	r3, [r3, #24]
 800b3c8:	4922      	ldr	r1, [pc, #136]	@ (800b454 <HAL_RCC_ClockConfig+0x358>)
 800b3ca:	4313      	orrs	r3, r2
 800b3cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f003 0320 	and.w	r3, r3, #32
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d010      	beq.n	800b3fc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	69da      	ldr	r2, [r3, #28]
 800b3de:	4b1d      	ldr	r3, [pc, #116]	@ (800b454 <HAL_RCC_ClockConfig+0x358>)
 800b3e0:	6a1b      	ldr	r3, [r3, #32]
 800b3e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d208      	bcs.n	800b3fc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b3ea:	4b1a      	ldr	r3, [pc, #104]	@ (800b454 <HAL_RCC_ClockConfig+0x358>)
 800b3ec:	6a1b      	ldr	r3, [r3, #32]
 800b3ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	69db      	ldr	r3, [r3, #28]
 800b3f6:	4917      	ldr	r1, [pc, #92]	@ (800b454 <HAL_RCC_ClockConfig+0x358>)
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b3fc:	f000 f834 	bl	800b468 <HAL_RCC_GetSysClockFreq>
 800b400:	4602      	mov	r2, r0
 800b402:	4b14      	ldr	r3, [pc, #80]	@ (800b454 <HAL_RCC_ClockConfig+0x358>)
 800b404:	699b      	ldr	r3, [r3, #24]
 800b406:	0a1b      	lsrs	r3, r3, #8
 800b408:	f003 030f 	and.w	r3, r3, #15
 800b40c:	4912      	ldr	r1, [pc, #72]	@ (800b458 <HAL_RCC_ClockConfig+0x35c>)
 800b40e:	5ccb      	ldrb	r3, [r1, r3]
 800b410:	f003 031f 	and.w	r3, r3, #31
 800b414:	fa22 f303 	lsr.w	r3, r2, r3
 800b418:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b41a:	4b0e      	ldr	r3, [pc, #56]	@ (800b454 <HAL_RCC_ClockConfig+0x358>)
 800b41c:	699b      	ldr	r3, [r3, #24]
 800b41e:	f003 030f 	and.w	r3, r3, #15
 800b422:	4a0d      	ldr	r2, [pc, #52]	@ (800b458 <HAL_RCC_ClockConfig+0x35c>)
 800b424:	5cd3      	ldrb	r3, [r2, r3]
 800b426:	f003 031f 	and.w	r3, r3, #31
 800b42a:	693a      	ldr	r2, [r7, #16]
 800b42c:	fa22 f303 	lsr.w	r3, r2, r3
 800b430:	4a0a      	ldr	r2, [pc, #40]	@ (800b45c <HAL_RCC_ClockConfig+0x360>)
 800b432:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b434:	4a0a      	ldr	r2, [pc, #40]	@ (800b460 <HAL_RCC_ClockConfig+0x364>)
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b43a:	4b0a      	ldr	r3, [pc, #40]	@ (800b464 <HAL_RCC_ClockConfig+0x368>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	4618      	mov	r0, r3
 800b440:	f7f8 ff88 	bl	8004354 <HAL_InitTick>
 800b444:	4603      	mov	r3, r0
 800b446:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b448:	7bfb      	ldrb	r3, [r7, #15]
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3718      	adds	r7, #24
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
 800b452:	bf00      	nop
 800b454:	58024400 	.word	0x58024400
 800b458:	080143b8 	.word	0x080143b8
 800b45c:	2400003c 	.word	0x2400003c
 800b460:	24000038 	.word	0x24000038
 800b464:	24000040 	.word	0x24000040

0800b468 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b468:	b480      	push	{r7}
 800b46a:	b089      	sub	sp, #36	@ 0x24
 800b46c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b46e:	4bb3      	ldr	r3, [pc, #716]	@ (800b73c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b470:	691b      	ldr	r3, [r3, #16]
 800b472:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b476:	2b18      	cmp	r3, #24
 800b478:	f200 8155 	bhi.w	800b726 <HAL_RCC_GetSysClockFreq+0x2be>
 800b47c:	a201      	add	r2, pc, #4	@ (adr r2, 800b484 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b47e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b482:	bf00      	nop
 800b484:	0800b4e9 	.word	0x0800b4e9
 800b488:	0800b727 	.word	0x0800b727
 800b48c:	0800b727 	.word	0x0800b727
 800b490:	0800b727 	.word	0x0800b727
 800b494:	0800b727 	.word	0x0800b727
 800b498:	0800b727 	.word	0x0800b727
 800b49c:	0800b727 	.word	0x0800b727
 800b4a0:	0800b727 	.word	0x0800b727
 800b4a4:	0800b50f 	.word	0x0800b50f
 800b4a8:	0800b727 	.word	0x0800b727
 800b4ac:	0800b727 	.word	0x0800b727
 800b4b0:	0800b727 	.word	0x0800b727
 800b4b4:	0800b727 	.word	0x0800b727
 800b4b8:	0800b727 	.word	0x0800b727
 800b4bc:	0800b727 	.word	0x0800b727
 800b4c0:	0800b727 	.word	0x0800b727
 800b4c4:	0800b515 	.word	0x0800b515
 800b4c8:	0800b727 	.word	0x0800b727
 800b4cc:	0800b727 	.word	0x0800b727
 800b4d0:	0800b727 	.word	0x0800b727
 800b4d4:	0800b727 	.word	0x0800b727
 800b4d8:	0800b727 	.word	0x0800b727
 800b4dc:	0800b727 	.word	0x0800b727
 800b4e0:	0800b727 	.word	0x0800b727
 800b4e4:	0800b51b 	.word	0x0800b51b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4e8:	4b94      	ldr	r3, [pc, #592]	@ (800b73c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f003 0320 	and.w	r3, r3, #32
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d009      	beq.n	800b508 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4f4:	4b91      	ldr	r3, [pc, #580]	@ (800b73c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	08db      	lsrs	r3, r3, #3
 800b4fa:	f003 0303 	and.w	r3, r3, #3
 800b4fe:	4a90      	ldr	r2, [pc, #576]	@ (800b740 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b500:	fa22 f303 	lsr.w	r3, r2, r3
 800b504:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b506:	e111      	b.n	800b72c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b508:	4b8d      	ldr	r3, [pc, #564]	@ (800b740 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b50a:	61bb      	str	r3, [r7, #24]
      break;
 800b50c:	e10e      	b.n	800b72c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b50e:	4b8d      	ldr	r3, [pc, #564]	@ (800b744 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b510:	61bb      	str	r3, [r7, #24]
      break;
 800b512:	e10b      	b.n	800b72c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b514:	4b8c      	ldr	r3, [pc, #560]	@ (800b748 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b516:	61bb      	str	r3, [r7, #24]
      break;
 800b518:	e108      	b.n	800b72c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b51a:	4b88      	ldr	r3, [pc, #544]	@ (800b73c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b51c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b51e:	f003 0303 	and.w	r3, r3, #3
 800b522:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b524:	4b85      	ldr	r3, [pc, #532]	@ (800b73c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b528:	091b      	lsrs	r3, r3, #4
 800b52a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b52e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b530:	4b82      	ldr	r3, [pc, #520]	@ (800b73c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b534:	f003 0301 	and.w	r3, r3, #1
 800b538:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b53a:	4b80      	ldr	r3, [pc, #512]	@ (800b73c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b53c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b53e:	08db      	lsrs	r3, r3, #3
 800b540:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b544:	68fa      	ldr	r2, [r7, #12]
 800b546:	fb02 f303 	mul.w	r3, r2, r3
 800b54a:	ee07 3a90 	vmov	s15, r3
 800b54e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b552:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	f000 80e1 	beq.w	800b720 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	2b02      	cmp	r3, #2
 800b562:	f000 8083 	beq.w	800b66c <HAL_RCC_GetSysClockFreq+0x204>
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	2b02      	cmp	r3, #2
 800b56a:	f200 80a1 	bhi.w	800b6b0 <HAL_RCC_GetSysClockFreq+0x248>
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d003      	beq.n	800b57c <HAL_RCC_GetSysClockFreq+0x114>
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	2b01      	cmp	r3, #1
 800b578:	d056      	beq.n	800b628 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b57a:	e099      	b.n	800b6b0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b57c:	4b6f      	ldr	r3, [pc, #444]	@ (800b73c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f003 0320 	and.w	r3, r3, #32
 800b584:	2b00      	cmp	r3, #0
 800b586:	d02d      	beq.n	800b5e4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b588:	4b6c      	ldr	r3, [pc, #432]	@ (800b73c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	08db      	lsrs	r3, r3, #3
 800b58e:	f003 0303 	and.w	r3, r3, #3
 800b592:	4a6b      	ldr	r2, [pc, #428]	@ (800b740 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b594:	fa22 f303 	lsr.w	r3, r2, r3
 800b598:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	ee07 3a90 	vmov	s15, r3
 800b5a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	ee07 3a90 	vmov	s15, r3
 800b5aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5b2:	4b62      	ldr	r3, [pc, #392]	@ (800b73c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5ba:	ee07 3a90 	vmov	s15, r3
 800b5be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5c2:	ed97 6a02 	vldr	s12, [r7, #8]
 800b5c6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800b74c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b5ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5de:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b5e2:	e087      	b.n	800b6f4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	ee07 3a90 	vmov	s15, r3
 800b5ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5ee:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800b750 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b5f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5f6:	4b51      	ldr	r3, [pc, #324]	@ (800b73c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5fe:	ee07 3a90 	vmov	s15, r3
 800b602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b606:	ed97 6a02 	vldr	s12, [r7, #8]
 800b60a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800b74c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b60e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b616:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b61a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b61e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b622:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b626:	e065      	b.n	800b6f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	ee07 3a90 	vmov	s15, r3
 800b62e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b632:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800b754 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b63a:	4b40      	ldr	r3, [pc, #256]	@ (800b73c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b63c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b63e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b642:	ee07 3a90 	vmov	s15, r3
 800b646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b64a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b64e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b74c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b65a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b65e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b662:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b666:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b66a:	e043      	b.n	800b6f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	ee07 3a90 	vmov	s15, r3
 800b672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b676:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800b758 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b67a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b67e:	4b2f      	ldr	r3, [pc, #188]	@ (800b73c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b686:	ee07 3a90 	vmov	s15, r3
 800b68a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b68e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b692:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800b74c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b69a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b69e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b6ae:	e021      	b.n	800b6f4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	ee07 3a90 	vmov	s15, r3
 800b6b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ba:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800b754 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b6be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6c2:	4b1e      	ldr	r3, [pc, #120]	@ (800b73c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6ca:	ee07 3a90 	vmov	s15, r3
 800b6ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6d2:	ed97 6a02 	vldr	s12, [r7, #8]
 800b6d6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800b74c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b6da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b6f2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b6f4:	4b11      	ldr	r3, [pc, #68]	@ (800b73c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6f8:	0a5b      	lsrs	r3, r3, #9
 800b6fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6fe:	3301      	adds	r3, #1
 800b700:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	ee07 3a90 	vmov	s15, r3
 800b708:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b70c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b710:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b714:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b718:	ee17 3a90 	vmov	r3, s15
 800b71c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b71e:	e005      	b.n	800b72c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b720:	2300      	movs	r3, #0
 800b722:	61bb      	str	r3, [r7, #24]
      break;
 800b724:	e002      	b.n	800b72c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b726:	4b07      	ldr	r3, [pc, #28]	@ (800b744 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b728:	61bb      	str	r3, [r7, #24]
      break;
 800b72a:	bf00      	nop
  }

  return sysclockfreq;
 800b72c:	69bb      	ldr	r3, [r7, #24]
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3724      	adds	r7, #36	@ 0x24
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr
 800b73a:	bf00      	nop
 800b73c:	58024400 	.word	0x58024400
 800b740:	03d09000 	.word	0x03d09000
 800b744:	003d0900 	.word	0x003d0900
 800b748:	007a1200 	.word	0x007a1200
 800b74c:	46000000 	.word	0x46000000
 800b750:	4c742400 	.word	0x4c742400
 800b754:	4a742400 	.word	0x4a742400
 800b758:	4af42400 	.word	0x4af42400

0800b75c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b082      	sub	sp, #8
 800b760:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b762:	f7ff fe81 	bl	800b468 <HAL_RCC_GetSysClockFreq>
 800b766:	4602      	mov	r2, r0
 800b768:	4b10      	ldr	r3, [pc, #64]	@ (800b7ac <HAL_RCC_GetHCLKFreq+0x50>)
 800b76a:	699b      	ldr	r3, [r3, #24]
 800b76c:	0a1b      	lsrs	r3, r3, #8
 800b76e:	f003 030f 	and.w	r3, r3, #15
 800b772:	490f      	ldr	r1, [pc, #60]	@ (800b7b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800b774:	5ccb      	ldrb	r3, [r1, r3]
 800b776:	f003 031f 	and.w	r3, r3, #31
 800b77a:	fa22 f303 	lsr.w	r3, r2, r3
 800b77e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b780:	4b0a      	ldr	r3, [pc, #40]	@ (800b7ac <HAL_RCC_GetHCLKFreq+0x50>)
 800b782:	699b      	ldr	r3, [r3, #24]
 800b784:	f003 030f 	and.w	r3, r3, #15
 800b788:	4a09      	ldr	r2, [pc, #36]	@ (800b7b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800b78a:	5cd3      	ldrb	r3, [r2, r3]
 800b78c:	f003 031f 	and.w	r3, r3, #31
 800b790:	687a      	ldr	r2, [r7, #4]
 800b792:	fa22 f303 	lsr.w	r3, r2, r3
 800b796:	4a07      	ldr	r2, [pc, #28]	@ (800b7b4 <HAL_RCC_GetHCLKFreq+0x58>)
 800b798:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b79a:	4a07      	ldr	r2, [pc, #28]	@ (800b7b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b7a0:	4b04      	ldr	r3, [pc, #16]	@ (800b7b4 <HAL_RCC_GetHCLKFreq+0x58>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3708      	adds	r7, #8
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	58024400 	.word	0x58024400
 800b7b0:	080143b8 	.word	0x080143b8
 800b7b4:	2400003c 	.word	0x2400003c
 800b7b8:	24000038 	.word	0x24000038

0800b7bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b7c0:	f7ff ffcc 	bl	800b75c <HAL_RCC_GetHCLKFreq>
 800b7c4:	4602      	mov	r2, r0
 800b7c6:	4b06      	ldr	r3, [pc, #24]	@ (800b7e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b7c8:	69db      	ldr	r3, [r3, #28]
 800b7ca:	091b      	lsrs	r3, r3, #4
 800b7cc:	f003 0307 	and.w	r3, r3, #7
 800b7d0:	4904      	ldr	r1, [pc, #16]	@ (800b7e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b7d2:	5ccb      	ldrb	r3, [r1, r3]
 800b7d4:	f003 031f 	and.w	r3, r3, #31
 800b7d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	bd80      	pop	{r7, pc}
 800b7e0:	58024400 	.word	0x58024400
 800b7e4:	080143b8 	.word	0x080143b8

0800b7e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b7ec:	f7ff ffb6 	bl	800b75c <HAL_RCC_GetHCLKFreq>
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	4b06      	ldr	r3, [pc, #24]	@ (800b80c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b7f4:	69db      	ldr	r3, [r3, #28]
 800b7f6:	0a1b      	lsrs	r3, r3, #8
 800b7f8:	f003 0307 	and.w	r3, r3, #7
 800b7fc:	4904      	ldr	r1, [pc, #16]	@ (800b810 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b7fe:	5ccb      	ldrb	r3, [r1, r3]
 800b800:	f003 031f 	and.w	r3, r3, #31
 800b804:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b808:	4618      	mov	r0, r3
 800b80a:	bd80      	pop	{r7, pc}
 800b80c:	58024400 	.word	0x58024400
 800b810:	080143b8 	.word	0x080143b8

0800b814 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b818:	b0c6      	sub	sp, #280	@ 0x118
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b820:	2300      	movs	r3, #0
 800b822:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b826:	2300      	movs	r3, #0
 800b828:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b82c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b834:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800b838:	2500      	movs	r5, #0
 800b83a:	ea54 0305 	orrs.w	r3, r4, r5
 800b83e:	d049      	beq.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b844:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b846:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b84a:	d02f      	beq.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b84c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b850:	d828      	bhi.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b852:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b856:	d01a      	beq.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b858:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b85c:	d822      	bhi.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d003      	beq.n	800b86a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b862:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b866:	d007      	beq.n	800b878 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b868:	e01c      	b.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b86a:	4bab      	ldr	r3, [pc, #684]	@ (800bb18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b86c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b86e:	4aaa      	ldr	r2, [pc, #680]	@ (800bb18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b870:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b874:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b876:	e01a      	b.n	800b8ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b87c:	3308      	adds	r3, #8
 800b87e:	2102      	movs	r1, #2
 800b880:	4618      	mov	r0, r3
 800b882:	f002 fa49 	bl	800dd18 <RCCEx_PLL2_Config>
 800b886:	4603      	mov	r3, r0
 800b888:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b88c:	e00f      	b.n	800b8ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b88e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b892:	3328      	adds	r3, #40	@ 0x28
 800b894:	2102      	movs	r1, #2
 800b896:	4618      	mov	r0, r3
 800b898:	f002 faf0 	bl	800de7c <RCCEx_PLL3_Config>
 800b89c:	4603      	mov	r3, r0
 800b89e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b8a2:	e004      	b.n	800b8ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b8aa:	e000      	b.n	800b8ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b8ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d10a      	bne.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b8b6:	4b98      	ldr	r3, [pc, #608]	@ (800bb18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b8b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8ba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b8be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b8c4:	4a94      	ldr	r2, [pc, #592]	@ (800bb18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b8c6:	430b      	orrs	r3, r1
 800b8c8:	6513      	str	r3, [r2, #80]	@ 0x50
 800b8ca:	e003      	b.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b8d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b8d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8dc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800b8e0:	f04f 0900 	mov.w	r9, #0
 800b8e4:	ea58 0309 	orrs.w	r3, r8, r9
 800b8e8:	d047      	beq.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b8ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8f0:	2b04      	cmp	r3, #4
 800b8f2:	d82a      	bhi.n	800b94a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b8f4:	a201      	add	r2, pc, #4	@ (adr r2, 800b8fc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b8f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8fa:	bf00      	nop
 800b8fc:	0800b911 	.word	0x0800b911
 800b900:	0800b91f 	.word	0x0800b91f
 800b904:	0800b935 	.word	0x0800b935
 800b908:	0800b953 	.word	0x0800b953
 800b90c:	0800b953 	.word	0x0800b953
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b910:	4b81      	ldr	r3, [pc, #516]	@ (800bb18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b914:	4a80      	ldr	r2, [pc, #512]	@ (800bb18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b916:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b91a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b91c:	e01a      	b.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b91e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b922:	3308      	adds	r3, #8
 800b924:	2100      	movs	r1, #0
 800b926:	4618      	mov	r0, r3
 800b928:	f002 f9f6 	bl	800dd18 <RCCEx_PLL2_Config>
 800b92c:	4603      	mov	r3, r0
 800b92e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b932:	e00f      	b.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b938:	3328      	adds	r3, #40	@ 0x28
 800b93a:	2100      	movs	r1, #0
 800b93c:	4618      	mov	r0, r3
 800b93e:	f002 fa9d 	bl	800de7c <RCCEx_PLL3_Config>
 800b942:	4603      	mov	r3, r0
 800b944:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b948:	e004      	b.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b94a:	2301      	movs	r3, #1
 800b94c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b950:	e000      	b.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b952:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b954:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d10a      	bne.n	800b972 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b95c:	4b6e      	ldr	r3, [pc, #440]	@ (800bb18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b95e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b960:	f023 0107 	bic.w	r1, r3, #7
 800b964:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b96a:	4a6b      	ldr	r2, [pc, #428]	@ (800bb18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b96c:	430b      	orrs	r3, r1
 800b96e:	6513      	str	r3, [r2, #80]	@ 0x50
 800b970:	e003      	b.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b972:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b976:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b97a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b982:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800b986:	f04f 0b00 	mov.w	fp, #0
 800b98a:	ea5a 030b 	orrs.w	r3, sl, fp
 800b98e:	d05b      	beq.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b994:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b998:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800b99c:	d03b      	beq.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800b99e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800b9a2:	d834      	bhi.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b9a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b9a8:	d037      	beq.n	800ba1a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b9aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b9ae:	d82e      	bhi.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b9b0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b9b4:	d033      	beq.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800b9b6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b9ba:	d828      	bhi.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b9bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b9c0:	d01a      	beq.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800b9c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b9c6:	d822      	bhi.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d003      	beq.n	800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800b9cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b9d0:	d007      	beq.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800b9d2:	e01c      	b.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9d4:	4b50      	ldr	r3, [pc, #320]	@ (800bb18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b9d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9d8:	4a4f      	ldr	r2, [pc, #316]	@ (800bb18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b9da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b9de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b9e0:	e01e      	b.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b9e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9e6:	3308      	adds	r3, #8
 800b9e8:	2100      	movs	r1, #0
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f002 f994 	bl	800dd18 <RCCEx_PLL2_Config>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b9f6:	e013      	b.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b9f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9fc:	3328      	adds	r3, #40	@ 0x28
 800b9fe:	2100      	movs	r1, #0
 800ba00:	4618      	mov	r0, r3
 800ba02:	f002 fa3b 	bl	800de7c <RCCEx_PLL3_Config>
 800ba06:	4603      	mov	r3, r0
 800ba08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba0c:	e008      	b.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ba0e:	2301      	movs	r3, #1
 800ba10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ba14:	e004      	b.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ba16:	bf00      	nop
 800ba18:	e002      	b.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ba1a:	bf00      	nop
 800ba1c:	e000      	b.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ba1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d10b      	bne.n	800ba40 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ba28:	4b3b      	ldr	r3, [pc, #236]	@ (800bb18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba2c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800ba30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ba38:	4a37      	ldr	r2, [pc, #220]	@ (800bb18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba3a:	430b      	orrs	r3, r1
 800ba3c:	6593      	str	r3, [r2, #88]	@ 0x58
 800ba3e:	e003      	b.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ba44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ba48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba50:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800ba54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800ba58:	2300      	movs	r3, #0
 800ba5a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ba5e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800ba62:	460b      	mov	r3, r1
 800ba64:	4313      	orrs	r3, r2
 800ba66:	d05d      	beq.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ba68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba6c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ba70:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800ba74:	d03b      	beq.n	800baee <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800ba76:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800ba7a:	d834      	bhi.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ba7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ba80:	d037      	beq.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800ba82:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ba86:	d82e      	bhi.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ba88:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ba8c:	d033      	beq.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800ba8e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ba92:	d828      	bhi.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ba94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ba98:	d01a      	beq.n	800bad0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800ba9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ba9e:	d822      	bhi.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d003      	beq.n	800baac <HAL_RCCEx_PeriphCLKConfig+0x298>
 800baa4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800baa8:	d007      	beq.n	800baba <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800baaa:	e01c      	b.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800baac:	4b1a      	ldr	r3, [pc, #104]	@ (800bb18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800baae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bab0:	4a19      	ldr	r2, [pc, #100]	@ (800bb18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bab2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bab6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bab8:	e01e      	b.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800baba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800babe:	3308      	adds	r3, #8
 800bac0:	2100      	movs	r1, #0
 800bac2:	4618      	mov	r0, r3
 800bac4:	f002 f928 	bl	800dd18 <RCCEx_PLL2_Config>
 800bac8:	4603      	mov	r3, r0
 800baca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bace:	e013      	b.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bad4:	3328      	adds	r3, #40	@ 0x28
 800bad6:	2100      	movs	r1, #0
 800bad8:	4618      	mov	r0, r3
 800bada:	f002 f9cf 	bl	800de7c <RCCEx_PLL3_Config>
 800bade:	4603      	mov	r3, r0
 800bae0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bae4:	e008      	b.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bae6:	2301      	movs	r3, #1
 800bae8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800baec:	e004      	b.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800baee:	bf00      	nop
 800baf0:	e002      	b.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800baf2:	bf00      	nop
 800baf4:	e000      	b.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800baf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800baf8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d10d      	bne.n	800bb1c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800bb00:	4b05      	ldr	r3, [pc, #20]	@ (800bb18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb04:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800bb08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb0c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bb10:	4a01      	ldr	r2, [pc, #4]	@ (800bb18 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb12:	430b      	orrs	r3, r1
 800bb14:	6593      	str	r3, [r2, #88]	@ 0x58
 800bb16:	e005      	b.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800bb18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bb20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800bb24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800bb30:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800bb34:	2300      	movs	r3, #0
 800bb36:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bb3a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800bb3e:	460b      	mov	r3, r1
 800bb40:	4313      	orrs	r3, r2
 800bb42:	d03a      	beq.n	800bbba <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800bb44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb4a:	2b30      	cmp	r3, #48	@ 0x30
 800bb4c:	d01f      	beq.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800bb4e:	2b30      	cmp	r3, #48	@ 0x30
 800bb50:	d819      	bhi.n	800bb86 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800bb52:	2b20      	cmp	r3, #32
 800bb54:	d00c      	beq.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800bb56:	2b20      	cmp	r3, #32
 800bb58:	d815      	bhi.n	800bb86 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d019      	beq.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800bb5e:	2b10      	cmp	r3, #16
 800bb60:	d111      	bne.n	800bb86 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb62:	4baa      	ldr	r3, [pc, #680]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb66:	4aa9      	ldr	r2, [pc, #676]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bb6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800bb6e:	e011      	b.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bb70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb74:	3308      	adds	r3, #8
 800bb76:	2102      	movs	r1, #2
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f002 f8cd 	bl	800dd18 <RCCEx_PLL2_Config>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800bb84:	e006      	b.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bb86:	2301      	movs	r3, #1
 800bb88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bb8c:	e002      	b.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800bb8e:	bf00      	nop
 800bb90:	e000      	b.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800bb92:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d10a      	bne.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800bb9c:	4b9b      	ldr	r3, [pc, #620]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bba0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800bba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bbaa:	4a98      	ldr	r2, [pc, #608]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbac:	430b      	orrs	r3, r1
 800bbae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bbb0:	e003      	b.n	800bbba <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bbb6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bbba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800bbc6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bbca:	2300      	movs	r3, #0
 800bbcc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bbd0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800bbd4:	460b      	mov	r3, r1
 800bbd6:	4313      	orrs	r3, r2
 800bbd8:	d051      	beq.n	800bc7e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800bbda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bbe0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bbe4:	d035      	beq.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800bbe6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bbea:	d82e      	bhi.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bbec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bbf0:	d031      	beq.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800bbf2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bbf6:	d828      	bhi.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bbf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bbfc:	d01a      	beq.n	800bc34 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800bbfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bc02:	d822      	bhi.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d003      	beq.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800bc08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc0c:	d007      	beq.n	800bc1e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800bc0e:	e01c      	b.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc10:	4b7e      	ldr	r3, [pc, #504]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc14:	4a7d      	ldr	r2, [pc, #500]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bc1c:	e01c      	b.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc22:	3308      	adds	r3, #8
 800bc24:	2100      	movs	r1, #0
 800bc26:	4618      	mov	r0, r3
 800bc28:	f002 f876 	bl	800dd18 <RCCEx_PLL2_Config>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bc32:	e011      	b.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bc34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc38:	3328      	adds	r3, #40	@ 0x28
 800bc3a:	2100      	movs	r1, #0
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f002 f91d 	bl	800de7c <RCCEx_PLL3_Config>
 800bc42:	4603      	mov	r3, r0
 800bc44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bc48:	e006      	b.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bc50:	e002      	b.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800bc52:	bf00      	nop
 800bc54:	e000      	b.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800bc56:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d10a      	bne.n	800bc76 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bc60:	4b6a      	ldr	r3, [pc, #424]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc64:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800bc68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bc6e:	4a67      	ldr	r2, [pc, #412]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc70:	430b      	orrs	r3, r1
 800bc72:	6513      	str	r3, [r2, #80]	@ 0x50
 800bc74:	e003      	b.n	800bc7e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc7a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bc7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc86:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800bc8a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bc8e:	2300      	movs	r3, #0
 800bc90:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bc94:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800bc98:	460b      	mov	r3, r1
 800bc9a:	4313      	orrs	r3, r2
 800bc9c:	d053      	beq.n	800bd46 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800bc9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bca2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bca4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bca8:	d033      	beq.n	800bd12 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800bcaa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bcae:	d82c      	bhi.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bcb0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bcb4:	d02f      	beq.n	800bd16 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800bcb6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bcba:	d826      	bhi.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bcbc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bcc0:	d02b      	beq.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x506>
 800bcc2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bcc6:	d820      	bhi.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bcc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bccc:	d012      	beq.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800bcce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bcd2:	d81a      	bhi.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d022      	beq.n	800bd1e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800bcd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bcdc:	d115      	bne.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bcde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bce2:	3308      	adds	r3, #8
 800bce4:	2101      	movs	r1, #1
 800bce6:	4618      	mov	r0, r3
 800bce8:	f002 f816 	bl	800dd18 <RCCEx_PLL2_Config>
 800bcec:	4603      	mov	r3, r0
 800bcee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bcf2:	e015      	b.n	800bd20 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bcf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcf8:	3328      	adds	r3, #40	@ 0x28
 800bcfa:	2101      	movs	r1, #1
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f002 f8bd 	bl	800de7c <RCCEx_PLL3_Config>
 800bd02:	4603      	mov	r3, r0
 800bd04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bd08:	e00a      	b.n	800bd20 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bd10:	e006      	b.n	800bd20 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bd12:	bf00      	nop
 800bd14:	e004      	b.n	800bd20 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bd16:	bf00      	nop
 800bd18:	e002      	b.n	800bd20 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bd1a:	bf00      	nop
 800bd1c:	e000      	b.n	800bd20 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bd1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d10a      	bne.n	800bd3e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bd28:	4b38      	ldr	r3, [pc, #224]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd2c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800bd30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bd36:	4a35      	ldr	r2, [pc, #212]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd38:	430b      	orrs	r3, r1
 800bd3a:	6513      	str	r3, [r2, #80]	@ 0x50
 800bd3c:	e003      	b.n	800bd46 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd42:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bd46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd4e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800bd52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bd56:	2300      	movs	r3, #0
 800bd58:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800bd5c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800bd60:	460b      	mov	r3, r1
 800bd62:	4313      	orrs	r3, r2
 800bd64:	d058      	beq.n	800be18 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800bd66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800bd6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bd72:	d033      	beq.n	800bddc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800bd74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bd78:	d82c      	bhi.n	800bdd4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bd7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd7e:	d02f      	beq.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800bd80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd84:	d826      	bhi.n	800bdd4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bd86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bd8a:	d02b      	beq.n	800bde4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800bd8c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bd90:	d820      	bhi.n	800bdd4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bd92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd96:	d012      	beq.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800bd98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd9c:	d81a      	bhi.n	800bdd4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d022      	beq.n	800bde8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800bda2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bda6:	d115      	bne.n	800bdd4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bda8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdac:	3308      	adds	r3, #8
 800bdae:	2101      	movs	r1, #1
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f001 ffb1 	bl	800dd18 <RCCEx_PLL2_Config>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bdbc:	e015      	b.n	800bdea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bdbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdc2:	3328      	adds	r3, #40	@ 0x28
 800bdc4:	2101      	movs	r1, #1
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f002 f858 	bl	800de7c <RCCEx_PLL3_Config>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bdd2:	e00a      	b.n	800bdea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bdda:	e006      	b.n	800bdea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bddc:	bf00      	nop
 800bdde:	e004      	b.n	800bdea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bde0:	bf00      	nop
 800bde2:	e002      	b.n	800bdea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bde4:	bf00      	nop
 800bde6:	e000      	b.n	800bdea <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bde8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d10e      	bne.n	800be10 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bdf2:	4b06      	ldr	r3, [pc, #24]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bdf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bdf6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800bdfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdfe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800be02:	4a02      	ldr	r2, [pc, #8]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800be04:	430b      	orrs	r3, r1
 800be06:	6593      	str	r3, [r2, #88]	@ 0x58
 800be08:	e006      	b.n	800be18 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800be0a:	bf00      	nop
 800be0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800be18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be20:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800be24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800be28:	2300      	movs	r3, #0
 800be2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800be2e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800be32:	460b      	mov	r3, r1
 800be34:	4313      	orrs	r3, r2
 800be36:	d037      	beq.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800be38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800be42:	d00e      	beq.n	800be62 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800be44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800be48:	d816      	bhi.n	800be78 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d018      	beq.n	800be80 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800be4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800be52:	d111      	bne.n	800be78 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be54:	4bc4      	ldr	r3, [pc, #784]	@ (800c168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be58:	4ac3      	ldr	r2, [pc, #780]	@ (800c168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800be5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800be60:	e00f      	b.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be66:	3308      	adds	r3, #8
 800be68:	2101      	movs	r1, #1
 800be6a:	4618      	mov	r0, r3
 800be6c:	f001 ff54 	bl	800dd18 <RCCEx_PLL2_Config>
 800be70:	4603      	mov	r3, r0
 800be72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800be76:	e004      	b.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be78:	2301      	movs	r3, #1
 800be7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800be7e:	e000      	b.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800be80:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be86:	2b00      	cmp	r3, #0
 800be88:	d10a      	bne.n	800bea0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800be8a:	4bb7      	ldr	r3, [pc, #732]	@ (800c168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be8e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800be92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be98:	4ab3      	ldr	r2, [pc, #716]	@ (800c168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be9a:	430b      	orrs	r3, r1
 800be9c:	6513      	str	r3, [r2, #80]	@ 0x50
 800be9e:	e003      	b.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bea0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bea4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800beac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800beb4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800beb8:	2300      	movs	r3, #0
 800beba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bebe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800bec2:	460b      	mov	r3, r1
 800bec4:	4313      	orrs	r3, r2
 800bec6:	d039      	beq.n	800bf3c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800becc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bece:	2b03      	cmp	r3, #3
 800bed0:	d81c      	bhi.n	800bf0c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800bed2:	a201      	add	r2, pc, #4	@ (adr r2, 800bed8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800bed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bed8:	0800bf15 	.word	0x0800bf15
 800bedc:	0800bee9 	.word	0x0800bee9
 800bee0:	0800bef7 	.word	0x0800bef7
 800bee4:	0800bf15 	.word	0x0800bf15
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bee8:	4b9f      	ldr	r3, [pc, #636]	@ (800c168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800beea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beec:	4a9e      	ldr	r2, [pc, #632]	@ (800c168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800beee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bef2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bef4:	e00f      	b.n	800bf16 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800befa:	3308      	adds	r3, #8
 800befc:	2102      	movs	r1, #2
 800befe:	4618      	mov	r0, r3
 800bf00:	f001 ff0a 	bl	800dd18 <RCCEx_PLL2_Config>
 800bf04:	4603      	mov	r3, r0
 800bf06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bf0a:	e004      	b.n	800bf16 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bf12:	e000      	b.n	800bf16 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800bf14:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d10a      	bne.n	800bf34 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bf1e:	4b92      	ldr	r3, [pc, #584]	@ (800c168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf22:	f023 0103 	bic.w	r1, r3, #3
 800bf26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf2c:	4a8e      	ldr	r2, [pc, #568]	@ (800c168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf2e:	430b      	orrs	r3, r1
 800bf30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bf32:	e003      	b.n	800bf3c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bf3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf44:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800bf48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bf52:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800bf56:	460b      	mov	r3, r1
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	f000 8099 	beq.w	800c090 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bf5e:	4b83      	ldr	r3, [pc, #524]	@ (800c16c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	4a82      	ldr	r2, [pc, #520]	@ (800c16c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bf64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bf68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bf6a:	f7f8 fa3d 	bl	80043e8 <HAL_GetTick>
 800bf6e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bf72:	e00b      	b.n	800bf8c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bf74:	f7f8 fa38 	bl	80043e8 <HAL_GetTick>
 800bf78:	4602      	mov	r2, r0
 800bf7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800bf7e:	1ad3      	subs	r3, r2, r3
 800bf80:	2b64      	cmp	r3, #100	@ 0x64
 800bf82:	d903      	bls.n	800bf8c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800bf84:	2303      	movs	r3, #3
 800bf86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bf8a:	e005      	b.n	800bf98 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bf8c:	4b77      	ldr	r3, [pc, #476]	@ (800c16c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d0ed      	beq.n	800bf74 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800bf98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d173      	bne.n	800c088 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bfa0:	4b71      	ldr	r3, [pc, #452]	@ (800c168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfa2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800bfa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfa8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bfac:	4053      	eors	r3, r2
 800bfae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d015      	beq.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bfb6:	4b6c      	ldr	r3, [pc, #432]	@ (800c168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bfba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bfbe:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bfc2:	4b69      	ldr	r3, [pc, #420]	@ (800c168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bfc6:	4a68      	ldr	r2, [pc, #416]	@ (800c168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bfcc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bfce:	4b66      	ldr	r3, [pc, #408]	@ (800c168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bfd2:	4a65      	ldr	r2, [pc, #404]	@ (800c168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bfd8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bfda:	4a63      	ldr	r2, [pc, #396]	@ (800c168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bfe0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bfe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfe6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bfea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bfee:	d118      	bne.n	800c022 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bff0:	f7f8 f9fa 	bl	80043e8 <HAL_GetTick>
 800bff4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bff8:	e00d      	b.n	800c016 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bffa:	f7f8 f9f5 	bl	80043e8 <HAL_GetTick>
 800bffe:	4602      	mov	r2, r0
 800c000:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c004:	1ad2      	subs	r2, r2, r3
 800c006:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c00a:	429a      	cmp	r2, r3
 800c00c:	d903      	bls.n	800c016 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800c00e:	2303      	movs	r3, #3
 800c010:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800c014:	e005      	b.n	800c022 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c016:	4b54      	ldr	r3, [pc, #336]	@ (800c168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c01a:	f003 0302 	and.w	r3, r3, #2
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d0eb      	beq.n	800bffa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800c022:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c026:	2b00      	cmp	r3, #0
 800c028:	d129      	bne.n	800c07e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c02a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c02e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c036:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c03a:	d10e      	bne.n	800c05a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800c03c:	4b4a      	ldr	r3, [pc, #296]	@ (800c168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c03e:	691b      	ldr	r3, [r3, #16]
 800c040:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800c044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c048:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c04c:	091a      	lsrs	r2, r3, #4
 800c04e:	4b48      	ldr	r3, [pc, #288]	@ (800c170 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800c050:	4013      	ands	r3, r2
 800c052:	4a45      	ldr	r2, [pc, #276]	@ (800c168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c054:	430b      	orrs	r3, r1
 800c056:	6113      	str	r3, [r2, #16]
 800c058:	e005      	b.n	800c066 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800c05a:	4b43      	ldr	r3, [pc, #268]	@ (800c168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c05c:	691b      	ldr	r3, [r3, #16]
 800c05e:	4a42      	ldr	r2, [pc, #264]	@ (800c168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c060:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c064:	6113      	str	r3, [r2, #16]
 800c066:	4b40      	ldr	r3, [pc, #256]	@ (800c168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c068:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800c06a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c06e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c072:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c076:	4a3c      	ldr	r2, [pc, #240]	@ (800c168 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c078:	430b      	orrs	r3, r1
 800c07a:	6713      	str	r3, [r2, #112]	@ 0x70
 800c07c:	e008      	b.n	800c090 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c07e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c082:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800c086:	e003      	b.n	800c090 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c088:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c08c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c098:	f002 0301 	and.w	r3, r2, #1
 800c09c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c0a6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800c0aa:	460b      	mov	r3, r1
 800c0ac:	4313      	orrs	r3, r2
 800c0ae:	f000 808f 	beq.w	800c1d0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c0b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c0b8:	2b28      	cmp	r3, #40	@ 0x28
 800c0ba:	d871      	bhi.n	800c1a0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800c0bc:	a201      	add	r2, pc, #4	@ (adr r2, 800c0c4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800c0be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0c2:	bf00      	nop
 800c0c4:	0800c1a9 	.word	0x0800c1a9
 800c0c8:	0800c1a1 	.word	0x0800c1a1
 800c0cc:	0800c1a1 	.word	0x0800c1a1
 800c0d0:	0800c1a1 	.word	0x0800c1a1
 800c0d4:	0800c1a1 	.word	0x0800c1a1
 800c0d8:	0800c1a1 	.word	0x0800c1a1
 800c0dc:	0800c1a1 	.word	0x0800c1a1
 800c0e0:	0800c1a1 	.word	0x0800c1a1
 800c0e4:	0800c175 	.word	0x0800c175
 800c0e8:	0800c1a1 	.word	0x0800c1a1
 800c0ec:	0800c1a1 	.word	0x0800c1a1
 800c0f0:	0800c1a1 	.word	0x0800c1a1
 800c0f4:	0800c1a1 	.word	0x0800c1a1
 800c0f8:	0800c1a1 	.word	0x0800c1a1
 800c0fc:	0800c1a1 	.word	0x0800c1a1
 800c100:	0800c1a1 	.word	0x0800c1a1
 800c104:	0800c18b 	.word	0x0800c18b
 800c108:	0800c1a1 	.word	0x0800c1a1
 800c10c:	0800c1a1 	.word	0x0800c1a1
 800c110:	0800c1a1 	.word	0x0800c1a1
 800c114:	0800c1a1 	.word	0x0800c1a1
 800c118:	0800c1a1 	.word	0x0800c1a1
 800c11c:	0800c1a1 	.word	0x0800c1a1
 800c120:	0800c1a1 	.word	0x0800c1a1
 800c124:	0800c1a9 	.word	0x0800c1a9
 800c128:	0800c1a1 	.word	0x0800c1a1
 800c12c:	0800c1a1 	.word	0x0800c1a1
 800c130:	0800c1a1 	.word	0x0800c1a1
 800c134:	0800c1a1 	.word	0x0800c1a1
 800c138:	0800c1a1 	.word	0x0800c1a1
 800c13c:	0800c1a1 	.word	0x0800c1a1
 800c140:	0800c1a1 	.word	0x0800c1a1
 800c144:	0800c1a9 	.word	0x0800c1a9
 800c148:	0800c1a1 	.word	0x0800c1a1
 800c14c:	0800c1a1 	.word	0x0800c1a1
 800c150:	0800c1a1 	.word	0x0800c1a1
 800c154:	0800c1a1 	.word	0x0800c1a1
 800c158:	0800c1a1 	.word	0x0800c1a1
 800c15c:	0800c1a1 	.word	0x0800c1a1
 800c160:	0800c1a1 	.word	0x0800c1a1
 800c164:	0800c1a9 	.word	0x0800c1a9
 800c168:	58024400 	.word	0x58024400
 800c16c:	58024800 	.word	0x58024800
 800c170:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c178:	3308      	adds	r3, #8
 800c17a:	2101      	movs	r1, #1
 800c17c:	4618      	mov	r0, r3
 800c17e:	f001 fdcb 	bl	800dd18 <RCCEx_PLL2_Config>
 800c182:	4603      	mov	r3, r0
 800c184:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c188:	e00f      	b.n	800c1aa <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c18a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c18e:	3328      	adds	r3, #40	@ 0x28
 800c190:	2101      	movs	r1, #1
 800c192:	4618      	mov	r0, r3
 800c194:	f001 fe72 	bl	800de7c <RCCEx_PLL3_Config>
 800c198:	4603      	mov	r3, r0
 800c19a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c19e:	e004      	b.n	800c1aa <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c1a6:	e000      	b.n	800c1aa <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800c1a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d10a      	bne.n	800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c1b2:	4bbf      	ldr	r3, [pc, #764]	@ (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c1b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1b6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800c1ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c1c0:	4abb      	ldr	r2, [pc, #748]	@ (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c1c2:	430b      	orrs	r3, r1
 800c1c4:	6553      	str	r3, [r2, #84]	@ 0x54
 800c1c6:	e003      	b.n	800c1d0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c1cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c1d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d8:	f002 0302 	and.w	r3, r2, #2
 800c1dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c1e6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800c1ea:	460b      	mov	r3, r1
 800c1ec:	4313      	orrs	r3, r2
 800c1ee:	d041      	beq.n	800c274 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c1f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c1f6:	2b05      	cmp	r3, #5
 800c1f8:	d824      	bhi.n	800c244 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800c1fa:	a201      	add	r2, pc, #4	@ (adr r2, 800c200 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800c1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c200:	0800c24d 	.word	0x0800c24d
 800c204:	0800c219 	.word	0x0800c219
 800c208:	0800c22f 	.word	0x0800c22f
 800c20c:	0800c24d 	.word	0x0800c24d
 800c210:	0800c24d 	.word	0x0800c24d
 800c214:	0800c24d 	.word	0x0800c24d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c21c:	3308      	adds	r3, #8
 800c21e:	2101      	movs	r1, #1
 800c220:	4618      	mov	r0, r3
 800c222:	f001 fd79 	bl	800dd18 <RCCEx_PLL2_Config>
 800c226:	4603      	mov	r3, r0
 800c228:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c22c:	e00f      	b.n	800c24e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c22e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c232:	3328      	adds	r3, #40	@ 0x28
 800c234:	2101      	movs	r1, #1
 800c236:	4618      	mov	r0, r3
 800c238:	f001 fe20 	bl	800de7c <RCCEx_PLL3_Config>
 800c23c:	4603      	mov	r3, r0
 800c23e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c242:	e004      	b.n	800c24e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c244:	2301      	movs	r3, #1
 800c246:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c24a:	e000      	b.n	800c24e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800c24c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c24e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c252:	2b00      	cmp	r3, #0
 800c254:	d10a      	bne.n	800c26c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c256:	4b96      	ldr	r3, [pc, #600]	@ (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c25a:	f023 0107 	bic.w	r1, r3, #7
 800c25e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c262:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c264:	4a92      	ldr	r2, [pc, #584]	@ (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c266:	430b      	orrs	r3, r1
 800c268:	6553      	str	r3, [r2, #84]	@ 0x54
 800c26a:	e003      	b.n	800c274 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c26c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c270:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27c:	f002 0304 	and.w	r3, r2, #4
 800c280:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c284:	2300      	movs	r3, #0
 800c286:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c28a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c28e:	460b      	mov	r3, r1
 800c290:	4313      	orrs	r3, r2
 800c292:	d044      	beq.n	800c31e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c298:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c29c:	2b05      	cmp	r3, #5
 800c29e:	d825      	bhi.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800c2a0:	a201      	add	r2, pc, #4	@ (adr r2, 800c2a8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800c2a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2a6:	bf00      	nop
 800c2a8:	0800c2f5 	.word	0x0800c2f5
 800c2ac:	0800c2c1 	.word	0x0800c2c1
 800c2b0:	0800c2d7 	.word	0x0800c2d7
 800c2b4:	0800c2f5 	.word	0x0800c2f5
 800c2b8:	0800c2f5 	.word	0x0800c2f5
 800c2bc:	0800c2f5 	.word	0x0800c2f5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c2c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2c4:	3308      	adds	r3, #8
 800c2c6:	2101      	movs	r1, #1
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f001 fd25 	bl	800dd18 <RCCEx_PLL2_Config>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c2d4:	e00f      	b.n	800c2f6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c2d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2da:	3328      	adds	r3, #40	@ 0x28
 800c2dc:	2101      	movs	r1, #1
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f001 fdcc 	bl	800de7c <RCCEx_PLL3_Config>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c2ea:	e004      	b.n	800c2f6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c2f2:	e000      	b.n	800c2f6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800c2f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c2f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d10b      	bne.n	800c316 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c2fe:	4b6c      	ldr	r3, [pc, #432]	@ (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c302:	f023 0107 	bic.w	r1, r3, #7
 800c306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c30a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c30e:	4a68      	ldr	r2, [pc, #416]	@ (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c310:	430b      	orrs	r3, r1
 800c312:	6593      	str	r3, [r2, #88]	@ 0x58
 800c314:	e003      	b.n	800c31e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c316:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c31a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c31e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c326:	f002 0320 	and.w	r3, r2, #32
 800c32a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c32e:	2300      	movs	r3, #0
 800c330:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c334:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800c338:	460b      	mov	r3, r1
 800c33a:	4313      	orrs	r3, r2
 800c33c:	d055      	beq.n	800c3ea <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c33e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c342:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c346:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c34a:	d033      	beq.n	800c3b4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800c34c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c350:	d82c      	bhi.n	800c3ac <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c356:	d02f      	beq.n	800c3b8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c358:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c35c:	d826      	bhi.n	800c3ac <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c35e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c362:	d02b      	beq.n	800c3bc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c364:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c368:	d820      	bhi.n	800c3ac <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c36a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c36e:	d012      	beq.n	800c396 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800c370:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c374:	d81a      	bhi.n	800c3ac <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c376:	2b00      	cmp	r3, #0
 800c378:	d022      	beq.n	800c3c0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c37a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c37e:	d115      	bne.n	800c3ac <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c384:	3308      	adds	r3, #8
 800c386:	2100      	movs	r1, #0
 800c388:	4618      	mov	r0, r3
 800c38a:	f001 fcc5 	bl	800dd18 <RCCEx_PLL2_Config>
 800c38e:	4603      	mov	r3, r0
 800c390:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c394:	e015      	b.n	800c3c2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c396:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c39a:	3328      	adds	r3, #40	@ 0x28
 800c39c:	2102      	movs	r1, #2
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f001 fd6c 	bl	800de7c <RCCEx_PLL3_Config>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c3aa:	e00a      	b.n	800c3c2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c3b2:	e006      	b.n	800c3c2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c3b4:	bf00      	nop
 800c3b6:	e004      	b.n	800c3c2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c3b8:	bf00      	nop
 800c3ba:	e002      	b.n	800c3c2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c3bc:	bf00      	nop
 800c3be:	e000      	b.n	800c3c2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c3c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d10b      	bne.n	800c3e2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c3ca:	4b39      	ldr	r3, [pc, #228]	@ (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c3cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3ce:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c3d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c3da:	4a35      	ldr	r2, [pc, #212]	@ (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c3dc:	430b      	orrs	r3, r1
 800c3de:	6553      	str	r3, [r2, #84]	@ 0x54
 800c3e0:	e003      	b.n	800c3ea <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c3e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c3ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800c3f6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c400:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800c404:	460b      	mov	r3, r1
 800c406:	4313      	orrs	r3, r2
 800c408:	d058      	beq.n	800c4bc <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c40a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c40e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c412:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c416:	d033      	beq.n	800c480 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800c418:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c41c:	d82c      	bhi.n	800c478 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c41e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c422:	d02f      	beq.n	800c484 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c424:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c428:	d826      	bhi.n	800c478 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c42a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c42e:	d02b      	beq.n	800c488 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c430:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c434:	d820      	bhi.n	800c478 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c436:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c43a:	d012      	beq.n	800c462 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800c43c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c440:	d81a      	bhi.n	800c478 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c442:	2b00      	cmp	r3, #0
 800c444:	d022      	beq.n	800c48c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c446:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c44a:	d115      	bne.n	800c478 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c44c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c450:	3308      	adds	r3, #8
 800c452:	2100      	movs	r1, #0
 800c454:	4618      	mov	r0, r3
 800c456:	f001 fc5f 	bl	800dd18 <RCCEx_PLL2_Config>
 800c45a:	4603      	mov	r3, r0
 800c45c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c460:	e015      	b.n	800c48e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c462:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c466:	3328      	adds	r3, #40	@ 0x28
 800c468:	2102      	movs	r1, #2
 800c46a:	4618      	mov	r0, r3
 800c46c:	f001 fd06 	bl	800de7c <RCCEx_PLL3_Config>
 800c470:	4603      	mov	r3, r0
 800c472:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c476:	e00a      	b.n	800c48e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c478:	2301      	movs	r3, #1
 800c47a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c47e:	e006      	b.n	800c48e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c480:	bf00      	nop
 800c482:	e004      	b.n	800c48e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c484:	bf00      	nop
 800c486:	e002      	b.n	800c48e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c488:	bf00      	nop
 800c48a:	e000      	b.n	800c48e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c48c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c48e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c492:	2b00      	cmp	r3, #0
 800c494:	d10e      	bne.n	800c4b4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c496:	4b06      	ldr	r3, [pc, #24]	@ (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c49a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800c49e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c4a6:	4a02      	ldr	r2, [pc, #8]	@ (800c4b0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c4a8:	430b      	orrs	r3, r1
 800c4aa:	6593      	str	r3, [r2, #88]	@ 0x58
 800c4ac:	e006      	b.n	800c4bc <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800c4ae:	bf00      	nop
 800c4b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c4b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c4bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800c4c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c4d2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800c4d6:	460b      	mov	r3, r1
 800c4d8:	4313      	orrs	r3, r2
 800c4da:	d055      	beq.n	800c588 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c4dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c4e4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c4e8:	d033      	beq.n	800c552 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800c4ea:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c4ee:	d82c      	bhi.n	800c54a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c4f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c4f4:	d02f      	beq.n	800c556 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c4f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c4fa:	d826      	bhi.n	800c54a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c4fc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c500:	d02b      	beq.n	800c55a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c502:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c506:	d820      	bhi.n	800c54a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c508:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c50c:	d012      	beq.n	800c534 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800c50e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c512:	d81a      	bhi.n	800c54a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c514:	2b00      	cmp	r3, #0
 800c516:	d022      	beq.n	800c55e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c518:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c51c:	d115      	bne.n	800c54a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c51e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c522:	3308      	adds	r3, #8
 800c524:	2100      	movs	r1, #0
 800c526:	4618      	mov	r0, r3
 800c528:	f001 fbf6 	bl	800dd18 <RCCEx_PLL2_Config>
 800c52c:	4603      	mov	r3, r0
 800c52e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c532:	e015      	b.n	800c560 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c538:	3328      	adds	r3, #40	@ 0x28
 800c53a:	2102      	movs	r1, #2
 800c53c:	4618      	mov	r0, r3
 800c53e:	f001 fc9d 	bl	800de7c <RCCEx_PLL3_Config>
 800c542:	4603      	mov	r3, r0
 800c544:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c548:	e00a      	b.n	800c560 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c54a:	2301      	movs	r3, #1
 800c54c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c550:	e006      	b.n	800c560 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c552:	bf00      	nop
 800c554:	e004      	b.n	800c560 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c556:	bf00      	nop
 800c558:	e002      	b.n	800c560 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c55a:	bf00      	nop
 800c55c:	e000      	b.n	800c560 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c55e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c560:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c564:	2b00      	cmp	r3, #0
 800c566:	d10b      	bne.n	800c580 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c568:	4ba0      	ldr	r3, [pc, #640]	@ (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c56a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c56c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800c570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c574:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c578:	4a9c      	ldr	r2, [pc, #624]	@ (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c57a:	430b      	orrs	r3, r1
 800c57c:	6593      	str	r3, [r2, #88]	@ 0x58
 800c57e:	e003      	b.n	800c588 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c580:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c584:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800c588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c590:	f002 0308 	and.w	r3, r2, #8
 800c594:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c598:	2300      	movs	r3, #0
 800c59a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c59e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800c5a2:	460b      	mov	r3, r1
 800c5a4:	4313      	orrs	r3, r2
 800c5a6:	d01e      	beq.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800c5a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c5b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c5b4:	d10c      	bne.n	800c5d0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c5b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5ba:	3328      	adds	r3, #40	@ 0x28
 800c5bc:	2102      	movs	r1, #2
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f001 fc5c 	bl	800de7c <RCCEx_PLL3_Config>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d002      	beq.n	800c5d0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800c5d0:	4b86      	ldr	r3, [pc, #536]	@ (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c5d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5d4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c5d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c5e0:	4a82      	ldr	r2, [pc, #520]	@ (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c5e2:	430b      	orrs	r3, r1
 800c5e4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c5e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ee:	f002 0310 	and.w	r3, r2, #16
 800c5f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c5fc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800c600:	460b      	mov	r3, r1
 800c602:	4313      	orrs	r3, r2
 800c604:	d01e      	beq.n	800c644 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c60a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c60e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c612:	d10c      	bne.n	800c62e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c618:	3328      	adds	r3, #40	@ 0x28
 800c61a:	2102      	movs	r1, #2
 800c61c:	4618      	mov	r0, r3
 800c61e:	f001 fc2d 	bl	800de7c <RCCEx_PLL3_Config>
 800c622:	4603      	mov	r3, r0
 800c624:	2b00      	cmp	r3, #0
 800c626:	d002      	beq.n	800c62e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800c628:	2301      	movs	r3, #1
 800c62a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c62e:	4b6f      	ldr	r3, [pc, #444]	@ (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c632:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c63a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c63e:	4a6b      	ldr	r2, [pc, #428]	@ (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c640:	430b      	orrs	r3, r1
 800c642:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c64c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800c650:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c652:	2300      	movs	r3, #0
 800c654:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c656:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800c65a:	460b      	mov	r3, r1
 800c65c:	4313      	orrs	r3, r2
 800c65e:	d03e      	beq.n	800c6de <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c664:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c668:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c66c:	d022      	beq.n	800c6b4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c66e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c672:	d81b      	bhi.n	800c6ac <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800c674:	2b00      	cmp	r3, #0
 800c676:	d003      	beq.n	800c680 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800c678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c67c:	d00b      	beq.n	800c696 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800c67e:	e015      	b.n	800c6ac <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c684:	3308      	adds	r3, #8
 800c686:	2100      	movs	r1, #0
 800c688:	4618      	mov	r0, r3
 800c68a:	f001 fb45 	bl	800dd18 <RCCEx_PLL2_Config>
 800c68e:	4603      	mov	r3, r0
 800c690:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c694:	e00f      	b.n	800c6b6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c69a:	3328      	adds	r3, #40	@ 0x28
 800c69c:	2102      	movs	r1, #2
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f001 fbec 	bl	800de7c <RCCEx_PLL3_Config>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c6aa:	e004      	b.n	800c6b6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c6b2:	e000      	b.n	800c6b6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800c6b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c6b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d10b      	bne.n	800c6d6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c6be:	4b4b      	ldr	r3, [pc, #300]	@ (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c6c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c6c2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800c6c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c6ce:	4a47      	ldr	r2, [pc, #284]	@ (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c6d0:	430b      	orrs	r3, r1
 800c6d2:	6593      	str	r3, [r2, #88]	@ 0x58
 800c6d4:	e003      	b.n	800c6de <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c6da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c6de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800c6ea:	673b      	str	r3, [r7, #112]	@ 0x70
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	677b      	str	r3, [r7, #116]	@ 0x74
 800c6f0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800c6f4:	460b      	mov	r3, r1
 800c6f6:	4313      	orrs	r3, r2
 800c6f8:	d03b      	beq.n	800c772 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c6fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c702:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c706:	d01f      	beq.n	800c748 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c708:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c70c:	d818      	bhi.n	800c740 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800c70e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c712:	d003      	beq.n	800c71c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800c714:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c718:	d007      	beq.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800c71a:	e011      	b.n	800c740 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c71c:	4b33      	ldr	r3, [pc, #204]	@ (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c71e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c720:	4a32      	ldr	r2, [pc, #200]	@ (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c722:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c726:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c728:	e00f      	b.n	800c74a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c72a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c72e:	3328      	adds	r3, #40	@ 0x28
 800c730:	2101      	movs	r1, #1
 800c732:	4618      	mov	r0, r3
 800c734:	f001 fba2 	bl	800de7c <RCCEx_PLL3_Config>
 800c738:	4603      	mov	r3, r0
 800c73a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800c73e:	e004      	b.n	800c74a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c740:	2301      	movs	r3, #1
 800c742:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c746:	e000      	b.n	800c74a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800c748:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c74a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d10b      	bne.n	800c76a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c752:	4b26      	ldr	r3, [pc, #152]	@ (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c756:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c75a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c75e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c762:	4a22      	ldr	r2, [pc, #136]	@ (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c764:	430b      	orrs	r3, r1
 800c766:	6553      	str	r3, [r2, #84]	@ 0x54
 800c768:	e003      	b.n	800c772 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c76a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c76e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c772:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c77a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800c77e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c780:	2300      	movs	r3, #0
 800c782:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c784:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800c788:	460b      	mov	r3, r1
 800c78a:	4313      	orrs	r3, r2
 800c78c:	d034      	beq.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c78e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c792:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c794:	2b00      	cmp	r3, #0
 800c796:	d003      	beq.n	800c7a0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800c798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c79c:	d007      	beq.n	800c7ae <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800c79e:	e011      	b.n	800c7c4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c7a0:	4b12      	ldr	r3, [pc, #72]	@ (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c7a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7a4:	4a11      	ldr	r2, [pc, #68]	@ (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c7a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c7aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c7ac:	e00e      	b.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c7ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7b2:	3308      	adds	r3, #8
 800c7b4:	2102      	movs	r1, #2
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f001 faae 	bl	800dd18 <RCCEx_PLL2_Config>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c7c2:	e003      	b.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c7ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d10d      	bne.n	800c7f0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c7d4:	4b05      	ldr	r3, [pc, #20]	@ (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c7d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c7d8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c7dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7e2:	4a02      	ldr	r2, [pc, #8]	@ (800c7ec <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c7e4:	430b      	orrs	r3, r1
 800c7e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c7e8:	e006      	b.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800c7ea:	bf00      	nop
 800c7ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c7f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c800:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800c804:	663b      	str	r3, [r7, #96]	@ 0x60
 800c806:	2300      	movs	r3, #0
 800c808:	667b      	str	r3, [r7, #100]	@ 0x64
 800c80a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800c80e:	460b      	mov	r3, r1
 800c810:	4313      	orrs	r3, r2
 800c812:	d00c      	beq.n	800c82e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c818:	3328      	adds	r3, #40	@ 0x28
 800c81a:	2102      	movs	r1, #2
 800c81c:	4618      	mov	r0, r3
 800c81e:	f001 fb2d 	bl	800de7c <RCCEx_PLL3_Config>
 800c822:	4603      	mov	r3, r0
 800c824:	2b00      	cmp	r3, #0
 800c826:	d002      	beq.n	800c82e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800c828:	2301      	movs	r3, #1
 800c82a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c82e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c836:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800c83a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c83c:	2300      	movs	r3, #0
 800c83e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c840:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800c844:	460b      	mov	r3, r1
 800c846:	4313      	orrs	r3, r2
 800c848:	d036      	beq.n	800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c84a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c84e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c850:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c854:	d018      	beq.n	800c888 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800c856:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c85a:	d811      	bhi.n	800c880 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c85c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c860:	d014      	beq.n	800c88c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800c862:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c866:	d80b      	bhi.n	800c880 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d011      	beq.n	800c890 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800c86c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c870:	d106      	bne.n	800c880 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c872:	4bb7      	ldr	r3, [pc, #732]	@ (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c876:	4ab6      	ldr	r2, [pc, #728]	@ (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c878:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c87c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c87e:	e008      	b.n	800c892 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c880:	2301      	movs	r3, #1
 800c882:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c886:	e004      	b.n	800c892 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c888:	bf00      	nop
 800c88a:	e002      	b.n	800c892 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c88c:	bf00      	nop
 800c88e:	e000      	b.n	800c892 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c890:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c892:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c896:	2b00      	cmp	r3, #0
 800c898:	d10a      	bne.n	800c8b0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c89a:	4bad      	ldr	r3, [pc, #692]	@ (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c89c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c89e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c8a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c8a8:	4aa9      	ldr	r2, [pc, #676]	@ (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c8aa:	430b      	orrs	r3, r1
 800c8ac:	6553      	str	r3, [r2, #84]	@ 0x54
 800c8ae:	e003      	b.n	800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c8b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c8b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800c8c4:	653b      	str	r3, [r7, #80]	@ 0x50
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	657b      	str	r3, [r7, #84]	@ 0x54
 800c8ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800c8ce:	460b      	mov	r3, r1
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	d009      	beq.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c8d4:	4b9e      	ldr	r3, [pc, #632]	@ (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c8d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c8dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c8e2:	4a9b      	ldr	r2, [pc, #620]	@ (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c8e4:	430b      	orrs	r3, r1
 800c8e6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c8e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800c8f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c8fa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800c8fe:	460b      	mov	r3, r1
 800c900:	4313      	orrs	r3, r2
 800c902:	d009      	beq.n	800c918 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c904:	4b92      	ldr	r3, [pc, #584]	@ (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c906:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c908:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800c90c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c910:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c912:	4a8f      	ldr	r2, [pc, #572]	@ (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c914:	430b      	orrs	r3, r1
 800c916:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c920:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800c924:	643b      	str	r3, [r7, #64]	@ 0x40
 800c926:	2300      	movs	r3, #0
 800c928:	647b      	str	r3, [r7, #68]	@ 0x44
 800c92a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800c92e:	460b      	mov	r3, r1
 800c930:	4313      	orrs	r3, r2
 800c932:	d00e      	beq.n	800c952 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c934:	4b86      	ldr	r3, [pc, #536]	@ (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c936:	691b      	ldr	r3, [r3, #16]
 800c938:	4a85      	ldr	r2, [pc, #532]	@ (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c93a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c93e:	6113      	str	r3, [r2, #16]
 800c940:	4b83      	ldr	r3, [pc, #524]	@ (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c942:	6919      	ldr	r1, [r3, #16]
 800c944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c948:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c94c:	4a80      	ldr	r2, [pc, #512]	@ (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c94e:	430b      	orrs	r3, r1
 800c950:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c95a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800c95e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c960:	2300      	movs	r3, #0
 800c962:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c964:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800c968:	460b      	mov	r3, r1
 800c96a:	4313      	orrs	r3, r2
 800c96c:	d009      	beq.n	800c982 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c96e:	4b78      	ldr	r3, [pc, #480]	@ (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c972:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c97a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c97c:	4a74      	ldr	r2, [pc, #464]	@ (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c97e:	430b      	orrs	r3, r1
 800c980:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c982:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c98a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800c98e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c990:	2300      	movs	r3, #0
 800c992:	637b      	str	r3, [r7, #52]	@ 0x34
 800c994:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800c998:	460b      	mov	r3, r1
 800c99a:	4313      	orrs	r3, r2
 800c99c:	d00a      	beq.n	800c9b4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c99e:	4b6c      	ldr	r3, [pc, #432]	@ (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c9a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9a2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800c9a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c9ae:	4a68      	ldr	r2, [pc, #416]	@ (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c9b0:	430b      	orrs	r3, r1
 800c9b2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c9b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9bc:	2100      	movs	r1, #0
 800c9be:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c9c0:	f003 0301 	and.w	r3, r3, #1
 800c9c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c9c6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800c9ca:	460b      	mov	r3, r1
 800c9cc:	4313      	orrs	r3, r2
 800c9ce:	d011      	beq.n	800c9f4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c9d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9d4:	3308      	adds	r3, #8
 800c9d6:	2100      	movs	r1, #0
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f001 f99d 	bl	800dd18 <RCCEx_PLL2_Config>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c9e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d003      	beq.n	800c9f4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c9f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c9f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fc:	2100      	movs	r1, #0
 800c9fe:	6239      	str	r1, [r7, #32]
 800ca00:	f003 0302 	and.w	r3, r3, #2
 800ca04:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca06:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ca0a:	460b      	mov	r3, r1
 800ca0c:	4313      	orrs	r3, r2
 800ca0e:	d011      	beq.n	800ca34 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ca10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca14:	3308      	adds	r3, #8
 800ca16:	2101      	movs	r1, #1
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f001 f97d 	bl	800dd18 <RCCEx_PLL2_Config>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ca24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d003      	beq.n	800ca34 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ca34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3c:	2100      	movs	r1, #0
 800ca3e:	61b9      	str	r1, [r7, #24]
 800ca40:	f003 0304 	and.w	r3, r3, #4
 800ca44:	61fb      	str	r3, [r7, #28]
 800ca46:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ca4a:	460b      	mov	r3, r1
 800ca4c:	4313      	orrs	r3, r2
 800ca4e:	d011      	beq.n	800ca74 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ca50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca54:	3308      	adds	r3, #8
 800ca56:	2102      	movs	r1, #2
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f001 f95d 	bl	800dd18 <RCCEx_PLL2_Config>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ca64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d003      	beq.n	800ca74 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ca74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca7c:	2100      	movs	r1, #0
 800ca7e:	6139      	str	r1, [r7, #16]
 800ca80:	f003 0308 	and.w	r3, r3, #8
 800ca84:	617b      	str	r3, [r7, #20]
 800ca86:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ca8a:	460b      	mov	r3, r1
 800ca8c:	4313      	orrs	r3, r2
 800ca8e:	d011      	beq.n	800cab4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ca90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca94:	3328      	adds	r3, #40	@ 0x28
 800ca96:	2100      	movs	r1, #0
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f001 f9ef 	bl	800de7c <RCCEx_PLL3_Config>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800caa4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d003      	beq.n	800cab4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800caac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cab0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800cab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cabc:	2100      	movs	r1, #0
 800cabe:	60b9      	str	r1, [r7, #8]
 800cac0:	f003 0310 	and.w	r3, r3, #16
 800cac4:	60fb      	str	r3, [r7, #12]
 800cac6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800caca:	460b      	mov	r3, r1
 800cacc:	4313      	orrs	r3, r2
 800cace:	d011      	beq.n	800caf4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cad4:	3328      	adds	r3, #40	@ 0x28
 800cad6:	2101      	movs	r1, #1
 800cad8:	4618      	mov	r0, r3
 800cada:	f001 f9cf 	bl	800de7c <RCCEx_PLL3_Config>
 800cade:	4603      	mov	r3, r0
 800cae0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cae4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d003      	beq.n	800caf4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800caec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800caf0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800caf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cafc:	2100      	movs	r1, #0
 800cafe:	6039      	str	r1, [r7, #0]
 800cb00:	f003 0320 	and.w	r3, r3, #32
 800cb04:	607b      	str	r3, [r7, #4]
 800cb06:	e9d7 1200 	ldrd	r1, r2, [r7]
 800cb0a:	460b      	mov	r3, r1
 800cb0c:	4313      	orrs	r3, r2
 800cb0e:	d011      	beq.n	800cb34 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cb10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb14:	3328      	adds	r3, #40	@ 0x28
 800cb16:	2102      	movs	r1, #2
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f001 f9af 	bl	800de7c <RCCEx_PLL3_Config>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cb24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d003      	beq.n	800cb34 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800cb34:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d101      	bne.n	800cb40 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	e000      	b.n	800cb42 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800cb40:	2301      	movs	r3, #1
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cb4e:	bf00      	nop
 800cb50:	58024400 	.word	0x58024400

0800cb54 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b090      	sub	sp, #64	@ 0x40
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800cb5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb62:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800cb66:	430b      	orrs	r3, r1
 800cb68:	f040 8094 	bne.w	800cc94 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800cb6c:	4b9b      	ldr	r3, [pc, #620]	@ (800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb70:	f003 0307 	and.w	r3, r3, #7
 800cb74:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800cb76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb78:	2b04      	cmp	r3, #4
 800cb7a:	f200 8087 	bhi.w	800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800cb7e:	a201      	add	r2, pc, #4	@ (adr r2, 800cb84 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800cb80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb84:	0800cb99 	.word	0x0800cb99
 800cb88:	0800cbc1 	.word	0x0800cbc1
 800cb8c:	0800cbe9 	.word	0x0800cbe9
 800cb90:	0800cc85 	.word	0x0800cc85
 800cb94:	0800cc11 	.word	0x0800cc11
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cb98:	4b90      	ldr	r3, [pc, #576]	@ (800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cba0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cba4:	d108      	bne.n	800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cba6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f000 ff62 	bl	800da74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cbb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbb4:	f000 bc93 	b.w	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbbc:	f000 bc8f 	b.w	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbc0:	4b86      	ldr	r3, [pc, #536]	@ (800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cbc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cbcc:	d108      	bne.n	800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbce:	f107 0318 	add.w	r3, r7, #24
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f000 fca6 	bl	800d524 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cbd8:	69bb      	ldr	r3, [r7, #24]
 800cbda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbdc:	f000 bc7f 	b.w	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbe4:	f000 bc7b 	b.w	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cbe8:	4b7c      	ldr	r3, [pc, #496]	@ (800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cbf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cbf4:	d108      	bne.n	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbf6:	f107 030c 	add.w	r3, r7, #12
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f000 fde6 	bl	800d7cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc04:	f000 bc6b 	b.w	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc0c:	f000 bc67 	b.w	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cc10:	4b72      	ldr	r3, [pc, #456]	@ (800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cc18:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cc1a:	4b70      	ldr	r3, [pc, #448]	@ (800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	f003 0304 	and.w	r3, r3, #4
 800cc22:	2b04      	cmp	r3, #4
 800cc24:	d10c      	bne.n	800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800cc26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d109      	bne.n	800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc2c:	4b6b      	ldr	r3, [pc, #428]	@ (800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	08db      	lsrs	r3, r3, #3
 800cc32:	f003 0303 	and.w	r3, r3, #3
 800cc36:	4a6a      	ldr	r2, [pc, #424]	@ (800cde0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800cc38:	fa22 f303 	lsr.w	r3, r2, r3
 800cc3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc3e:	e01f      	b.n	800cc80 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cc40:	4b66      	ldr	r3, [pc, #408]	@ (800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc4c:	d106      	bne.n	800cc5c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800cc4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cc54:	d102      	bne.n	800cc5c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cc56:	4b63      	ldr	r3, [pc, #396]	@ (800cde4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800cc58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc5a:	e011      	b.n	800cc80 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cc5c:	4b5f      	ldr	r3, [pc, #380]	@ (800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cc64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cc68:	d106      	bne.n	800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800cc6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cc70:	d102      	bne.n	800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cc72:	4b5d      	ldr	r3, [pc, #372]	@ (800cde8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cc74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc76:	e003      	b.n	800cc80 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cc7c:	f000 bc2f 	b.w	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cc80:	f000 bc2d 	b.w	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cc84:	4b59      	ldr	r3, [pc, #356]	@ (800cdec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800cc86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc88:	f000 bc29 	b.w	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc90:	f000 bc25 	b.w	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800cc94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc98:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800cc9c:	430b      	orrs	r3, r1
 800cc9e:	f040 80a7 	bne.w	800cdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800cca2:	4b4e      	ldr	r3, [pc, #312]	@ (800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cca6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800ccaa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ccac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ccb2:	d054      	beq.n	800cd5e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800ccb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccb6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ccba:	f200 808b 	bhi.w	800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ccbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccc0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ccc4:	f000 8083 	beq.w	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800ccc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccca:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ccce:	f200 8081 	bhi.w	800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ccd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ccd8:	d02f      	beq.n	800cd3a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ccda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccdc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cce0:	d878      	bhi.n	800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d004      	beq.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800cce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ccee:	d012      	beq.n	800cd16 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800ccf0:	e070      	b.n	800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ccf2:	4b3a      	ldr	r3, [pc, #232]	@ (800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ccfa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ccfe:	d107      	bne.n	800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cd00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cd04:	4618      	mov	r0, r3
 800cd06:	f000 feb5 	bl	800da74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cd0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd0e:	e3e6      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd10:	2300      	movs	r3, #0
 800cd12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd14:	e3e3      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd16:	4b31      	ldr	r3, [pc, #196]	@ (800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cd1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cd22:	d107      	bne.n	800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd24:	f107 0318 	add.w	r3, r7, #24
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f000 fbfb 	bl	800d524 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cd2e:	69bb      	ldr	r3, [r7, #24]
 800cd30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd32:	e3d4      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd34:	2300      	movs	r3, #0
 800cd36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd38:	e3d1      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd3a:	4b28      	ldr	r3, [pc, #160]	@ (800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cd42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd46:	d107      	bne.n	800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd48:	f107 030c 	add.w	r3, r7, #12
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f000 fd3d 	bl	800d7cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd56:	e3c2      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd5c:	e3bf      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cd5e:	4b1f      	ldr	r3, [pc, #124]	@ (800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cd62:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cd66:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cd68:	4b1c      	ldr	r3, [pc, #112]	@ (800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	f003 0304 	and.w	r3, r3, #4
 800cd70:	2b04      	cmp	r3, #4
 800cd72:	d10c      	bne.n	800cd8e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800cd74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d109      	bne.n	800cd8e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd7a:	4b18      	ldr	r3, [pc, #96]	@ (800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	08db      	lsrs	r3, r3, #3
 800cd80:	f003 0303 	and.w	r3, r3, #3
 800cd84:	4a16      	ldr	r2, [pc, #88]	@ (800cde0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800cd86:	fa22 f303 	lsr.w	r3, r2, r3
 800cd8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cd8c:	e01e      	b.n	800cdcc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cd8e:	4b13      	ldr	r3, [pc, #76]	@ (800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cd9a:	d106      	bne.n	800cdaa <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800cd9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cda2:	d102      	bne.n	800cdaa <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cda4:	4b0f      	ldr	r3, [pc, #60]	@ (800cde4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800cda6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cda8:	e010      	b.n	800cdcc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cdaa:	4b0c      	ldr	r3, [pc, #48]	@ (800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cdb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cdb6:	d106      	bne.n	800cdc6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800cdb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cdbe:	d102      	bne.n	800cdc6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cdc0:	4b09      	ldr	r3, [pc, #36]	@ (800cde8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cdc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cdc4:	e002      	b.n	800cdcc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cdca:	e388      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cdcc:	e387      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cdce:	4b07      	ldr	r3, [pc, #28]	@ (800cdec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800cdd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdd2:	e384      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdd8:	e381      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cdda:	bf00      	nop
 800cddc:	58024400 	.word	0x58024400
 800cde0:	03d09000 	.word	0x03d09000
 800cde4:	003d0900 	.word	0x003d0900
 800cde8:	007a1200 	.word	0x007a1200
 800cdec:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800cdf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdf4:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800cdf8:	430b      	orrs	r3, r1
 800cdfa:	f040 809c 	bne.w	800cf36 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800cdfe:	4b9e      	ldr	r3, [pc, #632]	@ (800d078 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce02:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800ce06:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ce08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce0a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ce0e:	d054      	beq.n	800ceba <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800ce10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce12:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ce16:	f200 808b 	bhi.w	800cf30 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ce1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce1c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ce20:	f000 8083 	beq.w	800cf2a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800ce24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce26:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ce2a:	f200 8081 	bhi.w	800cf30 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ce2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ce34:	d02f      	beq.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800ce36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ce3c:	d878      	bhi.n	800cf30 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ce3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d004      	beq.n	800ce4e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800ce44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ce4a:	d012      	beq.n	800ce72 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800ce4c:	e070      	b.n	800cf30 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ce4e:	4b8a      	ldr	r3, [pc, #552]	@ (800d078 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ce56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ce5a:	d107      	bne.n	800ce6c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ce60:	4618      	mov	r0, r3
 800ce62:	f000 fe07 	bl	800da74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ce66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce6a:	e338      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce70:	e335      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce72:	4b81      	ldr	r3, [pc, #516]	@ (800d078 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ce7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ce7e:	d107      	bne.n	800ce90 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce80:	f107 0318 	add.w	r3, r7, #24
 800ce84:	4618      	mov	r0, r3
 800ce86:	f000 fb4d 	bl	800d524 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ce8a:	69bb      	ldr	r3, [r7, #24]
 800ce8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce8e:	e326      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce90:	2300      	movs	r3, #0
 800ce92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce94:	e323      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ce96:	4b78      	ldr	r3, [pc, #480]	@ (800d078 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ce9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cea2:	d107      	bne.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cea4:	f107 030c 	add.w	r3, r7, #12
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f000 fc8f 	bl	800d7cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ceb2:	e314      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ceb8:	e311      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ceba:	4b6f      	ldr	r3, [pc, #444]	@ (800d078 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cebe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cec2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cec4:	4b6c      	ldr	r3, [pc, #432]	@ (800d078 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f003 0304 	and.w	r3, r3, #4
 800cecc:	2b04      	cmp	r3, #4
 800cece:	d10c      	bne.n	800ceea <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800ced0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d109      	bne.n	800ceea <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ced6:	4b68      	ldr	r3, [pc, #416]	@ (800d078 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	08db      	lsrs	r3, r3, #3
 800cedc:	f003 0303 	and.w	r3, r3, #3
 800cee0:	4a66      	ldr	r2, [pc, #408]	@ (800d07c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800cee2:	fa22 f303 	lsr.w	r3, r2, r3
 800cee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cee8:	e01e      	b.n	800cf28 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ceea:	4b63      	ldr	r3, [pc, #396]	@ (800d078 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cef2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cef6:	d106      	bne.n	800cf06 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800cef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cefa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cefe:	d102      	bne.n	800cf06 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cf00:	4b5f      	ldr	r3, [pc, #380]	@ (800d080 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800cf02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf04:	e010      	b.n	800cf28 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cf06:	4b5c      	ldr	r3, [pc, #368]	@ (800d078 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cf0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cf12:	d106      	bne.n	800cf22 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800cf14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cf1a:	d102      	bne.n	800cf22 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cf1c:	4b59      	ldr	r3, [pc, #356]	@ (800d084 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cf1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf20:	e002      	b.n	800cf28 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cf22:	2300      	movs	r3, #0
 800cf24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cf26:	e2da      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cf28:	e2d9      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cf2a:	4b57      	ldr	r3, [pc, #348]	@ (800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cf2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf2e:	e2d6      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cf30:	2300      	movs	r3, #0
 800cf32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf34:	e2d3      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800cf36:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf3a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800cf3e:	430b      	orrs	r3, r1
 800cf40:	f040 80a7 	bne.w	800d092 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800cf44:	4b4c      	ldr	r3, [pc, #304]	@ (800d078 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf48:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800cf4c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800cf4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cf54:	d055      	beq.n	800d002 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800cf56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cf5c:	f200 8096 	bhi.w	800d08c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cf60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf62:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cf66:	f000 8084 	beq.w	800d072 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800cf6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf6c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cf70:	f200 808c 	bhi.w	800d08c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cf74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cf7a:	d030      	beq.n	800cfde <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800cf7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cf82:	f200 8083 	bhi.w	800d08c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cf86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d004      	beq.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800cf8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cf92:	d012      	beq.n	800cfba <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800cf94:	e07a      	b.n	800d08c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cf96:	4b38      	ldr	r3, [pc, #224]	@ (800d078 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cfa2:	d107      	bne.n	800cfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cfa4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f000 fd63 	bl	800da74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cfae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfb2:	e294      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfb8:	e291      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cfba:	4b2f      	ldr	r3, [pc, #188]	@ (800d078 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cfc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cfc6:	d107      	bne.n	800cfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cfc8:	f107 0318 	add.w	r3, r7, #24
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f000 faa9 	bl	800d524 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cfd2:	69bb      	ldr	r3, [r7, #24]
 800cfd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfd6:	e282      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfdc:	e27f      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cfde:	4b26      	ldr	r3, [pc, #152]	@ (800d078 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cfe6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cfea:	d107      	bne.n	800cffc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cfec:	f107 030c 	add.w	r3, r7, #12
 800cff0:	4618      	mov	r0, r3
 800cff2:	f000 fbeb 	bl	800d7cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cffa:	e270      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cffc:	2300      	movs	r3, #0
 800cffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d000:	e26d      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d002:	4b1d      	ldr	r3, [pc, #116]	@ (800d078 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d006:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d00a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d00c:	4b1a      	ldr	r3, [pc, #104]	@ (800d078 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	f003 0304 	and.w	r3, r3, #4
 800d014:	2b04      	cmp	r3, #4
 800d016:	d10c      	bne.n	800d032 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800d018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d109      	bne.n	800d032 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d01e:	4b16      	ldr	r3, [pc, #88]	@ (800d078 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	08db      	lsrs	r3, r3, #3
 800d024:	f003 0303 	and.w	r3, r3, #3
 800d028:	4a14      	ldr	r2, [pc, #80]	@ (800d07c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800d02a:	fa22 f303 	lsr.w	r3, r2, r3
 800d02e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d030:	e01e      	b.n	800d070 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d032:	4b11      	ldr	r3, [pc, #68]	@ (800d078 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d03a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d03e:	d106      	bne.n	800d04e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800d040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d042:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d046:	d102      	bne.n	800d04e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d048:	4b0d      	ldr	r3, [pc, #52]	@ (800d080 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800d04a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d04c:	e010      	b.n	800d070 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d04e:	4b0a      	ldr	r3, [pc, #40]	@ (800d078 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d056:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d05a:	d106      	bne.n	800d06a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800d05c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d05e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d062:	d102      	bne.n	800d06a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d064:	4b07      	ldr	r3, [pc, #28]	@ (800d084 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d066:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d068:	e002      	b.n	800d070 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d06a:	2300      	movs	r3, #0
 800d06c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d06e:	e236      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d070:	e235      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d072:	4b05      	ldr	r3, [pc, #20]	@ (800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800d074:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d076:	e232      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d078:	58024400 	.word	0x58024400
 800d07c:	03d09000 	.word	0x03d09000
 800d080:	003d0900 	.word	0x003d0900
 800d084:	007a1200 	.word	0x007a1200
 800d088:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800d08c:	2300      	movs	r3, #0
 800d08e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d090:	e225      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800d092:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d096:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800d09a:	430b      	orrs	r3, r1
 800d09c:	f040 8085 	bne.w	800d1aa <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800d0a0:	4b9c      	ldr	r3, [pc, #624]	@ (800d314 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d0a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d0a4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800d0a8:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800d0aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d0b0:	d06b      	beq.n	800d18a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800d0b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d0b8:	d874      	bhi.n	800d1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d0ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d0c0:	d056      	beq.n	800d170 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800d0c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d0c8:	d86c      	bhi.n	800d1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d0ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d0d0:	d03b      	beq.n	800d14a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800d0d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d0d8:	d864      	bhi.n	800d1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d0da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d0e0:	d021      	beq.n	800d126 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800d0e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d0e8:	d85c      	bhi.n	800d1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d0ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d004      	beq.n	800d0fa <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800d0f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d0f6:	d004      	beq.n	800d102 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800d0f8:	e054      	b.n	800d1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800d0fa:	f7fe fb5f 	bl	800b7bc <HAL_RCC_GetPCLK1Freq>
 800d0fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d100:	e1ed      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d102:	4b84      	ldr	r3, [pc, #528]	@ (800d314 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d10a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d10e:	d107      	bne.n	800d120 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d110:	f107 0318 	add.w	r3, r7, #24
 800d114:	4618      	mov	r0, r3
 800d116:	f000 fa05 	bl	800d524 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d11a:	69fb      	ldr	r3, [r7, #28]
 800d11c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d11e:	e1de      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d120:	2300      	movs	r3, #0
 800d122:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d124:	e1db      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d126:	4b7b      	ldr	r3, [pc, #492]	@ (800d314 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d12e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d132:	d107      	bne.n	800d144 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d134:	f107 030c 	add.w	r3, r7, #12
 800d138:	4618      	mov	r0, r3
 800d13a:	f000 fb47 	bl	800d7cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d13e:	693b      	ldr	r3, [r7, #16]
 800d140:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d142:	e1cc      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d144:	2300      	movs	r3, #0
 800d146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d148:	e1c9      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d14a:	4b72      	ldr	r3, [pc, #456]	@ (800d314 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	f003 0304 	and.w	r3, r3, #4
 800d152:	2b04      	cmp	r3, #4
 800d154:	d109      	bne.n	800d16a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d156:	4b6f      	ldr	r3, [pc, #444]	@ (800d314 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	08db      	lsrs	r3, r3, #3
 800d15c:	f003 0303 	and.w	r3, r3, #3
 800d160:	4a6d      	ldr	r2, [pc, #436]	@ (800d318 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d162:	fa22 f303 	lsr.w	r3, r2, r3
 800d166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d168:	e1b9      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d16a:	2300      	movs	r3, #0
 800d16c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d16e:	e1b6      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d170:	4b68      	ldr	r3, [pc, #416]	@ (800d314 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d178:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d17c:	d102      	bne.n	800d184 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800d17e:	4b67      	ldr	r3, [pc, #412]	@ (800d31c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d180:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d182:	e1ac      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d184:	2300      	movs	r3, #0
 800d186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d188:	e1a9      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d18a:	4b62      	ldr	r3, [pc, #392]	@ (800d314 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d192:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d196:	d102      	bne.n	800d19e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800d198:	4b61      	ldr	r3, [pc, #388]	@ (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d19a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d19c:	e19f      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d19e:	2300      	movs	r3, #0
 800d1a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1a2:	e19c      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1a8:	e199      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800d1aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1ae:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800d1b2:	430b      	orrs	r3, r1
 800d1b4:	d173      	bne.n	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800d1b6:	4b57      	ldr	r3, [pc, #348]	@ (800d314 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d1b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d1ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d1be:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d1c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d1c6:	d02f      	beq.n	800d228 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800d1c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d1ce:	d863      	bhi.n	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800d1d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d004      	beq.n	800d1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800d1d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d1dc:	d012      	beq.n	800d204 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800d1de:	e05b      	b.n	800d298 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d1e0:	4b4c      	ldr	r3, [pc, #304]	@ (800d314 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d1e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d1ec:	d107      	bne.n	800d1fe <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1ee:	f107 0318 	add.w	r3, r7, #24
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f000 f996 	bl	800d524 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d1f8:	69bb      	ldr	r3, [r7, #24]
 800d1fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1fc:	e16f      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d1fe:	2300      	movs	r3, #0
 800d200:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d202:	e16c      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d204:	4b43      	ldr	r3, [pc, #268]	@ (800d314 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d20c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d210:	d107      	bne.n	800d222 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d212:	f107 030c 	add.w	r3, r7, #12
 800d216:	4618      	mov	r0, r3
 800d218:	f000 fad8 	bl	800d7cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d220:	e15d      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d222:	2300      	movs	r3, #0
 800d224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d226:	e15a      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d228:	4b3a      	ldr	r3, [pc, #232]	@ (800d314 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d22a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d22c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d230:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d232:	4b38      	ldr	r3, [pc, #224]	@ (800d314 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	f003 0304 	and.w	r3, r3, #4
 800d23a:	2b04      	cmp	r3, #4
 800d23c:	d10c      	bne.n	800d258 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800d23e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d240:	2b00      	cmp	r3, #0
 800d242:	d109      	bne.n	800d258 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d244:	4b33      	ldr	r3, [pc, #204]	@ (800d314 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	08db      	lsrs	r3, r3, #3
 800d24a:	f003 0303 	and.w	r3, r3, #3
 800d24e:	4a32      	ldr	r2, [pc, #200]	@ (800d318 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d250:	fa22 f303 	lsr.w	r3, r2, r3
 800d254:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d256:	e01e      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d258:	4b2e      	ldr	r3, [pc, #184]	@ (800d314 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d260:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d264:	d106      	bne.n	800d274 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800d266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d268:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d26c:	d102      	bne.n	800d274 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d26e:	4b2b      	ldr	r3, [pc, #172]	@ (800d31c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d270:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d272:	e010      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d274:	4b27      	ldr	r3, [pc, #156]	@ (800d314 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d27c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d280:	d106      	bne.n	800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800d282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d284:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d288:	d102      	bne.n	800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d28a:	4b25      	ldr	r3, [pc, #148]	@ (800d320 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d28c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d28e:	e002      	b.n	800d296 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d290:	2300      	movs	r3, #0
 800d292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d294:	e123      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d296:	e122      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d298:	2300      	movs	r3, #0
 800d29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d29c:	e11f      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d29e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2a2:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800d2a6:	430b      	orrs	r3, r1
 800d2a8:	d13c      	bne.n	800d324 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d2aa:	4b1a      	ldr	r3, [pc, #104]	@ (800d314 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d2ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d2ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d2b2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d2b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d004      	beq.n	800d2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800d2ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d2c0:	d012      	beq.n	800d2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800d2c2:	e023      	b.n	800d30c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d2c4:	4b13      	ldr	r3, [pc, #76]	@ (800d314 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d2cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d2d0:	d107      	bne.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d2d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f000 fbcc 	bl	800da74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2e0:	e0fd      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2e6:	e0fa      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d2e8:	4b0a      	ldr	r3, [pc, #40]	@ (800d314 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d2f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d2f4:	d107      	bne.n	800d306 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d2f6:	f107 0318 	add.w	r3, r7, #24
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f000 f912 	bl	800d524 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d300:	6a3b      	ldr	r3, [r7, #32]
 800d302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d304:	e0eb      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d306:	2300      	movs	r3, #0
 800d308:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d30a:	e0e8      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d30c:	2300      	movs	r3, #0
 800d30e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d310:	e0e5      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d312:	bf00      	nop
 800d314:	58024400 	.word	0x58024400
 800d318:	03d09000 	.word	0x03d09000
 800d31c:	003d0900 	.word	0x003d0900
 800d320:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d324:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d328:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800d32c:	430b      	orrs	r3, r1
 800d32e:	f040 8085 	bne.w	800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d332:	4b6d      	ldr	r3, [pc, #436]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d336:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800d33a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d33c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d33e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d342:	d06b      	beq.n	800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800d344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d346:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d34a:	d874      	bhi.n	800d436 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d34c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d34e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d352:	d056      	beq.n	800d402 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800d354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d356:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d35a:	d86c      	bhi.n	800d436 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d35c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d35e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d362:	d03b      	beq.n	800d3dc <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800d364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d366:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d36a:	d864      	bhi.n	800d436 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d36e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d372:	d021      	beq.n	800d3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800d374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d376:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d37a:	d85c      	bhi.n	800d436 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d37c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d004      	beq.n	800d38c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800d382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d384:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d388:	d004      	beq.n	800d394 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800d38a:	e054      	b.n	800d436 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d38c:	f000 f8b4 	bl	800d4f8 <HAL_RCCEx_GetD3PCLK1Freq>
 800d390:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d392:	e0a4      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d394:	4b54      	ldr	r3, [pc, #336]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d39c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d3a0:	d107      	bne.n	800d3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d3a2:	f107 0318 	add.w	r3, r7, #24
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f000 f8bc 	bl	800d524 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d3ac:	69fb      	ldr	r3, [r7, #28]
 800d3ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d3b0:	e095      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3b6:	e092      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d3b8:	4b4b      	ldr	r3, [pc, #300]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d3c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d3c4:	d107      	bne.n	800d3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d3c6:	f107 030c 	add.w	r3, r7, #12
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f000 f9fe 	bl	800d7cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d3d4:	e083      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3da:	e080      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d3dc:	4b42      	ldr	r3, [pc, #264]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	f003 0304 	and.w	r3, r3, #4
 800d3e4:	2b04      	cmp	r3, #4
 800d3e6:	d109      	bne.n	800d3fc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d3e8:	4b3f      	ldr	r3, [pc, #252]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	08db      	lsrs	r3, r3, #3
 800d3ee:	f003 0303 	and.w	r3, r3, #3
 800d3f2:	4a3e      	ldr	r2, [pc, #248]	@ (800d4ec <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800d3f4:	fa22 f303 	lsr.w	r3, r2, r3
 800d3f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d3fa:	e070      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d400:	e06d      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d402:	4b39      	ldr	r3, [pc, #228]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d40a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d40e:	d102      	bne.n	800d416 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800d410:	4b37      	ldr	r3, [pc, #220]	@ (800d4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d414:	e063      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d416:	2300      	movs	r3, #0
 800d418:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d41a:	e060      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d41c:	4b32      	ldr	r3, [pc, #200]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d424:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d428:	d102      	bne.n	800d430 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800d42a:	4b32      	ldr	r3, [pc, #200]	@ (800d4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d42c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d42e:	e056      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d430:	2300      	movs	r3, #0
 800d432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d434:	e053      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d436:	2300      	movs	r3, #0
 800d438:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d43a:	e050      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d43c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d440:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800d444:	430b      	orrs	r3, r1
 800d446:	d148      	bne.n	800d4da <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d448:	4b27      	ldr	r3, [pc, #156]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d44a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d44c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d450:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d454:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d458:	d02a      	beq.n	800d4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800d45a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d45c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d460:	d838      	bhi.n	800d4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800d462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d464:	2b00      	cmp	r3, #0
 800d466:	d004      	beq.n	800d472 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800d468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d46a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d46e:	d00d      	beq.n	800d48c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800d470:	e030      	b.n	800d4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d472:	4b1d      	ldr	r3, [pc, #116]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d47a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d47e:	d102      	bne.n	800d486 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800d480:	4b1c      	ldr	r3, [pc, #112]	@ (800d4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d484:	e02b      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d486:	2300      	movs	r3, #0
 800d488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d48a:	e028      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d48c:	4b16      	ldr	r3, [pc, #88]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d494:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d498:	d107      	bne.n	800d4aa <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d49a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f000 fae8 	bl	800da74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d4a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d4a8:	e019      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4ae:	e016      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d4b0:	4b0d      	ldr	r3, [pc, #52]	@ (800d4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d4b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d4bc:	d107      	bne.n	800d4ce <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d4be:	f107 0318 	add.w	r3, r7, #24
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f000 f82e 	bl	800d524 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d4c8:	69fb      	ldr	r3, [r7, #28]
 800d4ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d4cc:	e007      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4d2:	e004      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4d8:	e001      	b.n	800d4de <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800d4de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3740      	adds	r7, #64	@ 0x40
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}
 800d4e8:	58024400 	.word	0x58024400
 800d4ec:	03d09000 	.word	0x03d09000
 800d4f0:	003d0900 	.word	0x003d0900
 800d4f4:	007a1200 	.word	0x007a1200

0800d4f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d4fc:	f7fe f92e 	bl	800b75c <HAL_RCC_GetHCLKFreq>
 800d500:	4602      	mov	r2, r0
 800d502:	4b06      	ldr	r3, [pc, #24]	@ (800d51c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d504:	6a1b      	ldr	r3, [r3, #32]
 800d506:	091b      	lsrs	r3, r3, #4
 800d508:	f003 0307 	and.w	r3, r3, #7
 800d50c:	4904      	ldr	r1, [pc, #16]	@ (800d520 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d50e:	5ccb      	ldrb	r3, [r1, r3]
 800d510:	f003 031f 	and.w	r3, r3, #31
 800d514:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d518:	4618      	mov	r0, r3
 800d51a:	bd80      	pop	{r7, pc}
 800d51c:	58024400 	.word	0x58024400
 800d520:	080143b8 	.word	0x080143b8

0800d524 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d524:	b480      	push	{r7}
 800d526:	b089      	sub	sp, #36	@ 0x24
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d52c:	4ba1      	ldr	r3, [pc, #644]	@ (800d7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d52e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d530:	f003 0303 	and.w	r3, r3, #3
 800d534:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d536:	4b9f      	ldr	r3, [pc, #636]	@ (800d7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d53a:	0b1b      	lsrs	r3, r3, #12
 800d53c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d540:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d542:	4b9c      	ldr	r3, [pc, #624]	@ (800d7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d546:	091b      	lsrs	r3, r3, #4
 800d548:	f003 0301 	and.w	r3, r3, #1
 800d54c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d54e:	4b99      	ldr	r3, [pc, #612]	@ (800d7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d552:	08db      	lsrs	r3, r3, #3
 800d554:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d558:	693a      	ldr	r2, [r7, #16]
 800d55a:	fb02 f303 	mul.w	r3, r2, r3
 800d55e:	ee07 3a90 	vmov	s15, r3
 800d562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d566:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d56a:	697b      	ldr	r3, [r7, #20]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	f000 8111 	beq.w	800d794 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d572:	69bb      	ldr	r3, [r7, #24]
 800d574:	2b02      	cmp	r3, #2
 800d576:	f000 8083 	beq.w	800d680 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d57a:	69bb      	ldr	r3, [r7, #24]
 800d57c:	2b02      	cmp	r3, #2
 800d57e:	f200 80a1 	bhi.w	800d6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d582:	69bb      	ldr	r3, [r7, #24]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d003      	beq.n	800d590 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d588:	69bb      	ldr	r3, [r7, #24]
 800d58a:	2b01      	cmp	r3, #1
 800d58c:	d056      	beq.n	800d63c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d58e:	e099      	b.n	800d6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d590:	4b88      	ldr	r3, [pc, #544]	@ (800d7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	f003 0320 	and.w	r3, r3, #32
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d02d      	beq.n	800d5f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d59c:	4b85      	ldr	r3, [pc, #532]	@ (800d7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	08db      	lsrs	r3, r3, #3
 800d5a2:	f003 0303 	and.w	r3, r3, #3
 800d5a6:	4a84      	ldr	r2, [pc, #528]	@ (800d7b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d5a8:	fa22 f303 	lsr.w	r3, r2, r3
 800d5ac:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	ee07 3a90 	vmov	s15, r3
 800d5b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	ee07 3a90 	vmov	s15, r3
 800d5be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5c6:	4b7b      	ldr	r3, [pc, #492]	@ (800d7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d5c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5ce:	ee07 3a90 	vmov	s15, r3
 800d5d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5da:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d7bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d5de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d5ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d5f6:	e087      	b.n	800d708 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d5f8:	697b      	ldr	r3, [r7, #20]
 800d5fa:	ee07 3a90 	vmov	s15, r3
 800d5fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d602:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d7c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d60a:	4b6a      	ldr	r3, [pc, #424]	@ (800d7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d60c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d60e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d612:	ee07 3a90 	vmov	s15, r3
 800d616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d61a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d61e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d7bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d62a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d62e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d632:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d636:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d63a:	e065      	b.n	800d708 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	ee07 3a90 	vmov	s15, r3
 800d642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d646:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d7c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d64a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d64e:	4b59      	ldr	r3, [pc, #356]	@ (800d7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d656:	ee07 3a90 	vmov	s15, r3
 800d65a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d65e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d662:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d7bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d66a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d66e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d67a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d67e:	e043      	b.n	800d708 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d680:	697b      	ldr	r3, [r7, #20]
 800d682:	ee07 3a90 	vmov	s15, r3
 800d686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d68a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d68e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d692:	4b48      	ldr	r3, [pc, #288]	@ (800d7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d69a:	ee07 3a90 	vmov	s15, r3
 800d69e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6a6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d7bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d6aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d6b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6c2:	e021      	b.n	800d708 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	ee07 3a90 	vmov	s15, r3
 800d6ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6ce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d7c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d6d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6d6:	4b37      	ldr	r3, [pc, #220]	@ (800d7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d6d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6de:	ee07 3a90 	vmov	s15, r3
 800d6e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6ea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d7bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d6ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d6fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d702:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d706:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d708:	4b2a      	ldr	r3, [pc, #168]	@ (800d7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d70a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d70c:	0a5b      	lsrs	r3, r3, #9
 800d70e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d712:	ee07 3a90 	vmov	s15, r3
 800d716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d71a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d71e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d722:	edd7 6a07 	vldr	s13, [r7, #28]
 800d726:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d72a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d72e:	ee17 2a90 	vmov	r2, s15
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d736:	4b1f      	ldr	r3, [pc, #124]	@ (800d7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d73a:	0c1b      	lsrs	r3, r3, #16
 800d73c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d740:	ee07 3a90 	vmov	s15, r3
 800d744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d748:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d74c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d750:	edd7 6a07 	vldr	s13, [r7, #28]
 800d754:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d758:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d75c:	ee17 2a90 	vmov	r2, s15
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d764:	4b13      	ldr	r3, [pc, #76]	@ (800d7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d768:	0e1b      	lsrs	r3, r3, #24
 800d76a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d76e:	ee07 3a90 	vmov	s15, r3
 800d772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d776:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d77a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d77e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d782:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d786:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d78a:	ee17 2a90 	vmov	r2, s15
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d792:	e008      	b.n	800d7a6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2200      	movs	r2, #0
 800d798:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2200      	movs	r2, #0
 800d79e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	609a      	str	r2, [r3, #8]
}
 800d7a6:	bf00      	nop
 800d7a8:	3724      	adds	r7, #36	@ 0x24
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b0:	4770      	bx	lr
 800d7b2:	bf00      	nop
 800d7b4:	58024400 	.word	0x58024400
 800d7b8:	03d09000 	.word	0x03d09000
 800d7bc:	46000000 	.word	0x46000000
 800d7c0:	4c742400 	.word	0x4c742400
 800d7c4:	4a742400 	.word	0x4a742400
 800d7c8:	4af42400 	.word	0x4af42400

0800d7cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b089      	sub	sp, #36	@ 0x24
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d7d4:	4ba1      	ldr	r3, [pc, #644]	@ (800da5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7d8:	f003 0303 	and.w	r3, r3, #3
 800d7dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d7de:	4b9f      	ldr	r3, [pc, #636]	@ (800da5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7e2:	0d1b      	lsrs	r3, r3, #20
 800d7e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d7e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d7ea:	4b9c      	ldr	r3, [pc, #624]	@ (800da5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7ee:	0a1b      	lsrs	r3, r3, #8
 800d7f0:	f003 0301 	and.w	r3, r3, #1
 800d7f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d7f6:	4b99      	ldr	r3, [pc, #612]	@ (800da5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7fa:	08db      	lsrs	r3, r3, #3
 800d7fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d800:	693a      	ldr	r2, [r7, #16]
 800d802:	fb02 f303 	mul.w	r3, r2, r3
 800d806:	ee07 3a90 	vmov	s15, r3
 800d80a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d80e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	2b00      	cmp	r3, #0
 800d816:	f000 8111 	beq.w	800da3c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d81a:	69bb      	ldr	r3, [r7, #24]
 800d81c:	2b02      	cmp	r3, #2
 800d81e:	f000 8083 	beq.w	800d928 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d822:	69bb      	ldr	r3, [r7, #24]
 800d824:	2b02      	cmp	r3, #2
 800d826:	f200 80a1 	bhi.w	800d96c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d82a:	69bb      	ldr	r3, [r7, #24]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d003      	beq.n	800d838 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d830:	69bb      	ldr	r3, [r7, #24]
 800d832:	2b01      	cmp	r3, #1
 800d834:	d056      	beq.n	800d8e4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d836:	e099      	b.n	800d96c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d838:	4b88      	ldr	r3, [pc, #544]	@ (800da5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	f003 0320 	and.w	r3, r3, #32
 800d840:	2b00      	cmp	r3, #0
 800d842:	d02d      	beq.n	800d8a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d844:	4b85      	ldr	r3, [pc, #532]	@ (800da5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	08db      	lsrs	r3, r3, #3
 800d84a:	f003 0303 	and.w	r3, r3, #3
 800d84e:	4a84      	ldr	r2, [pc, #528]	@ (800da60 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d850:	fa22 f303 	lsr.w	r3, r2, r3
 800d854:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	ee07 3a90 	vmov	s15, r3
 800d85c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	ee07 3a90 	vmov	s15, r3
 800d866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d86a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d86e:	4b7b      	ldr	r3, [pc, #492]	@ (800da5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d876:	ee07 3a90 	vmov	s15, r3
 800d87a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d87e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d882:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800da64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d88a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d88e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d89a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d89e:	e087      	b.n	800d9b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	ee07 3a90 	vmov	s15, r3
 800d8a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8aa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800da68 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d8ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8b2:	4b6a      	ldr	r3, [pc, #424]	@ (800da5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8ba:	ee07 3a90 	vmov	s15, r3
 800d8be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d8c6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800da64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d8ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d8ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d8d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d8d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d8e2:	e065      	b.n	800d9b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	ee07 3a90 	vmov	s15, r3
 800d8ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8ee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800da6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d8f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8f6:	4b59      	ldr	r3, [pc, #356]	@ (800da5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8fe:	ee07 3a90 	vmov	s15, r3
 800d902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d906:	ed97 6a03 	vldr	s12, [r7, #12]
 800d90a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800da64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d90e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d916:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d91a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d91e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d922:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d926:	e043      	b.n	800d9b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	ee07 3a90 	vmov	s15, r3
 800d92e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d932:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800da70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d93a:	4b48      	ldr	r3, [pc, #288]	@ (800da5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d93c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d93e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d942:	ee07 3a90 	vmov	s15, r3
 800d946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d94a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d94e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800da64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d95a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d95e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d962:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d966:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d96a:	e021      	b.n	800d9b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d96c:	697b      	ldr	r3, [r7, #20]
 800d96e:	ee07 3a90 	vmov	s15, r3
 800d972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d976:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800da6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d97a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d97e:	4b37      	ldr	r3, [pc, #220]	@ (800da5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d986:	ee07 3a90 	vmov	s15, r3
 800d98a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d98e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d992:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800da64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d99a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d99e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d9a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d9ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d9b0:	4b2a      	ldr	r3, [pc, #168]	@ (800da5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d9b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9b4:	0a5b      	lsrs	r3, r3, #9
 800d9b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d9ba:	ee07 3a90 	vmov	s15, r3
 800d9be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d9c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d9ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800d9ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d9d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d9d6:	ee17 2a90 	vmov	r2, s15
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d9de:	4b1f      	ldr	r3, [pc, #124]	@ (800da5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d9e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9e2:	0c1b      	lsrs	r3, r3, #16
 800d9e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d9e8:	ee07 3a90 	vmov	s15, r3
 800d9ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d9f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d9f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d9fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da04:	ee17 2a90 	vmov	r2, s15
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800da0c:	4b13      	ldr	r3, [pc, #76]	@ (800da5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da10:	0e1b      	lsrs	r3, r3, #24
 800da12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da16:	ee07 3a90 	vmov	s15, r3
 800da1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800da22:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da26:	edd7 6a07 	vldr	s13, [r7, #28]
 800da2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da32:	ee17 2a90 	vmov	r2, s15
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800da3a:	e008      	b.n	800da4e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2200      	movs	r2, #0
 800da40:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2200      	movs	r2, #0
 800da46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2200      	movs	r2, #0
 800da4c:	609a      	str	r2, [r3, #8]
}
 800da4e:	bf00      	nop
 800da50:	3724      	adds	r7, #36	@ 0x24
 800da52:	46bd      	mov	sp, r7
 800da54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da58:	4770      	bx	lr
 800da5a:	bf00      	nop
 800da5c:	58024400 	.word	0x58024400
 800da60:	03d09000 	.word	0x03d09000
 800da64:	46000000 	.word	0x46000000
 800da68:	4c742400 	.word	0x4c742400
 800da6c:	4a742400 	.word	0x4a742400
 800da70:	4af42400 	.word	0x4af42400

0800da74 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800da74:	b480      	push	{r7}
 800da76:	b089      	sub	sp, #36	@ 0x24
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800da7c:	4ba0      	ldr	r3, [pc, #640]	@ (800dd00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da80:	f003 0303 	and.w	r3, r3, #3
 800da84:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800da86:	4b9e      	ldr	r3, [pc, #632]	@ (800dd00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da8a:	091b      	lsrs	r3, r3, #4
 800da8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800da90:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800da92:	4b9b      	ldr	r3, [pc, #620]	@ (800dd00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da96:	f003 0301 	and.w	r3, r3, #1
 800da9a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800da9c:	4b98      	ldr	r3, [pc, #608]	@ (800dd00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800daa0:	08db      	lsrs	r3, r3, #3
 800daa2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800daa6:	693a      	ldr	r2, [r7, #16]
 800daa8:	fb02 f303 	mul.w	r3, r2, r3
 800daac:	ee07 3a90 	vmov	s15, r3
 800dab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dab4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800dab8:	697b      	ldr	r3, [r7, #20]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	f000 8111 	beq.w	800dce2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800dac0:	69bb      	ldr	r3, [r7, #24]
 800dac2:	2b02      	cmp	r3, #2
 800dac4:	f000 8083 	beq.w	800dbce <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800dac8:	69bb      	ldr	r3, [r7, #24]
 800daca:	2b02      	cmp	r3, #2
 800dacc:	f200 80a1 	bhi.w	800dc12 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800dad0:	69bb      	ldr	r3, [r7, #24]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d003      	beq.n	800dade <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800dad6:	69bb      	ldr	r3, [r7, #24]
 800dad8:	2b01      	cmp	r3, #1
 800dada:	d056      	beq.n	800db8a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800dadc:	e099      	b.n	800dc12 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dade:	4b88      	ldr	r3, [pc, #544]	@ (800dd00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	f003 0320 	and.w	r3, r3, #32
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d02d      	beq.n	800db46 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800daea:	4b85      	ldr	r3, [pc, #532]	@ (800dd00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	08db      	lsrs	r3, r3, #3
 800daf0:	f003 0303 	and.w	r3, r3, #3
 800daf4:	4a83      	ldr	r2, [pc, #524]	@ (800dd04 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800daf6:	fa22 f303 	lsr.w	r3, r2, r3
 800dafa:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	ee07 3a90 	vmov	s15, r3
 800db02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db06:	697b      	ldr	r3, [r7, #20]
 800db08:	ee07 3a90 	vmov	s15, r3
 800db0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db14:	4b7a      	ldr	r3, [pc, #488]	@ (800dd00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db1c:	ee07 3a90 	vmov	s15, r3
 800db20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db24:	ed97 6a03 	vldr	s12, [r7, #12]
 800db28:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800dd08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800db2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800db38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db40:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800db44:	e087      	b.n	800dc56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	ee07 3a90 	vmov	s15, r3
 800db4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db50:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800dd0c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800db54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db58:	4b69      	ldr	r3, [pc, #420]	@ (800dd00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db60:	ee07 3a90 	vmov	s15, r3
 800db64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db68:	ed97 6a03 	vldr	s12, [r7, #12]
 800db6c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800dd08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800db70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800db7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db84:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800db88:	e065      	b.n	800dc56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	ee07 3a90 	vmov	s15, r3
 800db90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db94:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800dd10 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800db98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db9c:	4b58      	ldr	r3, [pc, #352]	@ (800dd00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dba4:	ee07 3a90 	vmov	s15, r3
 800dba8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dbac:	ed97 6a03 	vldr	s12, [r7, #12]
 800dbb0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800dd08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dbb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dbb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dbbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dbc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dbc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dbc8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dbcc:	e043      	b.n	800dc56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	ee07 3a90 	vmov	s15, r3
 800dbd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbd8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800dd14 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800dbdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dbe0:	4b47      	ldr	r3, [pc, #284]	@ (800dd00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dbe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbe8:	ee07 3a90 	vmov	s15, r3
 800dbec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dbf0:	ed97 6a03 	vldr	s12, [r7, #12]
 800dbf4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800dd08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dbf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dbfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dc04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc08:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dc10:	e021      	b.n	800dc56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	ee07 3a90 	vmov	s15, r3
 800dc18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc1c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800dd0c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800dc20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc24:	4b36      	ldr	r3, [pc, #216]	@ (800dd00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dc26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc2c:	ee07 3a90 	vmov	s15, r3
 800dc30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc34:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc38:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800dd08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dc3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dc48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dc54:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800dc56:	4b2a      	ldr	r3, [pc, #168]	@ (800dd00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dc58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc5a:	0a5b      	lsrs	r3, r3, #9
 800dc5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dc60:	ee07 3a90 	vmov	s15, r3
 800dc64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc68:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dc6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dc70:	edd7 6a07 	vldr	s13, [r7, #28]
 800dc74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dc78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc7c:	ee17 2a90 	vmov	r2, s15
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800dc84:	4b1e      	ldr	r3, [pc, #120]	@ (800dd00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dc86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc88:	0c1b      	lsrs	r3, r3, #16
 800dc8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dc8e:	ee07 3a90 	vmov	s15, r3
 800dc92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dc9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dc9e:	edd7 6a07 	vldr	s13, [r7, #28]
 800dca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dca6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dcaa:	ee17 2a90 	vmov	r2, s15
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800dcb2:	4b13      	ldr	r3, [pc, #76]	@ (800dd00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dcb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dcb6:	0e1b      	lsrs	r3, r3, #24
 800dcb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dcbc:	ee07 3a90 	vmov	s15, r3
 800dcc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcc4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dcc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dccc:	edd7 6a07 	vldr	s13, [r7, #28]
 800dcd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dcd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dcd8:	ee17 2a90 	vmov	r2, s15
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800dce0:	e008      	b.n	800dcf4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2200      	movs	r2, #0
 800dce6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2200      	movs	r2, #0
 800dcec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	609a      	str	r2, [r3, #8]
}
 800dcf4:	bf00      	nop
 800dcf6:	3724      	adds	r7, #36	@ 0x24
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfe:	4770      	bx	lr
 800dd00:	58024400 	.word	0x58024400
 800dd04:	03d09000 	.word	0x03d09000
 800dd08:	46000000 	.word	0x46000000
 800dd0c:	4c742400 	.word	0x4c742400
 800dd10:	4a742400 	.word	0x4a742400
 800dd14:	4af42400 	.word	0x4af42400

0800dd18 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b084      	sub	sp, #16
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
 800dd20:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dd22:	2300      	movs	r3, #0
 800dd24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dd26:	4b53      	ldr	r3, [pc, #332]	@ (800de74 <RCCEx_PLL2_Config+0x15c>)
 800dd28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd2a:	f003 0303 	and.w	r3, r3, #3
 800dd2e:	2b03      	cmp	r3, #3
 800dd30:	d101      	bne.n	800dd36 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800dd32:	2301      	movs	r3, #1
 800dd34:	e099      	b.n	800de6a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800dd36:	4b4f      	ldr	r3, [pc, #316]	@ (800de74 <RCCEx_PLL2_Config+0x15c>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	4a4e      	ldr	r2, [pc, #312]	@ (800de74 <RCCEx_PLL2_Config+0x15c>)
 800dd3c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800dd40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dd42:	f7f6 fb51 	bl	80043e8 <HAL_GetTick>
 800dd46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dd48:	e008      	b.n	800dd5c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dd4a:	f7f6 fb4d 	bl	80043e8 <HAL_GetTick>
 800dd4e:	4602      	mov	r2, r0
 800dd50:	68bb      	ldr	r3, [r7, #8]
 800dd52:	1ad3      	subs	r3, r2, r3
 800dd54:	2b02      	cmp	r3, #2
 800dd56:	d901      	bls.n	800dd5c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dd58:	2303      	movs	r3, #3
 800dd5a:	e086      	b.n	800de6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dd5c:	4b45      	ldr	r3, [pc, #276]	@ (800de74 <RCCEx_PLL2_Config+0x15c>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d1f0      	bne.n	800dd4a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800dd68:	4b42      	ldr	r3, [pc, #264]	@ (800de74 <RCCEx_PLL2_Config+0x15c>)
 800dd6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd6c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	031b      	lsls	r3, r3, #12
 800dd76:	493f      	ldr	r1, [pc, #252]	@ (800de74 <RCCEx_PLL2_Config+0x15c>)
 800dd78:	4313      	orrs	r3, r2
 800dd7a:	628b      	str	r3, [r1, #40]	@ 0x28
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	685b      	ldr	r3, [r3, #4]
 800dd80:	3b01      	subs	r3, #1
 800dd82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	689b      	ldr	r3, [r3, #8]
 800dd8a:	3b01      	subs	r3, #1
 800dd8c:	025b      	lsls	r3, r3, #9
 800dd8e:	b29b      	uxth	r3, r3
 800dd90:	431a      	orrs	r2, r3
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	68db      	ldr	r3, [r3, #12]
 800dd96:	3b01      	subs	r3, #1
 800dd98:	041b      	lsls	r3, r3, #16
 800dd9a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800dd9e:	431a      	orrs	r2, r3
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	691b      	ldr	r3, [r3, #16]
 800dda4:	3b01      	subs	r3, #1
 800dda6:	061b      	lsls	r3, r3, #24
 800dda8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ddac:	4931      	ldr	r1, [pc, #196]	@ (800de74 <RCCEx_PLL2_Config+0x15c>)
 800ddae:	4313      	orrs	r3, r2
 800ddb0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ddb2:	4b30      	ldr	r3, [pc, #192]	@ (800de74 <RCCEx_PLL2_Config+0x15c>)
 800ddb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddb6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	695b      	ldr	r3, [r3, #20]
 800ddbe:	492d      	ldr	r1, [pc, #180]	@ (800de74 <RCCEx_PLL2_Config+0x15c>)
 800ddc0:	4313      	orrs	r3, r2
 800ddc2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ddc4:	4b2b      	ldr	r3, [pc, #172]	@ (800de74 <RCCEx_PLL2_Config+0x15c>)
 800ddc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddc8:	f023 0220 	bic.w	r2, r3, #32
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	699b      	ldr	r3, [r3, #24]
 800ddd0:	4928      	ldr	r1, [pc, #160]	@ (800de74 <RCCEx_PLL2_Config+0x15c>)
 800ddd2:	4313      	orrs	r3, r2
 800ddd4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ddd6:	4b27      	ldr	r3, [pc, #156]	@ (800de74 <RCCEx_PLL2_Config+0x15c>)
 800ddd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddda:	4a26      	ldr	r2, [pc, #152]	@ (800de74 <RCCEx_PLL2_Config+0x15c>)
 800dddc:	f023 0310 	bic.w	r3, r3, #16
 800dde0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800dde2:	4b24      	ldr	r3, [pc, #144]	@ (800de74 <RCCEx_PLL2_Config+0x15c>)
 800dde4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dde6:	4b24      	ldr	r3, [pc, #144]	@ (800de78 <RCCEx_PLL2_Config+0x160>)
 800dde8:	4013      	ands	r3, r2
 800ddea:	687a      	ldr	r2, [r7, #4]
 800ddec:	69d2      	ldr	r2, [r2, #28]
 800ddee:	00d2      	lsls	r2, r2, #3
 800ddf0:	4920      	ldr	r1, [pc, #128]	@ (800de74 <RCCEx_PLL2_Config+0x15c>)
 800ddf2:	4313      	orrs	r3, r2
 800ddf4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ddf6:	4b1f      	ldr	r3, [pc, #124]	@ (800de74 <RCCEx_PLL2_Config+0x15c>)
 800ddf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddfa:	4a1e      	ldr	r2, [pc, #120]	@ (800de74 <RCCEx_PLL2_Config+0x15c>)
 800ddfc:	f043 0310 	orr.w	r3, r3, #16
 800de00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d106      	bne.n	800de16 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800de08:	4b1a      	ldr	r3, [pc, #104]	@ (800de74 <RCCEx_PLL2_Config+0x15c>)
 800de0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de0c:	4a19      	ldr	r2, [pc, #100]	@ (800de74 <RCCEx_PLL2_Config+0x15c>)
 800de0e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800de12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800de14:	e00f      	b.n	800de36 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	2b01      	cmp	r3, #1
 800de1a:	d106      	bne.n	800de2a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800de1c:	4b15      	ldr	r3, [pc, #84]	@ (800de74 <RCCEx_PLL2_Config+0x15c>)
 800de1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de20:	4a14      	ldr	r2, [pc, #80]	@ (800de74 <RCCEx_PLL2_Config+0x15c>)
 800de22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800de26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800de28:	e005      	b.n	800de36 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800de2a:	4b12      	ldr	r3, [pc, #72]	@ (800de74 <RCCEx_PLL2_Config+0x15c>)
 800de2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de2e:	4a11      	ldr	r2, [pc, #68]	@ (800de74 <RCCEx_PLL2_Config+0x15c>)
 800de30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800de34:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800de36:	4b0f      	ldr	r3, [pc, #60]	@ (800de74 <RCCEx_PLL2_Config+0x15c>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	4a0e      	ldr	r2, [pc, #56]	@ (800de74 <RCCEx_PLL2_Config+0x15c>)
 800de3c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800de40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800de42:	f7f6 fad1 	bl	80043e8 <HAL_GetTick>
 800de46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800de48:	e008      	b.n	800de5c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800de4a:	f7f6 facd 	bl	80043e8 <HAL_GetTick>
 800de4e:	4602      	mov	r2, r0
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	1ad3      	subs	r3, r2, r3
 800de54:	2b02      	cmp	r3, #2
 800de56:	d901      	bls.n	800de5c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800de58:	2303      	movs	r3, #3
 800de5a:	e006      	b.n	800de6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800de5c:	4b05      	ldr	r3, [pc, #20]	@ (800de74 <RCCEx_PLL2_Config+0x15c>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800de64:	2b00      	cmp	r3, #0
 800de66:	d0f0      	beq.n	800de4a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800de68:	7bfb      	ldrb	r3, [r7, #15]
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3710      	adds	r7, #16
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}
 800de72:	bf00      	nop
 800de74:	58024400 	.word	0x58024400
 800de78:	ffff0007 	.word	0xffff0007

0800de7c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b084      	sub	sp, #16
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
 800de84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800de86:	2300      	movs	r3, #0
 800de88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800de8a:	4b53      	ldr	r3, [pc, #332]	@ (800dfd8 <RCCEx_PLL3_Config+0x15c>)
 800de8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de8e:	f003 0303 	and.w	r3, r3, #3
 800de92:	2b03      	cmp	r3, #3
 800de94:	d101      	bne.n	800de9a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800de96:	2301      	movs	r3, #1
 800de98:	e099      	b.n	800dfce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800de9a:	4b4f      	ldr	r3, [pc, #316]	@ (800dfd8 <RCCEx_PLL3_Config+0x15c>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	4a4e      	ldr	r2, [pc, #312]	@ (800dfd8 <RCCEx_PLL3_Config+0x15c>)
 800dea0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dea4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dea6:	f7f6 fa9f 	bl	80043e8 <HAL_GetTick>
 800deaa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800deac:	e008      	b.n	800dec0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800deae:	f7f6 fa9b 	bl	80043e8 <HAL_GetTick>
 800deb2:	4602      	mov	r2, r0
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	1ad3      	subs	r3, r2, r3
 800deb8:	2b02      	cmp	r3, #2
 800deba:	d901      	bls.n	800dec0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800debc:	2303      	movs	r3, #3
 800debe:	e086      	b.n	800dfce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dec0:	4b45      	ldr	r3, [pc, #276]	@ (800dfd8 <RCCEx_PLL3_Config+0x15c>)
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d1f0      	bne.n	800deae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800decc:	4b42      	ldr	r3, [pc, #264]	@ (800dfd8 <RCCEx_PLL3_Config+0x15c>)
 800dece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ded0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	051b      	lsls	r3, r3, #20
 800deda:	493f      	ldr	r1, [pc, #252]	@ (800dfd8 <RCCEx_PLL3_Config+0x15c>)
 800dedc:	4313      	orrs	r3, r2
 800dede:	628b      	str	r3, [r1, #40]	@ 0x28
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	685b      	ldr	r3, [r3, #4]
 800dee4:	3b01      	subs	r3, #1
 800dee6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	689b      	ldr	r3, [r3, #8]
 800deee:	3b01      	subs	r3, #1
 800def0:	025b      	lsls	r3, r3, #9
 800def2:	b29b      	uxth	r3, r3
 800def4:	431a      	orrs	r2, r3
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	68db      	ldr	r3, [r3, #12]
 800defa:	3b01      	subs	r3, #1
 800defc:	041b      	lsls	r3, r3, #16
 800defe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800df02:	431a      	orrs	r2, r3
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	691b      	ldr	r3, [r3, #16]
 800df08:	3b01      	subs	r3, #1
 800df0a:	061b      	lsls	r3, r3, #24
 800df0c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800df10:	4931      	ldr	r1, [pc, #196]	@ (800dfd8 <RCCEx_PLL3_Config+0x15c>)
 800df12:	4313      	orrs	r3, r2
 800df14:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800df16:	4b30      	ldr	r3, [pc, #192]	@ (800dfd8 <RCCEx_PLL3_Config+0x15c>)
 800df18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df1a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	695b      	ldr	r3, [r3, #20]
 800df22:	492d      	ldr	r1, [pc, #180]	@ (800dfd8 <RCCEx_PLL3_Config+0x15c>)
 800df24:	4313      	orrs	r3, r2
 800df26:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800df28:	4b2b      	ldr	r3, [pc, #172]	@ (800dfd8 <RCCEx_PLL3_Config+0x15c>)
 800df2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df2c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	699b      	ldr	r3, [r3, #24]
 800df34:	4928      	ldr	r1, [pc, #160]	@ (800dfd8 <RCCEx_PLL3_Config+0x15c>)
 800df36:	4313      	orrs	r3, r2
 800df38:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800df3a:	4b27      	ldr	r3, [pc, #156]	@ (800dfd8 <RCCEx_PLL3_Config+0x15c>)
 800df3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df3e:	4a26      	ldr	r2, [pc, #152]	@ (800dfd8 <RCCEx_PLL3_Config+0x15c>)
 800df40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800df44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800df46:	4b24      	ldr	r3, [pc, #144]	@ (800dfd8 <RCCEx_PLL3_Config+0x15c>)
 800df48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800df4a:	4b24      	ldr	r3, [pc, #144]	@ (800dfdc <RCCEx_PLL3_Config+0x160>)
 800df4c:	4013      	ands	r3, r2
 800df4e:	687a      	ldr	r2, [r7, #4]
 800df50:	69d2      	ldr	r2, [r2, #28]
 800df52:	00d2      	lsls	r2, r2, #3
 800df54:	4920      	ldr	r1, [pc, #128]	@ (800dfd8 <RCCEx_PLL3_Config+0x15c>)
 800df56:	4313      	orrs	r3, r2
 800df58:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800df5a:	4b1f      	ldr	r3, [pc, #124]	@ (800dfd8 <RCCEx_PLL3_Config+0x15c>)
 800df5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df5e:	4a1e      	ldr	r2, [pc, #120]	@ (800dfd8 <RCCEx_PLL3_Config+0x15c>)
 800df60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800df64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d106      	bne.n	800df7a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800df6c:	4b1a      	ldr	r3, [pc, #104]	@ (800dfd8 <RCCEx_PLL3_Config+0x15c>)
 800df6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df70:	4a19      	ldr	r2, [pc, #100]	@ (800dfd8 <RCCEx_PLL3_Config+0x15c>)
 800df72:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800df76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800df78:	e00f      	b.n	800df9a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	2b01      	cmp	r3, #1
 800df7e:	d106      	bne.n	800df8e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800df80:	4b15      	ldr	r3, [pc, #84]	@ (800dfd8 <RCCEx_PLL3_Config+0x15c>)
 800df82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df84:	4a14      	ldr	r2, [pc, #80]	@ (800dfd8 <RCCEx_PLL3_Config+0x15c>)
 800df86:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800df8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800df8c:	e005      	b.n	800df9a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800df8e:	4b12      	ldr	r3, [pc, #72]	@ (800dfd8 <RCCEx_PLL3_Config+0x15c>)
 800df90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df92:	4a11      	ldr	r2, [pc, #68]	@ (800dfd8 <RCCEx_PLL3_Config+0x15c>)
 800df94:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800df98:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800df9a:	4b0f      	ldr	r3, [pc, #60]	@ (800dfd8 <RCCEx_PLL3_Config+0x15c>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	4a0e      	ldr	r2, [pc, #56]	@ (800dfd8 <RCCEx_PLL3_Config+0x15c>)
 800dfa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dfa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dfa6:	f7f6 fa1f 	bl	80043e8 <HAL_GetTick>
 800dfaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dfac:	e008      	b.n	800dfc0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dfae:	f7f6 fa1b 	bl	80043e8 <HAL_GetTick>
 800dfb2:	4602      	mov	r2, r0
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	1ad3      	subs	r3, r2, r3
 800dfb8:	2b02      	cmp	r3, #2
 800dfba:	d901      	bls.n	800dfc0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dfbc:	2303      	movs	r3, #3
 800dfbe:	e006      	b.n	800dfce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dfc0:	4b05      	ldr	r3, [pc, #20]	@ (800dfd8 <RCCEx_PLL3_Config+0x15c>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d0f0      	beq.n	800dfae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800dfcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3710      	adds	r7, #16
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}
 800dfd6:	bf00      	nop
 800dfd8:	58024400 	.word	0x58024400
 800dfdc:	ffff0007 	.word	0xffff0007

0800dfe0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b082      	sub	sp, #8
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d101      	bne.n	800dff2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dfee:	2301      	movs	r3, #1
 800dff0:	e049      	b.n	800e086 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dff8:	b2db      	uxtb	r3, r3
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d106      	bne.n	800e00c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2200      	movs	r2, #0
 800e002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e006:	6878      	ldr	r0, [r7, #4]
 800e008:	f7f5 fe44 	bl	8003c94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2202      	movs	r2, #2
 800e010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681a      	ldr	r2, [r3, #0]
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	3304      	adds	r3, #4
 800e01c:	4619      	mov	r1, r3
 800e01e:	4610      	mov	r0, r2
 800e020:	f000 fbf0 	bl	800e804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2201      	movs	r2, #1
 800e028:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2201      	movs	r2, #1
 800e030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2201      	movs	r2, #1
 800e038:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2201      	movs	r2, #1
 800e040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2201      	movs	r2, #1
 800e048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2201      	movs	r2, #1
 800e050:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2201      	movs	r2, #1
 800e058:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2201      	movs	r2, #1
 800e060:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2201      	movs	r2, #1
 800e068:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2201      	movs	r2, #1
 800e070:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2201      	movs	r2, #1
 800e078:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2201      	movs	r2, #1
 800e080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e084:	2300      	movs	r3, #0
}
 800e086:	4618      	mov	r0, r3
 800e088:	3708      	adds	r7, #8
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}
	...

0800e090 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b084      	sub	sp, #16
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
 800e098:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d109      	bne.n	800e0b4 <HAL_TIM_PWM_Start+0x24>
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e0a6:	b2db      	uxtb	r3, r3
 800e0a8:	2b01      	cmp	r3, #1
 800e0aa:	bf14      	ite	ne
 800e0ac:	2301      	movne	r3, #1
 800e0ae:	2300      	moveq	r3, #0
 800e0b0:	b2db      	uxtb	r3, r3
 800e0b2:	e03c      	b.n	800e12e <HAL_TIM_PWM_Start+0x9e>
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	2b04      	cmp	r3, #4
 800e0b8:	d109      	bne.n	800e0ce <HAL_TIM_PWM_Start+0x3e>
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e0c0:	b2db      	uxtb	r3, r3
 800e0c2:	2b01      	cmp	r3, #1
 800e0c4:	bf14      	ite	ne
 800e0c6:	2301      	movne	r3, #1
 800e0c8:	2300      	moveq	r3, #0
 800e0ca:	b2db      	uxtb	r3, r3
 800e0cc:	e02f      	b.n	800e12e <HAL_TIM_PWM_Start+0x9e>
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	2b08      	cmp	r3, #8
 800e0d2:	d109      	bne.n	800e0e8 <HAL_TIM_PWM_Start+0x58>
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e0da:	b2db      	uxtb	r3, r3
 800e0dc:	2b01      	cmp	r3, #1
 800e0de:	bf14      	ite	ne
 800e0e0:	2301      	movne	r3, #1
 800e0e2:	2300      	moveq	r3, #0
 800e0e4:	b2db      	uxtb	r3, r3
 800e0e6:	e022      	b.n	800e12e <HAL_TIM_PWM_Start+0x9e>
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	2b0c      	cmp	r3, #12
 800e0ec:	d109      	bne.n	800e102 <HAL_TIM_PWM_Start+0x72>
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e0f4:	b2db      	uxtb	r3, r3
 800e0f6:	2b01      	cmp	r3, #1
 800e0f8:	bf14      	ite	ne
 800e0fa:	2301      	movne	r3, #1
 800e0fc:	2300      	moveq	r3, #0
 800e0fe:	b2db      	uxtb	r3, r3
 800e100:	e015      	b.n	800e12e <HAL_TIM_PWM_Start+0x9e>
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	2b10      	cmp	r3, #16
 800e106:	d109      	bne.n	800e11c <HAL_TIM_PWM_Start+0x8c>
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e10e:	b2db      	uxtb	r3, r3
 800e110:	2b01      	cmp	r3, #1
 800e112:	bf14      	ite	ne
 800e114:	2301      	movne	r3, #1
 800e116:	2300      	moveq	r3, #0
 800e118:	b2db      	uxtb	r3, r3
 800e11a:	e008      	b.n	800e12e <HAL_TIM_PWM_Start+0x9e>
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e122:	b2db      	uxtb	r3, r3
 800e124:	2b01      	cmp	r3, #1
 800e126:	bf14      	ite	ne
 800e128:	2301      	movne	r3, #1
 800e12a:	2300      	moveq	r3, #0
 800e12c:	b2db      	uxtb	r3, r3
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d001      	beq.n	800e136 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e132:	2301      	movs	r3, #1
 800e134:	e0ab      	b.n	800e28e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d104      	bne.n	800e146 <HAL_TIM_PWM_Start+0xb6>
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2202      	movs	r2, #2
 800e140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e144:	e023      	b.n	800e18e <HAL_TIM_PWM_Start+0xfe>
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	2b04      	cmp	r3, #4
 800e14a:	d104      	bne.n	800e156 <HAL_TIM_PWM_Start+0xc6>
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2202      	movs	r2, #2
 800e150:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e154:	e01b      	b.n	800e18e <HAL_TIM_PWM_Start+0xfe>
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	2b08      	cmp	r3, #8
 800e15a:	d104      	bne.n	800e166 <HAL_TIM_PWM_Start+0xd6>
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2202      	movs	r2, #2
 800e160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e164:	e013      	b.n	800e18e <HAL_TIM_PWM_Start+0xfe>
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	2b0c      	cmp	r3, #12
 800e16a:	d104      	bne.n	800e176 <HAL_TIM_PWM_Start+0xe6>
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2202      	movs	r2, #2
 800e170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e174:	e00b      	b.n	800e18e <HAL_TIM_PWM_Start+0xfe>
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	2b10      	cmp	r3, #16
 800e17a:	d104      	bne.n	800e186 <HAL_TIM_PWM_Start+0xf6>
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2202      	movs	r2, #2
 800e180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e184:	e003      	b.n	800e18e <HAL_TIM_PWM_Start+0xfe>
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2202      	movs	r2, #2
 800e18a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	2201      	movs	r2, #1
 800e194:	6839      	ldr	r1, [r7, #0]
 800e196:	4618      	mov	r0, r3
 800e198:	f000 ffe6 	bl	800f168 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	4a3d      	ldr	r2, [pc, #244]	@ (800e298 <HAL_TIM_PWM_Start+0x208>)
 800e1a2:	4293      	cmp	r3, r2
 800e1a4:	d013      	beq.n	800e1ce <HAL_TIM_PWM_Start+0x13e>
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	4a3c      	ldr	r2, [pc, #240]	@ (800e29c <HAL_TIM_PWM_Start+0x20c>)
 800e1ac:	4293      	cmp	r3, r2
 800e1ae:	d00e      	beq.n	800e1ce <HAL_TIM_PWM_Start+0x13e>
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	4a3a      	ldr	r2, [pc, #232]	@ (800e2a0 <HAL_TIM_PWM_Start+0x210>)
 800e1b6:	4293      	cmp	r3, r2
 800e1b8:	d009      	beq.n	800e1ce <HAL_TIM_PWM_Start+0x13e>
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	4a39      	ldr	r2, [pc, #228]	@ (800e2a4 <HAL_TIM_PWM_Start+0x214>)
 800e1c0:	4293      	cmp	r3, r2
 800e1c2:	d004      	beq.n	800e1ce <HAL_TIM_PWM_Start+0x13e>
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	4a37      	ldr	r2, [pc, #220]	@ (800e2a8 <HAL_TIM_PWM_Start+0x218>)
 800e1ca:	4293      	cmp	r3, r2
 800e1cc:	d101      	bne.n	800e1d2 <HAL_TIM_PWM_Start+0x142>
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	e000      	b.n	800e1d4 <HAL_TIM_PWM_Start+0x144>
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d007      	beq.n	800e1e8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e1e6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	4a2a      	ldr	r2, [pc, #168]	@ (800e298 <HAL_TIM_PWM_Start+0x208>)
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	d02c      	beq.n	800e24c <HAL_TIM_PWM_Start+0x1bc>
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e1fa:	d027      	beq.n	800e24c <HAL_TIM_PWM_Start+0x1bc>
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	4a2a      	ldr	r2, [pc, #168]	@ (800e2ac <HAL_TIM_PWM_Start+0x21c>)
 800e202:	4293      	cmp	r3, r2
 800e204:	d022      	beq.n	800e24c <HAL_TIM_PWM_Start+0x1bc>
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	4a29      	ldr	r2, [pc, #164]	@ (800e2b0 <HAL_TIM_PWM_Start+0x220>)
 800e20c:	4293      	cmp	r3, r2
 800e20e:	d01d      	beq.n	800e24c <HAL_TIM_PWM_Start+0x1bc>
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	4a27      	ldr	r2, [pc, #156]	@ (800e2b4 <HAL_TIM_PWM_Start+0x224>)
 800e216:	4293      	cmp	r3, r2
 800e218:	d018      	beq.n	800e24c <HAL_TIM_PWM_Start+0x1bc>
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	4a1f      	ldr	r2, [pc, #124]	@ (800e29c <HAL_TIM_PWM_Start+0x20c>)
 800e220:	4293      	cmp	r3, r2
 800e222:	d013      	beq.n	800e24c <HAL_TIM_PWM_Start+0x1bc>
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	4a23      	ldr	r2, [pc, #140]	@ (800e2b8 <HAL_TIM_PWM_Start+0x228>)
 800e22a:	4293      	cmp	r3, r2
 800e22c:	d00e      	beq.n	800e24c <HAL_TIM_PWM_Start+0x1bc>
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	4a1b      	ldr	r2, [pc, #108]	@ (800e2a0 <HAL_TIM_PWM_Start+0x210>)
 800e234:	4293      	cmp	r3, r2
 800e236:	d009      	beq.n	800e24c <HAL_TIM_PWM_Start+0x1bc>
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	4a1f      	ldr	r2, [pc, #124]	@ (800e2bc <HAL_TIM_PWM_Start+0x22c>)
 800e23e:	4293      	cmp	r3, r2
 800e240:	d004      	beq.n	800e24c <HAL_TIM_PWM_Start+0x1bc>
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	4a1e      	ldr	r2, [pc, #120]	@ (800e2c0 <HAL_TIM_PWM_Start+0x230>)
 800e248:	4293      	cmp	r3, r2
 800e24a:	d115      	bne.n	800e278 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	689a      	ldr	r2, [r3, #8]
 800e252:	4b1c      	ldr	r3, [pc, #112]	@ (800e2c4 <HAL_TIM_PWM_Start+0x234>)
 800e254:	4013      	ands	r3, r2
 800e256:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	2b06      	cmp	r3, #6
 800e25c:	d015      	beq.n	800e28a <HAL_TIM_PWM_Start+0x1fa>
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e264:	d011      	beq.n	800e28a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	681a      	ldr	r2, [r3, #0]
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	f042 0201 	orr.w	r2, r2, #1
 800e274:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e276:	e008      	b.n	800e28a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	681a      	ldr	r2, [r3, #0]
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	f042 0201 	orr.w	r2, r2, #1
 800e286:	601a      	str	r2, [r3, #0]
 800e288:	e000      	b.n	800e28c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e28a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e28c:	2300      	movs	r3, #0
}
 800e28e:	4618      	mov	r0, r3
 800e290:	3710      	adds	r7, #16
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}
 800e296:	bf00      	nop
 800e298:	40010000 	.word	0x40010000
 800e29c:	40010400 	.word	0x40010400
 800e2a0:	40014000 	.word	0x40014000
 800e2a4:	40014400 	.word	0x40014400
 800e2a8:	40014800 	.word	0x40014800
 800e2ac:	40000400 	.word	0x40000400
 800e2b0:	40000800 	.word	0x40000800
 800e2b4:	40000c00 	.word	0x40000c00
 800e2b8:	40001800 	.word	0x40001800
 800e2bc:	4000e000 	.word	0x4000e000
 800e2c0:	4000e400 	.word	0x4000e400
 800e2c4:	00010007 	.word	0x00010007

0800e2c8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b082      	sub	sp, #8
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
 800e2d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	6839      	ldr	r1, [r7, #0]
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f000 ff44 	bl	800f168 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	4a3e      	ldr	r2, [pc, #248]	@ (800e3e0 <HAL_TIM_PWM_Stop+0x118>)
 800e2e6:	4293      	cmp	r3, r2
 800e2e8:	d013      	beq.n	800e312 <HAL_TIM_PWM_Stop+0x4a>
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	4a3d      	ldr	r2, [pc, #244]	@ (800e3e4 <HAL_TIM_PWM_Stop+0x11c>)
 800e2f0:	4293      	cmp	r3, r2
 800e2f2:	d00e      	beq.n	800e312 <HAL_TIM_PWM_Stop+0x4a>
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	4a3b      	ldr	r2, [pc, #236]	@ (800e3e8 <HAL_TIM_PWM_Stop+0x120>)
 800e2fa:	4293      	cmp	r3, r2
 800e2fc:	d009      	beq.n	800e312 <HAL_TIM_PWM_Stop+0x4a>
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	4a3a      	ldr	r2, [pc, #232]	@ (800e3ec <HAL_TIM_PWM_Stop+0x124>)
 800e304:	4293      	cmp	r3, r2
 800e306:	d004      	beq.n	800e312 <HAL_TIM_PWM_Stop+0x4a>
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	4a38      	ldr	r2, [pc, #224]	@ (800e3f0 <HAL_TIM_PWM_Stop+0x128>)
 800e30e:	4293      	cmp	r3, r2
 800e310:	d101      	bne.n	800e316 <HAL_TIM_PWM_Stop+0x4e>
 800e312:	2301      	movs	r3, #1
 800e314:	e000      	b.n	800e318 <HAL_TIM_PWM_Stop+0x50>
 800e316:	2300      	movs	r3, #0
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d017      	beq.n	800e34c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	6a1a      	ldr	r2, [r3, #32]
 800e322:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e326:	4013      	ands	r3, r2
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d10f      	bne.n	800e34c <HAL_TIM_PWM_Stop+0x84>
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	6a1a      	ldr	r2, [r3, #32]
 800e332:	f240 4344 	movw	r3, #1092	@ 0x444
 800e336:	4013      	ands	r3, r2
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d107      	bne.n	800e34c <HAL_TIM_PWM_Stop+0x84>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e34a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	6a1a      	ldr	r2, [r3, #32]
 800e352:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e356:	4013      	ands	r3, r2
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d10f      	bne.n	800e37c <HAL_TIM_PWM_Stop+0xb4>
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	6a1a      	ldr	r2, [r3, #32]
 800e362:	f240 4344 	movw	r3, #1092	@ 0x444
 800e366:	4013      	ands	r3, r2
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d107      	bne.n	800e37c <HAL_TIM_PWM_Stop+0xb4>
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	681a      	ldr	r2, [r3, #0]
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	f022 0201 	bic.w	r2, r2, #1
 800e37a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e37c:	683b      	ldr	r3, [r7, #0]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d104      	bne.n	800e38c <HAL_TIM_PWM_Stop+0xc4>
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2201      	movs	r2, #1
 800e386:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e38a:	e023      	b.n	800e3d4 <HAL_TIM_PWM_Stop+0x10c>
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	2b04      	cmp	r3, #4
 800e390:	d104      	bne.n	800e39c <HAL_TIM_PWM_Stop+0xd4>
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	2201      	movs	r2, #1
 800e396:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e39a:	e01b      	b.n	800e3d4 <HAL_TIM_PWM_Stop+0x10c>
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	2b08      	cmp	r3, #8
 800e3a0:	d104      	bne.n	800e3ac <HAL_TIM_PWM_Stop+0xe4>
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2201      	movs	r2, #1
 800e3a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e3aa:	e013      	b.n	800e3d4 <HAL_TIM_PWM_Stop+0x10c>
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	2b0c      	cmp	r3, #12
 800e3b0:	d104      	bne.n	800e3bc <HAL_TIM_PWM_Stop+0xf4>
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	2201      	movs	r2, #1
 800e3b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e3ba:	e00b      	b.n	800e3d4 <HAL_TIM_PWM_Stop+0x10c>
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	2b10      	cmp	r3, #16
 800e3c0:	d104      	bne.n	800e3cc <HAL_TIM_PWM_Stop+0x104>
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2201      	movs	r2, #1
 800e3c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e3ca:	e003      	b.n	800e3d4 <HAL_TIM_PWM_Stop+0x10c>
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2201      	movs	r2, #1
 800e3d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800e3d4:	2300      	movs	r3, #0
}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	3708      	adds	r7, #8
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd80      	pop	{r7, pc}
 800e3de:	bf00      	nop
 800e3e0:	40010000 	.word	0x40010000
 800e3e4:	40010400 	.word	0x40010400
 800e3e8:	40014000 	.word	0x40014000
 800e3ec:	40014400 	.word	0x40014400
 800e3f0:	40014800 	.word	0x40014800

0800e3f4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b082      	sub	sp, #8
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d101      	bne.n	800e406 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800e402:	2301      	movs	r3, #1
 800e404:	e049      	b.n	800e49a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e40c:	b2db      	uxtb	r3, r3
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d106      	bne.n	800e420 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2200      	movs	r2, #0
 800e416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f7f5 fc88 	bl	8003d30 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2202      	movs	r2, #2
 800e424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681a      	ldr	r2, [r3, #0]
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	3304      	adds	r3, #4
 800e430:	4619      	mov	r1, r3
 800e432:	4610      	mov	r0, r2
 800e434:	f000 f9e6 	bl	800e804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	2201      	movs	r2, #1
 800e43c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2201      	movs	r2, #1
 800e444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2201      	movs	r2, #1
 800e44c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2201      	movs	r2, #1
 800e454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2201      	movs	r2, #1
 800e45c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2201      	movs	r2, #1
 800e464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2201      	movs	r2, #1
 800e46c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2201      	movs	r2, #1
 800e474:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	2201      	movs	r2, #1
 800e47c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2201      	movs	r2, #1
 800e484:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2201      	movs	r2, #1
 800e48c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	2201      	movs	r2, #1
 800e494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e498:	2300      	movs	r3, #0
}
 800e49a:	4618      	mov	r0, r3
 800e49c:	3708      	adds	r7, #8
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	bd80      	pop	{r7, pc}

0800e4a2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800e4a2:	b580      	push	{r7, lr}
 800e4a4:	b086      	sub	sp, #24
 800e4a6:	af00      	add	r7, sp, #0
 800e4a8:	60f8      	str	r0, [r7, #12]
 800e4aa:	60b9      	str	r1, [r7, #8]
 800e4ac:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e4b8:	2b01      	cmp	r3, #1
 800e4ba:	d101      	bne.n	800e4c0 <HAL_TIM_IC_ConfigChannel+0x1e>
 800e4bc:	2302      	movs	r3, #2
 800e4be:	e088      	b.n	800e5d2 <HAL_TIM_IC_ConfigChannel+0x130>
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	2201      	movs	r2, #1
 800e4c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d11b      	bne.n	800e506 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e4d2:	68bb      	ldr	r3, [r7, #8]
 800e4d4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e4d6:	68bb      	ldr	r3, [r7, #8]
 800e4d8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800e4de:	f000 fd0d 	bl	800eefc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	699a      	ldr	r2, [r3, #24]
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	f022 020c 	bic.w	r2, r2, #12
 800e4f0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	6999      	ldr	r1, [r3, #24]
 800e4f8:	68bb      	ldr	r3, [r7, #8]
 800e4fa:	689a      	ldr	r2, [r3, #8]
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	430a      	orrs	r2, r1
 800e502:	619a      	str	r2, [r3, #24]
 800e504:	e060      	b.n	800e5c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2b04      	cmp	r3, #4
 800e50a:	d11c      	bne.n	800e546 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800e51c:	f000 fd6e 	bl	800effc <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	699a      	ldr	r2, [r3, #24]
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800e52e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	6999      	ldr	r1, [r3, #24]
 800e536:	68bb      	ldr	r3, [r7, #8]
 800e538:	689b      	ldr	r3, [r3, #8]
 800e53a:	021a      	lsls	r2, r3, #8
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	430a      	orrs	r2, r1
 800e542:	619a      	str	r2, [r3, #24]
 800e544:	e040      	b.n	800e5c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	2b08      	cmp	r3, #8
 800e54a:	d11b      	bne.n	800e584 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e554:	68bb      	ldr	r3, [r7, #8]
 800e556:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e558:	68bb      	ldr	r3, [r7, #8]
 800e55a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800e55c:	f000 fd8b 	bl	800f076 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	69da      	ldr	r2, [r3, #28]
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	f022 020c 	bic.w	r2, r2, #12
 800e56e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	69d9      	ldr	r1, [r3, #28]
 800e576:	68bb      	ldr	r3, [r7, #8]
 800e578:	689a      	ldr	r2, [r3, #8]
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	430a      	orrs	r2, r1
 800e580:	61da      	str	r2, [r3, #28]
 800e582:	e021      	b.n	800e5c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2b0c      	cmp	r3, #12
 800e588:	d11c      	bne.n	800e5c4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e596:	68bb      	ldr	r3, [r7, #8]
 800e598:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800e59a:	f000 fda8 	bl	800f0ee <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	69da      	ldr	r2, [r3, #28]
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800e5ac:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	69d9      	ldr	r1, [r3, #28]
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	689b      	ldr	r3, [r3, #8]
 800e5b8:	021a      	lsls	r2, r3, #8
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	430a      	orrs	r2, r1
 800e5c0:	61da      	str	r2, [r3, #28]
 800e5c2:	e001      	b.n	800e5c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800e5c4:	2301      	movs	r3, #1
 800e5c6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e5d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	3718      	adds	r7, #24
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bd80      	pop	{r7, pc}
	...

0800e5dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b086      	sub	sp, #24
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	60f8      	str	r0, [r7, #12]
 800e5e4:	60b9      	str	r1, [r7, #8]
 800e5e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e5f2:	2b01      	cmp	r3, #1
 800e5f4:	d101      	bne.n	800e5fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e5f6:	2302      	movs	r3, #2
 800e5f8:	e0ff      	b.n	800e7fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	2201      	movs	r2, #1
 800e5fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	2b14      	cmp	r3, #20
 800e606:	f200 80f0 	bhi.w	800e7ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e60a:	a201      	add	r2, pc, #4	@ (adr r2, 800e610 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e60c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e610:	0800e665 	.word	0x0800e665
 800e614:	0800e7eb 	.word	0x0800e7eb
 800e618:	0800e7eb 	.word	0x0800e7eb
 800e61c:	0800e7eb 	.word	0x0800e7eb
 800e620:	0800e6a5 	.word	0x0800e6a5
 800e624:	0800e7eb 	.word	0x0800e7eb
 800e628:	0800e7eb 	.word	0x0800e7eb
 800e62c:	0800e7eb 	.word	0x0800e7eb
 800e630:	0800e6e7 	.word	0x0800e6e7
 800e634:	0800e7eb 	.word	0x0800e7eb
 800e638:	0800e7eb 	.word	0x0800e7eb
 800e63c:	0800e7eb 	.word	0x0800e7eb
 800e640:	0800e727 	.word	0x0800e727
 800e644:	0800e7eb 	.word	0x0800e7eb
 800e648:	0800e7eb 	.word	0x0800e7eb
 800e64c:	0800e7eb 	.word	0x0800e7eb
 800e650:	0800e769 	.word	0x0800e769
 800e654:	0800e7eb 	.word	0x0800e7eb
 800e658:	0800e7eb 	.word	0x0800e7eb
 800e65c:	0800e7eb 	.word	0x0800e7eb
 800e660:	0800e7a9 	.word	0x0800e7a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	68b9      	ldr	r1, [r7, #8]
 800e66a:	4618      	mov	r0, r3
 800e66c:	f000 f970 	bl	800e950 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	699a      	ldr	r2, [r3, #24]
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	f042 0208 	orr.w	r2, r2, #8
 800e67e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	699a      	ldr	r2, [r3, #24]
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	f022 0204 	bic.w	r2, r2, #4
 800e68e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	6999      	ldr	r1, [r3, #24]
 800e696:	68bb      	ldr	r3, [r7, #8]
 800e698:	691a      	ldr	r2, [r3, #16]
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	430a      	orrs	r2, r1
 800e6a0:	619a      	str	r2, [r3, #24]
      break;
 800e6a2:	e0a5      	b.n	800e7f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	68b9      	ldr	r1, [r7, #8]
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f000 f9e0 	bl	800ea70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	699a      	ldr	r2, [r3, #24]
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e6be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	699a      	ldr	r2, [r3, #24]
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e6ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	6999      	ldr	r1, [r3, #24]
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	691b      	ldr	r3, [r3, #16]
 800e6da:	021a      	lsls	r2, r3, #8
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	430a      	orrs	r2, r1
 800e6e2:	619a      	str	r2, [r3, #24]
      break;
 800e6e4:	e084      	b.n	800e7f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	68b9      	ldr	r1, [r7, #8]
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	f000 fa49 	bl	800eb84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	69da      	ldr	r2, [r3, #28]
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	f042 0208 	orr.w	r2, r2, #8
 800e700:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	69da      	ldr	r2, [r3, #28]
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	f022 0204 	bic.w	r2, r2, #4
 800e710:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	69d9      	ldr	r1, [r3, #28]
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	691a      	ldr	r2, [r3, #16]
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	430a      	orrs	r2, r1
 800e722:	61da      	str	r2, [r3, #28]
      break;
 800e724:	e064      	b.n	800e7f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	68b9      	ldr	r1, [r7, #8]
 800e72c:	4618      	mov	r0, r3
 800e72e:	f000 fab1 	bl	800ec94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	69da      	ldr	r2, [r3, #28]
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e740:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	69da      	ldr	r2, [r3, #28]
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e750:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	69d9      	ldr	r1, [r3, #28]
 800e758:	68bb      	ldr	r3, [r7, #8]
 800e75a:	691b      	ldr	r3, [r3, #16]
 800e75c:	021a      	lsls	r2, r3, #8
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	430a      	orrs	r2, r1
 800e764:	61da      	str	r2, [r3, #28]
      break;
 800e766:	e043      	b.n	800e7f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	68b9      	ldr	r1, [r7, #8]
 800e76e:	4618      	mov	r0, r3
 800e770:	f000 fafa 	bl	800ed68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	f042 0208 	orr.w	r2, r2, #8
 800e782:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	f022 0204 	bic.w	r2, r2, #4
 800e792:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	691a      	ldr	r2, [r3, #16]
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	430a      	orrs	r2, r1
 800e7a4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e7a6:	e023      	b.n	800e7f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	68b9      	ldr	r1, [r7, #8]
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f000 fb3e 	bl	800ee30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e7c2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e7d2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e7da:	68bb      	ldr	r3, [r7, #8]
 800e7dc:	691b      	ldr	r3, [r3, #16]
 800e7de:	021a      	lsls	r2, r3, #8
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	430a      	orrs	r2, r1
 800e7e6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e7e8:	e002      	b.n	800e7f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	75fb      	strb	r3, [r7, #23]
      break;
 800e7ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e7f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	3718      	adds	r7, #24
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bd80      	pop	{r7, pc}
 800e802:	bf00      	nop

0800e804 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e804:	b480      	push	{r7}
 800e806:	b085      	sub	sp, #20
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
 800e80c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	4a44      	ldr	r2, [pc, #272]	@ (800e928 <TIM_Base_SetConfig+0x124>)
 800e818:	4293      	cmp	r3, r2
 800e81a:	d013      	beq.n	800e844 <TIM_Base_SetConfig+0x40>
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e822:	d00f      	beq.n	800e844 <TIM_Base_SetConfig+0x40>
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	4a41      	ldr	r2, [pc, #260]	@ (800e92c <TIM_Base_SetConfig+0x128>)
 800e828:	4293      	cmp	r3, r2
 800e82a:	d00b      	beq.n	800e844 <TIM_Base_SetConfig+0x40>
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	4a40      	ldr	r2, [pc, #256]	@ (800e930 <TIM_Base_SetConfig+0x12c>)
 800e830:	4293      	cmp	r3, r2
 800e832:	d007      	beq.n	800e844 <TIM_Base_SetConfig+0x40>
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	4a3f      	ldr	r2, [pc, #252]	@ (800e934 <TIM_Base_SetConfig+0x130>)
 800e838:	4293      	cmp	r3, r2
 800e83a:	d003      	beq.n	800e844 <TIM_Base_SetConfig+0x40>
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	4a3e      	ldr	r2, [pc, #248]	@ (800e938 <TIM_Base_SetConfig+0x134>)
 800e840:	4293      	cmp	r3, r2
 800e842:	d108      	bne.n	800e856 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e84a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	685b      	ldr	r3, [r3, #4]
 800e850:	68fa      	ldr	r2, [r7, #12]
 800e852:	4313      	orrs	r3, r2
 800e854:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	4a33      	ldr	r2, [pc, #204]	@ (800e928 <TIM_Base_SetConfig+0x124>)
 800e85a:	4293      	cmp	r3, r2
 800e85c:	d027      	beq.n	800e8ae <TIM_Base_SetConfig+0xaa>
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e864:	d023      	beq.n	800e8ae <TIM_Base_SetConfig+0xaa>
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	4a30      	ldr	r2, [pc, #192]	@ (800e92c <TIM_Base_SetConfig+0x128>)
 800e86a:	4293      	cmp	r3, r2
 800e86c:	d01f      	beq.n	800e8ae <TIM_Base_SetConfig+0xaa>
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	4a2f      	ldr	r2, [pc, #188]	@ (800e930 <TIM_Base_SetConfig+0x12c>)
 800e872:	4293      	cmp	r3, r2
 800e874:	d01b      	beq.n	800e8ae <TIM_Base_SetConfig+0xaa>
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	4a2e      	ldr	r2, [pc, #184]	@ (800e934 <TIM_Base_SetConfig+0x130>)
 800e87a:	4293      	cmp	r3, r2
 800e87c:	d017      	beq.n	800e8ae <TIM_Base_SetConfig+0xaa>
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	4a2d      	ldr	r2, [pc, #180]	@ (800e938 <TIM_Base_SetConfig+0x134>)
 800e882:	4293      	cmp	r3, r2
 800e884:	d013      	beq.n	800e8ae <TIM_Base_SetConfig+0xaa>
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	4a2c      	ldr	r2, [pc, #176]	@ (800e93c <TIM_Base_SetConfig+0x138>)
 800e88a:	4293      	cmp	r3, r2
 800e88c:	d00f      	beq.n	800e8ae <TIM_Base_SetConfig+0xaa>
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	4a2b      	ldr	r2, [pc, #172]	@ (800e940 <TIM_Base_SetConfig+0x13c>)
 800e892:	4293      	cmp	r3, r2
 800e894:	d00b      	beq.n	800e8ae <TIM_Base_SetConfig+0xaa>
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	4a2a      	ldr	r2, [pc, #168]	@ (800e944 <TIM_Base_SetConfig+0x140>)
 800e89a:	4293      	cmp	r3, r2
 800e89c:	d007      	beq.n	800e8ae <TIM_Base_SetConfig+0xaa>
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	4a29      	ldr	r2, [pc, #164]	@ (800e948 <TIM_Base_SetConfig+0x144>)
 800e8a2:	4293      	cmp	r3, r2
 800e8a4:	d003      	beq.n	800e8ae <TIM_Base_SetConfig+0xaa>
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	4a28      	ldr	r2, [pc, #160]	@ (800e94c <TIM_Base_SetConfig+0x148>)
 800e8aa:	4293      	cmp	r3, r2
 800e8ac:	d108      	bne.n	800e8c0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e8b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	68db      	ldr	r3, [r3, #12]
 800e8ba:	68fa      	ldr	r2, [r7, #12]
 800e8bc:	4313      	orrs	r3, r2
 800e8be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	695b      	ldr	r3, [r3, #20]
 800e8ca:	4313      	orrs	r3, r2
 800e8cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	68fa      	ldr	r2, [r7, #12]
 800e8d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	689a      	ldr	r2, [r3, #8]
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	681a      	ldr	r2, [r3, #0]
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	4a10      	ldr	r2, [pc, #64]	@ (800e928 <TIM_Base_SetConfig+0x124>)
 800e8e8:	4293      	cmp	r3, r2
 800e8ea:	d00f      	beq.n	800e90c <TIM_Base_SetConfig+0x108>
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	4a12      	ldr	r2, [pc, #72]	@ (800e938 <TIM_Base_SetConfig+0x134>)
 800e8f0:	4293      	cmp	r3, r2
 800e8f2:	d00b      	beq.n	800e90c <TIM_Base_SetConfig+0x108>
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	4a11      	ldr	r2, [pc, #68]	@ (800e93c <TIM_Base_SetConfig+0x138>)
 800e8f8:	4293      	cmp	r3, r2
 800e8fa:	d007      	beq.n	800e90c <TIM_Base_SetConfig+0x108>
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	4a10      	ldr	r2, [pc, #64]	@ (800e940 <TIM_Base_SetConfig+0x13c>)
 800e900:	4293      	cmp	r3, r2
 800e902:	d003      	beq.n	800e90c <TIM_Base_SetConfig+0x108>
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	4a0f      	ldr	r2, [pc, #60]	@ (800e944 <TIM_Base_SetConfig+0x140>)
 800e908:	4293      	cmp	r3, r2
 800e90a:	d103      	bne.n	800e914 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	691a      	ldr	r2, [r3, #16]
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2201      	movs	r2, #1
 800e918:	615a      	str	r2, [r3, #20]
}
 800e91a:	bf00      	nop
 800e91c:	3714      	adds	r7, #20
 800e91e:	46bd      	mov	sp, r7
 800e920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e924:	4770      	bx	lr
 800e926:	bf00      	nop
 800e928:	40010000 	.word	0x40010000
 800e92c:	40000400 	.word	0x40000400
 800e930:	40000800 	.word	0x40000800
 800e934:	40000c00 	.word	0x40000c00
 800e938:	40010400 	.word	0x40010400
 800e93c:	40014000 	.word	0x40014000
 800e940:	40014400 	.word	0x40014400
 800e944:	40014800 	.word	0x40014800
 800e948:	4000e000 	.word	0x4000e000
 800e94c:	4000e400 	.word	0x4000e400

0800e950 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e950:	b480      	push	{r7}
 800e952:	b087      	sub	sp, #28
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
 800e958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6a1b      	ldr	r3, [r3, #32]
 800e95e:	f023 0201 	bic.w	r2, r3, #1
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6a1b      	ldr	r3, [r3, #32]
 800e96a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	685b      	ldr	r3, [r3, #4]
 800e970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	699b      	ldr	r3, [r3, #24]
 800e976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e978:	68fa      	ldr	r2, [r7, #12]
 800e97a:	4b37      	ldr	r3, [pc, #220]	@ (800ea58 <TIM_OC1_SetConfig+0x108>)
 800e97c:	4013      	ands	r3, r2
 800e97e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	f023 0303 	bic.w	r3, r3, #3
 800e986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	68fa      	ldr	r2, [r7, #12]
 800e98e:	4313      	orrs	r3, r2
 800e990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	f023 0302 	bic.w	r3, r3, #2
 800e998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	689b      	ldr	r3, [r3, #8]
 800e99e:	697a      	ldr	r2, [r7, #20]
 800e9a0:	4313      	orrs	r3, r2
 800e9a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	4a2d      	ldr	r2, [pc, #180]	@ (800ea5c <TIM_OC1_SetConfig+0x10c>)
 800e9a8:	4293      	cmp	r3, r2
 800e9aa:	d00f      	beq.n	800e9cc <TIM_OC1_SetConfig+0x7c>
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	4a2c      	ldr	r2, [pc, #176]	@ (800ea60 <TIM_OC1_SetConfig+0x110>)
 800e9b0:	4293      	cmp	r3, r2
 800e9b2:	d00b      	beq.n	800e9cc <TIM_OC1_SetConfig+0x7c>
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	4a2b      	ldr	r2, [pc, #172]	@ (800ea64 <TIM_OC1_SetConfig+0x114>)
 800e9b8:	4293      	cmp	r3, r2
 800e9ba:	d007      	beq.n	800e9cc <TIM_OC1_SetConfig+0x7c>
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	4a2a      	ldr	r2, [pc, #168]	@ (800ea68 <TIM_OC1_SetConfig+0x118>)
 800e9c0:	4293      	cmp	r3, r2
 800e9c2:	d003      	beq.n	800e9cc <TIM_OC1_SetConfig+0x7c>
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	4a29      	ldr	r2, [pc, #164]	@ (800ea6c <TIM_OC1_SetConfig+0x11c>)
 800e9c8:	4293      	cmp	r3, r2
 800e9ca:	d10c      	bne.n	800e9e6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e9cc:	697b      	ldr	r3, [r7, #20]
 800e9ce:	f023 0308 	bic.w	r3, r3, #8
 800e9d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	68db      	ldr	r3, [r3, #12]
 800e9d8:	697a      	ldr	r2, [r7, #20]
 800e9da:	4313      	orrs	r3, r2
 800e9dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e9de:	697b      	ldr	r3, [r7, #20]
 800e9e0:	f023 0304 	bic.w	r3, r3, #4
 800e9e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	4a1c      	ldr	r2, [pc, #112]	@ (800ea5c <TIM_OC1_SetConfig+0x10c>)
 800e9ea:	4293      	cmp	r3, r2
 800e9ec:	d00f      	beq.n	800ea0e <TIM_OC1_SetConfig+0xbe>
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	4a1b      	ldr	r2, [pc, #108]	@ (800ea60 <TIM_OC1_SetConfig+0x110>)
 800e9f2:	4293      	cmp	r3, r2
 800e9f4:	d00b      	beq.n	800ea0e <TIM_OC1_SetConfig+0xbe>
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	4a1a      	ldr	r2, [pc, #104]	@ (800ea64 <TIM_OC1_SetConfig+0x114>)
 800e9fa:	4293      	cmp	r3, r2
 800e9fc:	d007      	beq.n	800ea0e <TIM_OC1_SetConfig+0xbe>
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	4a19      	ldr	r2, [pc, #100]	@ (800ea68 <TIM_OC1_SetConfig+0x118>)
 800ea02:	4293      	cmp	r3, r2
 800ea04:	d003      	beq.n	800ea0e <TIM_OC1_SetConfig+0xbe>
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	4a18      	ldr	r2, [pc, #96]	@ (800ea6c <TIM_OC1_SetConfig+0x11c>)
 800ea0a:	4293      	cmp	r3, r2
 800ea0c:	d111      	bne.n	800ea32 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ea0e:	693b      	ldr	r3, [r7, #16]
 800ea10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ea14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ea16:	693b      	ldr	r3, [r7, #16]
 800ea18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ea1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ea1e:	683b      	ldr	r3, [r7, #0]
 800ea20:	695b      	ldr	r3, [r3, #20]
 800ea22:	693a      	ldr	r2, [r7, #16]
 800ea24:	4313      	orrs	r3, r2
 800ea26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	699b      	ldr	r3, [r3, #24]
 800ea2c:	693a      	ldr	r2, [r7, #16]
 800ea2e:	4313      	orrs	r3, r2
 800ea30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	693a      	ldr	r2, [r7, #16]
 800ea36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	68fa      	ldr	r2, [r7, #12]
 800ea3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	685a      	ldr	r2, [r3, #4]
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	697a      	ldr	r2, [r7, #20]
 800ea4a:	621a      	str	r2, [r3, #32]
}
 800ea4c:	bf00      	nop
 800ea4e:	371c      	adds	r7, #28
 800ea50:	46bd      	mov	sp, r7
 800ea52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea56:	4770      	bx	lr
 800ea58:	fffeff8f 	.word	0xfffeff8f
 800ea5c:	40010000 	.word	0x40010000
 800ea60:	40010400 	.word	0x40010400
 800ea64:	40014000 	.word	0x40014000
 800ea68:	40014400 	.word	0x40014400
 800ea6c:	40014800 	.word	0x40014800

0800ea70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ea70:	b480      	push	{r7}
 800ea72:	b087      	sub	sp, #28
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
 800ea78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6a1b      	ldr	r3, [r3, #32]
 800ea7e:	f023 0210 	bic.w	r2, r3, #16
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	6a1b      	ldr	r3, [r3, #32]
 800ea8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	685b      	ldr	r3, [r3, #4]
 800ea90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	699b      	ldr	r3, [r3, #24]
 800ea96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ea98:	68fa      	ldr	r2, [r7, #12]
 800ea9a:	4b34      	ldr	r3, [pc, #208]	@ (800eb6c <TIM_OC2_SetConfig+0xfc>)
 800ea9c:	4013      	ands	r3, r2
 800ea9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800eaa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	021b      	lsls	r3, r3, #8
 800eaae:	68fa      	ldr	r2, [r7, #12]
 800eab0:	4313      	orrs	r3, r2
 800eab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800eab4:	697b      	ldr	r3, [r7, #20]
 800eab6:	f023 0320 	bic.w	r3, r3, #32
 800eaba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	689b      	ldr	r3, [r3, #8]
 800eac0:	011b      	lsls	r3, r3, #4
 800eac2:	697a      	ldr	r2, [r7, #20]
 800eac4:	4313      	orrs	r3, r2
 800eac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	4a29      	ldr	r2, [pc, #164]	@ (800eb70 <TIM_OC2_SetConfig+0x100>)
 800eacc:	4293      	cmp	r3, r2
 800eace:	d003      	beq.n	800ead8 <TIM_OC2_SetConfig+0x68>
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	4a28      	ldr	r2, [pc, #160]	@ (800eb74 <TIM_OC2_SetConfig+0x104>)
 800ead4:	4293      	cmp	r3, r2
 800ead6:	d10d      	bne.n	800eaf4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ead8:	697b      	ldr	r3, [r7, #20]
 800eada:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eade:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	68db      	ldr	r3, [r3, #12]
 800eae4:	011b      	lsls	r3, r3, #4
 800eae6:	697a      	ldr	r2, [r7, #20]
 800eae8:	4313      	orrs	r3, r2
 800eaea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800eaec:	697b      	ldr	r3, [r7, #20]
 800eaee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eaf2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	4a1e      	ldr	r2, [pc, #120]	@ (800eb70 <TIM_OC2_SetConfig+0x100>)
 800eaf8:	4293      	cmp	r3, r2
 800eafa:	d00f      	beq.n	800eb1c <TIM_OC2_SetConfig+0xac>
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	4a1d      	ldr	r2, [pc, #116]	@ (800eb74 <TIM_OC2_SetConfig+0x104>)
 800eb00:	4293      	cmp	r3, r2
 800eb02:	d00b      	beq.n	800eb1c <TIM_OC2_SetConfig+0xac>
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	4a1c      	ldr	r2, [pc, #112]	@ (800eb78 <TIM_OC2_SetConfig+0x108>)
 800eb08:	4293      	cmp	r3, r2
 800eb0a:	d007      	beq.n	800eb1c <TIM_OC2_SetConfig+0xac>
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	4a1b      	ldr	r2, [pc, #108]	@ (800eb7c <TIM_OC2_SetConfig+0x10c>)
 800eb10:	4293      	cmp	r3, r2
 800eb12:	d003      	beq.n	800eb1c <TIM_OC2_SetConfig+0xac>
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	4a1a      	ldr	r2, [pc, #104]	@ (800eb80 <TIM_OC2_SetConfig+0x110>)
 800eb18:	4293      	cmp	r3, r2
 800eb1a:	d113      	bne.n	800eb44 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800eb1c:	693b      	ldr	r3, [r7, #16]
 800eb1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800eb22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800eb24:	693b      	ldr	r3, [r7, #16]
 800eb26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800eb2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	695b      	ldr	r3, [r3, #20]
 800eb30:	009b      	lsls	r3, r3, #2
 800eb32:	693a      	ldr	r2, [r7, #16]
 800eb34:	4313      	orrs	r3, r2
 800eb36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800eb38:	683b      	ldr	r3, [r7, #0]
 800eb3a:	699b      	ldr	r3, [r3, #24]
 800eb3c:	009b      	lsls	r3, r3, #2
 800eb3e:	693a      	ldr	r2, [r7, #16]
 800eb40:	4313      	orrs	r3, r2
 800eb42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	693a      	ldr	r2, [r7, #16]
 800eb48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	68fa      	ldr	r2, [r7, #12]
 800eb4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	685a      	ldr	r2, [r3, #4]
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	697a      	ldr	r2, [r7, #20]
 800eb5c:	621a      	str	r2, [r3, #32]
}
 800eb5e:	bf00      	nop
 800eb60:	371c      	adds	r7, #28
 800eb62:	46bd      	mov	sp, r7
 800eb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb68:	4770      	bx	lr
 800eb6a:	bf00      	nop
 800eb6c:	feff8fff 	.word	0xfeff8fff
 800eb70:	40010000 	.word	0x40010000
 800eb74:	40010400 	.word	0x40010400
 800eb78:	40014000 	.word	0x40014000
 800eb7c:	40014400 	.word	0x40014400
 800eb80:	40014800 	.word	0x40014800

0800eb84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eb84:	b480      	push	{r7}
 800eb86:	b087      	sub	sp, #28
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
 800eb8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6a1b      	ldr	r3, [r3, #32]
 800eb92:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6a1b      	ldr	r3, [r3, #32]
 800eb9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	685b      	ldr	r3, [r3, #4]
 800eba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	69db      	ldr	r3, [r3, #28]
 800ebaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ebac:	68fa      	ldr	r2, [r7, #12]
 800ebae:	4b33      	ldr	r3, [pc, #204]	@ (800ec7c <TIM_OC3_SetConfig+0xf8>)
 800ebb0:	4013      	ands	r3, r2
 800ebb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	f023 0303 	bic.w	r3, r3, #3
 800ebba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	68fa      	ldr	r2, [r7, #12]
 800ebc2:	4313      	orrs	r3, r2
 800ebc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ebc6:	697b      	ldr	r3, [r7, #20]
 800ebc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ebcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	689b      	ldr	r3, [r3, #8]
 800ebd2:	021b      	lsls	r3, r3, #8
 800ebd4:	697a      	ldr	r2, [r7, #20]
 800ebd6:	4313      	orrs	r3, r2
 800ebd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	4a28      	ldr	r2, [pc, #160]	@ (800ec80 <TIM_OC3_SetConfig+0xfc>)
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	d003      	beq.n	800ebea <TIM_OC3_SetConfig+0x66>
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	4a27      	ldr	r2, [pc, #156]	@ (800ec84 <TIM_OC3_SetConfig+0x100>)
 800ebe6:	4293      	cmp	r3, r2
 800ebe8:	d10d      	bne.n	800ec06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ebea:	697b      	ldr	r3, [r7, #20]
 800ebec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ebf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ebf2:	683b      	ldr	r3, [r7, #0]
 800ebf4:	68db      	ldr	r3, [r3, #12]
 800ebf6:	021b      	lsls	r3, r3, #8
 800ebf8:	697a      	ldr	r2, [r7, #20]
 800ebfa:	4313      	orrs	r3, r2
 800ebfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ec04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	4a1d      	ldr	r2, [pc, #116]	@ (800ec80 <TIM_OC3_SetConfig+0xfc>)
 800ec0a:	4293      	cmp	r3, r2
 800ec0c:	d00f      	beq.n	800ec2e <TIM_OC3_SetConfig+0xaa>
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	4a1c      	ldr	r2, [pc, #112]	@ (800ec84 <TIM_OC3_SetConfig+0x100>)
 800ec12:	4293      	cmp	r3, r2
 800ec14:	d00b      	beq.n	800ec2e <TIM_OC3_SetConfig+0xaa>
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	4a1b      	ldr	r2, [pc, #108]	@ (800ec88 <TIM_OC3_SetConfig+0x104>)
 800ec1a:	4293      	cmp	r3, r2
 800ec1c:	d007      	beq.n	800ec2e <TIM_OC3_SetConfig+0xaa>
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	4a1a      	ldr	r2, [pc, #104]	@ (800ec8c <TIM_OC3_SetConfig+0x108>)
 800ec22:	4293      	cmp	r3, r2
 800ec24:	d003      	beq.n	800ec2e <TIM_OC3_SetConfig+0xaa>
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	4a19      	ldr	r2, [pc, #100]	@ (800ec90 <TIM_OC3_SetConfig+0x10c>)
 800ec2a:	4293      	cmp	r3, r2
 800ec2c:	d113      	bne.n	800ec56 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ec2e:	693b      	ldr	r3, [r7, #16]
 800ec30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ec34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ec36:	693b      	ldr	r3, [r7, #16]
 800ec38:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ec3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	695b      	ldr	r3, [r3, #20]
 800ec42:	011b      	lsls	r3, r3, #4
 800ec44:	693a      	ldr	r2, [r7, #16]
 800ec46:	4313      	orrs	r3, r2
 800ec48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ec4a:	683b      	ldr	r3, [r7, #0]
 800ec4c:	699b      	ldr	r3, [r3, #24]
 800ec4e:	011b      	lsls	r3, r3, #4
 800ec50:	693a      	ldr	r2, [r7, #16]
 800ec52:	4313      	orrs	r3, r2
 800ec54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	693a      	ldr	r2, [r7, #16]
 800ec5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	68fa      	ldr	r2, [r7, #12]
 800ec60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ec62:	683b      	ldr	r3, [r7, #0]
 800ec64:	685a      	ldr	r2, [r3, #4]
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	697a      	ldr	r2, [r7, #20]
 800ec6e:	621a      	str	r2, [r3, #32]
}
 800ec70:	bf00      	nop
 800ec72:	371c      	adds	r7, #28
 800ec74:	46bd      	mov	sp, r7
 800ec76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7a:	4770      	bx	lr
 800ec7c:	fffeff8f 	.word	0xfffeff8f
 800ec80:	40010000 	.word	0x40010000
 800ec84:	40010400 	.word	0x40010400
 800ec88:	40014000 	.word	0x40014000
 800ec8c:	40014400 	.word	0x40014400
 800ec90:	40014800 	.word	0x40014800

0800ec94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ec94:	b480      	push	{r7}
 800ec96:	b087      	sub	sp, #28
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
 800ec9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6a1b      	ldr	r3, [r3, #32]
 800eca2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6a1b      	ldr	r3, [r3, #32]
 800ecae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	685b      	ldr	r3, [r3, #4]
 800ecb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	69db      	ldr	r3, [r3, #28]
 800ecba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ecbc:	68fa      	ldr	r2, [r7, #12]
 800ecbe:	4b24      	ldr	r3, [pc, #144]	@ (800ed50 <TIM_OC4_SetConfig+0xbc>)
 800ecc0:	4013      	ands	r3, r2
 800ecc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ecca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	021b      	lsls	r3, r3, #8
 800ecd2:	68fa      	ldr	r2, [r7, #12]
 800ecd4:	4313      	orrs	r3, r2
 800ecd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ecd8:	693b      	ldr	r3, [r7, #16]
 800ecda:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ecde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	689b      	ldr	r3, [r3, #8]
 800ece4:	031b      	lsls	r3, r3, #12
 800ece6:	693a      	ldr	r2, [r7, #16]
 800ece8:	4313      	orrs	r3, r2
 800ecea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	4a19      	ldr	r2, [pc, #100]	@ (800ed54 <TIM_OC4_SetConfig+0xc0>)
 800ecf0:	4293      	cmp	r3, r2
 800ecf2:	d00f      	beq.n	800ed14 <TIM_OC4_SetConfig+0x80>
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	4a18      	ldr	r2, [pc, #96]	@ (800ed58 <TIM_OC4_SetConfig+0xc4>)
 800ecf8:	4293      	cmp	r3, r2
 800ecfa:	d00b      	beq.n	800ed14 <TIM_OC4_SetConfig+0x80>
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	4a17      	ldr	r2, [pc, #92]	@ (800ed5c <TIM_OC4_SetConfig+0xc8>)
 800ed00:	4293      	cmp	r3, r2
 800ed02:	d007      	beq.n	800ed14 <TIM_OC4_SetConfig+0x80>
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	4a16      	ldr	r2, [pc, #88]	@ (800ed60 <TIM_OC4_SetConfig+0xcc>)
 800ed08:	4293      	cmp	r3, r2
 800ed0a:	d003      	beq.n	800ed14 <TIM_OC4_SetConfig+0x80>
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	4a15      	ldr	r2, [pc, #84]	@ (800ed64 <TIM_OC4_SetConfig+0xd0>)
 800ed10:	4293      	cmp	r3, r2
 800ed12:	d109      	bne.n	800ed28 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ed14:	697b      	ldr	r3, [r7, #20]
 800ed16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ed1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	695b      	ldr	r3, [r3, #20]
 800ed20:	019b      	lsls	r3, r3, #6
 800ed22:	697a      	ldr	r2, [r7, #20]
 800ed24:	4313      	orrs	r3, r2
 800ed26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	697a      	ldr	r2, [r7, #20]
 800ed2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	68fa      	ldr	r2, [r7, #12]
 800ed32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	685a      	ldr	r2, [r3, #4]
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	693a      	ldr	r2, [r7, #16]
 800ed40:	621a      	str	r2, [r3, #32]
}
 800ed42:	bf00      	nop
 800ed44:	371c      	adds	r7, #28
 800ed46:	46bd      	mov	sp, r7
 800ed48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4c:	4770      	bx	lr
 800ed4e:	bf00      	nop
 800ed50:	feff8fff 	.word	0xfeff8fff
 800ed54:	40010000 	.word	0x40010000
 800ed58:	40010400 	.word	0x40010400
 800ed5c:	40014000 	.word	0x40014000
 800ed60:	40014400 	.word	0x40014400
 800ed64:	40014800 	.word	0x40014800

0800ed68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ed68:	b480      	push	{r7}
 800ed6a:	b087      	sub	sp, #28
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
 800ed70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	6a1b      	ldr	r3, [r3, #32]
 800ed76:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6a1b      	ldr	r3, [r3, #32]
 800ed82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	685b      	ldr	r3, [r3, #4]
 800ed88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ed90:	68fa      	ldr	r2, [r7, #12]
 800ed92:	4b21      	ldr	r3, [pc, #132]	@ (800ee18 <TIM_OC5_SetConfig+0xb0>)
 800ed94:	4013      	ands	r3, r2
 800ed96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	68fa      	ldr	r2, [r7, #12]
 800ed9e:	4313      	orrs	r3, r2
 800eda0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800eda2:	693b      	ldr	r3, [r7, #16]
 800eda4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800eda8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	689b      	ldr	r3, [r3, #8]
 800edae:	041b      	lsls	r3, r3, #16
 800edb0:	693a      	ldr	r2, [r7, #16]
 800edb2:	4313      	orrs	r3, r2
 800edb4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	4a18      	ldr	r2, [pc, #96]	@ (800ee1c <TIM_OC5_SetConfig+0xb4>)
 800edba:	4293      	cmp	r3, r2
 800edbc:	d00f      	beq.n	800edde <TIM_OC5_SetConfig+0x76>
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	4a17      	ldr	r2, [pc, #92]	@ (800ee20 <TIM_OC5_SetConfig+0xb8>)
 800edc2:	4293      	cmp	r3, r2
 800edc4:	d00b      	beq.n	800edde <TIM_OC5_SetConfig+0x76>
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	4a16      	ldr	r2, [pc, #88]	@ (800ee24 <TIM_OC5_SetConfig+0xbc>)
 800edca:	4293      	cmp	r3, r2
 800edcc:	d007      	beq.n	800edde <TIM_OC5_SetConfig+0x76>
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	4a15      	ldr	r2, [pc, #84]	@ (800ee28 <TIM_OC5_SetConfig+0xc0>)
 800edd2:	4293      	cmp	r3, r2
 800edd4:	d003      	beq.n	800edde <TIM_OC5_SetConfig+0x76>
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	4a14      	ldr	r2, [pc, #80]	@ (800ee2c <TIM_OC5_SetConfig+0xc4>)
 800edda:	4293      	cmp	r3, r2
 800eddc:	d109      	bne.n	800edf2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800edde:	697b      	ldr	r3, [r7, #20]
 800ede0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ede4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	695b      	ldr	r3, [r3, #20]
 800edea:	021b      	lsls	r3, r3, #8
 800edec:	697a      	ldr	r2, [r7, #20]
 800edee:	4313      	orrs	r3, r2
 800edf0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	697a      	ldr	r2, [r7, #20]
 800edf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	68fa      	ldr	r2, [r7, #12]
 800edfc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	685a      	ldr	r2, [r3, #4]
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	693a      	ldr	r2, [r7, #16]
 800ee0a:	621a      	str	r2, [r3, #32]
}
 800ee0c:	bf00      	nop
 800ee0e:	371c      	adds	r7, #28
 800ee10:	46bd      	mov	sp, r7
 800ee12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee16:	4770      	bx	lr
 800ee18:	fffeff8f 	.word	0xfffeff8f
 800ee1c:	40010000 	.word	0x40010000
 800ee20:	40010400 	.word	0x40010400
 800ee24:	40014000 	.word	0x40014000
 800ee28:	40014400 	.word	0x40014400
 800ee2c:	40014800 	.word	0x40014800

0800ee30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ee30:	b480      	push	{r7}
 800ee32:	b087      	sub	sp, #28
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
 800ee38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	6a1b      	ldr	r3, [r3, #32]
 800ee3e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	6a1b      	ldr	r3, [r3, #32]
 800ee4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	685b      	ldr	r3, [r3, #4]
 800ee50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ee58:	68fa      	ldr	r2, [r7, #12]
 800ee5a:	4b22      	ldr	r3, [pc, #136]	@ (800eee4 <TIM_OC6_SetConfig+0xb4>)
 800ee5c:	4013      	ands	r3, r2
 800ee5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	021b      	lsls	r3, r3, #8
 800ee66:	68fa      	ldr	r2, [r7, #12]
 800ee68:	4313      	orrs	r3, r2
 800ee6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ee6c:	693b      	ldr	r3, [r7, #16]
 800ee6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ee72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ee74:	683b      	ldr	r3, [r7, #0]
 800ee76:	689b      	ldr	r3, [r3, #8]
 800ee78:	051b      	lsls	r3, r3, #20
 800ee7a:	693a      	ldr	r2, [r7, #16]
 800ee7c:	4313      	orrs	r3, r2
 800ee7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	4a19      	ldr	r2, [pc, #100]	@ (800eee8 <TIM_OC6_SetConfig+0xb8>)
 800ee84:	4293      	cmp	r3, r2
 800ee86:	d00f      	beq.n	800eea8 <TIM_OC6_SetConfig+0x78>
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	4a18      	ldr	r2, [pc, #96]	@ (800eeec <TIM_OC6_SetConfig+0xbc>)
 800ee8c:	4293      	cmp	r3, r2
 800ee8e:	d00b      	beq.n	800eea8 <TIM_OC6_SetConfig+0x78>
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	4a17      	ldr	r2, [pc, #92]	@ (800eef0 <TIM_OC6_SetConfig+0xc0>)
 800ee94:	4293      	cmp	r3, r2
 800ee96:	d007      	beq.n	800eea8 <TIM_OC6_SetConfig+0x78>
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	4a16      	ldr	r2, [pc, #88]	@ (800eef4 <TIM_OC6_SetConfig+0xc4>)
 800ee9c:	4293      	cmp	r3, r2
 800ee9e:	d003      	beq.n	800eea8 <TIM_OC6_SetConfig+0x78>
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	4a15      	ldr	r2, [pc, #84]	@ (800eef8 <TIM_OC6_SetConfig+0xc8>)
 800eea4:	4293      	cmp	r3, r2
 800eea6:	d109      	bne.n	800eebc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800eea8:	697b      	ldr	r3, [r7, #20]
 800eeaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800eeae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	695b      	ldr	r3, [r3, #20]
 800eeb4:	029b      	lsls	r3, r3, #10
 800eeb6:	697a      	ldr	r2, [r7, #20]
 800eeb8:	4313      	orrs	r3, r2
 800eeba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	697a      	ldr	r2, [r7, #20]
 800eec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	68fa      	ldr	r2, [r7, #12]
 800eec6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800eec8:	683b      	ldr	r3, [r7, #0]
 800eeca:	685a      	ldr	r2, [r3, #4]
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	693a      	ldr	r2, [r7, #16]
 800eed4:	621a      	str	r2, [r3, #32]
}
 800eed6:	bf00      	nop
 800eed8:	371c      	adds	r7, #28
 800eeda:	46bd      	mov	sp, r7
 800eedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee0:	4770      	bx	lr
 800eee2:	bf00      	nop
 800eee4:	feff8fff 	.word	0xfeff8fff
 800eee8:	40010000 	.word	0x40010000
 800eeec:	40010400 	.word	0x40010400
 800eef0:	40014000 	.word	0x40014000
 800eef4:	40014400 	.word	0x40014400
 800eef8:	40014800 	.word	0x40014800

0800eefc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800eefc:	b480      	push	{r7}
 800eefe:	b087      	sub	sp, #28
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	60f8      	str	r0, [r7, #12]
 800ef04:	60b9      	str	r1, [r7, #8]
 800ef06:	607a      	str	r2, [r7, #4]
 800ef08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	6a1b      	ldr	r3, [r3, #32]
 800ef0e:	f023 0201 	bic.w	r2, r3, #1
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	699b      	ldr	r3, [r3, #24]
 800ef1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	6a1b      	ldr	r3, [r3, #32]
 800ef20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	4a2c      	ldr	r2, [pc, #176]	@ (800efd8 <TIM_TI1_SetConfig+0xdc>)
 800ef26:	4293      	cmp	r3, r2
 800ef28:	d023      	beq.n	800ef72 <TIM_TI1_SetConfig+0x76>
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef30:	d01f      	beq.n	800ef72 <TIM_TI1_SetConfig+0x76>
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	4a29      	ldr	r2, [pc, #164]	@ (800efdc <TIM_TI1_SetConfig+0xe0>)
 800ef36:	4293      	cmp	r3, r2
 800ef38:	d01b      	beq.n	800ef72 <TIM_TI1_SetConfig+0x76>
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	4a28      	ldr	r2, [pc, #160]	@ (800efe0 <TIM_TI1_SetConfig+0xe4>)
 800ef3e:	4293      	cmp	r3, r2
 800ef40:	d017      	beq.n	800ef72 <TIM_TI1_SetConfig+0x76>
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	4a27      	ldr	r2, [pc, #156]	@ (800efe4 <TIM_TI1_SetConfig+0xe8>)
 800ef46:	4293      	cmp	r3, r2
 800ef48:	d013      	beq.n	800ef72 <TIM_TI1_SetConfig+0x76>
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	4a26      	ldr	r2, [pc, #152]	@ (800efe8 <TIM_TI1_SetConfig+0xec>)
 800ef4e:	4293      	cmp	r3, r2
 800ef50:	d00f      	beq.n	800ef72 <TIM_TI1_SetConfig+0x76>
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	4a25      	ldr	r2, [pc, #148]	@ (800efec <TIM_TI1_SetConfig+0xf0>)
 800ef56:	4293      	cmp	r3, r2
 800ef58:	d00b      	beq.n	800ef72 <TIM_TI1_SetConfig+0x76>
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	4a24      	ldr	r2, [pc, #144]	@ (800eff0 <TIM_TI1_SetConfig+0xf4>)
 800ef5e:	4293      	cmp	r3, r2
 800ef60:	d007      	beq.n	800ef72 <TIM_TI1_SetConfig+0x76>
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	4a23      	ldr	r2, [pc, #140]	@ (800eff4 <TIM_TI1_SetConfig+0xf8>)
 800ef66:	4293      	cmp	r3, r2
 800ef68:	d003      	beq.n	800ef72 <TIM_TI1_SetConfig+0x76>
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	4a22      	ldr	r2, [pc, #136]	@ (800eff8 <TIM_TI1_SetConfig+0xfc>)
 800ef6e:	4293      	cmp	r3, r2
 800ef70:	d101      	bne.n	800ef76 <TIM_TI1_SetConfig+0x7a>
 800ef72:	2301      	movs	r3, #1
 800ef74:	e000      	b.n	800ef78 <TIM_TI1_SetConfig+0x7c>
 800ef76:	2300      	movs	r3, #0
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d008      	beq.n	800ef8e <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800ef7c:	697b      	ldr	r3, [r7, #20]
 800ef7e:	f023 0303 	bic.w	r3, r3, #3
 800ef82:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800ef84:	697a      	ldr	r2, [r7, #20]
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	4313      	orrs	r3, r2
 800ef8a:	617b      	str	r3, [r7, #20]
 800ef8c:	e003      	b.n	800ef96 <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800ef8e:	697b      	ldr	r3, [r7, #20]
 800ef90:	f043 0301 	orr.w	r3, r3, #1
 800ef94:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ef96:	697b      	ldr	r3, [r7, #20]
 800ef98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ef9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	011b      	lsls	r3, r3, #4
 800efa2:	b2db      	uxtb	r3, r3
 800efa4:	697a      	ldr	r2, [r7, #20]
 800efa6:	4313      	orrs	r3, r2
 800efa8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800efaa:	693b      	ldr	r3, [r7, #16]
 800efac:	f023 030a 	bic.w	r3, r3, #10
 800efb0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800efb2:	68bb      	ldr	r3, [r7, #8]
 800efb4:	f003 030a 	and.w	r3, r3, #10
 800efb8:	693a      	ldr	r2, [r7, #16]
 800efba:	4313      	orrs	r3, r2
 800efbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	697a      	ldr	r2, [r7, #20]
 800efc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	693a      	ldr	r2, [r7, #16]
 800efc8:	621a      	str	r2, [r3, #32]
}
 800efca:	bf00      	nop
 800efcc:	371c      	adds	r7, #28
 800efce:	46bd      	mov	sp, r7
 800efd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd4:	4770      	bx	lr
 800efd6:	bf00      	nop
 800efd8:	40010000 	.word	0x40010000
 800efdc:	40000400 	.word	0x40000400
 800efe0:	40000800 	.word	0x40000800
 800efe4:	40000c00 	.word	0x40000c00
 800efe8:	40010400 	.word	0x40010400
 800efec:	40001800 	.word	0x40001800
 800eff0:	40014000 	.word	0x40014000
 800eff4:	4000e000 	.word	0x4000e000
 800eff8:	4000e400 	.word	0x4000e400

0800effc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800effc:	b480      	push	{r7}
 800effe:	b087      	sub	sp, #28
 800f000:	af00      	add	r7, sp, #0
 800f002:	60f8      	str	r0, [r7, #12]
 800f004:	60b9      	str	r1, [r7, #8]
 800f006:	607a      	str	r2, [r7, #4]
 800f008:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	6a1b      	ldr	r3, [r3, #32]
 800f00e:	f023 0210 	bic.w	r2, r3, #16
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	699b      	ldr	r3, [r3, #24]
 800f01a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	6a1b      	ldr	r3, [r3, #32]
 800f020:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800f022:	697b      	ldr	r3, [r7, #20]
 800f024:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f028:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	021b      	lsls	r3, r3, #8
 800f02e:	697a      	ldr	r2, [r7, #20]
 800f030:	4313      	orrs	r3, r2
 800f032:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f034:	697b      	ldr	r3, [r7, #20]
 800f036:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f03a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	031b      	lsls	r3, r3, #12
 800f040:	b29b      	uxth	r3, r3
 800f042:	697a      	ldr	r2, [r7, #20]
 800f044:	4313      	orrs	r3, r2
 800f046:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f048:	693b      	ldr	r3, [r7, #16]
 800f04a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f04e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	011b      	lsls	r3, r3, #4
 800f054:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800f058:	693a      	ldr	r2, [r7, #16]
 800f05a:	4313      	orrs	r3, r2
 800f05c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	697a      	ldr	r2, [r7, #20]
 800f062:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	693a      	ldr	r2, [r7, #16]
 800f068:	621a      	str	r2, [r3, #32]
}
 800f06a:	bf00      	nop
 800f06c:	371c      	adds	r7, #28
 800f06e:	46bd      	mov	sp, r7
 800f070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f074:	4770      	bx	lr

0800f076 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f076:	b480      	push	{r7}
 800f078:	b087      	sub	sp, #28
 800f07a:	af00      	add	r7, sp, #0
 800f07c:	60f8      	str	r0, [r7, #12]
 800f07e:	60b9      	str	r1, [r7, #8]
 800f080:	607a      	str	r2, [r7, #4]
 800f082:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	6a1b      	ldr	r3, [r3, #32]
 800f088:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	69db      	ldr	r3, [r3, #28]
 800f094:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	6a1b      	ldr	r3, [r3, #32]
 800f09a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800f09c:	697b      	ldr	r3, [r7, #20]
 800f09e:	f023 0303 	bic.w	r3, r3, #3
 800f0a2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800f0a4:	697a      	ldr	r2, [r7, #20]
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	4313      	orrs	r3, r2
 800f0aa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800f0ac:	697b      	ldr	r3, [r7, #20]
 800f0ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f0b2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800f0b4:	683b      	ldr	r3, [r7, #0]
 800f0b6:	011b      	lsls	r3, r3, #4
 800f0b8:	b2db      	uxtb	r3, r3
 800f0ba:	697a      	ldr	r2, [r7, #20]
 800f0bc:	4313      	orrs	r3, r2
 800f0be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800f0c0:	693b      	ldr	r3, [r7, #16]
 800f0c2:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800f0c6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800f0c8:	68bb      	ldr	r3, [r7, #8]
 800f0ca:	021b      	lsls	r3, r3, #8
 800f0cc:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800f0d0:	693a      	ldr	r2, [r7, #16]
 800f0d2:	4313      	orrs	r3, r2
 800f0d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	697a      	ldr	r2, [r7, #20]
 800f0da:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	693a      	ldr	r2, [r7, #16]
 800f0e0:	621a      	str	r2, [r3, #32]
}
 800f0e2:	bf00      	nop
 800f0e4:	371c      	adds	r7, #28
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ec:	4770      	bx	lr

0800f0ee <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f0ee:	b480      	push	{r7}
 800f0f0:	b087      	sub	sp, #28
 800f0f2:	af00      	add	r7, sp, #0
 800f0f4:	60f8      	str	r0, [r7, #12]
 800f0f6:	60b9      	str	r1, [r7, #8]
 800f0f8:	607a      	str	r2, [r7, #4]
 800f0fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	6a1b      	ldr	r3, [r3, #32]
 800f100:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	69db      	ldr	r3, [r3, #28]
 800f10c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	6a1b      	ldr	r3, [r3, #32]
 800f112:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800f114:	697b      	ldr	r3, [r7, #20]
 800f116:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f11a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	021b      	lsls	r3, r3, #8
 800f120:	697a      	ldr	r2, [r7, #20]
 800f122:	4313      	orrs	r3, r2
 800f124:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800f126:	697b      	ldr	r3, [r7, #20]
 800f128:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f12c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	031b      	lsls	r3, r3, #12
 800f132:	b29b      	uxth	r3, r3
 800f134:	697a      	ldr	r2, [r7, #20]
 800f136:	4313      	orrs	r3, r2
 800f138:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800f13a:	693b      	ldr	r3, [r7, #16]
 800f13c:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800f140:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800f142:	68bb      	ldr	r3, [r7, #8]
 800f144:	031b      	lsls	r3, r3, #12
 800f146:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800f14a:	693a      	ldr	r2, [r7, #16]
 800f14c:	4313      	orrs	r3, r2
 800f14e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	697a      	ldr	r2, [r7, #20]
 800f154:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	693a      	ldr	r2, [r7, #16]
 800f15a:	621a      	str	r2, [r3, #32]
}
 800f15c:	bf00      	nop
 800f15e:	371c      	adds	r7, #28
 800f160:	46bd      	mov	sp, r7
 800f162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f166:	4770      	bx	lr

0800f168 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f168:	b480      	push	{r7}
 800f16a:	b087      	sub	sp, #28
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	60f8      	str	r0, [r7, #12]
 800f170:	60b9      	str	r1, [r7, #8]
 800f172:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f174:	68bb      	ldr	r3, [r7, #8]
 800f176:	f003 031f 	and.w	r3, r3, #31
 800f17a:	2201      	movs	r2, #1
 800f17c:	fa02 f303 	lsl.w	r3, r2, r3
 800f180:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	6a1a      	ldr	r2, [r3, #32]
 800f186:	697b      	ldr	r3, [r7, #20]
 800f188:	43db      	mvns	r3, r3
 800f18a:	401a      	ands	r2, r3
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	6a1a      	ldr	r2, [r3, #32]
 800f194:	68bb      	ldr	r3, [r7, #8]
 800f196:	f003 031f 	and.w	r3, r3, #31
 800f19a:	6879      	ldr	r1, [r7, #4]
 800f19c:	fa01 f303 	lsl.w	r3, r1, r3
 800f1a0:	431a      	orrs	r2, r3
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	621a      	str	r2, [r3, #32]
}
 800f1a6:	bf00      	nop
 800f1a8:	371c      	adds	r7, #28
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b0:	4770      	bx	lr
	...

0800f1b4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b084      	sub	sp, #16
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
 800f1bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d109      	bne.n	800f1d8 <HAL_TIMEx_PWMN_Start+0x24>
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f1ca:	b2db      	uxtb	r3, r3
 800f1cc:	2b01      	cmp	r3, #1
 800f1ce:	bf14      	ite	ne
 800f1d0:	2301      	movne	r3, #1
 800f1d2:	2300      	moveq	r3, #0
 800f1d4:	b2db      	uxtb	r3, r3
 800f1d6:	e022      	b.n	800f21e <HAL_TIMEx_PWMN_Start+0x6a>
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	2b04      	cmp	r3, #4
 800f1dc:	d109      	bne.n	800f1f2 <HAL_TIMEx_PWMN_Start+0x3e>
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f1e4:	b2db      	uxtb	r3, r3
 800f1e6:	2b01      	cmp	r3, #1
 800f1e8:	bf14      	ite	ne
 800f1ea:	2301      	movne	r3, #1
 800f1ec:	2300      	moveq	r3, #0
 800f1ee:	b2db      	uxtb	r3, r3
 800f1f0:	e015      	b.n	800f21e <HAL_TIMEx_PWMN_Start+0x6a>
 800f1f2:	683b      	ldr	r3, [r7, #0]
 800f1f4:	2b08      	cmp	r3, #8
 800f1f6:	d109      	bne.n	800f20c <HAL_TIMEx_PWMN_Start+0x58>
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800f1fe:	b2db      	uxtb	r3, r3
 800f200:	2b01      	cmp	r3, #1
 800f202:	bf14      	ite	ne
 800f204:	2301      	movne	r3, #1
 800f206:	2300      	moveq	r3, #0
 800f208:	b2db      	uxtb	r3, r3
 800f20a:	e008      	b.n	800f21e <HAL_TIMEx_PWMN_Start+0x6a>
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800f212:	b2db      	uxtb	r3, r3
 800f214:	2b01      	cmp	r3, #1
 800f216:	bf14      	ite	ne
 800f218:	2301      	movne	r3, #1
 800f21a:	2300      	moveq	r3, #0
 800f21c:	b2db      	uxtb	r3, r3
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d001      	beq.n	800f226 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800f222:	2301      	movs	r3, #1
 800f224:	e07d      	b.n	800f322 <HAL_TIMEx_PWMN_Start+0x16e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d104      	bne.n	800f236 <HAL_TIMEx_PWMN_Start+0x82>
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2202      	movs	r2, #2
 800f230:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f234:	e013      	b.n	800f25e <HAL_TIMEx_PWMN_Start+0xaa>
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	2b04      	cmp	r3, #4
 800f23a:	d104      	bne.n	800f246 <HAL_TIMEx_PWMN_Start+0x92>
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2202      	movs	r2, #2
 800f240:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f244:	e00b      	b.n	800f25e <HAL_TIMEx_PWMN_Start+0xaa>
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	2b08      	cmp	r3, #8
 800f24a:	d104      	bne.n	800f256 <HAL_TIMEx_PWMN_Start+0xa2>
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2202      	movs	r2, #2
 800f250:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f254:	e003      	b.n	800f25e <HAL_TIMEx_PWMN_Start+0xaa>
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2202      	movs	r2, #2
 800f25a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	2204      	movs	r2, #4
 800f264:	6839      	ldr	r1, [r7, #0]
 800f266:	4618      	mov	r0, r3
 800f268:	f000 fa0e 	bl	800f688 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f27a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	4a2a      	ldr	r2, [pc, #168]	@ (800f32c <HAL_TIMEx_PWMN_Start+0x178>)
 800f282:	4293      	cmp	r3, r2
 800f284:	d02c      	beq.n	800f2e0 <HAL_TIMEx_PWMN_Start+0x12c>
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f28e:	d027      	beq.n	800f2e0 <HAL_TIMEx_PWMN_Start+0x12c>
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	4a26      	ldr	r2, [pc, #152]	@ (800f330 <HAL_TIMEx_PWMN_Start+0x17c>)
 800f296:	4293      	cmp	r3, r2
 800f298:	d022      	beq.n	800f2e0 <HAL_TIMEx_PWMN_Start+0x12c>
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	4a25      	ldr	r2, [pc, #148]	@ (800f334 <HAL_TIMEx_PWMN_Start+0x180>)
 800f2a0:	4293      	cmp	r3, r2
 800f2a2:	d01d      	beq.n	800f2e0 <HAL_TIMEx_PWMN_Start+0x12c>
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	4a23      	ldr	r2, [pc, #140]	@ (800f338 <HAL_TIMEx_PWMN_Start+0x184>)
 800f2aa:	4293      	cmp	r3, r2
 800f2ac:	d018      	beq.n	800f2e0 <HAL_TIMEx_PWMN_Start+0x12c>
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	4a22      	ldr	r2, [pc, #136]	@ (800f33c <HAL_TIMEx_PWMN_Start+0x188>)
 800f2b4:	4293      	cmp	r3, r2
 800f2b6:	d013      	beq.n	800f2e0 <HAL_TIMEx_PWMN_Start+0x12c>
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	4a20      	ldr	r2, [pc, #128]	@ (800f340 <HAL_TIMEx_PWMN_Start+0x18c>)
 800f2be:	4293      	cmp	r3, r2
 800f2c0:	d00e      	beq.n	800f2e0 <HAL_TIMEx_PWMN_Start+0x12c>
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	4a1f      	ldr	r2, [pc, #124]	@ (800f344 <HAL_TIMEx_PWMN_Start+0x190>)
 800f2c8:	4293      	cmp	r3, r2
 800f2ca:	d009      	beq.n	800f2e0 <HAL_TIMEx_PWMN_Start+0x12c>
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	4a1d      	ldr	r2, [pc, #116]	@ (800f348 <HAL_TIMEx_PWMN_Start+0x194>)
 800f2d2:	4293      	cmp	r3, r2
 800f2d4:	d004      	beq.n	800f2e0 <HAL_TIMEx_PWMN_Start+0x12c>
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	4a1c      	ldr	r2, [pc, #112]	@ (800f34c <HAL_TIMEx_PWMN_Start+0x198>)
 800f2dc:	4293      	cmp	r3, r2
 800f2de:	d115      	bne.n	800f30c <HAL_TIMEx_PWMN_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	689a      	ldr	r2, [r3, #8]
 800f2e6:	4b1a      	ldr	r3, [pc, #104]	@ (800f350 <HAL_TIMEx_PWMN_Start+0x19c>)
 800f2e8:	4013      	ands	r3, r2
 800f2ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	2b06      	cmp	r3, #6
 800f2f0:	d015      	beq.n	800f31e <HAL_TIMEx_PWMN_Start+0x16a>
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f2f8:	d011      	beq.n	800f31e <HAL_TIMEx_PWMN_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	681a      	ldr	r2, [r3, #0]
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	f042 0201 	orr.w	r2, r2, #1
 800f308:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f30a:	e008      	b.n	800f31e <HAL_TIMEx_PWMN_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	681a      	ldr	r2, [r3, #0]
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	f042 0201 	orr.w	r2, r2, #1
 800f31a:	601a      	str	r2, [r3, #0]
 800f31c:	e000      	b.n	800f320 <HAL_TIMEx_PWMN_Start+0x16c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f31e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f320:	2300      	movs	r3, #0
}
 800f322:	4618      	mov	r0, r3
 800f324:	3710      	adds	r7, #16
 800f326:	46bd      	mov	sp, r7
 800f328:	bd80      	pop	{r7, pc}
 800f32a:	bf00      	nop
 800f32c:	40010000 	.word	0x40010000
 800f330:	40000400 	.word	0x40000400
 800f334:	40000800 	.word	0x40000800
 800f338:	40000c00 	.word	0x40000c00
 800f33c:	40010400 	.word	0x40010400
 800f340:	40001800 	.word	0x40001800
 800f344:	40014000 	.word	0x40014000
 800f348:	4000e000 	.word	0x4000e000
 800f34c:	4000e400 	.word	0x4000e400
 800f350:	00010007 	.word	0x00010007

0800f354 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b082      	sub	sp, #8
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
 800f35c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	2200      	movs	r2, #0
 800f364:	6839      	ldr	r1, [r7, #0]
 800f366:	4618      	mov	r0, r3
 800f368:	f000 f98e 	bl	800f688 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	6a1a      	ldr	r2, [r3, #32]
 800f372:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f376:	4013      	ands	r3, r2
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d10f      	bne.n	800f39c <HAL_TIMEx_PWMN_Stop+0x48>
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	6a1a      	ldr	r2, [r3, #32]
 800f382:	f240 4344 	movw	r3, #1092	@ 0x444
 800f386:	4013      	ands	r3, r2
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d107      	bne.n	800f39c <HAL_TIMEx_PWMN_Stop+0x48>
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800f39a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	6a1a      	ldr	r2, [r3, #32]
 800f3a2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f3a6:	4013      	ands	r3, r2
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d10f      	bne.n	800f3cc <HAL_TIMEx_PWMN_Stop+0x78>
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	6a1a      	ldr	r2, [r3, #32]
 800f3b2:	f240 4344 	movw	r3, #1092	@ 0x444
 800f3b6:	4013      	ands	r3, r2
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d107      	bne.n	800f3cc <HAL_TIMEx_PWMN_Stop+0x78>
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	681a      	ldr	r2, [r3, #0]
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	f022 0201 	bic.w	r2, r2, #1
 800f3ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d104      	bne.n	800f3dc <HAL_TIMEx_PWMN_Stop+0x88>
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	2201      	movs	r2, #1
 800f3d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f3da:	e013      	b.n	800f404 <HAL_TIMEx_PWMN_Stop+0xb0>
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	2b04      	cmp	r3, #4
 800f3e0:	d104      	bne.n	800f3ec <HAL_TIMEx_PWMN_Stop+0x98>
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	2201      	movs	r2, #1
 800f3e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f3ea:	e00b      	b.n	800f404 <HAL_TIMEx_PWMN_Stop+0xb0>
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	2b08      	cmp	r3, #8
 800f3f0:	d104      	bne.n	800f3fc <HAL_TIMEx_PWMN_Stop+0xa8>
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	2201      	movs	r2, #1
 800f3f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f3fa:	e003      	b.n	800f404 <HAL_TIMEx_PWMN_Stop+0xb0>
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	2201      	movs	r2, #1
 800f400:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 800f404:	2300      	movs	r3, #0
}
 800f406:	4618      	mov	r0, r3
 800f408:	3708      	adds	r7, #8
 800f40a:	46bd      	mov	sp, r7
 800f40c:	bd80      	pop	{r7, pc}
	...

0800f410 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f410:	b480      	push	{r7}
 800f412:	b085      	sub	sp, #20
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
 800f418:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f420:	2b01      	cmp	r3, #1
 800f422:	d101      	bne.n	800f428 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f424:	2302      	movs	r3, #2
 800f426:	e077      	b.n	800f518 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2201      	movs	r2, #1
 800f42c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	2202      	movs	r2, #2
 800f434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	685b      	ldr	r3, [r3, #4]
 800f43e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	689b      	ldr	r3, [r3, #8]
 800f446:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	4a35      	ldr	r2, [pc, #212]	@ (800f524 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f44e:	4293      	cmp	r3, r2
 800f450:	d004      	beq.n	800f45c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	4a34      	ldr	r2, [pc, #208]	@ (800f528 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f458:	4293      	cmp	r3, r2
 800f45a:	d108      	bne.n	800f46e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f462:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	685b      	ldr	r3, [r3, #4]
 800f468:	68fa      	ldr	r2, [r7, #12]
 800f46a:	4313      	orrs	r3, r2
 800f46c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f474:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	68fa      	ldr	r2, [r7, #12]
 800f47c:	4313      	orrs	r3, r2
 800f47e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	68fa      	ldr	r2, [r7, #12]
 800f486:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	4a25      	ldr	r2, [pc, #148]	@ (800f524 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f48e:	4293      	cmp	r3, r2
 800f490:	d02c      	beq.n	800f4ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f49a:	d027      	beq.n	800f4ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	4a22      	ldr	r2, [pc, #136]	@ (800f52c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f4a2:	4293      	cmp	r3, r2
 800f4a4:	d022      	beq.n	800f4ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	4a21      	ldr	r2, [pc, #132]	@ (800f530 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f4ac:	4293      	cmp	r3, r2
 800f4ae:	d01d      	beq.n	800f4ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	4a1f      	ldr	r2, [pc, #124]	@ (800f534 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f4b6:	4293      	cmp	r3, r2
 800f4b8:	d018      	beq.n	800f4ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	4a1a      	ldr	r2, [pc, #104]	@ (800f528 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f4c0:	4293      	cmp	r3, r2
 800f4c2:	d013      	beq.n	800f4ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	4a1b      	ldr	r2, [pc, #108]	@ (800f538 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f4ca:	4293      	cmp	r3, r2
 800f4cc:	d00e      	beq.n	800f4ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	4a1a      	ldr	r2, [pc, #104]	@ (800f53c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800f4d4:	4293      	cmp	r3, r2
 800f4d6:	d009      	beq.n	800f4ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	4a18      	ldr	r2, [pc, #96]	@ (800f540 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	d004      	beq.n	800f4ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	4a17      	ldr	r2, [pc, #92]	@ (800f544 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800f4e8:	4293      	cmp	r3, r2
 800f4ea:	d10c      	bne.n	800f506 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f4f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	689b      	ldr	r3, [r3, #8]
 800f4f8:	68ba      	ldr	r2, [r7, #8]
 800f4fa:	4313      	orrs	r3, r2
 800f4fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	68ba      	ldr	r2, [r7, #8]
 800f504:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	2201      	movs	r2, #1
 800f50a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	2200      	movs	r2, #0
 800f512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f516:	2300      	movs	r3, #0
}
 800f518:	4618      	mov	r0, r3
 800f51a:	3714      	adds	r7, #20
 800f51c:	46bd      	mov	sp, r7
 800f51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f522:	4770      	bx	lr
 800f524:	40010000 	.word	0x40010000
 800f528:	40010400 	.word	0x40010400
 800f52c:	40000400 	.word	0x40000400
 800f530:	40000800 	.word	0x40000800
 800f534:	40000c00 	.word	0x40000c00
 800f538:	40001800 	.word	0x40001800
 800f53c:	40014000 	.word	0x40014000
 800f540:	4000e000 	.word	0x4000e000
 800f544:	4000e400 	.word	0x4000e400

0800f548 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f548:	b480      	push	{r7}
 800f54a:	b085      	sub	sp, #20
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
 800f550:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f552:	2300      	movs	r3, #0
 800f554:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f55c:	2b01      	cmp	r3, #1
 800f55e:	d101      	bne.n	800f564 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f560:	2302      	movs	r3, #2
 800f562:	e087      	b.n	800f674 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	2201      	movs	r2, #1
 800f568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800f572:	683b      	ldr	r3, [r7, #0]
 800f574:	68db      	ldr	r3, [r3, #12]
 800f576:	4313      	orrs	r3, r2
 800f578:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	689b      	ldr	r3, [r3, #8]
 800f584:	4313      	orrs	r3, r2
 800f586:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	685b      	ldr	r3, [r3, #4]
 800f592:	4313      	orrs	r3, r2
 800f594:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	4313      	orrs	r3, r2
 800f5a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	691b      	ldr	r3, [r3, #16]
 800f5ae:	4313      	orrs	r3, r2
 800f5b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	695b      	ldr	r3, [r3, #20]
 800f5bc:	4313      	orrs	r3, r2
 800f5be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f5ca:	4313      	orrs	r3, r2
 800f5cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	699b      	ldr	r3, [r3, #24]
 800f5d8:	041b      	lsls	r3, r3, #16
 800f5da:	4313      	orrs	r3, r2
 800f5dc:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	4a27      	ldr	r2, [pc, #156]	@ (800f680 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800f5e4:	4293      	cmp	r3, r2
 800f5e6:	d004      	beq.n	800f5f2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	4a25      	ldr	r2, [pc, #148]	@ (800f684 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800f5ee:	4293      	cmp	r3, r2
 800f5f0:	d106      	bne.n	800f600 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	69db      	ldr	r3, [r3, #28]
 800f5fc:	4313      	orrs	r3, r2
 800f5fe:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	4a1e      	ldr	r2, [pc, #120]	@ (800f680 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800f606:	4293      	cmp	r3, r2
 800f608:	d004      	beq.n	800f614 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	4a1d      	ldr	r2, [pc, #116]	@ (800f684 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800f610:	4293      	cmp	r3, r2
 800f612:	d126      	bne.n	800f662 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800f61a:	683b      	ldr	r3, [r7, #0]
 800f61c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f61e:	051b      	lsls	r3, r3, #20
 800f620:	4313      	orrs	r3, r2
 800f622:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	6a1b      	ldr	r3, [r3, #32]
 800f62e:	4313      	orrs	r3, r2
 800f630:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f63c:	4313      	orrs	r3, r2
 800f63e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	4a0e      	ldr	r2, [pc, #56]	@ (800f680 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800f646:	4293      	cmp	r3, r2
 800f648:	d004      	beq.n	800f654 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	4a0d      	ldr	r2, [pc, #52]	@ (800f684 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800f650:	4293      	cmp	r3, r2
 800f652:	d106      	bne.n	800f662 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f65e:	4313      	orrs	r3, r2
 800f660:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	68fa      	ldr	r2, [r7, #12]
 800f668:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	2200      	movs	r2, #0
 800f66e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f672:	2300      	movs	r3, #0
}
 800f674:	4618      	mov	r0, r3
 800f676:	3714      	adds	r7, #20
 800f678:	46bd      	mov	sp, r7
 800f67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67e:	4770      	bx	lr
 800f680:	40010000 	.word	0x40010000
 800f684:	40010400 	.word	0x40010400

0800f688 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800f688:	b480      	push	{r7}
 800f68a:	b087      	sub	sp, #28
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	60f8      	str	r0, [r7, #12]
 800f690:	60b9      	str	r1, [r7, #8]
 800f692:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f694:	68bb      	ldr	r3, [r7, #8]
 800f696:	f003 031f 	and.w	r3, r3, #31
 800f69a:	2204      	movs	r2, #4
 800f69c:	fa02 f303 	lsl.w	r3, r2, r3
 800f6a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	6a1a      	ldr	r2, [r3, #32]
 800f6a6:	697b      	ldr	r3, [r7, #20]
 800f6a8:	43db      	mvns	r3, r3
 800f6aa:	401a      	ands	r2, r3
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	6a1a      	ldr	r2, [r3, #32]
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	f003 031f 	and.w	r3, r3, #31
 800f6ba:	6879      	ldr	r1, [r7, #4]
 800f6bc:	fa01 f303 	lsl.w	r3, r1, r3
 800f6c0:	431a      	orrs	r2, r3
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	621a      	str	r2, [r3, #32]
}
 800f6c6:	bf00      	nop
 800f6c8:	371c      	adds	r7, #28
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d0:	4770      	bx	lr

0800f6d2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f6d2:	b580      	push	{r7, lr}
 800f6d4:	b082      	sub	sp, #8
 800f6d6:	af00      	add	r7, sp, #0
 800f6d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d101      	bne.n	800f6e4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f6e0:	2301      	movs	r3, #1
 800f6e2:	e042      	b.n	800f76a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d106      	bne.n	800f6fc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f6f6:	6878      	ldr	r0, [r7, #4]
 800f6f8:	f7f4 fa12 	bl	8003b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	2224      	movs	r2, #36	@ 0x24
 800f700:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	681a      	ldr	r2, [r3, #0]
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	f022 0201 	bic.w	r2, r2, #1
 800f712:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f714:	6878      	ldr	r0, [r7, #4]
 800f716:	f000 f983 	bl	800fa20 <UART_SetConfig>
 800f71a:	4603      	mov	r3, r0
 800f71c:	2b01      	cmp	r3, #1
 800f71e:	d101      	bne.n	800f724 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f720:	2301      	movs	r3, #1
 800f722:	e022      	b.n	800f76a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d002      	beq.n	800f732 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f72c:	6878      	ldr	r0, [r7, #4]
 800f72e:	f000 ffe3 	bl	80106f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	685a      	ldr	r2, [r3, #4]
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f740:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	689a      	ldr	r2, [r3, #8]
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f750:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	681a      	ldr	r2, [r3, #0]
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	f042 0201 	orr.w	r2, r2, #1
 800f760:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f762:	6878      	ldr	r0, [r7, #4]
 800f764:	f001 f86a 	bl	801083c <UART_CheckIdleState>
 800f768:	4603      	mov	r3, r0
}
 800f76a:	4618      	mov	r0, r3
 800f76c:	3708      	adds	r7, #8
 800f76e:	46bd      	mov	sp, r7
 800f770:	bd80      	pop	{r7, pc}

0800f772 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f772:	b580      	push	{r7, lr}
 800f774:	b08a      	sub	sp, #40	@ 0x28
 800f776:	af02      	add	r7, sp, #8
 800f778:	60f8      	str	r0, [r7, #12]
 800f77a:	60b9      	str	r1, [r7, #8]
 800f77c:	603b      	str	r3, [r7, #0]
 800f77e:	4613      	mov	r3, r2
 800f780:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f788:	2b20      	cmp	r3, #32
 800f78a:	d17b      	bne.n	800f884 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800f78c:	68bb      	ldr	r3, [r7, #8]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d002      	beq.n	800f798 <HAL_UART_Transmit+0x26>
 800f792:	88fb      	ldrh	r3, [r7, #6]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d101      	bne.n	800f79c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f798:	2301      	movs	r3, #1
 800f79a:	e074      	b.n	800f886 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	2200      	movs	r2, #0
 800f7a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	2221      	movs	r2, #33	@ 0x21
 800f7a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f7ac:	f7f4 fe1c 	bl	80043e8 <HAL_GetTick>
 800f7b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	88fa      	ldrh	r2, [r7, #6]
 800f7b6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	88fa      	ldrh	r2, [r7, #6]
 800f7be:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	689b      	ldr	r3, [r3, #8]
 800f7c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f7ca:	d108      	bne.n	800f7de <HAL_UART_Transmit+0x6c>
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	691b      	ldr	r3, [r3, #16]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d104      	bne.n	800f7de <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f7d8:	68bb      	ldr	r3, [r7, #8]
 800f7da:	61bb      	str	r3, [r7, #24]
 800f7dc:	e003      	b.n	800f7e6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800f7de:	68bb      	ldr	r3, [r7, #8]
 800f7e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f7e6:	e030      	b.n	800f84a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	9300      	str	r3, [sp, #0]
 800f7ec:	697b      	ldr	r3, [r7, #20]
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	2180      	movs	r1, #128	@ 0x80
 800f7f2:	68f8      	ldr	r0, [r7, #12]
 800f7f4:	f001 f8cc 	bl	8010990 <UART_WaitOnFlagUntilTimeout>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d005      	beq.n	800f80a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	2220      	movs	r2, #32
 800f802:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800f806:	2303      	movs	r3, #3
 800f808:	e03d      	b.n	800f886 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800f80a:	69fb      	ldr	r3, [r7, #28]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d10b      	bne.n	800f828 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f810:	69bb      	ldr	r3, [r7, #24]
 800f812:	881b      	ldrh	r3, [r3, #0]
 800f814:	461a      	mov	r2, r3
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f81e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f820:	69bb      	ldr	r3, [r7, #24]
 800f822:	3302      	adds	r3, #2
 800f824:	61bb      	str	r3, [r7, #24]
 800f826:	e007      	b.n	800f838 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f828:	69fb      	ldr	r3, [r7, #28]
 800f82a:	781a      	ldrb	r2, [r3, #0]
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f832:	69fb      	ldr	r3, [r7, #28]
 800f834:	3301      	adds	r3, #1
 800f836:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f83e:	b29b      	uxth	r3, r3
 800f840:	3b01      	subs	r3, #1
 800f842:	b29a      	uxth	r2, r3
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f850:	b29b      	uxth	r3, r3
 800f852:	2b00      	cmp	r3, #0
 800f854:	d1c8      	bne.n	800f7e8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	9300      	str	r3, [sp, #0]
 800f85a:	697b      	ldr	r3, [r7, #20]
 800f85c:	2200      	movs	r2, #0
 800f85e:	2140      	movs	r1, #64	@ 0x40
 800f860:	68f8      	ldr	r0, [r7, #12]
 800f862:	f001 f895 	bl	8010990 <UART_WaitOnFlagUntilTimeout>
 800f866:	4603      	mov	r3, r0
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d005      	beq.n	800f878 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	2220      	movs	r2, #32
 800f870:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800f874:	2303      	movs	r3, #3
 800f876:	e006      	b.n	800f886 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	2220      	movs	r2, #32
 800f87c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800f880:	2300      	movs	r3, #0
 800f882:	e000      	b.n	800f886 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800f884:	2302      	movs	r3, #2
  }
}
 800f886:	4618      	mov	r0, r3
 800f888:	3720      	adds	r7, #32
 800f88a:	46bd      	mov	sp, r7
 800f88c:	bd80      	pop	{r7, pc}

0800f88e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f88e:	b580      	push	{r7, lr}
 800f890:	b08a      	sub	sp, #40	@ 0x28
 800f892:	af02      	add	r7, sp, #8
 800f894:	60f8      	str	r0, [r7, #12]
 800f896:	60b9      	str	r1, [r7, #8]
 800f898:	603b      	str	r3, [r7, #0]
 800f89a:	4613      	mov	r3, r2
 800f89c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f8a4:	2b20      	cmp	r3, #32
 800f8a6:	f040 80b5 	bne.w	800fa14 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800f8aa:	68bb      	ldr	r3, [r7, #8]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d002      	beq.n	800f8b6 <HAL_UART_Receive+0x28>
 800f8b0:	88fb      	ldrh	r3, [r7, #6]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d101      	bne.n	800f8ba <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800f8b6:	2301      	movs	r3, #1
 800f8b8:	e0ad      	b.n	800fa16 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	2200      	movs	r2, #0
 800f8be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	2222      	movs	r2, #34	@ 0x22
 800f8c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	2200      	movs	r2, #0
 800f8ce:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f8d0:	f7f4 fd8a 	bl	80043e8 <HAL_GetTick>
 800f8d4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	88fa      	ldrh	r2, [r7, #6]
 800f8da:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	88fa      	ldrh	r2, [r7, #6]
 800f8e2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	689b      	ldr	r3, [r3, #8]
 800f8ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f8ee:	d10e      	bne.n	800f90e <HAL_UART_Receive+0x80>
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	691b      	ldr	r3, [r3, #16]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d105      	bne.n	800f904 <HAL_UART_Receive+0x76>
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800f8fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f902:	e02d      	b.n	800f960 <HAL_UART_Receive+0xd2>
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	22ff      	movs	r2, #255	@ 0xff
 800f908:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f90c:	e028      	b.n	800f960 <HAL_UART_Receive+0xd2>
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	689b      	ldr	r3, [r3, #8]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d10d      	bne.n	800f932 <HAL_UART_Receive+0xa4>
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	691b      	ldr	r3, [r3, #16]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d104      	bne.n	800f928 <HAL_UART_Receive+0x9a>
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	22ff      	movs	r2, #255	@ 0xff
 800f922:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f926:	e01b      	b.n	800f960 <HAL_UART_Receive+0xd2>
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	227f      	movs	r2, #127	@ 0x7f
 800f92c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f930:	e016      	b.n	800f960 <HAL_UART_Receive+0xd2>
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	689b      	ldr	r3, [r3, #8]
 800f936:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f93a:	d10d      	bne.n	800f958 <HAL_UART_Receive+0xca>
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	691b      	ldr	r3, [r3, #16]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d104      	bne.n	800f94e <HAL_UART_Receive+0xc0>
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	227f      	movs	r2, #127	@ 0x7f
 800f948:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f94c:	e008      	b.n	800f960 <HAL_UART_Receive+0xd2>
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	223f      	movs	r2, #63	@ 0x3f
 800f952:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f956:	e003      	b.n	800f960 <HAL_UART_Receive+0xd2>
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	2200      	movs	r2, #0
 800f95c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f966:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	689b      	ldr	r3, [r3, #8]
 800f96c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f970:	d108      	bne.n	800f984 <HAL_UART_Receive+0xf6>
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	691b      	ldr	r3, [r3, #16]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d104      	bne.n	800f984 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800f97a:	2300      	movs	r3, #0
 800f97c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f97e:	68bb      	ldr	r3, [r7, #8]
 800f980:	61bb      	str	r3, [r7, #24]
 800f982:	e003      	b.n	800f98c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800f984:	68bb      	ldr	r3, [r7, #8]
 800f986:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f988:	2300      	movs	r3, #0
 800f98a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800f98c:	e036      	b.n	800f9fc <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	9300      	str	r3, [sp, #0]
 800f992:	697b      	ldr	r3, [r7, #20]
 800f994:	2200      	movs	r2, #0
 800f996:	2120      	movs	r1, #32
 800f998:	68f8      	ldr	r0, [r7, #12]
 800f99a:	f000 fff9 	bl	8010990 <UART_WaitOnFlagUntilTimeout>
 800f99e:	4603      	mov	r3, r0
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d005      	beq.n	800f9b0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	2220      	movs	r2, #32
 800f9a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800f9ac:	2303      	movs	r3, #3
 800f9ae:	e032      	b.n	800fa16 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800f9b0:	69fb      	ldr	r3, [r7, #28]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d10c      	bne.n	800f9d0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9bc:	b29a      	uxth	r2, r3
 800f9be:	8a7b      	ldrh	r3, [r7, #18]
 800f9c0:	4013      	ands	r3, r2
 800f9c2:	b29a      	uxth	r2, r3
 800f9c4:	69bb      	ldr	r3, [r7, #24]
 800f9c6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f9c8:	69bb      	ldr	r3, [r7, #24]
 800f9ca:	3302      	adds	r3, #2
 800f9cc:	61bb      	str	r3, [r7, #24]
 800f9ce:	e00c      	b.n	800f9ea <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9d6:	b2da      	uxtb	r2, r3
 800f9d8:	8a7b      	ldrh	r3, [r7, #18]
 800f9da:	b2db      	uxtb	r3, r3
 800f9dc:	4013      	ands	r3, r2
 800f9de:	b2da      	uxtb	r2, r3
 800f9e0:	69fb      	ldr	r3, [r7, #28]
 800f9e2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800f9e4:	69fb      	ldr	r3, [r7, #28]
 800f9e6:	3301      	adds	r3, #1
 800f9e8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f9f0:	b29b      	uxth	r3, r3
 800f9f2:	3b01      	subs	r3, #1
 800f9f4:	b29a      	uxth	r2, r3
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fa02:	b29b      	uxth	r3, r3
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d1c2      	bne.n	800f98e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	2220      	movs	r2, #32
 800fa0c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800fa10:	2300      	movs	r3, #0
 800fa12:	e000      	b.n	800fa16 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800fa14:	2302      	movs	r3, #2
  }
}
 800fa16:	4618      	mov	r0, r3
 800fa18:	3720      	adds	r7, #32
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	bd80      	pop	{r7, pc}
	...

0800fa20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fa20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fa24:	b092      	sub	sp, #72	@ 0x48
 800fa26:	af00      	add	r7, sp, #0
 800fa28:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fa30:	697b      	ldr	r3, [r7, #20]
 800fa32:	689a      	ldr	r2, [r3, #8]
 800fa34:	697b      	ldr	r3, [r7, #20]
 800fa36:	691b      	ldr	r3, [r3, #16]
 800fa38:	431a      	orrs	r2, r3
 800fa3a:	697b      	ldr	r3, [r7, #20]
 800fa3c:	695b      	ldr	r3, [r3, #20]
 800fa3e:	431a      	orrs	r2, r3
 800fa40:	697b      	ldr	r3, [r7, #20]
 800fa42:	69db      	ldr	r3, [r3, #28]
 800fa44:	4313      	orrs	r3, r2
 800fa46:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fa48:	697b      	ldr	r3, [r7, #20]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	681a      	ldr	r2, [r3, #0]
 800fa4e:	4bbe      	ldr	r3, [pc, #760]	@ (800fd48 <UART_SetConfig+0x328>)
 800fa50:	4013      	ands	r3, r2
 800fa52:	697a      	ldr	r2, [r7, #20]
 800fa54:	6812      	ldr	r2, [r2, #0]
 800fa56:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fa58:	430b      	orrs	r3, r1
 800fa5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fa5c:	697b      	ldr	r3, [r7, #20]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	685b      	ldr	r3, [r3, #4]
 800fa62:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800fa66:	697b      	ldr	r3, [r7, #20]
 800fa68:	68da      	ldr	r2, [r3, #12]
 800fa6a:	697b      	ldr	r3, [r7, #20]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	430a      	orrs	r2, r1
 800fa70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fa72:	697b      	ldr	r3, [r7, #20]
 800fa74:	699b      	ldr	r3, [r3, #24]
 800fa76:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fa78:	697b      	ldr	r3, [r7, #20]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	4ab3      	ldr	r2, [pc, #716]	@ (800fd4c <UART_SetConfig+0x32c>)
 800fa7e:	4293      	cmp	r3, r2
 800fa80:	d004      	beq.n	800fa8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fa82:	697b      	ldr	r3, [r7, #20]
 800fa84:	6a1b      	ldr	r3, [r3, #32]
 800fa86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fa88:	4313      	orrs	r3, r2
 800fa8a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fa8c:	697b      	ldr	r3, [r7, #20]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	689a      	ldr	r2, [r3, #8]
 800fa92:	4baf      	ldr	r3, [pc, #700]	@ (800fd50 <UART_SetConfig+0x330>)
 800fa94:	4013      	ands	r3, r2
 800fa96:	697a      	ldr	r2, [r7, #20]
 800fa98:	6812      	ldr	r2, [r2, #0]
 800fa9a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fa9c:	430b      	orrs	r3, r1
 800fa9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800faa0:	697b      	ldr	r3, [r7, #20]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800faa6:	f023 010f 	bic.w	r1, r3, #15
 800faaa:	697b      	ldr	r3, [r7, #20]
 800faac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800faae:	697b      	ldr	r3, [r7, #20]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	430a      	orrs	r2, r1
 800fab4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fab6:	697b      	ldr	r3, [r7, #20]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	4aa6      	ldr	r2, [pc, #664]	@ (800fd54 <UART_SetConfig+0x334>)
 800fabc:	4293      	cmp	r3, r2
 800fabe:	d177      	bne.n	800fbb0 <UART_SetConfig+0x190>
 800fac0:	4ba5      	ldr	r3, [pc, #660]	@ (800fd58 <UART_SetConfig+0x338>)
 800fac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fac4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fac8:	2b28      	cmp	r3, #40	@ 0x28
 800faca:	d86d      	bhi.n	800fba8 <UART_SetConfig+0x188>
 800facc:	a201      	add	r2, pc, #4	@ (adr r2, 800fad4 <UART_SetConfig+0xb4>)
 800face:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fad2:	bf00      	nop
 800fad4:	0800fb79 	.word	0x0800fb79
 800fad8:	0800fba9 	.word	0x0800fba9
 800fadc:	0800fba9 	.word	0x0800fba9
 800fae0:	0800fba9 	.word	0x0800fba9
 800fae4:	0800fba9 	.word	0x0800fba9
 800fae8:	0800fba9 	.word	0x0800fba9
 800faec:	0800fba9 	.word	0x0800fba9
 800faf0:	0800fba9 	.word	0x0800fba9
 800faf4:	0800fb81 	.word	0x0800fb81
 800faf8:	0800fba9 	.word	0x0800fba9
 800fafc:	0800fba9 	.word	0x0800fba9
 800fb00:	0800fba9 	.word	0x0800fba9
 800fb04:	0800fba9 	.word	0x0800fba9
 800fb08:	0800fba9 	.word	0x0800fba9
 800fb0c:	0800fba9 	.word	0x0800fba9
 800fb10:	0800fba9 	.word	0x0800fba9
 800fb14:	0800fb89 	.word	0x0800fb89
 800fb18:	0800fba9 	.word	0x0800fba9
 800fb1c:	0800fba9 	.word	0x0800fba9
 800fb20:	0800fba9 	.word	0x0800fba9
 800fb24:	0800fba9 	.word	0x0800fba9
 800fb28:	0800fba9 	.word	0x0800fba9
 800fb2c:	0800fba9 	.word	0x0800fba9
 800fb30:	0800fba9 	.word	0x0800fba9
 800fb34:	0800fb91 	.word	0x0800fb91
 800fb38:	0800fba9 	.word	0x0800fba9
 800fb3c:	0800fba9 	.word	0x0800fba9
 800fb40:	0800fba9 	.word	0x0800fba9
 800fb44:	0800fba9 	.word	0x0800fba9
 800fb48:	0800fba9 	.word	0x0800fba9
 800fb4c:	0800fba9 	.word	0x0800fba9
 800fb50:	0800fba9 	.word	0x0800fba9
 800fb54:	0800fb99 	.word	0x0800fb99
 800fb58:	0800fba9 	.word	0x0800fba9
 800fb5c:	0800fba9 	.word	0x0800fba9
 800fb60:	0800fba9 	.word	0x0800fba9
 800fb64:	0800fba9 	.word	0x0800fba9
 800fb68:	0800fba9 	.word	0x0800fba9
 800fb6c:	0800fba9 	.word	0x0800fba9
 800fb70:	0800fba9 	.word	0x0800fba9
 800fb74:	0800fba1 	.word	0x0800fba1
 800fb78:	2301      	movs	r3, #1
 800fb7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb7e:	e326      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fb80:	2304      	movs	r3, #4
 800fb82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb86:	e322      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fb88:	2308      	movs	r3, #8
 800fb8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb8e:	e31e      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fb90:	2310      	movs	r3, #16
 800fb92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb96:	e31a      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fb98:	2320      	movs	r3, #32
 800fb9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb9e:	e316      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fba0:	2340      	movs	r3, #64	@ 0x40
 800fba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fba6:	e312      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fba8:	2380      	movs	r3, #128	@ 0x80
 800fbaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbae:	e30e      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fbb0:	697b      	ldr	r3, [r7, #20]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	4a69      	ldr	r2, [pc, #420]	@ (800fd5c <UART_SetConfig+0x33c>)
 800fbb6:	4293      	cmp	r3, r2
 800fbb8:	d130      	bne.n	800fc1c <UART_SetConfig+0x1fc>
 800fbba:	4b67      	ldr	r3, [pc, #412]	@ (800fd58 <UART_SetConfig+0x338>)
 800fbbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fbbe:	f003 0307 	and.w	r3, r3, #7
 800fbc2:	2b05      	cmp	r3, #5
 800fbc4:	d826      	bhi.n	800fc14 <UART_SetConfig+0x1f4>
 800fbc6:	a201      	add	r2, pc, #4	@ (adr r2, 800fbcc <UART_SetConfig+0x1ac>)
 800fbc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbcc:	0800fbe5 	.word	0x0800fbe5
 800fbd0:	0800fbed 	.word	0x0800fbed
 800fbd4:	0800fbf5 	.word	0x0800fbf5
 800fbd8:	0800fbfd 	.word	0x0800fbfd
 800fbdc:	0800fc05 	.word	0x0800fc05
 800fbe0:	0800fc0d 	.word	0x0800fc0d
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbea:	e2f0      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fbec:	2304      	movs	r3, #4
 800fbee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbf2:	e2ec      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fbf4:	2308      	movs	r3, #8
 800fbf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbfa:	e2e8      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fbfc:	2310      	movs	r3, #16
 800fbfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc02:	e2e4      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fc04:	2320      	movs	r3, #32
 800fc06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc0a:	e2e0      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fc0c:	2340      	movs	r3, #64	@ 0x40
 800fc0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc12:	e2dc      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fc14:	2380      	movs	r3, #128	@ 0x80
 800fc16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc1a:	e2d8      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fc1c:	697b      	ldr	r3, [r7, #20]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	4a4f      	ldr	r2, [pc, #316]	@ (800fd60 <UART_SetConfig+0x340>)
 800fc22:	4293      	cmp	r3, r2
 800fc24:	d130      	bne.n	800fc88 <UART_SetConfig+0x268>
 800fc26:	4b4c      	ldr	r3, [pc, #304]	@ (800fd58 <UART_SetConfig+0x338>)
 800fc28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fc2a:	f003 0307 	and.w	r3, r3, #7
 800fc2e:	2b05      	cmp	r3, #5
 800fc30:	d826      	bhi.n	800fc80 <UART_SetConfig+0x260>
 800fc32:	a201      	add	r2, pc, #4	@ (adr r2, 800fc38 <UART_SetConfig+0x218>)
 800fc34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc38:	0800fc51 	.word	0x0800fc51
 800fc3c:	0800fc59 	.word	0x0800fc59
 800fc40:	0800fc61 	.word	0x0800fc61
 800fc44:	0800fc69 	.word	0x0800fc69
 800fc48:	0800fc71 	.word	0x0800fc71
 800fc4c:	0800fc79 	.word	0x0800fc79
 800fc50:	2300      	movs	r3, #0
 800fc52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc56:	e2ba      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fc58:	2304      	movs	r3, #4
 800fc5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc5e:	e2b6      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fc60:	2308      	movs	r3, #8
 800fc62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc66:	e2b2      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fc68:	2310      	movs	r3, #16
 800fc6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc6e:	e2ae      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fc70:	2320      	movs	r3, #32
 800fc72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc76:	e2aa      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fc78:	2340      	movs	r3, #64	@ 0x40
 800fc7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc7e:	e2a6      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fc80:	2380      	movs	r3, #128	@ 0x80
 800fc82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc86:	e2a2      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fc88:	697b      	ldr	r3, [r7, #20]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	4a35      	ldr	r2, [pc, #212]	@ (800fd64 <UART_SetConfig+0x344>)
 800fc8e:	4293      	cmp	r3, r2
 800fc90:	d130      	bne.n	800fcf4 <UART_SetConfig+0x2d4>
 800fc92:	4b31      	ldr	r3, [pc, #196]	@ (800fd58 <UART_SetConfig+0x338>)
 800fc94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fc96:	f003 0307 	and.w	r3, r3, #7
 800fc9a:	2b05      	cmp	r3, #5
 800fc9c:	d826      	bhi.n	800fcec <UART_SetConfig+0x2cc>
 800fc9e:	a201      	add	r2, pc, #4	@ (adr r2, 800fca4 <UART_SetConfig+0x284>)
 800fca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fca4:	0800fcbd 	.word	0x0800fcbd
 800fca8:	0800fcc5 	.word	0x0800fcc5
 800fcac:	0800fccd 	.word	0x0800fccd
 800fcb0:	0800fcd5 	.word	0x0800fcd5
 800fcb4:	0800fcdd 	.word	0x0800fcdd
 800fcb8:	0800fce5 	.word	0x0800fce5
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcc2:	e284      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fcc4:	2304      	movs	r3, #4
 800fcc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcca:	e280      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fccc:	2308      	movs	r3, #8
 800fcce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcd2:	e27c      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fcd4:	2310      	movs	r3, #16
 800fcd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcda:	e278      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fcdc:	2320      	movs	r3, #32
 800fcde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fce2:	e274      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fce4:	2340      	movs	r3, #64	@ 0x40
 800fce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcea:	e270      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fcec:	2380      	movs	r3, #128	@ 0x80
 800fcee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcf2:	e26c      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fcf4:	697b      	ldr	r3, [r7, #20]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	4a1b      	ldr	r2, [pc, #108]	@ (800fd68 <UART_SetConfig+0x348>)
 800fcfa:	4293      	cmp	r3, r2
 800fcfc:	d142      	bne.n	800fd84 <UART_SetConfig+0x364>
 800fcfe:	4b16      	ldr	r3, [pc, #88]	@ (800fd58 <UART_SetConfig+0x338>)
 800fd00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd02:	f003 0307 	and.w	r3, r3, #7
 800fd06:	2b05      	cmp	r3, #5
 800fd08:	d838      	bhi.n	800fd7c <UART_SetConfig+0x35c>
 800fd0a:	a201      	add	r2, pc, #4	@ (adr r2, 800fd10 <UART_SetConfig+0x2f0>)
 800fd0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd10:	0800fd29 	.word	0x0800fd29
 800fd14:	0800fd31 	.word	0x0800fd31
 800fd18:	0800fd39 	.word	0x0800fd39
 800fd1c:	0800fd41 	.word	0x0800fd41
 800fd20:	0800fd6d 	.word	0x0800fd6d
 800fd24:	0800fd75 	.word	0x0800fd75
 800fd28:	2300      	movs	r3, #0
 800fd2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd2e:	e24e      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fd30:	2304      	movs	r3, #4
 800fd32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd36:	e24a      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fd38:	2308      	movs	r3, #8
 800fd3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd3e:	e246      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fd40:	2310      	movs	r3, #16
 800fd42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd46:	e242      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fd48:	cfff69f3 	.word	0xcfff69f3
 800fd4c:	58000c00 	.word	0x58000c00
 800fd50:	11fff4ff 	.word	0x11fff4ff
 800fd54:	40011000 	.word	0x40011000
 800fd58:	58024400 	.word	0x58024400
 800fd5c:	40004400 	.word	0x40004400
 800fd60:	40004800 	.word	0x40004800
 800fd64:	40004c00 	.word	0x40004c00
 800fd68:	40005000 	.word	0x40005000
 800fd6c:	2320      	movs	r3, #32
 800fd6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd72:	e22c      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fd74:	2340      	movs	r3, #64	@ 0x40
 800fd76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd7a:	e228      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fd7c:	2380      	movs	r3, #128	@ 0x80
 800fd7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd82:	e224      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fd84:	697b      	ldr	r3, [r7, #20]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	4ab1      	ldr	r2, [pc, #708]	@ (8010050 <UART_SetConfig+0x630>)
 800fd8a:	4293      	cmp	r3, r2
 800fd8c:	d176      	bne.n	800fe7c <UART_SetConfig+0x45c>
 800fd8e:	4bb1      	ldr	r3, [pc, #708]	@ (8010054 <UART_SetConfig+0x634>)
 800fd90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fd96:	2b28      	cmp	r3, #40	@ 0x28
 800fd98:	d86c      	bhi.n	800fe74 <UART_SetConfig+0x454>
 800fd9a:	a201      	add	r2, pc, #4	@ (adr r2, 800fda0 <UART_SetConfig+0x380>)
 800fd9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fda0:	0800fe45 	.word	0x0800fe45
 800fda4:	0800fe75 	.word	0x0800fe75
 800fda8:	0800fe75 	.word	0x0800fe75
 800fdac:	0800fe75 	.word	0x0800fe75
 800fdb0:	0800fe75 	.word	0x0800fe75
 800fdb4:	0800fe75 	.word	0x0800fe75
 800fdb8:	0800fe75 	.word	0x0800fe75
 800fdbc:	0800fe75 	.word	0x0800fe75
 800fdc0:	0800fe4d 	.word	0x0800fe4d
 800fdc4:	0800fe75 	.word	0x0800fe75
 800fdc8:	0800fe75 	.word	0x0800fe75
 800fdcc:	0800fe75 	.word	0x0800fe75
 800fdd0:	0800fe75 	.word	0x0800fe75
 800fdd4:	0800fe75 	.word	0x0800fe75
 800fdd8:	0800fe75 	.word	0x0800fe75
 800fddc:	0800fe75 	.word	0x0800fe75
 800fde0:	0800fe55 	.word	0x0800fe55
 800fde4:	0800fe75 	.word	0x0800fe75
 800fde8:	0800fe75 	.word	0x0800fe75
 800fdec:	0800fe75 	.word	0x0800fe75
 800fdf0:	0800fe75 	.word	0x0800fe75
 800fdf4:	0800fe75 	.word	0x0800fe75
 800fdf8:	0800fe75 	.word	0x0800fe75
 800fdfc:	0800fe75 	.word	0x0800fe75
 800fe00:	0800fe5d 	.word	0x0800fe5d
 800fe04:	0800fe75 	.word	0x0800fe75
 800fe08:	0800fe75 	.word	0x0800fe75
 800fe0c:	0800fe75 	.word	0x0800fe75
 800fe10:	0800fe75 	.word	0x0800fe75
 800fe14:	0800fe75 	.word	0x0800fe75
 800fe18:	0800fe75 	.word	0x0800fe75
 800fe1c:	0800fe75 	.word	0x0800fe75
 800fe20:	0800fe65 	.word	0x0800fe65
 800fe24:	0800fe75 	.word	0x0800fe75
 800fe28:	0800fe75 	.word	0x0800fe75
 800fe2c:	0800fe75 	.word	0x0800fe75
 800fe30:	0800fe75 	.word	0x0800fe75
 800fe34:	0800fe75 	.word	0x0800fe75
 800fe38:	0800fe75 	.word	0x0800fe75
 800fe3c:	0800fe75 	.word	0x0800fe75
 800fe40:	0800fe6d 	.word	0x0800fe6d
 800fe44:	2301      	movs	r3, #1
 800fe46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe4a:	e1c0      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fe4c:	2304      	movs	r3, #4
 800fe4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe52:	e1bc      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fe54:	2308      	movs	r3, #8
 800fe56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe5a:	e1b8      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fe5c:	2310      	movs	r3, #16
 800fe5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe62:	e1b4      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fe64:	2320      	movs	r3, #32
 800fe66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe6a:	e1b0      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fe6c:	2340      	movs	r3, #64	@ 0x40
 800fe6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe72:	e1ac      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fe74:	2380      	movs	r3, #128	@ 0x80
 800fe76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe7a:	e1a8      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fe7c:	697b      	ldr	r3, [r7, #20]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	4a75      	ldr	r2, [pc, #468]	@ (8010058 <UART_SetConfig+0x638>)
 800fe82:	4293      	cmp	r3, r2
 800fe84:	d130      	bne.n	800fee8 <UART_SetConfig+0x4c8>
 800fe86:	4b73      	ldr	r3, [pc, #460]	@ (8010054 <UART_SetConfig+0x634>)
 800fe88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe8a:	f003 0307 	and.w	r3, r3, #7
 800fe8e:	2b05      	cmp	r3, #5
 800fe90:	d826      	bhi.n	800fee0 <UART_SetConfig+0x4c0>
 800fe92:	a201      	add	r2, pc, #4	@ (adr r2, 800fe98 <UART_SetConfig+0x478>)
 800fe94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe98:	0800feb1 	.word	0x0800feb1
 800fe9c:	0800feb9 	.word	0x0800feb9
 800fea0:	0800fec1 	.word	0x0800fec1
 800fea4:	0800fec9 	.word	0x0800fec9
 800fea8:	0800fed1 	.word	0x0800fed1
 800feac:	0800fed9 	.word	0x0800fed9
 800feb0:	2300      	movs	r3, #0
 800feb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800feb6:	e18a      	b.n	80101ce <UART_SetConfig+0x7ae>
 800feb8:	2304      	movs	r3, #4
 800feba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800febe:	e186      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fec0:	2308      	movs	r3, #8
 800fec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fec6:	e182      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fec8:	2310      	movs	r3, #16
 800feca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fece:	e17e      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fed0:	2320      	movs	r3, #32
 800fed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fed6:	e17a      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fed8:	2340      	movs	r3, #64	@ 0x40
 800feda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fede:	e176      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fee0:	2380      	movs	r3, #128	@ 0x80
 800fee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fee6:	e172      	b.n	80101ce <UART_SetConfig+0x7ae>
 800fee8:	697b      	ldr	r3, [r7, #20]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	4a5b      	ldr	r2, [pc, #364]	@ (801005c <UART_SetConfig+0x63c>)
 800feee:	4293      	cmp	r3, r2
 800fef0:	d130      	bne.n	800ff54 <UART_SetConfig+0x534>
 800fef2:	4b58      	ldr	r3, [pc, #352]	@ (8010054 <UART_SetConfig+0x634>)
 800fef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fef6:	f003 0307 	and.w	r3, r3, #7
 800fefa:	2b05      	cmp	r3, #5
 800fefc:	d826      	bhi.n	800ff4c <UART_SetConfig+0x52c>
 800fefe:	a201      	add	r2, pc, #4	@ (adr r2, 800ff04 <UART_SetConfig+0x4e4>)
 800ff00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff04:	0800ff1d 	.word	0x0800ff1d
 800ff08:	0800ff25 	.word	0x0800ff25
 800ff0c:	0800ff2d 	.word	0x0800ff2d
 800ff10:	0800ff35 	.word	0x0800ff35
 800ff14:	0800ff3d 	.word	0x0800ff3d
 800ff18:	0800ff45 	.word	0x0800ff45
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff22:	e154      	b.n	80101ce <UART_SetConfig+0x7ae>
 800ff24:	2304      	movs	r3, #4
 800ff26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff2a:	e150      	b.n	80101ce <UART_SetConfig+0x7ae>
 800ff2c:	2308      	movs	r3, #8
 800ff2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff32:	e14c      	b.n	80101ce <UART_SetConfig+0x7ae>
 800ff34:	2310      	movs	r3, #16
 800ff36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff3a:	e148      	b.n	80101ce <UART_SetConfig+0x7ae>
 800ff3c:	2320      	movs	r3, #32
 800ff3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff42:	e144      	b.n	80101ce <UART_SetConfig+0x7ae>
 800ff44:	2340      	movs	r3, #64	@ 0x40
 800ff46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff4a:	e140      	b.n	80101ce <UART_SetConfig+0x7ae>
 800ff4c:	2380      	movs	r3, #128	@ 0x80
 800ff4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff52:	e13c      	b.n	80101ce <UART_SetConfig+0x7ae>
 800ff54:	697b      	ldr	r3, [r7, #20]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	4a41      	ldr	r2, [pc, #260]	@ (8010060 <UART_SetConfig+0x640>)
 800ff5a:	4293      	cmp	r3, r2
 800ff5c:	f040 8082 	bne.w	8010064 <UART_SetConfig+0x644>
 800ff60:	4b3c      	ldr	r3, [pc, #240]	@ (8010054 <UART_SetConfig+0x634>)
 800ff62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ff64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ff68:	2b28      	cmp	r3, #40	@ 0x28
 800ff6a:	d86d      	bhi.n	8010048 <UART_SetConfig+0x628>
 800ff6c:	a201      	add	r2, pc, #4	@ (adr r2, 800ff74 <UART_SetConfig+0x554>)
 800ff6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff72:	bf00      	nop
 800ff74:	08010019 	.word	0x08010019
 800ff78:	08010049 	.word	0x08010049
 800ff7c:	08010049 	.word	0x08010049
 800ff80:	08010049 	.word	0x08010049
 800ff84:	08010049 	.word	0x08010049
 800ff88:	08010049 	.word	0x08010049
 800ff8c:	08010049 	.word	0x08010049
 800ff90:	08010049 	.word	0x08010049
 800ff94:	08010021 	.word	0x08010021
 800ff98:	08010049 	.word	0x08010049
 800ff9c:	08010049 	.word	0x08010049
 800ffa0:	08010049 	.word	0x08010049
 800ffa4:	08010049 	.word	0x08010049
 800ffa8:	08010049 	.word	0x08010049
 800ffac:	08010049 	.word	0x08010049
 800ffb0:	08010049 	.word	0x08010049
 800ffb4:	08010029 	.word	0x08010029
 800ffb8:	08010049 	.word	0x08010049
 800ffbc:	08010049 	.word	0x08010049
 800ffc0:	08010049 	.word	0x08010049
 800ffc4:	08010049 	.word	0x08010049
 800ffc8:	08010049 	.word	0x08010049
 800ffcc:	08010049 	.word	0x08010049
 800ffd0:	08010049 	.word	0x08010049
 800ffd4:	08010031 	.word	0x08010031
 800ffd8:	08010049 	.word	0x08010049
 800ffdc:	08010049 	.word	0x08010049
 800ffe0:	08010049 	.word	0x08010049
 800ffe4:	08010049 	.word	0x08010049
 800ffe8:	08010049 	.word	0x08010049
 800ffec:	08010049 	.word	0x08010049
 800fff0:	08010049 	.word	0x08010049
 800fff4:	08010039 	.word	0x08010039
 800fff8:	08010049 	.word	0x08010049
 800fffc:	08010049 	.word	0x08010049
 8010000:	08010049 	.word	0x08010049
 8010004:	08010049 	.word	0x08010049
 8010008:	08010049 	.word	0x08010049
 801000c:	08010049 	.word	0x08010049
 8010010:	08010049 	.word	0x08010049
 8010014:	08010041 	.word	0x08010041
 8010018:	2301      	movs	r3, #1
 801001a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801001e:	e0d6      	b.n	80101ce <UART_SetConfig+0x7ae>
 8010020:	2304      	movs	r3, #4
 8010022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010026:	e0d2      	b.n	80101ce <UART_SetConfig+0x7ae>
 8010028:	2308      	movs	r3, #8
 801002a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801002e:	e0ce      	b.n	80101ce <UART_SetConfig+0x7ae>
 8010030:	2310      	movs	r3, #16
 8010032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010036:	e0ca      	b.n	80101ce <UART_SetConfig+0x7ae>
 8010038:	2320      	movs	r3, #32
 801003a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801003e:	e0c6      	b.n	80101ce <UART_SetConfig+0x7ae>
 8010040:	2340      	movs	r3, #64	@ 0x40
 8010042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010046:	e0c2      	b.n	80101ce <UART_SetConfig+0x7ae>
 8010048:	2380      	movs	r3, #128	@ 0x80
 801004a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801004e:	e0be      	b.n	80101ce <UART_SetConfig+0x7ae>
 8010050:	40011400 	.word	0x40011400
 8010054:	58024400 	.word	0x58024400
 8010058:	40007800 	.word	0x40007800
 801005c:	40007c00 	.word	0x40007c00
 8010060:	40011800 	.word	0x40011800
 8010064:	697b      	ldr	r3, [r7, #20]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	4aad      	ldr	r2, [pc, #692]	@ (8010320 <UART_SetConfig+0x900>)
 801006a:	4293      	cmp	r3, r2
 801006c:	d176      	bne.n	801015c <UART_SetConfig+0x73c>
 801006e:	4bad      	ldr	r3, [pc, #692]	@ (8010324 <UART_SetConfig+0x904>)
 8010070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010072:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010076:	2b28      	cmp	r3, #40	@ 0x28
 8010078:	d86c      	bhi.n	8010154 <UART_SetConfig+0x734>
 801007a:	a201      	add	r2, pc, #4	@ (adr r2, 8010080 <UART_SetConfig+0x660>)
 801007c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010080:	08010125 	.word	0x08010125
 8010084:	08010155 	.word	0x08010155
 8010088:	08010155 	.word	0x08010155
 801008c:	08010155 	.word	0x08010155
 8010090:	08010155 	.word	0x08010155
 8010094:	08010155 	.word	0x08010155
 8010098:	08010155 	.word	0x08010155
 801009c:	08010155 	.word	0x08010155
 80100a0:	0801012d 	.word	0x0801012d
 80100a4:	08010155 	.word	0x08010155
 80100a8:	08010155 	.word	0x08010155
 80100ac:	08010155 	.word	0x08010155
 80100b0:	08010155 	.word	0x08010155
 80100b4:	08010155 	.word	0x08010155
 80100b8:	08010155 	.word	0x08010155
 80100bc:	08010155 	.word	0x08010155
 80100c0:	08010135 	.word	0x08010135
 80100c4:	08010155 	.word	0x08010155
 80100c8:	08010155 	.word	0x08010155
 80100cc:	08010155 	.word	0x08010155
 80100d0:	08010155 	.word	0x08010155
 80100d4:	08010155 	.word	0x08010155
 80100d8:	08010155 	.word	0x08010155
 80100dc:	08010155 	.word	0x08010155
 80100e0:	0801013d 	.word	0x0801013d
 80100e4:	08010155 	.word	0x08010155
 80100e8:	08010155 	.word	0x08010155
 80100ec:	08010155 	.word	0x08010155
 80100f0:	08010155 	.word	0x08010155
 80100f4:	08010155 	.word	0x08010155
 80100f8:	08010155 	.word	0x08010155
 80100fc:	08010155 	.word	0x08010155
 8010100:	08010145 	.word	0x08010145
 8010104:	08010155 	.word	0x08010155
 8010108:	08010155 	.word	0x08010155
 801010c:	08010155 	.word	0x08010155
 8010110:	08010155 	.word	0x08010155
 8010114:	08010155 	.word	0x08010155
 8010118:	08010155 	.word	0x08010155
 801011c:	08010155 	.word	0x08010155
 8010120:	0801014d 	.word	0x0801014d
 8010124:	2301      	movs	r3, #1
 8010126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801012a:	e050      	b.n	80101ce <UART_SetConfig+0x7ae>
 801012c:	2304      	movs	r3, #4
 801012e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010132:	e04c      	b.n	80101ce <UART_SetConfig+0x7ae>
 8010134:	2308      	movs	r3, #8
 8010136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801013a:	e048      	b.n	80101ce <UART_SetConfig+0x7ae>
 801013c:	2310      	movs	r3, #16
 801013e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010142:	e044      	b.n	80101ce <UART_SetConfig+0x7ae>
 8010144:	2320      	movs	r3, #32
 8010146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801014a:	e040      	b.n	80101ce <UART_SetConfig+0x7ae>
 801014c:	2340      	movs	r3, #64	@ 0x40
 801014e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010152:	e03c      	b.n	80101ce <UART_SetConfig+0x7ae>
 8010154:	2380      	movs	r3, #128	@ 0x80
 8010156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801015a:	e038      	b.n	80101ce <UART_SetConfig+0x7ae>
 801015c:	697b      	ldr	r3, [r7, #20]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	4a71      	ldr	r2, [pc, #452]	@ (8010328 <UART_SetConfig+0x908>)
 8010162:	4293      	cmp	r3, r2
 8010164:	d130      	bne.n	80101c8 <UART_SetConfig+0x7a8>
 8010166:	4b6f      	ldr	r3, [pc, #444]	@ (8010324 <UART_SetConfig+0x904>)
 8010168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801016a:	f003 0307 	and.w	r3, r3, #7
 801016e:	2b05      	cmp	r3, #5
 8010170:	d826      	bhi.n	80101c0 <UART_SetConfig+0x7a0>
 8010172:	a201      	add	r2, pc, #4	@ (adr r2, 8010178 <UART_SetConfig+0x758>)
 8010174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010178:	08010191 	.word	0x08010191
 801017c:	08010199 	.word	0x08010199
 8010180:	080101a1 	.word	0x080101a1
 8010184:	080101a9 	.word	0x080101a9
 8010188:	080101b1 	.word	0x080101b1
 801018c:	080101b9 	.word	0x080101b9
 8010190:	2302      	movs	r3, #2
 8010192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010196:	e01a      	b.n	80101ce <UART_SetConfig+0x7ae>
 8010198:	2304      	movs	r3, #4
 801019a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801019e:	e016      	b.n	80101ce <UART_SetConfig+0x7ae>
 80101a0:	2308      	movs	r3, #8
 80101a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80101a6:	e012      	b.n	80101ce <UART_SetConfig+0x7ae>
 80101a8:	2310      	movs	r3, #16
 80101aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80101ae:	e00e      	b.n	80101ce <UART_SetConfig+0x7ae>
 80101b0:	2320      	movs	r3, #32
 80101b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80101b6:	e00a      	b.n	80101ce <UART_SetConfig+0x7ae>
 80101b8:	2340      	movs	r3, #64	@ 0x40
 80101ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80101be:	e006      	b.n	80101ce <UART_SetConfig+0x7ae>
 80101c0:	2380      	movs	r3, #128	@ 0x80
 80101c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80101c6:	e002      	b.n	80101ce <UART_SetConfig+0x7ae>
 80101c8:	2380      	movs	r3, #128	@ 0x80
 80101ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80101ce:	697b      	ldr	r3, [r7, #20]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	4a55      	ldr	r2, [pc, #340]	@ (8010328 <UART_SetConfig+0x908>)
 80101d4:	4293      	cmp	r3, r2
 80101d6:	f040 80f8 	bne.w	80103ca <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80101da:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80101de:	2b20      	cmp	r3, #32
 80101e0:	dc46      	bgt.n	8010270 <UART_SetConfig+0x850>
 80101e2:	2b02      	cmp	r3, #2
 80101e4:	db75      	blt.n	80102d2 <UART_SetConfig+0x8b2>
 80101e6:	3b02      	subs	r3, #2
 80101e8:	2b1e      	cmp	r3, #30
 80101ea:	d872      	bhi.n	80102d2 <UART_SetConfig+0x8b2>
 80101ec:	a201      	add	r2, pc, #4	@ (adr r2, 80101f4 <UART_SetConfig+0x7d4>)
 80101ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101f2:	bf00      	nop
 80101f4:	08010277 	.word	0x08010277
 80101f8:	080102d3 	.word	0x080102d3
 80101fc:	0801027f 	.word	0x0801027f
 8010200:	080102d3 	.word	0x080102d3
 8010204:	080102d3 	.word	0x080102d3
 8010208:	080102d3 	.word	0x080102d3
 801020c:	0801028f 	.word	0x0801028f
 8010210:	080102d3 	.word	0x080102d3
 8010214:	080102d3 	.word	0x080102d3
 8010218:	080102d3 	.word	0x080102d3
 801021c:	080102d3 	.word	0x080102d3
 8010220:	080102d3 	.word	0x080102d3
 8010224:	080102d3 	.word	0x080102d3
 8010228:	080102d3 	.word	0x080102d3
 801022c:	0801029f 	.word	0x0801029f
 8010230:	080102d3 	.word	0x080102d3
 8010234:	080102d3 	.word	0x080102d3
 8010238:	080102d3 	.word	0x080102d3
 801023c:	080102d3 	.word	0x080102d3
 8010240:	080102d3 	.word	0x080102d3
 8010244:	080102d3 	.word	0x080102d3
 8010248:	080102d3 	.word	0x080102d3
 801024c:	080102d3 	.word	0x080102d3
 8010250:	080102d3 	.word	0x080102d3
 8010254:	080102d3 	.word	0x080102d3
 8010258:	080102d3 	.word	0x080102d3
 801025c:	080102d3 	.word	0x080102d3
 8010260:	080102d3 	.word	0x080102d3
 8010264:	080102d3 	.word	0x080102d3
 8010268:	080102d3 	.word	0x080102d3
 801026c:	080102c5 	.word	0x080102c5
 8010270:	2b40      	cmp	r3, #64	@ 0x40
 8010272:	d02a      	beq.n	80102ca <UART_SetConfig+0x8aa>
 8010274:	e02d      	b.n	80102d2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010276:	f7fd f93f 	bl	800d4f8 <HAL_RCCEx_GetD3PCLK1Freq>
 801027a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801027c:	e02f      	b.n	80102de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801027e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010282:	4618      	mov	r0, r3
 8010284:	f7fd f94e 	bl	800d524 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801028a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801028c:	e027      	b.n	80102de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801028e:	f107 0318 	add.w	r3, r7, #24
 8010292:	4618      	mov	r0, r3
 8010294:	f7fd fa9a 	bl	800d7cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010298:	69fb      	ldr	r3, [r7, #28]
 801029a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801029c:	e01f      	b.n	80102de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801029e:	4b21      	ldr	r3, [pc, #132]	@ (8010324 <UART_SetConfig+0x904>)
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	f003 0320 	and.w	r3, r3, #32
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d009      	beq.n	80102be <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80102aa:	4b1e      	ldr	r3, [pc, #120]	@ (8010324 <UART_SetConfig+0x904>)
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	08db      	lsrs	r3, r3, #3
 80102b0:	f003 0303 	and.w	r3, r3, #3
 80102b4:	4a1d      	ldr	r2, [pc, #116]	@ (801032c <UART_SetConfig+0x90c>)
 80102b6:	fa22 f303 	lsr.w	r3, r2, r3
 80102ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80102bc:	e00f      	b.n	80102de <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80102be:	4b1b      	ldr	r3, [pc, #108]	@ (801032c <UART_SetConfig+0x90c>)
 80102c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80102c2:	e00c      	b.n	80102de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80102c4:	4b1a      	ldr	r3, [pc, #104]	@ (8010330 <UART_SetConfig+0x910>)
 80102c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80102c8:	e009      	b.n	80102de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80102ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80102ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80102d0:	e005      	b.n	80102de <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80102d2:	2300      	movs	r3, #0
 80102d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80102d6:	2301      	movs	r3, #1
 80102d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80102dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80102de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	f000 81ee 	beq.w	80106c2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80102e6:	697b      	ldr	r3, [r7, #20]
 80102e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102ea:	4a12      	ldr	r2, [pc, #72]	@ (8010334 <UART_SetConfig+0x914>)
 80102ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80102f0:	461a      	mov	r2, r3
 80102f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80102f8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80102fa:	697b      	ldr	r3, [r7, #20]
 80102fc:	685a      	ldr	r2, [r3, #4]
 80102fe:	4613      	mov	r3, r2
 8010300:	005b      	lsls	r3, r3, #1
 8010302:	4413      	add	r3, r2
 8010304:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010306:	429a      	cmp	r2, r3
 8010308:	d305      	bcc.n	8010316 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801030a:	697b      	ldr	r3, [r7, #20]
 801030c:	685b      	ldr	r3, [r3, #4]
 801030e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010310:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010312:	429a      	cmp	r2, r3
 8010314:	d910      	bls.n	8010338 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8010316:	2301      	movs	r3, #1
 8010318:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801031c:	e1d1      	b.n	80106c2 <UART_SetConfig+0xca2>
 801031e:	bf00      	nop
 8010320:	40011c00 	.word	0x40011c00
 8010324:	58024400 	.word	0x58024400
 8010328:	58000c00 	.word	0x58000c00
 801032c:	03d09000 	.word	0x03d09000
 8010330:	003d0900 	.word	0x003d0900
 8010334:	080143d0 	.word	0x080143d0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010338:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801033a:	2200      	movs	r2, #0
 801033c:	60bb      	str	r3, [r7, #8]
 801033e:	60fa      	str	r2, [r7, #12]
 8010340:	697b      	ldr	r3, [r7, #20]
 8010342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010344:	4ac0      	ldr	r2, [pc, #768]	@ (8010648 <UART_SetConfig+0xc28>)
 8010346:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801034a:	b29b      	uxth	r3, r3
 801034c:	2200      	movs	r2, #0
 801034e:	603b      	str	r3, [r7, #0]
 8010350:	607a      	str	r2, [r7, #4]
 8010352:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010356:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801035a:	f7f0 f831 	bl	80003c0 <__aeabi_uldivmod>
 801035e:	4602      	mov	r2, r0
 8010360:	460b      	mov	r3, r1
 8010362:	4610      	mov	r0, r2
 8010364:	4619      	mov	r1, r3
 8010366:	f04f 0200 	mov.w	r2, #0
 801036a:	f04f 0300 	mov.w	r3, #0
 801036e:	020b      	lsls	r3, r1, #8
 8010370:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010374:	0202      	lsls	r2, r0, #8
 8010376:	6979      	ldr	r1, [r7, #20]
 8010378:	6849      	ldr	r1, [r1, #4]
 801037a:	0849      	lsrs	r1, r1, #1
 801037c:	2000      	movs	r0, #0
 801037e:	460c      	mov	r4, r1
 8010380:	4605      	mov	r5, r0
 8010382:	eb12 0804 	adds.w	r8, r2, r4
 8010386:	eb43 0905 	adc.w	r9, r3, r5
 801038a:	697b      	ldr	r3, [r7, #20]
 801038c:	685b      	ldr	r3, [r3, #4]
 801038e:	2200      	movs	r2, #0
 8010390:	469a      	mov	sl, r3
 8010392:	4693      	mov	fp, r2
 8010394:	4652      	mov	r2, sl
 8010396:	465b      	mov	r3, fp
 8010398:	4640      	mov	r0, r8
 801039a:	4649      	mov	r1, r9
 801039c:	f7f0 f810 	bl	80003c0 <__aeabi_uldivmod>
 80103a0:	4602      	mov	r2, r0
 80103a2:	460b      	mov	r3, r1
 80103a4:	4613      	mov	r3, r2
 80103a6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80103a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80103ae:	d308      	bcc.n	80103c2 <UART_SetConfig+0x9a2>
 80103b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80103b6:	d204      	bcs.n	80103c2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80103b8:	697b      	ldr	r3, [r7, #20]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80103be:	60da      	str	r2, [r3, #12]
 80103c0:	e17f      	b.n	80106c2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80103c2:	2301      	movs	r3, #1
 80103c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80103c8:	e17b      	b.n	80106c2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80103ca:	697b      	ldr	r3, [r7, #20]
 80103cc:	69db      	ldr	r3, [r3, #28]
 80103ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80103d2:	f040 80bd 	bne.w	8010550 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80103d6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80103da:	2b20      	cmp	r3, #32
 80103dc:	dc48      	bgt.n	8010470 <UART_SetConfig+0xa50>
 80103de:	2b00      	cmp	r3, #0
 80103e0:	db7b      	blt.n	80104da <UART_SetConfig+0xaba>
 80103e2:	2b20      	cmp	r3, #32
 80103e4:	d879      	bhi.n	80104da <UART_SetConfig+0xaba>
 80103e6:	a201      	add	r2, pc, #4	@ (adr r2, 80103ec <UART_SetConfig+0x9cc>)
 80103e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103ec:	08010477 	.word	0x08010477
 80103f0:	0801047f 	.word	0x0801047f
 80103f4:	080104db 	.word	0x080104db
 80103f8:	080104db 	.word	0x080104db
 80103fc:	08010487 	.word	0x08010487
 8010400:	080104db 	.word	0x080104db
 8010404:	080104db 	.word	0x080104db
 8010408:	080104db 	.word	0x080104db
 801040c:	08010497 	.word	0x08010497
 8010410:	080104db 	.word	0x080104db
 8010414:	080104db 	.word	0x080104db
 8010418:	080104db 	.word	0x080104db
 801041c:	080104db 	.word	0x080104db
 8010420:	080104db 	.word	0x080104db
 8010424:	080104db 	.word	0x080104db
 8010428:	080104db 	.word	0x080104db
 801042c:	080104a7 	.word	0x080104a7
 8010430:	080104db 	.word	0x080104db
 8010434:	080104db 	.word	0x080104db
 8010438:	080104db 	.word	0x080104db
 801043c:	080104db 	.word	0x080104db
 8010440:	080104db 	.word	0x080104db
 8010444:	080104db 	.word	0x080104db
 8010448:	080104db 	.word	0x080104db
 801044c:	080104db 	.word	0x080104db
 8010450:	080104db 	.word	0x080104db
 8010454:	080104db 	.word	0x080104db
 8010458:	080104db 	.word	0x080104db
 801045c:	080104db 	.word	0x080104db
 8010460:	080104db 	.word	0x080104db
 8010464:	080104db 	.word	0x080104db
 8010468:	080104db 	.word	0x080104db
 801046c:	080104cd 	.word	0x080104cd
 8010470:	2b40      	cmp	r3, #64	@ 0x40
 8010472:	d02e      	beq.n	80104d2 <UART_SetConfig+0xab2>
 8010474:	e031      	b.n	80104da <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010476:	f7fb f9a1 	bl	800b7bc <HAL_RCC_GetPCLK1Freq>
 801047a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801047c:	e033      	b.n	80104e6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801047e:	f7fb f9b3 	bl	800b7e8 <HAL_RCC_GetPCLK2Freq>
 8010482:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010484:	e02f      	b.n	80104e6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010486:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801048a:	4618      	mov	r0, r3
 801048c:	f7fd f84a 	bl	800d524 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010494:	e027      	b.n	80104e6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010496:	f107 0318 	add.w	r3, r7, #24
 801049a:	4618      	mov	r0, r3
 801049c:	f7fd f996 	bl	800d7cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80104a0:	69fb      	ldr	r3, [r7, #28]
 80104a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80104a4:	e01f      	b.n	80104e6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80104a6:	4b69      	ldr	r3, [pc, #420]	@ (801064c <UART_SetConfig+0xc2c>)
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	f003 0320 	and.w	r3, r3, #32
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d009      	beq.n	80104c6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80104b2:	4b66      	ldr	r3, [pc, #408]	@ (801064c <UART_SetConfig+0xc2c>)
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	08db      	lsrs	r3, r3, #3
 80104b8:	f003 0303 	and.w	r3, r3, #3
 80104bc:	4a64      	ldr	r2, [pc, #400]	@ (8010650 <UART_SetConfig+0xc30>)
 80104be:	fa22 f303 	lsr.w	r3, r2, r3
 80104c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80104c4:	e00f      	b.n	80104e6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80104c6:	4b62      	ldr	r3, [pc, #392]	@ (8010650 <UART_SetConfig+0xc30>)
 80104c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80104ca:	e00c      	b.n	80104e6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80104cc:	4b61      	ldr	r3, [pc, #388]	@ (8010654 <UART_SetConfig+0xc34>)
 80104ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80104d0:	e009      	b.n	80104e6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80104d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80104d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80104d8:	e005      	b.n	80104e6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80104da:	2300      	movs	r3, #0
 80104dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80104de:	2301      	movs	r3, #1
 80104e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80104e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80104e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	f000 80ea 	beq.w	80106c2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80104ee:	697b      	ldr	r3, [r7, #20]
 80104f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104f2:	4a55      	ldr	r2, [pc, #340]	@ (8010648 <UART_SetConfig+0xc28>)
 80104f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80104f8:	461a      	mov	r2, r3
 80104fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8010500:	005a      	lsls	r2, r3, #1
 8010502:	697b      	ldr	r3, [r7, #20]
 8010504:	685b      	ldr	r3, [r3, #4]
 8010506:	085b      	lsrs	r3, r3, #1
 8010508:	441a      	add	r2, r3
 801050a:	697b      	ldr	r3, [r7, #20]
 801050c:	685b      	ldr	r3, [r3, #4]
 801050e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010512:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010516:	2b0f      	cmp	r3, #15
 8010518:	d916      	bls.n	8010548 <UART_SetConfig+0xb28>
 801051a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801051c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010520:	d212      	bcs.n	8010548 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010524:	b29b      	uxth	r3, r3
 8010526:	f023 030f 	bic.w	r3, r3, #15
 801052a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801052c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801052e:	085b      	lsrs	r3, r3, #1
 8010530:	b29b      	uxth	r3, r3
 8010532:	f003 0307 	and.w	r3, r3, #7
 8010536:	b29a      	uxth	r2, r3
 8010538:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801053a:	4313      	orrs	r3, r2
 801053c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 801053e:	697b      	ldr	r3, [r7, #20]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010544:	60da      	str	r2, [r3, #12]
 8010546:	e0bc      	b.n	80106c2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8010548:	2301      	movs	r3, #1
 801054a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801054e:	e0b8      	b.n	80106c2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010550:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010554:	2b20      	cmp	r3, #32
 8010556:	dc4b      	bgt.n	80105f0 <UART_SetConfig+0xbd0>
 8010558:	2b00      	cmp	r3, #0
 801055a:	f2c0 8087 	blt.w	801066c <UART_SetConfig+0xc4c>
 801055e:	2b20      	cmp	r3, #32
 8010560:	f200 8084 	bhi.w	801066c <UART_SetConfig+0xc4c>
 8010564:	a201      	add	r2, pc, #4	@ (adr r2, 801056c <UART_SetConfig+0xb4c>)
 8010566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801056a:	bf00      	nop
 801056c:	080105f7 	.word	0x080105f7
 8010570:	080105ff 	.word	0x080105ff
 8010574:	0801066d 	.word	0x0801066d
 8010578:	0801066d 	.word	0x0801066d
 801057c:	08010607 	.word	0x08010607
 8010580:	0801066d 	.word	0x0801066d
 8010584:	0801066d 	.word	0x0801066d
 8010588:	0801066d 	.word	0x0801066d
 801058c:	08010617 	.word	0x08010617
 8010590:	0801066d 	.word	0x0801066d
 8010594:	0801066d 	.word	0x0801066d
 8010598:	0801066d 	.word	0x0801066d
 801059c:	0801066d 	.word	0x0801066d
 80105a0:	0801066d 	.word	0x0801066d
 80105a4:	0801066d 	.word	0x0801066d
 80105a8:	0801066d 	.word	0x0801066d
 80105ac:	08010627 	.word	0x08010627
 80105b0:	0801066d 	.word	0x0801066d
 80105b4:	0801066d 	.word	0x0801066d
 80105b8:	0801066d 	.word	0x0801066d
 80105bc:	0801066d 	.word	0x0801066d
 80105c0:	0801066d 	.word	0x0801066d
 80105c4:	0801066d 	.word	0x0801066d
 80105c8:	0801066d 	.word	0x0801066d
 80105cc:	0801066d 	.word	0x0801066d
 80105d0:	0801066d 	.word	0x0801066d
 80105d4:	0801066d 	.word	0x0801066d
 80105d8:	0801066d 	.word	0x0801066d
 80105dc:	0801066d 	.word	0x0801066d
 80105e0:	0801066d 	.word	0x0801066d
 80105e4:	0801066d 	.word	0x0801066d
 80105e8:	0801066d 	.word	0x0801066d
 80105ec:	0801065f 	.word	0x0801065f
 80105f0:	2b40      	cmp	r3, #64	@ 0x40
 80105f2:	d037      	beq.n	8010664 <UART_SetConfig+0xc44>
 80105f4:	e03a      	b.n	801066c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80105f6:	f7fb f8e1 	bl	800b7bc <HAL_RCC_GetPCLK1Freq>
 80105fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80105fc:	e03c      	b.n	8010678 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80105fe:	f7fb f8f3 	bl	800b7e8 <HAL_RCC_GetPCLK2Freq>
 8010602:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010604:	e038      	b.n	8010678 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010606:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801060a:	4618      	mov	r0, r3
 801060c:	f7fc ff8a 	bl	800d524 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010614:	e030      	b.n	8010678 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010616:	f107 0318 	add.w	r3, r7, #24
 801061a:	4618      	mov	r0, r3
 801061c:	f7fd f8d6 	bl	800d7cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010620:	69fb      	ldr	r3, [r7, #28]
 8010622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010624:	e028      	b.n	8010678 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010626:	4b09      	ldr	r3, [pc, #36]	@ (801064c <UART_SetConfig+0xc2c>)
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	f003 0320 	and.w	r3, r3, #32
 801062e:	2b00      	cmp	r3, #0
 8010630:	d012      	beq.n	8010658 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010632:	4b06      	ldr	r3, [pc, #24]	@ (801064c <UART_SetConfig+0xc2c>)
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	08db      	lsrs	r3, r3, #3
 8010638:	f003 0303 	and.w	r3, r3, #3
 801063c:	4a04      	ldr	r2, [pc, #16]	@ (8010650 <UART_SetConfig+0xc30>)
 801063e:	fa22 f303 	lsr.w	r3, r2, r3
 8010642:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010644:	e018      	b.n	8010678 <UART_SetConfig+0xc58>
 8010646:	bf00      	nop
 8010648:	080143d0 	.word	0x080143d0
 801064c:	58024400 	.word	0x58024400
 8010650:	03d09000 	.word	0x03d09000
 8010654:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8010658:	4b24      	ldr	r3, [pc, #144]	@ (80106ec <UART_SetConfig+0xccc>)
 801065a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801065c:	e00c      	b.n	8010678 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801065e:	4b24      	ldr	r3, [pc, #144]	@ (80106f0 <UART_SetConfig+0xcd0>)
 8010660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010662:	e009      	b.n	8010678 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010664:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801066a:	e005      	b.n	8010678 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 801066c:	2300      	movs	r3, #0
 801066e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010670:	2301      	movs	r3, #1
 8010672:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010676:	bf00      	nop
    }

    if (pclk != 0U)
 8010678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801067a:	2b00      	cmp	r3, #0
 801067c:	d021      	beq.n	80106c2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801067e:	697b      	ldr	r3, [r7, #20]
 8010680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010682:	4a1c      	ldr	r2, [pc, #112]	@ (80106f4 <UART_SetConfig+0xcd4>)
 8010684:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010688:	461a      	mov	r2, r3
 801068a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801068c:	fbb3 f2f2 	udiv	r2, r3, r2
 8010690:	697b      	ldr	r3, [r7, #20]
 8010692:	685b      	ldr	r3, [r3, #4]
 8010694:	085b      	lsrs	r3, r3, #1
 8010696:	441a      	add	r2, r3
 8010698:	697b      	ldr	r3, [r7, #20]
 801069a:	685b      	ldr	r3, [r3, #4]
 801069c:	fbb2 f3f3 	udiv	r3, r2, r3
 80106a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80106a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106a4:	2b0f      	cmp	r3, #15
 80106a6:	d909      	bls.n	80106bc <UART_SetConfig+0xc9c>
 80106a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80106ae:	d205      	bcs.n	80106bc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80106b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106b2:	b29a      	uxth	r2, r3
 80106b4:	697b      	ldr	r3, [r7, #20]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	60da      	str	r2, [r3, #12]
 80106ba:	e002      	b.n	80106c2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80106bc:	2301      	movs	r3, #1
 80106be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80106c2:	697b      	ldr	r3, [r7, #20]
 80106c4:	2201      	movs	r2, #1
 80106c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80106ca:	697b      	ldr	r3, [r7, #20]
 80106cc:	2201      	movs	r2, #1
 80106ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80106d2:	697b      	ldr	r3, [r7, #20]
 80106d4:	2200      	movs	r2, #0
 80106d6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80106d8:	697b      	ldr	r3, [r7, #20]
 80106da:	2200      	movs	r2, #0
 80106dc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80106de:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80106e2:	4618      	mov	r0, r3
 80106e4:	3748      	adds	r7, #72	@ 0x48
 80106e6:	46bd      	mov	sp, r7
 80106e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80106ec:	03d09000 	.word	0x03d09000
 80106f0:	003d0900 	.word	0x003d0900
 80106f4:	080143d0 	.word	0x080143d0

080106f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80106f8:	b480      	push	{r7}
 80106fa:	b083      	sub	sp, #12
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010704:	f003 0301 	and.w	r3, r3, #1
 8010708:	2b00      	cmp	r3, #0
 801070a:	d00a      	beq.n	8010722 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	685b      	ldr	r3, [r3, #4]
 8010712:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	430a      	orrs	r2, r1
 8010720:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010726:	f003 0302 	and.w	r3, r3, #2
 801072a:	2b00      	cmp	r3, #0
 801072c:	d00a      	beq.n	8010744 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	685b      	ldr	r3, [r3, #4]
 8010734:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	430a      	orrs	r2, r1
 8010742:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010748:	f003 0304 	and.w	r3, r3, #4
 801074c:	2b00      	cmp	r3, #0
 801074e:	d00a      	beq.n	8010766 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	685b      	ldr	r3, [r3, #4]
 8010756:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	430a      	orrs	r2, r1
 8010764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801076a:	f003 0308 	and.w	r3, r3, #8
 801076e:	2b00      	cmp	r3, #0
 8010770:	d00a      	beq.n	8010788 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	685b      	ldr	r3, [r3, #4]
 8010778:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	430a      	orrs	r2, r1
 8010786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801078c:	f003 0310 	and.w	r3, r3, #16
 8010790:	2b00      	cmp	r3, #0
 8010792:	d00a      	beq.n	80107aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	689b      	ldr	r3, [r3, #8]
 801079a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	430a      	orrs	r2, r1
 80107a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80107ae:	f003 0320 	and.w	r3, r3, #32
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d00a      	beq.n	80107cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	689b      	ldr	r3, [r3, #8]
 80107bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	430a      	orrs	r2, r1
 80107ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80107d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d01a      	beq.n	801080e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	685b      	ldr	r3, [r3, #4]
 80107de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	430a      	orrs	r2, r1
 80107ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80107f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80107f6:	d10a      	bne.n	801080e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	685b      	ldr	r3, [r3, #4]
 80107fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	430a      	orrs	r2, r1
 801080c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010816:	2b00      	cmp	r3, #0
 8010818:	d00a      	beq.n	8010830 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	685b      	ldr	r3, [r3, #4]
 8010820:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	430a      	orrs	r2, r1
 801082e:	605a      	str	r2, [r3, #4]
  }
}
 8010830:	bf00      	nop
 8010832:	370c      	adds	r7, #12
 8010834:	46bd      	mov	sp, r7
 8010836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083a:	4770      	bx	lr

0801083c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801083c:	b580      	push	{r7, lr}
 801083e:	b098      	sub	sp, #96	@ 0x60
 8010840:	af02      	add	r7, sp, #8
 8010842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	2200      	movs	r2, #0
 8010848:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801084c:	f7f3 fdcc 	bl	80043e8 <HAL_GetTick>
 8010850:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	f003 0308 	and.w	r3, r3, #8
 801085c:	2b08      	cmp	r3, #8
 801085e:	d12f      	bne.n	80108c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010860:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010864:	9300      	str	r3, [sp, #0]
 8010866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010868:	2200      	movs	r2, #0
 801086a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801086e:	6878      	ldr	r0, [r7, #4]
 8010870:	f000 f88e 	bl	8010990 <UART_WaitOnFlagUntilTimeout>
 8010874:	4603      	mov	r3, r0
 8010876:	2b00      	cmp	r3, #0
 8010878:	d022      	beq.n	80108c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010882:	e853 3f00 	ldrex	r3, [r3]
 8010886:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801088a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801088e:	653b      	str	r3, [r7, #80]	@ 0x50
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	461a      	mov	r2, r3
 8010896:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010898:	647b      	str	r3, [r7, #68]	@ 0x44
 801089a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801089c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801089e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80108a0:	e841 2300 	strex	r3, r2, [r1]
 80108a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80108a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d1e6      	bne.n	801087a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	2220      	movs	r2, #32
 80108b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	2200      	movs	r2, #0
 80108b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80108bc:	2303      	movs	r3, #3
 80108be:	e063      	b.n	8010988 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	f003 0304 	and.w	r3, r3, #4
 80108ca:	2b04      	cmp	r3, #4
 80108cc:	d149      	bne.n	8010962 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80108ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80108d2:	9300      	str	r3, [sp, #0]
 80108d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80108d6:	2200      	movs	r2, #0
 80108d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80108dc:	6878      	ldr	r0, [r7, #4]
 80108de:	f000 f857 	bl	8010990 <UART_WaitOnFlagUntilTimeout>
 80108e2:	4603      	mov	r3, r0
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d03c      	beq.n	8010962 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108f0:	e853 3f00 	ldrex	r3, [r3]
 80108f4:	623b      	str	r3, [r7, #32]
   return(result);
 80108f6:	6a3b      	ldr	r3, [r7, #32]
 80108f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80108fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	461a      	mov	r2, r3
 8010904:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010906:	633b      	str	r3, [r7, #48]	@ 0x30
 8010908:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801090a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801090c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801090e:	e841 2300 	strex	r3, r2, [r1]
 8010912:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010916:	2b00      	cmp	r3, #0
 8010918:	d1e6      	bne.n	80108e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	3308      	adds	r3, #8
 8010920:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010922:	693b      	ldr	r3, [r7, #16]
 8010924:	e853 3f00 	ldrex	r3, [r3]
 8010928:	60fb      	str	r3, [r7, #12]
   return(result);
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	f023 0301 	bic.w	r3, r3, #1
 8010930:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	3308      	adds	r3, #8
 8010938:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801093a:	61fa      	str	r2, [r7, #28]
 801093c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801093e:	69b9      	ldr	r1, [r7, #24]
 8010940:	69fa      	ldr	r2, [r7, #28]
 8010942:	e841 2300 	strex	r3, r2, [r1]
 8010946:	617b      	str	r3, [r7, #20]
   return(result);
 8010948:	697b      	ldr	r3, [r7, #20]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d1e5      	bne.n	801091a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	2220      	movs	r2, #32
 8010952:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	2200      	movs	r2, #0
 801095a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801095e:	2303      	movs	r3, #3
 8010960:	e012      	b.n	8010988 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	2220      	movs	r2, #32
 8010966:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	2220      	movs	r2, #32
 801096e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	2200      	movs	r2, #0
 8010976:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	2200      	movs	r2, #0
 801097c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	2200      	movs	r2, #0
 8010982:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010986:	2300      	movs	r3, #0
}
 8010988:	4618      	mov	r0, r3
 801098a:	3758      	adds	r7, #88	@ 0x58
 801098c:	46bd      	mov	sp, r7
 801098e:	bd80      	pop	{r7, pc}

08010990 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b084      	sub	sp, #16
 8010994:	af00      	add	r7, sp, #0
 8010996:	60f8      	str	r0, [r7, #12]
 8010998:	60b9      	str	r1, [r7, #8]
 801099a:	603b      	str	r3, [r7, #0]
 801099c:	4613      	mov	r3, r2
 801099e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80109a0:	e049      	b.n	8010a36 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80109a2:	69bb      	ldr	r3, [r7, #24]
 80109a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80109a8:	d045      	beq.n	8010a36 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80109aa:	f7f3 fd1d 	bl	80043e8 <HAL_GetTick>
 80109ae:	4602      	mov	r2, r0
 80109b0:	683b      	ldr	r3, [r7, #0]
 80109b2:	1ad3      	subs	r3, r2, r3
 80109b4:	69ba      	ldr	r2, [r7, #24]
 80109b6:	429a      	cmp	r2, r3
 80109b8:	d302      	bcc.n	80109c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80109ba:	69bb      	ldr	r3, [r7, #24]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d101      	bne.n	80109c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80109c0:	2303      	movs	r3, #3
 80109c2:	e048      	b.n	8010a56 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	f003 0304 	and.w	r3, r3, #4
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d031      	beq.n	8010a36 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	69db      	ldr	r3, [r3, #28]
 80109d8:	f003 0308 	and.w	r3, r3, #8
 80109dc:	2b08      	cmp	r3, #8
 80109de:	d110      	bne.n	8010a02 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	2208      	movs	r2, #8
 80109e6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80109e8:	68f8      	ldr	r0, [r7, #12]
 80109ea:	f000 f839 	bl	8010a60 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	2208      	movs	r2, #8
 80109f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	2200      	movs	r2, #0
 80109fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 80109fe:	2301      	movs	r3, #1
 8010a00:	e029      	b.n	8010a56 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	69db      	ldr	r3, [r3, #28]
 8010a08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010a0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010a10:	d111      	bne.n	8010a36 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010a1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010a1c:	68f8      	ldr	r0, [r7, #12]
 8010a1e:	f000 f81f 	bl	8010a60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	2220      	movs	r2, #32
 8010a26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	2200      	movs	r2, #0
 8010a2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010a32:	2303      	movs	r3, #3
 8010a34:	e00f      	b.n	8010a56 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	69da      	ldr	r2, [r3, #28]
 8010a3c:	68bb      	ldr	r3, [r7, #8]
 8010a3e:	4013      	ands	r3, r2
 8010a40:	68ba      	ldr	r2, [r7, #8]
 8010a42:	429a      	cmp	r2, r3
 8010a44:	bf0c      	ite	eq
 8010a46:	2301      	moveq	r3, #1
 8010a48:	2300      	movne	r3, #0
 8010a4a:	b2db      	uxtb	r3, r3
 8010a4c:	461a      	mov	r2, r3
 8010a4e:	79fb      	ldrb	r3, [r7, #7]
 8010a50:	429a      	cmp	r2, r3
 8010a52:	d0a6      	beq.n	80109a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010a54:	2300      	movs	r3, #0
}
 8010a56:	4618      	mov	r0, r3
 8010a58:	3710      	adds	r7, #16
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	bd80      	pop	{r7, pc}
	...

08010a60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010a60:	b480      	push	{r7}
 8010a62:	b095      	sub	sp, #84	@ 0x54
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a70:	e853 3f00 	ldrex	r3, [r3]
 8010a74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010a7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	461a      	mov	r2, r3
 8010a84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a86:	643b      	str	r3, [r7, #64]	@ 0x40
 8010a88:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010a8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010a8e:	e841 2300 	strex	r3, r2, [r1]
 8010a92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d1e6      	bne.n	8010a68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	3308      	adds	r3, #8
 8010aa0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010aa2:	6a3b      	ldr	r3, [r7, #32]
 8010aa4:	e853 3f00 	ldrex	r3, [r3]
 8010aa8:	61fb      	str	r3, [r7, #28]
   return(result);
 8010aaa:	69fa      	ldr	r2, [r7, #28]
 8010aac:	4b1e      	ldr	r3, [pc, #120]	@ (8010b28 <UART_EndRxTransfer+0xc8>)
 8010aae:	4013      	ands	r3, r2
 8010ab0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	3308      	adds	r3, #8
 8010ab8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010aba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010abc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010abe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010ac0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010ac2:	e841 2300 	strex	r3, r2, [r1]
 8010ac6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d1e5      	bne.n	8010a9a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ad2:	2b01      	cmp	r3, #1
 8010ad4:	d118      	bne.n	8010b08 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	e853 3f00 	ldrex	r3, [r3]
 8010ae2:	60bb      	str	r3, [r7, #8]
   return(result);
 8010ae4:	68bb      	ldr	r3, [r7, #8]
 8010ae6:	f023 0310 	bic.w	r3, r3, #16
 8010aea:	647b      	str	r3, [r7, #68]	@ 0x44
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	461a      	mov	r2, r3
 8010af2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010af4:	61bb      	str	r3, [r7, #24]
 8010af6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010af8:	6979      	ldr	r1, [r7, #20]
 8010afa:	69ba      	ldr	r2, [r7, #24]
 8010afc:	e841 2300 	strex	r3, r2, [r1]
 8010b00:	613b      	str	r3, [r7, #16]
   return(result);
 8010b02:	693b      	ldr	r3, [r7, #16]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d1e6      	bne.n	8010ad6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	2220      	movs	r2, #32
 8010b0c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	2200      	movs	r2, #0
 8010b14:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	2200      	movs	r2, #0
 8010b1a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010b1c:	bf00      	nop
 8010b1e:	3754      	adds	r7, #84	@ 0x54
 8010b20:	46bd      	mov	sp, r7
 8010b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b26:	4770      	bx	lr
 8010b28:	effffffe 	.word	0xeffffffe

08010b2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010b2c:	b480      	push	{r7}
 8010b2e:	b085      	sub	sp, #20
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010b3a:	2b01      	cmp	r3, #1
 8010b3c:	d101      	bne.n	8010b42 <HAL_UARTEx_DisableFifoMode+0x16>
 8010b3e:	2302      	movs	r3, #2
 8010b40:	e027      	b.n	8010b92 <HAL_UARTEx_DisableFifoMode+0x66>
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	2201      	movs	r2, #1
 8010b46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	2224      	movs	r2, #36	@ 0x24
 8010b4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	681a      	ldr	r2, [r3, #0]
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	f022 0201 	bic.w	r2, r2, #1
 8010b68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010b70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	2200      	movs	r2, #0
 8010b76:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	68fa      	ldr	r2, [r7, #12]
 8010b7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	2220      	movs	r2, #32
 8010b84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010b90:	2300      	movs	r3, #0
}
 8010b92:	4618      	mov	r0, r3
 8010b94:	3714      	adds	r7, #20
 8010b96:	46bd      	mov	sp, r7
 8010b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9c:	4770      	bx	lr

08010b9e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010b9e:	b580      	push	{r7, lr}
 8010ba0:	b084      	sub	sp, #16
 8010ba2:	af00      	add	r7, sp, #0
 8010ba4:	6078      	str	r0, [r7, #4]
 8010ba6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010bae:	2b01      	cmp	r3, #1
 8010bb0:	d101      	bne.n	8010bb6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010bb2:	2302      	movs	r3, #2
 8010bb4:	e02d      	b.n	8010c12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	2201      	movs	r2, #1
 8010bba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	2224      	movs	r2, #36	@ 0x24
 8010bc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	681a      	ldr	r2, [r3, #0]
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	f022 0201 	bic.w	r2, r2, #1
 8010bdc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	689b      	ldr	r3, [r3, #8]
 8010be4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	683a      	ldr	r2, [r7, #0]
 8010bee:	430a      	orrs	r2, r1
 8010bf0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010bf2:	6878      	ldr	r0, [r7, #4]
 8010bf4:	f000 f850 	bl	8010c98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	68fa      	ldr	r2, [r7, #12]
 8010bfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	2220      	movs	r2, #32
 8010c04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010c10:	2300      	movs	r3, #0
}
 8010c12:	4618      	mov	r0, r3
 8010c14:	3710      	adds	r7, #16
 8010c16:	46bd      	mov	sp, r7
 8010c18:	bd80      	pop	{r7, pc}

08010c1a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010c1a:	b580      	push	{r7, lr}
 8010c1c:	b084      	sub	sp, #16
 8010c1e:	af00      	add	r7, sp, #0
 8010c20:	6078      	str	r0, [r7, #4]
 8010c22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010c2a:	2b01      	cmp	r3, #1
 8010c2c:	d101      	bne.n	8010c32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010c2e:	2302      	movs	r3, #2
 8010c30:	e02d      	b.n	8010c8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	2201      	movs	r2, #1
 8010c36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	2224      	movs	r2, #36	@ 0x24
 8010c3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	681a      	ldr	r2, [r3, #0]
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	f022 0201 	bic.w	r2, r2, #1
 8010c58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	689b      	ldr	r3, [r3, #8]
 8010c60:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	683a      	ldr	r2, [r7, #0]
 8010c6a:	430a      	orrs	r2, r1
 8010c6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010c6e:	6878      	ldr	r0, [r7, #4]
 8010c70:	f000 f812 	bl	8010c98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	68fa      	ldr	r2, [r7, #12]
 8010c7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	2220      	movs	r2, #32
 8010c80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	2200      	movs	r2, #0
 8010c88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010c8c:	2300      	movs	r3, #0
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	3710      	adds	r7, #16
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}
	...

08010c98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010c98:	b480      	push	{r7}
 8010c9a:	b085      	sub	sp, #20
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d108      	bne.n	8010cba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	2201      	movs	r2, #1
 8010cac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	2201      	movs	r2, #1
 8010cb4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010cb8:	e031      	b.n	8010d1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010cba:	2310      	movs	r3, #16
 8010cbc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010cbe:	2310      	movs	r3, #16
 8010cc0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	689b      	ldr	r3, [r3, #8]
 8010cc8:	0e5b      	lsrs	r3, r3, #25
 8010cca:	b2db      	uxtb	r3, r3
 8010ccc:	f003 0307 	and.w	r3, r3, #7
 8010cd0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	689b      	ldr	r3, [r3, #8]
 8010cd8:	0f5b      	lsrs	r3, r3, #29
 8010cda:	b2db      	uxtb	r3, r3
 8010cdc:	f003 0307 	and.w	r3, r3, #7
 8010ce0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010ce2:	7bbb      	ldrb	r3, [r7, #14]
 8010ce4:	7b3a      	ldrb	r2, [r7, #12]
 8010ce6:	4911      	ldr	r1, [pc, #68]	@ (8010d2c <UARTEx_SetNbDataToProcess+0x94>)
 8010ce8:	5c8a      	ldrb	r2, [r1, r2]
 8010cea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010cee:	7b3a      	ldrb	r2, [r7, #12]
 8010cf0:	490f      	ldr	r1, [pc, #60]	@ (8010d30 <UARTEx_SetNbDataToProcess+0x98>)
 8010cf2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010cf4:	fb93 f3f2 	sdiv	r3, r3, r2
 8010cf8:	b29a      	uxth	r2, r3
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010d00:	7bfb      	ldrb	r3, [r7, #15]
 8010d02:	7b7a      	ldrb	r2, [r7, #13]
 8010d04:	4909      	ldr	r1, [pc, #36]	@ (8010d2c <UARTEx_SetNbDataToProcess+0x94>)
 8010d06:	5c8a      	ldrb	r2, [r1, r2]
 8010d08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010d0c:	7b7a      	ldrb	r2, [r7, #13]
 8010d0e:	4908      	ldr	r1, [pc, #32]	@ (8010d30 <UARTEx_SetNbDataToProcess+0x98>)
 8010d10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010d12:	fb93 f3f2 	sdiv	r3, r3, r2
 8010d16:	b29a      	uxth	r2, r3
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010d1e:	bf00      	nop
 8010d20:	3714      	adds	r7, #20
 8010d22:	46bd      	mov	sp, r7
 8010d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d28:	4770      	bx	lr
 8010d2a:	bf00      	nop
 8010d2c:	080143e8 	.word	0x080143e8
 8010d30:	080143f0 	.word	0x080143f0

08010d34 <atoi>:
 8010d34:	220a      	movs	r2, #10
 8010d36:	2100      	movs	r1, #0
 8010d38:	f000 b894 	b.w	8010e64 <strtol>

08010d3c <__itoa>:
 8010d3c:	1e93      	subs	r3, r2, #2
 8010d3e:	2b22      	cmp	r3, #34	@ 0x22
 8010d40:	b510      	push	{r4, lr}
 8010d42:	460c      	mov	r4, r1
 8010d44:	d904      	bls.n	8010d50 <__itoa+0x14>
 8010d46:	2300      	movs	r3, #0
 8010d48:	700b      	strb	r3, [r1, #0]
 8010d4a:	461c      	mov	r4, r3
 8010d4c:	4620      	mov	r0, r4
 8010d4e:	bd10      	pop	{r4, pc}
 8010d50:	2a0a      	cmp	r2, #10
 8010d52:	d109      	bne.n	8010d68 <__itoa+0x2c>
 8010d54:	2800      	cmp	r0, #0
 8010d56:	da07      	bge.n	8010d68 <__itoa+0x2c>
 8010d58:	232d      	movs	r3, #45	@ 0x2d
 8010d5a:	700b      	strb	r3, [r1, #0]
 8010d5c:	4240      	negs	r0, r0
 8010d5e:	2101      	movs	r1, #1
 8010d60:	4421      	add	r1, r4
 8010d62:	f000 f889 	bl	8010e78 <__utoa>
 8010d66:	e7f1      	b.n	8010d4c <__itoa+0x10>
 8010d68:	2100      	movs	r1, #0
 8010d6a:	e7f9      	b.n	8010d60 <__itoa+0x24>

08010d6c <itoa>:
 8010d6c:	f7ff bfe6 	b.w	8010d3c <__itoa>

08010d70 <_strtol_l.constprop.0>:
 8010d70:	2b24      	cmp	r3, #36	@ 0x24
 8010d72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d76:	4686      	mov	lr, r0
 8010d78:	4690      	mov	r8, r2
 8010d7a:	d801      	bhi.n	8010d80 <_strtol_l.constprop.0+0x10>
 8010d7c:	2b01      	cmp	r3, #1
 8010d7e:	d106      	bne.n	8010d8e <_strtol_l.constprop.0+0x1e>
 8010d80:	f000 fe78 	bl	8011a74 <__errno>
 8010d84:	2316      	movs	r3, #22
 8010d86:	6003      	str	r3, [r0, #0]
 8010d88:	2000      	movs	r0, #0
 8010d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d8e:	4834      	ldr	r0, [pc, #208]	@ (8010e60 <_strtol_l.constprop.0+0xf0>)
 8010d90:	460d      	mov	r5, r1
 8010d92:	462a      	mov	r2, r5
 8010d94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010d98:	5d06      	ldrb	r6, [r0, r4]
 8010d9a:	f016 0608 	ands.w	r6, r6, #8
 8010d9e:	d1f8      	bne.n	8010d92 <_strtol_l.constprop.0+0x22>
 8010da0:	2c2d      	cmp	r4, #45	@ 0x2d
 8010da2:	d12d      	bne.n	8010e00 <_strtol_l.constprop.0+0x90>
 8010da4:	782c      	ldrb	r4, [r5, #0]
 8010da6:	2601      	movs	r6, #1
 8010da8:	1c95      	adds	r5, r2, #2
 8010daa:	f033 0210 	bics.w	r2, r3, #16
 8010dae:	d109      	bne.n	8010dc4 <_strtol_l.constprop.0+0x54>
 8010db0:	2c30      	cmp	r4, #48	@ 0x30
 8010db2:	d12a      	bne.n	8010e0a <_strtol_l.constprop.0+0x9a>
 8010db4:	782a      	ldrb	r2, [r5, #0]
 8010db6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010dba:	2a58      	cmp	r2, #88	@ 0x58
 8010dbc:	d125      	bne.n	8010e0a <_strtol_l.constprop.0+0x9a>
 8010dbe:	786c      	ldrb	r4, [r5, #1]
 8010dc0:	2310      	movs	r3, #16
 8010dc2:	3502      	adds	r5, #2
 8010dc4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8010dc8:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8010dcc:	2200      	movs	r2, #0
 8010dce:	fbbc f9f3 	udiv	r9, ip, r3
 8010dd2:	4610      	mov	r0, r2
 8010dd4:	fb03 ca19 	mls	sl, r3, r9, ip
 8010dd8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010ddc:	2f09      	cmp	r7, #9
 8010dde:	d81b      	bhi.n	8010e18 <_strtol_l.constprop.0+0xa8>
 8010de0:	463c      	mov	r4, r7
 8010de2:	42a3      	cmp	r3, r4
 8010de4:	dd27      	ble.n	8010e36 <_strtol_l.constprop.0+0xc6>
 8010de6:	1c57      	adds	r7, r2, #1
 8010de8:	d007      	beq.n	8010dfa <_strtol_l.constprop.0+0x8a>
 8010dea:	4581      	cmp	r9, r0
 8010dec:	d320      	bcc.n	8010e30 <_strtol_l.constprop.0+0xc0>
 8010dee:	d101      	bne.n	8010df4 <_strtol_l.constprop.0+0x84>
 8010df0:	45a2      	cmp	sl, r4
 8010df2:	db1d      	blt.n	8010e30 <_strtol_l.constprop.0+0xc0>
 8010df4:	fb00 4003 	mla	r0, r0, r3, r4
 8010df8:	2201      	movs	r2, #1
 8010dfa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010dfe:	e7eb      	b.n	8010dd8 <_strtol_l.constprop.0+0x68>
 8010e00:	2c2b      	cmp	r4, #43	@ 0x2b
 8010e02:	bf04      	itt	eq
 8010e04:	782c      	ldrbeq	r4, [r5, #0]
 8010e06:	1c95      	addeq	r5, r2, #2
 8010e08:	e7cf      	b.n	8010daa <_strtol_l.constprop.0+0x3a>
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d1da      	bne.n	8010dc4 <_strtol_l.constprop.0+0x54>
 8010e0e:	2c30      	cmp	r4, #48	@ 0x30
 8010e10:	bf0c      	ite	eq
 8010e12:	2308      	moveq	r3, #8
 8010e14:	230a      	movne	r3, #10
 8010e16:	e7d5      	b.n	8010dc4 <_strtol_l.constprop.0+0x54>
 8010e18:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010e1c:	2f19      	cmp	r7, #25
 8010e1e:	d801      	bhi.n	8010e24 <_strtol_l.constprop.0+0xb4>
 8010e20:	3c37      	subs	r4, #55	@ 0x37
 8010e22:	e7de      	b.n	8010de2 <_strtol_l.constprop.0+0x72>
 8010e24:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8010e28:	2f19      	cmp	r7, #25
 8010e2a:	d804      	bhi.n	8010e36 <_strtol_l.constprop.0+0xc6>
 8010e2c:	3c57      	subs	r4, #87	@ 0x57
 8010e2e:	e7d8      	b.n	8010de2 <_strtol_l.constprop.0+0x72>
 8010e30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010e34:	e7e1      	b.n	8010dfa <_strtol_l.constprop.0+0x8a>
 8010e36:	1c53      	adds	r3, r2, #1
 8010e38:	d108      	bne.n	8010e4c <_strtol_l.constprop.0+0xdc>
 8010e3a:	2322      	movs	r3, #34	@ 0x22
 8010e3c:	f8ce 3000 	str.w	r3, [lr]
 8010e40:	4660      	mov	r0, ip
 8010e42:	f1b8 0f00 	cmp.w	r8, #0
 8010e46:	d0a0      	beq.n	8010d8a <_strtol_l.constprop.0+0x1a>
 8010e48:	1e69      	subs	r1, r5, #1
 8010e4a:	e006      	b.n	8010e5a <_strtol_l.constprop.0+0xea>
 8010e4c:	b106      	cbz	r6, 8010e50 <_strtol_l.constprop.0+0xe0>
 8010e4e:	4240      	negs	r0, r0
 8010e50:	f1b8 0f00 	cmp.w	r8, #0
 8010e54:	d099      	beq.n	8010d8a <_strtol_l.constprop.0+0x1a>
 8010e56:	2a00      	cmp	r2, #0
 8010e58:	d1f6      	bne.n	8010e48 <_strtol_l.constprop.0+0xd8>
 8010e5a:	f8c8 1000 	str.w	r1, [r8]
 8010e5e:	e794      	b.n	8010d8a <_strtol_l.constprop.0+0x1a>
 8010e60:	0801441e 	.word	0x0801441e

08010e64 <strtol>:
 8010e64:	4613      	mov	r3, r2
 8010e66:	460a      	mov	r2, r1
 8010e68:	4601      	mov	r1, r0
 8010e6a:	4802      	ldr	r0, [pc, #8]	@ (8010e74 <strtol+0x10>)
 8010e6c:	6800      	ldr	r0, [r0, #0]
 8010e6e:	f7ff bf7f 	b.w	8010d70 <_strtol_l.constprop.0>
 8010e72:	bf00      	nop
 8010e74:	24000054 	.word	0x24000054

08010e78 <__utoa>:
 8010e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e7a:	4c1f      	ldr	r4, [pc, #124]	@ (8010ef8 <__utoa+0x80>)
 8010e7c:	b08b      	sub	sp, #44	@ 0x2c
 8010e7e:	4605      	mov	r5, r0
 8010e80:	460b      	mov	r3, r1
 8010e82:	466e      	mov	r6, sp
 8010e84:	f104 0c20 	add.w	ip, r4, #32
 8010e88:	6820      	ldr	r0, [r4, #0]
 8010e8a:	6861      	ldr	r1, [r4, #4]
 8010e8c:	4637      	mov	r7, r6
 8010e8e:	c703      	stmia	r7!, {r0, r1}
 8010e90:	3408      	adds	r4, #8
 8010e92:	4564      	cmp	r4, ip
 8010e94:	463e      	mov	r6, r7
 8010e96:	d1f7      	bne.n	8010e88 <__utoa+0x10>
 8010e98:	7921      	ldrb	r1, [r4, #4]
 8010e9a:	7139      	strb	r1, [r7, #4]
 8010e9c:	1e91      	subs	r1, r2, #2
 8010e9e:	6820      	ldr	r0, [r4, #0]
 8010ea0:	6038      	str	r0, [r7, #0]
 8010ea2:	2922      	cmp	r1, #34	@ 0x22
 8010ea4:	f04f 0100 	mov.w	r1, #0
 8010ea8:	d904      	bls.n	8010eb4 <__utoa+0x3c>
 8010eaa:	7019      	strb	r1, [r3, #0]
 8010eac:	460b      	mov	r3, r1
 8010eae:	4618      	mov	r0, r3
 8010eb0:	b00b      	add	sp, #44	@ 0x2c
 8010eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010eb4:	1e58      	subs	r0, r3, #1
 8010eb6:	4684      	mov	ip, r0
 8010eb8:	fbb5 f7f2 	udiv	r7, r5, r2
 8010ebc:	fb02 5617 	mls	r6, r2, r7, r5
 8010ec0:	3628      	adds	r6, #40	@ 0x28
 8010ec2:	446e      	add	r6, sp
 8010ec4:	460c      	mov	r4, r1
 8010ec6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8010eca:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8010ece:	462e      	mov	r6, r5
 8010ed0:	42b2      	cmp	r2, r6
 8010ed2:	f101 0101 	add.w	r1, r1, #1
 8010ed6:	463d      	mov	r5, r7
 8010ed8:	d9ee      	bls.n	8010eb8 <__utoa+0x40>
 8010eda:	2200      	movs	r2, #0
 8010edc:	545a      	strb	r2, [r3, r1]
 8010ede:	1919      	adds	r1, r3, r4
 8010ee0:	1aa5      	subs	r5, r4, r2
 8010ee2:	42aa      	cmp	r2, r5
 8010ee4:	dae3      	bge.n	8010eae <__utoa+0x36>
 8010ee6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8010eea:	780e      	ldrb	r6, [r1, #0]
 8010eec:	7006      	strb	r6, [r0, #0]
 8010eee:	3201      	adds	r2, #1
 8010ef0:	f801 5901 	strb.w	r5, [r1], #-1
 8010ef4:	e7f4      	b.n	8010ee0 <__utoa+0x68>
 8010ef6:	bf00      	nop
 8010ef8:	080143f8 	.word	0x080143f8

08010efc <__cvt>:
 8010efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010efe:	ed2d 8b02 	vpush	{d8}
 8010f02:	eeb0 8b40 	vmov.f64	d8, d0
 8010f06:	b085      	sub	sp, #20
 8010f08:	4617      	mov	r7, r2
 8010f0a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8010f0c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010f0e:	ee18 2a90 	vmov	r2, s17
 8010f12:	f025 0520 	bic.w	r5, r5, #32
 8010f16:	2a00      	cmp	r2, #0
 8010f18:	bfb6      	itet	lt
 8010f1a:	222d      	movlt	r2, #45	@ 0x2d
 8010f1c:	2200      	movge	r2, #0
 8010f1e:	eeb1 8b40 	vneglt.f64	d8, d0
 8010f22:	2d46      	cmp	r5, #70	@ 0x46
 8010f24:	460c      	mov	r4, r1
 8010f26:	701a      	strb	r2, [r3, #0]
 8010f28:	d004      	beq.n	8010f34 <__cvt+0x38>
 8010f2a:	2d45      	cmp	r5, #69	@ 0x45
 8010f2c:	d100      	bne.n	8010f30 <__cvt+0x34>
 8010f2e:	3401      	adds	r4, #1
 8010f30:	2102      	movs	r1, #2
 8010f32:	e000      	b.n	8010f36 <__cvt+0x3a>
 8010f34:	2103      	movs	r1, #3
 8010f36:	ab03      	add	r3, sp, #12
 8010f38:	9301      	str	r3, [sp, #4]
 8010f3a:	ab02      	add	r3, sp, #8
 8010f3c:	9300      	str	r3, [sp, #0]
 8010f3e:	4622      	mov	r2, r4
 8010f40:	4633      	mov	r3, r6
 8010f42:	eeb0 0b48 	vmov.f64	d0, d8
 8010f46:	f000 fe53 	bl	8011bf0 <_dtoa_r>
 8010f4a:	2d47      	cmp	r5, #71	@ 0x47
 8010f4c:	d114      	bne.n	8010f78 <__cvt+0x7c>
 8010f4e:	07fb      	lsls	r3, r7, #31
 8010f50:	d50a      	bpl.n	8010f68 <__cvt+0x6c>
 8010f52:	1902      	adds	r2, r0, r4
 8010f54:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f5c:	bf08      	it	eq
 8010f5e:	9203      	streq	r2, [sp, #12]
 8010f60:	2130      	movs	r1, #48	@ 0x30
 8010f62:	9b03      	ldr	r3, [sp, #12]
 8010f64:	4293      	cmp	r3, r2
 8010f66:	d319      	bcc.n	8010f9c <__cvt+0xa0>
 8010f68:	9b03      	ldr	r3, [sp, #12]
 8010f6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010f6c:	1a1b      	subs	r3, r3, r0
 8010f6e:	6013      	str	r3, [r2, #0]
 8010f70:	b005      	add	sp, #20
 8010f72:	ecbd 8b02 	vpop	{d8}
 8010f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f78:	2d46      	cmp	r5, #70	@ 0x46
 8010f7a:	eb00 0204 	add.w	r2, r0, r4
 8010f7e:	d1e9      	bne.n	8010f54 <__cvt+0x58>
 8010f80:	7803      	ldrb	r3, [r0, #0]
 8010f82:	2b30      	cmp	r3, #48	@ 0x30
 8010f84:	d107      	bne.n	8010f96 <__cvt+0x9a>
 8010f86:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f8e:	bf1c      	itt	ne
 8010f90:	f1c4 0401 	rsbne	r4, r4, #1
 8010f94:	6034      	strne	r4, [r6, #0]
 8010f96:	6833      	ldr	r3, [r6, #0]
 8010f98:	441a      	add	r2, r3
 8010f9a:	e7db      	b.n	8010f54 <__cvt+0x58>
 8010f9c:	1c5c      	adds	r4, r3, #1
 8010f9e:	9403      	str	r4, [sp, #12]
 8010fa0:	7019      	strb	r1, [r3, #0]
 8010fa2:	e7de      	b.n	8010f62 <__cvt+0x66>

08010fa4 <__exponent>:
 8010fa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010fa6:	2900      	cmp	r1, #0
 8010fa8:	bfba      	itte	lt
 8010faa:	4249      	neglt	r1, r1
 8010fac:	232d      	movlt	r3, #45	@ 0x2d
 8010fae:	232b      	movge	r3, #43	@ 0x2b
 8010fb0:	2909      	cmp	r1, #9
 8010fb2:	7002      	strb	r2, [r0, #0]
 8010fb4:	7043      	strb	r3, [r0, #1]
 8010fb6:	dd29      	ble.n	801100c <__exponent+0x68>
 8010fb8:	f10d 0307 	add.w	r3, sp, #7
 8010fbc:	461d      	mov	r5, r3
 8010fbe:	270a      	movs	r7, #10
 8010fc0:	461a      	mov	r2, r3
 8010fc2:	fbb1 f6f7 	udiv	r6, r1, r7
 8010fc6:	fb07 1416 	mls	r4, r7, r6, r1
 8010fca:	3430      	adds	r4, #48	@ 0x30
 8010fcc:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010fd0:	460c      	mov	r4, r1
 8010fd2:	2c63      	cmp	r4, #99	@ 0x63
 8010fd4:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8010fd8:	4631      	mov	r1, r6
 8010fda:	dcf1      	bgt.n	8010fc0 <__exponent+0x1c>
 8010fdc:	3130      	adds	r1, #48	@ 0x30
 8010fde:	1e94      	subs	r4, r2, #2
 8010fe0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010fe4:	1c41      	adds	r1, r0, #1
 8010fe6:	4623      	mov	r3, r4
 8010fe8:	42ab      	cmp	r3, r5
 8010fea:	d30a      	bcc.n	8011002 <__exponent+0x5e>
 8010fec:	f10d 0309 	add.w	r3, sp, #9
 8010ff0:	1a9b      	subs	r3, r3, r2
 8010ff2:	42ac      	cmp	r4, r5
 8010ff4:	bf88      	it	hi
 8010ff6:	2300      	movhi	r3, #0
 8010ff8:	3302      	adds	r3, #2
 8010ffa:	4403      	add	r3, r0
 8010ffc:	1a18      	subs	r0, r3, r0
 8010ffe:	b003      	add	sp, #12
 8011000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011002:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011006:	f801 6f01 	strb.w	r6, [r1, #1]!
 801100a:	e7ed      	b.n	8010fe8 <__exponent+0x44>
 801100c:	2330      	movs	r3, #48	@ 0x30
 801100e:	3130      	adds	r1, #48	@ 0x30
 8011010:	7083      	strb	r3, [r0, #2]
 8011012:	70c1      	strb	r1, [r0, #3]
 8011014:	1d03      	adds	r3, r0, #4
 8011016:	e7f1      	b.n	8010ffc <__exponent+0x58>

08011018 <_printf_float>:
 8011018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801101c:	b08d      	sub	sp, #52	@ 0x34
 801101e:	460c      	mov	r4, r1
 8011020:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011024:	4616      	mov	r6, r2
 8011026:	461f      	mov	r7, r3
 8011028:	4605      	mov	r5, r0
 801102a:	f000 fcd9 	bl	80119e0 <_localeconv_r>
 801102e:	f8d0 b000 	ldr.w	fp, [r0]
 8011032:	4658      	mov	r0, fp
 8011034:	f7ef f9bc 	bl	80003b0 <strlen>
 8011038:	2300      	movs	r3, #0
 801103a:	930a      	str	r3, [sp, #40]	@ 0x28
 801103c:	f8d8 3000 	ldr.w	r3, [r8]
 8011040:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011044:	6822      	ldr	r2, [r4, #0]
 8011046:	9005      	str	r0, [sp, #20]
 8011048:	3307      	adds	r3, #7
 801104a:	f023 0307 	bic.w	r3, r3, #7
 801104e:	f103 0108 	add.w	r1, r3, #8
 8011052:	f8c8 1000 	str.w	r1, [r8]
 8011056:	ed93 0b00 	vldr	d0, [r3]
 801105a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80112b8 <_printf_float+0x2a0>
 801105e:	eeb0 7bc0 	vabs.f64	d7, d0
 8011062:	eeb4 7b46 	vcmp.f64	d7, d6
 8011066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801106a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801106e:	dd24      	ble.n	80110ba <_printf_float+0xa2>
 8011070:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011078:	d502      	bpl.n	8011080 <_printf_float+0x68>
 801107a:	232d      	movs	r3, #45	@ 0x2d
 801107c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011080:	498f      	ldr	r1, [pc, #572]	@ (80112c0 <_printf_float+0x2a8>)
 8011082:	4b90      	ldr	r3, [pc, #576]	@ (80112c4 <_printf_float+0x2ac>)
 8011084:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8011088:	bf94      	ite	ls
 801108a:	4688      	movls	r8, r1
 801108c:	4698      	movhi	r8, r3
 801108e:	f022 0204 	bic.w	r2, r2, #4
 8011092:	2303      	movs	r3, #3
 8011094:	6123      	str	r3, [r4, #16]
 8011096:	6022      	str	r2, [r4, #0]
 8011098:	f04f 0a00 	mov.w	sl, #0
 801109c:	9700      	str	r7, [sp, #0]
 801109e:	4633      	mov	r3, r6
 80110a0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80110a2:	4621      	mov	r1, r4
 80110a4:	4628      	mov	r0, r5
 80110a6:	f000 f9d1 	bl	801144c <_printf_common>
 80110aa:	3001      	adds	r0, #1
 80110ac:	f040 8089 	bne.w	80111c2 <_printf_float+0x1aa>
 80110b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80110b4:	b00d      	add	sp, #52	@ 0x34
 80110b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110ba:	eeb4 0b40 	vcmp.f64	d0, d0
 80110be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110c2:	d709      	bvc.n	80110d8 <_printf_float+0xc0>
 80110c4:	ee10 3a90 	vmov	r3, s1
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	bfbc      	itt	lt
 80110cc:	232d      	movlt	r3, #45	@ 0x2d
 80110ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80110d2:	497d      	ldr	r1, [pc, #500]	@ (80112c8 <_printf_float+0x2b0>)
 80110d4:	4b7d      	ldr	r3, [pc, #500]	@ (80112cc <_printf_float+0x2b4>)
 80110d6:	e7d5      	b.n	8011084 <_printf_float+0x6c>
 80110d8:	6863      	ldr	r3, [r4, #4]
 80110da:	1c59      	adds	r1, r3, #1
 80110dc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80110e0:	d139      	bne.n	8011156 <_printf_float+0x13e>
 80110e2:	2306      	movs	r3, #6
 80110e4:	6063      	str	r3, [r4, #4]
 80110e6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80110ea:	2300      	movs	r3, #0
 80110ec:	6022      	str	r2, [r4, #0]
 80110ee:	9303      	str	r3, [sp, #12]
 80110f0:	ab0a      	add	r3, sp, #40	@ 0x28
 80110f2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80110f6:	ab09      	add	r3, sp, #36	@ 0x24
 80110f8:	9300      	str	r3, [sp, #0]
 80110fa:	6861      	ldr	r1, [r4, #4]
 80110fc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011100:	4628      	mov	r0, r5
 8011102:	f7ff fefb 	bl	8010efc <__cvt>
 8011106:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801110a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801110c:	4680      	mov	r8, r0
 801110e:	d129      	bne.n	8011164 <_printf_float+0x14c>
 8011110:	1cc8      	adds	r0, r1, #3
 8011112:	db02      	blt.n	801111a <_printf_float+0x102>
 8011114:	6863      	ldr	r3, [r4, #4]
 8011116:	4299      	cmp	r1, r3
 8011118:	dd41      	ble.n	801119e <_printf_float+0x186>
 801111a:	f1a9 0902 	sub.w	r9, r9, #2
 801111e:	fa5f f989 	uxtb.w	r9, r9
 8011122:	3901      	subs	r1, #1
 8011124:	464a      	mov	r2, r9
 8011126:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801112a:	9109      	str	r1, [sp, #36]	@ 0x24
 801112c:	f7ff ff3a 	bl	8010fa4 <__exponent>
 8011130:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011132:	1813      	adds	r3, r2, r0
 8011134:	2a01      	cmp	r2, #1
 8011136:	4682      	mov	sl, r0
 8011138:	6123      	str	r3, [r4, #16]
 801113a:	dc02      	bgt.n	8011142 <_printf_float+0x12a>
 801113c:	6822      	ldr	r2, [r4, #0]
 801113e:	07d2      	lsls	r2, r2, #31
 8011140:	d501      	bpl.n	8011146 <_printf_float+0x12e>
 8011142:	3301      	adds	r3, #1
 8011144:	6123      	str	r3, [r4, #16]
 8011146:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801114a:	2b00      	cmp	r3, #0
 801114c:	d0a6      	beq.n	801109c <_printf_float+0x84>
 801114e:	232d      	movs	r3, #45	@ 0x2d
 8011150:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011154:	e7a2      	b.n	801109c <_printf_float+0x84>
 8011156:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801115a:	d1c4      	bne.n	80110e6 <_printf_float+0xce>
 801115c:	2b00      	cmp	r3, #0
 801115e:	d1c2      	bne.n	80110e6 <_printf_float+0xce>
 8011160:	2301      	movs	r3, #1
 8011162:	e7bf      	b.n	80110e4 <_printf_float+0xcc>
 8011164:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8011168:	d9db      	bls.n	8011122 <_printf_float+0x10a>
 801116a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801116e:	d118      	bne.n	80111a2 <_printf_float+0x18a>
 8011170:	2900      	cmp	r1, #0
 8011172:	6863      	ldr	r3, [r4, #4]
 8011174:	dd0b      	ble.n	801118e <_printf_float+0x176>
 8011176:	6121      	str	r1, [r4, #16]
 8011178:	b913      	cbnz	r3, 8011180 <_printf_float+0x168>
 801117a:	6822      	ldr	r2, [r4, #0]
 801117c:	07d0      	lsls	r0, r2, #31
 801117e:	d502      	bpl.n	8011186 <_printf_float+0x16e>
 8011180:	3301      	adds	r3, #1
 8011182:	440b      	add	r3, r1
 8011184:	6123      	str	r3, [r4, #16]
 8011186:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011188:	f04f 0a00 	mov.w	sl, #0
 801118c:	e7db      	b.n	8011146 <_printf_float+0x12e>
 801118e:	b913      	cbnz	r3, 8011196 <_printf_float+0x17e>
 8011190:	6822      	ldr	r2, [r4, #0]
 8011192:	07d2      	lsls	r2, r2, #31
 8011194:	d501      	bpl.n	801119a <_printf_float+0x182>
 8011196:	3302      	adds	r3, #2
 8011198:	e7f4      	b.n	8011184 <_printf_float+0x16c>
 801119a:	2301      	movs	r3, #1
 801119c:	e7f2      	b.n	8011184 <_printf_float+0x16c>
 801119e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80111a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80111a4:	4299      	cmp	r1, r3
 80111a6:	db05      	blt.n	80111b4 <_printf_float+0x19c>
 80111a8:	6823      	ldr	r3, [r4, #0]
 80111aa:	6121      	str	r1, [r4, #16]
 80111ac:	07d8      	lsls	r0, r3, #31
 80111ae:	d5ea      	bpl.n	8011186 <_printf_float+0x16e>
 80111b0:	1c4b      	adds	r3, r1, #1
 80111b2:	e7e7      	b.n	8011184 <_printf_float+0x16c>
 80111b4:	2900      	cmp	r1, #0
 80111b6:	bfd4      	ite	le
 80111b8:	f1c1 0202 	rsble	r2, r1, #2
 80111bc:	2201      	movgt	r2, #1
 80111be:	4413      	add	r3, r2
 80111c0:	e7e0      	b.n	8011184 <_printf_float+0x16c>
 80111c2:	6823      	ldr	r3, [r4, #0]
 80111c4:	055a      	lsls	r2, r3, #21
 80111c6:	d407      	bmi.n	80111d8 <_printf_float+0x1c0>
 80111c8:	6923      	ldr	r3, [r4, #16]
 80111ca:	4642      	mov	r2, r8
 80111cc:	4631      	mov	r1, r6
 80111ce:	4628      	mov	r0, r5
 80111d0:	47b8      	blx	r7
 80111d2:	3001      	adds	r0, #1
 80111d4:	d12a      	bne.n	801122c <_printf_float+0x214>
 80111d6:	e76b      	b.n	80110b0 <_printf_float+0x98>
 80111d8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80111dc:	f240 80e0 	bls.w	80113a0 <_printf_float+0x388>
 80111e0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80111e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80111e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111ec:	d133      	bne.n	8011256 <_printf_float+0x23e>
 80111ee:	4a38      	ldr	r2, [pc, #224]	@ (80112d0 <_printf_float+0x2b8>)
 80111f0:	2301      	movs	r3, #1
 80111f2:	4631      	mov	r1, r6
 80111f4:	4628      	mov	r0, r5
 80111f6:	47b8      	blx	r7
 80111f8:	3001      	adds	r0, #1
 80111fa:	f43f af59 	beq.w	80110b0 <_printf_float+0x98>
 80111fe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011202:	4543      	cmp	r3, r8
 8011204:	db02      	blt.n	801120c <_printf_float+0x1f4>
 8011206:	6823      	ldr	r3, [r4, #0]
 8011208:	07d8      	lsls	r0, r3, #31
 801120a:	d50f      	bpl.n	801122c <_printf_float+0x214>
 801120c:	9b05      	ldr	r3, [sp, #20]
 801120e:	465a      	mov	r2, fp
 8011210:	4631      	mov	r1, r6
 8011212:	4628      	mov	r0, r5
 8011214:	47b8      	blx	r7
 8011216:	3001      	adds	r0, #1
 8011218:	f43f af4a 	beq.w	80110b0 <_printf_float+0x98>
 801121c:	f04f 0900 	mov.w	r9, #0
 8011220:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8011224:	f104 0a1a 	add.w	sl, r4, #26
 8011228:	45c8      	cmp	r8, r9
 801122a:	dc09      	bgt.n	8011240 <_printf_float+0x228>
 801122c:	6823      	ldr	r3, [r4, #0]
 801122e:	079b      	lsls	r3, r3, #30
 8011230:	f100 8107 	bmi.w	8011442 <_printf_float+0x42a>
 8011234:	68e0      	ldr	r0, [r4, #12]
 8011236:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011238:	4298      	cmp	r0, r3
 801123a:	bfb8      	it	lt
 801123c:	4618      	movlt	r0, r3
 801123e:	e739      	b.n	80110b4 <_printf_float+0x9c>
 8011240:	2301      	movs	r3, #1
 8011242:	4652      	mov	r2, sl
 8011244:	4631      	mov	r1, r6
 8011246:	4628      	mov	r0, r5
 8011248:	47b8      	blx	r7
 801124a:	3001      	adds	r0, #1
 801124c:	f43f af30 	beq.w	80110b0 <_printf_float+0x98>
 8011250:	f109 0901 	add.w	r9, r9, #1
 8011254:	e7e8      	b.n	8011228 <_printf_float+0x210>
 8011256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011258:	2b00      	cmp	r3, #0
 801125a:	dc3b      	bgt.n	80112d4 <_printf_float+0x2bc>
 801125c:	4a1c      	ldr	r2, [pc, #112]	@ (80112d0 <_printf_float+0x2b8>)
 801125e:	2301      	movs	r3, #1
 8011260:	4631      	mov	r1, r6
 8011262:	4628      	mov	r0, r5
 8011264:	47b8      	blx	r7
 8011266:	3001      	adds	r0, #1
 8011268:	f43f af22 	beq.w	80110b0 <_printf_float+0x98>
 801126c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011270:	ea59 0303 	orrs.w	r3, r9, r3
 8011274:	d102      	bne.n	801127c <_printf_float+0x264>
 8011276:	6823      	ldr	r3, [r4, #0]
 8011278:	07d9      	lsls	r1, r3, #31
 801127a:	d5d7      	bpl.n	801122c <_printf_float+0x214>
 801127c:	9b05      	ldr	r3, [sp, #20]
 801127e:	465a      	mov	r2, fp
 8011280:	4631      	mov	r1, r6
 8011282:	4628      	mov	r0, r5
 8011284:	47b8      	blx	r7
 8011286:	3001      	adds	r0, #1
 8011288:	f43f af12 	beq.w	80110b0 <_printf_float+0x98>
 801128c:	f04f 0a00 	mov.w	sl, #0
 8011290:	f104 0b1a 	add.w	fp, r4, #26
 8011294:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011296:	425b      	negs	r3, r3
 8011298:	4553      	cmp	r3, sl
 801129a:	dc01      	bgt.n	80112a0 <_printf_float+0x288>
 801129c:	464b      	mov	r3, r9
 801129e:	e794      	b.n	80111ca <_printf_float+0x1b2>
 80112a0:	2301      	movs	r3, #1
 80112a2:	465a      	mov	r2, fp
 80112a4:	4631      	mov	r1, r6
 80112a6:	4628      	mov	r0, r5
 80112a8:	47b8      	blx	r7
 80112aa:	3001      	adds	r0, #1
 80112ac:	f43f af00 	beq.w	80110b0 <_printf_float+0x98>
 80112b0:	f10a 0a01 	add.w	sl, sl, #1
 80112b4:	e7ee      	b.n	8011294 <_printf_float+0x27c>
 80112b6:	bf00      	nop
 80112b8:	ffffffff 	.word	0xffffffff
 80112bc:	7fefffff 	.word	0x7fefffff
 80112c0:	0801451e 	.word	0x0801451e
 80112c4:	08014522 	.word	0x08014522
 80112c8:	08014526 	.word	0x08014526
 80112cc:	0801452a 	.word	0x0801452a
 80112d0:	0801452e 	.word	0x0801452e
 80112d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80112d6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80112da:	4553      	cmp	r3, sl
 80112dc:	bfa8      	it	ge
 80112de:	4653      	movge	r3, sl
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	4699      	mov	r9, r3
 80112e4:	dc37      	bgt.n	8011356 <_printf_float+0x33e>
 80112e6:	2300      	movs	r3, #0
 80112e8:	9307      	str	r3, [sp, #28]
 80112ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80112ee:	f104 021a 	add.w	r2, r4, #26
 80112f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80112f4:	9907      	ldr	r1, [sp, #28]
 80112f6:	9306      	str	r3, [sp, #24]
 80112f8:	eba3 0309 	sub.w	r3, r3, r9
 80112fc:	428b      	cmp	r3, r1
 80112fe:	dc31      	bgt.n	8011364 <_printf_float+0x34c>
 8011300:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011302:	459a      	cmp	sl, r3
 8011304:	dc3b      	bgt.n	801137e <_printf_float+0x366>
 8011306:	6823      	ldr	r3, [r4, #0]
 8011308:	07da      	lsls	r2, r3, #31
 801130a:	d438      	bmi.n	801137e <_printf_float+0x366>
 801130c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801130e:	ebaa 0903 	sub.w	r9, sl, r3
 8011312:	9b06      	ldr	r3, [sp, #24]
 8011314:	ebaa 0303 	sub.w	r3, sl, r3
 8011318:	4599      	cmp	r9, r3
 801131a:	bfa8      	it	ge
 801131c:	4699      	movge	r9, r3
 801131e:	f1b9 0f00 	cmp.w	r9, #0
 8011322:	dc34      	bgt.n	801138e <_printf_float+0x376>
 8011324:	f04f 0800 	mov.w	r8, #0
 8011328:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801132c:	f104 0b1a 	add.w	fp, r4, #26
 8011330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011332:	ebaa 0303 	sub.w	r3, sl, r3
 8011336:	eba3 0309 	sub.w	r3, r3, r9
 801133a:	4543      	cmp	r3, r8
 801133c:	f77f af76 	ble.w	801122c <_printf_float+0x214>
 8011340:	2301      	movs	r3, #1
 8011342:	465a      	mov	r2, fp
 8011344:	4631      	mov	r1, r6
 8011346:	4628      	mov	r0, r5
 8011348:	47b8      	blx	r7
 801134a:	3001      	adds	r0, #1
 801134c:	f43f aeb0 	beq.w	80110b0 <_printf_float+0x98>
 8011350:	f108 0801 	add.w	r8, r8, #1
 8011354:	e7ec      	b.n	8011330 <_printf_float+0x318>
 8011356:	4642      	mov	r2, r8
 8011358:	4631      	mov	r1, r6
 801135a:	4628      	mov	r0, r5
 801135c:	47b8      	blx	r7
 801135e:	3001      	adds	r0, #1
 8011360:	d1c1      	bne.n	80112e6 <_printf_float+0x2ce>
 8011362:	e6a5      	b.n	80110b0 <_printf_float+0x98>
 8011364:	2301      	movs	r3, #1
 8011366:	4631      	mov	r1, r6
 8011368:	4628      	mov	r0, r5
 801136a:	9206      	str	r2, [sp, #24]
 801136c:	47b8      	blx	r7
 801136e:	3001      	adds	r0, #1
 8011370:	f43f ae9e 	beq.w	80110b0 <_printf_float+0x98>
 8011374:	9b07      	ldr	r3, [sp, #28]
 8011376:	9a06      	ldr	r2, [sp, #24]
 8011378:	3301      	adds	r3, #1
 801137a:	9307      	str	r3, [sp, #28]
 801137c:	e7b9      	b.n	80112f2 <_printf_float+0x2da>
 801137e:	9b05      	ldr	r3, [sp, #20]
 8011380:	465a      	mov	r2, fp
 8011382:	4631      	mov	r1, r6
 8011384:	4628      	mov	r0, r5
 8011386:	47b8      	blx	r7
 8011388:	3001      	adds	r0, #1
 801138a:	d1bf      	bne.n	801130c <_printf_float+0x2f4>
 801138c:	e690      	b.n	80110b0 <_printf_float+0x98>
 801138e:	9a06      	ldr	r2, [sp, #24]
 8011390:	464b      	mov	r3, r9
 8011392:	4442      	add	r2, r8
 8011394:	4631      	mov	r1, r6
 8011396:	4628      	mov	r0, r5
 8011398:	47b8      	blx	r7
 801139a:	3001      	adds	r0, #1
 801139c:	d1c2      	bne.n	8011324 <_printf_float+0x30c>
 801139e:	e687      	b.n	80110b0 <_printf_float+0x98>
 80113a0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80113a4:	f1b9 0f01 	cmp.w	r9, #1
 80113a8:	dc01      	bgt.n	80113ae <_printf_float+0x396>
 80113aa:	07db      	lsls	r3, r3, #31
 80113ac:	d536      	bpl.n	801141c <_printf_float+0x404>
 80113ae:	2301      	movs	r3, #1
 80113b0:	4642      	mov	r2, r8
 80113b2:	4631      	mov	r1, r6
 80113b4:	4628      	mov	r0, r5
 80113b6:	47b8      	blx	r7
 80113b8:	3001      	adds	r0, #1
 80113ba:	f43f ae79 	beq.w	80110b0 <_printf_float+0x98>
 80113be:	9b05      	ldr	r3, [sp, #20]
 80113c0:	465a      	mov	r2, fp
 80113c2:	4631      	mov	r1, r6
 80113c4:	4628      	mov	r0, r5
 80113c6:	47b8      	blx	r7
 80113c8:	3001      	adds	r0, #1
 80113ca:	f43f ae71 	beq.w	80110b0 <_printf_float+0x98>
 80113ce:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80113d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80113d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113da:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80113de:	d018      	beq.n	8011412 <_printf_float+0x3fa>
 80113e0:	464b      	mov	r3, r9
 80113e2:	f108 0201 	add.w	r2, r8, #1
 80113e6:	4631      	mov	r1, r6
 80113e8:	4628      	mov	r0, r5
 80113ea:	47b8      	blx	r7
 80113ec:	3001      	adds	r0, #1
 80113ee:	d10c      	bne.n	801140a <_printf_float+0x3f2>
 80113f0:	e65e      	b.n	80110b0 <_printf_float+0x98>
 80113f2:	2301      	movs	r3, #1
 80113f4:	465a      	mov	r2, fp
 80113f6:	4631      	mov	r1, r6
 80113f8:	4628      	mov	r0, r5
 80113fa:	47b8      	blx	r7
 80113fc:	3001      	adds	r0, #1
 80113fe:	f43f ae57 	beq.w	80110b0 <_printf_float+0x98>
 8011402:	f108 0801 	add.w	r8, r8, #1
 8011406:	45c8      	cmp	r8, r9
 8011408:	dbf3      	blt.n	80113f2 <_printf_float+0x3da>
 801140a:	4653      	mov	r3, sl
 801140c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011410:	e6dc      	b.n	80111cc <_printf_float+0x1b4>
 8011412:	f04f 0800 	mov.w	r8, #0
 8011416:	f104 0b1a 	add.w	fp, r4, #26
 801141a:	e7f4      	b.n	8011406 <_printf_float+0x3ee>
 801141c:	2301      	movs	r3, #1
 801141e:	4642      	mov	r2, r8
 8011420:	e7e1      	b.n	80113e6 <_printf_float+0x3ce>
 8011422:	2301      	movs	r3, #1
 8011424:	464a      	mov	r2, r9
 8011426:	4631      	mov	r1, r6
 8011428:	4628      	mov	r0, r5
 801142a:	47b8      	blx	r7
 801142c:	3001      	adds	r0, #1
 801142e:	f43f ae3f 	beq.w	80110b0 <_printf_float+0x98>
 8011432:	f108 0801 	add.w	r8, r8, #1
 8011436:	68e3      	ldr	r3, [r4, #12]
 8011438:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801143a:	1a5b      	subs	r3, r3, r1
 801143c:	4543      	cmp	r3, r8
 801143e:	dcf0      	bgt.n	8011422 <_printf_float+0x40a>
 8011440:	e6f8      	b.n	8011234 <_printf_float+0x21c>
 8011442:	f04f 0800 	mov.w	r8, #0
 8011446:	f104 0919 	add.w	r9, r4, #25
 801144a:	e7f4      	b.n	8011436 <_printf_float+0x41e>

0801144c <_printf_common>:
 801144c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011450:	4616      	mov	r6, r2
 8011452:	4698      	mov	r8, r3
 8011454:	688a      	ldr	r2, [r1, #8]
 8011456:	690b      	ldr	r3, [r1, #16]
 8011458:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801145c:	4293      	cmp	r3, r2
 801145e:	bfb8      	it	lt
 8011460:	4613      	movlt	r3, r2
 8011462:	6033      	str	r3, [r6, #0]
 8011464:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011468:	4607      	mov	r7, r0
 801146a:	460c      	mov	r4, r1
 801146c:	b10a      	cbz	r2, 8011472 <_printf_common+0x26>
 801146e:	3301      	adds	r3, #1
 8011470:	6033      	str	r3, [r6, #0]
 8011472:	6823      	ldr	r3, [r4, #0]
 8011474:	0699      	lsls	r1, r3, #26
 8011476:	bf42      	ittt	mi
 8011478:	6833      	ldrmi	r3, [r6, #0]
 801147a:	3302      	addmi	r3, #2
 801147c:	6033      	strmi	r3, [r6, #0]
 801147e:	6825      	ldr	r5, [r4, #0]
 8011480:	f015 0506 	ands.w	r5, r5, #6
 8011484:	d106      	bne.n	8011494 <_printf_common+0x48>
 8011486:	f104 0a19 	add.w	sl, r4, #25
 801148a:	68e3      	ldr	r3, [r4, #12]
 801148c:	6832      	ldr	r2, [r6, #0]
 801148e:	1a9b      	subs	r3, r3, r2
 8011490:	42ab      	cmp	r3, r5
 8011492:	dc26      	bgt.n	80114e2 <_printf_common+0x96>
 8011494:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011498:	6822      	ldr	r2, [r4, #0]
 801149a:	3b00      	subs	r3, #0
 801149c:	bf18      	it	ne
 801149e:	2301      	movne	r3, #1
 80114a0:	0692      	lsls	r2, r2, #26
 80114a2:	d42b      	bmi.n	80114fc <_printf_common+0xb0>
 80114a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80114a8:	4641      	mov	r1, r8
 80114aa:	4638      	mov	r0, r7
 80114ac:	47c8      	blx	r9
 80114ae:	3001      	adds	r0, #1
 80114b0:	d01e      	beq.n	80114f0 <_printf_common+0xa4>
 80114b2:	6823      	ldr	r3, [r4, #0]
 80114b4:	6922      	ldr	r2, [r4, #16]
 80114b6:	f003 0306 	and.w	r3, r3, #6
 80114ba:	2b04      	cmp	r3, #4
 80114bc:	bf02      	ittt	eq
 80114be:	68e5      	ldreq	r5, [r4, #12]
 80114c0:	6833      	ldreq	r3, [r6, #0]
 80114c2:	1aed      	subeq	r5, r5, r3
 80114c4:	68a3      	ldr	r3, [r4, #8]
 80114c6:	bf0c      	ite	eq
 80114c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80114cc:	2500      	movne	r5, #0
 80114ce:	4293      	cmp	r3, r2
 80114d0:	bfc4      	itt	gt
 80114d2:	1a9b      	subgt	r3, r3, r2
 80114d4:	18ed      	addgt	r5, r5, r3
 80114d6:	2600      	movs	r6, #0
 80114d8:	341a      	adds	r4, #26
 80114da:	42b5      	cmp	r5, r6
 80114dc:	d11a      	bne.n	8011514 <_printf_common+0xc8>
 80114de:	2000      	movs	r0, #0
 80114e0:	e008      	b.n	80114f4 <_printf_common+0xa8>
 80114e2:	2301      	movs	r3, #1
 80114e4:	4652      	mov	r2, sl
 80114e6:	4641      	mov	r1, r8
 80114e8:	4638      	mov	r0, r7
 80114ea:	47c8      	blx	r9
 80114ec:	3001      	adds	r0, #1
 80114ee:	d103      	bne.n	80114f8 <_printf_common+0xac>
 80114f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80114f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114f8:	3501      	adds	r5, #1
 80114fa:	e7c6      	b.n	801148a <_printf_common+0x3e>
 80114fc:	18e1      	adds	r1, r4, r3
 80114fe:	1c5a      	adds	r2, r3, #1
 8011500:	2030      	movs	r0, #48	@ 0x30
 8011502:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011506:	4422      	add	r2, r4
 8011508:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801150c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011510:	3302      	adds	r3, #2
 8011512:	e7c7      	b.n	80114a4 <_printf_common+0x58>
 8011514:	2301      	movs	r3, #1
 8011516:	4622      	mov	r2, r4
 8011518:	4641      	mov	r1, r8
 801151a:	4638      	mov	r0, r7
 801151c:	47c8      	blx	r9
 801151e:	3001      	adds	r0, #1
 8011520:	d0e6      	beq.n	80114f0 <_printf_common+0xa4>
 8011522:	3601      	adds	r6, #1
 8011524:	e7d9      	b.n	80114da <_printf_common+0x8e>
	...

08011528 <_printf_i>:
 8011528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801152c:	7e0f      	ldrb	r7, [r1, #24]
 801152e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011530:	2f78      	cmp	r7, #120	@ 0x78
 8011532:	4691      	mov	r9, r2
 8011534:	4680      	mov	r8, r0
 8011536:	460c      	mov	r4, r1
 8011538:	469a      	mov	sl, r3
 801153a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801153e:	d807      	bhi.n	8011550 <_printf_i+0x28>
 8011540:	2f62      	cmp	r7, #98	@ 0x62
 8011542:	d80a      	bhi.n	801155a <_printf_i+0x32>
 8011544:	2f00      	cmp	r7, #0
 8011546:	f000 80d2 	beq.w	80116ee <_printf_i+0x1c6>
 801154a:	2f58      	cmp	r7, #88	@ 0x58
 801154c:	f000 80b9 	beq.w	80116c2 <_printf_i+0x19a>
 8011550:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011554:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011558:	e03a      	b.n	80115d0 <_printf_i+0xa8>
 801155a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801155e:	2b15      	cmp	r3, #21
 8011560:	d8f6      	bhi.n	8011550 <_printf_i+0x28>
 8011562:	a101      	add	r1, pc, #4	@ (adr r1, 8011568 <_printf_i+0x40>)
 8011564:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011568:	080115c1 	.word	0x080115c1
 801156c:	080115d5 	.word	0x080115d5
 8011570:	08011551 	.word	0x08011551
 8011574:	08011551 	.word	0x08011551
 8011578:	08011551 	.word	0x08011551
 801157c:	08011551 	.word	0x08011551
 8011580:	080115d5 	.word	0x080115d5
 8011584:	08011551 	.word	0x08011551
 8011588:	08011551 	.word	0x08011551
 801158c:	08011551 	.word	0x08011551
 8011590:	08011551 	.word	0x08011551
 8011594:	080116d5 	.word	0x080116d5
 8011598:	080115ff 	.word	0x080115ff
 801159c:	0801168f 	.word	0x0801168f
 80115a0:	08011551 	.word	0x08011551
 80115a4:	08011551 	.word	0x08011551
 80115a8:	080116f7 	.word	0x080116f7
 80115ac:	08011551 	.word	0x08011551
 80115b0:	080115ff 	.word	0x080115ff
 80115b4:	08011551 	.word	0x08011551
 80115b8:	08011551 	.word	0x08011551
 80115bc:	08011697 	.word	0x08011697
 80115c0:	6833      	ldr	r3, [r6, #0]
 80115c2:	1d1a      	adds	r2, r3, #4
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	6032      	str	r2, [r6, #0]
 80115c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80115cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80115d0:	2301      	movs	r3, #1
 80115d2:	e09d      	b.n	8011710 <_printf_i+0x1e8>
 80115d4:	6833      	ldr	r3, [r6, #0]
 80115d6:	6820      	ldr	r0, [r4, #0]
 80115d8:	1d19      	adds	r1, r3, #4
 80115da:	6031      	str	r1, [r6, #0]
 80115dc:	0606      	lsls	r6, r0, #24
 80115de:	d501      	bpl.n	80115e4 <_printf_i+0xbc>
 80115e0:	681d      	ldr	r5, [r3, #0]
 80115e2:	e003      	b.n	80115ec <_printf_i+0xc4>
 80115e4:	0645      	lsls	r5, r0, #25
 80115e6:	d5fb      	bpl.n	80115e0 <_printf_i+0xb8>
 80115e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80115ec:	2d00      	cmp	r5, #0
 80115ee:	da03      	bge.n	80115f8 <_printf_i+0xd0>
 80115f0:	232d      	movs	r3, #45	@ 0x2d
 80115f2:	426d      	negs	r5, r5
 80115f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80115f8:	4859      	ldr	r0, [pc, #356]	@ (8011760 <_printf_i+0x238>)
 80115fa:	230a      	movs	r3, #10
 80115fc:	e011      	b.n	8011622 <_printf_i+0xfa>
 80115fe:	6821      	ldr	r1, [r4, #0]
 8011600:	6833      	ldr	r3, [r6, #0]
 8011602:	0608      	lsls	r0, r1, #24
 8011604:	f853 5b04 	ldr.w	r5, [r3], #4
 8011608:	d402      	bmi.n	8011610 <_printf_i+0xe8>
 801160a:	0649      	lsls	r1, r1, #25
 801160c:	bf48      	it	mi
 801160e:	b2ad      	uxthmi	r5, r5
 8011610:	2f6f      	cmp	r7, #111	@ 0x6f
 8011612:	4853      	ldr	r0, [pc, #332]	@ (8011760 <_printf_i+0x238>)
 8011614:	6033      	str	r3, [r6, #0]
 8011616:	bf14      	ite	ne
 8011618:	230a      	movne	r3, #10
 801161a:	2308      	moveq	r3, #8
 801161c:	2100      	movs	r1, #0
 801161e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011622:	6866      	ldr	r6, [r4, #4]
 8011624:	60a6      	str	r6, [r4, #8]
 8011626:	2e00      	cmp	r6, #0
 8011628:	bfa2      	ittt	ge
 801162a:	6821      	ldrge	r1, [r4, #0]
 801162c:	f021 0104 	bicge.w	r1, r1, #4
 8011630:	6021      	strge	r1, [r4, #0]
 8011632:	b90d      	cbnz	r5, 8011638 <_printf_i+0x110>
 8011634:	2e00      	cmp	r6, #0
 8011636:	d04b      	beq.n	80116d0 <_printf_i+0x1a8>
 8011638:	4616      	mov	r6, r2
 801163a:	fbb5 f1f3 	udiv	r1, r5, r3
 801163e:	fb03 5711 	mls	r7, r3, r1, r5
 8011642:	5dc7      	ldrb	r7, [r0, r7]
 8011644:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011648:	462f      	mov	r7, r5
 801164a:	42bb      	cmp	r3, r7
 801164c:	460d      	mov	r5, r1
 801164e:	d9f4      	bls.n	801163a <_printf_i+0x112>
 8011650:	2b08      	cmp	r3, #8
 8011652:	d10b      	bne.n	801166c <_printf_i+0x144>
 8011654:	6823      	ldr	r3, [r4, #0]
 8011656:	07df      	lsls	r7, r3, #31
 8011658:	d508      	bpl.n	801166c <_printf_i+0x144>
 801165a:	6923      	ldr	r3, [r4, #16]
 801165c:	6861      	ldr	r1, [r4, #4]
 801165e:	4299      	cmp	r1, r3
 8011660:	bfde      	ittt	le
 8011662:	2330      	movle	r3, #48	@ 0x30
 8011664:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011668:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801166c:	1b92      	subs	r2, r2, r6
 801166e:	6122      	str	r2, [r4, #16]
 8011670:	f8cd a000 	str.w	sl, [sp]
 8011674:	464b      	mov	r3, r9
 8011676:	aa03      	add	r2, sp, #12
 8011678:	4621      	mov	r1, r4
 801167a:	4640      	mov	r0, r8
 801167c:	f7ff fee6 	bl	801144c <_printf_common>
 8011680:	3001      	adds	r0, #1
 8011682:	d14a      	bne.n	801171a <_printf_i+0x1f2>
 8011684:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011688:	b004      	add	sp, #16
 801168a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801168e:	6823      	ldr	r3, [r4, #0]
 8011690:	f043 0320 	orr.w	r3, r3, #32
 8011694:	6023      	str	r3, [r4, #0]
 8011696:	4833      	ldr	r0, [pc, #204]	@ (8011764 <_printf_i+0x23c>)
 8011698:	2778      	movs	r7, #120	@ 0x78
 801169a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801169e:	6823      	ldr	r3, [r4, #0]
 80116a0:	6831      	ldr	r1, [r6, #0]
 80116a2:	061f      	lsls	r7, r3, #24
 80116a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80116a8:	d402      	bmi.n	80116b0 <_printf_i+0x188>
 80116aa:	065f      	lsls	r7, r3, #25
 80116ac:	bf48      	it	mi
 80116ae:	b2ad      	uxthmi	r5, r5
 80116b0:	6031      	str	r1, [r6, #0]
 80116b2:	07d9      	lsls	r1, r3, #31
 80116b4:	bf44      	itt	mi
 80116b6:	f043 0320 	orrmi.w	r3, r3, #32
 80116ba:	6023      	strmi	r3, [r4, #0]
 80116bc:	b11d      	cbz	r5, 80116c6 <_printf_i+0x19e>
 80116be:	2310      	movs	r3, #16
 80116c0:	e7ac      	b.n	801161c <_printf_i+0xf4>
 80116c2:	4827      	ldr	r0, [pc, #156]	@ (8011760 <_printf_i+0x238>)
 80116c4:	e7e9      	b.n	801169a <_printf_i+0x172>
 80116c6:	6823      	ldr	r3, [r4, #0]
 80116c8:	f023 0320 	bic.w	r3, r3, #32
 80116cc:	6023      	str	r3, [r4, #0]
 80116ce:	e7f6      	b.n	80116be <_printf_i+0x196>
 80116d0:	4616      	mov	r6, r2
 80116d2:	e7bd      	b.n	8011650 <_printf_i+0x128>
 80116d4:	6833      	ldr	r3, [r6, #0]
 80116d6:	6825      	ldr	r5, [r4, #0]
 80116d8:	6961      	ldr	r1, [r4, #20]
 80116da:	1d18      	adds	r0, r3, #4
 80116dc:	6030      	str	r0, [r6, #0]
 80116de:	062e      	lsls	r6, r5, #24
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	d501      	bpl.n	80116e8 <_printf_i+0x1c0>
 80116e4:	6019      	str	r1, [r3, #0]
 80116e6:	e002      	b.n	80116ee <_printf_i+0x1c6>
 80116e8:	0668      	lsls	r0, r5, #25
 80116ea:	d5fb      	bpl.n	80116e4 <_printf_i+0x1bc>
 80116ec:	8019      	strh	r1, [r3, #0]
 80116ee:	2300      	movs	r3, #0
 80116f0:	6123      	str	r3, [r4, #16]
 80116f2:	4616      	mov	r6, r2
 80116f4:	e7bc      	b.n	8011670 <_printf_i+0x148>
 80116f6:	6833      	ldr	r3, [r6, #0]
 80116f8:	1d1a      	adds	r2, r3, #4
 80116fa:	6032      	str	r2, [r6, #0]
 80116fc:	681e      	ldr	r6, [r3, #0]
 80116fe:	6862      	ldr	r2, [r4, #4]
 8011700:	2100      	movs	r1, #0
 8011702:	4630      	mov	r0, r6
 8011704:	f7ee fe04 	bl	8000310 <memchr>
 8011708:	b108      	cbz	r0, 801170e <_printf_i+0x1e6>
 801170a:	1b80      	subs	r0, r0, r6
 801170c:	6060      	str	r0, [r4, #4]
 801170e:	6863      	ldr	r3, [r4, #4]
 8011710:	6123      	str	r3, [r4, #16]
 8011712:	2300      	movs	r3, #0
 8011714:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011718:	e7aa      	b.n	8011670 <_printf_i+0x148>
 801171a:	6923      	ldr	r3, [r4, #16]
 801171c:	4632      	mov	r2, r6
 801171e:	4649      	mov	r1, r9
 8011720:	4640      	mov	r0, r8
 8011722:	47d0      	blx	sl
 8011724:	3001      	adds	r0, #1
 8011726:	d0ad      	beq.n	8011684 <_printf_i+0x15c>
 8011728:	6823      	ldr	r3, [r4, #0]
 801172a:	079b      	lsls	r3, r3, #30
 801172c:	d413      	bmi.n	8011756 <_printf_i+0x22e>
 801172e:	68e0      	ldr	r0, [r4, #12]
 8011730:	9b03      	ldr	r3, [sp, #12]
 8011732:	4298      	cmp	r0, r3
 8011734:	bfb8      	it	lt
 8011736:	4618      	movlt	r0, r3
 8011738:	e7a6      	b.n	8011688 <_printf_i+0x160>
 801173a:	2301      	movs	r3, #1
 801173c:	4632      	mov	r2, r6
 801173e:	4649      	mov	r1, r9
 8011740:	4640      	mov	r0, r8
 8011742:	47d0      	blx	sl
 8011744:	3001      	adds	r0, #1
 8011746:	d09d      	beq.n	8011684 <_printf_i+0x15c>
 8011748:	3501      	adds	r5, #1
 801174a:	68e3      	ldr	r3, [r4, #12]
 801174c:	9903      	ldr	r1, [sp, #12]
 801174e:	1a5b      	subs	r3, r3, r1
 8011750:	42ab      	cmp	r3, r5
 8011752:	dcf2      	bgt.n	801173a <_printf_i+0x212>
 8011754:	e7eb      	b.n	801172e <_printf_i+0x206>
 8011756:	2500      	movs	r5, #0
 8011758:	f104 0619 	add.w	r6, r4, #25
 801175c:	e7f5      	b.n	801174a <_printf_i+0x222>
 801175e:	bf00      	nop
 8011760:	08014530 	.word	0x08014530
 8011764:	08014541 	.word	0x08014541

08011768 <std>:
 8011768:	2300      	movs	r3, #0
 801176a:	b510      	push	{r4, lr}
 801176c:	4604      	mov	r4, r0
 801176e:	e9c0 3300 	strd	r3, r3, [r0]
 8011772:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011776:	6083      	str	r3, [r0, #8]
 8011778:	8181      	strh	r1, [r0, #12]
 801177a:	6643      	str	r3, [r0, #100]	@ 0x64
 801177c:	81c2      	strh	r2, [r0, #14]
 801177e:	6183      	str	r3, [r0, #24]
 8011780:	4619      	mov	r1, r3
 8011782:	2208      	movs	r2, #8
 8011784:	305c      	adds	r0, #92	@ 0x5c
 8011786:	f000 f914 	bl	80119b2 <memset>
 801178a:	4b0d      	ldr	r3, [pc, #52]	@ (80117c0 <std+0x58>)
 801178c:	6263      	str	r3, [r4, #36]	@ 0x24
 801178e:	4b0d      	ldr	r3, [pc, #52]	@ (80117c4 <std+0x5c>)
 8011790:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011792:	4b0d      	ldr	r3, [pc, #52]	@ (80117c8 <std+0x60>)
 8011794:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011796:	4b0d      	ldr	r3, [pc, #52]	@ (80117cc <std+0x64>)
 8011798:	6323      	str	r3, [r4, #48]	@ 0x30
 801179a:	4b0d      	ldr	r3, [pc, #52]	@ (80117d0 <std+0x68>)
 801179c:	6224      	str	r4, [r4, #32]
 801179e:	429c      	cmp	r4, r3
 80117a0:	d006      	beq.n	80117b0 <std+0x48>
 80117a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80117a6:	4294      	cmp	r4, r2
 80117a8:	d002      	beq.n	80117b0 <std+0x48>
 80117aa:	33d0      	adds	r3, #208	@ 0xd0
 80117ac:	429c      	cmp	r4, r3
 80117ae:	d105      	bne.n	80117bc <std+0x54>
 80117b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80117b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117b8:	f000 b986 	b.w	8011ac8 <__retarget_lock_init_recursive>
 80117bc:	bd10      	pop	{r4, pc}
 80117be:	bf00      	nop
 80117c0:	0801192d 	.word	0x0801192d
 80117c4:	0801194f 	.word	0x0801194f
 80117c8:	08011987 	.word	0x08011987
 80117cc:	080119ab 	.word	0x080119ab
 80117d0:	24001070 	.word	0x24001070

080117d4 <stdio_exit_handler>:
 80117d4:	4a02      	ldr	r2, [pc, #8]	@ (80117e0 <stdio_exit_handler+0xc>)
 80117d6:	4903      	ldr	r1, [pc, #12]	@ (80117e4 <stdio_exit_handler+0x10>)
 80117d8:	4803      	ldr	r0, [pc, #12]	@ (80117e8 <stdio_exit_handler+0x14>)
 80117da:	f000 b869 	b.w	80118b0 <_fwalk_sglue>
 80117de:	bf00      	nop
 80117e0:	24000048 	.word	0x24000048
 80117e4:	08013359 	.word	0x08013359
 80117e8:	24000058 	.word	0x24000058

080117ec <cleanup_stdio>:
 80117ec:	6841      	ldr	r1, [r0, #4]
 80117ee:	4b0c      	ldr	r3, [pc, #48]	@ (8011820 <cleanup_stdio+0x34>)
 80117f0:	4299      	cmp	r1, r3
 80117f2:	b510      	push	{r4, lr}
 80117f4:	4604      	mov	r4, r0
 80117f6:	d001      	beq.n	80117fc <cleanup_stdio+0x10>
 80117f8:	f001 fdae 	bl	8013358 <_fflush_r>
 80117fc:	68a1      	ldr	r1, [r4, #8]
 80117fe:	4b09      	ldr	r3, [pc, #36]	@ (8011824 <cleanup_stdio+0x38>)
 8011800:	4299      	cmp	r1, r3
 8011802:	d002      	beq.n	801180a <cleanup_stdio+0x1e>
 8011804:	4620      	mov	r0, r4
 8011806:	f001 fda7 	bl	8013358 <_fflush_r>
 801180a:	68e1      	ldr	r1, [r4, #12]
 801180c:	4b06      	ldr	r3, [pc, #24]	@ (8011828 <cleanup_stdio+0x3c>)
 801180e:	4299      	cmp	r1, r3
 8011810:	d004      	beq.n	801181c <cleanup_stdio+0x30>
 8011812:	4620      	mov	r0, r4
 8011814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011818:	f001 bd9e 	b.w	8013358 <_fflush_r>
 801181c:	bd10      	pop	{r4, pc}
 801181e:	bf00      	nop
 8011820:	24001070 	.word	0x24001070
 8011824:	240010d8 	.word	0x240010d8
 8011828:	24001140 	.word	0x24001140

0801182c <global_stdio_init.part.0>:
 801182c:	b510      	push	{r4, lr}
 801182e:	4b0b      	ldr	r3, [pc, #44]	@ (801185c <global_stdio_init.part.0+0x30>)
 8011830:	4c0b      	ldr	r4, [pc, #44]	@ (8011860 <global_stdio_init.part.0+0x34>)
 8011832:	4a0c      	ldr	r2, [pc, #48]	@ (8011864 <global_stdio_init.part.0+0x38>)
 8011834:	601a      	str	r2, [r3, #0]
 8011836:	4620      	mov	r0, r4
 8011838:	2200      	movs	r2, #0
 801183a:	2104      	movs	r1, #4
 801183c:	f7ff ff94 	bl	8011768 <std>
 8011840:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011844:	2201      	movs	r2, #1
 8011846:	2109      	movs	r1, #9
 8011848:	f7ff ff8e 	bl	8011768 <std>
 801184c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011850:	2202      	movs	r2, #2
 8011852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011856:	2112      	movs	r1, #18
 8011858:	f7ff bf86 	b.w	8011768 <std>
 801185c:	240011a8 	.word	0x240011a8
 8011860:	24001070 	.word	0x24001070
 8011864:	080117d5 	.word	0x080117d5

08011868 <__sfp_lock_acquire>:
 8011868:	4801      	ldr	r0, [pc, #4]	@ (8011870 <__sfp_lock_acquire+0x8>)
 801186a:	f000 b92e 	b.w	8011aca <__retarget_lock_acquire_recursive>
 801186e:	bf00      	nop
 8011870:	240011b1 	.word	0x240011b1

08011874 <__sfp_lock_release>:
 8011874:	4801      	ldr	r0, [pc, #4]	@ (801187c <__sfp_lock_release+0x8>)
 8011876:	f000 b929 	b.w	8011acc <__retarget_lock_release_recursive>
 801187a:	bf00      	nop
 801187c:	240011b1 	.word	0x240011b1

08011880 <__sinit>:
 8011880:	b510      	push	{r4, lr}
 8011882:	4604      	mov	r4, r0
 8011884:	f7ff fff0 	bl	8011868 <__sfp_lock_acquire>
 8011888:	6a23      	ldr	r3, [r4, #32]
 801188a:	b11b      	cbz	r3, 8011894 <__sinit+0x14>
 801188c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011890:	f7ff bff0 	b.w	8011874 <__sfp_lock_release>
 8011894:	4b04      	ldr	r3, [pc, #16]	@ (80118a8 <__sinit+0x28>)
 8011896:	6223      	str	r3, [r4, #32]
 8011898:	4b04      	ldr	r3, [pc, #16]	@ (80118ac <__sinit+0x2c>)
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d1f5      	bne.n	801188c <__sinit+0xc>
 80118a0:	f7ff ffc4 	bl	801182c <global_stdio_init.part.0>
 80118a4:	e7f2      	b.n	801188c <__sinit+0xc>
 80118a6:	bf00      	nop
 80118a8:	080117ed 	.word	0x080117ed
 80118ac:	240011a8 	.word	0x240011a8

080118b0 <_fwalk_sglue>:
 80118b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118b4:	4607      	mov	r7, r0
 80118b6:	4688      	mov	r8, r1
 80118b8:	4614      	mov	r4, r2
 80118ba:	2600      	movs	r6, #0
 80118bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80118c0:	f1b9 0901 	subs.w	r9, r9, #1
 80118c4:	d505      	bpl.n	80118d2 <_fwalk_sglue+0x22>
 80118c6:	6824      	ldr	r4, [r4, #0]
 80118c8:	2c00      	cmp	r4, #0
 80118ca:	d1f7      	bne.n	80118bc <_fwalk_sglue+0xc>
 80118cc:	4630      	mov	r0, r6
 80118ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118d2:	89ab      	ldrh	r3, [r5, #12]
 80118d4:	2b01      	cmp	r3, #1
 80118d6:	d907      	bls.n	80118e8 <_fwalk_sglue+0x38>
 80118d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80118dc:	3301      	adds	r3, #1
 80118de:	d003      	beq.n	80118e8 <_fwalk_sglue+0x38>
 80118e0:	4629      	mov	r1, r5
 80118e2:	4638      	mov	r0, r7
 80118e4:	47c0      	blx	r8
 80118e6:	4306      	orrs	r6, r0
 80118e8:	3568      	adds	r5, #104	@ 0x68
 80118ea:	e7e9      	b.n	80118c0 <_fwalk_sglue+0x10>

080118ec <siprintf>:
 80118ec:	b40e      	push	{r1, r2, r3}
 80118ee:	b500      	push	{lr}
 80118f0:	b09c      	sub	sp, #112	@ 0x70
 80118f2:	ab1d      	add	r3, sp, #116	@ 0x74
 80118f4:	9002      	str	r0, [sp, #8]
 80118f6:	9006      	str	r0, [sp, #24]
 80118f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80118fc:	4809      	ldr	r0, [pc, #36]	@ (8011924 <siprintf+0x38>)
 80118fe:	9107      	str	r1, [sp, #28]
 8011900:	9104      	str	r1, [sp, #16]
 8011902:	4909      	ldr	r1, [pc, #36]	@ (8011928 <siprintf+0x3c>)
 8011904:	f853 2b04 	ldr.w	r2, [r3], #4
 8011908:	9105      	str	r1, [sp, #20]
 801190a:	6800      	ldr	r0, [r0, #0]
 801190c:	9301      	str	r3, [sp, #4]
 801190e:	a902      	add	r1, sp, #8
 8011910:	f001 fba2 	bl	8013058 <_svfiprintf_r>
 8011914:	9b02      	ldr	r3, [sp, #8]
 8011916:	2200      	movs	r2, #0
 8011918:	701a      	strb	r2, [r3, #0]
 801191a:	b01c      	add	sp, #112	@ 0x70
 801191c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011920:	b003      	add	sp, #12
 8011922:	4770      	bx	lr
 8011924:	24000054 	.word	0x24000054
 8011928:	ffff0208 	.word	0xffff0208

0801192c <__sread>:
 801192c:	b510      	push	{r4, lr}
 801192e:	460c      	mov	r4, r1
 8011930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011934:	f000 f87a 	bl	8011a2c <_read_r>
 8011938:	2800      	cmp	r0, #0
 801193a:	bfab      	itete	ge
 801193c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801193e:	89a3      	ldrhlt	r3, [r4, #12]
 8011940:	181b      	addge	r3, r3, r0
 8011942:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011946:	bfac      	ite	ge
 8011948:	6563      	strge	r3, [r4, #84]	@ 0x54
 801194a:	81a3      	strhlt	r3, [r4, #12]
 801194c:	bd10      	pop	{r4, pc}

0801194e <__swrite>:
 801194e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011952:	461f      	mov	r7, r3
 8011954:	898b      	ldrh	r3, [r1, #12]
 8011956:	05db      	lsls	r3, r3, #23
 8011958:	4605      	mov	r5, r0
 801195a:	460c      	mov	r4, r1
 801195c:	4616      	mov	r6, r2
 801195e:	d505      	bpl.n	801196c <__swrite+0x1e>
 8011960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011964:	2302      	movs	r3, #2
 8011966:	2200      	movs	r2, #0
 8011968:	f000 f84e 	bl	8011a08 <_lseek_r>
 801196c:	89a3      	ldrh	r3, [r4, #12]
 801196e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011972:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011976:	81a3      	strh	r3, [r4, #12]
 8011978:	4632      	mov	r2, r6
 801197a:	463b      	mov	r3, r7
 801197c:	4628      	mov	r0, r5
 801197e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011982:	f000 b865 	b.w	8011a50 <_write_r>

08011986 <__sseek>:
 8011986:	b510      	push	{r4, lr}
 8011988:	460c      	mov	r4, r1
 801198a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801198e:	f000 f83b 	bl	8011a08 <_lseek_r>
 8011992:	1c43      	adds	r3, r0, #1
 8011994:	89a3      	ldrh	r3, [r4, #12]
 8011996:	bf15      	itete	ne
 8011998:	6560      	strne	r0, [r4, #84]	@ 0x54
 801199a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801199e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80119a2:	81a3      	strheq	r3, [r4, #12]
 80119a4:	bf18      	it	ne
 80119a6:	81a3      	strhne	r3, [r4, #12]
 80119a8:	bd10      	pop	{r4, pc}

080119aa <__sclose>:
 80119aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119ae:	f000 b81b 	b.w	80119e8 <_close_r>

080119b2 <memset>:
 80119b2:	4402      	add	r2, r0
 80119b4:	4603      	mov	r3, r0
 80119b6:	4293      	cmp	r3, r2
 80119b8:	d100      	bne.n	80119bc <memset+0xa>
 80119ba:	4770      	bx	lr
 80119bc:	f803 1b01 	strb.w	r1, [r3], #1
 80119c0:	e7f9      	b.n	80119b6 <memset+0x4>

080119c2 <strcat>:
 80119c2:	b510      	push	{r4, lr}
 80119c4:	4602      	mov	r2, r0
 80119c6:	7814      	ldrb	r4, [r2, #0]
 80119c8:	4613      	mov	r3, r2
 80119ca:	3201      	adds	r2, #1
 80119cc:	2c00      	cmp	r4, #0
 80119ce:	d1fa      	bne.n	80119c6 <strcat+0x4>
 80119d0:	3b01      	subs	r3, #1
 80119d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80119d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80119da:	2a00      	cmp	r2, #0
 80119dc:	d1f9      	bne.n	80119d2 <strcat+0x10>
 80119de:	bd10      	pop	{r4, pc}

080119e0 <_localeconv_r>:
 80119e0:	4800      	ldr	r0, [pc, #0]	@ (80119e4 <_localeconv_r+0x4>)
 80119e2:	4770      	bx	lr
 80119e4:	24000194 	.word	0x24000194

080119e8 <_close_r>:
 80119e8:	b538      	push	{r3, r4, r5, lr}
 80119ea:	4d06      	ldr	r5, [pc, #24]	@ (8011a04 <_close_r+0x1c>)
 80119ec:	2300      	movs	r3, #0
 80119ee:	4604      	mov	r4, r0
 80119f0:	4608      	mov	r0, r1
 80119f2:	602b      	str	r3, [r5, #0]
 80119f4:	f7f2 fb66 	bl	80040c4 <_close>
 80119f8:	1c43      	adds	r3, r0, #1
 80119fa:	d102      	bne.n	8011a02 <_close_r+0x1a>
 80119fc:	682b      	ldr	r3, [r5, #0]
 80119fe:	b103      	cbz	r3, 8011a02 <_close_r+0x1a>
 8011a00:	6023      	str	r3, [r4, #0]
 8011a02:	bd38      	pop	{r3, r4, r5, pc}
 8011a04:	240011ac 	.word	0x240011ac

08011a08 <_lseek_r>:
 8011a08:	b538      	push	{r3, r4, r5, lr}
 8011a0a:	4d07      	ldr	r5, [pc, #28]	@ (8011a28 <_lseek_r+0x20>)
 8011a0c:	4604      	mov	r4, r0
 8011a0e:	4608      	mov	r0, r1
 8011a10:	4611      	mov	r1, r2
 8011a12:	2200      	movs	r2, #0
 8011a14:	602a      	str	r2, [r5, #0]
 8011a16:	461a      	mov	r2, r3
 8011a18:	f7f2 fb7b 	bl	8004112 <_lseek>
 8011a1c:	1c43      	adds	r3, r0, #1
 8011a1e:	d102      	bne.n	8011a26 <_lseek_r+0x1e>
 8011a20:	682b      	ldr	r3, [r5, #0]
 8011a22:	b103      	cbz	r3, 8011a26 <_lseek_r+0x1e>
 8011a24:	6023      	str	r3, [r4, #0]
 8011a26:	bd38      	pop	{r3, r4, r5, pc}
 8011a28:	240011ac 	.word	0x240011ac

08011a2c <_read_r>:
 8011a2c:	b538      	push	{r3, r4, r5, lr}
 8011a2e:	4d07      	ldr	r5, [pc, #28]	@ (8011a4c <_read_r+0x20>)
 8011a30:	4604      	mov	r4, r0
 8011a32:	4608      	mov	r0, r1
 8011a34:	4611      	mov	r1, r2
 8011a36:	2200      	movs	r2, #0
 8011a38:	602a      	str	r2, [r5, #0]
 8011a3a:	461a      	mov	r2, r3
 8011a3c:	f7f2 fb09 	bl	8004052 <_read>
 8011a40:	1c43      	adds	r3, r0, #1
 8011a42:	d102      	bne.n	8011a4a <_read_r+0x1e>
 8011a44:	682b      	ldr	r3, [r5, #0]
 8011a46:	b103      	cbz	r3, 8011a4a <_read_r+0x1e>
 8011a48:	6023      	str	r3, [r4, #0]
 8011a4a:	bd38      	pop	{r3, r4, r5, pc}
 8011a4c:	240011ac 	.word	0x240011ac

08011a50 <_write_r>:
 8011a50:	b538      	push	{r3, r4, r5, lr}
 8011a52:	4d07      	ldr	r5, [pc, #28]	@ (8011a70 <_write_r+0x20>)
 8011a54:	4604      	mov	r4, r0
 8011a56:	4608      	mov	r0, r1
 8011a58:	4611      	mov	r1, r2
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	602a      	str	r2, [r5, #0]
 8011a5e:	461a      	mov	r2, r3
 8011a60:	f7f2 fb14 	bl	800408c <_write>
 8011a64:	1c43      	adds	r3, r0, #1
 8011a66:	d102      	bne.n	8011a6e <_write_r+0x1e>
 8011a68:	682b      	ldr	r3, [r5, #0]
 8011a6a:	b103      	cbz	r3, 8011a6e <_write_r+0x1e>
 8011a6c:	6023      	str	r3, [r4, #0]
 8011a6e:	bd38      	pop	{r3, r4, r5, pc}
 8011a70:	240011ac 	.word	0x240011ac

08011a74 <__errno>:
 8011a74:	4b01      	ldr	r3, [pc, #4]	@ (8011a7c <__errno+0x8>)
 8011a76:	6818      	ldr	r0, [r3, #0]
 8011a78:	4770      	bx	lr
 8011a7a:	bf00      	nop
 8011a7c:	24000054 	.word	0x24000054

08011a80 <__libc_init_array>:
 8011a80:	b570      	push	{r4, r5, r6, lr}
 8011a82:	4d0d      	ldr	r5, [pc, #52]	@ (8011ab8 <__libc_init_array+0x38>)
 8011a84:	4c0d      	ldr	r4, [pc, #52]	@ (8011abc <__libc_init_array+0x3c>)
 8011a86:	1b64      	subs	r4, r4, r5
 8011a88:	10a4      	asrs	r4, r4, #2
 8011a8a:	2600      	movs	r6, #0
 8011a8c:	42a6      	cmp	r6, r4
 8011a8e:	d109      	bne.n	8011aa4 <__libc_init_array+0x24>
 8011a90:	4d0b      	ldr	r5, [pc, #44]	@ (8011ac0 <__libc_init_array+0x40>)
 8011a92:	4c0c      	ldr	r4, [pc, #48]	@ (8011ac4 <__libc_init_array+0x44>)
 8011a94:	f001 fffe 	bl	8013a94 <_init>
 8011a98:	1b64      	subs	r4, r4, r5
 8011a9a:	10a4      	asrs	r4, r4, #2
 8011a9c:	2600      	movs	r6, #0
 8011a9e:	42a6      	cmp	r6, r4
 8011aa0:	d105      	bne.n	8011aae <__libc_init_array+0x2e>
 8011aa2:	bd70      	pop	{r4, r5, r6, pc}
 8011aa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8011aa8:	4798      	blx	r3
 8011aaa:	3601      	adds	r6, #1
 8011aac:	e7ee      	b.n	8011a8c <__libc_init_array+0xc>
 8011aae:	f855 3b04 	ldr.w	r3, [r5], #4
 8011ab2:	4798      	blx	r3
 8011ab4:	3601      	adds	r6, #1
 8011ab6:	e7f2      	b.n	8011a9e <__libc_init_array+0x1e>
 8011ab8:	08014798 	.word	0x08014798
 8011abc:	08014798 	.word	0x08014798
 8011ac0:	08014798 	.word	0x08014798
 8011ac4:	0801479c 	.word	0x0801479c

08011ac8 <__retarget_lock_init_recursive>:
 8011ac8:	4770      	bx	lr

08011aca <__retarget_lock_acquire_recursive>:
 8011aca:	4770      	bx	lr

08011acc <__retarget_lock_release_recursive>:
 8011acc:	4770      	bx	lr

08011ace <strcpy>:
 8011ace:	4603      	mov	r3, r0
 8011ad0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011ad4:	f803 2b01 	strb.w	r2, [r3], #1
 8011ad8:	2a00      	cmp	r2, #0
 8011ada:	d1f9      	bne.n	8011ad0 <strcpy+0x2>
 8011adc:	4770      	bx	lr

08011ade <quorem>:
 8011ade:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ae2:	6903      	ldr	r3, [r0, #16]
 8011ae4:	690c      	ldr	r4, [r1, #16]
 8011ae6:	42a3      	cmp	r3, r4
 8011ae8:	4607      	mov	r7, r0
 8011aea:	db7e      	blt.n	8011bea <quorem+0x10c>
 8011aec:	3c01      	subs	r4, #1
 8011aee:	f101 0814 	add.w	r8, r1, #20
 8011af2:	00a3      	lsls	r3, r4, #2
 8011af4:	f100 0514 	add.w	r5, r0, #20
 8011af8:	9300      	str	r3, [sp, #0]
 8011afa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011afe:	9301      	str	r3, [sp, #4]
 8011b00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011b04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011b08:	3301      	adds	r3, #1
 8011b0a:	429a      	cmp	r2, r3
 8011b0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011b10:	fbb2 f6f3 	udiv	r6, r2, r3
 8011b14:	d32e      	bcc.n	8011b74 <quorem+0x96>
 8011b16:	f04f 0a00 	mov.w	sl, #0
 8011b1a:	46c4      	mov	ip, r8
 8011b1c:	46ae      	mov	lr, r5
 8011b1e:	46d3      	mov	fp, sl
 8011b20:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011b24:	b298      	uxth	r0, r3
 8011b26:	fb06 a000 	mla	r0, r6, r0, sl
 8011b2a:	0c02      	lsrs	r2, r0, #16
 8011b2c:	0c1b      	lsrs	r3, r3, #16
 8011b2e:	fb06 2303 	mla	r3, r6, r3, r2
 8011b32:	f8de 2000 	ldr.w	r2, [lr]
 8011b36:	b280      	uxth	r0, r0
 8011b38:	b292      	uxth	r2, r2
 8011b3a:	1a12      	subs	r2, r2, r0
 8011b3c:	445a      	add	r2, fp
 8011b3e:	f8de 0000 	ldr.w	r0, [lr]
 8011b42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011b46:	b29b      	uxth	r3, r3
 8011b48:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011b4c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011b50:	b292      	uxth	r2, r2
 8011b52:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011b56:	45e1      	cmp	r9, ip
 8011b58:	f84e 2b04 	str.w	r2, [lr], #4
 8011b5c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011b60:	d2de      	bcs.n	8011b20 <quorem+0x42>
 8011b62:	9b00      	ldr	r3, [sp, #0]
 8011b64:	58eb      	ldr	r3, [r5, r3]
 8011b66:	b92b      	cbnz	r3, 8011b74 <quorem+0x96>
 8011b68:	9b01      	ldr	r3, [sp, #4]
 8011b6a:	3b04      	subs	r3, #4
 8011b6c:	429d      	cmp	r5, r3
 8011b6e:	461a      	mov	r2, r3
 8011b70:	d32f      	bcc.n	8011bd2 <quorem+0xf4>
 8011b72:	613c      	str	r4, [r7, #16]
 8011b74:	4638      	mov	r0, r7
 8011b76:	f001 f90b 	bl	8012d90 <__mcmp>
 8011b7a:	2800      	cmp	r0, #0
 8011b7c:	db25      	blt.n	8011bca <quorem+0xec>
 8011b7e:	4629      	mov	r1, r5
 8011b80:	2000      	movs	r0, #0
 8011b82:	f858 2b04 	ldr.w	r2, [r8], #4
 8011b86:	f8d1 c000 	ldr.w	ip, [r1]
 8011b8a:	fa1f fe82 	uxth.w	lr, r2
 8011b8e:	fa1f f38c 	uxth.w	r3, ip
 8011b92:	eba3 030e 	sub.w	r3, r3, lr
 8011b96:	4403      	add	r3, r0
 8011b98:	0c12      	lsrs	r2, r2, #16
 8011b9a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011b9e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011ba2:	b29b      	uxth	r3, r3
 8011ba4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011ba8:	45c1      	cmp	r9, r8
 8011baa:	f841 3b04 	str.w	r3, [r1], #4
 8011bae:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011bb2:	d2e6      	bcs.n	8011b82 <quorem+0xa4>
 8011bb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011bb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011bbc:	b922      	cbnz	r2, 8011bc8 <quorem+0xea>
 8011bbe:	3b04      	subs	r3, #4
 8011bc0:	429d      	cmp	r5, r3
 8011bc2:	461a      	mov	r2, r3
 8011bc4:	d30b      	bcc.n	8011bde <quorem+0x100>
 8011bc6:	613c      	str	r4, [r7, #16]
 8011bc8:	3601      	adds	r6, #1
 8011bca:	4630      	mov	r0, r6
 8011bcc:	b003      	add	sp, #12
 8011bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bd2:	6812      	ldr	r2, [r2, #0]
 8011bd4:	3b04      	subs	r3, #4
 8011bd6:	2a00      	cmp	r2, #0
 8011bd8:	d1cb      	bne.n	8011b72 <quorem+0x94>
 8011bda:	3c01      	subs	r4, #1
 8011bdc:	e7c6      	b.n	8011b6c <quorem+0x8e>
 8011bde:	6812      	ldr	r2, [r2, #0]
 8011be0:	3b04      	subs	r3, #4
 8011be2:	2a00      	cmp	r2, #0
 8011be4:	d1ef      	bne.n	8011bc6 <quorem+0xe8>
 8011be6:	3c01      	subs	r4, #1
 8011be8:	e7ea      	b.n	8011bc0 <quorem+0xe2>
 8011bea:	2000      	movs	r0, #0
 8011bec:	e7ee      	b.n	8011bcc <quorem+0xee>
	...

08011bf0 <_dtoa_r>:
 8011bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bf4:	ed2d 8b02 	vpush	{d8}
 8011bf8:	69c7      	ldr	r7, [r0, #28]
 8011bfa:	b091      	sub	sp, #68	@ 0x44
 8011bfc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011c00:	ec55 4b10 	vmov	r4, r5, d0
 8011c04:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8011c06:	9107      	str	r1, [sp, #28]
 8011c08:	4681      	mov	r9, r0
 8011c0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8011c0c:	930d      	str	r3, [sp, #52]	@ 0x34
 8011c0e:	b97f      	cbnz	r7, 8011c30 <_dtoa_r+0x40>
 8011c10:	2010      	movs	r0, #16
 8011c12:	f000 fd8d 	bl	8012730 <malloc>
 8011c16:	4602      	mov	r2, r0
 8011c18:	f8c9 001c 	str.w	r0, [r9, #28]
 8011c1c:	b920      	cbnz	r0, 8011c28 <_dtoa_r+0x38>
 8011c1e:	4ba0      	ldr	r3, [pc, #640]	@ (8011ea0 <_dtoa_r+0x2b0>)
 8011c20:	21ef      	movs	r1, #239	@ 0xef
 8011c22:	48a0      	ldr	r0, [pc, #640]	@ (8011ea4 <_dtoa_r+0x2b4>)
 8011c24:	f001 fbf8 	bl	8013418 <__assert_func>
 8011c28:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011c2c:	6007      	str	r7, [r0, #0]
 8011c2e:	60c7      	str	r7, [r0, #12]
 8011c30:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011c34:	6819      	ldr	r1, [r3, #0]
 8011c36:	b159      	cbz	r1, 8011c50 <_dtoa_r+0x60>
 8011c38:	685a      	ldr	r2, [r3, #4]
 8011c3a:	604a      	str	r2, [r1, #4]
 8011c3c:	2301      	movs	r3, #1
 8011c3e:	4093      	lsls	r3, r2
 8011c40:	608b      	str	r3, [r1, #8]
 8011c42:	4648      	mov	r0, r9
 8011c44:	f000 fe6a 	bl	801291c <_Bfree>
 8011c48:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011c4c:	2200      	movs	r2, #0
 8011c4e:	601a      	str	r2, [r3, #0]
 8011c50:	1e2b      	subs	r3, r5, #0
 8011c52:	bfbb      	ittet	lt
 8011c54:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011c58:	9303      	strlt	r3, [sp, #12]
 8011c5a:	2300      	movge	r3, #0
 8011c5c:	2201      	movlt	r2, #1
 8011c5e:	bfac      	ite	ge
 8011c60:	6033      	strge	r3, [r6, #0]
 8011c62:	6032      	strlt	r2, [r6, #0]
 8011c64:	4b90      	ldr	r3, [pc, #576]	@ (8011ea8 <_dtoa_r+0x2b8>)
 8011c66:	9e03      	ldr	r6, [sp, #12]
 8011c68:	43b3      	bics	r3, r6
 8011c6a:	d110      	bne.n	8011c8e <_dtoa_r+0x9e>
 8011c6c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011c6e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011c72:	6013      	str	r3, [r2, #0]
 8011c74:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8011c78:	4323      	orrs	r3, r4
 8011c7a:	f000 84de 	beq.w	801263a <_dtoa_r+0xa4a>
 8011c7e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011c80:	4f8a      	ldr	r7, [pc, #552]	@ (8011eac <_dtoa_r+0x2bc>)
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	f000 84e0 	beq.w	8012648 <_dtoa_r+0xa58>
 8011c88:	1cfb      	adds	r3, r7, #3
 8011c8a:	f000 bcdb 	b.w	8012644 <_dtoa_r+0xa54>
 8011c8e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8011c92:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c9a:	d10a      	bne.n	8011cb2 <_dtoa_r+0xc2>
 8011c9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011c9e:	2301      	movs	r3, #1
 8011ca0:	6013      	str	r3, [r2, #0]
 8011ca2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011ca4:	b113      	cbz	r3, 8011cac <_dtoa_r+0xbc>
 8011ca6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8011ca8:	4b81      	ldr	r3, [pc, #516]	@ (8011eb0 <_dtoa_r+0x2c0>)
 8011caa:	6013      	str	r3, [r2, #0]
 8011cac:	4f81      	ldr	r7, [pc, #516]	@ (8011eb4 <_dtoa_r+0x2c4>)
 8011cae:	f000 bccb 	b.w	8012648 <_dtoa_r+0xa58>
 8011cb2:	aa0e      	add	r2, sp, #56	@ 0x38
 8011cb4:	a90f      	add	r1, sp, #60	@ 0x3c
 8011cb6:	4648      	mov	r0, r9
 8011cb8:	eeb0 0b48 	vmov.f64	d0, d8
 8011cbc:	f001 f918 	bl	8012ef0 <__d2b>
 8011cc0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8011cc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011cc6:	9001      	str	r0, [sp, #4]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d045      	beq.n	8011d58 <_dtoa_r+0x168>
 8011ccc:	eeb0 7b48 	vmov.f64	d7, d8
 8011cd0:	ee18 1a90 	vmov	r1, s17
 8011cd4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8011cd8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8011cdc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8011ce0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8011ce4:	2500      	movs	r5, #0
 8011ce6:	ee07 1a90 	vmov	s15, r1
 8011cea:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8011cee:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8011e88 <_dtoa_r+0x298>
 8011cf2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011cf6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8011e90 <_dtoa_r+0x2a0>
 8011cfa:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011cfe:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8011e98 <_dtoa_r+0x2a8>
 8011d02:	ee07 3a90 	vmov	s15, r3
 8011d06:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8011d0a:	eeb0 7b46 	vmov.f64	d7, d6
 8011d0e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011d12:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8011d16:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8011d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d1e:	ee16 8a90 	vmov	r8, s13
 8011d22:	d508      	bpl.n	8011d36 <_dtoa_r+0x146>
 8011d24:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8011d28:	eeb4 6b47 	vcmp.f64	d6, d7
 8011d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d30:	bf18      	it	ne
 8011d32:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 8011d36:	f1b8 0f16 	cmp.w	r8, #22
 8011d3a:	d82b      	bhi.n	8011d94 <_dtoa_r+0x1a4>
 8011d3c:	495e      	ldr	r1, [pc, #376]	@ (8011eb8 <_dtoa_r+0x2c8>)
 8011d3e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8011d42:	ed91 7b00 	vldr	d7, [r1]
 8011d46:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d4e:	d501      	bpl.n	8011d54 <_dtoa_r+0x164>
 8011d50:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8011d54:	2100      	movs	r1, #0
 8011d56:	e01e      	b.n	8011d96 <_dtoa_r+0x1a6>
 8011d58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d5a:	4413      	add	r3, r2
 8011d5c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8011d60:	2920      	cmp	r1, #32
 8011d62:	bfc1      	itttt	gt
 8011d64:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8011d68:	408e      	lslgt	r6, r1
 8011d6a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8011d6e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8011d72:	bfd6      	itet	le
 8011d74:	f1c1 0120 	rsble	r1, r1, #32
 8011d78:	4331      	orrgt	r1, r6
 8011d7a:	fa04 f101 	lslle.w	r1, r4, r1
 8011d7e:	ee07 1a90 	vmov	s15, r1
 8011d82:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011d86:	3b01      	subs	r3, #1
 8011d88:	ee17 1a90 	vmov	r1, s15
 8011d8c:	2501      	movs	r5, #1
 8011d8e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8011d92:	e7a8      	b.n	8011ce6 <_dtoa_r+0xf6>
 8011d94:	2101      	movs	r1, #1
 8011d96:	1ad2      	subs	r2, r2, r3
 8011d98:	1e53      	subs	r3, r2, #1
 8011d9a:	9306      	str	r3, [sp, #24]
 8011d9c:	bf45      	ittet	mi
 8011d9e:	f1c2 0301 	rsbmi	r3, r2, #1
 8011da2:	9305      	strmi	r3, [sp, #20]
 8011da4:	2300      	movpl	r3, #0
 8011da6:	2300      	movmi	r3, #0
 8011da8:	bf4c      	ite	mi
 8011daa:	9306      	strmi	r3, [sp, #24]
 8011dac:	9305      	strpl	r3, [sp, #20]
 8011dae:	f1b8 0f00 	cmp.w	r8, #0
 8011db2:	910c      	str	r1, [sp, #48]	@ 0x30
 8011db4:	db18      	blt.n	8011de8 <_dtoa_r+0x1f8>
 8011db6:	9b06      	ldr	r3, [sp, #24]
 8011db8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8011dbc:	4443      	add	r3, r8
 8011dbe:	9306      	str	r3, [sp, #24]
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	9a07      	ldr	r2, [sp, #28]
 8011dc4:	2a09      	cmp	r2, #9
 8011dc6:	d849      	bhi.n	8011e5c <_dtoa_r+0x26c>
 8011dc8:	2a05      	cmp	r2, #5
 8011dca:	bfc4      	itt	gt
 8011dcc:	3a04      	subgt	r2, #4
 8011dce:	9207      	strgt	r2, [sp, #28]
 8011dd0:	9a07      	ldr	r2, [sp, #28]
 8011dd2:	f1a2 0202 	sub.w	r2, r2, #2
 8011dd6:	bfcc      	ite	gt
 8011dd8:	2400      	movgt	r4, #0
 8011dda:	2401      	movle	r4, #1
 8011ddc:	2a03      	cmp	r2, #3
 8011dde:	d848      	bhi.n	8011e72 <_dtoa_r+0x282>
 8011de0:	e8df f002 	tbb	[pc, r2]
 8011de4:	3a2c2e0b 	.word	0x3a2c2e0b
 8011de8:	9b05      	ldr	r3, [sp, #20]
 8011dea:	2200      	movs	r2, #0
 8011dec:	eba3 0308 	sub.w	r3, r3, r8
 8011df0:	9305      	str	r3, [sp, #20]
 8011df2:	920a      	str	r2, [sp, #40]	@ 0x28
 8011df4:	f1c8 0300 	rsb	r3, r8, #0
 8011df8:	e7e3      	b.n	8011dc2 <_dtoa_r+0x1d2>
 8011dfa:	2200      	movs	r2, #0
 8011dfc:	9208      	str	r2, [sp, #32]
 8011dfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011e00:	2a00      	cmp	r2, #0
 8011e02:	dc39      	bgt.n	8011e78 <_dtoa_r+0x288>
 8011e04:	f04f 0b01 	mov.w	fp, #1
 8011e08:	46da      	mov	sl, fp
 8011e0a:	465a      	mov	r2, fp
 8011e0c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8011e10:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8011e14:	2100      	movs	r1, #0
 8011e16:	2004      	movs	r0, #4
 8011e18:	f100 0614 	add.w	r6, r0, #20
 8011e1c:	4296      	cmp	r6, r2
 8011e1e:	d930      	bls.n	8011e82 <_dtoa_r+0x292>
 8011e20:	6079      	str	r1, [r7, #4]
 8011e22:	4648      	mov	r0, r9
 8011e24:	9304      	str	r3, [sp, #16]
 8011e26:	f000 fd39 	bl	801289c <_Balloc>
 8011e2a:	9b04      	ldr	r3, [sp, #16]
 8011e2c:	4607      	mov	r7, r0
 8011e2e:	2800      	cmp	r0, #0
 8011e30:	d146      	bne.n	8011ec0 <_dtoa_r+0x2d0>
 8011e32:	4b22      	ldr	r3, [pc, #136]	@ (8011ebc <_dtoa_r+0x2cc>)
 8011e34:	4602      	mov	r2, r0
 8011e36:	f240 11af 	movw	r1, #431	@ 0x1af
 8011e3a:	e6f2      	b.n	8011c22 <_dtoa_r+0x32>
 8011e3c:	2201      	movs	r2, #1
 8011e3e:	e7dd      	b.n	8011dfc <_dtoa_r+0x20c>
 8011e40:	2200      	movs	r2, #0
 8011e42:	9208      	str	r2, [sp, #32]
 8011e44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011e46:	eb08 0b02 	add.w	fp, r8, r2
 8011e4a:	f10b 0a01 	add.w	sl, fp, #1
 8011e4e:	4652      	mov	r2, sl
 8011e50:	2a01      	cmp	r2, #1
 8011e52:	bfb8      	it	lt
 8011e54:	2201      	movlt	r2, #1
 8011e56:	e7db      	b.n	8011e10 <_dtoa_r+0x220>
 8011e58:	2201      	movs	r2, #1
 8011e5a:	e7f2      	b.n	8011e42 <_dtoa_r+0x252>
 8011e5c:	2401      	movs	r4, #1
 8011e5e:	2200      	movs	r2, #0
 8011e60:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8011e64:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8011e68:	2100      	movs	r1, #0
 8011e6a:	46da      	mov	sl, fp
 8011e6c:	2212      	movs	r2, #18
 8011e6e:	9109      	str	r1, [sp, #36]	@ 0x24
 8011e70:	e7ce      	b.n	8011e10 <_dtoa_r+0x220>
 8011e72:	2201      	movs	r2, #1
 8011e74:	9208      	str	r2, [sp, #32]
 8011e76:	e7f5      	b.n	8011e64 <_dtoa_r+0x274>
 8011e78:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8011e7c:	46da      	mov	sl, fp
 8011e7e:	465a      	mov	r2, fp
 8011e80:	e7c6      	b.n	8011e10 <_dtoa_r+0x220>
 8011e82:	3101      	adds	r1, #1
 8011e84:	0040      	lsls	r0, r0, #1
 8011e86:	e7c7      	b.n	8011e18 <_dtoa_r+0x228>
 8011e88:	636f4361 	.word	0x636f4361
 8011e8c:	3fd287a7 	.word	0x3fd287a7
 8011e90:	8b60c8b3 	.word	0x8b60c8b3
 8011e94:	3fc68a28 	.word	0x3fc68a28
 8011e98:	509f79fb 	.word	0x509f79fb
 8011e9c:	3fd34413 	.word	0x3fd34413
 8011ea0:	0801455f 	.word	0x0801455f
 8011ea4:	08014576 	.word	0x08014576
 8011ea8:	7ff00000 	.word	0x7ff00000
 8011eac:	0801455b 	.word	0x0801455b
 8011eb0:	0801452f 	.word	0x0801452f
 8011eb4:	0801452e 	.word	0x0801452e
 8011eb8:	08014670 	.word	0x08014670
 8011ebc:	080145ce 	.word	0x080145ce
 8011ec0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8011ec4:	f1ba 0f0e 	cmp.w	sl, #14
 8011ec8:	6010      	str	r0, [r2, #0]
 8011eca:	d86f      	bhi.n	8011fac <_dtoa_r+0x3bc>
 8011ecc:	2c00      	cmp	r4, #0
 8011ece:	d06d      	beq.n	8011fac <_dtoa_r+0x3bc>
 8011ed0:	f1b8 0f00 	cmp.w	r8, #0
 8011ed4:	f340 80c2 	ble.w	801205c <_dtoa_r+0x46c>
 8011ed8:	4aca      	ldr	r2, [pc, #808]	@ (8012204 <_dtoa_r+0x614>)
 8011eda:	f008 010f 	and.w	r1, r8, #15
 8011ede:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8011ee2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8011ee6:	ed92 7b00 	vldr	d7, [r2]
 8011eea:	ea4f 1128 	mov.w	r1, r8, asr #4
 8011eee:	f000 80a9 	beq.w	8012044 <_dtoa_r+0x454>
 8011ef2:	4ac5      	ldr	r2, [pc, #788]	@ (8012208 <_dtoa_r+0x618>)
 8011ef4:	ed92 6b08 	vldr	d6, [r2, #32]
 8011ef8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8011efc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011f00:	f001 010f 	and.w	r1, r1, #15
 8011f04:	2203      	movs	r2, #3
 8011f06:	48c0      	ldr	r0, [pc, #768]	@ (8012208 <_dtoa_r+0x618>)
 8011f08:	2900      	cmp	r1, #0
 8011f0a:	f040 809d 	bne.w	8012048 <_dtoa_r+0x458>
 8011f0e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011f12:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011f16:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011f1a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011f1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011f20:	2900      	cmp	r1, #0
 8011f22:	f000 80c1 	beq.w	80120a8 <_dtoa_r+0x4b8>
 8011f26:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8011f2a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f32:	f140 80b9 	bpl.w	80120a8 <_dtoa_r+0x4b8>
 8011f36:	f1ba 0f00 	cmp.w	sl, #0
 8011f3a:	f000 80b5 	beq.w	80120a8 <_dtoa_r+0x4b8>
 8011f3e:	f1bb 0f00 	cmp.w	fp, #0
 8011f42:	dd31      	ble.n	8011fa8 <_dtoa_r+0x3b8>
 8011f44:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8011f48:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011f4c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011f50:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8011f54:	9104      	str	r1, [sp, #16]
 8011f56:	3201      	adds	r2, #1
 8011f58:	465c      	mov	r4, fp
 8011f5a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011f5e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8011f62:	ee07 2a90 	vmov	s15, r2
 8011f66:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011f6a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8011f6e:	ee15 2a90 	vmov	r2, s11
 8011f72:	ec51 0b15 	vmov	r0, r1, d5
 8011f76:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8011f7a:	2c00      	cmp	r4, #0
 8011f7c:	f040 8098 	bne.w	80120b0 <_dtoa_r+0x4c0>
 8011f80:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8011f84:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011f88:	ec41 0b17 	vmov	d7, r0, r1
 8011f8c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f94:	f300 8261 	bgt.w	801245a <_dtoa_r+0x86a>
 8011f98:	eeb1 7b47 	vneg.f64	d7, d7
 8011f9c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fa4:	f100 80f5 	bmi.w	8012192 <_dtoa_r+0x5a2>
 8011fa8:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011fac:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011fae:	2a00      	cmp	r2, #0
 8011fb0:	f2c0 812c 	blt.w	801220c <_dtoa_r+0x61c>
 8011fb4:	f1b8 0f0e 	cmp.w	r8, #14
 8011fb8:	f300 8128 	bgt.w	801220c <_dtoa_r+0x61c>
 8011fbc:	4b91      	ldr	r3, [pc, #580]	@ (8012204 <_dtoa_r+0x614>)
 8011fbe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011fc2:	ed93 6b00 	vldr	d6, [r3]
 8011fc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	da03      	bge.n	8011fd4 <_dtoa_r+0x3e4>
 8011fcc:	f1ba 0f00 	cmp.w	sl, #0
 8011fd0:	f340 80d2 	ble.w	8012178 <_dtoa_r+0x588>
 8011fd4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8011fd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011fdc:	463e      	mov	r6, r7
 8011fde:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8011fe2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8011fe6:	ee15 3a10 	vmov	r3, s10
 8011fea:	3330      	adds	r3, #48	@ 0x30
 8011fec:	f806 3b01 	strb.w	r3, [r6], #1
 8011ff0:	1bf3      	subs	r3, r6, r7
 8011ff2:	459a      	cmp	sl, r3
 8011ff4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8011ff8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8011ffc:	f040 80f8 	bne.w	80121f0 <_dtoa_r+0x600>
 8012000:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012004:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801200c:	f300 80dd 	bgt.w	80121ca <_dtoa_r+0x5da>
 8012010:	eeb4 7b46 	vcmp.f64	d7, d6
 8012014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012018:	d104      	bne.n	8012024 <_dtoa_r+0x434>
 801201a:	ee15 3a10 	vmov	r3, s10
 801201e:	07db      	lsls	r3, r3, #31
 8012020:	f100 80d3 	bmi.w	80121ca <_dtoa_r+0x5da>
 8012024:	9901      	ldr	r1, [sp, #4]
 8012026:	4648      	mov	r0, r9
 8012028:	f000 fc78 	bl	801291c <_Bfree>
 801202c:	2300      	movs	r3, #0
 801202e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012030:	7033      	strb	r3, [r6, #0]
 8012032:	f108 0301 	add.w	r3, r8, #1
 8012036:	6013      	str	r3, [r2, #0]
 8012038:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801203a:	2b00      	cmp	r3, #0
 801203c:	f000 8304 	beq.w	8012648 <_dtoa_r+0xa58>
 8012040:	601e      	str	r6, [r3, #0]
 8012042:	e301      	b.n	8012648 <_dtoa_r+0xa58>
 8012044:	2202      	movs	r2, #2
 8012046:	e75e      	b.n	8011f06 <_dtoa_r+0x316>
 8012048:	07cc      	lsls	r4, r1, #31
 801204a:	d504      	bpl.n	8012056 <_dtoa_r+0x466>
 801204c:	ed90 6b00 	vldr	d6, [r0]
 8012050:	3201      	adds	r2, #1
 8012052:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012056:	1049      	asrs	r1, r1, #1
 8012058:	3008      	adds	r0, #8
 801205a:	e755      	b.n	8011f08 <_dtoa_r+0x318>
 801205c:	d022      	beq.n	80120a4 <_dtoa_r+0x4b4>
 801205e:	f1c8 0100 	rsb	r1, r8, #0
 8012062:	4a68      	ldr	r2, [pc, #416]	@ (8012204 <_dtoa_r+0x614>)
 8012064:	f001 000f 	and.w	r0, r1, #15
 8012068:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801206c:	ed92 7b00 	vldr	d7, [r2]
 8012070:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012074:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012078:	4863      	ldr	r0, [pc, #396]	@ (8012208 <_dtoa_r+0x618>)
 801207a:	1109      	asrs	r1, r1, #4
 801207c:	2400      	movs	r4, #0
 801207e:	2202      	movs	r2, #2
 8012080:	b929      	cbnz	r1, 801208e <_dtoa_r+0x49e>
 8012082:	2c00      	cmp	r4, #0
 8012084:	f43f af49 	beq.w	8011f1a <_dtoa_r+0x32a>
 8012088:	ed8d 7b02 	vstr	d7, [sp, #8]
 801208c:	e745      	b.n	8011f1a <_dtoa_r+0x32a>
 801208e:	07ce      	lsls	r6, r1, #31
 8012090:	d505      	bpl.n	801209e <_dtoa_r+0x4ae>
 8012092:	ed90 6b00 	vldr	d6, [r0]
 8012096:	3201      	adds	r2, #1
 8012098:	2401      	movs	r4, #1
 801209a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801209e:	1049      	asrs	r1, r1, #1
 80120a0:	3008      	adds	r0, #8
 80120a2:	e7ed      	b.n	8012080 <_dtoa_r+0x490>
 80120a4:	2202      	movs	r2, #2
 80120a6:	e738      	b.n	8011f1a <_dtoa_r+0x32a>
 80120a8:	f8cd 8010 	str.w	r8, [sp, #16]
 80120ac:	4654      	mov	r4, sl
 80120ae:	e754      	b.n	8011f5a <_dtoa_r+0x36a>
 80120b0:	4a54      	ldr	r2, [pc, #336]	@ (8012204 <_dtoa_r+0x614>)
 80120b2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80120b6:	ed12 4b02 	vldr	d4, [r2, #-8]
 80120ba:	9a08      	ldr	r2, [sp, #32]
 80120bc:	ec41 0b17 	vmov	d7, r0, r1
 80120c0:	443c      	add	r4, r7
 80120c2:	b34a      	cbz	r2, 8012118 <_dtoa_r+0x528>
 80120c4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80120c8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80120cc:	463e      	mov	r6, r7
 80120ce:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80120d2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80120d6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80120da:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80120de:	ee14 2a90 	vmov	r2, s9
 80120e2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80120e6:	3230      	adds	r2, #48	@ 0x30
 80120e8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80120ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80120f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120f4:	f806 2b01 	strb.w	r2, [r6], #1
 80120f8:	d438      	bmi.n	801216c <_dtoa_r+0x57c>
 80120fa:	ee32 5b46 	vsub.f64	d5, d2, d6
 80120fe:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012106:	d462      	bmi.n	80121ce <_dtoa_r+0x5de>
 8012108:	42a6      	cmp	r6, r4
 801210a:	f43f af4d 	beq.w	8011fa8 <_dtoa_r+0x3b8>
 801210e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012112:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012116:	e7e0      	b.n	80120da <_dtoa_r+0x4ea>
 8012118:	4621      	mov	r1, r4
 801211a:	463e      	mov	r6, r7
 801211c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012120:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8012124:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012128:	ee14 2a90 	vmov	r2, s9
 801212c:	3230      	adds	r2, #48	@ 0x30
 801212e:	f806 2b01 	strb.w	r2, [r6], #1
 8012132:	42a6      	cmp	r6, r4
 8012134:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012138:	ee36 6b45 	vsub.f64	d6, d6, d5
 801213c:	d119      	bne.n	8012172 <_dtoa_r+0x582>
 801213e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8012142:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012146:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801214a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801214e:	dc3e      	bgt.n	80121ce <_dtoa_r+0x5de>
 8012150:	ee35 5b47 	vsub.f64	d5, d5, d7
 8012154:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8012158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801215c:	f57f af24 	bpl.w	8011fa8 <_dtoa_r+0x3b8>
 8012160:	460e      	mov	r6, r1
 8012162:	3901      	subs	r1, #1
 8012164:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012168:	2b30      	cmp	r3, #48	@ 0x30
 801216a:	d0f9      	beq.n	8012160 <_dtoa_r+0x570>
 801216c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012170:	e758      	b.n	8012024 <_dtoa_r+0x434>
 8012172:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012176:	e7d5      	b.n	8012124 <_dtoa_r+0x534>
 8012178:	d10b      	bne.n	8012192 <_dtoa_r+0x5a2>
 801217a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801217e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012182:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012186:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801218a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801218e:	f2c0 8161 	blt.w	8012454 <_dtoa_r+0x864>
 8012192:	2400      	movs	r4, #0
 8012194:	4625      	mov	r5, r4
 8012196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012198:	43db      	mvns	r3, r3
 801219a:	9304      	str	r3, [sp, #16]
 801219c:	463e      	mov	r6, r7
 801219e:	f04f 0800 	mov.w	r8, #0
 80121a2:	4621      	mov	r1, r4
 80121a4:	4648      	mov	r0, r9
 80121a6:	f000 fbb9 	bl	801291c <_Bfree>
 80121aa:	2d00      	cmp	r5, #0
 80121ac:	d0de      	beq.n	801216c <_dtoa_r+0x57c>
 80121ae:	f1b8 0f00 	cmp.w	r8, #0
 80121b2:	d005      	beq.n	80121c0 <_dtoa_r+0x5d0>
 80121b4:	45a8      	cmp	r8, r5
 80121b6:	d003      	beq.n	80121c0 <_dtoa_r+0x5d0>
 80121b8:	4641      	mov	r1, r8
 80121ba:	4648      	mov	r0, r9
 80121bc:	f000 fbae 	bl	801291c <_Bfree>
 80121c0:	4629      	mov	r1, r5
 80121c2:	4648      	mov	r0, r9
 80121c4:	f000 fbaa 	bl	801291c <_Bfree>
 80121c8:	e7d0      	b.n	801216c <_dtoa_r+0x57c>
 80121ca:	f8cd 8010 	str.w	r8, [sp, #16]
 80121ce:	4633      	mov	r3, r6
 80121d0:	461e      	mov	r6, r3
 80121d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80121d6:	2a39      	cmp	r2, #57	@ 0x39
 80121d8:	d106      	bne.n	80121e8 <_dtoa_r+0x5f8>
 80121da:	429f      	cmp	r7, r3
 80121dc:	d1f8      	bne.n	80121d0 <_dtoa_r+0x5e0>
 80121de:	9a04      	ldr	r2, [sp, #16]
 80121e0:	3201      	adds	r2, #1
 80121e2:	9204      	str	r2, [sp, #16]
 80121e4:	2230      	movs	r2, #48	@ 0x30
 80121e6:	703a      	strb	r2, [r7, #0]
 80121e8:	781a      	ldrb	r2, [r3, #0]
 80121ea:	3201      	adds	r2, #1
 80121ec:	701a      	strb	r2, [r3, #0]
 80121ee:	e7bd      	b.n	801216c <_dtoa_r+0x57c>
 80121f0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80121f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80121f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121fc:	f47f aeef 	bne.w	8011fde <_dtoa_r+0x3ee>
 8012200:	e710      	b.n	8012024 <_dtoa_r+0x434>
 8012202:	bf00      	nop
 8012204:	08014670 	.word	0x08014670
 8012208:	08014648 	.word	0x08014648
 801220c:	9908      	ldr	r1, [sp, #32]
 801220e:	2900      	cmp	r1, #0
 8012210:	f000 80e3 	beq.w	80123da <_dtoa_r+0x7ea>
 8012214:	9907      	ldr	r1, [sp, #28]
 8012216:	2901      	cmp	r1, #1
 8012218:	f300 80c8 	bgt.w	80123ac <_dtoa_r+0x7bc>
 801221c:	2d00      	cmp	r5, #0
 801221e:	f000 80c1 	beq.w	80123a4 <_dtoa_r+0x7b4>
 8012222:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8012226:	9e05      	ldr	r6, [sp, #20]
 8012228:	461c      	mov	r4, r3
 801222a:	9304      	str	r3, [sp, #16]
 801222c:	9b05      	ldr	r3, [sp, #20]
 801222e:	4413      	add	r3, r2
 8012230:	9305      	str	r3, [sp, #20]
 8012232:	9b06      	ldr	r3, [sp, #24]
 8012234:	2101      	movs	r1, #1
 8012236:	4413      	add	r3, r2
 8012238:	4648      	mov	r0, r9
 801223a:	9306      	str	r3, [sp, #24]
 801223c:	f000 fc22 	bl	8012a84 <__i2b>
 8012240:	9b04      	ldr	r3, [sp, #16]
 8012242:	4605      	mov	r5, r0
 8012244:	b166      	cbz	r6, 8012260 <_dtoa_r+0x670>
 8012246:	9a06      	ldr	r2, [sp, #24]
 8012248:	2a00      	cmp	r2, #0
 801224a:	dd09      	ble.n	8012260 <_dtoa_r+0x670>
 801224c:	42b2      	cmp	r2, r6
 801224e:	9905      	ldr	r1, [sp, #20]
 8012250:	bfa8      	it	ge
 8012252:	4632      	movge	r2, r6
 8012254:	1a89      	subs	r1, r1, r2
 8012256:	9105      	str	r1, [sp, #20]
 8012258:	9906      	ldr	r1, [sp, #24]
 801225a:	1ab6      	subs	r6, r6, r2
 801225c:	1a8a      	subs	r2, r1, r2
 801225e:	9206      	str	r2, [sp, #24]
 8012260:	b1fb      	cbz	r3, 80122a2 <_dtoa_r+0x6b2>
 8012262:	9a08      	ldr	r2, [sp, #32]
 8012264:	2a00      	cmp	r2, #0
 8012266:	f000 80bc 	beq.w	80123e2 <_dtoa_r+0x7f2>
 801226a:	b19c      	cbz	r4, 8012294 <_dtoa_r+0x6a4>
 801226c:	4629      	mov	r1, r5
 801226e:	4622      	mov	r2, r4
 8012270:	4648      	mov	r0, r9
 8012272:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012274:	f000 fcc6 	bl	8012c04 <__pow5mult>
 8012278:	9a01      	ldr	r2, [sp, #4]
 801227a:	4601      	mov	r1, r0
 801227c:	4605      	mov	r5, r0
 801227e:	4648      	mov	r0, r9
 8012280:	f000 fc16 	bl	8012ab0 <__multiply>
 8012284:	9901      	ldr	r1, [sp, #4]
 8012286:	9004      	str	r0, [sp, #16]
 8012288:	4648      	mov	r0, r9
 801228a:	f000 fb47 	bl	801291c <_Bfree>
 801228e:	9a04      	ldr	r2, [sp, #16]
 8012290:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012292:	9201      	str	r2, [sp, #4]
 8012294:	1b1a      	subs	r2, r3, r4
 8012296:	d004      	beq.n	80122a2 <_dtoa_r+0x6b2>
 8012298:	9901      	ldr	r1, [sp, #4]
 801229a:	4648      	mov	r0, r9
 801229c:	f000 fcb2 	bl	8012c04 <__pow5mult>
 80122a0:	9001      	str	r0, [sp, #4]
 80122a2:	2101      	movs	r1, #1
 80122a4:	4648      	mov	r0, r9
 80122a6:	f000 fbed 	bl	8012a84 <__i2b>
 80122aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80122ac:	4604      	mov	r4, r0
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	f000 81d0 	beq.w	8012654 <_dtoa_r+0xa64>
 80122b4:	461a      	mov	r2, r3
 80122b6:	4601      	mov	r1, r0
 80122b8:	4648      	mov	r0, r9
 80122ba:	f000 fca3 	bl	8012c04 <__pow5mult>
 80122be:	9b07      	ldr	r3, [sp, #28]
 80122c0:	2b01      	cmp	r3, #1
 80122c2:	4604      	mov	r4, r0
 80122c4:	f300 8095 	bgt.w	80123f2 <_dtoa_r+0x802>
 80122c8:	9b02      	ldr	r3, [sp, #8]
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	f040 808b 	bne.w	80123e6 <_dtoa_r+0x7f6>
 80122d0:	9b03      	ldr	r3, [sp, #12]
 80122d2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80122d6:	2a00      	cmp	r2, #0
 80122d8:	f040 8087 	bne.w	80123ea <_dtoa_r+0x7fa>
 80122dc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80122e0:	0d12      	lsrs	r2, r2, #20
 80122e2:	0512      	lsls	r2, r2, #20
 80122e4:	2a00      	cmp	r2, #0
 80122e6:	f000 8082 	beq.w	80123ee <_dtoa_r+0x7fe>
 80122ea:	9b05      	ldr	r3, [sp, #20]
 80122ec:	3301      	adds	r3, #1
 80122ee:	9305      	str	r3, [sp, #20]
 80122f0:	9b06      	ldr	r3, [sp, #24]
 80122f2:	3301      	adds	r3, #1
 80122f4:	9306      	str	r3, [sp, #24]
 80122f6:	2301      	movs	r3, #1
 80122f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80122fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	f000 81af 	beq.w	8012660 <_dtoa_r+0xa70>
 8012302:	6922      	ldr	r2, [r4, #16]
 8012304:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012308:	6910      	ldr	r0, [r2, #16]
 801230a:	f000 fb6f 	bl	80129ec <__hi0bits>
 801230e:	f1c0 0020 	rsb	r0, r0, #32
 8012312:	9b06      	ldr	r3, [sp, #24]
 8012314:	4418      	add	r0, r3
 8012316:	f010 001f 	ands.w	r0, r0, #31
 801231a:	d076      	beq.n	801240a <_dtoa_r+0x81a>
 801231c:	f1c0 0220 	rsb	r2, r0, #32
 8012320:	2a04      	cmp	r2, #4
 8012322:	dd69      	ble.n	80123f8 <_dtoa_r+0x808>
 8012324:	9b05      	ldr	r3, [sp, #20]
 8012326:	f1c0 001c 	rsb	r0, r0, #28
 801232a:	4403      	add	r3, r0
 801232c:	9305      	str	r3, [sp, #20]
 801232e:	9b06      	ldr	r3, [sp, #24]
 8012330:	4406      	add	r6, r0
 8012332:	4403      	add	r3, r0
 8012334:	9306      	str	r3, [sp, #24]
 8012336:	9b05      	ldr	r3, [sp, #20]
 8012338:	2b00      	cmp	r3, #0
 801233a:	dd05      	ble.n	8012348 <_dtoa_r+0x758>
 801233c:	9901      	ldr	r1, [sp, #4]
 801233e:	461a      	mov	r2, r3
 8012340:	4648      	mov	r0, r9
 8012342:	f000 fcb9 	bl	8012cb8 <__lshift>
 8012346:	9001      	str	r0, [sp, #4]
 8012348:	9b06      	ldr	r3, [sp, #24]
 801234a:	2b00      	cmp	r3, #0
 801234c:	dd05      	ble.n	801235a <_dtoa_r+0x76a>
 801234e:	4621      	mov	r1, r4
 8012350:	461a      	mov	r2, r3
 8012352:	4648      	mov	r0, r9
 8012354:	f000 fcb0 	bl	8012cb8 <__lshift>
 8012358:	4604      	mov	r4, r0
 801235a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801235c:	2b00      	cmp	r3, #0
 801235e:	d056      	beq.n	801240e <_dtoa_r+0x81e>
 8012360:	9801      	ldr	r0, [sp, #4]
 8012362:	4621      	mov	r1, r4
 8012364:	f000 fd14 	bl	8012d90 <__mcmp>
 8012368:	2800      	cmp	r0, #0
 801236a:	da50      	bge.n	801240e <_dtoa_r+0x81e>
 801236c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8012370:	9304      	str	r3, [sp, #16]
 8012372:	9901      	ldr	r1, [sp, #4]
 8012374:	2300      	movs	r3, #0
 8012376:	220a      	movs	r2, #10
 8012378:	4648      	mov	r0, r9
 801237a:	f000 faf1 	bl	8012960 <__multadd>
 801237e:	9b08      	ldr	r3, [sp, #32]
 8012380:	9001      	str	r0, [sp, #4]
 8012382:	2b00      	cmp	r3, #0
 8012384:	f000 816e 	beq.w	8012664 <_dtoa_r+0xa74>
 8012388:	4629      	mov	r1, r5
 801238a:	2300      	movs	r3, #0
 801238c:	220a      	movs	r2, #10
 801238e:	4648      	mov	r0, r9
 8012390:	f000 fae6 	bl	8012960 <__multadd>
 8012394:	f1bb 0f00 	cmp.w	fp, #0
 8012398:	4605      	mov	r5, r0
 801239a:	dc64      	bgt.n	8012466 <_dtoa_r+0x876>
 801239c:	9b07      	ldr	r3, [sp, #28]
 801239e:	2b02      	cmp	r3, #2
 80123a0:	dc3e      	bgt.n	8012420 <_dtoa_r+0x830>
 80123a2:	e060      	b.n	8012466 <_dtoa_r+0x876>
 80123a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80123a6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80123aa:	e73c      	b.n	8012226 <_dtoa_r+0x636>
 80123ac:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 80123b0:	42a3      	cmp	r3, r4
 80123b2:	bfbf      	itttt	lt
 80123b4:	1ae2      	sublt	r2, r4, r3
 80123b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80123b8:	189b      	addlt	r3, r3, r2
 80123ba:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80123bc:	bfae      	itee	ge
 80123be:	1b1c      	subge	r4, r3, r4
 80123c0:	4623      	movlt	r3, r4
 80123c2:	2400      	movlt	r4, #0
 80123c4:	f1ba 0f00 	cmp.w	sl, #0
 80123c8:	bfb5      	itete	lt
 80123ca:	9a05      	ldrlt	r2, [sp, #20]
 80123cc:	9e05      	ldrge	r6, [sp, #20]
 80123ce:	eba2 060a 	sublt.w	r6, r2, sl
 80123d2:	4652      	movge	r2, sl
 80123d4:	bfb8      	it	lt
 80123d6:	2200      	movlt	r2, #0
 80123d8:	e727      	b.n	801222a <_dtoa_r+0x63a>
 80123da:	9e05      	ldr	r6, [sp, #20]
 80123dc:	9d08      	ldr	r5, [sp, #32]
 80123de:	461c      	mov	r4, r3
 80123e0:	e730      	b.n	8012244 <_dtoa_r+0x654>
 80123e2:	461a      	mov	r2, r3
 80123e4:	e758      	b.n	8012298 <_dtoa_r+0x6a8>
 80123e6:	2300      	movs	r3, #0
 80123e8:	e786      	b.n	80122f8 <_dtoa_r+0x708>
 80123ea:	9b02      	ldr	r3, [sp, #8]
 80123ec:	e784      	b.n	80122f8 <_dtoa_r+0x708>
 80123ee:	920b      	str	r2, [sp, #44]	@ 0x2c
 80123f0:	e783      	b.n	80122fa <_dtoa_r+0x70a>
 80123f2:	2300      	movs	r3, #0
 80123f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80123f6:	e784      	b.n	8012302 <_dtoa_r+0x712>
 80123f8:	d09d      	beq.n	8012336 <_dtoa_r+0x746>
 80123fa:	9b05      	ldr	r3, [sp, #20]
 80123fc:	321c      	adds	r2, #28
 80123fe:	4413      	add	r3, r2
 8012400:	9305      	str	r3, [sp, #20]
 8012402:	9b06      	ldr	r3, [sp, #24]
 8012404:	4416      	add	r6, r2
 8012406:	4413      	add	r3, r2
 8012408:	e794      	b.n	8012334 <_dtoa_r+0x744>
 801240a:	4602      	mov	r2, r0
 801240c:	e7f5      	b.n	80123fa <_dtoa_r+0x80a>
 801240e:	f1ba 0f00 	cmp.w	sl, #0
 8012412:	f8cd 8010 	str.w	r8, [sp, #16]
 8012416:	46d3      	mov	fp, sl
 8012418:	dc21      	bgt.n	801245e <_dtoa_r+0x86e>
 801241a:	9b07      	ldr	r3, [sp, #28]
 801241c:	2b02      	cmp	r3, #2
 801241e:	dd1e      	ble.n	801245e <_dtoa_r+0x86e>
 8012420:	f1bb 0f00 	cmp.w	fp, #0
 8012424:	f47f aeb7 	bne.w	8012196 <_dtoa_r+0x5a6>
 8012428:	4621      	mov	r1, r4
 801242a:	465b      	mov	r3, fp
 801242c:	2205      	movs	r2, #5
 801242e:	4648      	mov	r0, r9
 8012430:	f000 fa96 	bl	8012960 <__multadd>
 8012434:	4601      	mov	r1, r0
 8012436:	4604      	mov	r4, r0
 8012438:	9801      	ldr	r0, [sp, #4]
 801243a:	f000 fca9 	bl	8012d90 <__mcmp>
 801243e:	2800      	cmp	r0, #0
 8012440:	f77f aea9 	ble.w	8012196 <_dtoa_r+0x5a6>
 8012444:	463e      	mov	r6, r7
 8012446:	2331      	movs	r3, #49	@ 0x31
 8012448:	f806 3b01 	strb.w	r3, [r6], #1
 801244c:	9b04      	ldr	r3, [sp, #16]
 801244e:	3301      	adds	r3, #1
 8012450:	9304      	str	r3, [sp, #16]
 8012452:	e6a4      	b.n	801219e <_dtoa_r+0x5ae>
 8012454:	f8cd 8010 	str.w	r8, [sp, #16]
 8012458:	4654      	mov	r4, sl
 801245a:	4625      	mov	r5, r4
 801245c:	e7f2      	b.n	8012444 <_dtoa_r+0x854>
 801245e:	9b08      	ldr	r3, [sp, #32]
 8012460:	2b00      	cmp	r3, #0
 8012462:	f000 8103 	beq.w	801266c <_dtoa_r+0xa7c>
 8012466:	2e00      	cmp	r6, #0
 8012468:	dd05      	ble.n	8012476 <_dtoa_r+0x886>
 801246a:	4629      	mov	r1, r5
 801246c:	4632      	mov	r2, r6
 801246e:	4648      	mov	r0, r9
 8012470:	f000 fc22 	bl	8012cb8 <__lshift>
 8012474:	4605      	mov	r5, r0
 8012476:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012478:	2b00      	cmp	r3, #0
 801247a:	d058      	beq.n	801252e <_dtoa_r+0x93e>
 801247c:	6869      	ldr	r1, [r5, #4]
 801247e:	4648      	mov	r0, r9
 8012480:	f000 fa0c 	bl	801289c <_Balloc>
 8012484:	4606      	mov	r6, r0
 8012486:	b928      	cbnz	r0, 8012494 <_dtoa_r+0x8a4>
 8012488:	4b82      	ldr	r3, [pc, #520]	@ (8012694 <_dtoa_r+0xaa4>)
 801248a:	4602      	mov	r2, r0
 801248c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012490:	f7ff bbc7 	b.w	8011c22 <_dtoa_r+0x32>
 8012494:	692a      	ldr	r2, [r5, #16]
 8012496:	3202      	adds	r2, #2
 8012498:	0092      	lsls	r2, r2, #2
 801249a:	f105 010c 	add.w	r1, r5, #12
 801249e:	300c      	adds	r0, #12
 80124a0:	f000 ffac 	bl	80133fc <memcpy>
 80124a4:	2201      	movs	r2, #1
 80124a6:	4631      	mov	r1, r6
 80124a8:	4648      	mov	r0, r9
 80124aa:	f000 fc05 	bl	8012cb8 <__lshift>
 80124ae:	1c7b      	adds	r3, r7, #1
 80124b0:	9305      	str	r3, [sp, #20]
 80124b2:	eb07 030b 	add.w	r3, r7, fp
 80124b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80124b8:	9b02      	ldr	r3, [sp, #8]
 80124ba:	f003 0301 	and.w	r3, r3, #1
 80124be:	46a8      	mov	r8, r5
 80124c0:	9308      	str	r3, [sp, #32]
 80124c2:	4605      	mov	r5, r0
 80124c4:	9b05      	ldr	r3, [sp, #20]
 80124c6:	9801      	ldr	r0, [sp, #4]
 80124c8:	4621      	mov	r1, r4
 80124ca:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80124ce:	f7ff fb06 	bl	8011ade <quorem>
 80124d2:	4641      	mov	r1, r8
 80124d4:	9002      	str	r0, [sp, #8]
 80124d6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80124da:	9801      	ldr	r0, [sp, #4]
 80124dc:	f000 fc58 	bl	8012d90 <__mcmp>
 80124e0:	462a      	mov	r2, r5
 80124e2:	9006      	str	r0, [sp, #24]
 80124e4:	4621      	mov	r1, r4
 80124e6:	4648      	mov	r0, r9
 80124e8:	f000 fc6e 	bl	8012dc8 <__mdiff>
 80124ec:	68c2      	ldr	r2, [r0, #12]
 80124ee:	4606      	mov	r6, r0
 80124f0:	b9fa      	cbnz	r2, 8012532 <_dtoa_r+0x942>
 80124f2:	4601      	mov	r1, r0
 80124f4:	9801      	ldr	r0, [sp, #4]
 80124f6:	f000 fc4b 	bl	8012d90 <__mcmp>
 80124fa:	4602      	mov	r2, r0
 80124fc:	4631      	mov	r1, r6
 80124fe:	4648      	mov	r0, r9
 8012500:	920a      	str	r2, [sp, #40]	@ 0x28
 8012502:	f000 fa0b 	bl	801291c <_Bfree>
 8012506:	9b07      	ldr	r3, [sp, #28]
 8012508:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801250a:	9e05      	ldr	r6, [sp, #20]
 801250c:	ea43 0102 	orr.w	r1, r3, r2
 8012510:	9b08      	ldr	r3, [sp, #32]
 8012512:	4319      	orrs	r1, r3
 8012514:	d10f      	bne.n	8012536 <_dtoa_r+0x946>
 8012516:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801251a:	d028      	beq.n	801256e <_dtoa_r+0x97e>
 801251c:	9b06      	ldr	r3, [sp, #24]
 801251e:	2b00      	cmp	r3, #0
 8012520:	dd02      	ble.n	8012528 <_dtoa_r+0x938>
 8012522:	9b02      	ldr	r3, [sp, #8]
 8012524:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8012528:	f88b a000 	strb.w	sl, [fp]
 801252c:	e639      	b.n	80121a2 <_dtoa_r+0x5b2>
 801252e:	4628      	mov	r0, r5
 8012530:	e7bd      	b.n	80124ae <_dtoa_r+0x8be>
 8012532:	2201      	movs	r2, #1
 8012534:	e7e2      	b.n	80124fc <_dtoa_r+0x90c>
 8012536:	9b06      	ldr	r3, [sp, #24]
 8012538:	2b00      	cmp	r3, #0
 801253a:	db04      	blt.n	8012546 <_dtoa_r+0x956>
 801253c:	9907      	ldr	r1, [sp, #28]
 801253e:	430b      	orrs	r3, r1
 8012540:	9908      	ldr	r1, [sp, #32]
 8012542:	430b      	orrs	r3, r1
 8012544:	d120      	bne.n	8012588 <_dtoa_r+0x998>
 8012546:	2a00      	cmp	r2, #0
 8012548:	ddee      	ble.n	8012528 <_dtoa_r+0x938>
 801254a:	9901      	ldr	r1, [sp, #4]
 801254c:	2201      	movs	r2, #1
 801254e:	4648      	mov	r0, r9
 8012550:	f000 fbb2 	bl	8012cb8 <__lshift>
 8012554:	4621      	mov	r1, r4
 8012556:	9001      	str	r0, [sp, #4]
 8012558:	f000 fc1a 	bl	8012d90 <__mcmp>
 801255c:	2800      	cmp	r0, #0
 801255e:	dc03      	bgt.n	8012568 <_dtoa_r+0x978>
 8012560:	d1e2      	bne.n	8012528 <_dtoa_r+0x938>
 8012562:	f01a 0f01 	tst.w	sl, #1
 8012566:	d0df      	beq.n	8012528 <_dtoa_r+0x938>
 8012568:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801256c:	d1d9      	bne.n	8012522 <_dtoa_r+0x932>
 801256e:	2339      	movs	r3, #57	@ 0x39
 8012570:	f88b 3000 	strb.w	r3, [fp]
 8012574:	4633      	mov	r3, r6
 8012576:	461e      	mov	r6, r3
 8012578:	3b01      	subs	r3, #1
 801257a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801257e:	2a39      	cmp	r2, #57	@ 0x39
 8012580:	d053      	beq.n	801262a <_dtoa_r+0xa3a>
 8012582:	3201      	adds	r2, #1
 8012584:	701a      	strb	r2, [r3, #0]
 8012586:	e60c      	b.n	80121a2 <_dtoa_r+0x5b2>
 8012588:	2a00      	cmp	r2, #0
 801258a:	dd07      	ble.n	801259c <_dtoa_r+0x9ac>
 801258c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012590:	d0ed      	beq.n	801256e <_dtoa_r+0x97e>
 8012592:	f10a 0301 	add.w	r3, sl, #1
 8012596:	f88b 3000 	strb.w	r3, [fp]
 801259a:	e602      	b.n	80121a2 <_dtoa_r+0x5b2>
 801259c:	9b05      	ldr	r3, [sp, #20]
 801259e:	9a05      	ldr	r2, [sp, #20]
 80125a0:	f803 ac01 	strb.w	sl, [r3, #-1]
 80125a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80125a6:	4293      	cmp	r3, r2
 80125a8:	d029      	beq.n	80125fe <_dtoa_r+0xa0e>
 80125aa:	9901      	ldr	r1, [sp, #4]
 80125ac:	2300      	movs	r3, #0
 80125ae:	220a      	movs	r2, #10
 80125b0:	4648      	mov	r0, r9
 80125b2:	f000 f9d5 	bl	8012960 <__multadd>
 80125b6:	45a8      	cmp	r8, r5
 80125b8:	9001      	str	r0, [sp, #4]
 80125ba:	f04f 0300 	mov.w	r3, #0
 80125be:	f04f 020a 	mov.w	r2, #10
 80125c2:	4641      	mov	r1, r8
 80125c4:	4648      	mov	r0, r9
 80125c6:	d107      	bne.n	80125d8 <_dtoa_r+0x9e8>
 80125c8:	f000 f9ca 	bl	8012960 <__multadd>
 80125cc:	4680      	mov	r8, r0
 80125ce:	4605      	mov	r5, r0
 80125d0:	9b05      	ldr	r3, [sp, #20]
 80125d2:	3301      	adds	r3, #1
 80125d4:	9305      	str	r3, [sp, #20]
 80125d6:	e775      	b.n	80124c4 <_dtoa_r+0x8d4>
 80125d8:	f000 f9c2 	bl	8012960 <__multadd>
 80125dc:	4629      	mov	r1, r5
 80125de:	4680      	mov	r8, r0
 80125e0:	2300      	movs	r3, #0
 80125e2:	220a      	movs	r2, #10
 80125e4:	4648      	mov	r0, r9
 80125e6:	f000 f9bb 	bl	8012960 <__multadd>
 80125ea:	4605      	mov	r5, r0
 80125ec:	e7f0      	b.n	80125d0 <_dtoa_r+0x9e0>
 80125ee:	f1bb 0f00 	cmp.w	fp, #0
 80125f2:	bfcc      	ite	gt
 80125f4:	465e      	movgt	r6, fp
 80125f6:	2601      	movle	r6, #1
 80125f8:	443e      	add	r6, r7
 80125fa:	f04f 0800 	mov.w	r8, #0
 80125fe:	9901      	ldr	r1, [sp, #4]
 8012600:	2201      	movs	r2, #1
 8012602:	4648      	mov	r0, r9
 8012604:	f000 fb58 	bl	8012cb8 <__lshift>
 8012608:	4621      	mov	r1, r4
 801260a:	9001      	str	r0, [sp, #4]
 801260c:	f000 fbc0 	bl	8012d90 <__mcmp>
 8012610:	2800      	cmp	r0, #0
 8012612:	dcaf      	bgt.n	8012574 <_dtoa_r+0x984>
 8012614:	d102      	bne.n	801261c <_dtoa_r+0xa2c>
 8012616:	f01a 0f01 	tst.w	sl, #1
 801261a:	d1ab      	bne.n	8012574 <_dtoa_r+0x984>
 801261c:	4633      	mov	r3, r6
 801261e:	461e      	mov	r6, r3
 8012620:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012624:	2a30      	cmp	r2, #48	@ 0x30
 8012626:	d0fa      	beq.n	801261e <_dtoa_r+0xa2e>
 8012628:	e5bb      	b.n	80121a2 <_dtoa_r+0x5b2>
 801262a:	429f      	cmp	r7, r3
 801262c:	d1a3      	bne.n	8012576 <_dtoa_r+0x986>
 801262e:	9b04      	ldr	r3, [sp, #16]
 8012630:	3301      	adds	r3, #1
 8012632:	9304      	str	r3, [sp, #16]
 8012634:	2331      	movs	r3, #49	@ 0x31
 8012636:	703b      	strb	r3, [r7, #0]
 8012638:	e5b3      	b.n	80121a2 <_dtoa_r+0x5b2>
 801263a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801263c:	4f16      	ldr	r7, [pc, #88]	@ (8012698 <_dtoa_r+0xaa8>)
 801263e:	b11b      	cbz	r3, 8012648 <_dtoa_r+0xa58>
 8012640:	f107 0308 	add.w	r3, r7, #8
 8012644:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012646:	6013      	str	r3, [r2, #0]
 8012648:	4638      	mov	r0, r7
 801264a:	b011      	add	sp, #68	@ 0x44
 801264c:	ecbd 8b02 	vpop	{d8}
 8012650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012654:	9b07      	ldr	r3, [sp, #28]
 8012656:	2b01      	cmp	r3, #1
 8012658:	f77f ae36 	ble.w	80122c8 <_dtoa_r+0x6d8>
 801265c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801265e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012660:	2001      	movs	r0, #1
 8012662:	e656      	b.n	8012312 <_dtoa_r+0x722>
 8012664:	f1bb 0f00 	cmp.w	fp, #0
 8012668:	f77f aed7 	ble.w	801241a <_dtoa_r+0x82a>
 801266c:	463e      	mov	r6, r7
 801266e:	9801      	ldr	r0, [sp, #4]
 8012670:	4621      	mov	r1, r4
 8012672:	f7ff fa34 	bl	8011ade <quorem>
 8012676:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801267a:	f806 ab01 	strb.w	sl, [r6], #1
 801267e:	1bf2      	subs	r2, r6, r7
 8012680:	4593      	cmp	fp, r2
 8012682:	ddb4      	ble.n	80125ee <_dtoa_r+0x9fe>
 8012684:	9901      	ldr	r1, [sp, #4]
 8012686:	2300      	movs	r3, #0
 8012688:	220a      	movs	r2, #10
 801268a:	4648      	mov	r0, r9
 801268c:	f000 f968 	bl	8012960 <__multadd>
 8012690:	9001      	str	r0, [sp, #4]
 8012692:	e7ec      	b.n	801266e <_dtoa_r+0xa7e>
 8012694:	080145ce 	.word	0x080145ce
 8012698:	08014552 	.word	0x08014552

0801269c <_free_r>:
 801269c:	b538      	push	{r3, r4, r5, lr}
 801269e:	4605      	mov	r5, r0
 80126a0:	2900      	cmp	r1, #0
 80126a2:	d041      	beq.n	8012728 <_free_r+0x8c>
 80126a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80126a8:	1f0c      	subs	r4, r1, #4
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	bfb8      	it	lt
 80126ae:	18e4      	addlt	r4, r4, r3
 80126b0:	f000 f8e8 	bl	8012884 <__malloc_lock>
 80126b4:	4a1d      	ldr	r2, [pc, #116]	@ (801272c <_free_r+0x90>)
 80126b6:	6813      	ldr	r3, [r2, #0]
 80126b8:	b933      	cbnz	r3, 80126c8 <_free_r+0x2c>
 80126ba:	6063      	str	r3, [r4, #4]
 80126bc:	6014      	str	r4, [r2, #0]
 80126be:	4628      	mov	r0, r5
 80126c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126c4:	f000 b8e4 	b.w	8012890 <__malloc_unlock>
 80126c8:	42a3      	cmp	r3, r4
 80126ca:	d908      	bls.n	80126de <_free_r+0x42>
 80126cc:	6820      	ldr	r0, [r4, #0]
 80126ce:	1821      	adds	r1, r4, r0
 80126d0:	428b      	cmp	r3, r1
 80126d2:	bf01      	itttt	eq
 80126d4:	6819      	ldreq	r1, [r3, #0]
 80126d6:	685b      	ldreq	r3, [r3, #4]
 80126d8:	1809      	addeq	r1, r1, r0
 80126da:	6021      	streq	r1, [r4, #0]
 80126dc:	e7ed      	b.n	80126ba <_free_r+0x1e>
 80126de:	461a      	mov	r2, r3
 80126e0:	685b      	ldr	r3, [r3, #4]
 80126e2:	b10b      	cbz	r3, 80126e8 <_free_r+0x4c>
 80126e4:	42a3      	cmp	r3, r4
 80126e6:	d9fa      	bls.n	80126de <_free_r+0x42>
 80126e8:	6811      	ldr	r1, [r2, #0]
 80126ea:	1850      	adds	r0, r2, r1
 80126ec:	42a0      	cmp	r0, r4
 80126ee:	d10b      	bne.n	8012708 <_free_r+0x6c>
 80126f0:	6820      	ldr	r0, [r4, #0]
 80126f2:	4401      	add	r1, r0
 80126f4:	1850      	adds	r0, r2, r1
 80126f6:	4283      	cmp	r3, r0
 80126f8:	6011      	str	r1, [r2, #0]
 80126fa:	d1e0      	bne.n	80126be <_free_r+0x22>
 80126fc:	6818      	ldr	r0, [r3, #0]
 80126fe:	685b      	ldr	r3, [r3, #4]
 8012700:	6053      	str	r3, [r2, #4]
 8012702:	4408      	add	r0, r1
 8012704:	6010      	str	r0, [r2, #0]
 8012706:	e7da      	b.n	80126be <_free_r+0x22>
 8012708:	d902      	bls.n	8012710 <_free_r+0x74>
 801270a:	230c      	movs	r3, #12
 801270c:	602b      	str	r3, [r5, #0]
 801270e:	e7d6      	b.n	80126be <_free_r+0x22>
 8012710:	6820      	ldr	r0, [r4, #0]
 8012712:	1821      	adds	r1, r4, r0
 8012714:	428b      	cmp	r3, r1
 8012716:	bf04      	itt	eq
 8012718:	6819      	ldreq	r1, [r3, #0]
 801271a:	685b      	ldreq	r3, [r3, #4]
 801271c:	6063      	str	r3, [r4, #4]
 801271e:	bf04      	itt	eq
 8012720:	1809      	addeq	r1, r1, r0
 8012722:	6021      	streq	r1, [r4, #0]
 8012724:	6054      	str	r4, [r2, #4]
 8012726:	e7ca      	b.n	80126be <_free_r+0x22>
 8012728:	bd38      	pop	{r3, r4, r5, pc}
 801272a:	bf00      	nop
 801272c:	240011b8 	.word	0x240011b8

08012730 <malloc>:
 8012730:	4b02      	ldr	r3, [pc, #8]	@ (801273c <malloc+0xc>)
 8012732:	4601      	mov	r1, r0
 8012734:	6818      	ldr	r0, [r3, #0]
 8012736:	f000 b825 	b.w	8012784 <_malloc_r>
 801273a:	bf00      	nop
 801273c:	24000054 	.word	0x24000054

08012740 <sbrk_aligned>:
 8012740:	b570      	push	{r4, r5, r6, lr}
 8012742:	4e0f      	ldr	r6, [pc, #60]	@ (8012780 <sbrk_aligned+0x40>)
 8012744:	460c      	mov	r4, r1
 8012746:	6831      	ldr	r1, [r6, #0]
 8012748:	4605      	mov	r5, r0
 801274a:	b911      	cbnz	r1, 8012752 <sbrk_aligned+0x12>
 801274c:	f000 fe46 	bl	80133dc <_sbrk_r>
 8012750:	6030      	str	r0, [r6, #0]
 8012752:	4621      	mov	r1, r4
 8012754:	4628      	mov	r0, r5
 8012756:	f000 fe41 	bl	80133dc <_sbrk_r>
 801275a:	1c43      	adds	r3, r0, #1
 801275c:	d103      	bne.n	8012766 <sbrk_aligned+0x26>
 801275e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8012762:	4620      	mov	r0, r4
 8012764:	bd70      	pop	{r4, r5, r6, pc}
 8012766:	1cc4      	adds	r4, r0, #3
 8012768:	f024 0403 	bic.w	r4, r4, #3
 801276c:	42a0      	cmp	r0, r4
 801276e:	d0f8      	beq.n	8012762 <sbrk_aligned+0x22>
 8012770:	1a21      	subs	r1, r4, r0
 8012772:	4628      	mov	r0, r5
 8012774:	f000 fe32 	bl	80133dc <_sbrk_r>
 8012778:	3001      	adds	r0, #1
 801277a:	d1f2      	bne.n	8012762 <sbrk_aligned+0x22>
 801277c:	e7ef      	b.n	801275e <sbrk_aligned+0x1e>
 801277e:	bf00      	nop
 8012780:	240011b4 	.word	0x240011b4

08012784 <_malloc_r>:
 8012784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012788:	1ccd      	adds	r5, r1, #3
 801278a:	f025 0503 	bic.w	r5, r5, #3
 801278e:	3508      	adds	r5, #8
 8012790:	2d0c      	cmp	r5, #12
 8012792:	bf38      	it	cc
 8012794:	250c      	movcc	r5, #12
 8012796:	2d00      	cmp	r5, #0
 8012798:	4606      	mov	r6, r0
 801279a:	db01      	blt.n	80127a0 <_malloc_r+0x1c>
 801279c:	42a9      	cmp	r1, r5
 801279e:	d904      	bls.n	80127aa <_malloc_r+0x26>
 80127a0:	230c      	movs	r3, #12
 80127a2:	6033      	str	r3, [r6, #0]
 80127a4:	2000      	movs	r0, #0
 80127a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012880 <_malloc_r+0xfc>
 80127ae:	f000 f869 	bl	8012884 <__malloc_lock>
 80127b2:	f8d8 3000 	ldr.w	r3, [r8]
 80127b6:	461c      	mov	r4, r3
 80127b8:	bb44      	cbnz	r4, 801280c <_malloc_r+0x88>
 80127ba:	4629      	mov	r1, r5
 80127bc:	4630      	mov	r0, r6
 80127be:	f7ff ffbf 	bl	8012740 <sbrk_aligned>
 80127c2:	1c43      	adds	r3, r0, #1
 80127c4:	4604      	mov	r4, r0
 80127c6:	d158      	bne.n	801287a <_malloc_r+0xf6>
 80127c8:	f8d8 4000 	ldr.w	r4, [r8]
 80127cc:	4627      	mov	r7, r4
 80127ce:	2f00      	cmp	r7, #0
 80127d0:	d143      	bne.n	801285a <_malloc_r+0xd6>
 80127d2:	2c00      	cmp	r4, #0
 80127d4:	d04b      	beq.n	801286e <_malloc_r+0xea>
 80127d6:	6823      	ldr	r3, [r4, #0]
 80127d8:	4639      	mov	r1, r7
 80127da:	4630      	mov	r0, r6
 80127dc:	eb04 0903 	add.w	r9, r4, r3
 80127e0:	f000 fdfc 	bl	80133dc <_sbrk_r>
 80127e4:	4581      	cmp	r9, r0
 80127e6:	d142      	bne.n	801286e <_malloc_r+0xea>
 80127e8:	6821      	ldr	r1, [r4, #0]
 80127ea:	1a6d      	subs	r5, r5, r1
 80127ec:	4629      	mov	r1, r5
 80127ee:	4630      	mov	r0, r6
 80127f0:	f7ff ffa6 	bl	8012740 <sbrk_aligned>
 80127f4:	3001      	adds	r0, #1
 80127f6:	d03a      	beq.n	801286e <_malloc_r+0xea>
 80127f8:	6823      	ldr	r3, [r4, #0]
 80127fa:	442b      	add	r3, r5
 80127fc:	6023      	str	r3, [r4, #0]
 80127fe:	f8d8 3000 	ldr.w	r3, [r8]
 8012802:	685a      	ldr	r2, [r3, #4]
 8012804:	bb62      	cbnz	r2, 8012860 <_malloc_r+0xdc>
 8012806:	f8c8 7000 	str.w	r7, [r8]
 801280a:	e00f      	b.n	801282c <_malloc_r+0xa8>
 801280c:	6822      	ldr	r2, [r4, #0]
 801280e:	1b52      	subs	r2, r2, r5
 8012810:	d420      	bmi.n	8012854 <_malloc_r+0xd0>
 8012812:	2a0b      	cmp	r2, #11
 8012814:	d917      	bls.n	8012846 <_malloc_r+0xc2>
 8012816:	1961      	adds	r1, r4, r5
 8012818:	42a3      	cmp	r3, r4
 801281a:	6025      	str	r5, [r4, #0]
 801281c:	bf18      	it	ne
 801281e:	6059      	strne	r1, [r3, #4]
 8012820:	6863      	ldr	r3, [r4, #4]
 8012822:	bf08      	it	eq
 8012824:	f8c8 1000 	streq.w	r1, [r8]
 8012828:	5162      	str	r2, [r4, r5]
 801282a:	604b      	str	r3, [r1, #4]
 801282c:	4630      	mov	r0, r6
 801282e:	f000 f82f 	bl	8012890 <__malloc_unlock>
 8012832:	f104 000b 	add.w	r0, r4, #11
 8012836:	1d23      	adds	r3, r4, #4
 8012838:	f020 0007 	bic.w	r0, r0, #7
 801283c:	1ac2      	subs	r2, r0, r3
 801283e:	bf1c      	itt	ne
 8012840:	1a1b      	subne	r3, r3, r0
 8012842:	50a3      	strne	r3, [r4, r2]
 8012844:	e7af      	b.n	80127a6 <_malloc_r+0x22>
 8012846:	6862      	ldr	r2, [r4, #4]
 8012848:	42a3      	cmp	r3, r4
 801284a:	bf0c      	ite	eq
 801284c:	f8c8 2000 	streq.w	r2, [r8]
 8012850:	605a      	strne	r2, [r3, #4]
 8012852:	e7eb      	b.n	801282c <_malloc_r+0xa8>
 8012854:	4623      	mov	r3, r4
 8012856:	6864      	ldr	r4, [r4, #4]
 8012858:	e7ae      	b.n	80127b8 <_malloc_r+0x34>
 801285a:	463c      	mov	r4, r7
 801285c:	687f      	ldr	r7, [r7, #4]
 801285e:	e7b6      	b.n	80127ce <_malloc_r+0x4a>
 8012860:	461a      	mov	r2, r3
 8012862:	685b      	ldr	r3, [r3, #4]
 8012864:	42a3      	cmp	r3, r4
 8012866:	d1fb      	bne.n	8012860 <_malloc_r+0xdc>
 8012868:	2300      	movs	r3, #0
 801286a:	6053      	str	r3, [r2, #4]
 801286c:	e7de      	b.n	801282c <_malloc_r+0xa8>
 801286e:	230c      	movs	r3, #12
 8012870:	6033      	str	r3, [r6, #0]
 8012872:	4630      	mov	r0, r6
 8012874:	f000 f80c 	bl	8012890 <__malloc_unlock>
 8012878:	e794      	b.n	80127a4 <_malloc_r+0x20>
 801287a:	6005      	str	r5, [r0, #0]
 801287c:	e7d6      	b.n	801282c <_malloc_r+0xa8>
 801287e:	bf00      	nop
 8012880:	240011b8 	.word	0x240011b8

08012884 <__malloc_lock>:
 8012884:	4801      	ldr	r0, [pc, #4]	@ (801288c <__malloc_lock+0x8>)
 8012886:	f7ff b920 	b.w	8011aca <__retarget_lock_acquire_recursive>
 801288a:	bf00      	nop
 801288c:	240011b0 	.word	0x240011b0

08012890 <__malloc_unlock>:
 8012890:	4801      	ldr	r0, [pc, #4]	@ (8012898 <__malloc_unlock+0x8>)
 8012892:	f7ff b91b 	b.w	8011acc <__retarget_lock_release_recursive>
 8012896:	bf00      	nop
 8012898:	240011b0 	.word	0x240011b0

0801289c <_Balloc>:
 801289c:	b570      	push	{r4, r5, r6, lr}
 801289e:	69c6      	ldr	r6, [r0, #28]
 80128a0:	4604      	mov	r4, r0
 80128a2:	460d      	mov	r5, r1
 80128a4:	b976      	cbnz	r6, 80128c4 <_Balloc+0x28>
 80128a6:	2010      	movs	r0, #16
 80128a8:	f7ff ff42 	bl	8012730 <malloc>
 80128ac:	4602      	mov	r2, r0
 80128ae:	61e0      	str	r0, [r4, #28]
 80128b0:	b920      	cbnz	r0, 80128bc <_Balloc+0x20>
 80128b2:	4b18      	ldr	r3, [pc, #96]	@ (8012914 <_Balloc+0x78>)
 80128b4:	4818      	ldr	r0, [pc, #96]	@ (8012918 <_Balloc+0x7c>)
 80128b6:	216b      	movs	r1, #107	@ 0x6b
 80128b8:	f000 fdae 	bl	8013418 <__assert_func>
 80128bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80128c0:	6006      	str	r6, [r0, #0]
 80128c2:	60c6      	str	r6, [r0, #12]
 80128c4:	69e6      	ldr	r6, [r4, #28]
 80128c6:	68f3      	ldr	r3, [r6, #12]
 80128c8:	b183      	cbz	r3, 80128ec <_Balloc+0x50>
 80128ca:	69e3      	ldr	r3, [r4, #28]
 80128cc:	68db      	ldr	r3, [r3, #12]
 80128ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80128d2:	b9b8      	cbnz	r0, 8012904 <_Balloc+0x68>
 80128d4:	2101      	movs	r1, #1
 80128d6:	fa01 f605 	lsl.w	r6, r1, r5
 80128da:	1d72      	adds	r2, r6, #5
 80128dc:	0092      	lsls	r2, r2, #2
 80128de:	4620      	mov	r0, r4
 80128e0:	f000 fdb8 	bl	8013454 <_calloc_r>
 80128e4:	b160      	cbz	r0, 8012900 <_Balloc+0x64>
 80128e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80128ea:	e00e      	b.n	801290a <_Balloc+0x6e>
 80128ec:	2221      	movs	r2, #33	@ 0x21
 80128ee:	2104      	movs	r1, #4
 80128f0:	4620      	mov	r0, r4
 80128f2:	f000 fdaf 	bl	8013454 <_calloc_r>
 80128f6:	69e3      	ldr	r3, [r4, #28]
 80128f8:	60f0      	str	r0, [r6, #12]
 80128fa:	68db      	ldr	r3, [r3, #12]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d1e4      	bne.n	80128ca <_Balloc+0x2e>
 8012900:	2000      	movs	r0, #0
 8012902:	bd70      	pop	{r4, r5, r6, pc}
 8012904:	6802      	ldr	r2, [r0, #0]
 8012906:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801290a:	2300      	movs	r3, #0
 801290c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012910:	e7f7      	b.n	8012902 <_Balloc+0x66>
 8012912:	bf00      	nop
 8012914:	0801455f 	.word	0x0801455f
 8012918:	080145df 	.word	0x080145df

0801291c <_Bfree>:
 801291c:	b570      	push	{r4, r5, r6, lr}
 801291e:	69c6      	ldr	r6, [r0, #28]
 8012920:	4605      	mov	r5, r0
 8012922:	460c      	mov	r4, r1
 8012924:	b976      	cbnz	r6, 8012944 <_Bfree+0x28>
 8012926:	2010      	movs	r0, #16
 8012928:	f7ff ff02 	bl	8012730 <malloc>
 801292c:	4602      	mov	r2, r0
 801292e:	61e8      	str	r0, [r5, #28]
 8012930:	b920      	cbnz	r0, 801293c <_Bfree+0x20>
 8012932:	4b09      	ldr	r3, [pc, #36]	@ (8012958 <_Bfree+0x3c>)
 8012934:	4809      	ldr	r0, [pc, #36]	@ (801295c <_Bfree+0x40>)
 8012936:	218f      	movs	r1, #143	@ 0x8f
 8012938:	f000 fd6e 	bl	8013418 <__assert_func>
 801293c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012940:	6006      	str	r6, [r0, #0]
 8012942:	60c6      	str	r6, [r0, #12]
 8012944:	b13c      	cbz	r4, 8012956 <_Bfree+0x3a>
 8012946:	69eb      	ldr	r3, [r5, #28]
 8012948:	6862      	ldr	r2, [r4, #4]
 801294a:	68db      	ldr	r3, [r3, #12]
 801294c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012950:	6021      	str	r1, [r4, #0]
 8012952:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012956:	bd70      	pop	{r4, r5, r6, pc}
 8012958:	0801455f 	.word	0x0801455f
 801295c:	080145df 	.word	0x080145df

08012960 <__multadd>:
 8012960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012964:	690d      	ldr	r5, [r1, #16]
 8012966:	4607      	mov	r7, r0
 8012968:	460c      	mov	r4, r1
 801296a:	461e      	mov	r6, r3
 801296c:	f101 0c14 	add.w	ip, r1, #20
 8012970:	2000      	movs	r0, #0
 8012972:	f8dc 3000 	ldr.w	r3, [ip]
 8012976:	b299      	uxth	r1, r3
 8012978:	fb02 6101 	mla	r1, r2, r1, r6
 801297c:	0c1e      	lsrs	r6, r3, #16
 801297e:	0c0b      	lsrs	r3, r1, #16
 8012980:	fb02 3306 	mla	r3, r2, r6, r3
 8012984:	b289      	uxth	r1, r1
 8012986:	3001      	adds	r0, #1
 8012988:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801298c:	4285      	cmp	r5, r0
 801298e:	f84c 1b04 	str.w	r1, [ip], #4
 8012992:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012996:	dcec      	bgt.n	8012972 <__multadd+0x12>
 8012998:	b30e      	cbz	r6, 80129de <__multadd+0x7e>
 801299a:	68a3      	ldr	r3, [r4, #8]
 801299c:	42ab      	cmp	r3, r5
 801299e:	dc19      	bgt.n	80129d4 <__multadd+0x74>
 80129a0:	6861      	ldr	r1, [r4, #4]
 80129a2:	4638      	mov	r0, r7
 80129a4:	3101      	adds	r1, #1
 80129a6:	f7ff ff79 	bl	801289c <_Balloc>
 80129aa:	4680      	mov	r8, r0
 80129ac:	b928      	cbnz	r0, 80129ba <__multadd+0x5a>
 80129ae:	4602      	mov	r2, r0
 80129b0:	4b0c      	ldr	r3, [pc, #48]	@ (80129e4 <__multadd+0x84>)
 80129b2:	480d      	ldr	r0, [pc, #52]	@ (80129e8 <__multadd+0x88>)
 80129b4:	21ba      	movs	r1, #186	@ 0xba
 80129b6:	f000 fd2f 	bl	8013418 <__assert_func>
 80129ba:	6922      	ldr	r2, [r4, #16]
 80129bc:	3202      	adds	r2, #2
 80129be:	f104 010c 	add.w	r1, r4, #12
 80129c2:	0092      	lsls	r2, r2, #2
 80129c4:	300c      	adds	r0, #12
 80129c6:	f000 fd19 	bl	80133fc <memcpy>
 80129ca:	4621      	mov	r1, r4
 80129cc:	4638      	mov	r0, r7
 80129ce:	f7ff ffa5 	bl	801291c <_Bfree>
 80129d2:	4644      	mov	r4, r8
 80129d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80129d8:	3501      	adds	r5, #1
 80129da:	615e      	str	r6, [r3, #20]
 80129dc:	6125      	str	r5, [r4, #16]
 80129de:	4620      	mov	r0, r4
 80129e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129e4:	080145ce 	.word	0x080145ce
 80129e8:	080145df 	.word	0x080145df

080129ec <__hi0bits>:
 80129ec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80129f0:	4603      	mov	r3, r0
 80129f2:	bf36      	itet	cc
 80129f4:	0403      	lslcc	r3, r0, #16
 80129f6:	2000      	movcs	r0, #0
 80129f8:	2010      	movcc	r0, #16
 80129fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80129fe:	bf3c      	itt	cc
 8012a00:	021b      	lslcc	r3, r3, #8
 8012a02:	3008      	addcc	r0, #8
 8012a04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012a08:	bf3c      	itt	cc
 8012a0a:	011b      	lslcc	r3, r3, #4
 8012a0c:	3004      	addcc	r0, #4
 8012a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012a12:	bf3c      	itt	cc
 8012a14:	009b      	lslcc	r3, r3, #2
 8012a16:	3002      	addcc	r0, #2
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	db05      	blt.n	8012a28 <__hi0bits+0x3c>
 8012a1c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012a20:	f100 0001 	add.w	r0, r0, #1
 8012a24:	bf08      	it	eq
 8012a26:	2020      	moveq	r0, #32
 8012a28:	4770      	bx	lr

08012a2a <__lo0bits>:
 8012a2a:	6803      	ldr	r3, [r0, #0]
 8012a2c:	4602      	mov	r2, r0
 8012a2e:	f013 0007 	ands.w	r0, r3, #7
 8012a32:	d00b      	beq.n	8012a4c <__lo0bits+0x22>
 8012a34:	07d9      	lsls	r1, r3, #31
 8012a36:	d421      	bmi.n	8012a7c <__lo0bits+0x52>
 8012a38:	0798      	lsls	r0, r3, #30
 8012a3a:	bf49      	itett	mi
 8012a3c:	085b      	lsrmi	r3, r3, #1
 8012a3e:	089b      	lsrpl	r3, r3, #2
 8012a40:	2001      	movmi	r0, #1
 8012a42:	6013      	strmi	r3, [r2, #0]
 8012a44:	bf5c      	itt	pl
 8012a46:	6013      	strpl	r3, [r2, #0]
 8012a48:	2002      	movpl	r0, #2
 8012a4a:	4770      	bx	lr
 8012a4c:	b299      	uxth	r1, r3
 8012a4e:	b909      	cbnz	r1, 8012a54 <__lo0bits+0x2a>
 8012a50:	0c1b      	lsrs	r3, r3, #16
 8012a52:	2010      	movs	r0, #16
 8012a54:	b2d9      	uxtb	r1, r3
 8012a56:	b909      	cbnz	r1, 8012a5c <__lo0bits+0x32>
 8012a58:	3008      	adds	r0, #8
 8012a5a:	0a1b      	lsrs	r3, r3, #8
 8012a5c:	0719      	lsls	r1, r3, #28
 8012a5e:	bf04      	itt	eq
 8012a60:	091b      	lsreq	r3, r3, #4
 8012a62:	3004      	addeq	r0, #4
 8012a64:	0799      	lsls	r1, r3, #30
 8012a66:	bf04      	itt	eq
 8012a68:	089b      	lsreq	r3, r3, #2
 8012a6a:	3002      	addeq	r0, #2
 8012a6c:	07d9      	lsls	r1, r3, #31
 8012a6e:	d403      	bmi.n	8012a78 <__lo0bits+0x4e>
 8012a70:	085b      	lsrs	r3, r3, #1
 8012a72:	f100 0001 	add.w	r0, r0, #1
 8012a76:	d003      	beq.n	8012a80 <__lo0bits+0x56>
 8012a78:	6013      	str	r3, [r2, #0]
 8012a7a:	4770      	bx	lr
 8012a7c:	2000      	movs	r0, #0
 8012a7e:	4770      	bx	lr
 8012a80:	2020      	movs	r0, #32
 8012a82:	4770      	bx	lr

08012a84 <__i2b>:
 8012a84:	b510      	push	{r4, lr}
 8012a86:	460c      	mov	r4, r1
 8012a88:	2101      	movs	r1, #1
 8012a8a:	f7ff ff07 	bl	801289c <_Balloc>
 8012a8e:	4602      	mov	r2, r0
 8012a90:	b928      	cbnz	r0, 8012a9e <__i2b+0x1a>
 8012a92:	4b05      	ldr	r3, [pc, #20]	@ (8012aa8 <__i2b+0x24>)
 8012a94:	4805      	ldr	r0, [pc, #20]	@ (8012aac <__i2b+0x28>)
 8012a96:	f240 1145 	movw	r1, #325	@ 0x145
 8012a9a:	f000 fcbd 	bl	8013418 <__assert_func>
 8012a9e:	2301      	movs	r3, #1
 8012aa0:	6144      	str	r4, [r0, #20]
 8012aa2:	6103      	str	r3, [r0, #16]
 8012aa4:	bd10      	pop	{r4, pc}
 8012aa6:	bf00      	nop
 8012aa8:	080145ce 	.word	0x080145ce
 8012aac:	080145df 	.word	0x080145df

08012ab0 <__multiply>:
 8012ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ab4:	4614      	mov	r4, r2
 8012ab6:	690a      	ldr	r2, [r1, #16]
 8012ab8:	6923      	ldr	r3, [r4, #16]
 8012aba:	429a      	cmp	r2, r3
 8012abc:	bfa8      	it	ge
 8012abe:	4623      	movge	r3, r4
 8012ac0:	460f      	mov	r7, r1
 8012ac2:	bfa4      	itt	ge
 8012ac4:	460c      	movge	r4, r1
 8012ac6:	461f      	movge	r7, r3
 8012ac8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012acc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012ad0:	68a3      	ldr	r3, [r4, #8]
 8012ad2:	6861      	ldr	r1, [r4, #4]
 8012ad4:	eb0a 0609 	add.w	r6, sl, r9
 8012ad8:	42b3      	cmp	r3, r6
 8012ada:	b085      	sub	sp, #20
 8012adc:	bfb8      	it	lt
 8012ade:	3101      	addlt	r1, #1
 8012ae0:	f7ff fedc 	bl	801289c <_Balloc>
 8012ae4:	b930      	cbnz	r0, 8012af4 <__multiply+0x44>
 8012ae6:	4602      	mov	r2, r0
 8012ae8:	4b44      	ldr	r3, [pc, #272]	@ (8012bfc <__multiply+0x14c>)
 8012aea:	4845      	ldr	r0, [pc, #276]	@ (8012c00 <__multiply+0x150>)
 8012aec:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012af0:	f000 fc92 	bl	8013418 <__assert_func>
 8012af4:	f100 0514 	add.w	r5, r0, #20
 8012af8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012afc:	462b      	mov	r3, r5
 8012afe:	2200      	movs	r2, #0
 8012b00:	4543      	cmp	r3, r8
 8012b02:	d321      	bcc.n	8012b48 <__multiply+0x98>
 8012b04:	f107 0114 	add.w	r1, r7, #20
 8012b08:	f104 0214 	add.w	r2, r4, #20
 8012b0c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012b10:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012b14:	9302      	str	r3, [sp, #8]
 8012b16:	1b13      	subs	r3, r2, r4
 8012b18:	3b15      	subs	r3, #21
 8012b1a:	f023 0303 	bic.w	r3, r3, #3
 8012b1e:	3304      	adds	r3, #4
 8012b20:	f104 0715 	add.w	r7, r4, #21
 8012b24:	42ba      	cmp	r2, r7
 8012b26:	bf38      	it	cc
 8012b28:	2304      	movcc	r3, #4
 8012b2a:	9301      	str	r3, [sp, #4]
 8012b2c:	9b02      	ldr	r3, [sp, #8]
 8012b2e:	9103      	str	r1, [sp, #12]
 8012b30:	428b      	cmp	r3, r1
 8012b32:	d80c      	bhi.n	8012b4e <__multiply+0x9e>
 8012b34:	2e00      	cmp	r6, #0
 8012b36:	dd03      	ble.n	8012b40 <__multiply+0x90>
 8012b38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d05b      	beq.n	8012bf8 <__multiply+0x148>
 8012b40:	6106      	str	r6, [r0, #16]
 8012b42:	b005      	add	sp, #20
 8012b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b48:	f843 2b04 	str.w	r2, [r3], #4
 8012b4c:	e7d8      	b.n	8012b00 <__multiply+0x50>
 8012b4e:	f8b1 a000 	ldrh.w	sl, [r1]
 8012b52:	f1ba 0f00 	cmp.w	sl, #0
 8012b56:	d024      	beq.n	8012ba2 <__multiply+0xf2>
 8012b58:	f104 0e14 	add.w	lr, r4, #20
 8012b5c:	46a9      	mov	r9, r5
 8012b5e:	f04f 0c00 	mov.w	ip, #0
 8012b62:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012b66:	f8d9 3000 	ldr.w	r3, [r9]
 8012b6a:	fa1f fb87 	uxth.w	fp, r7
 8012b6e:	b29b      	uxth	r3, r3
 8012b70:	fb0a 330b 	mla	r3, sl, fp, r3
 8012b74:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012b78:	f8d9 7000 	ldr.w	r7, [r9]
 8012b7c:	4463      	add	r3, ip
 8012b7e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012b82:	fb0a c70b 	mla	r7, sl, fp, ip
 8012b86:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012b8a:	b29b      	uxth	r3, r3
 8012b8c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012b90:	4572      	cmp	r2, lr
 8012b92:	f849 3b04 	str.w	r3, [r9], #4
 8012b96:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012b9a:	d8e2      	bhi.n	8012b62 <__multiply+0xb2>
 8012b9c:	9b01      	ldr	r3, [sp, #4]
 8012b9e:	f845 c003 	str.w	ip, [r5, r3]
 8012ba2:	9b03      	ldr	r3, [sp, #12]
 8012ba4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012ba8:	3104      	adds	r1, #4
 8012baa:	f1b9 0f00 	cmp.w	r9, #0
 8012bae:	d021      	beq.n	8012bf4 <__multiply+0x144>
 8012bb0:	682b      	ldr	r3, [r5, #0]
 8012bb2:	f104 0c14 	add.w	ip, r4, #20
 8012bb6:	46ae      	mov	lr, r5
 8012bb8:	f04f 0a00 	mov.w	sl, #0
 8012bbc:	f8bc b000 	ldrh.w	fp, [ip]
 8012bc0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012bc4:	fb09 770b 	mla	r7, r9, fp, r7
 8012bc8:	4457      	add	r7, sl
 8012bca:	b29b      	uxth	r3, r3
 8012bcc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012bd0:	f84e 3b04 	str.w	r3, [lr], #4
 8012bd4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012bd8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012bdc:	f8be 3000 	ldrh.w	r3, [lr]
 8012be0:	fb09 330a 	mla	r3, r9, sl, r3
 8012be4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012be8:	4562      	cmp	r2, ip
 8012bea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012bee:	d8e5      	bhi.n	8012bbc <__multiply+0x10c>
 8012bf0:	9f01      	ldr	r7, [sp, #4]
 8012bf2:	51eb      	str	r3, [r5, r7]
 8012bf4:	3504      	adds	r5, #4
 8012bf6:	e799      	b.n	8012b2c <__multiply+0x7c>
 8012bf8:	3e01      	subs	r6, #1
 8012bfa:	e79b      	b.n	8012b34 <__multiply+0x84>
 8012bfc:	080145ce 	.word	0x080145ce
 8012c00:	080145df 	.word	0x080145df

08012c04 <__pow5mult>:
 8012c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c08:	4615      	mov	r5, r2
 8012c0a:	f012 0203 	ands.w	r2, r2, #3
 8012c0e:	4607      	mov	r7, r0
 8012c10:	460e      	mov	r6, r1
 8012c12:	d007      	beq.n	8012c24 <__pow5mult+0x20>
 8012c14:	4c25      	ldr	r4, [pc, #148]	@ (8012cac <__pow5mult+0xa8>)
 8012c16:	3a01      	subs	r2, #1
 8012c18:	2300      	movs	r3, #0
 8012c1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012c1e:	f7ff fe9f 	bl	8012960 <__multadd>
 8012c22:	4606      	mov	r6, r0
 8012c24:	10ad      	asrs	r5, r5, #2
 8012c26:	d03d      	beq.n	8012ca4 <__pow5mult+0xa0>
 8012c28:	69fc      	ldr	r4, [r7, #28]
 8012c2a:	b97c      	cbnz	r4, 8012c4c <__pow5mult+0x48>
 8012c2c:	2010      	movs	r0, #16
 8012c2e:	f7ff fd7f 	bl	8012730 <malloc>
 8012c32:	4602      	mov	r2, r0
 8012c34:	61f8      	str	r0, [r7, #28]
 8012c36:	b928      	cbnz	r0, 8012c44 <__pow5mult+0x40>
 8012c38:	4b1d      	ldr	r3, [pc, #116]	@ (8012cb0 <__pow5mult+0xac>)
 8012c3a:	481e      	ldr	r0, [pc, #120]	@ (8012cb4 <__pow5mult+0xb0>)
 8012c3c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012c40:	f000 fbea 	bl	8013418 <__assert_func>
 8012c44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012c48:	6004      	str	r4, [r0, #0]
 8012c4a:	60c4      	str	r4, [r0, #12]
 8012c4c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012c50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012c54:	b94c      	cbnz	r4, 8012c6a <__pow5mult+0x66>
 8012c56:	f240 2171 	movw	r1, #625	@ 0x271
 8012c5a:	4638      	mov	r0, r7
 8012c5c:	f7ff ff12 	bl	8012a84 <__i2b>
 8012c60:	2300      	movs	r3, #0
 8012c62:	f8c8 0008 	str.w	r0, [r8, #8]
 8012c66:	4604      	mov	r4, r0
 8012c68:	6003      	str	r3, [r0, #0]
 8012c6a:	f04f 0900 	mov.w	r9, #0
 8012c6e:	07eb      	lsls	r3, r5, #31
 8012c70:	d50a      	bpl.n	8012c88 <__pow5mult+0x84>
 8012c72:	4631      	mov	r1, r6
 8012c74:	4622      	mov	r2, r4
 8012c76:	4638      	mov	r0, r7
 8012c78:	f7ff ff1a 	bl	8012ab0 <__multiply>
 8012c7c:	4631      	mov	r1, r6
 8012c7e:	4680      	mov	r8, r0
 8012c80:	4638      	mov	r0, r7
 8012c82:	f7ff fe4b 	bl	801291c <_Bfree>
 8012c86:	4646      	mov	r6, r8
 8012c88:	106d      	asrs	r5, r5, #1
 8012c8a:	d00b      	beq.n	8012ca4 <__pow5mult+0xa0>
 8012c8c:	6820      	ldr	r0, [r4, #0]
 8012c8e:	b938      	cbnz	r0, 8012ca0 <__pow5mult+0x9c>
 8012c90:	4622      	mov	r2, r4
 8012c92:	4621      	mov	r1, r4
 8012c94:	4638      	mov	r0, r7
 8012c96:	f7ff ff0b 	bl	8012ab0 <__multiply>
 8012c9a:	6020      	str	r0, [r4, #0]
 8012c9c:	f8c0 9000 	str.w	r9, [r0]
 8012ca0:	4604      	mov	r4, r0
 8012ca2:	e7e4      	b.n	8012c6e <__pow5mult+0x6a>
 8012ca4:	4630      	mov	r0, r6
 8012ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012caa:	bf00      	nop
 8012cac:	08014638 	.word	0x08014638
 8012cb0:	0801455f 	.word	0x0801455f
 8012cb4:	080145df 	.word	0x080145df

08012cb8 <__lshift>:
 8012cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012cbc:	460c      	mov	r4, r1
 8012cbe:	6849      	ldr	r1, [r1, #4]
 8012cc0:	6923      	ldr	r3, [r4, #16]
 8012cc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012cc6:	68a3      	ldr	r3, [r4, #8]
 8012cc8:	4607      	mov	r7, r0
 8012cca:	4691      	mov	r9, r2
 8012ccc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012cd0:	f108 0601 	add.w	r6, r8, #1
 8012cd4:	42b3      	cmp	r3, r6
 8012cd6:	db0b      	blt.n	8012cf0 <__lshift+0x38>
 8012cd8:	4638      	mov	r0, r7
 8012cda:	f7ff fddf 	bl	801289c <_Balloc>
 8012cde:	4605      	mov	r5, r0
 8012ce0:	b948      	cbnz	r0, 8012cf6 <__lshift+0x3e>
 8012ce2:	4602      	mov	r2, r0
 8012ce4:	4b28      	ldr	r3, [pc, #160]	@ (8012d88 <__lshift+0xd0>)
 8012ce6:	4829      	ldr	r0, [pc, #164]	@ (8012d8c <__lshift+0xd4>)
 8012ce8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012cec:	f000 fb94 	bl	8013418 <__assert_func>
 8012cf0:	3101      	adds	r1, #1
 8012cf2:	005b      	lsls	r3, r3, #1
 8012cf4:	e7ee      	b.n	8012cd4 <__lshift+0x1c>
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	f100 0114 	add.w	r1, r0, #20
 8012cfc:	f100 0210 	add.w	r2, r0, #16
 8012d00:	4618      	mov	r0, r3
 8012d02:	4553      	cmp	r3, sl
 8012d04:	db33      	blt.n	8012d6e <__lshift+0xb6>
 8012d06:	6920      	ldr	r0, [r4, #16]
 8012d08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012d0c:	f104 0314 	add.w	r3, r4, #20
 8012d10:	f019 091f 	ands.w	r9, r9, #31
 8012d14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012d18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012d1c:	d02b      	beq.n	8012d76 <__lshift+0xbe>
 8012d1e:	f1c9 0e20 	rsb	lr, r9, #32
 8012d22:	468a      	mov	sl, r1
 8012d24:	2200      	movs	r2, #0
 8012d26:	6818      	ldr	r0, [r3, #0]
 8012d28:	fa00 f009 	lsl.w	r0, r0, r9
 8012d2c:	4310      	orrs	r0, r2
 8012d2e:	f84a 0b04 	str.w	r0, [sl], #4
 8012d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d36:	459c      	cmp	ip, r3
 8012d38:	fa22 f20e 	lsr.w	r2, r2, lr
 8012d3c:	d8f3      	bhi.n	8012d26 <__lshift+0x6e>
 8012d3e:	ebac 0304 	sub.w	r3, ip, r4
 8012d42:	3b15      	subs	r3, #21
 8012d44:	f023 0303 	bic.w	r3, r3, #3
 8012d48:	3304      	adds	r3, #4
 8012d4a:	f104 0015 	add.w	r0, r4, #21
 8012d4e:	4584      	cmp	ip, r0
 8012d50:	bf38      	it	cc
 8012d52:	2304      	movcc	r3, #4
 8012d54:	50ca      	str	r2, [r1, r3]
 8012d56:	b10a      	cbz	r2, 8012d5c <__lshift+0xa4>
 8012d58:	f108 0602 	add.w	r6, r8, #2
 8012d5c:	3e01      	subs	r6, #1
 8012d5e:	4638      	mov	r0, r7
 8012d60:	612e      	str	r6, [r5, #16]
 8012d62:	4621      	mov	r1, r4
 8012d64:	f7ff fdda 	bl	801291c <_Bfree>
 8012d68:	4628      	mov	r0, r5
 8012d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012d72:	3301      	adds	r3, #1
 8012d74:	e7c5      	b.n	8012d02 <__lshift+0x4a>
 8012d76:	3904      	subs	r1, #4
 8012d78:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8012d80:	459c      	cmp	ip, r3
 8012d82:	d8f9      	bhi.n	8012d78 <__lshift+0xc0>
 8012d84:	e7ea      	b.n	8012d5c <__lshift+0xa4>
 8012d86:	bf00      	nop
 8012d88:	080145ce 	.word	0x080145ce
 8012d8c:	080145df 	.word	0x080145df

08012d90 <__mcmp>:
 8012d90:	690a      	ldr	r2, [r1, #16]
 8012d92:	4603      	mov	r3, r0
 8012d94:	6900      	ldr	r0, [r0, #16]
 8012d96:	1a80      	subs	r0, r0, r2
 8012d98:	b530      	push	{r4, r5, lr}
 8012d9a:	d10e      	bne.n	8012dba <__mcmp+0x2a>
 8012d9c:	3314      	adds	r3, #20
 8012d9e:	3114      	adds	r1, #20
 8012da0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012da4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012da8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012dac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012db0:	4295      	cmp	r5, r2
 8012db2:	d003      	beq.n	8012dbc <__mcmp+0x2c>
 8012db4:	d205      	bcs.n	8012dc2 <__mcmp+0x32>
 8012db6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012dba:	bd30      	pop	{r4, r5, pc}
 8012dbc:	42a3      	cmp	r3, r4
 8012dbe:	d3f3      	bcc.n	8012da8 <__mcmp+0x18>
 8012dc0:	e7fb      	b.n	8012dba <__mcmp+0x2a>
 8012dc2:	2001      	movs	r0, #1
 8012dc4:	e7f9      	b.n	8012dba <__mcmp+0x2a>
	...

08012dc8 <__mdiff>:
 8012dc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dcc:	4689      	mov	r9, r1
 8012dce:	4606      	mov	r6, r0
 8012dd0:	4611      	mov	r1, r2
 8012dd2:	4648      	mov	r0, r9
 8012dd4:	4614      	mov	r4, r2
 8012dd6:	f7ff ffdb 	bl	8012d90 <__mcmp>
 8012dda:	1e05      	subs	r5, r0, #0
 8012ddc:	d112      	bne.n	8012e04 <__mdiff+0x3c>
 8012dde:	4629      	mov	r1, r5
 8012de0:	4630      	mov	r0, r6
 8012de2:	f7ff fd5b 	bl	801289c <_Balloc>
 8012de6:	4602      	mov	r2, r0
 8012de8:	b928      	cbnz	r0, 8012df6 <__mdiff+0x2e>
 8012dea:	4b3f      	ldr	r3, [pc, #252]	@ (8012ee8 <__mdiff+0x120>)
 8012dec:	f240 2137 	movw	r1, #567	@ 0x237
 8012df0:	483e      	ldr	r0, [pc, #248]	@ (8012eec <__mdiff+0x124>)
 8012df2:	f000 fb11 	bl	8013418 <__assert_func>
 8012df6:	2301      	movs	r3, #1
 8012df8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012dfc:	4610      	mov	r0, r2
 8012dfe:	b003      	add	sp, #12
 8012e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e04:	bfbc      	itt	lt
 8012e06:	464b      	movlt	r3, r9
 8012e08:	46a1      	movlt	r9, r4
 8012e0a:	4630      	mov	r0, r6
 8012e0c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012e10:	bfba      	itte	lt
 8012e12:	461c      	movlt	r4, r3
 8012e14:	2501      	movlt	r5, #1
 8012e16:	2500      	movge	r5, #0
 8012e18:	f7ff fd40 	bl	801289c <_Balloc>
 8012e1c:	4602      	mov	r2, r0
 8012e1e:	b918      	cbnz	r0, 8012e28 <__mdiff+0x60>
 8012e20:	4b31      	ldr	r3, [pc, #196]	@ (8012ee8 <__mdiff+0x120>)
 8012e22:	f240 2145 	movw	r1, #581	@ 0x245
 8012e26:	e7e3      	b.n	8012df0 <__mdiff+0x28>
 8012e28:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012e2c:	6926      	ldr	r6, [r4, #16]
 8012e2e:	60c5      	str	r5, [r0, #12]
 8012e30:	f109 0310 	add.w	r3, r9, #16
 8012e34:	f109 0514 	add.w	r5, r9, #20
 8012e38:	f104 0e14 	add.w	lr, r4, #20
 8012e3c:	f100 0b14 	add.w	fp, r0, #20
 8012e40:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012e44:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012e48:	9301      	str	r3, [sp, #4]
 8012e4a:	46d9      	mov	r9, fp
 8012e4c:	f04f 0c00 	mov.w	ip, #0
 8012e50:	9b01      	ldr	r3, [sp, #4]
 8012e52:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012e56:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012e5a:	9301      	str	r3, [sp, #4]
 8012e5c:	fa1f f38a 	uxth.w	r3, sl
 8012e60:	4619      	mov	r1, r3
 8012e62:	b283      	uxth	r3, r0
 8012e64:	1acb      	subs	r3, r1, r3
 8012e66:	0c00      	lsrs	r0, r0, #16
 8012e68:	4463      	add	r3, ip
 8012e6a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012e6e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012e72:	b29b      	uxth	r3, r3
 8012e74:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012e78:	4576      	cmp	r6, lr
 8012e7a:	f849 3b04 	str.w	r3, [r9], #4
 8012e7e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012e82:	d8e5      	bhi.n	8012e50 <__mdiff+0x88>
 8012e84:	1b33      	subs	r3, r6, r4
 8012e86:	3b15      	subs	r3, #21
 8012e88:	f023 0303 	bic.w	r3, r3, #3
 8012e8c:	3415      	adds	r4, #21
 8012e8e:	3304      	adds	r3, #4
 8012e90:	42a6      	cmp	r6, r4
 8012e92:	bf38      	it	cc
 8012e94:	2304      	movcc	r3, #4
 8012e96:	441d      	add	r5, r3
 8012e98:	445b      	add	r3, fp
 8012e9a:	461e      	mov	r6, r3
 8012e9c:	462c      	mov	r4, r5
 8012e9e:	4544      	cmp	r4, r8
 8012ea0:	d30e      	bcc.n	8012ec0 <__mdiff+0xf8>
 8012ea2:	f108 0103 	add.w	r1, r8, #3
 8012ea6:	1b49      	subs	r1, r1, r5
 8012ea8:	f021 0103 	bic.w	r1, r1, #3
 8012eac:	3d03      	subs	r5, #3
 8012eae:	45a8      	cmp	r8, r5
 8012eb0:	bf38      	it	cc
 8012eb2:	2100      	movcc	r1, #0
 8012eb4:	440b      	add	r3, r1
 8012eb6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012eba:	b191      	cbz	r1, 8012ee2 <__mdiff+0x11a>
 8012ebc:	6117      	str	r7, [r2, #16]
 8012ebe:	e79d      	b.n	8012dfc <__mdiff+0x34>
 8012ec0:	f854 1b04 	ldr.w	r1, [r4], #4
 8012ec4:	46e6      	mov	lr, ip
 8012ec6:	0c08      	lsrs	r0, r1, #16
 8012ec8:	fa1c fc81 	uxtah	ip, ip, r1
 8012ecc:	4471      	add	r1, lr
 8012ece:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012ed2:	b289      	uxth	r1, r1
 8012ed4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012ed8:	f846 1b04 	str.w	r1, [r6], #4
 8012edc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012ee0:	e7dd      	b.n	8012e9e <__mdiff+0xd6>
 8012ee2:	3f01      	subs	r7, #1
 8012ee4:	e7e7      	b.n	8012eb6 <__mdiff+0xee>
 8012ee6:	bf00      	nop
 8012ee8:	080145ce 	.word	0x080145ce
 8012eec:	080145df 	.word	0x080145df

08012ef0 <__d2b>:
 8012ef0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012ef4:	460f      	mov	r7, r1
 8012ef6:	2101      	movs	r1, #1
 8012ef8:	ec59 8b10 	vmov	r8, r9, d0
 8012efc:	4616      	mov	r6, r2
 8012efe:	f7ff fccd 	bl	801289c <_Balloc>
 8012f02:	4604      	mov	r4, r0
 8012f04:	b930      	cbnz	r0, 8012f14 <__d2b+0x24>
 8012f06:	4602      	mov	r2, r0
 8012f08:	4b23      	ldr	r3, [pc, #140]	@ (8012f98 <__d2b+0xa8>)
 8012f0a:	4824      	ldr	r0, [pc, #144]	@ (8012f9c <__d2b+0xac>)
 8012f0c:	f240 310f 	movw	r1, #783	@ 0x30f
 8012f10:	f000 fa82 	bl	8013418 <__assert_func>
 8012f14:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012f18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012f1c:	b10d      	cbz	r5, 8012f22 <__d2b+0x32>
 8012f1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012f22:	9301      	str	r3, [sp, #4]
 8012f24:	f1b8 0300 	subs.w	r3, r8, #0
 8012f28:	d023      	beq.n	8012f72 <__d2b+0x82>
 8012f2a:	4668      	mov	r0, sp
 8012f2c:	9300      	str	r3, [sp, #0]
 8012f2e:	f7ff fd7c 	bl	8012a2a <__lo0bits>
 8012f32:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012f36:	b1d0      	cbz	r0, 8012f6e <__d2b+0x7e>
 8012f38:	f1c0 0320 	rsb	r3, r0, #32
 8012f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8012f40:	430b      	orrs	r3, r1
 8012f42:	40c2      	lsrs	r2, r0
 8012f44:	6163      	str	r3, [r4, #20]
 8012f46:	9201      	str	r2, [sp, #4]
 8012f48:	9b01      	ldr	r3, [sp, #4]
 8012f4a:	61a3      	str	r3, [r4, #24]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	bf0c      	ite	eq
 8012f50:	2201      	moveq	r2, #1
 8012f52:	2202      	movne	r2, #2
 8012f54:	6122      	str	r2, [r4, #16]
 8012f56:	b1a5      	cbz	r5, 8012f82 <__d2b+0x92>
 8012f58:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012f5c:	4405      	add	r5, r0
 8012f5e:	603d      	str	r5, [r7, #0]
 8012f60:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012f64:	6030      	str	r0, [r6, #0]
 8012f66:	4620      	mov	r0, r4
 8012f68:	b003      	add	sp, #12
 8012f6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f6e:	6161      	str	r1, [r4, #20]
 8012f70:	e7ea      	b.n	8012f48 <__d2b+0x58>
 8012f72:	a801      	add	r0, sp, #4
 8012f74:	f7ff fd59 	bl	8012a2a <__lo0bits>
 8012f78:	9b01      	ldr	r3, [sp, #4]
 8012f7a:	6163      	str	r3, [r4, #20]
 8012f7c:	3020      	adds	r0, #32
 8012f7e:	2201      	movs	r2, #1
 8012f80:	e7e8      	b.n	8012f54 <__d2b+0x64>
 8012f82:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012f86:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012f8a:	6038      	str	r0, [r7, #0]
 8012f8c:	6918      	ldr	r0, [r3, #16]
 8012f8e:	f7ff fd2d 	bl	80129ec <__hi0bits>
 8012f92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012f96:	e7e5      	b.n	8012f64 <__d2b+0x74>
 8012f98:	080145ce 	.word	0x080145ce
 8012f9c:	080145df 	.word	0x080145df

08012fa0 <__ssputs_r>:
 8012fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012fa4:	688e      	ldr	r6, [r1, #8]
 8012fa6:	461f      	mov	r7, r3
 8012fa8:	42be      	cmp	r6, r7
 8012faa:	680b      	ldr	r3, [r1, #0]
 8012fac:	4682      	mov	sl, r0
 8012fae:	460c      	mov	r4, r1
 8012fb0:	4690      	mov	r8, r2
 8012fb2:	d82d      	bhi.n	8013010 <__ssputs_r+0x70>
 8012fb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012fb8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012fbc:	d026      	beq.n	801300c <__ssputs_r+0x6c>
 8012fbe:	6965      	ldr	r5, [r4, #20]
 8012fc0:	6909      	ldr	r1, [r1, #16]
 8012fc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012fc6:	eba3 0901 	sub.w	r9, r3, r1
 8012fca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012fce:	1c7b      	adds	r3, r7, #1
 8012fd0:	444b      	add	r3, r9
 8012fd2:	106d      	asrs	r5, r5, #1
 8012fd4:	429d      	cmp	r5, r3
 8012fd6:	bf38      	it	cc
 8012fd8:	461d      	movcc	r5, r3
 8012fda:	0553      	lsls	r3, r2, #21
 8012fdc:	d527      	bpl.n	801302e <__ssputs_r+0x8e>
 8012fde:	4629      	mov	r1, r5
 8012fe0:	f7ff fbd0 	bl	8012784 <_malloc_r>
 8012fe4:	4606      	mov	r6, r0
 8012fe6:	b360      	cbz	r0, 8013042 <__ssputs_r+0xa2>
 8012fe8:	6921      	ldr	r1, [r4, #16]
 8012fea:	464a      	mov	r2, r9
 8012fec:	f000 fa06 	bl	80133fc <memcpy>
 8012ff0:	89a3      	ldrh	r3, [r4, #12]
 8012ff2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012ff6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012ffa:	81a3      	strh	r3, [r4, #12]
 8012ffc:	6126      	str	r6, [r4, #16]
 8012ffe:	6165      	str	r5, [r4, #20]
 8013000:	444e      	add	r6, r9
 8013002:	eba5 0509 	sub.w	r5, r5, r9
 8013006:	6026      	str	r6, [r4, #0]
 8013008:	60a5      	str	r5, [r4, #8]
 801300a:	463e      	mov	r6, r7
 801300c:	42be      	cmp	r6, r7
 801300e:	d900      	bls.n	8013012 <__ssputs_r+0x72>
 8013010:	463e      	mov	r6, r7
 8013012:	6820      	ldr	r0, [r4, #0]
 8013014:	4632      	mov	r2, r6
 8013016:	4641      	mov	r1, r8
 8013018:	f000 f9c6 	bl	80133a8 <memmove>
 801301c:	68a3      	ldr	r3, [r4, #8]
 801301e:	1b9b      	subs	r3, r3, r6
 8013020:	60a3      	str	r3, [r4, #8]
 8013022:	6823      	ldr	r3, [r4, #0]
 8013024:	4433      	add	r3, r6
 8013026:	6023      	str	r3, [r4, #0]
 8013028:	2000      	movs	r0, #0
 801302a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801302e:	462a      	mov	r2, r5
 8013030:	f000 fa36 	bl	80134a0 <_realloc_r>
 8013034:	4606      	mov	r6, r0
 8013036:	2800      	cmp	r0, #0
 8013038:	d1e0      	bne.n	8012ffc <__ssputs_r+0x5c>
 801303a:	6921      	ldr	r1, [r4, #16]
 801303c:	4650      	mov	r0, sl
 801303e:	f7ff fb2d 	bl	801269c <_free_r>
 8013042:	230c      	movs	r3, #12
 8013044:	f8ca 3000 	str.w	r3, [sl]
 8013048:	89a3      	ldrh	r3, [r4, #12]
 801304a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801304e:	81a3      	strh	r3, [r4, #12]
 8013050:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013054:	e7e9      	b.n	801302a <__ssputs_r+0x8a>
	...

08013058 <_svfiprintf_r>:
 8013058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801305c:	4698      	mov	r8, r3
 801305e:	898b      	ldrh	r3, [r1, #12]
 8013060:	061b      	lsls	r3, r3, #24
 8013062:	b09d      	sub	sp, #116	@ 0x74
 8013064:	4607      	mov	r7, r0
 8013066:	460d      	mov	r5, r1
 8013068:	4614      	mov	r4, r2
 801306a:	d510      	bpl.n	801308e <_svfiprintf_r+0x36>
 801306c:	690b      	ldr	r3, [r1, #16]
 801306e:	b973      	cbnz	r3, 801308e <_svfiprintf_r+0x36>
 8013070:	2140      	movs	r1, #64	@ 0x40
 8013072:	f7ff fb87 	bl	8012784 <_malloc_r>
 8013076:	6028      	str	r0, [r5, #0]
 8013078:	6128      	str	r0, [r5, #16]
 801307a:	b930      	cbnz	r0, 801308a <_svfiprintf_r+0x32>
 801307c:	230c      	movs	r3, #12
 801307e:	603b      	str	r3, [r7, #0]
 8013080:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013084:	b01d      	add	sp, #116	@ 0x74
 8013086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801308a:	2340      	movs	r3, #64	@ 0x40
 801308c:	616b      	str	r3, [r5, #20]
 801308e:	2300      	movs	r3, #0
 8013090:	9309      	str	r3, [sp, #36]	@ 0x24
 8013092:	2320      	movs	r3, #32
 8013094:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013098:	f8cd 800c 	str.w	r8, [sp, #12]
 801309c:	2330      	movs	r3, #48	@ 0x30
 801309e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801323c <_svfiprintf_r+0x1e4>
 80130a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80130a6:	f04f 0901 	mov.w	r9, #1
 80130aa:	4623      	mov	r3, r4
 80130ac:	469a      	mov	sl, r3
 80130ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80130b2:	b10a      	cbz	r2, 80130b8 <_svfiprintf_r+0x60>
 80130b4:	2a25      	cmp	r2, #37	@ 0x25
 80130b6:	d1f9      	bne.n	80130ac <_svfiprintf_r+0x54>
 80130b8:	ebba 0b04 	subs.w	fp, sl, r4
 80130bc:	d00b      	beq.n	80130d6 <_svfiprintf_r+0x7e>
 80130be:	465b      	mov	r3, fp
 80130c0:	4622      	mov	r2, r4
 80130c2:	4629      	mov	r1, r5
 80130c4:	4638      	mov	r0, r7
 80130c6:	f7ff ff6b 	bl	8012fa0 <__ssputs_r>
 80130ca:	3001      	adds	r0, #1
 80130cc:	f000 80a7 	beq.w	801321e <_svfiprintf_r+0x1c6>
 80130d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80130d2:	445a      	add	r2, fp
 80130d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80130d6:	f89a 3000 	ldrb.w	r3, [sl]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	f000 809f 	beq.w	801321e <_svfiprintf_r+0x1c6>
 80130e0:	2300      	movs	r3, #0
 80130e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80130e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80130ea:	f10a 0a01 	add.w	sl, sl, #1
 80130ee:	9304      	str	r3, [sp, #16]
 80130f0:	9307      	str	r3, [sp, #28]
 80130f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80130f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80130f8:	4654      	mov	r4, sl
 80130fa:	2205      	movs	r2, #5
 80130fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013100:	484e      	ldr	r0, [pc, #312]	@ (801323c <_svfiprintf_r+0x1e4>)
 8013102:	f7ed f905 	bl	8000310 <memchr>
 8013106:	9a04      	ldr	r2, [sp, #16]
 8013108:	b9d8      	cbnz	r0, 8013142 <_svfiprintf_r+0xea>
 801310a:	06d0      	lsls	r0, r2, #27
 801310c:	bf44      	itt	mi
 801310e:	2320      	movmi	r3, #32
 8013110:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013114:	0711      	lsls	r1, r2, #28
 8013116:	bf44      	itt	mi
 8013118:	232b      	movmi	r3, #43	@ 0x2b
 801311a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801311e:	f89a 3000 	ldrb.w	r3, [sl]
 8013122:	2b2a      	cmp	r3, #42	@ 0x2a
 8013124:	d015      	beq.n	8013152 <_svfiprintf_r+0xfa>
 8013126:	9a07      	ldr	r2, [sp, #28]
 8013128:	4654      	mov	r4, sl
 801312a:	2000      	movs	r0, #0
 801312c:	f04f 0c0a 	mov.w	ip, #10
 8013130:	4621      	mov	r1, r4
 8013132:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013136:	3b30      	subs	r3, #48	@ 0x30
 8013138:	2b09      	cmp	r3, #9
 801313a:	d94b      	bls.n	80131d4 <_svfiprintf_r+0x17c>
 801313c:	b1b0      	cbz	r0, 801316c <_svfiprintf_r+0x114>
 801313e:	9207      	str	r2, [sp, #28]
 8013140:	e014      	b.n	801316c <_svfiprintf_r+0x114>
 8013142:	eba0 0308 	sub.w	r3, r0, r8
 8013146:	fa09 f303 	lsl.w	r3, r9, r3
 801314a:	4313      	orrs	r3, r2
 801314c:	9304      	str	r3, [sp, #16]
 801314e:	46a2      	mov	sl, r4
 8013150:	e7d2      	b.n	80130f8 <_svfiprintf_r+0xa0>
 8013152:	9b03      	ldr	r3, [sp, #12]
 8013154:	1d19      	adds	r1, r3, #4
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	9103      	str	r1, [sp, #12]
 801315a:	2b00      	cmp	r3, #0
 801315c:	bfbb      	ittet	lt
 801315e:	425b      	neglt	r3, r3
 8013160:	f042 0202 	orrlt.w	r2, r2, #2
 8013164:	9307      	strge	r3, [sp, #28]
 8013166:	9307      	strlt	r3, [sp, #28]
 8013168:	bfb8      	it	lt
 801316a:	9204      	strlt	r2, [sp, #16]
 801316c:	7823      	ldrb	r3, [r4, #0]
 801316e:	2b2e      	cmp	r3, #46	@ 0x2e
 8013170:	d10a      	bne.n	8013188 <_svfiprintf_r+0x130>
 8013172:	7863      	ldrb	r3, [r4, #1]
 8013174:	2b2a      	cmp	r3, #42	@ 0x2a
 8013176:	d132      	bne.n	80131de <_svfiprintf_r+0x186>
 8013178:	9b03      	ldr	r3, [sp, #12]
 801317a:	1d1a      	adds	r2, r3, #4
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	9203      	str	r2, [sp, #12]
 8013180:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013184:	3402      	adds	r4, #2
 8013186:	9305      	str	r3, [sp, #20]
 8013188:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801324c <_svfiprintf_r+0x1f4>
 801318c:	7821      	ldrb	r1, [r4, #0]
 801318e:	2203      	movs	r2, #3
 8013190:	4650      	mov	r0, sl
 8013192:	f7ed f8bd 	bl	8000310 <memchr>
 8013196:	b138      	cbz	r0, 80131a8 <_svfiprintf_r+0x150>
 8013198:	9b04      	ldr	r3, [sp, #16]
 801319a:	eba0 000a 	sub.w	r0, r0, sl
 801319e:	2240      	movs	r2, #64	@ 0x40
 80131a0:	4082      	lsls	r2, r0
 80131a2:	4313      	orrs	r3, r2
 80131a4:	3401      	adds	r4, #1
 80131a6:	9304      	str	r3, [sp, #16]
 80131a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131ac:	4824      	ldr	r0, [pc, #144]	@ (8013240 <_svfiprintf_r+0x1e8>)
 80131ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80131b2:	2206      	movs	r2, #6
 80131b4:	f7ed f8ac 	bl	8000310 <memchr>
 80131b8:	2800      	cmp	r0, #0
 80131ba:	d036      	beq.n	801322a <_svfiprintf_r+0x1d2>
 80131bc:	4b21      	ldr	r3, [pc, #132]	@ (8013244 <_svfiprintf_r+0x1ec>)
 80131be:	bb1b      	cbnz	r3, 8013208 <_svfiprintf_r+0x1b0>
 80131c0:	9b03      	ldr	r3, [sp, #12]
 80131c2:	3307      	adds	r3, #7
 80131c4:	f023 0307 	bic.w	r3, r3, #7
 80131c8:	3308      	adds	r3, #8
 80131ca:	9303      	str	r3, [sp, #12]
 80131cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80131ce:	4433      	add	r3, r6
 80131d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80131d2:	e76a      	b.n	80130aa <_svfiprintf_r+0x52>
 80131d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80131d8:	460c      	mov	r4, r1
 80131da:	2001      	movs	r0, #1
 80131dc:	e7a8      	b.n	8013130 <_svfiprintf_r+0xd8>
 80131de:	2300      	movs	r3, #0
 80131e0:	3401      	adds	r4, #1
 80131e2:	9305      	str	r3, [sp, #20]
 80131e4:	4619      	mov	r1, r3
 80131e6:	f04f 0c0a 	mov.w	ip, #10
 80131ea:	4620      	mov	r0, r4
 80131ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80131f0:	3a30      	subs	r2, #48	@ 0x30
 80131f2:	2a09      	cmp	r2, #9
 80131f4:	d903      	bls.n	80131fe <_svfiprintf_r+0x1a6>
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d0c6      	beq.n	8013188 <_svfiprintf_r+0x130>
 80131fa:	9105      	str	r1, [sp, #20]
 80131fc:	e7c4      	b.n	8013188 <_svfiprintf_r+0x130>
 80131fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8013202:	4604      	mov	r4, r0
 8013204:	2301      	movs	r3, #1
 8013206:	e7f0      	b.n	80131ea <_svfiprintf_r+0x192>
 8013208:	ab03      	add	r3, sp, #12
 801320a:	9300      	str	r3, [sp, #0]
 801320c:	462a      	mov	r2, r5
 801320e:	4b0e      	ldr	r3, [pc, #56]	@ (8013248 <_svfiprintf_r+0x1f0>)
 8013210:	a904      	add	r1, sp, #16
 8013212:	4638      	mov	r0, r7
 8013214:	f7fd ff00 	bl	8011018 <_printf_float>
 8013218:	1c42      	adds	r2, r0, #1
 801321a:	4606      	mov	r6, r0
 801321c:	d1d6      	bne.n	80131cc <_svfiprintf_r+0x174>
 801321e:	89ab      	ldrh	r3, [r5, #12]
 8013220:	065b      	lsls	r3, r3, #25
 8013222:	f53f af2d 	bmi.w	8013080 <_svfiprintf_r+0x28>
 8013226:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013228:	e72c      	b.n	8013084 <_svfiprintf_r+0x2c>
 801322a:	ab03      	add	r3, sp, #12
 801322c:	9300      	str	r3, [sp, #0]
 801322e:	462a      	mov	r2, r5
 8013230:	4b05      	ldr	r3, [pc, #20]	@ (8013248 <_svfiprintf_r+0x1f0>)
 8013232:	a904      	add	r1, sp, #16
 8013234:	4638      	mov	r0, r7
 8013236:	f7fe f977 	bl	8011528 <_printf_i>
 801323a:	e7ed      	b.n	8013218 <_svfiprintf_r+0x1c0>
 801323c:	08014738 	.word	0x08014738
 8013240:	08014742 	.word	0x08014742
 8013244:	08011019 	.word	0x08011019
 8013248:	08012fa1 	.word	0x08012fa1
 801324c:	0801473e 	.word	0x0801473e

08013250 <__sflush_r>:
 8013250:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013258:	0716      	lsls	r6, r2, #28
 801325a:	4605      	mov	r5, r0
 801325c:	460c      	mov	r4, r1
 801325e:	d454      	bmi.n	801330a <__sflush_r+0xba>
 8013260:	684b      	ldr	r3, [r1, #4]
 8013262:	2b00      	cmp	r3, #0
 8013264:	dc02      	bgt.n	801326c <__sflush_r+0x1c>
 8013266:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013268:	2b00      	cmp	r3, #0
 801326a:	dd48      	ble.n	80132fe <__sflush_r+0xae>
 801326c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801326e:	2e00      	cmp	r6, #0
 8013270:	d045      	beq.n	80132fe <__sflush_r+0xae>
 8013272:	2300      	movs	r3, #0
 8013274:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013278:	682f      	ldr	r7, [r5, #0]
 801327a:	6a21      	ldr	r1, [r4, #32]
 801327c:	602b      	str	r3, [r5, #0]
 801327e:	d030      	beq.n	80132e2 <__sflush_r+0x92>
 8013280:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013282:	89a3      	ldrh	r3, [r4, #12]
 8013284:	0759      	lsls	r1, r3, #29
 8013286:	d505      	bpl.n	8013294 <__sflush_r+0x44>
 8013288:	6863      	ldr	r3, [r4, #4]
 801328a:	1ad2      	subs	r2, r2, r3
 801328c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801328e:	b10b      	cbz	r3, 8013294 <__sflush_r+0x44>
 8013290:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013292:	1ad2      	subs	r2, r2, r3
 8013294:	2300      	movs	r3, #0
 8013296:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013298:	6a21      	ldr	r1, [r4, #32]
 801329a:	4628      	mov	r0, r5
 801329c:	47b0      	blx	r6
 801329e:	1c43      	adds	r3, r0, #1
 80132a0:	89a3      	ldrh	r3, [r4, #12]
 80132a2:	d106      	bne.n	80132b2 <__sflush_r+0x62>
 80132a4:	6829      	ldr	r1, [r5, #0]
 80132a6:	291d      	cmp	r1, #29
 80132a8:	d82b      	bhi.n	8013302 <__sflush_r+0xb2>
 80132aa:	4a2a      	ldr	r2, [pc, #168]	@ (8013354 <__sflush_r+0x104>)
 80132ac:	410a      	asrs	r2, r1
 80132ae:	07d6      	lsls	r6, r2, #31
 80132b0:	d427      	bmi.n	8013302 <__sflush_r+0xb2>
 80132b2:	2200      	movs	r2, #0
 80132b4:	6062      	str	r2, [r4, #4]
 80132b6:	04d9      	lsls	r1, r3, #19
 80132b8:	6922      	ldr	r2, [r4, #16]
 80132ba:	6022      	str	r2, [r4, #0]
 80132bc:	d504      	bpl.n	80132c8 <__sflush_r+0x78>
 80132be:	1c42      	adds	r2, r0, #1
 80132c0:	d101      	bne.n	80132c6 <__sflush_r+0x76>
 80132c2:	682b      	ldr	r3, [r5, #0]
 80132c4:	b903      	cbnz	r3, 80132c8 <__sflush_r+0x78>
 80132c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80132c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80132ca:	602f      	str	r7, [r5, #0]
 80132cc:	b1b9      	cbz	r1, 80132fe <__sflush_r+0xae>
 80132ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80132d2:	4299      	cmp	r1, r3
 80132d4:	d002      	beq.n	80132dc <__sflush_r+0x8c>
 80132d6:	4628      	mov	r0, r5
 80132d8:	f7ff f9e0 	bl	801269c <_free_r>
 80132dc:	2300      	movs	r3, #0
 80132de:	6363      	str	r3, [r4, #52]	@ 0x34
 80132e0:	e00d      	b.n	80132fe <__sflush_r+0xae>
 80132e2:	2301      	movs	r3, #1
 80132e4:	4628      	mov	r0, r5
 80132e6:	47b0      	blx	r6
 80132e8:	4602      	mov	r2, r0
 80132ea:	1c50      	adds	r0, r2, #1
 80132ec:	d1c9      	bne.n	8013282 <__sflush_r+0x32>
 80132ee:	682b      	ldr	r3, [r5, #0]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d0c6      	beq.n	8013282 <__sflush_r+0x32>
 80132f4:	2b1d      	cmp	r3, #29
 80132f6:	d001      	beq.n	80132fc <__sflush_r+0xac>
 80132f8:	2b16      	cmp	r3, #22
 80132fa:	d11e      	bne.n	801333a <__sflush_r+0xea>
 80132fc:	602f      	str	r7, [r5, #0]
 80132fe:	2000      	movs	r0, #0
 8013300:	e022      	b.n	8013348 <__sflush_r+0xf8>
 8013302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013306:	b21b      	sxth	r3, r3
 8013308:	e01b      	b.n	8013342 <__sflush_r+0xf2>
 801330a:	690f      	ldr	r7, [r1, #16]
 801330c:	2f00      	cmp	r7, #0
 801330e:	d0f6      	beq.n	80132fe <__sflush_r+0xae>
 8013310:	0793      	lsls	r3, r2, #30
 8013312:	680e      	ldr	r6, [r1, #0]
 8013314:	bf08      	it	eq
 8013316:	694b      	ldreq	r3, [r1, #20]
 8013318:	600f      	str	r7, [r1, #0]
 801331a:	bf18      	it	ne
 801331c:	2300      	movne	r3, #0
 801331e:	eba6 0807 	sub.w	r8, r6, r7
 8013322:	608b      	str	r3, [r1, #8]
 8013324:	f1b8 0f00 	cmp.w	r8, #0
 8013328:	dde9      	ble.n	80132fe <__sflush_r+0xae>
 801332a:	6a21      	ldr	r1, [r4, #32]
 801332c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801332e:	4643      	mov	r3, r8
 8013330:	463a      	mov	r2, r7
 8013332:	4628      	mov	r0, r5
 8013334:	47b0      	blx	r6
 8013336:	2800      	cmp	r0, #0
 8013338:	dc08      	bgt.n	801334c <__sflush_r+0xfc>
 801333a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801333e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013342:	81a3      	strh	r3, [r4, #12]
 8013344:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801334c:	4407      	add	r7, r0
 801334e:	eba8 0800 	sub.w	r8, r8, r0
 8013352:	e7e7      	b.n	8013324 <__sflush_r+0xd4>
 8013354:	dfbffffe 	.word	0xdfbffffe

08013358 <_fflush_r>:
 8013358:	b538      	push	{r3, r4, r5, lr}
 801335a:	690b      	ldr	r3, [r1, #16]
 801335c:	4605      	mov	r5, r0
 801335e:	460c      	mov	r4, r1
 8013360:	b913      	cbnz	r3, 8013368 <_fflush_r+0x10>
 8013362:	2500      	movs	r5, #0
 8013364:	4628      	mov	r0, r5
 8013366:	bd38      	pop	{r3, r4, r5, pc}
 8013368:	b118      	cbz	r0, 8013372 <_fflush_r+0x1a>
 801336a:	6a03      	ldr	r3, [r0, #32]
 801336c:	b90b      	cbnz	r3, 8013372 <_fflush_r+0x1a>
 801336e:	f7fe fa87 	bl	8011880 <__sinit>
 8013372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d0f3      	beq.n	8013362 <_fflush_r+0xa>
 801337a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801337c:	07d0      	lsls	r0, r2, #31
 801337e:	d404      	bmi.n	801338a <_fflush_r+0x32>
 8013380:	0599      	lsls	r1, r3, #22
 8013382:	d402      	bmi.n	801338a <_fflush_r+0x32>
 8013384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013386:	f7fe fba0 	bl	8011aca <__retarget_lock_acquire_recursive>
 801338a:	4628      	mov	r0, r5
 801338c:	4621      	mov	r1, r4
 801338e:	f7ff ff5f 	bl	8013250 <__sflush_r>
 8013392:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013394:	07da      	lsls	r2, r3, #31
 8013396:	4605      	mov	r5, r0
 8013398:	d4e4      	bmi.n	8013364 <_fflush_r+0xc>
 801339a:	89a3      	ldrh	r3, [r4, #12]
 801339c:	059b      	lsls	r3, r3, #22
 801339e:	d4e1      	bmi.n	8013364 <_fflush_r+0xc>
 80133a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80133a2:	f7fe fb93 	bl	8011acc <__retarget_lock_release_recursive>
 80133a6:	e7dd      	b.n	8013364 <_fflush_r+0xc>

080133a8 <memmove>:
 80133a8:	4288      	cmp	r0, r1
 80133aa:	b510      	push	{r4, lr}
 80133ac:	eb01 0402 	add.w	r4, r1, r2
 80133b0:	d902      	bls.n	80133b8 <memmove+0x10>
 80133b2:	4284      	cmp	r4, r0
 80133b4:	4623      	mov	r3, r4
 80133b6:	d807      	bhi.n	80133c8 <memmove+0x20>
 80133b8:	1e43      	subs	r3, r0, #1
 80133ba:	42a1      	cmp	r1, r4
 80133bc:	d008      	beq.n	80133d0 <memmove+0x28>
 80133be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80133c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80133c6:	e7f8      	b.n	80133ba <memmove+0x12>
 80133c8:	4402      	add	r2, r0
 80133ca:	4601      	mov	r1, r0
 80133cc:	428a      	cmp	r2, r1
 80133ce:	d100      	bne.n	80133d2 <memmove+0x2a>
 80133d0:	bd10      	pop	{r4, pc}
 80133d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80133d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80133da:	e7f7      	b.n	80133cc <memmove+0x24>

080133dc <_sbrk_r>:
 80133dc:	b538      	push	{r3, r4, r5, lr}
 80133de:	4d06      	ldr	r5, [pc, #24]	@ (80133f8 <_sbrk_r+0x1c>)
 80133e0:	2300      	movs	r3, #0
 80133e2:	4604      	mov	r4, r0
 80133e4:	4608      	mov	r0, r1
 80133e6:	602b      	str	r3, [r5, #0]
 80133e8:	f7f0 fea0 	bl	800412c <_sbrk>
 80133ec:	1c43      	adds	r3, r0, #1
 80133ee:	d102      	bne.n	80133f6 <_sbrk_r+0x1a>
 80133f0:	682b      	ldr	r3, [r5, #0]
 80133f2:	b103      	cbz	r3, 80133f6 <_sbrk_r+0x1a>
 80133f4:	6023      	str	r3, [r4, #0]
 80133f6:	bd38      	pop	{r3, r4, r5, pc}
 80133f8:	240011ac 	.word	0x240011ac

080133fc <memcpy>:
 80133fc:	440a      	add	r2, r1
 80133fe:	4291      	cmp	r1, r2
 8013400:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8013404:	d100      	bne.n	8013408 <memcpy+0xc>
 8013406:	4770      	bx	lr
 8013408:	b510      	push	{r4, lr}
 801340a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801340e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013412:	4291      	cmp	r1, r2
 8013414:	d1f9      	bne.n	801340a <memcpy+0xe>
 8013416:	bd10      	pop	{r4, pc}

08013418 <__assert_func>:
 8013418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801341a:	4614      	mov	r4, r2
 801341c:	461a      	mov	r2, r3
 801341e:	4b09      	ldr	r3, [pc, #36]	@ (8013444 <__assert_func+0x2c>)
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	4605      	mov	r5, r0
 8013424:	68d8      	ldr	r0, [r3, #12]
 8013426:	b954      	cbnz	r4, 801343e <__assert_func+0x26>
 8013428:	4b07      	ldr	r3, [pc, #28]	@ (8013448 <__assert_func+0x30>)
 801342a:	461c      	mov	r4, r3
 801342c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013430:	9100      	str	r1, [sp, #0]
 8013432:	462b      	mov	r3, r5
 8013434:	4905      	ldr	r1, [pc, #20]	@ (801344c <__assert_func+0x34>)
 8013436:	f000 f86f 	bl	8013518 <fiprintf>
 801343a:	f000 f87f 	bl	801353c <abort>
 801343e:	4b04      	ldr	r3, [pc, #16]	@ (8013450 <__assert_func+0x38>)
 8013440:	e7f4      	b.n	801342c <__assert_func+0x14>
 8013442:	bf00      	nop
 8013444:	24000054 	.word	0x24000054
 8013448:	0801478e 	.word	0x0801478e
 801344c:	08014760 	.word	0x08014760
 8013450:	08014753 	.word	0x08014753

08013454 <_calloc_r>:
 8013454:	b570      	push	{r4, r5, r6, lr}
 8013456:	fba1 5402 	umull	r5, r4, r1, r2
 801345a:	b93c      	cbnz	r4, 801346c <_calloc_r+0x18>
 801345c:	4629      	mov	r1, r5
 801345e:	f7ff f991 	bl	8012784 <_malloc_r>
 8013462:	4606      	mov	r6, r0
 8013464:	b928      	cbnz	r0, 8013472 <_calloc_r+0x1e>
 8013466:	2600      	movs	r6, #0
 8013468:	4630      	mov	r0, r6
 801346a:	bd70      	pop	{r4, r5, r6, pc}
 801346c:	220c      	movs	r2, #12
 801346e:	6002      	str	r2, [r0, #0]
 8013470:	e7f9      	b.n	8013466 <_calloc_r+0x12>
 8013472:	462a      	mov	r2, r5
 8013474:	4621      	mov	r1, r4
 8013476:	f7fe fa9c 	bl	80119b2 <memset>
 801347a:	e7f5      	b.n	8013468 <_calloc_r+0x14>

0801347c <__ascii_mbtowc>:
 801347c:	b082      	sub	sp, #8
 801347e:	b901      	cbnz	r1, 8013482 <__ascii_mbtowc+0x6>
 8013480:	a901      	add	r1, sp, #4
 8013482:	b142      	cbz	r2, 8013496 <__ascii_mbtowc+0x1a>
 8013484:	b14b      	cbz	r3, 801349a <__ascii_mbtowc+0x1e>
 8013486:	7813      	ldrb	r3, [r2, #0]
 8013488:	600b      	str	r3, [r1, #0]
 801348a:	7812      	ldrb	r2, [r2, #0]
 801348c:	1e10      	subs	r0, r2, #0
 801348e:	bf18      	it	ne
 8013490:	2001      	movne	r0, #1
 8013492:	b002      	add	sp, #8
 8013494:	4770      	bx	lr
 8013496:	4610      	mov	r0, r2
 8013498:	e7fb      	b.n	8013492 <__ascii_mbtowc+0x16>
 801349a:	f06f 0001 	mvn.w	r0, #1
 801349e:	e7f8      	b.n	8013492 <__ascii_mbtowc+0x16>

080134a0 <_realloc_r>:
 80134a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134a4:	4680      	mov	r8, r0
 80134a6:	4615      	mov	r5, r2
 80134a8:	460c      	mov	r4, r1
 80134aa:	b921      	cbnz	r1, 80134b6 <_realloc_r+0x16>
 80134ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80134b0:	4611      	mov	r1, r2
 80134b2:	f7ff b967 	b.w	8012784 <_malloc_r>
 80134b6:	b92a      	cbnz	r2, 80134c4 <_realloc_r+0x24>
 80134b8:	f7ff f8f0 	bl	801269c <_free_r>
 80134bc:	2400      	movs	r4, #0
 80134be:	4620      	mov	r0, r4
 80134c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134c4:	f000 f841 	bl	801354a <_malloc_usable_size_r>
 80134c8:	4285      	cmp	r5, r0
 80134ca:	4606      	mov	r6, r0
 80134cc:	d802      	bhi.n	80134d4 <_realloc_r+0x34>
 80134ce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80134d2:	d8f4      	bhi.n	80134be <_realloc_r+0x1e>
 80134d4:	4629      	mov	r1, r5
 80134d6:	4640      	mov	r0, r8
 80134d8:	f7ff f954 	bl	8012784 <_malloc_r>
 80134dc:	4607      	mov	r7, r0
 80134de:	2800      	cmp	r0, #0
 80134e0:	d0ec      	beq.n	80134bc <_realloc_r+0x1c>
 80134e2:	42b5      	cmp	r5, r6
 80134e4:	462a      	mov	r2, r5
 80134e6:	4621      	mov	r1, r4
 80134e8:	bf28      	it	cs
 80134ea:	4632      	movcs	r2, r6
 80134ec:	f7ff ff86 	bl	80133fc <memcpy>
 80134f0:	4621      	mov	r1, r4
 80134f2:	4640      	mov	r0, r8
 80134f4:	f7ff f8d2 	bl	801269c <_free_r>
 80134f8:	463c      	mov	r4, r7
 80134fa:	e7e0      	b.n	80134be <_realloc_r+0x1e>

080134fc <__ascii_wctomb>:
 80134fc:	4603      	mov	r3, r0
 80134fe:	4608      	mov	r0, r1
 8013500:	b141      	cbz	r1, 8013514 <__ascii_wctomb+0x18>
 8013502:	2aff      	cmp	r2, #255	@ 0xff
 8013504:	d904      	bls.n	8013510 <__ascii_wctomb+0x14>
 8013506:	228a      	movs	r2, #138	@ 0x8a
 8013508:	601a      	str	r2, [r3, #0]
 801350a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801350e:	4770      	bx	lr
 8013510:	700a      	strb	r2, [r1, #0]
 8013512:	2001      	movs	r0, #1
 8013514:	4770      	bx	lr
	...

08013518 <fiprintf>:
 8013518:	b40e      	push	{r1, r2, r3}
 801351a:	b503      	push	{r0, r1, lr}
 801351c:	4601      	mov	r1, r0
 801351e:	ab03      	add	r3, sp, #12
 8013520:	4805      	ldr	r0, [pc, #20]	@ (8013538 <fiprintf+0x20>)
 8013522:	f853 2b04 	ldr.w	r2, [r3], #4
 8013526:	6800      	ldr	r0, [r0, #0]
 8013528:	9301      	str	r3, [sp, #4]
 801352a:	f000 f83f 	bl	80135ac <_vfiprintf_r>
 801352e:	b002      	add	sp, #8
 8013530:	f85d eb04 	ldr.w	lr, [sp], #4
 8013534:	b003      	add	sp, #12
 8013536:	4770      	bx	lr
 8013538:	24000054 	.word	0x24000054

0801353c <abort>:
 801353c:	b508      	push	{r3, lr}
 801353e:	2006      	movs	r0, #6
 8013540:	f000 fa08 	bl	8013954 <raise>
 8013544:	2001      	movs	r0, #1
 8013546:	f7f0 fd79 	bl	800403c <_exit>

0801354a <_malloc_usable_size_r>:
 801354a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801354e:	1f18      	subs	r0, r3, #4
 8013550:	2b00      	cmp	r3, #0
 8013552:	bfbc      	itt	lt
 8013554:	580b      	ldrlt	r3, [r1, r0]
 8013556:	18c0      	addlt	r0, r0, r3
 8013558:	4770      	bx	lr

0801355a <__sfputc_r>:
 801355a:	6893      	ldr	r3, [r2, #8]
 801355c:	3b01      	subs	r3, #1
 801355e:	2b00      	cmp	r3, #0
 8013560:	b410      	push	{r4}
 8013562:	6093      	str	r3, [r2, #8]
 8013564:	da08      	bge.n	8013578 <__sfputc_r+0x1e>
 8013566:	6994      	ldr	r4, [r2, #24]
 8013568:	42a3      	cmp	r3, r4
 801356a:	db01      	blt.n	8013570 <__sfputc_r+0x16>
 801356c:	290a      	cmp	r1, #10
 801356e:	d103      	bne.n	8013578 <__sfputc_r+0x1e>
 8013570:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013574:	f000 b932 	b.w	80137dc <__swbuf_r>
 8013578:	6813      	ldr	r3, [r2, #0]
 801357a:	1c58      	adds	r0, r3, #1
 801357c:	6010      	str	r0, [r2, #0]
 801357e:	7019      	strb	r1, [r3, #0]
 8013580:	4608      	mov	r0, r1
 8013582:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013586:	4770      	bx	lr

08013588 <__sfputs_r>:
 8013588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801358a:	4606      	mov	r6, r0
 801358c:	460f      	mov	r7, r1
 801358e:	4614      	mov	r4, r2
 8013590:	18d5      	adds	r5, r2, r3
 8013592:	42ac      	cmp	r4, r5
 8013594:	d101      	bne.n	801359a <__sfputs_r+0x12>
 8013596:	2000      	movs	r0, #0
 8013598:	e007      	b.n	80135aa <__sfputs_r+0x22>
 801359a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801359e:	463a      	mov	r2, r7
 80135a0:	4630      	mov	r0, r6
 80135a2:	f7ff ffda 	bl	801355a <__sfputc_r>
 80135a6:	1c43      	adds	r3, r0, #1
 80135a8:	d1f3      	bne.n	8013592 <__sfputs_r+0xa>
 80135aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080135ac <_vfiprintf_r>:
 80135ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135b0:	460d      	mov	r5, r1
 80135b2:	b09d      	sub	sp, #116	@ 0x74
 80135b4:	4614      	mov	r4, r2
 80135b6:	4698      	mov	r8, r3
 80135b8:	4606      	mov	r6, r0
 80135ba:	b118      	cbz	r0, 80135c4 <_vfiprintf_r+0x18>
 80135bc:	6a03      	ldr	r3, [r0, #32]
 80135be:	b90b      	cbnz	r3, 80135c4 <_vfiprintf_r+0x18>
 80135c0:	f7fe f95e 	bl	8011880 <__sinit>
 80135c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80135c6:	07d9      	lsls	r1, r3, #31
 80135c8:	d405      	bmi.n	80135d6 <_vfiprintf_r+0x2a>
 80135ca:	89ab      	ldrh	r3, [r5, #12]
 80135cc:	059a      	lsls	r2, r3, #22
 80135ce:	d402      	bmi.n	80135d6 <_vfiprintf_r+0x2a>
 80135d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80135d2:	f7fe fa7a 	bl	8011aca <__retarget_lock_acquire_recursive>
 80135d6:	89ab      	ldrh	r3, [r5, #12]
 80135d8:	071b      	lsls	r3, r3, #28
 80135da:	d501      	bpl.n	80135e0 <_vfiprintf_r+0x34>
 80135dc:	692b      	ldr	r3, [r5, #16]
 80135de:	b99b      	cbnz	r3, 8013608 <_vfiprintf_r+0x5c>
 80135e0:	4629      	mov	r1, r5
 80135e2:	4630      	mov	r0, r6
 80135e4:	f000 f938 	bl	8013858 <__swsetup_r>
 80135e8:	b170      	cbz	r0, 8013608 <_vfiprintf_r+0x5c>
 80135ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80135ec:	07dc      	lsls	r4, r3, #31
 80135ee:	d504      	bpl.n	80135fa <_vfiprintf_r+0x4e>
 80135f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80135f4:	b01d      	add	sp, #116	@ 0x74
 80135f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135fa:	89ab      	ldrh	r3, [r5, #12]
 80135fc:	0598      	lsls	r0, r3, #22
 80135fe:	d4f7      	bmi.n	80135f0 <_vfiprintf_r+0x44>
 8013600:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013602:	f7fe fa63 	bl	8011acc <__retarget_lock_release_recursive>
 8013606:	e7f3      	b.n	80135f0 <_vfiprintf_r+0x44>
 8013608:	2300      	movs	r3, #0
 801360a:	9309      	str	r3, [sp, #36]	@ 0x24
 801360c:	2320      	movs	r3, #32
 801360e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013612:	f8cd 800c 	str.w	r8, [sp, #12]
 8013616:	2330      	movs	r3, #48	@ 0x30
 8013618:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80137c8 <_vfiprintf_r+0x21c>
 801361c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013620:	f04f 0901 	mov.w	r9, #1
 8013624:	4623      	mov	r3, r4
 8013626:	469a      	mov	sl, r3
 8013628:	f813 2b01 	ldrb.w	r2, [r3], #1
 801362c:	b10a      	cbz	r2, 8013632 <_vfiprintf_r+0x86>
 801362e:	2a25      	cmp	r2, #37	@ 0x25
 8013630:	d1f9      	bne.n	8013626 <_vfiprintf_r+0x7a>
 8013632:	ebba 0b04 	subs.w	fp, sl, r4
 8013636:	d00b      	beq.n	8013650 <_vfiprintf_r+0xa4>
 8013638:	465b      	mov	r3, fp
 801363a:	4622      	mov	r2, r4
 801363c:	4629      	mov	r1, r5
 801363e:	4630      	mov	r0, r6
 8013640:	f7ff ffa2 	bl	8013588 <__sfputs_r>
 8013644:	3001      	adds	r0, #1
 8013646:	f000 80a7 	beq.w	8013798 <_vfiprintf_r+0x1ec>
 801364a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801364c:	445a      	add	r2, fp
 801364e:	9209      	str	r2, [sp, #36]	@ 0x24
 8013650:	f89a 3000 	ldrb.w	r3, [sl]
 8013654:	2b00      	cmp	r3, #0
 8013656:	f000 809f 	beq.w	8013798 <_vfiprintf_r+0x1ec>
 801365a:	2300      	movs	r3, #0
 801365c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013660:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013664:	f10a 0a01 	add.w	sl, sl, #1
 8013668:	9304      	str	r3, [sp, #16]
 801366a:	9307      	str	r3, [sp, #28]
 801366c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013670:	931a      	str	r3, [sp, #104]	@ 0x68
 8013672:	4654      	mov	r4, sl
 8013674:	2205      	movs	r2, #5
 8013676:	f814 1b01 	ldrb.w	r1, [r4], #1
 801367a:	4853      	ldr	r0, [pc, #332]	@ (80137c8 <_vfiprintf_r+0x21c>)
 801367c:	f7ec fe48 	bl	8000310 <memchr>
 8013680:	9a04      	ldr	r2, [sp, #16]
 8013682:	b9d8      	cbnz	r0, 80136bc <_vfiprintf_r+0x110>
 8013684:	06d1      	lsls	r1, r2, #27
 8013686:	bf44      	itt	mi
 8013688:	2320      	movmi	r3, #32
 801368a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801368e:	0713      	lsls	r3, r2, #28
 8013690:	bf44      	itt	mi
 8013692:	232b      	movmi	r3, #43	@ 0x2b
 8013694:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013698:	f89a 3000 	ldrb.w	r3, [sl]
 801369c:	2b2a      	cmp	r3, #42	@ 0x2a
 801369e:	d015      	beq.n	80136cc <_vfiprintf_r+0x120>
 80136a0:	9a07      	ldr	r2, [sp, #28]
 80136a2:	4654      	mov	r4, sl
 80136a4:	2000      	movs	r0, #0
 80136a6:	f04f 0c0a 	mov.w	ip, #10
 80136aa:	4621      	mov	r1, r4
 80136ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80136b0:	3b30      	subs	r3, #48	@ 0x30
 80136b2:	2b09      	cmp	r3, #9
 80136b4:	d94b      	bls.n	801374e <_vfiprintf_r+0x1a2>
 80136b6:	b1b0      	cbz	r0, 80136e6 <_vfiprintf_r+0x13a>
 80136b8:	9207      	str	r2, [sp, #28]
 80136ba:	e014      	b.n	80136e6 <_vfiprintf_r+0x13a>
 80136bc:	eba0 0308 	sub.w	r3, r0, r8
 80136c0:	fa09 f303 	lsl.w	r3, r9, r3
 80136c4:	4313      	orrs	r3, r2
 80136c6:	9304      	str	r3, [sp, #16]
 80136c8:	46a2      	mov	sl, r4
 80136ca:	e7d2      	b.n	8013672 <_vfiprintf_r+0xc6>
 80136cc:	9b03      	ldr	r3, [sp, #12]
 80136ce:	1d19      	adds	r1, r3, #4
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	9103      	str	r1, [sp, #12]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	bfbb      	ittet	lt
 80136d8:	425b      	neglt	r3, r3
 80136da:	f042 0202 	orrlt.w	r2, r2, #2
 80136de:	9307      	strge	r3, [sp, #28]
 80136e0:	9307      	strlt	r3, [sp, #28]
 80136e2:	bfb8      	it	lt
 80136e4:	9204      	strlt	r2, [sp, #16]
 80136e6:	7823      	ldrb	r3, [r4, #0]
 80136e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80136ea:	d10a      	bne.n	8013702 <_vfiprintf_r+0x156>
 80136ec:	7863      	ldrb	r3, [r4, #1]
 80136ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80136f0:	d132      	bne.n	8013758 <_vfiprintf_r+0x1ac>
 80136f2:	9b03      	ldr	r3, [sp, #12]
 80136f4:	1d1a      	adds	r2, r3, #4
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	9203      	str	r2, [sp, #12]
 80136fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80136fe:	3402      	adds	r4, #2
 8013700:	9305      	str	r3, [sp, #20]
 8013702:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80137d8 <_vfiprintf_r+0x22c>
 8013706:	7821      	ldrb	r1, [r4, #0]
 8013708:	2203      	movs	r2, #3
 801370a:	4650      	mov	r0, sl
 801370c:	f7ec fe00 	bl	8000310 <memchr>
 8013710:	b138      	cbz	r0, 8013722 <_vfiprintf_r+0x176>
 8013712:	9b04      	ldr	r3, [sp, #16]
 8013714:	eba0 000a 	sub.w	r0, r0, sl
 8013718:	2240      	movs	r2, #64	@ 0x40
 801371a:	4082      	lsls	r2, r0
 801371c:	4313      	orrs	r3, r2
 801371e:	3401      	adds	r4, #1
 8013720:	9304      	str	r3, [sp, #16]
 8013722:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013726:	4829      	ldr	r0, [pc, #164]	@ (80137cc <_vfiprintf_r+0x220>)
 8013728:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801372c:	2206      	movs	r2, #6
 801372e:	f7ec fdef 	bl	8000310 <memchr>
 8013732:	2800      	cmp	r0, #0
 8013734:	d03f      	beq.n	80137b6 <_vfiprintf_r+0x20a>
 8013736:	4b26      	ldr	r3, [pc, #152]	@ (80137d0 <_vfiprintf_r+0x224>)
 8013738:	bb1b      	cbnz	r3, 8013782 <_vfiprintf_r+0x1d6>
 801373a:	9b03      	ldr	r3, [sp, #12]
 801373c:	3307      	adds	r3, #7
 801373e:	f023 0307 	bic.w	r3, r3, #7
 8013742:	3308      	adds	r3, #8
 8013744:	9303      	str	r3, [sp, #12]
 8013746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013748:	443b      	add	r3, r7
 801374a:	9309      	str	r3, [sp, #36]	@ 0x24
 801374c:	e76a      	b.n	8013624 <_vfiprintf_r+0x78>
 801374e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013752:	460c      	mov	r4, r1
 8013754:	2001      	movs	r0, #1
 8013756:	e7a8      	b.n	80136aa <_vfiprintf_r+0xfe>
 8013758:	2300      	movs	r3, #0
 801375a:	3401      	adds	r4, #1
 801375c:	9305      	str	r3, [sp, #20]
 801375e:	4619      	mov	r1, r3
 8013760:	f04f 0c0a 	mov.w	ip, #10
 8013764:	4620      	mov	r0, r4
 8013766:	f810 2b01 	ldrb.w	r2, [r0], #1
 801376a:	3a30      	subs	r2, #48	@ 0x30
 801376c:	2a09      	cmp	r2, #9
 801376e:	d903      	bls.n	8013778 <_vfiprintf_r+0x1cc>
 8013770:	2b00      	cmp	r3, #0
 8013772:	d0c6      	beq.n	8013702 <_vfiprintf_r+0x156>
 8013774:	9105      	str	r1, [sp, #20]
 8013776:	e7c4      	b.n	8013702 <_vfiprintf_r+0x156>
 8013778:	fb0c 2101 	mla	r1, ip, r1, r2
 801377c:	4604      	mov	r4, r0
 801377e:	2301      	movs	r3, #1
 8013780:	e7f0      	b.n	8013764 <_vfiprintf_r+0x1b8>
 8013782:	ab03      	add	r3, sp, #12
 8013784:	9300      	str	r3, [sp, #0]
 8013786:	462a      	mov	r2, r5
 8013788:	4b12      	ldr	r3, [pc, #72]	@ (80137d4 <_vfiprintf_r+0x228>)
 801378a:	a904      	add	r1, sp, #16
 801378c:	4630      	mov	r0, r6
 801378e:	f7fd fc43 	bl	8011018 <_printf_float>
 8013792:	4607      	mov	r7, r0
 8013794:	1c78      	adds	r0, r7, #1
 8013796:	d1d6      	bne.n	8013746 <_vfiprintf_r+0x19a>
 8013798:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801379a:	07d9      	lsls	r1, r3, #31
 801379c:	d405      	bmi.n	80137aa <_vfiprintf_r+0x1fe>
 801379e:	89ab      	ldrh	r3, [r5, #12]
 80137a0:	059a      	lsls	r2, r3, #22
 80137a2:	d402      	bmi.n	80137aa <_vfiprintf_r+0x1fe>
 80137a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80137a6:	f7fe f991 	bl	8011acc <__retarget_lock_release_recursive>
 80137aa:	89ab      	ldrh	r3, [r5, #12]
 80137ac:	065b      	lsls	r3, r3, #25
 80137ae:	f53f af1f 	bmi.w	80135f0 <_vfiprintf_r+0x44>
 80137b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80137b4:	e71e      	b.n	80135f4 <_vfiprintf_r+0x48>
 80137b6:	ab03      	add	r3, sp, #12
 80137b8:	9300      	str	r3, [sp, #0]
 80137ba:	462a      	mov	r2, r5
 80137bc:	4b05      	ldr	r3, [pc, #20]	@ (80137d4 <_vfiprintf_r+0x228>)
 80137be:	a904      	add	r1, sp, #16
 80137c0:	4630      	mov	r0, r6
 80137c2:	f7fd feb1 	bl	8011528 <_printf_i>
 80137c6:	e7e4      	b.n	8013792 <_vfiprintf_r+0x1e6>
 80137c8:	08014738 	.word	0x08014738
 80137cc:	08014742 	.word	0x08014742
 80137d0:	08011019 	.word	0x08011019
 80137d4:	08013589 	.word	0x08013589
 80137d8:	0801473e 	.word	0x0801473e

080137dc <__swbuf_r>:
 80137dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137de:	460e      	mov	r6, r1
 80137e0:	4614      	mov	r4, r2
 80137e2:	4605      	mov	r5, r0
 80137e4:	b118      	cbz	r0, 80137ee <__swbuf_r+0x12>
 80137e6:	6a03      	ldr	r3, [r0, #32]
 80137e8:	b90b      	cbnz	r3, 80137ee <__swbuf_r+0x12>
 80137ea:	f7fe f849 	bl	8011880 <__sinit>
 80137ee:	69a3      	ldr	r3, [r4, #24]
 80137f0:	60a3      	str	r3, [r4, #8]
 80137f2:	89a3      	ldrh	r3, [r4, #12]
 80137f4:	071a      	lsls	r2, r3, #28
 80137f6:	d501      	bpl.n	80137fc <__swbuf_r+0x20>
 80137f8:	6923      	ldr	r3, [r4, #16]
 80137fa:	b943      	cbnz	r3, 801380e <__swbuf_r+0x32>
 80137fc:	4621      	mov	r1, r4
 80137fe:	4628      	mov	r0, r5
 8013800:	f000 f82a 	bl	8013858 <__swsetup_r>
 8013804:	b118      	cbz	r0, 801380e <__swbuf_r+0x32>
 8013806:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801380a:	4638      	mov	r0, r7
 801380c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801380e:	6823      	ldr	r3, [r4, #0]
 8013810:	6922      	ldr	r2, [r4, #16]
 8013812:	1a98      	subs	r0, r3, r2
 8013814:	6963      	ldr	r3, [r4, #20]
 8013816:	b2f6      	uxtb	r6, r6
 8013818:	4283      	cmp	r3, r0
 801381a:	4637      	mov	r7, r6
 801381c:	dc05      	bgt.n	801382a <__swbuf_r+0x4e>
 801381e:	4621      	mov	r1, r4
 8013820:	4628      	mov	r0, r5
 8013822:	f7ff fd99 	bl	8013358 <_fflush_r>
 8013826:	2800      	cmp	r0, #0
 8013828:	d1ed      	bne.n	8013806 <__swbuf_r+0x2a>
 801382a:	68a3      	ldr	r3, [r4, #8]
 801382c:	3b01      	subs	r3, #1
 801382e:	60a3      	str	r3, [r4, #8]
 8013830:	6823      	ldr	r3, [r4, #0]
 8013832:	1c5a      	adds	r2, r3, #1
 8013834:	6022      	str	r2, [r4, #0]
 8013836:	701e      	strb	r6, [r3, #0]
 8013838:	6962      	ldr	r2, [r4, #20]
 801383a:	1c43      	adds	r3, r0, #1
 801383c:	429a      	cmp	r2, r3
 801383e:	d004      	beq.n	801384a <__swbuf_r+0x6e>
 8013840:	89a3      	ldrh	r3, [r4, #12]
 8013842:	07db      	lsls	r3, r3, #31
 8013844:	d5e1      	bpl.n	801380a <__swbuf_r+0x2e>
 8013846:	2e0a      	cmp	r6, #10
 8013848:	d1df      	bne.n	801380a <__swbuf_r+0x2e>
 801384a:	4621      	mov	r1, r4
 801384c:	4628      	mov	r0, r5
 801384e:	f7ff fd83 	bl	8013358 <_fflush_r>
 8013852:	2800      	cmp	r0, #0
 8013854:	d0d9      	beq.n	801380a <__swbuf_r+0x2e>
 8013856:	e7d6      	b.n	8013806 <__swbuf_r+0x2a>

08013858 <__swsetup_r>:
 8013858:	b538      	push	{r3, r4, r5, lr}
 801385a:	4b29      	ldr	r3, [pc, #164]	@ (8013900 <__swsetup_r+0xa8>)
 801385c:	4605      	mov	r5, r0
 801385e:	6818      	ldr	r0, [r3, #0]
 8013860:	460c      	mov	r4, r1
 8013862:	b118      	cbz	r0, 801386c <__swsetup_r+0x14>
 8013864:	6a03      	ldr	r3, [r0, #32]
 8013866:	b90b      	cbnz	r3, 801386c <__swsetup_r+0x14>
 8013868:	f7fe f80a 	bl	8011880 <__sinit>
 801386c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013870:	0719      	lsls	r1, r3, #28
 8013872:	d422      	bmi.n	80138ba <__swsetup_r+0x62>
 8013874:	06da      	lsls	r2, r3, #27
 8013876:	d407      	bmi.n	8013888 <__swsetup_r+0x30>
 8013878:	2209      	movs	r2, #9
 801387a:	602a      	str	r2, [r5, #0]
 801387c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013880:	81a3      	strh	r3, [r4, #12]
 8013882:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013886:	e033      	b.n	80138f0 <__swsetup_r+0x98>
 8013888:	0758      	lsls	r0, r3, #29
 801388a:	d512      	bpl.n	80138b2 <__swsetup_r+0x5a>
 801388c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801388e:	b141      	cbz	r1, 80138a2 <__swsetup_r+0x4a>
 8013890:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013894:	4299      	cmp	r1, r3
 8013896:	d002      	beq.n	801389e <__swsetup_r+0x46>
 8013898:	4628      	mov	r0, r5
 801389a:	f7fe feff 	bl	801269c <_free_r>
 801389e:	2300      	movs	r3, #0
 80138a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80138a2:	89a3      	ldrh	r3, [r4, #12]
 80138a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80138a8:	81a3      	strh	r3, [r4, #12]
 80138aa:	2300      	movs	r3, #0
 80138ac:	6063      	str	r3, [r4, #4]
 80138ae:	6923      	ldr	r3, [r4, #16]
 80138b0:	6023      	str	r3, [r4, #0]
 80138b2:	89a3      	ldrh	r3, [r4, #12]
 80138b4:	f043 0308 	orr.w	r3, r3, #8
 80138b8:	81a3      	strh	r3, [r4, #12]
 80138ba:	6923      	ldr	r3, [r4, #16]
 80138bc:	b94b      	cbnz	r3, 80138d2 <__swsetup_r+0x7a>
 80138be:	89a3      	ldrh	r3, [r4, #12]
 80138c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80138c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80138c8:	d003      	beq.n	80138d2 <__swsetup_r+0x7a>
 80138ca:	4621      	mov	r1, r4
 80138cc:	4628      	mov	r0, r5
 80138ce:	f000 f883 	bl	80139d8 <__smakebuf_r>
 80138d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80138d6:	f013 0201 	ands.w	r2, r3, #1
 80138da:	d00a      	beq.n	80138f2 <__swsetup_r+0x9a>
 80138dc:	2200      	movs	r2, #0
 80138de:	60a2      	str	r2, [r4, #8]
 80138e0:	6962      	ldr	r2, [r4, #20]
 80138e2:	4252      	negs	r2, r2
 80138e4:	61a2      	str	r2, [r4, #24]
 80138e6:	6922      	ldr	r2, [r4, #16]
 80138e8:	b942      	cbnz	r2, 80138fc <__swsetup_r+0xa4>
 80138ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80138ee:	d1c5      	bne.n	801387c <__swsetup_r+0x24>
 80138f0:	bd38      	pop	{r3, r4, r5, pc}
 80138f2:	0799      	lsls	r1, r3, #30
 80138f4:	bf58      	it	pl
 80138f6:	6962      	ldrpl	r2, [r4, #20]
 80138f8:	60a2      	str	r2, [r4, #8]
 80138fa:	e7f4      	b.n	80138e6 <__swsetup_r+0x8e>
 80138fc:	2000      	movs	r0, #0
 80138fe:	e7f7      	b.n	80138f0 <__swsetup_r+0x98>
 8013900:	24000054 	.word	0x24000054

08013904 <_raise_r>:
 8013904:	291f      	cmp	r1, #31
 8013906:	b538      	push	{r3, r4, r5, lr}
 8013908:	4605      	mov	r5, r0
 801390a:	460c      	mov	r4, r1
 801390c:	d904      	bls.n	8013918 <_raise_r+0x14>
 801390e:	2316      	movs	r3, #22
 8013910:	6003      	str	r3, [r0, #0]
 8013912:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013916:	bd38      	pop	{r3, r4, r5, pc}
 8013918:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801391a:	b112      	cbz	r2, 8013922 <_raise_r+0x1e>
 801391c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013920:	b94b      	cbnz	r3, 8013936 <_raise_r+0x32>
 8013922:	4628      	mov	r0, r5
 8013924:	f000 f830 	bl	8013988 <_getpid_r>
 8013928:	4622      	mov	r2, r4
 801392a:	4601      	mov	r1, r0
 801392c:	4628      	mov	r0, r5
 801392e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013932:	f000 b817 	b.w	8013964 <_kill_r>
 8013936:	2b01      	cmp	r3, #1
 8013938:	d00a      	beq.n	8013950 <_raise_r+0x4c>
 801393a:	1c59      	adds	r1, r3, #1
 801393c:	d103      	bne.n	8013946 <_raise_r+0x42>
 801393e:	2316      	movs	r3, #22
 8013940:	6003      	str	r3, [r0, #0]
 8013942:	2001      	movs	r0, #1
 8013944:	e7e7      	b.n	8013916 <_raise_r+0x12>
 8013946:	2100      	movs	r1, #0
 8013948:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801394c:	4620      	mov	r0, r4
 801394e:	4798      	blx	r3
 8013950:	2000      	movs	r0, #0
 8013952:	e7e0      	b.n	8013916 <_raise_r+0x12>

08013954 <raise>:
 8013954:	4b02      	ldr	r3, [pc, #8]	@ (8013960 <raise+0xc>)
 8013956:	4601      	mov	r1, r0
 8013958:	6818      	ldr	r0, [r3, #0]
 801395a:	f7ff bfd3 	b.w	8013904 <_raise_r>
 801395e:	bf00      	nop
 8013960:	24000054 	.word	0x24000054

08013964 <_kill_r>:
 8013964:	b538      	push	{r3, r4, r5, lr}
 8013966:	4d07      	ldr	r5, [pc, #28]	@ (8013984 <_kill_r+0x20>)
 8013968:	2300      	movs	r3, #0
 801396a:	4604      	mov	r4, r0
 801396c:	4608      	mov	r0, r1
 801396e:	4611      	mov	r1, r2
 8013970:	602b      	str	r3, [r5, #0]
 8013972:	f7f0 fb53 	bl	800401c <_kill>
 8013976:	1c43      	adds	r3, r0, #1
 8013978:	d102      	bne.n	8013980 <_kill_r+0x1c>
 801397a:	682b      	ldr	r3, [r5, #0]
 801397c:	b103      	cbz	r3, 8013980 <_kill_r+0x1c>
 801397e:	6023      	str	r3, [r4, #0]
 8013980:	bd38      	pop	{r3, r4, r5, pc}
 8013982:	bf00      	nop
 8013984:	240011ac 	.word	0x240011ac

08013988 <_getpid_r>:
 8013988:	f7f0 bb40 	b.w	800400c <_getpid>

0801398c <__swhatbuf_r>:
 801398c:	b570      	push	{r4, r5, r6, lr}
 801398e:	460c      	mov	r4, r1
 8013990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013994:	2900      	cmp	r1, #0
 8013996:	b096      	sub	sp, #88	@ 0x58
 8013998:	4615      	mov	r5, r2
 801399a:	461e      	mov	r6, r3
 801399c:	da0d      	bge.n	80139ba <__swhatbuf_r+0x2e>
 801399e:	89a3      	ldrh	r3, [r4, #12]
 80139a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80139a4:	f04f 0100 	mov.w	r1, #0
 80139a8:	bf14      	ite	ne
 80139aa:	2340      	movne	r3, #64	@ 0x40
 80139ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80139b0:	2000      	movs	r0, #0
 80139b2:	6031      	str	r1, [r6, #0]
 80139b4:	602b      	str	r3, [r5, #0]
 80139b6:	b016      	add	sp, #88	@ 0x58
 80139b8:	bd70      	pop	{r4, r5, r6, pc}
 80139ba:	466a      	mov	r2, sp
 80139bc:	f000 f848 	bl	8013a50 <_fstat_r>
 80139c0:	2800      	cmp	r0, #0
 80139c2:	dbec      	blt.n	801399e <__swhatbuf_r+0x12>
 80139c4:	9901      	ldr	r1, [sp, #4]
 80139c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80139ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80139ce:	4259      	negs	r1, r3
 80139d0:	4159      	adcs	r1, r3
 80139d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80139d6:	e7eb      	b.n	80139b0 <__swhatbuf_r+0x24>

080139d8 <__smakebuf_r>:
 80139d8:	898b      	ldrh	r3, [r1, #12]
 80139da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80139dc:	079d      	lsls	r5, r3, #30
 80139de:	4606      	mov	r6, r0
 80139e0:	460c      	mov	r4, r1
 80139e2:	d507      	bpl.n	80139f4 <__smakebuf_r+0x1c>
 80139e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80139e8:	6023      	str	r3, [r4, #0]
 80139ea:	6123      	str	r3, [r4, #16]
 80139ec:	2301      	movs	r3, #1
 80139ee:	6163      	str	r3, [r4, #20]
 80139f0:	b003      	add	sp, #12
 80139f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80139f4:	ab01      	add	r3, sp, #4
 80139f6:	466a      	mov	r2, sp
 80139f8:	f7ff ffc8 	bl	801398c <__swhatbuf_r>
 80139fc:	9f00      	ldr	r7, [sp, #0]
 80139fe:	4605      	mov	r5, r0
 8013a00:	4639      	mov	r1, r7
 8013a02:	4630      	mov	r0, r6
 8013a04:	f7fe febe 	bl	8012784 <_malloc_r>
 8013a08:	b948      	cbnz	r0, 8013a1e <__smakebuf_r+0x46>
 8013a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a0e:	059a      	lsls	r2, r3, #22
 8013a10:	d4ee      	bmi.n	80139f0 <__smakebuf_r+0x18>
 8013a12:	f023 0303 	bic.w	r3, r3, #3
 8013a16:	f043 0302 	orr.w	r3, r3, #2
 8013a1a:	81a3      	strh	r3, [r4, #12]
 8013a1c:	e7e2      	b.n	80139e4 <__smakebuf_r+0xc>
 8013a1e:	89a3      	ldrh	r3, [r4, #12]
 8013a20:	6020      	str	r0, [r4, #0]
 8013a22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013a26:	81a3      	strh	r3, [r4, #12]
 8013a28:	9b01      	ldr	r3, [sp, #4]
 8013a2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013a2e:	b15b      	cbz	r3, 8013a48 <__smakebuf_r+0x70>
 8013a30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013a34:	4630      	mov	r0, r6
 8013a36:	f000 f81d 	bl	8013a74 <_isatty_r>
 8013a3a:	b128      	cbz	r0, 8013a48 <__smakebuf_r+0x70>
 8013a3c:	89a3      	ldrh	r3, [r4, #12]
 8013a3e:	f023 0303 	bic.w	r3, r3, #3
 8013a42:	f043 0301 	orr.w	r3, r3, #1
 8013a46:	81a3      	strh	r3, [r4, #12]
 8013a48:	89a3      	ldrh	r3, [r4, #12]
 8013a4a:	431d      	orrs	r5, r3
 8013a4c:	81a5      	strh	r5, [r4, #12]
 8013a4e:	e7cf      	b.n	80139f0 <__smakebuf_r+0x18>

08013a50 <_fstat_r>:
 8013a50:	b538      	push	{r3, r4, r5, lr}
 8013a52:	4d07      	ldr	r5, [pc, #28]	@ (8013a70 <_fstat_r+0x20>)
 8013a54:	2300      	movs	r3, #0
 8013a56:	4604      	mov	r4, r0
 8013a58:	4608      	mov	r0, r1
 8013a5a:	4611      	mov	r1, r2
 8013a5c:	602b      	str	r3, [r5, #0]
 8013a5e:	f7f0 fb3d 	bl	80040dc <_fstat>
 8013a62:	1c43      	adds	r3, r0, #1
 8013a64:	d102      	bne.n	8013a6c <_fstat_r+0x1c>
 8013a66:	682b      	ldr	r3, [r5, #0]
 8013a68:	b103      	cbz	r3, 8013a6c <_fstat_r+0x1c>
 8013a6a:	6023      	str	r3, [r4, #0]
 8013a6c:	bd38      	pop	{r3, r4, r5, pc}
 8013a6e:	bf00      	nop
 8013a70:	240011ac 	.word	0x240011ac

08013a74 <_isatty_r>:
 8013a74:	b538      	push	{r3, r4, r5, lr}
 8013a76:	4d06      	ldr	r5, [pc, #24]	@ (8013a90 <_isatty_r+0x1c>)
 8013a78:	2300      	movs	r3, #0
 8013a7a:	4604      	mov	r4, r0
 8013a7c:	4608      	mov	r0, r1
 8013a7e:	602b      	str	r3, [r5, #0]
 8013a80:	f7f0 fb3c 	bl	80040fc <_isatty>
 8013a84:	1c43      	adds	r3, r0, #1
 8013a86:	d102      	bne.n	8013a8e <_isatty_r+0x1a>
 8013a88:	682b      	ldr	r3, [r5, #0]
 8013a8a:	b103      	cbz	r3, 8013a8e <_isatty_r+0x1a>
 8013a8c:	6023      	str	r3, [r4, #0]
 8013a8e:	bd38      	pop	{r3, r4, r5, pc}
 8013a90:	240011ac 	.word	0x240011ac

08013a94 <_init>:
 8013a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a96:	bf00      	nop
 8013a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a9a:	bc08      	pop	{r3}
 8013a9c:	469e      	mov	lr, r3
 8013a9e:	4770      	bx	lr

08013aa0 <_fini>:
 8013aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013aa2:	bf00      	nop
 8013aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013aa6:	bc08      	pop	{r3}
 8013aa8:	469e      	mov	lr, r3
 8013aaa:	4770      	bx	lr
